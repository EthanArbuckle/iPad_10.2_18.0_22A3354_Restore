uint64_t getSTActivityAttributionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__32;
  v7 = __Block_byref_object_dispose__32;
  v0 = getSTActivityAttributionClass_softClass;
  v8 = getSTActivityAttributionClass_softClass;
  if (!getSTActivityAttributionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTActivityAttributionClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSTActivityAttributionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C8275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTMediaStatusDomainPublisherClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__32;
  v7 = __Block_byref_object_dispose__32;
  v0 = getSTMediaStatusDomainPublisherClass_softClass;
  v8 = getSTMediaStatusDomainPublisherClass_softClass;
  if (!getSTMediaStatusDomainPublisherClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTMediaStatusDomainPublisherClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSTMediaStatusDomainPublisherClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C82820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNDetectFaceLandmarksRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNDetectFaceLandmarksRequestClass_softClass;
  v8 = getVNDetectFaceLandmarksRequestClass_softClass;
  if (!getVNDetectFaceLandmarksRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectFaceLandmarksRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNDetectFaceLandmarksRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C828E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNDetectFaceRectanglesRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNDetectFaceRectanglesRequestClass_softClass;
  v8 = getVNDetectFaceRectanglesRequestClass_softClass;
  if (!getVNDetectFaceRectanglesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectFaceRectanglesRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNDetectFaceRectanglesRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C829A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNProcessingDeviceClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNProcessingDeviceClass_softClass;
  v8 = getVNProcessingDeviceClass_softClass;
  if (!getVNProcessingDeviceClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNProcessingDeviceClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNProcessingDeviceClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C82A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNRecognizeFoodAndDrinkRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNRecognizeFoodAndDrinkRequestClass_softClass;
  v8 = getVNRecognizeFoodAndDrinkRequestClass_softClass;
  if (!getVNRecognizeFoodAndDrinkRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNRecognizeFoodAndDrinkRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNRecognizeFoodAndDrinkRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C82B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNSequenceRequestHandlerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNSequenceRequestHandlerClass_softClass;
  v8 = getVNSequenceRequestHandlerClass_softClass;
  if (!getVNSequenceRequestHandlerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNSequenceRequestHandlerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNSequenceRequestHandlerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2C82BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t bp_plistObjCompare2(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return bp_plistObjCompare(a1, __rev16(*a2), __rev16(*a3));
}

uint64_t configureDevice(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFArray *v7;
  const __CFBoolean *v8;
  BOOL v9;
  uint64_t v10;
  CFIndex v11;
  const void *v12;
  const void *v13;
  const void *ValueAtIndex;
  _DWORD *CameraParametersForPortType;
  const __CFDictionary *v16;
  void *v17;
  uint64_t DerivedStorage;
  char v19;
  BOOL v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  _BYTE *v31;
  int v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  _DWORD *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  const __CFNumber *v64;
  const __CFNumber *v65;
  const __CFNumber *v66;
  const __CFNumber *v67;
  const __CFNumber *v68;
  const __CFNumber *v69;
  const __CFNumber *v70;
  const __CFNumber *v71;
  _BYTE *v72;
  const __CFNumber *v73;
  _BYTE *v74;
  const __CFNumber *v75;
  _BYTE *v76;
  const __CFArray *v77;
  const __CFArray *v78;
  const __CFArray *v79;
  const __CFArray *v80;
  const __CFArray *v81;
  const __CFArray *v82;
  const __CFArray *v83;
  const __CFArray *v84;
  const __CFArray *v85;
  const __CFArray *v86;
  const __CFArray *v87;
  const __CFArray *v88;
  const __CFArray *v89;
  const __CFArray *v90;
  const __CFArray *v91;
  const __CFArray *v92;
  const __CFArray *v93;
  const __CFArray *v94;
  const __CFArray *v95;
  const __CFArray *v96;
  void *v97;
  const __CFNumber *v98;
  uint64_t v99;
  const __CFArray *v100;
  const __CFArray *v101;
  const __CFArray *v102;
  const __CFArray *v103;
  const __CFArray *v104;
  unint64_t Count;
  uint64_t v106;
  CFIndex v107;
  char *v108;
  const __CFNumber *v109;
  const __CFNumber *v110;
  const __CFNumber *v111;
  const __CFNumber *v112;
  _DWORD *v113;
  const __CFNumber *v114;
  const __CFNumber *v115;
  const __CFNumber *v116;
  const __CFNumber *v117;
  const __CFNumber *v118;
  const __CFNumber *v119;
  int v120;
  const __CFNumber *v121;
  int v122;
  const __CFNumber *v123;
  int v124;
  const __CFNumber *v125;
  const __CFNumber *v126;
  int v127;
  BOOL v128;
  int v129;
  float v130;
  float v131;
  int CameraCharacterizationData;
  unsigned int v133;
  float *v134;
  void *CaptureStreamForPortType;
  void *v136;
  CFTypeRef v137;
  const __CFArray *v138;
  const __CFDictionary *v139;
  uint64_t v140;
  const void *v141;
  uint64_t v142;
  uint64_t v143;
  CFTypeRef v144;
  uint64_t v145;
  CFTypeRef cf2;
  const __CFBoolean *BOOLean;
  const __CFDictionary *v148;
  const __CFDictionary *theDict;
  const __CFDictionary *v150;
  const __CFNumber *v151;
  unsigned int v152;
  int valuePtr[3];

  result = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return result;
  v5 = result;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06178]);
  v7 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06138]);
  v151 = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06198]);
  theDict = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06148]);
  v148 = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06140]);
  BOOLean = (const __CFBoolean *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06150]);
  v8 = (const __CFBoolean *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06180]);
  *(_QWORD *)(v5 + 18112) = 0x100000001;
  FigCFDictionaryGetIntIfPresent();
  result = FigCFDictionaryGetIntIfPresent();
  if (v8)
  {
    result = CFBooleanGetValue(v8);
    v9 = (_DWORD)result != 0;
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)(v5 + 18160) = v9;
  if (!v7)
    return result;
  result = CFArrayGetCount(v7);
  if (result < 1)
    return result;
  v10 = result;
  v11 = 0;
  v12 = (const void *)*MEMORY[0x1E0D05A40];
  v13 = (const void *)*MEMORY[0x1E0D05A20];
  v137 = (CFTypeRef)*MEMORY[0x1E0D05A50];
  v138 = v7;
  v142 = result;
  v143 = *MEMORY[0x1E0D058B8];
  v145 = *MEMORY[0x1E0D05968];
  cf2 = (CFTypeRef)*MEMORY[0x1E0D05A38];
  v141 = (const void *)*MEMORY[0x1E0D05A20];
  v144 = (CFTypeRef)*MEMORY[0x1E0D05A40];
  v139 = Value;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v11);
    result = CFEqual(ValueAtIndex, v12);
    if ((_DWORD)result)
      goto LABEL_243;
    result = CFEqual(ValueAtIndex, v13);
    if ((_DWORD)result)
      goto LABEL_243;
    CameraParametersForPortType = (_DWORD *)af_sbp_getCameraParametersForPortType();
    if (Value)
      v16 = (const __CFDictionary *)CFDictionaryGetValue(Value, ValueAtIndex);
    else
      v16 = 0;
    if (theDict)
      v150 = (const __CFDictionary *)CFDictionaryGetValue(theDict, ValueAtIndex);
    else
      v150 = 0;
    if (v148)
      v17 = (void *)CFDictionaryGetValue(v148, ValueAtIndex);
    else
      v17 = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!CameraParametersForPortType)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v32 = FigSignalErrorAt();
LABEL_238:
      v12 = v144;
      goto LABEL_239;
    }
    v140 = DerivedStorage;
    v19 = *((_BYTE *)CameraParametersForPortType + 4);
    bzero(CameraParametersForPortType, 0x4E8uLL);
    *((_BYTE *)CameraParametersForPortType + 4) = v19;
    if (ValueAtIndex)
    {
      if (CFEqual(ValueAtIndex, cf2))
        v20 = 1;
      else
        v20 = CFEqual(ValueAtIndex, v137) != 0;
      *((_BYTE *)CameraParametersForPortType + 5) = v20;
    }
    if (v16)
    {
      v21 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ToneCurvesBlack"));
      if (v21)
        CFNumberGetValue(v21, kCFNumberFloatType, CameraParametersForPortType + 3);
      v22 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ToneCurvesS0"));
      if (v22)
        CFNumberGetValue(v22, kCFNumberFloatType, CameraParametersForPortType + 4);
      v23 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ToneCurvesS1"));
      if (v23)
        CFNumberGetValue(v23, kCFNumberFloatType, CameraParametersForPortType + 5);
      v24 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ToneCurvesWhite"));
      if (v24)
        CFNumberGetValue(v24, kCFNumberFloatType, CameraParametersForPortType + 6);
      v25 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ToneCurvesLinearity"));
      if (v25)
        CFNumberGetValue(v25, kCFNumberFloatType, CameraParametersForPortType + 7);
      v26 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("SaturationMin"));
      if (v26)
        CFNumberGetValue(v26, kCFNumberFloatType, CameraParametersForPortType + 8);
      v27 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("SaturationMax"));
      if (v27)
        CFNumberGetValue(v27, kCFNumberFloatType, CameraParametersForPortType + 9);
      v28 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("AEConvergenceVideo"));
      if (v28)
        CFNumberGetValue(v28, kCFNumberSInt32Type, CameraParametersForPortType + 11);
      v29 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("AEConvergenceStill"));
      if (v29)
        CFNumberGetValue(v29, kCFNumberSInt32Type, CameraParametersForPortType + 12);
      v30 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("AELockDoNotLockLTM"));
      v31 = CameraParametersForPortType + 13;
      if (v30)
        CFNumberGetValue(v30, kCFNumberCharType, v31);
      else
        *v31 = 0;
      v33 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusScanPositions"));
      if (v33)
        CFNumberGetValue(v33, kCFNumberIntType, CameraParametersForPortType + 17);
      v34 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ContinuousAutofocusVideo"));
      if (v34)
        CFNumberGetValue(v34, kCFNumberCharType, (char *)CameraParametersForPortType + 53);
      v35 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("PeakTrackingVideoFocusSpeed"));
      if (v35)
        CFNumberGetValue(v35, kCFNumberIntType, CameraParametersForPortType + 23);
      v36 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("MatrixFocus"));
      if (v36)
        CFNumberGetValue(v36, kCFNumberIntType, CameraParametersForPortType + 21);
      v37 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusScanPeakPrediction"));
      if (v37)
        CFNumberGetValue(v37, kCFNumberIntType, CameraParametersForPortType + 18);
      v38 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("PreFlashFocusThreshold"));
      if (v38)
        CFNumberGetValue(v38, kCFNumberIntType, CameraParametersForPortType + 19);
      v39 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusScanDuringPreFlash"));
      if (v39)
        CFNumberGetValue(v39, kCFNumberIntType, CameraParametersForPortType + 20);
      v40 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("UseTapToFocusPixels"));
      if (v40)
        CFNumberGetValue(v40, kCFNumberCharType, (char *)CameraParametersForPortType + 55);
      v41 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("UseFocusNow"));
      if (v41)
        CFNumberGetValue(v41, kCFNumberCharType, CameraParametersForPortType + 14);
      v42 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FirmwareControlledAutoFocus"));
      if (v42)
        CFNumberGetValue(v42, kCFNumberCharType, (char *)CameraParametersForPortType + 58);
      v43 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusMappingKnee"));
      if (v43)
        CFNumberGetValue(v43, kCFNumberFloatType, CameraParametersForPortType + 24);
      v44 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusMappingSlope0"));
      if (v44)
        CFNumberGetValue(v44, kCFNumberFloatType, CameraParametersForPortType + 25);
      v45 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FocusMappingSlope1"));
      if (v45)
        CFNumberGetValue(v45, kCFNumberFloatType, CameraParametersForPortType + 26);
      v46 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HorizontalScanStartPosition"));
      v47 = CameraParametersForPortType + 16;
      if (v46)
        CFNumberGetValue(v46, kCFNumberIntType, v47);
      else
        *v47 = 31;
      v48 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("StillInfinityPosition"));
      if (v48)
        CFNumberGetValue(v48, kCFNumberSInt32Type, CameraParametersForPortType + 30);
      v49 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("VideoInfinityPosition"));
      if (v49)
        CFNumberGetValue(v49, kCFNumberSInt32Type, CameraParametersForPortType + 31);
      v50 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ExposureWindowSize"));
      if (v50)
        CFNumberGetValue(v50, kCFNumberFloatType, CameraParametersForPortType + 10);
      CameraParametersForPortType[228] = 1046562734;
      v51 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEMaxFaceWeight"));
      if (v51)
        CFNumberGetValue(v51, kCFNumberFloatType, CameraParametersForPortType + 229);
      v52 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAELowKeyCorrection"));
      if (v52)
        CFNumberGetValue(v52, kCFNumberFloatType, CameraParametersForPortType + 232);
      CameraParametersForPortType[230] = CameraParametersForPortType[232];
      v53 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("PanoramaFaceAELowKeyCorrection"));
      if (v53)
        CFNumberGetValue(v53, kCFNumberFloatType, CameraParametersForPortType + 230);
      v54 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEHighKeyCorrection"));
      if (v54)
        CFNumberGetValue(v54, kCFNumberFloatType, CameraParametersForPortType + 233);
      CameraParametersForPortType[231] = CameraParametersForPortType[233];
      v55 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("PanoramaFaceAEHighKeyCorrection"));
      if (v55)
        CFNumberGetValue(v55, kCFNumberFloatType, CameraParametersForPortType + 231);
      v56 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEDarkOutlier"));
      if (v56)
        CFNumberGetValue(v56, kCFNumberFloatType, CameraParametersForPortType + 237);
      v57 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEBrightOutlier"));
      if (v57)
        CFNumberGetValue(v57, kCFNumberFloatType, CameraParametersForPortType + 238);
      v58 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEVariance"));
      if (v58)
        CFNumberGetValue(v58, kCFNumberFloatType, CameraParametersForPortType + 239);
      v59 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAELowQuantile"));
      if (v59)
        CFNumberGetValue(v59, kCFNumberFloatType, CameraParametersForPortType + 234);
      v60 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAECenterQuantile"));
      if (v60)
        CFNumberGetValue(v60, kCFNumberFloatType, CameraParametersForPortType + 235);
      v61 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("FaceAEHighQuantile"));
      if (v61)
        CFNumberGetValue(v61, kCFNumberFloatType, CameraParametersForPortType + 236);
      v62 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaMaxIntegrationTime"));
      if (v62)
        CFNumberGetValue(v62, kCFNumberSInt32Type, CameraParametersForPortType + 240);
      v63 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEMaxGain"));
      if (v63)
        CFNumberGetValue(v63, kCFNumberSInt32Type, CameraParametersForPortType + 241);
      v64 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEMinGain"));
      if (v64)
        CFNumberGetValue(v64, kCFNumberSInt32Type, CameraParametersForPortType + 242);
      v65 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEGainThresholdForFlickerZoneIntegrationTimeTransition"));
      if (v65)
        CFNumberGetValue(v65, kCFNumberSInt32Type, CameraParametersForPortType + 243);
      v66 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEIntegrationTimeForUnityGainToMinGainTransition"));
      if (v66)
        CFNumberGetValue(v66, kCFNumberSInt32Type, CameraParametersForPortType + 244);
      v67 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEMode"));
      if (v67)
        CFNumberGetValue(v67, kCFNumberSInt32Type, CameraParametersForPortType + 245);
      v68 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEUpperExposureDelta"));
      if (v68)
        CFNumberGetValue(v68, kCFNumberSInt32Type, CameraParametersForPortType + 246);
      v69 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAELowerExposureDelta"));
      if (v69)
        CFNumberGetValue(v69, kCFNumberSInt32Type, CameraParametersForPortType + 247);
      v70 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaAEMaxPerFrameExposureDelta"));
      if (v70)
        CFNumberGetValue(v70, kCFNumberSInt32Type, CameraParametersForPortType + 248);
      v71 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaDoNotLockBLC"));
      v72 = CameraParametersForPortType + 249;
      if (v71)
        CFNumberGetValue(v71, kCFNumberCharType, v72);
      else
        *v72 = 0;
      v73 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaDoNotLockLTM"));
      v74 = (char *)CameraParametersForPortType + 997;
      if (v73)
        CFNumberGetValue(v73, kCFNumberCharType, v74);
      else
        *v74 = 0;
      v75 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("panoramaUsePreviewAEConvergenceForRecording"));
      v76 = (char *)CameraParametersForPortType + 998;
      if (v75)
        CFNumberGetValue(v75, kCFNumberCharType, v76);
      else
        *v76 = 0;
      v77 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SharpnessLightLevel"));
      if (v77)
        unpackIntArray(v77, (char *)CameraParametersForPortType + 128, 0xAu);
      v78 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SharpnessValue"));
      if (v78)
        unpackIntArray(v78, (char *)CameraParametersForPortType + 168, 0xAu);
      v79 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SaturationLightLevel"));
      if (v79)
        unpackIntArray(v79, (char *)CameraParametersForPortType + 208, 0xAu);
      v80 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SaturationValue"));
      if (v80)
        unpackIntArray(v80, (char *)CameraParametersForPortType + 248, 0xAu);
      v81 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("NoiseReductionLightLevel"));
      if (v81)
        unpackIntArray(v81, (char *)CameraParametersForPortType + 288, 0xAu);
      v82 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("NoiseReductionValue"));
      if (v82)
        unpackIntArray(v82, (char *)CameraParametersForPortType + 328, 0xAu);
      v83 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ColorSuppressionLightLevel"));
      if (v83)
        unpackIntArray(v83, (char *)CameraParametersForPortType + 368, 0xAu);
      v84 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ColorSuppressionValue"));
      if (v84)
        unpackIntArray(v84, (char *)CameraParametersForPortType + 408, 0xAu);
      v85 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("DynamicRangeCompressionLightLevel"));
      if (v85)
        unpackIntArray(v85, (char *)CameraParametersForPortType + 448, 0xAu);
      v86 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("DynamicRangeCompressionValue"));
      if (v86)
        unpackIntArray(v86, (char *)CameraParametersForPortType + 488, 0xAu);
      v87 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveBlackLightLevel"));
      if (v87)
        unpackIntArray(v87, (char *)CameraParametersForPortType + 528, 0xAu);
      v88 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveBlackValue"));
      if (v88)
        unpackIntArray(v88, (char *)CameraParametersForPortType + 568, 0xAu);
      v89 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveWhiteWeightLightLevel"));
      if (v89)
        unpackIntArray(v89, (char *)CameraParametersForPortType + 608, 0xAu);
      v90 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveWhiteWeightValue"));
      if (v90)
        unpackIntArray(v90, (char *)CameraParametersForPortType + 648, 0xAu);
      v91 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveLinearityLightLevel"));
      if (v91)
        unpackIntArray(v91, (char *)CameraParametersForPortType + 688, 0xAu);
      v92 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveLinearityValue"));
      if (v92)
        unpackIntArray(v92, (char *)CameraParametersForPortType + 728, 0xAu);
      v93 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveStabilityLightLevel"));
      if (v93)
        unpackIntArray(v93, (char *)CameraParametersForPortType + 768, 0xAu);
      v94 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ToneCurveStabilityValue"));
      if (v94)
        unpackIntArray(v94, (char *)CameraParametersForPortType + 808, 0xAu);
      v95 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SpatialNoiseFilteringGainLevel"));
      if (v95)
        unpackIntArray(v95, (char *)CameraParametersForPortType + 848, 8u);
      v96 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("SpatialNoiseFilteringValue"));
      if (v96)
        unpackIntArray(v96, (char *)CameraParametersForPortType + 880, 8u);
      v97 = v17;
      v98 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_hist_exp"));
      if (v98)
        CFNumberGetValue(v98, kCFNumberFloatType, CameraParametersForPortType + 251);
      v99 = a1;
      v100 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("HDRscene_histIndices"));
      if (v100)
      {
        v101 = v100;
        unpackIntArray(v100, (char *)CameraParametersForPortType + 1008, 0x10u);
        CameraParametersForPortType[250] = CFArrayGetCount(v101);
      }
      v102 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("HDRscene_histTypes"));
      if (v102)
        unpackIntArray(v102, (char *)CameraParametersForPortType + 1072, 0x10u);
      v103 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("HDRscene_histWeights"));
      if (v103)
      {
        v104 = v103;
        Count = CFArrayGetCount(v103);
        v106 = Count >= 0x10 ? 16 : Count;
        if (v106)
        {
          v107 = 0;
          v108 = (char *)(CameraParametersForPortType + 284);
          do
          {
            v109 = (const __CFNumber *)CFArrayGetValueAtIndex(v104, v107);
            CFNumberGetValue(v109, kCFNumberFloatType, v108);
            ++v107;
            v108 += 4;
          }
          while (v106 != v107);
        }
      }
      v110 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_histOffset"));
      if (v110)
        CFNumberGetValue(v110, kCFNumberFloatType, CameraParametersForPortType + 300);
      v111 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_thresh"));
      a1 = v99;
      v17 = v97;
      if (v111)
        CFNumberGetValue(v111, kCFNumberFloatType, CameraParametersForPortType + 301);
      v112 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_shadow_thresh"));
      v113 = CameraParametersForPortType + 302;
      Value = v139;
      if (v112)
        CFNumberGetValue(v112, kCFNumberFloatType, v113);
      else
        *v113 = 2143289344;
      v7 = v138;
      v114 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_normalizedSNR_thresh"));
      if (v114)
        CFNumberGetValue(v114, kCFNumberFloatType, CameraParametersForPortType + 303);
      v115 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_dampingThresh0"));
      if (v115)
        CFNumberGetValue(v115, kCFNumberFloatType, CameraParametersForPortType + 305);
      v116 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_dampingThresh1"));
      if (v116)
        CFNumberGetValue(v116, kCFNumberFloatType, CameraParametersForPortType + 306);
      v117 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_ScoreVariationThresh"));
      if (v117)
        CFNumberGetValue(v117, kCFNumberFloatType, CameraParametersForPortType + 307);
      v118 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_toneLast"));
      if (v118)
        CFNumberGetValue(v118, kCFNumberIntType, CameraParametersForPortType + 304);
      v119 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_temporal_buffer_size"));
      if (v119)
      {
        CFNumberGetValue(v119, kCFNumberIntType, CameraParametersForPortType + 309);
        v120 = CameraParametersForPortType[309];
        if (v120 >= 30)
          v120 = 30;
        CameraParametersForPortType[309] = v120;
      }
      v121 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_temporal_buffer_size_lowlight"));
      if (v121)
      {
        CFNumberGetValue(v121, kCFNumberIntType, CameraParametersForPortType + 308);
        v122 = CameraParametersForPortType[308];
        if (v122 >= 30)
          v122 = 30;
        CameraParametersForPortType[308] = v122;
      }
      v123 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_temporal_buffer_size_min"));
      if (v123)
      {
        CFNumberGetValue(v123, kCFNumberIntType, CameraParametersForPortType + 310);
        v124 = CameraParametersForPortType[310];
        if (v124 >= CameraParametersForPortType[309])
          v124 = CameraParametersForPortType[309];
        CameraParametersForPortType[310] = v124;
      }
      v125 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("HDRscene_exptimeThresh"));
      if (v125)
        CFNumberGetValue(v125, kCFNumberFloatType, CameraParametersForPortType + 311);
      v126 = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("ExposureStabilityCount"));
      if (v126)
        CFNumberGetValue(v126, kCFNumberIntType, CameraParametersForPortType + 15);
      v32 = 0;
    }
    else
    {
      v32 = -12780;
    }
    if (v151)
    {
      valuePtr[0] = 0;
      CFNumberGetValue(v151, kCFNumberSInt32Type, valuePtr);
      v127 = valuePtr[0];
      CameraParametersForPortType[22] = valuePtr[0];
      if (v127 >= 120)
        CameraParametersForPortType[11] = FigGetCFPreferenceNumberWithDefault();
    }
    v128 = BOOLean && CFBooleanGetValue(BOOLean) != 0;
    *((_BYTE *)CameraParametersForPortType + 54) = v128;
    if (!v17)
      break;
    objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v143), "floatValue");
    *CameraParametersForPortType = v129;
    objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v145), "floatValue");
    if (!v150)
      goto LABEL_238;
    v131 = v130;
    v12 = v144;
    if (!CFEqual(ValueAtIndex, cf2) && !CFEqual(ValueAtIndex, v144) && !CFEqual(ValueAtIndex, v137))
    {
      v152 = 0;
      CameraCharacterizationData = portIndexFromPortType(ValueAtIndex, (int *)&v152);
      if (CameraCharacterizationData
        || (v133 = v152,
            (CameraCharacterizationData = FigMotionGetCameraCharacterizationData(v150, v16, v131, (uint64_t)ValueAtIndex, v140 + 56 * v152 + 17712)) != 0))
      {
        v32 = CameraCharacterizationData;
        fig_log_get_emitter();
        goto LABEL_236;
      }
      FigCFDictionaryGetBooleanIfPresent();
      v134 = (float *)(v140 + 56 * v133 + 17756);
      *v134 = 1.0;
      if (!FigCFDictionaryGetFloatIfPresent() || 1.0 <= 0.0)
      {
        fig_log_get_emitter();
        v32 = -12783;
LABEL_236:
        FigDebugAssert3();
        goto LABEL_239;
      }
      v32 = 0;
      *v134 = 1.0 / 1.0;
    }
LABEL_239:
    if (v32)
      goto LABEL_248;
    CaptureStreamForPortType = (void *)af_sbp_getCaptureStreamForPortType();
    if (!CaptureStreamForPortType)
      goto LABEL_248;
    v136 = CaptureStreamForPortType;
    if (FigImageControl_ToneMapping_ConfigureDevice(a1, CaptureStreamForPortType))
      goto LABEL_248;
    result = FigImageControl_Exposure_ConfigureDevice(a1, v136);
    v13 = v141;
    v10 = v142;
    if ((_DWORD)result)
      goto LABEL_248;
LABEL_243:
    if (++v11 == v10)
      return result;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_248:
  fig_log_get_emitter();
  return FigDebugAssert3();
}

unint64_t unpackIntArray(const __CFArray *a1, char *a2, unsigned int a3)
{
  unint64_t result;
  unint64_t v7;
  CFIndex i;
  const __CFNumber *ValueAtIndex;

  result = CFArrayGetCount(a1);
  if (result >= a3)
    v7 = a3;
  else
    v7 = result;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      result = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, a2);
      a2 += 4;
    }
  }
  return result;
}

unint64_t FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v10;
  unint64_t Noffset;
  unsigned int *v13;

  v3 = (char *)(*(_QWORD *)a1 + a2);
  v5 = *v3;
  v4 = *v3;
  v13 = (unsigned int *)(v3 + 1);
  v6 = (1 << ((v5 & 0xF0u) + 96)) & 0x1000100000001;
  if ((v5 & 0xF0u) - 160 > 0x30 || v6 == 0)
    abort();
  v10 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    v13 = (unsigned int *)(v3 + 2);
    v10 = bp_readNinc(&v13, v3[1]);
  }
  if (v10 <= a3)
    FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject_cold_1();
  Noffset = bp_readNoffset((uint64_t)v13, *(unsigned __int8 *)(a1 + 42), *(unsigned __int8 *)(a1 + 42) * a3);
  return bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
}

uint64_t GetFocalLengthParametersFromArrayUsingModuleInfo(const __CFDictionary *a1, CFArrayRef theArray, uint64_t a3)
{
  CFTypeID TypeID;
  const __CFNumber *Value;
  const __CFNumber *v7;
  const __CFNumber *v8;
  BOOL v9;
  uint64_t v11;
  CFIndex v12;
  const void *ValueAtIndex;
  CFTypeID v14;
  int v15;
  int IntIfPresent;
  BOOL (*v17)(int, int);
  BOOL (*v18)(int, int);
  const __CFArray *v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  const __CFArray *v25;
  const __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  const __CFArray *v30;
  const __CFArray *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v35;
  const void *v36;
  CFTypeID v37;
  int Count;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t valuePtr;
  unsigned int v47;
  unsigned int v48;

  v47 = 0;
  valuePtr = 0;
  if (a1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05B68]);
      v7 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05B50]);
      v8 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05B60]);
      if (Value)
        v9 = v7 == 0;
      else
        v9 = 1;
      if (v9 || v8 == 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      if (!CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr)
        || !CFNumberGetValue(v7, kCFNumberSInt32Type, (char *)&valuePtr + 4)
        || !CFNumberGetValue(Value, kCFNumberSInt32Type, &v47))
      {
        v11 = FigSignalErrorAt();
        if ((_DWORD)v11)
        {
          v42 = v11;
          fig_log_get_emitter();
          FigDebugAssert3();
          return v42;
        }
      }
    }
  }
  if (CFArrayGetCount(theArray) < 1)
    return 0;
  v44 = a3;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v12);
    v14 = CFGetTypeID(ValueAtIndex);
    if (v14 != CFDictionaryGetTypeID())
      goto LABEL_67;
    v15 = 1;
    if (!a1)
    {
      v24 = 1;
      goto LABEL_53;
    }
    v48 = 1;
    IntIfPresent = FigCFDictionaryGetIntIfPresent();
    v17 = (BOOL (*)(int, int))IDsEqualAboveFirstHexDigit;
    if (v48 != 2)
      v17 = IDsEqual;
    if (IntIfPresent)
      v18 = v17;
    else
      v18 = IDsEqual;
    v19 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("IntegratorID"));
    if (v19)
    {
      v20 = v19;
      v21 = valuePtr;
      if (CFArrayGetCount(v19) < 1)
      {
LABEL_31:
        v24 = 0;
        goto LABEL_34;
      }
      v22 = 0;
      while (1)
      {
        v48 = -1;
        FigCFArrayGetIntAtIndex();
        if (((unsigned int (*)(_QWORD, uint64_t))v18)(v48, v21) || v48 == 0)
          break;
        if (CFArrayGetCount(v20) <= ++v22)
          goto LABEL_31;
      }
    }
    v24 = 1;
LABEL_34:
    v25 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("ActuatorID"));
    if (v25)
    {
      v26 = v25;
      v27 = HIDWORD(valuePtr);
      if (CFArrayGetCount(v25) < 1)
      {
LABEL_42:
        v15 = 0;
        goto LABEL_44;
      }
      v28 = 0;
      while (1)
      {
        v48 = -1;
        FigCFArrayGetIntAtIndex();
        if (((unsigned int (*)(_QWORD, uint64_t))v18)(v48, v27) || v48 == 0)
          break;
        if (CFArrayGetCount(v26) <= ++v28)
          goto LABEL_42;
      }
    }
    v15 = 1;
LABEL_44:
    v30 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("LensID"));
    if (!v30)
      goto LABEL_53;
    v31 = v30;
    v32 = v47;
    if (CFArrayGetCount(v30) >= 1)
      break;
LABEL_55:
    if (CFArrayGetCount(theArray) <= ++v12)
      return 0;
  }
  v33 = 0;
  while (1)
  {
    v48 = -1;
    FigCFArrayGetIntAtIndex();
    if (((unsigned int (*)(_QWORD, uint64_t))v18)(v48, v32) || v48 == 0)
      break;
    if (CFArrayGetCount(v31) <= ++v33)
      goto LABEL_55;
  }
LABEL_53:
  if (!v15 || !v24)
    goto LABEL_55;
  if (!FigCFDictionaryGetFloatIfPresent())
    goto LABEL_67;
  v35 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("LensCoefficients"));
  if (!v35)
    goto LABEL_67;
  v36 = v35;
  v37 = CFArrayGetTypeID();
  if (v37 != CFGetTypeID(v36))
    return 0;
  Count = CFArrayGetCount((CFArrayRef)v36);
  if (Count > 5)
  {
LABEL_67:
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  if (Count >= 1)
  {
    v39 = 0;
    v40 = Count;
    v41 = v44 + 20;
    do
    {
      FigCFArrayGetFloatAtIndex();
      ++v39;
      v41 += 4;
    }
    while (v40 != v39);
  }
  v42 = 0;
  *(_BYTE *)(v44 + 16) = 1;
  return v42;
}

BOOL IDsEqual(int a1, int a2)
{
  return a1 == a2;
}

uint64_t FigCaptureBinaryPlistFindIndexForStringInObject(uint64_t a1, uint64_t a2, const char *a3, size_t a4)
{
  char *v4;
  char v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t Noffset;
  unint64_t v15;
  unsigned int v16;
  size_t v17;
  unsigned int *DataAndCountForObjectAtOffset;
  size_t v19;
  size_t v20;
  int v21;
  unint64_t v22;
  unsigned int *v24;

  v4 = (char *)(*(_QWORD *)a1 + a2);
  v5 = *v4;
  v24 = (unsigned int *)(v4 + 1);
  if ((v5 & 0xE0 | 0x10) != 0xD0)
    abort();
  v9 = v5 & 0xF;
  if ((v5 & 0xF) == 0xF)
  {
    v24 = (unsigned int *)(v4 + 2);
    v9 = bp_readNinc(&v24, v4[1]);
  }
  if (v9)
  {
    v10 = 0;
    v11 = v9 - 1;
    v12 = v24;
    while (1)
    {
      v13 = (v11 + v10) >> 1;
      Noffset = bp_readNoffset((uint64_t)v12, *(unsigned __int8 *)(a1 + 42), v13 * *(unsigned __int8 *)(a1 + 42));
      v15 = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
      v16 = *(unsigned __int8 *)(*(_QWORD *)a1 + v15);
      if (v16 > 0x23)
        v16 &= 0xF0u;
      if (v16 != 80)
      {
        if (v10 == v11)
          return -1;
        goto LABEL_21;
      }
      DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((_QWORD *)a1, v15);
      v19 = v17;
      if (v17 >= a4)
        v20 = a4;
      else
        v20 = v17;
      v21 = strncmp(a3, (const char *)DataAndCountForObjectAtOffset, v20);
      if (v21)
      {
        if (v10 == v11)
          return -1;
        if (v21 > 0)
          goto LABEL_25;
LABEL_21:
        if (v13 <= v10 + 1)
          v22 = v10 + 1;
        else
          v22 = (v11 + v10) >> 1;
        v11 = v22 - 1;
      }
      else
      {
        if (v19 == a4)
          return v13;
        if (v10 == v11)
          return -1;
        if (v19 >= a4)
          goto LABEL_21;
LABEL_25:
        if (v13 + 1 < v11)
          v10 = v13 + 1;
        else
          v10 = v11;
      }
    }
  }
  return -1;
}

unint64_t FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v3;
  char v4;
  char v5;
  unint64_t v8;
  unint64_t Noffset;
  unsigned int *v11;

  v3 = (char *)(*(_QWORD *)a1 + a2);
  v5 = *v3;
  v4 = *v3;
  v11 = (unsigned int *)(v3 + 1);
  if ((v5 & 0xF0) != 0xD0)
    FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_2();
  v8 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    v11 = (unsigned int *)(v3 + 2);
    v8 = bp_readNinc(&v11, v3[1]);
  }
  if (v8 <= a3)
    FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_1();
  Noffset = bp_readNoffset((uint64_t)v11, *(unsigned __int8 *)(a1 + 42), (v8 + a3) * *(unsigned __int8 *)(a1 + 42));
  return bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
}

void FigCaptureBinaryPlistInitialize(uint64_t a1, char *__s1, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t Noffset;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int *DataAndCountForObjectAtOffset;
  unint64_t v18;
  unsigned int *v19;
  size_t v20;
  uint64_t v21;
  char v22;

  if (strncmp(__s1, "bplist00", 8uLL))
    FigCaptureBinaryPlistInitialize_cold_1();
  *(_BYTE *)(a1 + 40) = __s1[a3 - 27];
  *(_BYTE *)(a1 + 41) = __s1[a3 - 26];
  *(_BYTE *)(a1 + 42) = __s1[a3 - 25];
  v6 = bswap64(*(_QWORD *)&__s1[a3 - 24]);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = bswap64(*(_QWORD *)&__s1[a3 - 16]);
  v7 = bswap64(*(_QWORD *)&__s1[a3 - 8]);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = __s1;
  *(_QWORD *)(a1 + 8) = &__s1[v7];
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      Noffset = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), v9 * *(unsigned __int8 *)(a1 + 41));
      v11 = *(unsigned __int8 *)(*(_QWORD *)a1 + Noffset);
      if (v11 > 0x23)
        v11 &= 0xF0u;
      if (v11 == 208)
      {
        FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((_QWORD *)a1, Noffset);
        if (v8 <= v12)
          v8 = v12;
      }
      ++v9;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
    if (v8)
    {
      v13 = malloc_type_malloc(2 * v8 * *(unsigned __int8 *)(a1 + 42), 0xF30F8F04uLL);
      if (*(_QWORD *)(a1 + 16))
      {
        v14 = 0;
        do
        {
          v15 = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), v14 * *(unsigned __int8 *)(a1 + 41));
          v16 = *(unsigned __int8 *)(*(_QWORD *)a1 + v15);
          if (v16 > 0x23)
            v16 &= 0xF0u;
          if (v16 == 208)
          {
            DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((_QWORD *)a1, v15);
            if (v18 >= 2)
            {
              v19 = DataAndCountForObjectAtOffset;
              v20 = v18;
              bp_transposeKeyValueTable(DataAndCountForObjectAtOffset, (uint64_t)v13, v18, *(unsigned __int8 *)(a1 + 42), 0);
              v21 = *(unsigned __int8 *)(a1 + 42);
              v22 = v21 - 1;
              if ((v21 - 1) >= 8u || ((0x8Bu >> v22) & 1) == 0)
                abort();
              qsort_r(v13, v20, 2 * v21, (void *)a1, (int (__cdecl *)(void *, const void *, const void *))off_1E4922AE8[v22]);
              bp_transposeKeyValueTable(v19, (uint64_t)v13, v20, *(unsigned __int8 *)(a1 + 42), 1);
            }
          }
          ++v14;
        }
        while (v14 < *(_QWORD *)(a1 + 16));
      }
      free(v13);
    }
  }
}

uint64_t bp_plistObjCompare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t Noffset;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t IntForObjectAtOffset;
  uint64_t v11;
  uint64_t result;
  unsigned int *DataAndCountForObjectAtOffset;
  size_t v14;
  size_t v15;
  size_t v16;
  unsigned int *v17;
  size_t v18;
  size_t v19;

  Noffset = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a2);
  v6 = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a3);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a1 + Noffset);
  v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6);
  v9 = v8 & 0xF0;
  if (v8 > 0x23)
    v8 &= 0xF0u;
  if ((v7 & 0xF0) == 0x10)
  {
    if (v9 == 16)
    {
      IntForObjectAtOffset = FigCaptureBinaryPlistGetIntForObjectAtOffset((_QWORD *)a1, Noffset);
      v11 = FigCaptureBinaryPlistGetIntForObjectAtOffset((_QWORD *)a1, v6);
      if (IntForObjectAtOffset < v11)
        return 0xFFFFFFFFLL;
      else
        return IntForObjectAtOffset > v11;
    }
    return 0xFFFFFFFFLL;
  }
  if (v7 > 0x23)
    v7 &= 0xF0u;
  if (v7 != 80)
    return 0;
  if (v8 != 80)
    return 1;
  DataAndCountForObjectAtOffset = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((_QWORD *)a1, Noffset);
  v15 = v14;
  v17 = FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset((_QWORD *)a1, v6);
  v18 = v16;
  if (v15 >= v16)
    v19 = v16;
  else
    v19 = v15;
  result = strncmp((const char *)DataAndCountForObjectAtOffset, (const char *)v17, v19);
  if (!(_DWORD)result)
  {
    if (v15 >= v18)
      return v15 > v18;
    return 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t bp_readNoffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result;

  switch(a2)
  {
    case 1:
    case 16:
      result = *(unsigned __int8 *)(a1 + a3);
      break;
    case 2:
    case 17:
      result = __rev16(*(unsigned __int16 *)(a1 + a3));
      break;
    case 4:
    case 18:
      result = bswap32(*(_DWORD *)(a1 + a3));
      break;
    case 8:
    case 19:
      result = bswap64(*(_QWORD *)(a1 + a3));
      break;
    default:
      abort();
  }
  return result;
}

unsigned int *FigCaptureBinaryPlistGetDataAndCountForObjectAtOffset(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int *v8;

  v2 = *a1 + a2;
  result = (unsigned int *)(v2 + 1);
  v4 = ((*(_BYTE *)v2 & 0xF0u) - 64) >> 4;
  v5 = v4 > 9;
  v6 = (1 << v4) & 0x347;
  if (v5 || v6 == 0)
    abort();
  if ((*(_BYTE *)v2 & 0xF) == 0xF)
  {
    v8 = (unsigned int *)(v2 + 2);
    bp_readNinc(&v8, *(unsigned __int8 *)(v2 + 1));
    return v8;
  }
  return result;
}

unint64_t bp_readNinc(unsigned int **a1, uint64_t a2)
{
  unsigned int *v2;
  unint64_t result;

  v2 = *a1;
  switch(a2)
  {
    case 1:
    case 16:
      *a1 = (unsigned int *)((char *)v2 + 1);
      result = *(unsigned __int8 *)v2;
      break;
    case 2:
    case 17:
      *a1 = (unsigned int *)((char *)v2 + 2);
      result = __rev16(*(unsigned __int16 *)v2);
      break;
    case 4:
    case 18:
      *a1 = v2 + 1;
      result = bswap32(*v2);
      break;
    case 8:
    case 19:
      *a1 = v2 + 2;
      result = bswap64(*(_QWORD *)v2);
      break;
    default:
      abort();
  }
  return result;
}

_WORD *bp_transposeKeyValueTable(_WORD *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char *v6;
  char v7;
  int *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _WORD *v23;
  uint64_t v24;

  switch(a4)
  {
    case 1:
      if ((a5 & 1) != 0)
      {
        if (a3)
        {
          v5 = 0;
          v6 = (char *)(a2 + 1);
          do
          {
            *((_BYTE *)result + v5) = *(v6 - 1);
            v7 = *v6;
            v6 += 2;
            *((_BYTE *)result + a3 + v5++) = v7;
          }
          while (a3 != v5);
        }
      }
      else if (a3)
      {
        v17 = 0;
        v18 = (_BYTE *)(a2 + 1);
        do
        {
          *(v18 - 1) = *((_BYTE *)result + v17);
          *v18 = *((_BYTE *)result + a3 + v17);
          v18 += 2;
          ++v17;
        }
        while (a3 != v17);
      }
      break;
    case 2:
      if ((a5 & 1) != 0)
      {
        if (a3)
        {
          v14 = (__int16 *)(a2 + 2);
          v15 = a3;
          do
          {
            *result = *(v14 - 1);
            v16 = *v14;
            v14 += 2;
            result[a3] = v16;
            ++result;
            --v15;
          }
          while (v15);
        }
      }
      else if (a3)
      {
        v23 = (_WORD *)(a2 + 2);
        v24 = a3;
        do
        {
          *(v23 - 1) = *result;
          *v23 = result[a3];
          v23 += 2;
          ++result;
          --v24;
        }
        while (v24);
      }
      break;
    case 4:
      if ((a5 & 1) != 0)
      {
        if (a3)
        {
          v8 = (int *)(a2 + 4);
          v9 = a3;
          do
          {
            *(_DWORD *)result = *(v8 - 1);
            v10 = *v8;
            v8 += 2;
            *(_DWORD *)&result[2 * a3] = v10;
            result += 2;
            --v9;
          }
          while (v9);
        }
      }
      else if (a3)
      {
        v19 = (_DWORD *)(a2 + 4);
        v20 = a3;
        do
        {
          *(v19 - 1) = *(_DWORD *)result;
          *v19 = *(_DWORD *)&result[2 * a3];
          v19 += 2;
          result += 2;
          --v20;
        }
        while (v20);
      }
      break;
    case 8:
      if ((a5 & 1) != 0)
      {
        if (a3)
        {
          v11 = (uint64_t *)(a2 + 8);
          v12 = a3;
          do
          {
            *(_QWORD *)result = *(v11 - 1);
            v13 = *v11;
            v11 += 2;
            *(_QWORD *)&result[4 * a3] = v13;
            result += 4;
            --v12;
          }
          while (v12);
        }
      }
      else if (a3)
      {
        v21 = (_QWORD *)(a2 + 8);
        v22 = a3;
        do
        {
          *(v21 - 1) = *(_QWORD *)result;
          *v21 = *(_QWORD *)&result[4 * a3];
          v21 += 2;
          result += 4;
          --v22;
        }
        while (v22);
      }
      break;
    default:
      abort();
  }
  return result;
}

uint64_t af_sbp_getCaptureStreamForPortType()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage + 8;
  objc_msgSend(*(id *)(DerivedStorage + 8), "portType");
  if (FigCFEqual())
    return *(_QWORD *)v1;
  if (FigCFEqual())
  {
    v1 = DerivedStorage + 16;
    return *(_QWORD *)v1;
  }
  if (FigCFEqual())
  {
    v1 = DerivedStorage + 24;
    return *(_QWORD *)v1;
  }
  return 0;
}

uint64_t FigImageControl_ToneMapping_ConfigureDevice(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  _QWORD *CameraParametersForCaptureStream;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  char v25;
  int v26;
  CFAllocatorRef *v27;
  void **v28;
  CFDictionaryRef v29;
  uint64_t v30;
  const void *v31;
  char v32;
  int v33;
  float v34;
  void *v35;
  void *v36;
  const __CFAllocator *v37;
  CFDictionaryRef v38;
  uint64_t i;
  uint64_t v41;
  int v42;
  int valuePtr;
  void *v44[5];
  void *v45[5];
  void *keys[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *values[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStream = af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  v6 = CameraParametersForCaptureStream;
  v7 = 0;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  *(_OWORD *)values = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  *(_OWORD *)keys = 0u;
  v47 = 0u;
  while (*((_DWORD *)CameraParametersForCaptureStream + v7 + 62))
  {
    if (++v7 == 10)
      goto LABEL_6;
  }
  if (v7)
  {
LABEL_6:
    keys[0] = *(void **)MEMORY[0x1E0D07148];
    v8 = v7;
    values[0] = createCFArrayFromIntArray((char *)CameraParametersForCaptureStream + 208, v7);
    keys[1] = *(void **)MEMORY[0x1E0D07140];
    values[1] = createCFArrayFromIntArray((char *)v6 + 248, v8);
    LODWORD(v9) = 2;
    goto LABEL_7;
  }
  LODWORD(v9) = 0;
LABEL_7:
  v10 = 0;
  while (*((_DWORD *)v6 + v10 + 112))
  {
    if (++v10 == 10)
      goto LABEL_12;
  }
  if (!v10)
    goto LABEL_14;
LABEL_12:
  if (!*(_BYTE *)(DerivedStorage + 9054))
  {
    keys[v9] = (void *)*MEMORY[0x1E0D07180];
    v11 = v10;
    v12 = v9 | 1;
    values[v9] = createCFArrayFromIntArray((char *)v6 + 448, v10);
    keys[v9 | 1] = (void *)*MEMORY[0x1E0D07178];
    LODWORD(v9) = v9 + 2;
    values[v12] = createCFArrayFromIntArray((char *)v6 + 488, v11);
  }
LABEL_14:
  v13 = 0;
  while (*((_DWORD *)v6 + v13 + 132))
  {
    if (++v13 == 10)
      goto LABEL_19;
  }
  if (!v13)
    goto LABEL_20;
LABEL_19:
  keys[v9] = (void *)*MEMORY[0x1E0D07278];
  v14 = v13;
  v15 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 528, v13);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E0D07270];
  LODWORD(v9) = v9 + 2;
  values[v15] = createCFArrayFromIntArray((char *)v6 + 568, v14);
  LODWORD(v13) = 1;
LABEL_20:
  v16 = 0;
  while (*((_DWORD *)v6 + v16 + 152))
  {
    if (++v16 == 10)
      goto LABEL_25;
  }
  if (!v16)
    goto LABEL_26;
LABEL_25:
  keys[v9] = (void *)*MEMORY[0x1E0D072B8];
  v17 = v16;
  v18 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 608, v16);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E0D072B0];
  LODWORD(v9) = v9 + 2;
  values[v18] = createCFArrayFromIntArray((char *)v6 + 648, v17);
  LODWORD(v13) = 1;
LABEL_26:
  v19 = 0;
  while (*((_DWORD *)v6 + v19 + 172))
  {
    if (++v19 == 10)
      goto LABEL_31;
  }
  if (!v19)
    goto LABEL_32;
LABEL_31:
  keys[v9] = (void *)*MEMORY[0x1E0D07288];
  v20 = v19;
  v21 = v9 + 1;
  values[v9] = createCFArrayFromIntArray((char *)v6 + 688, v19);
  keys[(v9 + 1)] = (void *)*MEMORY[0x1E0D07280];
  LODWORD(v9) = v9 + 2;
  values[v21] = createCFArrayFromIntArray((char *)v6 + 728, v20);
  LODWORD(v13) = 1;
LABEL_32:
  v22 = 0;
  while (*((_DWORD *)v6 + v22 + 192))
  {
    if (++v22 == 10)
      goto LABEL_37;
  }
  if (v22)
  {
LABEL_37:
    keys[v9] = (void *)*MEMORY[0x1E0D072A8];
    v23 = v22;
    v24 = v9 + 1;
    values[v9] = createCFArrayFromIntArray((char *)v6 + 768, v22);
    keys[(v9 + 1)] = (void *)*MEMORY[0x1E0D072A0];
    LODWORD(v9) = v9 + 2;
    values[v24] = createCFArrayFromIntArray((char *)v6 + 808, v23);
LABEL_38:
    v25 = 1;
    LODWORD(v45[0]) = 1;
    LODWORD(v44[0]) = 260;
    keys[v9] = (void *)*MEMORY[0x1E0D07298];
    values[v9] = createCFArrayFromIntArray((char *)v45, 1uLL);
    v26 = v9 + 1;
    keys[(v9 + 1)] = (void *)*MEMORY[0x1E0D07290];
    LODWORD(v9) = v9 + 2;
    values[v26] = createCFArrayFromIntArray((char *)v44, 1uLL);
    goto LABEL_39;
  }
  if ((_DWORD)v13)
    goto LABEL_38;
  v25 = 0;
LABEL_39:
  v27 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((int)v9 < 1)
  {
    v30 = 0;
  }
  else
  {
    v9 = v9;
    v28 = values;
    v29 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v30 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E0D07650], v29);
    do
    {
      v31 = *v28++;
      CFRelease(v31);
      --v9;
    }
    while (v9);
    CFRelease(v29);
  }
  if (*(_BYTE *)(DerivedStorage + 508))
    v32 = v25;
  else
    v32 = 1;
  if ((v32 & 1) == 0)
  {
    v33 = (int)(float)((float)(*((float *)v6 + 3) * 256.0) + 0.5);
    v34 = *((float *)v6 + 7);
    v42 = (int)(float)((float)(*((float *)v6 + 6) * 256.0) + 0.5);
    valuePtr = v33;
    HIDWORD(v41) = (int)(float)((float)(v34 * 256.0) + 0.5);
    LODWORD(v41) = 260;
    v35 = (void *)*MEMORY[0x1E0D07188];
    v44[0] = *(void **)MEMORY[0x1E0C9AE50];
    v36 = (void *)*MEMORY[0x1E0D07100];
    v45[0] = v35;
    v45[1] = v36;
    v37 = *v27;
    v44[1] = CFNumberCreate(*v27, kCFNumberIntType, &valuePtr);
    v45[2] = *(void **)MEMORY[0x1E0D072D0];
    v44[2] = CFNumberCreate(v37, kCFNumberIntType, &v42);
    v45[3] = *(void **)MEMORY[0x1E0D071C0];
    v44[3] = CFNumberCreate(v37, kCFNumberIntType, (char *)&v41 + 4);
    v45[4] = *(void **)MEMORY[0x1E0D071F0];
    v44[4] = CFNumberCreate(v37, kCFNumberIntType, &v41);
    v38 = CFDictionaryCreate(v37, (const void **)v45, (const void **)v44, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v30 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E0D074B0], v38, v41);
    for (i = 1; i != 5; ++i)
      CFRelease(v44[i]);
    CFRelease(v38);
  }
  return v30;
}

CFArrayRef createCFArrayFromIntArray(char *valuePtr, unint64_t numValues)
{
  CFIndex v2;
  unint64_t v3;
  const __CFAllocator *v4;
  CFNumberRef *v6;
  CFArrayRef v7;
  const void **v8;
  const void *v9;
  _OWORD v11[5];
  uint64_t v12;

  v2 = numValues;
  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  if (numValues >= 0xA)
    v3 = 10;
  else
    v3 = numValues;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v3)
  {
    v6 = (CFNumberRef *)v11;
    do
    {
      *v6++ = CFNumberCreate(v4, kCFNumberIntType, valuePtr);
      valuePtr += 4;
      --v3;
    }
    while (v3);
  }
  v7 = CFArrayCreate(v4, (const void **)v11, v2, MEMORY[0x1E0C9B378]);
  if (v2)
  {
    v8 = (const void **)v11;
    do
    {
      v9 = *v8++;
      CFRelease(v9);
      --v2;
    }
    while (v2);
  }
  return v7;
}

void *fs_updateFrameStatisticsWithFrameMetadata(void *result, void *a2, __int128 *a3, int a4)
{
  void *v7;
  uint64_t v8;
  int v9;
  int v10;
  int IsContrastBased;
  float v12;
  float v14;
  float v15;
  float v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  if (result && a2)
  {
    v7 = result;
    v8 = objc_msgSend(result, "frameStatisticsStorage");
    v9 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067D0]), "intValue");
    if (v9 == 4)
      v46 = *(_DWORD *)(v8 + 164) + 1;
    else
      v46 = 0;
    v10 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AB8]), "intValue");
    IsContrastBased = FigCaptureStreamFocusingMethodIsContrastBased();
    v12 = *(float *)(v8 + 196);
    if (a4)
    {
      if (v9 != 2 || IsContrastBased == 0)
      {
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A88]), "floatValue");
        v15 = 150.0;
        if (v14 <= 150.0 && v14 >= 0.0)
          v15 = v14;
        if (v14 == 0.0)
          v17 = v12;
        else
          v17 = v15;
        if (v12 == 0.0)
          v12 = v17;
        else
          v12 = (float)(v12 + v17) * 0.5;
      }
    }
    v18 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C30]);
    if (v18)
    {
      v19 = objc_msgSend(v18, "intValue");
      v20 = v19;
      v21 = *(_DWORD *)(v8 + 180);
      v22 = v21 - v19;
      if (v21 - v19 < 0)
        v22 = v19 - v21;
      if (v21 != v19 || v9 == 4)
        v24 = v22;
      else
        v24 = -1;
      v48 = v24;
      v25 = *(_DWORD *)(v8 + 188);
      v26 = (int)(float)((float)(v25 + v19) * 0.5);
      v27 = v25 - v26;
      if (v27 < 0)
        v27 = -v27;
    }
    else
    {
      v20 = 0;
      v26 = 0;
      v27 = -1;
      v48 = -1;
    }
    v47 = v27;
    v28 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06970]);
    if (v28)
    {
      v29 = objc_msgSend(v28, "intValue");
      v30 = v29;
      v31 = *(_DWORD *)(v8 + 172);
      v32 = v31 - v29;
      if (v31 - v29 < 0)
        v32 = v29 - v31;
      v33 = v31 != v29 || v9 == 4;
      v34 = v33 ? v32 : -1;
    }
    else
    {
      v30 = 0;
      v34 = -1;
    }
    v35 = *a3;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v35;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06978]), "floatValue");
    *(_DWORD *)(v8 + 24) = v36;
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      v37 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(v8 + 32) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(v8 + 48) = v37;
    }
    *(_DWORD *)(v8 + 64) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C40]), "intValue");
    *(_DWORD *)(v8 + 68) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06960]), "intValue");
    *(_DWORD *)(v8 + 72) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D48]), "intValue");
    *(_DWORD *)(v8 + 76) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D50]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06CD0]), "floatValue");
    *(_DWORD *)(v8 + 80) = v38;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]), "doubleValue");
    *(_QWORD *)(v8 + 88) = v39;
    *(_DWORD *)(v8 + 96) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E0]), "intValue");
    *(_DWORD *)(v8 + 100) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F60]), "intValue");
    *(_DWORD *)(v8 + 104) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F78]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F68]), "floatValue");
    *(_DWORD *)(v8 + 108) = v40;
    if (FigCaptureComputeImageGainFromMetadata())
      *(_DWORD *)(v8 + 112) = 2143289344;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B40]), "floatValue");
    *(_DWORD *)(v8 + 116) = v41;
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A10]), "doubleValue");
    *(_QWORD *)(v8 + 120) = v42;
    *(_DWORD *)(v8 + 128) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06770]), "unsignedIntValue");
    *(_DWORD *)(v8 + 132) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06778]), "unsignedIntValue");
    *(_DWORD *)(v8 + 136) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067B0]), "intValue");
    *(_BYTE *)(v8 + 140) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06788]), "BOOLValue");
    *(_BYTE *)(v8 + 141) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067A0]), "BOOLValue");
    *(_BYTE *)(v8 + 142) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06790]), "BOOLValue");
    *(_DWORD *)(v8 + 144) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06CA8]), "intValue");
    *(_BYTE *)(v8 + 148) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B10]), "BOOLValue");
    v43 = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D88]);
    *(_DWORD *)(v8 + 152) = 0;
    if (v43)
      FigCaptureComputeImageGainFromMetadata();
    *(_DWORD *)(v8 + 156) = v9;
    *(_BYTE *)(v8 + 160) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067C0]), "BOOLValue");
    *(_DWORD *)(v8 + 164) = v46;
    *(_DWORD *)(v8 + 168) = v10;
    *(_DWORD *)(v8 + 172) = v30;
    *(_DWORD *)(v8 + 176) = v34;
    *(_DWORD *)(v8 + 180) = v20;
    *(_DWORD *)(v8 + 184) = v48;
    *(_DWORD *)(v8 + 188) = v26;
    *(_DWORD *)(v8 + 192) = v47;
    *(float *)(v8 + 196) = v12;
    *(_DWORD *)(v8 + 208) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B78]), "intValue");
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B70]), "floatValue");
    *(_DWORD *)(v8 + 212) = v44;
    *(_DWORD *)(v8 + 216) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BD0]), "intValue");
    *(_BYTE *)(v8 + 220) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06870]), "BOOLValue");
    *(_BYTE *)(v8 + 221) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06840]), "BOOLValue");
    *(_WORD *)(v8 + 222) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06848]), "unsignedShortValue");
    *(_WORD *)(v8 + 224) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06820]), "unsignedShortValue");
    *(_WORD *)(v8 + 226) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E8]), "unsignedShortValue");
    *(_WORD *)(v8 + 228) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06800]), "unsignedShortValue");
    *(_WORD *)(v8 + 230) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F8]), "unsignedShortValue");
    *(_WORD *)(v8 + 232) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F0]), "unsignedShortValue");
    *(_WORD *)(v8 + 234) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06860]), "unsignedShortValue");
    *(_WORD *)(v8 + 236) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06858]), "unsignedShortValue");
    *(_WORD *)(v8 + 238) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06850]), "unsignedShortValue");
    *(_DWORD *)(v8 + 240) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06868]), "unsignedIntValue");
    *(_DWORD *)(v8 + 244) = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06928]), "unsignedIntValue");
    objc_msgSend(v7, "_setAEStatistics:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067A8]));
    objc_msgSend(v7, "_setDisplayStrobeRGBEstimate:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D069C8]));
    objc_msgSend(v7, "_setColorCorrectionMatrix:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06948]));
    result = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
      {
        result = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06CD8]);
        if (!result)
          return result;
        result = (void *)objc_msgSend(result, "floatValue");
      }
      else
      {
        v45 = *(_DWORD *)(v8 + 80);
      }
      *(_DWORD *)(v8 + 84) = v45;
    }
  }
  return result;
}

BOOL FigCaptureVideoDimensionsAreValid(uint64_t a1)
{
  return (int)a1 > 0 && SHIDWORD(a1) > 0;
}

uint64_t vfr_resolveNumericalArrays(id *a1, void *a2)
{
  id v4;
  id v5;

  v4 = *a1;
  if (objc_msgSend(*a1, "count") && objc_msgSend(a2, "count"))
  {
    v5 = (id)objc_msgSend(v4, "bw_intersectWithArray:", a2);
    if (!objc_msgSend(v5, "count"))
    {

      return 0;
    }
  }
  else
  {
    if (objc_msgSend(v4, "count") || !objc_msgSend(a2, "count"))
      return 1;
    v5 = (id)objc_msgSend(a2, "copy");
  }
  if (v5)
  {

    *a1 = v5;
  }
  return 1;
}

uint64_t FigCapturePlatformIdentifier()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformID;
}

unint64_t FigCaptureFitAspectInsideDimensions(uint64_t a1, uint64_t a2, float a3)
{
  int v3;
  uint64_t v4;

  if (a3 == 0.0)
    a3 = (float)(int)a1 / (float)SHIDWORD(a1);
  if ((float)((float)(int)a1 / (float)SHIDWORD(a1)) >= a3)
  {
    v4 = (SHIDWORD(a1) / SHIDWORD(a2) * HIDWORD(a2));
    v3 = llroundf((float)(a3 * (float)(int)v4) / (float)(int)a2) * a2;
    if (v3 > (int)a1)
    {
      v3 -= a2;
      v4 = llroundf((float)((float)v3 / a3) / (float)SHIDWORD(a2)) * HIDWORD(a2);
    }
  }
  else
  {
    v3 = (int)a1 / (int)a2 * a2;
    v4 = llroundf((float)((float)v3 / a3) / (float)SHIDWORD(a2)) * HIDWORD(a2);
    if ((int)v4 > SHIDWORD(a1))
    {
      v4 = (v4 - HIDWORD(a2));
      v3 = llroundf((float)(a3 * (float)(int)v4) / (float)(int)a2) * a2;
    }
  }
  return v3 | (unint64_t)(v4 << 32);
}

void *csu_captureSourceVideoFormatsForFormatDictionaries(void *a1, int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  FigCaptureSourceVideoFormat *v11;
  void *v12;
  FigCaptureSourceVideoFormat *v13;
  FigCaptureSourceVideoFormat *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    v8 = *MEMORY[0x1E0CA9040];
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(a1);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        v11 = -[FigCaptureSourceVideoFormat initWithFigCaptureStreamFormatDictionary:]([FigCaptureSourceVideoFormat alloc], "initWithFigCaptureStreamFormatDictionary:", v10);
        objc_msgSend(v4, "addObject:", v11);
        if (a2
          && objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v8), "intValue") == 875704438)
        {
          if (objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("NativeFormatCodecType")))
          {
            v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v10);
            objc_msgSend(v12, "setObject:forKeyedSubscript:", &unk_1E49F9870, v8);
            objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(v12, "objectForKeyedSubscript:", v8), CFSTR("NativeFormatCodecType"));
            if ((objc_msgSend(a1, "containsObject:", v12) & 1) != 0)
            {
              v13 = 0;
LABEL_15:

              goto LABEL_16;
            }
            v14 = -[FigCaptureSourceVideoFormat initWithFigCaptureStreamFormatDictionary:]([FigCaptureSourceVideoFormat alloc], "initWithFigCaptureStreamFormatDictionary:", v12);
          }
          else
          {
            v14 = -[FigCaptureSourceVideoFormat copyWithNewPixelFormat:](v11, "copyWithNewPixelFormat:", 875704422);
          }
          v13 = v14;
          if (v14)
            objc_msgSend(v4, "addObject:", v14);
          goto LABEL_15;
        }
LABEL_16:

      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }
  return v4;
}

uint64_t __csr_createFormatsArrayFromSerializedSource_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigCaptureSourceVideoFormat *v4;
  uint64_t v5;
  void *v6;

  v4 = -[FigCaptureSourceVideoFormat initWithXPCEncoding:]([FigCaptureSourceVideoFormat alloc], "initWithXPCEncoding:", a3);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);
  if (-[FigCaptureSourceFormat format](v4, "format") == 875704438)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      v5 = -[FigCaptureSourceVideoFormat copyWithNewPixelFormat:](v4, "copyWithNewPixelFormat:", 875704422);
      if (v5)
      {
        v6 = (void *)v5;
        objc_msgSend(*(id *)(a1 + 32), "addObject:", v5);

      }
    }
  }

  return 1;
}

uint64_t satisfiedVideoRequirementCheck(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isSatisfiedByRequirement:", a2);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__25(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__29(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__30(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__33(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__37(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__39(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_copy__40(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_copy__41(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t FigCapturePixelFormatIsVersatileRaw(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1651847471)
  {
    if (a1 <= 1651926375)
    {
      if (a1 == 1651847472)
        return result;
      v3 = 1651925816;
      goto LABEL_14;
    }
    if (a1 != 1651926376 && a1 != 1651927153)
    {
      v3 = 1652056888;
LABEL_14:
      if (a1 != v3)
        return 0;
    }
  }
  else
  {
    if (a1 <= 1651519536)
    {
      if (a1 == 1647392369)
        return result;
      v3 = 1647719528;
      goto LABEL_14;
    }
    if (a1 != 1651519537 && a1 != 1651519798)
    {
      v3 = 1651587122;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t *vfr_resolveOptionalAlignmentFactors(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  signed int v4;
  int v5;
  unsigned int v6;

  if (a2)
  {
    v2 = *result;
    if (*result)
    {
      if ((int)v2 < 0)
        LODWORD(v2) = -(int)v2;
      if ((int)a2 >= 0)
        v3 = a2;
      else
        v3 = -(int)a2;
      if (v3 <= v2)
        v4 = v2;
      else
        v4 = v3;
      if (v3 >= v2)
        v5 = v2;
      else
        v5 = v3;
      if (v5)
      {
        v6 = v4;
        do
        {
          v4 = v5;
          v5 = v6 % v5;
          v6 = v4;
        }
        while (v5 > 0);
      }
      else if (!v4)
      {
        a2 = 0;
        goto LABEL_22;
      }
      a2 = (int)(v2 * v3) / v4;
LABEL_22:
      *result = a2;
      return result;
    }
  }
  if (a2)
    goto LABEL_22;
  return result;
}

uint64_t FigCapturePixelFormatWithLeastAverageBandwidth(void *a1)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "sortedArrayUsingComparator:", &__block_literal_global_114), "firstObject"), "unsignedIntValue");
}

__n128 acpr_computePixelBufferToRawSensorHomography@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  float64_t v6;
  float64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64_t v10;
  __n128 result;
  float64x2_t v16;
  float64x2_t v17;

  v17.f64[0] = (double)(int)a2;
  v17.f64[1] = (double)SHIDWORD(a2);
  FigCFDictionaryGetCGRectIfPresent();
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "doubleValue");
  v6 = v5;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "doubleValue");
  v16.f64[0] = v6;
  v16.f64[1] = v7;
  FigCFDictionaryGetCGRectIfPresent();
  v8 = vdivq_f64(v16, v17);
  v9 = vmlsq_f64((float64x2_t)0, v8, (float64x2_t)0);
  v10 = v8.f64[0];
  v8.f64[0] = 0.0;
  *(_OWORD *)a3 = *(unint64_t *)&v10;
  *(_OWORD *)(a3 + 16) = 0u;
  *(float64x2_t *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 48) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(float64x2_t *)(a3 + 64) = v9;
  *(__n128 *)(a3 + 80) = result;
  return result;
}

void *FigCapturePixelFormatsByAddingCompressedVariants(void *a1, int a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", a1);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = a1;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(obj);
        v9 = FigCaptureCompressedPixelFormatsForPixelFormat(objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "intValue"), 4, a2);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v18;
          do
          {
            for (j = 0; j != v11; ++j)
            {
              if (*(_QWORD *)v18 != v12)
                objc_enumerationMutation(v9);
              v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * j);
              if ((objc_msgSend(v4, "containsObject:", v14) & 1) == 0)
                objc_msgSend(v4, "addObject:", v14);
            }
            v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v11);
        }
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v6);
  }
  return v4;
}

void *FigCaptureCompressedPixelFormatsForPixelFormat(uint64_t a1, int a2, int a3)
{
  void *v6;
  signed int v7;
  int v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if ((a3 & 0x80000000) == 0)
  {
    v7 = 0;
    v8 = a3 + 1;
    do
    {
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", FigCaptureCompressedPixelFormatForPixelFormat(a1, a2, v7));
      if ((objc_msgSend(v6, "containsObject:", v9) & 1) == 0)
        objc_msgSend(v6, "addObject:", v9);
      ++v7;
    }
    while (v8 != v7);
  }
  return v6;
}

uint64_t FigCaptureBinaryPlistGetTypeForObjectAtOffset(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(*a1 + a2);
  if (v2 <= 0x23)
    return *(unsigned __int8 *)(*a1 + a2);
  else
    return v2 & 0xF0;
}

uint64_t FigCaptureBinaryPlistGetIntForObjectAtOffset(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t result;

  v2 = (unsigned __int8 *)(*a1 + a2);
  v3 = *v2;
  if (v3 <= 0x20)
  {
    result = 0;
    switch(*v2)
    {
      case 8u:
        return result;
      case 9u:
        return 1;
      case 0x10u:
        return v2[1];
      case 0x11u:
        return __rev16(*(unsigned __int16 *)(v2 + 1));
      case 0x12u:
        return bswap32(*(_DWORD *)(v2 + 1));
      case 0x13u:
        return bswap64(*(_QWORD *)(v2 + 1));
      default:
        goto LABEL_16;
    }
  }
  if (v3 == 33)
  {
    _H0 = bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16;
    __asm { FCVT            S0, H0 }
    return (uint64_t)_S0;
  }
  if (v3 == 34)
    return (uint64_t)COERCE_FLOAT(bswap32(*(_DWORD *)(v2 + 1)));
  if (v3 != 35)
LABEL_16:
    abort();
  return (uint64_t)COERCE_DOUBLE(bswap64(*(_QWORD *)(v2 + 1)));
}

__n64 FigCaptureBinaryPlistGetRealForObjectAtOffset(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  __n64 result;
  unsigned int v5;

  v2 = (unsigned __int8 *)(*a1 + a2);
  v3 = *v2;
  if (v3 <= 0x20)
  {
    result.n64_f64[0] = 0.0;
    switch(*v2)
    {
      case 8u:
        return result;
      case 9u:
        result.n64_f64[0] = 1.0;
        return result;
      case 0x10u:
        result.n64_u8[0] = v2[1];
        result.n64_f64[0] = (double)result.n64_u64[0];
        return result;
      case 0x11u:
        v5 = bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16;
        goto LABEL_14;
      case 0x12u:
        v5 = bswap32(*(_DWORD *)(v2 + 1));
LABEL_14:
        result.n64_f64[0] = (double)v5;
        return result;
      case 0x13u:
        result.n64_f64[0] = (double)(uint64_t)bswap64(*(_QWORD *)(v2 + 1));
        return result;
      default:
        goto LABEL_18;
    }
  }
  if (*v2 > 0x22u)
  {
    if (v3 != 35 && v3 != 48)
      goto LABEL_18;
    result.n64_f64[0] = COERCE_DOUBLE(bswap64(*(_QWORD *)(v2 + 1)));
  }
  else
  {
    if (v3 != 33)
    {
      if (v3 == 34)
      {
        result.n64_f64[0] = COERCE_FLOAT(bswap32(*(_DWORD *)(v2 + 1)));
        return result;
      }
LABEL_18:
      abort();
    }
    _H0 = bswap32(*(unsigned __int16 *)(v2 + 1)) >> 16;
    __asm { FCVT            D0, H0 }
  }
  return result;
}

uint64_t nc_addRequirementsForInputToMutableArray(void *a1, void *a2, void *a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t result;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v12 = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "formatRequirements");
  v27 = a5;
  v28 = a6;
  nc_addFormatRequirementsFromInputWithAttachedMediaKey(a1, (uint64_t)a2, a3, a4, a5, a6);
  v26 = a2;
  result = objc_msgSend(a1, "_passthroughModeForAttachedMediaKey:", a2);
  v25 = result;
  if ((_DWORD)result)
  {
    v14 = objc_msgSend(a1, "mediaType");
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v15 = (void *)objc_msgSend((id)objc_msgSend(a1, "node"), "outputs");
    result = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (result)
    {
      v16 = result;
      v17 = *(_QWORD *)v30;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v30 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v18);
          if (objc_msgSend(v19, "mediaType") == v14)
          {
            v20 = objc_msgSend(v19, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", v26, objc_msgSend(a1, "index"));
            if (v20)
            {
              v21 = (void *)v20;
              v22 = objc_msgSend(v19, "_passthroughModeForAttachedMediaKey:", v20);
              if ((_DWORD)v22 != (_DWORD)v25)
              {
                v24 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Input %@[%@] and output %@[%@] passthrough modes don't match: %d vs. %d"), a1, v26, v19, v21, v25, v22);
                objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], v24, 0));
              }
              nc_addFormatRequirementsFromOutputWithAttachedMediaKey(v19, (uint64_t)v21, a3, a4);
              nc_addRequirementsForInputsDrivingOutputToMutableArray(v19, v21, a3, a4, a1, v27, v28);
              v23 = objc_msgSend((id)objc_msgSend(v19, "connection"), "input");
              if (v23)
                nc_addRequirementsForInputToMutableArray(v23, v21, a3, a4, v27, v28);
            }
          }
          ++v18;
        }
        while (v16 != v18);
        result = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        v16 = result;
      }
      while (result);
    }
  }
  else if (!v12)
  {
    return objc_msgSend(a2, "isEqualToString:", CFSTR("PrimaryFormat"));
  }
  return result;
}

uint64_t nc_addFormatRequirementsFromOutputWithAttachedMediaKey(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t result;
  uint64_t v8;

  result = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "formatRequirements");
  if (result)
  {
    v8 = result;
    result = objc_msgSend((id)result, "isEmpty");
    if ((result & 1) == 0)
    {
      result = objc_msgSend(a3, "containsObject:", v8);
      if ((result & 1) == 0)
      {
        if (a4)
          objc_msgSend(a3, "addObject:", a1);
        return objc_msgSend(a3, "addObject:", v8);
      }
    }
  }
  return result;
}

uint64_t nc_addFormatRequirementsFromInputWithAttachedMediaKey(void *a1, uint64_t a2, void *a3, int a4, _QWORD *a5, uint64_t *a6)
{
  void *v12;
  uint64_t result;
  uint64_t v14;

  v12 = (void *)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2);
  result = objc_msgSend(v12, "formatRequirements");
  if (result)
  {
    v14 = result;
    result = objc_msgSend((id)result, "isEmpty");
    if ((result & 1) == 0)
    {
      result = objc_msgSend(a3, "containsObject:", v14);
      if ((result & 1) == 0)
      {
        if (a4)
          objc_msgSend(a3, "addObject:", a1);
        result = objc_msgSend(a3, "addObject:", v14);
      }
      if (a5)
      {
        if (!*a5)
        {
          result = objc_msgSend(v12, "conversionToPassthroughModeNeverAllowed");
          if ((_DWORD)result)
          {
            result = objc_msgSend(v12, "passthroughMode");
            if ((_DWORD)result)
            {
              *a5 = a1;
              *a6 = a2;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t nc_addRequirementsForInputsDrivingOutputToMutableArray(void *a1, void *a2, void *a3, int a4, void *a5, _QWORD *a6, uint64_t *a7)
{
  void *v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  id obj;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v11 = (void *)objc_msgSend(a1, "node");
  v27 = a3;
  v28 = a4;
  nc_addFormatRequirementsFromOutputWithAttachedMediaKey(a1, (uint64_t)a2, a3, a4);
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = (id)objc_msgSend(v11, "inputs");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  v25 = result;
  if (result)
  {
    v23 = *(_QWORD *)v36;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v36 != v23)
          objc_enumerationMutation(obj);
        v26 = v13;
        v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v13);
        if (v14 != a5)
        {
          v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", CFSTR("PrimaryFormat"));
          objc_msgSend(v15, "addObjectsFromArray:", objc_msgSend(v14, "specifiedAttachedMediaKeys"));
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v16 = v15;
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v32;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v32 != v19)
                  objc_enumerationMutation(v16);
                v21 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
                if (objc_msgSend(v14, "_passthroughModeForAttachedMediaKey:", v21))
                {
                  if (objc_msgSend(a2, "isEqualToString:", objc_msgSend(a1, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", v21, objc_msgSend(v14, "index"))))
                  {
                    nc_addFormatRequirementsFromInputWithAttachedMediaKey(v14, v21, v27, v28, a6, a7);
                    nc_addRequirementsForInputsDrivingOutputToMutableArray(objc_msgSend((id)objc_msgSend(v14, "connection"), "output"), a2, v27, v28, 0, a6, a7);
                  }
                }
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
            }
            while (v18);
          }
        }
        v13 = v26 + 1;
      }
      while (v26 + 1 != v25);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      v25 = result;
    }
    while (result);
  }
  return result;
}

uint64_t gr_pipelineStageForNodeOutput(void *a1, uint64_t a2)
{
  int v3;
  void *v4;

  v3 = objc_msgSend((id)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2), "indexOfInputWhichDrivesThisOutput");
  v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "node"), "inputs");
  if (objc_msgSend(v4, "count") <= (unint64_t)v3)
    return 0;
  else
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v3), "connection"), "pipelineStage");
}

uint64_t gr_countOfBuffersRetainedOutsideEmitCallbackOfOutputWithDelay(void *a1, uint64_t a2, unsigned int a3, int a4, int a5, _DWORD *a6)
{
  void *v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t i;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _DWORD *v35;
  unsigned int v36;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v39 = objc_msgSend(a1, "mediaType");
  v10 = (void *)objc_msgSend((id)objc_msgSend(a1, "connection"), "input");
  if ((gr_outputAndInputShareAPipelineStage(a1, a2, v10) & 1) != 0)
    v11 = 0;
  else
    v11 = gr_outputOrInputIsStillImagePipelineStage(a1, a2, v10) ^ 1;
  v12 = (void *)objc_msgSend(v10, "mediaConfigurationForAttachedMediaKey:", a2);
  v13 = objc_msgSend(v12, "indefinitelyHeldBufferCount");
  if (v11)
  {
    v14 = a4 - 1;
    if (a4 <= 1)
      v15 = 1;
    else
      v15 = a4;
    if (a5)
    {
      v16 = (v15 - a5) & ~((v15 - a5) >> 31);
      v14 = a5 - v15;
    }
    else
    {
      a4 = 0;
      v16 = v15;
    }
    a5 = v14 & ~(v14 >> 31);
    a3 += v16;
  }
  if (!v12)
  {
    v12 = (void *)objc_msgSend(v10, "unspecifiedAttachedMediaConfiguration");
    if ((int)objc_msgSend(v12, "retainedBufferCount") > 0)
    {
      if (v12)
        goto LABEL_19;
      goto LABEL_18;
    }
    v17 = objc_msgSend(v12, "delayedBufferCount");
    if (!v12 || v17 < 1)
LABEL_18:
      v12 = (void *)objc_msgSend(v10, "mediaConfigurationForAttachedMediaKey:", CFSTR("PrimaryFormat"));
  }
LABEL_19:
  v18 = objc_msgSend(v12, "retainedBufferCount");
  v19 = objc_msgSend(v12, "delayedBufferCount");
  if (v19)
  {
    v20 = a4 - v19;
    if (a4 <= v19)
      v21 = v19;
    else
      v21 = a4;
    if (a5)
    {
      v22 = (v21 - a5) & ~((v21 - a5) >> 31);
      v20 = a5 - v21;
    }
    else
    {
      a4 = 0;
      v22 = v21;
    }
    a5 = v20 & ~(v20 >> 31);
    a3 += v22;
  }
  else
  {
    if (a4 <= v18)
      v23 = v18;
    else
      v23 = a4;
    a4 = v23;
  }
  if (objc_msgSend(v10, "_passthroughModeForAttachedMediaKey:", a2) == 1)
  {
    v35 = a6;
    v44 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v24 = (void *)objc_msgSend((id)objc_msgSend(v10, "node"), "outputs");
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    if (v25)
    {
      v26 = v25;
      v36 = a5;
      v27 = *(_QWORD *)v41;
      v28 = a3;
      do
      {
        for (i = 0; i != v26; ++i)
        {
          if (*(_QWORD *)v41 != v27)
            objc_enumerationMutation(v24);
          v30 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
          v31 = objc_msgSend(v30, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", a2, objc_msgSend(v10, "index"));
          if (v31)
          {
            v32 = v31;
            if (objc_msgSend(v30, "mediaType") == v39
              && objc_msgSend(v30, "_passthroughModeForAttachedMediaKey:", v32) == 1)
            {
              v33 = gr_countOfBuffersRetainedOutsideEmitCallbackOfOutputWithDelay(v30, v32, a3, a4, v36, &v44);
              v13 += v44;
              if (v33 > v28)
                v28 = v33;
            }
          }
        }
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      }
      while (v26);
    }
    else
    {
      v28 = a3;
    }
    a3 = v28;
    a6 = v35;
  }
  else if (objc_msgSend(v12, "retainedBufferCount"))
  {
    a3 += (a4 - a5) & ~((a4 - a5) >> 31);
  }
  if (a6)
    *a6 = v13;
  else
    FigDebugAssert3();
  return a3;
}

uint64_t gr_outputOrInputIsStillImagePipelineStage(void *a1, uint64_t a2, void *a3)
{
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "connection"), "pipelineStage"), "stillImagePipelineStage") & 1) != 0)
    return 1;
  else
    return objc_msgSend((id)gr_pipelineStageForNodeOutput(a1, a2), "stillImagePipelineStage");
}

uint64_t gr_outputAndInputShareAPipelineStage(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1
    && a3
    && (v5 = objc_msgSend((id)objc_msgSend(a3, "connection"), "pipelineStage"),
        v6 = gr_pipelineStageForNodeOutput(a1, a2),
        v6 | v5))
  {
    return objc_msgSend((id)v6, "isEqual:", v5);
  }
  else
  {
    return 1;
  }
}

id csu_createInMemorySourcesArrayFromOnDiskSourcesArray(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        v8 = (void *)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("Formats"));
        if (v8)
        {
          v9 = csu_captureSourceVideoFormatsForFormatDictionaries(v8, 1);
          v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v7);
          objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, CFSTR("Formats"));
          objc_msgSend(v2, "addObject:", v10);

        }
        else
        {
          objc_msgSend(v2, "addObject:", v7);
        }
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t FigVideoCaptureSourceCreateWithSourceInfo(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, CFTypeRef *a6)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  __int128 v12;
  id v13;
  int v14;
  CGSize v15;
  char v16;
  BOOL v17;
  CGSize v18;
  unsigned int v19;
  CGSize v20;
  int v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  void *v35;
  CGSize v36;
  const __CFDictionary *v37;
  CGFloat width;
  CGFloat height;
  double x;
  double y;
  void *v42;
  CGSize v43;
  const __CFDictionary *v44;
  float v50;
  const __CFAllocator *v51;
  CFDictionaryRef v52;
  float v53;
  const __CFAllocator *v54;
  CFDictionaryRef v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  id v61;
  void *v62;
  _BOOL4 v63;
  BOOL v64;
  void *v65;
  void *v66;
  CGFloat v67;
  CGFloat v68;
  const __CFString *v69;
  const __CFString *v70;
  const __CFString *v71;
  const __CFString *v72;
  const __CFString *v73;
  const __CFString *v74;
  const __CFString *v75;
  __CFString *v76;
  void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  _BOOL4 v121;
  __int128 v122;
  __int128 v123;
  CFTypeRef cf;
  os_log_type_t type[16];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[2];
  __int128 v130;
  _QWORD v131[3];
  _QWORD v132[3];
  _QWORD v133[3];
  _QWORD v134[3];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  CMTime v139;
  uint64_t v140;
  _BYTE time[32];
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _QWORD v145[2];
  _QWORD v146[2];
  uint64_t v147;
  const __CFString *v148;
  uint64_t v149;
  const __CFString *v150;
  void *v151;
  _QWORD v152[4];
  CMTime v153;
  void *v154;
  const __CFString *v155;
  void *v156;
  const __CFString *v157;
  void *v158;
  _QWORD v159[2];
  _QWORD v160[2];
  __int128 v161[8];
  CGRect v162;
  const __CFString *v163;
  const __CFString *v164;
  const __CFString *v165;
  const __CFString *v166;
  const __CFString *v167;
  const __CFString *v168;
  const __CFString *v169;
  const __CFString *v170;
  const __CFString *v171;
  const __CFString *v172;
  const __CFString *v173;
  const __CFString *v174;
  const __CFString *v175;
  const __CFString *v176;
  const __CFString *v177;
  __CFString *v178;
  __CFString *v179;
  __CFString *v180;
  const __CFString *v181;
  const __CFString *v182;
  const __CFString *v183;
  const __CFString *v184;
  const __CFString *v185;
  const __CFString *v186;
  const __CFString *v187;
  const __CFString *v188;
  __CFString *v189;
  const __CFString *v190;
  const __CFString *v191;
  const __CFString *v192;
  const __CFString *v193;
  const __CFString *v194;
  const __CFString *v195;
  const __CFString *v196;
  const __CFString *v197;
  const __CFString *v198;
  const __CFString *v199;
  const __CFString *v200;
  const __CFString *v201;
  __CFString *v202;
  const __CFString *v203;
  const __CFString *v204;
  const __CFString *v205;
  const __CFString *v206;
  const __CFString *v207;
  const __CFString *v208;
  const __CFString *v209;
  const __CFString *v210;
  __CFString *v211;
  __CFString *v212;
  uint64_t v213;
  CGSize v214;

  v213 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (cs_initializeStatics_onceToken != -1)
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_76);
  FigCaptureSourceGetClassID();
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
  {
    v108 = v10;
LABEL_135:
    FigDebugAssert3();
    goto LABEL_136;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 48) = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
  v122 = 0u;
  v123 = 0u;
  FigCaptureGetCurrentProcessAuditToken(&v122);
  v12 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(DerivedStorage + 16) = *(_OWORD *)a3;
  *(_OWORD *)(DerivedStorage + 32) = v12;
  v13 = (id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B8F8);
  *(_QWORD *)(DerivedStorage + 104) = v13;
  v14 = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
  v15 = *(CGSize *)(a3 + 16);
  v162.origin = *(CGPoint *)a3;
  v162.size = v15;
  v161[0] = v122;
  v161[1] = v123;
  v16 = FigCaptureAuditTokenProcessesAreEqual((__int128 *)&v162, v161);
  if ((v16 & 1) != 0)
  {
    v17 = 1;
  }
  else if ((v14 - 17) > 3)
  {
    v17 = 0;
  }
  else
  {
    v18 = *(CGSize *)(a3 + 16);
    v162.origin = *(CGPoint *)a3;
    v162.size = v18;
    v17 = FigCaptureClientIsAllowedToUseMetadataCameras(&v162) != 0;
  }
  *(_BYTE *)(DerivedStorage + 228) = v17;
  v19 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Hidden")), "BOOLValue");
  if ((v16 & 1) == 0)
  {
    v20 = *(CGSize *)(a3 + 16);
    v162.origin = *(CGPoint *)a3;
    v162.size = v20;
    v21 = FigCaptureClientIsAllowedToAccessHiddenCameras(&v162) ? 0 : v19;
    if (v21 == 1)
    {
      if (dword_1ECFE9450)
      {
        LODWORD(v139.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v139.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v112 = value;
        else
          v112 = value & 0xFFFFFFFE;
        if (v112)
        {
          LODWORD(v161[0]) = 136315138;
          *(_QWORD *)((char *)v161 + 4) = "FigVideoCaptureSourceCreateWithSourceInfo";
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_139;
    }
  }
  v118 = v19;
  *(_QWORD *)DerivedStorage = (int)FigAtomicAdd32();
  *(_DWORD *)(DerivedStorage + 8) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("SourceType")), "intValue");
  *(_DWORD *)(DerivedStorage + 88) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
  *(_QWORD *)(DerivedStorage + 96) = (id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B918);
  *(_QWORD *)(DerivedStorage + 112) = (id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B958);
  *(_QWORD *)(DerivedStorage + 120) = (id)objc_msgSend(a5, "h264Settings");
  *(_QWORD *)(DerivedStorage + 128) = (id)objc_msgSend(a5, "hevcSettings");
  v119 = a2;
  v120 = DerivedStorage;
  *(_QWORD *)(DerivedStorage + 136) = (id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B978);
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v24 = objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
  v25 = v24;
  v121 = (v24 > 0x14 || ((1 << v24) & 0x100420) == 0) && v24 - 21 < 0xFFFFFFFC;
  objc_msgSend(v23, "setObject:forKeyedSubscript:", CMClockGetHostTimeClock(), CFSTR("Clock"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC4B0, 0x1E4952E78);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Connected"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("Streaming"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC4C8, CFSTR("MediaType"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", *(_QWORD *)(v22 + 96), CFSTR("Formats"));
  v127 = 0u;
  v128 = 0u;
  *(_OWORD *)type = 0u;
  v126 = 0u;
  v26 = *(void **)(v22 + 96);
  v27 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", type, v161, 16);
  if (v27)
  {
    v28 = v27;
    v29 = *(_QWORD *)v126;
LABEL_20:
    v30 = 0;
    while (1)
    {
      if (*(_QWORD *)v126 != v29)
        objc_enumerationMutation(v26);
      v31 = *(void **)(*(_QWORD *)&type[8] + 8 * v30);
      if ((objc_msgSend(v31, "isDefaultActiveFormat") & 1) != 0)
        break;
      if (v28 == ++v30)
      {
        v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", type, v161, 16);
        if (v28)
          goto LABEL_20;
        goto LABEL_26;
      }
    }
    if (!v31)
      goto LABEL_26;
  }
  else
  {
LABEL_26:
    v114 = v117;
    LODWORD(v113) = 0;
    FigDebugAssert3();
    v31 = 0;
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v31, CFSTR("ActiveFormat"), v113, v114);
  v32 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v31, "defaultMinFrameRateForSessionPreset:", 0);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v32, "numberWithFloat:"));
  v33 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(v31, "defaultMaxFrameRateForSessionPreset:", 0);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v33, "numberWithFloat:"));
  v34 = 0x1E0C99000;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
  {
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("AdjustingFocus"));
    v35 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v35, "setObject:forKeyedSubscript:", &unk_1E49FC468, CFSTR("FocusMode"));
    if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("FocusPointOfInterest")), "BOOLValue"))
    {
      v36 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      v162.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      v162.size = v36;
      v37 = (const __CFDictionary *)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("DefaultContinuousAutoFocusWindowSize"));
      if (v37
        || (v37 = (const __CFDictionary *)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("DefaultAutoFocusCenterWindowSize"))) != 0)
      {
        CGSizeMakeWithDictionaryRepresentation(v37, &v162.size);
        width = v162.size.width;
        height = v162.size.height;
        x = 0.5 - v162.size.width * 0.5;
        y = 0.5 - v162.size.height * 0.5;
        v162.origin.x = x;
        v162.origin.y = y;
      }
      else
      {
        x = v162.origin.x;
        y = v162.origin.y;
        width = v162.size.width;
        height = v162.size.height;
      }
      objc_msgSend(v35, "setObject:forKeyedSubscript:", CGRectCreateDictionaryRepresentation(*(CGRect *)&x), CFSTR("FocusRect"));
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("SmoothFocus")), "BOOLValue"))objc_msgSend(v35, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("SmoothFocus"));
    if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("AutoFocusRangeRestriction")), "BOOLValue"))objc_msgSend(v35, "setObject:forKeyedSubscript:", &unk_1E49FC4E0, CFSTR("FocusRangeRestriction"));
    v42 = v35;
    v34 = 0x1E0C99000uLL;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v42), CFSTR("FocusOperation"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", CGRectCreateDictionaryRepresentation(*MEMORY[0x1E0C9D628]), CFSTR("Option25Changed"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("Option25Changed2"));
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02DA0, CFSTR("LensPosition"));
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))
  {
    v43 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    v162.origin = (CGPoint)*MEMORY[0x1E0C9D648];
    v162.size = v43;
    v44 = (const __CFDictionary *)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("DefaultAutoExposureCenterWindowSize"));
    if (v44)
    {
      CGSizeMakeWithDictionaryRepresentation(v44, &v162.size);
      __asm { FMOV            V1.2D, #0.5 }
      v162.origin = (CGPoint)vsubq_f64(_Q1, vmulq_f64((float64x2_t)v162.size, _Q1));
    }
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("AdjustingExposure"));
    v160[0] = &unk_1E49FC468;
    v159[0] = CFSTR("ExposureMode");
    v159[1] = CFSTR("ExposureRect");
    v160[1] = CGRectCreateDictionaryRepresentation(v162);
    objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", v160, v159, 2), CFSTR("ExposureOperation"));
    memset(&v139, 0, sizeof(v139));
    objc_msgSend(v31, "defaultMinFrameRateForSessionPreset:", 0);
    CMTimeMake(&v139, 1, (int)v50);
    v51 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(CMTime *)time = v139;
    v52 = CMTimeCopyAsDictionary((CMTime *)time, v51);
    objc_msgSend(v23, "setObject:forKeyedSubscript:", CFAutorelease(v52), CFSTR("ActiveMaxExposureDuration"));
    memset(time, 0, 24);
    objc_msgSend(v31, "defaultMaxFrameRateForSessionPreset:", 0);
    CMTimeMake((CMTime *)time, 1, (int)v53);
    v153 = *(CMTime *)time;
    v54 = v51;
    v34 = 0x1E0C99000uLL;
    v55 = CMTimeCopyAsDictionary(&v153, v54);
    objc_msgSend(v23, "setObject:forKeyedSubscript:", CFAutorelease(v55), CFSTR("ExposureDuration"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC4F8, CFSTR("ISO"));
    v157 = CFSTR("Bias");
    v158 = &unk_1E4A02DB0;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v158, &v157, 1), CFSTR("ExposureTargetBiasOperation"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02DB0, CFSTR("ExposureTargetBias"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02DB0, CFSTR("ExposureTargetOffset"));
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("WhiteBalance")), "BOOLValue"))
  {
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("AdjustingWhiteBalance"));
    v155 = CFSTR("WhiteBalanceMode");
    v156 = &unk_1E49FC468;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", &v156, &v155, 1), CFSTR("WhiteBalanceOperation"));
    v56 = (void *)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("DefaultWhiteBalanceGains"));
    if (!v56 || (v57 = (uint64_t)v56, objc_msgSend(v56, "length") != 12))
    {
      LODWORD(v162.origin.y) = 0x40000000;
      v162.origin.x = 0.00781250186;
      v57 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v162, 12);
    }
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v57, CFSTR("DeviceWhiteBalanceGains"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v57, CFSTR("GrayWorldDeviceWhiteBalanceGains"));
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA70], CFSTR("SceneClassificationConfidences"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionary"));
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:"), "BOOLValue"))
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("FlashOverheated"));
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("Torch")), "BOOLValue"))
  {
    v58 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("TorchActive"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v58, CFSTR("TorchOverheated"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02F80, CFSTR("TorchLevel"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v58, CFSTR("AutoTorchEnabled"));
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", 0x1E4936058), "BOOLValue"))objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC4E0, CFSTR("DigitalFlashMode"));
  v59 = v25 - 17;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("GlobalToneMapping")), "BOOLValue"))objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("GlobalToneMappingEnabled"));
  v60 = MEMORY[0x1E0C9AAA0];
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0]);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v60);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0]);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC4E0);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E49FC510);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v60);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0));
  v152[0] = CFSTR("FlashMode");
  v152[1] = CFSTR("HDRMode");
  v153.value = (CMTimeValue)&unk_1E49FC4E0;
  *(_QWORD *)&v153.timescale = &unk_1E49FC4E0;
  v152[2] = CFSTR("QualityPrioritization");
  v152[3] = CFSTR("DigitalFlashMode");
  v153.epoch = (CMTimeEpoch)&unk_1E49FC4B0;
  v154 = &unk_1E49FC4E0;
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", &v153, v152, 4));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02F90);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", &unk_1E4A02FA0);
  v61 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v62 = v61;
  v63 = v121;
  v64 = !v121;
  if (v59 <= 3)
    v64 = 0;
  if (!v64)
  {
    v65 = v61;
    v66 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", *MEMORY[0x1E0CA2558]);
    if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("FaceTracking")), "BOOLValue"))objc_msgSend(v66, "addObject:", *MEMORY[0x1E0CA4CC8]);
    v150 = CFSTR("MetadataGroup-Face");
    v151 = v66;
    v62 = v65;
    objc_msgSend(v65, "addEntriesFromDictionary:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", &v151, &v150, 1));
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", 0x1E4952598), "BOOLValue"))
  {
    v148 = CFSTR("MetadataGroup-SecureEyeRelief");
    v147 = *MEMORY[0x1E0D08598];
    v149 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v147, 1);
    objc_msgSend(v62, "addEntriesFromDictionary:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", &v149, &v148, 1));
  }
  if (v121)
  {
    v145[0] = CFSTR("MetadataGroup-MRC");
    v67 = *MEMORY[0x1E0CA4C48];
    v162.origin.x = *(CGFloat *)MEMORY[0x1E0CA4C40];
    v162.origin.y = v67;
    v68 = *MEMORY[0x1E0CA4C58];
    v162.size.width = *(CGFloat *)MEMORY[0x1E0CA4C50];
    v162.size.height = v68;
    v69 = (const __CFString *)*MEMORY[0x1E0CA4C68];
    v163 = (const __CFString *)*MEMORY[0x1E0CA4C60];
    v164 = v69;
    v70 = (const __CFString *)*MEMORY[0x1E0CA4C78];
    v165 = (const __CFString *)*MEMORY[0x1E0CA4C70];
    v166 = v70;
    v71 = (const __CFString *)*MEMORY[0x1E0CA4C88];
    v167 = (const __CFString *)*MEMORY[0x1E0CA4C80];
    v168 = v71;
    v72 = (const __CFString *)*MEMORY[0x1E0CA4C98];
    v169 = (const __CFString *)*MEMORY[0x1E0CA4C90];
    v170 = v72;
    v73 = (const __CFString *)*MEMORY[0x1E0D08560];
    v171 = (const __CFString *)*MEMORY[0x1E0CA4CA0];
    v172 = v73;
    v74 = (const __CFString *)*MEMORY[0x1E0D08570];
    v173 = (const __CFString *)*MEMORY[0x1E0D08568];
    v174 = v74;
    v75 = (const __CFString *)*MEMORY[0x1E0D08588];
    v175 = (const __CFString *)*MEMORY[0x1E0D08578];
    v176 = v75;
    v76 = (__CFString *)*MEMORY[0x1E0D08558];
    v177 = (const __CFString *)*MEMORY[0x1E0D08580];
    v178 = v76;
    v146[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v162, 20);
    v145[1] = CFSTR("MetadataGroup-OfflineVIS");
    v144 = *MEMORY[0x1E0CA4CB8];
    v146[1] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v144, 1);
    objc_msgSend(v62, "addEntriesFromDictionary:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", v146, v145, 2));
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("ObjectsDetection")), "BOOLValue"))
  {
    v115 = v62;
    v77 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v78 = (void *)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("ObjectsDetectionSupportedMetadataKeys"));
    v116 = v25;
    if (v78)
    {
      v79 = v78;
      v142 = 0u;
      v143 = 0u;
      memset(time, 0, sizeof(time));
      v80 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", time, &v139, 16);
      if (v80)
      {
        v81 = v80;
        v82 = **(_QWORD **)&time[16];
        do
        {
          v83 = 0;
          do
          {
            if (**(_QWORD **)&time[16] != v82)
              objc_enumerationMutation(v79);
            v84 = *(_QWORD *)(*(_QWORD *)&time[8] + 8 * v83);
            if (v84)
            {
              if (cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_onceToken != -1)
                dispatch_once(&cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_onceToken, &__block_literal_global_116_0);
              v85 = objc_msgSend((id)cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_sMetadataKeysByConfigurationKeysDict, "objectForKeyedSubscript:", v84);
              if (v85)
                objc_msgSend(v77, "addObject:", v85);
            }
            ++v83;
          }
          while (v81 != v83);
          v81 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", time, &v139, 16);
        }
        while (v81);
      }
    }
    else
    {
      v86 = FigCapturePlatformIdentifier();
      v87 = *MEMORY[0x1E0CA2548];
      v139.value = *MEMORY[0x1E0CA2560];
      *(_QWORD *)&v139.timescale = v87;
      v88 = *MEMORY[0x1E0D08550];
      v139.epoch = *MEMORY[0x1E0CA2550];
      v140 = v88;
      objc_msgSend(v77, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v139, 4));
      if (v59 >= 4)
      {
        v138 = *MEMORY[0x1E0CA2568];
        objc_msgSend(v77, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v138, 1));
      }
      if (v86 >= 8)
      {
        v89 = *MEMORY[0x1E0D08538];
        *(_QWORD *)time = *MEMORY[0x1E0D08530];
        *(_QWORD *)&time[8] = v89;
        *(_QWORD *)&time[16] = *MEMORY[0x1E0D08540];
        objc_msgSend(v77, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", time, 3));
        if (v86 >= 0xA)
        {
          v137 = *MEMORY[0x1E0D08548];
          objc_msgSend(v77, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v137, 1));
        }
      }
    }
    v90 = v77;
    v62 = v115;
    objc_msgSend(v115, "setObject:forKeyedSubscript:", v90, CFSTR("MetadataGroup-ObjectDetection"));
    v25 = v116;
    v34 = 0x1E0C99000uLL;
    v63 = v121;
    v60 = MEMORY[0x1E0C9AAA0];
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("VideoPreviewHistogram")), "BOOLValue"))
  {
    v136 = *MEMORY[0x1E0D085A0];
    objc_msgSend(v62, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v136, 1), CFSTR("MetadataGroup-Histogram"));
  }
  if (v63 && MGGetBoolAnswer())
  {
    v135 = *MEMORY[0x1E0D08590];
    objc_msgSend(v62, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v135, 1), CFSTR("MetadataGroup-TextRegion"));
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", v62, CFSTR("AvailableMetadataKeyGroups"));

  v133[0] = CFSTR("EyeDetection");
  v133[1] = CFSTR("BlinkDetection");
  v134[0] = MEMORY[0x1E0C9AAB0];
  v134[1] = MEMORY[0x1E0C9AAB0];
  v133[2] = CFSTR("SmileDetection");
  v134[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", v134, v133, 3), CFSTR("SupportedOptionalFaceDetectionFeatures"));
  v131[0] = CFSTR("EyeDetectionEnabled");
  v131[1] = CFSTR("BlinkDetectionEnabled");
  v132[0] = v60;
  v132[1] = v60;
  v131[2] = CFSTR("SmileDetectionEnabled");
  v132[2] = v60;
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v34 + 3456), "dictionaryWithObjects:forKeys:count:", v132, v131, 3), CFSTR("FaceDetectionConfiguration"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", *(_QWORD *)(v22 + 112), CFSTR("AVCaptureSessionPresetCompressionSettings"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", *(_QWORD *)(v22 + 120), CFSTR("AVH264Settings"));
  objc_msgSend(v23, "setObject:forKeyedSubscript:", *(_QWORD *)(v22 + 128), CFSTR("AVHEVCSettings"));
  if (v25 <= 9 && ((1 << v25) & 0x310) != 0)
  {
    v130 = xmmword_1A32A20E0;
    objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v130, 16), CFSTR("BravoCameraSelection"));
  }
  objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("VideoHDRSuspended"));
  v214.width = 1.0;
  v214.height = 1.0;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v214);
  objc_msgSend(v23, "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("NonDestructiveCropSize"));

  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue"))
  {
    v92 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("AutoFlashEnabled"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v92, CFSTR("FlashActive"));
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v22 + 104), "objectForKeyedSubscript:", CFSTR("SIS")), "BOOLValue"))
  {
    v93 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("StillImageStabilizationAutomaticallyEnabled"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v93, CFSTR("IsStillImageStabilizationScene"));
  }
  v129[0] = CFSTR("Level");
  v129[1] = CFSTR("Factors");
  *(_QWORD *)&v130 = &unk_1E49FC4E0;
  *((_QWORD *)&v130 + 1) = &unk_1E49FC528;
  objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v130, v129, 2), CFSTR("SystemPressureState"));
  *(_QWORD *)(v120 + 176) = v23;
  *(_QWORD *)&v162.size.width = CFSTR("FocusOperation");
  *(_QWORD *)&v162.size.height = CFSTR("CinematicVideoFocusOperation");
  v163 = CFSTR("ExposureOperation");
  v164 = CFSTR("ExposureTargetBiasOperation");
  v165 = CFSTR("WhiteBalanceOperation");
  v166 = CFSTR("TorchLevel");
  v167 = CFSTR("AutoTorchEnabled");
  v168 = CFSTR("ProvidesStortorgetMetadata");
  v169 = CFSTR("AutoAdjustImageControlMode");
  v170 = CFSTR("ImageControlMode");
  v171 = CFSTR("FaceDrivenAEAFMode");
  v172 = CFSTR("StillImageSceneMonitoringConfiguration");
  v173 = CFSTR("FaceDetectionConfiguration");
  v174 = CFSTR("VideoZoomFactor");
  v175 = CFSTR("VideoZoomRampAcceleration");
  v176 = CFSTR("SubjectAreaChangeMonitoringEnabled");
  v177 = CFSTR("ObservedPropertyCounts");
  v178 = CFSTR("ActiveFormat_FigCaptureSessionOnly");
  v179 = CFSTR("ActiveMinFrameRate_FigCaptureSessionOnly");
  v180 = CFSTR("ActiveMaxFrameRate_FigCaptureSessionOnly");
  v181 = CFSTR("BravoCameraSelection");
  v182 = CFSTR("EligibleFallbackCaptureSourceDeviceTypes");
  v183 = CFSTR("NonDestructiveCropSize");
  v184 = CFSTR("AutoFlashEnabled");
  v185 = CFSTR("StillImageStabilizationAutomaticallyEnabled");
  v186 = CFSTR("AutoFocusPositionSensorCalibration");
  v187 = CFSTR("ActiveDepthDataMaxFrameRate");
  v190 = CFSTR("VideoHDRSuspended");
  v191 = CFSTR("DigitalFlashMode");
  v192 = CFSTR("GlobalToneMappingEnabled");
  v193 = CFSTR("TimeLapseCaptureRate");
  v194 = CFSTR("UltraHighResolutionZeroShutterLagEnabled");
  v195 = CFSTR("OverheadCameraMode");
  v196 = CFSTR("CenterStageRectOfInterest");
  v197 = CFSTR("CenterStageFramingMode");
  v198 = CFSTR("CenterStageMetadataDeliveryEnabled");
  v199 = CFSTR("StartPanningAtPoint");
  v200 = CFSTR("PanWithTranslation");
  v201 = CFSTR("PortraitEffectStudioLightQuality");
  v202 = CFSTR("PrewarmingEnabled");
  v203 = CFSTR("BackgroundBlurAperture");
  v204 = CFSTR("StudioLightingIntensity");
  v205 = CFSTR("GesturesEnabled");
  v206 = CFSTR("BackgroundReplacementPixelBuffer");
  v207 = CFSTR("PerformOneShotFraming");
  v208 = CFSTR("ResetFraming");
  v209 = CFSTR("CenterStageFieldOfViewRestrictedToWide");
  v211 = CFSTR("HasProxy");
  v212 = CFSTR("PropertySetByProxy");
  v189 = CFSTR("ResumeAdjustingFocusNotifications_FigCaptureSessionOnly");
  *(_QWORD *)&v162.origin.x = CFSTR("ActiveMinFrameRate");
  *(_QWORD *)&v162.origin.y = CFSTR("ActiveMaxFrameRate");
  v188 = CFSTR("ActiveMaxExposureDuration");
  v210 = CFSTR("Hidden");
  *(_QWORD *)(v120 + 184) = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v162, 54);
  v94 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 184));
  objc_msgSend(v94, "removeObject:", CFSTR("ActiveMinFrameRate"));
  objc_msgSend(v94, "removeObject:", CFSTR("ActiveMaxFrameRate"));
  objc_msgSend(v94, "removeObject:", CFSTR("ActiveMaxExposureDuration"));
  objc_msgSend(v94, "removeObject:", 0x1E4953058);
  v95 = objc_msgSend(v94, "removeObject:", CFSTR("Hidden"));
  *(_QWORD *)(v120 + 192) = v94;
  FigCaptureDeviceGetNotificationCenter(v95);
  v96 = FigNotificationCenterAddWeakListener();
  FigCaptureDeviceGetNotificationCenter(v96);
  v97 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v97)
  {
    v108 = v97;
    goto LABEL_135;
  }
  FigCaptureDeviceGetNotificationCenter(v97);
  v98 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v98)
  {
    v108 = v98;
    goto LABEL_135;
  }
  FigCaptureDeviceGetNotificationCenter(v98);
  v99 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v99)
  {
    v108 = v99;
    goto LABEL_135;
  }
  FigCaptureDeviceGetNotificationCenter(v99);
  v100 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v100)
  {
    v108 = v100;
    goto LABEL_135;
  }
  FigCaptureDeviceGetNotificationCenter(v100);
  v101 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v101)
  {
    v108 = v101;
    goto LABEL_135;
  }
  objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v118), CFSTR("Hidden"));
  v102 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("ReadyToUnhide")), "BOOLValue");
  objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v102), CFSTR("ReadyToUnhide"));
  v103 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("BatteryState")), "integerValue");
  objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v103), CFSTR("BatteryState"));
  objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("BatteryLevel")), "floatValue");
  objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"), CFSTR("BatteryLevel"));
  v104 = +[BWFigCaptureAttachedAccessoriesMonitor sharedAttachedAccessoriesMonitor](BWFigCaptureAttachedAccessoriesMonitor, "sharedAttachedAccessoriesMonitor");
  if (v104)
  {
    v105 = v104;
    CMNotificationCenterGetDefaultLocalCenter();
    v106 = CMNotificationCenterAddListener();
    if ((_DWORD)v106)
    {
      v108 = v106;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v107 = CMNotificationCenterAddListener();
      if (!(_DWORD)v107)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v120 + 48));
        if (!objc_msgSend(*(id *)(v120 + 176), "objectForKeyedSubscript:", CFSTR("WalletAccessoryConnected")))
          objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v105, "walletAccessoryConnected")), CFSTR("WalletAccessoryConnected"));
        if (!objc_msgSend(*(id *)(v120 + 176), "objectForKeyedSubscript:", CFSTR("BatteryPackAccessoryConnected")))
          objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v105, "batteryPackAccessoryConnected")), CFSTR("BatteryPackAccessoryConnected"));
        if (objc_msgSend(*(id *)(v120 + 104), "objectForKeyedSubscript:", CFSTR("ManualFramingDeviceType"))
          && !objc_msgSend(*(id *)(v120 + 176), "objectForKeyedSubscript:", CFSTR("ManualFramingDeviceType")))
        {
          objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v120 + 104), "objectForKeyedSubscript:", CFSTR("ManualFramingDeviceType")), CFSTR("ManualFramingDeviceType"));
        }
        if (objc_msgSend((id)objc_msgSend(*(id *)(v120 + 104), "objectForKeyedSubscript:", CFSTR("DockedTrackingSupported")), "BOOLValue")&& !objc_msgSend(*(id *)(v120 + 176), "objectForKeyedSubscript:", CFSTR("DockedTrackingActive")))
        {
          objc_msgSend(*(id *)(v120 + 176), "setObject:forKeyedSubscript:", objc_msgSend(v119, "objectForKeyedSubscript:", CFSTR("DockedTrackingActive")), CFSTR("DockedTrackingActive"));
        }
        pthread_mutex_unlock(*(pthread_mutex_t **)(v120 + 48));
        v108 = 0;
        *(_QWORD *)(v120 + 64) = 1;
        *a6 = cf;
        return v108;
      }
      v108 = v107;
    }
    goto LABEL_135;
  }
  FigDebugAssert3();
LABEL_139:
  v108 = 0;
LABEL_136:
  if (cf)
    CFRelease(cf);
  return v108;
}

uint64_t FigCapturePlatformIOSurfaceWiringAssertionEnabled()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sIOSurfaceWiringAssertionEnabled;
}

uint64_t FigCaptureGetPIDFromAuditToken(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pid(&v3);
}

double FigCaptureGetCurrentProcessAuditToken@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (FigCaptureGetCurrentProcessAuditToken_sOnceToken != -1)
    dispatch_once(&FigCaptureGetCurrentProcessAuditToken_sOnceToken, &__block_literal_global_102);
  result = *(double *)&FigCaptureGetCurrentProcessAuditToken_currentProcessAuditToken;
  v3 = unk_1ECFEA520;
  *a1 = FigCaptureGetCurrentProcessAuditToken_currentProcessAuditToken;
  a1[1] = v3;
  return result;
}

__SecTask *FigCaptureClientIsAllowedToAccessHiddenCameras(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __SecTask *v5;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = FigCaptureClientHasEntitlementWithSecTask(v3, CFSTR("com.apple.private.avfoundation.capture.hidden-cameras.allow"));
  CFRelease(v4);
  return v5;
}

uint64_t FigCaptureClientIsRunningInXCTest(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  uint64_t IsRunningInXCTestWithSecTask;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  IsRunningInXCTestWithSecTask = FigCaptureClientIsRunningInXCTestWithSecTask(v3);
  CFRelease(v4);
  return IsRunningInXCTestWithSecTask;
}

uint64_t FigCaptureClientIsRunningInXCTestWithSecTask(__SecTask *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (__CFString *)SecTaskCopySigningIdentifier(a1, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = FigCaptureClientApplicationIDIsXCTest(v1);

  return v3;
}

uint64_t FigCaptureClientApplicationIDIsXCTest(void *a1)
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1)
  {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_184);
    if (a1)
      goto LABEL_3;
    return 0;
  }
  if (!a1)
    return 0;
LABEL_3:
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E493D8B8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D8D8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D8F8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D918) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend(a1, "isEqualToString:", 0x1E493D938);
  }
}

__SecTask *FigCaptureClientHasEntitlementWithSecTask(__SecTask *a1, __CFString *a2)
{
  __SecTask *v2;
  CFTypeRef v4;
  CFErrorRef v5;
  CFTypeID v6;
  CFErrorRef error;

  v2 = a1;
  error = 0;
  if (!a1)
    return v2;
  if (-[__CFString length](a2, "length"))
  {
    v4 = SecTaskCopyValueForEntitlement(v2, a2, &error);
    v2 = 0;
    v5 = error;
    if (error || !v4)
      goto LABEL_9;
    v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
      v2 = (__SecTask *)(CFBooleanGetValue((CFBooleanRef)v4) != 0);
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  v5 = error;
LABEL_9:
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  return v2;
}

const __CFString *FigCaptureVideoStabilizationStrengthToString(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1E49232F0[a1];
}

void multiStreamCameraSourceNode_secondaryScalerServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 1);
}

void multiStreamCameraSourceNode_primaryScalerServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 0);
}

FigCaptureCameraSourcePipelineConfiguration *captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration(uint64_t a1, void *a2, char a3, char a4, uint64_t a5, char a6, int a7, char a8, char a9, char *a10, char a11, char *a12, char a13, _DWORD *a14)
{
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  FigCaptureCameraSourcePipelineConfiguration *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int StillImageNoiseReductionAndFusionScheme;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t i;
  void *v38;
  float v39;
  float v40;
  void *v41;
  unsigned int v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v48;
  char v49;
  char v50;
  char shouldEnableGreenGhostMitigation;
  void *v52;
  void *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t j;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  int v66;
  _BOOL4 v67;
  int v68;
  char v69;
  float v70;
  float v71;
  char v72;
  int v73;
  char v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t k;
  void *v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t m;
  unsigned int v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t n;
  int v94;
  int v95;
  void *v96;
  int v97;
  char v98;
  uint64_t v99;
  void (*v100)(uint64_t, const __CFString *, uint64_t, id *);
  id v101;
  char v102;
  int v103;
  int v104;
  int v105;
  char v106;
  int v107;
  int v108;
  char v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  void *v115;
  int v116;
  int v117;
  BOOL v118;
  int v119;
  unsigned int v120;
  _BOOL4 v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  float v132;
  char v133;
  void *v134;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  char v146;
  unint64_t v147;
  char v148;
  char v149;
  int v150;
  char v151;
  int v152;
  int v153;
  char v154;
  char v155;
  char v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t ii;
  int IsTenBit;
  char v166;
  int v167;
  float v168;
  char ShouldIncludeDiagnosticMetadata;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  char v175;
  BOOL v176;
  int v177;
  char shouldEnableVideoSTF;
  int v179;
  int v180;
  BOOL v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  int v187;
  int v188;
  char v189;
  char v190;
  BOOL v191;
  char v192;
  char v193;
  char v194;
  void *v195;
  char IsBayerRaw;
  int v197;
  int v198;
  unsigned __int8 v199;
  int v200;
  _BOOL4 v202;
  char v203;
  unsigned int v204;
  char v205;
  int v206;
  char v207;
  void *v208;
  int v209;
  _BOOL4 v210;
  int v211;
  BOOL v212;
  int v213;
  int v214;
  char v215;
  int v216;
  int v217;
  int v218;
  char IsCameraOrDerivative;
  char v220;
  uint64_t v221;
  char *v222;
  char v224;
  int v225;
  char v226;
  unsigned int v227;
  int v228;
  int v229;
  char v230;
  char v231;
  char v232;
  int v233;
  int v234;
  int v235;
  uint64_t v240;
  FigCaptureCameraSourcePipelineConfiguration *v241;
  char *v242;
  id v243;
  unint64_t v244;
  int v245;
  int v246;
  int v247;
  char v248;
  void *v249;
  void *v250;
  char v251;
  uint64_t v252;
  uint64_t DerivedStorage;
  void *v254;
  uint64_t newValue;
  void *v256;
  id v257;
  uint64_t v258;
  id obj;
  __n128 v260;
  CMTimeEpoch epoch;
  CMTime v262;
  __n128 v263;
  uint64_t v264;
  __n128 v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  int v279;
  id v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  _BYTE v285[128];
  _BYTE v286[128];
  uint64_t v287;
  _BYTE v288[128];
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v279 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = objc_msgSend(a2, "stillImageConnectionConfiguration");
  v18 = (void *)objc_msgSend(a2, "metadataObjectConnectionConfigurations");
  v19 = (void *)objc_msgSend(a2, "videoPreviewSinkConnectionConfiguration");
  v20 = (void *)objc_msgSend(a2, "videoCaptureConnectionConfigurations");
  v242 = (char *)objc_msgSend(a2, "previewDerivedConnectionConfigurations");
  v243 = (id)objc_msgSend(a2, "depthDataConnectionConfiguration");
  v21 = (void *)objc_msgSend(a2, "cameraConfiguration");
  v22 = (void *)objc_msgSend(a2, "videoDataConnectionConfigurations");
  v222 = (char *)objc_msgSend(a2, "pointCloudDataConnectionConfigurations");
  v249 = a2;
  v23 = (FigCaptureCameraSourcePipelineConfiguration *)FigCaptureConnectionConfigurationWithSinkType((void *)objc_msgSend(a2, "videoCaptureConnectionConfigurations"), 4);
  v24 = objc_msgSend(v21, "requiredFormat");
  newValue = v17;
  v25 = (void *)v17;
  v26 = v21;
  v27 = objc_msgSend(v25, "irisSinkConfiguration");
  StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(v26, "source"), &v279);
  if (v279)
  {
    FigDebugAssert3();
    goto LABEL_313;
  }
  v234 = StillImageNoiseReductionAndFusionScheme;
  v254 = v19;
  v256 = (void *)v24;
  v250 = (void *)v27;
  v221 = a5;
  v208 = FigCaptureConnectionConfigurationWithSinkType(v20, 4);
  if (v208 && objc_msgSend(v19, "previewDepthDataDeliveryEnabled"))
    v29 = objc_msgSend(v19, "previewDepthFilterRenderingEnabled");
  else
    v29 = 0;
  v252 = a1;
  v257 = v26;
  v241 = v23;
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v30 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v275, v288, 16);
  if (v30)
  {
    v31 = v30;
    v32 = 0;
    v258 = 0;
    v33 = 0;
    v34 = *(_QWORD *)v276;
    v35 = -1.0;
    v36 = 0.0;
    do
    {
      for (i = 0; i != v31; ++i)
      {
        if (*(_QWORD *)v276 != v34)
          objc_enumerationMutation(v18);
        v38 = *(void **)(*((_QWORD *)&v275 + 1) + 8 * i);
        if (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v38))
        {
          if (FigCaptureSourceIsSecureMetadataSource(objc_msgSend((id)objc_msgSend(v38, "sourceConfiguration"), "source"), &v279))
          {
            v32 = objc_msgSend(v38, "faceTrackingMaxFaces");
            objc_msgSend(v38, "faceTrackingNetworkFailureThresholdMultiplier");
            v36 = v39;
            LOBYTE(v258) = objc_msgSend(v38, "faceTrackingUsesFaceRecognition");
            objc_msgSend(v38, "faceTrackingFailureFieldOfViewModifier");
            v35 = v40;
            BYTE4(v258) = 1;
          }
          else
          {
            v33 = 1;
          }
        }
      }
      v31 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v275, v288, 16);
    }
    while (v31);
  }
  else
  {
    v32 = 0;
    v258 = 0;
    v33 = 0;
    v35 = -1.0;
    v36 = 0.0;
  }
  v209 = v32;
  obj = v20;
  v244 = (unint64_t)v22;
  if (BWDeviceSupportsCoreMediaFaceTracking())
  {
    v41 = v254;
    v42 = objc_msgSend(v254, "previewDepthFilterRenderingEnabled") & (v29 ^ 1);
    BYTE4(v258) &= v42 ^ 1;
    v227 = v42;
    v33 |= v42;
  }
  else
  {
    v227 = 0;
    v41 = v254;
  }
  v43 = v256;
  v44 = v257;
  cf[0] = 0;
  v45 = objc_msgSend(v257, "source");
  v46 = *MEMORY[0x1E0C9AE00];
  v47 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
  v235 = v29;
  v248 = v33;
  if (v47 && !v47(v45, CFSTR("AttributesDictionary"), v46, cf))
  {
    v48 = objc_msgSend((id)objc_msgSend((id)cf[0], "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrection")), "BOOLValue");

    v225 = objc_msgSend(v256, "intelligentDistortionCorrectionSupported");
    if (v48)
    {
      v48 = objc_msgSend(v257, "geometricDistortionCorrectionEnabled");
      v245 = objc_msgSend(v257, "geometricDistortionCorrectionEnabled");
      goto LABEL_26;
    }
  }
  else
  {
    v225 = objc_msgSend(v256, "intelligentDistortionCorrectionSupported");
    v48 = 0;
  }
  v245 = 0;
LABEL_26:
  v240 = v46;
  if ((objc_msgSend(v257, "cinematicFramingEnabled") & 1) != 0 || (objc_msgSend(v257, "deskCamEnabled") & 1) != 0)
  {
    v49 = 0;
    v247 = 0;
    v50 = 0;
  }
  else
  {
    v54 = objc_msgSend(v257, "manualCinematicFramingEnabled");
    v55 = v48;
    v49 = 0;
    v233 = v55;
    v247 = v55 & ~v54;
    if ((v54 & 1) != 0)
    {
      v50 = 0;
    }
    else
    {
      v50 = 0;
      if (((v245 ^ 1) & 1) == 0)
      {
        v281 = 0u;
        v282 = 0u;
        v283 = 0u;
        v284 = 0u;
        v56 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
        if (v56)
        {
          v57 = v56;
          v58 = 0;
          v59 = *(_QWORD *)v282;
          while (2)
          {
            for (j = 0; j != v57; ++j)
            {
              if (*(_QWORD *)v282 != v59)
                objc_enumerationMutation(v20);
              v61 = *(void **)(*((_QWORD *)&v281 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v62 = (void *)objc_msgSend(v61, "sinkConfiguration");
                if (objc_msgSend(v62, "sinkType") == 4
                  || objc_msgSend(v62, "sinkType") == 6)
                {
                  if (objc_msgSend(v61, "videoStabilizationType") != 4)
                  {
                    v58 = 0;
                    goto LABEL_322;
                  }
                  v58 = 1;
                }
              }
            }
            v57 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
            if (v57)
              continue;
            break;
          }
        }
        else
        {
          v58 = 0;
        }
LABEL_322:
        v50 = v58 ^ 1;
        v49 = v245;
        v247 = v233;
        v41 = v254;
        v43 = v256;
        v44 = v257;
      }
    }
  }
  v231 = v50;
  v232 = v49;
  if ((objc_msgSend(v43, "isStillImageStabilizationSupported") & 1) != 0)
    v207 = 1;
  else
    v207 = objc_msgSend(v43, "configureForStillImageStabilizationSupport");
  shouldEnableGreenGhostMitigation = cs_shouldEnableGreenGhostMitigation(v44);
  if ((int)objc_msgSend((id)objc_msgSend(v44, "requiredFormat"), "configureForGreenGhostMitigationVersion") > 0)
    shouldEnableGreenGhostMitigation = 1;
  if (v247 && objc_msgSend(v256, "gdcInStillImageSinkPipelineSupported"))
  {
    v52 = v41;
    v224 = csp_gdcExpandsImageDimensions(objc_msgSend(v44, "source"));
  }
  else
  {
    v52 = v41;
    v224 = 0;
  }
  v217 = objc_msgSend(v250, "optimizesImagesForOfflineVideoStabilization");
  v230 = shouldEnableGreenGhostMitigation;
  if (objc_msgSend(v250, "irisMovieCaptureEnabled"))
    v212 = objc_msgSend(v250, "irisMovieAutoTrimMethod") != 0;
  else
    v212 = 0;
  v215 = objc_msgSend(v52, "previewDepthFilterRenderingEnabled");
  if (+[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", v20, v33 & 1))
  {
    v210 = 1;
    v53 = (void *)newValue;
  }
  else
  {
    v53 = (void *)newValue;
    if (+[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", v242, v33 & 1))
    {
      v210 = 1;
    }
    else
    {
      if (newValue)
      {
        v287 = newValue;
        v63 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v287, 1);
      }
      else
      {
        v63 = 0;
      }
      v210 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", v63, v33 & 1);
    }
  }
  v213 = FigCaptureMetadataObjectConfigurationsRequireOfflineVideoStabilizationMotionData(v18);
  IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(v252);
  v246 = captureSession_clientSetsUserInitiatedCaptureRequestTime();
  v228 = FigCaptureZeroShutterLagEnabled(v44, v250, (void *)objc_msgSend(v53, "stillImageSinkConfiguration"), v246);
  v64 = (void *)objc_msgSend(v53, "sinkConfiguration");
  captureSession_clientIsCameraOrDerivative(v252);
  v229 = FigCaptureSoftISPEnabled(v44, v64);
  if (v229)
  {
    v65 = v256;
    v66 = v225;
    if (objc_msgSend(v256, "isDeepFusionSupported"))
      v67 = objc_msgSend((id)objc_msgSend(v53, "irisSinkConfiguration"), "maxQualityPrioritization") == 3;
    else
      v67 = 0;
  }
  else
  {
    v67 = 0;
    v66 = v225;
    v65 = v256;
  }
  if ((objc_msgSend((id)objc_msgSend(v53, "irisSinkConfiguration"), "digitalFlashCaptureEnabled") & 1) != 0)
    v68 = 1;
  else
    v68 = objc_msgSend((id)objc_msgSend(v53, "irisSinkConfiguration"), "intelligentDistortionCorrectionEnabled") | v67;
  v211 = v68;
  if ((objc_msgSend(v44, "geometricDistortionCorrectionEnabled") & v66 & 1) != 0)
    v226 = 1;
  else
    v226 = objc_msgSend((id)objc_msgSend(v53, "irisSinkConfiguration"), "intelligentDistortionCorrectionEnabled");
  v69 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v44, "source"), 0x1E4952258), "BOOLValue");
  v70 = 0.0;
  if (cs_shouldEnableOverCapture(v44))
  {
    objc_msgSend(v65, "spatialOverCapturePercentage");
    v70 = v71;
  }
  v220 = v69;
  if ((objc_msgSend(v44, "backgroundBlurEnabled") & 1) != 0 || (objc_msgSend(v44, "studioLightingEnabled") & 1) != 0)
    v72 = 1;
  else
    v72 = objc_msgSend(v44, "backgroundReplacementEnabled");
  if (objc_msgSend(v65, "isHighPhotoQualitySupported"))
  {
    v73 = objc_msgSend(v250, "maxQualityPrioritization");
    v74 = v72 ^ 1;
    if (v73 <= 1)
      v74 = 0;
    v251 = v74;
  }
  else
  {
    v251 = 0;
  }
  v75 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (objc_msgSend(v53, "videoStabilizationType"))
    objc_msgSend(v75, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v53, "videoStabilizationType")));
  v273 = 0u;
  v274 = 0u;
  v271 = 0u;
  v272 = 0u;
  v76 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v271, v286, 16);
  if (v76)
  {
    v77 = v76;
    v78 = *(_QWORD *)v272;
    do
    {
      for (k = 0; k != v77; ++k)
      {
        if (*(_QWORD *)v272 != v78)
          objc_enumerationMutation(obj);
        v80 = *(void **)(*((_QWORD *)&v271 + 1) + 8 * k);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v80, "videoStabilizationType"))
          objc_msgSend(v75, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v80, "videoStabilizationType")));
      }
      v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v271, v286, 16);
    }
    while (v77);
  }
  if ((cs_shouldEnablePreviewStabilization(v252, v254) & 1) != 0)
  {
    v81 = 1;
    v82 = (unint64_t)v22;
    v83 = v257;
  }
  else
  {
    v269 = 0u;
    v270 = 0u;
    v267 = 0u;
    v268 = 0u;
    v82 = (unint64_t)v22;
    v84 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v267, v285, 16);
    v83 = v257;
    if (v84)
    {
      v85 = v84;
      v86 = *(_QWORD *)v268;
      while (2)
      {
        for (m = 0; m != v85; ++m)
        {
          if (*(_QWORD *)v268 != v86)
            objc_enumerationMutation(v22);
          if ((cs_shouldEnablePreviewStabilization(v252, *(void **)(*((_QWORD *)&v267 + 1) + 8 * m)) & 1) != 0)
          {
            v81 = 1;
            goto LABEL_113;
          }
        }
        v85 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v267, v285, 16);
        v81 = 0;
        if (v85)
          continue;
        break;
      }
    }
    else
    {
      v81 = 0;
    }
  }
LABEL_113:
  v23 = objc_alloc_init(FigCaptureCameraSourcePipelineConfiguration);
  if (objc_msgSend(v83, "source"))
  {
    v280 = 0;
    v88 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v83, "source"), (uint64_t)CFSTR("DeviceType")), "intValue");
    v89 = v88 < 0xA;
    v204 = 0x310u >> v88;
    v206 = objc_msgSend(v83, "imageControlMode");
    v281 = 0u;
    v282 = 0u;
    v283 = 0u;
    v284 = 0u;
    v90 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
    if (v90)
    {
      v91 = v90;
      v202 = v89;
      v92 = *(_QWORD *)v282;
      while (2)
      {
        for (n = 0; n != v91; ++n)
        {
          if (*(_QWORD *)v282 != v92)
            objc_enumerationMutation(v75);
          if (+[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, objc_msgSend(*(id *)(*((_QWORD *)&v281 + 1) + 8 * n), "intValue")))
          {
            v94 = 1;
            v82 = (unint64_t)v22;
            goto LABEL_124;
          }
        }
        v91 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
        if (v91)
          continue;
        break;
      }
      v94 = 0;
      v82 = (unint64_t)v22;
LABEL_124:
      v89 = v202;
    }
    else
    {
      v94 = 0;
    }
    v97 = v89 & v204;
    v98 = objc_msgSend(v257, "cinematicFramingEnabled");
    v205 = objc_msgSend(v257, "deskCamEnabled");
    v203 = objc_msgSend(v257, "manualCinematicFramingEnabled");
    v99 = objc_msgSend(v257, "source");
    v100 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
    if (v100)
    {
      v100(v99, CFSTR("AttributesDictionary"), v240, &v280);
      v101 = v280;
    }
    else
    {
      v101 = 0;
    }
    v102 = objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("ISPMotionData")), "BOOLValue");
    v103 = objc_msgSend((id)objc_msgSend(v280, "objectForKeyedSubscript:", CFSTR("Sphere")), "BOOLValue");

    v104 = v217 | v213 | v94;
    v105 = v210 | v211 | v81 | v97 | v104;
    if (v206 == 4)
      LOBYTE(v104) = 1;
    v106 = v211 | v210 | v215 | v212 | v104 | v98 | v205 | v81 | v203;
    if (v206 == 4)
      v107 = 1;
    else
      v107 = v94;
    v108 = v105 & v103;
    v118 = v108 == 0;
    v109 = v108 | ~v106 | v102;
    v110 = v106 & 1;
    if (!v118)
      v110 = 2;
    if (v107)
      v111 = 3;
    else
      v111 = 0;
    if ((v109 & 1) != 0)
      v95 = v110;
    else
      v95 = v111;
    v96 = (void *)newValue;
    v83 = v257;
  }
  else
  {
    v95 = 0;
    v96 = (void *)newValue;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v23, v95);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v23, (char *)v75);
  v112 = v235;
  if (objc_msgSend(v83, "depthDataDeliveryEnabled"))
  {
    v113 = objc_msgSend((id)objc_msgSend(v83, "depthDataFormat"), "format");
    if (v113 == 1751410032 || v113 == 1717855600)
    {
      v114 = v235;
      v115 = v254;
      v214 = objc_msgSend(v254, "previewDepthFilterRenderingEnabled");
    }
    else
    {
      v114 = v235;
      v214 = 1;
      v115 = v254;
    }
    v218 = objc_msgSend((id)objc_msgSend(v243, "depthDataSinkConfiguration"), "filteringEnabled");
    v117 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v83, "source"), (uint64_t)CFSTR("DeviceType")), "intValue");
    v118 = v117 == 6 || v117 == 12;
    v119 = !v118;
    v216 = v119;
    v120 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v83, "source"), (uint64_t)CFSTR("DeviceType")), "intValue");
    v121 = v120 < 0xA;
    v122 = 0x310u >> v120;
    v123 = cs_streamingDepthDataType(v83);
    v124 = objc_msgSend(v115, "previewDepthDataDeliveryEnabled");
    v125 = FigCaptureMetadataObjectConfigurationsRequireFaceTracking(v18);
    v126 = 0;
    if (v208)
    {
      v127 = v125;
      if (v124)
        v126 = objc_msgSend(v254, "previewDepthFilterRenderingEnabled");
    }
    else
    {
      v127 = v125;
    }
    v128 = v121 & v122;
    v129 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "realtimeFSDNetSupported");
    if (v126 && (v128 & v129 & 1) != 0)
    {
      v116 = 3;
      v82 = v244;
    }
    else
    {
      v82 = v244;
      v130 = v128 ^ 1;
      if (v243)
        v130 = 1;
      if ((v130 | v124 | v127) == 1)
      {
        v96 = (void *)newValue;
        v83 = v257;
        if ((v214 | v216 | v218) == 1)
          v116 = v123 != 3 && v123 != 0;
        else
          v116 = 2;
        goto LABEL_175;
      }
      v116 = 0;
    }
    v96 = (void *)newValue;
    v83 = v257;
LABEL_175:
    v112 = v114;
    goto LABEL_176;
  }
  v116 = 0;
LABEL_176:
  -[FigCaptureCameraSourcePipelineConfiguration setDepthType:]((uint64_t)v23, v116);
  objc_msgSend(v256, "maxContinuousZoomFactorForDepthDataDelivery");
  -[FigCaptureCameraSourcePipelineConfiguration setMaxContinuousZoomFactorForDepthDataDelivery:]((uint64_t)v23, v132);
  v133 = objc_msgSend(v83, "sourceType") == 1
      && (objc_msgSend(v83, "videoStabilizationStrength") == 3
       || objc_msgSend(v83, "videoStabilizationStrength") == 4);
  -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v23, v133);
  if (v83)
  {
    objc_msgSend(v83, "maxExposureDurationClientOverride");
  }
  else
  {
    v265 = 0uLL;
    v266 = 0;
  }
  v263 = v265;
  v264 = v266;
  v134 = v83;
  v135 = objc_msgSend((id)objc_msgSend(v83, "requiredFormat", -[FigCaptureCameraSourcePipelineConfiguration setMaxExposureDurationClientOverride:]((uint64_t)v23, &v263).n128_f64[0]), "dimensions");
  objc_msgSend(v134, "requiredMaxFrameRate");
  if (v135 == 0x87000000F00)
  {
    v137 = v136;
    objc_msgSend(v134, "requiredMaxFrameRate");
    v139 = v138;
    objc_msgSend(v134, "requiredMinFrameRate");
    v141 = v140;
    v142 = captureSession_clientIsCameraOrDerivative(v252);
    if (v139 == v141 && llroundf(v137) == 24 && v142)
    {
      CMTimeMake(&v262, 1, 50);
      v260 = *(__n128 *)&v262.value;
      epoch = v262.epoch;
      -[FigCaptureCameraSourcePipelineConfiguration setMaxExposureDurationFrameworkOverride:]((uint64_t)v23, &v260);
    }
  }
  else
  {
    captureSession_clientIsCameraOrDerivative(v252);
  }
  v143 = objc_msgSend(v134, "source");
  if (*(_QWORD *)(DerivedStorage + 56) && (v144 = v143, objc_msgSend(&unk_1E4A00C08, "containsObject:")))
  {
    cf[0] = 0;
    v145 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v145)
      v145(v144, CFSTR("ISPChromaNoiseReductionForPairingDisabled_FigCaptureSessionOnly"), v240, cf);
    v146 = FigCFEqual() != 0;
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
    v146 = 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setForceCNRDisabled:]((uint64_t)v23, v146);
  -[FigCaptureCameraSourcePipelineConfiguration setCoreMediaFaceTrackingEnabled:]((uint64_t)v23, v248 & 1);
  objc_msgSend(v254, "setCoreMediaFaceTrackingEnabled:", v227);
  -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingEnabled:]((uint64_t)v23, BYTE4(v258) & 1);
  if ((v258 & 0x100000000) != 0)
  {
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingNumTrackedFaces:]((uint64_t)v23, v209);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingNetworkFailureThresholdMultiplier:]((uint64_t)v23, v36);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v23, v258 & 1);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingFailureFieldOfViewModifier:]((uint64_t)v23, v35);
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v23, v247);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v23, v231 & 1);
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v23, v232);
  -[FigCaptureMovieFileSinkPipelineConfiguration setFrameReconstructionEnabled:]((uint64_t)v23, v224);
  -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v23, v230);
  v147 = (unint64_t)v241;
  if (*(_BYTE *)(DerivedStorage + 656))
    v148 = objc_msgSend(v75, "count") != 0;
  else
    v148 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setP3ToBT2020ConversionEnabled:]((uint64_t)v23, v148);
  -[FigCaptureCameraSourcePipelineConfiguration setZeroShutterLagEnabled:]((uint64_t)v23, v228);
  v149 = v228;
  v150 = v246 ^ 1;
  if (((v228 | v246 ^ 1) & 1) == 0)
    v149 = objc_msgSend(v256, "configureForStillImageStabilizationSupport");
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v23, v149);
  if (v234 < 3)
    v151 = 0;
  else
    v151 = objc_msgSend(v256, "isSIFRSupported") & (v207 | v251);
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v23, v151);
  v152 = objc_msgSend((id)objc_msgSend(v96, "irisSinkConfiguration"), "depthDataDeliveryEnabled");
  -[FigCaptureCameraSourcePipelineConfiguration setSoftISPEnabled:]((uint64_t)v23, v229);
  v153 = -[FigCaptureCameraSourcePipelineConfiguration softISPEnabled]((_BOOL8)v23);
  if (((v153 | v150) & 1) == 0)
    LOBYTE(v153) = objc_msgSend(v256, "configureForSoftISPSupport");
  -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v23, v153);
  if (v246)
    v154 = objc_msgSend(v256, "configureForSoftISPSupport");
  else
    v154 = 0;
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v23, v154);
  -[FigCaptureCameraSourcePipelineConfiguration setEnableStillImageSensorOverscanIfAvailable:]((uint64_t)v23, v226);
  -[FigCaptureCameraSourcePipelineConfiguration setOverCapturePercentage:]((uint64_t)v23, v70);
  v155 = v70 > 0.0;
  if (v70 > 0.0)
    v156 = 1;
  else
    v156 = v246 ^ 1;
  if ((v156 & 1) == 0)
    v155 = objc_msgSend(v256, "configureForSpatialOverCaptureSupport");
  -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v23, v155);
  v157 = objc_msgSend((id)objc_msgSend((id)newValue, "irisSinkConfiguration"), "digitalFlashCaptureEnabled");
  if (((v157 | v150) & 1) == 0)
    LOBYTE(v157) = objc_msgSend(v256, "configureForDigitalFlashSupport");
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v23, v157);
  v158 = objc_msgSend((id)objc_msgSend((id)newValue, "irisSinkConfiguration"), "stereoPhotoCaptureEnabled");
  if (((v158 | v150) & 1) == 0)
    LOBYTE(v158) = objc_msgSend(v256, "configureForStereoPhotoCaptureSupport");
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForStereoPhotoCaptureSupport:]((uint64_t)v23, v158);
  v159 = objc_msgSend(v257, "depthDataDeliveryEnabled");
  if (((v159 | v150) & 1) == 0)
    LOBYTE(v159) = objc_msgSend(v256, "configureForDepthDataDelivery");
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDepthDataDeliverySupport:]((uint64_t)v23, v159);
  if (!v257)
    goto LABEL_234;
  if ((objc_msgSend((id)objc_msgSend(v257, "requiredFormat"), "isPhotoFormat") & 1) != 0)
  {
    v160 = 0;
    goto LABEL_236;
  }
  v283 = 0u;
  v284 = 0u;
  v281 = 0u;
  v282 = 0u;
  v161 = objc_msgSend((id)v82, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
  if (!v161)
  {
LABEL_234:
    v160 = 1;
    goto LABEL_236;
  }
  v162 = v161;
  v163 = *(_QWORD *)v282;
  while (2)
  {
    for (ii = 0; ii != v162; ++ii)
    {
      if (*(_QWORD *)v282 != v163)
        objc_enumerationMutation((id)v82);
      if (!objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v281 + 1) + 8 * ii), "videoDataSinkConfiguration"), "optimizedForPreview"))
      {
        v160 = 2;
        v147 = (unint64_t)v241;
        goto LABEL_236;
      }
    }
    v162 = objc_msgSend((id)v82, "countByEnumeratingWithState:objects:count:", &v281, cf, 16);
    v160 = 1;
    v147 = (unint64_t)v241;
    if (v162)
      continue;
    break;
  }
LABEL_236:
  -[FigCaptureCameraSourcePipelineConfiguration setAutoImageControlMode:]((uint64_t)v23, v160);
  IsTenBit = FigCapturePixelFormatIsTenBit(objc_msgSend(v256, "format"));
  v166 = 0;
  if (IsTenBit && v147)
    v166 = FigCapturePixelFormatIs422(objc_msgSend(v256, "format")) ^ 1;
  -[FigCaptureCameraSourcePipelineConfiguration setVideoHDRImageStatisticsEnabled:]((uint64_t)v23, v166);
  -[FigCaptureCameraSourcePipelineConfiguration setGraphContainsMultipleVideoSources:]((uint64_t)v23, a4);
  v167 = objc_msgSend((id)objc_msgSend((id)newValue, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled");
  v168 = 0.1;
  if (!v167)
    v168 = 0.0;
  -[FigCaptureCameraSourcePipelineConfiguration setAdditionalVISOverscanWhenRecording:]((uint64_t)v23, v168);
  if (FigCaptureMetadataObjectConfigurationsRequiresLumaHistograms(v18))
    ShouldIncludeDiagnosticMetadata = FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata();
  else
    ShouldIncludeDiagnosticMetadata = 0;
  -[FigCaptureCameraSourcePipelineConfiguration setLumaHistogramsEnabled:]((uint64_t)v23, ShouldIncludeDiagnosticMetadata);
  -[FigCaptureCameraSourcePipelineConfiguration setContinuityCameraIsWired:]((uint64_t)v23, a6);
  -[FigCaptureCameraSourcePipelineConfiguration setContinuityCameraClientDeviceClass:]((uint64_t)v23, a7);
  -[FigCaptureCameraSourcePipelineConfiguration setClientIsVOIP:]((uint64_t)v23, a8);
  -[FigCaptureCameraSourcePipelineConfiguration setSuppressVideoEffects:]((uint64_t)v23, a9);
  if (!v152)
    goto LABEL_260;
  v170 = cs_stillImageDepthDataType(v257);
  v171 = v170;
  if ((v170 & 0xFFFFFFFE) == 4)
  {
    if (captureSession_clientIsCameraOrDerivative(v252))
      v172 = 2;
    else
      v172 = 8;
    if (v171 == 5)
    {
      -[FigCaptureCameraSourcePipelineConfiguration setStillImageSensorInterfaceRawRetainedBufferCount:]((uint64_t)v23, v172);
      goto LABEL_259;
    }
    if (v171 == 4)
    {
      -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationStrength:]((uint64_t)v23, v172);
      v173 = (uint64_t)v23;
      v174 = v172;
LABEL_257:
      -[FigCaptureCameraSourcePipelineConfiguration setStillImageSashimiRawRetainedBufferCount:](v173, v174);
    }
  }
  else if (v170 == 2)
  {
    if (captureSession_clientIsCameraOrDerivative(v252))
      v174 = 3;
    else
      v174 = 4;
    v173 = (uint64_t)v23;
    goto LABEL_257;
  }
LABEL_259:
  v175 = objc_msgSend(v256, "isSIFRStillImageCaptureWithDepthDataDisabled") ^ 1;
  v176 = -[FigCaptureCameraSourcePipelineConfiguration configureForSIFRStillImageCaptureIfAvailable]((_BOOL8)v23);
  -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v23, v176 & v175);
LABEL_260:
  v177 = -[FigCaptureCameraSourcePipeline colorSpaceProperties](objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v249, "cameraConfiguration"), "sourceID")));
  shouldEnableVideoSTF = cs_shouldEnableVideoSTF(obj, v112, v177);
  v179 = objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v257, "source"), (uint64_t)CFSTR("DepthDataDeliveryConfigurations")), "objectForKeyedSubscript:", CFSTR("VideoSTFMetadataSupported")), "BOOLValue");
  v180 = objc_msgSend(v256, "isVideoSTFMetadataEnabled");
  v181 = 0;
  if (v180)
  {
    v182 = v152 ^ 1 | v179;
    v183 = (unint64_t)v254;
    if (v182)
      v181 = objc_msgSend(v257, "imageControlMode") != 4;
  }
  else
  {
    v183 = (unint64_t)v254;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setVideoSTFMetadataEnabled:]((uint64_t)v23, shouldEnableVideoSTF | v181);
  if (v152
    && objc_msgSend((id)objc_msgSend((id)v183, "videoPreviewSinkConfiguration"), "filterRenderingEnabled")
    && objc_msgSend(v256, "isStudioAndContourPreviewRenderingSupported"))
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)v183, "sourceConfiguration"), "requiredFormat"), "defaultPortraitLightingEffectStrength");
    -[FigCaptureCameraSourcePipelineConfiguration setStreamingForegroundSegmentationEnabled:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingEnabled:]((uint64_t)v23, (v248 & 1) == 0);
  }
  if (objc_msgSend(v257, "depthDataDeliveryEnabled")
    && objc_msgSend((id)objc_msgSend(v257, "depthDataFormat"), "RGBIRStereoFusionSupported"))
  {
    -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionEnabled:]((uint64_t)v23, objc_msgSend((id)objc_msgSend((id)v183, "videoPreviewSinkConfiguration"), "filterRenderingEnabled"));
  }
  if (-[FigCaptureCameraSourcePipelineConfiguration RGBIRStereoFusionEnabled]((_BOOL8)v23)
    && (int)FigCapturePlatformIdentifier() >= 8)
  {
    -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMinDepthThresholdMM:]((uint64_t)v23, 300);
    if ((int)FigCapturePlatformIdentifier() > 8
      || objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "RGBIRStereoFusionThresholdsEnabled"))
    {
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:]((uint64_t)v23, 1000);
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:]((uint64_t)v23, 2000);
      -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthValueMM:]((uint64_t)v23, 5000);
    }
  }
  if (v112)
  {
    if (-[FigCaptureCameraSourcePipelineConfiguration depthType]((uint64_t)v23) == 3)
    {
      -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v23, 0);
      -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v23, 0);
      if (objc_msgSend((id)objc_msgSend(v257, "requiredFormat"), "dimensions") == 3840)
      {
        v184 = (uint64_t)v23;
        v185 = 0x14400000240;
      }
      else
      {
        v184 = (uint64_t)v23;
        v185 = 0x18C000002C0;
      }
      -[FigCaptureCameraSourcePipelineConfiguration setCaptureDimensionsForFSDNetSecondary:](v184, v185);
    }
    else
    {
      -[FigCaptureCameraSourcePipelineConfiguration setDepthDimensionsOverride:]((uint64_t)v23, 0xB800000148);
      -[FigCaptureCameraSourcePipelineConfiguration setStrictDepthModePreferred:]((uint64_t)v23, 1);
      -[FigCaptureCameraSourcePipelineConfiguration setDepthOutputEnabled:]((uint64_t)v23, 1);
    }
    v186 = 1;
    -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v23, 1);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v23, 0);
    -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v23, 0);
  }
  else
  {
    v186 = objc_msgSend(v249, "cameraCalibrationDataConnectionConfigurations") != 0;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setStreamingCameraCalibrationDataDeliveryEnabled:]((uint64_t)v23, v186);
  v187 = objc_msgSend((id)v147, "stereoVideoCaptureEnabled");
  if ((v187 & v112) != 1
    && ((v188 = v187,
         -[FigCaptureCameraSourcePipelineConfiguration setStereoVideoCaptureEnabled:]((uint64_t)v23, v187),
         !v188)
     || objc_msgSend((id)v147, "videoStabilizationMethod") == 2
     || objc_msgSend((id)v147, "videoStabilizationMethod") == 3
     || objc_msgSend((id)v147, "videoStabilizationMethod") == 5))
  {
    if (-[FigCaptureCameraSourcePipelineConfiguration stereoVideoCaptureEnabled]((_BOOL8)v23))
    {
      -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v23, 0);
      -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v23, 0);
      -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v23, 1);
      -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v23, 0);
      -[FigCaptureCameraSourcePipelineConfiguration setConfigureForZeroShutterLagSupport:]((uint64_t)v23, 0);
      -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v23, 0);
      -[FigCaptureCameraSourcePipelineConfiguration setConfigureForDigitalFlashSupport:]((uint64_t)v23, 0);
      -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSoftISPSupport:]((uint64_t)v23, 0);
      -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v23, 0);
    }
    if ((v112 & 1) != 0 || -[FigCaptureCameraSourcePipelineConfiguration stereoVideoCaptureEnabled]((_BOOL8)v23))
    {
      v189 = -[FigCaptureCameraSourcePipelineConfiguration midFrameSynchronizationEnabled]((_BOOL8)v23);
      -[FigCaptureCameraSourcePipelineConfiguration setMidFrameSynchronizationEnabled:]((uint64_t)v23, v189);
    }
    -[FigCaptureCameraSourcePipelineConfiguration setCameraConfiguration:](v23, (char *)v257);
    -[FigCaptureCameraSourcePipelineConfiguration setVideoPreviewSinkConnectionConfiguration:](v23, (char *)v183);
    -[FigCaptureCameraSourcePipelineConfiguration setPreviewDerivedConnectionConfigurations:](v23, v242);
    -[FigCaptureCameraSourcePipelineConfiguration setVideoCaptureConnectionConfigurations:](v23, (char *)obj);
    -[FigCaptureCameraSourcePipelineConfiguration setStillImageConnectionConfiguration:](v23, (char *)newValue);
    -[FigCaptureCameraSourcePipelineConfiguration setDepthDataConnectionConfiguration:](v23, (char *)v243);
    -[FigCaptureCameraSourcePipelineConfiguration setPointCloudDataConnectionConfigurations:](v23, v222);
    -[FigCaptureCameraSourcePipelineConfiguration setClientIsCameraOrDerivative:]((uint64_t)v23, IsCameraOrDerivative);
    -[FigCaptureCameraSourcePipelineConfiguration setDeferredTimeOfFlightNodePrepareEnabled:]((uint64_t)v23, *(_BYTE *)(DerivedStorage + 80));
    -[FigCaptureCameraSourcePipelineConfiguration setClockSynchronizationEnabled:]((uint64_t)v23, a3);
    -[FigCaptureCameraSourcePipelineConfiguration setDepthConversionEnabled:]((uint64_t)v23, 0);
    -[FigCaptureCameraSourcePipelineConfiguration setVisionDataConnectionConfigurations:](v23, (char *)objc_msgSend(v249, "visionDataConnectionConfigurations"));
    -[FigCaptureCameraSourcePipelineConfiguration setMetadataObjectConnectionConfigurations:](v23, (char *)objc_msgSend(v249, "metadataObjectConnectionConfigurations"));
    -[FigCaptureCameraSourcePipelineConfiguration setMovieFileDetectedObjectMetadataConnectionConfigurations:](v23, (char *)objc_msgSend(v249, "movieFileDetectedObjectMetadataConnectionConfigurations"));
    -[FigCaptureCameraSourcePipelineConfiguration setStillImageMaxLossyCompressionLevel:]((uint64_t)v23, +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
    -[FigCaptureCameraSourcePipelineConfiguration setPreviewMaxLossyCompressionLevel:]((uint64_t)v23, +[FigCaptureCameraParameters previewMaxLossyCompressionLevel](FigCaptureCameraParameters, "previewMaxLossyCompressionLevel"));
    -[FigCaptureCameraSourcePipelineConfiguration setVideoDataMaxLossyCompressionLevel:]((uint64_t)v23, +[FigCaptureCameraParameters videoDataMaxLossyCompressionLevel](FigCaptureCameraParameters, "videoDataMaxLossyCompressionLevel"));
    -[FigCaptureCameraSourcePipelineConfiguration setMovieFileMaxLossyCompressionLevel:]((uint64_t)v23, +[FigCaptureCameraParameters movieFileMaxLossyCompressionLevelForPixelFormat:](FigCaptureCameraParameters, "movieFileMaxLossyCompressionLevelForPixelFormat:", objc_msgSend(v256, "format")));
    if (a11)
      v190 = (v183 | v82 | v147 | newValue) != 0;
    else
      v190 = 0;
    -[FigCaptureCameraSourcePipelineConfiguration setSmartStyleLearningEnabled:]((uint64_t)v23, v190);
    v191 = -[FigCaptureCameraSourcePipelineConfiguration smartStyleLearningEnabled]((_BOOL8)v23);
    if (newValue)
      v192 = v191;
    else
      v192 = 0;
    -[FigCaptureCameraSourcePipelineConfiguration setSmartStyleReversibilityEnabled:]((uint64_t)v23, v192);
    -[FigCaptureCameraSourcePipelineConfiguration setSmartStyle:](v23, a12);
    if (-[FigCaptureCameraSourcePipelineConfiguration smartStyleLearningEnabled]((_BOOL8)v23))
    {
      -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v23, 1);
      v193 = (int)FigCapturePlatformIdentifier() > 10;
      -[FigCaptureCameraSourcePipelineConfiguration setPreLTMThumbnailEnabled:]((uint64_t)v23, v193);
      v194 = (int)FigCapturePlatformIdentifier() > 10;
      -[FigCaptureCameraSourcePipelineConfiguration setPostColorProcessingThumbnailEnabled:]((uint64_t)v23, v194);
    }
    -[FigCaptureCameraSourcePipelineConfiguration setRebuildingGraphForTrueVideoTransition:]((uint64_t)v23, a13);
    v195 = (void *)objc_msgSend(*(id *)(DerivedStorage + 448), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)newValue, "sinkConfiguration"), "sinkID"));
    if (objc_msgSend((id)objc_msgSend((id)newValue, "sinkConfiguration"), "sinkType") == 10)
    {
      IsBayerRaw = FigCapturePixelFormatIsBayerRaw(objc_msgSend(v195, "rawOutputFormat"));
      +[BWStillImageCoordinatorNode worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:stillImageCaptureSettings:captureDevice:](BWStillImageCoordinatorNode, "worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:stillImageCaptureSettings:captureDevice:", v195, 0, v221);
    }
    else
    {
      +[BWStillImageCoordinatorNode worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:stillImageCaptureSettings:captureDevice:](BWStillImageCoordinatorNode, "worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:stillImageCaptureSettings:captureDevice:", 0, 0, v221);
      IsBayerRaw = 0;
    }
    -[FigCaptureCameraSourcePipelineConfiguration setStillImageOutputRetainedBufferCountOverride:]((uint64_t)v23, (int)cf[0]);
    -[FigCaptureCameraSourcePipelineConfiguration setStillImageOutputSushiRawAttachmentOptionEnabled:]((uint64_t)v23, IsBayerRaw);
    -[FigCaptureCameraSourcePipelineConfiguration setStructuredLightAFAssistEnabled:]((uint64_t)v23, v220);
    if (objc_msgSend((id)objc_msgSend(v254, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled"))
    {
      LOBYTE(v280) = 0;
      LODWORD(cf[0]) = 0;
      LODWORD(v281) = 0;
      cs_getZoomPIPOverlayConfiguration(v254, (char *)&v280, (float *)cf, (float *)&v281);
      -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPSingleStreamModeEnabled:]((uint64_t)v23, (char)v280);
      -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPMinimumUIZoomFactor:]((uint64_t)v23, *(float *)cf);
      -[FigCaptureCameraSourcePipelineConfiguration setZoomPIPSlaveStreamingFrameRate:]((uint64_t)v23, *(float *)&v281);
    }
    -[FigCaptureCameraSourcePipelineConfiguration setPreferredMasterPortType:](v23, a10);
    v197 = objc_msgSend(v256, "preferredPreviewMaxFrameRate");
    if (v147)
    {
      v198 = v197;
      if (!objc_msgSend((id)v82, "count") && v198 >= 1)
        -[FigCaptureCameraSourcePipelineConfiguration setTargetFrameRateWhenNotRecording:]((uint64_t)v23, v198);
    }
    v199 = cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration((void *)v147);
    -[FigCaptureCameraSourcePipelineConfiguration setTemporalNoiseReductionStrengthHighEnabled:]((uint64_t)v23, v199 ^ 1);
  }
  else
  {
    FigDebugAssert3();
    v279 = FigSignalErrorAt();
  }
LABEL_313:
  v200 = v279;
  if (a14)
    *a14 = v279;
  if (v200)
    return 0;
  else
    return v23;
}

uint64_t BWStringForOSType(unsigned int a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[5];
  unsigned int v6;

  v1 = bswap32(a1);
  v2 = 3;
  if (HIBYTE(a1))
    v2 = 4;
  v3 = v2 - (a1 < 0x10000) - (a1 < 0x100) - (a1 == 0);
  v6 = v1;
  __strncpy_chk();
  v5[v3] = 0;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v5, 30);
}

const __CFString *BWStringFromCaptureDeviceType(int a1)
{
  if ((a1 - 1) > 0x13)
    return CFSTR("Unspecified");
  else
    return off_1E4920288[a1 - 1];
}

uint64_t FigCaptureMetadataObjectConfigurationsRequiresLumaHistograms(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    v5 = *MEMORY[0x1E0D085A0];
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(a1);
        if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5) & 1) != 0)return 1;
        ++v6;
      }
      while (v3 != v6);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationsRequireOfflineVideoStabilizationMotionData(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    v5 = *MEMORY[0x1E0CA4CB8];
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(a1);
        if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5) & 1) != 0)return 1;
        ++v6;
      }
      while (v3 != v6);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationsRequireFaceTracking(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    v5 = *MEMORY[0x1E0CA4CC8];
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(a1);
        if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6), "metadataIdentifiers"), "containsObject:", v5) & 1) != 0)return 1;
        ++v6;
      }
      while (v3 != v6);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsBayerRaw(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1734505011)
  {
    if (a1 == 1650943796)
      return result;
    v3 = 1650946098;
    goto LABEL_7;
  }
  if (a1 != 1734505012 && a1 != 1735549492)
  {
    v3 = 1919379252;
LABEL_7:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t captureSourceRemote_LockForConfiguration()
{
  CMBaseObjectGetDerivedStorage();
  FigAtomicIncrement32();
  return 0;
}

double shmemRegionInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t flatDictionary_init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t __fcp_identifyPlatform_block_invoke()
{
  uint64_t result;
  uint64_t v1;
  uint64_t i;

  result = MGGetSInt64Answer();
  v1 = result;
  for (i = 0; i != 78; i += 2)
  {
    if (qword_1A32A2430[i] == v1)
      result = fcp_reconfigurePlatformWithOverride(LODWORD(qword_1A32A2430[i + 1]), HIDWORD(qword_1A32A2430[i + 1]), 0);
  }
  return result;
}

uint64_t FigCapturePixelFormatTileAlignment(int a1)
{
  void *DescriptionWithPixelFormatType;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  id obj;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!FigCapturePixelFormatGetCompressionType(a1))
    goto LABEL_24;
  DescriptionWithPixelFormatType = (void *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_24;
  }
  v2 = (void *)objc_msgSend(DescriptionWithPixelFormatType, "objectForKeyedSubscript:", *MEMORY[0x1E0CA91B0]);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (!v3)
  {
LABEL_24:
    v18 = 0;
    v6 = 0;
    return v18 | v6;
  }
  v4 = v3;
  LODWORD(v5) = 0;
  LODWORD(v6) = 0;
  v22 = *(_QWORD *)v24;
  v21 = *MEMORY[0x1E0CA91A0];
  v7 = *MEMORY[0x1E0CA91B8];
  v8 = *MEMORY[0x1E0CA9148];
  v9 = *MEMORY[0x1E0CA9140];
  do
  {
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)v24 != v22)
        objc_enumerationMutation(obj);
      v11 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
      v12 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v21), "intValue");
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v7), "intValue");
      if (v14 <= 1)
        v15 = 1;
      else
        v15 = v14;
      v16 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v8), "intValue") * v13;
      v17 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", v9), "intValue") * v15;
      if ((int)v6 <= v16)
        v6 = v16;
      else
        v6 = v6;
      if ((int)v5 <= v17)
        v5 = v17;
      else
        v5 = v5;
    }
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  }
  while (v4);
  v18 = v5 << 32;
  return v18 | v6;
}

uint64_t FigCaptureVideoRangePixelFormatForPixelFormat(uint64_t result)
{
  int v1;
  int v2;

  if ((int)result > 1701722213)
  {
    if ((int)result <= 2019963441)
    {
      if ((int)result <= 1885745711)
      {
        switch((_DWORD)result)
        {
          case 0x656E3866:
            return 1701722230;
          case 0x656E7866:
            return 1701738614;
          case 0x66343230:
            return 2033463856;
        }
        return result;
      }
      if ((_DWORD)result == 1885745712)
        return 1882468912;
      if ((_DWORD)result != 1885745714)
      {
        if ((_DWORD)result == 2019963440)
          return 2016686640;
        return result;
      }
      v2 = 1882468912;
    }
    else
    {
      if ((int)result > 2088265263)
      {
        if ((int)result <= 2100848175)
        {
          if ((_DWORD)result != 2088265264)
          {
            if ((_DWORD)result == 2088265266)
              return 2088269362;
            return result;
          }
          v1 = 2084075056;
          return v1 | 0x400000u;
        }
        if ((_DWORD)result == 2100848176)
          return 2100852272;
        if ((_DWORD)result == 2105042480)
        {
          v1 = 2100852272;
          return v1 | 0x400000u;
        }
        return result;
      }
      if ((_DWORD)result != 2019963442)
      {
        if ((_DWORD)result == 2037741158)
          return 2037741171;
        if ((_DWORD)result == 2084070960)
          return 2084075056;
        return result;
      }
      v2 = 2016686640;
    }
    return v2 | 2u;
  }
  if ((int)result > 792225327)
  {
    if ((int)result > 875704421)
    {
      switch((_DWORD)result)
      {
        case 0x34323066:
          return 875704438;
        case 0x5B386630:
          return 1530426928;
        case 0x5B786630:
          v1 = 1530426928;
          return v1 | 0x400000u;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x2F386630:
          return 792229424;
        case 0x2F786630:
          v1 = 792229424;
          return v1 | 0x400000u;
        case 0x2F786632:
          return 796423730;
      }
    }
  }
  else if ((int)result > 758670895)
  {
    switch((_DWORD)result)
    {
      case 0x2D386630:
        return 758674992;
      case 0x2D786630:
        v1 = 758674992;
        return v1 | 0x400000u;
      case 0x2D786632:
        return 762869298;
    }
  }
  else
  {
    switch((_DWORD)result)
    {
      case 0x26386630:
        return 641234480;
      case 0x26786630:
        v1 = 641234480;
        return v1 | 0x400000u;
      case 0x26786632:
        return 645428786;
    }
  }
  return result;
}

uint64_t FigCaptureFullRangePixelFormatForPixelFormat(uint64_t result)
{
  int v1;
  int v2;

  if ((int)result <= 1701722229)
  {
    if ((int)result > 792229423)
    {
      if ((int)result > 875704437)
      {
        switch((_DWORD)result)
        {
          case 0x34323076:
            return 875704422;
          case 0x5B387630:
            return 1530422832;
          case 0x5B787630:
            v2 = 1530422832;
            return v2 | 0x400000u;
        }
      }
      else
      {
        switch((_DWORD)result)
        {
          case 0x2F387630:
            return 792225328;
          case 0x2F787630:
            v2 = 792225328;
            return v2 | 0x400000u;
          case 0x2F787632:
            return 796419634;
        }
      }
    }
    else if ((int)result > 758674991)
    {
      switch((_DWORD)result)
      {
        case 0x2D387630:
          return 758670896;
        case 0x2D787630:
          v2 = 758670896;
          return v2 | 0x400000u;
        case 0x2D787632:
          return 762865202;
      }
    }
    else
    {
      switch((_DWORD)result)
      {
        case 0x26387630:
          return 641230384;
        case 0x26787630:
          v2 = 641230384;
          return v2 | 0x400000u;
        case 0x26787632:
          return 645424690;
      }
    }
  }
  else
  {
    if ((int)result <= 2033463855)
    {
      if ((int)result <= 1882468913)
      {
        switch((_DWORD)result)
        {
          case 0x656E3876:
            return 1701722214;
          case 0x656E7876:
            return 1701738598;
          case 0x70343230:
            return 1885745712;
        }
        return result;
      }
      switch((_DWORD)result)
      {
        case 0x70343232:
          v1 = 1885745712;
          break;
        case 0x78343230:
          return 2019963440;
        case 0x78343232:
          v1 = 2019963440;
          break;
        default:
          return result;
      }
      return v1 | 2u;
    }
    if ((int)result <= 2088269359)
    {
      switch((_DWORD)result)
      {
        case 0x79343230:
          return 1714696752;
        case 0x79757673:
          return 2037741158;
        case 0x7C387630:
          return 2084070960;
      }
    }
    else
    {
      if ((int)result <= 2100852271)
      {
        if ((_DWORD)result != 2088269360)
        {
          if ((_DWORD)result == 2088269362)
            return 2088265266;
          return result;
        }
        v2 = 2084070960;
        return v2 | 0x400000u;
      }
      if ((_DWORD)result == 2100852272)
        return 2100848176;
      if ((_DWORD)result == 2105046576)
      {
        v2 = 2100848176;
        return v2 | 0x400000u;
      }
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsTenBit(int a1)
{
  uint64_t result;
  int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;

  result = 1;
  if (a1 <= 1651847471)
  {
    if (a1 > 796419631)
    {
      if (a1 > 1278226735)
      {
        if (a1 > 1534621231)
        {
          if (a1 == 1534621232)
            return result;
          v3 = 1651587122;
        }
        else
        {
          if (a1 == 1278226736)
            return result;
          v3 = 1534617136;
        }
      }
      else
      {
        if (a1 > 796423727)
        {
          if (a1 == 796423728)
            return result;
          v5 = 30258;
        }
        else
        {
          if (a1 == 796419632)
            return result;
          v5 = 26162;
        }
        v3 = v5 | 0x2F780000;
      }
    }
    else if (a1 > 762865199)
    {
      if (a1 > 762869295)
      {
        if (a1 == 762869296)
          return result;
        v6 = 30258;
      }
      else
      {
        if (a1 == 762865200)
          return result;
        v6 = 26162;
      }
      v3 = v6 | 0x2D780000;
    }
    else
    {
      if (a1 > 645428783)
      {
        if (a1 == 645428784)
          return result;
        v4 = 30258;
      }
      else
      {
        if (a1 == 645424688)
          return result;
        v4 = 26162;
      }
      v3 = v4 | 0x26780000;
    }
    goto LABEL_53;
  }
  if (a1 <= 2016686641)
  {
    if (a1 > 1882468913)
    {
      if (a1 > 1885745713)
      {
        if (a1 == 1885745714)
          return result;
        v3 = 2016686640;
      }
      else
      {
        if (a1 == 1882468914)
          return result;
        v3 = 1885745712;
      }
    }
    else if (a1 > 1701738613)
    {
      if (a1 == 1701738614)
        return result;
      v3 = 1882468912;
    }
    else
    {
      if (a1 == 1651847472)
        return result;
      v3 = 1701738598;
    }
    goto LABEL_53;
  }
  if (a1 <= 2088265265)
  {
    if (a1 <= 2019963441)
    {
      if (a1 == 2016686642)
        return result;
      v3 = 2019963440;
      goto LABEL_53;
    }
    if (a1 == 2019963442)
      return result;
    v7 = 26160;
    goto LABEL_37;
  }
  if (a1 <= 2088269361)
  {
    if (a1 == 2088265266)
      return result;
    v7 = 30256;
LABEL_37:
    v3 = v7 | 0x7C780000;
LABEL_53:
    if (a1 != v3)
      return 0;
    return result;
  }
  if (a1 != 2088269362 && a1 != 2105042480)
  {
    v3 = 2105046576;
    goto LABEL_53;
  }
  return result;
}

uint64_t FigCapturePixelFormatIsFullRange(int a1)
{
  uint64_t result;
  int v3;

  result = 0;
  if (a1 <= 1701722229)
  {
    if (a1 > 792229423)
    {
      if (a1 > 875704437)
      {
        if (a1 != 875704438 && a1 != 1530426928)
        {
          v3 = 1534621232;
          goto LABEL_34;
        }
      }
      else if (a1 != 792229424 && a1 != 796423728)
      {
        v3 = 796423730;
        goto LABEL_34;
      }
    }
    else if (a1 > 758674991)
    {
      if (a1 != 758674992 && a1 != 762869296)
      {
        v3 = 762869298;
        goto LABEL_34;
      }
    }
    else if (a1 != 641234480 && a1 != 645428784)
    {
      v3 = 645428786;
      goto LABEL_34;
    }
  }
  else if (a1 <= 2033463855)
  {
    if (a1 > 1882468913)
    {
      if (a1 != 1882468914 && a1 != 2016686640)
      {
        v3 = 2016686642;
        goto LABEL_34;
      }
    }
    else if (a1 != 1701722230 && a1 != 1701738614)
    {
      v3 = 1882468912;
      goto LABEL_34;
    }
  }
  else
  {
    if (a1 > 2088269359)
    {
      if (a1 > 2100852271)
      {
        if (a1 == 2100852272)
          return result;
        v3 = 2105046576;
      }
      else
      {
        if (a1 == 2088269360)
          return result;
        v3 = 2088269362;
      }
      goto LABEL_34;
    }
    if (a1 != 2033463856 && a1 != 2037741171)
    {
      v3 = 2084075056;
LABEL_34:
      if (a1 != v3)
        return 1;
    }
  }
  return result;
}

uint64_t FigCapturePixelFormatIsYCbCr(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  unsigned __int16 v8;

  result = 1;
  if (a1 > 1701722229)
  {
    if (a1 <= 2033463855)
    {
      if (a1 > 1882468913)
      {
        if (a1 > 2016686639)
        {
          if (a1 > 2019963439)
          {
            if (a1 == 2019963440)
              return result;
            v4 = 2019963442;
          }
          else
          {
            if (a1 == 2016686640)
              return result;
            v4 = 2016686642;
          }
          goto LABEL_81;
        }
        if (a1 != 1882468914 && a1 != 1885745712)
        {
          v4 = 1885745714;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 > 1714696751)
      {
        if (a1 != 1714696752 && a1 != 1751527984)
        {
          v4 = 1882468912;
          goto LABEL_81;
        }
        return result;
      }
      if (a1 == 1701722230 || a1 == 1701738598)
        return result;
      v7 = 30838;
      goto LABEL_78;
    }
    if (a1 > 2088265265)
    {
      if (a1 > 2100848175)
      {
        if (a1 > 2105042479)
        {
          if (a1 == 2105042480)
            return result;
          v4 = 2105046576;
        }
        else
        {
          if (a1 == 2100848176)
            return result;
          v4 = 2100852272;
        }
        goto LABEL_81;
      }
      if (a1 == 2088265266 || a1 == 2088269360)
        return result;
      v8 = 30258;
    }
    else
    {
      if (a1 <= 2084070959)
      {
        if (a1 == 2033463856 || a1 == 2037741158)
          return result;
        v4 = 2037741171;
        goto LABEL_81;
      }
      if (a1 <= 2087216687)
      {
        if (a1 == 2084070960)
          return result;
        v4 = 2084075056;
        goto LABEL_81;
      }
      if (a1 == 2087216688)
        return result;
      v8 = 26160;
    }
    v4 = v8 | 0x7C780000;
    goto LABEL_81;
  }
  if (a1 > 792225327)
  {
    if (a1 <= 875704421)
    {
      if (a1 > 796419631)
      {
        if (a1 > 796423727)
        {
          if (a1 == 796423728)
            return result;
          v3 = 30258;
        }
        else
        {
          if (a1 == 796419632)
            return result;
          v3 = 26162;
        }
        v4 = v3 | 0x2F780000;
        goto LABEL_81;
      }
      if (a1 != 792225328 && a1 != 792229424)
      {
        v4 = 795371056;
        goto LABEL_81;
      }
      return result;
    }
    if (a1 > 1530426927)
    {
      if (a1 <= 1534621231)
      {
        if (a1 == 1530426928)
          return result;
        v4 = 1534617136;
        goto LABEL_81;
      }
      if (a1 == 1534621232)
        return result;
      v7 = 14438;
LABEL_78:
      v4 = v7 | 0x656E0000;
      goto LABEL_81;
    }
    if (a1 == 875704422 || a1 == 875704438)
      return result;
    v4 = 1530422832;
LABEL_81:
    if (a1 != v4)
      return 0;
    return result;
  }
  if (a1 <= 758670895)
  {
    if (a1 > 645424689)
    {
      if (a1 == 645424690 || a1 == 645428784)
        return result;
      v6 = 30258;
    }
    else
    {
      if (a1 == 641230384 || a1 == 641234480)
        return result;
      v6 = 26160;
    }
    v4 = v6 | 0x26780000;
    goto LABEL_81;
  }
  if (a1 > 762865199)
  {
    if (a1 > 762869295)
    {
      if (a1 == 762869296)
        return result;
      v5 = 30258;
    }
    else
    {
      if (a1 == 762865200)
        return result;
      v5 = 26162;
    }
    v4 = v5 | 0x2D780000;
    goto LABEL_81;
  }
  if (a1 != 758670896 && a1 != 758674992)
  {
    v4 = 761816624;
    goto LABEL_81;
  }
  return result;
}

float FigCapturePixelFormatGetAverageBandwidthInBytesPerPixel(uint64_t a1)
{
  float v2;
  int CompressionType;
  int LossyCompressionLevel;
  float v5;
  int v6;
  uint64_t v7;

  v2 = FigCapturePixelFormatBytesPerPixel(a1);
  CompressionType = FigCapturePixelFormatGetCompressionType(a1);
  if ((CompressionType - 1) < 3)
    return v2 * 0.5;
  if (CompressionType == 4)
  {
    LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel(a1);
    v5 = 2.0;
    if (LossyCompressionLevel)
    {
      v6 = LossyCompressionLevel;
      v7 = FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(a1);
      v2 = FigCapturePixelFormatBytesPerPixel(v7);
      switch(v6)
      {
        case 3:
          v5 = 2.3;
          break;
        case 2:
          v5 = 2.2;
          break;
        case 1:
          v5 = 2.1;
          break;
      }
    }
    return v2 / v5;
  }
  return v2;
}

float FigCapturePixelFormatBytesPerPixel(uint64_t a1)
{
  uint64_t v1;
  int LossyCompressionLevel;
  double v3;
  int v4;
  int v5;
  float v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  int v10;
  int IsTenBit;
  float v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  float v17;
  float v18;
  float v19;
  unsigned __int16 v20;
  int v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = a1;
  LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel(a1);
  if (!LossyCompressionLevel)
  {
    v6 = 1.0;
    goto LABEL_12;
  }
  v4 = LossyCompressionLevel;
  if ((int)v1 > 792872768)
  {
    if ((_DWORD)v1 == 792872769 || (_DWORD)v1 == 2084718401)
      goto LABEL_10;
    v5 = 1111970369;
LABEL_9:
    if ((_DWORD)v1 == v5)
      goto LABEL_10;
    IsTenBit = FigCapturePixelFormatIsTenBit(v1);
    v12 = 0.625;
    if ((int)v1 > 1751527983)
    {
      if ((_DWORD)v1 != 1751527984)
      {
        v13 = 2087216688;
LABEL_90:
        if ((_DWORD)v1 != v13)
          v12 = 0.75;
      }
    }
    else if ((_DWORD)v1 != 761816624)
    {
      v13 = 795371056;
      goto LABEL_90;
    }
    v16 = FigCapturePixelFormatIs422(v1);
    v17 = 0.5;
    v18 = 1.0;
    if (v16)
      v19 = 1.0;
    else
      v19 = 0.5;
    if (v4 == 3)
    {
      if (IsTenBit)
        v17 = 0.6;
      v18 = 0.5;
    }
    else if (v4 == 2)
    {
      v17 = 0.6;
      v18 = 0.625;
      if (IsTenBit)
        v18 = 0.6;
      else
        v17 = v12;
    }
    else
    {
      v17 = 1.0;
      if (v4 == 1)
      {
        v18 = 0.8;
        if (!IsTenBit)
          v18 = 0.75;
        v17 = v18;
      }
    }
    v6 = (float)(v18 + (float)(v19 * v17)) / (float)(v19 + 1.0);
    goto LABEL_11;
  }
  if ((_DWORD)v1 != 641877825)
  {
    v5 = 759318337;
    goto LABEL_9;
  }
LABEL_10:
  v6 = *(float *)&aGgrr[4 * LossyCompressionLevel];
LABEL_11:
  LODWORD(v1) = FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(v1);
LABEL_12:
  LODWORD(v3) = 4.0;
  if ((int)v1 <= 1652056887)
  {
    if ((int)v1 > 1278226535)
    {
      if ((int)v1 <= 1650943795)
      {
        if ((int)v1 <= 1530426927)
        {
          if ((int)v1 <= 1278226741)
          {
            if ((_DWORD)v1 != 1278226536)
            {
              v7 = 1278226736;
              goto LABEL_157;
            }
            goto LABEL_158;
          }
          if ((_DWORD)v1 == 1278226742)
            goto LABEL_158;
          v10 = 1530422832;
          goto LABEL_133;
        }
        if ((int)v1 > 1534621231)
        {
          if ((_DWORD)v1 != 1534621232)
          {
            if ((_DWORD)v1 != 1647392369)
            {
              v7 = 1647719528;
              goto LABEL_157;
            }
            goto LABEL_158;
          }
          goto LABEL_138;
        }
        if ((_DWORD)v1 == 1530426928)
          goto LABEL_134;
        v21 = 1534617136;
LABEL_137:
        if ((_DWORD)v1 != v21)
          goto LABEL_164;
        goto LABEL_138;
      }
      if ((int)v1 > 1651587121)
      {
        if ((int)v1 <= 1651925815)
        {
          if ((_DWORD)v1 == 1651587122)
          {
            LODWORD(v3) = 1.25;
            return v6 * *(float *)&v3;
          }
          v7 = 1651847472;
          goto LABEL_157;
        }
        if ((_DWORD)v1 != 1651925816)
        {
          if ((_DWORD)v1 != 1651926376)
          {
            v7 = 1651927153;
            goto LABEL_157;
          }
          goto LABEL_158;
        }
        goto LABEL_109;
      }
      if ((int)v1 <= 1651519536)
      {
        if ((_DWORD)v1 != 1650943796)
        {
          v7 = 1650946098;
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if ((_DWORD)v1 == 1651519537)
      {
        LODWORD(v3) = 0.5;
        return v6 * *(float *)&v3;
      }
      v7 = 1651519798;
LABEL_157:
      if ((_DWORD)v1 == v7)
        goto LABEL_158;
LABEL_164:
      v23 = (void *)MEMORY[0x1E0C99DA0];
      v24 = *MEMORY[0x1E0C99768];
      v25 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown pixel format (%c%c%c%c)"), v3, BYTE3(v1), BYTE2(v1), BYTE1(v1), v1);
LABEL_163:
      objc_exception_throw((id)objc_msgSend(v23, "exceptionWithName:reason:userInfo:", v24, v25, 0));
    }
    if ((int)v1 > 792872768)
    {
      if ((int)v1 > 875704437)
      {
        if ((int)v1 <= 1278226480)
        {
          if ((_DWORD)v1 == 875704438)
            goto LABEL_134;
          v8 = 1111970369;
        }
        else
        {
          if ((_DWORD)v1 == 1278226481)
          {
            LODWORD(v3) = 0.125;
            return v6 * *(float *)&v3;
          }
          if ((_DWORD)v1 == 1278226488)
            goto LABEL_109;
          v8 = 1278226534;
        }
        goto LABEL_150;
      }
      if ((int)v1 > 825437746)
      {
        if ((_DWORD)v1 == 825437747)
          goto LABEL_158;
        v10 = 875704422;
        goto LABEL_133;
      }
      if ((_DWORD)v1 == 792872769)
        return v6 * *(float *)&v3;
      v7 = 825306677;
      goto LABEL_157;
    }
    if ((int)v1 <= 645424689)
    {
      if ((int)v1 <= 641877824)
      {
        if ((_DWORD)v1 == 641230384)
          goto LABEL_134;
        v10 = 641234480;
LABEL_133:
        if ((_DWORD)v1 != v10)
          goto LABEL_164;
LABEL_134:
        LODWORD(v3) = 1.5;
        return v6 * *(float *)&v3;
      }
      if ((_DWORD)v1 == 641877825)
        return v6 * *(float *)&v3;
      v14 = 26160;
      goto LABEL_105;
    }
    if ((int)v1 > 645428785)
    {
      if ((_DWORD)v1 != 645428786)
      {
        v8 = 759318337;
        goto LABEL_150;
      }
    }
    else if ((_DWORD)v1 != 645424690)
    {
      v14 = 30256;
LABEL_105:
      v21 = v14 | 0x26780000;
      goto LABEL_137;
    }
    LODWORD(v3) = 2.5;
    return v6 * *(float *)&v3;
  }
  if ((int)v1 <= 1882468911)
  {
    if ((int)v1 > 1714696751)
    {
      if ((int)v1 > 1735549491)
      {
        if ((int)v1 <= 1751411058)
        {
          if ((_DWORD)v1 == 1735549492)
            goto LABEL_158;
          v20 = 25968;
        }
        else
        {
          if ((int)v1 > 1751527983)
          {
            if ((_DWORD)v1 == 1751527984)
              goto LABEL_55;
            if ((_DWORD)v1 == 1785950307 || (_DWORD)v1 == 1785950320)
            {
              v23 = (void *)MEMORY[0x1E0C99DA0];
              v24 = *MEMORY[0x1E0C99768];
              v25 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("This function does not support point cloud formats (%c%c%c%c)"), v3, BYTE3(v1), BYTE2(v1), BYTE1(v1), v1);
              goto LABEL_163;
            }
            goto LABEL_164;
          }
          v20 = 26995;
        }
        v7 = v20 | 0x68640000;
        goto LABEL_157;
      }
      if ((int)v1 > 1717856626)
      {
        if ((_DWORD)v1 == 1717856627)
          return v6 * *(float *)&v3;
        v7 = 1734505012;
        goto LABEL_157;
      }
      if ((_DWORD)v1 == 1714696752)
        goto LABEL_134;
      v8 = 1717855600;
    }
    else
    {
      if ((int)v1 > 1701734002)
      {
        if ((int)v1 > 1701734514)
        {
          if ((_DWORD)v1 != 1701734515)
          {
            if ((_DWORD)v1 != 1701738598 && (_DWORD)v1 != 1701738614)
              goto LABEL_164;
            LODWORD(v3) = 1067030938;
            return v6 * *(float *)&v3;
          }
          goto LABEL_158;
        }
        if ((_DWORD)v1 == 1701734003)
          return v6 * *(float *)&v3;
        v7 = 1701734512;
        goto LABEL_157;
      }
      if ((int)v1 <= 1701722229)
      {
        if ((_DWORD)v1 != 1652056888 && (_DWORD)v1 != 1701722214)
          goto LABEL_164;
        goto LABEL_109;
      }
      if ((_DWORD)v1 == 1701722230)
      {
LABEL_109:
        LODWORD(v3) = 1.0;
        return v6 * *(float *)&v3;
      }
      v8 = 1701734000;
    }
LABEL_150:
    if ((_DWORD)v1 != v8)
      goto LABEL_164;
    return v6 * *(float *)&v3;
  }
  if ((int)v1 > 2019963441)
  {
    if ((int)v1 <= 2084718400)
    {
      if ((int)v1 > 2037741157)
      {
        if ((_DWORD)v1 != 2037741158)
        {
          v7 = 2037741171;
          goto LABEL_157;
        }
        goto LABEL_158;
      }
      if ((_DWORD)v1 == 2019963442)
        return v6 * *(float *)&v3;
      v10 = 2033463856;
      goto LABEL_133;
    }
    if ((int)v1 <= 2100852271)
    {
      if ((_DWORD)v1 == 2084718401)
        return v6 * *(float *)&v3;
      v9 = 26160;
      goto LABEL_132;
    }
    if ((_DWORD)v1 != 2105046576 && (_DWORD)v1 != 2105042480)
    {
      v9 = 30256;
LABEL_132:
      v10 = v9 | 0x7D380000;
      goto LABEL_133;
    }
LABEL_138:
    LODWORD(v3) = 1.875;
    return v6 * *(float *)&v3;
  }
  if ((int)v1 <= 1919379251)
  {
    if ((int)v1 > 1885745711)
    {
      if ((_DWORD)v1 == 1885745712)
        goto LABEL_158;
      v15 = 1885745714;
    }
    else
    {
      if ((_DWORD)v1 == 1882468912)
        goto LABEL_158;
      v15 = 1882468914;
    }
    if ((_DWORD)v1 == v15)
    {
      LODWORD(v3) = 1076552008;
      return v6 * *(float *)&v3;
    }
    goto LABEL_164;
  }
  if ((int)v1 <= 2016686639)
  {
    if ((_DWORD)v1 != 1919379252)
    {
      v7 = 1932996149;
      goto LABEL_157;
    }
LABEL_158:
    LODWORD(v3) = 2.0;
    return v6 * *(float *)&v3;
  }
  if ((_DWORD)v1 == 2016686640)
  {
LABEL_55:
    LODWORD(v3) = 3.0;
    return v6 * *(float *)&v3;
  }
  if ((_DWORD)v1 != 2016686642)
  {
    if ((_DWORD)v1 != 2019963440)
      goto LABEL_164;
    goto LABEL_55;
  }
  return v6 * *(float *)&v3;
}

uint64_t FigCapturePixelFormatGetLossyCompressionLevel(int a1)
{
  int v1;
  uint64_t v2;
  int v3;
  unsigned __int16 v4;
  int v5;

  if (a1 <= 796419631)
  {
    if (a1 <= 762869295)
    {
      if (a1 > 761816623)
      {
        if (a1 == 761816624 || a1 == 762865200)
          return 1;
        v1 = 762865202;
      }
      else
      {
        if (a1 == 758670896 || a1 == 758674992)
          return 1;
        v1 = 759318337;
      }
      return a1 == v1;
    }
    if (a1 > 792229423)
    {
      if (a1 == 792229424 || a1 == 792872769)
        return 2;
      v3 = 795371056;
    }
    else
    {
      if (a1 == 762869296 || a1 == 762869298)
        return 1;
      v3 = 792225328;
    }
    goto LABEL_31;
  }
  v2 = 3;
  if (a1 <= 2084718400)
  {
    if (a1 <= 796423729)
    {
      if (a1 == 796419632 || a1 == 796419634)
        return 2;
      v3 = 796423728;
LABEL_31:
      if (a1 != v3)
        return 0;
      return 2;
    }
    if (a1 == 796423730)
      return 2;
    if (a1 == 2084070960)
      return v2;
    v5 = 2084075056;
LABEL_37:
    if (a1 == v5)
      return v2;
    return 0;
  }
  if (a1 > 2088265265)
  {
    if (a1 != 2088265266 && a1 != 2088269360)
    {
      v4 = 30258;
      goto LABEL_36;
    }
  }
  else if (a1 != 2084718401 && a1 != 2087216688)
  {
    v4 = 26160;
LABEL_36:
    v5 = v4 | 0x7C780000;
    goto LABEL_37;
  }
  return v2;
}

uint64_t FigCaptureCompressedPixelFormatForPixelFormat(uint64_t a1, int a2, signed int a3)
{
  uint64_t v5;
  int v6;
  int IsTenBit;
  int v8;
  int v9;
  int v10;
  int IsFullRange;
  BOOL v13;
  unsigned int *v14;
  int v15;
  int v17;
  int v18;

  v5 = a1;
  if (!FigCapturePixelFormatIsYCbCr(a1))
  {
    if ((int)v5 <= 792872768)
    {
      if ((_DWORD)v5 != 641877825)
      {
        v10 = 759318337;
LABEL_31:
        if ((_DWORD)v5 != v10)
          return v5;
      }
    }
    else if ((_DWORD)v5 != 792872769 && (_DWORD)v5 != 2084718401)
    {
      v10 = 1111970369;
      goto LABEL_31;
    }
    if (a2 == 4 && a3 < 4)
    {
      v14 = (unsigned int *)&unk_1A32B24E0;
      return v14[a3];
    }
    return v5;
  }
  v6 = FigCapturePixelFormatIs422(v5);
  IsTenBit = FigCapturePixelFormatIsTenBit(v5);
  v8 = 1;
  if ((int)v5 > 1751527983)
  {
    if ((_DWORD)v5 == 1751527984)
      goto LABEL_13;
    v9 = 2087216688;
  }
  else
  {
    if ((_DWORD)v5 == 761816624)
      goto LABEL_13;
    v9 = 795371056;
  }
  if ((_DWORD)v5 != v9)
    v8 = 0;
LABEL_13:
  IsFullRange = FigCapturePixelFormatIsFullRange(v5);
  if ((v6 & IsTenBit) == 1)
  {
    v13 = a2 == 4 && a3 < 4;
    if (IsFullRange)
    {
      if (v13)
      {
        v14 = (unsigned int *)&unk_1A32B2470;
        return v14[a3];
      }
    }
    else if (v13)
    {
      v14 = (unsigned int *)&unk_1A32B2480;
      return v14[a3];
    }
  }
  else
  {
    if (IsTenBit)
    {
      if (!IsFullRange)
      {
        switch(a2)
        {
          case 1:
            v17 = 1530422832;
            break;
          case 4:
            if (a3 >= 4)
              return v5;
            v14 = (unsigned int *)&unk_1A32B24A0;
            return v14[a3];
          case 2:
            v17 = 2100848176;
            break;
          default:
            return v5;
        }
        return v17 | 0x401000u;
      }
      switch(a2)
      {
        case 1:
          v15 = 1530422832;
          break;
        case 4:
          if (a3 >= 4)
            return v5;
          v14 = (unsigned int *)&unk_1A32B2490;
          return v14[a3];
        case 2:
          v15 = 2100848176;
          break;
        default:
          return v5;
      }
      return v15 | 0x400000u;
    }
    if (v8)
    {
      if (a2 == 4 && a3 < 4)
      {
        v14 = (unsigned int *)&unk_1A32B24B0;
        return v14[a3];
      }
    }
    else
    {
      if (!IsFullRange)
      {
        switch(a2)
        {
          case 1:
            v18 = 1530422832;
            break;
          case 4:
            if (a3 >= 4)
              return v5;
            v14 = (unsigned int *)&unk_1A32B24D0;
            return v14[a3];
          case 2:
            v18 = 2100848176;
            break;
          default:
            return v5;
        }
        return v18 | 0x1000u;
      }
      switch(a2)
      {
        case 1:
          return 1530422832;
        case 4:
          if (a3 >= 4)
            return v5;
          v14 = (unsigned int *)&unk_1A32B24C0;
          return v14[a3];
        case 2:
          return 2100848176;
      }
    }
  }
  return v5;
}

uint64_t FigCapturePixelFormatIs422(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1882468913)
  {
    if (a1 > 2019963441)
    {
      if (a1 == 2019963442 || a1 == 2088265266)
        return result;
      v3 = 2088269362;
    }
    else
    {
      if (a1 == 1882468914 || a1 == 1885745714)
        return result;
      v3 = 2016686642;
    }
LABEL_16:
    if (a1 != v3)
      return 0;
    return result;
  }
  if (a1 > 762869297)
  {
    if (a1 == 762869298 || a1 == 796419634)
      return result;
    v3 = 796423730;
    goto LABEL_16;
  }
  if (a1 != 645424690 && a1 != 645428786)
  {
    v3 = 762865202;
    goto LABEL_16;
  }
  return result;
}

uint64_t FigCapturePixelFormatIs16Bit(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1751527983)
  {
    if (a1 == 1751527984)
      return result;
    v3 = 2087216688;
  }
  else
  {
    if (a1 == 761816624)
      return result;
    v3 = 795371056;
  }
  if (a1 != v3)
    return 0;
  return result;
}

uint64_t FigCapturePixelFormatLosslessCompressedFormatForLossyCompressedFormat(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;

  v1 = 641234480;
  if ((int)a1 > 796419631)
  {
    if ((int)a1 > 2084718400)
    {
      if ((int)a1 > 2088265265)
      {
        if ((_DWORD)a1 != 2088265266)
        {
          if ((_DWORD)a1 == 2088269360)
            return 645428784;
          if ((_DWORD)a1 == 2088269362)
          {
LABEL_39:
            v2 = 30258;
            return v2 | 0x26780000u;
          }
          return a1;
        }
        return 645424690;
      }
      if ((_DWORD)a1 == 2084718401)
        return 641877825;
      if ((_DWORD)a1 == 2087216688)
        return 1751527984;
      if ((_DWORD)a1 != 2088265264)
        return a1;
    }
    else
    {
      if ((int)a1 > 796423729)
      {
        if ((_DWORD)a1 != 796423730)
        {
          if ((_DWORD)a1 != 2084070960)
          {
            if ((_DWORD)a1 != 2084075056)
              return a1;
            return v1;
          }
          return 641230384;
        }
        goto LABEL_39;
      }
      if ((_DWORD)a1 != 796419632)
      {
        if ((_DWORD)a1 != 796419634)
        {
          if ((_DWORD)a1 != 796423728)
            return a1;
          return 645428784;
        }
        return 645424690;
      }
    }
LABEL_40:
    v2 = 26160;
    return v2 | 0x26780000u;
  }
  if ((int)a1 > 762869295)
  {
    if ((int)a1 <= 792229423)
    {
      if ((_DWORD)a1 != 762869296)
      {
        if ((_DWORD)a1 != 762869298)
        {
          if ((_DWORD)a1 != 792225328)
            return a1;
          return 641230384;
        }
        goto LABEL_39;
      }
      return 645428784;
    }
    if ((_DWORD)a1 == 792229424)
      return v1;
    if ((_DWORD)a1 != 792872769)
    {
      if ((_DWORD)a1 == 795371056)
        return 1751527984;
      return a1;
    }
    return 641877825;
  }
  if ((int)a1 > 761816623)
  {
    if ((_DWORD)a1 != 761816624)
    {
      if ((_DWORD)a1 != 762865200)
      {
        if ((_DWORD)a1 != 762865202)
          return a1;
        return 645424690;
      }
      goto LABEL_40;
    }
    return 1751527984;
  }
  if ((_DWORD)a1 == 758670896)
    return 641230384;
  if ((_DWORD)a1 != 758674992)
  {
    if ((_DWORD)a1 != 759318337)
      return a1;
    return 641877825;
  }
  return v1;
}

uint64_t FigCapturePixelFormatIsDepthData(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;

  result = 1;
  if (a1 > 1717855599)
  {
    if (a1 > 1751410031)
    {
      if (a1 == 1751410032)
        return result;
      v4 = 1751411059;
    }
    else
    {
      if (a1 == 1717855600)
        return result;
      v4 = 1717856627;
    }
  }
  else
  {
    if (a1 > 1701734511)
    {
      if (a1 == 1701734512)
        return result;
      v3 = 26739;
    }
    else
    {
      if (a1 == 1701734000)
        return result;
      v3 = 26227;
    }
    v4 = v3 | 0x656E0000;
  }
  if (a1 != v4)
    return 0;
  return result;
}

uint64_t fcp_reconfigurePlatformWithOverride(uint64_t result, int a2, char a3)
{
  const __CFString *v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  char *v7;
  const __CFString *v8;
  const __CFString *v9;
  void *v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  sPlatformID = result;
  sPlatformVariant = a2;
  sPlatformIDString = 0;
  sPlatformSupportsHTPC16x8Compression = 0;
  sPlatformSupportsHTPC32x4Compression = 0;
  sPlatformSupportsUniversalCompression = 0;
  sPlatformSupportsUniversalLossyCompression = 0;
  sIOSurfaceWiringAssertionEnabled = 1;
  sISPHardwareCharacteristics = 0u;
  unk_1ECFEA580 = 0u;
  dword_1ECFEA590 = 0;
  switch((int)result)
  {
    case 1:
      v3 = CFSTR("H7");
      goto LABEL_6;
    case 2:
      v3 = CFSTR("H8");
      goto LABEL_6;
    case 3:
      v3 = CFSTR("H9");
      goto LABEL_6;
    case 4:
      v3 = CFSTR("H10");
LABEL_6:
      sPlatformIDString = (uint64_t)v3;
      return result;
    case 5:
      sPlatformIDString = (uint64_t)CFSTR("H11");
      sPlatformSupportsHTPC16x8Compression = 1;
      v4 = 0x1AB0000012CLL;
      v5 = xmmword_1A32A2410;
      v6 = 533;
      goto LABEL_9;
    case 6:
      sPlatformIDString = (uint64_t)CFSTR("H12");
      sPlatformSupportsHTPC16x8Compression = 1;
      v4 = 0x10A000000D5;
      v5 = xmmword_1A32A2400;
      v6 = 320;
LABEL_9:
      v7 = &sPlatformSupportsHTPC32x4Compression;
      goto LABEL_19;
    case 7:
      sPlatformIDString = (uint64_t)CFSTR("H13");
      v4 = 0x10A000000D5;
      v5 = xmmword_1A32A2400;
      v6 = 320;
      v7 = &sPlatformSupportsUniversalCompression;
      goto LABEL_19;
    case 8:
      v8 = CFSTR("H14");
      goto LABEL_13;
    case 9:
      v8 = CFSTR("H15");
LABEL_13:
      sPlatformIDString = (uint64_t)v8;
      sPlatformSupportsUniversalCompression = 1;
      v4 = 0x1640000010ALL;
      v5 = xmmword_1A32A2400;
      v6 = 400;
      goto LABEL_18;
    case 10:
      v9 = CFSTR("H16");
      goto LABEL_16;
    case 11:
      v9 = CFSTR("H17");
LABEL_16:
      sPlatformIDString = (uint64_t)v9;
      sPlatformSupportsUniversalCompression = 1;
      v4 = 0x1AB00000131;
      v5 = xmmword_1A32A23F0;
      v6 = 450;
      goto LABEL_18;
    case 12:
      sPlatformSupportsUniversalCompression = 1;
      v4 = 0x1DB00000164;
      v5 = xmmword_1A32A23E0;
      v6 = 600;
LABEL_18:
      v7 = &sPlatformSupportsUniversalLossyCompression;
LABEL_19:
      *v7 = 1;
      LODWORD(sISPHardwareCharacteristics) = 4;
      *(__int128 *)((char *)&sISPHardwareCharacteristics + 4) = v5;
      unk_1ECFEA584 = v4;
      dword_1ECFEA58C = v6;
      dword_1ECFEA590 = 800;
      if ((a3 & 1) != 0)
        return result;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v10 = (void *)objc_msgSend((id)CVPixelFormatDescriptionGetPixelFormatTypes(), "reverseObjectEnumerator", 0);
      result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      if (result)
      {
        v11 = result;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = *(_QWORD *)v21;
        do
        {
          v17 = 0;
          do
          {
            if (*(_QWORD *)v21 != v16)
              objc_enumerationMutation(v10);
            v18 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v17), "intValue");
            result = FigCapturePixelFormatGetCompressionType(v18);
            if ((_DWORD)result == 4)
            {
              result = FigCapturePixelFormatGetLossyCompressionLevel(v18);
              v14 |= (_DWORD)result != 0;
              v13 = 1;
            }
            else
            {
              if ((_DWORD)result == 1)
                v19 = 1;
              else
                v19 = v15;
              if ((_DWORD)result == 2)
                v12 = 1;
              else
                v15 = v19;
            }
            if (sPlatformSupportsHTPC16x8Compression)
            {
              if ((v15 & v12 & 1) != 0)
              {
                LOBYTE(v12) = 1;
                LOBYTE(v15) = 1;
                goto LABEL_47;
              }
            }
            else if (sPlatformSupportsUniversalCompression)
            {
              if (sPlatformSupportsUniversalLossyCompression)
              {
                if ((v14 & 1) != 0)
                {
                  v14 = 1;
                  goto LABEL_47;
                }
              }
              else if ((v13 & 1) != 0)
              {
                v13 = 1;
                goto LABEL_47;
              }
            }
            ++v17;
          }
          while (v11 != v17);
          result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
          v11 = result;
        }
        while (result);
      }
      else
      {
        LOBYTE(v12) = 0;
        v13 = 0;
        v14 = 0;
        LOBYTE(v15) = 0;
      }
LABEL_47:
      sPlatformSupportsHTPC16x8Compression &= v15 & 1;
      sPlatformSupportsHTPC32x4Compression &= v12 & 1;
      sPlatformSupportsUniversalCompression &= v13 & 1;
      sPlatformSupportsUniversalLossyCompression &= v14 & 1;
      return result;
    default:
      return result;
  }
}

uint64_t FigCapturePixelFormatGetCompressionType(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  unsigned __int16 v6;

  result = 0;
  if (a1 <= 796419631)
  {
    if (a1 <= 759318336)
    {
      if (a1 <= 645424689)
      {
        if (a1 <= 641877824)
        {
          if (a1 != 641230384)
          {
            v4 = 641234480;
            goto LABEL_60;
          }
          return 4;
        }
        if (a1 == 641877825)
          return 4;
        v6 = 26160;
      }
      else
      {
        if (a1 > 645428785)
        {
          if (a1 != 645428786 && a1 != 758670896)
          {
            v4 = 758674992;
            goto LABEL_60;
          }
          return 4;
        }
        if (a1 == 645424690)
          return 4;
        v6 = 30256;
      }
      v4 = v6 | 0x26780000;
    }
    else if (a1 > 762869297)
    {
      if (a1 > 792229423)
      {
        if (a1 != 792229424 && a1 != 792872769)
        {
          v4 = 795371056;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 762869298)
        return 4;
      v4 = 792225328;
    }
    else
    {
      if (a1 > 762865199)
      {
        if (a1 != 762865200 && a1 != 762865202)
        {
          v4 = 762869296;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 759318337)
        return 4;
      v4 = 761816624;
    }
LABEL_60:
    if (a1 != v4)
      return result;
    return 4;
  }
  if (a1 > 2084718400)
  {
    if (a1 <= 2088269361)
    {
      if (a1 > 2088265263)
      {
        if (a1 != 2088265264 && a1 != 2088265266)
        {
          v4 = 2088269360;
          goto LABEL_60;
        }
        return 4;
      }
      if (a1 == 2084718401)
        return 4;
      v4 = 2087216688;
      goto LABEL_60;
    }
    if (a1 <= 2100852271)
    {
      if (a1 == 2088269362)
        return 4;
      v5 = 2100848176;
    }
    else
    {
      if (a1 == 2100852272 || a1 == 2105042480)
        return 2;
      v5 = 2105046576;
    }
    if (a1 != v5)
      return result;
    return 2;
  }
  if (a1 > 1530426927)
  {
    if (a1 <= 1534621231)
    {
      if (a1 != 1530426928)
      {
        v3 = 1534617136;
LABEL_49:
        if (a1 != v3)
          return result;
      }
    }
    else if (a1 != 1534621232)
    {
      if (a1 != 2084070960)
      {
        v4 = 2084075056;
        goto LABEL_60;
      }
      return 4;
    }
    return 1;
  }
  if (a1 > 796423727)
  {
    if (a1 != 796423728 && a1 != 796423730)
    {
      v3 = 1530422832;
      goto LABEL_49;
    }
    return 4;
  }
  if (a1 != 796419632)
  {
    v4 = 796419634;
    goto LABEL_60;
  }
  return 4;
}

uint64_t FigCaptureStreamGetClassID()
{
  MEMORY[0x1A858C99C](&FigCaptureStreamGetClassID_sRegisterFigCaptureStreamTypeOnce, RegisterFigCaptureStreamType);
  return sFigCaptureStreamID;
}

double fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary(void *a1)
{
  void *v1;
  double v2;
  void *v3;
  double v4;

  if (a1)
  {
    v1 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("StillImageStabilization"));
    v2 = 0.0;
    if (v1)
    {
      v3 = (void *)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("IntegrationTimeThresholdDenominator"));
      if (v3)
      {
        objc_msgSend(v3, "doubleValue");
        return 1.0 / v4;
      }
      else
      {
        FigDebugAssert3();
      }
    }
  }
  else
  {
    FigDebugAssert3();
    return 0.0;
  }
  return v2;
}

float BWGetGeometricDistortionCorrectionStrengthFromDimensions(uint64_t a1, int a2)
{
  int v4;
  float result;

  v4 = FigCapturePlatformIdentifier();
  result = 1.0;
  if (v4 <= 7)
  {
    if ((int)a1 > 2304)
    {
      result = 0.6;
      if ((float)((int)a1 / SHIDWORD(a1)) <= 1.65)
        return 0.5;
    }
    else
    {
      result = 0.75;
      if (a2)
        return 1.0;
    }
  }
  return result;
}

uint64_t BWAddEntriesWithKeysFromDictionaryToDictionary(void *a1, void *a2, void *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(a2);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        v11 = objc_msgSend(a1, "objectForKeyedSubscript:", v10);
        if (v11)
          objc_msgSend(a3, "setObject:forKeyedSubscript:", v11, v10);
        ++v9;
      }
      while (v7 != v9);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void *FigCaptureConnectionConfigurationWithSinkType(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(a1);
    v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "sinkConfiguration"), "sinkType") == a2)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

BOOL __csp_filterConnectionConfigurationsForSourceDeviceTypes_block_invoke(uint64_t a1, void *a2)
{
  int v3;
  int v4;

  v4 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  return objc_msgSend(a2, "underlyingDeviceType") == v4
      || objc_msgSend(a2, "underlyingDeviceType") == v3;
}

void *FigCaptureUnderlyingDeviceTypesFromConnectionConfigurations(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "underlyingDeviceType"));
        if ((objc_msgSend(v2, "containsObject:", v7) & 1) == 0)
          objc_msgSend(v2, "addObject:", v7);
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
  return v2;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresAppClipCodeNode(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08558]);
}

uint64_t captureSourceRemote_UnlockForConfiguration()
{
  _DWORD *v0;

  v0 = (_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  if ((FigAtomicDecrement32() & 0x80000000) != 0)
    *v0 = 0;
  return 0;
}

void __captureSource_postNotificationWithPayload_block_invoke(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (void *)MEMORY[0x1A858DD40]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  objc_autoreleasePoolPop(v2);
}

uint64_t BWCMSampleBufferCreateCopyIncludingMetadata(CMSampleBufferRef sbuf, CMSampleBufferRef *sampleBufferOut)
{
  const __CFAllocator *v4;
  uint64_t Copy;
  const __CFString *v6;
  const __CFDictionary *v7;
  CFMutableDictionaryRef MutableCopy;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Copy = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sbuf, sampleBufferOut);
  if ((_DWORD)Copy)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v6 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v7 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v7)
    {
      MutableCopy = CFDictionaryCreateMutableCopy(v4, 0, v7);
      CMSetAttachment(*sampleBufferOut, v6, MutableCopy, 1u);
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
    sbu_replaceAttachedMediaWithDeepCopy(*sampleBufferOut);
  }
  return Copy;
}

void sbu_replaceAttachedMediaWithDeepCopy(const void *a1)
{
  id v2;

  v2 = (id)BWSampleBufferDeepCopyDictionaryOfAttachedMedia(a1);
  CMSetAttachment(a1, CFSTR("AttachedMedia"), v2, 1u);

}

uint64_t BWSampleBufferDeepCopyDictionaryOfAttachedMedia(const void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  opaqueCMSampleBuffer *v8;
  uint64_t v9;
  CFTypeRef cf;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = (void *)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0);
  if (!objc_msgSend(v1, "count"))
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v1);
        v7 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
        v8 = (opaqueCMSampleBuffer *)objc_msgSend(v1, "objectForKeyedSubscript:", v7);
        cf = 0;
        BWCMSampleBufferCreateCopyIncludingMetadata(v8, (CMSampleBufferRef *)&cf);
        objc_msgSend(v2, "setObject:forKeyedSubscript:", cf, v7);
        CFRelease(cf);
      }
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v4);
  }
  v9 = objc_msgSend(v2, "copy");

  return v9;
}

void sub_1A2CA7E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ptn_rotationDegreesAndMirroringFromLiveConfiguration(uint64_t result, int a2, int a3, char *a4)
{
  char v5;

  if ((a2 & a3 & 1) != 0)
  {
LABEL_2:
    v5 = a2 & a3 ^ 1;
    result = FigCaptureNormalizeAngle((int)result + 180);
    if (!a4)
      return result;
    goto LABEL_7;
  }
  if ((a2 & 1) == 0 && !a3)
  {
    v5 = 0;
    if (!a4)
      return result;
    goto LABEL_7;
  }
  if ((_DWORD)result == 270 || (_DWORD)result == 90)
  {
    if ((a3 & 1) == 0)
      goto LABEL_2;
  }
  else if (a3)
  {
    goto LABEL_2;
  }
  v5 = 1;
  if (!a4)
    return result;
LABEL_7:
  *a4 = v5;
  return result;
}

void __captureSession_buildGraphDidBecomeLiveObserver_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t DerivedStorage;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
  v8 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 416), "configurationID");
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
  if (v8 == a4)
  {
    v9 = (void *)objc_msgSend(a3, "node");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = *(const void **)(a1 + 40);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (a2)
      {
        if (objc_msgSend(v9, "sinkID"))
        {
          v12 = (const void *)cs_notificationPayloadForSectionFormatChanged(objc_msgSend(v9, "sinkID"), objc_msgSend(a2, "formatDescription"));
          captureSession_postNotificationWithPayload(v10, CFSTR("PreviewFormatDidChange"), v12);
        }
      }
      else
      {
        captureSession_setPreviewRunning(v10, 0, (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelineWithSinkID:", objc_msgSend(v9, "sinkID")));
      }
    }
    if (*(_BYTE *)(a1 + 48))
    {
      v13 = *(const void **)(a1 + 40);
      v14 = CMBaseObjectGetDerivedStorage();
      if (a2)
      {
        v15 = v14;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v16 = (void *)objc_msgSend(*(id *)(v15 + 624), "previewSinkPipelineWithSinkID:", objc_msgSend(v9, "sinkID"));
          if (objc_msgSend(v16, "previewSinkEnabled"))
            captureSession_setPreviewRunning(v13, 1, v16);
        }
        captureSession_makeCommittedConfigurationLive(v13);
      }
    }
  }
}

id mv2ip_outputMatteInferenceVideoFormat(void *a1, float a2, float a3)
{
  BWInferenceVideoFormatRequirements *v5;
  int v6;
  unsigned int v7;
  unint64_t v9;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v5 = objc_alloc_init(BWInferenceVideoFormatRequirements);
  v6 = objc_msgSend(a1, "width");
  v7 = objc_msgSend(a1, "height");
  LODWORD(a1) = v7;
  if (a3 != 0.0)
  {
    v9 = FigCaptureMetadataUtilitiesEnforceAspectRatioWithStillImageDimensions(v6 | ((unint64_t)v7 << 32), a3);
    v6 = v9;
    a1 = (void *)HIDWORD(v9);
  }
  -[BWVideoFormatRequirements setWidth:](v5, "setWidth:", (unint64_t)(float)((float)v6 / a2));
  -[BWVideoFormatRequirements setHeight:](v5, "setHeight:", (unint64_t)(float)((float)(int)a1 / a2));
  -[BWVideoFormatRequirements setSupportedPixelFormats:](v5, "setSupportedPixelFormats:", &unk_1E4A00F98);
  -[BWInferenceVideoFormatRequirements setDeviceOriented:](v5, "setDeviceOriented:", 0);
  -[BWVideoFormatRequirements setBytesPerRowAlignment:](v5, "setBytesPerRowAlignment:", 64);
  -[BWVideoFormatRequirements setWidthAlignment:](v5, "setWidthAlignment:", 16);
  -[BWVideoFormatRequirements setHeightAlignment:](v5, "setHeightAlignment:", 16);
  -[BWVideoFormatRequirements setPlaneAlignment:](v5, "setPlaneAlignment:", 64);
  -[BWVideoFormatRequirements setMemoryPoolUseAllowed:](v5, "setMemoryPoolUseAllowed:", 0);
  v11[0] = v5;
  return +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1));
}

unint64_t FigCaptureMetadataUtilitiesEnforceAspectRatioWithStillImageDimensions(uint64_t a1, double a2)
{
  double width;
  double height;
  CGRect v5;

  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, 0.0, 0.0, 1.0, 1.0, a2);
  width = v5.size.width;
  height = v5.size.height;
  if (CGRectIsNull(v5))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return (int)width | ((unint64_t)(int)height << 32);
}

uint64_t FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7)
{
  CGRect v15;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  if (a1 && a2 && (a7 < 0.0 || a7 > 0.0))
  {
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.width = a5;
    v15.size.height = a6;
    return CGRectIsEmpty(v15);
  }
  else
  {
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
}

uint64_t FigDepthBytesPerPixelForDepthFormat(int a1)
{
  uint64_t result;
  int v3;

  result = 2;
  if (a1 > 1717856626)
  {
    if (a1 > 1751411058)
    {
      if (a1 == 1751411059)
        return result;
      v3 = 1932996149;
LABEL_11:
      if (a1 == v3)
        return result;
      return 0;
    }
    if (a1 != 1717856627)
    {
      v3 = 1751410032;
      goto LABEL_11;
    }
    return 4;
  }
  if (a1 != 825306677 && a1 != 825437747)
  {
    if (a1 != 1717855600)
      return 0;
    return 4;
  }
  return result;
}

uint64_t FigCaptureBuildPipelineStageName(uint64_t a1, void *a2)
{
  int v4;
  int v5;
  const __CFString *v6;
  BOOL v7;
  const __CFString *v8;
  int v9;
  BOOL v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  const __CFString *v15;

  v4 = objc_msgSend(a2, "sourcePosition");
  v5 = v4;
  v6 = CFSTR("back");
  if (v4 != 1)
    v6 = 0;
  v7 = v4 != 2 && v4 != 1;
  if (v4 == 2)
    v8 = CFSTR("front");
  else
    v8 = v6;
  v9 = objc_msgSend(a2, "sourceDeviceType");
  v10 = 0;
  v11 = CFSTR("infrared");
  switch(v9)
  {
    case 1:
      v10 = 0;
      v11 = CFSTR("mic");
      goto LABEL_30;
    case 2:
    case 11:
      v10 = v5 == 2;
      if (v5 == 2)
        v11 = 0;
      else
        v11 = CFSTR("wide");
      goto LABEL_30;
    case 3:
      v10 = 0;
      v11 = CFSTR("tele");
      goto LABEL_30;
    case 4:
      v10 = 0;
      v11 = CFSTR("dual");
      goto LABEL_30;
    case 5:
      goto LABEL_30;
    case 6:
    case 12:
      v10 = 0;
      v11 = CFSTR("truedepth");
      goto LABEL_30;
    case 7:
      v10 = 0;
      v11 = CFSTR("superwide");
      goto LABEL_30;
    case 8:
      v10 = 0;
      v11 = CFSTR("widebravo");
      goto LABEL_30;
    case 9:
      v10 = 0;
      v11 = CFSTR("superbravo");
      goto LABEL_30;
    case 10:
      v10 = 0;
      v11 = CFSTR("time-of-flight");
      goto LABEL_30;
    case 13:
      v10 = 0;
      v11 = CFSTR("lidardepth");
      goto LABEL_30;
    case 14:
      v10 = 0;
      v11 = CFSTR("overhead");
      goto LABEL_30;
    case 15:
      v10 = 0;
      v11 = CFSTR("external");
      goto LABEL_30;
    case 16:
      v10 = 0;
      v11 = CFSTR("continuity");
      goto LABEL_30;
    case 17:
    case 18:
      v10 = 0;
      v11 = CFSTR("widemetadata");
      goto LABEL_30;
    case 19:
      v10 = 0;
      v11 = CFSTR("superwidemetadata");
      goto LABEL_30;
    case 20:
      v10 = 0;
      v11 = CFSTR("infraredmetadata");
LABEL_30:
      v14 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v13 = v14;
      if (v7)
      {
        if (v10)
          return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), a1, v13);
        v15 = CFSTR(".");
      }
      else
      {
        objc_msgSend(v14, "appendFormat:", CFSTR(".%@"), v8);
        if (v10)
          return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), a1, v13);
        v15 = CFSTR("-");
      }
      objc_msgSend(v13, "appendString:", v15);
      objc_msgSend(v13, "appendString:", v11);
      return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), a1, v13);
    default:
      v12 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v13 = v12;
      if (!v7)
        objc_msgSend(v12, "appendFormat:", CFSTR(".%@"), v8);
      return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), a1, v13);
  }
}

uint64_t FigCapturePlatformChipRevisionIdentifier()
{
  if (fcp_identifyChipRevision_identifyChipRevisionOnceToken != -1)
    dispatch_once(&fcp_identifyChipRevision_identifyChipRevisionOnceToken, &__block_literal_global_50);
  return sPlatformChipRevisionID;
}

uint64_t BWCaptureDevicePositionFromPortType(void *a1)
{
  uint64_t v2;

  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A30]) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A20]) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) != 0)
  {
    return 1;
  }
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A38]) & 1) != 0)
    return 2;
  v2 = 2;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A40]) & 1) == 0)
  {
    if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A50]))
      return 2;
    else
      return 0;
  }
  return v2;
}

void fvcd_estimateOISOutputImageSNR(void *a1)
{
  void *v2;
  float v3;
  float v4;
  float v5;
  unsigned int v6;
  double v7;
  float v8;
  unsigned int v9;
  float v10;
  float v11;
  int v12;
  float v13;

  v2 = (void *)objc_msgSend(a1, "portType");
  if (objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0D05A30]))
    v3 = 0.125;
  else
    v3 = 0.25;
  v4 = (float)objc_msgSend(a1, "conversionGain") * 0.000015259;
  v5 = (float)objc_msgSend(a1, "readNoise_1x") * 0.000015259;
  v6 = objc_msgSend(a1, "readNoise_8x");
  objc_msgSend(a1, "integrationTime");
  *(float *)&v7 = v7;
  v8 = *(float *)&v7 / v3;
  v9 = objc_msgSend(a1, "aeAverage");
  objc_msgSend(a1, "gain");
  v11 = v10 * v8;
  v12 = vcvts_n_s32_f32(v11, 8uLL);
  if (v12 >= 2048)
    v12 = 2048;
  v13 = (float)((float)v9 / v11) / v4;
  if (v12 >= 257)
  {
    if (v12 <= 0x7FF)
      v5 = v5
         + (float)((float)((float)((float)(v5 - (float)((float)v6 * 0.000015259)) * -256.0)
                         + (float)((float)(v5 - (float)((float)v6 * 0.000015259)) * (float)v12))
                 / -1792.0);
    else
      v5 = (float)v6 * 0.000015259;
  }
  if (v13 != 0.0)
    log10f(v13 / sqrtf(v13 + (float)(v5 * v5)));
}

uint64_t BWPortTypeToDisplayString(void *a1, const char *a2)
{
  return objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("PortType"), &stru_1E4928818);
}

uint64_t FigCaptureUncompressedPixelFormatForPixelFormat(uint64_t a1)
{
  int v2;
  int IsTenBit;
  int v4;
  int v5;
  uint64_t v6;
  int IsFullRange;
  int v8;
  unsigned int v9;

  if (!FigCapturePixelFormatGetCompressionType(a1))
    return a1;
  v2 = FigCapturePixelFormatIs422(a1);
  IsTenBit = FigCapturePixelFormatIsTenBit(a1);
  v4 = 1;
  if ((int)a1 > 1751527983)
  {
    if ((_DWORD)a1 == 1751527984)
      goto LABEL_9;
    v5 = 2087216688;
  }
  else
  {
    if ((_DWORD)a1 == 761816624)
      goto LABEL_9;
    v5 = 795371056;
  }
  if ((_DWORD)a1 != v5)
    v4 = 0;
LABEL_9:
  v6 = 1111970369;
  IsFullRange = FigCapturePixelFormatIsFullRange(a1);
  if ((int)a1 <= 792872768)
  {
    if ((_DWORD)a1 == 641877825)
      return v6;
    v8 = 759318337;
  }
  else
  {
    if ((_DWORD)a1 == 792872769 || (_DWORD)a1 == 1111970369)
      return v6;
    v8 = 2084718401;
  }
  if ((_DWORD)a1 != v8)
  {
    v6 = (v2 & IsTenBit & IsFullRange) != 0 ? 1885745714 : 1882468914;
    if ((v2 & IsTenBit & 1) == 0)
    {
      v6 = (IsTenBit & IsFullRange) != 0 ? 1885745712 : 1882468912;
      if ((IsTenBit & 1) == 0)
      {
        if (IsFullRange)
          v9 = 875704422;
        else
          v9 = 875704438;
        if (v4)
          return 1751527984;
        else
          return v9;
      }
    }
  }
  return v6;
}

double FigCaptureMetadataUtilitiesRectByCroppingRectToAspectRatio(double a1, double a2, double a3, double a4, float a5)
{
  return a1 + FigCaptureMetadataUtilitiesRectWithAspectRatioInsideDimensions(a3, a4, a5);
}

double FigCaptureMetadataUtilitiesRectWithAspectRatioInsideDimensions(double a1, double a2, float a3)
{
  float v3;
  double v4;

  v3 = a1 / a2;
  if (v3 < a3)
    v4 = a1;
  else
    v4 = a1 * a3 / v3;
  return (a1 - v4) * 0.5;
}

FigCaptureDepthDataPipelineConfiguration *captureSession_createDepthDataPipelineConfiguration(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  uint64_t DerivedStorage;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  BWPipelineStage *v14;
  FigCaptureDepthDataPipelineConfiguration *v15;
  __int128 v16;
  char *v17;
  int v18;
  _OWORD v21[2];
  int v22;

  v22 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (void *)objc_msgSend(a2, "depthDataConnectionConfiguration");
  v10 = (void *)objc_msgSend(a2, "metadataObjectConnectionConfiguration");
  v11 = (void *)objc_msgSend(a2, "videoDataConnectionConfiguration");
  v12 = (void *)objc_msgSend(v9, "sourceConfiguration");
  if (!v12)
  {
    v12 = (void *)objc_msgSend(v11, "sourceConfiguration");
    if (!v12)
      v12 = (void *)objc_msgSend(v10, "sourceConfiguration");
  }
  v13 = FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v10);
  v14 = +[BWPipelineStage pipelineStageWithName:priority:](BWPipelineStage, "pipelineStageWithName:priority:", FigCaptureBuildPipelineStageName((uint64_t)CFSTR("com.apple.coremedia.capture.depthdata"), (void *)objc_msgSend(v9, "sourceConfiguration")), 13);
  v15 = objc_alloc_init(FigCaptureDepthDataPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v15, (char *)v9);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v15, (char *)v11);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v15, (char *)v10);
  -[FigCaptureMetadataSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v15, a5);
  -[FigCaptureDepthDataPipelineConfiguration setVideoAndConvertedDepthDataOutputEnabled:]((uint64_t)v15, v13);
  -[FigCaptureDepthDataPipelineConfiguration setDepthDataBaseRotationDegrees:]((uint64_t)v15, objc_msgSend(a3, "depthDataBaseRotation"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v15, (char *)v14);
  v16 = *(_OWORD *)(DerivedStorage + 36);
  v21[0] = *(_OWORD *)(DerivedStorage + 20);
  v21[1] = v16;
  v17 = (char *)objc_msgSend(a3, "cameraInfoByPortType", -[FigCaptureDepthDataPipelineConfiguration setClientAuditToken:]((uint64_t)v15, (uint64_t)v21).n128_f64[0]);
  -[FigCaptureDepthDataPipelineConfiguration setCameraInfoByPortType:](v15, v17);
  -[FigCaptureDepthDataPipelineConfiguration setRequiredFormat:](v15, (char *)objc_msgSend(v12, "requiredFormat"));
  -[FigCaptureMetadataSinkPipelineConfiguration setPreviewEnabled:]((uint64_t)v15, a4);
  v18 = FigVideoCaptureSourcePearlModuleType(objc_msgSend(v12, "source"), &v22);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationType:]((uint64_t)v15, v18);
  if (v22)
  {
    FigDebugAssert3();
    if (v22)
      return 0;
  }
  return v15;
}

uint64_t __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "uniqueID"), "isEqualToString:", *(_QWORD *)(a1 + 32));
}

uint64_t FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  const void *v8;
  int v9;
  id v10;
  uint64_t v11;
  _QWORD v13[7];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;
  int v20;

  v20 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3052000000;
  v17 = __Block_byref_object_copy__39;
  v18 = __Block_byref_object_dispose__39;
  v19 = 0;
  v7 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(a1, a3, &v20);
  v8 = (const void *)v7;
  v9 = v20;
  if (v20)
  {
    FigDebugAssert3();
    if (v8)
      goto LABEL_4;
  }
  else
  {
    if (v7)
    {
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = __FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType_block_invoke;
      v13[3] = &unk_1E4927EA8;
      v13[5] = &v14;
      v13[6] = a3;
      v13[4] = a2;
      v9 = captureSource_safelyAccessStorage(v7, (uint64_t)v13);
LABEL_4:
      CFRelease(v8);
      goto LABEL_6;
    }
    v10 = a2;
    v9 = 0;
    v15[5] = (uint64_t)v10;
  }
LABEL_6:
  if (a4)
    *a4 = v9;
  v11 = v15[5];
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1A2CBA4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType_block_invoke;
  v5[3] = &unk_1E4927EF8;
  v5[4] = &v6;
  v5[5] = a2;
  *a3 = captureSource_safelyAccessStorage(a1, (uint64_t)v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1A2CBA560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *fcsc_findFormatByUniqueID(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a1);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v12;
  do
  {
    for (i = 0; i != v5; ++i)
    {
      if (*(_QWORD *)v12 != v6)
        objc_enumerationMutation(a2);
      v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
      if ((objc_msgSend((id)objc_msgSend(v8, "uniqueID"), "isEqualToString:", v3) & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          continue;
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "geometricDistortionCorrectionFormat"), "uniqueID"), "isEqualToString:", v3))
        {
          v9 = objc_msgSend(v8, "geometricDistortionCorrectionFormat");
        }
        else
        {
          if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "cinematicFramingFormat"), "uniqueID"), "isEqualToString:", v3))continue;
          v9 = objc_msgSend(v8, "cinematicFramingFormat");
        }
        v8 = (void *)v9;
      }
      if (v8)
        return v8;
    }
    v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  }
  while (v5);
  return 0;
}

void __captureSession_performBlockOnWorkerQueue_block_invoke(uint64_t a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  objc_autoreleasePoolPop(v2);
}

uint64_t captureSource_setPropertyWithDeviceCheck(const void *a1, int a2, uint64_t a3, const void *a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v11 = DerivedStorage;
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
    if (*(_BYTE *)(v11 + 12))
      goto LABEL_18;
    if (a3)
    {
      v12 = *(_QWORD *)(v11 + 80) == a3;
      if (!a2)
        goto LABEL_8;
    }
    else
    {
      v12 = 0;
      if (!a2)
        goto LABEL_8;
    }
    if (!v12)
    {
LABEL_17:
      FigDebugAssert3();
LABEL_18:
      v13 = FigSignalErrorAt();
LABEL_14:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v11 + 48));
      return v13;
    }
LABEL_8:
    if (*(uint64_t *)(v11 + 64) > 0)
    {
      if (BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(*(id *)(v11 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue"))|| objc_msgSend(*(id *)(v11 + 184), "containsObject:", a4))
      {
        v13 = captureSource_setPropertyInternal(a1, a4, a5);
        if ((_DWORD)v13)
          FigDebugAssert3();
      }
      else
      {
        v13 = 4294954512;
      }
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

BOOL BWDeviceTypeIsExtensionDeviceType(int a1)
{
  return (a1 - 15) < 2;
}

uint64_t captureSource_SetProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  return captureSource_setPropertyWithDeviceCheck(a1, 0, 0, a2, a3);
}

uint64_t captureSession_clientSetsUserInitiatedCaptureRequestTime()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0)
    v1 = 1;
  else
    v1 = objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8);
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelines", 0);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "momentCaptureMovieRecordingEnabled") & 1) != 0)
          return 1;
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v4)
        continue;
      break;
    }
  }
  return v1;
}

const __CFString *FigCaptureVideoOrientationToString(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("Unknown");
  else
    return off_1E49232C8[a1];
}

void *FigCaptureConnectionConfigurationWithUnderlyingDeviceType(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(a1);
    v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v7);
    if (objc_msgSend(v8, "underlyingDeviceType") == a2)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

uint64_t FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2CBD3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSetOptimalVideoPreviewDataConnectionDimensions(void *a1)
{
  void *v2;
  _BOOL4 IsExtensionDeviceType;
  int v4;
  int v5;
  int v6;
  double v7;
  uint64_t v9;

  v2 = (void *)objc_msgSend(a1, "sourceConfiguration");
  v9 = objc_msgSend((id)objc_msgSend(v2, "requiredFormat"), "previewDimensions");
  IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend(v2, "sourceDeviceType"));
  v4 = objc_msgSend(a1, "orientation");
  LODWORD(v2) = objc_msgSend(v2, "sourcePosition") == 2;
  v5 = objc_msgSend(a1, "mirroringEnabled");
  objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
  v6 = FigCaptureRotationDegreesFromOrientation(v4, (int)v2, v5, IsExtensionDeviceType);
  *(int32x2_t *)&v7 = FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v9, v6);
  objc_msgSend(a1, "setOutputWidth:", v9, v7);
  return objc_msgSend(a1, "setOutputHeight:", HIDWORD(v9));
}

uint64_t captureSource_UnlockForConfiguration(uint64_t a1)
{
  return captureSource_safelyAccessStorage(a1, (uint64_t)&__block_literal_global_194);
}

uint64_t captureSource_LockForConfiguration(uint64_t a1)
{
  return captureSource_safelyAccessStorage(a1, (uint64_t)&__block_literal_global_193);
}

BOOL __cs_configurationUsesSourceType_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "sourceType") == *(_DWORD *)(a1 + 32);
}

uint64_t csp_cinematicVideoEnabled(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 192), "previewDepthDataDeliveryEnabled"))
      v2 = objc_msgSend(*(id *)(a1 + 192), "previewDepthFilterRenderingEnabled");
    else
      v2 = 0;
    v3 = *(void **)(a1 + 208);
  }
  else
  {
    if (objc_msgSend(0, "previewDepthDataDeliveryEnabled"))
      v2 = objc_msgSend(0, "previewDepthFilterRenderingEnabled");
    else
      v2 = 0;
    v3 = 0;
  }
  if (FigCaptureConnectionConfigurationWithSinkType(v3, 4))
    return v2;
  else
    return 0;
}

void *BWCIFilterArrayDescription(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", &stru_1E4928818);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    v6 = "";
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "appendFormat:", CFSTR("%s%@"), v6, objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "name"));
        v6 = ", ";
      }
      while (v4 != v7);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v6 = ", ";
    }
    while (v4);
  }
  return v2;
}

BOOL cs_configurationChangesAreLiveReconfigurable(void *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t i;
  void *v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  FigCaptureSourceVideoFormat *v23;
  void *v24;
  double v25;
  void *v26;
  double v27;
  void *v28;
  double v29;
  void *v30;
  double v31;
  void *v32;
  double v33;
  int v34;
  BOOL v35;
  int IsConfiguredForBackgroundBlur;
  int IsConfiguredForStudioLighting;
  int IsConfiguredForReactionEffects;
  int IsConfiguredForBackgroundReplacement;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t j;
  void *v44;
  void *v45;
  void *v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((a1 != 0) != (a2 != 0))
    return 0;
  v3 = (void *)objc_msgSend(a1, "copy");
  v48 = a2;
  v4 = (void *)objc_msgSend(a2, "copy");
  v5 = (void *)objc_msgSend((id)objc_msgSend(v3, "connectionConfigurations"), "arrayByAddingObjectsFromArray:", objc_msgSend(v4, "connectionConfigurations"));
  v49 = v4;
  v6 = cs_configurationsTransitionBetweenCenterStageAndManualFraming(v3, v4);
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v51;
    v10 = *MEMORY[0x1E0C9D538];
    v11 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v12 = *MEMORY[0x1E0C9D648];
    v13 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v14 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v15 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v51 != v9)
          objc_enumerationMutation(v5);
        v17 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * i);
        objc_msgSend(v17, "setEnabled:", 1);
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setIrisMovieCaptureSuspended:", 0);
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setPreservesIrisMovieCaptureSuspendedOnSessionStop:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setSettingsID:", 0);
        objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "setExifFocalLengthsByZoomFactor:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setOutputWidth:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setOutputHeight:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setHDRMode:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setQualityPrioritization:", 1);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setDigitalFlashMode:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setRawOutputFormat:", 0);
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "irisPreparedSettings"), "setProcessedOutputFormat:", 0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setFilters:", 0);
        v18 = (void *)objc_msgSend(v17, "videoPreviewSinkConfiguration");
        LODWORD(v19) = 0;
        objc_msgSend(v18, "setSimulatedAperture:", v19);
        v20 = (void *)objc_msgSend(v17, "videoPreviewSinkConfiguration");
        LODWORD(v21) = 0;
        objc_msgSend(v20, "setPortraitLightingEffectStrength:", v21);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setSemanticStyle:", 0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectCenter:", v10, v11);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectAspectRatio:", 0.0);
        objc_msgSend((id)objc_msgSend(v17, "videoPreviewSinkConfiguration"), "setPrimaryCaptureRectUniqueID:", 0);
        if (objc_msgSend((id)objc_msgSend(v17, "sinkConfiguration"), "sinkType") == 8)
          objc_msgSend(v17, "setMetadataRectOfInterest:", v12, v13, v14, v15);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setNonDestructiveCropEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setNormalizedNonDestructiveCropSize:", 0.0, 0.0);
        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource"))
        {
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingEnabled:", 0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingControlMode:", 0);
          v22 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "requiredFormat"), "formatDictionary"), "mutableCopy");
          objc_msgSend(v22, "setObject:forKeyedSubscript:", 0, 0x1E4938918);
          objc_msgSend(v22, "setObject:forKeyedSubscript:", 0, 0x1E4938998);
          objc_msgSend(v22, "setObject:forKeyedSubscript:", 0, 0x1E49389D8);
          objc_msgSend(v22, "setObject:forKeyedSubscript:", 0, 0x1E49389F8);
          objc_msgSend(v22, "setObject:forKeyedSubscript:", 0, 0x1E4938A18);
          v23 = -[FigCaptureSourceVideoFormat initWithFigCaptureStreamFormatDictionary:]([FigCaptureSourceVideoFormat alloc], "initWithFigCaptureStreamFormatDictionary:", v22);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setRequiredFormat:", v23);

        }
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setBackgroundBlurEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setStudioLightingEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setReactionEffectsEnabled:", 0);
        objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setBackgroundReplacementEnabled:", 0);
        v24 = (void *)objc_msgSend(v17, "sourceConfiguration");
        LODWORD(v25) = 0;
        objc_msgSend(v24, "setRequiredMaxFrameRate:", v25);
        v26 = (void *)objc_msgSend(v17, "sourceConfiguration");
        LODWORD(v27) = 0;
        objc_msgSend(v26, "setRequiredMinFrameRate:", v27);
        if (v6)
        {
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingEnabled:", 0);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setCinematicFramingControlMode:", 1);
          objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "setManualCinematicFramingEnabled:", 0);
          v28 = (void *)objc_msgSend(v17, "sourceConfiguration");
          LODWORD(v29) = 0;
          objc_msgSend(v28, "setVideoZoomFactor:", v29);
          v30 = (void *)objc_msgSend(v17, "sourceConfiguration");
          LODWORD(v31) = 0;
          objc_msgSend(v30, "setManualFramingPanningAngleX:", v31);
          v32 = (void *)objc_msgSend(v17, "sourceConfiguration");
          LODWORD(v33) = 0;
          objc_msgSend(v32, "setManualFramingPanningAngleY:", v33);
        }
      }
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v54, 16);
    }
    while (v8);
  }
  objc_msgSend(v3, "setConfigurationID:", objc_msgSend(v49, "configurationID"));
  objc_msgSend(v3, "setContinuityCameraIsWired:", 0);
  objc_msgSend(v49, "setContinuityCameraIsWired:", 0);
  objc_msgSend(v3, "setSuppressVideoEffects:", 0);
  objc_msgSend(v49, "setSuppressVideoEffects:", 0);
  objc_msgSend(v3, "setSmartStyle:", 0);
  objc_msgSend(v49, "setSmartStyle:", 0);
  v34 = objc_msgSend(v3, "isEqual:", v49);

  v35 = 0;
  if (v34)
  {
    IsConfiguredForBackgroundBlur = cs_configurationIsConfiguredForBackgroundBlur(a1);
    if (IsConfiguredForBackgroundBlur == cs_configurationIsConfiguredForBackgroundBlur(v48))
    {
      IsConfiguredForStudioLighting = cs_configurationIsConfiguredForStudioLighting(a1);
      if (IsConfiguredForStudioLighting == cs_configurationIsConfiguredForStudioLighting(v48))
      {
        IsConfiguredForReactionEffects = cs_configurationIsConfiguredForReactionEffects(a1);
        if (IsConfiguredForReactionEffects == cs_configurationIsConfiguredForReactionEffects(v48))
        {
          IsConfiguredForBackgroundReplacement = cs_configurationIsConfiguredForBackgroundReplacement(a1);
          if (IsConfiguredForBackgroundReplacement == cs_configurationIsConfiguredForBackgroundReplacement(v48))
          {
            v40 = cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(a1);
            if (objc_msgSend(v40, "isEqualToDictionary:", cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(v48)))
            {
              v41 = objc_msgSend((id)objc_msgSend(a1, "connectionConfigurations"), "count");
              if (v41)
              {
                v42 = v41;
                v35 = 0;
                for (j = 0; j != v42; v35 = j >= v42)
                {
                  v44 = (void *)objc_msgSend((id)objc_msgSend(a1, "connectionConfigurations"), "objectAtIndexedSubscript:", j);
                  v45 = (void *)objc_msgSend((id)objc_msgSend(v48, "connectionConfigurations"), "objectAtIndexedSubscript:", j);
                  LODWORD(v44) = objc_msgSend(v44, "enabled");
                  if ((_DWORD)v44 != objc_msgSend(v45, "enabled")
                    && (FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(objc_msgSend((id)objc_msgSend(v45, "sinkConfiguration"), "sinkType")) & 1) != 0)
                  {
                    break;
                  }
                  ++j;
                }
              }
              else
              {
                return 1;
              }
              return v35;
            }
          }
        }
      }
    }
    return 0;
  }
  return v35;
}

uint64_t FigCaptureNameSplitterNodeOutputsCorrespondingToConnections(void *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v5 = result;
    v6 = 0;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      v9 = v6;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(a1);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v8), "setName:", +[FigCaptureSinkConfiguration stringForSinkType:](FigCaptureSinkConfiguration, "stringForSinkType:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v9 + v8), "sinkConfiguration"), "sinkType")));
        ++v8;
      }
      while (v5 != v8);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v5 = result;
      v6 = v9 + v8;
    }
    while (result);
  }
  return result;
}

uint64_t cs_getZoomPIPOverlayConfiguration(void *a1, char *a2, float *a3, float *a4)
{
  uint64_t result;
  int v9;
  float v10;
  char v11;
  float v12;

  result = objc_msgSend((id)objc_msgSend(a1, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled");
  if ((_DWORD)result)
  {
    v9 = objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "spatialOverCaptureEnabled");
    result = objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "sourceDeviceType");
    if (result <= 9
      && ((1 << result) & 0x310) != 0
      && (result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "requiredFormat"), "dimensions"), (((int)result > 3839) & ~v9) != 1))
    {
      v11 = 0;
      v10 = 15.0;
    }
    else
    {
      v10 = 0.0;
      v11 = 1;
    }
    if (v9)
      v10 = 0.0;
    v12 = 8.0;
    if (a2)
      goto LABEL_12;
  }
  else
  {
    v11 = 0;
    v10 = 0.0;
    v12 = 0.0;
    if (a2)
LABEL_12:
      *a2 = v11;
  }
  if (a3)
    *a3 = v12;
  if (a4)
    *a4 = v10;
  return result;
}

uint64_t csp_maxLossyCompressionLevelForConnectionConfigurations(void *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    v7 = 3;
LABEL_3:
    v8 = 0;
    while (2)
    {
      if (*(_QWORD *)v13 != v6)
        objc_enumerationMutation(a1);
      switch(objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v8), "sinkConfiguration"), "sinkType"))
      {
        case 1u:
        case 0xCu:
          if (!a2)
            goto LABEL_19;
          v9 = a2[69];
          goto LABEL_15;
        case 3u:
          if (!a2)
            goto LABEL_19;
          v9 = a2[72];
          goto LABEL_15;
        case 4u:
        case 0xAu:
          if (!a2)
            goto LABEL_19;
          v9 = a2[71];
          goto LABEL_15;
        case 6u:
          if (a2)
          {
            v9 = a2[70];
LABEL_15:
            if ((int)v7 >= (int)v9)
              goto LABEL_16;
          }
          else
          {
LABEL_19:
            if ((v7 & 0x80000000) == 0)
            {
              v9 = 0;
LABEL_16:
              v7 = v9;
            }
          }
LABEL_17:
          if (v5 != ++v8)
            continue;
          v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
          v5 = v10;
          if (!v10)
            return v7;
          goto LABEL_3;
        default:
          goto LABEL_17;
      }
    }
  }
  return 3;
}

uint64_t getADPCEDisparityColorPipelineClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADPCEDisparityColorPipelineClass_softClass;
  v8 = getADPCEDisparityColorPipelineClass_softClass;
  if (!getADPCEDisparityColorPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADPCEDisparityColorPipelineClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADPCEDisparityColorPipelineClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2CC2900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t bwisr_getRequestedRotationDegrees(void *a1, void *a2)
{
  int v3;

  v3 = objc_msgSend(a2, "rotationDegrees");
  return ((int)(v3 - objc_msgSend(a1, "rotationDegrees") + 360) % 360);
}

uint64_t getPTDisparityPostProcessingClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTDisparityPostProcessingClass_softClass;
  v8 = getPTDisparityPostProcessingClass_softClass;
  if (!getPTDisparityPostProcessingClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTDisparityPostProcessingClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTDisparityPostProcessingClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2CC3200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureConnectionConfigurationsFilterWithUnderlyingDeviceType(void *a1, int a2)
{
  _QWORD v3[4];
  int v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __FigCaptureConnectionConfigurationsFilterWithUnderlyingDeviceType_block_invoke;
  v3[3] = &__block_descriptor_36_e60_B24__0__FigCaptureConnectionConfiguration_8__NSDictionary_16l;
  v4 = a2;
  return objc_msgSend(a1, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", v3));
}

void *ptn_supportedPixelFormats(int a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_msgSend(v2, "addObjectsFromArray:", &unk_1E4A00230);
  objc_msgSend(v2, "addObjectsFromArray:", FigCaptureSupportedPixelFormatsForCompressionType(1, 1, 0, 0));
  objc_msgSend(v2, "addObjectsFromArray:", FigCaptureSupportedCompressedPixelFormatsForSettings(4, a1, 1, 1, 1, 1, 1, 1));
  return v2;
}

void *FigCaptureSupportedCompressedPixelFormatsForSettings(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  void *v16;
  void *v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;

  v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a1 == 4)
  {
    if (!FigCapturePlatformSupportsUniversalCompression())
      return v16;
    v18 = FigCapturePlatformSupportsUniversalLossyCompression();
    if (v18)
      v19 = a2 > 0;
    else
      v19 = 0;
    if (v18)
      v20 = a2 > 1;
    else
      v20 = 0;
    if (v18)
      v21 = a2 > 2;
    else
      v21 = 0;
    if (!a4)
      goto LABEL_58;
    if (a6)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01C40);
      if (v19)
      {
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01C58);
        if (!v20)
        {
LABEL_29:
          if (!v21)
            goto LABEL_31;
          goto LABEL_30;
        }
      }
      else if (!v20)
      {
        goto LABEL_29;
      }
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01C70);
      if (v21)
LABEL_30:
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01C88);
    }
LABEL_31:
    if (!a7)
      goto LABEL_58;
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01CA0);
    if (v19)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01CB8);
      if (!v20)
      {
LABEL_34:
        if (!v21)
          goto LABEL_35;
        goto LABEL_53;
      }
    }
    else if (!v20)
    {
      goto LABEL_34;
    }
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01CD0);
    if (!v21)
    {
LABEL_35:
      if (!a8)
        goto LABEL_58;
      goto LABEL_54;
    }
LABEL_53:
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01CE8);
    if (!a8)
      goto LABEL_58;
LABEL_54:
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D00);
    if (v19)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D18);
      if (!v20)
      {
LABEL_56:
        if (!v21)
          goto LABEL_58;
        goto LABEL_57;
      }
    }
    else if (!v20)
    {
      goto LABEL_56;
    }
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D30);
    if (v21)
LABEL_57:
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D48);
LABEL_58:
    if (!a3)
      goto LABEL_80;
    if (a6)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D60);
      if (v19)
      {
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D78);
        if (!v20)
        {
LABEL_62:
          if (!v21)
            goto LABEL_64;
          goto LABEL_63;
        }
      }
      else if (!v20)
      {
        goto LABEL_62;
      }
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01D90);
      if (v21)
LABEL_63:
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01DA8);
    }
LABEL_64:
    if (!a7)
      goto LABEL_80;
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01DC0);
    if (v19)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01DD8);
      if (!v20)
      {
LABEL_67:
        if (!v21)
          goto LABEL_68;
        goto LABEL_75;
      }
    }
    else if (!v20)
    {
      goto LABEL_67;
    }
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01DF0);
    if (!v21)
    {
LABEL_68:
      if (!a8)
        goto LABEL_80;
      goto LABEL_76;
    }
LABEL_75:
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E08);
    if (!a8)
      goto LABEL_80;
LABEL_76:
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E20);
    if (v19)
    {
      objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E38);
      if (!v20)
      {
LABEL_78:
        if (v21)
LABEL_79:
          objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E68);
LABEL_80:
        if (!a5 || !a6)
          return v16;
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E80);
        if (v19)
        {
          objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E98);
          if (!v20)
          {
LABEL_84:
            if (!v21)
              return v16;
            goto LABEL_88;
          }
        }
        else if (!v20)
        {
          goto LABEL_84;
        }
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01EB0);
        if (!v21)
          return v16;
LABEL_88:
        v17 = &unk_1E4A01EC8;
        goto LABEL_89;
      }
    }
    else if (!v20)
    {
      goto LABEL_78;
    }
    objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01E50);
    if (!v21)
      goto LABEL_80;
    goto LABEL_79;
  }
  if (a1 == 2)
  {
    if (FigCapturePlatformSupportsHTPC32x4Compression())
    {
      if (a4)
      {
        if (a6)
          objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01BE0);
        if (a7)
          objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01BF8);
      }
      if (a3)
      {
        if (a6)
          objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01C10);
        if ((a7 & 1) != 0)
        {
          v17 = &unk_1E4A01C28;
          goto LABEL_89;
        }
      }
    }
  }
  else if (a1 == 1 && FigCapturePlatformSupportsHTPC16x8Compression())
  {
    if (a4)
    {
      if (a6)
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01B80);
      if (a7)
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01B98);
    }
    if (a3)
    {
      if (a6)
        objc_msgSend(v16, "addObjectsFromArray:", &unk_1E4A01BB0);
      if ((a7 & 1) != 0)
      {
        v17 = &unk_1E4A01BC8;
LABEL_89:
        objc_msgSend(v16, "addObjectsFromArray:", v17);
      }
    }
  }
  return v16;
}

uint64_t FigCapturePlatformSupportsUniversalCompression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformSupportsUniversalCompression;
}

uint64_t FigCapturePlatformSupportsUniversalLossyCompression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformSupportsUniversalLossyCompression;
}

uint64_t FigCapturePlatformSupportsHTPC16x8Compression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformSupportsHTPC16x8Compression;
}

void *FigCaptureSupportedPixelFormatsForCompressionType(int a1, int a2, int a3, int a4)
{
  return FigCaptureSupportedCompressedPixelFormatsForSettings(a1, a4, 1, 1, 0, 1, a2, a3);
}

void sub_1A2CC6984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL FigCaptureMetadataUtilitiesDenormalizeCropRect(double a1, double a2, double a3, double a4)
{
  return CGRectIsEmpty(*(CGRect *)&a1);
}

BOOL FigCaptureMetadataUtilitiesNormalizeCropRect(double a1, double a2, double a3, double a4)
{
  return CGRectIsEmpty(*(CGRect *)&a1);
}

unint64_t psn_pixelBufferDimensions(__CVBuffer *a1)
{
  unsigned int Width;

  Width = CVPixelBufferGetWidth(a1);
  return Width | ((unint64_t)CVPixelBufferGetHeight(a1) << 32);
}

uint64_t captureSourceServer_serializeNotification(int a1, uint64_t a2, CFTypeRef cf1, const __CFDictionary *a4, __CFDictionary **a5)
{
  uint64_t result;
  uint64_t (*v9)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  int v11;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  CFTypeRef arg;

  if (!a4)
    return 0;
  if (CFEqual(cf1, CFSTR("ActiveFormat")))
    return 1;
  if (CFDictionaryContainsKey(a4, CFSTR("ClientShouldIgnoreNotification"))
    || (result = CFDictionaryContainsKey(a4, CFSTR("ProxyShouldIgnoreNotification")), (_DWORD)result))
  {
    arg = 0;
    v9 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (!v9)
      goto LABEL_15;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v11 = v9(a2, CFSTR("IsProxy"), *MEMORY[0x1E0C9AE00], &arg);
    if (arg)
      CFAutorelease(arg);
    if (v11)
    {
LABEL_15:
      FigDebugAssert3();
    }
    else
    {
      if (objc_msgSend((id)arg, "BOOLValue"))
      {
        if (FigCFDictionaryGetBooleanValue() == *MEMORY[0x1E0C9AE50])
          return 1;
        goto LABEL_17;
      }
      if (FigCFDictionaryGetBooleanValue() != *MEMORY[0x1E0C9AE50])
      {
LABEL_17:
        Count = CFDictionaryGetCount(a4);
        MutableCopy = CFDictionaryCreateMutableCopy(v10, Count, a4);
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ClientShouldIgnoreNotification"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ProxyShouldIgnoreNotification"));
        if (!MutableCopy)
          return 0;
        *a5 = MutableCopy;
        return 4;
      }
    }
    return 1;
  }
  return result;
}

uint64_t accelerometerDataCallback(uint64_t result, void *a2)
{
  uint64_t v3;
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(a2, "managingGravity");
    v5 = *(double *)(v3 + 16);
    LODWORD(v6) = *(_DWORD *)v3;
    LODWORD(v7) = *(_DWORD *)(v3 + 4);
    LODWORD(v8) = *(_DWORD *)(v3 + 8);
    if (v4)
      return objc_msgSend(a2, "didUpdateGravity:time:", v6, v7, v8, v5);
    else
      return objc_msgSend(a2, "didUpdateAcceleration:time:", v6, v7, v8, v5);
  }
  return result;
}

uint64_t BWInferenceVersionMakeMajor(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t BWVNSetRequestConcurrentTasksProcessingTimeout(uint64_t a1)
{
  uint64_t (*VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc)(uint64_t);

  VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc = (uint64_t (*)(uint64_t))getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc();
  if (!VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc)
    BWVNSetRequestConcurrentTasksProcessingTimeout_cold_1();
  return VNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc(a1);
}

void *getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr;
  v6 = getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr;
  if (!getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr)
  {
    v1 = (void *)VisionLibrary();
    v0 = dlsym(v1, "VNSetRequestConcurrentTasksProcessingTimeout");
    v4[3] = (uint64_t)v0;
    getVNSetRequestConcurrentTasksProcessingTimeoutSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2CC9E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void *cs_findOwnerOfUpstreamPoolFeedingInput(void *a1)
{
  void *v1;
  void *v2;

  while (1)
  {
    v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "connection"), "output");
    v2 = v1;
    if (!v1 || !objc_msgSend(v1, "passthroughMode"))
      break;
    a1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "node"), "inputs"), "objectAtIndexedSubscript:", (int)objc_msgSend(v2, "indexOfInputWhichDrivesThisOutput"));
  }
  return v2;
}

void captureSession_buildGraphDidBecomeLiveObserver(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  FigBWNodeRenderObserver *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v46;
  _QWORD v47[6];
  BOOL v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  _BYTE v71[128];
  _BYTE v72[128];
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v46 = DerivedStorage;
  v5 = *(void **)(DerivedStorage + 624);
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v6 = (void *)objc_msgSend(v5, "previewSinkPipelines");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
  if (v7)
  {
    v8 = v7;
    v43 = 0;
    v9 = *(_QWORD *)v66;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v66 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * i);
        if (objc_msgSend(v11, "imageQueueSinkNode", v43))
        {
          v12 = objc_msgSend(v5, "cameraSourcePipelineWithSourceID:", objc_msgSend(v11, "sourceID"));
          v13 = objc_msgSend(v11, "depthFilterRenderingEnabled");
          if ((unint64_t)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v12), "captureStreams"), "count") > 1)v14 = 1;
          else
            v14 = v13;
          a2 |= v14;
          if ((a2 & 1) != 0 && objc_msgSend(v11, "previewSinkEnabled"))
          {
            v15 = v43;
            if (!v43)
              v15 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v15, "addObject:", v11, v15);
          }
          objc_msgSend(v4, "addObject:", objc_msgSend(v11, "imageQueueSinkNode"));
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v65, v73, 16);
    }
    while (v8);
  }
  else
  {
    v43 = 0;
  }
  v16 = v43;
  if (objc_msgSend(v43, "count", v43))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v46 + 320));
    *(_QWORD *)(v46 + 432) = v16;
    os_unfair_lock_unlock((os_unfair_lock_t)(v46 + 320));
    v17 = 0;
  }
  else
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v25 = (void *)objc_msgSend(v5, "previewSinkPipelines");
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v61, v72, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v62;
LABEL_44:
      v29 = 0;
      while (1)
      {
        if (*(_QWORD *)v62 != v28)
          objc_enumerationMutation(v25);
        v30 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * v29);
        if (objc_msgSend(v30, "imageQueueSinkNode"))
          break;
        if (v27 == ++v29)
        {
          v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v61, v72, 16);
          if (v27)
            goto LABEL_44;
          goto LABEL_52;
        }
      }
      v17 = objc_msgSend(v30, "imageQueueSinkNode");
      if (v17)
        goto LABEL_22;
    }
LABEL_52:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v31 = (void *)objc_msgSend(v5, "videoDataSinkPipelines");
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v57, v71, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v58;
LABEL_54:
      v35 = 0;
      while (1)
      {
        if (*(_QWORD *)v58 != v34)
          objc_enumerationMutation(v31);
        v36 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v35);
        if (objc_msgSend(v36, "sinkNode"))
          break;
        if (v33 == ++v35)
        {
          v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v57, v71, 16);
          if (v33)
            goto LABEL_54;
          goto LABEL_65;
        }
      }
      v17 = objc_msgSend(v36, "sinkNode");
      if (v17)
        goto LABEL_22;
    }
LABEL_65:
    v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "audioDataSinkPipelines"), "firstObject"), "sinkNode");
    if (!v17)
    {
      v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "stillImageSinkPipelineSessionStorages"), "firstObject"), "stillImageSinkPipeline"), "stillImageSinkNode");
      if (!v17)
      {
        v17 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes](objc_msgSend((id)objc_msgSend(v5, "movieFileSinkPipelines"), "firstObject")), "firstObject");
        if (!v17)
        {
          v17 = -[FigCaptureAudioFileSinkPipeline audioFileSinkNode](objc_msgSend((id)objc_msgSend(v5, "audioFileSinkPipelines"), "firstObject"));
          if (!v17)
          {
            v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "metadataSinkPipelines"), "firstObject"), "sinkNode");
            if (!v17)
            {
              v55 = 0u;
              v56 = 0u;
              v54 = 0u;
              v53 = 0u;
              v37 = (void *)objc_msgSend(v5, "depthDataSinkPipelines");
              v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v70, 16);
              if (v38)
              {
                v39 = v38;
                v40 = *(_QWORD *)v54;
LABEL_72:
                v41 = 0;
                while (1)
                {
                  if (*(_QWORD *)v54 != v40)
                    objc_enumerationMutation(v37);
                  v42 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * v41);
                  if (objc_msgSend(v42, "sinkNode"))
                    break;
                  if (v39 == ++v41)
                  {
                    v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v53, v70, 16);
                    if (v39)
                      goto LABEL_72;
                    goto LABEL_80;
                  }
                }
                v17 = objc_msgSend(v42, "sinkNode");
                if (v17)
                  goto LABEL_22;
              }
LABEL_80:
              v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "visionDataSinkPipelines"), "firstObject"), "sinkNode");
              if (!v17)
              {
                v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "pointCloudDataSinkPipelines"), "firstObject"), "sinkNode");
                if (!v17)
                  v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "cameraCalibrationDataSinkPipelines"), "firstObject"), "sinkNode");
              }
            }
          }
        }
      }
    }
  }
LABEL_22:
  if (objc_msgSend(v44, "count") || v17)
  {
    if (v17 && (objc_msgSend(v4, "containsObject:", v17) & 1) == 0)
      objc_msgSend(v4, "addObject:", v17);
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v18 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v49, v69, 16);
    if (v18)
    {
      v19 = v18;
      v20 = 0;
      v21 = *(_QWORD *)v50;
      do
      {
        for (j = 0; j != v19; ++j)
        {
          if (*(_QWORD *)v50 != v21)
            objc_enumerationMutation(v4);
          v23 = *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j);
          v24 = -[FigBWNodeRenderObserver initWithBWNode:]([FigBWNodeRenderObserver alloc], "initWithBWNode:", v23);
          -[FigBWNodeRenderObserver setWillRenderSampleBufferHandler:](v24, "setWillRenderSampleBufferHandler:", 0);
          v47[0] = MEMORY[0x1E0C809B0];
          v47[1] = 3221225472;
          v47[2] = __captureSession_buildGraphDidBecomeLiveObserver_block_invoke;
          v47[3] = &__block_descriptor_49_e37_v32__0__BWFormat_8__BWNodeInput_16q24l;
          v47[4] = v46;
          v47[5] = a1;
          v48 = v23 == v17;
          -[FigBWNodeRenderObserver setFormatDidBecomeLiveHandler:](v24, "setFormatDidBecomeLiveHandler:", v47);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (!v20)
              v20 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v20, "addObject:", v24);
          }
          if (v23 == v17)
            *(_QWORD *)(v46 + 632) = v24;
          else

        }
        v19 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v49, v69, 16);
      }
      while (v19);
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)(v46 + 640) = v20;
  }

}

void captureSession_setPreviewSinkProperty(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v43 = v4;
    LODWORD(v41) = 0;
    FigDebugAssert3();
  }
  v9 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelineWithSinkID:", a2, v41, v43);
  v10 = objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(v9, "sourceID"));
  if (v9)
  {
    v11 = v10;
    if (CFEqual(a3, CFSTR("PreviewFilters")))
    {
      objc_msgSend(v9, "setFilters:", a4);
    }
    else if (CFEqual(a3, CFSTR("SimulatedAperture")))
    {
      objc_msgSend(a4, "floatValue");
      if (v11)
        -[FigCaptureCinematographyPipeline setSimulatedAperture:](v11);
      else
        objc_msgSend(v9, "setSimulatedAperture:");
    }
    else if (CFEqual(a3, CFSTR("PortraitLightingEffectStrength")))
    {
      objc_msgSend(a4, "floatValue");
      objc_msgSend(v9, "setPortraitLightingEffectStrength:");
    }
    else if (CFEqual(a3, CFSTR("SemanticStyles")))
    {
      v28 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SemanticStyleSet"));
      v29 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SemanticStyle"));
      v30 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CAContextFencePortSendRight"));
      v31 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Animated")), "BOOLValue");
      if (v28)
        objc_msgSend(v9, "setSemanticStyleSet:fencePortSendRight:", v28, v30);
      else
        objc_msgSend(v9, "setSemanticStyle:animated:", v29, v31);
    }
    else if (CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")))
    {
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("AspectRatio")), "doubleValue");
      v33 = v32;
      v34 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CAContextFencePortSendRight"));
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterX")), "doubleValue");
      v36 = v35;
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterY")), "doubleValue");
      v38 = v37;
      v39 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("UniqueID")), "longLongValue");
      objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("TrueVideoTransitionPercentComplete")), "doubleValue");
      objc_msgSend(v9, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", v34, v39, v33, v36, v38, v40);
    }
    else if (CFEqual(a3, CFSTR("PrimaryAndOverCaptureCompositingEnabled")))
    {
      objc_msgSend(v9, "setDisplaysWidestCameraOnly:", objc_msgSend(a4, "BOOLValue") ^ 1);
    }
  }
  else
  {
    if (cs_shouldCachePreviewSinkSessionPropertyWithKey_onceToken != -1)
      dispatch_once(&cs_shouldCachePreviewSinkSessionPropertyWithKey_onceToken, &__block_literal_global_670);
    if (objc_msgSend((id)cs_shouldCachePreviewSinkSessionPropertyWithKey_cachedPreviewSinkPropertyKeys, "containsObject:", a3))
    {
      v12 = CMBaseObjectGetDerivedStorage();
      if (!_FigIsCurrentDispatchQueue())
      {
        v44 = v4;
        LODWORD(v42) = 0;
        FigDebugAssert3();
      }
      v13 = (os_unfair_lock_s *)(v12 + 320);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 320));
      v14 = *(id *)(v12 + 408);
      os_unfair_lock_unlock(v13);
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = v14;
      v15 = (void *)objc_msgSend(v14, "connectionConfigurations");
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v48;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v48 != v18)
              objc_enumerationMutation(v15);
            v20 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * v19), "videoPreviewSinkConfiguration", v42, v44);
            if (objc_msgSend((id)objc_msgSend(v20, "sinkID"), "isEqual:", a2))
            {
              if (CFEqual(a3, CFSTR("PreviewFilters")))
              {
                objc_msgSend(v20, "setFilters:", a4);
              }
              else if (CFEqual(a3, CFSTR("SimulatedAperture")))
              {
                objc_msgSend(a4, "floatValue");
                objc_msgSend(v20, "setSimulatedAperture:");
              }
              else if (CFEqual(a3, CFSTR("PortraitLightingEffectStrength")))
              {
                objc_msgSend(a4, "floatValue");
                objc_msgSend(v20, "setPortraitLightingEffectStrength:");
              }
              else if (CFEqual(a3, CFSTR("SemanticStyles")))
              {
                objc_msgSend(v20, "setSemanticStyle:", objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SemanticStyle")));
              }
              else if (CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")))
              {
                if (objc_msgSend(v20, "primaryCaptureRectModificationEnabled"))
                {
                  v46 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("UniqueID")), "longLongValue");
                  if (v46 >= objc_msgSend(v20, "primaryCaptureRectUniqueID"))
                  {
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("AspectRatio")), "doubleValue");
                    v22 = v21;
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterX")), "doubleValue");
                    v24 = v23;
                    objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterY")), "doubleValue");
                    v26 = v25;
                    objc_msgSend(v20, "setPrimaryCaptureRectAspectRatio:", v22);
                    objc_msgSend(v20, "setPrimaryCaptureRectCenter:", v24, v26);
                    objc_msgSend(v20, "setPrimaryCaptureRectUniqueID:", v46);
                  }
                }
              }
            }
            ++v19;
          }
          while (v17 != v19);
          v27 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
          v17 = v27;
        }
        while (v27);
      }

    }
  }
}

id captureSession_createVideoDataSinkPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, void *a8, int a9, int a10, _QWORD *a11, uint64_t a12, char a13, char a14, char a15, char a16)
{
  FigCaptureVideoDataSinkPipelineConfiguration *v21;
  char *PortTypesWithGDCInVIS;
  char *v23;
  int v24;
  __int128 v25;
  int v26;
  char v27;
  int v28;
  char shouldEnablePreviewStabilization;
  char v30;
  void *v31;
  int v32;
  char shouldEnablePocketDetection;
  char HasOverCapture;
  uint64_t v35;
  char v36;
  void *v37;
  int v38;
  char shouldEnableVideoSTF;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  FigCaptureVideoDataSinkPipeline *v45;
  void *v46;
  id v47;
  uint64_t DerivedStorage;
  _OWORD v53[2];
  _QWORD v54[2];

  v54[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = objc_alloc_init(FigCaptureVideoDataSinkPipelineConfiguration);
  -[FigCaptureVideoDataSinkPipelineConfiguration setSourceVideoTransform:]((uint64_t)v21, a3, a4);
  -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v21, a6);
  -[FigCaptureVideoDataSinkPipelineConfiguration setVisOutputDimensions:]((uint64_t)v21, a5);
  -[FigCaptureCameraSourcePipelineConfiguration setDepthType:]((uint64_t)v21, a9);
  -[FigCaptureVideoDataSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v21, a10);
  -[FigCaptureVideoDataSinkPipelineConfiguration setFaceTrackingEnabled:]((uint64_t)v21, a13);
  -[FigCaptureVideoDataSinkPipelineConfiguration setOfflineVISMotionDataEnabled:]((uint64_t)v21, a14);
  PortTypesWithGDCInVIS = (char *)cs_getPortTypesWithGDCInVIS(a11);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v21, PortTypesWithGDCInVIS);
  v23 = (char *)objc_msgSend(a7, "sourceConfiguration");
  if (!v23)
    v23 = (char *)objc_msgSend(a8, "sourceConfiguration");
  -[FigCaptureMovieFileSinkPipelineConfiguration setStillImageConnectionConfiguration:](v21, v23);
  v24 = objc_msgSend(a7, "underlyingDeviceType");
  if (!v24)
    v24 = objc_msgSend(a8, "underlyingDeviceType");
  -[FigCapturePreviewSinkPipelineConfiguration setSourceColorSpaceProperties:]((uint64_t)v21, v24);
  -[FigCaptureDepthDataPipelineConfiguration setCameraInfoByPortType:](v21, (char *)a7);
  v25 = *(_OWORD *)(DerivedStorage + 36);
  v53[0] = *(_OWORD *)(DerivedStorage + 20);
  v53[1] = v25;
  v26 = objc_msgSend((id)objc_msgSend(a7, "sourceConfiguration", -[FigCaptureVideoDataSinkPipelineConfiguration setClientAuditToken:]((uint64_t)v21, (uint64_t)v53).n128_f64[0]), "colorSpace");
  if (cs_shouldConvertToBT2020((uint64_t)a11, v26))
    v27 = *(_BYTE *)(DerivedStorage + 656) == 0;
  else
    v27 = 0;
  -[FigCaptureVideoDataSinkPipelineConfiguration setP3ToBT2020ConversionEnabled:]((uint64_t)v21, v27);
  v28 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)a11);
  -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:]((uint64_t)v21, v28);
  -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:]((uint64_t)v21, +[FigCaptureCameraParameters videoDataMaxLossyCompressionLevel](FigCaptureCameraParameters, "videoDataMaxLossyCompressionLevel"));
  -[FigCaptureVideoDataSinkPipelineConfiguration setForcePixelTransfer:]((uint64_t)v21, a16);
  shouldEnablePreviewStabilization = cs_shouldEnablePreviewStabilization(a1, a7);
  -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v21, shouldEnablePreviewStabilization);
  if (a7)
    v30 = a15;
  else
    v30 = 0;
  -[FigCaptureVideoDataSinkPipelineConfiguration setSmartStyleRenderingEnabled:]((uint64_t)v21, v30);
  v31 = (void *)objc_msgSend(a7, "sourceConfiguration");
  if ((objc_msgSend(v31, "cinematicFramingEnabled") & 1) != 0)
  {
    v32 = 2;
  }
  else if (objc_msgSend(v31, "manualCinematicFramingEnabled"))
  {
    v32 = 2;
  }
  else
  {
    v32 = 1;
  }
  -[FigCaptureCameraSourcePipelineConfiguration setStillImageSashimiRawRetainedBufferCount:]((uint64_t)v21, v32);
  if (!a12)
  {
    shouldEnablePocketDetection = cs_shouldEnablePocketDetection(a1, a7);
    -[FigCaptureVideoDataSinkPipelineConfiguration setPocketDetectionEnabled:]((uint64_t)v21, shouldEnablePocketDetection);
  }
  -[FigCaptureVideoDataSinkPipelineConfiguration setClientApplicationID:](v21, *(char **)(DerivedStorage + 56));
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v21, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a7, "sinkConfiguration"), "sinkID"), "isEqualToString:", 0x1E494EEB8));
  HasOverCapture = -[FigCaptureMovieFileSinkPipelineConfiguration captureDeviceHasOverCaptureEnabled]((_BOOL8)v21);
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v21, HasOverCapture);
  if (-[FigCaptureVideoDataSinkPipelineConfiguration deskCamEnabled]((_BOOL8)v21))
  {
    -[FigCaptureVideoDataSinkPipelineConfiguration setOverheadCameraMode:]((uint64_t)v21, 2);
    -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v21, 1);
  }
  v35 = objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(a11, "sourceID"));
  if (a7)
  {
    v36 = v35 != 0;
    v54[0] = a7;
    v37 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v54, 1);
    v38 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)a11);
    shouldEnableVideoSTF = cs_shouldEnableVideoSTF(v37, v36, v38);
    -[FigCaptureVideoDataSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)v21, shouldEnableVideoSTF);
  }
  v40 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", objc_msgSend(a11, "sourceID"));
  if (v40)
  {
    v41 = *(_QWORD *)(v40 + 24);
    v42 = *(_DWORD *)(v40 + 32);
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v43 = -[FigCaptureVideoDataSinkPipelineConfiguration sourceDeviceType]((uint64_t)v21);
  v44 = FigCaptureBuildSinkPipelineName(v41, v42, v43, (uint64_t)CFSTR("Video Data Sink Pipeline"));
  v45 = [FigCaptureVideoDataSinkPipeline alloc];
  v46 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a11);
  v47 = -[FigCaptureVideoDataSinkPipeline initWithConfiguration:sourceVideoOutput:captureDevice:graph:name:delegate:](v45, (uint64_t)v21, a2, v46, *(void **)(DerivedStorage + 592), v44, *(_QWORD *)(DerivedStorage + 672));
  if (!v47)
    FigDebugAssert3();
  return v47;
}

uint64_t FigCaptureBuildSinkPipelineName(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v6;
  const __CFString *v7;

  if (a2 != a3 && (v6 = a3 - 2, (a3 - 2) <= 0x12) && ((0x79223u >> v6) & 1) != 0)
    v7 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" (%@)"), off_1E49257B8[v6]);
  else
    v7 = &stru_1E4928818;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@ %@"), a1, v7, a4);
}

uint64_t cs_notificationPayloadForSectionFormatChanged(uint64_t result, uint64_t a2)
{
  void *v2;
  uint64_t *v3;
  const __CFString **v4;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (a2)
    {
      v8[0] = CFSTR("SectionID");
      v8[1] = CFSTR("FormatDescription");
      v9[0] = result;
      v9[1] = a2;
      v2 = (void *)MEMORY[0x1E0C99D80];
      v3 = v9;
      v4 = (const __CFString **)v8;
      v5 = 2;
    }
    else
    {
      v6 = CFSTR("SectionID");
      v7 = result;
      v2 = (void *)MEMORY[0x1E0C99D80];
      v3 = &v7;
      v4 = &v6;
      v5 = 1;
    }
    return objc_msgSend(v2, "dictionaryWithObjects:forKeys:count:", v3, v4, v5);
  }
  return result;
}

uint64_t cs_shouldConvertToBT2020(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;

  if (result)
  {
    v3 = result;
    v4 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](result), "format");
    result = FigCapturePixelFormatIsTenBit(v4);
    if ((_DWORD)result)
    {
      result = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline videoOutputColorInfo](v3), "objectForKeyedSubscript:", *MEMORY[0x1E0CA8D68]), "isEqualToString:", *MEMORY[0x1E0CA8D98]);
      if ((_DWORD)result)
      {
        LODWORD(result) = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline videoOutputColorInfo](v3), "objectForKeyedSubscript:", *MEMORY[0x1E0CA8E98]), "isEqualToString:", *MEMORY[0x1E0CA8EA8]);
        if (a2 == 2)
          return result;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t FigCaptureZeroShutterLagEnabled(void *a1, void *a2, void *a3, char a4)
{
  uint64_t result;
  int v9;

  if (objc_msgSend(a1, "sourceDeviceType") == 10)
    return 0;
  if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isZeroShutterLagSupported") & 1) != 0
    || (result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isHighPhotoQualitySupported"), (_DWORD)result))
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isHighPhotoQualitySupported")
      || (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isLearnedNRSupported") & 1) == 0
      && (int)objc_msgSend(a2, "maxQualityPrioritization") >= 2)
    {
      if (!objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "zeroShutterLagRequiresUserInitiatedCaptureRequestTime"))goto LABEL_14;
      if ((objc_msgSend(a2, "zeroShutterLagEnabled") & 1) != 0)
      {
        v9 = 1;
        if ((a4 & 1) != 0)
        {
LABEL_14:
          if ((objc_msgSend(a1, "spatialOverCaptureEnabled") & 1) != 0)
            return 1;
          if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isZeroShutterLagWithDepthSupported") & 1) == 0
            && (objc_msgSend(a1, "depthDataDeliveryEnabled") & 1) != 0
            || (objc_msgSend(a2, "bravoConstituentPhotoDeliveryEnabled") & 1) != 0
            || objc_msgSend(a1, "imageControlMode") == 4
            || (objc_msgSend(a1, "backgroundBlurEnabled") & 1) != 0
            || (objc_msgSend(a1, "cinematicFramingEnabled") & 1) != 0
            || (objc_msgSend(a1, "studioLightingEnabled") & 1) != 0)
          {
            return 0;
          }
          return objc_msgSend(a1, "backgroundReplacementEnabled") ^ 1;
        }
      }
      else
      {
        v9 = objc_msgSend(a3, "zeroShutterLagEnabled");
        if ((a4 & 1) != 0)
          goto LABEL_14;
      }
      if ((objc_msgSend(a2, "responsiveCaptureEnabled") | v9) == 1)
        goto LABEL_14;
    }
    return 0;
  }
  return result;
}

uint64_t FigCaptureConfigureVideoDataConverterRotatorNode(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t LossyCompressionLevel, int a8)
{
  char v8;
  unint64_t v11;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;

  v8 = a3;
  v11 = HIDWORD(a3);
  if (a2)
  {
    v28 = HIDWORD(a3);
    v14 = &unk_1E4A01790;
    if (a8 != 6)
      v14 = 0;
    v15 = objc_msgSend(a2, "transform", v14);
    v29 = v16;
    v17 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:supportedColorSpaces:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:supportedColorSpaces:", a5, objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "colorSpace"), objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "format"), objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "dimensions"), objc_msgSend(a2, "outputFormat"), v26);
    objc_msgSend(a1, "setOutputPixelFormat:", objc_msgSend(a2, "outputFormat"));
    if ((int)FigCapturePixelFormatGetLossyCompressionLevel(objc_msgSend(a2, "outputFormat")) >= (int)LossyCompressionLevel)
      LossyCompressionLevel = FigCapturePixelFormatGetLossyCompressionLevel(objc_msgSend(a2, "outputFormat"));
    objc_msgSend(a1, "setMaxLossyCompressionLevel:", LossyCompressionLevel);
    if (a6)
      v18 = 6;
    else
      v18 = v17;
    objc_msgSend(a1, "setOutputColorSpaceProperties:", v18);
    LODWORD(v11) = v28;
    v19 = v29;
  }
  else
  {
    v15 = 0;
    v19 = 0;
  }
  v20 = FigCaptureNormalizeAngle(HIDWORD(v15) - (int)v11);
  objc_msgSend(a1, "setRotationDegrees:", v20);
  if ((v8 & 1) != 0)
  {
    if ((v15 & 1) != 0)
    {
      v23 = 0;
      goto LABEL_17;
    }
    v21 = FigCaptureTransformFlipAppliedBeforeRotationToAfter(1, v11);
    LODWORD(v22) = v20;
  }
  else
  {
    v21 = v15 & 1;
    v22 = HIDWORD(v15);
  }
  v23 = FigCaptureTransformFlipAppliedBeforeRotationToAfter(v21, v22);
LABEL_17:
  objc_msgSend(a1, "setFlipHorizontal:", v23 == 1);
  objc_msgSend(a1, "setFlipVertical:", v23 == 2);
  if (objc_msgSend(a2, "deviceOrientationCorrectionEnabled")
    && (objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "cinematicFramingEnabled") & 1) == 0)
  {
    v24 = objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "manualCinematicFramingEnabled") ^ 1;
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(a1, "setDeviceOrientationCorrectionEnabled:", v24);
  objc_msgSend(a1, "setCropMode:", 1);
  objc_msgSend(a1, "setOutputWidth:", (int)v19);
  return objc_msgSend(a1, "setOutputHeight:", v19 >> 32);
}

uint64_t FigCapturePixelFormatIsBGRA(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 792872768)
  {
    if (a1 == 641877825)
      return result;
    v3 = 759318337;
    goto LABEL_7;
  }
  if (a1 != 792872769 && a1 != 1111970369)
  {
    v3 = 2084718401;
LABEL_7:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t BWColorSpaceIsWide(unsigned int a1)
{
  return (a1 < 5) & (0x16u >> a1);
}

uint64_t BWColorSpacePropertiesGetCaptureStreamColorSpace(int a1)
{
  if ((a1 - 3) > 8)
    return 0;
  else
    return dword_1A32B0CB8[a1 - 3];
}

uint64_t FigCaptureSynchronizedStreamsGroupGetClassID()
{
  MEMORY[0x1A858C99C](&FigCaptureSynchronizedStreamsGroupGetClassID_sRegisterFigCaptureSynchronizedStreamsGroupTypeOnce, RegisterFigCaptureSynchronizedStreamsGroupType);
  return sFigCaptureSynchronizedStreamsGroupID;
}

uint64_t __captureSession_shouldUseSceneClassifierToGateMetadataDetection_block_invoke(uint64_t a1, void *a2)
{
  if (!objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2))
    return objc_msgSend(a2, "hasPrefix:", CFSTR("mdta/com.apple.quicktime.detected-machine-readable-code."));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return 0;
}

CFTypeRef shmemAllocatorRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void __captureSession_updateRunningCondition_block_invoke(uint64_t a1)
{
  const void *v1;
  int v2;
  uint64_t DerivedStorage;
  os_unfair_lock_s *v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int started;
  NSObject *v15;
  NSObject *v16;
  int v17;

  v1 = *(const void **)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (*(_BYTE *)DerivedStorage)
    return;
  v4 = (os_unfair_lock_s *)(DerivedStorage + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v5 = *(_DWORD *)(DerivedStorage + 368);
  if (*(_BYTE *)(DerivedStorage + 324) && (v5 != 3 ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    *(_QWORD *)(DerivedStorage + 384) = 0;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(unsigned int *)(DerivedStorage + 328);
  v17 = *(unsigned __int8 *)(DerivedStorage + 333);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  if (!dword_1ECFE9590)
  {
    if (v7)
      goto LABEL_18;
LABEL_15:
    if (v2)
    {
      v10 = (const void *)cs_notificationPayloadWithErrorStatus(v8);
      captureSession_postNotificationWithPayload(v1, CFSTR("DidStopRunning"), v10);
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return;
  }
  v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v4 = (os_unfair_lock_s *)(DerivedStorage + 320);
  if ((v7 & 1) == 0)
    goto LABEL_15;
LABEL_18:
  captureSession_transitionToSessionStatus(v1, 1, 0);
  v11 = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (dword_1ECFE9590)
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 320));
  if (*(double *)(v11 + 376) == 0.0)
    *(CFAbsoluteTime *)(v11 + 376) = CFAbsoluteTimeGetCurrent();
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 320));
  if (!*(_QWORD *)(v11 + 728))
    *(_QWORD *)(v11 + 728) = FigOSTransactionCreate();
  started = captureSession_commitInflightConfiguration(v1);
  if (started || (started = captureSession_startGraph(v1)) != 0)
  {
    if (started == -12785 || started == -12681 || started == -12689)
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      if (v17)
      {
        started = -16407;
LABEL_35:
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        os_unfair_lock_lock(v4);
        *(_BYTE *)(DerivedStorage + 333) = 0;
        *(_BYTE *)(DerivedStorage + 499) = 0;
        captureSession_cancelPrewarmingTimeoutTimer();
        *(_BYTE *)(DerivedStorage + 324) = 0;
        captureSession_updateRunningCondition(v1, 0, 0);
        os_unfair_lock_unlock(v4);
LABEL_38:
        captureSession_transitionToSessionStatus(v1, 0, started);
        return;
      }
    }
    else
    {
      if (v17)
        goto LABEL_35;
      if (started != -16407)
      {
        captureSession_resetSessionRunningStateOnFatalError((uint64_t)v1, started);
        goto LABEL_38;
      }
    }
    FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
    os_unfair_lock_lock(v4);
    *(_BYTE *)(DerivedStorage + 324) = 0;
    os_unfair_lock_unlock(v4);
    started = -16407;
    goto LABEL_38;
  }
}

uint64_t captureSession_startGraph(const void *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *global_queue;
  int AppBooleanValue;
  _BOOL4 v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  CFPropertyListRef *v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _BOOL4 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  os_log_type_t type[8];
  _QWORD block[5];
  _BYTE v58[128];
  _OWORD v59[8];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    LODWORD(block[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v6 = captureSession_checkClientSessionIsAllowedToRun((uint64_t)a1, *(void **)(DerivedStorage + 416), 0, 0, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  if ((_DWORD)v6)
  {
LABEL_61:
    FigDebugAssert3();
  }
  else if (*(_QWORD *)(DerivedStorage + 592))
  {
    cs_clearPocketDetectionNeeded(0, *(_QWORD *)(DerivedStorage + 56));
    if (*(_BYTE *)(DerivedStorage + 609))
    {
      *(_BYTE *)(DerivedStorage + 608) = 1;
      captureSession_makeCommittedConfigurationLive(a1);
    }
    else
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v9 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines");
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v52;
        while (2)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v52 != v12)
              objc_enumerationMutation(v9);
            v14 = *(id **)(*((_QWORD *)&v51 + 1) + 8 * i);
            -[FigCaptureCameraSourcePipeline hackRetainedBufferCountsForDualStreamSources]((uint64_t)v14);
            v15 = -[FigCaptureCameraSourcePipeline allocateSharedBufferPools](v14);
            if ((_DWORD)v15)
            {
              v6 = v15;
              goto LABEL_61;
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
          if (v11)
            continue;
          break;
        }
      }
      v16 = CMBaseObjectGetDerivedStorage();
      v17 = *(_OWORD *)(v16 + 36);
      v59[0] = *(_OWORD *)(v16 + 20);
      v59[1] = v17;
      if (!FigCaptureClientIsContinuityCapture(v59))
      {
        v18 = *(void **)(v16 + 416);
        if (v18)
        {
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v19 = (void *)objc_msgSend(v18, "sourceConfigurations");
          v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v60, v59, 16);
          if (v20)
          {
            v21 = v20;
            v22 = *(_QWORD *)v61;
LABEL_28:
            v23 = 0;
            while (1)
            {
              if (*(_QWORD *)v61 != v22)
                objc_enumerationMutation(v19);
              v24 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * v23);
              if ((objc_msgSend(v24, "cinematicFramingEnabled", v47, v48) & 1) != 0)
                break;
              if (v21 == ++v23)
              {
                v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v60, v59, 16);
                if (v21)
                  goto LABEL_28;
                goto LABEL_50;
              }
            }
            v25 = objc_msgSend(v24, "cinematicFramingControlMode");
            v26 = *(void **)(v16 + 56);
            if (!v26)
            {
              v48 = v1;
              LODWORD(v47) = 0;
              goto LABEL_67;
            }
            v27 = v25;
            if (BWDeviceIsiPad())
            {
              global_queue = dispatch_get_global_queue(-2, 0);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = __captureSession_showCinematicFramingAlertIfApplicable_block_invoke;
              block[3] = &unk_1E491E720;
              block[4] = v26;
              dispatch_async(global_queue, block);
            }
            AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("cinematic_framing_onboarding_alert_shown"), CFSTR("com.apple.cameracapture"), 0);
            v30 = AppBooleanValue != 0;
            v31 = (id)CFPreferencesCopyAppValue(CFSTR("cinematic_framing_clients"), CFSTR("com.apple.cameracapture"));
            v32 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", v26), "objectForKeyedSubscript:", CFSTR("app_control_alert_shown")), "BOOLValue");
            v33 = v32;
            if (!AppBooleanValue || (v32 & 1) == 0)
            {
              v34 = ((_DWORD)v27 == 1) & ~(_DWORD)v32;
              if (!AppBooleanValue || v34)
              {
                v50 = AppBooleanValue == 0;
                v35 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0DAAF78]), "initWithServiceName:viewControllerClassName:", CFSTR("com.apple.CMViewSrvc"), CFSTR("CinematicFramingRemoteAlertViewController"));
                v36 = objc_alloc_init(MEMORY[0x1E0DAAF70]);
                v49 = (id)objc_msgSend(MEMORY[0x1E0DAAF88], "newHandleWithDefinition:configurationContext:", v35, v36);
                v37 = objc_alloc_init(MEMORY[0x1E0DAAF58]);
                if ((objc_msgSend(v26, "isEqualToString:", 0x1E493D718) & 1) == 0)
                {
                  v38 = objc_msgSend(MEMORY[0x1E0D01828], "processHandleForPID:bundleID:", *(unsigned int *)(v16 + 16), v26);
                  objc_msgSend(v37, "setPresentationTarget:", (id)objc_msgSend(objc_alloc(MEMORY[0x1E0DAAFA8]), "initWithTargetProcess:", v38));
                }
                v33 = v33 | v34;
                v39 = (void *)MEMORY[0x1E0C99E08];
                v40 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v27);
                v41 = (void *)objc_msgSend(v39, "dictionaryWithObjectsAndKeys:", v26, CFSTR("bundleIdentifier"), v40, CFSTR("controlMode"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v50), CFSTR("isFirstEverCinematicFramingAlert"), 0);
                *(_QWORD *)type = 0;
                v42 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", v26, 0, type), "localizedName");
                if (v42)
                  objc_msgSend(v41, "setObject:forKeyedSubscript:", v42, CFSTR("bundleDisplayName"));
                objc_msgSend(v37, "setUserInfo:", v41);
                objc_msgSend(v49, "activateWithContext:", v37);
                v30 = 1;
              }
              v43 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v31);
              v44 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              objc_msgSend(v43, "setObject:forKeyedSubscript:", v44, v26);
              objc_msgSend(v44, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v33), CFSTR("app_control_alert_shown"));
              v45 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
              if (!v30)
                v45 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
              CFPreferencesSetAppValue(CFSTR("cinematic_framing_onboarding_alert_shown"), *v45, CFSTR("com.apple.cameracapture"));
              CFPreferencesSetAppValue(CFSTR("cinematic_framing_clients"), v43, CFSTR("com.apple.cameracapture"));
              CFPreferencesAppSynchronize(CFSTR("com.apple.cameracapture"));
            }
          }
        }
        else
        {
          v48 = v1;
          LODWORD(v47) = 0;
LABEL_67:
          FigDebugAssert3();
        }
      }
LABEL_50:
      if (!objc_msgSend(*(id *)(DerivedStorage + 592), "start:", &v55, v47, v48))
      {
        v5 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (v55)
          v6 = objc_msgSend(v55, "code");
        else
          v6 = 0xFFFFFFFFLL;
        goto LABEL_10;
      }
      *(_BYTE *)(DerivedStorage + 608) = 1;
      v46 = objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8);
      v5 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if ((v46 & 1) != 0 || objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
      {
        os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
        if (byte_1EE6BF31C)
          HIBYTE(word_1EE6BF328) = 1;
        os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
        os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
        if (dword_1ECFE9D84)
          ++dword_1ECFE9DD0;
        os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
      }
    }
    v6 = 0;
  }
  else
  {
    FigDebugAssert3();
    v6 = FigSignalErrorAt();
  }
LABEL_10:
  if (*(_BYTE *)(DerivedStorage + 608))
    v7 = mach_absolute_time();
  else
    v7 = 0;
  *(_QWORD *)(DerivedStorage + 664) = v7;
  if (*v5 == 1)
    kdebug_trace();
  return v6;
}

uint64_t gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs(void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *ParentOutputOfOutputWithSharedPool;
  void *v10;
  void *v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(a1);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v7);
        v14 = 0;
        ParentOutputOfOutputWithSharedPool = gr_findParentOutputOfOutputWithSharedPool(v8, a2, &v14);
        if (!ParentOutputOfOutputWithSharedPool)
          gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs_cold_1();
        v10 = ParentOutputOfOutputWithSharedPool;
        v11 = (void *)objc_msgSend(v8, "mediaPropertiesForAttachedMediaKey:", a2);
        v12 = (void *)objc_msgSend(v10, "mediaPropertiesForAttachedMediaKey:", v14);
        if (v11)
          v13 = v12 == 0;
        else
          v13 = 1;
        if (!v13)
          objc_msgSend(v12, "setResolvedRetainedBufferCount:", objc_msgSend(v11, "resolvedRetainedBufferCount")+ objc_msgSend(v12, "resolvedRetainedBufferCount")+ 1);
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void *gr_findParentOutputOfOutputWithSharedPool(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;

  v6 = a2;
  while (objc_msgSend(a1, "_passthroughModeForAttachedMediaKey:", v6))
  {
    v7 = (void *)objc_msgSend(a1, "mediaConfigurationForAttachedMediaKey:", a2);
    v8 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "node"), "inputs"), "objectAtIndexedSubscript:", (int)objc_msgSend(v7, "indexOfInputWhichDrivesThisOutput"));
    v6 = objc_msgSend(v7, "attachedMediaKeyOfInputWhichDrivesThisOutput");
    a1 = (void *)objc_msgSend((id)objc_msgSend(v8, "connection"), "output");
    if (!a1)
      gr_findParentOutputOfOutputWithSharedPool_cold_1();
  }
  if (a3)
    *a3 = v6;
  return a1;
}

uint64_t __captureSession_startDeferredGraphSetupWork_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = captureSession_isGraphCalloutCancelled(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if ((result & 1) == 0)
    return FigVideoCaptureSourcesEnableTimeOfFlightAFIfSupported();
  return result;
}

void __captureSession_dispatchGraphCalloutToWorkerQueueAfter_block_invoke(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x1A858DD40]();
  captureSession_isGraphCalloutCancelled(a1[5], a1[6]);
  (*(void (**)(void))(a1[4] + 16))();
  v3 = (const void *)a1[7];
  if (v3)
    CFRelease(v3);
  objc_autoreleasePoolPop(v2);
}

BOOL captureSession_isGraphCalloutCancelled(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  int v5;
  BOOL v6;

  v4 = (os_unfair_lock_s *)(a1 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 320));
  v5 = *(_DWORD *)(a1 + 368);
  os_unfair_lock_unlock(v4);
  if (v5)
    v6 = v5 == 3;
  else
    v6 = 1;
  return v6 || *(_QWORD *)(a1 + 600) != a2 || *(_QWORD *)(a1 + 592) == 0;
}

uint64_t __captureSession_startDeferredGraphSetup_block_invoke_2(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return captureSession_startDeferredGraphSetupWork(*(_QWORD *)(result + 32));
  return result;
}

void __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke(uint64_t a1, char a2)
{
  uint64_t v3;
  int v4;

  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
    v3 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v3 + 497) || *(_BYTE *)(v3 + 336))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
      return;
    }
    if (*(_BYTE *)(v3 + 80))
    {
      v4 = *(unsigned __int8 *)(v3 + 498);
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
      if (!v4)
        return;
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 592), "startDeferredSourceNodesIfNeeded");
  }
}

void cs_reportCameraAppLaunchCoreAnalyticsData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  BWCameraAppLaunchAnalyticsPayload *v8;

  v8 = objc_alloc_init(BWCameraAppLaunchAnalyticsPayload);
  -[BWCameraAppLaunchAnalyticsPayload setIsPrewarmed:](v8, "setIsPrewarmed:", a1);
  -[BWCameraAppLaunchAnalyticsPayload setLaunchMode:](v8, "setLaunchMode:", CFSTR("Photo"));
  -[BWCameraAppLaunchAnalyticsPayload setDevicePosition:](v8, "setDevicePosition:", 1);
  -[BWCameraAppLaunchAnalyticsPayload setPrewarmReason:](v8, "setPrewarmReason:", a2);
  -[BWCameraAppLaunchAnalyticsPayload setLaunchDuration:](v8, "setLaunchDuration:", a3);
  -[BWCameraAppLaunchAnalyticsPayload setMemoryStatusLevel:](v8, "setMemoryStatusLevel:", qword_1ECFE9DC8);
  -[BWCameraAppLaunchAnalyticsPayload setThermalLevel:](v8, "setThermalLevel:", HIDWORD(qword_1ECFE9DC8));
  -[BWCameraAppLaunchAnalyticsPayload setIspStartDuration:](v8, "setIspStartDuration:", objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "createDeviceTime"));
  -[BWCameraAppLaunchAnalyticsPayload setNumberOfGraphStartsDuringLaunch:](v8, "setNumberOfGraphStartsDuringLaunch:", dword_1ECFE9DD0);
  -[BWCameraAppLaunchAnalyticsPayload setDeviceIsLocked:](v8, "setDeviceIsLocked:", byte_1ECFE9DD4);
  -[BWCameraAppLaunchAnalyticsPayload setIsColdLaunch:](v8, "setIsColdLaunch:", byte_1ECFE9D88);
  -[BWCameraAppLaunchAnalyticsPayload setDeviceStolenCondition:](v8, "setDeviceStolenCondition:", 0);
  if ((_QWORD)xmmword_1ECFE9DB0
    && (!byte_1ECFE9DD5 ? (v6 = 1) : (v6 = 2),
        -[BWCameraAppLaunchAnalyticsPayload setDeviceStolenCondition:](v8, "setDeviceStolenCondition:", v6),
        *((_QWORD *)&xmmword_1ECFE9DB0 + 1)))
  {
    v7 = ((int)(FigHostTimeToNanoseconds() / 1000 + 999) / 1000);
  }
  else
  {
    v7 = 0;
  }
  -[BWCameraAppLaunchAnalyticsPayload setDeviceStolenDuration:](v8, "setDeviceStolenDuration:", v7);
  -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance"), "sendEvent:", v8);

}

FigCaptureMovieFileSinkPipelineConfiguration *captureSession_createMovieFileSinkPipelineConfigurationFromParsedConfiguration(uint64_t a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8, char a9, char a10)
{
  uint64_t DerivedStorage;
  FigCaptureMovieFileSinkPipelineConfiguration *v18;
  unint64_t v19;
  char v20;
  char v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  char v29;
  char *PortTypesWithGDCInVIS;
  char v31;
  void *v32;
  char shouldEnableOverCapture;
  char v34;
  char v35;
  char v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  float v42;
  char v43;
  int v44;
  float v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = objc_alloc_init(FigCaptureMovieFileSinkPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v18, (char *)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "videoConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "audioConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "depthDataConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v18, (char *)objc_msgSend(a2, "detectedObjectMetadataConnectionConfigurations"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "cameraDebugInfoMetadataConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setStillImageConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "stillImageConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setSceneClassifierConnectionConfiguration:](v18, (char *)objc_msgSend(a2, "sceneClassifierConnectionConfiguration"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoSourceCaptureTransform:]((uint64_t)v18, a4, a5);
  v19 = -[FigCaptureCameraSourcePipeline videoCaptureDimensionsWithoutOverscan]((uint64_t)a3);
  v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  if (objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration audioConnectionConfiguration]((uint64_t)v18), "audioCaptureMode") == 2)v21 = (v20 | a9) ^ 1;
  else
    v21 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setCinematicAudioEnabled:]((uint64_t)v18, v21);
  v22 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "dimensions");
  v23 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "videoStabilizationStrength");
  if (objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "cinematicFramingEnabled"))
  {
    v24 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "cinematicFramingOutputDimensions");
LABEL_6:
    LODWORD(v19) = v24;
    v25 = HIDWORD(v24);
    goto LABEL_9;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisVISEnabled"))
  {
    v25 = HIDWORD(v19);
    if (v22 < 3840 || v23 < 3)
      goto LABEL_9;
    v24 = cs_actionCamera2p8kOutputDimensions(v23);
    goto LABEL_6;
  }
  LODWORD(v19) = objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "outputWidth");
  v25 = objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "outputHeight");
LABEL_9:
  -[FigCaptureMovieFileSinkPipelineConfiguration setVisOutputDimensions:]((uint64_t)v18, v19 | (unint64_t)(v25 << 32));
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationType:]((uint64_t)v18, a6);
  v26 = +[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, a6);
  -[FigCaptureMovieFileSinkPipelineConfiguration setBoxedMetadataPostVISEnabled:]((uint64_t)v18, v26);
  -[FigCaptureMovieFileSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v18, a8);
  v27 = BWInferenceSmartCameraCurrentVersion();
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartCameraPipelineVersion:]((uint64_t)v18, v27 & 0xFFFFFFFFFFFFLL);
  if (a6)
    v28 = *(_BYTE *)(DerivedStorage + 656) == 0;
  else
    v28 = 1;
  v29 = !v28;
  -[FigCaptureMovieFileSinkPipelineConfiguration setOfflineVISEnabled:]((uint64_t)v18, v29);
  PortTypesWithGDCInVIS = (char *)cs_getPortTypesWithGDCInVIS(a3);
  -[FigCaptureMovieFileSinkPipelineConfiguration setPortTypesWithGeometricDistortionCorrectionInVISEnabled:](v18, PortTypesWithGDCInVIS);
  if (+[BWInferenceEngine isNeuralEngineSupported](BWInferenceEngine, "isNeuralEngineSupported")
    && objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "livePhotoVitalityScoringSupported"))
  {
    v31 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  }
  else
  {
    v31 = 0;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v18, v31);
  v32 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  shouldEnableOverCapture = cs_shouldEnableOverCapture(v32);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCaptureDeviceHasOverCaptureEnabled:]((uint64_t)v18, shouldEnableOverCapture);
  if (-[FigCaptureMovieFileSinkPipelineConfiguration captureDeviceHasOverCaptureEnabled]((_BOOL8)v18))
    v34 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "spatialOverCaptureEnabled");
  else
    v34 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v18, v34);
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"), "depthDataDeliveryEnabled"))v35 = -[FigCaptureCameraSourcePipeline depthType]((uint64_t)a3) != 0;
  else
    v35 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataDeliveryEnabled:]((uint64_t)v18, v35);
  -[FigCaptureMovieFileSinkPipelineConfiguration setFrameReconstructionEnabled:]((uint64_t)v18, 1);
  -[FigCaptureMovieFileSinkPipelineConfiguration setSemanticStyleRenderingEnabled:]((uint64_t)v18, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "semanticStyleRenderingEnabled"));
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleRenderingEnabled:]((uint64_t)v18, a7);
  if (-[FigCaptureMovieFileSinkPipelineConfiguration smartStyleRenderingEnabled]((_BOOL8)v18))
    v36 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  else
    v36 = 0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleReversibilityEnabled:]((uint64_t)v18, v36);
  v37 = (void *)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  if ((objc_msgSend(v37, "cinematicFramingEnabled") & 1) != 0)
  {
    v38 = 2;
  }
  else if (objc_msgSend(v37, "manualCinematicFramingEnabled"))
  {
    v38 = 2;
  }
  else
  {
    v38 = 1;
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setSmartStyleRenderingMethod:]((uint64_t)v18, v38);
  -[FigCaptureMovieFileSinkPipelineConfiguration setIspFastSwitchEnabled:]((uint64_t)v18, a10);
  -[FigCaptureMovieFileSinkPipelineConfiguration setTrueVideoCaptureEnabled:]((uint64_t)v18, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"));
  v39 = (void *)objc_msgSend(a2, "videoConnectionConfiguration");
  v43 = v39
     && (v40 = v39, v41 = (void *)objc_msgSend(v39, "sourceConfiguration"), (int)FigCapturePlatformIdentifier() >= 11)
     && (int)objc_msgSend((id)objc_msgSend(v41, "requiredFormat"), "dimensions") >= 3840
     && (objc_msgSend(v41, "requiredMaxFrameRate"), v42 >= 60.0)
     && objc_msgSend(v40, "videoStabilizationType") == 4;
  -[FigCaptureMovieFileSinkPipelineConfiguration setLowResImageUsedByVideoEncoderEnabled:]((uint64_t)v18, v43);
  -[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18);
  v44 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled");
  v45 = 0.1;
  if (!v44)
    v45 = 0.0;
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationOverscanOverride:]((uint64_t)v18, v45);
  v46 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "videoStabilizationStrength");
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoStabilizationStrength:]((uint64_t)v18, v46);
  -[FigCaptureMovieFileSinkPipelineConfiguration setClientApplicationID:](v18, *(char **)(DerivedStorage + 56));
  if (objc_msgSend(a2, "videoConnectionConfiguration"))
    -[FigCaptureMovieFileSinkPipelineConfiguration setMaxLossyCompressionLevel:]((uint64_t)v18, +[FigCaptureCameraParameters movieFileMaxLossyCompressionLevelForPixelFormat:](FigCaptureCameraParameters, "movieFileMaxLossyCompressionLevelForPixelFormat:", objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "videoConnectionConfiguration"), "sourceConfiguration"), "requiredFormat"), "format")));
  if (-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18))
  {
    v47 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredFormat"), "format");
    v48 = FigCapturePixelFormatIs422(v47);
    v49 = 419430400;
    if (v48 && v22 >= 3840)
    {
      objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredMaxFrameRate");
      if (v50 <= 60.0)
      {
        objc_msgSend((id)-[FigCaptureMovieFileSinkPipelineConfiguration cameraConfiguration]((uint64_t)v18), "requiredMaxFrameRate");
        if (v51 <= 30.0)
          v49 = 419430400;
        else
          v49 = 524288000;
      }
      else
      {
        v49 = 629145600;
      }
    }
    -[FigCaptureMovieFileSinkPipelineConfiguration setMaximumAllowedInFlightCompressedBytes:]((uint64_t)v18, v49);
  }
  v52 = objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(a3, "sourceID"));
  if (v52)
  {
    v53 = -[FigCaptureCinematographyPipeline depthOutputDimensions](v52);
    -[FigCaptureMovieFileSinkPipelineConfiguration setDepthOutputDimensions:]((uint64_t)v18, v53);
  }
  return v18;
}

uint64_t cspc_getVideoStabilizationType(void *a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  int v13;
  int v15;
  void (*v16)(uint64_t, const __CFString *, _QWORD, Boolean *);
  id v17;
  int v18;
  unsigned int AppIntegerValue;
  Boolean v20;
  unsigned int v21;
  unsigned __int8 v22;
  Boolean keyExistsAndHasValidFormat[8];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(a1, "sourceConfiguration");
  v9 = objc_msgSend(v8, "source");
  v10 = (void *)objc_msgSend(v8, "requiredFormat");
  v25[0] = a1;
  v11 = objc_msgSend((id)objc_msgSend(+[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1), 1), "firstObject"), "intValue");
  if ((v11 & 0xFFFFFFFB) == 0 || v9 == 0)
  {
    v13 = 0;
    goto LABEL_30;
  }
  *(_QWORD *)keyExistsAndHasValidFormat = 0;
  if ((objc_msgSend(a1, "physicalMirroringForMovieRecordingEnabled") & 1) != 0)
  {
    v13 = 2;
    goto LABEL_30;
  }
  if (v11 - 2 < 2 || v11 == 5)
  {
    if (objc_msgSend(v10, "stabilizationTypeOverrideForCinematic"))
    {
      v15 = objc_msgSend(v10, "stabilizationTypeOverrideForCinematic");
LABEL_19:
      v13 = v15;
      goto LABEL_30;
    }
  }
  else if (v11 == 1 && objc_msgSend(v10, "stabilizationTypeOverrideForStandard"))
  {
    v15 = objc_msgSend(v10, "stabilizationTypeOverrideForStandard");
    goto LABEL_19;
  }
  v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, Boolean *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (v16)
  {
    v16(v9, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], keyExistsAndHasValidFormat);
    v17 = *(id *)keyExistsAndHasValidFormat;
  }
  else
  {
    v17 = 0;
  }
  v18 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("ISPMotionData")), "BOOLValue");
  if (v11 <= 5 && ((1 << v11) & 0x2C) != 0)
  {
    v13 = 2;
  }
  else if (v18)
  {
    v13 = 1;
  }
  else
  {
    v13 = 2;
  }

LABEL_30:
  keyExistsAndHasValidFormat[0] = 0;
  if ((v11 | 4) == 4)
  {
    AppIntegerValue = 0;
    v20 = 0;
LABEL_32:
    v21 = v13;
    goto LABEL_34;
  }
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("vis_type"), CFSTR("com.apple.coremedia"), keyExistsAndHasValidFormat);
  v20 = keyExistsAndHasValidFormat[0];
  v21 = AppIntegerValue;
  if (!keyExistsAndHasValidFormat[0])
    goto LABEL_32;
LABEL_34:
  if ((a2 & 1) != 0)
  {
    if (!v11)
      goto LABEL_41;
  }
  else if (!v11 || (a4 & 1) == 0)
  {
    goto LABEL_41;
  }
  if (v11 != 4)
    v21 = 2;
LABEL_41:
  if ((a3 & (v21 - 3 < 2)) != 0)
    v21 = 2;
  if (v20)
    v22 = a4;
  else
    v22 = 0;
  if ((v22 & (AppIntegerValue == 4)) != 0)
    return 4;
  else
    return v21;
}

uint64_t cs_shouldEnablePreviewStabilization(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  float v6;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "isStabilizationModeSupported:", 4);
      if ((_DWORD)result)
      {
        result = 0;
        if (((captureSession_clientIsCameraOrDerivative(a1) & 1) != 0
           || objc_msgSend(a2, "videoStabilizationMethod") == 4)
          && ((objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "spatialOverCaptureEnabled") & 1) != 0
           || !objc_msgSend(a2, "previewDepthDataDeliveryEnabled")
           || (objc_msgSend(a2, "previewDepthFilterRenderingEnabled") & 1) == 0))
        {
          v5 = (void *)objc_msgSend(a2, "sourceConfiguration");
          objc_msgSend(v5, "requiredMaxFrameRate");
          if (v6 <= 60.0
            && objc_msgSend(v5, "imageControlMode") != 4
            && objc_msgSend(v5, "imageControlMode") != 5
            && objc_msgSend(v5, "imageControlMode") != 6)
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t cs_shouldEnableVideoSTF(void *a1, char a2, int a3)
{
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t result;
  _BOOL8 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", a1, 1);
  v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", 0), "sourceConfiguration"), "requiredFormat"), "isVideoSTFSupported");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v8 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v21 != v10)
        objc_enumerationMutation(a1);
      v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v11);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && (objc_msgSend((id)objc_msgSend(v12, "irisSinkConfiguration"), "irisMovieCaptureEnabled") & 1) != 0)
      {
        return 0;
      }
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v9)
          goto LABEL_3;
        break;
      }
    }
  }
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v13 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v21;
LABEL_12:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v21 != v15)
        objc_enumerationMutation(a1);
      v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v16);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend((id)objc_msgSend(v17, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled"))return 0;
      }
      if (v14 == ++v16)
      {
        v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v14)
          goto LABEL_12;
        break;
      }
    }
  }
  result = 0;
  v19 = a3 != 10;
  if (v7)
  {
    if ((a2 & 1) == 0)
    {
      if ((objc_msgSend(v6, "containsObject:", &unk_1E49F9FD8) & 1) != 0)
        return v19;
      if ((objc_msgSend(v6, "containsObject:", &unk_1E49F9FF0) & 1) != 0)
        return v19;
      result = objc_msgSend(v6, "containsObject:", &unk_1E49FA008);
      if ((_DWORD)result)
        return v19;
    }
  }
  return result;
}

uint64_t cs_captureSourceDeviceType(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, id *);
  id v3;
  uint64_t v4;
  id v6;

  v6 = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
  {
    v2(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v6);
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");

  return v4;
}

uint64_t cs_captureSourceCameraPosition(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, id *);
  id v3;
  uint64_t v4;
  id v6;

  v6 = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
  {
    v2(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v6);
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("Position")), "intValue");

  return v4;
}

void *cs_getPortTypesWithGDCInVIS(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](a1);
  v3 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnVideoCaptureOutputsEnabled](a1);
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a1), "stereoVideoCaptureEnabled"))
  {
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)a1), "activePortTypes"));
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v2);
          v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
          if ((objc_msgSend(v3, "containsObject:", v9) & 1) == 0)
            objc_msgSend(v4, "addObject:", v9);
        }
        v6 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }
  }
  return v4;
}

uint64_t captureSourceServer_handleReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t captureSourceServer_getAndRetainSourceObjectFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  uint64_t v4;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v4 = v2;
    FigDebugAssert3();
  }
  else
  {
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t FigCaptureSourceGetTypeID()
{
  if (FigCaptureSourceGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureSourceGetClassID_onceToken, &__block_literal_global_86);
  return CMBaseClassGetCFTypeID();
}

uint64_t captureSource_CopyProprietaryDefault(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2 || !a3)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v7 = DerivedStorage;
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  v8 = (void *)objc_msgSend((id)sTemporaryCameraHistoryItems, "objectForKeyedSubscript:", a2);
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if (!v8)
    v8 = (void *)objc_msgSend(*(id *)(v7 + 232), "objectForKey:", a2);
  *a3 = v8;
  return 0;
}

uint64_t FigCaptureSourceGetSourceType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetSourceType_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2CD457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSource_CameraHistoryDownplayOverrideList(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  CFTypeRef v5;

  *a3 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 12))
    return 4294954511;
  if (sCameraHistoryDownplayOverrideList)
    v5 = CFRetain((CFTypeRef)sCameraHistoryDownplayOverrideList);
  else
    v5 = 0;
  result = 0;
  *a3 = v5;
  return result;
}

uint64_t captureSource_SetProprietaryDefault(uint64_t a1, __CFString *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v8 = DerivedStorage;
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  v9 = objc_msgSend((id)sTemporaryCameraHistoryItems, "objectForKeyedSubscript:", a2);
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if (v9)
    return 4294954516;
  if (CFStringHasPrefix(a2, CFSTR("signal/")))
    cs_sendNotificationOfNewTransientValue(a1, a3, a2);
  else
    objc_msgSend(*(id *)(v8 + 232), "setObject:forKey:", a3, a2);
  return 0;
}

double shmemPoolInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t cs_updateStillImageSinkPipelineCommonConfiguration(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  void *v12;
  void *v13;
  unsigned int StillImageNoiseReductionAndFusionScheme;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int v29;
  unsigned int v30;
  int v31;

  v31 = 0;
  v12 = (void *)objc_msgSend(a3, "sourceConfiguration");
  if (objc_msgSend((id)objc_msgSend(a3, "sinkConfiguration"), "sinkType") == 10)
    v13 = (void *)objc_msgSend(a3, "sinkConfiguration");
  else
    v13 = 0;
  StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(v12, "source"), &v31);
  if (v31)
    return FigDebugAssert3();
  v30 = StillImageNoiseReductionAndFusionScheme;
  v15 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](a2);
  if (a4)
    v16 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "irisMovieCaptureEnabled");
  else
    v16 = 1;
  v17 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "portraitEffectsMatteDeliveryEnabled");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    v18 = 1;
  }
  else
  {
    v18 = v17;
  }
  v29 = v18;
  v19 = objc_msgSend(v13, "maxQualityPrioritization");
  v20 = 0;
  if (objc_msgSend((id)objc_msgSend(v12, "requiredFormat"), "isHighPhotoQualitySupported") && v19 >= 2)
    v20 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2);
  v21 = objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v12, "source"), (uint64_t)CFSTR("DepthDataDeliveryConfigurations")), "objectForKeyedSubscript:", CFSTR("CapturePipeliningSupported")), "BOOLValue");
  if (objc_msgSend(a5, "isPhotoFormat")
    && -[FigCaptureCameraSourcePipeline usesFirmwareStillImageOutput](a2))
  {
    v22 = objc_msgSend(v15, "depthDataDeliveryEnabled") ^ 1 | v21;
  }
  else
  {
    v22 = 0;
  }
  v23 = 875704422;
  objc_msgSend(a1, "setAllowsMultipleInflightCaptures:", v22);
  objc_msgSend(a1, "setClientIsCameraOrDerivative:", a6);
  objc_msgSend(a1, "setAllowedToModifyInputBuffers:", !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2));
  v24 = objc_msgSend(a5, "isHighPhotoQualitySupported");
  v25 = objc_msgSend(a5, "usesPacked10BitFirmwareStillImageOutputPixelFormat");
  if (v24)
    v26 = v25 & v20;
  else
    v26 = v25;
  objc_msgSend(a1, "setInputIs10Bit:", v26);
  objc_msgSend(a1, "setHorizontalSensorBinningFactor:", objc_msgSend(a5, "horizontalSensorBinningFactor"));
  objc_msgSend(a1, "setVerticalSensorBinningFactor:", objc_msgSend(a5, "verticalSensorBinningFactor"));
  objc_msgSend(a5, "maxSupportedFrameRate");
  objc_msgSend(a1, "setMaxSupportedFrameRate:");
  objc_msgSend(a1, "setMotionAttachmentsSource:", -[FigCaptureCameraSourcePipeline motionAttachmentsSource](a2));
  objc_msgSend(a1, "setSinkConfiguration:", objc_msgSend(a3, "sinkConfiguration"));
  objc_msgSend(a1, "setUsesHighEncodingPriority:", v16);
  if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2))
  {
    if (FigCapturePixelFormatIsFullRange(objc_msgSend(a5, "format")))
      v23 = 875704422;
    else
      v23 = 875704438;
  }
  objc_msgSend(a1, "setOutputPixelFormat:", v23);
  if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](a2)
    || objc_msgSend((id)objc_msgSend(a3, "sourceConfiguration"), "colorSpace") == 2)
  {
    v27 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a2), "supportsWideColor");
    objc_msgSend(a1, "setOutputColorSpaceProperties:", +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", v27, cs_figCaptureColorSpaceFromSourcePipeline(a2), objc_msgSend(a5, "format"), objc_msgSend(a5, "dimensions"), objc_msgSend(a1, "outputPixelFormat")));
  }
  objc_msgSend(a1, "setStillImageStabilizationSupported:", objc_msgSend(a5, "isStillImageStabilizationSupported"));
  objc_msgSend(a1, "setNoiseReductionAndFusionScheme:", v30);
  result = objc_msgSend(a1, "setDepthDataDimensions:", objc_msgSend((id)objc_msgSend(v12, "depthDataFormat"), "soleHighResStillImageDimensions"));
  if (v29)
  {
    objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v12, "source"), (uint64_t)CFSTR("PortraitEffectsMatteMainImageDownscalingFactor")), "floatValue");
    return objc_msgSend(a1, "setPortraitEffectsMatteMainImageDownscalingFactor:");
  }
  return result;
}

uint64_t FigCaptureSoftISPEnabled(void *a1, void *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, const __CFString *, _QWORD, id *);
  id v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  char v12;
  id v13;

  if (!a2)
    return 0;
  if (objc_msgSend(a1, "sourceDeviceType") == 10)
    return 0;
  v13 = 0;
  v4 = objc_msgSend(a1, "source");
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v5(v4, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v13);
    v6 = v13;
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", 0x1E49329B8), "BOOLValue");
  v8 = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue");

  if (!v7)
    return 0;
  if (objc_msgSend(a2, "sinkType") == 10)
  {
    if ((objc_msgSend(a1, "depthDataDeliveryEnabled") & v8) == 1
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "swfrSupported") & 1) == 0
      && objc_msgSend(a1, "sourceDeviceType") != 6
      && objc_msgSend(a1, "sourceDeviceType") != 12)
    {
      return 0;
    }
    v9 = objc_msgSend(a1, "depthDataDeliveryEnabled")
      && objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("StillImageDepthDataType")), "intValue") == 8;
    if ((objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStillImageStabilizationSupported") & 1) == 0
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isLearnedNRSupported") | v9) != 1)
    {
      return 0;
    }
    if (objc_msgSend(a2, "maxQualityPrioritization") != 1)
      goto LABEL_27;
    if ((objc_msgSend(a1, "depthDataDeliveryEnabled") & v8) == 1
      && (objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "swfrSupported") & 1) != 0)
    {
      v11 = objc_msgSend(a1, "sourceDeviceType");
      v12 = objc_msgSend(a2, "constantColorEnabled");
      if (v11 != 6)
        goto LABEL_27;
    }
    else
    {
      v12 = objc_msgSend(a2, "constantColorEnabled");
    }
    if ((v12 & 1) == 0)
      return 0;
    goto LABEL_27;
  }
  result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStillImageStabilizationSupported");
  if ((_DWORD)result)
  {
LABEL_27:
    if (objc_msgSend(a1, "imageControlMode") != 4
      && (objc_msgSend(a1, "backgroundBlurEnabled") & 1) == 0
      && (objc_msgSend(a1, "cinematicFramingEnabled") & 1) == 0
      && (objc_msgSend(a1, "studioLightingEnabled") & 1) == 0)
    {
      return objc_msgSend(a1, "backgroundReplacementEnabled") ^ 1;
    }
    return 0;
  }
  return result;
}

BWDepthConverterNode *FigCaptureCreateAndConfigureDepthConverterNode(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _DWORD *a9)
{
  BWDepthConverterNode *v16;
  int v17;
  uint64_t v19;

  LOBYTE(v19) = 0;
  v16 = -[BWDepthConverterNode initWithStillImageNodeConfiguration:cameraInfoByPortType:sensorIDDictionary:rgbPersonSegmentationEnabled:depthIsAlwaysHighQuality:depthOriginatesFromNeuralNetwork:backPressureDrivenPipelining:]([BWDepthConverterNode alloc], "initWithStillImageNodeConfiguration:cameraInfoByPortType:sensorIDDictionary:rgbPersonSegmentationEnabled:depthIsAlwaysHighQuality:depthOriginatesFromNeuralNetwork:backPressureDrivenPipelining:", 0, a5, 0, 0, 0, 0, v19);
  -[BWNode setName:](v16, "setName:", CFSTR("Depth Converter"));
  -[BWDepthConverterNode setHorizontalSensorBinningFactor:](v16, "setHorizontalSensorBinningFactor:", objc_msgSend(a4, "horizontalSensorBinningFactor"));
  -[BWDepthConverterNode setVerticalSensorBinningFactor:](v16, "setVerticalSensorBinningFactor:", objc_msgSend(a4, "verticalSensorBinningFactor"));
  v17 = FigCaptureConfigureDepthConverterNode(v16, a1, a2, a3, a6, a7, a8);
  if (a9)
    *a9 = v17;
  return v16;
}

BOOL FigDepthFormatIsDisparity(int a1)
{
  return a1 == 1717856627 || a1 == 1751411059;
}

uint64_t csp_shouldUseFullBinSIFRCompanionIndex(void *a1, void *a2, void *a3, char a4, int a5)
{
  uint64_t result;
  BOOL v11;
  uint64_t v12;
  int v13;
  void *v14;
  void *v15;

  result = objc_msgSend(a1, "fullBinSIFRCompanionFormat");
  if (result)
  {
    if (a3 && objc_msgSend(a1, "isHDRSupported"))
    {
      if ((int)objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "maxQualityPrioritization") > 1)
        return 0;
      v11 = objc_msgSend(a3, "irisSinkConfiguration") == 0;
    }
    else
    {
      v11 = 0;
    }
    result = 0;
    if (!v11 && (a4 & 1) == 0)
    {
      if ((v12 = objc_msgSend((id)objc_msgSend(a3, "irisSinkConfiguration"), "maxPhotoDimensions"),
            objc_msgSend(a1, "isPhotoFormat"))
        && (int)v12 > (int)objc_msgSend(a1, "dimensions")
        && SHIDWORD(v12) > (int)((unint64_t)objc_msgSend(a1, "dimensions") >> 32)
        || (v13 = objc_msgSend(a1, "configureForNonDisruptiveFullBinSIFRSwitching"), result = 1, v13) && a5)
      {
        v14 = csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(objc_msgSend(a1, "formatIndex"), a2);
        v15 = csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "formatIndex"), a2);
        if (objc_msgSend(v14, "count") && !objc_msgSend(v15, "count"))
        {
          FigDebugAssert3();
          return 0;
        }
        return 1;
      }
    }
  }
  return result;
}

void *vfr_cacheModesForOptimalAccess(int a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t v8;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = v4;
  if (a2 && (MEMORY[0xFFFFFC021] & 8) != 0)
    objc_msgSend(v4, "addObject:", &unk_1E49FB088);
  if (MEMORY[0xFFFFFC080] == -1777893647 || MEMORY[0xFFFFFC080] == -1471079478 || MEMORY[0xFFFFFC080] == 506291073)
    v8 = 1280;
  else
    v8 = 0;
  if (MEMORY[0xFFFFFC080] != -400654602 && a1 != 0)
    objc_msgSend(v5, "addObject:", &unk_1E49FB0A0);
  objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v8));
  return v5;
}

uint64_t mscsn_streamOutputIndexForOutputID(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FE0]) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FF0]) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FC8]) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FE8]) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FF8]) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D08010]) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D08000]) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FC0]) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FD8]) & 1) != 0)
    return 7;
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FD0]))
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Internal inconsistency, mscsn_streamOutputIndexForOutputID() is not expected to be called with kFigCaptureStreamVideoOutputID_Metadata. Metadata output supports multiple data outputs. Check the call site and update.")), 0));
  FigDebugAssert3();
  return 0xFFFFFFFFLL;
}

uint64_t BWColorSpacePropertiesGetYCbCrMatrix(int a1)
{
  uint64_t v1;

  if ((a1 - 2) > 8)
    v1 = MEMORY[0x1E0CA8F10];
  else
    v1 = qword_1E4920328[a1 - 2];
  return *(_QWORD *)v1;
}

uint64_t mscsn_streamOutputIDForOutputIndex(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 0:
      v3 = (uint64_t *)MEMORY[0x1E0D07FE0];
      goto LABEL_3;
    case 1:
      v3 = (uint64_t *)MEMORY[0x1E0D07FF0];
      goto LABEL_3;
    case 2:
      v3 = (uint64_t *)MEMORY[0x1E0D07FC8];
      goto LABEL_3;
    case 3:
      v3 = (uint64_t *)MEMORY[0x1E0D07FF8];
      goto LABEL_3;
    case 4:
      v3 = (uint64_t *)MEMORY[0x1E0D08000];
      goto LABEL_3;
    case 5:
      v3 = (uint64_t *)MEMORY[0x1E0D08010];
      goto LABEL_3;
    case 6:
      v3 = (uint64_t *)MEMORY[0x1E0D07FC0];
      goto LABEL_3;
    case 7:
      v3 = (uint64_t *)MEMORY[0x1E0D07FD8];
      goto LABEL_3;
    case 8:
      v3 = (uint64_t *)MEMORY[0x1E0D07FE8];
      goto LABEL_3;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
      v3 = (uint64_t *)MEMORY[0x1E0D07FD0];
LABEL_3:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

void fvcs_removeSampleBufferPixelBufferMetadata(opaqueCMSampleBuffer *a1)
{
  CVImageBufferRef ImageBuffer;

  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  CMRemoveAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E0D05CB0]);
  CMRemoveAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E0D05D00]);
  CMRemoveAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E0D05C28]);
}

uint64_t figVideoCaptureStream_blackenFrameIfNecessary(uint64_t a1, void *a2)
{
  os_unfair_lock_s *v4;
  _BOOL4 v5;
  void *v6;
  uint64_t v7;
  CFTypeRef CVDataBuffer;
  void *v9;
  CMTime v11;
  CMTime time;

  v4 = (os_unfair_lock_s *)(a1 + 352);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 352));
  if (*(_BYTE *)(a1 + 356))
    v5 = *(_BYTE *)(a1 + 357) != 0;
  else
    v5 = 1;
  os_unfair_lock_unlock(v4);
  v6 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  memset(&v11, 0, sizeof(v11));
  CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)a2);
  if ((objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BC8]), "BOOLValue") & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 1144))
    {
      if (!v5)
        return 0;
    }
    else
    {
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        time = v11;
        CMTimeGetSeconds(&time);
        kdebug_trace();
      }
      *(_BYTE *)(a1 + 1144) = 1;
      if (!v5)
        return 0;
    }
  }
  CMSetAttachment(a2, CFSTR("FrameIsBlackened"), MEMORY[0x1E0C9AAB0], 1u);
  if (!CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2))
  {
    CVDataBuffer = BWSampleBufferGetCVDataBuffer((opaqueCMSampleBuffer *)a2);
    if (CVDataBuffer)
    {
      v9 = (void *)objc_msgSend(objc_alloc((Class)getADMutableJasperPointCloudClass()), "initWithDataBuffer:", CVDataBuffer);
      objc_msgSend(v9, "blacken");

    }
    return 0;
  }
  v7 = VTFillPixelBufferWithBlack();
  if ((_DWORD)v7)
    FigDebugAssert3();
  return v7;
}

void sub_1A2CDD308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_clientIsCameraOrDerivative(uint64_t a1)
{
  uint64_t DerivedStorage;

  if (a1 && (DerivedStorage = CMBaseObjectGetDerivedStorage()) != 0)
    return FigCaptureClientApplicationIDIsCameraOrDerivative(*(void **)(DerivedStorage + 56));
  else
    return 0;
}

uint64_t FigCaptureClientApplicationIDIsCameraOrDerivative(void *a1)
{
  if (fcu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!a1)
      return 0;
  }
  else
  {
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_184);
    if (!a1)
      return 0;
  }
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E493D4D8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D4F8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D5F8) & 1) != 0)
  {
    return 1;
  }
  objc_msgSend(a1, "isEqualToString:", 0x1E493D578);
  return 0;
}

uint64_t FigCaptureGetModelSpecificName()
{
  if (FigCaptureGetModelSpecificName_sModelNameCheckOnce != -1)
    dispatch_once(&FigCaptureGetModelSpecificName_sModelNameCheckOnce, &__block_literal_global_12);
  return FigCaptureGetModelSpecificName_sModelNameStr;
}

float FigMotionRotationRateFromDeltaQuaternion(double *a1, float32x2_t *a2, double a3)
{
  float v4;
  int v5;
  float v6;
  double v8;

  if (a3 >= 0.00000001)
  {
    v8 = a3;
    v4 = FigMotionDeltaRotationFromQuaternion(a1);
    HIDWORD(a3) = v5;
    *a2 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)&a3), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0)));
    *(float *)&a3 = v6 / v8;
    a2[1].i32[0] = LODWORD(a3);
  }
  return *(float *)&a3;
}

float FigMotionDeltaRotationFromQuaternion(double *a1)
{
  long double v2;
  double v3;
  long double v4;
  double v7;

  v2 = *a1;
  v3 = sqrt(1.0 - v2 * v2);
  if (v3 <= 1.0e-10)
  {
    return a1[1] + a1[1];
  }
  else
  {
    v7 = v3;
    v4 = acos(v2);
    return a1[1] * (v4 + v4) / v7;
  }
}

uint64_t FigCaptureDeviceGetClassID()
{
  MEMORY[0x1A858C99C](&FigCaptureDeviceGetClassID_sRegisterFigCaptureDeviceTypeOnce, RegisterFigCaptureDeviceType);
  return sFigCaptureDeviceID;
}

uint64_t mscsn_setScalerCropAndOutputDimensionsInConfiguration(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, float a13, float a14, unsigned __int8 a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  mscsn_calculateScalerCropAndOutputDimensions(a2, a3, a4, a5, a6, a7, a8, a15, a9, a10, a11, a12, a13, a14, &v20, &v19);
  if (v20)
    objc_msgSend(a1, "setObject:forKeyedSubscript:", v20, *MEMORY[0x1E0D07F20]);
  v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v19);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", v16, *MEMORY[0x1E0D07F90]);
  v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v19));
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D07F40]);
}

void mscsn_calculateScalerCropAndOutputDimensions(void *a1, void *a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, float a13, float a14, _QWORD *a15, _DWORD *a16)
{
  int v19;
  int v20;
  unint64_t v29;
  unint64_t v30;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  void *v43;
  int v44;
  int v45;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  _BOOL4 v55;
  float v56;
  float v57;
  float v58;
  _BOOL4 v59;
  double *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  unint64_t v69;
  double v70;
  double v71;
  float v72;
  float v73;
  double v74;
  double v75;
  int v76;
  double v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  BOOL v82;
  float v83;
  float v84;
  float v85;
  int v86;
  float v87;
  int v88;
  float v89;
  int v90;
  int v91;
  int v92;
  float v93;
  int v94;
  float v95;
  int v96;
  float v97;
  int v98;
  int v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  int v114;
  BOOL v115;
  float v116;
  double v117;
  double v118;
  float v119;
  double v120;
  double v121;
  double v122;
  _BOOL4 v123;
  double v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  int v129;
  int v130;
  char v131;
  float v132;
  double RectWithAspectRatioInsideDimensions;
  double v134;
  float v135;
  double v136;
  double v137;
  float v138;
  double v139;
  float v140;
  double v141;
  float v143;
  int64_t v144;
  float v145;
  int64_t v146;
  float v147;
  float v148;
  void *v149;
  uint64_t v150;
  uint64_t v152;
  CGFloat v153;
  CGFloat v154;
  CGFloat v155;
  CGFloat v156;
  int v157;
  int v158;
  uint64_t v159;
  _BOOL4 v160;
  _BOOL4 v161;
  double v162;
  _BOOL4 v163;
  double v164;
  int v165;
  double v166;
  _BOOL4 v167;
  double v168;
  uint64_t v169;
  void *v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;

  v19 = a5;
  v20 = a4;
  v29 = HIDWORD(a4);
  v30 = HIDWORD(a5);
  v170 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE8]), "objectForKeyedSubscript:", a1);
  v150 = *MEMORY[0x1E0D07E80];
  v163 = (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:"), "intValue") >= 1
      && (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E78]), "intValue") > 0;
  v32 = v20 > 0 && (int)v29 > 0;
  v167 = v32;
  v33 = a10 != *(double *)(MEMORY[0x1E0C9D820] + 8) || a9 != *MEMORY[0x1E0C9D820];
  v35 = v19 > 2 && (int)v30 > 2;
  v160 = v35;
  v161 = v33;
  v36 = FigCapturePlatformIdentifier();
  v37 = *MEMORY[0x1E0D07FF8];
  v169 = *MEMORY[0x1E0D07FF8];
  v165 = v29;
  if (v36 < 6)
  {
    v175 = 2;
  }
  else
  {
    if ((objc_msgSend(a1, "isEqual:") & 1) != 0
      || (objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D07FE0]) & 1) != 0
      || objc_msgSend(a1, "isEqual:", CFSTR("SecondaryScaler")))
    {
      v38 = 4;
    }
    else
    {
      v38 = 2;
    }
    v175 = v38;
    v37 = v169;
  }
  v158 = v19;
  v159 = a7;
  if (objc_msgSend(a1, "isEqual:", v37))
  {
    v163 = 0;
    if (a6)
      v39 = 4;
    else
      v39 = 2;
    v40 = v175;
    if (a6)
      v41 = 4;
    else
      v41 = v175;
    if (v160)
      v42 = 2;
    else
      v42 = v39;
    v172 = v42;
    if (!v160)
      v40 = v41;
    v175 = v40;
    goto LABEL_41;
  }
  if ((objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D08008]) & 1) == 0)
  {
    v43 = v170;
    if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D08000]) & 1) != 0
      || (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D07FC8]) & 1) != 0)
    {
      v39 = 2;
    }
    else
    {
      v39 = 2;
      if (objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED8]), "BOOLValue"))
      {
        v41 = 4;
        if ((int)FigCapturePlatformIdentifier() <= 5)
          v39 = 4;
        else
          v39 = 2;
        goto LABEL_46;
      }
    }
    v41 = v175;
LABEL_46:
    v172 = 2;
    goto LABEL_47;
  }
  v39 = 2;
  v41 = v175;
  v172 = 2;
LABEL_41:
  v43 = v170;
LABEL_47:
  v173 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D08050]), "intValue");
  v174 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D08040]), "intValue");
  v157 = v30;
  if (a8
    && objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D08088]), "BOOLValue"))
  {
    v44 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D08058]), "intValue");
    v45 = objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D08048]), "intValue");
    v47 = v44 > (int)v173 || v45 > (int)v174;
    if (v47)
      v48 = v44;
    else
      v48 = v173;
    v173 = v48;
    if (v47)
      v49 = v45;
    else
      v49 = v174;
    v174 = v49;
  }
  v50 = v173;
  v51 = v174;
  v55 = (int)v173 >= (int)a3 && (int)v174 >= SHIDWORD(a3) && (int)a3 > 2 && SHIDWORD(a3) > 2;
  v56 = (float)(int)v175;
  if (v55)
  {
    v50 = v175 * llroundf((float)(int)a3 / v56);
    v51 = v172 * llroundf((float)SHIDWORD(a3) / (float)(int)v172);
  }
  if (v161)
  {
    v57 = (double)v50 / (a9 + 1.0);
    v50 = (int)(float)(uint64_t)(llroundf(v57 / v56) * v175);
    v58 = (double)(int)v51 / (a10 + 1.0);
    v51 = (int)(float)(uint64_t)(llroundf(v58 / (float)(int)v172) * v172);
  }
  v59 = v163;
  v60 = (double *)MEMORY[0x1E0C9D648];
  if (v167)
  {
    v61 = (float)v20 / (float)v165;
    if (v163)
    {
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED0]), "floatValue");
      v63 = v62;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC8]), "floatValue");
      v65 = v63 / v64;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v150), "floatValue");
      v67 = v66;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E78]), "floatValue");
      v61 = v61 * (float)((float)(v67 / v68) / v65);
    }
    v69 = FigCaptureFitAspectInsideDimensions(v50 | (v51 << 32), v175 | (unint64_t)(v172 << 32), v61);
    v50 = v69;
    v51 = HIDWORD(v69);
  }
  v70 = *v60;
  v71 = v60[1];
  v152 = v50 | (v51 << 32);
  v153 = v60[3];
  v154 = v60[2];
  v166 = v153;
  v168 = v154;
  v155 = v71;
  v156 = *v60;
  if (!FigCaptureVideoDimensionsAreEqual(v173 | (unint64_t)(v174 << 32), v152))
  {
    v168 = (double)v50;
    v72 = ((double)(int)v173 - (double)v50) * 0.5;
    v70 = (float)(uint64_t)(2 * llroundf(v72 * 0.5));
    v166 = (double)(int)v51;
    v73 = ((double)(int)v174 - (double)(int)v51) * 0.5;
    v71 = (float)(uint64_t)(2 * llroundf(v73 * 0.5));
    if (v55 || v161)
    {
      v74 = a11;
      v75 = a12;
      if (a11 != *MEMORY[0x1E0C9D538] || a12 != *(double *)(MEMORY[0x1E0C9D538] + 8))
      {
        if (v163)
        {
          v76 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v150), "intValue");
          v77 = a11
              * (double)(v76
                       / (int)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED0]), "intValue"));
          v78 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E78]), "intValue");
          v79 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC8]), "intValue");
          v74 = v77;
          v80 = v78 / v79;
          v59 = v163;
          v75 = a12 * (double)v80;
        }
        v70 = v74 + v70;
        v71 = v75 + v71;
        v81 = v70 >= 0.0 && v70 + v168 <= (double)(int)v173;
        if (!v81 || (v71 >= 0.0 ? (v82 = v71 + v166 <= (double)(int)v174) : (v82 = 0), !v82))
        {
          v149 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Internal inconsistency, scalerCropRect %@ is out of bounds {%d,%d}"), BWStringFromCGRect(v70, v71, v168, v166), v173, v174), 0);
          objc_exception_throw(v149);
        }
      }
    }
  }
  objc_msgSend((id)objc_msgSend(v170, "objectForKeyedSubscript:", *MEMORY[0x1E0D08038]), "floatValue");
  v84 = v83;
  if (v83 == 0.0)
  {
    v84 = 1.0;
    if ((objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D07FC8]) & 1) == 0)
    {
      objc_msgSend((id)objc_msgSend(v170, "objectForKeyedSubscript:", *MEMORY[0x1E0D08028]), "floatValue");
      if (v85 == 0.0)
        v84 = 0.25;
      else
        v84 = v85;
    }
  }
  if ((objc_msgSend(a1, "isEqual:", v169) & 1) != 0)
    v86 = 1;
  else
    v86 = objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D08000]);
  v87 = (float)v41;
  if (!v59 | v86)
    a14 = a13;
  v88 = v41 * llroundf((float)v158 / v87);
  v89 = (float)v39;
  v90 = v39 * llroundf((float)v157 / (float)v39);
  if (v160)
    v91 = v88;
  else
    v91 = v50;
  if (v160)
    v92 = v90;
  else
    v92 = v51;
  v164 = v71;
  v171 = a14;
  if (a13 != 1.0)
  {
    if (objc_msgSend(a1, "isEqual:", v169))
    {
      if (a13 >= 1.0)
        v92 = (int)(float)((float)v92 * a13);
      else
        v91 = (int)(float)((float)v91 * a13);
    }
    else
    {
      objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D08000]);
    }
  }
  v93 = (float)v50;
  v94 = vcvtps_s32_f32(v84 * (float)v50);
  v95 = (float)(int)v51;
  v96 = vcvtps_s32_f32(v84 * (float)(int)v51);
  v97 = (float)v91;
  if (v91 > v50 || v92 > (int)v51)
  {
    FigCaptureMakeRectWithAspectRatioInsideDimensions(v152, 0, v97 / (float)v92);
    v98 = llroundf((float)(int)v100 / v87);
    v99 = (int)v101;
  }
  else
  {
    v98 = llroundf(v97 / v87);
    v99 = v92;
  }
  v102 = v39 * llroundf((float)v99 / v89);
  v103 = (v41 * v98);
  if ((int)v103 < v94 || (int)v102 < v96)
  {
    v162 = v70;
    v105 = (float)(int)v102;
    v106 = 1.0;
    v107 = (float)v96;
    if ((float)(int)v103 < (float)v94)
      v106 = (float)v94 / (float)(int)v103;
    v108 = v107 / v105;
    if ((float)(v107 / v105) <= v106)
      v108 = v106;
    if (v105 < v107)
      v109 = v108;
    else
      v109 = v106;
    if ((int)FigCapturePlatformIdentifier() < 9)
    {
      LODWORD(v111) = v41 * llroundf((float)(int)llroundf(v109 * (float)(int)v103) / v87);
      LODWORD(v112) = v39 * llroundf((float)(int)llroundf(v109 * v105) / v89);
    }
    else
    {
      if (v41 <= v39)
        v110 = v39;
      else
        v110 = v41;
      v111 = mscsn_scaleDimensionsWithAlignment(v103 | (v102 << 32), v110, v109, v109);
      v112 = HIDWORD(v111);
    }
    if ((int)v111 >= v94)
      v113 = 0;
    else
      v113 = v41;
    LODWORD(v103) = v113 + v111;
    if ((int)v112 >= v96)
      v114 = 0;
    else
      v114 = v39;
    LODWORD(v102) = v114 + v112;
    v115 = (int)v103 <= v50 && (int)v102 <= (int)v51;
    v70 = v162;
    if (!v115)
    {
      v116 = v97 / (float)v92;
      if (vabds_f32(v116, (float)(v171 * v93) / v95) <= 0.01)
      {
        LODWORD(v103) = v41 * llroundf(v93 / v87);
        v119 = v95 / v89;
      }
      else
      {
        FigCaptureMakeRectWithAspectRatioInsideDimensions(v152, 0, v116);
        LODWORD(v103) = v41 * llroundf((float)(int)v117 / v87);
        v119 = (float)(int)v118 / v89;
      }
      LODWORD(v102) = v39 * llroundf(v119);
    }
  }
  v176.origin.x = v70;
  v121 = v164;
  v120 = v166;
  v176.origin.y = v164;
  v122 = v168;
  v176.size.width = v168;
  v176.size.height = v166;
  v179.origin.y = v155;
  v179.origin.x = v156;
  v179.size.height = v153;
  v179.size.width = v154;
  v123 = CGRectEqualToRect(v176, v179);
  v124 = (double)(int)(v175 * llroundf((float)(int)v173 / v56));
  v125 = llroundf((float)(int)v174 / (float)(int)v172);
  if (v123)
  {
    v120 = (double)((int)v172 * v125);
    v122 = v124;
  }
  v126 = (int)v122;
  v127 = (int)v120;
  v128 = objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D07FC8]);
  v129 = v103;
  v130 = v102;
  if ((v128 & 1) == 0)
  {
    v131 = objc_msgSend(a1, "isEqual:", *MEMORY[0x1E0D08000]);
    v129 = v103;
    v130 = v102;
    if ((v131 & 1) == 0)
    {
      if (v171 <= 1.0)
      {
        v129 = v103;
        v130 = v102;
        if (v171 < 1.0)
        {
          v130 = (int)(float)(v171 * (float)(int)v102);
          v129 = v103;
        }
      }
      else
      {
        v129 = (int)(float)((float)(int)v103 / v171);
        v130 = v102;
      }
    }
  }
  v132 = (float)v129 / (float)v130;
  if (vabds_f32((float)(int)v126 / (float)(int)v127, v132) > 0.0005)
  {
    RectWithAspectRatioInsideDimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions(v126 | (v127 << 32), 1, v132);
    v135 = v134;
    v136 = (float)(uint64_t)(llroundf(v135 / v56) * v175);
    v138 = v137;
    v139 = (float)(uint64_t)(llroundf(v138 / (float)(int)v172) * v172);
    v140 = (v134 - v136) * 0.5;
    *(float *)&v137 = (v137 - v139) * 0.5;
    v70 = v70 + RectWithAspectRatioInsideDimensions + (float)(uint64_t)(2 * llroundf(v140 * 0.5));
    v121 = v164 + v141 + (float)(uint64_t)(2 * llroundf(*(float *)&v137 * 0.5));
    v122 = (double)(int)v103;
    v120 = (double)(int)v102;
    if (v136 < (double)(int)v103 || v139 < v120)
    {
      v143 = (v122 - v136) * 0.5;
      v144 = 2 * llroundf(v143 * 0.5);
      if (v70 - (float)v144 >= 0.0)
        v70 = v70 - (float)v144;
      else
        v70 = 0.0;
      v145 = (v120 - v139) * 0.5;
      v146 = 2 * llroundf(v145 * 0.5);
      if (v121 - (float)v146 >= 0.0)
        v121 = v121 - (float)v146;
      else
        v121 = 0.0;
    }
    else
    {
      v120 = v139;
      v122 = v136;
    }
  }
  if (v159)
  {
    if ((_DWORD)v159)
    {
      v147 = v70;
      v70 = (double)(int)FigCaptureRoundFloatToMultipleOf(v159, v147);
      if (v122 + v70 > (double)(int)v173)
        v70 = v70 - (double)(int)v159;
    }
    if (HIDWORD(v159))
    {
      v148 = v121;
      v121 = (double)(int)FigCaptureRoundFloatToMultipleOf(SHIDWORD(v159), v148);
      if (v120 + v121 > (double)(int)v174)
        v121 = v121 - (double)SHIDWORD(v159);
    }
  }
  if (a15)
  {
    v177.origin.x = v70;
    v177.origin.y = v121;
    v177.size.width = v122;
    v177.size.height = v120;
    if (!CGRectIsEmpty(v177))
    {
      v178.origin.x = v70;
      v178.origin.y = v121;
      v178.size.width = v122;
      v178.size.height = v120;
      *a15 = CGRectCreateDictionaryRepresentation(v178);
    }
  }
  if (a16)
  {
    *a16 = v103;
    a16[1] = v102;
  }
}

BOOL FigCaptureVideoDimensionsAreEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigMotionComputePrincipalPoint(const __CFDictionary *a1, int a2, int a3, int a4, int a5, int a6, float64x2_t *a7, float a8, float a9)
{
  double v16;
  double v17;
  uint64_t result;
  CGPoint v19;
  CGPoint point;
  void *value;
  float64x2_t v22;

  value = 0;
  v19 = (CGPoint)*MEMORY[0x1E0C9D538];
  point = v19;
  if (a1 && a7)
  {
    v16 = ((double)a2 + -1.0) * 0.5;
    v17 = ((double)a3 + -1.0) * 0.5;
    v22.f64[0] = v16;
    v22.f64[1] = v17;
    if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E0D06CE0], (const void **)&value)
      && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point)
      && FigMotionComputeSensorCroppedReferenceCenter(a1, (float64x2_t *)&v19))
    {
      v22.f64[0] = v16 + (point.x - v19.x) * a9 * (double)a4;
      v22.f64[1] = v17 + (point.y - v19.y) * a9 * (double)a5;
    }
    if (!a6 || (result = FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v22, a8, a9), !(_DWORD)result))
    {
      result = 0;
      *a7 = v22;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

BOOL FigMotionComputeSensorCroppedReferenceCenter(const __CFDictionary *a1, float64x2_t *a2)
{
  int SensorValidCropRect;
  float64x2_t v9;
  float64x2_t v12;
  float64x2_t v13;

  v12 = *(float64x2_t *)MEMORY[0x1E0C9D648];
  v13 = *(float64x2_t *)(MEMORY[0x1E0C9D648] + 16);
  SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
  if (!SensorValidCropRect)
  {
    __asm { FMOV            V2.2D, #-1.0 }
    v9 = vaddq_f64(v13, _Q2);
    __asm { FMOV            V2.2D, #0.5 }
    *a2 = vmlaq_f64(v12, _Q2, v9);
  }
  return SensorValidCropRect == 0;
}

uint64_t FigMotionComputeLensPositionScalingFactor(const __CFDictionary *a1, int a2, uint64_t a3, int a4, uint64_t a5, float *a6)
{
  uint64_t SensorValidCropRect;
  float v12;
  uint64_t v13;
  __int128 v15;

  if (a1 && a6)
  {
    v15 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
    if ((_DWORD)SensorValidCropRect)
    {
      v13 = SensorValidCropRect;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D06F48]))
      {
        FigCFDictionaryGetCGRectIfPresent();
        if (*((double *)&v15 + 1) > 0.0 && *(double *)&v15 > 0.0)
          a2 = (int)*(double *)&v15;
      }
      v12 = *(double *)&v15;
      if (v12 <= 0.0 || a4 <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      else
      {
        v13 = 0;
        *a6 = (float)a2 / (float)((float)a4 * v12);
      }
    }
    return v13;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionGetSensorValidCropRect(const __CFDictionary *a1)
{
  if ((CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D06DF0])
     || CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D06F30])
     || CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D06D30]))
    && FigCFDictionaryGetCGRectIfPresent())
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptureSessionRemotePrewarmWithOptions(CFTypeRef cf, const __CFDictionary *a2)
{
  NSObject *global_queue;
  _QWORD v6[6];

  if (sCaptureSessionRemoteClient)
  {
    captureSessionRemote_prewarm((uint64_t)cf, a2);
  }
  else
  {
    if (cf)
      CFRetain(cf);
    if (a2)
      CFRetain(a2);
    global_queue = dispatch_get_global_queue(2, 0);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionRemotePrewarmWithOptions_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = cf;
    v6[5] = a2;
    dispatch_async(global_queue, v6);
  }
  return 0;
}

uint64_t captureSessionRemote_prewarm(uint64_t a1, const __CFDictionary *a2)
{
  const void *Value;
  CFTypeID v5;
  id v6;

  if (csr_ensureClientEstablished() || FigXPCCreateBasicMessage())
    goto LABEL_16;
  FigCFDictionaryGetInt64IfPresent();
  xpc_dictionary_set_int64(0, (const char *)*MEMORY[0x1E0CA36B0], 0);
  if (FigCFDictionaryGetInt64IfPresent())
    xpc_dictionary_set_int64(0, (const char *)*MEMORY[0x1E0CA36D8], 0);
  Value = CFDictionaryGetValue(a2, CFSTR("PrewarmKey_Reason"));
  if (Value)
  {
    v5 = CFGetTypeID(Value);
    if (v5 == CFStringGetTypeID())
      FigXPCMessageSetCFString();
  }
  if (a1 && FigXPCMessageSetCFString() || FigXPCRemoteClientSendAsyncMessage())
  {
LABEL_16:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
    v6 = (id)sPrewarmedBundleIdentifiers;
    if (!sPrewarmedBundleIdentifiers)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      sPrewarmedBundleIdentifiers = (uint64_t)v6;
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  }
  return FigXPCRelease();
}

uint64_t __captureSourceRemote_copyClock_block_invoke(uint64_t a1, int64_t a2, uint64_t a3, _DWORD *a4, int64_t *a5, int64_t *a6)
{
  uint64_t v11;
  int64_t int64;
  int64_t v13;
  int v14;
  uint64_t v15;
  xpc_object_t xdict;

  xdict = 0;
  v11 = captureSourceRemote_createBasicMessage(*(_QWORD *)(a1 + 40), 1667460203, &xdict);
  if ((_DWORD)v11
    || (xpc_dictionary_set_mach_send(),
        xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteCopyClockMessagePayload_ClientClockToken, a2), v11 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v11))
  {
    v15 = v11;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    int64 = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockObjectToken);
    v13 = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockTimeoutToken);
    v14 = xpc_dictionary_copy_mach_send();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = xpc_dictionary_get_int64(0, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockType);
    if (int64)
      v15 = 0;
    else
      v15 = 1315914603;
    *a4 = v14;
    *a5 = int64;
    *a6 = v13;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t captureSourceRemote_UpdateCameraHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t xdict;

  xdict = 0;
  *a8 = 0;
  v13 = csr_ensureClientEstablished_0();
  if ((_DWORD)v13)
  {
    v15 = v13;
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    goto LABEL_9;
  }
  v14 = captureSourceRemote_createBasicMessage(a1, 1969449075, &xdict);
  if ((_DWORD)v14
    || (v14 = FigXPCMessageSetCFString(), (_DWORD)v14)
    || a4 && (v14 = FigXPCMessageSetCFDictionary(), (_DWORD)v14)
    || (objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5), v14 = FigXPCMessageSetCFNumber(), (_DWORD)v14)
    || (xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_UpdateCameraHistoryDownplayOverrideList, a6 != 0), xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_CameraCanBeInOverrideList, a7 != 0), v14 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v14))
  {
    v15 = v14;
    fig_log_get_emitter();
    goto LABEL_12;
  }
  v15 = 0xFFFFFFFFLL;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t captureSourceRemote_ProprietaryDefaultsDomainForAuditToken(uint64_t a1, const UInt8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFDataRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  v4 = csr_ensureClientEstablished_0();
  if ((_DWORD)v4)
  {
    v8 = v4;
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_11:
    FigXPCRelease();
    goto LABEL_8;
  }
  v5 = captureSourceRemote_createBasicMessage(a1, 1885626740, &v10);
  if ((_DWORD)v5)
  {
    v8 = v5;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_11;
  }
  v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 32, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = FigXPCMessageSetCFData();
  if ((_DWORD)v7 || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
  {
    v8 = v7;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v8 = 0xFFFFFFFFLL;
  }
  FigXPCRelease();
  if (v6)
    CFRelease(v6);
LABEL_8:
  FigXPCRelease();
  return v8;
}

uint64_t captureSourceRemote_CameraHistoryDownplayOverrideList(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v2 = csr_ensureClientEstablished_0();
  if ((_DWORD)v2)
  {
    v4 = v2;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v3 = captureSourceRemote_createBasicMessage(a1, 1667785839, &v6);
  if ((_DWORD)v3 || (v3 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v3))
  {
    v4 = v3;
    fig_log_get_emitter();
    goto LABEL_8;
  }
  v4 = 0xFFFFFFFFLL;
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

__CFArray *FigCaptureSourceRemoteCopyCaptureSources(unsigned int a1)
{
  xpc_object_t v2;
  const __CFAllocator *v3;
  size_t count;
  __CFArray *Mutable;
  size_t v6;
  xpc_object_t v7;
  void *value;
  xpc_object_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E0CA36B0], a1),
        FigXPCRemoteClientSendSyncMessageCreatingReply()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    Mutable = 0;
  }
  else
  {
    v2 = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E0CA36C8]);
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    count = xpc_array_get_count(v2);
    Mutable = CFArrayCreateMutable(v3, count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (xpc_array_get_count(v2))
      {
        v6 = 0;
        while (1)
        {
          v7 = xpc_array_get_value(v2, v6);
          value = 0;
          if (captureSourceRemote_createInternal(v7, &value))
            break;
          CFArrayAppendValue(Mutable, value);
          if (value)
            CFRelease(value);
          if (xpc_array_get_count(v2) <= ++v6)
            goto LABEL_11;
        }
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return Mutable;
}

uint64_t FigCaptureSourceGetClassID()
{
  if (FigCaptureSourceGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureSourceGetClassID_onceToken, &__block_literal_global_86);
  return FigCaptureSourceGetClassID_sFigCaptureSourceClassID;
}

uint64_t csr_ensureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __csr_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E491EC40;
  block[4] = &v3;
  if (csr_ensureClientEstablished_onceToken != -1)
    dispatch_once(&csr_ensureClientEstablished_onceToken, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t csr_ensureClientEstablished_0()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __csr_ensureClientEstablished_block_invoke_0;
  block[3] = &unk_1E491EC40;
  block[4] = &v3;
  if (csr_ensureClientEstablished_onceToken_0 != -1)
    dispatch_once(&csr_ensureClientEstablished_onceToken_0, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t captureSourceRemote_SetProprietaryDefault(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = captureSourceRemote_createBasicMessage(a1, 1937010788, &v4);
  if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1) || (v1 = FigXPCMessageSetCFObject(), (_DWORD)v1))
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_RegisterNotificationForProprietaryDefaultChanges(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = captureSourceRemote_createBasicMessage(a1, 1919840356, &v4);
  if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1))
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (*(int *)(CMBaseObjectGetDerivedStorage() + 48) < 1)
  {
    v3 = 4294950844;
    goto LABEL_4;
  }
  ObjectID = captureSourceRemote_getObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v3 = FigXPCSendStdSetPropertyMessage();
  if ((_DWORD)v3)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t captureSourceRemote_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v13;
  const __CFAllocator *v14;
  CFNumberType v15;
  const void **v16;
  const void *v17;
  uint64_t *v18;
  uint64_t v19;
  int v21;
  const void *HostTimeClock;
  uint64_t BasicMessage;
  CFTypeRef v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  const void *v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
  {
    fig_log_get_emitter();
LABEL_55:
    FigDebugAssert3();
LABEL_20:
    v10 = 0;
    goto LABEL_10;
  }
  v8 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("Clock")))
  {
    if (CFEqual(a2, CFSTR("AttributesDictionary")))
    {
      CFRetain(*(CFTypeRef *)(v8 + 32));
      v10 = 0;
      v11 = *(_QWORD *)(v8 + 32);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("Formats")))
    {
      CFRetain(*(CFTypeRef *)(v8 + 40));
      v10 = 0;
      v11 = *(_QWORD *)(v8 + 40);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("SourceToken")))
    {
      v13 = (const void *)(v8 + 24);
      if (!*(_QWORD *)(v8 + 24))
        goto LABEL_28;
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v15 = kCFNumberSInt64Type;
    }
    else
    {
      if (CFEqual(a2, CFSTR("LockedForConfiguration")))
      {
        if (*(int *)(v8 + 48) <= 0)
          v16 = (const void **)MEMORY[0x1E0C9AE40];
        else
          v16 = (const void **)MEMORY[0x1E0C9AE50];
        v17 = *v16;
        *a4 = *v16;
        CFRetain(v17);
        goto LABEL_20;
      }
      if (!CFEqual(a2, CFSTR("LockedForConfigurationCount")))
      {
        if (CFEqual(a2, CFSTR("ServerConnectionDied")))
        {
          v10 = 0;
          if (*(_BYTE *)(v8 + 9))
            v18 = (uint64_t *)MEMORY[0x1E0C9AE50];
          else
            v18 = (uint64_t *)MEMORY[0x1E0C9AE40];
          v11 = *v18;
          goto LABEL_9;
        }
        goto LABEL_28;
      }
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13 = (const void *)(v8 + 48);
      v15 = kCFNumberSInt32Type;
    }
    v10 = 0;
    *a4 = CFNumberCreate(v14, v15, v13);
    goto LABEL_10;
  }
  v9 = *(const void **)(v8 + 16);
  if (v9)
  {
    CFRetain(v9);
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 16);
LABEL_9:
    *a4 = v11;
    goto LABEL_10;
  }
LABEL_28:
  if (!CFEqual(a2, CFSTR("Clock")))
  {
    v25[0] = 0;
    BasicMessage = captureSourceRemote_createBasicMessage(a1, 778268793, v25);
    if ((_DWORD)BasicMessage
      || (BasicMessage = FigXPCMessageSetCFString(), (_DWORD)BasicMessage)
      || (BasicMessage = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)BasicMessage))
    {
      v10 = BasicMessage;
      fig_log_get_emitter();
      FigDebugAssert3();
      FigXPCRelease();
      fig_log_get_emitter();
      goto LABEL_57;
    }
    FigXPCRelease();
    fig_log_get_emitter();
    goto LABEL_55;
  }
  if (*(_DWORD *)(v8 + 52) == 2 && (FigCaptureAudiomxdSupportEnabled() & 1) != 0)
  {
    v10 = 4294954509;
    goto LABEL_10;
  }
  v30 = 0;
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = __captureSourceRemote_copyClock_block_invoke;
  v25[3] = &unk_1E491F860;
  v25[4] = &v26;
  v25[5] = a1;
  v19 = FigAudioDeviceClockRemoteCreateForServerObject();
  v10 = v19;
  if ((_DWORD)v19 == 1315914603 || (_DWORD)v19 == 0)
  {
    v21 = *((_DWORD *)v27 + 6);
    if (v21)
    {
      if (v21 == 1)
      {
        if (v30)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        HostTimeClock = CMClockGetHostTimeClock();
        if (HostTimeClock)
          HostTimeClock = CFRetain(HostTimeClock);
        v30 = HostTimeClock;
      }
    }
    else if (v30)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v10 = 0;
    *(_QWORD *)(v8 + 16) = v30;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  _Block_object_dispose(&v26, 8);
  v24 = *(CFTypeRef *)(v8 + 16);
  if (v24)
    v24 = CFRetain(v24);
  *a4 = v24;
  if ((_DWORD)v10)
  {
    fig_log_get_emitter();
LABEL_57:
    FigDebugAssert3();
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

void sub_1A2CE1D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSourceRemote_CopyProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  v3 = captureSourceRemote_createBasicMessage(a1, 1668313188, &v6);
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageSetCFString();
    if (!(_DWORD)v3)
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
      {
        fig_log_get_emitter();
LABEL_9:
        FigDebugAssert3();
        v5 = 0;
        goto LABEL_6;
      }
    }
  }
  v5 = v3;
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t captureSourceRemote_createBasicMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  ObjectID = captureSourceRemote_getObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a3 = v8;
  return v5;
}

uint64_t captureSourceRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_QWORD *)DerivedStorage;
    return 0;
  }
}

uint64_t fvcs_ambientViewingEnvironment(int a1)
{
  _BYTE v2[4];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2[0] = (10000 * a1) >> 24;
  v2[1] = (10000 * a1) >> 16;
  v2[2] = (unsigned __int16)(10000 * a1) >> 8;
  v2[3] = 16 * a1;
  v3 = 1111495485;
  return objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v2, 8);
}

uint64_t FigMotionGetGravityFactor(const __CFDictionary *a1, CFDictionaryRef theDict, _DWORD *a3)
{
  const __CFArray *Value;
  const __CFArray *v6;
  CFTypeID v7;
  uint64_t FocalLengthParametersFromArrayUsingModuleInfo;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  if (!theDict)
    goto LABEL_7;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FocalLengthCharacterization"));
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 == CFArrayGetTypeID())
    {
      FocalLengthParametersFromArrayUsingModuleInfo = GetFocalLengthParametersFromArrayUsingModuleInfo(a1, v6, (uint64_t)&v11);
      if ((_DWORD)FocalLengthParametersFromArrayUsingModuleInfo
        || !(_BYTE)v12
        && (FocalLengthParametersFromArrayUsingModuleInfo = GetFocalLengthParametersFromArrayUsingModuleInfo(0, v6, (uint64_t)&v11), (_DWORD)FocalLengthParametersFromArrayUsingModuleInfo))
      {
        v9 = FocalLengthParametersFromArrayUsingModuleInfo;
        fig_log_get_emitter();
        FigDebugAssert3();
        return v9;
      }
LABEL_7:
      v9 = 0;
      *a3 = DWORD2(v13);
      return v9;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

double rqReceiverInit(_OWORD *a1)
{
  double result;

  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  result = NAN;
  *((_QWORD *)a1 + 4) = -1;
  return result;
}

uint64_t __cspc_filterOutUnsupportedConnections_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;

  v3 = (void *)objc_msgSend(a2, "sourceConfiguration");
  v4 = (void *)objc_msgSend(a2, "sinkConfiguration");
  v5 = objc_msgSend(v3, "sourceType");
  v6 = objc_msgSend(v4, "sinkType");
  result = 0;
  if (v5 <= 4 && ((1 << v5) & 0x16) != 0)
  {
    result = 0;
    if (v6 <= 0x10 && ((1 << v6) & 0x1BDFA) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (FigCaptureMetadataObjectConfigurationRequiresObjectDetection(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(a2) & 1) != 0
        || (FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(a2) & 1) != 0
        || (result = FigCaptureMetadataObjectConfigurationRequiresEyeReliefStatus(a2), (_DWORD)result))
      {
        objc_opt_class();
        return ((objc_opt_isKindOfClass() & 1) == 0
             || !FigCaptureMetadataObjectConfigurationRequiresFaceTracking(a2)
             || objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "sourceDeviceType") != 13)
            && ((objc_msgSend(a2, "enabled") & 1) != 0
             || (FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(v6) & 1) == 0);
      }
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresObjectDetection(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  if ((objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2558]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2560]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08540]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2548]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2550]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2568]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08550]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08530]) & 1) != 0
    || (objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08538]) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08548]);
  }
}

uint64_t FigCaptureConnectionWithSinkTypeRequiresGraphRebuildForEnabledChange(unsigned int a1)
{
  return (a1 > 0x10) | (0x463Du >> a1) & 1;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v9;
    v5 = *MEMORY[0x1E0D08590];
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * i);
        if ((objc_msgSend(v7, "hasPrefix:", CFSTR("mdta/com.apple.quicktime.detected-machine-readable-code.")) & 1) != 0
          || (objc_msgSend(v7, "isEqualToString:", v5) & 1) != 0)
        {
          return 1;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      result = 0;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresFaceTracking(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA4CC8]);
}

uint64_t captureSource_RegisterNotificationForProprietaryDefaultChanges(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  objc_msgSend(*(id *)(DerivedStorage + 232), "observeChangesForKey:", a2);
  return 0;
}

void iqsn_imageQueueReleaseCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *ReleasedImageInfo;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  ReleasedImageInfo = (__int128 *)CAImageQueueGetReleasedImageInfo();
  if (ReleasedImageInfo)
  {
    v5 = *ReleasedImageInfo;
    v6 = ReleasedImageInfo[1];
    v7 = ReleasedImageInfo[2];
    *(_OWORD *)(a3 + 104) = ReleasedImageInfo[3];
    *(_OWORD *)(a3 + 88) = v7;
    *(_OWORD *)(a3 + 72) = v6;
    *(_OWORD *)(a3 + 56) = v5;
  }
  iqsn_releaseBufferContext((_QWORD *)a3);
}

void __captureSource_setPropertyInternal_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  uint64_t *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  *(_BYTE *)(v2 + 230) = 0;
  if (*(int *)(v2 + 200) <= 0)
    v3 = (uint64_t *)MEMORY[0x1E0C9AE40];
  else
    v3 = (uint64_t *)MEMORY[0x1E0C9AE50];
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v1, CFSTR("AdjustingFocus"), *v3, 0, 0);
}

void captureSource_handleDeviceNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  int v8;
  uint64_t v9;
  __CFString **v10;
  int v11;
  __CFString *v12;
  const void *v13;
  char v14;
  uint64_t DerivedStorage;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFString **v22;
  __CFString **v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  __CFString **v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD v48[6];
  _QWORD v49[7];
  int v50;
  const __CFString *v51;
  uint64_t v52;
  const __CFString *v53;
  uint64_t v54;
  const __CFString *v55;
  uint64_t v56;
  const __CFString *v57;
  uint64_t v58;
  _QWORD v59[2];
  _QWORD v60[2];
  const __CFString *v61;
  const __CFString **v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v50 = 0;
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957478))
  {
    v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338), "BOOLValue");
    v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v8 ^ 1u);
    v10 = kFigCaptureSourceProperty_AdjustingWhiteBalance;
LABEL_5:
    v12 = *v10;
    v13 = a2;
    v14 = 0;
LABEL_6:
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v13, v12, v9, v14, 0);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957438))
  {
    v11 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338), "BOOLValue");
    v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v11 ^ 1u);
    v10 = kFigCaptureSourceProperty_AdjustingExposure;
    goto LABEL_5;
  }
  if ((objc_msgSend(a3, "isEqualToString:", 0x1E4941CF8) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", 0x1E4941C98) & 1) != 0
    || (objc_msgSend(a3, "isEqualToString:", 0x1E4941CB8) & 1) != 0
    || objc_msgSend(a3, "isEqualToString:", 0x1E4941CD8))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (objc_msgSend(a3, "isEqualToString:", 0x1E4941CF8))
    {
      captureSource_postNotificationWithPayload(a2, CFSTR("SubjectAreaChanged"), 0);
      return;
    }
    if ((objc_msgSend(a3, "isEqualToString:", 0x1E4941C98) & 1) != 0)
    {
      v16 = FigAtomicAdd32();
      if (!v16)
      {
        FigDebugAssert3();
        FigSignalErrorAt();
        return;
      }
      if (v16 != 1 || *(_BYTE *)(DerivedStorage + 230))
        goto LABEL_24;
      v17 = (uint64_t *)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if ((objc_msgSend(a3, "isEqualToString:", 0x1E4941CB8) & 1) == 0
        && (objc_msgSend(a3, "isEqualToString:", 0x1E4941CD8) & 1) == 0)
      {
        return;
      }
      if (FigAtomicAdd32() || *(_BYTE *)(DerivedStorage + 230))
        goto LABEL_24;
      v17 = (uint64_t *)MEMORY[0x1E0C9AE40];
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("AdjustingFocus"), *v17, 0, 0);
LABEL_24:
    if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("isFaceRect")), "BOOLValue"))
    {
      v18 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("FocusRectDict"));
      v19 = objc_msgSend(a5, "valueForKeyPath:", CFSTR("faceData.AngleInfoRoll"));
      if (v18)
      {
        if (v19)
        {
          v61 = CFSTR("FaceRect");
          v62 = (const __CFString **)CFSTR("FaceAngle");
          v67 = v18;
          v68 = (_QWORD *)v19;
          captureSource_postNotificationWithPayload(a2, CFSTR("FaceDrivenImageProcessingFaceChanged"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v67, &v61, 2));
        }
      }
    }
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4953158))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_Option25Changed;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4953178))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_Option25Changed2;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957598))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_FocusLensPosition;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957458))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_ImageControlMode;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954178))
  {
    captureSource_postNotificationWithPayload(a2, CFSTR("StillImageSceneChanged"), a5);
    v67 = 0;
    v68 = &v67;
    v69 = 0x3052000000;
    v70 = __Block_byref_object_copy__39;
    v71 = __Block_byref_object_dispose__39;
    v72 = 0;
    v61 = 0;
    v62 = &v61;
    v63 = 0x3052000000;
    v64 = __Block_byref_object_copy__39;
    v65 = __Block_byref_object_dispose__39;
    v66 = 0;
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = __captureSource_handleDeviceNotification_block_invoke;
    v49[3] = &unk_1E4927F40;
    v49[4] = a5;
    v49[5] = &v67;
    v49[6] = &v61;
    if (captureSource_safelyAccessStorage((uint64_t)a2, (uint64_t)v49))
    {
      FigDebugAssert3();
    }
    else
    {
      v20 = v68[5];
      if (v20)
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("FlashActive"), v20, 1, 0);
      v21 = (uint64_t)v62[5];
      if (v21)
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("IsStillImageStabilizationScene"), v21, 1, 0);
    }
LABEL_44:
    _Block_object_dispose(&v61, 8);
LABEL_45:
    _Block_object_dispose(&v67, 8);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954118))
  {
    captureSource_updateCachedZoomFactorPropertyAndNotify(a2, a5);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49575B8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_ExposureDuration;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49575D8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_ISO;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49575F8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v22 = kFigCaptureSourceProperty_ExposureTargetBias;
LABEL_54:
    v12 = *v22;
    v13 = a2;
    v14 = 1;
    goto LABEL_6;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957618))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_ExposureTargetOffset;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49573F8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v22 = kFigCaptureSourceProperty_ActiveMaxExposureDuration;
    goto LABEL_54;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957638))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_DeviceWhiteBalanceGains;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957658))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_GrayWorldDeviceWhiteBalanceGains;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49578B8))
  {
    v23 = kFigCaptureSourceProperty_SceneClassificationActive;
LABEL_65:
    captureSource_postNotificationWithPayload(a2, *v23, a5);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49578D8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_SceneClassificationConfidences;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954038))
  {
    v24 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v25 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954358);
    v26 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v24, CFSTR("NewPropertyValue"), v25, CFSTR("ManualControlRequestID"), 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, objc_msgSend(v25, "intValue"), a5, a3);
    v27 = kFigCaptureSourceNotification_ManualFocusComplete;
LABEL_77:
    captureSource_postNotificationWithPayload(a2, *v27, v26);
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954058))
  {
    v28 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v29 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954358);
    v26 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v28, CFSTR("NewPropertyValue"), v29, CFSTR("ManualControlRequestID"), 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, objc_msgSend(v29, "intValue"), a5, a3);
    v27 = kFigCaptureSourceNotification_ManualExposureComplete;
    goto LABEL_77;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954078))
  {
    v30 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v31 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954358);
    v26 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v30, CFSTR("NewPropertyValue"), v31, CFSTR("ManualControlRequestID"), 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, objc_msgSend(v31, "intValue"), a5, a3);
    v27 = kFigCaptureSourceNotification_BiasedExposureComplete;
    goto LABEL_77;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954098))
  {
    v32 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v33 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954358);
    v26 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v32, CFSTR("NewPropertyValue"), v33, CFSTR("ManualControlRequestID"), 0);
    captureSource_restoreCurrentValuesForManualControlProperties((uint64_t)a2, objc_msgSend(v33, "intValue"), a5, a3);
    v27 = kFigCaptureSourceNotification_ManualWhiteBalanceComplete;
    goto LABEL_77;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49534D8))
  {
    v34 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v67 = 0;
    v68 = &v67;
    v69 = 0x2020000000;
    LOBYTE(v70) = 0;
    v61 = 0;
    v62 = &v61;
    v63 = 0x2020000000;
    LOBYTE(v64) = 0;
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 3221225472;
    v48[2] = __captureSource_handleDeviceNotification_block_invoke_2;
    v48[3] = &unk_1E4927F68;
    v48[4] = &v67;
    v48[5] = &v61;
    if (captureSource_safelyAccessStorage((uint64_t)a2, (uint64_t)v48))
    {
      FigDebugAssert3();
    }
    else
    {
      if (*((_BYTE *)v68 + 24))
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("FlashOverheated"), v34, 0, 0);
      if (*((_BYTE *)v62 + 24))
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("TorchOverheated"), v34, 0, 0);
    }
    goto LABEL_44;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49534B8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v10 = kFigCaptureSourceProperty_TorchActive;
    goto LABEL_5;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49534F8))
  {
    v9 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v22 = kFigCaptureSourceProperty_TorchLevel;
    goto LABEL_54;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4954238))
  {
    v23 = kFigCaptureSourceNotification_ShallowDepthOfFieldStatusChanged;
    goto LABEL_65;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49577F8))
  {
    v59[0] = CFSTR("NewPropertyValue");
    v59[1] = CFSTR("MinAvailableVideoZoomFactor");
    v60[0] = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v60[1] = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4953AF8);
    captureSource_postNotificationWithPayload(a2, CFSTR("ActiveBravoCameraSelection"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 2));
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957818))
  {
    v35 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType((uint64_t)a2, objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338), &v50);
    if (!v50)
    {
      v36 = (const void *)v35;
      v67 = 0;
      v68 = &v67;
      v69 = 0x3052000000;
      v70 = __Block_byref_object_copy__39;
      v71 = __Block_byref_object_dispose__39;
      v72 = 0;
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3221225472;
      v47[2] = __captureSource_handleDeviceNotification_block_invoke_3;
      v47[3] = &unk_1E4927ED0;
      v47[4] = &v67;
      if (captureSource_safelyAccessStorage(v35, (uint64_t)v47))
      {
        FigDebugAssert3();
      }
      else
      {
        v37 = v68[5];
        if (v37)
        {
          v57 = CFSTR("NewPropertyValue");
          v58 = v37;
          captureSource_postNotificationWithPayload(a2, CFSTR("UnderlyingMasterSource"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1));
        }
        if (v36)
          CFRelease(v36);
      }
      goto LABEL_45;
    }
LABEL_118:
    FigDebugAssert3();
    return;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957838))
  {
    v38 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType((uint64_t)a2, objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338), &v50);
    if (!v50)
    {
      v39 = (const void *)v38;
      v67 = 0;
      v68 = &v67;
      v69 = 0x3052000000;
      v70 = __Block_byref_object_copy__39;
      v71 = __Block_byref_object_dispose__39;
      v72 = 0;
      v46[0] = MEMORY[0x1E0C809B0];
      v46[1] = 3221225472;
      v46[2] = __captureSource_handleDeviceNotification_block_invoke_4;
      v46[3] = &unk_1E4927ED0;
      v46[4] = &v67;
      captureSource_safelyAccessStorage(v38, (uint64_t)v46);
      v40 = v68[5];
      if (v40)
      {
        v55 = CFSTR("NewPropertyValue");
        v56 = v40;
        captureSource_postNotificationWithPayload(a2, CFSTR("PreferredPrimaryUnderlyingCaptureSource"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1));
      }
      if (v39)
        CFRelease(v39);
      goto LABEL_45;
    }
    goto LABEL_118;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E4957858))
  {
    v23 = kFigCaptureSourceNotification_FocusedAtMacro;
    goto LABEL_65;
  }
  if (objc_msgSend(a3, "isEqualToString:", 0x1E49574D8))
  {
    v41 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v42 = (void *)sSystemPressureMonitor;
    objc_msgSend(v41, "floatValue");
    objc_msgSend(v42, "updateWithPearlProjectorTemperature:");
  }
  else if (objc_msgSend(a3, "isEqualToString:", 0x1E4957498))
  {
    v43 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E49355B8);
    v44 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    v45 = (void *)sSystemPressureMonitor;
    objc_msgSend(v44, "floatValue");
    objc_msgSend(v45, "updateWithPortType:imageSensorTemperature:", v43);
  }
  else if (objc_msgSend(a3, "isEqualToString:", 0x1E4957998))
  {
    v53 = CFSTR("NewPropertyValue");
    v54 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    captureSource_postNotificationWithPayload(a2, CFSTR("SourceReactionsInProgressChanged"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1));
  }
  else if (objc_msgSend(a3, "isEqualToString:", 0x1E4954218))
  {
    v51 = CFSTR("NewPropertyValue");
    v52 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
    captureSource_postNotificationWithPayload(a2, CFSTR("StereoVideoCaptureStatusChanged"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1));
  }
}

void sub_1A2CE70E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(const void *a1, void *a2, uint64_t a3, char a4, int a5)
{
  uint64_t DerivedStorage;
  const void *v11;
  CFTypeRef v12;
  void *v13;
  void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
    FigSimpleMutexCheckIsLockedOnThisThread();
  else
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  v11 = (const void *)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", a2);
  if (v11)
    v12 = CFRetain(v11);
  else
    v12 = 0;
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", a3, a2);
  if ((a5 & 1) == 0)
    pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  if (a3 && v12)
  {
    if ((a4 & 1) != 0 || !FigCFEqual())
    {
      v13 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v12, CFSTR("OldPropertyValue"));
      objc_msgSend(v13, "setObject:forKeyedSubscript:", a3, CFSTR("NewPropertyValue"));
      captureSource_postNotificationWithPayload(a1, a2, v13);
    }
LABEL_17:
    CFRelease(v12);
    return;
  }
  if (objc_msgSend(a2, "isEqualToString:", CFSTR("SourceCMIOExtensionPropertyChanged")))
  {
    v12 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
    v14 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, CFSTR("OldPropertyValue"));
    objc_msgSend(v14, "setObject:forKeyedSubscript:", a3, CFSTR("NewPropertyValue"));
    captureSource_postNotificationWithPayload(a1, a2, v14);
  }
  if (v12)
    goto LABEL_17;
}

uint64_t captureSource_restoreCurrentValuesForManualControlProperties(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t DerivedStorage;
  const __CFString *v8;
  const __CFString *v9;
  float v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const __CFDictionary *v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v24;
  __int128 v25;
  CMTime time2;
  CMTime time1;
  CMTime v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  if (objc_msgSend(a4, "isEqualToString:", 0x1E4954038))
  {
    v8 = CFSTR("FocusOperation");
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("FocusOperation")), "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
    v9 = CFSTR("FocusPosition");
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("FocusOperation")), "objectForKeyedSubscript:", CFSTR("FocusPosition")), "floatValue");
    if (v10 != 3.4028e38)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
    v11 = CFSTR("FocusLensPositionCurrentValue");
LABEL_5:
    v12 = objc_msgSend(a3, "objectForKeyedSubscript:", v11);
    if (v12)
    {
      v13 = v12;
      v14 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", v8), "mutableCopy");
      v15 = v14;
      v16 = v13;
      goto LABEL_7;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
  }
  if (!objc_msgSend(a4, "isEqualToString:", 0x1E4954058))
  {
    if (objc_msgSend(a4, "isEqualToString:", 0x1E4954078))
    {
      v8 = CFSTR("ExposureTargetBiasOperation");
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureTargetBiasOperation")), "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v9 = CFSTR("Bias");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureTargetBiasOperation")), "objectForKeyedSubscript:", CFSTR("Bias")), "floatValue");
      if (v21 != 3.4028e38)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v11 = CFSTR("ExposureTargetBiasCurrentValue");
    }
    else
    {
      if (!objc_msgSend(a4, "isEqualToString:", 0x1E4954098))
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v8 = CFSTR("WhiteBalanceOperation");
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("WhiteBalanceOperation")), "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue") != a2)return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v28.timescale = 0;
      v28.value = 0;
      v9 = CFSTR("DeviceWhiteBalanceGains");
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("WhiteBalanceOperation")), "objectForKeyedSubscript:", CFSTR("DeviceWhiteBalanceGains")), "getBytes:length:", &v28, 12);
      if (v28.value || v28.timescale != 0)
        return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v11 = CFSTR("WhiteBalanceGainsCurrentValue");
    }
    goto LABEL_5;
  }
  v8 = CFSTR("ExposureOperation");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureOperation")), "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue") == a2)
  {
    v9 = CFSTR("ExposureDuration");
    v17 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureOperation")), "objectForKeyedSubscript:", CFSTR("ExposureDuration"));
    memset(&v28, 0, sizeof(v28));
    CMTimeMakeFromDictionary(&v28, v17);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureOperation")), "objectForKeyedSubscript:", CFSTR("ISO")), "floatValue");
    v19 = v18;
    time1 = v28;
    memset(&time2, 0, sizeof(time2));
    if (!CMTimeCompare(&time1, &time2) || v19 == 3.4028e38)
    {
      v15 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("ExposureOperation"), BWFigVideoCaptureDeviceExposureDurationCurrent), "mutableCopy");
      if (v19 == 3.4028e38)
      {
        v20 = objc_msgSend(a3, "objectForKeyedSubscript:", 0x1E4957238);
        if (v20)
          objc_msgSend(v15, "setObject:forKeyedSubscript:", v20, CFSTR("ISO"));
      }
      time1 = v28;
      *(_OWORD *)&time2.value = v25;
      time2.epoch = 0;
      if (CMTimeCompare(&time1, &time2))
        goto LABEL_16;
      v24 = objc_msgSend(a3, "objectForKeyedSubscript:", 0x1E4957258);
      if (!v24)
        goto LABEL_16;
      v16 = v24;
      v14 = v15;
LABEL_7:
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v16, v9);
LABEL_16:
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", v15, v8);

    }
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
}

void captureSource_postNotificationWithPayload(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (v7 = DerivedStorage, FigSimpleMutexCheckIsNotLockedOnThisThread(), a2))
  {
    CFRetain(a2);
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    v8 = *(NSObject **)(v7 + 56);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSource_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a2;
    block[5] = a1;
    block[6] = a3;
    dispatch_async(v8, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t BWCaptureDevicePositionAndDeviceTypeToPortType(int a1, int a2)
{
  uint64_t result;
  uint64_t v3;

  if (a1 == 2)
  {
    switch(a2)
    {
      case 2:
      case 15:
      case 16:
      case 17:
        v3 = MEMORY[0x1E0D05A38];
        return *(_QWORD *)v3;
      case 5:
        v3 = MEMORY[0x1E0D05A40];
        return *(_QWORD *)v3;
      case 7:
      case 11:
        goto LABEL_13;
      default:
        if ((a2 & 0xFFFFFFFE) == 0x12)
        {
LABEL_13:
          v3 = MEMORY[0x1E0D05A50];
          return *(_QWORD *)v3;
        }
        if (a2 == 20)
          result = *MEMORY[0x1E0D05A40];
        else
          result = 0;
        break;
    }
  }
  else if (a1 == 1)
  {
    result = 0;
    switch(a2)
    {
      case 2:
        v3 = MEMORY[0x1E0D05A18];
        return *(_QWORD *)v3;
      case 3:
        v3 = MEMORY[0x1E0D05A30];
        return *(_QWORD *)v3;
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
        return result;
      case 7:
        goto LABEL_9;
      case 10:
        v3 = MEMORY[0x1E0D05A20];
        return *(_QWORD *)v3;
      default:
        if (a2 != 14)
          return result;
LABEL_9:
        v3 = MEMORY[0x1E0D05A28];
        break;
    }
    return *(_QWORD *)v3;
  }
  else
  {
    return 0;
  }
  return result;
}

void *BWDetectedObjectsCreateFilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  const __CFString *v12;
  void *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  OSStatus SampleTimingInfoArray;
  const __CFAllocator *v21;
  id v22;
  int v23;
  BOOL v24;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v26;
  uint64_t v27;
  void *DeepCopy;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CMSampleTimingInfo timingArrayOut;
  CMAttachmentBearerRef target;
  _BYTE v41[128];
  uint64_t v42;
  CGRect v43;
  CGRect v44;

  v42 = *MEMORY[0x1E0C80C00];
  target = 0;
  v12 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  result = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (result)
  {
    v14 = result;
    v15 = *MEMORY[0x1E0D06998];
    v16 = objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
    v17 = *MEMORY[0x1E0D069A0];
    v18 = objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
    if (v16 | v18)
    {
      v19 = (void *)v18;
      memset(&timingArrayOut, 0, sizeof(timingArrayOut));
      SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray((CMSampleBufferRef)a1, 1, &timingArrayOut, 0);
      result = 0;
      if (!SampleTimingInfoArray)
      {
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &timingArrayOut, 0, 0, (CMSampleBufferRef *)&target);
        v22 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v23 = objc_msgSend(a2, "containsObject:", *MEMORY[0x1E0D064A0]);
        if (v16)
          v24 = v23 == 0;
        else
          v24 = 1;
        if (!v24)
          objc_msgSend(v22, "setObject:forKeyedSubscript:", v16, v15);
        v43.origin.x = a3;
        v43.origin.y = a4;
        v43.size.width = a5;
        v43.size.height = a6;
        if (!CGRectEqualToRect(v43, *MEMORY[0x1E0C9D648]))
        {
          v44.origin.x = a3;
          v44.origin.y = a4;
          v44.size.width = a5;
          v44.size.height = a6;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v44);
          if (DictionaryRepresentation)
          {
            objc_msgSend(v22, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D05E68]);
            objc_msgSend(v22, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D05E70]);
          }

        }
        v26 = *MEMORY[0x1E0D06EB8];
        v27 = objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]);
        if (v27)
          objc_msgSend(v22, "setObject:forKeyedSubscript:", v27, v26);
        if (v19)
        {
          v34 = v22;
          DeepCopy = (void *)CFPropertyListCreateDeepCopy(v21, v19, 1uLL);
          v35 = 0u;
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v29 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v36;
            do
            {
              for (i = 0; i != v30; ++i)
              {
                if (*(_QWORD *)v36 != v31)
                  objc_enumerationMutation(v19);
                v33 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
                if ((objc_msgSend(a2, "containsObject:", v33) & 1) == 0)
                  objc_msgSend(DeepCopy, "removeObjectForKey:", v33);
              }
              v30 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
            }
            while (v30);
          }
          v22 = v34;
          objc_msgSend(v34, "setObject:forKeyedSubscript:", DeepCopy, v17);

        }
        objc_msgSend(v22, "setObject:forKeyedSubscript:", objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A8]), *MEMORY[0x1E0D069A8]);
        CMSetAttachment(target, v12, v22, 1u);

        return (void *)target;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void BWDetectedObjectsConvertSampleBufferDetectedObjectsFromSensorToBufferCoordinateSpace(const void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  CGSize v6;
  int v7;
  int v8;
  BOOL v9;
  void *DetectedObjectsInfoForCropRect;
  CGAffineTransform v11;
  CGRect v12;
  CGRect v13;

  v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v1)
    goto LABEL_10;
  v2 = v1;
  v3 = *MEMORY[0x1E0D069A0];
  v4 = objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  if (!v4)
    return;
  v5 = (const void *)v4;
  v6 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v12.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  v12.size = v6;
  if (!FigCFDictionaryGetCGRectIfPresent()
    || ((v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue"),
         (v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue")) != 0)
      ? (v9 = v7 == 0)
      : (v9 = 1),
        v9))
  {
LABEL_10:
    fig_log_get_emitter();
    FigDebugAssert3();
    return;
  }
  CGAffineTransformMakeScale(&v11, 1.0 / (double)v7, 1.0 / (double)v8);
  v13 = CGRectApplyAffineTransform(v12, &v11);
  DetectedObjectsInfoForCropRect = FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(v5, v13.origin.x, v13.origin.y, v13.size.width);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", DetectedObjectsInfoForCropRect, v3);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D05A08]);

}

void BWDetectedFacesConvertSampleBufferFacesFromSensorToBufferCoordinateSpace(const void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  CGSize v6;
  int v7;
  int v8;
  double x;
  double y;
  double width;
  void *FacesArrayForCropRect;
  CGAffineTransform v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v1 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v1)
    goto LABEL_12;
  v2 = v1;
  v3 = *MEMORY[0x1E0D06998];
  v4 = (void *)objc_msgSend(v1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
  if (v4)
  {
    v5 = v4;
    v6 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    v15.origin = (CGPoint)*MEMORY[0x1E0C9D648];
    v15.size = v6;
    if (objc_msgSend(v4, "count"))
    {
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue");
        v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue");
        if (v8 && v7 != 0)
        {
          CGAffineTransformMakeScale(&v14, 1.0 / (double)v7, 1.0 / (double)v8);
          v16 = CGRectApplyAffineTransform(v15, &v14);
          x = v16.origin.x;
          y = v16.origin.y;
          width = v16.size.width;
          v17.origin.x = 0.0;
          v17.origin.y = 0.0;
          v17.size.width = 1.0;
          v17.size.height = 1.0;
          if (!CGRectEqualToRect(v16, v17))
          {
            FacesArrayForCropRect = FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(v5, x, y, width);
            objc_msgSend(v2, "setObject:forKeyedSubscript:", FacesArrayForCropRect, v3);
            objc_msgSend(v2, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D059E8]);

          }
          return;
        }
      }
LABEL_12:
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
}

__SecTask *FigCaptureClientIsAllowedToRunInBackground(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __SecTask *v5;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = FigCaptureClientHasEntitlementWithSecTask(v3, CFSTR("com.apple.private.avfoundation.background-camera-access"));
  CFRelease(v4);
  return v5;
}

__SecTask *FigCaptureClientIsSwiftPlaygroundsDevelopmentAppWithSecTask(__SecTask *result)
{
  if (result)
    return FigCaptureClientHasEntitlementWithSecTask(result, CFSTR("com.apple.developer.swift-playgrounds-app.development-build"));
  return result;
}

BOOL FigCaptureClientIsFacemetricsd(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  const __CFString *v5;
  const __CFString *v6;
  _BOOL8 v7;
  audit_token_t v9;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v9);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = SecTaskCopySigningIdentifier(v3, 0);
  if (v5)
  {
    v6 = v5;
    v7 = CFStringCompare(v5, CFSTR("com.apple.facemetricsd"), 0) == kCFCompareEqualTo;
    CFRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v4);
  return v7;
}

__SecTask *FigCaptureClientIsNonStandardWithSecTask(__SecTask *result)
{
  if (result)
    return FigCaptureClientHasEntitlementWithSecTask(result, CFSTR("com.apple.private.avfoundation.capture.nonstandard-client.allow"));
  return result;
}

void FigCaptureMetadataUtilitiesAddSampleBufferMetadataUsedByVideoEncoderToPixelBuffer(void *target)
{
  const __CFString *v2;
  const __CFDictionary *v3;
  CVImageBufferRef ImageBuffer;
  BOOL v5;
  CVImageBufferRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  const void **v15;
  uint64_t v16;
  const void *Value;
  CFDictionaryRef v18;
  _OWORD v19[6];
  uint64_t v20;
  void *keys[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[13];
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!target)
      return;
  }
  else
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
    if (!target)
      return;
  }
  v2 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v3 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
  if (v3)
    v5 = ImageBuffer == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = ImageBuffer;
    v7 = *MEMORY[0x1E0D06CD0];
    v29[0] = *MEMORY[0x1E0D06D98];
    v29[1] = v7;
    v8 = *MEMORY[0x1E0D06DE8];
    v30 = *MEMORY[0x1E0D06A20];
    v31 = v8;
    v32 = *MEMORY[0x1E0D06C40];
    v28[0] = v29[0];
    v28[1] = v7;
    v28[2] = v30;
    v28[3] = v8;
    v9 = *MEMORY[0x1E0D067E0];
    v28[4] = v32;
    v28[5] = v9;
    v10 = *MEMORY[0x1E0D06F78];
    v28[6] = *MEMORY[0x1E0D06F60];
    v28[7] = v10;
    v11 = *MEMORY[0x1E0D06EF0];
    v28[8] = *MEMORY[0x1E0D06F68];
    v28[9] = v11;
    v12 = *MEMORY[0x1E0D06DA0];
    v28[10] = *MEMORY[0x1E0D06EF8];
    v28[11] = v12;
    v28[12] = *MEMORY[0x1E0D06D00];
    v13 = FigCapturePlatformIdentifier();
    v14 = 0;
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    if (v13 >= 9)
      v15 = (const void **)v28;
    else
      v15 = (const void **)v29;
    v23 = 0uLL;
    v24 = 0uLL;
    if (v13 >= 9)
      v16 = 13;
    else
      v16 = 5;
    *(_OWORD *)keys = 0uLL;
    v22 = 0uLL;
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    do
    {
      Value = CFDictionaryGetValue(v3, *v15);
      if (Value)
      {
        keys[v14] = (void *)*v15;
        *((_QWORD *)v19 + v14++) = Value;
      }
      ++v15;
      --v16;
    }
    while (v16);
    if (v14 > 0)
    {
      v18 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)v19, v14, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CMSetAttachment(v6, v2, v18, 1u);
      CFRelease(v18);
    }
  }
}

const __CFString *BWStringFromCVPixelFormatType(signed int a1)
{
  const __CFString *result;

  if (a1 > 23)
  {
    switch(a1)
    {
      case ' ':
        result = CFSTR("32ARGB");
        break;
      case '!':
        result = CFSTR("1IndexedGray_WhiteIsZero");
        break;
      case '"':
        result = CFSTR("2IndexedGray_WhiteIsZero");
        break;
      case '#':
      case '%':
      case '&':
      case '\'':
        goto LABEL_10;
      case '$':
        result = CFSTR("4IndexedGray_WhiteIsZero");
        break;
      case '(':
        result = CFSTR("8IndexedGray_WhiteIsZero");
        break;
      default:
        if (a1 == 24)
          result = CFSTR("24RGB");
        else
LABEL_10:
          result = (const __CFString *)BWStringForOSType(a1);
        break;
    }
  }
  else
  {
    result = CFSTR("0x00000000");
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = CFSTR("1Monochrome");
        break;
      case 2:
        result = CFSTR("2Indexed");
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        goto LABEL_10;
      case 4:
        result = CFSTR("4Indexed");
        break;
      case 8:
        result = CFSTR("8Indexed");
        break;
      default:
        if (a1 != 16)
          goto LABEL_10;
        result = CFSTR("16BE555");
        break;
    }
  }
  return result;
}

uint64_t FigImageControl_Exposure_ConfigureDevice(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  float *CameraParametersForCaptureStream;
  unsigned int v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStream = (float *)af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  v6 = *(_DWORD *)(DerivedStorage + 7468);
  if (!v6)
    v6 = *(_DWORD *)(DerivedStorage + 7464);
  if (CameraParametersForCaptureStream[235] <= 0.0 || v6 > 1)
    return 0;
  result = setupMeteringFaceDetection(a1, a2, 0);
  if (!(_DWORD)result)
    *(_BYTE *)(DerivedStorage + 7456) = 1;
  return result;
}

uint64_t setupMeteringFaceDetection(uint64_t a1, void *a2, int a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  float *CameraParametersForCaptureStream;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int32x2_t v12;
  unsigned int v13;
  unsigned int v14;
  const __CFAllocator *v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  int32x4_t v19;
  _BYTE *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float v29;
  int32x4_t v30;
  __int128 v31;
  uint64_t v32;
  float v33;
  float32x4_t *v34;
  int8x16_t v35;
  int8x16_t v36;
  CFDictionaryRef v37;
  uint64_t v38;
  int v39;
  uint64_t i;
  int v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  int32x4_t v50;
  __int128 v51;
  __int128 v52;
  int32x2_t v53;
  float32x4_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int valuePtr;
  void *values[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  CFDataRef v73;
  void *keys[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[544];
  float v82;
  _OWORD bytes[16];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CameraParametersForCaptureStream = (float *)af_sbp_getCameraParametersForCaptureStream(a1, (uint64_t)a2);
  v80 = 0;
  v12.i32[1] = 0;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  *(_OWORD *)keys = 0u;
  v75 = 0u;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  *(_OWORD *)values = 0u;
  v68 = 0u;
  v65 = 512;
  valuePtr = 184;
  v63 = vcvts_n_s32_f32(CameraParametersForCaptureStream[228], 0xAuLL);
  v64 = 2048;
  v9 = vcvts_n_s32_f32(CameraParametersForCaptureStream[229], 0xAuLL);
  v61 = vcvts_n_s32_f32(CameraParametersForCaptureStream[232], 0xAuLL);
  v62 = v9;
  v10 = vcvts_n_s32_f32(CameraParametersForCaptureStream[233], 0xAuLL);
  v59 = vcvts_n_s32_f32(CameraParametersForCaptureStream[234], 0xAuLL);
  v60 = v10;
  v11 = vcvts_n_s32_f32(CameraParametersForCaptureStream[235], 0xAuLL);
  v12.i32[0] = (__int32)CameraParametersForCaptureStream[239];
  v57 = vcvts_n_s32_f32(CameraParametersForCaptureStream[236], 0xAuLL);
  v58 = v11;
  v13 = vcvts_n_s32_f32(CameraParametersForCaptureStream[237], 0xAuLL);
  v55 = vcvts_n_s32_f32(CameraParametersForCaptureStream[238], 0xAuLL);
  v56 = v13;
  if (*(_DWORD *)(DerivedStorage + 40) == 4)
  {
    v14 = vcvts_n_s32_f32(CameraParametersForCaptureStream[230], 0xAuLL);
    v60 = vcvts_n_s32_f32(CameraParametersForCaptureStream[231], 0xAuLL);
    v61 = v14;
  }
  if (!*(_BYTE *)(DerivedStorage + 7473))
    v62 = 0;
  if (*(float *)v12.i32 <= 0.0)
    *(float *)v12.i32 = 40.0;
  v53 = v12;
  keys[0] = *(void **)MEMORY[0x1E0D07170];
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  keys[1] = *(void **)MEMORY[0x1E0D071C8];
  values[1] = CFNumberCreate(v15, kCFNumberIntType, &v61);
  *(_QWORD *)&v75 = *MEMORY[0x1E0D071A8];
  *(_QWORD *)&v68 = CFNumberCreate(v15, kCFNumberIntType, &v60);
  *((_QWORD *)&v75 + 1) = *MEMORY[0x1E0D07220];
  *((_QWORD *)&v68 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v65);
  *(_QWORD *)&v76 = *MEMORY[0x1E0D07208];
  *(_QWORD *)&v69 = CFNumberCreate(v15, kCFNumberIntType, &v64);
  *((_QWORD *)&v76 + 1) = *MEMORY[0x1E0D07160];
  *((_QWORD *)&v69 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v56);
  *(_QWORD *)&v77 = *MEMORY[0x1E0D07130];
  *(_QWORD *)&v70 = CFNumberCreate(v15, kCFNumberIntType, &v55);
  *((_QWORD *)&v77 + 1) = *MEMORY[0x1E0D07168];
  *((_QWORD *)&v70 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v63);
  *(_QWORD *)&v78 = *MEMORY[0x1E0D071F8];
  *(_QWORD *)&v71 = CFNumberCreate(v15, kCFNumberIntType, &v62);
  *((_QWORD *)&v78 + 1) = *MEMORY[0x1E0D071D0];
  *((_QWORD *)&v71 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v59);
  *(_QWORD *)&v79 = *MEMORY[0x1E0D07138];
  *(_QWORD *)&v72 = CFNumberCreate(v15, kCFNumberIntType, &v58);
  *((_QWORD *)&v79 + 1) = *MEMORY[0x1E0D071B0];
  v16 = 0;
  *((_QWORD *)&v72 + 1) = CFNumberCreate(v15, kCFNumberIntType, &v57);
  v80 = *MEMORY[0x1E0D072C8];
  v17 = (float32x4_t)vdupq_lane_s32(v53, 0);
  v18 = 0.0;
  v19.i32[1] = 1;
  v45 = v17;
  v20 = v81;
  v21.i64[0] = 0x3F0000003F000000;
  v21.i64[1] = 0x3F0000003F000000;
  v22.i64[0] = 0xC1000000C1000000;
  v22.i64[1] = 0xC1000000C1000000;
  v23.i64[0] = 0xBF000000BF000000;
  v23.i64[1] = 0xBF000000BF000000;
  do
  {
    v24 = 0;
    *(float *)v19.i32 = (float)((float)((float)(int)v16 + 0.5) + -8.0) * (float)((float)((float)(int)v16 + 0.5) + -8.0);
    v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0);
    v19 = (int32x4_t)xmmword_1A3161E00;
    do
    {
      v50 = v19;
      v25 = vaddq_f32(vaddq_f32(vcvtq_f32_s32(v19), v21), v22);
      v54 = vdivq_f32(vmulq_f32(vmlaq_f32(v46, v25, v25), v23), v17);
      v49 = expf(v54.f32[1]);
      *(float *)&v26 = expf(v54.f32[0]);
      v48 = *(float *)&v26;
      v27 = v26;
      *((float *)&v27 + 1) = v49;
      v51 = v27;
      v47 = expf(v54.f32[2]);
      v28 = v51;
      *((float *)&v28 + 2) = v47;
      v52 = v28;
      v29 = expf(v54.f32[3]);
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      v23.i64[0] = 0xBF000000BF000000;
      v23.i64[1] = 0xBF000000BF000000;
      v22.i64[0] = 0xC1000000C1000000;
      v22.i64[1] = 0xC1000000C1000000;
      v17 = v45;
      v31 = v52;
      *((float *)&v31 + 3) = v29;
      *(_OWORD *)&v20[v24] = v31;
      v18 = (float)((float)((float)(v18 + v48) + v49) + v47) + v29;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      v19 = vaddq_s32(v50, v30);
      v24 += 16;
    }
    while (v24 != 64);
    ++v16;
    v20 += 64;
  }
  while (v16 != 16);
  v32 = 0;
  v33 = 16384.0 / v18;
  if (roundf((float)(16384.0 / v18) * v82) > 255.0)
    v33 = 255.0 / v82;
  do
  {
    v34 = (float32x4_t *)&v81[64 * v32];
    *(int16x4_t *)v35.i8 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(*v34, v33))));
    v35.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[1], v33))));
    *(int16x4_t *)v36.i8 = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[2], v33))));
    v36.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_n_f32(v34[3], v33))));
    bytes[v32++] = vuzp1q_s8(v35, v36);
  }
  while (v32 != 16);
  v73 = CFDataCreate(v15, (const UInt8 *)bytes, 256);
  v37 = CFDictionaryCreate(v15, (const void **)keys, (const void **)values, 13, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a3)
  {
    if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072E0], v37))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v38 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07310], (const void *)*MEMORY[0x1E0D07210]);
    if ((_DWORD)v38)
    {
LABEL_25:
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    v39 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E0D072E0], v37);
    if (v39)
    {
      v42 = v39;
      fig_log_get_emitter();
      v44 = v3;
      LODWORD(v43) = v42;
      FigDebugAssert3();
    }
    v38 = objc_msgSend(a2, "setProperty:value:", *MEMORY[0x1E0D07310], *MEMORY[0x1E0D07210], v43, v44);
    if ((_DWORD)v38)
      goto LABEL_25;
  }
  for (i = 0; i != 13; ++i)
    CFRelease(values[i]);
  CFRelease(v37);
  return v38;
}

_QWORD *af_sbp_getCameraParametersForCaptureStream(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[1] == a2)
    return DerivedStorage + 71;
  if (DerivedStorage[2] == a2)
    return DerivedStorage + 228;
  if (DerivedStorage[3] == a2)
    return DerivedStorage + 385;
  return 0;
}

const __CFDictionary *setPropertiesOnStream()
{
  uint64_t DerivedStorage;
  const __CFDictionary *result;
  const __CFDictionary *v2;
  unsigned int *v3;
  const void *v4;
  unsigned int *v5;
  unsigned int *v6;
  const void *Value;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  int v19;
  const __CFString *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  const __CFAllocator *allocator;
  CFTypeRef v31;
  CFTypeRef cf2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (const __CFDictionary *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 72));
  if (result)
  {
    v2 = result;
    v3 = (unsigned int *)(DerivedStorage + 6340);
    v4 = (const void *)*MEMORY[0x1E0D07430];
    cf2 = (CFTypeRef)*MEMORY[0x1E0D07338];
    v5 = (unsigned int *)(DerivedStorage + 7460);
    v31 = (CFTypeRef)*MEMORY[0x1E0D07358];
    v6 = (unsigned int *)(DerivedStorage + 7604);
    v29 = (CFTypeRef)*MEMORY[0x1E0D07700];
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v28 = (CFTypeRef)*MEMORY[0x1E0D07578];
    v27 = (CFTypeRef)*MEMORY[0x1E0D073A0];
    do
    {
      Value = CFDictionaryGetValue(v2, CFSTR("propertyKey"));
      v8 = CFDictionaryGetValue(v2, CFSTR("propertyValue"));
      v9 = CMBaseObjectGetDerivedStorage();
      v10 = objc_msgSend((id)objc_msgSend(*(id *)(v9 + 32), "supportedProperties"), "objectForKeyedSubscript:", Value);
      v11 = 32;
      if (!v10)
        v11 = 8;
      v12 = objc_msgSend(*(id *)(v9 + v11), "setProperty:value:", Value, v8, v27);
      if (!v12)
        goto LABEL_31;
      v13 = v12;
      if (CFEqual(Value, v4))
      {
        do
          v14 = __ldxr(v3);
        while (__stxr(v14 + 1, v3));
      }
      else if (CFEqual(Value, cf2))
      {
        do
          v15 = __ldxr(v5);
        while (__stxr(v15 + 1, v5));
      }
      else
      {
        if (!CFEqual(Value, v31))
        {
          if (!CFEqual(Value, CFSTR("AutoFocusNow")) && !CFEqual(Value, v29))
          {
            if (!CFEqual(Value, v28))
              CFEqual(Value, v27);
            goto LABEL_31;
          }
          Mutable = CFDictionaryCreateMutable(allocator, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v18 = Mutable;
          v19 = *(_DWORD *)(DerivedStorage + 84);
          if (v19 == 1)
          {
            v20 = CFSTR("FixedFocusPoints");
LABEL_21:
            CFDictionaryAddValue(Mutable, CFSTR("FocusMode"), v20);
          }
          else if (v19 == 5)
          {
            v20 = CFSTR("FocusAtPoint");
            goto LABEL_21;
          }
          v21 = *(_DWORD *)(DerivedStorage + 7656);
          v22 = __OFSUB__(v21, 1);
          v23 = v21 - 1;
          if (v23 < 0 == v22)
          {
            *(_DWORD *)(DerivedStorage + 7656) = v23;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          if (v18)
            CFRelease(v18);
          if (v13 == -12688)
          {
            memset_pattern16((void *)(DerivedStorage + 7704), &unk_1A32B12B0, 0x80uLL);
            v24 = 0;
            v25 = (_OWORD *)(DerivedStorage + 7832);
            *(_QWORD *)&v26 = 0x100000001;
            *((_QWORD *)&v26 + 1) = 0x100000001;
            do
            {
              *v25 = 0uLL;
              v25[1] = 0uLL;
              v25 += 2;
              *(_OWORD *)(DerivedStorage + 7960 + v24) = v26;
              v24 += 16;
            }
            while (v24 != 64);
            *(_QWORD *)(DerivedStorage + 6232) = 1;
            *(_QWORD *)(DerivedStorage + 6248) = 1;
          }
          *(_BYTE *)(DerivedStorage + 81) = 0;
          FigMemoryBarrier();
          goto LABEL_31;
        }
        do
          v16 = __ldxr(v6);
        while (__stxr(v16 + 1, v6));
      }
LABEL_31:
      CFRelease(v2);
      result = (const __CFDictionary *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(DerivedStorage + 72));
      v2 = result;
    }
    while (result);
  }
  return result;
}

void sub_1A2CEE1D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t mscsn_setStreamOutputBufferHandler(void *a1, uint64_t a2, void *a3, void *a4)
{
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = (void *)objc_msgSend(a3, "copy");
    v23 = v6;
    v24 = a2;
    v22 = *MEMORY[0x1E0D07FB8];
    v25[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    v7 = (void *)MEMORY[0x1E0C99D80];
    v8 = v25;
    v9 = &v24;
  }
  else
  {
    if (!a4)
    {
      v16 = a2;
      v12 = *MEMORY[0x1E0C9B0D0];
      v13 = *MEMORY[0x1E0D07FA0];
      v14[0] = *MEMORY[0x1E0D07FB8];
      v14[1] = v13;
      v15[0] = v12;
      v15[1] = v12;
      v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
      v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
      return objc_msgSend(a1, "setProperty:value:", *MEMORY[0x1E0D07898], v10);
    }
    v6 = (void *)objc_msgSend(a4, "copy");
    v19 = v6;
    v20 = a2;
    v18 = *MEMORY[0x1E0D07FA0];
    v21 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);
    v7 = (void *)MEMORY[0x1E0C99D80];
    v8 = &v21;
    v9 = &v20;
  }
  v10 = objc_msgSend(v7, "dictionaryWithObjects:forKeys:count:", v8, v9, 1);

  return objc_msgSend(a1, "setProperty:value:", *MEMORY[0x1E0D07898], v10);
}

uint64_t mscsn_setStreamOutputDictionaryHandler(void *a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = (void *)objc_msgSend(a3, "copy");
    v13 = v5;
    v14 = a2;
    v12 = *MEMORY[0x1E0D07FA8];
    v15[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);

  }
  else
  {
    v10 = a2;
    v8 = *MEMORY[0x1E0D07FA8];
    v9 = *MEMORY[0x1E0C9B0D0];
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  }
  return objc_msgSend(a1, "setProperty:value:", *MEMORY[0x1E0D07898], v6);
}

double rqSenderInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void flatDictionary_finalize(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(*(_QWORD *)(a1 + 24) + 16);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 - 1;
  }
  while (__stxr(v4, v2));
  if (!v4)
  {
    FigFlatDictionaryContentDestroy(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void FigFlatDictionaryContentDestroy(void *a1)
{
  const void *v2;
  const __CFAllocator *v3;

  v3 = *(const __CFAllocator **)a1;
  v2 = (const void *)*((_QWORD *)a1 + 1);
  if (v2)
    CFRelease(v2);
  CFAllocatorDeallocate(v3, *((void **)a1 + 3));
  CFAllocatorDeallocate(v3, a1);
}

void multiStreamCameraSourceNode_serviceQueue(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  uint64_t v7;
  __CVBuffer *v8;
  CMTimeEpoch v9;
  __CVBuffer *v10;
  CFTypeID v11;
  const __CFData *Value;
  CFTypeRef v13;
  int v14;
  const __CFString *v15;
  CFTypeRef v16;
  const __CFString *v17;
  CFTypeRef v18;
  const __CFString *v19;
  CFTypeRef v20;
  const __CFString *v21;
  CFTypeRef v22;
  const __CFString *v23;
  CFTypeRef v24;
  const __CFString *v25;
  CFTypeRef v26;
  const __CFString *v27;
  CFTypeRef v28;
  const __CFString *v29;
  CFTypeRef v30;
  const __CFString *v31;
  CFTypeRef v32;
  const __CFString *v33;
  CFTypeRef v34;
  const __CFString *v35;
  CFTypeRef v36;
  opaqueCMSampleBuffer *v37;
  uint64_t TypeID;
  uint64_t v39;
  CFTypeRef *v40;
  unsigned int v41;
  int v42;
  int *v43;
  int v44;
  void *v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  int v52;
  void *v53;
  CVImageBufferRef ImageBuffer;
  CVImageBufferRef v55;
  CFTypeID v56;
  const void *v57;
  int v58;
  const __CFString *v59;
  CFTypeRef v60;
  const __CFDictionary *v61;
  CFMutableDictionaryRef MutableCopy;
  CFTypeID v63;
  uint64_t v64;
  int v65;
  CVImageBufferRef v66;
  const __CFString *v67;
  const __CFDictionary *v68;
  CFMutableDictionaryRef v69;
  const __CFString *v70;
  CFTypeRef v71;
  int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  int v77;
  uint64_t v78;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v80;
  const char *v81;
  unsigned int v82;
  uint64_t v83;
  CMTimeValue v84;
  uint64_t v85;
  const __CFString *v86;
  void *v87;
  void *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  void *v97;
  uint64_t v98;
  _BYTE *v99;
  int v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t i;
  void *v107;
  _QWORD *v108;
  uint64_t v109;
  NSObject *v110;
  CFTypeID v111;
  uint64_t v112;
  int v113;
  CGFloat *v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t *v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __CVBuffer *v129;
  __int128 v130;
  double v131;
  double Width;
  double Height;
  CGFloat v134;
  CGFloat v135;
  double v136;
  CMTimeEpoch epoch;
  CMTimeValue v138;
  double v139;
  double v140;
  double v141;
  CMTimeValue v142;
  uint64_t v143;
  CFDictionaryRef DictionaryRepresentation;
  CGFloat v145;
  CGFloat v146;
  CGFloat v147;
  CGFloat v148;
  double v149;
  double v150;
  double v151;
  float v152;
  float v153;
  float v154;
  double v155;
  int v156;
  void *v157;
  int v158;
  void *FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet;
  uint64_t v160;
  double *v161;
  double v162;
  double v163;
  uint64_t v164;
  _QWORD *v165;
  int v166;
  int *v167;
  CFTypeRef v168;
  void *v169;
  void *v170;
  int v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  void *v179;
  void *v180;
  void *v181;
  uint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  __int128 v185;
  double FinalCropRect;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  NSObject *v193;
  unsigned int v194;
  unsigned int v195;
  const __CFString *v196;
  const __CFString *v197;
  double v198;
  double v199;
  double v200;
  double v201;
  const __CFString *v202;
  double ValidBufferRect;
  double v204;
  CGFloat v205;
  double v206;
  CGFloat v207;
  double v208;
  CGFloat v209;
  NSObject *v210;
  const __CFDictionary *v211;
  uint64_t v212;
  int v213;
  int v214;
  void *v215;
  void *v216;
  __CVBuffer *v217;
  OSType PixelFormatType;
  char v219;
  uint64_t v220;
  unsigned int v221;
  _BYTE *v222;
  CMTimeEpoch v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  const void *v227;
  float v228;
  float v229;
  float v230;
  _BOOL4 v231;
  const void *v232;
  void *v233;
  int v234;
  void *v235;
  void *v236;
  int v237;
  _BOOL4 v238;
  int *v239;
  int v240;
  int v241;
  void *v242;
  const __CFString *v243;
  void *v244;
  __CVBuffer *v245;
  uint64_t v246;
  uint64_t v247;
  CMAttachmentBearerRef v248;
  const void *v249;
  const void *v250;
  uint64_t v251;
  const __CFString *v252;
  CFTypeRef v253;
  __CVBuffer *v254;
  __CVBuffer *v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  const __CFString *v260;
  __CVBuffer *v261;
  __CVBuffer *v262;
  CFTypeRef v263;
  const __CFDictionary *v264;
  CFMutableDictionaryRef v265;
  uint64_t v266;
  uint64_t v267;
  const __CFString *v268;
  __CVBuffer *v269;
  __CVBuffer *v270;
  CFTypeRef v271;
  const __CFDictionary *v272;
  CFMutableDictionaryRef v273;
  __IOSurface *IOSurface;
  IOSurfaceID ID;
  uint64_t v276;
  int v277;
  NSObject *v278;
  unsigned int v279;
  const char *v280;
  unsigned int v281;
  uint64_t v282;
  CMTimeValue v283;
  uint64_t v284;
  CMSampleTimingInfo *p_buffer;
  CMTime *p_type;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  CFStringRef key;
  const __CFString *keya;
  void *v293;
  uint64_t v294;
  _BYTE *v295;
  int v296;
  uint64_t *v297;
  int v298;
  void *v299;
  __CVBuffer *pixelBuffer;
  int v301;
  void *v302;
  int v303;
  CMTimeEpoch v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  void *v309;
  void *v310;
  CMSampleBufferRef sbuf;
  _BOOL4 v312;
  int v313;
  CMSampleBufferRef time2[5];
  _QWORD block[5];
  CMAttachmentBearerRef target[2];
  __int128 v317;
  __int128 v318;
  __int128 v319;
  opaqueCMSampleBuffer *v320;
  unsigned int v321;
  CMTime type;
  const __CFString *v323;
  __int16 v324;
  const __CFString *v325;
  CMSampleTimingInfo buffer;
  CMTime v327[5];
  uint64_t v328;
  CFRange v329;
  CGRect v330;
  CGRect v331;
  CGRect v332;

  v3 = v2;
  v328 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1A858DD40]();
  type.value = 0;
  v7 = a1 + 384;
  v8 = (__CVBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 384 + 504 * a2 + 24));
  *(_OWORD *)&buffer.duration.value = *MEMORY[0x1E0CA2E18];
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  buffer.duration.epoch = v9;
  if (!v8)
    goto LABEL_445;
  v10 = v8;
  v304 = v9;
  v11 = CFGetTypeID(v8);
  if (v11 != CFDictionaryGetTypeID())
  {
    v13 = CVBufferCopyAttachment(v10, CFSTR("BWPTS"), 0);
    if (!v13)
      goto LABEL_8;
    Value = (const __CFData *)CFAutorelease(v13);
    if (!Value)
      goto LABEL_8;
    goto LABEL_7;
  }
  Value = (const __CFData *)CFDictionaryGetValue(v10, CFSTR("BWPTS"));
  if (Value)
  {
LABEL_7:
    v329.location = 0;
    v329.length = 24;
    CFDataGetBytes(Value, v329, (UInt8 *)&buffer);
  }
LABEL_8:
  if (v11 == CFDictionaryGetTypeID())
    CFDictionaryRemoveValue(v10, CFSTR("BWPTS"));
  else
    CVBufferRemoveAttachment(v10, CFSTR("BWPTS"));
  v313 = a2;
  if (v11 != CVPixelBufferGetTypeID())
  {
    TypeID = CVDataBufferGetTypeID();
    if (a2 == 7 && v11 == TypeID)
    {
      v39 = v7 + 504 * a2;
      v40 = (CFTypeRef *)(v39 + 48);
      v41 = objc_msgSend((id)objc_msgSend(*(id *)(v39 + 16), "formatRequirements"), "maxPoints");
      v327[0] = buffer.duration;
      v42 = BWSampleBufferCreateFromDataBufferWithNumberOfPoints(v10, (uint64_t)v327, 0x70636C64u, v40, (CMAttachmentBearerRef *)&type, v41);
      if (!v42)
      {
        v37 = (opaqueCMSampleBuffer *)type.value;
        goto LABEL_43;
      }
      v287 = v2;
      LODWORD(p_buffer) = v42;
LABEL_456:
      FigDebugAssert3();
      goto LABEL_82;
    }
    v51 = CVDataBufferGetTypeID();
    if (a2 == 10 && v11 == v51)
    {
      v327[0] = buffer.duration;
      v52 = BWSampleBufferCreateFromDataBuffer(v10, (__int128 *)&v327[0].value, 0x70636C64u, (CFTypeRef *)(v7 + 504 * a2 + 48), (CMAttachmentBearerRef *)&type);
      if (v52)
      {
        v287 = v2;
        LODWORD(p_buffer) = v52;
        goto LABEL_456;
      }
    }
    else
    {
      v56 = CFDictionaryGetTypeID();
      if (a2 != 11 || v11 != v56)
      {
        v63 = CFDictionaryGetTypeID();
        if (a2 == 12 && v11 == v63)
        {
          v64 = objc_msgSend((id)a1, "portType");
          v327[0] = buffer.duration;
          v65 = BWCreateSampleBufferWithDetectedObjectsInfo((uint64_t)v10, v327, v64, &type);
          if (!v65)
            goto LABEL_82;
          v287 = v2;
          LODWORD(p_buffer) = v65;
        }
        else
        {
          v111 = CFDictionaryGetTypeID();
          if (a2 != 13)
            goto LABEL_82;
          if (v11 != v111)
            goto LABEL_82;
          v112 = objc_msgSend((id)a1, "portType");
          v327[0] = buffer.duration;
          v113 = BWCreateSampleBufferWithEyeReliefResultDictionary(v10, v327, v112, &type);
          if (!v113)
            goto LABEL_82;
          v287 = v2;
          LODWORD(p_buffer) = v113;
        }
        goto LABEL_456;
      }
      v57 = (const void *)objc_msgSend((id)a1, "portType");
      v327[0] = buffer.duration;
      v58 = BWCreateSampleBufferFromSemanticMasksDictionary(v10, v327, v57, &type);
      if (v58)
      {
        v287 = v2;
        LODWORD(p_buffer) = v58;
        goto LABEL_456;
      }
    }
LABEL_62:
    v59 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v60 = CVBufferCopyAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v60)
    {
      v61 = (const __CFDictionary *)CFAutorelease(v60);
      if (v61)
      {
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v61);
        CMSetAttachment((CMAttachmentBearerRef)type.value, v59, MutableCopy, 1u);
        CMSetAttachment(v10, v59, MutableCopy, 1u);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
    }
    goto LABEL_82;
  }
  v327[0] = buffer.duration;
  target[0] = 0;
  v14 = BWSampleBufferCreateFromPixelBuffer(v10, (uint64_t)v327, (CFTypeRef *)(v7 + 504 * a2 + 48), (CMSampleBufferRef *)target);
  if (v14)
  {
    v287 = v2;
    LODWORD(p_buffer) = v14;
    FigDebugAssert3();
  }
  else
  {
    v15 = (const __CFString *)*MEMORY[0x1E0D05D20];
    v16 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D20], 0);
    if (v16)
      CMSetAttachment(target[0], v15, v16, 1u);
    v17 = (const __CFString *)*MEMORY[0x1E0D05D40];
    v18 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D40], 0);
    if (v18)
      CMSetAttachment(target[0], v17, v18, 1u);
    v19 = (const __CFString *)*MEMORY[0x1E0D05D30];
    v20 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D30], 0);
    if (v20)
    {
      CMSetAttachment(target[0], v19, v20, 1u);
      CMRemoveAttachment(v10, v19);
    }
    v21 = (const __CFString *)*MEMORY[0x1E0D05CA8];
    v22 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05CA8], 0);
    if (v22)
    {
      CMSetAttachment(target[0], v21, v22, 1u);
      CMRemoveAttachment(v10, v21);
    }
    v23 = (const __CFString *)*MEMORY[0x1E0D05D48];
    v24 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D48], 0);
    if (v24)
    {
      CMSetAttachment(target[0], v23, v24, 1u);
      CMRemoveAttachment(v10, v23);
    }
    v25 = (const __CFString *)*MEMORY[0x1E0D05DB8];
    v26 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05DB8], 0);
    if (v26)
    {
      CMSetAttachment(target[0], v25, v26, 1u);
      CMRemoveAttachment(v10, v25);
    }
    v27 = (const __CFString *)*MEMORY[0x1E0D05D50];
    v28 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D50], 0);
    if (v28)
    {
      CMSetAttachment(target[0], v27, v28, 1u);
      CMRemoveAttachment(v10, v27);
    }
    v29 = (const __CFString *)*MEMORY[0x1E0D05C78];
    v30 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05C78], 0);
    if (v30)
    {
      CMSetAttachment(target[0], v29, v30, 1u);
      CMRemoveAttachment(v10, v29);
    }
    v31 = (const __CFString *)*MEMORY[0x1E0D05C20];
    v32 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05C20], 0);
    if (v32)
    {
      CMSetAttachment(target[0], v31, v32, 1u);
      CMRemoveAttachment(v10, v31);
    }
    v33 = (const __CFString *)*MEMORY[0x1E0D05DD0];
    v34 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05DD0], 0);
    if (v34)
    {
      CMSetAttachment(target[0], v33, v34, 1u);
      CMRemoveAttachment(v10, v33);
    }
    v35 = (const __CFString *)*MEMORY[0x1E0D05D90];
    v36 = CMGetAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05D90], 0);
    if (v36)
    {
      CMSetAttachment(target[0], v35, v36, 1u);
      CMRemoveAttachment(v10, v35);
    }
  }
  v37 = (opaqueCMSampleBuffer *)target[0];
  type.value = (CMTimeValue)target[0];
  if (a2 <= 0x12 && ((1 << a2) & 0x40E00) != 0)
    goto LABEL_62;
  if ((a2 & 0xFFFFFFFE) == 0xC)
    goto LABEL_82;
LABEL_43:
  v309 = v6;
  v43 = (int *)(a1 + 384 + 504 * a2);
  v44 = *(unsigned __int8 *)(a1 + 140);
  v45 = *(void **)(a1 + 112);
  if ((objc_msgSend(*(id *)(a1 + 312), "previewOutputEnabled", p_buffer, v287) & 1) != 0)
  {
    v46 = -[BWMultiStreamCameraSourceNode _shouldEnableStreamCaptureOutputForNodeOutput:](a1, 0);
    v47 = *v43;
    if (v46)
    {
      v48 = a2;
      if (v47 == 1)
      {
        v49 = v2;
        v50 = *(void **)(a1 + 144);
LABEL_54:
        v53 = *(void **)(a1 + 10536);
        ImageBuffer = CMSampleBufferGetImageBuffer(v37);
        if (v44)
        {
          if (v50)
          {
            objc_msgSend(v50, "addMetadataAttachmentToSampleBuffer:withDutyCycleMetadataCache:", v37, v53);
            v3 = v49;
LABEL_81:
            a2 = v48;
            goto LABEL_82;
          }
          v3 = v49;
          goto LABEL_78;
        }
        v66 = ImageBuffer;
        v3 = v49;
LABEL_72:
        v67 = (const __CFString *)*MEMORY[0x1E0D05CB0];
        v68 = (const __CFDictionary *)CMGetAttachment(v66, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
        if (v68)
        {
          v69 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v68);
          CMSetAttachment(v37, v67, v69, 1u);
          CMSetAttachment(v66, v67, v69, 1u);
          if (v69)
            CFRelease(v69);
        }
        v70 = (const __CFString *)*MEMORY[0x1E0D05C28];
        v71 = CMGetAttachment(v66, (CFStringRef)*MEMORY[0x1E0D05C28], 0);
        v6 = v309;
        a2 = v48;
        if (v71)
          CMSetAttachment(v37, v70, v71, 1u);
        goto LABEL_82;
      }
      goto LABEL_57;
    }
  }
  else
  {
    v47 = *v43;
  }
  v48 = a2;
  if (v47 == 1)
  {
    v49 = v2;
    v50 = 0;
    goto LABEL_54;
  }
LABEL_57:
  v55 = CMSampleBufferGetImageBuffer(v37);
  if (!v44)
  {
    v66 = v55;
    goto LABEL_72;
  }
  v53 = 0;
LABEL_78:
  v72 = objc_msgSend(v45, "addAttachmentsToSampleBuffer:options:", v37, 0);
  if (!v72 && v53)
  {
    FigCaptureMetadataUtilitiesAddMissingDutyCycleMetadata(v37, v53);
    goto LABEL_81;
  }
  a2 = v48;
  if ((v72 == -12680 || v72 == -12785) && type.value)
  {
    CFRelease((CFTypeRef)type.value);
    type.value = 0;
  }
LABEL_82:
  CFRelease(v10);
  v73 = (void *)type.value;
  if (type.value)
  {
    v74 = a1 + 384;
    if (!*(_BYTE *)(a1 + 384 + 504 * v313 + 9))
    {
LABEL_444:
      CFRelease(v73);
      goto LABEL_445;
    }
    v310 = v6;
    v75 = v74 + 504 * v313;
    v76 = *(void **)(v75 + 16);
    v297 = (uint64_t *)(v75 + 16);
    v293 = *(void **)(a1 + 184);
    v77 = *(_DWORD *)v75;
    v290 = v75;
    v295 = (_BYTE *)(v75 + 4);
    v305 = *(_DWORD *)(v75 + 4);
    v312 = *(_DWORD *)v75 == 2;
    v308 = a1;
    if (v76 == *(void **)(a1 + 200)
      && (objc_msgSend(*(id *)(a1 + 312), "detectedFacesOnPreviewOutputEnabled") & 1) != 0)
    {
      v296 = 1;
    }
    else if (v76 == *(void **)(a1 + 208))
    {
      v296 = objc_msgSend(*(id *)(a1 + 312), "detectedFacesOnVideoCaptureOutputEnabled");
    }
    else
    {
      v296 = 0;
    }
    pixelBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v73);
    sbuf = (CMSampleBufferRef)v73;
    v306 = a1 + 384;
    v301 = v77;
    if (v77 == 2)
    {
      if (dword_1ECFE9B50)
      {
        v78 = v3;
        LODWORD(target[0]) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v80 = target[0];
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v82 = v80;
        else
          v82 = v80 & 0xFFFFFFFE;
        if (v82)
        {
          v83 = BWPortTypeToDisplayString(v293, v81);
          v84 = objc_msgSend(v76, "name");
          v85 = BWStillImageSampleBufferToShortDisplayString(v73);
          LODWORD(buffer.duration.value) = 136315906;
          *(CMTimeValue *)((char *)&buffer.duration.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
          LOWORD(buffer.duration.flags) = 2114;
          *(_QWORD *)((char *)&buffer.duration.flags + 2) = v83;
          HIWORD(buffer.duration.epoch) = 2114;
          buffer.presentationTimeStamp.value = v84;
          LOWORD(buffer.presentationTimeStamp.timescale) = 2114;
          *(_QWORD *)((char *)&buffer.presentationTimeStamp.timescale + 2) = v85;
          LODWORD(v287) = 42;
          p_buffer = &buffer;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v3 = v78;
        v77 = 2;
      }
      if (objc_msgSend(*(id *)(a1 + 104), "sourceNodeShouldDiscardStillImageSampleBuffer:sensorRawOutput:", v73, v76 == *(void **)(a1 + 224), p_buffer, v287))
      {
        LODWORD(target[0]) = 0;
        LOBYTE(type.value) = 0;
        v278 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v279 = target[0];
        if (os_log_type_enabled(v278, type.value))
          v281 = v279;
        else
          v281 = v279 & 0xFFFFFFFE;
        if (v281)
        {
          v282 = BWPortTypeToDisplayString(v293, v280);
          v283 = objc_msgSend(v76, "name");
          v284 = BWStillImageSampleBufferToShortDisplayString(v73);
          LODWORD(buffer.duration.value) = 136315906;
          *(CMTimeValue *)((char *)&buffer.duration.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
          LOWORD(buffer.duration.flags) = 2114;
          *(_QWORD *)((char *)&buffer.duration.flags + 2) = v282;
          HIWORD(buffer.duration.epoch) = 2114;
          buffer.presentationTimeStamp.value = v283;
          LOWORD(buffer.presentationTimeStamp.timescale) = 2114;
          *(_QWORD *)((char *)&buffer.presentationTimeStamp.timescale + 2) = v284;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v6 = v310;
        goto LABEL_444;
      }
    }
    v307 = (a2 < 0x13) & (0x43E00u >> a2);
    -[BWMultiStreamCameraSourceNode _addCaptureStreamAttachmentsToSampleBuffer:](a1, v73);
    v86 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v302 = (void *)CMGetAttachment(v73, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v77 == 1 && (*v295 & 1) != 0)
    {
      v87 = (void *)CMGetAttachment(v73, v86, 0);
      if (v87)
      {
        v88 = v87;
        v89 = objc_msgSend((id)objc_msgSend(v87, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue");
        if ((v89 & 1) != 0
          || objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue")|| objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AE8]), "BOOLValue"))
        {
          v90 = *(_DWORD *)(v308 + 384 + 504 * v313 + 4);
          v91 = objc_msgSend(*(id *)(v308 + 104), "providesPreBracketedEV0", p_buffer);
          v92 = (v90 & 1) == 0;
          if ((v90 & 1) != 0)
            v93 = v89 ^ 1;
          else
            v93 = 1;
          if (!v93)
            v92 = v91 ^ 1;
          if (v92 == 1)
          {
            v6 = v310;
            v73 = sbuf;
            if ((v305 & 4) != 0)
              -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v308, sbuf);
            goto LABEL_444;
          }
          v298 = 0;
          v76 = *(void **)(v308 + 216);
          v312 = 1;
          v73 = sbuf;
          v74 = v306;
          goto LABEL_129;
        }
        v312 = 0;
        v73 = sbuf;
        v77 = v301;
      }
      else
      {
        v312 = 0;
      }
    }
    v94 = v312;
    if (a2 == 6)
      v94 = 1;
    v95 = v307 | v94;
    if (a2 == 7)
      v96 = 1;
    else
      v96 = v95;
    if ((v96 & 1) == 0)
    {
      if (objc_msgSend(*(id *)(v308 + 312), "discardsUnstableSphereVideoFrames"))
      {
        v97 = (void *)CMGetAttachment(v73, v86, 0);
        if (mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(v97))
        {
          v6 = v310;
          if ((v305 & 4) != 0)
          {
            -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v308, v73);
            objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillDiscardVideoSampleBuffer:", v73);
          }
          goto LABEL_444;
        }
      }
    }
    v298 = v96 ^ 1;
    if (v77 != 1)
    {
LABEL_154:
      v289 = v3;
      v114 = (CGFloat *)MEMORY[0x1E0C9D648];
      keya = v86;
      v115 = (void *)CMGetAttachment(v73, v86, 0);
      v116 = v115;
      v117 = (_QWORD *)MEMORY[0x1E0D06DC8];
      v118 = (_QWORD *)MEMORY[0x1E0D06BB8];
      v119 = (uint64_t *)MEMORY[0x1E0D06DB8];
      v303 = a2;
      switch(a2)
      {
        case 1:
          v120 = (_QWORD *)MEMORY[0x1E0D06E80];
          v121 = objc_msgSend(v115, "objectForKeyedSubscript:", *MEMORY[0x1E0D06DC8]);
          v122 = *MEMORY[0x1E0D06F48];
          objc_msgSend(v116, "setObject:forKeyedSubscript:", v121, *MEMORY[0x1E0D06F48]);
          v123 = *v119;
          goto LABEL_160;
        case 2:
          v120 = (_QWORD *)MEMORY[0x1E0D06E80];
          v124 = objc_msgSend(v115, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BB8]);
          v122 = *MEMORY[0x1E0D06F48];
          objc_msgSend(v116, "setObject:forKeyedSubscript:", v124, *MEMORY[0x1E0D06F48]);
          v125 = (uint64_t *)MEMORY[0x1E0D06BA8];
          goto LABEL_159;
        case 5:
          v120 = (_QWORD *)MEMORY[0x1E0D06E80];
          v126 = objc_msgSend(v115, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E80]);
          v122 = *MEMORY[0x1E0D06F48];
          objc_msgSend(v116, "setObject:forKeyedSubscript:", v126, *MEMORY[0x1E0D06F48]);
          v125 = (uint64_t *)MEMORY[0x1E0D06DF8];
LABEL_159:
          v123 = *v125;
LABEL_160:
          v127 = objc_msgSend(v116, "objectForKeyedSubscript:", v123, p_buffer);
          v128 = *MEMORY[0x1E0D06DF0];
          v115 = v116;
          goto LABEL_162;
        case 6:
          v120 = (_QWORD *)MEMORY[0x1E0D06E80];
          v122 = *MEMORY[0x1E0D06F48];
          v127 = 0;
          v128 = *MEMORY[0x1E0D06F48];
LABEL_162:
          objc_msgSend(v115, "setObject:forKeyedSubscript:", v127, v128, p_buffer);
          break;
        default:
          v120 = (_QWORD *)MEMORY[0x1E0D06E80];
          v122 = *MEMORY[0x1E0D06F48];
          break;
      }
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *v117, p_buffer);
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *v118);
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *v119);
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0D06BA8]);
      objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, *v120);
      v73 = sbuf;
      v129 = CMSampleBufferGetImageBuffer(sbuf);
      v130 = *((_OWORD *)v114 + 1);
      *(_OWORD *)&buffer.duration.value = *(_OWORD *)v114;
      *(_OWORD *)&buffer.duration.epoch = v130;
      v294 = v122;
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        Width = (double)CVPixelBufferGetWidth(v129);
        Height = (double)CVPixelBufferGetHeight(v129);
        v134 = *(double *)&buffer.duration.value;
        v135 = *(double *)&buffer.duration.timescale;
        v136 = Width - *(double *)&buffer.duration.value;
        epoch = buffer.duration.epoch;
        v138 = buffer.presentationTimeStamp.value;
        if (Width - *(double *)&buffer.duration.value >= *(double *)&buffer.duration.epoch)
          v136 = *(double *)&buffer.duration.epoch;
        if (v136 >= 0.0)
          v139 = v136;
        else
          v139 = 0.0;
        v140 = Height - *(double *)&buffer.duration.timescale;
        if (Height - *(double *)&buffer.duration.timescale >= *(double *)&buffer.presentationTimeStamp.value)
          v140 = *(double *)&buffer.presentationTimeStamp.value;
        if (v140 >= 0.0)
          v141 = v140;
        else
          v141 = 0.0;
        v142 = buffer.duration.value;
        v143 = *(_QWORD *)&buffer.duration.timescale;
        *(_QWORD *)&v332.origin.x = buffer.duration.value;
        v332.origin.y = *(CGFloat *)&buffer.duration.timescale;
        v332.size.width = v139;
        v332.size.height = v141;
        if (!CGRectEqualToRect(*(CGRect *)(&epoch - 2), v332))
        {
          *(CGFloat *)&buffer.duration.value = v134;
          *(CGFloat *)&buffer.duration.timescale = v135;
          *(double *)&buffer.duration.epoch = v139;
          *(double *)&buffer.presentationTimeStamp.value = v141;
          v330.origin.x = v134;
          v330.origin.y = v135;
          v330.size.width = v139;
          v330.size.height = v141;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v330);
          objc_msgSend(v116, "setObject:forKeyedSubscript:", DictionaryRepresentation, v122);
          if (DictionaryRepresentation)
            CFRelease(DictionaryRepresentation);
        }
        v131 = *(double *)&buffer.duration.epoch;
        if (*(double *)&buffer.duration.epoch == Width)
        {
          v131 = *(double *)&buffer.presentationTimeStamp.value;
          if (*(double *)&buffer.presentationTimeStamp.value == Height)
            objc_msgSend(v116, "setObject:forKeyedSubscript:", 0, v122, *(double *)&buffer.presentationTimeStamp.value);
        }
      }
      if (v303 == 6 || v298 | v312)
      {
        LODWORD(v131) = 0;
        if (v312)
          objc_msgSend(*(id *)(v308 + 104), "activeStillImageScaleFactor", v131);
        v131 = -[BWMultiStreamCameraSourceNode _updateZoomForOutputIndex:sampleBuffer:additionalScaleFactor:](v308, v303, sbuf, *(float *)&v131);
        v145 = v131;
        v146 = v149;
        v147 = v150;
        v148 = v151;
      }
      else
      {
        v145 = *v114;
        v146 = v114[1];
        v147 = v114[2];
        v148 = v114[3];
      }
      objc_msgSend((id)objc_msgSend(*(id *)(v308 + 96), "zoomCommandHandler", v131), "appliedZoomFactorWithoutFudge");
      v153 = v152;
      objc_msgSend(*(id *)(v308 + 312), "uiBaseZoomFactor");
      *(float *)&v155 = v153 * v154;
      CMSetAttachment(sbuf, CFSTR("UIZoomFactor"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v155), 1u);
      if ((v305 & 4) != 0)
      {
        v156 = v296 ^ 1;
        objc_msgSend(*(id *)(v308 + 10728), "addFacesFromSampleBuffer:", sbuf);
        objc_msgSend(*(id *)(v308 + 10736), "addObjectsFromSampleBuffer:", sbuf);
        BWDetectedFacesConvertSampleBufferFacesFromSensorToBufferCoordinateSpace(sbuf);
        BWDetectedObjectsConvertSampleBufferDetectedObjectsFromSensorToBufferCoordinateSpace(sbuf);
        v157 = (void *)objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]);
        v158 = objc_msgSend(v157, "BOOLValue");
        if (!v157 || v158)
          objc_msgSend(*(id *)(v308 + 10744), "filterDetectedFacesInSampleBuffer:", sbuf);
        if (objc_msgSend(*(id *)(v308 + 312), "detectedObjectsOutputEnabled")
          && objc_msgSend((id)objc_msgSend(*(id *)(v308 + 312), "enabledDetectedObjectTypes"), "count")
          && v76 != *(void **)(v308 + 232))
        {
          FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet = BWDetectedObjectsCreateFilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet(sbuf, (void *)objc_msgSend(*(id *)(v308 + 312), "enabledDetectedObjectTypes"), v145, v146, v147, v148);
          -[BWMultiStreamCameraSourceNode _addCaptureStreamAttachmentsToSampleBuffer:](v308, FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet);
          goto LABEL_198;
        }
      }
      else
      {
        if ((v296 & 1) == 0)
          BWDetectedFacesRemoveFacesFromSampleBuffer(sbuf);
        v156 = 0;
      }
      FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet = 0;
LABEL_198:
      if (v312)
      {
        v160 = v74 + 504 * v313;
        v162 = *(double *)(v160 + 128);
        v163 = *(double *)(v160 + 136);
        v161 = (double *)(v160 + 128);
        objc_msgSend(*(id *)(v308 + 10728), "transferFacesToSampleBuffer:totalSensorCropRect:", sbuf, v162, v163, v161[2], v161[3]);
        v156 = 0;
LABEL_200:
        objc_msgSend(*(id *)(v308 + 10736), "transferObjectsToSampleBuffer:totalSensorCropRect:", v73, *v161, v161[1], v161[2], v161[3]);
LABEL_201:
        objc_msgSend(*(id *)(v308 + 10744), "filterDetectedFacesInSampleBuffer:", v73);
        goto LABEL_209;
      }
      if ((v307 & 1) == 0)
      {
        if ((v156 & 1) == 0)
        {
          v164 = objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
          v165 = (_QWORD *)MEMORY[0x1E0D069A0];
          if (v164)
          {
            v156 = 0;
            if (objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]))
            {
              v73 = sbuf;
              goto LABEL_209;
            }
            v161 = (double *)MEMORY[0x1E0C9D628];
          }
          else
          {
            v161 = (double *)MEMORY[0x1E0C9D628];
            objc_msgSend(*(id *)(v308 + 10728), "transferFacesToSampleBuffer:totalSensorCropRect:", sbuf, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
            v156 = 0;
            if (objc_msgSend(v302, "objectForKeyedSubscript:", *v165))
            {
              v73 = sbuf;
              goto LABEL_201;
            }
          }
          v73 = sbuf;
          goto LABEL_200;
        }
        v156 = 1;
        if (!objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]))
        {
          v161 = (double *)MEMORY[0x1E0C9D628];
          goto LABEL_200;
        }
      }
LABEL_209:
      if (objc_msgSend(*(id *)(v308 + 312), "cameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled")
        && v76 == *(void **)(v308 + 208)
        || objc_msgSend(*(id *)(v308 + 312), "cameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled")
        && v76 == *(void **)(v308 + 200))
      {
        -[BWMultiStreamCameraSourceNode _attachCameraIntrinsicMatrixToSampleBuffer:scaledToVideoBuffer:addToMetadataDictInTotalSensorCoords:](v308, (CMSampleBufferRef)v73, 1, 0);
      }
      if (v76 == *(void **)(v308 + 224))
        v166 = objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled");
      else
        v166 = 0;
      if ((v76 != *(void **)(v308 + 200)
         || (objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled") & 1) == 0)
        && (v76 != *(void **)(v308 + 208)
         || (objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled") & 1) == 0)
        && (v76 != *(void **)(v308 + 216)
         || (objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled") & 1) == 0)
        && (v76 != *(void **)(v308 + 224)
         || (objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled") & 1) == 0))
      {
        if (v76 == *(void **)(v308 + 248))
        {
          if (((objc_msgSend(*(id *)(v308 + 312), "originalCameraIntrinsicMatrixDeliveryOnDepthOutputEnabled") | v166) & 1) == 0)goto LABEL_228;
        }
        else if (!v166)
        {
LABEL_228:
          v167 = &OBJC_IVAR___BWLivePhotoMovieAnalyticsPayload__maxVideoFrameDurationInMilliseconds;
          if (v298)
          {
            v168 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
            v169 = v168 ? (void *)CFAutorelease(v168) : 0;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0
              && ((objc_msgSend(v169, "isEqualToString:", *MEMORY[0x1E0CA8EC8]) & 1) != 0
               || objc_msgSend(v169, "isEqualToString:", *MEMORY[0x1E0CA8EA8])))
            {
              v170 = (void *)objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB0]);
              if (v170)
              {
                v171 = objc_msgSend(v170, "intValue");
                v172 = (_DWORD *)(v306 + 504 * v313 + 496);
                if (v171 != *v172 + 1)
                  *(_DWORD *)(v306 + 504 * v313 + 492) = -1;
                *v172 = v171;
              }
              v173 = v306 + 504 * v313;
              v174 = FigCaptureSceneIlluminationValueFromLuxLevel((void *)objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C40]), *(_DWORD *)(v173 + 492));
              if ((_DWORD)v174 != -1)
              {
                *(_DWORD *)(v173 + 492) = v174;
                CVBufferSetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8E88], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v174), kCVAttachmentMode_ShouldPropagate);
              }
            }
          }
          if (v312)
          {
            v175 = v301;
            if (v76 != *(void **)(v308 + 216) && v76 != *(void **)(v308 + 224))
            {
              v287 = v289;
              LODWORD(p_type) = 0;
              FigDebugAssert3();
            }
            v176 = objc_msgSend(*(id *)(v308 + 104), "activeStillImageCaptureType", p_type, v287);
            v177 = objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitStillImageSampleBuffer:", v73);
LABEL_260:
            if (v177)
            {
              FigDebugAssert3();
              goto LABEL_262;
            }
LABEL_261:
            if (CMGetAttachment(v73, CFSTR("BWBurnAfterReading"), 0) || *(_BYTE *)(v308 + 10880))
            {
LABEL_262:
              v6 = v310;
              if (!FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet)
                goto LABEL_444;
              goto LABEL_443;
            }
            v299 = FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet;
            if (v156)
              BWDetectedFacesRemoveFacesFromSampleBuffer(v73);
            v179 = v302;
            v178 = v303;
            if ((objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnVideoCaptureOutputEnabled") & 1) == 0
              && (objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnPreviewOutputEnabled") & 1) == 0
              && !objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnStillImageOutputEnabled"))
            {
LABEL_300:
              if ((v312 & objc_msgSend(*(id *)(v308 + v167[984]), "reflectsStillsOnStreamingOutputs", p_type, v287)) != 1|| v175 == 1)
              {
LABEL_326:
                v225 = v307;
                if (v175 != 1)
                  v225 = 1;
                if ((v225 & 1) == 0)
                {
                  v226 = objc_msgSend((id)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue");
                  if (FigCaptureVideoDimensionsAreEqual(v226 | (unint64_t)(objc_msgSend((id)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue") << 32), objc_msgSend(*(id *)(v308 + 96), "ultraHighResSensorRawPoolDimensions"))&& ((int)objc_msgSend((id)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue") > 0|| objc_msgSend((id)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue")))
                  {
                    v227 = (const void *)MEMORY[0x1E0C9AAB0];
                    CMSetAttachment(sbuf, CFSTR("IsHarvestedStillFrame"), MEMORY[0x1E0C9AAB0], 1u);
                    CMSetAttachment(sbuf, CFSTR("IsHarvestedUltraHighResolutionStillFrame"), v227, 1u);
                  }
                }
LABEL_333:
                v73 = sbuf;
                if ((v305 & 4) != 0)
                  -[BWMultiStreamCameraSourceNode _prependPreservedMotionDataToSampleBuffer:](v308, sbuf);
                if ((v307 & 1) == 0)
                {
                  -[BWMultiStreamCameraSourceNode _addMetadataUsedByVideoEncoderToPixelBufferForSampleBuffer:nodeOutput:](v308, sbuf, (uint64_t)v76);
                  -[BWMultiStreamCameraSourceNode _addDolbyVisionMetadataToPreviewPixelBufferForSampleBuffer:nodeOutput:](v308, sbuf, (uint64_t)v76);
                }
                if (objc_msgSend(*(id *)(v308 + 312), "depthType") - 1 > 1)
                  goto LABEL_374;
                objc_msgSend(*(id *)(v308 + 96), "maxContinuousZoomFactorForDepthDataDelivery");
                v229 = v228;
                objc_msgSend((id)objc_msgSend(*(id *)(v308 + 96), "zoomCommandHandler"), "appliedZoomFactorWithoutFudge");
                v231 = v230 > v229 && v229 > 0.0;
                if (v178 == 6)
                {
                  FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet = v299;
                  if (v231)
                    goto LABEL_262;
                  v232 = CFRetain(sbuf);
                  v179 = v302;
                }
                else
                {
                  if ((v312 || objc_msgSend(*(id *)(v308 + 312), "depthOutputEnabled"))
                    && (objc_msgSend(*(id *)(v308 + 312), "discardsDepthDataForStillImages") & 1) != 0)
                  {
                    goto LABEL_354;
                  }
                  if (v231)
                  {
                    CMRemoveAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05C28]);
                    goto LABEL_354;
                  }
                  v232 = -[BWMultiStreamCameraSourceNode _createDepthDataSampleBufferFromVideoSampleBuffer:]((CMSampleBufferRef)v308, sbuf);
                  BWSampleBufferSetAttachedMedia(sbuf, (uint64_t)CFSTR("Depth"), (uint64_t)v232);
                  CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D086F8], MEMORY[0x1E0C9AAB0], 1u);
                }
                if (v232)
                {
                  if (objc_msgSend((id)v308, "hardwareDepthFilteringEnabled"))
                    objc_msgSend((id)CMGetAttachment(v232, keya, 0), "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D08438]);
                  CMSetAttachment(v232, CFSTR("DepthPixelBufferType"), *(CFTypeRef *)(v308 + 344), 1u);
                  CFRelease(v232);
                }
LABEL_354:
                v73 = sbuf;
                if (*(_BYTE *)(v308 + 160))
                {
                  v233 = (void *)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB0]);
                  v234 = objc_msgSend(v233, "intValue");
                  v235 = (void *)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B90]);
                  if (v233)
                  {
                    v236 = v235;
                    if (objc_msgSend(v235, "intValue") == 2)
                    {
                      v237 = *(_DWORD *)(v308 + 10800);
                      v238 = v237 - v234 > 30 && v237 > v234;
                      if (v237 < v234 || v238)
                      {
                        v239 = &OBJC_IVAR___BWMultiStreamCameraSourceNode__infraredProjectorUptimeInUsForLowPowerSparse;
                        if (v312)
                          v239 = &OBJC_IVAR___BWMultiStreamCameraSourceNode__infraredProjectorUptimeInUsForHighPowerSparse;
                        *(_QWORD *)(v308 + *v239) += 2940;
                      }
                    }
                    objc_msgSend((id)objc_msgSend(v179, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E98]), "BOOLValue");
                    objc_msgSend(v236, "intValue");
                    *(_DWORD *)(v308 + 10800) = v234;
                  }
                  v73 = sbuf;
                  v240 = objc_msgSend((id)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D088E8], 0), "intValue");
                  if (!*(_BYTE *)(v308 + 10904) && v240 >= 2)
                  {
                    objc_msgSend(*(id *)(v308 + 112), "setPropertyIfSupported:value:", *MEMORY[0x1E0D077C0], MEMORY[0x1E0C9AAA0]);
                    *(_BYTE *)(v308 + 10904) = 1;
                    if (!v312)
                      goto LABEL_388;
                    goto LABEL_375;
                  }
                  if (*(_BYTE *)(v308 + 10904) && v240 <= 1)
                  {
                    objc_msgSend(*(id *)(v308 + 112), "setPropertyIfSupported:value:", *MEMORY[0x1E0D077C0], MEMORY[0x1E0C9AAB0]);
                    v241 = 0;
                    *(_BYTE *)(v308 + 10904) = 0;
                    if (!v312)
                      goto LABEL_389;
                    goto LABEL_375;
                  }
                }
LABEL_374:
                if (!v312)
                {
LABEL_388:
                  v241 = 0;
                  goto LABEL_389;
                }
LABEL_375:
                if (objc_msgSend(*(id *)(v308 + 312), "stillImageOutputSensorInterfaceRawAttachmentOptionRetainedBufferCount"))
                {
                  v242 = v73;
                  v243 = (const __CFString *)*MEMORY[0x1E0D05D20];
                  v244 = (id)CMGetAttachment(v242, (CFStringRef)*MEMORY[0x1E0D05D20], 0);
                  v245 = (__CVBuffer *)objc_msgSend(v244, "objectForKeyedSubscript:", *MEMORY[0x1E0D05BD0]);
                  if (v245)
                    -[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachment:sampleBuffer:attachedMediaKey:removeAttachmentKey:resetValidBufferRect:](v308, v245, v242, (uint64_t)CFSTR("SensorInterfaceRaw"), v243, 0);

                  v73 = v242;
                }
                if (objc_msgSend(*(id *)(v308 + 312), "stillImageOutputSashimiRawAttachmentOptionRetainedBufferCount"))-[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachmentFromSampleBuffer:attachmentKey:usingAttachedMediaKey:resetValidBufferRect:](v308, v73, (CFStringRef)*MEMORY[0x1E0D05D50], v246, 0);
                if (objc_msgSend(*(id *)(v308 + 312), "stillImageOutputSushiRawAttachmentOptionSupportEnabled")&& *(_BYTE *)(v308 + 10680))
                {
                  -[BWMultiStreamCameraSourceNode _propagatePixelBufferAttachmentFromSampleBuffer:attachmentKey:usingAttachedMediaKey:resetValidBufferRect:](v308, v73, (CFStringRef)*MEMORY[0x1E0D05DB8], v247, 1);
                }
                if (objc_msgSend(*(id *)(v308 + 312), "stillImageOutputFocusPixelDataAttachmentOptionRetainedBufferCount"))
                {
                  v248 = -[BWMultiStreamCameraSourceNode _createFocusPixelDataSampleBufferFromVideoSampleBuffer:]((CMAttachmentBearerRef)v308, v73);
                  if (v248)
                  {
                    v249 = v73;
                    v250 = v248;
                    BWSampleBufferSetAttachedMedia(v249, (uint64_t)CFSTR("FocusPixelData"), (uint64_t)v248);
                    CFRelease(v250);
                  }
                }
                v241 = 1;
LABEL_389:
                v251 = objc_msgSend(*(id *)(v308 + 312), "visionDataConfiguration");
                if ((v241 & 1) == 0)
                {
                  if (v251)
                  {
                    v252 = (const __CFString *)*MEMORY[0x1E0D05DF0];
                    v253 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0D05DF0], 0);
                    if (v253)
                    {
                      v254 = (__CVBuffer *)CFAutorelease(v253);
                      if (v254)
                      {
                        v255 = v254;
                        type.value = 0;
                        v256 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
                        *(_OWORD *)&buffer.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
                        *(_OWORD *)&buffer.decodeTimeStamp.value = v256;
                        buffer.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
                        v257 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
                        *(_OWORD *)&buffer.duration.value = *MEMORY[0x1E0CA2E90];
                        *(_OWORD *)&buffer.duration.epoch = v257;
                        if ((*(_QWORD *)(v308 + 10872)
                           || !CMVideoFormatDescriptionCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v254, (CMVideoFormatDescriptionRef *)(v308 + 10872)))&& !CMSampleBufferGetSampleTimingInfo(sbuf, 0, &buffer))
                        {
                          CMSampleBufferCreateForImageBuffer((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v255, 1u, 0, 0, *(CMVideoFormatDescriptionRef *)(v308 + 10872), &buffer, (CMSampleBufferRef *)&type);
                        }
                        if (type.value)
                        {
                          BWSampleBufferSetAttachedMedia(sbuf, 0x1E4947718, type.value);
                          CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08700], MEMORY[0x1E0C9AAB0], 1u);
                          CVBufferRemoveAttachment(pixelBuffer, v252);
                          if (type.value)
                            CFRelease((CFTypeRef)type.value);
                        }
                      }
                    }
                  }
                }
                v258 = *v297;
                if (v258 == objc_msgSend((id)v308, "previewOutput")
                  && (objc_msgSend((id)objc_msgSend((id)v308, "configuration"), "preLTMThumbnailOnPreviewOutputEnabled") & 1) != 0
                  || (v259 = *v297, v259 == objc_msgSend((id)v308, "videoCaptureOutput"))
                  && objc_msgSend((id)objc_msgSend((id)v308, "configuration"), "preLTMThumbnailOnVideoCaptureOutputEnabled"))
                {
                  v260 = (const __CFString *)*MEMORY[0x1E0D06748];
                  v261 = (__CVBuffer *)CMGetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0D06748], 0);
                  if (v261)
                  {
                    v262 = v261;
                    type.value = 0;
                    CMSampleBufferGetPresentationTimeStamp(&buffer.duration, sbuf);
                    if (BWSampleBufferCreateFromPixelBuffer(v262, (uint64_t)&buffer, (CFTypeRef *)(v306 + 504 * v313 + 48), (CMSampleBufferRef *)&type))
                    {
LABEL_464:
                      FigDebugAssert3();
                      v73 = sbuf;
                      FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet = v299;
                      goto LABEL_262;
                    }
                    v263 = CVBufferCopyAttachment(v262, keya, 0);
                    if (v263)
                    {
                      v264 = (const __CFDictionary *)CFAutorelease(v263);
                      if (v264)
                      {
                        v265 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v264);
                        CMSetAttachment((CMAttachmentBearerRef)type.value, keya, v265, 1u);
                        CMSetAttachment(v262, keya, v265, 1u);
                        if (v265)
                          CFRelease(v265);
                      }
                    }
                    BWSampleBufferSetAttachedMedia(sbuf, 0x1E494FBD8, type.value);
                    if (type.value)
                      CFRelease((CFTypeRef)type.value);
                    CVBufferRemoveAttachment(pixelBuffer, v260);
                  }
                }
                v266 = *v297;
                if ((v266 != objc_msgSend((id)v308, "previewOutput")
                   || (objc_msgSend((id)objc_msgSend((id)v308, "configuration"), "postColorProcessingThumbnailOnPreviewOutputEnabled") & 1) == 0)&& ((v267 = *v297, v267 != objc_msgSend((id)v308, "videoCaptureOutput"))|| !objc_msgSend((id)objc_msgSend((id)v308, "configuration"), "postColorProcessingThumbnailOnVideoCaptureOutputEnabled"))|| (v268 = (const __CFString *)*MEMORY[0x1E0D06740], (v269 = (__CVBuffer *)CMGetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0D06740], 0)) == 0))
                {
LABEL_426:
                  if (*(_DWORD *)(v306 + 504 * v313 + 176) && !*(_BYTE *)(v306 + 504 * v313 + 486))
                    -[BWMultiStreamCameraSourceNode _tallyCompressedIOSurfaceStatsForSBuf:outputStorage:](v308, sbuf, v290);
                  if ((v305 & 4) != 0 && *(_BYTE *)(v308 + 10868))
                    -[BWMultiStreamCameraSourceNode _tallyCompressedIOSurfaceStatsForRawForSBuf:]((BWStats *)v308, sbuf);
                  if (v76 == *(void **)(v308 + 216))
                    FigCaptureMetadataUtilitiesAdjustValidBufferRectForDarkShadeCropping(sbuf);
                  if (*(_BYTE *)(v306 + 504 * v313 + 487))
                  {
                    IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
                    ID = IOSurfaceGetID(IOSurface);
                  }
                  else
                  {
                    ID = 0;
                  }
                  if (((v76 == *(void **)(v308 + 216)) & ~v241) == 0)
                  {
                    objc_msgSend(v76, "emitSampleBuffer:", sbuf);
                    v276 = v306 + 504 * v313;
                    CMSampleBufferGetPresentationTimeStamp((CMTime *)time2, sbuf);
                    *(_OWORD *)(v276 + 56) = *(_OWORD *)time2;
                    *(CMSampleBufferRef *)(v276 + 72) = time2[2];
                  }
                  if (*(_BYTE *)(v306 + 504 * v313 + 488))
                    -[BWMultiStreamCameraSourceNode _prefetchPixelBufferForOutputStorage:numberOfBuffersToFetch:lastEmittedSurfaceID:](v308, v290, 2, ID);
                  v6 = v310;
                  v73 = sbuf;
                  FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet = v299;
                  if (!v299)
                    goto LABEL_444;
                  objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitDetectedFacesSampleBuffer:", v299);
                  objc_msgSend(*(id *)(v308 + 232), "emitSampleBuffer:", v299);
LABEL_443:
                  CFRelease(FilteredDetectedObjectsOnlySampleBufferFromSampleBufferUsingSet);
                  goto LABEL_444;
                }
                v270 = v269;
                time2[0] = 0;
                CMSampleBufferGetPresentationTimeStamp(&type, sbuf);
                if (!BWSampleBufferCreateFromPixelBuffer(v270, (uint64_t)&type, (CFTypeRef *)(v306 + 504 * v313 + 48), time2))
                {
                  v271 = CVBufferCopyAttachment(v270, keya, 0);
                  if (v271)
                  {
                    v272 = (const __CFDictionary *)CFAutorelease(v271);
                    if (v272)
                    {
                      v273 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v272);
                      CMSetAttachment(time2[0], keya, v273, 1u);
                      CMRemoveAttachment(v270, keya);
                      if (v273)
                        CFRelease(v273);
                    }
                  }
                  BWSampleBufferSetAttachedMedia(sbuf, 0x1E495B478, (uint64_t)time2[0]);
                  if (time2[0])
                    CFRelease(time2[0]);
                  CVBufferRemoveAttachment(pixelBuffer, v268);
                  goto LABEL_426;
                }
                goto LABEL_464;
              }
              v213 = objc_msgSend(*(id *)(v308 + 104), "synchronizedStreamsEnabled");
              v214 = objc_msgSend(*(id *)(v308 + v167[984]), "discardsUnstableSphereVideoFrames");
              v215 = (void *)CMGetAttachment(v73, keya, 0);
              if (v215)
              {
                if (v176 > 0xC)
                  goto LABEL_316;
                if (((1 << v176) & 0x1C7C) != 0)
                {
                  v216 = v215;
                  if ((!v214 || (mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(v215) & 1) == 0)
                    && (!v213
                     || objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]), "BOOLValue")))
                  {
                    v217 = CMSampleBufferGetImageBuffer(sbuf);
                    PixelFormatType = CVPixelBufferGetPixelFormatType(v217);
                    if ((FigCapturePixelFormatIsVersatileRaw(PixelFormatType) & 1) == 0
                      && !objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F28]), "intValue"))
                    {
                      if (((1 << v176) & 0x1C48) != 0)
                      {
                        v219 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue");
                        goto LABEL_313;
                      }
                      if ((v176 & 0xFFFFFFFE) == 4)
                      {
                        if (objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E58]), "intValue") != 1)
                        {
                          v277 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue");
                          v219 = objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue");
                          if (v277)
                            goto LABEL_314;
LABEL_313:
                          if ((v219 & 1) != 0)
                          {
LABEL_314:
                            -[BWMultiStreamCameraSourceNode _prependPreservedMotionDataToSampleBuffer:](v308, sbuf);
                            -[BWMultiStreamCameraSourceNode _reflectStillSampleBufferOnStreamingOutputs:captureType:](v308, sbuf, v176);
                            goto LABEL_333;
                          }
                        }
                      }
                      else if (v176 != 2
                             || (objc_msgSend((id)objc_msgSend(v216, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D60]), "BOOLValue") & 1) == 0)
                      {
                        goto LABEL_314;
                      }
                    }
                  }
LABEL_316:
                  memset(&buffer, 0, 24);
                  CMSampleBufferGetPresentationTimeStamp(&buffer.duration, sbuf);
                  v220 = 0;
                  v320 = (opaqueCMSampleBuffer *)*MEMORY[0x1E0CA2E18];
                  v221 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
                  v321 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
                  v222 = (_BYTE *)(v308 + 388);
                  v175 = v301;
                  while (!v222[5] || (*v222 & 4) == 0)
                  {
                    ++v220;
                    v222 += 504;
                    if (v220 == 20)
                    {
                      LODWORD(v220) = 0;
                      goto LABEL_322;
                    }
                  }
                  v223 = v304;
                  if ((v220 & 0x80000000) != 0)
                    goto LABEL_323;
LABEL_322:
                  v224 = v308 + 384 + 504 * v220;
                  v320 = *(opaqueCMSampleBuffer **)(v224 + 56);
                  v221 = *(_DWORD *)(v224 + 68);
                  v321 = *(_DWORD *)(v224 + 64);
                  v223 = *(_QWORD *)(v224 + 72);
LABEL_323:
                  if ((v221 & 0x1D) == 1)
                  {
                    type = buffer.duration;
                    time2[0] = v320;
                    time2[1] = (CMSampleBufferRef)__PAIR64__(v221, v321);
                    time2[2] = (CMSampleBufferRef)v223;
                    if (CMTimeCompare(&type, (CMTime *)time2) >= 1)
                      -[BWMultiStreamCameraSourceNode _preserveMotionDataForSoonToBeDroppedSampleBuffer:](v308, sbuf);
                  }
                  goto LABEL_326;
                }
              }
              if (v176 == 1)
                goto LABEL_333;
              goto LABEL_316;
            }
            objc_msgSend(v302, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D05F10]);
            if (v312)
            {
              if (objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnStillImageOutputEnabled")&& !((unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(v73) >> 62))
              {
                if ((objc_msgSend((id)CMGetAttachment(v73, CFSTR("BWStillImageCaptureSettings"), 0), "captureFlags") & 4) != 0)
                {
                  v180 = (void *)objc_msgSend(v302, "objectForKeyedSubscript:", *MEMORY[0x1E0D06DF8]);
                  v181 = v302;
                  v182 = v294;
LABEL_282:
                  objc_msgSend(v181, "setObject:forKeyedSubscript:", v180, v182);
                  goto LABEL_283;
                }
LABEL_281:
                v182 = *MEMORY[0x1E0D05F18];
                v180 = &unk_1E49FAF98;
                v181 = v302;
                goto LABEL_282;
              }
            }
            else
            {
              if (v175 != 1)
              {
                ++multiStreamCameraSourceNode_outputSampleBuffer_errorLogCounter;
                goto LABEL_283;
              }
              if (v76 == *(void **)(v308 + 208)
                && (objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnVideoCaptureOutputEnabled") & 1) != 0
                || v76 == *(void **)(v308 + 200)
                && objc_msgSend(*(id *)(v308 + 312), "geometricDistortionCorrectionOnPreviewOutputEnabled"))
              {
                goto LABEL_281;
              }
            }
LABEL_283:
            if ((v303 - 3) <= 2)
            {
              v183 = (uint64_t *)MEMORY[0x1E0D05FD0];
              if (*(_BYTE *)(v308 + 10906))
              {
                v184 = BWPixelBufferDimensionsFromSampleBuffer((opaqueCMSampleBuffer *)v73);
                BWAddMinimumValidBufferRectForGDCIfNeededToSampleBuffer(v302, v184, objc_msgSend((id)objc_msgSend(*(id *)(v308 + 96), "cameraInfoByPortType"), "objectForKeyedSubscript:", v293), (void **)(v308 + 10912));
                v185 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
                *(_OWORD *)time2 = *MEMORY[0x1E0C9D628];
                *(_OWORD *)&time2[2] = v185;
                v179 = v302;
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
                  v188 = v187;
                  v190 = v189;
                  v192 = v191;
                  psn_pixelBufferDimensions(pixelBuffer);
                  if (dword_1ECFE9B50)
                  {
                    LODWORD(v320) = 0;
                    v193 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v194 = v320;
                    if (os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT))
                      v195 = v194;
                    else
                      v195 = v194 & 0xFFFFFFFE;
                    if (v195)
                    {
                      v196 = BWStringFromCGRect(*(double *)time2, *(double *)&time2[1], *(double *)&time2[2], *(double *)&time2[3]);
                      v197 = BWStringFromCGRect(FinalCropRect, v188, v190, v192);
                      FigCaptureMetadataUtilitiesDenormalizeCropRect(FinalCropRect, v188, v190, v192);
                      v202 = BWStringFromCGRect(v198, v199, v200, v201);
                      LODWORD(type.value) = 136315906;
                      *(CMTimeValue *)((char *)&type.value + 4) = (CMTimeValue)"multiStreamCameraSourceNode_outputSampleBuffer";
                      LOWORD(type.flags) = 2114;
                      *(_QWORD *)((char *)&type.flags + 2) = v196;
                      HIWORD(type.epoch) = 2114;
                      v323 = v197;
                      v324 = 2114;
                      v325 = v202;
                      LODWORD(v287) = 42;
                      p_type = &type;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v73 = sbuf;
                    v179 = v302;
                    v175 = v301;
                  }
                }
                v178 = v303;
                v167 = &OBJC_IVAR___BWLivePhotoMovieAnalyticsPayload__maxVideoFrameDurationInMilliseconds;
              }
              else
              {
                psn_pixelBufferDimensions(pixelBuffer);
                ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
                v205 = v204;
                v207 = v206;
                v209 = v208;
                if (dword_1ECFE9B50)
                {
                  LODWORD(time2[0]) = 0;
                  LOBYTE(v320) = 0;
                  v210 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v210, (os_log_type_t)v320);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  v73 = sbuf;
                  v175 = v301;
                  v167 = &OBJC_IVAR___BWLivePhotoMovieAnalyticsPayload__maxVideoFrameDurationInMilliseconds;
                }
                v331.origin.x = ValidBufferRect;
                v331.origin.y = v205;
                v331.size.width = v207;
                v331.size.height = v209;
                v211 = CGRectCreateDictionaryRepresentation(v331);
                v212 = *v183;
                v179 = v302;
                objc_msgSend(v302, "setObject:forKeyedSubscript:", v211, v212);
                v178 = v303;
              }
            }
            goto LABEL_300;
          }
          v175 = v301;
          if (v303 == 6)
          {
            v177 = objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitDepthSampleBuffer:", v73);
          }
          else
          {
            if (v303 != 7)
            {
              if (v307)
              {
                objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitDetectedFacesSampleBuffer:", v73);
              }
              else if (v301 == 1)
              {
                v177 = objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitVideoSampleBuffer:drivesCameraControls:deliversStills:", v73, (v305 >> 2) & 1, (*(_DWORD *)v295 & 3) != 0);
                goto LABEL_259;
              }
              v176 = 0;
              goto LABEL_261;
            }
            v177 = objc_msgSend(*(id *)(v308 + 104), "sourceNodeWillEmitPointCloudSampleBuffer:", v73);
          }
LABEL_259:
          v176 = 0;
          goto LABEL_260;
        }
      }
      -[BWMultiStreamCameraSourceNode _attachCameraIntrinsicMatrixToSampleBuffer:scaledToVideoBuffer:addToMetadataDictInTotalSensorCoords:](v308, (CMSampleBufferRef)v73, 0, v166);
      goto LABEL_228;
    }
LABEL_129:
    v98 = v74 + 504 * v313;
    v100 = *(unsigned __int8 *)(v98 + 8);
    v99 = (_BYTE *)(v98 + 8);
    if (!v100 && !*(_BYTE *)(v308 + 10880))
    {
      v288 = v3;
      *v99 = 1;
      *(_OWORD *)target = 0u;
      v317 = 0u;
      v318 = 0u;
      v319 = 0u;
      v101 = -[BWMultiStreamCameraSourceNode _nodeOutputsMadeLiveByStreamOutputIndex:](v308, a2);
      v102 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", target, v327, 16);
      if (v102)
      {
        v103 = v102;
        key = v86;
        v104 = *(_QWORD *)v317;
        v105 = MEMORY[0x1E0C809B0];
        do
        {
          for (i = 0; i != v103; ++i)
          {
            if (*(_QWORD *)v317 != v104)
              objc_enumerationMutation(v101);
            v107 = (void *)*((_QWORD *)target[1] + i);
            if (v107 == v76)
              goto LABEL_141;
            v108 = (_QWORD *)(v308 + 400);
            v109 = 20;
            while (!*((_BYTE *)v108 - 7) || (void *)*v108 != v107)
            {
              v108 += 63;
              if (!--v109)
                goto LABEL_141;
            }
            v110 = v108[2];
            if (!v110)
            {
LABEL_141:
              if (!objc_msgSend(*((id *)target[1] + i), "liveFormat", p_buffer))
                objc_msgSend(v107, "makeConfiguredFormatLive");
            }
            else
            {
              block[0] = v105;
              block[1] = 3221225472;
              block[2] = __multiStreamCameraSourceNode_outputSampleBuffer_block_invoke;
              block[3] = &unk_1E491E720;
              block[4] = v107;
              dispatch_async(v110, block);
            }
          }
          v103 = objc_msgSend(v101, "countByEnumeratingWithState:objects:count:", target, v327, 16);
        }
        while (v103);
        v3 = v288;
        v73 = sbuf;
        v74 = v306;
        v86 = key;
      }
      else
      {
        v73 = sbuf;
      }
    }
    goto LABEL_154;
  }
LABEL_445:
  objc_autoreleasePoolPop(v6);
}

uint64_t BWSampleBufferCreateFromPixelBuffer(__CVBuffer *a1, uint64_t a2, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  CMSampleTimingInfo v5;
  __int128 v6;
  _BYTE v7[32];
  __int128 v8;
  uint64_t v9;

  v6 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&v7[8] = *(_OWORD *)a2;
  *(_QWORD *)&v7[24] = *(_QWORD *)(a2 + 16);
  v8 = v6;
  v9 = *(_QWORD *)v7;
  *(_OWORD *)&v5.presentationTimeStamp.timescale = *(_OWORD *)&v7[16];
  *(_OWORD *)&v5.decodeTimeStamp.value = v6;
  v5.decodeTimeStamp.epoch = *(_QWORD *)v7;
  *(_OWORD *)&v5.duration.value = v6;
  *(_OWORD *)&v5.duration.epoch = *(_OWORD *)v7;
  return BWSampleBufferCreateFromPixelBufferWithTimingInfo(a1, &v5, a3, a4);
}

__CFString *mv2ip_inputAttachedMediaKeyForMattingOutputType(int a1)
{
  __CFString *result;

  result = 0;
  if (a1 > 15)
  {
    if (a1 <= 63)
    {
      if (a1 == 16)
        return CFSTR("LowResPersonSemanticsTeeth");
      if (a1 == 32)
        return CFSTR("LowResPersonSemanticsGlasses");
      return result;
    }
    if (a1 == 64)
      return CFSTR("LowResPersonSemanticsSky");
    if (a1 != 128)
      return result;
    return CFSTR("LowResPersonSegmentationMask");
  }
  switch(a1)
  {
    case 2:
      return CFSTR("LowResPersonSegmentationMask");
    case 4:
      return CFSTR("LowResPersonSemanticsHair");
    case 8:
      return CFSTR("LowResPersonSemanticsSkin");
  }
  return result;
}

const __CFString *mv2ip_outputAttachedMediaKeyForMattingOutputType(int a1)
{
  const __CFString *result;

  result = 0;
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        return CFSTR("PersonSemanticsSky");
      }
      else if (a1 == 128)
      {
        return CFSTR("LowResPersonSegmentationMaskClone");
      }
    }
    else if (a1 == 16)
    {
      return CFSTR("PersonSemanticsTeeth");
    }
    else if (a1 == 32)
    {
      return CFSTR("PersonSemanticsGlasses");
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = CFSTR("RefinedDepth");
        break;
      case 2:
        result = CFSTR("PersonSegmentationMask");
        break;
      case 4:
        result = CFSTR("PersonSemanticsHair");
        break;
      case 8:
        result = CFSTR("PersonSemanticsSkin");
        break;
      default:
        return result;
    }
  }
  return result;
}

double FigMotionMultiplyByInverseOfQuaternion(double *a1, uint64_t *a2)
{
  double v3;
  float64x2_t v4;
  double v5;

  v3 = *(double *)a2;
  v4 = vnegq_f64(*(float64x2_t *)(a2 + 1));
  v5 = -*((double *)a2 + 3);
  return FigMotionMultiplyQuaternions(&v3, a1);
}

void FigMotionInterpolateQuaternionsByAngle(uint64_t a1, double *a2, float a3)
{
  long double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  long double cosval;
  float64x2_t v19;
  double v20;

  cosval = *(double *)a1;
  v19 = vnegq_f64(*(float64x2_t *)(a1 + 8));
  v20 = -*(double *)(a1 + 24);
  v5 = FigMotionMultiplyQuaternions(&cosval, a2);
  v8 = v7;
  v10 = v9;
  if (fabs(v5) <= 1.0)
  {
    v11 = v6;
    cosval = 0.0;
    v19 = 0uLL;
    v12 = acos(v5);
    v13 = sin(v12);
    v14 = a3;
    v15 = v12 * v14;
    if (v13 <= 0.00000001)
    {
      cosval = cos(v15);
      v19.f64[0] = v8 * v14;
      v19.f64[1] = v10 * v14;
      v17 = v11 * v14;
    }
    else
    {
      v16 = __sincos_stret(v15);
      cosval = v16.__cosval;
      v19.f64[0] = v16.__sinval / v13 * v8;
      v19.f64[1] = v16.__sinval / v13 * v10;
      v17 = v16.__sinval / v13 * v11;
    }
    v20 = v17;
    FigMotionMultiplyQuaternions((double *)a1, &cosval);
  }
}

double FigMotionMultiplyQuaternions(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12[4];

  v2 = *a1;
  v3 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v9 = a2[2];
  v8 = a2[3];
  v10 = *a2 * v7 + *a1 * v8 + v3 * v9 - v6 * v4;
  v12[2] = *a2 * v6 + *a1 * v9 + v7 * v4 - v3 * v8;
  v12[3] = v10;
  v12[0] = v2 * v5 - v3 * v4 - v6 * v9 - v7 * v8;
  v12[1] = v3 * v5 + v2 * v4 + v6 * v8 - v7 * v9;
  FigMotionNormalizeQuaternion(v12);
  return v12[0];
}

uint64_t FigMotionNormalizeQuaternion(double *a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  if (a1
    && (v2 = *a1, v1 = a1[1], v3 = a1[2], v4 = a1[3], v5 = sqrt(v1 * v1 + v2 * v2 + v3 * v3 + v4 * v4), v5 > 0.00000001))
  {
    v6 = 1.0 / v5;
    *a1 = v2 * v6;
    a1[1] = v1 * v6;
    a1[2] = v3 * v6;
    a1[3] = v4 * v6;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t pgs_limitTransformToOverscan(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  float v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v26;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  uint64_t v32;
  _DWORD v34[8];
  uint64_t v35;

  v3 = 0;
  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(_DWORD *)(a1 + 32);
  v6 = (float)v4;
  v7 = v4 + *(_DWORD *)(a1 + 36) - 1;
  v8 = v5 + *(_DWORD *)(a1 + 40) - 1;
  *(float *)v34 = v6;
  *(float *)&v34[1] = (float)v5;
  *(float *)&v34[2] = (float)v7;
  *(float *)&v34[3] = (float)v5;
  *(float *)&v34[4] = v6;
  *(float *)&v34[5] = (float)v8;
  *(float *)&v34[6] = (float)v7;
  *(float *)&v34[7] = (float)v8;
  v9 = (float)*a2;
  v10 = (float)a2[1];
  v11 = (float)(v10 + (float)a2[3]) + -1.0;
  v12 = *(float *)(a3 + 8);
  v13 = *(float *)(a3 + 20);
  v14 = v9 + 0.5;
  v15 = v10 + 0.5;
  v16 = (float)((float)(v9 + (float)a2[2]) + -1.0) + -0.5;
  v17 = fabsf(v12);
  v18 = v11 + -0.5;
  v19 = fabsf(v13);
  v20 = 3.4028e38;
  do
  {
    v21 = *(float *)&v34[v3];
    v22 = v12 + v21;
    if ((float)(v12 + v21) < v14)
    {
      v23 = -1.0;
      if (v17 < 0.00000001)
        goto LABEL_14;
      v24 = v14 - v21;
      goto LABEL_13;
    }
    if (v22 > v16)
      v23 = -1.0;
    else
      v23 = 1.0;
    if (v17 >= 0.00000001 && v22 > v16)
    {
      v24 = v16 - v21;
LABEL_13:
      v23 = v24 / v12;
    }
LABEL_14:
    v26 = *(float *)&v34[v3 + 1];
    v27 = v13 + v26;
    if ((float)(v13 + v26) < v15)
    {
      v28 = -1.0;
      if (v19 < 0.00000001)
        goto LABEL_24;
      v29 = v15 - v26;
      goto LABEL_23;
    }
    v30 = v27 <= v18;
    if (v27 > v18)
      v28 = -1.0;
    else
      v28 = 1.0;
    if (!v30 && v19 >= 0.00000001)
    {
      v29 = v18 - v26;
LABEL_23:
      v28 = v29 / v13;
    }
LABEL_24:
    if (v23 >= v28)
      v23 = v28;
    if (v20 >= v23)
      v20 = v23;
    v3 += 2;
  }
  while (v3 != 8);
  if (v20 < 0.0 || v20 > 1.0)
  {
    *(_BYTE *)(a1 + 49) = 1;
    return 4294954511;
  }
  else
  {
    if (v20 < 1.0)
    {
      *(float *)(a3 + 8) = v12 * v20;
      *(float *)(a3 + 20) = v13 * v20;
    }
    v32 = 0;
    if (v20 < *(float *)(a1 + 44))
      *(float *)(a1 + 44) = v20;
  }
  return v32;
}

uint64_t pgs_computeTransformFromCameraMotion(double *a1, double *a2, float32x2_t *a3, float32x2_t *a4, uint64_t a5, float a6)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float v12;
  float v13;
  uint64_t v15;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v18;
  float v19;
  float v20;
  __int128 v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a5)
  {
    v8.f64[0] = *a2;
    v9 = 0uLL;
    v10 = 0uLL;
    if (a3)
      v10 = vcvtq_f64_f32(*a3);
    v8.f64[1] = a2[1];
    v11 = vaddq_f64(v8, v10);
    if (a4)
      v9 = vcvtq_f64_f32(*a4);
    v17 = LODWORD(a6);
    v18 = v11;
    v15 = LODWORD(a6);
    v16 = vaddq_f64(v8, v9);
    pgs_inverseRotationMatrixFromQuaternion(a1, (uint64_t)v21);
    FigMotionComputeTransformFromRotation((uint64_t)&v17, (uint64_t)&v15, v21, a5);
    v19 = 0.0;
    v20 = 0.0;
    v12 = *a2;
    v13 = a2[1];
    ComputePerspectiveProjectedPoint((float *)a5, &v20, &v19, v12, v13);
    *(_QWORD *)a5 = 1065353216;
    *(float *)(a5 + 8) = v20 - v12;
    *(_QWORD *)(a5 + 12) = 0x3F80000000000000;
    *(float *)(a5 + 20) = v19 - v13;
    *(_QWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

float pgs_inverseRotationMatrixFromQuaternion(double *a1, uint64_t a2)
{
  double v2;
  double v3;
  float v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float result;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 + v2;
  v5 = a1[2];
  v6 = a1[3];
  v7 = v5 + v5;
  v8 = v6 + v6;
  *(float *)&v2 = v2;
  *(float *)&v5 = v5;
  *(float *)&v6 = v6;
  *(float *)&v6 = *(float *)&v6 * v8;
  v9 = 1.0 - (float)(*(float *)&v2 * v4);
  v10 = (float)(1.0 - (float)(*(float *)&v5 * v7)) - *(float *)&v6;
  *(float *)(a2 + 32) = v9 - (float)(*(float *)&v5 * v7);
  *(float *)&v5 = *(float *)&v5 * v8;
  *(float *)&v3 = v3;
  v11 = v4 * *(float *)&v3;
  *(float *)(a2 + 16) = v9 - *(float *)&v6;
  *(float *)(a2 + 20) = *(float *)&v5 - v11;
  *(float *)&v6 = (float)(*(float *)&v2 * v7) + (float)(v8 * *(float *)&v3);
  *(float *)a2 = v10;
  *(float *)(a2 + 4) = (float)(*(float *)&v2 * v7) - (float)(v8 * *(float *)&v3);
  *(float *)&v2 = *(float *)&v2 * v8;
  *(float *)&v3 = v7 * *(float *)&v3;
  *(float *)(a2 + 8) = *(float *)&v2 + *(float *)&v3;
  *(_DWORD *)(a2 + 12) = LODWORD(v6);
  result = *(float *)&v2 - *(float *)&v3;
  *(float *)(a2 + 24) = result;
  *(float *)(a2 + 28) = *(float *)&v5 + v11;
  return result;
}

double FigMotionPreMultiplyScalingTranslationToTransform(uint64_t a1, int8x16_t a2, int32x4_t a3, float a4, float a5, int8x16_t a6)
{
  int32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  a6.i32[0] = *(_DWORD *)(a1 + 24);
  v6 = a3;
  *(float *)&v6.i32[1] = a5;
  v7 = (float32x4_t)vzip1q_s32(v6, v6);
  v7.i32[2] = a3.i32[0];
  v8 = (int32x4_t)a2;
  *(float *)&v8.i32[1] = a4;
  v9 = (float32x4_t)vzip1q_s32(v8, v8);
  v9.i32[2] = a2.i32[0];
  a2.i64[0] = *(_QWORD *)(a1 + 28);
  v10 = (float32x4_t)vextq_s8(vextq_s8(a6, a6, 4uLL), a2, 0xCuLL);
  v10.i32[3] = v10.i32[0];
  *(float32x4_t *)a1 = vmlaq_f32(vmulq_f32(v10, v7), *(float32x4_t *)a1, v9);
  *(float32x2_t *)a2.i8 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)a2.i8, a5), *(float32x2_t *)(a1 + 16), a4);
  *(_QWORD *)(a1 + 16) = a2.i64[0];
  return *(double *)a2.i64;
}

double FigMotionComputeTransformFromRotation(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  float v8;
  int8x16_t v9;
  int32x4_t v10;
  float v11;
  int8x16_t v12;

  v6 = *a3;
  v7 = a3[1];
  *(_DWORD *)(a4 + 32) = *((_DWORD *)a3 + 8);
  *(_OWORD *)a4 = v6;
  *(_OWORD *)(a4 + 16) = v7;
  *(float *)&v7 = *(double *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  FigMotionPostMultiplyScalingTranslationToTransform((float *)a4, 1.0 / *(float *)a2, (float)-*(float *)&v7 / *(float *)a2, 1.0 / *(float *)a2, (float)-v8 / *(float *)a2);
  v9.i32[0] = *(_DWORD *)a1;
  v10.i64[0] = *(_QWORD *)(a1 + 8);
  *(float *)v10.i32 = *(double *)v10.i64;
  v11 = *(double *)(a1 + 16);
  return FigMotionPreMultiplyScalingTranslationToTransform(a4, v9, v10, *(float *)a1, v11, v12);
}

float FigMotionPostMultiplyScalingTranslationToTransform(float *a1, float a2, float a3, float a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[6];
  v10 = a1[7];
  v11 = (float)(a1[2] + (float)(a5 * v6)) + (float)(a3 * *a1);
  v12 = (float)(a1[5] + (float)(a5 * v8)) + (float)(a3 * v7);
  a1[8] = (float)(a1[8] + (float)(a5 * v10)) + (float)(a3 * v9);
  v13 = v5 * a2;
  a1[2] = v11;
  a1[3] = v7 * a2;
  result = v9 * a2;
  *a1 = v13;
  a1[1] = v6 * a4;
  a1[4] = v8 * a4;
  a1[5] = v12;
  a1[6] = result;
  a1[7] = v10 * a4;
  return result;
}

float ComputePerspectiveProjectedPoint(float *a1, float *a2, float *a3, float a4, float a5)
{
  float v5;
  float result;

  v5 = (float)(a1[8] + (float)(a1[7] * a5)) + (float)(a1[6] * a4);
  if (fabsf(v5) > 0.00000001)
    v5 = 1.0 / v5;
  *a2 = (float)((float)(a1[2] + (float)(a1[1] * a5)) + (float)(*a1 * a4)) * v5;
  result = v5 * (float)((float)(a1[5] + (float)(a1[4] * a5)) + (float)(a1[3] * a4));
  *a3 = result;
  return result;
}

void FigMotionQuaternionFromDeltaRotation(float *a1)
{
  double v1;

  v1 = sqrtf((float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)(a1[2] * a1[2]));
  if (v1 > 1.0e-10)
    __sincos_stret(v1 * 0.5);
}

uint64_t csp_configureMultiStreamCameraNode(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, unsigned int a8, float a9, float a10, float a11, unsigned __int8 a12, unsigned __int8 a13, void *a14, unsigned __int8 a15, unsigned int a16, unsigned __int8 a17, unsigned __int8 a18, char a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int8 a23,__int128 *a24,__int128 *a25,unsigned int a26,char a27,unsigned __int8 a28,unsigned __int8 a29,char a30,char a31,unsigned __int8 a32,unsigned __int8 a33,unsigned int a34,unsigned int a35,unsigned int a36,unsigned int a37,unsigned __int8 a38,unsigned __int8 a39,void *a40,unsigned __int8 a41,unsigned __int8 a42,unsigned int a43,unsigned __int8 a44,unsigned __int8 a45,unsigned __int8 a46,unsigned __int8 a47,void *a48,unsigned __int8 a49,unsigned __int8 a50,unsigned __int8 a51,unsigned __int8 a52,char a53,unsigned __int8 a54,char a55,unsigned __int8 a56,unsigned __int8 a57,unsigned __int8 a58,unsigned __int8 a59,unsigned __int8 a60,unsigned __int8 a61,unint64_t a62,unint64_t a63)
{
  uint64_t a64;
  unsigned __int8 a65;
  unsigned int a66;
  unsigned int a67;
  unsigned int a68;
  unsigned int a69;
  char a70;
  unsigned int a71;
  unsigned __int8 a72;
  unsigned __int8 a73;
  unsigned __int8 a74;
  char a75;
  unsigned __int8 a76;
  unsigned __int8 a77;
  unsigned __int8 a78;
  unsigned __int8 a79;
  char a80;
  char a81;
  unsigned __int8 a82;
  unsigned __int8 a83;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const void *v100;
  BWMultiStreamCameraSourceNodeConfiguration *v101;
  int shouldUseFullBinSIFRCompanionIndex;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t i;
  void *v107;
  int v108;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  int v111;
  int v112;
  BOOL v113;
  int v114;
  _BOOL4 v115;
  int v116;
  _BOOL4 v117;
  char v118;
  unsigned __int8 v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  _BOOL4 v126;
  void *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  int v133;
  void *v134;
  void *UnderlyingFastSwitchingFormatsForFormatAndPortType;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t j;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  char v147;
  void *v148;
  void (*v149)(CFTypeRef, const __CFString *, uint64_t, CMTime *);
  uint64_t v150;
  float v151;
  float v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  int ShouldEnableMaximumGeometricDistortionCorrection;
  uint64_t v161;
  void (*v162)(CFTypeRef, const __CFString *, uint64_t, CMTime *);
  double v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  double v169;
  double v170;
  int v171;
  void *v172;
  double v173;
  double v174;
  int *v175;
  double v176;
  double v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  double v184;
  double v185;
  void *v186;
  double v187;
  double v188;
  float v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  float v195;
  double v196;
  double v197;
  _BOOL4 v198;
  int v199;
  _BOOL4 v200;
  unsigned int v201;
  uint64_t v202;
  void *v203;
  double v204;
  float v205;
  float v206;
  uint64_t v207;
  int v208;
  float v209;
  int v210;
  void *v211;
  void *v212;
  void *v213;
  float v214;
  float v215;
  int v216;
  double v217;
  double v218;
  float v219;
  unint64_t v220;
  int v221;
  unint64_t v222;
  int v223;
  void *v224;
  unint64_t v225;
  int v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  BWSecureMetadataOutputConfiguration *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t k;
  unsigned int v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t m;
  unsigned int v252;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  float v267;
  float v268;
  double v269;
  double v270;
  int v271;
  float v272;
  int v273;
  double v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BOOL8 v279;
  BOOL v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  int v287;
  char v288;
  float v289;
  float v290;
  float v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  void *v295;
  uint64_t v296;
  double RectWithAspectRatioInsideDimensions;
  double v298;
  float v299;
  int v300;
  BOOL v301;
  char v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  __int128 v310;
  float v311;
  char v312;
  float v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  float v317;
  float v318;
  float v319;
  uint64_t v320;
  double v321;
  _BOOL4 v322;
  _BOOL4 v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  double v335;
  _BOOL4 v337;
  uint64_t v338;
  int v339;
  void *v340;
  unsigned int v341;
  uint64_t v342;
  int v343;
  int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  float v349;
  int v350;
  int shouldCaptureStillsFromVideoStream;
  unsigned int v352;
  int v353;
  int StillImageNoiseReductionAndFusionScheme;
  unsigned __int8 v355;
  id v356;
  unsigned int v357;
  CFTypeRef cf;
  void *v359;
  int shouldUseActionCameraCompanionIndex;
  void *v361;
  unsigned int v363;
  float v364;
  unsigned int v365;
  void *v366;
  void *v367;
  id obj;
  void *v370;
  void *v371;
  __int128 v372;
  uint64_t v373;
  __int128 v374;
  uint64_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  char v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  id v394;
  unsigned int v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  _QWORD v400[4];
  _BYTE v401[128];
  _BYTE v402[128];
  _BYTE v403[128];
  CMTime v404;
  uint64_t v405;

  v405 = *MEMORY[0x1E0C80C00];
  v395 = 0;
  v394 = 0;
  v371 = (void *)objc_msgSend(a1, "captureStream");
  v93 = objc_msgSend(a1, "portType");
  v94 = objc_msgSend(a2, "source");
  v95 = (void *)objc_msgSend(a2, "requiredFormat");
  v96 = v94;
  v97 = v93;
  v98 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v96, v95, v93, &v395);
  v99 = (void *)v98;
  if (v395)
  {
    FigDebugAssert3();
    goto LABEL_475;
  }
  if (!v98)
  {
    FigDebugAssert3();
    v395 = -12780;
    goto LABEL_475;
  }
  v100 = (const void *)FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(objc_msgSend(a2, "source"), v97, &v395);
  if (v395)
  {
    cf = v100;
    goto LABEL_34;
  }
  if (!v100)
  {
    v100 = (const void *)objc_msgSend(a2, "source");
    if (v100)
      v100 = CFRetain(v100);
  }
  cf = v100;
  v356 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", a6, 1);
  v350 = csp_stabilizationMethodWithMostOverscan(v356);
  StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(a2, "source"), &v395);
  if (v395)
    goto LABEL_34;
  v359 = (void *)v97;
  v348 = csp_willDecoupleWarperFromStreamProcessing(a14);
  v346 = a8;
  if ((int)FigCapturePlatformIdentifier() < 10)
  {
    v347 = 0;
  }
  else if ((objc_msgSend(a14, "containsObject:", &unk_1E49F9BD0) & 1) != 0)
  {
    v347 = 1;
  }
  else
  {
    v347 = objc_msgSend(a14, "containsObject:", &unk_1E49F9C00);
  }
  v345 = a7;
  obj = a4;
  shouldCaptureStillsFromVideoStream = csp_shouldCaptureStillsFromVideoStream(a2, v99, a20, a5 != 0);
  v344 = objc_msgSend(a5, "irisVISEnabled");
  v352 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "irisFrameHarvestingEnabled");
  v353 = objc_msgSend(a2, "bravoShiftMitigationEnabled");
  v393 = 0;
  v392 = 0;
  v391 = 0;
  v390 = *MEMORY[0x1E0C9D538];
  v389 = 0;
  v101 = objc_alloc_init(BWMultiStreamCameraSourceNodeConfiguration);
  if (objc_msgSend(v99, "isVideoHDRFusionSupported"))
    BWColorSpaceIsHDR(objc_msgSend(a2, "colorSpace"));
  shouldUseActionCameraCompanionIndex = csp_shouldUseActionCameraCompanionIndex(a2, (uint64_t)a6, a15);
  shouldUseFullBinSIFRCompanionIndex = csp_shouldUseFullBinSIFRCompanionIndex(v99, (void *)objc_msgSend(v371, "supportedFormats"), a5, a33 & a52, a54);
  v396 = 0u;
  v397 = 0u;
  v398 = 0u;
  v399 = 0u;
  v103 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v396, &v404, 16);
  v370 = a2;
  if (v103)
  {
    v104 = v103;
    v105 = *(_QWORD *)v397;
    while (2)
    {
      for (i = 0; i != v104; ++i)
      {
        if (*(_QWORD *)v397 != v105)
          objc_enumerationMutation(a6);
        v107 = *(void **)(*((_QWORD *)&v396 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_msgSend(v107, "attachMetadataToVideoBuffers") & 1) != 0)
        {
          v108 = 1;
          goto LABEL_26;
        }
      }
      v104 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v396, &v404, 16);
      if (v104)
        continue;
      break;
    }
    v108 = 0;
LABEL_26:
    a2 = v370;
  }
  else
  {
    v108 = 0;
  }
  v109 = objc_msgSend(a2, "source");
  v110 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v110)
  {
    v395 = -12782;
    goto LABEL_34;
  }
  v338 = *MEMORY[0x1E0C9AE00];
  v395 = v110(v109);
  if (v395)
    goto LABEL_34;
  v339 = v108;
  if (a74)
  {
    if (!objc_msgSend(v99, "depthCompanionFormat"))
    {
      FigDebugAssert3();
      v395 = -12780;
      goto LABEL_473;
    }
    v111 = 1;
  }
  else
  {
    v111 = a21;
  }
  v112 = objc_msgSend(a3, "depthType");
  if (a26)
    v113 = 0;
  else
    v113 = v112 == 3;
  v114 = v113;
  v341 = v114;
  if (v113)
  {
    a62 = a63;
    v342 = 0;
    v115 = objc_msgSend(v99, "fsdNetCompanionFormat") != 0;
    v116 = 1;
  }
  else
  {
    v115 = 0;
    HIDWORD(v342) = a83;
    LODWORD(v342) = a82;
    v116 = a12;
  }
  v365 = v116;
  v367 = a3;
  v361 = a6;
  v340 = a1;
  if (a80)
    v117 = objc_msgSend(v99, "stereoVideoCompanionFormat") != 0;
  else
    v117 = 0;
  v388 = 0;
  v118 = objc_msgSend(v370, "sensorHDREnabled");
  v119 = objc_msgSend(v370, "highlightRecoveryEnabled");
  objc_msgSend(v370, "geometricDistortionCorrectionEnabled");
  -[BWMultiStreamCameraSourceNodeConfiguration setFormatIndex:](v101, "setFormatIndex:", csp_formatIndex(v99, a20, v111, v115, shouldUseActionCameraCompanionIndex, shouldUseFullBinSIFRCompanionIndex, a77, v117, v353, v118, v119, a29, &v388, &v392, &v393, &v391,
      &v390,
      &v389));
  v120 = v371;
  if (objc_msgSend(v99, "fastSwitchingMainCaptureStreamFormat"))
  {
    v121 = (void *)objc_msgSend(v99, "fastSwitchingMainCaptureStreamFormat");
    v122 = (void *)objc_msgSend(v121, "frontEndScalerCompanionFormats");
    if (objc_msgSend(v122, "count"))
      v121 = (void *)objc_msgSend(v122, "firstObject");
    v123 = objc_msgSend(v121, "formatIndex");
    v124 = (void *)objc_msgSend((id)objc_msgSend(v371, "supportedFormats"), "objectAtIndexedSubscript:", v123);
    v125 = (void *)objc_msgSend(v124, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE0]);
    if ((_DWORD)v123 == -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex")
      || objc_msgSend(v125, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex")))&& (v126 = csp_formatUsesFES(v124), v126 == csp_formatUsesFES((void *)objc_msgSend((id)objc_msgSend(v371, "supportedFormats"), "objectAtIndexedSubscript:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex")))))
    {
      -[BWMultiStreamCameraSourceNodeConfiguration setFastSwitchingMainFormatIndex:](v101, "setFastSwitchingMainFormatIndex:", v123);
      objc_msgSend((id)objc_msgSend(v124, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "floatValue");
      -[BWMultiStreamCameraSourceNodeConfiguration setFastSwitchingMainFormatMaxFrameRate:](v101, "setFastSwitchingMainFormatMaxFrameRate:");
    }
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setActiveStreamingNondisruptiveSwitchingFormatIndices:](v101, "setActiveStreamingNondisruptiveSwitchingFormatIndices:", csp_activeStreamingNondisruptiveSwitchingFormatIndices(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex"), (void *)objc_msgSend(v371, "supportedFormats"), objc_msgSend(v99, "configureForNonDisruptiveFullBinSIFRSwitching"), objc_msgSend(v367, "ultraHighResolutionZeroShutterLagSupportEnabled")));
  -[BWMultiStreamCameraSourceNodeConfiguration setSifrBinningFactorOverrideForNondisruptiveSwitching:](v101, "setSifrBinningFactorOverrideForNondisruptiveSwitching:", objc_msgSend(v99, "sifrBinningFactorOverrideForNondisruptiveSwitching"));
  -[BWMultiStreamCameraSourceNodeConfiguration setQuadraSubPixelSwitchingParameters:](v101, "setQuadraSubPixelSwitchingParameters:", objc_msgSend(v99, "quadraSubPixelSwitchingParameters"));
  v127 = a5;
  v128 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "maxPhotoDimensions");
  if (objc_msgSend(v99, "isPhotoFormat")
    && (int)v128 > (int)objc_msgSend(v99, "dimensions")
    && SHIDWORD(v128) > (int)((unint64_t)objc_msgSend(v99, "dimensions") >> 32)
    || objc_msgSend(v99, "configureForNonDisruptiveFullBinSIFRSwitching") && a54)
  {
    -[BWMultiStreamCameraSourceNodeConfiguration setActiveUltraHighResStillImageNondisruptiveSwitchingFormatIndices:](v101, "setActiveUltraHighResStillImageNondisruptiveSwitchingFormatIndices:", csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex"), (void *)objc_msgSend(v371, "supportedFormats")));
  }
  v129 = v370;
  v366 = v99;
  v337 = v117;
  if (objc_msgSend(v99, "isFastSwitchingConfigurationRequired"))
  {
    v130 = (void *)objc_msgSend(v99, "frontEndScalerCompanionFormats");
    v131 = objc_msgSend(v130, "count");
    v132 = v99;
    if (v131)
      v132 = (void *)objc_msgSend(v130, "firstObject");
    v133 = objc_msgSend(v132, "formatIndex");
    if (v133 == -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex"))
    {
      v134 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
      UnderlyingFastSwitchingFormatsForFormatAndPortType = (void *)FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType(objc_msgSend(v370, "source"), (uint64_t)v359, &v395);
      v384 = 0u;
      v385 = 0u;
      v386 = 0u;
      v387 = 0u;
      v136 = objc_msgSend(UnderlyingFastSwitchingFormatsForFormatAndPortType, "countByEnumeratingWithState:objects:count:", &v384, v403, 16);
      if (v136)
      {
        v137 = v136;
        v138 = *(_QWORD *)v385;
        do
        {
          for (j = 0; j != v137; ++j)
          {
            if (*(_QWORD *)v385 != v138)
              objc_enumerationMutation(UnderlyingFastSwitchingFormatsForFormatAndPortType);
            v140 = *(void **)(*((_QWORD *)&v384 + 1) + 8 * j);
            v141 = (void *)objc_msgSend(v140, "frontEndScalerCompanionFormats");
            v142 = objc_msgSend(v141, "count");
            v143 = v140;
            if (v142)
              v143 = (void *)objc_msgSend(v141, "firstObject");
            v144 = objc_msgSend(v143, "formatIndex");
            objc_msgSend(v134, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v144));
            objc_msgSend(v134, "addObjectsFromArray:", csp_activeStreamingNondisruptiveSwitchingFormatIndices(v144, (void *)objc_msgSend(v371, "supportedFormats"), objc_msgSend(v140, "configureForNonDisruptiveFullBinSIFRSwitching"), 0));
            objc_msgSend(v134, "removeObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex")));
          }
          v137 = objc_msgSend(UnderlyingFastSwitchingFormatsForFormatAndPortType, "countByEnumeratingWithState:objects:count:", &v384, v403, 16);
        }
        while (v137);
      }
      if (objc_msgSend(v134, "count"))
        v145 = objc_msgSend(v134, "allObjects");
      else
        v145 = 0;
      v99 = v366;
      v129 = v370;
      v120 = v371;
      v127 = a5;
      -[BWMultiStreamCameraSourceNodeConfiguration setFastSwitchingNondisruptiveFormatIndices:](v101, "setFastSwitchingNondisruptiveFormatIndices:", v145);
    }
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setCropDimensionsWhenFESIsEnabled:](v101, "setCropDimensionsWhenFESIsEnabled:", v393);
  objc_msgSend(v129, "maxFrameRateClientOverride");
  -[BWMultiStreamCameraSourceNodeConfiguration setMaximumSupportedFrameRate:](v101, "setMaximumSupportedFrameRate:");
  objc_msgSend((id)objc_msgSend(v129, "requiredFormat"), "minSupportedFrameRate");
  -[BWMultiStreamCameraSourceNodeConfiguration setMinimumSupportedFrameRate:](v101, "setMinimumSupportedFrameRate:");
  v146 = objc_msgSend((id)objc_msgSend(v129, "requiredFormat"), "isSIFRSupported");
  if (v388)
    v147 = v146;
  else
    v147 = 0;
  v388 = v147;
  v148 = (void *)objc_msgSend((id)objc_msgSend(v120, "stream"), "supportedProperties");
  if (objc_msgSend(v148, "objectForKeyedSubscript:", *MEMORY[0x1E0D07658]))
  {
    if (v388 && objc_msgSend(v129, "sourcePosition") == 1)
    {
      v404.value = 0;
      v149 = *(void (**)(CFTypeRef, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v149)
        v149(cf, CFSTR("AttributesDictionary"), v338, &v404);
      v150 = objc_msgSend((id)objc_msgSend((id)v404.value, "objectForKeyedSubscript:", CFSTR("MainToSIFRSkipRatioFor60FPS")), "intValue");
      -[BWMultiStreamCameraSourceNodeConfiguration maximumSupportedFrameRate](v101, "maximumSupportedFrameRate");
      if (v151 != 60.0 || !(_DWORD)v150)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration maximumSupportedFrameRate](v101, "maximumSupportedFrameRate");
        if (v152 <= 60.0)
        {
          if (objc_msgSend((id)v404.value, "objectForKeyedSubscript:", CFSTR("MainToSIFRFrameRateRatio")))
            v150 = objc_msgSend((id)objc_msgSend((id)v404.value, "objectForKeyedSubscript:", CFSTR("MainToSIFRFrameRateRatio")), "intValue");
          else
            v150 = 2;
        }
        else
        {
          v150 = 4;
        }
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setMainToSIFRFrameRateRatio:](v101, "setMainToSIFRFrameRateRatio:", v150);

    }
    else
    {
      -[BWMultiStreamCameraSourceNodeConfiguration setMainToSIFRFrameRateRatio:](v101, "setMainToSIFRFrameRateRatio:", 1);
    }
  }
  if (v388)
    v153 = objc_msgSend(v129, "highlightRecoveryEnabled");
  else
    v153 = 0;
  v154 = a46 | v153;
  -[BWMultiStreamCameraSourceNodeConfiguration setHighlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream:](v101, "setHighlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream:", v154);
  v155 = (((a28 ^ 1) & 1) != 0 || (a47 & 1) != 0 || a46)
      && -[BWMultiStreamCameraSourceNodeConfiguration highlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream](v101, "highlightRecoveryEnabledWhenConfiguredAsMasterOrSingleStream");
  -[BWMultiStreamCameraSourceNodeConfiguration setHighlightRecoveryEnabledWhenConfiguredAsSlave:](v101, "setHighlightRecoveryEnabledWhenConfiguredAsSlave:", v155);
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoHDRImageStatisticsEnabled:](v101, "setVideoHDRImageStatisticsEnabled:", a51);
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoHDRFusionEnabled:](v101, "setVideoHDRFusionEnabled:", 0);
  if (v365)
  {
    -[BWMultiStreamCameraSourceNodeConfiguration setDolbyVisionMetadataOnVideoCaptureOutputEnabled:](v101, "setDolbyVisionMetadataOnVideoCaptureOutputEnabled:", -[BWMultiStreamCameraSourceNodeConfiguration videoHDRImageStatisticsEnabled](v101, "videoHDRImageStatisticsEnabled"));
    v156 = 0;
  }
  else
  {
    -[BWMultiStreamCameraSourceNodeConfiguration setDolbyVisionMetadataOnVideoCaptureOutputEnabled:](v101, "setDolbyVisionMetadataOnVideoCaptureOutputEnabled:", 0);
    v156 = -[BWMultiStreamCameraSourceNodeConfiguration videoHDRImageStatisticsEnabled](v101, "videoHDRImageStatisticsEnabled");
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setDolbyVisionMetadataOnPreviewOutputEnabled:](v101, "setDolbyVisionMetadataOnPreviewOutputEnabled:", v156);
  -[BWMultiStreamCameraSourceNodeConfiguration setUsesFirmwareStillImageOutput:](v101, "setUsesFirmwareStillImageOutput:", shouldCaptureStillsFromVideoStream ^ 1u);
  v157 = objc_msgSend(v99, "isHighPhotoQualitySupported");
  v158 = objc_msgSend(v99, "usesPacked10BitFirmwareStillImageOutputPixelFormat");
  v159 = (v157 ^ 1) & v158;
  if (((v157 ^ 1) & 1) == 0 && v158)
    v159 = (int)objc_msgSend((id)objc_msgSend(v127, "irisSinkConfiguration", v159), "maxQualityPrioritization") > 1;
  -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputRequires10BitPixelFormat:](v101, "setStillImageOutputRequires10BitPixelFormat:", v159);
  -[BWMultiStreamCameraSourceNodeConfiguration setSensorCropDimensions:](v101, "setSensorCropDimensions:", v391);
  -[BWMultiStreamCameraSourceNodeConfiguration setSensorCenterOffset:](v101, "setSensorCenterOffset:", v390);
  -[BWMultiStreamCameraSourceNodeConfiguration setPostGDCCropDimensions:](v101, "setPostGDCCropDimensions:", v389);
  -[BWMultiStreamCameraSourceNodeConfiguration setCropAspectRatio:](v101, "setCropAspectRatio:", objc_msgSend(v99, "sourceCropAspectRatio"));
  -[BWMultiStreamCameraSourceNodeConfiguration setHorizontalSensorBinningFactor:](v101, "setHorizontalSensorBinningFactor:", objc_msgSend(v99, "horizontalSensorBinningFactor"));
  -[BWMultiStreamCameraSourceNodeConfiguration setVerticalSensorBinningFactor:](v101, "setVerticalSensorBinningFactor:", objc_msgSend(v99, "verticalSensorBinningFactor"));
  -[BWMultiStreamCameraSourceNodeConfiguration setFesBinningFactorHorizontal:](v101, "setFesBinningFactorHorizontal:", objc_msgSend(v99, "fesBinningFactorHorizontal"));
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoStabilizationEnabled:](v101, "setVideoStabilizationEnabled:", objc_msgSend(a14, "containsObject:", &unk_1E49F9D50));
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoStabilizationMethods:](v101, "setVideoStabilizationMethods:", v356);
  -[BWMultiStreamCameraSourceNodeConfiguration setVideoStabilizationTypeISPMeshEnabled:](v101, "setVideoStabilizationTypeISPMeshEnabled:", objc_msgSend(a14, "containsObject:", &unk_1E49F9C00));
  if ((a70 & 1) != 0 || a81)
  {
    -[BWMultiStreamCameraSourceNodeConfiguration setLtmLookUpTableMetadataEnabledForStreaming:](v101, "setLtmLookUpTableMetadataEnabledForStreaming:", 1);
    -[BWMultiStreamCameraSourceNodeConfiguration setLtmThumbnailMetadataEnabledForStreaming:](v101, "setLtmThumbnailMetadataEnabledForStreaming:", 1);
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setLtmThumbnailMetadataEnabledForStreaming:](v101, "setLtmThumbnailMetadataEnabledForStreaming:", -[BWMultiStreamCameraSourceNodeConfiguration ltmThumbnailMetadataEnabledForStreaming](v101, "ltmThumbnailMetadataEnabledForStreaming"));
  if ((a56 & 1) != 0 || (a57 & 1) != 0 || a58)
  {
    v404.value = 0;
    v162 = *(void (**)(CFTypeRef, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v162)
      v162(cf, CFSTR("AttributesDictionary"), v338, &v404);
    v161 = objc_msgSend((id)objc_msgSend((id)v404.value, "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrection")), "BOOLValue");
    ShouldEnableMaximumGeometricDistortionCorrection = FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection((uint64_t)cf, &v395);

    if (v395)
      goto LABEL_34;
  }
  else
  {
    ShouldEnableMaximumGeometricDistortionCorrection = 0;
    v161 = 0;
  }
  -[BWMultiStreamCameraSourceNodeConfiguration setGeometricDistortionCorrectionSupported:](v101, "setGeometricDistortionCorrectionSupported:", v161);
  -[BWMultiStreamCameraSourceNodeConfiguration setGeometricDistortionCorrectionOnStillImageOutputEnabled:](v101, "setGeometricDistortionCorrectionOnStillImageOutputEnabled:", v161 & a56);
  -[BWMultiStreamCameraSourceNodeConfiguration setGeometricDistortionCorrectionOnVideoCaptureOutputEnabled:](v101, "setGeometricDistortionCorrectionOnVideoCaptureOutputEnabled:", v161 & a57);
  -[BWMultiStreamCameraSourceNodeConfiguration setGeometricDistortionCorrectionOnPreviewOutputEnabled:](v101, "setGeometricDistortionCorrectionOnPreviewOutputEnabled:", v161 & a58);
  -[BWMultiStreamCameraSourceNodeConfiguration setMaximumGeometricDistortionCorrectionEnabled:](v101, "setMaximumGeometricDistortionCorrectionEnabled:", v161 & ShouldEnableMaximumGeometricDistortionCorrection);
  -[BWMultiStreamCameraSourceNodeConfiguration setStillImageGeometricDistortionCorrectionExpansionCoversOverscan:](v101, "setStillImageGeometricDistortionCorrectionExpansionCoversOverscan:", a59);
  -[BWMultiStreamCameraSourceNodeConfiguration setClientVideoFormat:](v101, "setClientVideoFormat:", objc_msgSend(v99, "format"));
  -[BWMultiStreamCameraSourceNodeConfiguration setDeferStreamingOutputsEnable:](v101, "setDeferStreamingOutputsEnable:", a61);
  -[BWMultiStreamCameraSourceNodeConfiguration setSecondaryScalerIsNotAvailable:](v101, "setSecondaryScalerIsNotAvailable:", a22);
  -[BWMultiStreamCameraSourceNodeConfiguration setOptimizeBandwidthForPreviewOutput:](v101, "setOptimizeBandwidthForPreviewOutput:", (int)FigCapturePlatformIdentifier() > 5);
  -[BWMultiStreamCameraSourceNodeConfiguration setPrimaryScalerDecoupled:](v101, "setPrimaryScalerDecoupled:", v348);
  -[BWMultiStreamCameraSourceNodeConfiguration setPrimaryScalerDeprioritized:](v101, "setPrimaryScalerDeprioritized:", v347);
  -[BWMultiStreamCameraSourceNodeConfiguration setPreferredPreviewMaxFrameRate:](v101, "setPreferredPreviewMaxFrameRate:", BWGetMaximumDisplayFrequency());
  -[BWMultiStreamCameraSourceNodeConfiguration setStreamingRequiredWhenConfiguredAsSlave:](v101, "setStreamingRequiredWhenConfiguredAsSlave:", a47);
  *(float *)&v163 = FigVideoCaptureSourceUIBaseZoomFactor(objc_msgSend(v370, "source"), &v395);
  -[BWMultiStreamCameraSourceNodeConfiguration setUiBaseZoomFactor:](v101, "setUiBaseZoomFactor:", v163);
  if (v395)
  {
LABEL_34:
    FigDebugAssert3();
    goto LABEL_473;
  }
  v349 = a9;
  v164 = HIDWORD(a62);
  v165 = objc_msgSend(v99, "shouldPreferSIFRFormatWithHighlightRecoveryEnabled:", v154);
  v166 = objc_msgSend(v370, "geometricDistortionCorrectionEnabled");
  objc_msgSend(v99, "stabilizationOverscanFromSensorForFESCropDimensions:preferSIFRFormat:geometricDistortionCorrection:useFESCompanionIndex:", v392, v165, v166, a20);
  v168 = v167;
  v170 = v169;
  if ((a28 ^ 1 | a29) == 1)
    v171 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "bravoConstituentPhotoDeliveryEnabled") ^ 1;
  else
    v171 = 0;
  v172 = v359;
  v173 = *MEMORY[0x1E0C9D820];
  v174 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (a17)
  {
    if ((objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A38]) & 1) != 0
      || objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A50]))
    {
      v175 = &kFigCaptureOfflineStillImageVideoStabilizationOverscanPercentage_FrontCamera;
    }
    else
    {
      v175 = &kFigCaptureOfflineStillImageVideoStabilizationOverscanPercentage_BackCamera;
    }
    v177 = *(float *)v175;
    v176 = v177;
    goto LABEL_188;
  }
  v176 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v177 = *MEMORY[0x1E0C9D820];
  switch(v350)
  {
    case 0:
      goto LABEL_188;
    case 1:
      objc_msgSend(v99, "stabilizationOverscanPercentageOverrideForStandard");
      if (v179 <= 0.0)
      {
        v176 = 0.100000001;
      }
      else
      {
        objc_msgSend(v99, "stabilizationOverscanPercentageOverrideForStandard");
        v176 = (float)(v180 / 100.0);
      }
      goto LABEL_166;
    case 2:
    case 3:
    case 5:
      if (!v344)
      {
        objc_msgSend(v99, "stabilizationOverscanPercentageOverrideForCinematic");
        if (v178 <= 0.0)
          v176 = 0.200000003;
        else
          v176 = (float)(v178 / 100.0);
        if (a15)
        {
          if (objc_msgSend(v370, "videoStabilizationStrength") == 3)
          {
            v181 = 50.0;
          }
          else
          {
            objc_msgSend(v370, "videoStabilizationStrength");
            v181 = 75.0;
          }
          v172 = v359;
          v176 = (float)(v181 / 100.0);
          csp_trueVideoCaptureEnabled(v361);
LABEL_166:
          v177 = v176;
          goto LABEL_167;
        }
        if (v350 != 5)
        {
          v186 = v367;
LABEL_163:
          if (csp_trueVideoCaptureEnabled(v361) && objc_msgSend(v186, "position") == 1)
          {
            LODWORD(v188) = 0;
            -[BWMultiStreamCameraSourceNodeConfiguration setAdditionalVISOverscanReservedInZoom:](v101, "setAdditionalVISOverscanReservedInZoom:", v188);
            v176 = 0.18;
          }
          goto LABEL_166;
        }
        v182 = a10;
        objc_msgSend(v99, "stabilizationOverscanPercentageOverrideForCinematicExtendedEnhanced");
        if (v183 == 0.0)
          v183 = 28.0;
        v184 = v183;
        if (v337)
          v185 = 46.0;
        else
          v185 = v184;
        v186 = v367;
        if ((objc_msgSend(v367, "cinematicVideoEnabled") & 1) != 0)
          goto LABEL_161;
        if (objc_msgSend(v367, "isBravoVariant"))
        {
          a11 = (v185 / 100.0 + 1.0) / (v176 + 1.0) + -1.0;
          if ((objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) == 0)
          {
            *(float *)&v187 = (v185 / 100.0 + 1.0) / (v176 + 1.0) + -1.0;
            -[BWMultiStreamCameraSourceNodeConfiguration setAdditionalVISOverscanReservedInZoom:](v101, "setAdditionalVISOverscanReservedInZoom:", v187);
          }
          goto LABEL_162;
        }
        if ((objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) == 0)
LABEL_161:
          v176 = v185 / 100.0;
LABEL_162:
        a10 = v182;
        goto LABEL_163;
      }
      if (v171)
        v177 = v168;
      else
        v177 = *MEMORY[0x1E0C9D820];
      if (v171)
        v176 = v170;
      else
        v176 = *(double *)(MEMORY[0x1E0C9D820] + 8);
LABEL_167:
      if ((v177 != v173 || v176 != v174)
        && !-[BWMultiStreamCameraSourceNodeConfiguration videoStabilizationEnabled](v101, "videoStabilizationEnabled")
        && (objc_msgSend(v367, "cinematicVideoEnabled") & 1) == 0
        && v350 != 4)
      {
        v364 = a10;
        v189 = (float)(int)a62 / (float)SHIDWORD(a62);
        if (FigCaptureVideoDimensionsAreValid(v389))
        {
          v190 = v389;
          LODWORD(v191) = HIDWORD(v389);
        }
        else
        {
          if (objc_msgSend(v370, "geometricDistortionCorrectionEnabled"))
          {
            v192 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v99, "frontEndScalerCompanionFormats"), "lastObject"), "geometricDistortionCorrectedNativeDimensions");
            v190 = v192;
            v191 = HIDWORD(v192);
          }
          else
          {
            v190 = 0;
            v191 = 0;
          }
          if (!FigCaptureVideoDimensionsAreValid(v190 | (v191 << 32)))
          {
            if (FigCaptureVideoDimensionsAreValid(v391))
            {
              v193 = v391;
              LODWORD(v191) = HIDWORD(v391);
            }
            else
            {
              v194 = objc_msgSend(v99, "sensorDimensions");
              v193 = v194;
              v191 = HIDWORD(v194);
            }
            v190 = objc_msgSend(v99, "horizontalSensorBinningFactor") * v193;
            LODWORD(v191) = objc_msgSend(v99, "verticalSensorBinningFactor") * v191;
          }
        }
        v195 = (float)v190 / (float)(int)v191;
        if (vabds_f32(v189, v195) <= 0.01)
        {
          a10 = v364;
          v172 = v359;
        }
        else
        {
          v196 = v189;
          v172 = v359;
          if (v189 <= v195)
            v177 = (v176 + 1.0) * v195 / v196 + -1.0;
          else
            v176 = (v177 + 1.0) * v196 / v195 + -1.0;
          a10 = v364;
        }
      }
LABEL_188:
      -[BWMultiStreamCameraSourceNodeConfiguration setVisOverscan:](v101, "setVisOverscan:", v177, v176);
      -[BWMultiStreamCameraSourceNodeConfiguration setSensorOverscan:](v101, "setSensorOverscan:", v168, v170);
      *(float *)&v197 = a11;
      -[BWMultiStreamCameraSourceNodeConfiguration setAdditionalVISOverscanWhenRecording:](v101, "setAdditionalVISOverscanWhenRecording:", v197);
      if (v171)
      {
        if ((v352 & v344) == 1)
          v198 = v176 != v174 || v177 != v173;
        else
          v198 = 0;
        v199 = csp_gdcExpandsImageDimensions(objc_msgSend(v370, "source"));
        if (v199)
        {
          v199 = objc_msgSend(v99, "gdcInStillImageSinkPipelineSupported");
          if (v199)
            v199 = FigCaptureVideoDimensionsAreValid(objc_msgSend(v99, "postGDCCropDimensions"));
        }
        if (a55)
        {
          v200 = v168 != v173;
          if (v170 != v174)
            v200 = 1;
        }
        else
        {
          v200 = 0;
        }
        v201 = (v198 || v200) | v199;
        if ((a17 & 1) != 0)
          v202 = 1;
        else
          v202 = v201;
        -[BWMultiStreamCameraSourceNodeConfiguration setIncludeOverscanOnStillImageOutput:](v101, "setIncludeOverscanOnStillImageOutput:", v202);
        -[BWMultiStreamCameraSourceNodeConfiguration setIncludeOverscanInStillImageFinalCropRect:](v101, "setIncludeOverscanInStillImageFinalCropRect:", a17);
        v172 = v359;
      }
      objc_msgSend(a14, "count");
      if (v353)
      {
        if (objc_msgSend(v172, "isEqualToString:", *MEMORY[0x1E0D05A18]))
        {
          v203 = (void *)objc_msgSend(v367, "bravoTelephotoCaptureStream");
        }
        else
        {
          if (!objc_msgSend(v172, "isEqualToString:", *MEMORY[0x1E0D05A28]))
          {
LABEL_218:
            v206 = a10;
            if (a46)
            {
              if (v168 <= v170)
                v218 = v170;
              else
                v218 = v168;
              v219 = v218;
              v204 = 1.2 / (v219 + 1.0) + -1.0;
              v205 = v204;
            }
            else if (objc_msgSend(v367, "parallaxMitigationBasedOnZoomFactorEnabled"))
            {
              v205 = 0.15;
            }
            else
            {
              v205 = 0.1;
            }
            goto LABEL_231;
          }
          v203 = (void *)objc_msgSend(v367, "captureStream");
        }
        objc_msgSend(v203, "baseZoomFactor");
        v215 = v214;
        v216 = objc_msgSend(v367, "parallaxMitigationBasedOnZoomFactorEnabled");
        LODWORD(v217) = *(_DWORD *)"fff?";
        if (v216)
          *(float *)&v217 = 0.97;
        *(float *)&v217 = v215 * *(float *)&v217;
        -[BWMultiStreamCameraSourceNodeConfiguration setBravoShiftMitigationMaxZoomFactor:](v101, "setBravoShiftMitigationMaxZoomFactor:", v217);
        goto LABEL_218;
      }
      if (objc_msgSend(+[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", obj, 0), "containsObject:", &unk_1E49F9C00))
      {
        v205 = 0.15;
        v206 = a10;
        if (a26 - 1 > 1)
          goto LABEL_231;
        v207 = objc_msgSend(v99, "previewDimensions");
        v208 = HIDWORD(v207);
        v209 = (float)(int)v207;
        v210 = (int)(float)((float)(int)v207 * 1.15) + 4;
        v211 = (void *)objc_msgSend((id)objc_msgSend(v371, "supportedFormats"), "objectAtIndexedSubscript:", -[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex"));
        v212 = (void *)objc_msgSend(v211, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE8]);
        v213 = (void *)objc_msgSend(v212, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FE0]);
        objc_msgSend((id)objc_msgSend(v213, "objectForKeyedSubscript:", *MEMORY[0x1E0D08038]), "floatValue");
        if ((float)(*(float *)&v204 * (float)v210) <= 640.0
          && (float)(*(float *)&v204 * (float)((int)(float)((float)v208 * 1.15) + 4)) <= (float)(int)(float)((float)((float)v208 / v209) * 640.0))
        {
          goto LABEL_231;
        }
        goto LABEL_227;
      }
      if ((objc_msgSend(v367, "isBravoVariant") & 1) == 0
        && csp_supportsNondisruptiveSwitchingZoomFactors(-[BWMultiStreamCameraSourceNodeConfiguration formatIndex](v101, "formatIndex"), -[BWMultiStreamCameraSourceNodeConfiguration activeStreamingNondisruptiveSwitchingFormatIndices](v101, "activeStreamingNondisruptiveSwitchingFormatIndices"), (void *)objc_msgSend(v371, "supportedFormats"))&& v350)
      {
        v206 = a10;
LABEL_227:
        v205 = 0.1;
LABEL_231:
        *(float *)&v204 = v205;
        -[BWMultiStreamCameraSourceNodeConfiguration setOverscanForShiftMitigation:](v101, "setOverscanForShiftMitigation:", v204);
        a10 = v206;
      }
      v220 = objc_msgSend(v99, "previewDimensions");
      v221 = v220;
      v222 = HIDWORD(v220);
      v223 = FigCapturePlatformIdentifier();
      if ((a57 | a58) == 1 && v223 >= 7 && a28)
      {
        v224 = v370;
        v225 = objc_msgSend((id)objc_msgSend(v370, "depthDataFormat"), "depthEngineOutputDimensions");
        v226 = (int)((double)(2 * (int)v225) * 1.5);
        v227 = (int)((double)(int)((v225 >> 31) & 0xFFFFFFFE) * 1.5);
        if (v221 <= v226)
          v221 = (int)((double)(2 * (int)v225) * 1.5);
        if ((int)v222 <= v227)
          v222 = v227;
        else
          v222 = v222;
        if ((int)a62 <= v226)
          v228 = (int)((double)(2 * (int)v225) * 1.5);
        else
          v228 = a62;
        if (SHIDWORD(a62) <= v227)
          v164 = v227;
        else
          v164 = HIDWORD(a62);
      }
      else
      {
        v224 = v370;
        v228 = a62;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setPreferredPreviewDimensions:](v101, "setPreferredPreviewDimensions:", v221 | (v222 << 32));
      -[BWMultiStreamCameraSourceNodeConfiguration setVideoCaptureDimensions:](v101, "setVideoCaptureDimensions:", v228 | (v164 << 32));
      -[BWMultiStreamCameraSourceNodeConfiguration setVideoCaptureDimensionsIncludeVISOverscan:](v101, "setVideoCaptureDimensionsIncludeVISOverscan:", v341);
      -[BWMultiStreamCameraSourceNodeConfiguration setBackgroundBlurEnabled:](v101, "setBackgroundBlurEnabled:", objc_msgSend(v224, "backgroundBlurEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setStudioLightingEnabled:](v101, "setStudioLightingEnabled:", objc_msgSend(v224, "studioLightingEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setReactionEffectsEnabled:](v101, "setReactionEffectsEnabled:", objc_msgSend(v224, "reactionEffectsEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setBackgroundReplacementEnabled:](v101, "setBackgroundReplacementEnabled:", objc_msgSend(v224, "backgroundReplacementEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setCinematicFramingEnabled:](v101, "setCinematicFramingEnabled:", objc_msgSend(v224, "cinematicFramingEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setDeskCamEnabled:](v101, "setDeskCamEnabled:", objc_msgSend(v224, "deskCamEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setManualCinematicFramingEnabled:](v101, "setManualCinematicFramingEnabled:", objc_msgSend(v224, "manualCinematicFramingEnabled"));
      v357 = v365 ^ 1;
      if (objc_msgSend(obj, "count"))
        v229 = v365 ^ 1;
      else
        v229 = 0;
      -[BWMultiStreamCameraSourceNodeConfiguration setPreviewOutputEnabled:](v101, "setPreviewOutputEnabled:", v229);
      if (a5)
        v230 = 0;
      else
        v230 = a33;
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputEnabled:](v101, "setStillImageOutputEnabled:", a5 != 0);
      -[BWMultiStreamCameraSourceNodeConfiguration setForceFirmwareStillImageOutputEnabled:](v101, "setForceFirmwareStillImageOutputEnabled:", v230);
      -[BWMultiStreamCameraSourceNodeConfiguration setRoundingOfStillImageDimensionsToMultipleOfFourEnabled:](v101, "setRoundingOfStillImageDimensionsToMultipleOfFourEnabled:", StillImageNoiseReductionAndFusionScheme < 3);
      if (a53)
      {
        if (a5)
          v231 = shouldCaptureStillsFromVideoStream ^ 1;
        else
          v231 = 0;
        v232 = a54;
        v233 = v231 | a54;
        v234 = v367;
      }
      else
      {
        v233 = 0;
        v234 = v367;
        v232 = a54;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setSensorRawStillImageOutputEnabled:](v101, "setSensorRawStillImageOutputEnabled:", v233);
      -[BWMultiStreamCameraSourceNodeConfiguration setConfigureForSoftISPSupport:](v101, "setConfigureForSoftISPSupport:", v232);
      if (objc_msgSend(v361, "count"))
        v235 = 1;
      else
        v235 = v365;
      -[BWMultiStreamCameraSourceNodeConfiguration setVideoCaptureOutputEnabled:](v101, "setVideoCaptureOutputEnabled:", v235);
      -[BWMultiStreamCameraSourceNodeConfiguration setObjectDetectionStartupDeferred:](v101, "setObjectDetectionStartupDeferred:", a23);
      v236 = FigCaptureConnectionConfigurationWithSinkType(v361, 6);
      v237 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "irisMovieCaptureEnabled");
      v238 = 1;
      if ((v237 & 1) == 0 && (a13 & 1) == 0 && (a42 & 1) == 0)
      {
        if ((objc_msgSend(a14, "containsObject:", &unk_1E49F9BB8) & 1) != 0
          || (objc_msgSend(a14, "containsObject:", &unk_1E49F9BD0) & 1) != 0)
        {
          v238 = 1;
        }
        else
        {
          v238 = v339 | objc_msgSend(a14, "containsObject:", &unk_1E49F9C00);
        }
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setDetectedFacesOnVideoCaptureOutputEnabled:](v101, "setDetectedFacesOnVideoCaptureOutputEnabled:", v238);
      if (v236)
        v239 = 0;
      else
        v239 = a13;
      -[BWMultiStreamCameraSourceNodeConfiguration setDetectedFacesOnPreviewOutputEnabled:](v101, "setDetectedFacesOnPreviewOutputEnabled:", v239);
      -[BWMultiStreamCameraSourceNodeConfiguration setDoingCMFaceTracking:](v101, "setDoingCMFaceTracking:", a13);
      if (objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", 0x1E49525B8), "BOOLValue"))
      {
        v240 = objc_alloc_init(BWSecureMetadataOutputConfiguration);
        -[BWSecureMetadataOutputConfiguration setObjectDetectionEnabled:](v240, "setObjectDetectionEnabled:", objc_msgSend(a48, "count") != 0);
        -[BWSecureMetadataOutputConfiguration setEnabledDetectedObjectTypes:](v240, "setEnabledDetectedObjectTypes:", a48);
        -[BWSecureMetadataOutputConfiguration setAttentionDetectionEnabled:](v240, "setAttentionDetectionEnabled:", a49);
        -[BWSecureMetadataOutputConfiguration setEyeReliefStatusDetectionEnabled:](v240, "setEyeReliefStatusDetectionEnabled:", a50);
        -[BWMultiStreamCameraSourceNodeConfiguration setSecureMetadataOutputConfiguration:](v101, "setSecureMetadataOutputConfiguration:", v240);
      }
      else
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setEnabledDetectedObjectTypes:](v101, "setEnabledDetectedObjectTypes:", a48);
        if (objc_msgSend(a48, "count"))
          v241 = v339 ^ 1u;
        else
          v241 = 0;
        -[BWMultiStreamCameraSourceNodeConfiguration setDetectedObjectsOutputEnabled:](v101, "setDetectedObjectsOutputEnabled:", v241);
      }
      v363 = v228;
      v382 = 0u;
      v383 = 0u;
      v380 = 0u;
      v381 = 0u;
      v242 = objc_msgSend(v361, "countByEnumeratingWithState:objects:count:", &v380, v402, 16);
      if (v242)
      {
        v243 = v242;
        v244 = *(_QWORD *)v381;
        do
        {
          for (k = 0; k != v243; ++k)
          {
            if (*(_QWORD *)v381 != v244)
              objc_enumerationMutation(v361);
            v246 = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v380 + 1) + 8 * k), "sinkConfiguration"), "sinkType");
            if (v246 <= 0xA && ((1 << v246) & 0x450) != 0)
            {
              v248 = 1;
              goto LABEL_292;
            }
          }
          v243 = objc_msgSend(v361, "countByEnumeratingWithState:objects:count:", &v380, v402, 16);
          v248 = 0;
        }
        while (v243);
      }
      else
      {
        v248 = 0;
      }
LABEL_292:
      v378 = 0u;
      v379 = 0u;
      v376 = 0u;
      v377 = 0u;
      v249 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v376, v401, 16);
      if (v249)
      {
        v250 = *(_QWORD *)v377;
        do
        {
          for (m = 0; m != v249; ++m)
          {
            if (*(_QWORD *)v377 != v250)
              objc_enumerationMutation(obj);
            v252 = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v376 + 1) + 8 * m), "sinkConfiguration"), "sinkType");
            if (v252 <= 0xA && ((1 << v252) & 0x450) != 0)
            {
              v248 = v365 | v248;
              v249 = v357;
              goto LABEL_304;
            }
          }
          v249 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v376, v401, 16);
        }
        while (v249);
LABEL_304:
        v234 = v367;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setVideoEncoderMetadataOnVideoCaptureOutputEnabled:](v101, "setVideoEncoderMetadataOnVideoCaptureOutputEnabled:", v248);
      -[BWMultiStreamCameraSourceNodeConfiguration setVideoEncoderMetadataOnPreviewOutputEnabled:](v101, "setVideoEncoderMetadataOnPreviewOutputEnabled:", v249);
      if (a27 && (objc_msgSend(v234, "cinematicVideoEnabled") & 1) == 0)
      {
        v254 = a34 != 0;
        v255 = 1;
      }
      else
      {
        v254 = objc_msgSend(v234, "cinematicVideoEnabled");
        v255 = 0;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setFocusBlurMapEnabled:](v101, "setFocusBlurMapEnabled:", v254);
      if (-[BWMultiStreamCameraSourceNodeConfiguration focusBlurMapEnabled](v101, "focusBlurMapEnabled"))
        v256 = 1;
      else
        v256 = objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "focusPixelBlurScoreEnabled");
      -[BWMultiStreamCameraSourceNodeConfiguration setFocusBlurMapEnabled:](v101, "setFocusBlurMapEnabled:", v256);
      if (a75
        && (-[BWMultiStreamCameraSourceNodeConfiguration backgroundBlurEnabled](v101, "backgroundBlurEnabled")
         || -[BWMultiStreamCameraSourceNodeConfiguration studioLightingEnabled](v101, "studioLightingEnabled")))
      {
        v255 = 1;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setDetectedFacesOutputConfiguration:](v101, "setDetectedFacesOutputConfiguration:", objc_msgSend(v370, "faceDetectionConfiguration"));
      -[BWMultiStreamCameraSourceNodeConfiguration setEyeDetectionRequired:](v101, "setEyeDetectionRequired:", v255);
      -[BWMultiStreamCameraSourceNodeConfiguration setMotionAttachmentsSource:](v101, "setMotionAttachmentsSource:", a16);
      v257 = (void *)objc_msgSend(v370, "requiredFormat");
      v258 = v234;
      if (objc_msgSend(v370, "lowLightVideoCaptureEnabled"))
        v259 = objc_msgSend(v257, "isLowLightVideoCaptureSupported");
      else
        v259 = 0;
      v260 = a64;
      v261 = objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "isVariableFrameRateVideoCaptureSupported");
      v262 = objc_msgSend(v370, "videoStabilizationStrength");
      v263 = objc_msgSend(v370, "variableFrameRateVideoCaptureEnabled");
      if (v262 < 3)
        v264 = v263;
      else
        v264 = 0;
      v265 = v264 & v261;
      v266 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "variableFrameRateVideoCaptureFromFWSupported");
      objc_msgSend(v370, "requiredMinFrameRate");
      v268 = v267;
      objc_msgSend(v370, "requiredMaxFrameRate");
      v343 = v265;
      v355 = v266;
      if (v259)
      {
        v271 = objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A30]);
        -[BWMultiStreamCameraSourceNodeConfiguration setLowLightVideoEnabled:](v101, "setLowLightVideoEnabled:", 1);
        LODWORD(v269) = 24.0;
        v272 = 30.0;
        if (v271)
          *(float *)&v269 = 30.0;
      }
      else
      {
        LODWORD(v270) = LODWORD(v269);
        if (v265)
          *(float *)&v269 = 60.0;
        else
          *(float *)&v269 = v268;
        if (v265)
          v272 = 60.0;
        else
          v272 = *(float *)&v270;
        if ((v265 & v266) == 1)
        {
          v273 = objc_msgSend(v359, "isEqualToString:", *MEMORY[0x1E0D05A30], v269, v270);
          LODWORD(v269) = 24.0;
          if (v273)
            *(float *)&v269 = 30.0;
          v272 = 60.0;
        }
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setMinFrameRate:](v101, "setMinFrameRate:", v269);
      *(float *)&v274 = v272;
      -[BWMultiStreamCameraSourceNodeConfiguration setMaxFrameRate:](v101, "setMaxFrameRate:", v274);
      if (!objc_msgSend(&unk_1E4A00AB8, "containsObject:", FigCaptureGetModelSpecificName())
        || (objc_msgSend(v258, "cinematicVideoEnabled") & 1) == 0)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setContentAwareEnhancementEnabled:](v101, "setContentAwareEnhancementEnabled:", objc_msgSend(v366, "isContentAwareEnhancementSupported"));
        -[BWMultiStreamCameraSourceNodeConfiguration setContentAwareAWBEnabled:](v101, "setContentAwareAWBEnabled:", objc_msgSend(v366, "isContentAwareAWBSupported"));
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setMultiIlluminantWhiteBalanceEnabled:](v101, "setMultiIlluminantWhiteBalanceEnabled:", objc_msgSend(v366, "isMultiIlluminantWhiteBalanceSupported"));
      -[BWMultiStreamCameraSourceNodeConfiguration setDepthType:](v101, "setDepthType:", a26);
      -[BWMultiStreamCameraSourceNodeConfiguration setStrictDepthModePreferred:](v101, "setStrictDepthModePreferred:", a65);
      -[BWMultiStreamCameraSourceNodeConfiguration setRGBIRStereoFusionMinDepthThresholdMM:](v101, "setRGBIRStereoFusionMinDepthThresholdMM:", a66);
      -[BWMultiStreamCameraSourceNodeConfiguration setRGBIRStereoFusionMaxDepthThresholdMM:](v101, "setRGBIRStereoFusionMaxDepthThresholdMM:", a67);
      -[BWMultiStreamCameraSourceNodeConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:](v101, "setRGBIRStereoFusionFixedDepthThresholdMM:", a68);
      -[BWMultiStreamCameraSourceNodeConfiguration setRGBIRStereoFusionFixedDepthValueMM:](v101, "setRGBIRStereoFusionFixedDepthValueMM:", a69);
      if (!FigCaptureVideoDimensionsAreValid(a64))
        v260 = objc_msgSend((id)objc_msgSend(v370, "depthDataFormat"), "depthEngineOutputDimensions");
      -[BWMultiStreamCameraSourceNodeConfiguration setDepthDimensions:](v101, "setDepthDimensions:", v260);
      if (a26 - 1 < 2)
        v275 = a72;
      else
        v275 = 0;
      -[BWMultiStreamCameraSourceNodeConfiguration setDepthOutputEnabled:](v101, "setDepthOutputEnabled:", v275);
      -[BWMultiStreamCameraSourceNodeConfiguration setHardwareDepthFilteringPreferred:](v101, "setHardwareDepthFilteringPreferred:", 0);
      -[BWMultiStreamCameraSourceNodeConfiguration setPointCloudOutputEnabled:](v101, "setPointCloudOutputEnabled:", v345);
      -[BWMultiStreamCameraSourceNodeConfiguration setPointCloudOutputIsSupplementalPointCloudData:](v101, "setPointCloudOutputIsSupplementalPointCloudData:", v346);
      if ((objc_msgSend(v258, "cinematicVideoEnabled") & 1) == 0)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setLightSourceMaskOutputEnabled:](v101, "setLightSourceMaskOutputEnabled:", csp_shouldEnableLightSourceMask(v366, v361));
        -[BWMultiStreamCameraSourceNodeConfiguration setKeypointDescriptorDataOutputEnabled:](v101, "setKeypointDescriptorDataOutputEnabled:", csp_shouldEnableLightSourceMask(v366, v361));
      }
      v276 = *MEMORY[0x1E0D06728];
      v400[0] = *MEMORY[0x1E0D06718];
      v400[1] = v276;
      v277 = *MEMORY[0x1E0D06760];
      v400[2] = *MEMORY[0x1E0D06720];
      v400[3] = v277;
      v278 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v400, 4);
      -[BWMultiStreamCameraSourceNodeConfiguration setEnabledSemanticMaskTypes:](v101, "setEnabledSemanticMaskTypes:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v278));
      if (a81)
        v279 = -[NSSet count](-[BWMultiStreamCameraSourceNodeConfiguration enabledSemanticMaskTypes](v101, "enabledSemanticMaskTypes"), "count") != 0;
      else
        v279 = 0;
      -[BWMultiStreamCameraSourceNodeConfiguration setSemanticMasksOutputEnabled:](v101, "setSemanticMasksOutputEnabled:", v279);
      -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOutputEnabled:](v101, "setPreLTMThumbnailOutputEnabled:", 0);
      -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOnPreviewOutputEnabled:](v101, "setPreLTMThumbnailOnPreviewOutputEnabled:", v342 & -[BWMultiStreamCameraSourceNodeConfiguration previewOutputEnabled](v101, "previewOutputEnabled"));
      v280 = -[BWMultiStreamCameraSourceNodeConfiguration previewOutputEnabled](v101, "previewOutputEnabled");
      v281 = 0;
      if (!v280)
        v281 = v342 & -[BWMultiStreamCameraSourceNodeConfiguration videoCaptureOutputEnabled](v101, "videoCaptureOutputEnabled", 0);
      -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOnVideoCaptureOutputEnabled:](v101, "setPreLTMThumbnailOnVideoCaptureOutputEnabled:", v281);
      -[BWMultiStreamCameraSourceNodeConfiguration setPostColorProcessingThumbnailOnPreviewOutputEnabled:](v101, "setPostColorProcessingThumbnailOnPreviewOutputEnabled:", HIDWORD(v342) & -[BWMultiStreamCameraSourceNodeConfiguration previewOutputEnabled](v101, "previewOutputEnabled"));
      if (-[BWMultiStreamCameraSourceNodeConfiguration previewOutputEnabled](v101, "previewOutputEnabled"))
        v282 = 0;
      else
        v282 = HIDWORD(v342) & -[BWMultiStreamCameraSourceNodeConfiguration videoCaptureOutputEnabled](v101, "videoCaptureOutputEnabled");
      -[BWMultiStreamCameraSourceNodeConfiguration setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:](v101, "setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:", v282);
      -[BWMultiStreamCameraSourceNodeConfiguration setDiscardsDepthDataForStillImages:](v101, "setDiscardsDepthDataForStillImages:", objc_msgSend(v367, "isBravoVariant"));
      if (a30)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:](v101, "setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:", -[BWMultiStreamCameraSourceNodeConfiguration previewOutputEnabled](v101, "previewOutputEnabled"));
        v283 = -[BWMultiStreamCameraSourceNodeConfiguration videoCaptureOutputEnabled](v101, "videoCaptureOutputEnabled");
      }
      else
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:](v101, "setOriginalCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:", 0);
        v283 = 0;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setOriginalCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:](v101, "setOriginalCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:", v283);
      if (a31)
        v284 = -[BWMultiStreamCameraSourceNodeConfiguration stillImageOutputEnabled](v101, "stillImageOutputEnabled");
      else
        v284 = 0;
      -[BWMultiStreamCameraSourceNodeConfiguration setOriginalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled:](v101, "setOriginalCameraIntrinsicMatrixDeliveryOnStillImageOutputEnabled:", v284);
      if (a30 && -[BWMultiStreamCameraSourceNodeConfiguration depthOutputEnabled](v101, "depthOutputEnabled"))
      {
        v285 = v367;
        v286 = objc_msgSend(v367, "cinematicVideoEnabled") ^ 1;
      }
      else
      {
        v286 = 0;
        v285 = v367;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setOriginalCameraIntrinsicMatrixDeliveryOnDepthOutputEnabled:](v101, "setOriginalCameraIntrinsicMatrixDeliveryOnDepthOutputEnabled:", v286);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputSensorInterfaceRawAttachmentOptionRetainedBufferCount:](v101, "setStillImageOutputSensorInterfaceRawAttachmentOptionRetainedBufferCount:", a36);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputSashimiRawAttachmentOptionRetainedBufferCount:](v101, "setStillImageOutputSashimiRawAttachmentOptionRetainedBufferCount:", a35);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputFocusPixelDataAttachmentOptionRetainedBufferCount:](v101, "setStillImageOutputFocusPixelDataAttachmentOptionRetainedBufferCount:", a34);
      -[BWMultiStreamCameraSourceNodeConfiguration setFirmwareStillImageOutputRetainedBufferCountOverride:](v101, "setFirmwareStillImageOutputRetainedBufferCountOverride:", a37);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputSushiRawAttachmentOptionSupportEnabled:](v101, "setStillImageOutputSushiRawAttachmentOptionSupportEnabled:", a38);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageOutputSushiRawAttachmentOptionEnabled:](v101, "setStillImageOutputSushiRawAttachmentOptionEnabled:", a39);
      if (objc_msgSend(v371, "hasSphere"))
      {
        objc_msgSend(v371, "setEnablesSphereWhenAvailable:", 1);
        v287 = a5
             ? objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "isStillImageStabilizationSupported") | a18
             : 0;
        -[BWMultiStreamCameraSourceNodeConfiguration setDiscardsUnstableSphereVideoFrames:](v101, "setDiscardsUnstableSphereVideoFrames:", v287 & (v352 ^ 1));
        objc_msgSend(v371, "setAvoidsSphereRecentering:", v287 & v352);
        objc_msgSend(v371, "setDepthDataDeliveryEnabled:", a28);
        if (objc_msgSend(v371, "sphereVideoSupported"))
        {
          if (objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "maxQualityPrioritization") == 3)
            v288 = objc_msgSend(v366, "isHighPhotoQualitySupported");
          else
            v288 = 0;
          objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", CFSTR("SphereVideoMaxFrameRate")), "floatValue");
          if (v289 == 0.0)
            v290 = 60.0;
          else
            v290 = v289;
          if ((objc_msgSend(a14, "count")
             || (v288 & 1) != 0
             || objc_msgSend(v366, "isSphereAssistedAutoFocusEnabled"))
            && (objc_msgSend(v366, "maxSupportedFrameRate"), v291 <= v290))
          {
            v292 = v344 ^ 1u;
          }
          else
          {
            v292 = 0;
          }
          objc_msgSend(v371, "setSphereVideoEnabled:", v292);
        }
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setReflectsStillsOnStreamingOutputs:](v101, "setReflectsStillsOnStreamingOutputs:", v352);
      -[BWMultiStreamCameraSourceNodeConfiguration setLivePhotoCaptureEnabled:](v101, "setLivePhotoCaptureEnabled:", objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "irisMovieCaptureEnabled"));
      -[BWMultiStreamCameraSourceNodeConfiguration setApplyPreviewShiftToStillImage:](v101, "setApplyPreviewShiftToStillImage:", objc_msgSend((id)objc_msgSend(a5, "irisSinkConfiguration"), "irisApplyPreviewShift"));
      if ((a19 & 1) == 0)
      {
        v293 = objc_msgSend(v366, "ispChromaNoiseReductionEnabled");
        if ((shouldCaptureStillsFromVideoStream & objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", 0x1E4938418), "BOOLValue")) == 1)
        {
          v294 = objc_msgSend(v366, "ispChromaNoiseReductionEnabled");
          if (v294 != objc_msgSend(v366, "isStillImageISPChromaNoiseReductionEnabled"))
          {
            v293 = objc_msgSend(v366, "isStillImageISPChromaNoiseReductionEnabled");
            objc_msgSend(v366, "isStillImageISPChromaNoiseReductionEnabled");
          }
        }
        -[BWMultiStreamCameraSourceNodeConfiguration setChromaNoiseReductionEnabled:](v101, "setChromaNoiseReductionEnabled:", v293);
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setKeypointDetectionEnabled:](v101, "setKeypointDetectionEnabled:", 0);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageKeypointDetectionEnabled:](v101, "setStillImageKeypointDetectionEnabled:", 0);
      v295 = (void *)objc_msgSend((id)objc_msgSend(v371, "stream"), "supportedProperties");
      if (objc_msgSend(v295, "objectForKeyedSubscript:", *MEMORY[0x1E0D076D8]))
      {
        if ((objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", CFSTR("IspMBNRSupported")), "BOOLValue") & 1) != 0)
        {
          v296 = 2;
        }
        else if (objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", CFSTR("MultiPassIspMBNRSupported")), "BOOLValue")&& objc_msgSend(v366, "isISPMultiBandNoiseReductionSupported")&& -[BWMultiStreamCameraSourceNodeConfiguration videoCaptureOutputEnabled](v101, "videoCaptureOutputEnabled"))
        {
          RectWithAspectRatioInsideDimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions(objc_msgSend(v366, "sensorDimensions"), 1, (float)(int)-[BWMultiStreamCameraSourceNodeConfiguration videoCaptureDimensions](v101, "videoCaptureDimensions")/ (float)(int)((unint64_t)-[BWMultiStreamCameraSourceNodeConfiguration videoCaptureDimensions](v101, "videoCaptureDimensions") >> 32));
          v299 = v298;
          v296 = (float)(v299
                       / (float)(int)-[BWMultiStreamCameraSourceNodeConfiguration videoCaptureDimensions](v101, "videoCaptureDimensions", RectWithAspectRatioInsideDimensions)) <= 1.2;
        }
        else
        {
          v296 = 0;
        }
        -[BWMultiStreamCameraSourceNodeConfiguration setIspMultiBandNoiseReductionMode:](v101, "setIspMultiBandNoiseReductionMode:", v296);
      }
      if (a74)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setVideoCaptureOutputEnabled:](v101, "setVideoCaptureOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPreviewOutputEnabled:](v101, "setPreviewOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setDetectedObjectsOutputEnabled:](v101, "setDetectedObjectsOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setSemanticMasksOutputEnabled:](v101, "setSemanticMasksOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOutputEnabled:](v101, "setPreLTMThumbnailOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOnPreviewOutputEnabled:](v101, "setPreLTMThumbnailOnPreviewOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPreLTMThumbnailOnVideoCaptureOutputEnabled:](v101, "setPreLTMThumbnailOnVideoCaptureOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPostColorProcessingThumbnailOnPreviewOutputEnabled:](v101, "setPostColorProcessingThumbnailOnPreviewOutputEnabled:", 0);
        -[BWMultiStreamCameraSourceNodeConfiguration setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:](v101, "setPostColorProcessingThumbnailOnVideoCaptureOutputEnabled:", 0);
      }
      v300 = objc_msgSend(v285, "depthType");
      if (a26)
        v301 = 0;
      else
        v301 = v300 == 3;
      v303 = v301 && v363 == 3840;
      if ((objc_msgSend(v285, "cinematicVideoEnabled") & (a74 ^ 1) & 1) != 0
        || (v303 & 1) != 0
        || csp_trueVideoCaptureEnabled(v361) && objc_msgSend(v285, "position") == 2)
      {
        -[BWMultiStreamCameraSourceNodeConfiguration setIncludeOverscanOnPreviewOutput:](v101, "setIncludeOverscanOnPreviewOutput:", 1);
      }
      objc_msgSend(v366, "lowLightVideoAEMaxGain");
      v305 = v304;
      objc_msgSend(v366, "variableFrameRateVideoCaptureFromFWAEMaxGain");
      v307 = v306;
      objc_msgSend(v370, "maxGainClientOverride");
      v309 = v308;
      objc_msgSend(v366, "aeMaxGain");
      v311 = *(float *)&v310;
      if (v309 >= 1.0)
        v312 = 1;
      else
        v312 = v259;
      if (v309 < 1.0)
        v309 = v305;
      if ((v312 & 1) == 0)
      {
        v309 = v305;
        if ((objc_msgSend(v285, "cinematicVideoEnabled") & 1) == 0)
        {
          if (objc_msgSend(v285, "stereoVideoCaptureEnabled"))
          {
            if (!objc_msgSend(v366, "stereoVideoCompanionFormat")
              || (objc_msgSend((id)objc_msgSend(v366, "stereoVideoCompanionFormat"), "stereoVideoAEMaxGain"), v313 == 0.0))
            {
              objc_msgSend(v366, "stereoVideoAEMaxGain");
              if (*(float *)&v310 == 0.0)
              {
                v309 = v311;
                goto LABEL_432;
              }
              v314 = v366;
            }
            else
            {
              v314 = (void *)objc_msgSend(v366, "stereoVideoCompanionFormat");
            }
            objc_msgSend(v314, "stereoVideoAEMaxGain");
            goto LABEL_431;
          }
          if (v343)
            v309 = v307;
          else
            v309 = v311;
          if (((v343 ^ 1 | v355) & 1) == 0)
          {
            csp_variableFrameRateVideoGain(v371);
LABEL_431:
            v309 = *(float *)&v310;
          }
        }
      }
LABEL_432:
      if ((*((_BYTE *)a25 + 12) & 1) == 0
        && objc_msgSend(v370, "applyMaxExposureDurationFrameworkOverrideWhenAvailable")
        && objc_msgSend(v366, "maxIntegrationTimeOverride"))
      {
        CMTimeMake(&v404, 1, (int)(float)(1000.0 / (float)(int)objc_msgSend(v366, "maxIntegrationTimeOverride")));
        DWORD1(v310) = HIDWORD(v404.value);
        *(CMTime *)a25 = v404;
      }
      v315 = a73;
      v316 = a60;
      if (a28 && objc_msgSend(v285, "isBravoVariant") && (a46 & 1) == 0)
      {
        objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "depthDataAEMaxGain");
        if (v317 != 0.0)
        {
          objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "depthDataAEMaxGain");
          v309 = v318;
        }
        objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "depthDataMaxIntegrationTimeOverride");
        if (*(float *)&v310 != 0.0)
        {
          objc_msgSend((id)objc_msgSend(v370, "requiredFormat"), "depthDataMaxIntegrationTimeOverride");
          CMTimeMake(&v404, 1, (int)(float)(1000.0 / v319));
          DWORD1(v310) = HIDWORD(v404.value);
          *(CMTime *)a25 = v404;
        }
      }
      if (a15)
      {
        CMTimeMake(&v404, 1, 600);
        *(CMTime *)a25 = v404;
        if (objc_msgSend(v370, "videoStabilizationStrength") == 3)
        {
          CMTimeMake(&v404, 1, 250);
          *(CMTime *)a25 = v404;
          v285 = v367;
        }
        else
        {
          v285 = v367;
          if (objc_msgSend(v370, "videoStabilizationStrength") == 4)
          {
            CMTimeMake(&v404, 1, *((_DWORD *)a25 + 2));
            *(CMTime *)a25 = v404;
          }
        }
        objc_msgSend(v366, "actionCameraAEMaxGainScaleFactor");
        v309 = v309 * *(float *)&v310;
        v316 = a60;
        v315 = a73;
      }
      else if (v259)
      {
        v320 = MEMORY[0x1E0CA2E18];
        v310 = *MEMORY[0x1E0CA2E18];
        *a25 = *MEMORY[0x1E0CA2E18];
        *((_QWORD *)a25 + 2) = *(_QWORD *)(v320 + 16);
      }
      *(float *)&v310 = v309;
      -[BWMultiStreamCameraSourceNodeConfiguration setAeMaxGain:](v101, "setAeMaxGain:", *(double *)&v310);
      *(float *)&v321 = v305;
      objc_msgSend(v371, "setMomentCaptureVideoRecordingAEMaxGain:", v321);
      v374 = *a25;
      v375 = *((_QWORD *)a25 + 2);
      -[BWMultiStreamCameraSourceNodeConfiguration setMaxExposureDurationFrameworkOverride:](v101, "setMaxExposureDurationFrameworkOverride:", &v374);
      objc_msgSend(v285, "setGlobalToneMappingEnabledOverride:", 0);
      v372 = *a24;
      v373 = *((_QWORD *)a24 + 2);
      -[BWMultiStreamCameraSourceNodeConfiguration setMaxExposureDurationClientOverride:](v101, "setMaxExposureDurationClientOverride:", &v372);
      -[BWMultiStreamCameraSourceNodeConfiguration setColorSpace:](v101, "setColorSpace:", objc_msgSend(v370, "colorSpace"));
      v322 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", v361, a13);
      v323 = +[FigVideoCaptureConnectionConfiguration cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:](FigVideoCaptureConnectionConfiguration, "cameraIntrinsicMatrixDeliveryEnabled:doingFaceTracking:", obj, a13);
      v324 = a78 | v322 | v365 & (a78 | v323);
      v325 = v357 & (a78 | v323);
      -[BWMultiStreamCameraSourceNodeConfiguration setCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:](v101, "setCameraIntrinsicMatrixDeliveryOnVideoCaptureOutputEnabled:", v324);
      -[BWMultiStreamCameraSourceNodeConfiguration setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:](v101, "setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:", v325);
      -[BWMultiStreamCameraSourceNodeConfiguration setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:](v101, "setCameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled:", -[BWMultiStreamCameraSourceNodeConfiguration cameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled](v101, "cameraIntrinsicMatrixDeliveryOnPreviewOutputEnabled") | a13);
      v327 = StillImageNoiseReductionAndFusionScheme > 3 || (StillImageNoiseReductionAndFusionScheme & 0xFFFFFFFE) == 2;
      -[BWMultiStreamCameraSourceNodeConfiguration setLtmLookUpTableMetadataEnabledForStills:](v101, "setLtmLookUpTableMetadataEnabledForStills:", v327);
      -[BWMultiStreamCameraSourceNodeConfiguration setLumaHistogramMetadataEnabled:](v101, "setLumaHistogramMetadataEnabled:", v315);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageLocalHistogramClippingDataMetadataEnabled:](v101, "setStillImageLocalHistogramClippingDataMetadataEnabled:", v316);
      if (((a32 & 1) != 0 || a33)
        && !-[BWMultiStreamCameraSourceNodeConfiguration usesFirmwareStillImageOutput](v101, "usesFirmwareStillImageOutput"))
      {
        FigDebugAssert3();
        v395 = -12780;
        v99 = v366;
        goto LABEL_473;
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setUsesFIFOFirmwareTimeMachine:](v101, "setUsesFIFOFirmwareTimeMachine:", a32);
      if (a33)
        v328 = 4;
      else
        v328 = 1;
      -[BWMultiStreamCameraSourceNodeConfiguration setFirmwareTimeMachineBufferCapacity:](v101, "setFirmwareTimeMachineBufferCapacity:", v328);
      -[BWMultiStreamCameraSourceNodeConfiguration setFirmwareTimeMachineSIFREnabled:](v101, "setFirmwareTimeMachineSIFREnabled:", (a33 & a52));
      -[BWMultiStreamCameraSourceNodeConfiguration setMaximumNumberOfBracketedSIFRFrames:](v101, "setMaximumNumberOfBracketedSIFRFrames:", a52);
      v99 = v366;
      if (objc_msgSend((id)objc_msgSend(v394, "objectForKeyedSubscript:", CFSTR("ISPAPSData")), "BOOLValue"))-[BWMultiStreamCameraSourceNodeConfiguration setIspAPSDataEnabled:](v101, "setIspAPSDataEnabled:", 0);
      if (a40)
      {
        v329 = (void *)objc_msgSend((id)objc_msgSend(a40, "sinkConfiguration"), "embeddedCaptureDeviceConfiguration");
        if ((int)objc_msgSend(a40, "retainedBufferCount") >= 1)
        {
          v329 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v329);
          v330 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(a40, "retainedBufferCount"));
          objc_msgSend(v329, "setObject:forKeyedSubscript:", v330, *MEMORY[0x1E0D08110]);
        }
        v331 = (void *)objc_msgSend((id)objc_msgSend(v371, "stream"), "supportedProperties");
        v332 = *MEMORY[0x1E0D07F88];
        if (objc_msgSend(v331, "objectForKeyedSubscript:", *MEMORY[0x1E0D07F88]))
        {
          v333 = objc_msgSend((id)objc_msgSend(v371, "stream"), "getProperty:error:", v332, &v395);
          if (v395)
            goto LABEL_473;
          v329 = (void *)objc_msgSend(v329, "dictionaryWithValuesForKeys:", v333);
        }
        -[BWMultiStreamCameraSourceNodeConfiguration setVisionDataConfiguration:](v101, "setVisionDataConfiguration:", v329);
      }
      -[BWMultiStreamCameraSourceNodeConfiguration setStreamingForegroundSegmentationEnabled:](v101, "setStreamingForegroundSegmentationEnabled:", a41);
      -[BWMultiStreamCameraSourceNodeConfiguration setFaceTrackingEnabled:](v101, "setFaceTrackingEnabled:", a42);
      -[BWMultiStreamCameraSourceNodeConfiguration setFaceTrackingNumTrackedFaces:](v101, "setFaceTrackingNumTrackedFaces:", a43);
      *(float *)&v334 = v349;
      -[BWMultiStreamCameraSourceNodeConfiguration setFaceTrackingNetworkFailureThresholdMultiplier:](v101, "setFaceTrackingNetworkFailureThresholdMultiplier:", v334);
      -[BWMultiStreamCameraSourceNodeConfiguration setFaceTrackingUseRecognition:](v101, "setFaceTrackingUseRecognition:", a44);
      *(float *)&v335 = a10;
      -[BWMultiStreamCameraSourceNodeConfiguration setFaceTrackingFailureFieldOfViewModifier:](v101, "setFaceTrackingFailureFieldOfViewModifier:", v335);
      -[BWMultiStreamCameraSourceNodeConfiguration setRGBIRStereoFusionEnabled:](v101, "setRGBIRStereoFusionEnabled:", a45);
      -[BWMultiStreamCameraSourceNodeConfiguration setStillImageMaxLossyCompressionLevel:](v101, "setStillImageMaxLossyCompressionLevel:", a71);
      -[BWMultiStreamCameraSourceNodeConfiguration setGraphContainsMultipleVideoSources:](v101, "setGraphContainsMultipleVideoSources:", a76);
      -[BWMultiStreamCameraSourceNodeConfiguration setIsAutoFocusAssistSourceNode:](v101, "setIsAutoFocusAssistSourceNode:", a79);
      v395 = objc_msgSend(v340, "configure:", v101);
      if (v395)
        goto LABEL_34;
LABEL_473:
      if (cf)
        CFRelease(cf);
LABEL_475:

      return v395;
    case 4:
      goto LABEL_167;
    default:
      v176 = *(double *)(MEMORY[0x1E0C9D820] + 8);
      v177 = *MEMORY[0x1E0C9D820];
      goto LABEL_167;
  }
}

uint64_t csp_shouldUseActionCameraCompanionIndex(void *a1, uint64_t a2, int a3)
{
  uint64_t result;
  id v6;

  if (!a3)
    return 0;
  result = objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "actionCameraCompanionFormat");
  if (result)
  {
    if ((objc_msgSend(a1, "depthDataDeliveryEnabled") & 1) != 0)
    {
      return 0;
    }
    else
    {
      v6 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", a2, 0);
      if ((objc_msgSend(v6, "containsObject:", &unk_1E49F9BD0) & 1) != 0)
        return 1;
      else
        return objc_msgSend(v6, "containsObject:", &unk_1E49F9D68);
    }
  }
  return result;
}

void *csp_activeStreamingNondisruptiveSwitchingFormatIndices(int a1, void *a2, int a3, int a4)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  int v22;
  void *v23;
  int v24;
  int v25;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  id obj;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  _BYTE v67[128];
  _QWORD v68[2];
  _QWORD v69[7];

  v69[5] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v4 = a2;
  v46 = a1;
  v5 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:");
  v6 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE0]);
  if (!objc_msgSend(v6, "count"))
    return 0;
  v33 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v48 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
  if (v48)
  {
    obj = v6;
    v44 = *(_QWORD *)v59;
    v43 = *MEMORY[0x1E0D07EE8];
    v51 = *MEMORY[0x1E0D07FE0];
    v50 = *MEMORY[0x1E0D07FF0];
    v42 = *MEMORY[0x1E0D07FC8];
    v41 = *MEMORY[0x1E0D07FF8];
    v40 = *MEMORY[0x1E0D08000];
    v37 = *MEMORY[0x1E0D07ED0];
    v36 = *MEMORY[0x1E0D07EC8];
    v7 = *MEMORY[0x1E0D08050];
    v8 = *MEMORY[0x1E0D08040];
    v39 = *MEMORY[0x1E0D07EA8];
    v34 = *MEMORY[0x1E0D07EA0];
    v45 = v4;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v59 != v44)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v58 + 1) + 8 * v9);
        v11 = objc_msgSend(v10, "intValue");
        v12 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", v46);
        v57 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", v43);
        v13 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", v11);
        v14 = (void *)objc_msgSend(v13, "objectForKeyedSubscript:", v43);
        v69[0] = v51;
        v69[1] = v50;
        v69[2] = v42;
        v69[3] = v41;
        v69[4] = v40;
        v55 = v9;
        v56 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v69, 5);
        v49 = v10;
        v53 = v12;
        if (a4
          && FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v37), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v36), "intValue") << 32)) == 2)
        {
          v68[0] = v51;
          v68[1] = v50;
          v56 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v68, 2);
          v52 = 1;
        }
        else
        {
          v52 = 0;
        }
        v54 = v13;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v15 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v62, v67, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v63;
LABEL_14:
          v18 = 0;
          while (1)
          {
            if (*(_QWORD *)v63 != v17)
              objc_enumerationMutation(v56);
            v19 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * v18);
            v20 = (void *)objc_msgSend(v57, "objectForKeyedSubscript:", v19);
            v21 = objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v7), "intValue");
            v22 = objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v8), "intValue");
            v23 = (void *)objc_msgSend(v14, "objectForKeyedSubscript:", v19);
            v24 = objc_msgSend((id)objc_msgSend(v23, "objectForKeyedSubscript:", v7), "intValue");
            v25 = objc_msgSend((id)objc_msgSend(v23, "objectForKeyedSubscript:", v8), "intValue");
            if (v21 != v24 || v22 != v25)
              break;
            if (v16 == ++v18)
            {
              v16 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v62, v67, 16);
              if (v16)
                goto LABEL_14;
              goto LABEL_24;
            }
          }
        }
        else
        {
LABEL_24:
          if (objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", v39), "BOOLValue"))
            v27 = objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", v34), "intValue");
          else
            v27 = 0;
          v28 = objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v39), "BOOLValue");
          if (v28)
            v28 = objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v34), "intValue");
          if (v52)
            v29 = 4;
          else
            v29 = v27;
          if (a3)
            v30 = 2;
          else
            v30 = v29;
          if (v28 == v29 || v28 == v30)
          {
            v31 = objc_msgSend((id)objc_msgSend(v53, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
            if (v31 == objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue"))objc_msgSend(v33, "addObject:", v49);
          }
        }
        v9 = v55 + 1;
        v4 = v45;
      }
      while (v55 + 1 != v48);
      v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v58, v66, 16);
    }
    while (v48);
  }
  return v33;
}

void *csp_activeUltraHighResStillImageNondisruptiveSwitchingFormatIndices(int a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  int v14;
  int v15;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", a1);
  v4 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE0]);
  if (!objc_msgSend(v4, "count"))
    return 0;
  v18 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v21;
    v8 = *MEMORY[0x1E0D07ED0];
    v9 = *MEMORY[0x1E0D07EC8];
    v10 = *MEMORY[0x1E0D07EA0];
    obj = v4;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v21 != v7)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
        v13 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", (int)objc_msgSend(v12, "intValue"));
        v14 = FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v8), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v9), "intValue") << 32));
        v15 = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", v10), "intValue");
        if (v14 == 2 && v15 <= 1)
          objc_msgSend(v18, "addObject:", v12);
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v6);
  }
  return v18;
}

uint64_t FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceShouldEnableMaximumGeometricDistortionCorrection_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2CFD34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2CFD830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWUpdateCameraIntrinsicsMatrixOnSampleBuffer(const void *a1, const __CFString *a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t result;
  void *v25;
  double v26;
  double v27;
  double v28;
  BOOL v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  double v34;
  float v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  double v41;
  float v42;
  void *v43;
  CGAffineTransform v44;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v47;
  CGAffineTransform v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  result = (uint64_t)CMGetAttachment(a1, a2, 0);
  if (result)
  {
    v25 = (void *)result;
    if (a3 == 90 || a3 == 270)
    {
      v26 = a12;
      a12 = a11;
    }
    else
    {
      v26 = a11;
    }
    v27 = a12 / a8;
    v28 = v26 / a7;
    if (a3 || (v28 == 1.0 ? (v29 = v27 == 1.0) : (v29 = 0), !v29 || (a4 & 1) != 0 || a5 != a9 || a6 != a10))
    {
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      if (objc_msgSend((id)result, "length") != 48)
        return 4294954516;
      objc_msgSend(v25, "getBytes:length:", &v49, objc_msgSend(v25, "length"));
      v30 = *(float *)&v49;
      v31 = *((float *)&v50 + 1);
      v32 = v51;
      if (a3 == 270)
        v33 = *((float *)&v50 + 1);
      else
        v33 = *(float *)&v49;
      if (a3 == 270)
        v34 = v27;
      else
        v34 = v28;
      if (a3 == 270)
        v35 = *(float *)&v49;
      else
        v35 = *((float *)&v50 + 1);
      if (a3 == 270)
        v36 = v28;
      else
        v36 = v27;
      if (a3 == 90)
      {
        v37 = v27;
      }
      else
      {
        v31 = v33;
        v37 = v34;
      }
      if (a3 == 90)
      {
        v38 = v28;
      }
      else
      {
        v30 = v35;
        v38 = v36;
      }
      v39 = v37 * v31;
      v40 = v38 * v30;
      v41 = a6;
      v42 = v39;
      memset(&v48, 0, sizeof(v48));
      CGAffineTransformMakeTranslation(&v48, -a5, -v41);
      CGAffineTransformMakeScale(&t2, v28, v27);
      t1 = v48;
      CGAffineTransformConcat(&v47, &t1, &t2);
      v48 = v47;
      FigCaptureMakeMirrorAndRotateVideoTransform((int)(v28 * a7 + -1.0), (int)(v27 * a8 + -1.0), a4, a3, (uint64_t)&v44);
      t1 = v48;
      CGAffineTransformConcat(&v47, &t1, &v44);
      v48 = v47;
      *(float *)&v49 = v42;
      *((float *)&v50 + 1) = v40;
      *(float32x2_t *)&v51 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)&v47.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v47.c, *((float *)&v32 + 1)), *(float64x2_t *)&v47.a, *(float *)&v32)));
      v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v49, 48);
      CMSetAttachment(a1, a2, v43, 1u);

    }
    return 0;
  }
  return result;
}

double FigCaptureMakeMirrorAndRotateVideoTransform@<D0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CGAffineTransform *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  _OWORD v26[2];
  double v27;
  uint64_t v28;
  CGAffineTransform t1;
  CGAffineTransform t2;

  v9 = MEMORY[0x1E0C9BAA8];
  v10 = *MEMORY[0x1E0C9BAA8];
  v11 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a5 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a5 + 16) = v11;
  v12 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(a5 + 32) = v12;
  if (a3)
  {
    t2.a = -1.0;
    t2.b = 0.0;
    t2.c = 0.0;
    t2.d = 1.0;
    t2.tx = (double)a1;
    t2.ty = 0.0;
    *(_OWORD *)&t1.a = v10;
    *(_OWORD *)&t1.c = v11;
    *(_OWORD *)&t1.tx = v12;
    CGAffineTransformConcat((CGAffineTransform *)a5, &t1, &t2);
  }
  switch(a4)
  {
    case 270:
      v19 = xmmword_1A32A2330;
      v21 = 0;
      v22 = 0;
      v20 = 0x3FF0000000000000;
      v23 = (double)a1;
      v15 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v15;
      *(_OWORD *)&v25.tx = *(_OWORD *)(a5 + 32);
      v14 = (CGAffineTransform *)&v19;
      goto LABEL_9;
    case 180:
      v24.a = -1.0;
      v24.b = 0.0;
      v24.c = 0.0;
      v24.d = -1.0;
      v24.tx = (double)a1;
      v24.ty = (double)a2;
      v16 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v16;
      *(_OWORD *)&v25.tx = *(_OWORD *)(a5 + 32);
      v14 = &v24;
      goto LABEL_9;
    case 90:
      v26[0] = xmmword_1A32A2300;
      v26[1] = xmmword_1A32A2320;
      v27 = (double)a2;
      v28 = 0;
      v13 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a5;
      *(_OWORD *)&v25.c = v13;
      *(_OWORD *)&v25.tx = *(_OWORD *)(a5 + 32);
      v14 = (CGAffineTransform *)v26;
LABEL_9:
      CGAffineTransformConcat(&t1, &v25, v14);
      v17 = *(_OWORD *)&t1.c;
      *(_OWORD *)a5 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a5 + 16) = v17;
      *(CGFloat *)&v10 = t1.tx;
      *(_OWORD *)(a5 + 32) = *(_OWORD *)&t1.tx;
      break;
  }
  return *(double *)&v10;
}

void *BWInvertRowMajorViewMatrixData(void *result)
{
  int32x4_t v1;
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x2x2_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  float32x2x2_t v13;
  int32x4_t v14;
  float *v15;
  float *v16;
  _DWORD v17[8];
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;

  if (result)
  {
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    objc_msgSend(result, "getBytes:length:", &v19, objc_msgSend(result, "length"));
    v1 = vzip1q_s32(v19, v21);
    v2 = vzip1q_s32(v20, (int32x4_t)0);
    v3 = vzip1q_s32(v1, v2);
    v4 = vzip2q_s32(v1, v2);
    v5 = vzip1q_s32(vzip2q_s32(v19, v21), vdupq_laneq_s32(v20, 2));
    v6 = vzip1q_s32(v3, v5);
    v7 = vdupq_lane_s32(*(int32x2_t *)v4.i8, 1);
    v8 = (float32x4_t)vzip1q_s32(v6, v4);
    v9 = (float32x2x2_t)vtrn2q_s32(v3, v4);
    v9.val[1].i32[0] = v5.i32[1];
    v10 = (float32x4_t)vzip1q_s32(vzip2q_s32(v3, v5), vdupq_lane_s32(*(int32x2_t *)v21.i8, 1));
    v11 = vzip2q_s32(v6, v7);
    v12 = (int32x4_t)vnegq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v8, (float32x4_t)v19, 3), (float32x4_t)v9, (float32x4_t)v20, 3), v10, (float32x4_t)v21, 3));
    v13 = (float32x2x2_t)vzip1q_s32((int32x4_t)v8, (int32x4_t)v10);
    v9.val[0] = (float32x2_t)vzip2q_s32((int32x4_t)v8, (int32x4_t)v10).u64[0];
    v14 = vzip1q_s32(v11, v12);
    v10.i64[0] = vzip2q_s32(v11, v12).u64[0];
    v15 = (float *)v17;
    vst2_f32(v15, v13);
    v15 += 4;
    *(int32x4_t *)v15 = vzip2q_s32((int32x4_t)v13, v14);
    v16 = (float *)&v18;
    vst2_f32(v16, v9);
    return (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v17, 48);
  }
  return result;
}

BOOL __fcdpe_resolveFormatsAndUpdateSettings_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B8F8), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue") == *(_DWORD *)(a1 + 32);
}

void sub_1A2D0238C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4D0], 8);
  _Unwind_Resume(a1);
}

uint64_t FigMotionSphereShiftStateInitialize(uint64_t a1, const __CFDictionary *a2, int a3)
{
  uint64_t v6;
  int32x2_t v7;
  _QWORD *v8;
  uint64_t BravoDataFromDictionary;

  if (a1)
  {
    memset_pattern16((void *)a1, &unk_1A32B1790, 0x18uLL);
    v6 = 0;
    v7 = vdup_n_s32(0x7FC00000u);
    do
    {
      v8 = (_QWORD *)(a1 + v6);
      v8[6] = v7;
      v8[3] = 0;
      v8[9] = v7;
      v6 += 8;
    }
    while (v6 != 24);
    *(_DWORD *)(a1 + 100) = a3;
    BravoDataFromDictionary = FigMotionGetBravoDataFromDictionary(a2, a1 + 100);
    if ((_DWORD)BravoDataFromDictionary)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigMotionAdjustBravoDataForReferenceCamera(a1 + 100);
      *(_QWORD *)(a1 + 632) = 0x3FA999999999999ALL;
    }
    return BravoDataFromDictionary;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(void *a1, void *a2)
{
  objc_msgSend(a2, "setStillImageProcessingMode:", objc_msgSend(a1, "stillImageProcessingMode"));
  objc_msgSend(a2, "setSensorConfigurationsByPortType:", -[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  objc_msgSend(a2, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
  objc_msgSend(a2, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
  objc_msgSend(a2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  objc_msgSend(a2, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  return objc_msgSend(a2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
}

BWStereoDisparityProcessorControllerConfiguration *BWPhotonicEngineCreateStereoDisparityProcessorControllerConfiguration(void *a1)
{
  uint64_t v2;
  BWStereoDisparityProcessorControllerConfiguration *v3;

  v2 = -[BWPhotonicEngineNodeConfiguration depthDataOutputDimensions]((uint64_t)a1);
  if (!FigCaptureVideoDimensionsAreValid(v2)
    || -[BWPhotonicEngineNodeConfiguration generateLiDARDepth]((_BOOL8)a1)
    || (objc_msgSend(a1, "deferredPhotoProcessorEnabled") & 1) != 0)
  {
    return 0;
  }
  v3 = objc_alloc_init(BWStereoDisparityProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
  -[BWStereoDisparityProcessorControllerConfiguration setPortTypesWithDepthSegmentationPortraitParameters:](v3, "setPortTypesWithDepthSegmentationPortraitParameters:", -[BWPhotonicEngineNodeConfiguration portTypesWithDepthSegmentationPortraitParameters]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setDisparityOutputDimensions:](v3, "setDisparityOutputDimensions:", -[BWPhotonicEngineNodeConfiguration depthDataOutputDimensions]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setStillImageDepthDataType:](v3, "setStillImageDepthDataType:", objc_msgSend(a1, "depthDataType"));
  -[BWStereoDisparityProcessorControllerConfiguration setZoomingDisparityAllowed:](v3, "setZoomingDisparityAllowed:", -[BWPhotonicEngineNodeConfiguration zoomingDisparityAllowed]((_BOOL8)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setShouldComputeDisparityWhenCalibrationFails:](v3, "setShouldComputeDisparityWhenCalibrationFails:", -[BWPhotonicEngineNodeConfiguration shouldComputeDisparityWhenCalibrationFails]((_BOOL8)a1));
  return v3;
}

BWSWFRProcessorControllerConfiguration *BWPhotonicEngineCreateSWFRProcessorControllerConfiguration(void *a1)
{
  BWSWFRProcessorControllerConfiguration *v2;

  if ((int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) < 1)
    return 0;
  v2 = objc_alloc_init(BWSWFRProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWSWFRProcessorControllerConfiguration setVersion:](v2, "setVersion:", -[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1));
  objc_msgSend(a1, "maxLossyCompressionLevel");
  -[BWSWFRProcessorControllerConfiguration setLossyCompressionLevel:](v2, "setLossyCompressionLevel:", 0);
  return v2;
}

BWStillImageProcessorControllerConfiguration *BWPhotonicEngineCreateRedEyeProcessorControllerConfiguration(void *a1)
{
  BWStillImageProcessorControllerConfiguration *v2;

  if (!-[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1))
    return 0;
  v2 = objc_alloc_init(BWStillImageProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWNRFProcessorControllerConfiguration *BWPhotonicEngineCreateNRFProcessorControllerConfiguration(void *a1)
{
  unsigned int v2;
  BWNRFProcessorControllerConfiguration *v3;
  void *v4;
  char v5;
  double v6;

  v2 = -[BWPhotonicEngineNodeConfiguration stillImageFusionScheme]((uint64_t)a1);
  v3 = 0;
  if (v2 >= 4)
  {
    if (v2 - 4 <= 1)
      v3 = objc_alloc_init(BWNRFProcessorControllerConfiguration);
    BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
    -[BWNRFProcessorControllerConfiguration setAlwaysAllowModifyingInputBuffers:](v3, "setAlwaysAllowModifyingInputBuffers:", -[BWPhotonicEngineNodeConfiguration alwaysAllowModifyingInputBuffers]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setCmiResourceEnabled:](v3, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((_BOOL8)a1));
    -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v3, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
    -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v3, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
    -[BWNRFProcessorControllerConfiguration setQuadraSupportEnabled:](v3, "setQuadraSupportEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setFusionEnabled:](v3, "setFusionEnabled:", -[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setSemanticRenderingVersion:](v3, "setSemanticRenderingVersion:", -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1));
    if (-[BWPhotonicEngineNodeConfiguration digitalFlashSupportEnabled]((_BOOL8)a1))
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1), "allKeys"));
      -[BWNRFProcessorControllerConfiguration setLowLightFusionEnabled:](v3, "setLowLightFusionEnabled:", objc_msgSend(v4, "isEqualToSet:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", -[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1))) ^ 1);
      -[BWNRFProcessorControllerConfiguration setRawNightModeEnabled:](v3, "setRawNightModeEnabled:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1), "count") != 0);
    }
    -[BWNRFProcessorControllerConfiguration setDeepFusionEnabled:](v3, "setDeepFusionEnabled:", -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setDeepFusionWaitForProcessingToFinish:](v3, "setDeepFusionWaitForProcessingToFinish:", -[BWPhotonicEngineNodeConfiguration deepFusionWaitForPreprocessingToFinish]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setSwfrEnabled:](v3, "setSwfrEnabled:", (int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) > 0);
    v5 = -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1);
    if (-[FigCaptureCameraParameters nrfVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "nrfVersion") >= 4&& (v5 & 0x15) != 0)
    {
      -[BWNRFProcessorControllerConfiguration setLearnedNRMode:](v3, "setLearnedNRMode:", -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1));
    }
    -[BWNRFProcessorControllerConfiguration setDepthDataDeliveryEnabled:](v3, "setDepthDataDeliveryEnabled:", -[BWPhotonicEngineNodeConfiguration depthDataDeliveryEnabled]((_BOOL8)a1));
    *(float *)&v6 = -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1);
    -[BWNRFProcessorControllerConfiguration setGainMapMainImageDownscalingFactor:](v3, "setGainMapMainImageDownscalingFactor:", v6);
    -[BWNRFProcessorControllerConfiguration setGreenGhostMitigationVersion:](v3, "setGreenGhostMitigationVersion:", -[BWPhotonicEngineNodeConfiguration greenGhostMitigationVersion]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setDemosaicedRawPixelFormat:](v3, "setDemosaicedRawPixelFormat:", -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setDemosaicedRawEnabled:](v3, "setDemosaicedRawEnabled:", -[BWPhotonicEngineNodeConfiguration demosaicedRawEnabled]((_BOOL8)a1));
    -[BWNRFProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v3, "setRawColorCalibrationsByPortType:", -[BWPhotonicEngineNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
    -[BWNRFProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v3, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWPhotonicEngineNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  }
  return v3;
}

BWSoftISPProcessorControllerConfiguration *BWPhotonicEngineCreateSoftISPProcessorControllerConfiguration(void *a1)
{
  BWSoftISPProcessorControllerConfiguration *v2;
  void *v3;
  int v4;

  if (!-[BWPhotonicEngineNodeConfiguration softISPSupportEnabled]((_BOOL8)a1)
    || (int)-[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1) > 1
    || (int)-[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1) > 1)
  {
    return 0;
  }
  v2 = objc_alloc_init(BWSoftISPProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWSoftISPProcessorControllerConfiguration setSensorRawPixelFormat:](v2, "setSensorRawPixelFormat:", -[BWPhotonicEngineNodeConfiguration sensorRawPixelFormat]((uint64_t)a1));
  -[BWSoftISPProcessorControllerConfiguration setInputDimensions:](v2, "setInputDimensions:", -[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1));
  -[BWSoftISPProcessorControllerConfiguration setSensorCenterOffset:](v2, "setSensorCenterOffset:", -[BWPhotonicEngineNodeConfiguration sensorCenterOffset]((uint64_t)a1));
  if (objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1), "count"))
  {
    -[BWSoftISPProcessorControllerConfiguration setInputDimensionsByQSubResolutionFlavorByPortType:](v2, "setInputDimensionsByQSubResolutionFlavorByPortType:", -[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1));
  }
  v3 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  if (objc_msgSend((id)BWDimensionsWithQSubResolutionFlavor(v3, 2), "count"))
  {
    -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1);
    -[BWSoftISPProcessorControllerConfiguration setQBinProcessingMode:](v2, "setQBinProcessingMode:", (-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) >> 2) & 2);
  }
  -[BWSoftISPProcessorControllerConfiguration setCmiResourceEnabled:](v2, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((_BOOL8)a1));
  -[BWSoftISPProcessorControllerConfiguration setStandardYUVProcessingEnabled:](v2, "setStandardYUVProcessingEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled") ^ 1);
  -[BWSoftISPProcessorControllerConfiguration setGdcEnabled:](v2, "setGdcEnabled:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1), "count") != 0);
  -[BWSoftISPProcessorControllerConfiguration setRawNightModeEnabled:](v2, "setRawNightModeEnabled:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1), "count") != 0);
  -[BWSoftISPProcessorControllerConfiguration setDeepFusionEnabled:](v2, "setDeepFusionEnabled:", -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1));
  -[BWSoftISPProcessorControllerConfiguration setLearnedNREnabled:](v2, "setLearnedNREnabled:", (-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) != 0);
  -[BWSoftISPProcessorControllerConfiguration setQuadraProcessingEnabled:](v2, "setQuadraProcessingEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((_BOOL8)a1));
  objc_msgSend(a1, "maxLossyCompressionLevel");
  -[BWSoftISPProcessorControllerConfiguration setLossyCompressionLevel:](v2, "setLossyCompressionLevel:", 0);
  v4 = -[FigCaptureCameraParameters nrfVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "nrfVersion");
  -[BWSoftISPProcessorControllerConfiguration setLinearRGBForDisparityEnabled:](v2, "setLinearRGBForDisparityEnabled:", objc_msgSend(a1, "depthDataType") == 8);
  -[BWSoftISPProcessorControllerConfiguration setLtmHDRCurvesEnabled:](v2, "setLtmHDRCurvesEnabled:", v4 > 3);
  -[BWSoftISPProcessorControllerConfiguration setSfhrSupportEnabled:](v2, "setSfhrSupportEnabled:", -[BWPhotonicEngineNodeConfiguration sfhrMode]((uint64_t)a1) & 1);
  -[BWSoftISPProcessorControllerConfiguration setLowlightSFHRSupportEnabled:](v2, "setLowlightSFHRSupportEnabled:", (-[BWPhotonicEngineNodeConfiguration sfhrMode]((uint64_t)a1) >> 1) & 1);
  -[BWSoftISPProcessorControllerConfiguration setDocumentScanningEnabled:](v2, "setDocumentScanningEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorClippingRecoveryEnabled]((_BOOL8)a1));
  return v2;
}

BWLearnedNRProcessorControllerConfiguration *BWPhotonicEngineCreateLearnedNRProcessorControllerConfiguration(void *a1)
{
  BWLearnedNRProcessorControllerConfiguration *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) == 0)
    return 0;
  v2 = objc_alloc_init(BWLearnedNRProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E4A02E90, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++), (_QWORD)v10);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  -[BWLearnedNRProcessorControllerConfiguration setFinalCropRectOverscanMultiplierByPortType:](v2, "setFinalCropRectOverscanMultiplierByPortType:", v3, (_QWORD)v10);
  return v2;
}

BWJasperDisparityProcessorControllerConfiguration *BWPhotonicEngineCreateJasperDisparityProcessorControllerConfiguration(void *a1)
{
  BWJasperDisparityProcessorControllerConfiguration *v2;

  if (!-[BWPhotonicEngineNodeConfiguration generateLiDARDepth]((_BOOL8)a1))
    return 0;
  v2 = objc_alloc_init(BWJasperDisparityProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWIntelligentDistortionCorrectionProcessorControllerConfiguration *BWPhotonicEngineCreateIntelligentDistortionCorrectionProcessorControllerConfiguration(void *a1)
{
  BWIntelligentDistortionCorrectionProcessorControllerConfiguration *v2;

  if (!objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1), "count")&& !objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1), "count"))
  {
    return 0;
  }
  v2 = objc_alloc_init(BWIntelligentDistortionCorrectionProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithGeometricDistortionCorrectionEnabled:](v2, "setPortTypesWithGeometricDistortionCorrectionEnabled:", -[BWPhotonicEngineNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithIntelligentDistortionCorrectionEnabled:](v2, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", -[BWPhotonicEngineNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionExpandedImageDimensions:](v2, "setGeometricDistortionCorrectionExpandedImageDimensions:", -[BWPhotonicEngineNodeConfiguration geometricDistortionCorrectionExpandedImageDimensions]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionInputCropOffset:](v2, "setGeometricDistortionCorrectionInputCropOffset:", -[BWPhotonicEngineNodeConfiguration sensorCenterOffset]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionVersion:](v2, "setIntelligentDistortionCorrectionVersion:", -[BWPhotonicEngineNodeConfiguration intelligentDistortionCorrectionVersion]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionAppliesFinalDimensions:](v2, "setIntelligentDistortionCorrectionAppliesFinalDimensions:", -[BWPhotonicEngineNodeConfiguration intelligentDistortionCorrectionAppliesFinalDimensions]((_BOOL8)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setHorizontalSensorBinningFactor:](v2, "setHorizontalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setVerticalSensorBinningFactor:](v2, "setVerticalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setProvidedInferenceAttachedMediaByMode:](v2, "setProvidedInferenceAttachedMediaByMode:", -[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setStereoPhotoOutputDimensions:](v2, "setStereoPhotoOutputDimensions:", objc_msgSend(a1, "stereoPhotoOutputDimensions"));
  return v2;
}

BWInferenceEngineControllerConfiguration *BWPhotonicEngineCreateInferenceControllerConfiguration(void *a1)
{
  _BOOL4 v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  BWInferenceEngineControllerConfiguration *v7;
  void *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  _BOOL4 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  BWInferenceEngineControllerConfiguration *v24;
  uint64_t v26;
  BWInferenceEngineControllerConfiguration *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  _BYTE v37[128];
  _QWORD v38[5];

  v38[3] = *MEMORY[0x1E0C80C00];
  if (!-[BWPhotonicEngineNodeConfiguration generateInferencesForSemanticProcessingIfNeeded]((_BOOL8)a1))
    return 0;
  v2 = (-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
    && (-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((_BOOL8)a1)
     || -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1));
  v3 = (int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) >= 1
    && (-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((_BOOL8)a1)
     || -[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
     || -[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1));
  v4 = objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "count");
  if (!-[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1) && !v2)
  {
    v5 = -[BWPhotonicEngineNodeConfiguration semanticStyleRenderingEnabled]((_BOOL8)a1);
    v6 = v4 || v5;
    if ((v6 | v3) != 1)
      return 0;
  }
  v7 = objc_alloc_init(BWInferenceEngineControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v7);
  -[BWInferenceEngineControllerConfiguration setFastMattingEnabled:](v7, "setFastMattingEnabled:", (int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) < 1)
  {
    v9 = 0;
  }
  else
  {
    objc_msgSend(v8, "addObject:", CFSTR("PersonSemanticsSkin"));
    objc_msgSend(v8, "addObject:", 0x1E49511B8);
    v9 = 2;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1)
    objc_msgSend(v8, "addObject:", 0x1E495B0B8);
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) >= 3)
  {
    objc_msgSend(v8, "addObjectsFromArray:", BWInferenceLowResPersonInstanceMaskKeys());
    v9 |= 0x10uLL;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 3)
  {
    objc_msgSend(v8, "addObject:", 0x1E495AF38);
    objc_msgSend(v8, "addObject:", CFSTR("PersonSemanticsHair"));
  }
  if (-[BWPhotonicEngineNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
    v9 |= 8uLL;
  if (-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1)
    && (int)-[BWPhotonicEngineNodeConfiguration swfrVersion]((uint64_t)a1) >= 2)
  {
    v38[0] = CFSTR("PersonSemanticsSkin");
    v38[1] = 0x1E495B0B8;
    v38[2] = 0x1E49511B8;
    -[BWInferenceEngineControllerConfiguration setSwfrInferenceMasks:](v7, "setSwfrInferenceMasks:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v38, 3));
    objc_msgSend(v8, "addObjectsFromArray:", -[BWInferenceEngineControllerConfiguration swfrInferenceMasks](v7, "swfrInferenceMasks"));
  }
  if (objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration portTypesWithRawNightModeEnabled]((uint64_t)a1), "count"))
  {
    objc_msgSend(v8, "addObject:", CFSTR("PersonSemanticsSkin"));
    objc_msgSend(v8, "addObject:", CFSTR("PersonSemanticsHair"));
    objc_msgSend(v8, "addObject:", 0x1E49511B8);
    objc_msgSend(v8, "addObject:", 0x1E495B0B8);
  }
  if (-[BWPhotonicEngineNodeConfiguration semanticStyleRenderingEnabled]((_BOOL8)a1)
    || -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1))
  {
    objc_msgSend(v8, "addObject:", CFSTR("PersonSemanticsSkin"));
    objc_msgSend(v8, "addObject:", 0x1E495B0B8);
    v10 = -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1);
    v11 = &BWAttachedMediaKey_PersonSegmentationMask;
    if (v10 <= 3)
      v11 = &BWInferenceAttachedMediaKey_LowResPersonSegmentationMask;
    objc_msgSend(v8, "addObject:", *v11);
    -[BWInferenceEngineControllerConfiguration setSmartCameraClassificationsEnabled:](v7, "setSmartCameraClassificationsEnabled:", 1);
  }
  v27 = v7;
  v12 = -[BWPhotonicEngineNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1);
  v13 = v9 | 6;
  v32 = 0u;
  v33 = 0u;
  if (!v12)
    v13 = v9;
  v26 = v13;
  v34 = 0uLL;
  v35 = 0uLL;
  v14 = (void *)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v33 != v17)
          objc_enumerationMutation(v14);
        v19 = (void *)objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * i));
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v29;
          do
          {
            for (j = 0; j != v21; ++j)
            {
              if (*(_QWORD *)v29 != v22)
                objc_enumerationMutation(v19);
              objc_msgSend(v8, "addObject:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * j), v26);
            }
            v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v28, v36, 16);
          }
          while (v21);
        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v32, v37, 16);
    }
    while (v16);
  }
  v24 = v27;
  -[BWInferenceEngineControllerConfiguration setMattingOutputValidContentDetectionEnabled:](v27, "setMattingOutputValidContentDetectionEnabled:", objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "objectForKeyedSubscript:", &unk_1E49F9EA0) != 0);
  -[BWInferenceEngineControllerConfiguration setEnabledInferenceMasks:](v27, "setEnabledInferenceMasks:", objc_msgSend(v8, "allObjects"));
  -[BWInferenceEngineControllerConfiguration setEnabledVisionInferences:](v27, "setEnabledVisionInferences:", v26);
  -[BWInferenceEngineControllerConfiguration setPersonSemanticsVersion:](v27, "setPersonSemanticsVersion:", -[BWPhotonicEngineNodeConfiguration personSemanticsVersion]((uint64_t)a1));
  -[BWInferenceEngineControllerConfiguration setProducesHighQualityInferencesFromZoomRegionWithLargeDigitalZoom:](v27, "setProducesHighQualityInferencesFromZoomRegionWithLargeDigitalZoom:", FigCaptureVideoDimensionsAreValid(objc_msgSend(a1, "stereoPhotoOutputDimensions")));
  -[BWInferenceEngineControllerConfiguration setSuppressVisionTimeOutFailure:](v27, "setSuppressVisionTimeOutFailure:", (int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) > 0);
  return v24;
}

BWDeferredProcessorControllerConfiguration *BWPhotonicEngineCreateDeferredProcessorControllerConfiguration(void *a1)
{
  BWDeferredProcessorControllerConfiguration *v2;
  void *v3;
  void *v4;
  double v5;

  if (!objc_msgSend(a1, "deferredPhotoProcessorEnabled"))
    return 0;
  v2 = objc_alloc_init(BWDeferredProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  v3 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  v4 = (void *)BWDimensionsWithQSubResolutionFlavor(v3, 2);
  if (objc_msgSend(v4, "count"))
    -[BWDeferredProcessorControllerConfiguration setUltraHighResolutionSensorRawDimensions:](v2, "setUltraHighResolutionSensorRawDimensions:", FigCaptureLargestDimensionsFromDimensionsArray(v4));
  *(float *)&v5 = -[BWPhotonicEngineNodeConfiguration inferenceMainImageDownscalingFactor]((uint64_t)a1);
  -[BWDeferredProcessorControllerConfiguration setInferenceMainImageDownscalingFactor:](v2, "setInferenceMainImageDownscalingFactor:", v5);
  return v2;
}

BWDeferredCaptureControllerConfiguration *BWPhotonicEngineCreateDeferredContainerControllerConfiguration(void *a1)
{
  BWDeferredCaptureControllerConfiguration *v2;

  if (!objc_msgSend(a1, "deferredCaptureSupportEnabled"))
    return 0;
  v2 = objc_alloc_init(BWDeferredCaptureControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  return v2;
}

BWDeepZoomProcessorControllerConfiguration *BWPhotonicEngineCreateDeepZoomProcessorControllerConfiguration(void *a1)
{
  uint64_t v2;
  BWDeepZoomProcessorControllerConfiguration *v3;

  if ((int)-[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 1)
  {
    if (objc_msgSend(a1, "deferredPhotoProcessorEnabled"))
    {
      v2 = 3;
      if (!FigCaptureVideoDimensionsAreValid(objc_msgSend(a1, "deepFusionEnhancedResolutionDimensions")))
      {
        if (FigCaptureVideoDimensionsAreValid(objc_msgSend(a1, "stereoPhotoOutputDimensions")))
          v2 = 3;
        else
          v2 = 1;
      }
      goto LABEL_11;
    }
    if ((int)-[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 2
      && (objc_msgSend(a1, "deferredCaptureSupportEnabled") & 1) == 0)
    {
      v2 = 2;
LABEL_11:
      v3 = objc_alloc_init(BWDeepZoomProcessorControllerConfiguration);
      BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
      -[BWDeepZoomProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWPhotonicEngineNodeConfiguration deepZoomVersion]((uint64_t)a1));
      -[BWDeepZoomProcessorControllerConfiguration setType:](v3, "setType:", v2);
      -[BWDeepZoomProcessorControllerConfiguration setMode:](v3, "setMode:", -[BWPhotonicEngineNodeConfiguration deepZoomMode]((uint64_t)a1));
      -[BWDeepZoomProcessorControllerConfiguration setStereoPhotoOutputDimensions:](v3, "setStereoPhotoOutputDimensions:", objc_msgSend(a1, "stereoPhotoOutputDimensions"));
      return v3;
    }
  }
  return 0;
}

BWDeepFusionProcessorControllerConfiguration *BWPhotonicEngineCreateDeepFusionProcessorControllerConfiguration(void *a1)
{
  BWDeepFusionProcessorControllerConfiguration *v2;

  if (!-[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1)
    || (objc_msgSend(a1, "deferredCaptureSupportEnabled") & 1) != 0)
  {
    return 0;
  }
  v2 = objc_alloc_init(BWDeepFusionProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWDeepFusionProcessorControllerConfiguration setCmiResourceEnabled:](v2, "setCmiResourceEnabled:", -[BWPhotonicEngineNodeConfiguration cmiResourceEnabled]((_BOOL8)a1));
  -[BWDeepFusionProcessorControllerConfiguration setStillImageFusionScheme:](v2, "setStillImageFusionScheme:", -[BWPhotonicEngineNodeConfiguration stillImageFusionScheme]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setSemanticRenderingVersion:](v2, "setSemanticRenderingVersion:", -[BWPhotonicEngineNodeConfiguration semanticRenderingVersion]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v2, "setRawColorCalibrationsByPortType:", -[BWPhotonicEngineNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v2, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWPhotonicEngineNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setQuadraSupportEnabled:](v2, "setQuadraSupportEnabled:", -[BWPhotonicEngineNodeConfiguration quadraProcessingSupportEnabled]((_BOOL8)a1));
  return v2;
}

BWColorConstancyProcessorControllerConfiguration *BWPhotonicEngineCreateColorConstancyProcessorControllerConfiguration(void *a1)
{
  BWColorConstancyProcessorControllerConfiguration *v2;

  if ((int)-[BWPhotonicEngineNodeConfiguration constantColorVersion]((uint64_t)a1) < 1)
    return 0;
  v2 = objc_alloc_init(BWColorConstancyProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v2);
  -[BWColorConstancyProcessorControllerConfiguration setVersion:](v2, "setVersion:", -[BWPhotonicEngineNodeConfiguration constantColorVersion]((uint64_t)a1));
  objc_msgSend(a1, "maxLossyCompressionLevel");
  -[BWColorConstancyProcessorControllerConfiguration setLossyCompressionLevel:](v2, "setLossyCompressionLevel:", 0);
  -[BWColorConstancyProcessorControllerConfiguration setClippingRecoveryEnabled:](v2, "setClippingRecoveryEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorClippingRecoveryEnabled]((_BOOL8)a1));
  -[BWColorConstancyProcessorControllerConfiguration setSaturationBoostEnabled:](v2, "setSaturationBoostEnabled:", -[BWPhotonicEngineNodeConfiguration constantColorSaturationBoostEnabled]((_BOOL8)a1));
  return v2;
}

id BWInferenceLowResPersonInstanceMaskKeys()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 4);
  v1 = 1;
  do
  {
    objc_msgSend(v0, "addObject:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%d"), CFSTR("LowResPersonInstanceMask"), v1));
    v1 = (v1 + 1);
  }
  while ((_DWORD)v1 != 5);
  return (id)objc_msgSend(v0, "copy");
}

uint64_t roEnqueueConfigurationLive(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  pthread_mutex_t **Context;
  pthread_mutex_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t SerializableDictionaryForFormatDescription;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *Region;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  v11 = Context;
  if (Context)
    pthread_mutex_lock(*Context);
  if (*(_DWORD *)a2 != 5 || !*(_QWORD *)(a2 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v13 = 0;
    v16 = 4294950629;
    goto LABEL_12;
  }
  v12 = CFAllocatorAllocate(a1, 72, 0);
  v13 = v12;
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v16 = 4294950630;
    goto LABEL_12;
  }
  v20 = v12;
  v21 = 0;
  v22 = *(_DWORD *)(a2 + 4);
  v12[8] = 0;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *v12 = 0x5726D6F70;
  v12[2] = *(_QWORD *)(a2 + 8);
  v12[4] = v12;
  v12[3] = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  v13[8] = *(_QWORD *)(a2 + 24);
  SerializableDictionaryForFormatDescription = FigRemote_CreateSerializableDictionaryForFormatDescription();
  if ((_DWORD)SerializableDictionaryForFormatDescription
    || (SerializableDictionaryForFormatDescription = roSerializePropertyListData(a1, 0, v13),
        (_DWORD)SerializableDictionaryForFormatDescription))
  {
    v16 = SerializableDictionaryForFormatDescription;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_12;
  }
  if (a4)
    v15 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)&v20, 1uLL, a5);
  else
    v15 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)&v20, 1uLL);
  v16 = v15;
  if ((_DWORD)v15)
  {
    fig_log_get_emitter();
    goto LABEL_28;
  }
LABEL_12:
  if (v13)
  {
    if ((_DWORD)v16)
    {
      v17 = 6;
      if ((_QWORD *)v13[4] == v13)
        v17 = 5;
      FigSharedMemBlockRelease(v13[v17]);
      v13[5] = 0;
      v13[6] = 0;
    }
    else
    {
      Region = (const void *)FigSharedMemBlockGetRegion(v13[5]);
      if (Region)
        CFRelease(Region);
    }
    CFAllocatorDeallocate(a1, v13);
  }
  if (v11)
    pthread_mutex_unlock(*v11);
  return v16;
}

uint64_t FigCaptureMetadataUtilitiesCreateMakerNoteFlatDictionary(void *target, const __CFAllocator *a2, const __CFAllocator *a3, const void **a4)
{
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const void *KeySpec;
  unsigned int Length;
  uint64_t v12;
  int MakerNoteKeySpace;
  uint64_t Mutable;
  const __CFDictionary *v15;
  unsigned int v16;
  const UInt8 *BytePtr;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  CFDataRef theData;
  void *value;
  _DWORD v36[3];
  CMTime v37;
  CMTimeValue v38;
  CMTimeScale timescale;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  value = 0;
  v8 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v8)
  {
    v9 = v8;
    KeySpec = *a4;
    if (!*a4)
    {
      if (CFDictionaryGetValueIfPresent(v8, (const void *)*MEMORY[0x1E0D06798], (const void **)&value))
        Length = CFDataGetLength((CFDataRef)value);
      else
        Length = 0;
      MakerNoteKeySpace = FigFlatDictionaryGetMakerNoteKeySpace();
      KeySpec = (const void *)FigFlatDictionaryCreateKeySpec(a2, MakerNoteKeySpace, 0x5Bu);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Version_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEMatrix_opaque, Length, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Timestamp_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEStable_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AETarget_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEAverage_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFStable_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SISMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_HDRMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_BurstUUID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthAverageCurrent_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereMotionDataStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OISMode_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AssetIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_QRMOutputType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereExternalForceOffset_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageCaptureType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ImageGroupIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosOriginatingSignature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageCaptureFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosRenderOriginatingSignature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageProcessingFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotoTranscodeQualityHint_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosRenderEffect_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_BracketedCaptureSequenceNumber_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LuminanceNoiseAmplitude_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OriginatingAppID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotosAppFeatureFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ImageCaptureRequestIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_MeteorHeadroom_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ARKitPhoto_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFPerformance_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFExternalOffset_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSceneFlags_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSNRType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageSNR_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_UBMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SpatialOverCaptureGroupIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_iCloudServerSoftwareVersionForDynamicallyGeneratedMedia_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotoIdentifier_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SpatialOverCaptureImageType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_CCT_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ApsMode_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusPosition_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_MeteorPlusGainMap_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_StillImageProcessingHomography_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_IntelligentDistortionCorrection_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFInputBracketCount_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFRegisteredBracketCount_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LuxLevel_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LastFocusingMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMeasuredDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorROIType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NRFSRLStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SystemPressureLevel_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_CameraControlsStatisticsMaster_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorSensorConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ColorCorrectionMatrix_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_GreenGhostMitigationStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SemanticStyle_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FrontFacing_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorContainsBlindSpot_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderFocusMethod_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_LeaderFollowerAutoFocusLeaderROIType_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_ZeroShutterLagFailureReason_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMSPMeasuredDepth_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_TimeOfFlightAssistedAutoFocusEstimatorMSPSensorConfidence_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Camera_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusPixelBlurScore_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorTemperature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_PhotometerInfo_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereFaultStatus_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereComplianceErrorCounts_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFSphereMaxTemperature_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorBlackLevelResidual_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SmartStyle_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEFaceAverage_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AlchemistVersion_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SensorID_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SlowSyncFlashDuration_opaque, 0, 0);
      FigFlatDictionaryKeySpecAddKey((uint64_t)KeySpec, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_NoiseModel_opaque, 0, 0);
      FigFlatDictionaryKeySpecCommit((uint64_t)KeySpec);
      *a4 = KeySpec;
    }
    Mutable = FigFlatDictionaryCreateMutable((uint64_t)a2, a3, (uint64_t)KeySpec);
    if (Mutable)
    {
      v12 = Mutable;
      FigFlatDictionarySetInt32(Mutable, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Version_opaque, 3);
      v15 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
      if (v15)
        CMTimeMakeFromDictionary(&v37, v15);
      else
        CMSampleBufferGetPresentationTimeStamp(&v37, (CMSampleBufferRef)target);
      v38 = v37.value;
      timescale = v37.timescale;
      if ((v37.flags & 1) != 0)
      {
        v37.value = v38;
        v37.timescale = timescale;
        FigFlatDictionarySetCMTime(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_Timestamp_opaque, (__n128 *)&v37);
      }
      theData = 0;
      if (CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E0D06798], (const void **)&theData))
      {
        v16 = CFDataGetLength(theData);
        BytePtr = CFDataGetBytePtr(theData);
        FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEMatrix_opaque, BytePtr, v16);
      }
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEStable_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D067A0]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AETarget_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D067B0]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AEAverage_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06770]), "intValue"));
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_AFStable_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D067C8]), "intValue"));
      v18 = *MEMORY[0x1E0D05EE8];
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EE8]), "objectAtIndexedSubscript:", 0), "floatValue");
      v36[0] = v19;
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v18), "objectAtIndexedSubscript:", 1), "floatValue");
      v36[1] = v20;
      objc_msgSend((id)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v18), "objectAtIndexedSubscript:", 2), "floatValue");
      v36[2] = v21;
      FigFlatDictionarySetArrayDataType(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, 5);
      FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_FocusAccelerometerVector_opaque, v36, 0xCu);
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SISMethod_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06040]), "intValue"));
      if (!CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E0D06E58], (const void **)&value))
        goto LABEL_36;
      v22 = value;
      if ((objc_msgSend(value, "isEqual:", *MEMORY[0x1E0D07A48]) & 1) != 0)
      {
        v23 = 0;
      }
      else if ((objc_msgSend(v22, "isEqual:", *MEMORY[0x1E0D07A38]) & 1) != 0)
      {
        v23 = 1;
      }
      else if ((objc_msgSend(v22, "isEqual:", *MEMORY[0x1E0D07A30]) & 1) != 0)
      {
        v23 = 2;
      }
      else if ((objc_msgSend(v22, "isEqual:", *MEMORY[0x1E0D07A50]) & 1) != 0)
      {
        v23 = 3;
      }
      else if ((objc_msgSend(v22, "isEqual:", *MEMORY[0x1E0D07A58]) & 1) != 0)
      {
        v23 = 4;
      }
      else
      {
        if (!objc_msgSend(v22, "isEqual:", *MEMORY[0x1E0D07A40]))
        {
LABEL_36:
          FigFlatDictionarySetInt16(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_HDRMethod_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B08]), "intValue"));
          if (CFDictionaryGetValueIfPresent(v9, (const void *)*MEMORY[0x1E0D06E48], (const void **)&value))
          {
            v24 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D079B0]);
            v25 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D079B8]);
            v26 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D07978]);
            if (v24 && v25)
            {
              objc_msgSend(v24, "floatValue");
              v28 = v27 * 0.0039062;
              objc_msgSend(v25, "floatValue");
              *(float *)&v37.value = v28;
              *((float *)&v37.value + 1) = v29 * 0.0039062;
              FigFlatDictionarySetArrayDataType(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, 5);
              FigFlatDictionarySetData(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthTrackingError_opaque, &v37, 8u);
            }
            if (v26)
              FigFlatDictionarySetInt16(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereHealthAverageCurrent_opaque, objc_msgSend(v26, "intValue"));
          }
          v30 = *MEMORY[0x1E0D06B78];
          if (CFDictionaryContainsKey(v9, (const void *)*MEMORY[0x1E0D06B78]))
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereMotionDataStatus_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v30), "intValue"));
          v31 = *MEMORY[0x1E0D06E68];
          if (CFDictionaryContainsKey(v9, (const void *)*MEMORY[0x1E0D06E68]))
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_SphereStatus_opaque, objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v31), "intValue"));
          v32 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D08670], 0);
          value = v32;
          if (v32)
            FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_QRMOutputType_opaque, objc_msgSend(v32, "intValue"));
          return v12;
        }
        v23 = 5;
      }
      FigFlatDictionarySetInt32(v12, (uint64_t)&kFigCaptureFlatDictionaryAppleMakerNote_OISMode_opaque, v23);
      goto LABEL_36;
    }
    if (KeySpec)
      CFRelease(KeySpec);
    v12 = 0;
    *a4 = 0;
  }
  else
  {
    v12 = 0;
    if (!CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2660], 0))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return v12;
}

uint64_t FigFlatDictionaryKeySpecAddKey(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  int NumberOfRegisteredKeys;
  const __CFAllocator *v19;
  char *v20;
  int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;

  if (*(_BYTE *)(a1 + 20) || *(_DWORD *)a2 != *(_DWORD *)(a1 + 28))
    return 0;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a2 + 4));
  if (v9 == -1)
  {
    v13 = *(_DWORD *)(a1 + 36);
    v14 = *(_DWORD *)(a1 + 24);
    if (v13 >= v14)
    {
      if (v14 + 4 >= FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(*(_DWORD *)a2))
        NumberOfRegisteredKeys = FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(*(_DWORD *)(a1 + 28));
      else
        NumberOfRegisteredKeys = *(_DWORD *)(a1 + 24) + 4;
      *(_DWORD *)(a1 + 24) = NumberOfRegisteredKeys;
      v19 = CFGetAllocator((CFTypeRef)a1);
      v20 = (char *)CFAllocatorReallocate(v19, *(void **)(a1 + 56), 4 * *(unsigned int *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 24), 0);
      v21 = *(_DWORD *)(a1 + 36);
      v22 = &v20[4 * *(unsigned int *)(a1 + 32)];
      *(_QWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 48) = v22;
      *(_QWORD *)(a1 + 56) = v20;
      v15 = &v22[24 * v21];
    }
    else
    {
      v15 = (char *)(v8 + 24 * v13);
    }
    *(_QWORD *)v15 = a2;
    if ((*(_DWORD *)(a2 + 16) - 7) > 2)
    {
      if (*(_QWORD *)(a2 + 24) <= (unint64_t)a3)
        *((_DWORD *)v15 + 3) = a3;
      else
        *((_DWORD *)v15 + 3) = FigFlatDictionaryKeyGetDefaultValueSize(a2);
    }
    else
    {
      v23 = a3 + 4;
      v24 = *(_QWORD *)(a2 + 24);
      if (v23 >= v24)
        *((_DWORD *)v15 + 3) = v23;
      else
        *((_DWORD *)v15 + 3) = v24;
    }
    *((_QWORD *)v15 + 2) = a4;
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a2 + 4)) = (*(_DWORD *)(a1 + 36))++;
  }
  else
  {
    if ((*(_DWORD *)(a2 + 16) - 7) > 1)
    {
      v16 = v8 + 24 * v9;
      v17 = *(_DWORD *)(v16 + 12);
      if (v17 <= a3)
        v17 = a3;
      *(_DWORD *)(v16 + 12) = v17;
    }
    else
    {
      v10 = a3 + 4;
      v11 = v8 + 24 * v9;
      if (v10 <= *(unsigned int *)(v11 + 12))
        LODWORD(v10) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v11 + 12) = v10;
    }
    *(_QWORD *)(v8 + 24 * v9 + 16) |= a4;
  }
  return 1;
}

uint64_t FigFlatDictionaryKeyGetDefaultValueSize(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (!result)
    return kFigFlatDictionaryValueSizes[*(int *)(a1 + 16)];
  return result;
}

uint64_t FigFlatDictionarySetInt32(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t flatDictionary_setterCheck(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;

  if (!*(_BYTE *)(a1 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (unsigned int *)(v2 + 16);
  v4 = 1;
  if (*(_DWORD *)(v2 + 16) != 1)
  {
    v5 = FigFlatDictionaryContentCopy(*(const __CFAllocator **)v2, v2);
    *((_DWORD *)v5 + 4) = 1;
    *(_QWORD *)(a1 + 24) = v5;
    do
      v6 = __ldxr(v3);
    while (__stxr(v6 - 1, v3));
    if (v6 == 1)
      FigFlatDictionaryContentDestroy((void *)v2);
    return 1;
  }
  return v4;
}

uint64_t flatDictionary_create(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  int v8;
  int *v9;
  uint64_t v10;
  int v11;
  const __CFAllocator **v12;
  const __CFAllocator **v13;
  uint64_t Instance;
  const __CFAllocator *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  const void *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  const char *v26;
  unsigned int v27;
  int v28;
  int v29;
  size_t v30;

  if (!a3)
    return 0;
  if (!*(_BYTE *)(a3 + 20))
    return 0;
  v5 = *(_DWORD *)(a3 + 36);
  if (!v5)
    return 0;
  v8 = 0;
  v9 = (int *)(*(_QWORD *)(a3 + 48) + 12);
  v10 = *(unsigned int *)(a3 + 36);
  do
  {
    v11 = *v9;
    v9 += 6;
    v8 += v11;
    --v10;
  }
  while (v10);
  if (!v8)
    return 0;
  v12 = FigFlatDictionaryContentCreate(a2, (_DWORD *)a3, v8 + ((v5 + 7) >> 3) + 12);
  if (!v12)
    return 0;
  v13 = v12;
  MEMORY[0x1A858C99C](&FigFlatDictionaryGetTypeID_sRegisterFigFlatDictionaryOnce, flatDictionary_register);
  Instance = _CFRuntimeCreateInstance();
  *(_BYTE *)(Instance + 16) = a5;
  *(_QWORD *)(Instance + 24) = v13;
  *((_DWORD *)v13 + 4) = 1;
  v15 = v13[1];
  if (*((_DWORD *)v15 + 9))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *((_QWORD *)v15 + 6);
      v19 = *(_QWORD *)(v18 + v16);
      if (!v19)
        goto LABEL_27;
      v20 = *(_DWORD *)(v19 + 16);
      if (v20 > 0xB)
        goto LABEL_27;
      if (((1 << v20) & 0xC7E) != 0)
      {
        v21 = *(unsigned int *)(v18 + v16 + 8);
        if (a4)
        {
          v22 = *(const void **)(a4 + 8 * v17);
          if (v22)
          {
            v23 = (char *)v13[5] + v21;
            v24 = *(_QWORD *)(v19 + 24);
LABEL_24:
            memcpy(v23, v22, v24);
            v29 = *(_DWORD *)(*((_QWORD *)v13[1] + 5) + 4 * *(int *)(v19 + 4));
            *((_BYTE *)v13[4] + (v29 >> 3)) |= 1 << (v29 & 7);
            goto LABEL_27;
          }
        }
        FigFlatDictionaryKeyGetDefaultValue(v19, (char *)v13[5] + v21);
      }
      else if (((1 << v20) & 0x380) != 0)
      {
        v25 = *(unsigned int *)(v18 + v16 + 8);
        if (!a4 || (v26 = *(const char **)(a4 + 8 * v17)) == 0)
        {
          if (*(_QWORD *)(v19 + 32))
          {
            v30 = (*(_DWORD *)(v19 + 24) - 4);
            *(_DWORD *)((char *)v13[5] + v25) = v30;
            memcpy((char *)v13[5] + v25 + 4, *(const void **)(v19 + 32), v30);
          }
          goto LABEL_27;
        }
        v27 = *(_DWORD *)(v19 + 24) - 4;
        if (v20 == 7)
        {
          v28 = strlen(v26);
          if (v27 >= v28 + 1)
            v27 = v28 + 1;
        }
        *(_DWORD *)((char *)v13[5] + v25) = v27;
        v23 = (char *)v13[5] + v25 + 4;
        v22 = *(const void **)(a4 + 8 * v17);
        v24 = v27;
        goto LABEL_24;
      }
LABEL_27:
      ++v17;
      v15 = *(const __CFAllocator **)(*(_QWORD *)(Instance + 24) + 8);
      v16 += 24;
    }
    while (v17 < *((unsigned int *)v15 + 9));
  }
  return Instance;
}

void FigFlatDictionaryKeyGetDefaultValue(uint64_t a1, void *__dst)
{
  const void *v3;
  uint64_t v4;

  v3 = *(const void **)(a1 + 32);
  if (!v3)
  {
    v4 = *(int *)(a1 + 16);
    if ((v4 - 7) <= 1)
    {
      bzero(__dst, *(_QWORD *)(a1 + 24));
      return;
    }
    v3 = (const void *)FigFlatDictionaryDefaultDefaultValues[v4];
  }
  memcpy(__dst, v3, *(_QWORD *)(a1 + 24));
}

uint64_t FigFlatDictionarySetInt16(uint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionarySetData(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = 0;
  if (a2 && a3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (!v7)
      return 1;
    v9 = *(unsigned int *)(a2 + 4);
    result = 1;
    if ((v9 & 0x80000000) != 0)
      return result;
    v10 = *(_QWORD *)(v7 + 8);
    if (v9 >= *(_DWORD *)(v10 + 32))
      return result;
    v11 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v9);
    if (v11 == -1)
      return result;
    v13 = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 24 * v11 + 8);
    if (!flatDictionary_setterCheck(a1))
      return 1;
    v14 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 48)
                   + 24 * *(int *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 40) + 4 * *(int *)(a2 + 4))
                   + 12)
       - 4 >= a4)
    {
      memcpy((void *)(*(_QWORD *)(v14 + 40) + v13 + 4), a3, a4);
      if (*(_DWORD *)(a2 + 16) == 8)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + v13) = a4;
      v15 = *(_QWORD *)(a1 + 24);
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 40) + 4 * *(int *)(a2 + 4));
      result = 1;
      *(_BYTE *)(*(_QWORD *)(v15 + 32) + (v16 >> 3)) |= 1 << (v16 & 7);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__n128 FigFlatDictionarySetCMTime(uint64_t a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __n128 result;
  __n128 *v12;
  uint64_t v13;
  int v14;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            if (flatDictionary_setterCheck(a1))
            {
              v12 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + v10);
              result = *a3;
              v12[1].n128_u64[0] = a3[1].n128_u64[0];
              *v12 = result;
              v13 = *(_QWORD *)(a1 + 24);
              v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v13 + 32) + (v14 >> 3)) |= 1 << (v14 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionarySetArrayDataType(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (a2)
  {
    v3 = *(_QWORD *)(result + 24);
    if (v3)
    {
      v4 = *(unsigned int *)(a2 + 4);
      if ((v4 & 0x80000000) == 0)
      {
        v5 = *(_QWORD *)(v3 + 8);
        if (v4 < *(_DWORD *)(v5 + 32))
        {
          v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4);
          if (v6 != -1)
            *(_DWORD *)(*(_QWORD *)(v3 + 40) + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8)) = a3;
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryCreateMutable(uint64_t a1, const __CFAllocator *a2, uint64_t a3)
{
  return flatDictionary_create(a1, a2, a3, 0, 1);
}

const __CFAllocator **FigFlatDictionaryContentCreate(const __CFAllocator *a1, _DWORD *a2, unsigned int a3)
{
  const __CFAllocator **v6;
  const __CFAllocator **v7;
  const __CFAllocator *v8;
  const __CFAllocator *v9;
  const __CFAllocator *v10;
  uint64_t v11;

  v6 = (const __CFAllocator **)CFAllocatorAllocate(a1, 48, 0);
  v7 = v6;
  if (v6)
  {
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    v8 = (const __CFAllocator *)CFAllocatorAllocate(a1, a3, 0);
    v7[3] = v8;
    if (v8)
    {
      bzero(v8, a3);
      v9 = v7[3];
      *((_DWORD *)v9 + 2) = a2[4];
      v10 = (const __CFAllocator *)((char *)v9 + 12);
      v11 = (uint64_t)v9 + ((a2[9] + 7) >> 3) + 12;
      v7[4] = v10;
      v7[5] = (const __CFAllocator *)v11;
      *v7 = a1;
      v7[1] = (const __CFAllocator *)CFRetain(a2);
      *((_DWORD *)v7 + 5) = a3;
    }
    else
    {
      CFAllocatorDeallocate(a1, v7);
      return 0;
    }
  }
  return v7;
}

unint64_t FigSharedMemBlockAllocate(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (a2 && *(_QWORD *)(a1 + 32) > a2 && (v3 = shmemPoolLookupSubPool(a1, a2)) != 0)
  {
    v4 = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
    v5 = *(_QWORD **)v4;
    if (*(_QWORD *)v4)
    {
      while (1)
      {
        v6 = *(_QWORD *)(a1 + 24) + *v5;
        if (!*(_DWORD *)(v6 + 4))
          break;
        v5 = (_QWORD *)v5[1];
        if (!v5)
          goto LABEL_7;
      }
      *(_DWORD *)(v6 + 4) = 1;
      goto LABEL_14;
    }
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
    v7 = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    if (v7)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(v4 + 16);
      if (v8 <= *(_QWORD *)(a1 + 32) - v9)
      {
        *v7 = v8;
        *(_QWORD *)(a1 + 40) = v9 + v8;
        v6 = *(_QWORD *)(a1 + 24) + v8;
        *(_DWORD *)(v6 + 8) = v9;
        *(_DWORD *)(v6 + 12) = v8;
        *(_QWORD *)v6 = 0x17368626BLL;
        v7[1] = 0;
        **(_QWORD **)(v4 + 8) = v7;
        *(_QWORD *)(v4 + 8) = v7 + 1;
LABEL_14:
        os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
        v10 = v6 + 16;
        CFRetain(*(CFTypeRef *)(a1 + 16));
        v7 = 0;
        goto LABEL_15;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
      fig_log_get_emitter();
    }
    else
    {
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v7 = 0;
  }
  v10 = 0;
LABEL_15:
  free(v7);
  return v10;
}

uint64_t shmemPoolLookupSubPool(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  v3 = a2 + 16;
  result = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(a2 + 16) > *(_QWORD *)(result + 16))
  {
    v5 = *(_QWORD *)(a1 + 56) - 1;
    if (v3 <= *(_QWORD *)(result + 24 * v5 + 16))
    {
      if (v5 >= 2)
      {
        v6 = 0;
        do
        {
          if (v3 <= *(_QWORD *)(result + 24 * ((v5 + v6) >> 1) + 16))
            v5 = (v5 + v6) >> 1;
          else
            v6 = (v5 + v6) >> 1;
        }
        while (v5 - v6 > 1);
      }
      result += 24 * v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t shmemAllocatorAllocate(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return FigSharedMemBlockAllocate(a3, a1);
  else
    return 0;
}

uint64_t roSerializePropertyListData(const __CFAllocator *a1, const void *a2, _QWORD *a3)
{
  const __CFData *v4;
  CFStringRef v5;
  CFIndex Code;
  const UInt8 *BytePtr;
  uint64_t RemoteAddress;
  CFErrorRef error;

  error = 0;
  if (!a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  v4 = CFPropertyListCreateData(a1, a2, kCFPropertyListBinaryFormat_v1_0, 0, &error);
  if (!v4)
  {
    if (error)
    {
      v5 = CFErrorCopyFailureReason(error);
      Code = CFErrorGetCode(error);
      if (v5)
        CFRelease(v5);
      CFRelease(error);
      if (!(_DWORD)Code)
        goto LABEL_8;
    }
    else
    {
      Code = 4294962336;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return Code;
  }
LABEL_8:
  BytePtr = CFDataGetBytePtr(v4);
  RemoteAddress = FigSharedMemBlockGetRemoteAddress((uint64_t)BytePtr);
  a3[6] = RemoteAddress;
  if (!RemoteAddress)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    Code = 4294950632;
    if (!v4)
      return Code;
    goto LABEL_10;
  }
  a3[5] = BytePtr;
  a3[7] = CFDataGetLength(v4);
  FigSharedMemBlockRetain((uint64_t)BytePtr);
  Code = 0;
  if (v4)
LABEL_10:
    CFRelease(v4);
  return Code;
}

uint64_t FigFlatDictionaryGetMakerNoteKeySpace()
{
  if (sKeySpaceRegisterOnceToken != -1)
    dispatch_once_f(&sKeySpaceRegisterOnceToken, 0, (dispatch_function_t)fdek_registerKeySpaceAndPredefinedMetadataKeys);
  return sMetadataKeySpace;
}

uint64_t FigFlatDictionaryKeySpecCommit(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  int *v5;
  int v6;

  *(_BYTE *)(result + 20) = 1;
  do
  {
    v1 = __ldxr((unsigned int *)&sKeySpecNextIdentifier);
    v2 = v1 + 1;
  }
  while (__stxr(v2, (unsigned int *)&sKeySpecNextIdentifier));
  *(_DWORD *)(result + 16) = v2;
  v3 = *(unsigned int *)(result + 36);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(result + 48) + 12);
    do
    {
      *(v5 - 1) = v4;
      v6 = *v5;
      v5 += 6;
      v4 += v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t FigFlatDictionaryCreateKeySpec(const __CFAllocator *a1, int a2, unsigned int a3)
{
  unsigned int NumberOfRegisteredKeys;
  uint64_t Instance;
  void *v8;

  NumberOfRegisteredKeys = FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(a2);
  MEMORY[0x1A858C99C](&FigFlatDictionaryKeySpecGetTypeID_sRegisterFigFlatDictionaryKeySpecOnce, flatDictionaryKeySpec_register);
  Instance = _CFRuntimeCreateInstance();
  FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(a2);
  v8 = CFAllocatorAllocate(a1, 4 * NumberOfRegisteredKeys + 24 * a3, 0);
  *(_QWORD *)(Instance + 56) = v8;
  *(_BYTE *)(Instance + 20) = 0;
  *(_DWORD *)(Instance + 24) = a3;
  *(_DWORD *)(Instance + 28) = a2;
  *(_DWORD *)(Instance + 32) = NumberOfRegisteredKeys;
  *(_QWORD *)(Instance + 40) = v8;
  memset(v8, 255, 4 * NumberOfRegisteredKeys);
  *(_QWORD *)(Instance + 48) = *(_QWORD *)(Instance + 56) + 4 * NumberOfRegisteredKeys;
  return Instance;
}

CFIndex FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(int a1)
{
  CFIndex result;

  result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
    return CFSetGetCount(*(CFSetRef *)(sKeySpaces + 8 * a1));
  return result;
}

void __captureSession_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  void *v2;
  __CFString **v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  BOOL IsValid;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  const void *v13;
  const void *v14;
  NSObject *v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A858DD40]();
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("WillStartRunning")) & 1) != 0)
  {
    v3 = kFigCaptureSessionWillStartRunningNotificationPayloadKey_ClientAuditToken;
  }
  else
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("DidStartRunning")))
      goto LABEL_7;
    v3 = kFigCaptureSessionDidStartRunningNotificationPayloadKey_ClientAuditToken;
  }
  v4 = (void *)objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", *v3);
  if (v4)
  {
    v17 = 0u;
    v18 = 0u;
    objc_msgSend(v4, "getBytes:length:", &v17, 32);
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_OWORD *)(v5 + 36);
    v16[0] = *(_OWORD *)(v5 + 20);
    v16[1] = v6;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", payload PID = %d"), FigCaptureGetPIDFromAuditToken(v16));
  }
LABEL_7:
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 128))
  {
    v19[0] = CFSTR("WillStartRunning");
    v19[1] = CFSTR("DidStartRunning");
    v19[2] = CFSTR("DidStopRunning");
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 3);
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 52));
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_OWORD *)(v8 + 36);
    v17 = *(_OWORD *)(v8 + 20);
    v18 = v9;
    IsValid = FigCaptureAuditTokenIsValid((uint64_t)&v17);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 48) + 52));
    if (!objc_msgSend(v7, "containsObject:", *(_QWORD *)(a1 + 32)) || IsValid)
    {
      if (!dword_1ECFE9590)
        goto LABEL_14;
      goto LABEL_22;
    }
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (!dword_1ECFE9590)
    goto LABEL_14;
LABEL_22:
  v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
  v12 = *(const void **)(a1 + 32);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 56);
  if (v14)
    CFRelease(v14);
  objc_autoreleasePoolPop(v2);
}

void BWSampleBufferSetAttachedMedia(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;

  v6 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "mutableCopy");
  if (!v6)
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
  v8 = v6;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", a3, a2);
  if (objc_msgSend(v8, "count"))
  {
    v7 = (void *)objc_msgSend(v8, "copy");
    CMSetAttachment(a1, CFSTR("AttachedMedia"), v7, 1u);

  }
  else
  {
    CMRemoveAttachment(a1, CFSTR("AttachedMedia"));
  }

}

void BWSampleBufferRemoveAttachedMedia(const void *a1, uint64_t a2)
{
  BWSampleBufferSetAttachedMedia(a1, a2, 0);
}

uint64_t csp_willDecoupleWarperFromStreamProcessing(void *a1)
{
  if ((int)FigCapturePlatformIdentifier() > 9)
    return 0;
  if ((objc_msgSend(a1, "containsObject:", &unk_1E49F9BD0) & 1) != 0)
    return 1;
  return objc_msgSend(a1, "containsObject:", &unk_1E49F9C00);
}

double acpr_convertFloatRowMajorArrayToSimdMatrix(uint64_t *a1, double a2, double a3, double a4, double a5, int32x4_t a6)
{
  int32x4_t v6;
  double result;

  v6.i64[0] = *a1;
  a6.i64[0] = a1[4];
  v6.i64[1] = a1[2];
  *(_QWORD *)&result = vuzp1q_s32(v6, a6).u64[0];
  return result;
}

double acpr_computeRelativeExtrinsics(int32x4_t a1, int32x4_t a2, int32x4_t a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  _OWORD v9[3];
  _OWORD v10[3];

  v7 = 0;
  v9[2] = vzip1q_s32(vzip2q_s32(a1, a3), vdupq_laneq_s32(a2, 2));
  memset(v10, 0, sizeof(v10));
  do
  {
    v10[v7] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, COERCE_FLOAT(v9[v7])), a6, *(float32x2_t *)&v9[v7], 1), a7, (float32x4_t)v9[v7], 2);
    ++v7;
  }
  while (v7 != 3);
  return *(double *)v10;
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyList(uint64_t a1)
{
  if (FigCaptureGetModelSpecificName_sModelNameCheckOnce != -1)
    dispatch_once(&FigCaptureGetModelSpecificName_sModelNameCheckOnce, &__block_literal_global_12);
  return FigCaptureCFCreatePropertyListForModelAndBundleIdentifier((uint64_t)CFSTR("com.apple.CMCapture"), a1, (const __CFString *)FigCaptureGetModelSpecificName_sModelNameStr, 0);
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyListForModelAndBundleIdentifier(uint64_t a1, uint64_t a2, const __CFString *a3, int a4)
{
  void *v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  FigCaptureFlatPlist *v14;
  uint64_t v15;

  v7 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", a1);
  v8 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
    return 0;
  if (a3)
  {
    v10 = (void *)v8;
    v11 = objc_msgSend((id)objc_msgSend(v7, "resourcePath"), "stringByAppendingPathComponent:", a3);
    if (!v11)
      return 0;
    v12 = objc_msgSend(v10, "fileExistsAtPath:", v11) ? (__CFString *)a3 : CFSTR("Default");
    v13 = objc_msgSend(v7, "URLForResource:withExtension:subdirectory:", a2, 0, v12);
    if (!v13)
      return 0;
    if (a4)
    {
      v14 = +[FigCaptureFlatPlist flatPlistWithContentsOfURL:](FigCaptureFlatPlist, "flatPlistWithContentsOfURL:", v13);
      if (!v14)
        goto LABEL_15;
    }
    else
    {
      v14 = (FigCaptureFlatPlist *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v13);
      if (!v14)
        goto LABEL_15;
    }
    return v14;
  }
LABEL_15:
  v15 = objc_msgSend(v7, "URLForResource:withExtension:", a2, 0);
  if (v15)
  {
    if (a4)
      v14 = +[FigCaptureFlatPlist flatPlistWithContentsOfURL:](FigCaptureFlatPlist, "flatPlistWithContentsOfURL:", v15);
    else
      v14 = (FigCaptureFlatPlist *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithContentsOfURL:", v15);
    return v14;
  }
  return 0;
}

FigCaptureFlatPlist *FigCaptureCFCreatePropertyListForModel(uint64_t a1, const __CFString *a2, int a3)
{
  return FigCaptureCFCreatePropertyListForModelAndBundleIdentifier((uint64_t)CFSTR("com.apple.CMCapture"), a1, a2, a3);
}

unint64_t FigCaptureBinaryPlistGetOffsetForReference(uint64_t a1, uint64_t a2)
{
  return bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 41) * a2);
}

uint64_t FigCaptureGetModelSubdirPath(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.CMCapture"));
  v3 = objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  if (!a1)
    return 0;
  if (!v3 || v2 == 0)
    return 0;
  result = objc_msgSend((id)objc_msgSend(v2, "resourcePath"), "stringByAppendingPathComponent:", a1);
  if (!result)
    return 0;
  return result;
}

void sn_notifyOnStateTransition(void *a1, os_unfair_lock_s *a2, int a3, void (**a4)(_QWORD), id *a5)
{
  void *v10;
  id v11;
  id v12;

  v12 = (id)objc_msgSend(a4, "copy");
  os_unfair_lock_lock(a2);
  if (objc_msgSend(a1, "currentState") == a3)
  {
    os_unfair_lock_unlock(a2);
LABEL_3:

    a4[2](a4);
    return;
  }
  if (*a5)
  {
    objc_msgSend(*a5, "addObject:", v12);
    os_unfair_lock_unlock(a2);
  }
  else
  {
    os_unfair_lock_unlock(a2);
    v10 = (void *)objc_opt_new();
    os_unfair_lock_lock(a2);
    if (objc_msgSend(a1, "currentState") == a3)
    {
      os_unfair_lock_unlock(a2);

      goto LABEL_3;
    }
    v11 = *a5;
    if (!*a5)
    {
      *a5 = v10;
      v11 = v10;
      v10 = 0;
    }
    objc_msgSend(v11, "addObject:", v12);
    os_unfair_lock_unlock(a2);

  }
}

uint64_t copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t result;
  const __CFString *v11;
  const __CFAllocator *v12;
  CFDictionaryRef v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  uint64_t v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  uint64_t v22;
  const __CFString **v23;
  int v24;
  void **p_keys;
  const __CFAllocator *v26;
  CFNumberType v27;
  unsigned int v28;
  int v29;
  float valuePtr;
  void *values;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  void *keys;
  const __CFString *v36;
  const __CFString *v37;
  const __CFString *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return 4294954516;
  v9 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 88))
    return 4294954511;
  if (CFEqual(a2, CFSTR("AutofocusProcessor_VideoMode")))
  {
    switch(*(_DWORD *)(v9 + 40))
    {
      case 0:
        v11 = CFSTR("Mode_StillPreview");
        goto LABEL_24;
      case 1:
        v11 = CFSTR("Mode_VideoPreview");
        goto LABEL_24;
      case 2:
        v11 = CFSTR("Mode_VideoRecording");
        goto LABEL_24;
      case 3:
        v11 = CFSTR("Mode_Conference");
        goto LABEL_24;
      case 4:
        v11 = CFSTR("Mode_Panorama");
        goto LABEL_24;
      case 5:
        v11 = CFSTR("Mode_TimeLapsePreview");
        goto LABEL_24;
      case 6:
        v11 = CFSTR("Mode_TimeLapseCapture");
        goto LABEL_24;
      default:
        return 0;
    }
  }
  if (CFEqual(a2, CFSTR("AutoExposure")))
  {
    if (*(_DWORD *)(v9 + 7464) == 1)
    {
      valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = CFSTR("x");
      v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      v36 = CFSTR("y");
      v32 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      v37 = CFSTR("w");
      v33 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      v38 = CFSTR("h");
      v34 = CFNumberCreate(v12, kCFNumberFloatType, &valuePtr);
      v13 = CFDictionaryCreate(v12, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = 0;
      *a4 = v13;
      do
      {
        CFRelease(*(void **)((char *)&values + v14));
        v14 += 8;
      }
      while (v14 != 32);
      return 0;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, CFSTR("SpotMeteredExposure")))
  {
    if (*(_DWORD *)(v9 + 7464) == 2)
    {
      valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = CFSTR("x");
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      v36 = CFSTR("y");
      v32 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      v37 = CFSTR("w");
      v33 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      v38 = CFSTR("h");
      v34 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
      v16 = CFDictionaryCreate(v15, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v17 = 0;
      *a4 = v16;
      do
      {
        CFRelease(*(void **)((char *)&values + v17));
        v17 += 8;
      }
      while (v17 != 32);
      return 0;
    }
    goto LABEL_31;
  }
  if (CFEqual(a2, CFSTR("FlashExposure")))
  {
    if (*(_DWORD *)(v9 + 7464) == 5)
    {
      valuePtr = (float)*(int *)(v9 + 7476) * 0.001;
      keys = CFSTR("x");
      v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7480) * 0.001;
      v36 = CFSTR("y");
      v32 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7484) * 0.001;
      v37 = CFSTR("w");
      v33 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      valuePtr = (float)*(int *)(v9 + 7488) * 0.001;
      v38 = CFSTR("h");
      v34 = CFNumberCreate(v20, kCFNumberFloatType, &valuePtr);
      v21 = CFDictionaryCreate(v20, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = 0;
      *a4 = v21;
      do
      {
        CFRelease(*(void **)((char *)&values + v22));
        v22 += 8;
      }
      while (v22 != 32);
      return 0;
    }
LABEL_31:
    *a4 = 0;
    return 4294954513;
  }
  if (CFEqual(a2, CFSTR("MonitorSubjectArea")))
  {
    v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(v9 + 4336);
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("ProvidesStortorgetMetadata")))
  {
    if (*(_BYTE *)(v9 + 18120))
      v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    else
      v23 = (const __CFString **)MEMORY[0x1E0C9AE40];
LABEL_42:
    v11 = *v23;
LABEL_24:
    v18 = (const __CFDictionary *)CFRetain(v11);
LABEL_25:
    v19 = v18;
    result = 0;
    *a4 = v19;
    return result;
  }
  if (CFEqual(a2, CFSTR("ExposureBias")))
  {
    p_keys = (void **)(v9 + 7524);
    v26 = a3;
    v27 = kCFNumberFloatType;
LABEL_45:
    v18 = CFNumberCreate(v26, v27, p_keys);
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("PreFlashAFParameters")))
  {
    v18 = FigImageControl_CopyPreFlashAFParameters(a1);
    goto LABEL_25;
  }
  if (CFEqual(a2, CFSTR("DeviceRotationDegrees")))
  {
    v28 = *(unsigned __int16 *)(v9 + 5666);
    if (v28 > 3)
      return 4294954513;
    if (*(_WORD *)(v9 + 5666))
      v29 = -90 * v28 + 360;
    else
      v29 = 0;
    LODWORD(keys) = v29;
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_keys = &keys;
    v27 = kCFNumberSInt32Type;
    goto LABEL_45;
  }
  if (CFEqual(a2, CFSTR("AutoWhiteBalanceLock")))
  {
    v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(v9 + 7424);
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("ExposureLock")))
  {
    v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(v9 + 7472);
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("HDRScene")))
  {
    if (!*(_BYTE *)(v9 + 9061))
      return 4294954513;
    v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(v9 + 9060);
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("HDRSceneDetectionEnabled")))
  {
    v23 = (const __CFString **)MEMORY[0x1E0C9AE50];
    v24 = *(unsigned __int8 *)(v9 + 9061);
LABEL_35:
    if (!v24)
      v23 = (const __CFString **)MEMORY[0x1E0C9AE40];
    goto LABEL_42;
  }
  if (CFEqual(a2, CFSTR("FocusPreset")))
  {
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E0D06580]))
    {
      v11 = CFSTR("Still");
      goto LABEL_24;
    }
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E0D06598]))
    {
      v11 = CFSTR("Video");
      goto LABEL_24;
    }
    if (CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E0D065A0]))
    {
      v11 = CFSTR("CinematicVideo");
      goto LABEL_24;
    }
    result = CFEqual(*(CFTypeRef *)(v9 + 680), (CFTypeRef)*MEMORY[0x1E0D06590]);
    if ((_DWORD)result)
    {
      v11 = CFSTR("TimeLapse");
      goto LABEL_24;
    }
    *a4 = 0;
  }
  else
  {
    if (CFEqual(a2, CFSTR("FaceDetectionMode")))
    {
      if (*(_BYTE *)(v9 + 7473) && *(_BYTE *)(v9 + 560))
      {
        v11 = CFSTR("AEAndAF");
      }
      else if (*(_BYTE *)(v9 + 7473))
      {
        v11 = CFSTR("AEOnly");
      }
      else if (*(_BYTE *)(v9 + 560))
      {
        v11 = CFSTR("AFOnly");
      }
      else
      {
        v11 = CFSTR("Disable");
      }
      goto LABEL_24;
    }
    return 4294954512;
  }
  return result;
}

void sub_1A2D117D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2D11C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void __captureSourceServer_handleCopySourcesMessage_block_invoke(uint64_t a1)
{
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFTypeID v7;
  char v8;
  __int128 v9;
  _BOOL8 HasAccessToCamera;
  CFIndex v11;
  const void *ValueAtIndex;
  audit_token_t v13;
  CFRange v14;

  if ((gFigXPCServerCaptureSource_block_invoke_registeredForChanges & 1) == 0)
  {
    gFigXPCServerCaptureSource_block_invoke_registeredForChanges = 1;
    FigCameraUsageRegisterChangeHandler(&__block_literal_global_109);
  }
  v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v13.val = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v13.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v13);
  if (v3)
  {
    v4 = v3;
    v5 = (const __CFArray *)SecTaskCopyValueForEntitlement(v3, CFSTR("com.apple.tcc.delegated-services"), 0);
    if (v5)
    {
      v6 = v5;
      v7 = CFGetTypeID(v5);
      if (v7 == CFArrayGetTypeID())
      {
        v14.length = CFArrayGetCount(v6);
        v14.location = 0;
        v8 = CFArrayContainsValue(v6, v14, (const void *)*MEMORY[0x1E0DB10F0]) != 0;
      }
      else
      {
        v8 = 0;
      }
      CFRelease(v6);
    }
    else
    {
      v8 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)v13.val = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v13.val[4] = v9;
  HasAccessToCamera = FigCaptureSourceClientHasAccessToCamera((__int128 *)&v13);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) >= 1)
  {
    v11 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v11);
      FigVideoCaptureSourceSetClientProcessRequiresDynamicTCCAccessChecks((uint64_t)ValueAtIndex, v8);
      FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, HasAccessToCamera);
      ++v11;
    }
    while (v11 < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)));
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t FigVideoCaptureSourceSetClientProcessRequiresDynamicTCCAccessChecks(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 8) == 1)
  {
    v4 = result;
    if (!*(_BYTE *)(result + 12))
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 48));
      *(_BYTE *)(v4 + 229) = a2;
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
    }
  }
  return result;
}

uint64_t FigVideoCaptureSourceSetClientProcessHasAccessToCamera(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 12))
  {
    v4 = result;
    if (*(_DWORD *)(result + 8) == 1)
    {
      result = objc_msgSend((id)objc_msgSend(*(id *)(result + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
      if ((result - 17) >= 4)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 48));
        *(_BYTE *)(v4 + 228) = a2;
        v5 = *(_QWORD *)(v4 + 80);
        if (v5)
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(v5, a2);
        return pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
      }
    }
  }
  return result;
}

BOOL FigCaptureSourceClientHasAccessToCamera(__int128 *a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v2 = a1[1];
  v6 = *a1;
  v7 = v2;
  if (FigCaptureGetPIDFromAuditToken(&v6))
  {
    FigCaptureGetTCCServer();
    v3 = a1[1];
    v6 = *a1;
    v7 = v3;
    if (FigCaptureTCCAccessCheckAuditToken())
    {
      return 1;
    }
    else
    {
      v5 = a1[1];
      v6 = *a1;
      v7 = v5;
      return FigCaptureClientIsRunningInXCTest(&v6) != 0;
    }
  }
  else
  {
    FigDebugAssert3();
    return 0;
  }
}

uint64_t FigCaptureGetTCCServer()
{
  if (FigCaptureGetTCCServer_onceToken != -1)
    dispatch_once(&FigCaptureGetTCCServer_onceToken, &__block_literal_global_64);
  return FigCaptureGetTCCServer_sFigCaptureTCCServer;
}

BOOL FigCaptureTCCAccessCheckAuditToken()
{
  void *v0;
  void *v1;
  _BOOL8 v2;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;

  tcc_service_singleton_for_CF_name();
  v0 = (void *)tcc_credential_create_for_process_with_audit_token();
  v1 = (void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000uLL;
  tcc_server_message_request_authorization();

  v2 = v5[3] == 2;
  _Block_object_dispose(&v4, 8);
  return v2;
}

void sub_1A2D12654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWSampleBufferGetAttachedMedia(const void *a1, uint64_t a2)
{
  return objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", a2);
}

BOOL BWSampleBufferIsMarkerBuffer(const void *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (unint64_t)CMGetAttachment(a1, CFSTR("RecordingSettings"), 0);
  v3 = (unint64_t)CMGetAttachment(a1, CFSTR("FileWriterAction"), 0);
  v4 = (unint64_t)CMGetAttachment(a1, CFSTR("AttachedMediaSwapPlaceholderSampleBuffer"), 0);
  return (v2 | v3 | v4 | (unint64_t)CMGetAttachment(a1, CFSTR("IrisMovieRequest"), 0)) != 0;
}

CFTypeRef BWSampleBufferCopyDictionaryOfAttachedMedia(const void *a1)
{
  return (id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0);
}

uint64_t BWInferenceGetAttachedInferenceResult(const void *a1, uint64_t a2)
{
  return objc_msgSend((id)CMGetAttachment(a1, CFSTR("Inferences"), 0), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
}

void sfsn_setOverCaptureSlaveStreamStatusOnSampleBuffer(const void *a1, uint64_t a2)
{
  if (!objc_msgSend((id)CMGetAttachment(a1, CFSTR("OverCaptureSlaveStreamStatus"), 0), "intValue"))
    CMSetAttachment(a1, CFSTR("OverCaptureSlaveStreamStatus"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2), 1u);
}

int32x2_t FigCaptureSwapVideoDimensionsFor90Or270Rotation(int32x2_t *a1, int a2)
{
  int32x2_t result;

  if (a2 == 270 || a2 == 90)
  {
    result = vrev64_s32(*a1);
    *a1 = result;
  }
  return result;
}

uint64_t BWActiveDeviceTypeFromPortType(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A38]) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A50]) & 1) != 0)
    return 64;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A40]) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A30]) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) != 0)
    return 16;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A20]) & 1) == 0)
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown port type %@.  Does not align with any active device types"), a1), 0));
  return 32;
}

uint64_t FigCaptureRotationDegreesFromOrientation(int a1, int a2, int a3, int a4)
{
  int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;

  v8 = FigCaptureCameraRequires180DegreesRotation(a2, a3);
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    switch(a1)
    {
      case 1:
        v9 = (a3 | a2 & (v8 ^ 1)) == 0;
        goto LABEL_15;
      case 2:
        v9 = (a3 | a2 & (v8 ^ 1)) == 0;
        goto LABEL_9;
      case 3:
        if ((v8 & 1) != 0)
          goto LABEL_11;
        goto LABEL_13;
      case 4:
        if ((v8 & 1) != 0)
          goto LABEL_13;
        goto LABEL_11;
      default:
        goto LABEL_13;
    }
  }
  if (a1 == 2)
  {
LABEL_11:
    v10 = 180;
  }
  else
  {
    if (a1 == 4)
    {
      v9 = a2 == 0;
LABEL_15:
      v10 = 90;
      v11 = 270;
    }
    else
    {
      if (a1 != 3)
      {
LABEL_13:
        v10 = 0;
        v12 = 0;
        goto LABEL_19;
      }
      v9 = a2 == 0;
LABEL_9:
      v10 = 270;
      v11 = 90;
    }
    if (!v9)
      v10 = v11;
  }
  v12 = 360;
LABEL_19:
  v13 = v12 - v10;
  if (a4)
    return v13;
  else
    return v10;
}

uint64_t FigCapturePlatformMountsCamerasInLandscapeOrientation()
{
  return 1;
}

uint64_t FigCaptureCameraRequires180DegreesRotation(int a1, char a2)
{
  char v2;

  v2 = 0;
  if (a1 && (a2 & 1) == 0)
  {
    if (fcc_frontCameraOrientation_onceToken != -1)
      dispatch_once(&fcc_frontCameraOrientation_onceToken, &__block_literal_global_83);
    v2 = fcc_frontCameraOrientation_sFrontCameraOrientation ^ 1;
  }
  return v2 & 1;
}

double BWGetOriginalPresentationTimeStampFromBuffer@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const __CFDictionary *v4;
  uint64_t v5;
  double result;
  CMTime v7;

  v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  if (v4)
    CMTimeMakeFromDictionary(&v7, v4);
  else
    CMSampleBufferGetPresentationTimeStamp(&v7, (CMSampleBufferRef)a1);
  result = *(double *)&v7.value;
  *(CMTime *)a2 = v7;
  return result;
}

void BWSampleBufferRemoveAllAttachedMedia(const void *a1)
{
  CMRemoveAttachment(a1, CFSTR("AttachedMedia"));
}

uint64_t FigCaptureTransformFlipAppliedBeforeRotationToAfter(uint64_t result, int a2)
{
  unsigned int v2;

  if ((_DWORD)result && (a2 == 270 || a2 == 90))
  {
    if ((_DWORD)result == 1)
      v2 = 2;
    else
      v2 = result;
    if ((_DWORD)result == 2)
      return 1;
    else
      return v2;
  }
  return result;
}

double iqsn_cleanupBufferContext(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  double result;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v4 + 16);
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void BWNodeSanitizeMetadataIfNecessary(const void *a1)
{
  if (objc_msgSend((id)CMGetAttachment(a1, CFSTR("FrameIsBlackened"), 0), "BOOLValue"))
  {
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], MEMORY[0x1E0C9AA70], 1u);
    CMRemoveAttachment(a1, CFSTR("FrameIsBlackened"));
  }
}

BOOL BWColorSpacePropertiesIsHDR(int a1)
{
  return (a1 - 5) < 3;
}

id loadDefaultsWritesWithPrefix(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[5];
  id v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "persistentDomainForName:", CFSTR("com.apple.coremedia"));
  v6 = (id)objc_claimAutoreleasedReturnValue();

  v7 = 0x1E0C99000uLL;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  getPrefs();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v10)
  {
    v11 = v10;
    v12 = 0;
    v13 = *(_QWORD *)v29;
    do
    {
      v14 = 0;
      v15 = v6;
      do
      {
        if (*(_QWORD *)v29 != v13)
          objc_enumerationMutation(v9);
        v6 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * v14);

        if (v6)
          objc_msgSend(v8, "addEntriesFromDictionary:", v6);
        else
          v12 = 1;
        ++v14;
        v15 = v6;
      }
      while (v11 != v14);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v11);

    v7 = 0x1E0C99000;
    if ((v12 & 1) != 0)
      objc_msgSend(v9, "compact");
  }
  else
  {

  }
  v16 = v8;
  v17 = v3;
  v18 = (void *)objc_opt_new();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = __extractSubset_block_invoke;
  v32[3] = &unk_1E491F0C0;
  v32[4] = v17;
  v19 = v18;
  v33 = v19;
  objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", v32);

  v20 = v33;
  v21 = v19;

  v22 = (void *)MEMORY[0x1E0C99DE8];
  objc_msgSend(v21, "allKeys");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "arrayWithArray:", v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "allKeys");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "removeObjectsInArray:", v25);

  objc_msgSend(*(id *)(v7 + 3592), "dictionaryWithDictionary:", v4);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "addEntriesFromDictionary:", v21);
  objc_msgSend(v26, "removeObjectsForKeys:", v24);

  return v26;
}

id getPrefs()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)getPrefs_s_prefs;
  if (!getPrefs_s_prefs)
  {
    objc_msgSend(MEMORY[0x1E0CB3868], "weakObjectsPointerArray");
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)getPrefs_s_prefs;
    getPrefs_s_prefs = v1;

    v0 = (void *)getPrefs_s_prefs;
  }
  return v0;
}

void *BWLoadProcessorBundle(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v9;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v4 = (void *)objc_msgSend(CFSTR("/System/Library/VideoProcessors"), "stringByAppendingPathComponent:", a1);
  if ((_DWORD)a2 != -1)
    v4 = (void *)objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("V%d"), a2);
  v5 = objc_msgSend(v4, "stringByAppendingPathExtension:", CFSTR("bundle"));
  v6 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", v5);
  v7 = v6;
  if (v6)
  {
    v9 = 0;
    if ((objc_msgSend(v6, "loadAndReturnError:", &v9) & 1) == 0)
      return 0;
  }
  return v7;
}

uint64_t csp_formatIndex(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, unsigned __int8 a11, char a12, _BYTE *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, _QWORD *a17, uint64_t *a18)
{
  uint64_t v18;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;

  v26 = objc_msgSend(a1, "shouldPreferSIFRFormatWithHighlightRecoveryEnabled:", a11);
  v65 = objc_msgSend(a1, "formatIndex");
  v67 = objc_msgSend(a1, "fesInputCropDimensions");
  v66 = objc_msgSend(a1, "cropDimensionsForFES");
  v64 = objc_msgSend(a1, "sensorCropDimensions");
  objc_msgSend(a1, "sensorCenterOffset");
  v28 = v27;
  v30 = v29;
  v69 = objc_msgSend(a1, "postGDCCropDimensions");
  v31 = objc_msgSend(a1, "isSIFRSupported");
  if (a3
    && objc_msgSend(a1, "depthCompanionFormat")
    && v26 == objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sifrEnabled")
    && (a12 & 1) == 0)
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "depthCompanionFormat"), "sensorCenterOffset");
    v28 = v36;
    v30 = v37;
    v38 = (void *)objc_msgSend(a1, "depthCompanionFormat");
LABEL_40:
    v56 = objc_msgSend(v38, "sifrEnabled");
    goto LABEL_41;
  }
  if (a7 && objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "sensorDimensions");
    objc_msgSend((id)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat"), "sensorCenterOffset");
    v28 = v39;
    v30 = v40;
    v38 = (void *)objc_msgSend(a1, "midFrameSynchronizationOptimizedCompanionFormat");
    goto LABEL_40;
  }
  if (a8 && objc_msgSend(a1, "stereoVideoCompanionFormat"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "stereoVideoCompanionFormat"), "sensorCenterOffset");
    v28 = v41;
    v30 = v42;
    v38 = (void *)objc_msgSend(a1, "stereoVideoCompanionFormat");
    goto LABEL_40;
  }
  objc_msgSend(a1, "ultraHighResCompanionFormat");
  if (a4
    && objc_msgSend(a1, "fsdNetCompanionFormat")
    && v26 == objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sifrEnabled"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "fsdNetCompanionFormat"), "sensorCenterOffset");
    v28 = v57;
    v30 = v58;
    v38 = (void *)objc_msgSend(a1, "fsdNetCompanionFormat");
    goto LABEL_40;
  }
  if (a2)
  {
    v43 = (void *)objc_msgSend(a1, "frontEndScalerCompanionFormats");
    if (objc_msgSend(v43, "count"))
    {
      v44 = objc_msgSend(v43, "firstObject");
      if (a9)
        v44 = objc_msgSend(v43, "lastObject");
      v45 = (void *)v44;
      if (!v44)
      {
        v63 = v18;
        LODWORD(v62) = 0;
        FigDebugAssert3();
      }
      if (v26 == objc_msgSend(v45, "sifrEnabled", v62, v63))
      {
        v32 = objc_msgSend(v45, "formatIndex");
        v33 = objc_msgSend(v45, "fesInputCropDimensions");
        v34 = objc_msgSend(v45, "outputCropDimensionsWhenFesIsEnabled");
        v35 = objc_msgSend(v45, "sensorCropDimensions");
        objc_msgSend(v45, "sensorCenterOffset");
        v28 = v59;
        v30 = v60;
        v69 = objc_msgSend(v45, "postGDCCropDimensions");
        v38 = v45;
        goto LABEL_40;
      }
    }
  }
  if ((v26 & 1) == 0 && objc_msgSend(a1, "nonSIFRCompanionFormat"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "nonSIFRCompanionFormat"), "sensorCenterOffset");
    v28 = v46;
    v30 = v47;
    v38 = (void *)objc_msgSend(a1, "nonSIFRCompanionFormat");
    goto LABEL_40;
  }
  if (a5 && objc_msgSend(a1, "actionCameraCompanionFormat"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "formatIndex");
    v35 = objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "actionCameraCompanionFormat"), "sensorCenterOffset");
    v28 = v48;
    v30 = v49;
    v50 = a14;
    v51 = a15;
    v34 = v66;
    v33 = v67;
    goto LABEL_42;
  }
  if (a6 && objc_msgSend(a1, "fullBinSIFRCompanionFormat"))
  {
    v32 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "formatIndex");
    v33 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "fesInputCropDimensions");
    v34 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "outputCropDimensionsWhenFesIsEnabled");
    v35 = objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "sensorCropDimensions");
    objc_msgSend((id)objc_msgSend(a1, "fullBinSIFRCompanionFormat"), "sensorCenterOffset");
    v28 = v52;
    v30 = v53;
    v38 = (void *)objc_msgSend(a1, "fullBinSIFRCompanionFormat");
    goto LABEL_40;
  }
  if (a10 && objc_msgSend(a1, "hasSensorHDRCompanionIndex"))
  {
    v32 = objc_msgSend(a1, "sensorHDRCompanionIndex");
    v33 = objc_msgSend(a1, "fesInputCropDimensions");
    v34 = objc_msgSend(a1, "cropDimensionsForFES");
    v35 = objc_msgSend(a1, "sensorCropDimensions");
    objc_msgSend(a1, "sensorCenterOffset");
    v28 = v54;
    v30 = v55;
    v69 = objc_msgSend(a1, "postGDCCropDimensions");
    v56 = objc_msgSend(a1, "isSIFRSupported");
LABEL_41:
    v31 = v56;
    v50 = a14;
    v51 = a15;
    goto LABEL_42;
  }
  if (v26)
  {
    v32 = v65;
    if ((objc_msgSend(a1, "isSIFRSupported") & 1) == 0)
      objc_msgSend(a1, "isSIFRSupported");
    v50 = a14;
    v51 = a15;
  }
  else
  {
    v50 = a14;
    v51 = a15;
    v32 = v65;
  }
  v34 = v66;
  v33 = v67;
  v35 = v64;
LABEL_42:
  if (v50)
    *v50 = v33;
  if (v51)
    *v51 = v34;
  if (a16)
    *a16 = v35;
  if (a17)
  {
    *a17 = v28;
    a17[1] = v30;
  }
  if (a18)
    *a18 = v69;
  if (a13)
    *a13 = v31;
  return v32;
}

uint64_t csp_shouldUseFESCompanionIndex(void *a1, void *a2, unint64_t a3)
{
  void *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  void *v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(a1, "requiredFormat");
  if ((objc_msgSend(a1, "cinematicFramingEnabled") & 1) != 0 || (objc_msgSend(a1, "deskCamEnabled") & 1) != 0)
    return 0;
  result = objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "count");
  if (result)
  {
    result = 0;
    if ((int)a3 >= 1 && SHIDWORD(a3) >= 1)
    {
      v24 = a1;
      v25 = HIDWORD(a3);
      v26 = a3;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v28;
LABEL_8:
        v11 = 0;
        while (1)
        {
          if (*(_QWORD *)v28 != v10)
            objc_enumerationMutation(a2);
          v12 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v11);
          v13 = (void *)objc_msgSend(v12, "sinkConfiguration");
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v13, "sinkType") == 6)
          {
            v14 = objc_msgSend(v6, "previewDimensions");
            v15 = objc_msgSend(v12, "nonRotatedOutputDimensions");
            if ((objc_msgSend(v13, "optimizedForPreview") & 1) == 0
              && ((int)v15 > (int)v14 || SHIDWORD(v15) > SHIDWORD(v14)))
            {
              return 0;
            }
            if (objc_msgSend(v12, "videoStabilizationMethod")
              && objc_msgSend(v12, "videoStabilizationMethod") != 4)
            {
              return 0;
            }
          }
          if (v9 == ++v11)
          {
            v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
            if (v9)
              goto LABEL_8;
            break;
          }
        }
      }
      v17 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "lastObject"), "fesDimensions");
      v18 = v17;
      v19 = HIDWORD(v17);
      if (objc_msgSend(v24, "geometricDistortionCorrectionEnabled"))
      {
        v20 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "frontEndScalerCompanionFormats"), "lastObject"), "geometricDistortionCorrectedNativeDimensions");
        if ((int)v20 > v18 || SHIDWORD(v20) > (int)v19)
        {
          v18 = v20;
          LODWORD(v19) = HIDWORD(v20);
        }
      }
      return v18 >= v26 && (int)v19 >= (int)v25;
    }
  }
  return result;
}

uint64_t csp_gdcExpandsImageDimensions(uint64_t a1)
{
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, id *);
  uint64_t v3;
  id v5;

  v5 = 0;
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v2 || v2(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v5))
    return 0;
  v3 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrectionExpandsImageDimensions")), "BOOLValue");

  return v3;
}

uint64_t cs_shouldEnableGreenGhostMitigation(void *a1)
{
  int v2;

  if ((int)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "greenGhostMitigationVersion") < 1)
    return 0;
  v2 = objc_msgSend(a1, "depthDataDeliveryEnabled");
  return v2 ^ 1 | objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), (uint64_t)CFSTR("DepthDataDeliveryConfigurations")), "objectForKeyedSubscript:", CFSTR("StillImageGGMSupported")), "BOOLValue");
}

uint64_t cs_streamingDepthDataType(void *a1)
{
  unsigned int v1;

  v1 = cs_stillImageDepthDataType(a1) - 1;
  if (v1 > 7)
    return 0;
  else
    return dword_1A32B1404[v1];
}

uint64_t cs_stillImageDepthDataType(void *a1)
{
  uint64_t v1;
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, id *);
  uint64_t v3;
  id v5;

  if (!a1)
    return 0;
  v5 = 0;
  v1 = objc_msgSend(a1, "source");
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v2 || v2(v1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v5))
    return 0;
  v3 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("StillImageDepthDataType")), "intValue");

  return v3;
}

FigCaptureMetadataSinkPipelineConfiguration *captureSession_createMetadataSinkPipelineConfiguration(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  char *v13;
  FigCaptureMetadataSinkPipelineConfiguration *v14;
  char IsCameraOrDerivativeRunningInPhotoMode;
  char shouldUseSceneClassifierToGateMetadataDetection;
  unint64_t v17;
  char shouldEnableDeferredNodePrepare;
  BOOL v19;
  int v20;
  int v21;
  int v24;

  v24 = 0;
  v7 = (void *)objc_msgSend(a2, "metadataObjectConnectionConfiguration");
  v8 = objc_msgSend(a2, "sceneClassifierConnectionConfiguration");
  v9 = (void *)objc_msgSend(v7, "sourceConfiguration");
  v10 = (char *)objc_msgSend(a2, "videoDataConnectionConfiguration");
  v11 = (void *)objc_msgSend(a2, "movieFileVideoConnectionConfiguration");
  v12 = (void *)objc_msgSend(a2, "videoPreviewSinkConnectionConfiguration");
  v13 = (char *)objc_msgSend(a2, "movieFileDetectedObjectMetadataConnectionConfigurations");
  v14 = objc_alloc_init(FigCaptureMetadataSinkPipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v14, (char *)v7);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v14, v10);
  IsCameraOrDerivativeRunningInPhotoMode = captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(a1, v9);
  -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v14, IsCameraOrDerivativeRunningInPhotoMode);
  shouldUseSceneClassifierToGateMetadataDetection = captureSession_shouldUseSceneClassifierToGateMetadataDetection(a1, v8, v7);
  -[FigCaptureMetadataSinkPipelineConfiguration setUseSceneClassifierToGateMetadataDetection:]((uint64_t)v14, shouldUseSceneClassifierToGateMetadataDetection);
  v17 = BWInferenceSmartCameraCurrentVersion();
  -[FigCaptureMetadataSinkPipelineConfiguration setSmartCameraPipelineVersion:]((uint64_t)v14, v17 & 0xFFFFFFFFFFFFLL);
  shouldEnableDeferredNodePrepare = captureSession_shouldEnableDeferredNodePrepare(a1, (void *)objc_msgSend(v7, "sourceConfiguration"), objc_msgSend(v12, "enabled"));
  -[FigCaptureMetadataSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v14, shouldEnableDeferredNodePrepare);
  -[FigCaptureMetadataSinkPipelineConfiguration setPreviewEnabled:]((uint64_t)v14, objc_msgSend(v12, "enabled"));
  -[FigCaptureMetadataSinkPipelineConfiguration setMotionAttachmentsSource:]((uint64_t)v14, a3);
  v19 = +[FigCaptureVISPipeline visPipelineIsRequiredForFigCaptureVideoStabilizationType:]((uint64_t)FigCaptureVISPipeline, objc_msgSend(v11, "videoStabilizationType"));
  -[FigCaptureMetadataSinkPipelineConfiguration setBoxedMetadataEnabled:]((uint64_t)v14, !v19);
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v14, v13);
  if (objc_msgSend((id)objc_msgSend(v7, "sourceConfiguration"), "depthDataDeliveryEnabled")
    && (v20 = FigVideoCaptureSourcePearlModuleType(objc_msgSend((id)objc_msgSend(v7, "sourceConfiguration"), "source"), &v24), -[FigCaptureMetadataSinkPipelineConfiguration setPearlModuleType:]((uint64_t)v14, v20), v24))
  {
    FigDebugAssert3();
  }
  else
  {
    -[FigCaptureCameraSourcePipelineConfiguration setRGBIRStereoFusionFixedDepthThresholdMM:]((uint64_t)v14, (unint64_t)objc_msgSend(v12, "transform") >> 32);
    -[FigCaptureMetadataSinkPipelineConfiguration setCompressed8BitInputEnabled:]((uint64_t)v14, objc_msgSend(v10, "videoStabilizationType") == 4);
  }
  v21 = v24;
  if (a4)
    *a4 = v24;
  if (v21)
    return 0;
  else
    return v14;
}

unint64_t BWInferenceSmartCameraCurrentVersion()
{
  if (BWInferenceSmartCameraCurrentVersion_onceToken != -1)
    dispatch_once(&BWInferenceSmartCameraCurrentVersion_onceToken, &__block_literal_global_5);
  return BWInferenceSmartCameraCurrentVersion_version | ((unint64_t)(unsigned __int16)word_1ECFEA27C << 32);
}

uint64_t FigVideoCaptureSourcePearlModuleType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourcePearlModuleType_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2D1C540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef FigCaptureSourceServerCopySourceForToken(int a1)
{
  CFTypeRef v2;
  CFIndex v3;
  uint64_t v4;
  const void *ValueAtIndex;
  void (*v6)(const void *, const __CFString *, uint64_t, id *);
  int v7;
  id v9;

  if (captureSourceServer_initializeStatics_onceToken != -1)
    dispatch_once(&captureSourceServer_initializeStatics_onceToken, &__block_literal_global_43);
  if (pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
    return 0;
  if (CFArrayGetCount((CFArrayRef)sSourceList) < 1)
  {
LABEL_12:
    v2 = 0;
  }
  else
  {
    v3 = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v3);
      v9 = 0;
      v6 = *(void (**)(const void *, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
      if (v6)
        v6(ValueAtIndex, CFSTR("SourceToken"), v4, &v9);
      if (v9)
      {
        v7 = objc_msgSend(v9, "intValue");

        if (v7 == a1)
          break;
      }
      if (++v3 >= CFArrayGetCount((CFArrayRef)sSourceList))
        goto LABEL_12;
    }
    v2 = CFRetain(ValueAtIndex);
  }
  pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  return v2;
}

id cs_captureSourceGetAttribute(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, const __CFString *, _QWORD, id *);
  id v5;
  id v6;
  id v8;

  if (!a1)
    return 0;
  v8 = 0;
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
  {
    v4(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v8);
    v5 = v8;
  }
  else
  {
    v5 = 0;
  }
  v6 = (id)objc_msgSend(v5, "objectForKeyedSubscript:", a2);

  return v6;
}

uint64_t captureSource_CopyProperty(uint64_t a1, const __CFString *a2, uint64_t a3, const void **a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  void *Copy;
  void *v9;
  uint64_t result;
  int v11;
  const void **v12;
  const void *v13;
  uint64_t v14;
  void *v15;
  id DictionaryRepresentation;
  const void **v17;
  void *v18;
  const __CFDictionary *v19;
  void *v20;
  void *v21;
  const __CFAllocator *v22;
  int v23;
  void *v24;
  const void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40;
  void *v41;
  uint64_t v42;
  void *v43;
  const __CFString *v44;
  FigCaptureStillImageProcessingSettings *v45;
  void *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v54;
  double v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE time[32];
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  CGRect v70;

  v69 = *MEMORY[0x1E0C80C00];
  v59 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    v7 = DerivedStorage;
    if (CFEqual(a2, CFSTR("SourceToken")))
    {
      Copy = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)v7);
LABEL_9:
      v9 = Copy;
      result = 0;
      *a4 = v9;
      return result;
    }
    if (CFEqual(a2, CFSTR("ClientAuditToken")))
    {
      Copy = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v7 + 16, 32);
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("ClientBundleIdentifier")))
    {
      Copy = (void *)CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFStringRef *)(v7 + 72));
      goto LABEL_9;
    }
    if (CFEqual(a2, CFSTR("PrewarmingEnabled")))
    {
      v11 = *(unsigned __int8 *)(v7 + 240);
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("IsProxy")))
    {
      v12 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_17:
      v13 = *v12;
      *a4 = *v12;
      CFRetain(v13);
      return 0;
    }
    if (CFEqual(a2, CFSTR("HasProxy")))
    {
      v11 = *(unsigned __int8 *)(v7 + 241);
LABEL_12:
      if (v11)
        v12 = (const void **)MEMORY[0x1E0C9AE50];
      else
        v12 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_17;
    }
    pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 48));
    if (*(_BYTE *)(v7 + 12))
    {
      FigDebugAssert3();
      v59 = FigSignalErrorAt();
      goto LABEL_27;
    }
    v14 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
    if (CFEqual(a2, CFSTR("AttributesDictionary")))
    {
      v15 = *(void **)(v7 + 104);
LABEL_25:
      DictionaryRepresentation = v15;
LABEL_26:
      *a4 = DictionaryRepresentation;
LABEL_27:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
      return v59;
    }
    if (CFEqual(a2, CFSTR("WhiteBalanceCalibrations")))
    {
      v15 = *(void **)(v7 + 136);
      goto LABEL_25;
    }
    if (CFEqual(a2, CFSTR("ISPChromaNoiseReductionForPairingDisabled_FigCaptureSessionOnly")))
    {
      DictionaryRepresentation = (id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", 0x1E4952B18);
      if (!DictionaryRepresentation)
        goto LABEL_26;
LABEL_31:
      DictionaryRepresentation = (id)CFRetain(DictionaryRepresentation);
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("LockedForConfiguration")))
    {
      if (*(uint64_t *)(v7 + 64) <= 0)
        v17 = (const void **)MEMORY[0x1E0C9AE40];
      else
        v17 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_60:
      v25 = *v17;
      *a4 = *v17;
      CFRetain(v25);
      goto LABEL_27;
    }
    if (CFEqual(a2, CFSTR("LensPosition")))
    {
      v18 = *(void **)(v7 + 80);
      if (v18 && (objc_msgSend(v18, "isPropertyObserved:", 0x1E4941C58) & 1) == 0)
      {
        objc_msgSend(*(id *)(v7 + 80), "lensPosition");
LABEL_40:
        v19 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
LABEL_47:
        objc_msgSend(*(id *)(v7 + 176), "setObject:forKeyedSubscript:", v19, a2);
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("ExposureDuration")))
      {
        v20 = *(void **)(v7 + 80);
        if (v20 && (objc_msgSend(v20, "isPropertyObserved:", 0x1E49532B8) & 1) == 0)
        {
          v60 = 0uLL;
          *(_QWORD *)&v61 = 0;
          v21 = *(void **)(v7 + 80);
          if (v21)
            objc_msgSend(v21, "exposureDuration");
          v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          *(_OWORD *)time = v60;
          *(_QWORD *)&time[16] = v61;
          v19 = CMTimeCopyAsDictionary((CMTime *)time, v22);
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (CFEqual(a2, CFSTR("ISO")))
      {
        v24 = *(void **)(v7 + 80);
        if (v24 && (objc_msgSend(v24, "isPropertyObserved:", 0x1E4942298) & 1) == 0)
        {
          objc_msgSend(*(id *)(v7 + 80), "ISO");
          goto LABEL_40;
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("ExposureTargetOffset")))
        {
          if (CFEqual(a2, CFSTR("DeviceWhiteBalanceGains")))
          {
            v29 = *(void **)(v7 + 80);
            if (!v29 || (objc_msgSend(v29, "isPropertyObserved:", 0x1E4953418) & 1) != 0)
              goto LABEL_48;
            objc_msgSend(*(id *)(v7 + 80), "deviceWhiteBalanceGains");
          }
          else
          {
            if (!CFEqual(a2, CFSTR("GrayWorldDeviceWhiteBalanceGains")))
            {
              if (CFEqual(a2, CFSTR("SceneClassificationConfidences")))
              {
                v35 = *(void **)(v7 + 80);
                if (v35)
                {
                  if ((objc_msgSend(v35, "isPropertyObserved:", 0x1E4953E38) & 1) == 0)
                  {
                    v19 = (const __CFDictionary *)objc_msgSend(*(id *)(v7 + 80), "sceneClassificationConfidences");
                    goto LABEL_47;
                  }
                }
              }
              goto LABEL_48;
            }
            v34 = *(void **)(v7 + 80);
            if (!v34 || (objc_msgSend(v34, "isPropertyObserved:", 0x1E4953438) & 1) != 0)
              goto LABEL_48;
            objc_msgSend(*(id *)(v7 + 80), "grayWorldDeviceWhiteBalanceGains");
          }
          *(_QWORD *)&v60 = __PAIR64__(v31, v30);
          DWORD2(v60) = v32;
          v19 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v60, 12);
          goto LABEL_47;
        }
        v26 = *(void **)(v7 + 80);
        if (v26 && (objc_msgSend(v26, "isPropertyObserved:", 0x1E4953378) & 1) == 0)
        {
          objc_msgSend(*(id *)(v7 + 80), "exposureTargetOffset");
          goto LABEL_40;
        }
      }
    }
LABEL_48:
    if (CFEqual(a2, CFSTR("FlashActive")))
    {
      v23 = objc_msgSend(*(id *)(v7 + 80), "isFlashScene");
      goto LABEL_58;
    }
    if (CFEqual(a2, CFSTR("IsHDRScene")))
    {
      v23 = objc_msgSend(*(id *)(v7 + 80), "isHDRScene");
      goto LABEL_58;
    }
    if (CFEqual(a2, CFSTR("IsStillImageStabilizationScene")))
    {
      v23 = objc_msgSend(*(id *)(v7 + 80), "isSISScene");
LABEL_58:
      v17 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v23)
        v17 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_60;
    }
    if (CFEqual(a2, CFSTR("DigitalFlashStatus")))
    {
      v27 = (void *)MEMORY[0x1E0CB37E8];
      v28 = objc_msgSend(*(id *)(v7 + 80), "digitalFlashStatus");
LABEL_67:
      DictionaryRepresentation = (id)objc_msgSend(v27, "numberWithInt:", v28);
      goto LABEL_31;
    }
    if (CFEqual(a2, CFSTR("DigitalFlashExposureTimes")))
    {
      v33 = (id)objc_msgSend(*(id *)(v7 + 80), "digitalFlashExposureTimes");
LABEL_82:
      DictionaryRepresentation = v33;
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("AutoFocusPositionSensorCalibration")))
    {
      v33 = -[FigCaptureCalibrationMonitor runAutoFocusPositionSensorCalibrationAndGetResultsForDeviceType:devicePosition:](+[FigCaptureCalibrationMonitor sharedInstance](FigCaptureCalibrationMonitor, "sharedInstance"), "runAutoFocusPositionSensorCalibrationAndGetResultsForDeviceType:devicePosition:", v14, objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue"));
      goto LABEL_82;
    }
    if (CFEqual(a2, CFSTR("CameraPoseMatrix")))
    {
      if (v14 <= 0xD && ((1 << v14) & 0x3350) != 0)
        goto LABEL_27;
      v36 = objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", CFSTR("CaptureDeviceID"));
      if (!v36)
        goto LABEL_27;
      v37 = v36;
      v38 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
      objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "prewarmDefaultVideoDeviceForPID:completionHandler:", getpid(), 0);
      v39 = (void *)objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "cameraPoseMatrixForStreamWithPosition:deviceType:deviceID:", v38, v14, v37);
      if (objc_msgSend(v39, "length") == 48)
      {
        objc_msgSend(v39, "getBytes:length:", time, 48);
        v60 = 0u;
        v61 = 0u;
        v62 = 0u;
        v63 = 0u;
        DWORD2(v60) = v65;
        DWORD2(v61) = v66;
        *(_QWORD *)&v60 = vzip1q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
        *(_QWORD *)&v61 = vtrn2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
        DWORD2(v62) = v67;
        DWORD2(v63) = v68;
        *(_QWORD *)&v62 = vzip1q_s32(vdupq_laneq_s32(*(int32x4_t *)time, 2), vdupq_laneq_s32(*(int32x4_t *)&time[16], 2)).u64[0];
        *(_QWORD *)&v63 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]), *(int32x4_t *)time).u64[0];
        DictionaryRepresentation = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v60, 64);
        goto LABEL_26;
      }
      if (!v39)
        goto LABEL_27;
      v40 = -12783;
LABEL_101:
      v59 = v40;
      goto LABEL_27;
    }
    if (CFEqual(a2, CFSTR("OverheadCameraMode")))
    {
      v27 = (void *)MEMORY[0x1E0CB37E8];
      v28 = objc_msgSend(*(id *)(v7 + 80), "overheadCameraMode");
      goto LABEL_67;
    }
    if (CFEqual(a2, CFSTR("CenterStageRectOfInterest")))
    {
      objc_msgSend(*(id *)(v7 + 80), "centerStageRectOfInterest");
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v70);
      goto LABEL_26;
    }
    if (CFEqual(a2, CFSTR("CenterStageFramingMode")))
    {
      v27 = (void *)MEMORY[0x1E0CB37E8];
      v28 = objc_msgSend(*(id *)(v7 + 80), "centerStageFramingMode");
      goto LABEL_67;
    }
    if (CFEqual(a2, CFSTR("CenterStageMetadataDeliveryEnabled")))
    {
      v41 = (void *)MEMORY[0x1E0CB37E8];
      v42 = objc_msgSend(*(id *)(v7 + 80), "centerStageMetadataDeliveryEnabled");
    }
    else if (CFEqual(a2, CFSTR("CenterStageFieldOfViewRestrictedToWide")))
    {
      v41 = (void *)MEMORY[0x1E0CB37E8];
      v42 = objc_msgSend(*(id *)(v7 + 80), "centerStageFieldOfViewRestrictedToWide");
    }
    else
    {
      if (!CFEqual(a2, CFSTR("SceneClassificationActive")))
      {
        if (CFEqual(a2, CFSTR("SupportedCMIOExtensionProperties")))
        {
          v43 = (void *)objc_msgSend(*(id *)(v7 + 80), "device");
          v44 = CFSTR("CMIOExtensionPropertyArray");
        }
        else
        {
          if (CFEqual(a2, CFSTR("SerializedProcessingSettings")))
          {
            v45 = objc_alloc_init(FigCaptureStillImageProcessingSettings);
            if (objc_msgSend(*(id *)(v7 + 80), "sensorRawPoolEnabled"))
            {
              v46 = (void *)objc_msgSend(*(id *)(v7 + 80), "sensorRawPoolRequirements");
              v47 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9040]), "unsignedIntValue");
              v48 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E0CA90E0]), "intValue");
              v49 = objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FD8]), "intValue");
              v50 = objc_msgSend(*(id *)(v7 + 80), "ultraHighResSensorRawPoolDimensions");
              v51 = v49 << 32;
              v52 = v48;
            }
            else
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              v47 = 0;
            }
            objc_msgSend((id)objc_msgSend(*(id *)(v7 + 80), "zoomCommandHandler"), "appliedZoomFactorWithoutFudge");
            *(float *)&v55 = v54 * *(float *)(v7 + 168);
            -[FigCaptureStillImageProcessingSettings setUiZoomFactor:](v45, "setUiZoomFactor:", v55);
            -[FigCaptureStillImageProcessingSettings setSensorRawPixelFormat:](v45, "setSensorRawPixelFormat:", v47);
            -[FigCaptureStillImageProcessingSettings setSensorRawDimensions:](v45, "setSensorRawDimensions:", v52 | v51);
            -[FigCaptureStillImageProcessingSettings setUltraHighResSensorRawDimensions:](v45, "setUltraHighResSensorRawDimensions:", v50);
            -[FigCaptureStillImageProcessingSettings setCameraInfoByPortType:](v45, "setCameraInfoByPortType:", objc_msgSend(*(id *)(v7 + 80), "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", (_DWORD)v47 != 0, (_DWORD)v47 != 0, (_DWORD)v47 != 0));
            -[FigCaptureStillImageProcessingSettings setModuleCalibrationByPortType:](v45, "setModuleCalibrationByPortType:", objc_msgSend(*(id *)(v7 + 80), "moduleCalibrationByPortType"));
            *(_QWORD *)&v60 = 0;
            v56 = (void *)objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v45, 1, &v60);
            if (v56)
              *a4 = v56;
            else
              v59 = -12783;

            goto LABEL_27;
          }
          DictionaryRepresentation = (id)objc_msgSend(*(id *)(v7 + 176), "objectForKeyedSubscript:", a2);
          if (DictionaryRepresentation)
            goto LABEL_31;
          if (!objc_msgSend(*(id *)(v7 + 80), "device") || !BWDeviceTypeIsExtensionDeviceType(v14))
          {
            v40 = -12784;
            goto LABEL_101;
          }
          if (dword_1ECFE9450)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v43 = (void *)objc_msgSend(*(id *)(v7 + 80), "device", v57, v58);
          v44 = a2;
        }
        DictionaryRepresentation = (id)objc_msgSend(v43, "copyProperty:error:", v44, &v59);
        goto LABEL_26;
      }
      v41 = (void *)MEMORY[0x1E0CB37E8];
      v42 = objc_msgSend(*(id *)(v7 + 80), "smartCameraEnabled");
    }
    DictionaryRepresentation = (id)objc_msgSend(v41, "numberWithBool:", v42);
    goto LABEL_31;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

BOOL captureSession_shouldUseSceneClassifierToGateMetadataDetection(uint64_t a1, uint64_t a2, void *a3)
{
  _BOOL8 v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD v15[4];

  v3 = 0;
  v15[3] = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    if (captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(a1, (void *)objc_msgSend(a3, "sourceConfiguration")))
    {
      v5 = (void *)objc_msgSend(a3, "metadataIdentifiers");
      v11 = 0;
      v12 = &v11;
      v13 = 0x2020000000;
      v14 = 0;
      v6 = *MEMORY[0x1E0D08558];
      v15[0] = *MEMORY[0x1E0CA4C98];
      v15[1] = v6;
      v15[2] = *MEMORY[0x1E0D08590];
      v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 3);
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __captureSession_shouldUseSceneClassifierToGateMetadataDetection_block_invoke;
      v10[3] = &unk_1E4922FA8;
      v10[4] = v7;
      v10[5] = &v11;
      v8 = (void *)objc_msgSend(v5, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", v10));
      if (*((_BYTE *)v12 + 24))
        v3 = objc_msgSend(v8, "count") == 0;
      else
        v3 = 0;
      _Block_object_dispose(&v11, 8);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_1A2D1D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_clientIsCameraOrDerivativeRunningInPhotoMode(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  int v5;
  unsigned int IsCameraOrDerivative;
  unsigned int v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", CFSTR("AVCaptureSessionPresetPhoto"));
  LODWORD(DerivedStorage) = *(unsigned __int8 *)(DerivedStorage + 335);
  IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
  if ((_DWORD)DerivedStorage)
    v7 = 1;
  else
    v7 = IsCameraOrDerivative;
  if (v5)
    return v7;
  else
    return 0;
}

uint64_t captureSession_shouldEnableDeferredNodePrepare(uint64_t a1, void *a2, int a3)
{
  uint64_t result;

  if (!a2 || objc_msgSend(a2, "sourceType") == 1)
  {
    if (a3)
      goto LABEL_4;
    return 0;
  }
  FigDebugAssert3();
  if (!a3)
    return 0;
LABEL_4:
  result = captureSession_clientIsCameraOrDerivative(a1);
  if ((_DWORD)result)
    return objc_msgSend(a2, "imageControlMode") != 4;
  return result;
}

uint64_t captureSession_updateGraphConnectionEnabledState(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t k;
  uint64_t m;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t n;
  void *v31;
  char v32;
  unsigned int v33;
  void *v35;
  void *v36;
  int v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ii;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t jj;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t kk;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t mm;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t nn;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t i1;
  void *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t i2;
  void *v89;
  void *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id obj;
  id obja;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  os_log_type_t type;
  int v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  _BYTE v163[128];
  _BYTE v164[128];
  _BYTE v165[128];
  _BYTE v166[128];
  _BYTE v167[128];
  _BYTE v168[128];
  _BYTE v169[128];
  _BYTE v170[128];
  _BYTE v171[128];
  _BYTE v172[128];
  _BYTE v173[128];
  _BYTE v174[128];
  _BYTE v175[128];
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(void **)(DerivedStorage + 624);
  v101 = DerivedStorage;
  if (!_FigIsCurrentDispatchQueue())
  {
    v95 = v2;
    LODWORD(v93) = 0;
    FigDebugAssert3();
  }
  v161 = 0u;
  v162 = 0u;
  v159 = 0u;
  v160 = 0u;
  v102 = a2;
  v6 = (void *)objc_msgSend(a2, "parsedVideoDataSinkConfigurations", v93, v95);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v159, v175, 16);
  v108 = v5;
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v160;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v160 != v9)
          objc_enumerationMutation(v6);
        objc_msgSend((id)objc_msgSend(v5, "videoDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v159 + 1) + 8 * i), "videoDataConnectionConfiguration", v94, v96), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v159 + 1) + 8 * i), "videoDataConnectionConfiguration"), "enabled") ^ 1);
        if (dword_1ECFE9590)
        {
          v158 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v5 = v108;
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v159, v175, 16);
    }
    while (v8);
  }
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v12 = (void *)objc_msgSend(a2, "parsedDepthDataSinkConfigurations", v94);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v153, v174, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v154;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v154 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend((id)objc_msgSend(v5, "depthDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v153 + 1) + 8 * j), "depthDataConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v153 + 1) + 8 * j), "depthDataConnectionConfiguration"), "enabled") ^ 1);
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v153, v174, 16);
    }
    while (v14);
  }
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  v17 = (void *)objc_msgSend(a2, "audioDataSinkConnectionConfigurations");
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v149, v173, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v150;
    do
    {
      for (k = 0; k != v19; ++k)
      {
        if (*(_QWORD *)v150 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend((id)objc_msgSend(v5, "audioDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v149 + 1) + 8 * k), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((_QWORD *)&v149 + 1) + 8 * k), "enabled") ^ 1);
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v149, v173, 16);
    }
    while (v19);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v101 + 176));
  v105 = *(_QWORD *)(v101 + 184);
  os_unfair_lock_unlock((os_unfair_lock_t)(v101 + 176));
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  obj = (id)objc_msgSend(a2, "parsedPreviewSinkConfigurations");
  v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v145, v172, 16);
  if (v106)
  {
    v103 = *(_QWORD *)v146;
    do
    {
      for (m = 0; m != v106; ++m)
      {
        if (*(_QWORD *)v146 != v103)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v145 + 1) + 8 * m);
        v24 = (void *)objc_msgSend(v5, "previewSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
        v25 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        if (objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration"));
        if (objc_msgSend(v23, "videoThumbnailConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "videoThumbnailConnectionConfiguration"));
        if (objc_msgSend(v23, "depthDataConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "depthDataConnectionConfiguration"));
        if (objc_msgSend(v23, "previewTimeMachineConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "previewTimeMachineConnectionConfiguration"));
        if (objc_msgSend(v23, "previewSmartStyleCoefficientsTimeMachineConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "previewSmartStyleCoefficientsTimeMachineConnectionConfiguration"));
        if (objc_msgSend(v23, "sceneClassifierConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "sceneClassifierConnectionConfiguration"));
        if (objc_msgSend(v23, "metadataObjectConnectionConfiguration"))
          objc_msgSend(v25, "addObject:", objc_msgSend(v23, "metadataObjectConnectionConfiguration"));
        v143 = 0u;
        v144 = 0u;
        v141 = 0u;
        v142 = 0u;
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v141, v171, 16);
        if (v26)
        {
          v27 = v26;
          v28 = 0;
          v29 = *(_QWORD *)v142;
          do
          {
            for (n = 0; n != v27; ++n)
            {
              if (*(_QWORD *)v142 != v29)
                objc_enumerationMutation(v25);
              v31 = *(void **)(*((_QWORD *)&v141 + 1) + 8 * n);
              v32 = objc_msgSend(v31, "enabled");
              if (objc_msgSend((id)objc_msgSend(v31, "sinkConfiguration"), "sinkType") == 14)
              {
                v33 = objc_msgSend((id)objc_msgSend(v31, "sinkConfiguration"), "subType");
                if (v33 <= 3 && v33 != 2)
                  objc_msgSend(v31, "enabled");
              }
              v28 |= v32;
            }
            v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v141, v171, 16);
          }
          while (v27);
        }
        else
        {
          v28 = 0;
        }
        objc_msgSend(v24, "setDiscardsSampleData:", (v28 & 1) == 0);
        v35 = (void *)objc_msgSend(v23, "videoPreviewSinkConnectionConfiguration");
        if (v35)
        {
          v36 = v35;
          v37 = objc_msgSend(v35, "enabled");
          if (v105)
            v38 = 1;
          else
            v38 = v37;
          objc_msgSend(v24, "setDiscardsImageQueueSampleData:", v38 ^ 1u);
          objc_msgSend(v24, "setPreviewSinkEnabled:", objc_msgSend(v36, "enabled"));
          objc_msgSend(v24, "setPreviewTapRegistered:", v105 != 0);
        }
        v5 = v108;
      }
      v106 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v145, v172, 16);
    }
    while (v106);
  }
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v39 = (void *)objc_msgSend(v102, "parsedMetadataSinkConfigurations");
  v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v137, v170, 16);
  if (v40)
  {
    v41 = v40;
    v42 = *(_QWORD *)v138;
    do
    {
      for (ii = 0; ii != v41; ++ii)
      {
        if (*(_QWORD *)v138 != v42)
          objc_enumerationMutation(v39);
        v44 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v137 + 1) + 8 * ii), "metadataObjectConnectionConfiguration");
        v45 = objc_msgSend(v5, "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v44, "sinkConfiguration"), "sinkID"));
        if (FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v44))
          -[FigCaptureMetadataSinkPipeline setDiscardsMRCSampleData:](v45, objc_msgSend(v44, "enabled") ^ 1);
        if (FigCaptureMetadataObjectConfigurationRequiresFaceDetection(v44))
          -[FigCaptureMetadataSinkPipeline setDiscardsFaceDetectionSampleData:](v45, objc_msgSend(v44, "enabled") ^ 1);
        if (FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v44))
          -[FigCaptureMetadataSinkPipeline setDiscardsFaceTrackingSampleData:](v45, objc_msgSend(v44, "enabled") ^ 1);
      }
      v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v137, v170, 16);
    }
    while (v41);
  }
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v46 = (void *)objc_msgSend(v102, "videoThumbnailSinkConfigurations");
  v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v133, v169, 16);
  if (v47)
  {
    v48 = v47;
    v49 = *(_QWORD *)v134;
    do
    {
      for (jj = 0; jj != v48; ++jj)
      {
        if (*(_QWORD *)v134 != v49)
          objc_enumerationMutation(v46);
        objc_msgSend((id)objc_msgSend(v5, "videoThumbnailSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * jj), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * jj), "enabled") ^ 1);
      }
      v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v133, v169, 16);
    }
    while (v48);
  }
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v51 = (void *)objc_msgSend(v102, "parsedVisionDataSinkConfigurations");
  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v129, v168, 16);
  if (v52)
  {
    v53 = v52;
    v54 = *(_QWORD *)v130;
    do
    {
      for (kk = 0; kk != v53; ++kk)
      {
        if (*(_QWORD *)v130 != v54)
          objc_enumerationMutation(v51);
        objc_msgSend((id)objc_msgSend(v5, "visionDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v129 + 1) + 8 * kk), "visionDataConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v129 + 1) + 8 * kk), "visionDataConnectionConfiguration"), "enabled") ^ 1);
      }
      v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v129, v168, 16);
    }
    while (v53);
  }
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v56 = (void *)objc_msgSend(v102, "pointCloudDataSinkConnectionConfigurations");
  v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v125, v167, 16);
  if (v57)
  {
    v58 = v57;
    v59 = *(_QWORD *)v126;
    do
    {
      for (mm = 0; mm != v58; ++mm)
      {
        if (*(_QWORD *)v126 != v59)
          objc_enumerationMutation(v56);
        objc_msgSend((id)objc_msgSend(v5, "pointCloudDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v125 + 1) + 8 * mm), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((_QWORD *)&v125 + 1) + 8 * mm), "enabled") ^ 1);
      }
      v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v125, v167, 16);
    }
    while (v58);
  }
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v61 = (void *)objc_msgSend(v102, "cameraCalibrationDataSinkConnectionConfigurations");
  v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v121, v166, 16);
  if (v62)
  {
    v63 = v62;
    v64 = *(_QWORD *)v122;
    do
    {
      for (nn = 0; nn != v63; ++nn)
      {
        if (*(_QWORD *)v122 != v64)
          objc_enumerationMutation(v61);
        objc_msgSend((id)objc_msgSend(v5, "cameraCalibrationDataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v121 + 1) + 8 * nn), "sinkConfiguration"), "sinkID")), "setDiscardsSampleData:", objc_msgSend(*(id *)(*((_QWORD *)&v121 + 1) + 8 * nn), "enabled") ^ 1);
      }
      v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v121, v166, 16);
    }
    while (v63);
  }
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v98 = (id)objc_msgSend(v102, "parsedCameraSourceConfigurations");
  result = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v117, v165, 16);
  v104 = result;
  if (result)
  {
    v67 = *(_QWORD *)v118;
    v97 = *(_QWORD *)v118;
    do
    {
      v68 = 0;
      do
      {
        if (*(_QWORD *)v118 != v67)
          objc_enumerationMutation(v98);
        v107 = v68;
        v69 = *(void **)(*((_QWORD *)&v117 + 1) + 8 * v68);
        v70 = objc_msgSend(v5, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v69, "cameraConfiguration"), "sourceID"));
        if (objc_msgSend(v102, "isMultiCamSession"))
        {
          v71 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          if (objc_msgSend(v69, "videoPreviewSinkConnectionConfiguration"))
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "videoPreviewSinkConnectionConfiguration"));
          if (objc_msgSend(v69, "previewDerivedConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "previewDerivedConnectionConfigurations"));
          if (objc_msgSend(v69, "videoCaptureConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "videoCaptureConnectionConfigurations"));
          if (objc_msgSend(v69, "videoDataConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "videoDataConnectionConfigurations"));
          if (objc_msgSend(v69, "stillImageConnectionConfiguration"))
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "stillImageConnectionConfiguration"));
          if (objc_msgSend(v69, "depthDataConnectionConfiguration"))
            objc_msgSend(v71, "addObject:", objc_msgSend(v69, "depthDataConnectionConfiguration"));
          if (objc_msgSend(v69, "visionDataConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "visionDataConnectionConfigurations"));
          if (objc_msgSend(v69, "metadataObjectConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "metadataObjectConnectionConfigurations"));
          if (objc_msgSend(v69, "movieFileDetectedObjectMetadataConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "movieFileDetectedObjectMetadataConnectionConfigurations"));
          obja = (id)v70;
          if (objc_msgSend(v69, "cameraCalibrationDataConnectionConfigurations"))
            objc_msgSend(v71, "addObjectsFromArray:", objc_msgSend(v69, "cameraCalibrationDataConnectionConfigurations"));
          v72 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v113 = 0u;
          v114 = 0u;
          v115 = 0u;
          v116 = 0u;
          v73 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v113, v164, 16);
          if (v73)
          {
            v74 = v73;
            v75 = *(_QWORD *)v114;
            do
            {
              for (i1 = 0; i1 != v74; ++i1)
              {
                if (*(_QWORD *)v114 != v75)
                  objc_enumerationMutation(v71);
                v77 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * i1);
                if (objc_msgSend((id)objc_msgSend(v77, "sinkConfiguration"), "sinkType") != 14)
                {
                  v78 = objc_msgSend(v77, "underlyingDeviceType");
                  if (objc_msgSend(v72, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78)))
                  {
                    v79 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78)), "BOOLValue");
                  }
                  else
                  {
                    v79 = 1;
                  }
                  v80 = objc_msgSend(v77, "enabled");
                  v81 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v79 & (v80 ^ 1u));
                  objc_msgSend(v72, "setObject:forKeyedSubscript:", v81, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78));
                }
              }
              v74 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v113, v164, 16);
            }
            while (v74);
          }
          -[FigCaptureCameraSourcePipeline setStreamsSuspendedBySourceDeviceType:]((uint64_t)obja, v72);
          v5 = v108;
          v67 = v97;
        }
        v82 = objc_msgSend(*(id *)(v101 + 616), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(v69, "cameraConfiguration"), "sourceID"));
        if (v82)
          v83 = *(void **)(v82 + 16);
        else
          v83 = 0;
        v111 = 0u;
        v112 = 0u;
        v109 = 0u;
        v110 = 0u;
        v84 = (void *)objc_msgSend(v69, "visionDataConnectionConfigurations");
        v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v109, v163, 16);
        if (v85)
        {
          v86 = v85;
          v87 = *(_QWORD *)v110;
          do
          {
            for (i2 = 0; i2 != v86; ++i2)
            {
              if (*(_QWORD *)v110 != v87)
                objc_enumerationMutation(v84);
              v89 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * i2);
              v90 = (void *)objc_msgSend(v83, "captureStream");
              if (objc_msgSend(v83, "isBravoVariant"))
              {
                v91 = objc_msgSend(v89, "underlyingDeviceType");
                if (v91 == 3)
                {
                  v92 = objc_msgSend(v83, "bravoTelephotoCaptureStream");
                }
                else
                {
                  if (v91 != 7)
                    goto LABEL_160;
                  v92 = objc_msgSend(v83, "bravoSuperWideCaptureStream");
                }
                v90 = (void *)v92;
              }
LABEL_160:
              objc_msgSend(v90, "setVisionDataSuspended:", objc_msgSend(v89, "enabled") ^ 1);
            }
            v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v109, v163, 16);
          }
          while (v86);
        }
        objc_msgSend(v83, "setZoomPIPSuspended:", v105 != 0);
        v68 = v107 + 1;
      }
      while (v107 + 1 != v104);
      result = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v117, v165, 16);
      v104 = result;
    }
    while (result);
  }
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresFaceDetection(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA2558]);
}

uint64_t FigImageControl_UnlockWhiteBalance()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 7428) = 1;
  *(_BYTE *)(DerivedStorage + 7444) = 0;
  return 0;
}

uint64_t BWCMSampleBufferCreateDeepCopyWithNewPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2, int a3, CFTypeRef *a4, CMSampleBufferRef *a5)
{
  const opaqueCMFormatDescription *v10;
  uint64_t SampleTimingInfoArray;
  const __CFAllocator *v12;
  char v13;
  const opaqueCMFormatDescription *v14;
  const opaqueCMFormatDescription *v15;
  uint64_t v16;
  CMSampleTimingInfo *p_timingArrayOut;
  _BOOL4 v19;
  char v20;
  CMVideoFormatDescriptionRef v21;
  uint64_t v22;
  int v24;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMSampleTimingInfo timingArrayOut;
  CMItemCount timingArrayEntriesNeededOut;
  CMSampleBufferRef sampleBufferOut;

  timingArrayEntriesNeededOut = 0;
  sampleBufferOut = 0;
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  formatDescriptionOut = 0;
  if (!a1 || !a2 || !a4 || !a5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v22 = FigSignalErrorAt();
LABEL_40:
    if (formatDescriptionOut)
      CFRelease(formatDescriptionOut);
    goto LABEL_34;
  }
  v10 = (const opaqueCMFormatDescription *)*a4;
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a1, 1, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray)
  {
    v22 = SampleTimingInfoArray;
    fig_log_get_emitter();
LABEL_39:
    FigDebugAssert3();
    goto LABEL_40;
  }
  v24 = a3;
  if (timingArrayEntriesNeededOut)
    CMSampleBufferGetSampleTimingInfoArray(a1, timingArrayEntriesNeededOut, &timingArrayOut, &timingArrayEntriesNeededOut);
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = 1;
  v14 = v10;
  do
  {
    v15 = v14;
    if (!v14)
    {
      v16 = CMVideoFormatDescriptionCreateForImageBuffer(v12, a2, &formatDescriptionOut);
      if ((_DWORD)v16)
        goto LABEL_38;
      v15 = formatDescriptionOut;
    }
    if (timingArrayEntriesNeededOut)
      p_timingArrayOut = &timingArrayOut;
    else
      p_timingArrayOut = 0;
    v16 = CMSampleBufferCreateForImageBuffer(v12, a2, 1u, 0, 0, v15, p_timingArrayOut, &sampleBufferOut);
    v19 = (_DWORD)v16 == -12743 && formatDescriptionOut == 0;
    if ((_DWORD)v16 && !v19)
    {
LABEL_38:
      v22 = v16;
      fig_log_get_emitter();
      goto LABEL_39;
    }
    if (v19)
      v14 = 0;
    if (sampleBufferOut)
      break;
    v20 = (v10 != 0) & v13;
    v13 = 0;
  }
  while ((v20 & 1) != 0);
  CMPropagateAttachments(a1, sampleBufferOut);
  if (v24)
    sbu_replaceAttachedMediaWithDeepCopy(sampleBufferOut);
  else
    CMRemoveAttachment(sampleBufferOut, CFSTR("AttachedMedia"));
  *a5 = sampleBufferOut;
  sampleBufferOut = 0;
  v21 = formatDescriptionOut;
  if (!formatDescriptionOut)
    return 0;
  if (*a4)
  {
    CFRelease(*a4);
    v21 = formatDescriptionOut;
  }
  v22 = 0;
  *a4 = v21;
  formatDescriptionOut = 0;
LABEL_34:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  return v22;
}

uint64_t BWCMSampleBufferCreateCopyWithNewPixelBuffer(opaqueCMSampleBuffer *a1, __CVBuffer *a2, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  return BWCMSampleBufferCreateDeepCopyWithNewPixelBuffer(a1, a2, 1, a3, a4);
}

float BWModifiedMovingAverage(float a1, float a2, float a3)
{
  return (float)(a1 * a3) + (float)(a2 * (float)(1.0 - a3));
}

__CFString *mfsp_avVideoCodec(__CFString *result)
{
  __CFString *v1;
  uint64_t v2;
  void (*v3)(uint64_t, const __CFString *, _QWORD, id *);
  id v4;
  int v5;
  id v6;

  if (result)
  {
    v1 = result;
    if (-[__CFString outputFormat](result, "outputFormat"))
    {
      return (__CFString *)BWStringForOSType(-[__CFString outputFormat](v1, "outputFormat"));
    }
    else
    {
      v6 = 0;
      v2 = objc_msgSend((id)-[__CFString sourceConfiguration](v1, "sourceConfiguration"), "source");
      v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
      if (v3)
      {
        v3(v2, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v6);
        v4 = v6;
      }
      else
      {
        v4 = 0;
      }
      v5 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("HEVC")), "BOOLValue");

      if (v5)
        return CFSTR("hvc1");
      else
        return CFSTR("avc1");
    }
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata()
{
  return 0;
}

uint64_t BWInferenceTypeDescription(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a1);
}

uint64_t csr_serializeObjectUsingNSSecureCoding(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v2, "encodeObject:forKey:", a1, *MEMORY[0x1E0CB2CD0]);
  v3 = objc_msgSend(v2, "encodedData");

  return v3;
}

uint64_t captureDeferredPhotoProcessorRemote_PrewarmSerialized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  void *v7;
  uint64_t v8;
  _QWORD v10[2];

  if (!FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm())
  {
    v8 = 0;
    goto LABEL_10;
  }
  v10[0] = 0;
  v10[1] = 0;
  if (!a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 4294954516;
    goto LABEL_9;
  }
  ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, v10);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1),
        objc_msgSend(v7, "encodeObject:forKey:", a2, *MEMORY[0x1E0CB2CD0]),
        objc_msgSend(v7, "encodedData"),
        v7,
        ObjectID = FigXPCMessageSetCFData(),
        (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFData(), (_DWORD)ObjectID))
  {
    v8 = ObjectID;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_9;
  }
  v8 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v8)
  {
LABEL_9:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_10:
  FigXPCRelease();
  return v8;
}

BOOL FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm()
{
  return BWDeviceSupportsDeferredPhotoProcessorPrewarming();
}

uint64_t BWDeviceIsiPhone()
{
  if (BWDeviceIsiPhone_onceToken != -1)
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_39_0);
  return BWDeviceIsiPhone_isiPhone;
}

uint64_t captureDeferredPhotoProcessorRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_QWORD *)DerivedStorage;
    return 0;
  }
}

uint64_t FigCaptureMetadataUtilitiesCreateAllowedClassSetForMetadataItems()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_alloc(MEMORY[0x1E0C99E60]);
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  return objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
}

uint64_t csr_notificationFilter(int a1, int a2, void *a3, CFDictionaryRef theDict, __CFDictionary **a5)
{
  const void *Value;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  __CFDictionary *MutableCopy;
  IOSurfaceRef v17;
  int SampleBufferFromSerializedAtomBlockBufferAndSurface;
  IOSurfaceRef v19;
  IOSurfaceRef v20;
  IOSurfaceRef v21;
  int v22;
  IOSurfaceRef v23;
  IOSurfaceRef v24;
  IOSurfaceRef v25;
  IOSurfaceRef v26;
  IOSurfaceRef v27;
  IOSurfaceRef v28;
  IOSurfaceRef v29;
  IOSurfaceRef v30;
  IOSurfaceRef v31;
  IOSurfaceRef v32;
  IOSurfaceRef v33;
  IOSurfaceRef v34;
  IOSurfaceRef v35;
  IOSurfaceRef v36;
  IOSurfaceRef v37;
  IOSurfaceRef v38;
  IOSurfaceRef v39;
  IOSurfaceRef v40;
  IOSurfaceRef v41;
  IOSurfaceRef v42;
  const void *v43;
  int v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  unint64_t xobj;
  uint64_t DerivedStorage;
  xpc_object_t v51;
  xpc_object_t v52;
  unint64_t v53;
  xpc_object_t v54;
  xpc_object_t v55;
  xpc_object_t xdict;
  xpc_object_t v57;
  const __CFNumber *v58;
  const void *v59;
  const void *v60;
  unint64_t v61;
  const void *v62;
  unint64_t v63;

  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("FormatDescription_Serialized"));
    v58 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("MasterClockType"));
  }
  else
  {
    Value = 0;
    v58 = 0;
  }
  v53 = (unint64_t)xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_SampleBuffer_SerializedSurface);
  v52 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_Surface_Serialized);
  xobj = (unint64_t)xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSampleBuffer_SerializedSurface);
  v55 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSurface_Serialized);
  v51 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_ThumbnailSurface_Serialized);
  v54 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_DepthDataSurface_Serialized);
  v8 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_ConstantColorConfidenceMapSurface_Serialized);
  v9 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized);
  v10 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_HairSegmentationMatteSurface_Serialized);
  v11 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized);
  v12 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized);
  v13 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized);
  v57 = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface_Serialized);
  xdict = xpc_dictionary_get_value(a3, (const char *)kFigCaptureSessionRemoteQueueUpdatedNotificationPayloadKey_RemoteQueueReceiver_Serialized);
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = *MEMORY[0x1E0C9AE00];
  FigXPCMessageCreateBlockBufferData();
  FigXPCMessageCreateBlockBufferData();
  if (!Value
    && !v53
    && !v52
    && !v55
    && !v51
    && !v54
    && !v8
    && !v9
    && !v10
    && !v11
    && !v12
    && !v13
    && !v57
    && !xdict
    && !v58)
  {
    return 0;
  }
  v47 = v8;
  v45 = v11;
  v46 = v10;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    goto LABEL_106;
  if (Value)
  {
    v59 = 0;
    if (FigRemote_CreateFormatDescriptionFromSerializedDictionary())
      goto LABEL_106;
    CFDictionarySetValue(MutableCopy, CFSTR("FormatDescription"), v59);
    CFRelease(v59);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("FormatDescription_Serialized"));
  }
  if (v63 | v53)
  {
    if (v53)
    {
      v17 = IOSurfaceLookupFromXPCObject((xpc_object_t)v53);
      SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
      if (v17)
        CFRelease(v17);
    }
    else
    {
      SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
    }
    if (SampleBufferFromSerializedAtomBlockBufferAndSurface)
      goto LABEL_106;
    CFDictionarySetValue(MutableCopy, CFSTR("SampleBuffer"), v62);
  }
  if (v52)
  {
    v19 = IOSurfaceLookupFromXPCObject(v52);
    if (!v19)
      goto LABEL_106;
    v20 = v19;
    CFDictionarySetValue(MutableCopy, CFSTR("Surface"), v19);
    CFRelease(v20);
  }
  if (v61 | xobj)
  {
    if (xobj)
    {
      v21 = IOSurfaceLookupFromXPCObject((xpc_object_t)xobj);
      v22 = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
      if (v21)
        CFRelease(v21);
    }
    else
    {
      v22 = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
    }
    if (v22)
      goto LABEL_106;
    CFDictionarySetValue(MutableCopy, CFSTR("PreviewSampleBuffer"), v60);
  }
  if (v55)
  {
    v23 = IOSurfaceLookupFromXPCObject(v55);
    if (!v23)
      goto LABEL_106;
    v24 = v23;
    CFDictionarySetValue(MutableCopy, CFSTR("PreviewSurface"), v23);
    CFRelease(v24);
  }
  if (v51)
  {
    v25 = IOSurfaceLookupFromXPCObject(v51);
    if (!v25)
      goto LABEL_106;
    v26 = v25;
    CFDictionarySetValue(MutableCopy, CFSTR("ThumbnailSurface"), v25);
    CFRelease(v26);
  }
  if (v54)
  {
    v27 = IOSurfaceLookupFromXPCObject(v54);
    if (!v27)
      goto LABEL_106;
    v28 = v27;
    CFDictionarySetValue(MutableCopy, CFSTR("DepthDataSurface"), v27);
    CFRelease(v28);
  }
  if (v47)
  {
    v29 = IOSurfaceLookupFromXPCObject(v47);
    if (!v29)
      goto LABEL_106;
    v30 = v29;
    CFDictionarySetValue(MutableCopy, CFSTR("ConstantColorConfidenceMapSurface"), v29);
    CFRelease(v30);
  }
  if (v9)
  {
    v31 = IOSurfaceLookupFromXPCObject(v9);
    if (!v31)
      goto LABEL_106;
    v32 = v31;
    CFDictionarySetValue(MutableCopy, CFSTR("PortraitEffectsMatteSurface"), v31);
    CFRelease(v32);
  }
  if (v46)
  {
    v33 = IOSurfaceLookupFromXPCObject(v46);
    if (!v33)
      goto LABEL_106;
    v34 = v33;
    CFDictionarySetValue(MutableCopy, CFSTR("HairSegmentationMatteSurface"), v33);
    CFRelease(v34);
  }
  if (v45)
  {
    v35 = IOSurfaceLookupFromXPCObject(v45);
    if (!v35)
      goto LABEL_106;
    v36 = v35;
    CFDictionarySetValue(MutableCopy, CFSTR("SkinSegmentationMatteSurface"), v35);
    CFRelease(v36);
  }
  if (v12)
  {
    v37 = IOSurfaceLookupFromXPCObject(v12);
    if (!v37)
      goto LABEL_106;
    v38 = v37;
    CFDictionarySetValue(MutableCopy, CFSTR("TeethSegmentationMatteSurface"), v37);
    CFRelease(v38);
  }
  if (v13)
  {
    v39 = IOSurfaceLookupFromXPCObject(v13);
    if (!v39)
      goto LABEL_106;
    v40 = v39;
    CFDictionarySetValue(MutableCopy, CFSTR("GlassesSegmentationMatteSurface"), v39);
    CFRelease(v40);
  }
  if (!v57)
    goto LABEL_71;
  v41 = IOSurfaceLookupFromXPCObject(v57);
  if (!v41)
  {
LABEL_106:
    fig_log_get_emitter();
    FigDebugAssert3();
    v44 = -12786;
    goto LABEL_91;
  }
  v42 = v41;
  CFDictionarySetValue(MutableCopy, CFSTR("DeferredPhotoProxySurface"), v41);
  CFRelease(v42);
LABEL_71:
  if (!v58)
    goto LABEL_74;
  v43 = (const void *)csr_masterClockFromClockType(DerivedStorage, v58);
  if (v43)
  {
    CFDictionarySetValue(MutableCopy, CFSTR("MasterClock"), v43);
LABEL_74:
    if (xdict)
    {
      v59 = 0;
      v44 = FigRemoteQueueReceiverCreateFromXPCObject(v14, xdict, (uint64_t *)&v59);
      if (v44)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        CFDictionarySetValue(MutableCopy, CFSTR("RemoteQueueReceiver"), v59);
        CFRelease(v59);
      }
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_90:
  v44 = 0;
LABEL_91:
  if (v62)
    CFRelease(v62);
  if (v63)
    CFRelease((CFTypeRef)v63);
  if (v60)
    CFRelease(v60);
  if (v61)
    CFRelease((CFTypeRef)v61);
  if (MutableCopy && v44)
  {
    CFRelease(MutableCopy);
    MutableCopy = 0;
  }
  *a5 = MutableCopy;
  if (v44)
    return 1;
  else
    return 4;
}

BOOL csr_notificationFilter_0(int a1, CFTypeRef cf1)
{
  return CFEqual(cf1, CFSTR("ActiveFormat")) != 0;
}

uint64_t FigRemoteQueueReceiverCreateFromXPCObject(uint64_t a1, xpc_object_t xdict, uint64_t *a3)
{
  uint64_t uint64;
  xpc_object_t value;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int mach_recv;
  CFTypeRef v13;
  uint64_t Instance;
  uint64_t v15;
  CFTypeRef v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  CFTypeRef cf;
  _QWORD v24[5];
  _QWORD handler[5];
  unsigned int v26;

  cf = 0;
  if (!xdict)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_47:
    v10 = -1;
    v21 = 4294950629;
    goto LABEL_23;
  }
  if (!a3)
    goto LABEL_33;
  uint64 = xpc_dictionary_get_uint64(xdict, "QueueData");
  if (uint64)
    goto LABEL_8;
  value = xpc_dictionary_get_value(xdict, "SharedRegion");
  if (!value)
  {
LABEL_33:
    fig_log_get_emitter();
LABEL_46:
    FigDebugAssert3();
    goto LABEL_47;
  }
  v8 = FigSharedMemPoolSharedRegionCreateFromXPCObject(a1, value, (uint64_t *)&cf);
  if ((_DWORD)v8)
  {
    v21 = v8;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_22;
  }
  v9 = xpc_dictionary_get_uint64(xdict, "QueueOffset");
  if (!v9)
  {
    fig_log_get_emitter();
    goto LABEL_46;
  }
  uint64 = v9 + FigSharedMemPoolSharedRegionGetAddress((uint64_t)cf);
LABEL_8:
  v10 = xpc_dictionary_dup_fd(xdict, "RecvFd");
  if (v10 < 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v11 = -1;
LABEL_36:
    v21 = 4294950629;
    goto LABEL_24;
  }
  v11 = xpc_dictionary_dup_fd(xdict, "SendFd");
  if (v11 < 0 || (mach_recv = xpc_dictionary_extract_mach_recv()) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_36;
  }
  v13 = cf;
  if (rqSurfaceRegistrationOnce != -1)
    dispatch_once(&rqSurfaceRegistrationOnce, &__block_literal_global_106);
  MEMORY[0x1A858C99C](&FigRemoteQueueReceiverGetTypeID_registerOnce, rqReceiverRegister);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v15 = Instance;
    if (v13)
      v16 = CFRetain(v13);
    else
      v16 = 0;
    *(_QWORD *)(v15 + 16) = v16;
    *(_QWORD *)(v15 + 24) = FigSharedMemBlockRetain(uint64);
    if (fcntl(v10, 4, 4) == -1 || fcntl(v11, 4, 4) == -1 || fcntl(v11, 73, 1) == -1)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v21 = *__error();
      CFRelease((CFTypeRef)v15);
      if (!(_DWORD)v21)
        goto LABEL_22;
      goto LABEL_42;
    }
    v17 = FigSimpleMutexCreate();
    *(_QWORD *)(v15 + 40) = v17;
    if (v17)
    {
      *(_DWORD *)(v15 + 64) = 1;
      *(_DWORD *)(v15 + 32) = v10;
      *(_DWORD *)(v15 + 36) = v11;
      *(_QWORD *)(v15 + 80) = 0;
      *(_QWORD *)(v15 + 88) = 0;
      *(_DWORD *)(v15 + 96) = mach_recv;
      v18 = dispatch_source_create(MEMORY[0x1E0C80D98], mach_recv, 0, (dispatch_queue_t)rqSurfaceRegistrationQueue);
      *(_QWORD *)(v15 + 104) = v18;
      v19 = MEMORY[0x1E0C809B0];
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 0x40000000;
      handler[2] = __rqReceiverCreate_block_invoke_2;
      handler[3] = &__block_descriptor_tmp_80;
      v26 = mach_recv;
      handler[4] = v18;
      dispatch_source_set_cancel_handler(v18, handler);
      v20 = *(NSObject **)(v15 + 104);
      v24[0] = v19;
      v24[1] = 0x40000000;
      v24[2] = __rqReceiverCreate_block_invoke_3;
      v24[3] = &__block_descriptor_tmp_81;
      v24[4] = v18;
      dispatch_source_set_event_handler(v20, v24);
      dispatch_resume(*(dispatch_object_t *)(v15 + 104));
      v21 = 0;
      *a3 = v15;
LABEL_22:
      v10 = -1;
LABEL_23:
      v11 = -1;
      goto LABEL_24;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    CFRelease((CFTypeRef)v15);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v21 = 4294950630;
LABEL_42:
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_24:
  if (cf)
    CFRelease(cf);
  if ((v10 & 0x80000000) == 0)
    close(v10);
  if ((v11 & 0x80000000) == 0)
    close(v11);
  FigMachPortReleaseReceiveRight_();
  return v21;
}

uint64_t FigSharedMemPoolSharedRegionGetAddress(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t FigSharedMemPoolSharedRegionCreateFromXPCObject(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (!a3 || !a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  MEMORY[0x1A858C99C](&FigSharedMemPoolSharedRegionGetTypeID_registerOnce, shmemRegionRegister);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954510;
  }
  v6 = Instance;
  v7 = xpc_shmem_map(a2, (void **)(Instance + 16));
  *(_QWORD *)(v6 + 24) = v7;
  if (v7 <= 0x2F)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 4294954516;
LABEL_12:
    CFRelease((CFTypeRef)v6);
    return v8;
  }
  v8 = shmemRegionRegisterSharedRegion(v6);
  if ((_DWORD)v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_12;
  }
  *(_DWORD *)(v6 + 40) = 1;
  *a3 = v6;
  return v8;
}

uint64_t shmemRegionRegisterSharedRegion(uint64_t a1)
{
  unint64_t v1;
  unint64_t *v2;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)v1 == 1936224364)
  {
    v2 = (unint64_t *)(v1 + 8);
    while (!__ldxr(v2))
    {
      if (!__stxr(v1, v2))
      {
        v4 = 0;
        *(_QWORD *)(v1 + 16) = a1;
        return v4;
      }
    }
    __clrex();
    return FigSignalErrorAt();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t csr_masterClockFromClockType(uint64_t a1, CFNumberRef number)
{
  uint64_t result;
  CMClockRef v4;
  OpaqueCMClock *HostTimeClock;
  const void *v6;
  CMClockRef clockOut;
  int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  if (*(_DWORD *)(a1 + 24) != valuePtr || (result = *(_QWORD *)(a1 + 16)) == 0)
  {
    clockOut = 0;
    if (valuePtr == 1)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      clockOut = HostTimeClock;
      if (!HostTimeClock)
      {
        fig_log_get_emitter();
        goto LABEL_17;
      }
      v4 = HostTimeClock;
      CFRetain(HostTimeClock);
    }
    else
    {
      if (valuePtr != 2)
        return *(_QWORD *)(a1 + 16);
      if (CMAudioClockCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &clockOut) || (v4 = clockOut) == 0)
      {
        fig_log_get_emitter();
LABEL_17:
        FigDebugAssert3();
        return *(_QWORD *)(a1 + 16);
      }
    }
    v6 = *(const void **)(a1 + 16);
    if (v6)
    {
      CFRelease(v6);
      v4 = clockOut;
    }
    *(_QWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 24) = valuePtr;
    return *(_QWORD *)(a1 + 16);
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesScaleFinalCropRectForPadding(const void *a1, float a2)
{
  __int128 v9;

  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  __asm { FMOV            V0.2D, #1.0 }
  v9 = _Q0;
  FigCFDictionaryGetCGRectIfPresent();
  FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, *(CGFloat *)&v9, *((CGFloat *)&v9 + 1), 1.0 / (a2 + 1.0));
  return FigCFDictionarySetCGRect();
}

CGFloat FigCaptureMetadataUtilitiesScaleRect2D(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  CGFloat v9;
  CGFloat v10;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  v9 = CGRectGetWidth(*(CGRect *)&a1) * a5;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetHeight(v12);
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  v10 = CGRectGetMidX(v13) - v9 * 0.5;
  v14.origin.x = a1;
  v14.origin.y = a2;
  v14.size.width = a3;
  v14.size.height = a4;
  CGRectGetMidY(v14);
  return v10;
}

CGFloat FigCaptureMetadataUtilitiesScaleRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return FigCaptureMetadataUtilitiesScaleRect2D(a1, a2, a3, a4, a5);
}

_QWORD *TimestampedAudioBufferListNew(const __CFAllocator *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  void *v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  void *v16;

  v8 = CFAllocatorAllocate(a1, 72, 0);
  v9 = v8;
  if (v8)
  {
    v8[8] = 0;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v10 = a1 ? CFRetain(a1) : 0;
    *v9 = v10;
    *((_DWORD *)v9 + 4) = a4;
    if (a2)
    {
      v11 = CFAllocatorAllocate(a1, (16 * a2) | 8, 0);
      v9[6] = v11;
      if (v11)
      {
        bzero(v11, (16 * a2) | 8);
        v12 = 0;
        v13 = (unsigned int *)v9[6];
        *v13 = a2;
        v14 = 16 * a2;
        while (1)
        {
          v15 = &v13[v12 / 4];
          v15[2] = a3;
          v15[3] = a4;
          v16 = CFAllocatorAllocate(a1, a4, 0);
          v13 = (unsigned int *)v9[6];
          *(_QWORD *)&v13[v12 / 4 + 4] = v16;
          if (!v16)
            break;
          v12 += 16;
          if (v14 == v12)
            return v9;
        }
      }
      TimestampedAudioBufferListDispose((const __CFAllocator **)v9);
      return 0;
    }
  }
  return v9;
}

void TimestampedAudioBufferListQueueReleaseAndClear(CFTypeRef *a1)
{
  opaqueCMSimpleQueue *v2;
  const __CFAllocator **v3;

  if (a1)
  {
    v2 = (opaqueCMSimpleQueue *)*a1;
    if (v2)
    {
      while (1)
      {
        v3 = (const __CFAllocator **)CMSimpleQueueDequeue(v2);
        if (!v3)
          break;
        TimestampedAudioBufferListDispose(v3);
        v2 = (opaqueCMSimpleQueue *)*a1;
      }
      CFRelease(*a1);
      *a1 = 0;
    }
  }
}

uint64_t BWOverCaptureSampleBufferUnpackAndRetain(CMAttachmentBearerRef target, int a2, _QWORD *a3, CFTypeRef *a4, _QWORD *a5, _QWORD *a6)
{
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (target)
  {
    if (a4)
      *a4 = CFRetain(target);
    if (a3)
    {
      v11 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", CFSTR("SynchronizedSlaveFrame"));
      if (v11)
        v11 = CFRetain(v11);
      *a3 = v11;
    }
    if (a5)
    {
      v12 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", CFSTR("DepthData_DX"));
      if (v12)
        v12 = CFRetain(v12);
      *a5 = v12;
    }
    if (a6)
    {
      v13 = (CFTypeRef)objc_msgSend((id)CMGetAttachment(target, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", CFSTR("DepthData_DY"));
      if (v13)
        v13 = CFRetain(v13);
      *a6 = v13;
    }
    if (a2)
      CMRemoveAttachment(target, CFSTR("AttachedMedia"));
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t csp_stabilizationMethodWithMostOverscan(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  v5 = *(_QWORD *)v10;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v10 != v5)
        objc_enumerationMutation(a1);
      v7 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * i);
      if (objc_msgSend(v7, "intValue") != 4 && (int)v4 <= (int)objc_msgSend(v7, "intValue"))
        v4 = objc_msgSend(v7, "intValue");
    }
    v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  }
  while (v3);
  return v4;
}

uint64_t BWFilterDetectedObjectsInfoUsingSet(uint64_t result, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(v3);
          v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
          if ((objc_msgSend(a2, "containsObject:", v9) & 1) == 0)
            objc_msgSend(v4, "addObject:", v9);
        }
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v6);
    }
    return objc_msgSend(v3, "removeObjectsForKeys:", v4);
  }
  return result;
}

void cpls_logCameraStreamingPowerEvents(void *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  dispatch_assert_queue_V2((dispatch_queue_t)sCameraPowerLogEventQueue);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", a1, CFSTR("Events"), 0);
  PLLogRegisteredEvent();
  if (dword_1ECFE9A30)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a1, "count", v5, v7))
  {
    v3 = 0;
    do
    {
      objc_msgSend(a1, "objectAtIndexedSubscript:", v3);
      if (dword_1ECFE9A30)
      {
        v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v3;
    }
    while (objc_msgSend(a1, "count", v6, v8) > v3);
  }

}

uint64_t BWCorrectRectanglesInDetectedObjectsInfo(void *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  id obj;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  obj = (id)objc_msgSend(a1, "allKeys");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  v33 = result;
  if (result)
  {
    v32 = *(_QWORD *)v41;
    v31 = *MEMORY[0x1E0D064D0];
    v18 = *MEMORY[0x1E0D064A0];
    v30 = *MEMORY[0x1E0D064C0];
    v28 = *MEMORY[0x1E0D07900];
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v41 != v32)
          objc_enumerationMutation(obj);
        v35 = v19;
        v20 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * v19);
        v21 = (void *)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v20), "objectForKeyedSubscript:", v31);
        v22 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
        if (v23)
        {
          v24 = v23;
          v25 = *(_QWORD *)v37;
          do
          {
            for (i = 0; i != v24; ++i)
            {
              if (*(_QWORD *)v37 != v25)
                objc_enumerationMutation(v21);
              v27 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i);
              if (correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9))
              {
                if (objc_msgSend(v20, "isEqualToString:", v18))
                {
                  correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9);
                  correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9);
                }
              }
              else
              {
                objc_msgSend(v22, "addObject:", v27);
              }
            }
            v24 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v36, v44, 16);
          }
          while (v24);
        }
        if (objc_msgSend(v22, "count"))
          objc_msgSend(v21, "removeObjectsInArray:", v22);
        if (objc_msgSend(v20, "isEqualToString:", v30)
          && objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v20), "objectForKeyedSubscript:", v28)
          && (correctRectangleInDictionaryForKey(a2, a3, a4, a5, a6, a7, a8, a9) & 1) == 0)
        {
          objc_msgSend(a1, "removeObjectForKey:", v20);
        }
        v19 = v35 + 1;
      }
      while (v35 + 1 != v33);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
      v33 = result;
    }
    while (result);
  }
  return result;
}

uint64_t cs_initMemoryPoolSize(uint64_t a1)
{
  uint64_t v2;

  if ((int)FigCapturePlatformIdentifier() <= 10)
    v2 = 200;
  else
    v2 = 400;
  if (!((unint64_t)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "physicalMemory") >> 32))
    v2 = 1;
  return -[BWMemoryPool ensureMemoryAsyncWithSize:withMaximizeSystemMemory:](+[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"), "ensureMemoryAsyncWithSize:withMaximizeSystemMemory:", v2, a1);
}

uint64_t getVNGenerateFaceSegmentsRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNGenerateFaceSegmentsRequestClass_softClass;
  v8 = getVNGenerateFaceSegmentsRequestClass_softClass;
  if (!getVNGenerateFaceSegmentsRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNGenerateFaceSegmentsRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNGenerateFaceSegmentsRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D331B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNClassifyFaceAttributesRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNClassifyFaceAttributesRequestClass_softClass;
  v8 = getVNClassifyFaceAttributesRequestClass_softClass;
  if (!getVNClassifyFaceAttributesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyFaceAttributesRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNClassifyFaceAttributesRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D33274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectFaceLandmarksRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNDetectFaceLandmarksRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNDetectFaceLandmarksRequestClass_block_invoke_cold_1();
  getVNDetectFaceLandmarksRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigCapturePixelFormatIs420(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 > 1534617135)
  {
    if (a1 > 2084070959)
    {
      if (a1 <= 2088269359)
      {
        if (a1 > 2087216687)
        {
          if (a1 == 2087216688)
            return result;
          v3 = 2088265264;
        }
        else
        {
          if (a1 == 2084070960)
            return result;
          v3 = 2084075056;
        }
        goto LABEL_52;
      }
      if (a1 <= 2100852271)
      {
        if (a1 == 2088269360)
          return result;
        v3 = 2100848176;
        goto LABEL_52;
      }
      if (a1 == 2100852272 || a1 == 2105042480)
        return result;
      v3 = 2105046576;
    }
    else
    {
      if (a1 <= 1882468911)
      {
        if (a1 > 1714696751)
        {
          if (a1 == 1714696752)
            return result;
          v3 = 1751527984;
        }
        else
        {
          if (a1 == 1534617136)
            return result;
          v3 = 1534621232;
        }
        goto LABEL_52;
      }
      if (a1 <= 2016686639)
      {
        if (a1 == 1882468912)
          return result;
        v3 = 1885745712;
        goto LABEL_52;
      }
      if (a1 == 2016686640 || a1 == 2019963440)
        return result;
      v3 = 2033463856;
    }
LABEL_52:
    if (a1 != v3)
      return 0;
    return result;
  }
  if (a1 > 792225327)
  {
    if (a1 <= 796423727)
    {
      if (a1 > 795371055)
      {
        if (a1 == 795371056)
          return result;
        v3 = 796419632;
      }
      else
      {
        if (a1 == 792225328)
          return result;
        v3 = 792229424;
      }
      goto LABEL_52;
    }
    if (a1 <= 875704437)
    {
      if (a1 == 796423728)
        return result;
      v3 = 875704422;
      goto LABEL_52;
    }
    if (a1 == 875704438 || a1 == 1530422832)
      return result;
    v3 = 1530426928;
    goto LABEL_52;
  }
  if (a1 <= 758670895)
  {
    if (a1 > 645424687)
    {
      if (a1 == 645424688)
        return result;
      v3 = 645428784;
    }
    else
    {
      if (a1 == 641230384)
        return result;
      v3 = 641234480;
    }
    goto LABEL_52;
  }
  if (a1 <= 761816623)
  {
    if (a1 == 758670896)
      return result;
    v3 = 758674992;
    goto LABEL_52;
  }
  if (a1 != 761816624 && a1 != 762865200)
  {
    v3 = 762869296;
    goto LABEL_52;
  }
  return result;
}

BOOL __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_4(uint64_t a1, void *a2)
{
  return FigCaptureVideoDimensionsAreEqual(objc_msgSend(a2, "dimensions"), *(_QWORD *)(a1 + 32));
}

void sub_1A2D37D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void FigCaptureLogCameraStreamingPowerEvent(int a1, const void *a2, int a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, float a9, __int128 *a10)
{
  __int128 v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unint64_t v18;
  NSObject *v19;
  _QWORD block[7];
  int v24;
  int v25;
  float v26;
  __int128 v27;
  __int128 v28;
  int v29;
  char v30;
  char v31;
  char v32;
  BOOL v33;
  os_log_type_t type;
  int v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a10)
  {
    v16 = a10[1];
    v36 = *a10;
    v37 = v16;
    v38 = *((_DWORD *)a10 + 8);
  }
  else
  {
    v38 = 0;
    v37 = 0u;
    v36 = 0u;
  }
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (sCameraStreamingPowerEventsByPortType && sCameraPowerLogEventQueue)
  {
    if (dword_1ECFE9A30)
    {
      v35 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2)
      CFRetain(a2);
    do
      v18 = __ldxr((unint64_t *)&sPendingPowerEventsCount);
    while (__stxr(v18 + 1, (unint64_t *)&sPendingPowerEventsCount));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigCaptureLogCameraStreamingPowerEvent_block_invoke;
    block[3] = &__block_descriptor_108_e5_v8__0l;
    v24 = a1;
    v25 = a3;
    v30 = a4;
    block[4] = a2;
    block[5] = a5;
    block[6] = a6;
    v26 = a9;
    v31 = a7;
    v32 = a8;
    v33 = a10 != 0;
    v29 = v38;
    v28 = v37;
    v27 = v36;
    dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, block);
  }
  else
  {
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void multiStreamCameraSourceNode_sendBufferToBufferServicingThread(dispatch_queue_t *a1, unsigned int a2, void *a3, UInt8 *bytes)
{
  CFDataRef v7;
  CFTypeID v8;

  if (a3)
  {
    v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
    v8 = CFGetTypeID(a3);
    if (v8 == CFDictionaryGetTypeID())
      CFDictionarySetValue((CFMutableDictionaryRef)a3, CFSTR("BWPTS"), v7);
    else
      CVBufferSetAttachment((CVBufferRef)a3, CFSTR("BWPTS"), v7, kCVAttachmentMode_ShouldNotPropagate);
    CFRelease(v7);
    CFRetain(a3);
    if (CMSimpleQueueEnqueue((CMSimpleQueueRef)a1[63 * a2 + 51], a3))
      CFRelease(a3);
    else
      dispatch_async_f(a1[63 * a2 + 52], a1, (dispatch_function_t)a1[63 * a2 + 53]);
  }
}

uint64_t __multiStreamCameraSourceNode_outputSampleBuffer_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "liveFormat");
  if (!result)
    return objc_msgSend(*(id *)(a1 + 32), "makeConfiguredFormatLive");
  return result;
}

void sub_1A2D3A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRemoteOperationSenderEnqueueOperation(_QWORD *a1, unsigned int *a2)
{
  return roEnqueue(a1, a2, 0, 0);
}

uint64_t roEnqueue(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  const __CFAllocator *SharedMemPoolAllocator;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t (**v12)(void);
  _QWORD *v13;
  _QWORD *v14;
  _QWORD v15[5];

  SharedMemPoolAllocator = (const __CFAllocator *)FigRemoteQueueSenderGetSharedMemPoolAllocator((uint64_t)a1);
  if (a1)
  {
    if (a2)
    {
      v9 = SharedMemPoolAllocator;
      if (SharedMemPoolAllocator)
      {
        if (FigIsSharedMemPoolAllocator(SharedMemPoolAllocator))
        {
          v10 = *a2;
          if ((v10 - 7) < 0xFFFFFFFA)
            return 4294950633;
          v12 = &roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v10];
          if (FigRemoteQueueSenderGetContext((uint64_t)a1))
          {
            if ((_DWORD)a3)
            {
LABEL_9:
              v15[0] = MEMORY[0x1E0C809B0];
              v15[1] = 0x40000000;
              v15[2] = __roEnqueue_block_invoke;
              v15[3] = &unk_1E491ED90;
              v15[4] = a4;
              v13 = v15;
              return ((uint64_t (*)(const __CFAllocator *, unsigned int *, _QWORD *, uint64_t, _QWORD *))*v12)(v9, a2, a1, a3, v13);
            }
          }
          else
          {
            v14 = malloc_type_malloc(0x78uLL, 0x10E20404DDAD7CFuLL);
            *v14 = FigSimpleMutexCreate();
            v14[1] = 0;
            v14[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
            memset_pattern16(v14 + 3, &unk_1A32A2190, 0x18uLL);
            v14[14] = 0;
            *((_OWORD *)v14 + 5) = 0u;
            *((_OWORD *)v14 + 6) = 0u;
            *((_OWORD *)v14 + 3) = 0u;
            *((_OWORD *)v14 + 4) = 0u;
            FigRemoteQueueSenderSetContext(a1, (uint64_t)v14, &__block_literal_global_63, &__block_literal_global_66);
            if ((_DWORD)a3)
              goto LABEL_9;
          }
          v13 = 0;
          return ((uint64_t (*)(const __CFAllocator *, unsigned int *, _QWORD *, uint64_t, _QWORD *))*v12)(v9, a2, a1, a3, v13);
        }
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294950629;
}

uint64_t FigRemoteQueueSenderGetContext(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 128);
  return result;
}

uint64_t FigRemoteQueueSenderGetSharedMemPoolAllocator(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

const __CFAllocator *FigIsSharedMemPoolAllocator(const __CFAllocator *result)
{
  CFAllocatorContext v1;

  memset(&v1, 0, sizeof(v1));
  if (result)
  {
    CFAllocatorGetContext(result, &v1);
    return (const __CFAllocator *)(v1.allocate == (CFAllocatorAllocateCallBack)shmemAllocatorAllocate);
  }
  return result;
}

_QWORD *FigRemoteQueueSenderSetContext(_QWORD *result, uint64_t a2, void *aBlock, const void *a4)
{
  _QWORD *v7;
  uint64_t v8;

  if (result)
  {
    v7 = result;
    if (result[16])
    {
      v8 = result[17];
      if (v8)
        (*(void (**)(void))(v8 + 16))();
    }
    v7[16] = a2;
    v7[17] = _Block_copy(aBlock);
    result = _Block_copy(a4);
    v7[18] = result;
  }
  return result;
}

uint64_t __vtsp_invalidateThumbnailSinkContentsIfNeeded_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 72))
  {
    v2 = result;
    result = objc_msgSend(*(id *)(v1 + 80), "postNotification:notificationPayload:", CFSTR("ThumbnailImageQueueUpdated"), 0);
    v1 = *(_QWORD *)(v2 + 32);
  }
  *(_BYTE *)(v1 + 72) = 0;
  return result;
}

uint64_t gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia(void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *ParentOutputOfOutputWithSharedPool;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v16;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(a1);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v7);
        v14 = 0;
        ParentOutputOfOutputWithSharedPool = gr_findParentOutputOfOutputWithSharedPool(v8, a2, &v14);
        if (!ParentOutputOfOutputWithSharedPool)
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_1();
        v10 = (void *)objc_msgSend(ParentOutputOfOutputWithSharedPool, "mediaPropertiesForAttachedMediaKey:", v14);
        if (!v10)
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_2();
        v11 = objc_msgSend(v10, "preparedPixelBufferPool");
        if (!v11)
          objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Parent of shared pool output should have a prepared pool"), 0));
        v12 = v11;
        v13 = (void *)objc_msgSend(v8, "mediaPropertiesForAttachedMediaKey:", v14);
        if (!v13)
          gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_3();
        objc_msgSend(v13, "setPreparedSharedPixelBufferPool:", v12);
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void sub_1A2D3CF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFAllocatorRef FigSharedMemPoolAllocatorCreate(const __CFAllocator *a1, void *a2)
{
  CFAllocatorContext context;

  context.version = 0;
  context.info = a2;
  context.retain = (CFAllocatorRetainCallBack)shmemAllocatorRetain;
  context.release = (CFAllocatorReleaseCallBack)shmemAllocatorRelease;
  context.copyDescription = (CFAllocatorCopyDescriptionCallBack)shmemAllocatorCopyDescription;
  context.allocate = (CFAllocatorAllocateCallBack)shmemAllocatorAllocate;
  context.reallocate = (CFAllocatorReallocateCallBack)shmemAllocatorReallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)shmemAllocatorDeallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)shmemAllocatorPreferredSize;
  return CFAllocatorCreate(a1, &context);
}

uint64_t FigSharedMemPoolCreate(uint64_t a1, size_t a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  size_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t Instance;
  uint64_t v18;
  _QWORD *v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  pid_t v26;
  uint64_t result;

  if (a5 && a2)
  {
    v7 = 0;
    v8 = a3 != 0;
    v9 = a4 != 0;
    if (a4 <= 1)
      v10 = 1;
    else
      v10 = a4;
    v11 = !v8 || !v9;
    if (v8 && v9)
      v12 = a3;
    else
      v12 = (uint64_t *)&sDefaultBlockSizes;
    v13 = 18;
    if (!v11)
      v13 = v10;
    v14 = 16;
    while (1)
    {
      v15 = v12[v7];
      if (v15 <= v14 || (v12[v7] & 0xF) != 0)
        goto LABEL_16;
      if (v15 >= a2)
        break;
      ++v7;
      v14 = v15;
      if (v13 == v7)
      {
        v7 = v13;
LABEL_21:
        MEMORY[0x1A858C99C](&FigSharedMemPoolGetTypeID_registerOnce, shmemPoolRegister);
        Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          v18 = Instance;
          *(_QWORD *)(Instance + 56) = v7;
          v19 = malloc_type_calloc(v7, 0x18uLL, 0x10A00404E934A1DuLL);
          *(_QWORD *)(v18 + 48) = v19;
          if (v19)
          {
            for (i = *(_QWORD *)(v18 + 56); i; --i)
            {
              *v19 = 0;
              v19[1] = v19;
              v21 = *v12++;
              v19[2] = v21;
              v19 += 3;
            }
            *(_DWORD *)(v18 + 64) = 0;
            *(_QWORD *)(v18 + 32) = a2;
            MEMORY[0x1A858C99C](&FigSharedMemPoolSharedRegionGetTypeID_registerOnce, shmemRegionRegister);
            v22 = _CFRuntimeCreateInstance();
            if (v22)
            {
              v23 = (_QWORD *)v22;
              v24 = mmap(0, a2, 3, 4097, -1, 0);
              if (v24 != (_DWORD *)-1)
              {
                v25 = v24;
                v23[2] = v24;
                v23[3] = a2;
                *v24 = 1936224364;
                v24[1] = a2;
                *((_QWORD *)v24 + 1) = 0;
                *((_QWORD *)v24 + 2) = 0;
                *((_QWORD *)v24 + 3) = v23;
                v26 = getpid();
                result = 0;
                *((_QWORD *)v25 + 4) = v26;
                *(_QWORD *)(v18 + 16) = v23;
                *(_QWORD *)(v18 + 24) = v23[2];
                *(_QWORD *)(v18 + 40) = 48;
                *a5 = v18;
                return result;
              }
              fig_log_get_emitter();
              FigDebugAssert3();
              CFRelease(v23);
            }
            else
            {
              fig_log_get_emitter();
              FigDebugAssert3();
            }
          }
          fig_log_get_emitter();
          FigDebugAssert3();
          CFRelease((CFTypeRef)v18);
        }
        else
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        return 4294954510;
      }
    }
    if (!v7)
      goto LABEL_16;
    goto LABEL_21;
  }
LABEL_16:
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t FigRemoteQueueSenderCreate(const __CFAllocator *a1, int a2, const void *a3, int *a4, unint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v8;
  uint64_t Instance;
  uint64_t v14;
  int *v15;
  int *v16;
  int v17;
  int *v18;
  unint64_t v19;
  int v20;
  void *v21;
  CFAllocatorRef v22;
  unint64_t v23;
  void *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  dispatch_semaphore_t v29;
  dispatch_semaphore_t v30;
  NSObject *v31;
  NSObject *v32;
  ipc_space_read_t *v33;
  mach_port_name_t *v34;
  uint64_t v35;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out;

  if (!a7 || !a3 || (v8 = a5, a5 >= 4) || a2 <= 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  MEMORY[0x1A858C99C](&FigRemoteQueueSenderGetTypeID_registerOnce, rqSenderRegister);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950630;
  }
  v14 = Instance;
  *(_QWORD *)(Instance + 52) = -1;
  v15 = (int *)(Instance + 52);
  *(_QWORD *)(Instance + 60) = -1;
  v16 = (int *)(Instance + 60);
  v17 = *(_DWORD *)(Instance + 40);
  if (v8)
  {
    v18 = a4;
    v19 = v8;
    do
    {
      v20 = *v18++;
      v17 += v20;
      *(_DWORD *)(Instance + 40) = v17;
      --v19;
    }
    while (v19);
  }
  if ((v17 - 1) >= 0x100)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v35 = 4294950629;
LABEL_43:
    CFRelease((CFTypeRef)v14);
    return v35;
  }
  v21 = (void *)CFRetain(a3);
  *(_QWORD *)(v14 + 16) = v21;
  v22 = FigSharedMemPoolAllocatorCreate(a1, v21);
  *(_QWORD *)(v14 + 24) = v22;
  if (!v22)
    goto LABEL_39;
  v23 = 32 * *(unsigned int *)(v14 + 40) + 32;
  v24 = (void *)FigSharedMemBlockAllocate(*(_QWORD *)(v14 + 16), v23);
  *(_QWORD *)(v14 + 32) = v24;
  if (!v24)
    goto LABEL_39;
  bzero(v24, v23);
  v25 = *(_DWORD **)(v14 + 32);
  *v25 = 1936223601;
  if (v8)
  {
    v26 = v25 + 2;
    do
    {
      v27 = *a4++;
      *v26++ = v27;
      --v8;
    }
    while (v8);
  }
  if (pipe(v15)
    || pipe(v16)
    || fcntl(*v15, 4, 4) == -1
    || fcntl(*(_DWORD *)(v14 + 56), 4, 4) == -1
    || fcntl(*v16, 4, 4) == -1
    || fcntl(*(_DWORD *)(v14 + 56), 73, 1) == -1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v35 = *__error();
    goto LABEL_43;
  }
  v28 = FigSimpleMutexCreate();
  *(_QWORD *)(v14 + 72) = v28;
  if (!v28)
    goto LABEL_39;
  v29 = dispatch_semaphore_create(0);
  *(_QWORD *)(v14 + 96) = v29;
  if (!v29
    || (v30 = dispatch_semaphore_create(0), (*(_QWORD *)(v14 + 104) = v30) == 0)
    || (v31 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(v14 + 88) = v31) == 0)
    || (v32 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)(v14 + 60), 0, v31),
        (*(_QWORD *)(v14 + 80) = v32) == 0))
  {
LABEL_39:
    fig_log_get_emitter();
    FigDebugAssert3();
    v35 = 4294950630;
    goto LABEL_43;
  }
  dispatch_set_context(v32, (void *)v14);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v14 + 80), (dispatch_function_t)rqSenderHandleDequeue);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v14 + 80), (dispatch_function_t)rqSenderCancelDequeues);
  *(_QWORD *)(v14 + 120) = voucher_copy();
  dispatch_resume(*(dispatch_object_t *)(v14 + 80));
  *(_BYTE *)(v14 + 112) = 0;
  FigRemoteQueueSenderSetContext((_QWORD *)v14, 0, 0, 0);
  *(_DWORD *)(v14 + 152) = a2;
  v33 = (ipc_space_read_t *)MEMORY[0x1E0C83DA0];
  v34 = (mach_port_name_t *)(v14 + 156);
  if (mach_port_allocate(*MEMORY[0x1E0C83DA0], 1u, (mach_port_name_t *)(v14 + 156)))
  {
    fig_log_get_emitter();
LABEL_42:
    FigDebugAssert3();
    v35 = 4294950634;
    goto LABEL_43;
  }
  *(_BYTE *)(v14 + 160) = 1;
  port_info_outCnt = 1;
  port_info_out = 0;
  if (mach_port_get_attributes(*v33, *(_DWORD *)(v14 + 156), 1, &port_info_out, &port_info_outCnt)
    || (port_info_out += 10, MEMORY[0x1A858DBE4](*v33, *v34, 1, &port_info_out, port_info_outCnt))
    || mach_port_insert_right(*v33, *v34, *v34, 0x14u))
  {
    fig_log_get_emitter();
    goto LABEL_42;
  }
  v35 = 0;
  *(_QWORD *)(v14 + 168) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v14 + 176) = 0;
  *(_QWORD *)(v14 + 184) = 0;
  *(_QWORD *)(v14 + 192) = -1;
  *(_QWORD *)(v14 + 200) = -1;
  *(_QWORD *)(v14 + 208) = -1;
  *(_DWORD *)(v14 + 216) = 0;
  *a7 = v14;
  return v35;
}

uint64_t FigCaptureOSVariantHasInternalUI()
{
  return os_variant_has_internal_ui();
}

void __roRebuildFlatDictionaryAttachments_block_invoke(uint64_t a1, uint64_t a2)
{
  FigSharedMemBlockRelease(a2);
}

uint64_t roEnqueueSampleBuffer(const __CFAllocator *a1, int *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  pthread_mutex_t **Context;
  uint64_t v12;
  CFTypeRef v13;
  unint64_t v14;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v16;
  size_t DataLength;
  __CVBuffer *v18;
  CVImageBufferRef ImageBuffer;
  double v20;
  int v21;
  CFArrayRef v22;
  __CVBuffer *v23;
  uint64_t v24;
  CFIndex Count;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const void **v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  CFIndex v38;
  CFIndex v39;
  const __CFString *ValueAtIndex;
  CFTypeRef v41;
  CFTypeRef v42;
  CFDictionaryRef v43;
  int v44;
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer;
  _DWORD *v46;
  uint64_t RemoteAddress;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  const void *Region;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const __CFAllocator *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  CFTypeRef v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v65 = 0;
  v66 = 0;
  v7 = *((_QWORD *)a2 + 3);
  v63 = 0;
  v64 = 0;
  v8 = a2[1];
  if (v8 >= 3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v7 = 0;
    v12 = 0;
    goto LABEL_30;
  }
  v61 = a4;
  v60 = a5;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  v12 = (uint64_t)Context;
  if (Context)
    pthread_mutex_lock(*Context);
  v13 = *(CFTypeRef *)(v12 + 8);
  if (v13)
    v13 = CFRetain(v13);
  v63 = v13;
  v14 = *((_QWORD *)a2 + 4);
  if (!v14)
    v14 = *(_QWORD *)(v12 + 8 * v8 + 24);
  v62 = 0;
  if (!v7)
  {
    ImageBuffer = 0;
LABEL_18:
    DataLength = 0;
    v18 = 0;
    goto LABEL_19;
  }
  DataBuffer = CMSampleBufferGetDataBuffer((CMSampleBufferRef)v7);
  if (!DataBuffer)
  {
    ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v7);
    goto LABEL_18;
  }
  v16 = DataBuffer;
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  v18 = (__CVBuffer *)CMGetAttachment(v16, (CFStringRef)*MEMORY[0x1E0CA2058], 0);
  ImageBuffer = 0;
  if (!*((_QWORD *)a2 + 4) && v14 >= 0x21)
  {
    if (DataLength)
    {
      ImageBuffer = *(CVImageBufferRef *)(v12 + 8 * v8 + 48);
      if (ImageBuffer)
      {
        v20 = (float)((float)DataLength / (float)(unint64_t)ImageBuffer);
        ImageBuffer = 0;
        if (v20 < 0.8)
          v14 = 32;
      }
    }
  }
LABEL_19:
  v21 = *a2;
  if (*a2 != 3 && v21 != 6)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v7 = 0;
LABEL_30:
    v24 = 4294950629;
    goto LABEL_66;
  }
  if (!v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_30;
  }
  v58 = v8;
  v59 = a3;
  v57 = DataLength;
  if (v21 == 6)
  {
    if ((unint64_t)ImageBuffer | (unint64_t)v18)
    {
      v54 = v14;
      v55 = v5;
      v56 = a1;
      v22 = (CFArrayRef)*((_QWORD *)a2 + 5);
      if (ImageBuffer)
        v23 = ImageBuffer;
      else
        v23 = v18;
      if (v22)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  else if ((unint64_t)ImageBuffer | (unint64_t)v18)
  {
    v54 = v14;
    v55 = v5;
    v56 = a1;
    if (ImageBuffer)
      v23 = ImageBuffer;
    else
      v23 = v18;
LABEL_35:
    v22 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0D05CB0], 1, MEMORY[0x1E0C9B378]);
    CFAutorelease(v22);
LABEL_36:
    Count = CFArrayGetCount(v22);
    v53 = (uint64_t)&v53;
    v26 = 8 * Count;
    MEMORY[0x1E0C80A78](Count, v27, v28, v29);
    v30 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    v31 = (const void **)((char *)&v53 - v30);
    if (v26 >= 0x200)
      v32 = 512;
    else
      v32 = v26;
    bzero((char *)&v53 - v30, v32);
    MEMORY[0x1E0C80A78](v33, v34, v35, v36);
    v37 = (char *)&v53 - v30;
    bzero(v37, v32);
    if (CFArrayGetCount(v22) < 1)
    {
      v39 = 0;
    }
    else
    {
      v38 = 0;
      v39 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v22, v38);
        v41 = CVBufferCopyAttachment(v23, ValueAtIndex, 0);
        if (v41)
        {
          v42 = CFAutorelease(v41);
          if (v42)
          {
            v31[v39] = ValueAtIndex;
            *(_QWORD *)&v37[8 * v39++] = v42;
          }
        }
        ++v38;
      }
      while (v38 < CFArrayGetCount(v22));
    }
    v43 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v31, (const void **)v37, v39, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    a1 = v56;
    goto LABEL_49;
  }
  v43 = 0;
LABEL_49:
  v44 = roReplaceFlatDictionaryAttachments((CMAttachmentBearerRef)v7, a1, &v64);
  SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
  if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
  {
    v24 = SerializedAtomDataAndSurfaceForSampleBuffer;
    fig_log_get_emitter();
    FigDebugAssert3();
    v7 = 0;
  }
  else
  {
    v46 = CFAllocatorAllocate(a1, 8 * v44 + 68, 0);
    v7 = (uint64_t)v46;
    if (v46)
    {
      v46[16] = 0;
      *((_OWORD *)v46 + 2) = 0u;
      *((_OWORD *)v46 + 3) = 0u;
      *(_OWORD *)v46 = 0u;
      *((_OWORD *)v46 + 1) = 0u;
      v67 = v46;
      v68 = v66;
      v69 = a2[1];
      *(_QWORD *)v46 = 0x3726D6F70;
      *((_QWORD *)v46 + 2) = *((_QWORD *)a2 + 1);
      *((_QWORD *)v46 + 4) = v46;
      *((_QWORD *)v46 + 3) = roSerializationContextGetCacheForName(v12, a1, *((const __CFString **)a2 + 2));
      *(_QWORD *)(v7 + 40) = FigSharedMemBlockRetain((uint64_t)v65);
      *(_QWORD *)(v7 + 56) = v62;
      RemoteAddress = FigSharedMemBlockGetRemoteAddress((uint64_t)v65);
      *(_QWORD *)(v7 + 48) = RemoteAddress;
      *(_DWORD *)(v7 + 64) = v44;
      if (v44)
        memcpy((void *)(v7 + 68), v64, 8 * v44);
      if (!RemoteAddress)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      if (v61)
        v48 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(v59, (uint64_t)&v67, 1uLL, v60);
      else
        v48 = FigRemoteQueueSenderEnqueueSequence(v59, (uint64_t)&v67, 1uLL);
      v24 = v48;
      if ((_DWORD)v48)
      {
        if ((_DWORD)v48 != -16669)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
      else
      {
        v49 = v12 + 8 * (int)v58;
        if (*(_QWORD *)(v49 + 24) != v62)
        {
          *(_QWORD *)(v49 + 24) = v62;
          *(_QWORD *)(v49 + 48) = v57;
        }
        v50 = *(const void **)(v12 + 8);
        if (v50)
          CFRelease(v50);
        v24 = 0;
        *(_QWORD *)(v12 + 8) = v63;
        v63 = 0;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v24 = 4294950630;
    }
  }
  if (v43)
    CFRelease(v43);
LABEL_66:
  if (v63)
    CFRelease(v63);
  if (v64)
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v64);
  if (v7)
  {
    if ((_DWORD)v24)
    {
      roCleanupSampleBufferMessageData(v7);
    }
    else
    {
      Region = (const void *)FigSharedMemBlockGetRegion((uint64_t)v65);
      if (Region)
        CFRelease(Region);
    }
    CFAllocatorDeallocate(a1, (void *)v7);
  }
  CFAllocatorDeallocate(a1, v65);
  if (v12)
    pthread_mutex_unlock(*(pthread_mutex_t **)v12);
  return v24;
}

void FigSharedMemBlockRelease(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  pid_t v5;
  uint64_t v6;
  const void *v7;

  if (a1)
  {
    if (*(_DWORD *)(a1 - 16) == 1936220779)
    {
      v1 = a1 - 16 - *(unsigned int *)(a1 - 4);
      v2 = (unsigned int *)(a1 - 12);
      if (*(int *)(a1 - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 - 1, v2));
      v4 = *(_QWORD *)(v1 + 32);
      v5 = getpid();
      v6 = 16;
      if (v4 == v5)
        v6 = 24;
      v7 = *(const void **)(v1 + v6);
      if (v7)
        CFRelease(v7);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
}

uint64_t roSerializationContextGetCacheForName(uint64_t a1, const __CFAllocator *a2, const __CFString *key)
{
  UInt8 *Value;
  CFIndex Length;
  CFIndex maxBufLen;
  CFRange v10;
  CFRange v11;

  if (!key)
    goto LABEL_7;
  Value = (UInt8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
    return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
  Length = CFStringGetLength(key);
  maxBufLen = 0;
  v10.location = 0;
  v10.length = Length;
  if (CFStringGetBytes(key, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen) != Length)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_7:
    Value = 0;
    return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
  }
  Value = (UInt8 *)CFAllocatorAllocate(a2, maxBufLen + 1, 0);
  if (Value)
  {
    v11.location = 0;
    v11.length = Length;
    CFStringGetBytes(key, v11, 0x8000100u, 0, 0, Value, maxBufLen, 0);
    Value[maxBufLen] = 0;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), key, Value);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSharedMemBlockGetRemoteAddress((uint64_t)Value);
}

uint64_t FigRemoteQueueSenderEnqueueSequence(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v6 = rqSenderEnqueue(a1, a2, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v6;
}

uint64_t rqSenderEnqueue(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t RemoteAddress;
  uint64_t v12;
  const void *v13;
  IOSurfaceRef *v14;
  const void *v15;
  IOSurfaceID ID;
  uint64_t ContinuousUpTimeNanoseconds;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __IOSurface *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  CFNumberRef v43;
  NSObject *global_queue;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  IOSurfaceRef *v68;
  uint64_t v69;
  int *v70;
  const __CFAllocator *allocator;
  uint64_t v72;
  int v73;
  _QWORD block[4];
  int v75;
  int v76;
  IOSurfaceID valuePtr;
  _WORD __buf[256];
  uint64_t v79;

  v3 = a2;
  v79 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 113))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_54;
  }
  v6 = a3;
  v7 = *(unsigned int *)(a1 + 40);
  if (v7 > a3)
  {
    if (*(int *)(*(_QWORD *)(a1 + 32) + 4) + a3 > v7)
    {
LABEL_63:
      v53 = 4294950627;
LABEL_55:
      v54 = *(unsigned __int16 *)(a1 + 48);
      if (v5 != v54)
      {
        v55 = 0;
        do
        {
          v56 = (unsigned __int16)v54;
          rqSenderCleanupQueueElement(*(_QWORD *)(a1 + 32) + 32 * (unsigned __int16)v54 + 32);
          v57 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * *(int *)(v3 + 20 * v55 + 16) + 20);
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 - 1, v57));
          v59 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 - 1, v59));
          LODWORD(v54) = (v56 + 1) % *(_DWORD *)(a1 + 40);
          ++v55;
        }
        while (v5 != (unsigned __int16)v54);
      }
      return v53;
    }
    if (a3)
    {
      v8 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v9 = v3 + 20 * v8;
        if (*(_DWORD *)(v9 + 16) >= 3u)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          v53 = 4294950629;
          goto LABEL_55;
        }
        v10 = *(_QWORD *)(a1 + 32);
        if (*(_DWORD *)(v10 + 4 * *(unsigned int *)(v9 + 16) + 20) >= *(_DWORD *)(v10
                                                                                   + 4 * *(unsigned int *)(v9 + 16)
                                                                                   + 8))
          goto LABEL_63;
        v70 = (int *)(v9 + 16);
        if (*(_QWORD *)v9)
        {
          RemoteAddress = FigSharedMemBlockGetRemoteAddress(*(_QWORD *)v9);
          if (!RemoteAddress)
          {
            v53 = 4294950632;
            goto LABEL_55;
          }
          v69 = RemoteAddress;
          v10 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          v69 = 0;
        }
        v12 = v3 + 20 * v8;
        v15 = *(const void **)(v12 + 8);
        v14 = (IOSurfaceRef *)(v12 + 8);
        v13 = v15;
        v68 = v14;
        if (v15)
        {
          v64 = v10;
          v65 = v3 + 20 * v8;
          v66 = v8;
          v67 = v5;
          CFRetain(v13);
          IOSurfaceIncrementUseCount(*v14);
          ID = IOSurfaceGetID(*v14);
          rqSenderRegisterIOSurface(a1, *v14);
          if (*(_DWORD *)(a1 + 216))
          {
            v73 = *(_DWORD *)(a1 + 156);
            ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
            v18 = *(_QWORD *)(a1 + 192);
            if (v18 != -1)
            {
              v19 = ContinuousUpTimeNanoseconds;
              v20 = ContinuousUpTimeNanoseconds - 1000000 * *(unsigned int *)(a1 + 216);
              v72 = v20;
              do
              {
                v21 = *(_QWORD *)(a1 + 176) + 32 * v18;
                if (v20 <= *(_QWORD *)(v21 + 8))
                  break;
                v22 = *(_QWORD *)(v21 + 16);
                valuePtr = 0;
                valuePtr = IOSurfaceGetID(*(IOSurfaceRef *)v21);
                v23 = (__IOSurface *)CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1 + 176) + 32 * v18));
                v24 = IOSurfaceIsInUse(v23);
                v25 = *(_DWORD *)(a1 + 216);
                if (v24)
                {
                  if (v25)
                  {
                    v26 = *(_QWORD *)(a1 + 176);
                    v27 = v26 + 32 * v18;
                    *(_QWORD *)(v27 + 8) = v19;
                    v28 = *(_QWORD *)(a1 + 200);
                    if (v28 != v18)
                    {
                      v31 = *(_QWORD *)(v27 + 24);
                      v29 = (_QWORD *)(v27 + 24);
                      v30 = v31;
                      if (v31 != -1)
                        *(_QWORD *)(v26 + 32 * v30 + 16) = *(_QWORD *)(v26 + 32 * v18 + 16);
                      v32 = v26 + 32 * v18;
                      v35 = *(_QWORD *)(v32 + 16);
                      v33 = (uint64_t *)(v32 + 16);
                      v34 = v35;
                      if (v35 != -1)
                        *(_QWORD *)(v26 + 32 * v34 + 24) = v30;
                      if (v28 != -1)
                        *(_QWORD *)(v26 + 32 * v28 + 16) = v18;
                      v36 = *(_QWORD *)(a1 + 192);
                      if (v36 == v18)
                      {
                        v36 = *v33;
                        *(_QWORD *)(a1 + 192) = *v33;
                      }
                      *v29 = v28;
                      *v33 = -1;
                      *(_QWORD *)(a1 + 200) = v18;
                      if (v36 == -1)
                        *(_QWORD *)(a1 + 192) = v18;
                    }
                  }
                }
                else
                {
                  if (v25)
                  {
                    v37 = v19;
                    v38 = *(_QWORD *)(a1 + 176);
                    v39 = v38 + 32 * v18;
                    v41 = (_QWORD *)(v39 + 24);
                    v40 = *(_QWORD *)(v39 + 24);
                    if (v40 != -1)
                      *(_QWORD *)(v38 + 32 * v40 + 16) = *(_QWORD *)(v39 + 16);
                    v42 = *(_QWORD *)(v39 + 16);
                    if (v42 != -1)
                      *(_QWORD *)(v38 + 32 * v42 + 24) = v40;
                    if (*(_QWORD *)(a1 + 192) == v18)
                      *(_QWORD *)(a1 + 192) = v42;
                    if (*(_QWORD *)(a1 + 200) == v18)
                      *(_QWORD *)(a1 + 200) = *v41;
                    if (*(_QWORD *)v39)
                    {
                      CFRelease(*(CFTypeRef *)v39);
                      *(_QWORD *)v39 = 0;
                    }
                    *(_QWORD *)(v38 + 32 * v18 + 8) = 0;
                    *v41 = -1;
                    *(_QWORD *)(v39 + 16) = *(_QWORD *)(a1 + 208);
                    *(_QWORD *)(a1 + 208) = v18;
                    v19 = v37;
                    v20 = v72;
                  }
                  v43 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
                  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 168), v43);
                  CFRelease(v43);
                  LODWORD(v43) = IOSurfaceCreateMachPort(v23);
                  global_queue = dispatch_get_global_queue(0, 0);
                  block[0] = MEMORY[0x1E0C809B0];
                  block[1] = 0x40000000;
                  block[2] = __rqSurfacesReleaseAgedOut_block_invoke;
                  block[3] = &__block_descriptor_tmp_55;
                  v75 = v73;
                  v76 = (int)v43;
                  dispatch_async(global_queue, block);
                }
                CFRelease(v23);
                v18 = v22;
              }
              while (v22 != -1);
            }
          }
          v45 = a3;
          v46 = a2;
          v8 = v66;
          v5 = v67;
          v10 = v64;
          v9 = v65;
        }
        else
        {
          v45 = v6;
          v46 = v3;
          ID = 0;
        }
        v47 = v10 + 32 * v5;
        *(_QWORD *)(v47 + 32) = FigSharedMemBlockRetain(*(_QWORD *)v9);
        *(_QWORD *)(v47 + 40) = v69;
        *(_QWORD *)(v47 + 48) = *v68;
        *(_DWORD *)(v47 + 56) = ID;
        v48 = *v70;
        *(_DWORD *)(v47 + 60) = v48;
        v49 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v48 + 20);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        v51 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
        v3 = v46;
        v6 = v45;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
        __buf[v8] = v5;
        v5 = (unsigned __int16)(((unsigned __int16)v5 + 1) % *(_DWORD *)(a1 + 40));
        ++v8;
      }
      while (v8 != v45);
    }
    if (write(*(_DWORD *)(a1 + 56), __buf, 2 * v6) == 2 * v6)
    {
      v53 = 0;
      *(_DWORD *)(a1 + 48) = v5;
      return v53;
    }
    *(_BYTE *)(a1 + 113) = 1;
LABEL_54:
    v53 = 4294950631;
    goto LABEL_55;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  v53 = FigSignalErrorAt();
  if ((_DWORD)v53)
    goto LABEL_55;
  return v53;
}

void __rqReceiverSetSource_block_invoke(uint64_t a1)
{
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  int i;
  int v6;
  uint64_t v7;
  void (**v8)(void *, uint64_t, uint64_t *, _QWORD);
  NSObject *v9;
  uint64_t v10;
  IOSurfaceRef buffer;
  int v12;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    os_retain(*(void **)(v1 + 72));
    voucher_adopt();
    pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 40));
    v2 = *(_BYTE *)(v1 + 69);
    if (!v2)
    {
      LODWORD(v4) = 0;
      for (i = 0; ; i = v6)
      {
        v10 = 0;
        buffer = 0;
        v12 = 0;
        if ((v2 & 1) != 0)
          pthread_mutex_lock(*(pthread_mutex_t **)(v1 + 40));
        if ((_DWORD)v4 == -16665)
          break;
        if (!*(_QWORD *)(v1 + 56))
          goto LABEL_3;
        v6 = *(_DWORD *)(v1 + 64);
        if (i)
        {
          if (i != v6)
            goto LABEL_3;
        }
        v7 = rqReceiverDequeue(v1, (uint64_t)&v10);
        if ((_DWORD)v7 == -16668)
          goto LABEL_3;
        v4 = v7;
        v8 = (void (**)(void *, uint64_t, uint64_t *, _QWORD))_Block_copy(*(const void **)(v1 + 56));
        pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
        v8[2](v8, v4, &v10, *(_QWORD *)(v1 + 80));
        _Block_release(v8);
        FigSharedMemBlockRelease(v10);
        v10 = 0;
        if (buffer)
        {
          IOSurfaceDecrementUseCount(buffer);
          CFRelease(buffer);
        }
        v2 = 1;
      }
      if (!*(_BYTE *)(v1 + 68))
      {
        v9 = *(NSObject **)(v1 + 48);
        if (v9)
        {
          *(_BYTE *)(v1 + 68) = 1;
          dispatch_suspend(v9);
        }
      }
    }
LABEL_3:
    pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 40));
    v3 = (void *)voucher_adopt();
    os_release(v3);
  }
}

uint64_t rqReceiverDequeue(uint64_t a1, uint64_t a2)
{
  ssize_t v4;
  uint64_t v5;
  __IOSurface *v6;
  __IOSurface *v7;
  uint64_t v8;
  unsigned __int16 __buf;

  if (*(_BYTE *)(a1 + 69))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950631;
  }
  __buf = 0;
  v4 = read(*(_DWORD *)(a1 + 32), &__buf, 2uLL);
  if (v4 < 0)
  {
    if (*__error() == 35)
      return 4294950628;
    else
      return *__error();
  }
  if (v4 != 2)
  {
    *(_BYTE *)(a1 + 69) = 1;
    return 4294950631;
  }
  v5 = *(_QWORD *)(a1 + 24) + 32 * __buf;
  if (!*(_QWORD *)(v5 + 48))
  {
    v7 = 0;
    goto LABEL_13;
  }
  v6 = IOSurfaceLookup(*(_DWORD *)(v5 + 56));
  if (v6)
  {
    v7 = v6;
    IOSurfaceIncrementUseCount(v6);
LABEL_13:
    v8 = 0;
    *(_QWORD *)a2 = FigSharedMemBlockRetain(*(_QWORD *)(v5 + 40));
    *(_QWORD *)(a2 + 8) = v7;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v5 + 60);
    __dmb(0xBu);
    goto LABEL_15;
  }
  v8 = 4294950629;
LABEL_15:
  if (write(*(_DWORD *)(a1 + 36), &__buf, 2uLL) != 2)
    *(_BYTE *)(a1 + 69) = 1;
  return v8;
}

uint64_t FigSharedMemBlockRetain(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  pid_t v6;
  uint64_t v7;
  const void *v8;

  v1 = a1;
  if (a1)
  {
    if (*(_DWORD *)(a1 - 16) == 1936220779)
    {
      v2 = a1 - 16 - *(unsigned int *)(a1 - 4);
      v3 = (unsigned int *)(a1 - 12);
      if (*(int *)(a1 - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
      v5 = *(_QWORD *)(v2 + 32);
      v6 = getpid();
      v7 = 16;
      if (v5 == v6)
        v7 = 24;
      v8 = *(const void **)(v2 + v7);
      if (v8)
        CFRetain(v8);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return v1;
}

uint64_t FigRemoteOperationGetType(_DWORD **a1)
{
  _DWORD *v1;

  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      if (*v1 == 1919774576)
        return v1[1];
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

unsigned int *FigRemoteOperationCleanup(unsigned int *result)
{
  uint64_t v1;

  v1 = *result;
  if ((v1 - 7) >= 0xFFFFFFFA)
    return (unsigned int *)roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v1 + 2]();
  return result;
}

uint64_t roReplaceFlatDictionaryAttachments(CMAttachmentBearerRef target, const __CFAllocator *a2, void **a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  CFIndex Count;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  CFStringRef *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef *v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  CFTypeID v22;
  CFTypeID v23;
  const void *BackingPointer;
  uint64_t Region;
  const __CFAllocator *Pool;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  CFTypeID v31;
  _DWORD *BinaryForExport;
  uint64_t v33;
  const void *v34;
  uint64_t RemoteAddress;
  const __CFAllocator *v36;
  __CFDictionary *Mutable;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  void **v41;
  int v42;
  const __CFAllocator *v43;
  CMAttachmentBearerRef v44;
  char *v45;
  uint64_t *v46;
  const void *v47;
  void **v49;
  const void *v50;
  const void *v51;
  const __CFAllocator *v52;
  int v53;
  void ***v54;
  const __CFDictionary *v55;
  CFAllocatorRef v56;
  CMAttachmentBearerRef v57;
  uint64_t v58;
  uint64_t valuePtr;
  void *value;
  void *v61[2];

  v61[1] = *(void **)MEMORY[0x1E0C80C00];
  v56 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  v57 = target;
  v5 = CMCopyDictionaryOfAttachments(v56, target, 1u);
  if (!v5)
    return 0;
  v6 = v5;
  Count = CFDictionaryGetCount(v5);
  v54 = &v49;
  MEMORY[0x1E0C80A78](Count, v8, v9, v10);
  v11 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (CFStringRef *)((char *)&v49 - v11);
  if ((unint64_t)(8 * Count) >= 0x200)
    v13 = 512;
  else
    v13 = 8 * Count;
  bzero((char *)&v49 - v11, v13);
  MEMORY[0x1E0C80A78](v14, v15, v16, v17);
  v18 = (CFTypeRef *)((char *)&v49 - v11);
  bzero((char *)&v49 - v11, v13);
  v55 = v6;
  CFDictionaryGetKeysAndValues(v6, (const void **)((char *)&v49 - v11), (const void **)((char *)&v49 - v11));
  if (Count >= 1)
  {
    v49 = a3;
    v19 = 0;
    v20 = (const void *)*MEMORY[0x1E0D08750];
    v21 = (const void *)*MEMORY[0x1E0D08748];
    v51 = (const void *)*MEMORY[0x1E0D08750];
    v52 = a2;
    v50 = v21;
    while (1)
    {
      v22 = CFGetTypeID(*v18);
      if (v22 != CFDictionaryGetTypeID())
        goto LABEL_31;
      value = 0;
      v61[0] = 0;
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)*v18, v20, (const void **)&value)
        || !CFDictionaryGetValueIfPresent((CFDictionaryRef)*v18, v21, (const void **)v61))
      {
        goto LABEL_31;
      }
      v23 = CFGetTypeID(v61[0]);
      if (v23 != FigFlatDictionaryGetTypeID())
      {
        v28 = 0;
        goto LABEL_18;
      }
      LODWORD(valuePtr) = 0;
      BackingPointer = (const void *)FigFlatDictionaryGetBackingPointer((uint64_t)v61[0], &valuePtr);
      Region = FigSharedMemBlockGetRegion((uint64_t)BackingPointer);
      Pool = FigSharedMemPoolAllocatorGetPool(a2);
      if (Region == FigSharedMemPoolGetSharedRegion((uint64_t)Pool))
      {
        v29 = FigSharedMemBlockRetain((uint64_t)BackingPointer);
        v28 = v29;
      }
      else
      {
        v27 = CFAllocatorAllocate(a2, valuePtr, 0);
        v28 = (uint64_t)v27;
        if (!v27)
          goto LABEL_18;
        memcpy(v27, BackingPointer, valuePtr);
        v29 = v28;
      }
      v30 = (const void *)FigSharedMemBlockGetRegion(v29);
      if (v30)
        CFRelease(v30);
LABEL_18:
      v31 = CFGetTypeID(value);
      if (v31 == FigFlatDictionaryKeySpecGetTypeID())
      {
        BinaryForExport = FigFlatDictionaryKeySpecCreateBinaryForExport(a2, (uint64_t)value, 0);
        if (BinaryForExport)
        {
          v33 = (uint64_t)BinaryForExport;
          v34 = (const void *)FigSharedMemBlockGetRegion((uint64_t)BinaryForExport);
          if (v34)
            CFRelease(v34);
          if (v28)
          {
            valuePtr = 0;
            RemoteAddress = FigSharedMemBlockGetRemoteAddress(v28);
            v58 = 0;
            valuePtr = RemoteAddress;
            v58 = FigSharedMemBlockGetRemoteAddress(v33);
            v36 = v56;
            Mutable = CFDictionaryCreateMutable(v56, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            v38 = CFNumberCreate(v36, kCFNumberLongLongType, &valuePtr);
            v53 = v19;
            v39 = v38;
            CFDictionaryAddValue(Mutable, v21, v38);
            CFRelease(v39);
            v40 = CFNumberCreate(v36, kCFNumberLongLongType, &v58);
            CFDictionaryAddValue(Mutable, v20, v40);
            CFRelease(v40);
            v41 = v49;
            v42 = v53;
            v19 = (v53 + 2);
            v43 = v36;
            v44 = v57;
            v45 = (char *)CFAllocatorReallocate(v43, *v49, 8 * (int)v19, 0);
            *v41 = v45;
            v46 = (uint64_t *)&v45[8 * v42];
            *v46 = v28;
            v46[1] = v33;
            CMRemoveAttachment(v44, *v12);
            if (Mutable)
            {
              CMSetAttachment(v44, *v12, Mutable, 1u);
              CFRelease(Mutable);
            }
            v20 = v51;
            a2 = v52;
            v21 = v50;
            goto LABEL_31;
          }
          v47 = (const void *)FigSharedMemBlockGetRegion(v33);
          v28 = v33;
          if (!v47)
            goto LABEL_29;
LABEL_28:
          CFRetain(v47);
LABEL_29:
          FigSharedMemBlockRetain(v28);
          goto LABEL_30;
        }
      }
      if (v28)
      {
        v47 = (const void *)FigSharedMemBlockGetRegion(v28);
        if (v47)
          goto LABEL_28;
        goto LABEL_29;
      }
LABEL_30:
      CMRemoveAttachment(v57, *v12);
LABEL_31:
      ++v12;
      ++v18;
      if (!--Count)
        goto LABEL_37;
    }
  }
  v19 = 0;
LABEL_37:
  CFRelease(v55);
  return v19;
}

uint64_t FigSharedMemBlockGetRegion(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  pid_t v5;
  uint64_t v6;

  if (result)
  {
    v1 = result;
    v2 = result - 16;
    if (*(_DWORD *)(result - 16) == 1936220779)
    {
      if (*(int *)(result - 12) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      v3 = v2 - *(unsigned int *)(v1 - 4);
      v4 = *(_QWORD *)(v3 + 32);
      v5 = getpid();
      v6 = v3 + 16;
      if (v4 == v5)
        v6 = v3 + 24;
      return *(_QWORD *)v6;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t FigSharedMemBlockGetRemoteAddress(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    if (*(_DWORD *)(result - 16) == 1936220779)
    {
      v1 = *(unsigned int *)(result - 4);
      v2 = *(_QWORD *)(result - 16 - v1 + 8);
      if (v2)
        return v1 + v2 + 16;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 0;
  }
  return result;
}

uint64_t FigSharedMemPoolGetSharedRegion(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t roDeserializeSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t BlockBufferWrapper;
  int v6;
  const void *v7;
  const void *NameForCache;
  uint64_t v9;
  CFTypeRef cf;

  if (a2)
  {
    v4 = *(_QWORD *)a1;
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    cf = 0;
    if (*(_DWORD *)(v4 + 4) == 3)
    {
      BlockBufferWrapper = roCreateBlockBufferWrapper(v4, (CMBlockBufferRef *)&cf);
      if ((_DWORD)BlockBufferWrapper
        || (BlockBufferWrapper = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface(),
            (_DWORD)BlockBufferWrapper))
      {
        v9 = BlockBufferWrapper;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        roRebuildFlatDictionaryAttachments(*(CMAttachmentBearerRef *)(a2 + 96));
        v6 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(v4 + 4);
        *(_DWORD *)(a2 + 76) = v6;
        v7 = *(const void **)(v4 + 24);
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 16);
        NameForCache = roSerializationContextGetNameForCache(a2, v7);
        if (NameForCache)
          NameForCache = CFRetain(NameForCache);
        v9 = 0;
        *(_QWORD *)(a2 + 88) = NameForCache;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v9 = 4294950629;
    }
    if (cf)
      CFRelease(cf);
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v9;
}

const void *roSerializationContextGetNameForCache(uint64_t a1, const void *a2)
{
  const void *Value;

  if (!a2)
    return 0;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (!Value)
  {
    Value = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)a2, 0x8000100u);
    if (Value)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), a2, Value);
      CFRelease(Value);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  return Value;
}

void roRebuildFlatDictionaryAttachments(CMAttachmentBearerRef target)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  CFIndex Count;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  CFStringRef *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  uint64_t v19;
  uint64_t v20;
  const void *Region;
  const void *v22;
  id LazyFlatDictionaryWrapper;
  uint64_t v24;
  uint64_t v25;
  uint64_t valuePtr;
  void *value;
  void *v28[2];

  v28[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], target, 1u);
  if (v2)
  {
    v3 = v2;
    Count = CFDictionaryGetCount(v2);
    MEMORY[0x1E0C80A78](Count, v5, v6, v7);
    v8 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    v9 = (CFStringRef *)((char *)&v24 - v8);
    if ((unint64_t)(8 * Count) >= 0x200)
      v10 = 512;
    else
      v10 = 8 * Count;
    bzero((char *)&v24 - v8, v10);
    MEMORY[0x1E0C80A78](v11, v12, v13, v14);
    v15 = (CFTypeRef *)((char *)&v24 - v8);
    bzero((char *)&v24 - v8, v10);
    CFDictionaryGetKeysAndValues(v3, (const void **)((char *)&v24 - v8), (const void **)((char *)&v24 - v8));
    if (Count >= 1)
    {
      v16 = (const void *)*MEMORY[0x1E0D08750];
      v17 = (const void *)*MEMORY[0x1E0D08748];
      do
      {
        v18 = CFGetTypeID(*v15);
        if (v18 == CFDictionaryGetTypeID())
        {
          value = 0;
          v28[0] = 0;
          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)*v15, v16, (const void **)&value))
          {
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)*v15, v17, (const void **)v28))
            {
              v25 = 0;
              valuePtr = 0;
              CFNumberGetValue((CFNumberRef)v28[0], kCFNumberLongLongType, &valuePtr);
              CFNumberGetValue((CFNumberRef)value, kCFNumberLongLongType, &v25);
              v19 = valuePtr;
              if (valuePtr && (v20 = v25) != 0)
              {
                Region = (const void *)FigSharedMemBlockGetRegion(valuePtr);
                if (Region)
                  CFRetain(Region);
                v22 = (const void *)FigSharedMemBlockGetRegion(v20);
                if (v22)
                  CFRetain(v22);
                LazyFlatDictionaryWrapper = FigCreateLazyFlatDictionaryWrapper(v19, v20, (uint64_t)&__block_literal_global_48);
                CMRemoveAttachment(target, *v9);
                if (LazyFlatDictionaryWrapper)
                {
                  CMSetAttachment(target, *v9, LazyFlatDictionaryWrapper, 1u);
                  CFRelease(LazyFlatDictionaryWrapper);
                }
              }
              else
              {
                CMRemoveAttachment(target, *v9);
              }
            }
          }
        }
        ++v9;
        ++v15;
        --Count;
      }
      while (Count);
    }
    CFRelease(v3);
  }
}

uint64_t roCreateBlockBufferWrapper(uint64_t a1, CMBlockBufferRef *blockBufferOut)
{
  uint64_t v2;
  void *v3;
  const __CFAllocator *v6;
  size_t v7;
  uint64_t v8;

  v2 = 48;
  if (*(_QWORD *)(a1 + 32) == a1)
    v2 = 40;
  v3 = *(void **)(a1 + v2);
  if (v3)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = *(_QWORD *)(a1 + 56);
    if (roGetShmemDeallocator_once != -1)
      dispatch_once(&roGetShmemDeallocator_once, &__block_literal_global_37);
    v8 = CMBlockBufferCreateWithMemoryBlock(v6, v3, v7, (CFAllocatorRef)roGetShmemDeallocator_shmemDeallocator, 0, 0, *(_QWORD *)(a1 + 56), 0, blockBufferOut);
    if ((_DWORD)v8)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigSharedMemBlockRetain((uint64_t)v3);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v8;
}

void roCleanupSampleBufferOperation(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_DWORD *)a1 != 3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void roCleanupSampleBufferMessageData(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *Region;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = (_QWORD *)(a1 + 40);
    v4 = v2 == a1;
    if (v2 == a1)
      v5 = 40;
    else
      v5 = 48;
    v6 = *(_QWORD *)(a1 + v5);
    if (v4 && *(int *)(a1 + 64) >= 1)
    {
      v7 = 0;
      v8 = a1 + 68;
      do
      {
        Region = (const void *)FigSharedMemBlockGetRegion(*(_QWORD *)(v8 + 8 * v7));
        if (Region)
          CFRetain(Region);
        FigSharedMemBlockRelease(*(_QWORD *)(v8 + 8 * v7++));
      }
      while (v7 < *(int *)(a1 + 64));
    }
    FigSharedMemBlockRelease(v6);
    *v3 = 0;
    v3[1] = 0;
  }
}

uint64_t rqSenderRegisterIOSurface(uint64_t a1, IOSurfaceRef buffer)
{
  const __CFAllocator *v4;
  const void *UInt32;
  int SInt32;
  uint64_t ContinuousUpTimeNanoseconds;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mach_port_t MachPort;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  CFTypeRef *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFNumberRef v37;
  CFNumberRef v38;
  uint64_t v39;
  IOSurfaceID ID;
  uint64_t valuePtr;

  IOSurfaceGetID(buffer);
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (a1 && buffer)
  {
    if (*(_DWORD *)(a1 + 156))
    {
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 168), UInt32))
      {
        if (!*(_DWORD *)(a1 + 216))
          goto LABEL_17;
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 168), UInt32);
        SInt32 = FigCFNumberGetSInt32();
        ContinuousUpTimeNanoseconds = FigGetContinuousUpTimeNanoseconds();
        if (!*(_DWORD *)(a1 + 216))
          goto LABEL_17;
        v8 = SInt32;
        v9 = *(_QWORD *)(a1 + 176);
        v10 = v9 + 32 * SInt32;
        *(_QWORD *)(v10 + 8) = ContinuousUpTimeNanoseconds;
        v11 = *(_QWORD *)(a1 + 200);
        if (v11 == SInt32)
          goto LABEL_17;
        v14 = *(_QWORD *)(v10 + 24);
        v12 = (_QWORD *)(v10 + 24);
        v13 = v14;
        if (v14 != -1)
          *(_QWORD *)(v9 + 32 * v13 + 16) = *(_QWORD *)(v9 + 32 * SInt32 + 16);
        v15 = v9 + 32 * SInt32;
        v18 = *(_QWORD *)(v15 + 16);
        v16 = (uint64_t *)(v15 + 16);
        v17 = v18;
        if (v18 != -1)
          *(_QWORD *)(v9 + 32 * v17 + 24) = v13;
        if (v11 != -1)
          *(_QWORD *)(v9 + 32 * v11 + 16) = SInt32;
        v19 = *(_QWORD *)(a1 + 192);
        if (v19 == SInt32)
        {
          v19 = *v16;
          *(_QWORD *)(a1 + 192) = *v16;
        }
        *v12 = v11;
        *v16 = -1;
        *(_QWORD *)(a1 + 200) = SInt32;
        if (v19 != -1)
        {
LABEL_17:
          MachPort = 0;
LABEL_36:
          v39 = 0;
          goto LABEL_37;
        }
        MachPort = 0;
        v39 = 0;
        *(_QWORD *)(a1 + 192) = v8;
      }
      else
      {
        MachPort = IOSurfaceCreateMachPort(buffer);
        if (!FigRemoteQueueIOSurfaceSender_ShareIOSurface(*(_DWORD *)(a1 + 156), MachPort))
        {
          valuePtr = -1;
          ID = IOSurfaceGetID(buffer);
          if (*(_DWORD *)(a1 + 216))
          {
            v21 = *(_QWORD *)(a1 + 208);
            if (v21 == -1)
            {
              v23 = *(void **)(a1 + 176);
              v21 = *(_QWORD *)(a1 + 184);
              valuePtr = v21;
              *(_QWORD *)(a1 + 184) = v21 + 1;
              v22 = malloc_type_realloc(v23, 32 * (v21 + 1), 0x1020040B07D1DCCuLL);
              *(_QWORD *)(a1 + 176) = v22;
            }
            else
            {
              valuePtr = *(_QWORD *)(a1 + 208);
              v22 = *(_QWORD **)(a1 + 176);
              *(_QWORD *)(a1 + 208) = v22[4 * v21 + 2];
            }
            v24 = (CFTypeRef *)&v22[4 * v21];
            *v24 = CFRetain(buffer);
            v24[1] = 0;
            v24[2] = (CFTypeRef)-1;
            v24[3] = (CFTypeRef)-1;
            v25 = FigGetContinuousUpTimeNanoseconds();
            if (*(_DWORD *)(a1 + 216))
            {
              v26 = *(_QWORD *)(a1 + 176);
              v27 = v26 + 32 * v21;
              *(_QWORD *)(v27 + 8) = v25;
              v28 = *(_QWORD *)(a1 + 200);
              if (v28 != v21)
              {
                v31 = *(_QWORD *)(v27 + 24);
                v29 = (_QWORD *)(v27 + 24);
                v30 = v31;
                if (v31 != -1)
                  *(_QWORD *)(v26 + 32 * v30 + 16) = *(_QWORD *)(v26 + 32 * v21 + 16);
                v32 = v26 + 32 * v21;
                v35 = *(_QWORD *)(v32 + 16);
                v33 = (uint64_t *)(v32 + 16);
                v34 = v35;
                if (v35 != -1)
                  *(_QWORD *)(v26 + 32 * v34 + 24) = v30;
                if (v28 != -1)
                  *(_QWORD *)(v26 + 32 * v28 + 16) = v21;
                v36 = *(_QWORD *)(a1 + 192);
                if (v36 == v21)
                {
                  v36 = *v33;
                  *(_QWORD *)(a1 + 192) = *v33;
                }
                *v29 = v28;
                *v33 = -1;
                *(_QWORD *)(a1 + 200) = v21;
                if (v36 == -1)
                  *(_QWORD *)(a1 + 192) = v21;
              }
            }
          }
          v37 = CFNumberCreate(v4, kCFNumberSInt64Type, &valuePtr);
          v38 = CFNumberCreate(v4, kCFNumberSInt32Type, &ID);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 168), v38, v37);
          CFRelease(v38);
          CFRelease(v37);
          goto LABEL_36;
        }
        v39 = 4294954514;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      MachPort = 0;
      v39 = 4294950633;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    MachPort = 0;
    v39 = 4294950629;
  }
LABEL_37:
  if (UInt32)
    CFRelease(UInt32);
  if (MachPort)
    FigMachPortReleaseSendRight_();
  return v39;
}

const __CFAllocator *FigSharedMemPoolAllocatorGetPool(const __CFAllocator *result)
{
  CFAllocatorContext v1;

  memset(&v1, 0, sizeof(v1));
  if (result)
  {
    CFAllocatorGetContext(result, &v1);
    if ((unint64_t (*)(unint64_t, uint64_t, uint64_t))v1.allocate == shmemAllocatorAllocate)
      return (const __CFAllocator *)v1.info;
    else
      return 0;
  }
  return result;
}

uint64_t FigFlatDictionaryKeySpecGetTypeID()
{
  MEMORY[0x1A858C99C](&FigFlatDictionaryKeySpecGetTypeID_sRegisterFigFlatDictionaryKeySpecOnce, flatDictionaryKeySpec_register);
  return sFigFlatDictionaryKeySpecID;
}

_DWORD *FigFlatDictionaryKeySpecCreateBinaryForExport(const __CFAllocator *a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  size_t v12;
  int v13;
  _DWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;

  if (!*(_BYTE *)(a2 + 20))
    return 0;
  v5 = *(_DWORD *)(a2 + 36);
  if (v5)
  {
    LODWORD(v6) = 0;
    v7 = *(uint64_t **)(a2 + 48);
    v8 = *(unsigned int *)(a2 + 36);
    do
    {
      v9 = *v7;
      v7 += 3;
      v6 = v6 + strlen(*(const char **)(v9 + 8)) + 1;
      --v8;
    }
    while (v8);
    v10 = v6 + 12;
  }
  else
  {
    v10 = 12;
  }
  v12 = (24 * v5);
  v13 = v10 + v12;
  v14 = CFAllocatorAllocate(a1, v10 + v12, 0);
  v11 = v14;
  if (v14)
  {
    v14[1] = *(_DWORD *)(a2 + 16);
    *v14 = FigFlatDictionaryKeySpaceGetLabel(*(_DWORD *)(a2 + 28));
    v11[2] = *(_DWORD *)(a2 + 36);
    v15 = (uint64_t *)(v11 + 3);
    memcpy(v11 + 3, *(const void **)(a2 + 48), v12);
    if (*(_DWORD *)(a2 + 36))
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)v15 + v12;
      do
      {
        v19 = *v15;
        *v15 = v17;
        v15 += 3;
        v20 = strlen(*(const char **)(v19 + 8));
        strncpy(&v18[v17], *(const char **)(v19 + 8), v20 + 1);
        v17 += strlen(*(const char **)(v19 + 8)) + 1;
        ++v16;
      }
      while (v16 < *(unsigned int *)(a2 + 36));
    }
    if (a3)
      *a3 = v13;
  }
  return v11;
}

uint64_t FigFlatDictionaryKeySpaceGetLabel(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
    return *(unsigned int *)(sKeySpaceNames + 4 * a1);
  return result;
}

uint64_t FigFlatDictionaryGetTypeID()
{
  MEMORY[0x1A858C99C](&FigFlatDictionaryGetTypeID_sRegisterFigFlatDictionaryOnce, flatDictionary_register);
  return sFigFlatDictionaryID;
}

uint64_t FigFlatDictionaryGetBackingPointer(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (a2)
    *a2 = *(_DWORD *)(v2 + 20);
  return *(_QWORD *)(v2 + 24);
}

id FigCreateLazyFlatDictionaryWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[FigFlatToNSDictionaryWrapper initLazilyWithFlatDictionaryBacking:exportedKeySpec:deallocatorBlock:]([FigFlatToNSDictionaryWrapper alloc], "initLazilyWithFlatDictionaryBacking:exportedKeySpec:deallocatorBlock:", a1, a2, a3);
}

void roCommonCleanupMessageData(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = 6;
    if ((_QWORD *)a1[4] == a1)
      v2 = 5;
    FigSharedMemBlockRelease(a1[v2]);
    a1[5] = 0;
    a1[6] = 0;
  }
}

void roCleanupConfigurationLiveOperation(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_DWORD *)a1 != 5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t FigRemoteQueueIOSurfaceSender_ShareIOSurface(int a1, int a2)
{
  mach_port_name_t reply_port;
  uint64_t v4;
  uint64_t v5;
  _BYTE msg[36];
  uint64_t v8;

  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  v8 = 1245184;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x481200000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, 0x1F4u, 0);
  v5 = v4;
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18550)
      {
        v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v5;
        }
      }
      else
      {
        v5 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_20;
  }
  return v5;
}

double psn_conformRectForMSR420vfBoundedByRect(int a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  float v13;
  int v14;
  double v15;
  float v16;
  CGFloat v17;
  float v18;
  double v19;
  float v20;
  double v21;
  double MaxX;
  double MaxY;
  float v24;
  double v25;
  float v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  double v32;
  float v33;
  int v34;
  double MinX;
  BOOL v36;
  double v37;
  double v38;
  double MinY;
  double v40;
  double v42;
  double rect;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  if (a1)
    v14 = 2;
  else
    v14 = 1;
  v13 = a6;
  v15 = (double)(int)FigCaptureCeilFloatToMultipleOf(v14, v13);
  v16 = a7;
  v17 = (double)(int)FigCaptureCeilFloatToMultipleOf(v14, v16);
  v18 = a8;
  v19 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v18);
  v20 = a9;
  v21 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v20);
  v48.origin.x = v15;
  v42 = v17;
  v48.origin.y = v17;
  v48.size.width = v19;
  v48.size.height = v21;
  MaxX = CGRectGetMaxX(v48);
  v49.origin.x = a6;
  v49.origin.y = a7;
  v49.size.width = a8;
  v49.size.height = a9;
  if (MaxX > CGRectGetMaxX(v49))
  {
    v50.origin.x = a6;
    v50.origin.y = a7;
    v50.size.width = a8;
    v50.size.height = a9;
    v19 = CGRectGetMaxX(v50) - v15;
  }
  v51.origin.x = v15;
  v51.origin.y = v42;
  v51.size.width = v19;
  v51.size.height = v21;
  MaxY = CGRectGetMaxY(v51);
  v52.origin.x = a6;
  v52.origin.y = a7;
  v52.size.width = a8;
  v52.size.height = a9;
  if (MaxY > CGRectGetMaxY(v52))
  {
    v53.origin.x = a6;
    v53.origin.y = a7;
    v53.size.width = a8;
    v53.size.height = a9;
    v21 = CGRectGetMaxY(v53) - v42;
  }
  v24 = a4;
  v25 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v24);
  v26 = a5;
  v27 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v26);
  if (v19 >= v25)
    v28 = v25;
  else
    v28 = v19;
  if (v28 >= 0.0)
    v29 = v28;
  else
    v29 = 0.0;
  if (v21 < v27)
    v27 = v21;
  if (v27 >= 0.0)
    v30 = v27;
  else
    v30 = 0.0;
  v31 = a2;
  v32 = (double)(int)FigCaptureRoundFloatToMultipleOf(v14, v31);
  v33 = a3;
  v34 = FigCaptureRoundFloatToMultipleOf(v14, v33);
  v54.origin.x = v15;
  v54.origin.y = v42;
  v54.size.width = v19;
  v54.size.height = v21;
  MinX = CGRectGetMinX(v54);
  v55.origin.x = v15;
  v55.origin.y = v42;
  v55.size.width = v19;
  v55.size.height = v21;
  rect = v29;
  v36 = CGRectGetMaxX(v55) - v29 < v32;
  v37 = v32;
  if (v36)
  {
    v56.origin.x = v15;
    v56.origin.y = v42;
    v56.size.width = v19;
    v56.size.height = v21;
    v37 = CGRectGetMaxX(v56) - v29;
  }
  v38 = (double)v34;
  if (MinX <= v37)
  {
    v58.origin.x = v15;
    v58.origin.y = v42;
    v58.size.width = v19;
    v58.size.height = v21;
    if (CGRectGetMaxX(v58) - rect < v32)
    {
      v59.origin.x = v15;
      v59.origin.y = v42;
      v59.size.width = v19;
      v59.size.height = v21;
      v32 = CGRectGetMaxX(v59) - rect;
    }
  }
  else
  {
    v57.origin.x = v15;
    v57.origin.y = v42;
    v57.size.width = v19;
    v57.size.height = v21;
    v32 = CGRectGetMinX(v57);
  }
  v60.origin.x = v15;
  v60.origin.y = v42;
  v60.size.width = v19;
  v60.size.height = v21;
  MinY = CGRectGetMinY(v60);
  v61.origin.x = v15;
  v61.origin.y = v42;
  v61.size.width = v19;
  v61.size.height = v21;
  v36 = CGRectGetMaxY(v61) - v30 < v38;
  v40 = (double)v34;
  if (v36)
  {
    v62.origin.x = v15;
    v62.origin.y = v42;
    v62.size.width = v19;
    v62.size.height = v21;
    v40 = CGRectGetMaxY(v62) - v30;
  }
  if (MinY <= v40)
  {
    v64.origin.x = v15;
    v64.origin.y = v42;
    v64.size.width = v19;
    v64.size.height = v21;
    if (CGRectGetMaxY(v64) - v30 < v38)
    {
      v65.origin.x = v15;
      v65.origin.y = v42;
      v65.size.width = v19;
      v65.size.height = v21;
      CGRectGetMaxY(v65);
    }
  }
  else
  {
    v63.origin.x = v15;
    v63.origin.y = v42;
    v63.size.width = v19;
    v63.size.height = v21;
    CGRectGetMinY(v63);
  }
  return v32;
}

uint64_t FigCaptureRoundFloatToMultipleOf(int a1, float a2)
{
  return llroundf(a2 / (float)a1) * a1;
}

double psn_smallestBoundingRectAlignedToMultipleOf(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  float v9;
  double v10;
  float v11;
  float v12;
  double v13;
  float v14;
  double v15;
  double MaxX;
  double v17;
  CGFloat v18;
  double v20;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  v9 = a2 + 0.001;
  v10 = (double)(int)FigCaptureFloorFloatToMultipleOf(a1, v9);
  v11 = a3 + 0.001;
  v20 = (double)(int)FigCaptureFloorFloatToMultipleOf(a1, v11);
  v12 = a4 + -0.001;
  v13 = (double)(int)FigCaptureCeilFloatToMultipleOf(a1, v12);
  v14 = a5 + -0.001;
  v15 = (double)(int)FigCaptureCeilFloatToMultipleOf(a1, v14);
  v23.origin.x = v10;
  v23.origin.y = v20;
  v23.size.width = v13;
  v23.size.height = v15;
  MaxX = CGRectGetMaxX(v23);
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  if (MaxX >= CGRectGetMaxX(v24))
    v17 = -0.0;
  else
    v17 = (double)a1;
  v18 = v17 + v13;
  v25.origin.x = v10;
  v25.origin.y = v20;
  v25.size.width = v18;
  v25.size.height = v15;
  CGRectGetMaxY(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.height = a5;
  v26.size.width = a4;
  CGRectGetMaxY(v26);
  return v10;
}

uint64_t FigCaptureFloorFloatToMultipleOf(int a1, float a2)
{
  return vcvtms_s32_f32(a2 / (float)a1) * a1;
}

uint64_t FigCaptureCeilFloatToMultipleOf(int a1, float a2)
{
  return vcvtps_s32_f32(a2 / (float)a1) * a1;
}

unint64_t mscsn_scaleDimensionsWithAlignment(unint64_t a1, int a2, double a3, double a4)
{
  int v7;
  unint64_t v8;
  double v9;
  int v10;
  double v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  float v27;
  float v28;
  float v29;

  v7 = a1;
  v8 = HIDWORD(a1);
  v9 = a3 * (float)(int)a1;
  v10 = (int)v9;
  v11 = a4 * (float)SHIDWORD(a1);
  v12 = (int)v11;
  if ((int)FigCapturePlatformIdentifier() < 9)
    goto LABEL_23;
  v13 = v7;
  if ((_DWORD)v8)
  {
    v14 = v7;
    v15 = v8;
    do
    {
      v13 = v15;
      v15 = v14 % v15;
      v14 = v13;
    }
    while (v15);
  }
  if (v13 % a2
    || (v16 = v7 / v13, v7 / v13 > 16)
    || (v17 = a4 / a3 * (double)((int)v8 / v13), v18 = llroundf(v17), v18 > 10))
  {
LABEL_23:
    v26 = (int)(float)(uint64_t)(llroundf((float)v10 / (float)a2) * a2);
    v25 = (int)(float)(uint64_t)(llroundf((float)v12 / (float)a2) * a2);
  }
  else
  {
    if (v16 % a2 || v18 % a2)
    {
      v16 *= a2;
      v18 *= a2;
    }
    v19 = vcvtps_s32_f32((float)v10 / (float)v16);
    v20 = v16 * v19;
    v21 = vcvtps_s32_f32((float)v12 / (float)v18);
    v22 = v18 * v21;
    v23 = v16 * v19 - v10;
    if (v23 < 0)
      v23 = v10 - v16 * v19;
    v24 = v22 - v12;
    if (v22 - v12 < 0)
      v24 = v12 - v22;
    LODWORD(v25) = v18 * v19;
    v26 = v16 * v21;
    if (v23 >= v24)
      LODWORD(v25) = v22;
    else
      v26 = v20;
    v27 = v9 / v11;
    v28 = vabds_f32((float)v26 / (float)(int)v25, v27);
    v29 = vabds_f32((float)v20 / (float)v22, v27);
    if (v28 >= v29)
      v25 = v22;
    else
      v25 = v25;
    if (v28 >= v29)
      v26 = v20;
  }
  return v26 | (unint64_t)(v25 << 32);
}

double flatDictionaryKeySpec_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void sub_1A2D46EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __captureSession_startDeferredGraphSetup_block_invoke(uint64_t a1)
{
  const void *v1;
  _QWORD v2[5];

  v1 = *(const void **)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __captureSession_startDeferredGraphSetup_block_invoke_2;
  v2[3] = &__block_descriptor_40_e8_v12__0B8l;
  v2[4] = v1;
  captureSession_dispatchGraphCalloutToWorkerQueueAfter(v1, (uint64_t)v2, 0.0);
}

void captureSession_updateDeferredGraphSetupStartCondition(const void *a1, _BYTE *a2, int a3)
{
  os_unfair_lock_s *DerivedStorage;
  uint64_t v7;
  os_unfair_lock_s *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL4 shouldStartDeferredGraphSetup;
  float v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return;
  }
  v7 = (uint64_t)DerivedStorage;
  v11 = 0.0;
  v8 = DerivedStorage + 80;
  os_unfair_lock_lock(DerivedStorage + 80);
  if (*a2 == a3)
  {
    os_unfair_lock_unlock(v8);
    return;
  }
  *a2 = a3;
  if ((_BYTE *)(v7 + 498) == a2)
  {
    if (!dword_1ECFE9590)
      goto LABEL_11;
  }
  else if ((_BYTE *)(v7 + 497) != a2 || !a3 || !dword_1ECFE9590)
  {
    goto LABEL_11;
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_11:
  shouldStartDeferredGraphSetup = captureSession_shouldStartDeferredGraphSetup(v7, &v11);
  os_unfair_lock_unlock(v8);
  if (shouldStartDeferredGraphSetup)
    captureSession_startDeferredGraphSetupOnWorkerQueueAfter(a1, v11);
}

BOOL captureSession_shouldStartDeferredGraphSetup(uint64_t a1, float *a2)
{
  _BOOL8 result;
  int v5;
  float v6;
  float v7;
  float v8;

  if (!*(_BYTE *)(a1 + 497) || *(_BYTE *)(a1 + 336))
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 80);
  result = *(_BYTE *)(a1 + 80) == 0;
  if (v5 && *(_BYTE *)(a1 + 498))
    result = 1;
  if (a2 && result)
  {
    v6 = 0.1;
    if (*(_BYTE *)(a1 + 499) && *(_QWORD *)(a1 + 504))
    {
      mach_absolute_time();
      v7 = (float)((float)(FigHostTimeToNanoseconds() / 1000) / -1000000.0) + 0.5;
      v8 = 0.6;
      if (v7 < 0.5)
        v8 = v7 + 0.1;
      if (v7 <= 0.0)
        v6 = 0.1;
      else
        v6 = v8;
    }
    *a2 = v6;
    return 1;
  }
  return result;
}

void captureSession_startDeferredGraphSetupOnWorkerQueueAfter(const void *a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];
  _QWORD v8[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = MEMORY[0x1E0C809B0];
  if (*(_BYTE *)(DerivedStorage + 80))
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke;
    v8[3] = &__block_descriptor_40_e8_v12__0B8l;
    v8[4] = DerivedStorage;
    captureSession_dispatchGraphCalloutToWorkerQueueAfter(a1, (uint64_t)v8, 0.0);
  }
  v7[0] = v6;
  v7[1] = 3221225472;
  v7[2] = __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke_2;
  v7[3] = &__block_descriptor_48_e8_v12__0B8l;
  v7[4] = v5;
  v7[5] = a1;
  captureSession_dispatchGraphCalloutToWorkerQueueAfter(a1, (uint64_t)v7, a2);
}

void captureSession_dispatchGraphCalloutToWorkerQueueAfter(const void *a1, uint64_t a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  dispatch_time_t v9;
  NSObject *v10;
  _QWORD v11[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = DerivedStorage;
    v8 = *(_QWORD *)(DerivedStorage + 600);
    if (a3 <= 0.0)
    {
      v9 = 0;
      if (!a1)
      {
LABEL_7:
        v10 = *(NSObject **)(v7 + 104);
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3221225472;
        v11[2] = __captureSession_dispatchGraphCalloutToWorkerQueueAfter_block_invoke;
        v11[3] = &unk_1E491FBB8;
        v11[4] = a2;
        v11[5] = v7;
        v11[6] = v8;
        v11[7] = a1;
        dispatch_after(v9, v10, v11);
        return;
      }
    }
    else
    {
      v9 = dispatch_time(0, (uint64_t)(float)(a3 * 1000000000.0));
      if (!a1)
        goto LABEL_7;
    }
    CFRetain(a1);
    goto LABEL_7;
  }
}

void FigCaptureSessionPrewarm(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  int v9;
  int IsSecureCaptureExtension;
  id v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  dispatch_time_t v16;
  int v17;
  int v18;
  FigCaptureThermalMonitor *v19;
  NSObject *v20;
  void *v21;
  int v22;
  uint64_t v23;
  int v24;
  const void *v25;
  int v26;
  int v27;
  id v28;
  uint64_t DerivedStorage;
  uint64_t v30;
  os_unfair_lock_s *v31;
  double v32;
  double v33;
  _BOOL4 v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  const char *v38;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  const char *v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  int v48;
  int v49;
  float v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  void *v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  NSObject *v59;
  dispatch_time_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[4];
  char v64;
  char v65;
  os_log_type_t type;
  unsigned int v67;
  int v68;
  const char *v69;
  __int16 v70;
  void *v71;
  __int16 v72;
  _BYTE v73[10];
  const char *v74;
  void *v75;
  int v76;
  __int128 handler;
  void (*v78)(uint64_t);
  void *v79;
  NSObject *v80;
  id v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (initializeGlobals_initializeGlobalsOnceToken != -1)
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_616);
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E493D4D8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D5F8) & 1) != 0)
  {
    v9 = 1;
    IsSecureCaptureExtension = 1;
  }
  else
  {
    IsSecureCaptureExtension = cs_bundleIdentifierIsSecureCaptureExtension((uint64_t)a1);
    v9 = 0;
  }
  if ((cs_isPocketDetectionNeeded((uint64_t)a1) & 1) != 0 || !a2 || !a1 || !a4)
  {
LABEL_20:
    if (IsSecureCaptureExtension)
      goto LABEL_21;
    goto LABEL_27;
  }
  v11 = a1;
  if (!cs_bundleIdentifierIsSecureCaptureExtension((uint64_t)a1)
    || (v11 = cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier((uint64_t)a1)) != 0)
  {
    if ((objc_msgSend(a4, "isEqualToString:", 0x1E493F4B8) & 1) != 0
      || objc_msgSend(a4, "isEqualToString:", 0x1E493F4F8))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
      v12 = (const void *)qword_1EE6BEC78;
      qword_1EE6BEC78 = (uint64_t)v11;
      qword_1EE6BEC80 = a2;
      CFRetain(v11);
      if (v12)
        CFRelease(v12);
      cs_cancelPocketDetectionTimeoutTimer();
      v13 = qword_1EE6BEC88;
      if (!qword_1EE6BEC88)
      {
        v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
        v13 = dispatch_queue_create("com.apple.coremedia.capturesession.timeOutForPocketDetectionNeeded", v14);
        qword_1EE6BEC88 = (uint64_t)v13;
      }
      v15 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v13);
      v16 = dispatch_time(0, 0x28FA6B000);
      dispatch_source_set_timer(v15, v16, 0xFFFFFFFFFFFFFFFFLL, 0x4190AB00uLL);
      *(_QWORD *)&handler = MEMORY[0x1E0C809B0];
      *((_QWORD *)&handler + 1) = 3221225472;
      v78 = __cs_setPocketDetectionNeeded_block_invoke;
      v79 = &unk_1E491F158;
      v80 = v15;
      v81 = v11;
      dispatch_source_set_event_handler(v15, &handler);
      qword_1EE6BEC90 = (uint64_t)v15;
      dispatch_activate(v15);
      os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
    }
    goto LABEL_20;
  }
  v62 = v4;
  LODWORD(v61) = 0;
  FigDebugAssert3();
  if (IsSecureCaptureExtension)
  {
LABEL_21:
    v68 = 0;
    *(_QWORD *)&handler = 4;
    if (sysctlbyname("kern.memorystatus_level", &v68, (size_t *)&handler, 0, 0))
      v17 = 0;
    else
      v17 = v68;
    if (!v9)
      goto LABEL_25;
    goto LABEL_28;
  }
LABEL_27:
  v17 = 0;
  if (!v9)
  {
LABEL_25:
    v18 = 0;
    goto LABEL_62;
  }
LABEL_28:
  v19 = objc_alloc_init(FigCaptureThermalMonitor);
  v18 = -[FigCaptureThermalMonitor thermalLevel](v19, "thermalLevel");

  if (cs_prewarmSystemOverride_onceToken != -1)
    dispatch_once(&cs_prewarmSystemOverride_onceToken, &__block_literal_global_644);
  if (!dispatch_group_wait((dispatch_group_t)cs_prewarmSystemOverride_overrideGroup, 0))
    dispatch_group_async((dispatch_group_t)cs_prewarmSystemOverride_overrideGroup, (dispatch_queue_t)cs_prewarmSystemOverride_overrideQueue, &__block_literal_global_646);
  os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
  if ((_QWORD)xmmword_1ECFE9DB0)
  {
    mach_absolute_time();
    if ((float)((float)FigHostTimeToNanoseconds() / 1000000000.0) > 3.0)
    {
      os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
      dword_1ECFE9D84 = 0;
      byte_1ECFE9D88 = 0;
      xmmword_1ECFE9D90 = 0u;
      *(_OWORD *)&qword_1ECFE9DA0 = 0u;
      xmmword_1ECFE9DB0 = 0u;
      qword_1ECFE9DC8 = 0;
      *(uint64_t *)((char *)&qword_1ECFE9DC8 + 5) = 0;

      qword_1ECFE9DC0 = 0;
    }
  }
  if (dword_1ECFE9D84 != 2)
  {
    if (!dword_1ECFE9D84)
    {
      dword_1ECFE9D84 = 2;
      *(_QWORD *)&xmmword_1ECFE9D90 = a2;
      *((_QWORD *)&xmmword_1ECFE9D90 + 1) = a3;

      qword_1ECFE9DC0 = a4;
      LODWORD(qword_1ECFE9DC8) = v17;
      HIDWORD(qword_1ECFE9DC8) = v18;
      byte_1ECFE9DD4 = objc_msgSend(+[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor](FigCaptureDeviceLockStateMonitor, "sharedDeviceLockStateMonitor"), "deviceIsLocked");
      if (*MEMORY[0x1E0CA1FC0])
      {
        v20 = fig_log_handle();
        if (os_signpost_enabled(v20))
        {
          LODWORD(handler) = 134217984;
          *(_QWORD *)((char *)&handler + 4) = *((_QWORD *)&xmmword_1ECFE9D90 + 1);
          _os_signpost_emit_with_name_impl(&dword_1A2C80000, v20, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CameraAppLaunchWithOrigin", "%{signpost.description:begin_time}llu", (uint8_t *)&handler, 0xCu);
        }
      }
    }
    goto LABEL_51;
  }
  v21 = (void *)qword_1ECFE9DC0;
  if (qword_1ECFE9DC0)
  {
    if ((objc_msgSend((id)qword_1ECFE9DC0, "isEqualToString:", 0x1E493F438) & 1) != 0)
      LOBYTE(v22) = 0;
    else
      v22 = objc_msgSend(v21, "isEqualToString:", 0x1E493F458) ^ 1;
    if (a4 && (v22 & 1) == 0)
    {
LABEL_48:
      if ((objc_msgSend(a4, "isEqualToString:", 0x1E493F438, v61, v62) & 1) == 0
        && (objc_msgSend(a4, "isEqualToString:", 0x1E493F458) & 1) == 0)
      {

        qword_1ECFE9DC0 = a4;
      }
    }
  }
  else if (a4)
  {
    goto LABEL_48;
  }
LABEL_51:
  os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
  os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
  if ((objc_msgSend(a4, "isEqualToString:", CFSTR("LockScreen")) & 1) != 0
    || (objc_msgSend(a4, "isEqualToString:", 0x1E493F4D8) & 1) != 0
    || objc_msgSend(a4, "isEqualToString:", 0x1E493F4F8))
  {
    mach_absolute_time();
    v23 = FigHostTimeToNanoseconds();
    v24 = byte_1EE6BF31C;
    if (byte_1EE6BF31C && dword_1EE6BF32C && !byte_1EE6BF330 && (float)((float)v23 / 1000000000.0) > 2.0)
    {
      captureSession_reportCancelledLockScreenCameraLaunch();
      v24 = byte_1EE6BF31C;
    }
    if (!v24)
    {
      byte_1EE6BF31C = 1;
      qword_1EE6BF320 = mach_absolute_time();
      LOBYTE(word_1EE6BF328) = 1;
    }
  }
  os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
LABEL_62:
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (a1)
    v25 = (const void *)objc_msgSend((id)objc_msgSend((id)qword_1ECFE9DE0, "objectForKeyedSubscript:", a1), "referencedObject");
  else
    v25 = 0;
  v26 = 0;
  if (!v25 && IsSecureCaptureExtension)
  {
    v27 = dword_1ECFE9E04;
    if (dword_1ECFE9E04 <= 0)
    {
      v27 = 23;
      dword_1ECFE9E04 = 23;
    }
    if (v17 >= v27 || FigCFEqual())
    {
      v26 = 1;
      byte_1ECFE9E08 = 1;
    }
    else
    {
      v26 = 0;
    }
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  v28 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = __FigCaptureSessionPrewarm_block_invoke;
  v63[3] = &__block_descriptor_34_e8_v12__0i8l;
  v64 = v26;
  v65 = IsSecureCaptureExtension;
  objc_msgSend(v28, "prewarmDefaultVideoDeviceForPID:completionHandler:", 0, v63);
  if (v25)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)DerivedStorage)
    {
      v30 = DerivedStorage;
      v31 = (os_unfair_lock_s *)(DerivedStorage + 320);
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
      v32 = *(double *)(v30 + 512);
      if (v32 <= 0.0)
      {
        v34 = 1;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        v34 = v32 > v33;
      }
      if (*(_BYTE *)(v30 + 332) && v34 && *(_BYTE *)(v30 + 336))
      {
        if (*(double *)(v30 + 512) > 0.0)
          *(_QWORD *)(v30 + 512) = 0;
        if (dword_1ECFE9590)
        {
          v67 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v40 = v67;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v41 = v40;
          else
            v41 = v40 & 0xFFFFFFFE;
          if (v41)
          {
            v42 = *(void **)(v30 + 72);
            if (*(_BYTE *)(v30 + 333))
              v43 = "Session already prewarmed";
            else
              v43 = "Updating running condition";
            v68 = 136315906;
            v69 = "captureSession_prewarm";
            v70 = 2114;
            v71 = v42;
            v72 = 2112;
            *(_QWORD *)v73 = a4;
            *(_WORD *)&v73[8] = 2080;
            v74 = v43;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!*(_BYTE *)(v30 + 333))
        {
          *(_BYTE *)(v30 + 333) = 1;

          *(_QWORD *)(v30 + 352) = objc_msgSend(a4, "copy");
          captureSession_updateRunningCondition(v25, 0, 0);
          *(_BYTE *)(v30 + 499) = objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "isOnHomeScreen");
        }
        v50 = *(float *)&dword_1ECFE9DDC;
        if (*(float *)&dword_1ECFE9DDC <= 0.0)
        {
          dword_1ECFE9DDC = 0x40000000;
          v50 = 2.0;
        }
        if (*(_QWORD *)(v30 + 520))
        {
          if (dword_1ECFE9590)
          {
            v67 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v52 = v67;
            if (os_log_type_enabled(v51, type))
              v53 = v52;
            else
              v53 = v52 & 0xFFFFFFFE;
            if (v53)
            {
              v54 = *(void **)(v30 + 72);
              v68 = 136315650;
              v69 = "captureSession_prewarm";
              v70 = 2114;
              v71 = v54;
              v72 = 2048;
              *(double *)v73 = v50;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          captureSession_cancelPrewarmingTimeoutTimer();
        }
        else if (dword_1ECFE9590)
        {
          v67 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v56 = v67;
          if (os_log_type_enabled(v55, type))
            v57 = v56;
          else
            v57 = v56 & 0xFFFFFFFE;
          if (v57)
          {
            v58 = *(void **)(v30 + 72);
            v68 = 136315650;
            v69 = "captureSession_prewarm";
            v70 = 2114;
            v71 = v58;
            v72 = 2048;
            *(double *)v73 = v50;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v59 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v30 + 104));
        v60 = dispatch_time(0, (uint64_t)(float)(v50 * 1000000000.0));
        dispatch_source_set_timer(v59, v60, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(v50 * 0.1 * 1000000000.0));
        *(_QWORD *)&handler = MEMORY[0x1E0C809B0];
        *((_QWORD *)&handler + 1) = 3221225472;
        v78 = __captureSession_prewarm_block_invoke;
        v79 = &unk_1E491F158;
        v80 = v59;
        v81 = (id)v25;
        dispatch_source_set_event_handler(v59, &handler);
        *(_QWORD *)(v30 + 520) = v59;
        dispatch_activate(v59);
      }
      else if (dword_1ECFE9590)
      {
        v67 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v45 = v67;
        if (os_log_type_enabled(v44, type))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if (v46)
        {
          v47 = *(void **)(v30 + 72);
          v48 = *(unsigned __int8 *)(v30 + 332);
          v49 = *(unsigned __int8 *)(v30 + 336);
          v68 = 136316418;
          v69 = "captureSession_prewarm";
          v70 = 2114;
          v71 = v47;
          v72 = 1024;
          *(_DWORD *)v73 = v48;
          *(_WORD *)&v73[4] = 1024;
          *(_DWORD *)&v73[6] = v34;
          LOWORD(v74) = 1024;
          *(_DWORD *)((char *)&v74 + 2) = v49;
          HIWORD(v74) = 2112;
          v75 = a4;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      os_unfair_lock_unlock(v31);
    }
  }
  else if (dword_1ECFE9590)
  {
    v67 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v36 = v67;
    if (os_log_type_enabled(v35, type))
      v37 = v36;
    else
      v37 = v36 & 0xFFFFFFFE;
    if (v37)
    {
      v38 = "only";
      v68 = 136316418;
      v69 = "FigCaptureSessionPrewarm";
      v70 = 2112;
      v71 = a1;
      if (v26)
        v38 = "+ memory pool";
      v72 = 2112;
      *(_QWORD *)v73 = a4;
      *(_WORD *)&v73[8] = 2080;
      v74 = v38;
      LOWORD(v75) = 1024;
      *(_DWORD *)((char *)&v75 + 2) = v17;
      HIWORD(v75) = 1024;
      v76 = v18;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void iqsn_releaseBufferContext(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  const void *v5;
  const void *v6;

  v2 = (unsigned int *)(a1 + 15);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 - 1;
  }
  while (__stxr(v4, v2));
  if (!v4)
  {
    v5 = (const void *)*a1;
    if (*a1)
    {
      CFRelease(v5);
      *a1 = 0;
    }
    v6 = (const void *)a1[1];
    if (v6)
      CFRelease(v6);
    free(a1);
  }
}

FigCaptureStillImageSinkPipelineSessionStorage *captureSession_createStillImageSinkPipelineSessionStorage(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int a6, unsigned int *a7)
{
  uint64_t DerivedStorage;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int StillImageNoiseReductionAndFusionScheme;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t IsCameraOrDerivative;
  FigCaptureStillImageUnifiedBracketingSinkPipelineConfiguration *v24;
  void *v25;
  void *v26;
  FigCapturePhotonicEngineSinkPipelineConfiguration *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  _BOOL4 v35;
  void *v36;
  void *v37;
  int v38;
  FigCaptureStillImageSinkPipelineConfiguration *v39;
  uint64_t v40;
  uint64_t v41;
  FigCaptureStillImageSinkPipeline *v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t (*v56)(const void *, const __CFString *, id, CFTypeRef *);
  uint64_t v57;
  uint64_t (*v58)(uint64_t, const __CFString *, id, CFTypeRef *);
  uint64_t v59;
  void *v60;
  void *v61;
  CFTypeRef v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  void *v76;
  void *v77;
  int v78;
  void *v79;
  void *v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t j;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int v97;
  int v98;
  _BOOL4 v99;
  void *v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, const __CFString *, uint64_t, void **);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  _BOOL8 v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  FigCaptureStillImageUnifiedBracketingSinkPipeline *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  FigCaptureStillImageUnifiedBracketingSinkPipeline *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  _QWORD *v158;
  _QWORD *v159;
  _BOOL8 v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t k;
  uint64_t v166;
  int v167;
  void *v168;
  uint64_t v169;
  BOOL v170;
  void *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t m;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  void *v180;
  void *v181;
  FigCaptureStillImageSinkPipelineSessionStorage *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t n;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t ii;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t jj;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t kk;
  void *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  void *v223;
  const __CFString *v224;
  void *v225;
  id v226;
  void *v227;
  void *v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  float v232;
  double v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  FigCapturePhotonicEngineSinkPipeline *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  BWStillImageCoordinatorNode *v250;
  BWStillImageSampleBufferSinkNodeAnalyticsConfiguration *v251;
  BWStillImageSampleBufferSinkNode *v252;
  void *v253;
  void *v254;
  uint64_t v255;
  id *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  id *v261;
  uint64_t v262;
  FigCaptureStillImageSinkPipeline *v263;
  FigCapturePixelConverter *v264;
  FigCaptureSessionPreparedBracket *v265;
  float v266;
  FigCaptureStillImageSinkPipelineSessionStorage *v267;
  uint64_t v268;
  double v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  int v288;
  _BOOL4 v289;
  uint64_t v290;
  int v291;
  void *v292;
  int v293;
  void *v294;
  _BOOL4 v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  id *v301;
  void *v302;
  void *v304;
  void *v305;
  BWInferenceScheduler *v306;
  void *v307;
  char *newValue;
  unsigned int *v309;
  unsigned int v310;
  id v311;
  int v312;
  void *v313;
  int v314;
  void *v315;
  void *v316;
  uint64_t v317;
  void *v318;
  void *v319;
  int v320;
  void *v321;
  void *v322;
  id v323;
  id v324;
  id obj;
  id obja;
  int v327;
  int v328;
  void *v329;
  unsigned int v330;
  id v331;
  id v332;
  id v333;
  void *v334;
  void *v335;
  FigCaptureStillImageSinkPipeline *v336;
  unint64_t v337;
  void *v338;
  _QWORD *v339;
  uint64_t v340;
  unsigned int v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  void *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  int v375;
  _DWORD v376[32];
  CFTypeRef cf[16];
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  _QWORD v390[16];
  uint64_t v391[16];
  uint64_t v392[18];

  v392[16] = *MEMORY[0x1E0C80C00];
  v341 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = (void *)objc_msgSend(a2, "stillImageConnectionConfiguration");
  v15 = (void *)objc_msgSend(v14, "sourceConfiguration");
  v16 = objc_msgSend(a2, "movieFileVideoConnectionConfiguration");
  v305 = a5;
  v293 = a6;
  if (objc_msgSend((id)objc_msgSend(v14, "sinkConfiguration"), "sinkType") == 10)
    v17 = (void *)objc_msgSend(v14, "sinkConfiguration");
  else
    v17 = 0;
  v18 = (void *)objc_msgSend(v15, "requiredFormat");
  v307 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](a3);
  v306 = captureSession_inferenceScheduler();
  v340 = -[FigCaptureCameraSourcePipeline stillImageOutputsByPortType](a3);
  v304 = v15;
  StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(v15, "source"), &v341);
  if (v341)
    goto LABEL_262;
  v20 = (_QWORD *)a3;
  v21 = StillImageNoiseReductionAndFusionScheme;
  v22 = -[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v20);
  newValue = (char *)-[FigCaptureCameraSourcePipeline stillImageOutputColorInfo]((uint64_t)v20);
  v310 = objc_msgSend(v17, "optimizesImagesForOfflineVideoStabilization");
  IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
  v338 = v18;
  v339 = v20;
  v309 = a7;
  if ((v21 - 3) <= 1)
  {
    v24 = objc_alloc_init(FigCaptureStillImageUnifiedBracketingSinkPipelineConfiguration);
    v376[0] = 0;
    v311 = v24;
    cs_updateStillImageSinkPipelineCommonConfiguration(v24, (uint64_t)v20, v14, v16, v18, IsCameraOrDerivative);
    v25 = (void *)objc_msgSend(v14, "sourceConfiguration");
    if (objc_msgSend((id)objc_msgSend(v14, "sinkConfiguration"), "sinkType") == 10)
      v26 = (void *)objc_msgSend(v14, "sinkConfiguration");
    else
      v26 = 0;
    v294 = (void *)objc_msgSend(v25, "depthDataFormat");
    v318 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v20);
    v32 = (void *)-[FigCaptureCameraSourcePipeline stillImageOutputsByPortType]((uint64_t)v20);
    v33 = (void *)-[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v20);
    v319 = v26;
    v34 = objc_msgSend(v26, "maxQualityPrioritization");
    v35 = 0;
    v302 = v14;
    v314 = v34;
    if (objc_msgSend((id)objc_msgSend(v25, "requiredFormat"), "isHighPhotoQualitySupported") && v34 >= 2)
      v35 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v339);
    objc_msgSend(v311, "setRawSensorDimensions:", objc_msgSend(v18, "sensorDimensions"));
    v36 = (void *)objc_msgSend(v32, "allKeys");
    v331 = (id)objc_msgSend(v33, "allKeys");
    v334 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v37 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
      v38 = objc_msgSend(v18, "sushiRawSupported");
    else
      v38 = 0;
    v43 = objc_msgSend(v319, "demosaicedRawEnabled");
    v328 = v38;
    v44 = v43 | v38;
    v312 = v43;
    if (v44 == 1)
      v321 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    else
      v321 = 0;
    v298 = a1;
    v300 = DerivedStorage;
    v316 = v25;
    v295 = v35;
    if (v328)
      v323 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    else
      v323 = 0;
    v389 = 0u;
    v388 = 0u;
    v387 = 0u;
    v386 = 0u;
    v45 = (void *)objc_msgSend(v318, "captureStreams");
    v46 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v386, v392, 16);
    if (!v46)
      goto LABEL_58;
    v47 = v46;
    v48 = *(_QWORD *)v387;
    obj = (id)*MEMORY[0x1E0C9AE00];
LABEL_31:
    v49 = 0;
    while (1)
    {
      if (*(_QWORD *)v387 != v48)
        objc_enumerationMutation(v45);
      v50 = *(void **)(*((_QWORD *)&v386 + 1) + 8 * v49);
      v51 = objc_msgSend(v50, "portType");
      if ((objc_msgSend(v36, "containsObject:", v51) & 1) == 0
        && !objc_msgSend(v331, "containsObject:", v51))
      {
        goto LABEL_56;
      }
      objc_msgSend(v334, "setObject:forKeyedSubscript:", objc_msgSend(v50, "sensorIDString"), v51);
      v52 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v50, "baseZoomFactor");
      objc_msgSend(v37, "setObject:forKeyedSubscript:", objc_msgSend(v52, "numberWithFloat:"), v51);
      if (!v44)
        goto LABEL_56;
      v53 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
      v54 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(v53, v51, v376);
      if (v376[0])
      {
        v285 = v297;
        LODWORD(v282) = v376[0];
LABEL_384:
        FigDebugAssert3();
LABEL_385:
        a7 = v309;
        v127 = v300;
        v79 = v339;
        v76 = v311;
        goto LABEL_386;
      }
      v55 = (const void *)v54;
      if (v54)
      {
        cf[0] = 0;
        v56 = *(uint64_t (**)(const void *, const __CFString *, id, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
        if (v56)
        {
          v376[0] = v56(v55, CFSTR("WhiteBalanceCalibrations"), obj, cf);
          if (!v376[0])
            objc_msgSend(v321, "setObject:forKeyedSubscript:", BWDNGColorCalibrations((void *)cf[0]), v51);
        }
        else
        {
          v376[0] = -12782;
        }
        if (v328)
        {
          v59 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
          v60 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v59, v338, v51, v376);
          if (v376[0])
          {
            v285 = v297;
            LODWORD(v282) = v376[0];
            goto LABEL_384;
          }
          v61 = v60;
          if (!v60)
          {
            v285 = v297;
            LODWORD(v282) = 0;
            FigDebugAssert3();
            v376[0] = -12780;
            goto LABEL_385;
          }
          objc_msgSend(v323, "setObject:forKeyedSubscript:", objc_msgSend(v60, "rawLensShadingCorrection"), v51);

        }
        v62 = v55;
      }
      else
      {
        cf[0] = 0;
        v57 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
        v58 = *(uint64_t (**)(uint64_t, const __CFString *, id, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
        if (v58)
        {
          v376[0] = v58(v57, CFSTR("WhiteBalanceCalibrations"), obj, cf);
          if (!v376[0])
            objc_msgSend(v321, "setObject:forKeyedSubscript:", BWDNGColorCalibrations((void *)cf[0]), v51);
        }
        else
        {
          v376[0] = -12782;
        }
        if (v328)
          objc_msgSend(v323, "setObject:forKeyedSubscript:", objc_msgSend(v338, "rawLensShadingCorrection"), v51);
        v62 = cf[0];
        if (!cf[0])
          goto LABEL_56;
      }
      CFRelease(v62);
LABEL_56:
      if (v47 == ++v49)
      {
        v47 = objc_msgSend(v45, "countByEnumeratingWithState:objects:count:", &v386, v392, 16);
        if (v47)
          goto LABEL_31;
LABEL_58:
        objc_msgSend(v311, "setStillImageSinkPipelineProcessingMode:", 0);
        objc_msgSend(v311, "setPipelineStagePriority:", 14);
        objc_msgSend(v311, "setInferencePriority:", 14);
        v63 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
        objc_msgSend(v311, "setDeviceType:", cs_captureSourceDeviceType(v63));
        objc_msgSend(v311, "setDeviceHasFlash:", objc_msgSend(v318, "hasFlash"));
        objc_msgSend(v311, "setSensorIDStringsByPortType:", v334);
        objc_msgSend(v311, "setBaseZoomFactorsByPortType:", v37);
        objc_msgSend(v311, "setRedEyeReductionVersion:", objc_msgSend(v338, "redEyeReductionVersion"));
        v64 = objc_msgSend(v338, "semanticRenderingSupported");
        v65 = 0;
        if (v64)
          v65 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings", 0), "commonSettings"), "semanticRenderingVersion");
        objc_msgSend(v311, "setSemanticRenderingVersion:", v65);
        a7 = v309;
        if ((objc_msgSend(v319, "depthDataDeliveryEnabled") & 1) != 0)
          v66 = 0;
        else
          v66 = objc_msgSend(v338, "semanticDevelopmentVersion");
        objc_msgSend(v311, "setSemanticDevelopmentVersion:", v66);
        objc_msgSend(v311, "setSemanticStyleRenderingEnabled:", objc_msgSend(v319, "semanticStyleRenderingEnabled"));
        if (objc_msgSend(v338, "isDeepZoomSupported"))
          v67 = -[FigCaptureCameraParameters deepZoomVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "deepZoomVersion");
        else
          v67 = 0;
        objc_msgSend(v311, "setDeepZoomVersion:", v67);
        v68 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v69 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](v339);
        v70 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnStillImageOutputEnabled](v339);
        if (!-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v339))
        {
          v385 = 0u;
          v384 = 0u;
          v383 = 0u;
          v382 = 0u;
          v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v382, v391, 16);
          if (v71)
          {
            v72 = v71;
            v73 = *(_QWORD *)v383;
            do
            {
              for (i = 0; i != v72; ++i)
              {
                if (*(_QWORD *)v383 != v73)
                  objc_enumerationMutation(v69);
                v75 = *(_QWORD *)(*((_QWORD *)&v382 + 1) + 8 * i);
                if ((objc_msgSend(v70, "containsObject:", v75) & 1) == 0)
                  objc_msgSend(v68, "addObject:", v75);
              }
              v72 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v382, v391, 16);
            }
            while (v72);
          }
        }
        v76 = v311;
        objc_msgSend(v311, "setPortTypesWithGeometricDistortionCorrectionEnabled:", v68);
        v77 = v338;
        v78 = objc_msgSend(v338, "stillImageGDCSourceMode");
        v79 = v339;
        v80 = v319;
        if ((objc_msgSend(v338, "intelligentDistortionCorrectionSupported") & 1) == 0 && !objc_msgSend(v68, "count"))
          goto LABEL_154;
        objc_msgSend(v311, "setDcProcessorVersion:", -[FigCaptureCameraParameters distortionCorrectionVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "distortionCorrectionVersion"));
        if (v78 == 2)
          v81 = objc_msgSend(v319, "depthDataDeliveryEnabled") ^ 1;
        else
          v81 = 0;
        if (v78 == 1)
          v82 = 1;
        else
          v82 = v81;
        objc_msgSend(v311, "setGdcInDCProcessorSupported:", v82);
        if (objc_msgSend(v319, "intelligentDistortionCorrectionEnabled"))
        {
          v83 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v378 = 0u;
          v379 = 0u;
          v380 = 0u;
          v381 = 0u;
          v84 = (void *)objc_msgSend(v318, "captureStreams");
          v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v378, v390, 16);
          if (v85)
          {
            v86 = v85;
            v87 = *(_QWORD *)v379;
            while (2)
            {
              for (j = 0; j != v86; ++j)
              {
                if (*(_QWORD *)v379 != v87)
                  objc_enumerationMutation(v84);
                v89 = objc_msgSend(*(id *)(*((_QWORD *)&v378 + 1) + 8 * j), "portType");
                v90 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
                v91 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v90, v338, v89, v376);
                if (v376[0])
                {
                  v285 = v297;
                  LODWORD(v282) = v376[0];
                  FigDebugAssert3();
                  v79 = v339;
                  v76 = v311;
                  v135 = v304;
                  v127 = v300;
                  goto LABEL_194;
                }
                v92 = v91;
                if (!v91)
                {
                  FigDebugAssert3();
                  goto LABEL_261;
                }
                if (objc_msgSend(v91, "intelligentDistortionCorrectionSupported"))
                  objc_msgSend(v83, "addObject:", v89);

              }
              v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v378, v390, 16);
              if (v86)
                continue;
              break;
            }
          }
          if (objc_msgSend(v83, "count"))
            v93 = (void *)objc_msgSend(v83, "copy");
          else
            v93 = 0;
          v77 = v338;
          v79 = v339;
          v76 = v311;
          v80 = v319;
          objc_msgSend(v311, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", v93);

        }
        if (objc_msgSend(v68, "count") && !objc_msgSend(v76, "gdcInDCProcessorSupported"))
        {
LABEL_261:
          v341 = -12780;
        }
        else
        {
LABEL_154:
          v125 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v79);
          if (csp_gdcExpandsImageDimensions(v125)
            && objc_msgSend(v77, "gdcInStillImageSinkPipelineSupported")
            && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v79)
            && (objc_msgSend(v316, "cinematicFramingEnabled") & 1) == 0
            && (objc_msgSend(v316, "manualCinematicFramingEnabled") & 1) == 0)
          {
            objc_msgSend(v76, "setGdcInDCProcessorOutputCropDimensions:", objc_msgSend(v77, "stillImageGDCInDCProcessorOutputCropDimensions"));
            objc_msgSend(v76, "setOutputStillImageDimensions:", objc_msgSend(v77, "soleHighResStillImageDimensions"));
          }
          if (cs_shouldEnableGreenGhostMitigation(v316))
            v126 = objc_msgSend(v77, "greenGhostMitigationVersion");
          else
            v126 = 0;
          v127 = v300;
          objc_msgSend(v76, "setGreenGhostMitigationVersion:", v126);
          if (v312)
          {
            objc_msgSend(v76, "setDemosaicedRawPixelFormat:", objc_msgSend(v77, "internalDemosaicedRawPixelFormat"));
            goto LABEL_166;
          }
          if (v328)
          {
LABEL_166:
            objc_msgSend(v76, "setRawColorCalibrationsByPortType:", v321);
            objc_msgSend(v76, "setRawLensShadingCorrectionCoefficientsByPortType:", v323);
          }
          v128 = objc_msgSend(v77, "isDeepFusionSupported");
          if (v314 > 2)
            v129 = v128;
          else
            v129 = 0;
          objc_msgSend(v76, "setDeepFusionSupported:", v129);
          objc_msgSend(v76, "setLearnedNRSupported:", objc_msgSend(v77, "isLearnedNRSupported"));
          if (objc_msgSend(v77, "isDeferredPhotoProcessingSupported"))
            v130 = objc_msgSend(v80, "deferredProcessingEnabled");
          else
            v130 = 0;
          objc_msgSend(v76, "setDeferredProcessingSupported:", v130);
          objc_msgSend(v76, "setResponsiveShutterSupported:", objc_msgSend(v77, "isResponsiveShutterSupported"));
          objc_msgSend(v76, "setResponsiveShutterEnabled:", objc_msgSend(v80, "responsiveCaptureEnabled"));
          objc_msgSend(v76, "setFastCapturePrioritizationEnabled:", objc_msgSend(v80, "fastCapturePrioritizationEnabled"));
          objc_msgSend(v76, "setCaptureTimePhotosCurationSupported:", objc_msgSend(v77, "isCaptureTimePhotoCurationSupported"));
          if (objc_msgSend(v80, "bravoConstituentPhotoDeliveryEnabled")
            && (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v316, "source"), (uint64_t)CFSTR("ConstituentPhotoCalibrationData")), "BOOLValue") & 1) == 0)
          {
            v284 = v297;
            LODWORD(v282) = 0;
            FigDebugAssert3();
          }
          if (objc_msgSend(v77, "isSIFRSupported", v282, v284))
          {
            if ((objc_msgSend(v77, "isStillImageStabilizationSupported") & 1) != 0)
              v131 = 1;
            else
              v131 = objc_msgSend(v77, "isHighPhotoQualitySupported");
          }
          else
          {
            v131 = 0;
          }
          objc_msgSend(v76, "setSifrStillImageCaptureEnabledIfAvailable:", v131);
          if (objc_msgSend(v80, "depthDataDeliveryEnabled"))
          {
            objc_msgSend(v76, "setDepthDataType:", cs_stillImageDepthDataType(v316));
            objc_msgSend(v76, "setPearlModuleType:", FigVideoCaptureSourcePearlModuleType(objc_msgSend(v316, "source"), v376));
            if (!v376[0])
            {
              objc_msgSend(v76, "setSifrStillImageCaptureEnabledIfAvailable:", objc_msgSend(v76, "sifrStillImageCaptureEnabledIfAvailable") & (objc_msgSend((id)objc_msgSend(v316, "requiredFormat"), "isSIFRStillImageCaptureWithDepthDataDisabled") ^ 1));
              goto LABEL_184;
            }
            v285 = v297;
            LODWORD(v282) = v376[0];
            FigDebugAssert3();
LABEL_386:
            v135 = v304;
          }
          else
          {
LABEL_184:
            if ((objc_msgSend(v77, "isGainMapSupported") & 1) != 0
              || objc_msgSend(v294, "gainMapSupported")
              && objc_msgSend(v80, "depthDataDeliveryEnabled"))
            {
              LODWORD(v132) = 0x40000000;
              objc_msgSend(v76, "setGainMapMainImageDownscalingFactor:", v132);
            }
            LODWORD(v132) = 2.0;
            objc_msgSend(v76, "setUbInferenceMainImageDownscalingFactor:", v132);
            objc_msgSend(v77, "defaultPortraitLightingEffectStrength");
            objc_msgSend(v76, "setAdjustablePortraitLightingEffectStrengthSupported:", 1);
            v133 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v79);
            objc_msgSend(v76, "setSupportedSemanticSegmentationMatteURNs:", cs_captureSourceGetAttribute(v133, (uint64_t)CFSTR("SupportedSemanticSegmentationMatteURNs")));
            objc_msgSend(v76, "setEnabledSemanticSegmentationMatteURNs:", objc_msgSend(v80, "enabledSemanticSegmentationMatteURNs"));
            if (objc_msgSend(v76, "depthDataType") == 2)
            {
              v134 = 1;
              v135 = v304;
              v136 = v295;
            }
            else
            {
              v135 = v304;
              v136 = v295;
              if ((objc_msgSend(v76, "deepFusionSupported") & 1) != 0)
                v134 = 1;
              else
                v134 = objc_msgSend(v76, "learnedNRSupported");
            }
            objc_msgSend(v76, "setCameraInfoByPortType:", objc_msgSend(v318, "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", v134, 0, 0));
            objc_msgSend(v76, "setMaxLossyCompressionLevel:", +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
            objc_msgSend(v76, "setHighQualityPhotoCaptureForVideoFormatEnabled:", v136);
            cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(v76, v316, (uint64_t)v79);
          }
LABEL_194:
          v341 = v376[0];
          if (!v376[0])
          {
            v392[0] = 0;
            v391[0] = 0;
            v390[0] = objc_msgSend(v76, "cameraInfoByPortType");
            *(_QWORD *)&v386 = objc_msgSend(v76, "sensorIDStringsByPortType");
            if (cs_configurePointCloudSourceForStillImageSinkPipeline(a4, objc_msgSend(v135, "sourceDeviceType"), &v340, v390, &v386, v392, v391))
            {
              objc_msgSend(v76, "setCameraInfoByPortType:", v390[0]);
              objc_msgSend(v76, "setSensorIDStringsByPortType:", (_QWORD)v386);
            }
            v137 = a7;
            v138 = objc_msgSend(*(id *)(v127 + 616), "objectForKeyedSubscript:", objc_msgSend(v79, "sourceID", v282, v285));
            v139 = v127;
            if (v138)
              v140 = *(_QWORD *)(v138 + 24);
            else
              v140 = 0;
            v141 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v140, +[FigCaptureStillImageUnifiedBracketingSinkPipeline pipelineBaseName](FigCaptureStillImageUnifiedBracketingSinkPipeline, "pipelineBaseName"));
            v142 = [FigCaptureStillImageUnifiedBracketingSinkPipeline alloc];
            v143 = v340;
            v144 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat]((uint64_t)v339), "highResStillImageDimensions");
            v145 = v392[0];
            v146 = v391[0];
            v147 = *(_QWORD *)(v139 + 672);
            if (objc_msgSend(v311, "cinematicFramingWarpingRequired"))
              v148 = -[FigCaptureCameraSourcePipeline cinematicFramingCameraStatesProvider]((uint64_t)v339);
            else
              v148 = 0;
            DerivedStorage = v139;
            v149 = -[FigCaptureStillImageUnifiedBracketingSinkPipeline initWithConfiguration:captureDevice:sourceOutputsByPortType:highResStillImageDimensions:supplementalPointCloudCaptureDevice:supplementalPointCloudSourceOutput:captureStatusDelegate:inferenceScheduler:cinematicFramingStatesProvider:graph:name:](v142, "initWithConfiguration:captureDevice:sourceOutputsByPortType:highResStillImageDimensions:supplementalPointCloudCaptureDevice:supplementalPointCloudSourceOutput:captureStatusDelegate:inferenceScheduler:cinematicFramingStatesProvider:graph:name:", v311, v307, v143, v144, v145, v146, v147, v306, v148, *(_QWORD *)(v139 + 592), v141);
            goto LABEL_399;
          }
        }
LABEL_262:
        FigDebugAssert3();
        v182 = 0;
        goto LABEL_431;
      }
    }
  }
  if (v21 != 5)
  {
    v39 = objc_alloc_init(FigCaptureStillImageSinkPipelineConfiguration);
    cs_updateStillImageSinkPipelineCommonConfiguration(v39, (uint64_t)v20, v14, v16, v18, IsCameraOrDerivative);
    -[FigCaptureStillImageSinkPipelineConfiguration setClientPID:]((uint64_t)v39, *(_DWORD *)(DerivedStorage + 16));
    -[FigCaptureStillImageSinkPipelineConfiguration setStillImageISPChromaNoiseReductionEnabled:]((uint64_t)v39, objc_msgSend(v18, "ispChromaNoiseReductionEnabled"));
    -[FigCaptureStillImageSinkPipelineConfiguration setStereoFusionSupported:]((uint64_t)v39, objc_msgSend(v18, "isStereoFusionSupported"));
    -[FigCaptureStillImageSinkPipelineConfiguration setIsIrisSupported:]((uint64_t)v39, objc_msgSend(v18, "isIrisSupported"));
    -[FigCaptureStillImageSinkPipelineConfiguration setHdrSupported:]((uint64_t)v39, objc_msgSend(v18, "isHDRSupported"));
    v311 = v39;
    -[FigCaptureStillImageSinkPipelineConfiguration setGnrHDRSupported:]((uint64_t)v39, objc_msgSend(v18, "isGNRHDRSupported"));
    if (-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v20))
      -[FigCaptureStillImageSinkPipelineConfiguration setStillImageColorInfoForFramesOriginatingFromVideoStream:](v39, newValue);
    v40 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", objc_msgSend(v20, "sourceID"));
    if (v40)
      v41 = *(_QWORD *)(v40 + 24);
    else
      v41 = 0;
    v42 = -[FigCaptureStillImageSinkPipeline initWithConfiguration:captureDevice:sourceOutputsByPortType:captureStatusDelegate:inferenceScheduler:graph:name:]([FigCaptureStillImageSinkPipeline alloc], "initWithConfiguration:captureDevice:sourceOutputsByPortType:captureStatusDelegate:inferenceScheduler:graph:name:", v39, v307, v340, *(_QWORD *)(DerivedStorage + 672), v306, *(_QWORD *)(DerivedStorage + 592), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v41, +[FigCaptureStillImageSinkPipeline pipelineBaseName](FigCaptureStillImageSinkPipeline, "pipelineBaseName")));
    goto LABEL_400;
  }
  v299 = DerivedStorage;
  v27 = objc_alloc_init(FigCapturePhotonicEngineSinkPipelineConfiguration);
  v375 = 0;
  v311 = v27;
  v28 = v20;
  cs_updateStillImageSinkPipelineCommonConfiguration(v27, (uint64_t)v20, v14, v16, v18, IsCameraOrDerivative);
  v29 = (void *)objc_msgSend(v14, "sourceConfiguration");
  v30 = a1;
  if (objc_msgSend((id)objc_msgSend(v14, "sinkConfiguration"), "sinkType") == 10)
    v31 = (void *)objc_msgSend(v14, "sinkConfiguration");
  else
    v31 = 0;
  v94 = objc_msgSend(v29, "depthDataFormat");
  v292 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v339);
  v95 = (void *)-[FigCaptureCameraSourcePipeline stillImageOutputsByPortType]((uint64_t)v339);
  v96 = (void *)-[FigCaptureCameraSourcePipeline stillImageSensorRawOutputsByPortType]((uint64_t)v339);
  v335 = v31;
  v97 = objc_msgSend(v31, "maxQualityPrioritization");
  v98 = objc_msgSend((id)objc_msgSend(v29, "requiredFormat"), "isHighPhotoQualitySupported");
  v99 = 0;
  v288 = v97;
  if (v98 && v97 >= 2)
    v99 = !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v339);
  v289 = v99;
  objc_msgSend(v311, "setRawSensorDimensions:", objc_msgSend(v18, "sensorDimensions"));
  objc_msgSend(v18, "sensorCenterOffset");
  objc_msgSend(v311, "setSensorCenterOffset:");
  v100 = (void *)objc_msgSend(v95, "allKeys");
  v322 = (void *)objc_msgSend(v96, "allKeys");
  v332 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v329 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
    v101 = objc_msgSend(v18, "sushiRawSupported");
  else
    v101 = 0;
  v102 = objc_msgSend(v335, "demosaicedRawEnabled");
  v327 = v102 | v101;
  v291 = v102;
  if ((v102 | v101) == 1)
    v313 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  else
    v313 = 0;
  v302 = v14;
  v296 = v29;
  v298 = v30;
  v290 = v22;
  v287 = (void *)v94;
  v320 = v101;
  if (v101)
    v315 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  else
    v315 = 0;
  v324 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v371 = 0u;
  v372 = 0u;
  v373 = 0u;
  v374 = 0u;
  obja = (id)objc_msgSend(v292, "captureStreams");
  v103 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v371, v392, 16);
  if (!v103)
    goto LABEL_144;
  v104 = v103;
  v105 = *(_QWORD *)v372;
  v317 = *MEMORY[0x1E0C9AE00];
  do
  {
    v106 = 0;
    do
    {
      if (*(_QWORD *)v372 != v105)
        objc_enumerationMutation(obja);
      v107 = *(void **)(*((_QWORD *)&v371 + 1) + 8 * v106);
      v108 = objc_msgSend(v107, "portType", v282, v284);
      if ((objc_msgSend(v100, "containsObject:", v108) & 1) != 0
        || objc_msgSend(v322, "containsObject:", v108))
      {
        objc_msgSend(v332, "setObject:forKeyedSubscript:", objc_msgSend(v107, "sensorIDString"), v108);
        v109 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v107, "baseZoomFactor");
        objc_msgSend(v329, "setObject:forKeyedSubscript:", objc_msgSend(v109, "numberWithFloat:"), v108);
        v110 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v28);
        v111 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(v110, v108, &v375);
        v112 = (const void *)v111;
        if (v375)
        {
          v284 = v297;
          LODWORD(v282) = v375;
        }
        else
        {
          v113 = v111;
          if (!v111)
            v113 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v28);
          v114 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v28);
          v115 = v338;
          v116 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v114, v338, v108, &v375);
          v18 = (void *)v116;
          if (!v375)
          {
            if (v116)
              v115 = (void *)v116;
            if (v327)
            {
              v370 = 0;
              v117 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
              if (v117)
              {
                v375 = v117(v113, CFSTR("WhiteBalanceCalibrations"), v317, &v370);
                if (!v375)
                  objc_msgSend(v313, "setObject:forKeyedSubscript:", BWDNGColorCalibrations(v370), v108);
              }
              else
              {
                v375 = -12782;
              }

              if (v320)
                objc_msgSend(v315, "setObject:forKeyedSubscript:", objc_msgSend(v115, "rawLensShadingCorrection"), v108);
            }
            if (+[FigCaptureSourceFormatDimensions identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:", objc_msgSend(v335, "maxPhotoDimensions"), objc_msgSend(v115, "highResStillImageDimensions")) == 2)objc_msgSend(v324, "addObject:", v108);
            v28 = v339;
            if (v112)
LABEL_134:
              CFRelease(v112);
LABEL_135:
            if (v18)
              CFRelease(v18);
            goto LABEL_137;
          }
          v284 = v297;
          LODWORD(v282) = v375;
        }
        FigDebugAssert3();
        if (v112)
          goto LABEL_134;
        goto LABEL_135;
      }
LABEL_137:
      ++v106;
    }
    while (v104 != v106);
    v118 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v371, v392, 16);
    v104 = v118;
  }
  while (v118);
LABEL_144:
  objc_msgSend(v311, "setStillImageSinkPipelineProcessingMode:", 0, v282);
  objc_msgSend(v311, "setPipelineStagePriority:", 14);
  objc_msgSend(v311, "setInferencePriority:", 14);
  v119 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v28);
  objc_msgSend(v311, "setDeviceType:", cs_captureSourceDeviceType(v119));
  v120 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v28);
  objc_msgSend(v311, "setDevicePosition:", cs_captureSourceCameraPosition(v120));
  objc_msgSend(v311, "setDeviceHasFlash:", objc_msgSend(v292, "hasFlash"));
  objc_msgSend(v311, "setSensorIDStringsByPortType:", v332);
  objc_msgSend(v311, "setBaseZoomFactorsByPortType:", v329);
  if (FigCaptureSoftISPEnabled(v296, (void *)objc_msgSend(v302, "sinkConfiguration"))
    && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v28))
  {
    objc_msgSend(v311, "setSfhrMode:", FigCaptureSFHRMode(v296));
    v123 = v338;
    v124 = v335;
    if (objc_msgSend(v338, "swfrSupported"))
      v122 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "swfrVersion");
    else
      v122 = 0;
    v121 = 1;
  }
  else
  {
    objc_msgSend(v311, "setSfhrMode:", 0);
    v121 = 0;
    v122 = 0;
    v124 = v335;
    v123 = v338;
  }
  objc_msgSend(v311, "setSwfrVersion:", v122);
  if (objc_msgSend(v124, "constantColorEnabled"))
    v150 = objc_msgSend(v123, "constantColorVersion");
  else
    v150 = 0;
  objc_msgSend(v311, "setConstantColorVersion:", v150);
  if (objc_msgSend(v124, "constantColorEnabled"))
    v151 = 0x18000000200;
  else
    v151 = 0;
  objc_msgSend(v311, "setConstantColorConfidenceMapDimensions:", v151);
  objc_msgSend(v311, "setConstantColorClippingRecoveryEnabled:", objc_msgSend(v124, "constantColorClippingRecoveryEnabled"));
  objc_msgSend(v311, "setConstantColorSaturationBoostEnabled:", objc_msgSend(v124, "constantColorSaturationBoostEnabled"));
  objc_msgSend(v311, "setRedEyeReductionVersion:", objc_msgSend(v123, "redEyeReductionVersion"));
  if (objc_msgSend(v123, "semanticRenderingSupported"))
    v152 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "semanticRenderingVersion");
  else
    v152 = 0;
  objc_msgSend(v311, "setSemanticRenderingVersion:", v152);
  if ((objc_msgSend(v124, "depthDataDeliveryEnabled") & 1) != 0)
    v153 = 0;
  else
    v153 = objc_msgSend(v123, "semanticDevelopmentVersion");
  objc_msgSend(v311, "setSemanticDevelopmentVersion:", v153);
  objc_msgSend(v311, "setSemanticStyleRenderingEnabled:", objc_msgSend(v124, "semanticStyleRenderingEnabled"));
  v154 = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "smartStyleRenderingVersion");
  if (v293)
    v155 = v154;
  else
    v155 = 0;
  objc_msgSend(v311, "setSmartStyleRenderingVersion:", v155);
  objc_msgSend(v311, "setSmartStyleReversibilityEnabled:", (int)objc_msgSend(v311, "smartStyleRenderingVersion") > 0);
  if (objc_msgSend(v311, "smartStyleRenderingVersion"))
  {
    objc_msgSend(v311, "setSmartStyleLinearThumbnailDimensions:", 0x30000000400);
    objc_msgSend(v311, "setSmartStyleStyledThumbnailDimensions:", 0xC000000100);
  }
  objc_msgSend(v311, "setGenerateInferencesForSemanticProcessingIfNeeded:", 1);
  if (objc_msgSend(v123, "isDeepZoomSupported"))
    v156 = -[FigCaptureCameraParameters deepZoomVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "deepZoomVersion");
  else
    v156 = 0;
  objc_msgSend(v311, "setDeepZoomVersion:", v156);
  objc_msgSend(v311, "setDeepZoomMode:", 0);
  v157 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v158 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnPreviewOutputsEnabled](v28);
  v159 = -[FigCaptureCameraSourcePipeline portTypesWithGeometricDistortionCorrectionOnStillImageOutputEnabled](v28);
  v160 = (_BOOL8)v28;
  v161 = v159;
  if (!-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput](v160))
  {
    v368 = 0u;
    v369 = 0u;
    v366 = 0u;
    v367 = 0u;
    v162 = objc_msgSend(v158, "countByEnumeratingWithState:objects:count:", &v366, v391, 16);
    if (v162)
    {
      v163 = v162;
      v164 = *(_QWORD *)v367;
      do
      {
        for (k = 0; k != v163; ++k)
        {
          if (*(_QWORD *)v367 != v164)
            objc_enumerationMutation(v158);
          v166 = *(_QWORD *)(*((_QWORD *)&v366 + 1) + 8 * k);
          if ((v121 | objc_msgSend(v161, "containsObject:", v166) ^ 1) == 1)
            objc_msgSend(v157, "addObject:", v166);
        }
        v163 = objc_msgSend(v158, "countByEnumeratingWithState:objects:count:", &v366, v391, 16);
      }
      while (v163);
    }
  }
  v330 = v121;
  objc_msgSend(v311, "setPortTypesWithGeometricDistortionCorrectionEnabled:", v157);
  v167 = objc_msgSend(v338, "stillImageGDCSourceMode");
  if ((objc_msgSend(v338, "intelligentDistortionCorrectionSupported") & 1) != 0 || objc_msgSend(v157, "count"))
  {
    objc_msgSend(v311, "setDcProcessorVersion:", -[FigCaptureCameraParameters distortionCorrectionVersion](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "distortionCorrectionVersion"));
    objc_msgSend(v311, "setDcProcessingWithDepthSupported:", objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v296, "source"), (uint64_t)CFSTR("DepthDataDeliveryConfigurations")), "objectForKeyedSubscript:", CFSTR("DCProcessingSupported")), "BOOLValue"));
    if (v167 == 2)
    {
      v168 = v335;
      v169 = objc_msgSend(v335, "depthDataDeliveryEnabled") ^ 1;
    }
    else
    {
      if (v167 == 3)
        v169 = v121;
      else
        v169 = 0;
      v170 = v167 == 1;
      v168 = v335;
      if (v170)
        v169 = 1;
    }
    objc_msgSend(v311, "setGdcInDCProcessorSupported:", v169);
    if (objc_msgSend(v168, "intelligentDistortionCorrectionEnabled"))
    {
      v171 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v362 = 0u;
      v363 = 0u;
      v364 = 0u;
      v365 = 0u;
      v172 = (void *)objc_msgSend(v292, "captureStreams");
      v173 = objc_msgSend(v172, "countByEnumeratingWithState:objects:count:", &v362, v390, 16);
      if (!v173)
        goto LABEL_257;
      v174 = v173;
      v175 = *(_QWORD *)v363;
      while (1)
      {
        for (m = 0; m != v174; ++m)
        {
          if (*(_QWORD *)v363 != v175)
            objc_enumerationMutation(v172);
          v177 = objc_msgSend(*(id *)(*((_QWORD *)&v362 + 1) + 8 * m), "portType");
          v178 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
          v179 = (void *)FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v178, v338, v177, &v375);
          if (v375)
          {
            v286 = v297;
            LODWORD(v283) = v375;
            FigDebugAssert3();
            v236 = v309;
            v230 = v339;
            v228 = v311;
            v237 = v299;
            goto LABEL_390;
          }
          v180 = v179;
          if (!v179)
          {
            FigDebugAssert3();
            goto LABEL_381;
          }
          if (objc_msgSend(v179, "intelligentDistortionCorrectionSupported"))
            objc_msgSend(v171, "addObject:", v177);

        }
        v174 = objc_msgSend(v172, "countByEnumeratingWithState:objects:count:", &v362, v390, 16);
        if (!v174)
        {
LABEL_257:
          if (objc_msgSend(v171, "count"))
            v181 = (void *)objc_msgSend(v171, "copy");
          else
            v181 = 0;
          objc_msgSend(v311, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", v181);

          break;
        }
      }
    }
    if (objc_msgSend(v157, "count") && !objc_msgSend(v311, "gdcInDCProcessorSupported"))
    {
LABEL_381:
      v341 = -12780;
      goto LABEL_382;
    }
  }
  v183 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
  if (csp_gdcExpandsImageDimensions(v183)
    && objc_msgSend(v338, "gdcInStillImageSinkPipelineSupported")
    && !-[FigCaptureCameraSourcePipeline stillImageOutputDerivesFromVideoCaptureOutput]((_BOOL8)v339)
    && (objc_msgSend(v296, "cinematicFramingEnabled") & 1) == 0
    && (objc_msgSend(v296, "manualCinematicFramingEnabled") & 1) == 0)
  {
    objc_msgSend(v311, "setGdcInDCProcessorOutputCropDimensions:", objc_msgSend(v338, "stillImageGDCInDCProcessorOutputCropDimensions"));
    objc_msgSend(v311, "setOutputStillImageDimensions:", objc_msgSend(v338, "soleHighResStillImageDimensions"));
  }
  if (cs_shouldEnableGreenGhostMitigation(v296))
    v184 = objc_msgSend(v338, "greenGhostMitigationVersion");
  else
    v184 = 0;
  v185 = v335;
  objc_msgSend(v311, "setGreenGhostMitigationVersion:", v184);
  if (v291)
  {
    objc_msgSend(v311, "setDemosaicedRawPixelFormat:", objc_msgSend(v338, "internalDemosaicedRawPixelFormat"));
    goto LABEL_279;
  }
  if (v320)
  {
LABEL_279:
    objc_msgSend(v311, "setRawColorCalibrationsByPortType:", v313);
    objc_msgSend(v311, "setRawLensShadingCorrectionCoefficientsByPortType:", v315);
  }
  v186 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (v335)
  {
    v187 = objc_msgSend(v338, "isDeepFusionSupported");
    if (v288 > 2)
      v188 = v187;
    else
      v188 = 0;
    objc_msgSend(v311, "setDeepFusionSupported:", v188);
    objc_msgSend(v311, "setDepthWithDeepFusionSupported:", objc_msgSend((id)objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v296, "source"), (uint64_t)CFSTR("DepthDataDeliveryConfigurations")), "objectForKeyedSubscript:", CFSTR("DeepFusionSupported")), "BOOLValue"));
    v189 = +[FigCaptureSourceFormatDimensions identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyResolutionFlavorFromDimensions:availableHighResStillImageDimensions:", objc_msgSend(v335, "maxPhotoDimensions"), objc_msgSend(v338, "highResStillImageDimensions"));
    v190 = -[FigCaptureCameraSourcePipeline ultraHighResolutionSensorRawDimensionsByPortType](v339);
    if (objc_msgSend(v335, "deferredProcessingEnabled"))
    {
      if (v189 == 2)
      {
        v360 = 0u;
        v361 = 0u;
        v358 = 0u;
        v359 = 0u;
        v191 = objc_msgSend(v324, "countByEnumeratingWithState:objects:count:", &v358, &v386, 16);
        if (v191)
        {
          v192 = v191;
          v193 = *(_QWORD *)v359;
          do
          {
            for (n = 0; n != v192; ++n)
            {
              if (*(_QWORD *)v359 != v193)
                objc_enumerationMutation(v324);
              v195 = *(_QWORD *)(*((_QWORD *)&v358 + 1) + 8 * n);
              if (!objc_msgSend(v186, "objectForKeyedSubscript:", v195))
                objc_msgSend(v186, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"), v195);
              objc_msgSend((id)objc_msgSend(v186, "objectForKeyedSubscript:", v195), "setObject:forKeyedSubscript:", objc_msgSend(v190, "objectForKeyedSubscript:", v195), &unk_1E49F9FD8);
            }
            v192 = objc_msgSend(v324, "countByEnumeratingWithState:objects:count:", &v358, &v386, 16);
          }
          while (v192);
        }
        objc_msgSend(v311, "setUltraHighResolutionProcessingEnabled:", 0);
      }
      if (v189 >= 1)
      {
        if (objc_msgSend(v311, "deepFusionSupported"))
        {
          if (objc_msgSend(v311, "clientIsCameraOrDerivative"))
          {
            v356 = 0u;
            v357 = 0u;
            v354 = 0u;
            v355 = 0u;
            v196 = (void *)objc_msgSend(v338, "highResStillImageDimensions");
            v197 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", &v354, &v382, 16);
            if (v197)
            {
              v198 = v197;
              v199 = *(_QWORD *)v355;
              do
              {
                for (ii = 0; ii != v198; ++ii)
                {
                  if (*(_QWORD *)v355 != v199)
                    objc_enumerationMutation(v196);
                  v201 = *(void **)(*((_QWORD *)&v354 + 1) + 8 * ii);
                  if (objc_msgSend(v201, "flavor") == 1)
                    objc_msgSend(v311, "setDeepFusionEnhancedResolutionDimensions:", objc_msgSend(v201, "dimensions"));
                }
                v198 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", &v354, &v382, 16);
              }
              while (v198);
            }
          }
        }
      }
    }
    else if (v189 == 2)
    {
      v352 = 0u;
      v353 = 0u;
      v350 = 0u;
      v351 = 0u;
      v202 = objc_msgSend(v324, "countByEnumeratingWithState:objects:count:", &v350, &v378, 16);
      if (v202)
      {
        v203 = v202;
        v204 = *(_QWORD *)v351;
        do
        {
          for (jj = 0; jj != v203; ++jj)
          {
            if (*(_QWORD *)v351 != v204)
              objc_enumerationMutation(v324);
            v206 = *(_QWORD *)(*((_QWORD *)&v350 + 1) + 8 * jj);
            if (!objc_msgSend(v186, "objectForKeyedSubscript:", v206))
              objc_msgSend(v186, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"), v206);
            objc_msgSend((id)objc_msgSend(v186, "objectForKeyedSubscript:", v206), "setObject:forKeyedSubscript:", objc_msgSend(v190, "objectForKeyedSubscript:", v206), &unk_1E49F9FD8);
          }
          v203 = objc_msgSend(v324, "countByEnumeratingWithState:objects:count:", &v350, &v378, 16);
        }
        while (v203);
      }
      objc_msgSend(v311, "setUltraHighResolutionProcessingEnabled:", objc_msgSend(v338, "isLearnedNRSupported"));
    }
  }
  v207 = -[FigCaptureCameraSourcePipeline zoomBasedQSubSensorRawDimensionsByPortType](v339);
  v346 = 0u;
  v347 = 0u;
  v348 = 0u;
  v349 = 0u;
  v208 = objc_msgSend(v207, "countByEnumeratingWithState:objects:count:", &v346, cf, 16);
  if (v208)
  {
    v209 = v208;
    v210 = *(_QWORD *)v347;
    v211 = *MEMORY[0x1E0D05A28];
    do
    {
      for (kk = 0; kk != v209; ++kk)
      {
        if (*(_QWORD *)v347 != v210)
          objc_enumerationMutation(v207);
        v213 = *(void **)(*((_QWORD *)&v346 + 1) + 8 * kk);
        objc_msgSend(v213, "isEqualToString:", v211);
        if (!objc_msgSend(v186, "objectForKeyedSubscript:", v213))
          objc_msgSend(v186, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"), v213);
        objc_msgSend((id)objc_msgSend(v186, "objectForKeyedSubscript:", v213), "setObject:forKeyedSubscript:", objc_msgSend(v207, "objectForKeyedSubscript:", v213), &unk_1E49FA020);
      }
      v209 = objc_msgSend(v207, "countByEnumeratingWithState:objects:count:", &v346, cf, 16);
    }
    while (v209);
  }
  if (!objc_msgSend(v335, "digitalFlashCaptureEnabled"))
  {
LABEL_346:
    if (objc_msgSend(v186, "count"))
      v227 = v186;
    else
      v227 = 0;
    v228 = v311;
    objc_msgSend(v311, "setDimensionsByQSubResolutionFlavorByPortType:", v227);
    objc_msgSend(v311, "setLearnedNRSupported:", objc_msgSend(v338, "isLearnedNRSupported"));
    if (objc_msgSend(v338, "isDeferredPhotoProcessingSupported"))
      v229 = objc_msgSend(v185, "deferredProcessingEnabled");
    else
      v229 = 0;
    v230 = v339;
    objc_msgSend(v311, "setDeferredProcessingSupported:", v229);
    objc_msgSend(v311, "setResponsiveShutterSupported:", objc_msgSend(v338, "isResponsiveShutterSupported"));
    objc_msgSend(v311, "setResponsiveShutterEnabled:", objc_msgSend(v185, "responsiveCaptureEnabled"));
    objc_msgSend(v311, "setFastCapturePrioritizationEnabled:", objc_msgSend(v185, "fastCapturePrioritizationEnabled"));
    objc_msgSend(v311, "setCaptureTimePhotosCurationSupported:", objc_msgSend(v338, "isCaptureTimePhotoCurationSupported"));
    if (objc_msgSend(v185, "bravoConstituentPhotoDeliveryEnabled")
      && (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v296, "source"), (uint64_t)CFSTR("ConstituentPhotoCalibrationData")), "BOOLValue") & 1) == 0)
    {
      v284 = v297;
      LODWORD(v283) = 0;
      FigDebugAssert3();
    }
    if (objc_msgSend(v338, "isSIFRSupported", v283, v284))
    {
      if ((objc_msgSend(v338, "isStillImageStabilizationSupported") & 1) != 0)
        v231 = 1;
      else
        v231 = objc_msgSend(v338, "isHighPhotoQualitySupported");
    }
    else
    {
      v231 = 0;
    }
    objc_msgSend(v311, "setSifrStillImageCaptureEnabledIfAvailable:", v231);
    if (objc_msgSend(v185, "depthDataDeliveryEnabled"))
    {
      objc_msgSend(v311, "setDepthDataType:", cs_stillImageDepthDataType(v296));
      objc_msgSend(v311, "setPearlModuleType:", FigVideoCaptureSourcePearlModuleType(objc_msgSend(v296, "source"), &v375));
      if (v375)
      {
        v286 = v297;
        LODWORD(v283) = v375;
        FigDebugAssert3();
        v236 = v309;
        v237 = v299;
        goto LABEL_390;
      }
      objc_msgSend(v311, "setSifrStillImageCaptureEnabledIfAvailable:", objc_msgSend(v311, "sifrStillImageCaptureEnabledIfAvailable") & (objc_msgSend((id)objc_msgSend(v296, "requiredFormat"), "isSIFRStillImageCaptureWithDepthDataDisabled") ^ 1));
      objc_msgSend(v338, "maxContinuousZoomFactorForDepthDataDelivery");
      objc_msgSend(v311, "setContinuousZoomWithDepthSupported:", v232 != 0.0);
    }
    if ((objc_msgSend(v338, "isGainMapSupported") & 1) != 0
      || objc_msgSend(v287, "gainMapSupported")
      && objc_msgSend(v185, "depthDataDeliveryEnabled"))
    {
      LODWORD(v233) = 0x40000000;
      objc_msgSend(v311, "setGainMapMainImageDownscalingFactor:", v233);
    }
    LODWORD(v233) = 2.0;
    objc_msgSend(v311, "setUbInferenceMainImageDownscalingFactor:", v233);
    objc_msgSend(v338, "defaultPortraitLightingEffectStrength");
    objc_msgSend(v311, "setAdjustablePortraitLightingEffectStrengthSupported:", 1);
    v234 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
    objc_msgSend(v311, "setSupportedSemanticSegmentationMatteURNs:", cs_captureSourceGetAttribute(v234, (uint64_t)CFSTR("SupportedSemanticSegmentationMatteURNs")));
    objc_msgSend(v311, "setEnabledSemanticSegmentationMatteURNs:", objc_msgSend(v185, "enabledSemanticSegmentationMatteURNs"));
    objc_msgSend(v311, "setSoftISPSupported:", v330);
    if (v330)
    {
      objc_msgSend(v311, "setSensorRawPixelFormat:", objc_msgSend(v292, "sensorRawPixelFormat"));
      objc_msgSend(v311, "setQuadraProcessingSupportEnabled:", objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v296, "source"), 0x1E4952958), "BOOLValue"));
    }
    objc_msgSend(v311, "setStillImageGDCSourceMode:", objc_msgSend((id)objc_msgSend(v296, "requiredFormat"), "stillImageGDCSourceMode"));
    if (objc_msgSend(v311, "depthDataType") != 8 || objc_msgSend(v311, "softISPSupported"))
    {
      v228 = v311;
      if (objc_msgSend(v311, "depthDataType") == 2)
      {
        v235 = 1;
        v236 = v309;
        v237 = v299;
        v230 = v339;
        v238 = v296;
      }
      else
      {
        v237 = v299;
        v230 = v339;
        v238 = v296;
        if (objc_msgSend(v311, "depthDataType") == 8)
        {
          v235 = 1;
          v236 = v309;
        }
        else
        {
          v236 = v309;
          if ((objc_msgSend(v311, "deepFusionSupported") & 1) != 0
            || (objc_msgSend(v311, "learnedNRSupported") & 1) != 0)
          {
            v235 = 1;
          }
          else
          {
            v235 = objc_msgSend(v311, "softISPSupported");
          }
        }
      }
      objc_msgSend(v311, "setCameraInfoByPortType:", objc_msgSend(v292, "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", v235, objc_msgSend(v311, "softISPSupported"), objc_msgSend(v311, "softISPSupported")));
      objc_msgSend(v311, "setModuleCalibrationByPortType:", objc_msgSend(v292, "moduleCalibrationByPortType"));
      objc_msgSend(v311, "setMaxLossyCompressionLevel:", +[FigCaptureCameraParameters stillImageMaxLossyCompressionLevel](FigCaptureCameraParameters, "stillImageMaxLossyCompressionLevel"));
      objc_msgSend(v311, "setHighQualityPhotoCaptureForVideoFormatEnabled:", v289);
      cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(v311, v238, (uint64_t)v230);
      goto LABEL_390;
    }
    goto LABEL_381;
  }
  v214 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v342 = 0u;
  v343 = 0u;
  v344 = 0u;
  v345 = 0u;
  v333 = (id)objc_msgSend(v292, "captureStreams");
  v215 = objc_msgSend(v333, "countByEnumeratingWithState:objects:count:", &v342, v376, 16);
  if (!v215)
    goto LABEL_342;
  v216 = v215;
  v217 = *(_QWORD *)v343;
LABEL_332:
  v218 = 0;
  while (1)
  {
    if (*(_QWORD *)v343 != v217)
      objc_enumerationMutation(v333);
    v219 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v342 + 1) + 8 * v218), "portType");
    v220 = -[FigCaptureCameraSourcePipeline captureSource]((uint64_t)v339);
    v221 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v220, v338, (uint64_t)v219, &v375);
    if (v375)
      break;
    v223 = (void *)v221;
    if (!v221)
      goto LABEL_381;
    v224 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("rawNightMode.enabled.%@"), objc_msgSend((id)BWPortTypeToDisplayString(v219, v222), "lowercaseString"));
    v225 = (void *)CFPreferencesCopyAppValue(v224, CFSTR("com.apple.coremedia"));
    if ((objc_msgSend(v225, "BOOLValue") & 1) != 0
      || objc_msgSend(v223, "isDigitalFlashRawNightModeSupported"))
    {
      objc_msgSend(v214, "addObject:", v219);
    }

    if (v216 == ++v218)
    {
      v216 = objc_msgSend(v333, "countByEnumeratingWithState:objects:count:", &v342, v376, 16);
      if (!v216)
      {
LABEL_342:
        if (objc_msgSend(v214, "count"))
          v226 = (id)objc_msgSend(v214, "copy");
        else
          v226 = 0;
        v185 = v335;
        objc_msgSend(v311, "setPortTypesWithRawNightModeEnabled:", v226);
        goto LABEL_346;
      }
      goto LABEL_332;
    }
  }
  v286 = v297;
  LODWORD(v283) = v375;
  FigDebugAssert3();
  v236 = v309;
  v237 = v299;
  v230 = v339;
  v228 = v311;
LABEL_390:
  v341 = v375;
  if (v375)
  {
LABEL_382:
    FigDebugAssert3();
    v182 = 0;
    a7 = v309;
    goto LABEL_431;
  }
  v392[0] = 0;
  v391[0] = 0;
  v390[0] = objc_msgSend(v228, "cameraInfoByPortType");
  *(_QWORD *)&v386 = objc_msgSend(v228, "sensorIDStringsByPortType");
  if (cs_configurePointCloudSourceForStillImageSinkPipeline(a4, objc_msgSend(v304, "sourceDeviceType"), &v340, v390, &v386, v392, v391))
  {
    objc_msgSend(v228, "setCameraInfoByPortType:", v390[0]);
    objc_msgSend(v228, "setSensorIDStringsByPortType:", (_QWORD)v386);
  }
  v137 = v236;
  v239 = objc_msgSend(*(id *)(v237 + 616), "objectForKeyedSubscript:", objc_msgSend(v230, "sourceID", v283, v286));
  v240 = v237;
  if (v239)
    v241 = *(_QWORD *)(v239 + 24);
  else
    v241 = 0;
  v242 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), v241, +[FigCapturePhotonicEngineSinkPipeline pipelineBaseName](FigCapturePhotonicEngineSinkPipeline, "pipelineBaseName"));
  v243 = [FigCapturePhotonicEngineSinkPipeline alloc];
  v244 = v340;
  v245 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat]((uint64_t)v339), "highResStillImageDimensions");
  v246 = v392[0];
  v247 = v391[0];
  v248 = *(_QWORD *)(v240 + 672);
  if (objc_msgSend(v311, "cinematicFramingWarpingRequired"))
    v249 = -[FigCaptureCameraSourcePipeline cinematicFramingCameraStatesProvider]((uint64_t)v339);
  else
    v249 = 0;
  DerivedStorage = v240;
  v149 = -[FigCapturePhotonicEngineSinkPipeline initWithConfiguration:captureDevice:sourceOutputsByPortType:sourceSensorRawOutputsByPortType:highResStillImageDimensions:supplementalPointCloudCaptureDevice:supplementalPointCloudSourceOutput:captureStatusDelegate:inferenceScheduler:cinematicFramingStatesProvider:graph:name:](v243, "initWithConfiguration:captureDevice:sourceOutputsByPortType:sourceSensorRawOutputsByPortType:highResStillImageDimensions:supplementalPointCloudCaptureDevice:supplementalPointCloudSourceOutput:captureStatusDelegate:inferenceScheduler:cinematicFramingStatesProvider:graph:name:", v311, v307, v244, v290, v245, v246, v247, v248, v306, v249, *(_QWORD *)(v240 + 592), v242);
LABEL_399:
  v42 = v149;
  v18 = v338;
  v14 = v302;
  a7 = v137;
  a1 = v298;
LABEL_400:
  if (!v42)
  {
    FigDebugAssert3();
    v182 = 0;
    v341 = FigSignalErrorAt();
    goto LABEL_431;
  }
  v250 = -[FigCaptureStillImageSinkPipeline stillImageCoordinatorNode](v42, "stillImageCoordinatorNode");
  -[FigCaptureStillImageSinkPipeline compressedShotBufferNode](v42, "compressedShotBufferNode");
  v251 = objc_alloc_init(BWStillImageSampleBufferSinkNodeAnalyticsConfiguration);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatDimensionWidth:](v251, "setFormatDimensionWidth:", objc_msgSend(v18, "dimensions"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatDimensionHeight:](v251, "setFormatDimensionHeight:", (unint64_t)objc_msgSend(v18, "dimensions") >> 32);
  objc_msgSend(v18, "maxSupportedFrameRate");
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFormatMaxFrameRate:](v251, "setFormatMaxFrameRate:");
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsHighQualityPhotoWithVideoFormatSupported:](v251, "setIsHighQualityPhotoWithVideoFormatSupported:", objc_msgSend(v18, "isHighPhotoQualitySupported"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsPhotoFormat:](v251, "setIsPhotoFormat:", objc_msgSend(v18, "isPhotoFormat"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsTimeLapse:](v251, "setIsTimeLapse:", v310);
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setPixelFormat:](v251, "setPixelFormat:", objc_msgSend(v18, "format"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setBinned:](v251, "setBinned:", objc_msgSend(v18, "isBinned"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsSemanticStyleRenderingSupported:](v251, "setIsSemanticStyleRenderingSupported:", objc_msgSend(v18, "isSemanticStyleRenderingSupported"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setIsSmartStyleRenderingSupported:](v251, "setIsSmartStyleRenderingSupported:", objc_msgSend(v18, "isSmartStyleRenderingSupported"));
  -[BWStillImageSampleBufferSinkNodeAnalyticsConfiguration setFastCapturePrioritizationEnabled:](v251, "setFastCapturePrioritizationEnabled:", -[BWStillImageCoordinatorNode fastCapturePrioritizationEnabled](v250, "fastCapturePrioritizationEnabled"));
  v252 = -[FigCaptureStillImageSinkPipeline stillImageSinkNode](v42, "stillImageSinkNode");
  v253 = (void *)objc_msgSend(v311, "sinkConfiguration");
  v254 = v14;
  v255 = objc_msgSend(v18, "isCaptureTimePhotoCurationSupported");
  v336 = v42;
  v256 = (id *)DerivedStorage;
  v257 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 624);
  v258 = objc_msgSend(v253, "sinkID");
  if (objc_msgSend(v253, "sinkType") != 10)
    v253 = 0;
  -[BWStillImageSampleBufferSinkNode setStillImageCapturePipeliningMode:](v252, "setStillImageCapturePipeliningMode:", -[BWStillImageCoordinatorNode stillImageCapturePipeliningMode](v250, "stillImageCapturePipeliningMode"));
  -[BWStillImageSampleBufferSinkNode setDeferredPhotoProcessorEnabled:](v252, "setDeferredPhotoProcessorEnabled:", 0);
  -[BWStillImageSampleBufferSinkNode setClientIsCameraOrDerivative:](v252, "setClientIsCameraOrDerivative:", captureSession_clientIsCameraOrDerivative(a1));
  v259 = v255;
  v260 = v254;
  -[BWStillImageSampleBufferSinkNode setCaptureTimePhotosCurationSupported:](v252, "setCaptureTimePhotosCurationSupported:", v259);
  -[BWStillImageSampleBufferSinkNode setFocusPixelBlurScoreEnabled:](v252, "setFocusPixelBlurScoreEnabled:", objc_msgSend(v253, "focusPixelBlurScoreEnabled"));
  v392[0] = MEMORY[0x1E0C809B0];
  v392[1] = 3221225472;
  v392[2] = (uint64_t)__captureSession_configureStillImageSinkNode_block_invoke;
  v392[3] = (uint64_t)&unk_1E4922F60;
  v392[4] = v257;
  v392[5] = v258;
  v261 = v256;
  v262 = v310;
  v392[6] = (uint64_t)v250;
  v392[7] = a1;
  v263 = v336;
  -[BWStillImageSampleBufferSinkNode setSampleBufferAvailableHandler:](v252, "setSampleBufferAvailableHandler:", v392);
  -[BWStillImageSampleBufferSinkNode setAnalyticsConfiguration:](v252, "setAnalyticsConfiguration:", v251);
  v264 = objc_alloc_init(FigCapturePixelConverter);
  v265 = (FigCaptureSessionPreparedBracket *)objc_msgSend(v261[61], "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(v254, "sinkConfiguration"), "sinkID"));
  if (!v265)
  {
    if (objc_msgSend((id)objc_msgSend(v254, "sinkConfiguration"), "sinkType") == 3)
      v265 = objc_alloc_init(FigCaptureSessionPreparedBracket);
    else
      v265 = 0;
    v262 = v310;
  }
  if (objc_msgSend((id)objc_msgSend(v254, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled"))
    v266 = 0.90909;
  else
    v266 = 0.0;
  v267 = [FigCaptureStillImageSinkPipelineSessionStorage alloc];
  v268 = objc_msgSend(v305, "imageQueueSinkNode");
  *(float *)&v269 = v266;
  v182 = -[FigCaptureStillImageSinkPipelineSessionStorage initWithStillImageSinkPipeline:cameraSourcePipeline:previewSinkNode:pixelConverter:colorInfo:stillImagesAreOptimizedForOfflineVideoStabilization:videoStabilizationOverscanCropMultiplier:preparedBracket:stillImageConnectionConfiguration:](v267, "initWithStillImageSinkPipeline:cameraSourcePipeline:previewSinkNode:pixelConverter:colorInfo:stillImagesAreOptimizedForOfflineVideoStabilization:videoStabilizationOverscanCropMultiplier:preparedBracket:stillImageConnectionConfiguration:", v336, v339, v268, v264, newValue, v262, v269, v265, v254);
  a7 = v309;
  if (!v182)
  {
    FigDebugAssert3();
    v341 = -12786;
    goto LABEL_431;
  }
  if (objc_msgSend((id)objc_msgSend(v260, "sinkConfiguration"), "sinkType") == 10)
  {
    v270 = (void *)objc_msgSend(v261[56], "objectForKeyedSubscript:", -[FigCaptureSinkPipeline sinkID](v336, "sinkID"));
    if (objc_msgSend(v270, "processedOutputFormat")
      && objc_msgSend(v270, "processedOutputFormat") != 1785750887
      && objc_msgSend(v270, "processedOutputFormat") != 1752589105
      && objc_msgSend(v270, "processedOutputFormat") != 1635148593)
    {
      v301 = v261;
      v337 = stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(v182, (void *)objc_msgSend(v270, "figCaptureStillImageSettingsRepresentation"));
      v271 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", objc_msgSend(v307, "supportsWideColor"), cs_figCaptureColorSpaceFromSourcePipeline((uint64_t)v339), objc_msgSend(v338, "format"), objc_msgSend(v338, "dimensions"), objc_msgSend(v270, "processedOutputFormat"));
      if (objc_msgSend(v270, "bracketedImageCount"))
        v272 = objc_msgSend(v270, "bracketedImageCount");
      else
        v272 = 1;
      if (objc_msgSend((id)objc_msgSend(v270, "bravoConstituentImageDeliveryDeviceTypes"), "count"))
        v272 = v272
             * objc_msgSend((id)objc_msgSend(v270, "bravoConstituentImageDeliveryDeviceTypes"), "count");
      v341 = -[FigCapturePixelConverter updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:](v264, "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", objc_msgSend(v270, "processedOutputFormat"), v337, v272, v271, (_DWORD)v271 != 0);
      v261 = v301;
    }
    v278 = -[FigCaptureSinkPipeline sinkID](v263, "sinkID");
    v279 = objc_msgSend(v270, "settingsID");
    v280 = (void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(v278, v279, v341);

    v261[57] = v280;
  }
  else
  {
    v273 = -[FigCaptureSessionPreparedBracket outputFormat](-[FigCaptureStillImageSinkPipelineSessionStorage preparedBracket](v182, "preparedBracket"), "outputFormat");
    v274 = v273;
    if ((int)v273 > 1752589104)
    {
      if ((_DWORD)v273 == 1752589105)
        goto LABEL_431;
      v275 = 1785750887;
    }
    else
    {
      if (!(_DWORD)v273)
        goto LABEL_431;
      v275 = 1635148593;
    }
    if ((_DWORD)v273 != v275)
    {
      v276 = -[FigCaptureSessionPreparedBracket imageCount](-[FigCaptureStillImageSinkPipelineSessionStorage preparedBracket](v182, "preparedBracket"), "imageCount");
      v277 = -[FigCaptureSessionPreparedBracket colorSpaceProperties](-[FigCaptureStillImageSinkPipelineSessionStorage preparedBracket](v182, "preparedBracket"), "colorSpaceProperties");
      -[FigCapturePixelConverter updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:](v264, "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", v274, -[FigCaptureSessionPreparedBracket outputDimensions](-[FigCaptureStillImageSinkPipelineSessionStorage preparedBracket](v182, "preparedBracket"), "outputDimensions"), v276, v277, (_DWORD)v277 != 0);
    }
  }
LABEL_431:
  *a7 = v341;
  return v182;
}

uint64_t cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v4 = result;
    v5 = (void *)MEMORY[0x1E0C99D80];
    if (a2)
    {
      v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a2);
      if ((_DWORD)a3)
        v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
      else
        v7 = 0;
      return objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", v4, CFSTR("SectionID"), v6, CFSTR("SettingsID"), v7, CFSTR("ErrorStatus"), 0);
    }
    else
    {
      if ((_DWORD)a3)
        v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
      else
        v8 = 0;
      return objc_msgSend(v5, "dictionaryWithObjectsAndKeys:", v4, CFSTR("SectionID"), v8, CFSTR("ErrorStatus"), 0, v9, v10);
    }
  }
  return result;
}

BOOL cs_configurePointCloudSourceForStillImageSinkPipeline(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a1)
  {
    v14 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput](a1);
    if (a2 == 13)
    {
      v15 = (_QWORD *)MEMORY[0x1E0D05A20];
      if (a3)
      {
        v16 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *a3);
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v14, *v15);
        *a3 = (id)objc_msgSend(v16, "copy");
      }
      if (a4)
      {
        v17 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *a4);
        objc_msgSend(v17, "addEntriesFromDictionary:", objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a1), "cameraInfoByPortType"));
        *a4 = (id)objc_msgSend(v17, "copy");
      }
      if (a5)
      {
        v18 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *a5);
        objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a1), "captureStream"), "sensorIDString"), *v15);
        *a5 = v18;
      }
    }
    else
    {
      if (a6)
        *a6 = -[FigCaptureCameraSourcePipeline captureDevice](a1);
      if (a7)
        *a7 = v14;
    }
  }
  return a1 != 0;
}

BOOL FigCaptureSushiRawDNGDictionaryCreatedInGraph()
{
  return (int)FigCapturePlatformIdentifier() > 6;
}

_BYTE *BWSmartCameraSceneUpdateResetTemporalHysteresisAndFiltering(_BYTE *result)
{
  if (*result)
    result[26] = 1;
  return result;
}

id FigCaptureBuildSceneClassifierPipeline(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, BWSceneClassifierSinkNode **a12)
{
  void *v20;
  uint64_t v21;
  BWInferenceNode *v22;
  BWInferenceNode *v23;
  BWNodeOutput *v24;
  BWFanOutNode *v25;
  BWSceneClassifierSinkNode *v26;
  id result;
  id v28;

  v28 = 0;
  if (a10)
    v20 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  else
    v20 = 0;
  v21 = a3 & 0xFFFFFFFFFFFFLL;
  v22 = FigCaptureCreateAndConfigureSmartCameraInferenceNode(a4, v21, a8, a9);
  if (!v22)
  {
    fig_log_get_emitter();
LABEL_21:
    FigDebugAssert3();
    goto LABEL_16;
  }
  v23 = v22;
  if ((objc_msgSend(a1, "addNode:error:", v22, &v28) & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", a2, -[BWNode input](v23, "input"), a5) & 1) == 0)
  {
    goto LABEL_20;
  }
  objc_msgSend(v20, "addObject:", objc_msgSend(a2, "connection"));
  v24 = -[BWNode output](v23, "output");
  if (a6)
  {
    v25 = -[BWFanOutNode initWithFanOutCount:mediaType:]([BWFanOutNode alloc], "initWithFanOutCount:mediaType:", 2, 1986618469);
    -[BWNode setName:](v25, "setName:", CFSTR("Post Smart Camera Inferences Fan Out"));
    if ((objc_msgSend(a1, "addNode:error:", v25, &v28) & 1) == 0
      || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", v24, -[BWNode input](v25, "input"), a5) & 1) == 0)
    {
      goto LABEL_20;
    }
    objc_msgSend(v20, "addObject:", -[BWNodeOutput connection](v24, "connection"));
    v24 = -[NSArray objectAtIndexedSubscript:](-[BWNode outputs](v25, "outputs"), "objectAtIndexedSubscript:", 0);
    if (a11)
      *a11 = -[NSArray objectAtIndexedSubscript:](-[BWNode outputs](v25, "outputs"), "objectAtIndexedSubscript:", 1);
  }
  v26 = -[BWSceneClassifierSinkNode initWithCaptureDevice:version:semanticStyleSceneDetectionEnabled:sinkID:]([BWSceneClassifierSinkNode alloc], "initWithCaptureDevice:version:semanticStyleSceneDetectionEnabled:sinkID:", a8, v21, a7, objc_msgSend(a1, "sinkID"));
  if ((objc_msgSend(a1, "addNode:error:", v26, &v28) & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", v24, -[BWNode input](v26, "input"), a5) & 1) == 0)
  {
LABEL_20:
    fig_log_get_emitter();
    goto LABEL_21;
  }
  *a12 = v26;
  objc_msgSend(v20, "addObject:", -[BWNodeOutput connection](v24, "connection"));
  objc_msgSend((id)objc_msgSend(a1, "graph"), "enableConcurrentPrepareForNode:", v26);
  if (a10)
    *a10 = v20;
LABEL_16:
  result = v28;
  if (v28)
    return (id)objc_msgSend(v28, "code");
  return result;
}

uint64_t BWSmartCameraSceneInitialize(uint64_t result, char a2, __int16 a3, __int16 a4, uint64_t a5, float a6, float a7, float a8)
{
  *(_BYTE *)result = a2;
  *(_BYTE *)(result + 1) = 0;
  *(float *)(result + 4) = a8;
  *(_DWORD *)(result + 8) = 2143289344;
  *(float *)(result + 12) = a6;
  *(float *)(result + 16) = a7;
  *(_WORD *)(result + 20) = a3;
  *(_WORD *)(result + 22) = a4;
  *(_WORD *)(result + 24) = 0;
  *(_BYTE *)(result + 26) = 0;
  *(_QWORD *)(result + 32) = a5;
  return result;
}

BWInferenceNode *FigCaptureCreateAndConfigureSmartCameraInferenceNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BWInferenceNode *v5;
  BWInferenceConfiguration *v6;
  double v7;

  v5 = -[BWInferenceNode initWithConvEngineSupportWithCaptureDevice:scheduler:priority:]([BWInferenceNode alloc], "initWithConvEngineSupportWithCaptureDevice:scheduler:priority:", a3, a4, a1);
  -[BWNode setName:](v5, "setName:", CFSTR("Smart Camera Inference Node"));
  v6 = -[BWInferenceConfiguration initWithInferenceType:]([BWInferenceConfiguration alloc], "initWithInferenceType:", 101);
  LODWORD(v7) = 5.0;
  -[BWInferenceConfiguration setMaximumFramesPerSecond:](v6, "setMaximumFramesPerSecond:", v7);
  if (-[BWInferenceNode addInferenceOfType:version:configuration:](v5, "addInferenceOfType:version:configuration:", 101, a2 & 0xFFFFFFFFFFFFLL, v6))
  {
    return 0;
  }
  -[BWInferenceNode setApplyRecommendedMasterPortType:](v5, "setApplyRecommendedMasterPortType:", 1);
  return v5;
}

void *BWInferenceSmartCameraOutputs(unsigned __int16 a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[7];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 4);
  if (a1 >= 5uLL)
  {
    v3 = *MEMORY[0x1E0D07928];
    v12[0] = *MEMORY[0x1E0D07920];
    v12[1] = v3;
    v4 = *MEMORY[0x1E0D07958];
    v12[2] = *MEMORY[0x1E0D07940];
    v12[3] = v4;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 4), CFSTR("semdev/probabilities"));
    v11 = *MEMORY[0x1E0D07960];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1), CFSTR("text/probabilities"));
    v10 = *MEMORY[0x1E0D07968];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1), CFSTR("water/probabilities"));
    v5 = *MEMORY[0x1E0D07910];
    v9[0] = *MEMORY[0x1E0D07908];
    v9[1] = v5;
    v6 = *MEMORY[0x1E0D07930];
    v9[2] = *MEMORY[0x1E0D07918];
    v9[3] = v6;
    v7 = *MEMORY[0x1E0D07948];
    v9[4] = *MEMORY[0x1E0D07938];
    v9[5] = v7;
    v9[6] = *MEMORY[0x1E0D07950];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 7), CFSTR("leaf/probabilities"));
  }
  return v2;
}

BOOL FigCapturePlatformSupportsExclaves()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformID == 10 && sPlatformVariant == 3;
}

void sub_1A2D52B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t portIndexFromPortType(const void *a1, int *a2)
{
  int v4;

  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A18]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A30]))
    {
      v4 = 1;
LABEL_17:
      *a2 = v4;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A28]))
    {
      v4 = 2;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A38]))
    {
      v4 = 3;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A50]))
    {
      v4 = 4;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A40]))
    {
      v4 = 5;
      goto LABEL_17;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A20]))
    {
      v4 = 6;
      goto LABEL_17;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t FigMotionGetMotionDataFromISP(CFDictionaryRef theDict, float64x2_t *a2, uint64_t a3, int a4, int *a5, float32x2_t *a6, uint64_t a7, int a8, int *a9)
{
  const __CFData *Value;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float64x2_t *v23;
  float32x2_t v24;
  float v25;
  uint64_t v26;
  float32x2_t v27;
  int64_t v28;
  int *v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  float v33;
  uint64_t ISPHallData;
  const __CFData *v35;
  int v37;
  float32x2_t *v38;
  float64x2_t v39;
  CMTime time;
  const UInt8 *v41;

  if (theDict)
  {
    if (a2 && a5)
    {
      Value = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06B68]);
      if (Value)
      {
        v38 = a6;
        v41 = 0;
        v18 = FigMotionISPMotionDataFromCFData(Value, &v41);
        if ((_DWORD)v18)
        {
          ISPHallData = v18;
          fig_log_get_emitter();
          FigDebugAssert3();
          fig_log_get_emitter();
          goto LABEL_28;
        }
        LODWORD(v20) = *((_DWORD *)v41 + 1);
        if ((int)v20 >= a4)
          LODWORD(v20) = a4;
        *a5 = v20;
        if ((int)v20 < 1)
        {
          v24 = 0;
          v25 = 0.0;
        }
        else
        {
          v37 = a8;
          v21 = 0;
          v22 = (float *)(a3 + 8);
          v23 = a2 + 1;
          v24 = 0;
          v25 = 0.0;
          v26 = 44;
          v39 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
          v27 = (float32x2_t)vdup_n_s32(0x37800000u);
          do
          {
            v28 = FigHostTimeToNanoseconds();
            CMTimeMake(&time, v28, 1000000000);
            v23[-1].f64[1] = CMTimeGetSeconds(&time);
            v29 = (int *)&v41[v26];
            v30 = *(_QWORD *)&v41[v26 - 24];
            v31.i64[0] = (int)v30;
            v31.i64[1] = SHIDWORD(v30);
            *v23 = vmulq_f64(vcvtq_f64_s64(v31), v39);
            v32 = *((_QWORD *)v29 - 2);
            v31.i64[0] = (int)v32;
            v31.i64[1] = SHIDWORD(v32);
            v23[1] = vmulq_f64(vcvtq_f64_s64(v31), v39);
            v19 = (int32x2_t)vmul_f32(vcvt_f32_s32(*(int32x2_t *)(v29 - 2)), v27);
            v33 = (float)*v29 * 0.000015259;
            if (a3)
            {
              *((int32x2_t *)v22 - 1) = v19;
              *v22 = v33;
            }
            v24 = vadd_f32(v24, (float32x2_t)v19);
            v25 = v25 + v33;
            ++v21;
            v20 = *a5;
            v22 += 3;
            v23 += 3;
            v26 += 40;
          }
          while (v21 < v20);
          a8 = v37;
        }
        if (v38 && (_DWORD)v20)
        {
          *(float *)v19.i32 = (float)(int)v20;
          *v38 = vdiv_f32(v24, (float32x2_t)vdup_lane_s32(v19, 0));
          v38[1].f32[0] = v25 / (float)(int)v20;
        }
      }
      else
      {
        *a5 = 0;
      }
    }
    ISPHallData = 0;
    if (!a7 || !a9)
      return ISPHallData;
    v35 = (const __CFData *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06B50]);
    if (v35)
    {
      ISPHallData = FigMotionGetISPHallData(v35, a7, a9, a8);
      if ((_DWORD)ISPHallData)
      {
        fig_log_get_emitter();
LABEL_28:
        FigDebugAssert3();
      }
    }
    else
    {
      ISPHallData = 0;
      *a9 = 0;
    }
    return ISPHallData;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionISPMotionDataFromCFData(const __CFData *a1, const UInt8 **a2)
{
  unint64_t Length;
  unint64_t v5;
  const UInt8 *BytePtr;

  if (a2
    && (Length = CFDataGetLength(a1), Length > 7)
    && (v5 = Length, (BytePtr = CFDataGetBytePtr(a1)) != 0)
    && v5 == 40 * *((int *)BytePtr + 1) + 8
    && !*(_DWORD *)BytePtr)
  {
    *a2 = BytePtr;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionAdjustPointForSphereMovement(uint64_t a1, float64x2_t *a2, float a3, float a4)
{
  uint64_t v7;

  if (a1)
  {
    v7 = FigMotionComputeAverageSpherePosition();
    if ((_DWORD)v7)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      *a2 = vaddq_f64(*a2, vcvtq_f64_f32(vmul_n_f32(0, a3 * a4)));
    }
    return v7;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeAverageSpherePosition()
{
  const __CFDictionary *v0;
  float32x2_t *v1;
  float32x2_t *v2;
  double v3;
  double v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  int v8;
  double v9;
  const __CFData *v10;
  uint64_t ISPHallData;
  unsigned int v12;
  unint64_t v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  unsigned int v20;
  uint64_t v21;
  double valuePtr;
  int v24;
  unsigned int v25;
  double v26[1531];

  v0 = (const __CFDictionary *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v26[1530] = *(double *)MEMORY[0x1E0C80C00];
  v24 = 0;
  valuePtr = 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E0D06A20]);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberFloat64Type, &valuePtr);
    v7 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06AC0]);
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt32Type, &v24);
      v8 = v24;
      v9 = valuePtr;
      *v2 = 0;
      v25 = 0;
      *v2 = 0;
      v10 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06B50]);
      if (v10)
      {
        ISPHallData = FigMotionGetISPHallData(v10, (uint64_t)v26, (int *)&v25, 510);
        if ((_DWORD)ISPHallData)
        {
          v21 = ISPHallData;
          fig_log_get_emitter();
          FigDebugAssert3();
          fig_log_get_emitter();
          FigDebugAssert3();
          return v21;
        }
        v12 = v25;
        if ((int)v25 >= 1)
        {
          v13 = 0;
          v14 = 0;
          v15 = v4 + v9 * -0.5;
          v16 = (double)v8 / 1000000.0 + v15;
          v17 = 24 * v25;
          do
          {
            v18 = v26[v13 / 8];
            if (v18 >= v15 && v18 <= v16)
            {
              *v2 = vadd_f32(*(float32x2_t *)&v26[v13 / 8 + 1], *v2);
              ++v14;
            }
            v13 += 24;
          }
          while (v17 != v13);
          if (v14)
          {
            *(float *)&v16 = (float)v14;
            *v2 = vdiv_f32(*v2, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v16, 0));
          }
          else
          {
            v20 = v12 - 1;
            if (v26[0] > v16)
              v20 = 0;
            *v2 = *(float32x2_t *)&v26[3 * v20 + 1];
            low_freq_error_logging();
          }
        }
      }
      return 0;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionGetISPHallData(const __CFData *a1, uint64_t a2, int *a3, int a4)
{
  unint64_t Length;
  unint64_t v9;
  const UInt8 *BytePtr;
  int v11;
  int v12;
  uint64_t v13;
  Float64 *v14;
  int *v15;
  int64_t v16;
  int v17;
  uint64_t v18;
  float *v19;
  int *v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  CMTime time;
  CMTime v26;

  Length = CFDataGetLength(a1);
  if (Length <= 7)
    goto LABEL_26;
  v9 = Length;
  BytePtr = CFDataGetBytePtr(a1);
  if (*(_DWORD *)BytePtr >= 2u)
    goto LABEL_26;
  v11 = 16;
  if (*(_DWORD *)BytePtr == 1)
    v11 = 24;
  if (v9 != v11 * (uint64_t)*((int *)BytePtr + 1) + 8)
  {
LABEL_26:
    fig_log_get_emitter();
    FigDebugAssert3();
    v23 = FigSignalErrorAt();
    BytePtr = 0;
    if ((_DWORD)v23)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v23;
    }
  }
  if (a3)
  {
    v12 = *((_DWORD *)BytePtr + 1);
    if (v12 >= a4)
      v12 = a4;
    *a3 = v12;
    if (*(_DWORD *)BytePtr == 1)
    {
      if (v12 >= 1)
      {
        v18 = 0;
        v19 = (float *)(a2 + 12);
        v20 = (int *)(BytePtr + 28);
        do
        {
          v21 = FigHostTimeToNanoseconds();
          CMTimeMake(&v26, v21, 1000000000);
          *(Float64 *)(v19 - 3) = CMTimeGetSeconds(&v26);
          *(v19 - 1) = (float)*(v20 - 3) * 0.0039062;
          *v19 = (float)*(v20 - 2) * 0.0039062;
          v19[1] = (float)*(v20 - 1) * 0.0039062;
          v22 = *v20;
          v20 += 6;
          v19[2] = (float)v22 * 0.0039062;
          ++v18;
          v19 += 6;
        }
        while (v18 < *a3);
      }
    }
    else
    {
      if (*(_DWORD *)BytePtr)
        return 4294954515;
      if (v12 >= 1)
      {
        v13 = 0;
        v14 = (Float64 *)(a2 + 16);
        v15 = (int *)(BytePtr + 20);
        do
        {
          v16 = FigHostTimeToNanoseconds();
          CMTimeMake(&time, v16, 1000000000);
          *(v14 - 2) = CMTimeGetSeconds(&time);
          *((float *)v14 - 2) = (float)*(v15 - 1) * 0.0039062;
          v17 = *v15;
          v15 += 4;
          *((float *)v14 - 1) = (float)v17 * 0.0039062;
          *v14 = 0.0;
          v14 += 3;
          ++v13;
        }
        while (v13 < *a3);
      }
    }
    return 0;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

void FigMotionComputeQuaternionForTimeStamp(uint64_t a1, _QWORD *a2, char *a3, double a4)
{
  _BYTE *v8;
  _BOOL4 v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  float v14;
  float v15;
  double v16;
  int v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  int v22;
  double v23;
  double v24;
  BOOL v26;
  double v27;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = (_BYTE *)(a1 + 10256);
  v9 = *(_BYTE *)(a1 + 10257) == 0;
  if (a2)
  {
    *a2 = 0x3FF0000000000000;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
  v10 = 0;
  v11 = flt_1A32B16D8[v9];
  v12 = 1.0;
  v13 = -1;
  do
  {
    v14 = *(double *)(a1 + 8 + 8 * v10) - a4;
    v15 = fabsf(v14);
    if (v12 > v15)
    {
      v12 = v15;
      v13 = v10;
    }
    ++v10;
  }
  while (v10 != 256);
  if (v12 > v11 && !*v8)
    low_freq_error_logging();
  if (v13 != -1)
  {
    v16 = *(double *)(a1 + 8 * v13 + 8);
    if (v16 >= a4)
    {
      v22 = (v13 - 1);
      if (v13 + 255 <= 0)
        v22 = -(1 - v13);
      v20 = v22;
      v19 = *(double *)(a1 + 8 * v13 + 8);
      v16 = *(double *)(a1 + 8 * v22 + 8);
      v18 = v13;
    }
    else
    {
      if (v13 + 1 <= 0)
        v17 = --(char)(v13 + 1);
      else
        v17 = (v13 + 1);
      v18 = v17;
      v19 = *(double *)(a1 + 8 * v17 + 8);
      v20 = v13;
    }
    v23 = vabdd_f64(v19, a4);
    v24 = v11;
    v26 = v19 >= a4 && v23 <= v24 && v16 <= a4;
    v27 = vabdd_f64(v16, a4);
    if (v26 && v27 <= v24)
    {
      if (vabdd_f64(v19, v16) > 0.000001)
      {
        v32 = (a4 - v16) / (v19 - v16);
        FigMotionInterpolateQuaternionsByAngle(a1 + 2056 + 32 * v20, (double *)(a1 + 2056 + 32 * v18), v32);
        *a2 = v33;
        a2[1] = v34;
        a2[2] = v35;
        a2[3] = v36;
        goto LABEL_34;
      }
      v29 = a1 + 32 * v20;
    }
    else
    {
      v29 = a1 + 32 * v13;
    }
    v30 = (_OWORD *)(v29 + 2056);
    v31 = v30[1];
    *(_OWORD *)a2 = *v30;
    *((_OWORD *)a2 + 1) = v31;
LABEL_34:
    v21 = 1;
    goto LABEL_35;
  }
  if (!*v8)
    low_freq_error_logging();
  v21 = 0;
LABEL_35:
  *a3 = v21;
}

uint64_t FigMotionInitializeQuaternion(_QWORD *a1)
{
  uint64_t result;

  if (!a1)
    return 4294954516;
  result = 0;
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  return result;
}

uint64_t FigMotionComputeLensMovementAndSagForTimeStamp(uint64_t a1, float32x2_t *a2, float32x2_t *a3, unsigned int a4, double a5, float a6)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  float32x2_t v29;
  float32x2_t v30;
  double v31;
  float v32;
  float32x2_t v33;

  *a2 = 0;
  if (a3)
    *a3 = 0;
  v6 = 0;
  v7 = a1 + ((unint64_t)a4 << 12) + 8;
  v8 = -1;
  v9 = 1.0;
  do
  {
    v10 = *(double *)(v7 + 8 * v6) - a5;
    v11 = fabsf(v10);
    if (v9 > v11)
    {
      v8 = v6;
      v9 = v11;
    }
    ++v6;
  }
  while (v6 != 512);
  if (v8 == -1)
    return 0xFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 8 * a4 + 16392);
  if (!a3 || v12)
  {
    v13 = a1 + ((unint64_t)a4 << 12) + 8200;
    v14 = v8;
    v15 = *(double *)(v7 + 8 * v8);
    if (v15 >= a5)
    {
      v24 = v8 + 511;
      v17 = -v24 < 0;
      v25 = -v24 & 0x1FF;
      v26 = v24 & 0x1FF;
      if (v17)
        v27 = v26;
      else
        v27 = -v25;
      v22 = v27;
      v21 = v15;
      v15 = *(double *)(v7 + 8 * v27);
      v20 = v14;
    }
    else
    {
      v16 = v8 + 1;
      v17 = -v16 < 0;
      v18 = -v16 & 0x1FF;
      v19 = v16 & 0x1FF;
      if (!v17)
        v19 = -v18;
      v20 = v19;
      v21 = *(double *)(v7 + 8 * v19);
      v22 = v14;
    }
    if (v21 >= a5
      && (vabdd_f64(v21, a5) <= 0.00200000009 ? (v28 = v15 <= a5) : (v28 = 0), v28
                                                                            && vabdd_f64(v15, a5) <= 0.00200000009))
    {
      if (vabdd_f64(v21, v15) > 0.000001)
      {
        v31 = v21 - v15;
        v32 = (a5 - v15) / v31;
        v33 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v13 + 8 * v20), v32), *(float32x2_t *)(v13 + 8 * v22), 1.0 - v32);
        *a2 = v33;
        if (a3)
        {
          *(float *)&v31 = 1.0 - v32;
          *a3 = vmla_f32(vmul_n_f32(*(float32x2_t *)(v12 + 8 * v20), v32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v31, 0), *(float32x2_t *)(v12 + 8 * v22));
          goto LABEL_29;
        }
        goto LABEL_36;
      }
      v29 = *(float32x2_t *)(v13 + 8 * v22);
      *a2 = v29;
      if (a3)
      {
        v30 = *(float32x2_t *)(v12 + 8 * v22);
        goto LABEL_28;
      }
    }
    else
    {
      v29 = *(float32x2_t *)(v13 + 8 * v14);
      *a2 = v29;
      if (a3)
      {
        v30 = *(float32x2_t *)(v12 + 8 * v14);
LABEL_28:
        *a3 = v30;
LABEL_29:
        result = 0;
        *a2 = vmul_n_f32(*a2, a6);
        *a3 = vmul_n_f32(*a3, a6);
        return result;
      }
    }
    v33 = v29;
LABEL_36:
    result = 0;
    *a2 = vmul_n_f32(v33, a6);
    return result;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionComputeFramePTSOffsetFromISPCrop(const __CFDictionary *a1, double *a2)
{
  const __CFNumber *Value;
  const __CFNumber *v5;
  uint64_t SensorValidCropRect;
  double v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  int v12;
  int valuePtr;

  v12 = 0;
  if (a1)
  {
    if (a2)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06D70]);
      if (Value)
      {
        valuePtr = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        v5 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06D38]);
        if (v5)
        {
          CFNumberGetValue(v5, kCFNumberSInt32Type, &v12);
          if (v12 > 0)
          {
            v10 = *MEMORY[0x1E0C9D648];
            v11 = *MEMORY[0x1E0C9D648];
            SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
            if ((_DWORD)SensorValidCropRect)
            {
              v8 = SensorValidCropRect;
              fig_log_get_emitter();
              FigDebugAssert3();
              return v8;
            }
            if (!CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D06DF8]))
            {
              v7 = 0.0;
              goto LABEL_11;
            }
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              v7 = *((double *)&v10 + 1);
LABEL_11:
              v8 = 0;
              *a2 = (*((double *)&v11 + 1) - v7) * (double)valuePtr / ((double)v12 * 1000000.0);
              return v8;
            }
          }
          fig_log_get_emitter();
        }
        else
        {
          fig_log_get_emitter();
        }
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t low_freq_error_logging()
{
  uint64_t result;
  BOOL v1;

  mach_absolute_time();
  result = FigHostTimeToNanoseconds();
  if (low_freq_error_logging_last_log)
    v1 = (unint64_t)(result - low_freq_error_logging_last_log) >= 0x3B9ACA00;
  else
    v1 = 1;
  if (v1)
  {
    if (low_freq_error_logging_filtered)
      low_freq_error_logging_filtered = 0;
    low_freq_error_logging_last_log = result;
  }
  else
  {
    ++low_freq_error_logging_filtered;
  }
  return result;
}

uint64_t low_freq_error_logging_0()
{
  uint64_t result;
  BOOL v1;

  mach_absolute_time();
  result = FigHostTimeToNanoseconds();
  if (low_freq_error_logging_last_log_0)
    v1 = (unint64_t)(result - low_freq_error_logging_last_log_0) >= 0x3B9ACA00;
  else
    v1 = 1;
  if (v1)
  {
    if (low_freq_error_logging_filtered_0)
      low_freq_error_logging_filtered_0 = 0;
    low_freq_error_logging_last_log_0 = result;
  }
  else
  {
    ++low_freq_error_logging_filtered_0;
  }
  return result;
}

uint64_t BWGetMaximumDisplayFrequency()
{
  if (BWGetDisplaySupportsPerseus_onceToken != -1)
    dispatch_once(&BWGetDisplaySupportsPerseus_onceToken, &__block_literal_global_281);
  if (BWGetDisplaySupportsPerseus_displaySupportsPerseus)
    return 120;
  else
    return 60;
}

double FigCaptureMakeRectWithAspectRatioInsideDimensions(uint64_t a1, int a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  signed int v9;
  double v10;

  v3 = (float)(int)a1;
  v4 = (float)SHIDWORD(a1);
  if ((float)((float)(int)a1 / (float)SHIDWORD(a1)) >= a3)
  {
    v5 = v4 * a3;
    v6 = (float)SHIDWORD(a1);
  }
  else
  {
    v5 = (float)(int)a1;
    v6 = v3 / a3;
  }
  v7 = v4 - v6;
  v8 = (float)(v3 - v5) <= 2.0 && v7 <= 2.0;
  v9 = a1;
  if (!v8)
  {
    if (a2)
      v9 = (int)v5 & 0xFFFFFFFE;
    else
      v9 = 2 * llroundf(v5 * 0.5);
  }
  v10 = round(((double)(int)a1 - (double)v9) * 0.5 * 0.5);
  return v10 + v10;
}

uint64_t captureSource_setFocusOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  void *v5;
  int v6;
  int v7;
  CGSize v8;
  const __CFDictionary *v9;
  void *v10;
  signed int v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  CGRect rect;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  v5 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("FocusMode"));
  if (!v5)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v6 = objc_msgSend(v5, "intValue");
  v7 = v6;
  if ((v6 - 1) >= 2)
  {
    if (!v6)
    {
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FocusPosition")), "floatValue");
      v13 = v12;
      v14 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue");
      LODWORD(v15) = v13;
      return objc_msgSend(*(id *)(DerivedStorage + 80), "setFocusModeManualWithLensPosition:requestID:", v14, v15);
    }
    return FigSignalErrorAt();
  }
  v8 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  rect.size = v8;
  if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("FocusPointOfInterest")), "BOOLValue"))
  {
    v9 = (const __CFDictionary *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FocusRect"));
    if (!v9 || !CGRectMakeWithDictionaryRepresentation(v9, &rect))
    {
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  v10 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FocusRangeRestriction"));
  if (v10)
    v11 = objc_msgSend(v10, "intValue");
  else
    v11 = 0;
  v17 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("SmoothFocus"));
  if (v17)
    v20 = objc_msgSend(v17, "BOOLValue");
  else
    v20 = 0;
  if (v11 >= 3)
    return FigSignalErrorAt();
  LODWORD(v18) = dword_1A32B252C[v11];
  LODWORD(v19) = dword_1A32B2538[v11];
  v21 = objc_msgSend(*(id *)(DerivedStorage + 80), "setFocusModeAutoWithRect:restrictToRect:continuous:smooth:rangeRestrictionNear:rangeRestrictionFar:isFocusRectInOverscanSpace:", 0, v7 == 2, v20, 0, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, v18, v19);
  if ((_DWORD)v21)
  {
    v23 = v21;
    FigDebugAssert3();
    return v23;
  }
  if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FaceDrivenAEAFMode")))
    return captureSource_setFaceDrivenAEAFMode(a1, objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FaceDrivenAEAFMode")), "intValue"));
  return 0;
}

uint64_t captureSource_setExposureOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  void *v6;
  int v7;
  CGSize v8;
  const __CFDictionary *v9;
  uint64_t v10;
  const __CFDictionary *v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  void *v24;
  double v25;
  uint64_t v26;
  CGPoint origin;
  CGFloat width;
  CGRect rect;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  v5 = DerivedStorage;
  v6 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ExposureMode"));
  if (!v6)
  {
LABEL_25:
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v7 = objc_msgSend(v6, "intValue");
  switch(v7)
  {
    case 0:
      return objc_msgSend(*(id *)(v5 + 80), "setExposureModeLocked");
    case 3:
      v13 = (const __CFDictionary *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ExposureDuration"));
      if (v13)
      {
        memset(&rect, 0, 24);
        CMTimeMakeFromDictionary((CMTime *)&rect, v13);
        v14 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ExposureActiveMinFrameRate"));
        if (v14)
        {
          objc_msgSend(v14, "doubleValue");
          v16 = v15;
          v17 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ExposureActiveMaxFrameRate"));
          if (v17)
          {
            objc_msgSend(v17, "doubleValue");
            v19 = v18;
            v20 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ISO"));
            if (v20)
            {
              objc_msgSend(v20, "floatValue");
              v22 = v21;
              v23 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue");
              v24 = *(void **)(v5 + 80);
              origin = rect.origin;
              width = rect.size.width;
              LODWORD(v25) = v22;
              return objc_msgSend(v24, "setExposureModeCustomWithExposureDuration:minFrameRate:maxFrameRate:ISO:requestID:", &origin, v23, v16, v19, v25);
            }
          }
        }
LABEL_27:
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      goto LABEL_25;
    case 2:
      v8 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      rect.size = v8;
      v9 = (const __CFDictionary *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("ExposureRect"));
      if (v9 && CGRectMakeWithDictionaryRepresentation(v9, &rect))
      {
        v10 = objc_msgSend(*(id *)(v5 + 80), "setExposureModeAutoWithRect:", rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
        if ((_DWORD)v10)
        {
          v26 = v10;
          FigDebugAssert3();
          return v26;
        }
        if (!objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FaceDrivenAEAFMode")))
          return 0;
        return captureSource_setFaceDrivenAEAFMode(a1, objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("FaceDrivenAEAFMode")), "intValue"));
      }
      goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t captureSource_setFaceDrivenAEAFMode(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void **)(DerivedStorage + 80);
  if (v4)
  {
    v5 = objc_msgSend(v4, "setFaceDetectionDrivenImageProcessingMode:", a2);
    if ((_DWORD)v5)
      FigDebugAssert3();
    else
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2), CFSTR("FaceDrivenAEAFMode"));
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return v5;
}

void sub_1A2D5ABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

void *BWUtilitiesWarnIfInputFormatsMismatch(void *result, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    result = (void *)objc_msgSend(result, "count");
    if (result)
    {
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      result = (void *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (result)
      {
        v4 = result;
        v5 = *(_QWORD *)v9;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v9 != v5)
              objc_enumerationMutation(v3);
            v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6);
            if (v7 != a2)
              objc_msgSend((id)objc_msgSend(v7, "format"), "isEqual:", objc_msgSend(a2, "format"));
            v6 = (char *)v6 + 1;
          }
          while (v4 != v6);
          result = (void *)objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
          v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

uint64_t csp_shouldUseDepthCompanionIndex(void *a1, void *a2, unint64_t a3)
{
  void *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(a1, "requiredFormat");
  result = objc_msgSend(v6, "depthCompanionFormat");
  if (result)
  {
    result = objc_msgSend(a1, "depthDataDeliveryEnabled");
    if ((_DWORD)result)
    {
      if ((objc_msgSend(a1, "cinematicFramingEnabled") & 1) != 0 || (objc_msgSend(a1, "deskCamEnabled") & 1) != 0)
      {
        return 0;
      }
      else
      {
        result = 0;
        if ((int)a3 >= 1)
        {
          v19 = HIDWORD(a3);
          v20 = a3;
          if (SHIDWORD(a3) >= 1)
          {
            v8 = objc_msgSend(v6, "previewDimensions");
            v9 = v8;
            v10 = HIDWORD(v8);
            v21 = 0u;
            v22 = 0u;
            v23 = 0u;
            v24 = 0u;
            v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
            if (v11)
            {
              v12 = v11;
              v13 = *(_QWORD *)v22;
              do
              {
                for (i = 0; i != v12; ++i)
                {
                  if (*(_QWORD *)v22 != v13)
                    objc_enumerationMutation(a2);
                  v15 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
                  v16 = (void *)objc_msgSend(v15, "sinkConfiguration", v19);
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                  {
                    if (objc_msgSend(v16, "sinkType") == 4)
                      return 0;
                    if (objc_msgSend(v16, "sinkType") == 10)
                    {
                      if ((objc_msgSend(v16, "irisMovieCaptureEnabled") & 1) != 0)
                        return 0;
                    }
                    else if (objc_msgSend(v16, "sinkType") == 6)
                    {
                      v17 = objc_msgSend(v15, "nonRotatedOutputDimensions");
                      if ((objc_msgSend(v16, "optimizedForPreview") & 1) == 0)
                      {
                        result = 0;
                        if ((int)v17 > v9 || SHIDWORD(v17) > (int)v10)
                          return result;
                      }
                      if (objc_msgSend(v15, "videoStabilizationMethod")
                        && objc_msgSend(v15, "videoStabilizationMethod") != 4)
                      {
                        return 0;
                      }
                    }
                  }
                }
                v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
              }
              while (v12);
            }
            return v20 <= v9 && (int)v19 <= (int)v10;
          }
        }
      }
    }
  }
  return result;
}

unint64_t csp_videoCaptureDimensionsFromConnectionConfigurations(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, int a6)
{
  unint64_t v7;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  __objc2_class **v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v39;
  int v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    v7 = objc_msgSend(a1, "sensorDimensions");
LABEL_3:
    v39 = HIDWORD(v7);
    v41 = v7;
    goto LABEL_56;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "irisSinkConfiguration"), "irisMovieCaptureEnabled"))
  {
    if (a2
      && objc_msgSend(a1, "capturesStillsFromVideoStream")
      && !objc_msgSend((id)objc_msgSend(a1, "frontEndScalerCompanionFormats"), "count"))
    {
      v7 = objc_msgSend(a1, "dimensions");
      goto LABEL_3;
    }
    v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    objc_msgSend(v15, "addObjectsFromArray:", a3);
    objc_msgSend(v15, "addObjectsFromArray:", a4);
    if (a5)
      objc_msgSend(v15, "addObject:", a5);
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    if (!v16)
      goto LABEL_58;
    v17 = v16;
    v39 = 0;
    v41 = 0;
    v18 = *(_QWORD *)v43;
    v19 = off_1E4915000;
LABEL_19:
    v20 = 0;
    while (1)
    {
      if (*(_QWORD *)v43 != v18)
        objc_enumerationMutation(v15);
      v21 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v20);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_54;
      v22 = (void *)objc_msgSend(v21, "sinkConfiguration");
      v23 = objc_msgSend(v22, "sinkType");
      if (v23 > 5)
      {
        if (v23 == 6 || v23 == 11)
        {
LABEL_32:
          v25 = v19;
          v26 = v18;
          v27 = v15;
          v28 = objc_msgSend(v21, "nonRotatedOutputDimensions", v39);
          v29 = v28;
          v30 = HIDWORD(v28);
          if (objc_msgSend(v22, "sinkType") != 11)
          {
            if (v29 <= (int)objc_msgSend(a1, "previewDimensions"))
              v29 = objc_msgSend(a1, "previewDimensions");
            if ((int)v30 <= (int)((unint64_t)objc_msgSend(a1, "previewDimensions") >> 32))
              v30 = (unint64_t)objc_msgSend(a1, "previewDimensions") >> 32;
          }
          if (v41 <= v29)
            v31 = v29;
          else
            v31 = v41;
          v41 = v31;
          if (v40 <= (int)v30)
            v32 = v30;
          else
            v32 = v40;
          if (objc_msgSend(v21, "underlyingDeviceType") == 13)
          {
            v41 = objc_msgSend(a1, "dimensions");
            v39 = (unint64_t)objc_msgSend(a1, "dimensions") >> 32;
          }
          else
          {
            v39 = v32;
          }
          v15 = v27;
          v18 = v26;
          v19 = v25;
        }
      }
      else if (v23 == 1)
      {
        v33 = objc_msgSend(a1, "previewDimensions");
        if (v41 <= (int)v33)
          v34 = v33;
        else
          v34 = v41;
        v41 = v34;
        if ((int)v39 <= SHIDWORD(v33))
          v35 = HIDWORD(v33);
        else
          v35 = v39;
        v39 = v35;
      }
      else if (v23 == 4)
      {
        goto LABEL_32;
      }
LABEL_54:
      if (v17 == ++v20)
      {
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
        if (!v17)
          goto LABEL_56;
        goto LABEL_19;
      }
    }
  }
  v12 = objc_msgSend(a2, "outputWidth");
  v13 = objc_msgSend(a2, "outputHeight");
  if (FigCaptureConnectionConfigurationWithSinkType(a4, 1))
  {
    v14 = objc_msgSend(a1, "previewDimensions");
    if (v12 <= (int)v14)
      v12 = v14;
    if ((int)v13 <= SHIDWORD(v14))
      v13 = HIDWORD(v14);
    else
      v13 = v13;
  }
  v39 = v13;
  v41 = v12;
LABEL_56:
  v37 = v39;
  LODWORD(v36) = v41;
  if (!v41 || !(_DWORD)v39)
  {
LABEL_58:
    v36 = objc_msgSend(a1, "previewDimensions", v39);
    v37 = HIDWORD(v36);
  }
  return v36 | (v37 << 32);
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D085A0]);
}

id FigCaptureBuildObjectDetectionPipeline(void *a1, void *a2, void *a3, uint64_t a4, BWFaceDetectionNode **a5, double a6, double a7, double a8, double a9)
{
  _BOOL8 v18;
  _BOOL8 v19;
  BWFaceDetectionNode *v20;
  id result;
  id v22;

  v22 = 0;
  v18 = objc_msgSend(a2, "count") != 0;
  v19 = objc_msgSend(a3, "count") != 0;
  v20 = -[BWFaceDetectionNode initWithObjectMetadataIdentifiers:movieFileOutputMetadataIdentifierGroups:]([BWFaceDetectionNode alloc], "initWithObjectMetadataIdentifiers:movieFileOutputMetadataIdentifierGroups:", a2, a3);
  -[BWNode setName:](v20, "setName:", CFSTR("Face Detection"));
  -[BWFaceDetectionNode setMetadataObjectOutputEnabled:](v20, "setMetadataObjectOutputEnabled:", v18);
  -[BWFaceDetectionNode setBoxedMetadataOutputEnabled:](v20, "setBoxedMetadataOutputEnabled:", v19);
  -[BWFaceDetectionNode setRectOfInterest:](v20, "setRectOfInterest:", a6, a7, a8, a9);
  if ((objc_msgSend(a1, "addNode:error:", v20, &v22) & 1) == 0
    || (objc_msgSend((id)objc_msgSend(a1, "graph"), "connectOutput:toInput:pipelineStage:", a4, -[BWNode input](v20, "input"), 0) & 1) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  *a5 = v20;
  result = v22;
  if (v22)
    return (id)objc_msgSend(v22, "code");
  return result;
}

uint64_t FigCaptureAddDetectedObjectTypesFromMetadataIdentifiersToSet(void *a1, void *a2)
{
  uint64_t result;

  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0CA2558]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D064A0]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0CA2560]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D06498]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0D08540]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D064A8]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0CA2550]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D06488]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0CA2548]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D06478]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0CA2568]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D064C0]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0D08550]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D064B8]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0D08530]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D06480]);
  if (objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0D08538]))
    objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D06490]);
  result = objc_msgSend(a1, "containsObject:", *MEMORY[0x1E0D08548]);
  if ((_DWORD)result)
    return objc_msgSend(a2, "addObject:", *MEMORY[0x1E0D064B0]);
  return result;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresTextLocalization(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08590]);
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresMRCNode(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v9;
    v5 = *MEMORY[0x1E0D08558];
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v6);
        if ((objc_msgSend(v7, "isEqualToString:", v5) & 1) == 0
          && (objc_msgSend(v7, "hasPrefix:", CFSTR("mdta/com.apple.quicktime.detected-machine-readable-code.")) & 1) != 0)
        {
          return 1;
        }
        ++v6;
      }
      while (v3 != v6);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCaptureSessionIsLaunchPrewarmingEnabled()
{
  return 1;
}

float AEMatrix_FindQualityFromSums(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  float result;
  _DWORD v14[5];
  uint64_t v15;

  v3 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v4 = 4294967294;
  do
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      if (((v4 + v6) & 0xFFFFFFF0) == 0)
      {
        v8 = *(_DWORD *)(a1 + 4 * (v4 + v6)) - *(_DWORD *)(a2 + 4 * v6);
        if (v8 < 0)
          v8 = *(_DWORD *)(a2 + 4 * v6) - *(_DWORD *)(a1 + 4 * (v4 + v6));
        v5 += v8;
        v14[v3] = v5;
        ++v7;
      }
      ++v6;
    }
    while (v6 != 16);
    if (v7 <= 1)
      v7 = 1;
    v14[v3++] = v5 / (int)v7;
    ++v4;
  }
  while (v3 != 5);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = v14[v9];
    if (v12 < v14[v11])
      v11 = v9;
    if (v12 > v14[v10])
      v10 = v9;
    ++v9;
  }
  while (v9 != 5);
  result = 1.0 - (float)((float)(int)v14[v11] / (float)(int)v14[v10]);
  *a3 = result;
  return result;
}

uint64_t BWPixelBufferColorSpace(__CVBuffer *a1)
{
  CFDictionaryRef v3;
  CFTypeRef v4;

  if (BWPixelBufferIsHDR(a1))
    return 1;
  v3 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v3)
    v4 = CFAutorelease(v3);
  else
    v4 = 0;
  return 2
       * (+[BWVideoFormat colorSpacePropertiesForPixelBufferAttachments:](BWVideoFormat, "colorSpacePropertiesForPixelBufferAttachments:", v4) == 10);
}

BOOL BWPixelBufferIsHDR(__CVBuffer *a1)
{
  CFDictionaryRef v1;
  CFTypeRef v2;

  v1 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v1)
    v2 = CFAutorelease(v1);
  else
    v2 = 0;
  return +[BWVideoFormat colorSpacePropertiesForPixelBufferAttachments:](BWVideoFormat, "colorSpacePropertiesForPixelBufferAttachments:", v2)- 5 < 3;
}

void __csr_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
  FigCFDictionarySetInt32();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

void __csr_ensureClientEstablished_block_invoke_0(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
  sDeadServerNotificationQueue = (uint64_t)dispatch_queue_create("com.apple.figcapturesource.deadserver-notifications", 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t cs_setCinematicFramingWarpingForStillImageSinkPipelineConfigurationIfNeeded(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;

  if ((objc_msgSend(a2, "backgroundBlurEnabled") & 1) != 0 || (objc_msgSend(a2, "studioLightingEnabled") & 1) != 0)
    v6 = 0;
  else
    v6 = objc_msgSend(a2, "backgroundReplacementEnabled") ^ 1;
  if ((objc_msgSend(a2, "cinematicFramingEnabled") & 1) == 0
    && !objc_msgSend(a2, "manualCinematicFramingEnabled"))
  {
    v6 = 0;
  }
  objc_msgSend(a1, "setCinematicFramingWarpingRequired:", v6);
  result = objc_msgSend(a1, "cinematicFramingWarpingRequired");
  if ((_DWORD)result)
  {
    v8 = (void *)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a3), "highResStillImageDimensions"), "firstObject");
    if (v8)
      v9 = objc_msgSend(v8, "dimensions");
    else
      v9 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a3), "cinematicFramingOutputDimensions");
    return objc_msgSend(a1, "setCinematicFramingWarpingOutputDimensions:", v9);
  }
  return result;
}

uint64_t __rqReceiverCreate_block_invoke_3()
{
  return dispatch_mig_server();
}

uint64_t FigVideoCaptureSourcesEnableTimeOfFlightAFIfSupported()
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  cs_updateTimeOfFlightAFEnabledStatus();
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

uint64_t cs_updateTimeOfFlightAFEnabledStatus()
{
  BOOL v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (sTimeOfFlightAFEnabled)
    v0 = sTimeOfFlightAFSuspended == 0;
  else
    v0 = 0;
  v1 = v0;
  v2 = cs_copyActiveCaptureDevice();
  v3 = objc_msgSend(v2, "setProperty:value:", *MEMORY[0x1E0D059E0], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1));
  if ((_DWORD)v3)
  {
    v12 = v3;
    FigDebugAssert3();
  }
  else
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = (void *)sActiveVideoCaptureSources;
    v5 = objc_msgSend((id)sActiveVideoCaptureSources, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v17;
      v8 = MEMORY[0x1E0C809B0];
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          v10 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
          v14[0] = v8;
          v14[1] = 3221225472;
          v14[2] = __cs_updateTimeOfFlightAFEnabledStatus_block_invoke;
          v14[3] = &__block_descriptor_33_e154_i16__0__FigCaptureSourceStorage_qiCC____8I____OpaqueFigSimpleMutex__q____CFString__i__________OpaqueFigCaptureSource_f___i__OpaqueFigFlashlight__iBBB_BB_8l;
          v15 = v1;
          v11 = captureSource_safelyAccessStorage(v10, (uint64_t)v14);
        }
        v12 = v11;
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      }
      while (v6);
    }
    else
    {
      v12 = 0;
    }
  }

  return v12;
}

id cs_copyActiveCaptureDevice()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  id v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v0 = (void *)sActiveVideoCaptureSources;
  v1 = objc_msgSend((id)sActiveVideoCaptureSources, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = *(_QWORD *)v10;
LABEL_3:
  v4 = 0;
  while (1)
  {
    if (*(_QWORD *)v10 != v3)
      objc_enumerationMutation(v0);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v6 = DerivedStorage;
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
      v7 = (id)objc_msgSend(*(id *)(v6 + 80), "device");
      pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 48));
      if (v7)
        return v7;
    }
    if (v2 == ++v4)
    {
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v2)
        goto LABEL_3;
      return 0;
    }
  }
}

void captureSession_cancelMemoryPoolPrewarmingTimeoutTimer()
{
  if (qword_1ECFE9DF0)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1ECFE9DF0);

    qword_1ECFE9DF0 = 0;
  }
}

uint64_t FigCaptureStringFromPixelBufferUniversalLossyCompressionLevel(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a1);
}

uint64_t BWPhotoEncoderStringFromEncodingScheme(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a1);
}

uint64_t doirb_findDetectedObjectsInfoClosestToPTS(void *a1, CMTime *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  CMTimeEpoch v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t i;
  void *v15;
  int64_t v16;
  float Seconds;
  int32_t v18;
  int v19;
  uint64_t v22;
  __int128 v23;
  CMTime rhs;
  CMTime lhs;
  CMTime v26;
  CMTime time;
  CMTime time1;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CMTime v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a1, "count");
  if (v4 < 1)
  {
    v7 = -1;
    v19 = -1;
  }
  else
  {
    v5 = 0;
    v6 = *MEMORY[0x1E0D06F20];
    v22 = v4;
    v7 = -1;
    v23 = *MEMORY[0x1E0CA2E18];
    v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    while (1)
    {
      v9 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v5);
      v33.epoch = v8;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)&v33.value = v23;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v30;
        v13 = 3.4028e38;
        do
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v30 != v12)
              objc_enumerationMutation(v9);
            v15 = (void *)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i)), "objectForKeyedSubscript:", v6);
            if (v15)
            {
              memset(&time1, 0, sizeof(time1));
              objc_msgSend(v15, "longLongValue");
              v16 = FigHostTimeToNanoseconds();
              CMTimeMake(&time, v16, 1000000000);
              CMTimeConvertScale(&time1, &time, a2->timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              lhs = *a2;
              rhs = time1;
              CMTimeSubtract(&v26, &lhs, &rhs);
              Seconds = CMTimeGetSeconds(&v26);
              if (v13 > Seconds)
              {
                v33 = time1;
                v13 = Seconds;
              }
            }
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        }
        while (v11);
      }
      else
      {
        v13 = 3.4028e38;
      }
      if (fabsf(v13) > 0.5)
        break;
      time1 = v33;
      lhs = *a2;
      v18 = CMTimeCompare(&time1, &lhs);
      if (!v18)
      {
        if (v9)
          return (uint64_t)v9;
        break;
      }
      v19 = v5;
      if (v18 < 1)
        goto LABEL_26;
      ++v5;
      v7 = v19;
      if (v5 == v22)
      {
        v7 = v19;
        break;
      }
    }
    v19 = -1;
LABEL_26:
    if ((v7 & 0x80000000) == 0 && v19 == -1)
      return objc_msgSend(a1, "lastObject");
    if (v7 == -1 && (v19 & 0x80000000) == 0)
      return objc_msgSend(a1, "firstObject");
  }
  if (((v19 | v7) & 0x80000000) == 0)
    return objc_msgSend(a1, "objectAtIndexedSubscript:", (v19 + v7) >> 1);
  return 0;
}

void sub_1A2D6E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureClientIsRunningInMediaserverd(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __CFString *v5;
  uint64_t v6;
  audit_token_t v8;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  v6 = -[__CFString isEqualToString:](v5, "isEqualToString:", 0x1E492D178);

  CFRelease(v4);
  return v6;
}

uint64_t FigCaptureClientIsContinuityCapture(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __CFString *v5;
  uint64_t v6;
  audit_token_t v8;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  if ((-[__CFString isEqualToString:](v5, "isEqualToString:", 0x1E493D838) & 1) != 0)
    v6 = 1;
  else
    v6 = -[__CFString isEqualToString:](v5, "isEqualToString:", 0x1E493D538);

  CFRelease(v4);
  return v6;
}

uint64_t FigCaptureMetadataObjectConfigurationRequiresEyeReliefStatus(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0D08598]);
}

uint64_t BWUtilitiesUnderlyingDeviceTypeFromPortType(void *a1, unsigned int a2)
{
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A30]) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) != 0)
    return 7;
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A38]))
  {
    if (a2 - 15 >= 2)
      return 2;
    else
      return a2;
  }
  else if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A50]))
  {
    if (a2 == 11)
      return 11;
    else
      return 7;
  }
  else if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A40]) & 1) != 0)
  {
    return 5;
  }
  else if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A20]))
  {
    return 10;
  }
  else
  {
    return 0;
  }
}

uint64_t csp_projectorModeFromPointCloudDataConnectionConfigurations(void *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (!objc_msgSend(a1, "count"))
    return 0;
  v2 = objc_msgSend((id)objc_msgSend(a1, "firstObject"), "projectorMode");
  if ((unint64_t)objc_msgSend(a1, "count") >= 2)
  {
    v3 = 1;
    do
    {
      if ((_DWORD)v2 != objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v3), "projectorMode"))objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], CFSTR("Projector modes from connection configs with the same source need to be the same"), 0));
      ++v3;
    }
    while (objc_msgSend(a1, "count") > v3);
  }
  return v2;
}

uint64_t FigCaptureCinematicFramingNodeRequiredInGraph(int a1, int a2, int a3)
{
  return (a1 | a3) & (a2 ^ 1u);
}

void sub_1A2D70454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

const __CFString *BWCaptureDevicePositionToString(int a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unspecified");
  if (a1 == 1)
    v1 = CFSTR("Back");
  if (a1 == 2)
    return CFSTR("Front");
  else
    return v1;
}

void __captureSession_performBlockWithAVCMSessionForIsUsingCamera_block_invoke(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x1A858DD40]();
  if (FigCaptureAudiomxdSupportEnabled() && !*(_QWORD *)(a1[5] + 144))
  {
    *(_QWORD *)(a1[5] + 144) = objc_msgSend(objc_alloc(MEMORY[0x1E0CFF1C8]), "initAuxiliarySession");
  }
  else if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0
         && !*(_QWORD *)(a1[5] + 152)
         && !CMSessionCreate())
  {
    *(_QWORD *)(a1[5] + 152) = 0;
  }
  if (*(_OWORD *)(a1[5] + 144) != 0)
    (*(void (**)(void))(a1[4] + 16))();
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  objc_autoreleasePoolPop(v2);
}

uint64_t __captureSession_setIsUsingCamera_block_invoke(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = 0;
    return objc_msgSend(a2, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D49950], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(result + 32)), &v3);
  }
  else if (a3)
  {
    return CMSessionSetProperty();
  }
  return result;
}

uint64_t FigCaptureAudiomxdSupportEnabled()
{
  if (FigCaptureAudiomxdSupportEnabled_sOnceToken != -1)
    dispatch_once(&FigCaptureAudiomxdSupportEnabled_sOnceToken, &__block_literal_global_88);
  return FigCaptureAudiomxdSupportEnabled_sCaptureAudiomxdSupportEnabled;
}

uint64_t getFTBipartiteMatcherClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTBipartiteMatcherClass_softClass;
  v8 = getFTBipartiteMatcherClass_softClass;
  if (!getFTBipartiteMatcherClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTBipartiteMatcherClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTBipartiteMatcherClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D72110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureConfigureDepthConverterNode(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  unsigned int v22;

  v22 = 0;
  if (a2)
  {
    v12 = objc_msgSend(a2, "depthDataTransform");
    v14 = v13;
    v15 = objc_msgSend(a2, "outputFormat");
    v16 = a2;
LABEL_7:
    v19 = objc_msgSend((id)objc_msgSend(v16, "sourceConfiguration"), "source");
    goto LABEL_8;
  }
  v16 = a3;
  if (a3)
  {
    v12 = objc_msgSend(a3, "depthDataTransformWithSourceDimensions");
    v14 = v17;
    v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "sourceConfiguration"), "depthDataFormat"), "format");
    goto LABEL_7;
  }
  v12 = 0;
  if (a4)
  {
    v14 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "sourceConfiguration"), "depthDataFormat"), "dimensions");
    v15 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "sourceConfiguration"), "depthDataFormat"), "format");
    v16 = a4;
    goto LABEL_7;
  }
  v19 = 0;
  v15 = 0;
  v14 = 0;
LABEL_8:
  v20 = HIDWORD(v12);
  objc_msgSend(a1, "setOutputFormat:", v15);
  objc_msgSend(a1, "setOutputDimensions:", v14);
  if ((v12 & 1) != 0)
    v20 = FigCaptureNormalizeAngle(-HIDWORD(v12));
  objc_msgSend(a1, "setRotationDegrees:", v20);
  objc_msgSend(a1, "setMirroringEnabled:", v12 & 1);
  objc_msgSend(a1, "setStreamingGDRFilteringEnabled:", objc_msgSend((id)objc_msgSend(a2, "depthDataSinkConfiguration"), "filteringEnabled") & (a6 ^ 1));
  if (v19 && FigVideoCaptureSourcePearlModuleType(v19, &v22) == 2)
    objc_msgSend(a1, "setStreamingSMPFilteringEnabled:", objc_msgSend((id)objc_msgSend(a2, "depthDataSinkConfiguration"), "filteringEnabled"));
  objc_msgSend(a1, "setProvidesUnfilteredDepthAsAttachedMedia:", a7);
  objc_msgSend(a1, "setBaseRotationDegrees:", a5);
  return v22;
}

void captureSession_SetConfiguration(const void *a1, void *a2)
{
  uint64_t v2;
  os_unfair_lock_s *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  void *v21;
  void *v22;
  float v23;
  float v24;
  int v25;
  _BOOL4 IsExtensionDeviceType;
  int v27;
  int v28;
  int v29;
  int v30;
  double v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t k;
  void *v37;
  void *v38;
  id v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  os_unfair_lock_s *lock;
  id v61;
  void *v62;
  os_unfair_lock_s *v63;
  void *v64;
  _QWORD v65[6];
  os_log_type_t type[16];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[4];
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    LODWORD(v70) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!LOBYTE(DerivedStorage->_os_unfair_lock_opaque))
  {
    if (a2)
    {
      if (objc_msgSend(a2, "configurationID"))
      {
        if (LOBYTE(DerivedStorage[91]._os_unfair_lock_opaque)
          && !objc_msgSend((id)objc_msgSend(a2, "sourceConfigurations"), "count"))
        {
          v48 = objc_msgSend(a2, "configurationID");
          captureSession_postNotificationWithPayload(a1, CFSTR("ConfigurationDidBecomeLive"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v48), CFSTR("ConfigurationID"), 0, CFSTR("ErrorStatus"), 0));
        }
        else
        {
          v59 = a1;
          v7 = a2;
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          v77 = 0u;
          v8 = (void *)objc_msgSend(a2, "sinkConfigurations");
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v74, v78, 16);
          if (v9)
          {
            v10 = v9;
            v11 = 0;
            v12 = *(_QWORD *)v75;
            do
            {
              for (i = 0; i != v10; ++i)
              {
                if (*(_QWORD *)v75 != v12)
                  objc_enumerationMutation(v8);
                v14 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
                if (objc_msgSend(v14, "sinkType", v57, v58) == 10)
                {
                  if (!v11)
                    v11 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
                  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v14, "irisPreparedSettings"), objc_msgSend(v14, "sinkID"));
                }
              }
              v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v74, v78, 16);
            }
            while (v10);
          }
          else
          {
            v11 = 0;
          }
          v63 = DerivedStorage;
          lock = DerivedStorage + 80;
          v61 = v11;
          v62 = a2;
          v70 = 0u;
          v71 = 0u;
          v72 = 0u;
          v73 = 0u;
          v15 = (void *)objc_msgSend(a2, "connectionConfigurations");
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v71;
            v64 = v15;
            do
            {
              for (j = 0; j != v17; ++j)
              {
                if (*(_QWORD *)v71 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * j);
                if (objc_msgSend((id)objc_msgSend(v20, "sinkConfiguration", v57), "sinkType") == 1
                  && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                {
                  v21 = (void *)objc_msgSend(v20, "sourceConfiguration");
                  v22 = (void *)objc_msgSend(v21, "requiredFormat");
                  objc_msgSend(v22, "dimensions");
                  MGGetFloat32Answer();
                  v24 = v23 / 3.14159265 * 180.0;
                  v25 = FigCaptureNormalizeAngle(-90 * llroundf(v24 / 90.0));
                  IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend(v21, "sourceDeviceType"));
                  v27 = objc_msgSend(v21, "sourcePosition");
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
                  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
                  {
                    v25 = FigCaptureNormalizeAngle(v25 + 90);
                    v28 = FigCaptureCameraRequires180DegreesRotation(v27 == 2, IsExtensionDeviceType);
                    if (objc_msgSend(v20, "mirroringEnabled"))
                    {
                      if (((IsExtensionDeviceType | v28) & 1) != 0)
                        goto LABEL_34;
                    }
                    v29 = objc_msgSend(v20, "mirroringEnabled") | IsExtensionDeviceType;
                    if (v27 != 2)
                      v29 = 1;
                    if (((v29 | v28) & 1) == 0)
LABEL_34:
                      v25 = FigCaptureNormalizeAngle(v25 + 180);
                  }
                  v30 = objc_msgSend(v20, "mirroringEnabled");
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "clientExpectsCameraMountedInLandscapeOrientation");
                  objc_msgSend(v20, "setOrientation:", FigCaptureOrientationFromRotationDegrees(v25, v27 == 2, IsExtensionDeviceType, v30));
                  objc_msgSend(v20, "setOutputFormat:", 0);
                  *(_QWORD *)&v74 = objc_msgSend(v22, "previewDimensions");
                  *(int32x2_t *)&v31 = FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v74, v25);
                  objc_msgSend(v20, "setOutputWidth:", v74, v31);
                  objc_msgSend(v20, "setOutputHeight:", DWORD1(v74));
                  v15 = v64;
                  if ((cs_shouldEnableOverCapture((void *)objc_msgSend(v20, "sourceConfiguration")) & 1) != 0
                    || objc_msgSend((id)objc_msgSend(v20, "videoPreviewSinkConfiguration"), "primaryCaptureRectModificationEnabled"))
                  {
                    *(_QWORD *)&v74 = 0;
                    LODWORD(v74) = MGGetSInt32Answer();
                    DWORD1(v74) = MGGetSInt32Answer();
                    FigCaptureSwapVideoDimensionsFor90Or270Rotation((int32x2_t *)&v74, (unint64_t)objc_msgSend(v20, "transform") >> 32);
                    objc_msgSend(v20, "setOutputWidth:", FigCaptureRoundFloatToMultipleOf(2, (float)(int)v74));
                    objc_msgSend(v20, "setOutputHeight:", FigCaptureRoundFloatToMultipleOf(2, (float)SDWORD1(v74)));
                  }
                }
                else if (objc_msgSend((id)objc_msgSend(v20, "videoDataSinkConfiguration"), "optimizedForPreview"))
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) != 0)
                    FigCaptureSetOptimalVideoPreviewDataConnectionDimensions(v20);
                }
                if (cs_shouldEnableOverCapture((void *)objc_msgSend(v20, "sourceConfiguration")))
                  objc_msgSend((id)objc_msgSend(v20, "sourceConfiguration"), "setSpatialOverCaptureEnabled:", 1);
              }
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v70, v78, 16);
            }
            while (v17);
          }
          if (objc_msgSend(v62, "suppressVideoEffects", v57))
          {
            v68 = 0u;
            v69 = 0u;
            *(_OWORD *)type = 0u;
            v67 = 0u;
            v32 = (void *)objc_msgSend(v62, "connectionConfigurations");
            v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", type, &v74, 16);
            if (v33)
            {
              v34 = v33;
              v35 = *(_QWORD *)v67;
              do
              {
                for (k = 0; k != v34; ++k)
                {
                  if (*(_QWORD *)v67 != v35)
                    objc_enumerationMutation(v32);
                  v37 = (void *)objc_msgSend(*(id *)(*(_QWORD *)&type[8] + 8 * k), "sourceConfiguration");
                  objc_msgSend(v37, "setBackgroundBlurEnabled:", 0);
                  objc_msgSend(v37, "setStudioLightingEnabled:", 0);
                  objc_msgSend(v37, "setReactionEffectsEnabled:", 0);
                  objc_msgSend(v37, "setBackgroundReplacementEnabled:", 0);
                }
                v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", type, &v74, 16);
              }
              while (v34);
            }
          }
          os_unfair_lock_lock(lock);
          v38 = *(void **)&v63[102]._os_unfair_lock_opaque;
          if (v38 == v62)
          {
            os_unfair_lock_unlock(lock);
            v39 = 0;
            v40 = 0;
          }
          else
          {
            v39 = v38;
            os_unfair_lock_unlock(lock);
            v40 = cs_configurationChangesAreLiveReconfigurable(v39, v62);
          }
          os_unfair_lock_lock(lock);
          v41 = v61;
          if (*(double *)&v63[94]._os_unfair_lock_opaque == 0.0)
            *(CFAbsoluteTime *)&v63[94]._os_unfair_lock_opaque = CFAbsoluteTimeGetCurrent();
          v42 = *(void **)&v63[102]._os_unfair_lock_opaque;
          if (v42 == v62)
          {
            v42 = v62;
          }
          else
          {
            *(_QWORD *)&v63[102]._os_unfair_lock_opaque = v62;
            v43 = *(void **)&v63[110]._os_unfair_lock_opaque;
            *(_QWORD *)&v63[110]._os_unfair_lock_opaque = v61;
            v41 = v43;
          }
          if (LOBYTE(v63[124]._os_unfair_lock_opaque) != v40)
            LOBYTE(v63[124]._os_unfair_lock_opaque) = v40;
          BYTE2(v63[83]._os_unfair_lock_opaque) = cs_configurationUsesCamera(v62);
          v44 = *(void **)&v63[102]._os_unfair_lock_opaque;
          v45 = MEMORY[0x1E0C809B0];
          if (v44)
          {
            v46 = (void *)objc_msgSend(v44, "connectionConfigurations");
            v78[0] = v45;
            v78[1] = 3221225472;
            v78[2] = __cs_configurationUsesSourceType_block_invoke;
            v78[3] = &__block_descriptor_36_e50_B32__0__FigCaptureConnectionConfiguration_8Q16_B24l;
            v79 = 2;
            v47 = objc_msgSend(v46, "indexOfObjectPassingTest:", v78) != 0x7FFFFFFFFFFFFFFFLL;
            v44 = *(void **)&v63[102]._os_unfair_lock_opaque;
          }
          else
          {
            v47 = 0;
          }
          HIBYTE(v63[85]._os_unfair_lock_opaque) = v47;
          HIBYTE(v63[83]._os_unfair_lock_opaque) = objc_msgSend(v44, "allowedToRunInMultitaskingMode");
          *(_QWORD *)&v63[128]._os_unfair_lock_opaque = 0;
          captureSession_updateRunningCondition(v59, 0, 0);
          os_unfair_lock_unlock(lock);

          v65[0] = v45;
          v65[1] = 3221225472;
          v65[2] = __captureSession_SetConfiguration_block_invoke;
          v65[3] = &__block_descriptor_48_e5_v8__0l;
          v65[4] = v63;
          v65[5] = v59;
          captureSession_performBlockOnWorkerQueue(v59, (uint64_t)v65);
        }
        return;
      }
      LODWORD(v57) = 0;
      FigDebugAssert3();
      v54 = FigSignalErrorAt();
      if (!(_DWORD)v54)
        return;
      v56 = v54;
      v52 = (void *)MEMORY[0x1A858DD40](v54, v55);
      v53 = (const void *)cs_notificationPayloadWithConfigurationIDAndErrorStatus(objc_msgSend(a2, "configurationID", v57, v2), v56);
    }
    else
    {
      FigDebugAssert3();
      v49 = FigSignalErrorAt();
      if (!(_DWORD)v49)
        return;
      v51 = v49;
      v52 = (void *)MEMORY[0x1A858DD40](v49, v50);
      v53 = (const void *)cs_notificationPayloadWithErrorStatus(v51);
    }
    captureSession_postNotificationWithPayload(a1, CFSTR("ConfigurationCommitted"), v53);
    objc_autoreleasePoolPop(v52);
  }
}

uint64_t cs_shouldEnableOverCapture(void *a1)
{
  unsigned int v2;
  BOOL v3;

  if (objc_msgSend(a1, "sourceType") == 1
    && ((v2 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), (uint64_t)CFSTR("DeviceType")), "intValue"), v2 <= 9)? (v3 = ((1 << v2) & 0x310) == 0): (v3 = 1), !v3&& ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", CFSTR("AVCaptureSessionPresetPhoto")) & 1) != 0|| objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "AVCaptureSessionPresets"), "containsObject:", CFSTR("AVCaptureSessionPresetHigh")))&& objc_msgSend(a1, "imageControlMode") != 4))
  {
    return objc_msgSend(a1, "spatialOverCaptureEnabled");
  }
  else
  {
    return 0;
  }
}

uint64_t captureSession_checkClientSessionIsAllowedToRun(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t DerivedStorage;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  char v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(DerivedStorage + 320));
  v10 = cs_configurationUsesCamera(a2);
  if (*(_BYTE *)(DerivedStorage + 344))
  {
    if (!v10)
    {
LABEL_15:
      v11 = 0;
      *(_BYTE *)(DerivedStorage + 344) = 0;
      goto LABEL_22;
    }
    if (!*(_BYTE *)(DerivedStorage + 336))
      goto LABEL_8;
LABEL_7:
    if (!*(_BYTE *)(DerivedStorage + 333))
    {
      v11 = 4294950893;
      goto LABEL_22;
    }
    goto LABEL_8;
  }
  if (!v10)
    goto LABEL_21;
  if (*(_BYTE *)(DerivedStorage + 336))
    goto LABEL_7;
  if ((!*(_BYTE *)(DerivedStorage + 337) || *(_BYTE *)(DerivedStorage + 335)) && !*(_BYTE *)(DerivedStorage + 342))
  {
LABEL_21:
    v11 = 0;
    goto LABEL_22;
  }
LABEL_8:
  if (*(_BYTE *)(DerivedStorage + 337) && !*(_BYTE *)(DerivedStorage + 335))
  {
    v11 = 4294950888;
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 342))
      v11 = 4294950344;
    else
      v11 = 0;
    if (*(_BYTE *)(DerivedStorage + 344) && !*(_BYTE *)(DerivedStorage + 342))
      goto LABEL_15;
  }
LABEL_22:
  if (a3)
    *a3 = *(_BYTE *)(DerivedStorage + 333);
  if (a4)
  {
    v12 = *(void **)(DerivedStorage + 352);
    if ((objc_msgSend(v12, "isEqualToString:", 0x1E493F498) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", 0x1E493F4B8) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", CFSTR("LockScreen")) & 1) != 0
      || (objc_msgSend(v12, "isEqualToString:", 0x1E493F4D8) & 1) != 0)
    {
      v13 = 1;
    }
    else
    {
      v13 = objc_msgSend(v12, "isEqualToString:", 0x1E493F4F8);
    }
    v14 = objc_msgSend(+[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor](FigCaptureDeviceLockStateMonitor, "sharedDeviceLockStateMonitor"), "deviceIsLocked");
    v15 = *(_BYTE *)(DerivedStorage + 81);
    if (v15)
    {
      if (*(_BYTE *)(DerivedStorage + 333))
        v16 = v14;
      else
        v16 = 0;
      v15 = v16 & v13;
    }
    *a4 = v15;
  }
  if (a5)
    *a5 = *(_BYTE *)(DerivedStorage + 339);
  return v11;
}

void captureSession_updateRunningCondition(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  NSObject *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  _QWORD v21[5];
  int v22;
  _QWORD v23[5];
  int v24;
  _QWORD v25[5];
  int v26;
  _QWORD v27[5];
  char v28;
  os_log_type_t type;
  unsigned int v30;
  int v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(unsigned __int8 *)(DerivedStorage + 324);
  os_unfair_lock_assert_owner((const os_unfair_lock *)(DerivedStorage + 320));
  if (!*(_BYTE *)(DerivedStorage + 332))
  {
    if (v7)
      goto LABEL_7;
    v18 = 0;
    v20 = 0;
    v8 = 0;
    a2 = -16409;
LABEL_53:
    v19 = 1;
    goto LABEL_54;
  }
  if (v7)
  {
    if (*(_BYTE *)(DerivedStorage + 344) && *(_BYTE *)(DerivedStorage + 343))
    {
      a2 = -16404;
LABEL_7:
      *(_BYTE *)(DerivedStorage + 324) = 0;
      v18 = 0;
      v8 = 0;
      if (cs_errorIsFatal(a2))
        *(_DWORD *)(DerivedStorage + 328) = 0;
      else
        *(_DWORD *)(DerivedStorage + 328) = a2;
      v19 = 1;
      v20 = 1;
      goto LABEL_54;
    }
    if (*(_BYTE *)(DerivedStorage + 334))
    {
      if (*(_BYTE *)(DerivedStorage + 336) && !*(_BYTE *)(DerivedStorage + 333))
      {
        a2 = -16403;
        goto LABEL_7;
      }
      if (*(_BYTE *)(DerivedStorage + 340))
      {
        if (!*(_BYTE *)(DerivedStorage + 341))
        {
          *(_BYTE *)(DerivedStorage + 341) = 1;
          FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
          a2 = -16407;
          goto LABEL_7;
        }
        FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded();
      }
      else if (*(_BYTE *)(DerivedStorage + 337))
      {
        if (!*(_BYTE *)(DerivedStorage + 335))
        {
          a2 = -16408;
          goto LABEL_7;
        }
      }
      else if (*(_BYTE *)(DerivedStorage + 342))
      {
        a2 = -16952;
        goto LABEL_7;
      }
    }
    goto LABEL_52;
  }
  if (!*(_BYTE *)(DerivedStorage + 334))
  {
    if (!*(_BYTE *)(DerivedStorage + 344) || !*(_BYTE *)(DerivedStorage + 343))
    {
LABEL_43:
      a2 = 0;
      v20 = 0;
      v18 = 0;
      v19 = 1;
      *(_BYTE *)(DerivedStorage + 324) = 1;
      *(_DWORD *)(DerivedStorage + 328) = 0;
      v8 = 1;
      goto LABEL_54;
    }
    a2 = 0;
    v20 = 0;
    v8 = 0;
    v9 = -16404;
LABEL_46:
    v18 = v9;
    v19 = 0;
    goto LABEL_54;
  }
  if (*(_BYTE *)(DerivedStorage + 336) && !*(_BYTE *)(DerivedStorage + 333))
    goto LABEL_23;
  if ((!*(_BYTE *)(DerivedStorage + 337) || *(_BYTE *)(DerivedStorage + 335))
    && !*(_BYTE *)(DerivedStorage + 340)
    && !*(_BYTE *)(DerivedStorage + 342)
    && (!*(_BYTE *)(DerivedStorage + 344) || !*(_BYTE *)(DerivedStorage + 343)))
  {
    goto LABEL_43;
  }
  if (*(_BYTE *)(DerivedStorage + 336))
  {
LABEL_23:
    a2 = 0;
    v20 = 0;
    v8 = 0;
    v9 = -16403;
    goto LABEL_46;
  }
  if (*(_BYTE *)(DerivedStorage + 340))
  {
    a2 = 0;
    v20 = 0;
    v8 = 0;
    v9 = -16407;
    goto LABEL_46;
  }
  if (*(_BYTE *)(DerivedStorage + 337))
  {
    a2 = 0;
    v20 = 0;
    v8 = 0;
    v9 = -16408;
    goto LABEL_46;
  }
  if (*(_BYTE *)(DerivedStorage + 342))
  {
    a2 = 0;
    v20 = 0;
    v8 = 0;
    v9 = -16952;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(DerivedStorage + 344))
  {
LABEL_52:
    v18 = 0;
    a2 = 0;
    v20 = 0;
    v8 = 0;
    goto LABEL_53;
  }
  a2 = 0;
  v20 = 0;
  v8 = 0;
  if (*(_BYTE *)(DerivedStorage + 343))
    v10 = -16404;
  else
    v10 = 0;
  v18 = v10;
  v19 = *(_BYTE *)(DerivedStorage + 343) == 0;
LABEL_54:
  if (dword_1ECFE9590)
  {
    v30 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v8)
  {
    if (dword_1ECFE9590)
    {
      v30 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = __captureSession_updateRunningCondition_block_invoke;
    v27[3] = &__block_descriptor_41_e5_v8__0l;
    v27[4] = a1;
    v28 = a3;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v27);
  }
  if (v20)
  {
    if (dword_1ECFE9590)
    {
      v30 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v14 = v30;
      if (os_log_type_enabled(v13, type))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if (v15)
      {
        v16 = *(_QWORD *)(DerivedStorage + 72);
        v31 = 136315650;
        v32 = "captureSession_updateRunningCondition";
        v33 = 2114;
        v34 = v16;
        v35 = 1024;
        v36 = a2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __captureSession_updateRunningCondition_block_invoke_363;
    v25[3] = &__block_descriptor_44_e5_v8__0l;
    v25[4] = a1;
    v26 = a2;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v25);
  }
  if (v19)
    goto LABEL_74;
  if (cs_errorIsFatal(v18))
  {
    FigDebugAssert3();
    if ((a3 & 1) == 0)
    {
LABEL_72:
      if (v18 == *(_DWORD *)(DerivedStorage + 328))
        return;
    }
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(DerivedStorage + 328) = v18;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = __captureSession_updateRunningCondition_block_invoke_2;
  v23[3] = &__block_descriptor_44_e5_v8__0l;
  v23[4] = a1;
  v24 = v18;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v23);
LABEL_74:
  v17 = a3 ^ 1;
  if (!a2)
    v17 = 1;
  if (((v20 | v17) & 1) == 0)
  {
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __captureSession_updateRunningCondition_block_invoke_3;
    v21[3] = &__block_descriptor_44_e5_v8__0l;
    v21[4] = a1;
    v22 = a2;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v21);
  }
}

void captureSession_performBlockOnWorkerQueue(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v6 = *(NSObject **)(v5 + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockOnWorkerQueue_block_invoke;
    block[3] = &unk_1E4922E60;
    block[4] = a2;
    block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void *FigCaptureGetCaptureDeviceCreateFunction()
{
  void *CaptureService;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;

  CaptureService = fcc_probeCameraDriverAndLoadCaptureService();
  if (BWDeviceModelIsD9x() && !CaptureService)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    usleep(0xF4240u);
    CaptureService = fcc_probeCameraDriverAndLoadCaptureService();
  }
  if (!CaptureService)
  {
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return CaptureService;
}

void _executeBlockWithAutoreleasePool(void (**a1)(_QWORD))
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  a1[2](a1);

  objc_autoreleasePoolPop(v2);
}

__CFData *FigLivePhotoMetadataCopySetupDataAddingDimensions(const __CFData *a1, uint64_t a2)
{
  const __CFAllocator *v3;
  CFIndex Length;
  __CFData *MutableCopy;
  __CFData *v7;
  UInt8 v9[4];
  unsigned int v10;
  UInt8 bytes[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a1)
  {
    Length = CFDataGetLength(a1);
    MutableCopy = CFDataCreateMutableCopy(v3, Length + 16, a1);
  }
  else
  {
    MutableCopy = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 16);
  }
  v7 = MutableCopy;
  if (MutableCopy)
  {
    *(_QWORD *)bytes = 0x736D696410000000;
    *(_DWORD *)v9 = bswap32(a2);
    v10 = bswap32(HIDWORD(a2));
    CFDataAppendBytes(MutableCopy, bytes, 8);
    CFDataAppendBytes(v7, v9, 8);
  }
  return v7;
}

void *FigCaptureEncodedByteStreamFormatForPixelFormat(int a1)
{
  void *result;
  unsigned __int16 v3;
  int v4;
  int IsTenBit;
  int IsFullRange;
  void *v7;
  void *v8;

  if (a1 > 1717855599)
  {
    if (a1 <= 1751410031)
    {
      if (a1 == 1717855600)
        return &unk_1E49FC030;
      if (a1 == 1717856627)
        return &unk_1E49FC000;
    }
    else
    {
      switch(a1)
      {
        case 1751410032:
          return &unk_1E49FC018;
        case 1815491698:
          return &unk_1E49FC060;
        case 1751411059:
          return &unk_1E49FBFE8;
      }
    }
  }
  else
  {
    result = 0;
    if (a1 <= 1701722229)
    {
      if (a1 == 1278226488)
        return &unk_1E49FC048;
      v3 = 14438;
    }
    else
    {
      if (a1 == 1701722230 || a1 == 1701738598)
        return result;
      v3 = 30838;
    }
    if (a1 == (v3 | 0x656E0000))
      return result;
  }
  if (!FigCapturePixelFormatIsYCbCr(a1))
    return 0;
  result = 0;
  if (a1 > 1751527983)
  {
    if (a1 == 1751527984)
      return result;
    v4 = 2087216688;
  }
  else
  {
    if (a1 == 761816624)
      return result;
    v4 = 795371056;
  }
  if (a1 != v4)
  {
    IsTenBit = FigCapturePixelFormatIsTenBit(a1);
    IsFullRange = FigCapturePixelFormatIsFullRange(a1);
    if (IsTenBit)
    {
      v7 = &unk_1E49FC090;
      v8 = &unk_1E49FC078;
    }
    else
    {
      v7 = &unk_1E49FC0C0;
      v8 = &unk_1E49FC0A8;
    }
    if (IsFullRange)
      return v8;
    else
      return v7;
  }
  return result;
}

uint64_t TimestampedAudioBufferListReset(uint64_t result)
{
  unsigned int *v1;
  uint64_t v2;
  int v3;
  _DWORD *v4;

  if (result)
  {
    v1 = *(unsigned int **)(result + 48);
    if (v1)
    {
      v2 = *v1;
      if ((_DWORD)v2)
      {
        v3 = *(_DWORD *)(result + 16);
        v4 = v1 + 3;
        do
        {
          *v4 = v3;
          v4 += 4;
          --v2;
        }
        while (v2);
      }
    }
    *(_DWORD *)(result + 20) = 0;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void rqSenderHandleDequeue(uint64_t a1)
{
  ssize_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned __int16 v12;

  v12 = 0;
  os_retain(*(void **)(a1 + 120));
  voucher_adopt();
  v2 = read(*(_DWORD *)(a1 + 60), &v12, 2uLL);
  if (v2 < 0)
  {
LABEL_16:
    __error();
  }
  else
  {
    while (v2 == 2)
    {
      if (*(_DWORD *)(a1 + 40) > v12)
      {
        v3 = *(_QWORD *)(a1 + 32) + 32 * v12;
        v4 = *(int *)(v3 + 60);
        rqSenderCleanupQueueElement(v3 + 32);
        *(_DWORD *)(a1 + 44) = (v12 + 1) % *(_DWORD *)(a1 + 40);
        v5 = *(_QWORD *)(a1 + 32);
        if (*(int *)(v5 + 4 * v4 + 20) <= 0)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          v5 = *(_QWORD *)(a1 + 32);
        }
        if (*(int *)(v5 + 4) <= 0)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          v5 = *(_QWORD *)(a1 + 32);
        }
        v6 = (unsigned int *)(v5 + 4 * v4 + 20);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        v8 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stxr(v10, v8));
        if (!v10 && *(_BYTE *)(a1 + 114))
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
      }
      v2 = read(*(_DWORD *)(a1 + 60), &v12, 2uLL);
      if (v2 < 0)
        goto LABEL_16;
    }
    *(_BYTE *)(a1 + 113) = 1;
    if (*(_BYTE *)(a1 + 114))
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 96));
    dispatch_suspend(*(dispatch_object_t *)(a1 + 80));
    *(_BYTE *)(a1 + 112) = 1;
  }
  v11 = (void *)voucher_adopt();
  os_release(v11);
}

double rqSenderCleanupQueueElement(uint64_t a1)
{
  __IOSurface *v2;
  double result;

  v2 = *(__IOSurface **)(a1 + 16);
  if (v2)
  {
    IOSurfaceDecrementUseCount(v2);
    CFRelease(*(CFTypeRef *)(a1 + 16));
  }
  FigSharedMemBlockRelease(*(_QWORD *)a1);
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t VisionLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = VisionLibraryCore();
  if (!result)
    VisionLibrary_cold_1(&v1);
  return result;
}

uint64_t VisionLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = VisionLibraryCore_frameworkLibrary;
  v6 = VisionLibraryCore_frameworkLibrary;
  if (!VisionLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E491FB20;
    v8 = *(_OWORD *)&off_1E491FB30;
    v1 = _sl_dlopen();
    v4[3] = v1;
    VisionLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D78B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureTCCAccessPreflight()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  tcc_service_singleton_for_CF_name();
  tcc_credential_singleton_for_self();
  v0 = (void *)tcc_message_options_create();
  tcc_message_options_set_reply_handler_policy();
  tcc_message_options_set_request_prompt_policy();
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  tcc_server_message_request_authorization();

  v1 = v6[3];
  if (v1 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = 1;
  }
  else
  {
    v2 = dword_1A32B14C0[v1];
  }
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2D78D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id BWInferenceSmartCameraNetworkForVersion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[BWEspressoInferenceAdapter locateNetworkFileFromFormat:defaultOverrideKey:version:e5Bundle:](BWEspressoInferenceAdapter, "locateNetworkFileFromFormat:defaultOverrideKey:version:e5Bundle:", CFSTR("smartcam_MAJOR_MINOR_PATCH.PLATFORM"), CFSTR("smart_camera_pipeline_model"), a2 & 0xFFFFFFFFFFFFLL, a3);
}

id BWInferenceTextLocalizationNetworkForVersion_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[BWEspressoInferenceAdapter locateNetworkFileFromFormat:defaultOverrideKey:version:e5Bundle:](BWEspressoInferenceAdapter, "locateNetworkFileFromFormat:defaultOverrideKey:version:e5Bundle:", CFSTR("text_localization-MAJOR_MINOR_PATCH.PLATFORM"), CFSTR("text_localization_model"), a2 & 0xFFFFFFFFFFFFLL, a3);
}

BWInferenceScheduler *captureSession_inferenceScheduler()
{
  uint64_t DerivedStorage;
  BWInferenceScheduler *result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(BWInferenceScheduler **)(DerivedStorage + 648);
  if (!result)
  {
    result = objc_alloc_init(BWInferenceScheduler);
    *(_QWORD *)(DerivedStorage + 648) = result;
  }
  return result;
}

uint64_t FigVideoCaptureSourcesActivateAndCreateDevices(CFArrayRef theArray, const __CFArray *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, unsigned int a7, _QWORD *a8)
{
  uint64_t v8;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  char v26;
  char v27;
  CFIndex v28;
  uint64_t v29;
  void *ValueAtIndex;
  uint64_t DerivedStorage;
  void *v32;
  char v33;
  int v34;
  int v35;
  id v36;
  uint64_t v37;
  id v38;
  int v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  int v44;
  pthread_mutex_t **v45;
  BOOL v46;
  _BOOL4 v47;
  unsigned int v48;
  _BOOL4 v49;
  BOOL v50;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t k;
  void *v67;
  CFIndex v68;
  const void *v69;
  void *v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  __int128 v80;
  int v81;
  void *v82;
  char v83;
  char v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *m;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t n;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BWFigVideoCaptureDevice *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  NSObject *v109;
  unsigned int v110;
  unsigned int v111;
  void *v112;
  float v113;
  float v114;
  float v115;
  id *v116;
  NSObject *v117;
  unsigned int v118;
  unsigned int v119;
  float v120;
  double v121;
  float v122;
  id v123;
  uint64_t v124;
  float v125;
  float v126;
  float v127;
  uint64_t *v128;
  float v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ii;
  void *v135;
  const __CFDictionary *v136;
  __int128 v137;
  _BOOL8 HasAccessToCamera;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int updated;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t jj;
  void *v148;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  void *v157;
  BWMultiCamConfiguration *v159;
  int v160;
  id obj;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v169;
  void *v170;
  int v171;
  unsigned int v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  CFIndex v179;
  const __CFArray *v180;
  int v181;
  const __CFArray *v182;
  CFIndex Count;
  void *v184;
  id v185;
  const void *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unsigned int v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  os_log_type_t type[16];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  int v218;
  os_log_type_t v219;
  unsigned int v220;
  _BYTE v221[128];
  _BYTE v222[128];
  _BYTE v223[128];
  _BYTE v224[128];
  _BYTE v225[128];
  int v226;
  const char *v227;
  __int16 v228;
  double v229;
  __int16 v230;
  double v231;
  __int128 v232[8];
  _OWORD v233[8];
  __int128 v234;
  __int128 v235;
  _OWORD v236[8];
  uint64_t v237;

  v11 = a2;
  v12 = theArray;
  v237 = *MEMORY[0x1E0C80C00];
  v209 = 0;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (v11)
    {
LABEL_3:
      v13 = CFArrayGetCount(v11);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  v170 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", Count);
  v14 = objc_msgSend(a6, "objectForKeyedSubscript:");
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  v15 = (id *)&unk_1ECFE9000;
  if (Count != v13)
  {
    v157 = 0;
    obj = 0;
    v162 = 0;
    v185 = 0;
    v55 = -12780;
LABEL_81:
    v209 = v55;
    goto LABEL_234;
  }
  v165 = (void *)v14;
  v157 = (void *)objc_msgSend((id)sActiveVideoCaptureSources, "copy");
  if (objc_msgSend(a3, "isEqualToString:", 0x1E493D718))
  {
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    v16 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v205, v225, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v206;
LABEL_10:
      v19 = 0;
      while (1)
      {
        if (*(_QWORD *)v206 != v18)
          objc_enumerationMutation(a6);
        if ((objc_msgSend((id)objc_msgSend(a6, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v205 + 1) + 8 * v19)), "invalidated") & 1) != 0)break;
        if (v17 == ++v19)
        {
          v17 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v205, v225, 16);
          if (!v17)
            goto LABEL_16;
          goto LABEL_10;
        }
      }
      obj = 0;
      v162 = 0;
      v185 = 0;
      v55 = -12785;
      goto LABEL_81;
    }
  }
LABEL_16:
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v20 = (void *)sActiveVideoCaptureSources;
  v21 = objc_msgSend((id)sActiveVideoCaptureSources, "countByEnumeratingWithState:objects:count:", &v201, v224, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v202;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v202 != v23)
          objc_enumerationMutation(v20);
        captureSource_deactivateInternal(*(const void **)(*((_QWORD *)&v201 + 1) + 8 * i));
      }
      v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v201, v224, 16);
    }
    while (v22);
  }
  objc_msgSend((id)sActiveVideoCaptureSources, "removeAllObjects");
  v169 = a6;
  v180 = v11;
  v182 = v12;
  if (Count < 1)
  {
    v181 = 0;
    v160 = 0;
    v27 = 0;
    obj = 0;
    v162 = 0;
    v44 = 0;
    v159 = 0;
    v45 = (pthread_mutex_t **)&unk_1ECFE9000;
    v42 = v165;
  }
  else
  {
    v172 = a7;
    v181 = 0;
    v160 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    obj = 0;
    v162 = 0;
    v28 = 0;
    v29 = *MEMORY[0x1E0D059D0];
    v176 = *MEMORY[0x1E0D05A50];
    v178 = *MEMORY[0x1E0D05A38];
    v174 = *MEMORY[0x1E0D05A18];
    do
    {
      CFArrayGetValueAtIndex(v12, v28);
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, v28);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v32 = *(void **)(DerivedStorage + 104);
      if (objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("CaptureDeviceID")), "isEqualToString:", 0x1E492D2B8))
      {
        ++v181;
        v33 = v26 | (objc_msgSend((id)objc_msgSend(v165, "supportedProperties"), "objectForKeyedSubscript:", v29) != 0);
        if ((v33 & 1) != 0)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
          if (*(_BYTE *)(DerivedStorage + 12))
          {
            v209 = -12785;
          }
          else
          {
            v34 = objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
            v35 = objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
            if (*(_QWORD *)(DerivedStorage + 144))
            {
              if ((v34 == 12 || v34 == 6)
                && (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1E4952DB8), "BOOLValue") & 1) == 0)
              {
                if (v34 == 6)
                  v40 = v178;
                else
                  v40 = v176;
                v38 = v162;
                if (!v162)
                  v38 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                v162 = v38;
                v37 = v40;
              }
              else
              {
                v36 = obj;
                if (!obj)
                  v36 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                v37 = objc_msgSend(*(id *)(DerivedStorage + 144), "allKeys");
                obj = v36;
                v38 = v36;
              }
            }
            else
            {
              v39 = v35;
              v38 = v162;
              if (!v162)
                v38 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
              v162 = v38;
              if (v34 == 13)
              {
                v37 = v174;
              }
              else
              {
                v41 = v38;
                v37 = BWCaptureDevicePositionAndDeviceTypeToPortType(v39, v34);
                v38 = v41;
                v12 = v182;
              }
            }
            objc_msgSend(v38, "addObject:", v37);
            if (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1E4952D98), "BOOLValue"))v160 |= objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", 0x1E4952238), "BOOLValue");
            if (objc_msgSend((id)objc_msgSend(ValueAtIndex, "objectForKeyedSubscript:", 0x1E4952D78), "BOOLValue"))v25 |= objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", 0x1E4952258), "BOOLValue");
          }
          pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
          if (v209)
          {
            v151 = v8;
            LODWORD(v150) = v209;
            FigDebugAssert3();
            v185 = 0;
            v45 = (pthread_mutex_t **)&unk_1ECFE9000;
            v15 = (id *)&unk_1ECFE9000;
            goto LABEL_233;
          }
          v27 = 1;
          v26 = 1;
        }
        else
        {
          v26 = 0;
          v27 |= v33;
        }
      }
      ++v28;
      v11 = v180;
    }
    while (Count != v28);
    v42 = v165;
    if ((v26 & 1) != 0)
    {
      if ((v25 & 1) != 0
        && (v43 = *MEMORY[0x1E0D05A40], (objc_msgSend(v162, "containsObject:", *MEMORY[0x1E0D05A40]) & 1) == 0))
      {
        v199 = 0u;
        v200 = 0u;
        v197 = 0u;
        v198 = 0u;
        v56 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v197, v223, 16);
        v15 = (id *)&unk_1ECFE9000;
        a6 = v169;
        if (v56)
        {
          v57 = v56;
          v58 = *(_QWORD *)v198;
          while (2)
          {
            for (j = 0; j != v57; ++j)
            {
              if (*(_QWORD *)v198 != v58)
                objc_enumerationMutation(obj);
              if ((objc_msgSend(*(id *)(*((_QWORD *)&v197 + 1) + 8 * j), "containsObject:", v43) & 1) != 0)
              {
                v44 = 0;
                v45 = (pthread_mutex_t **)&unk_1ECFE9000;
                v42 = v165;
                goto LABEL_59;
              }
            }
            v57 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v197, v223, 16);
            if (v57)
              continue;
            break;
          }
        }
        v45 = (pthread_mutex_t **)&unk_1ECFE9000;
        v60 = v162;
        v42 = v165;
        if (!v162)
          v60 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v162 = v60;
        objc_msgSend(v60, "addObject:", v43);
        v44 = 1;
      }
      else
      {
        v44 = 0;
        v45 = (pthread_mutex_t **)&unk_1ECFE9000;
        v15 = (id *)&unk_1ECFE9000;
        a6 = v169;
      }
LABEL_59:
      v159 = +[BWMultiCamConfiguration configurationWithUnsynchronizedActiveStreamsPortTypes:synchronizedActiveStreamsGroupsPortTypes:stereoVideoCaptureEnabled:](BWMultiCamConfiguration, "configurationWithUnsynchronizedActiveStreamsPortTypes:synchronizedActiveStreamsGroupsPortTypes:stereoVideoCaptureEnabled:", v162, obj, v172);
    }
    else
    {
      v44 = 0;
      v159 = 0;
      v45 = (pthread_mutex_t **)&unk_1ECFE9000;
      v15 = (id *)&unk_1ECFE9000;
      a6 = v169;
    }
  }
  if (sTimeOfFlightAFEnabled)
    v46 = v42 == 0;
  else
    v46 = 1;
  if (!v46)
  {
    v47 = -[BWMultiCamConfiguration isEqual:](v159, "isEqual:", +[BWMultiCamConfiguration configurationWithCurrentStateFromCaptureDevice:](BWMultiCamConfiguration, "configurationWithCurrentStateFromCaptureDevice:", v42));
    v27 = !v47;
    if ((v47 & v160 & 1) == 0)
    {
      v48 = cs_resetTimeOfFlightAutoFocus(v42);
      v209 = v48;
      if (v48)
      {
        v151 = v8;
        LODWORD(v150) = v48;
        goto LABEL_256;
      }
    }
  }
  v156 = v44;
  if (sStructuredLightAFEnabled)
  {
    if (v42)
    {
      v49 = -[BWMultiCamConfiguration isEqual:](v159, "isEqual:", +[BWMultiCamConfiguration configurationWithCurrentStateFromCaptureDevice:](BWMultiCamConfiguration, "configurationWithCurrentStateFromCaptureDevice:", v42));
      v27 = !v49;
      if ((v44 & v49 & 1) == 0)
      {
        v50 = v49;
        FigSimpleMutexCheckIsLockedOnThisThread();
        sStructuredLightAFEnabled = 0;
        sStructuredLightAFSuspended = 1;
        cs_updateStructuredLightAFEnabledStatus();
        if (dword_1ECFE9450)
        {
          LODWORD(v232[0]) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v52 = v232[0];
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
            v53 = v52;
          else
            v53 = v52 & 0xFFFFFFFE;
          if (v53)
          {
            LODWORD(v233[0]) = 136315650;
            *(_QWORD *)((char *)v233 + 4) = "cs_resetStructuredLightAutoFocus";
            WORD6(v233[0]) = 1024;
            *(_DWORD *)((char *)v233 + 14) = sStructuredLightAFSuspended;
            WORD1(v233[1]) = 1024;
            DWORD1(v233[1]) = sStructuredLightAFEnabled;
            LODWORD(v151) = 24;
            v150 = (int *)v233;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v45 = (pthread_mutex_t **)&unk_1ECFE9000;
          v42 = v165;
          if (v50)
            goto LABEL_94;
          goto LABEL_78;
        }
      }
    }
  }
  if ((v27 & 1) != 0)
  {
LABEL_78:
    v54 = objc_msgSend(v42, "setPropertyIfSupported:value:", *MEMORY[0x1E0D059D0], 0, v150, v151);
    v209 = v54;
    if (!v54)
    {
      objc_msgSend(v42, "resetSynchronizedStreamsGroups");
      v185 = 0;
      v155 = 1;
      goto LABEL_106;
    }
    v151 = v8;
    LODWORD(v150) = v54;
LABEL_256:
    FigDebugAssert3();
    v185 = 0;
    goto LABEL_233;
  }
LABEL_94:
  v185 = -[BWMultiCamConfiguration copyActiveSynchronizedStreamsGroupsForDevice:errorOut:](v159, "copyActiveSynchronizedStreamsGroupsForDevice:errorOut:", v42, &v209, v150, v151);
  if (v209)
  {
    v151 = v8;
    LODWORD(v150) = v209;
    goto LABEL_248;
  }
  v195 = 0u;
  v196 = 0u;
  v193 = 0u;
  v194 = 0u;
  v61 = (void *)objc_msgSend(v42, "synchronizedStreamsGroups");
  v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v193, v222, 16);
  if (v62)
  {
    v63 = v62;
    v64 = *(_QWORD *)v194;
    v65 = *MEMORY[0x1E0D081A0];
    do
    {
      for (k = 0; k != v63; ++k)
      {
        if (*(_QWORD *)v194 != v64)
          objc_enumerationMutation(v61);
        v67 = *(void **)(*((_QWORD *)&v193 + 1) + 8 * k);
        if ((objc_msgSend(v185, "containsObject:", v67) & 1) == 0)
          objc_msgSend(v67, "setProperty:value:", v65, 0);
      }
      v63 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v193, v222, 16);
    }
    while (v63);
    v155 = 0;
    v45 = (pthread_mutex_t **)&unk_1ECFE9000;
  }
  else
  {
    v155 = 0;
  }
LABEL_106:
  if (Count >= 1)
  {
    v68 = 0;
    v164 = *MEMORY[0x1E0D05A38];
    v163 = *MEMORY[0x1E0D05A50];
    v187 = *MEMORY[0x1E0D05A20];
    while (1)
    {
      v179 = v68;
      v69 = CFArrayGetValueAtIndex(v12, v68);
      v70 = (void *)objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 104), "objectForKeyedSubscript:", CFSTR("CaptureDeviceID"));
      v71 = a6;
      v72 = v69;
      v73 = objc_msgSend(v71, "objectForKeyedSubscript:", v70);
      v74 = objc_msgSend(v70, "isEqualToString:", 0x1E492D2B8);
      if (v181 > 1)
        v75 = v74;
      else
        v75 = 0;
      v177 = v75;
      v76 = (void *)CFArrayGetValueAtIndex(v11, v68);
      v77 = CMBaseObjectGetDerivedStorage();
      FigSimpleMutexCheckIsLockedOnThisThread();
      pthread_mutex_lock(*(pthread_mutex_t **)(v77 + 48));
      if (*(_BYTE *)(v77 + 12))
      {
        v151 = v8;
        LODWORD(v150) = 0;
        FigDebugAssert3();
        v123 = 0;
        v106 = -12785;
        goto LABEL_204;
      }
      if (*(_DWORD *)(v77 + 8) != 1)
      {
        v123 = 0;
        v106 = -12780;
        goto LABEL_204;
      }
      captureSource_turnOffAndTeardownFigFlashlight(v72);
      v218 = 0;
      v78 = CMBaseObjectGetDerivedStorage();
      v79 = *(void **)(v78 + 104);
      v80 = *(_OWORD *)(v78 + 32);
      v234 = *(_OWORD *)(v78 + 16);
      v235 = v80;
      v173 = v79;
      v81 = objc_msgSend((id)objc_msgSend(v79, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
      v82 = (void *)objc_msgSend(v76, "objectForKeyedSubscript:", 0x1E4952DD8);
      v171 = v82 ? objc_msgSend(v82, "intValue") : 1;
      v83 = objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", 0x1E4952DB8, v150, v151), "BOOLValue");
      v186 = v72;
      v188 = v77;
      v184 = v76;
      v175 = v73;
      if (!*(_QWORD *)(v78 + 144))
        break;
      if (v81 == 6 || v81 == 12)
        v85 = v83;
      else
        v85 = 1;
      if ((v85 & 1) == 0)
      {
        if (v81 == 6)
          v93 = v164;
        else
          v93 = v163;
        v88 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        objc_msgSend(*(id *)(v78 + 144), "objectForKeyedSubscript:", v93);
        v94 = CMBaseObjectGetDerivedStorage();
        v95 = cs_addObjectToStreamsAttributes(v94, v88);
        v218 = v95;
        if (v95)
        {
          v153 = v8;
          LODWORD(v150) = v95;
          FigDebugAssert3();
LABEL_178:
          v15 = (id *)&unk_1ECFE9000;
          goto LABEL_179;
        }
        goto LABEL_138;
      }
      v86 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      *(_OWORD *)type = 0u;
      v215 = 0u;
      v216 = 0u;
      v217 = 0u;
      v87 = (void *)objc_msgSend(*(id *)(v78 + 144), "allKeys");
      v88 = (void *)objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", type, v233, 16);
      if (v88)
      {
        v89 = *(_QWORD *)v215;
        while (2)
        {
          for (m = 0; m != v88; m = (char *)m + 1)
          {
            if (*(_QWORD *)v215 != v89)
              objc_enumerationMutation(v87);
            objc_msgSend(*(id *)(v78 + 144), "objectForKeyedSubscript:", *(_QWORD *)(*(_QWORD *)&type[8] + 8 * (_QWORD)m));
            v91 = CMBaseObjectGetDerivedStorage();
            v92 = cs_addObjectToStreamsAttributes(v91, v86);
            v218 = v92;
            if (v92)
            {
              v153 = v8;
              LODWORD(v150) = v92;
              FigDebugAssert3();
              v45 = (pthread_mutex_t **)&unk_1ECFE9000;
              v15 = (id *)&unk_1ECFE9000;
              v12 = v182;
              goto LABEL_179;
            }
          }
          v88 = (void *)objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", type, v233, 16);
          if (v88)
            continue;
          break;
        }
        v45 = (pthread_mutex_t **)&unk_1ECFE9000;
      }
LABEL_139:
      if (*(_QWORD *)(v78 + 152))
      {
        v88 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v210 = 0u;
        v211 = 0u;
        v212 = 0u;
        v213 = 0u;
        v96 = (void *)objc_msgSend(*(id *)(v78 + 152), "allKeys");
        v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v210, v232, 16);
        if (v97)
        {
          v98 = v97;
          v99 = *(_QWORD *)v211;
          while (2)
          {
            for (n = 0; n != v98; ++n)
            {
              if (*(_QWORD *)v211 != v99)
                objc_enumerationMutation(v96);
              v101 = *(_QWORD *)(*((_QWORD *)&v210 + 1) + 8 * n);
              if (v81 != 13
                || (objc_msgSend(*(id *)(*((_QWORD *)&v210 + 1) + 8 * n), "isEqualToString:", v187) & 1) == 0)
              {
                objc_msgSend(*(id *)(v78 + 152), "objectForKeyedSubscript:", v101);
                v102 = CMBaseObjectGetDerivedStorage();
                v103 = cs_addObjectToStreamsAttributes(v102, v88);
                v218 = v103;
                if (v103)
                {
                  v153 = v8;
                  LODWORD(v150) = v103;
                  FigDebugAssert3();
                  v45 = (pthread_mutex_t **)&unk_1ECFE9000;
                  v15 = (id *)&unk_1ECFE9000;
                  v12 = v182;
                  goto LABEL_208;
                }
              }
            }
            v98 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v210, v232, 16);
            if (v98)
              continue;
            break;
          }
          v45 = (pthread_mutex_t **)&unk_1ECFE9000;
          v72 = v186;
        }
        v77 = v188;
      }
      FigSimpleMutexCheckIsLockedOnThisThread();
      FigSimpleMutexCheckIsLockedOnThisThread();
      if (*(_QWORD *)(v78 + 80))
        FigDebugAssert3();
      v104 = [BWFigVideoCaptureDevice alloc];
      v236[0] = v234;
      v236[1] = v235;
      LODWORD(v154) = v171;
      v105 = -[BWFigVideoCaptureDevice initWithCaptureDevice:attributes:synchronizedStreamsAttributes:unsynchronizedStreamsAttributes:multiCamEnabled:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:deviceClientPriority:error:](v104, "initWithCaptureDevice:attributes:synchronizedStreamsAttributes:unsynchronizedStreamsAttributes:multiCamEnabled:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:deviceClientPriority:error:", v175, v173, v86, v88, v177, a3, v236, a4, a5, v154, &v218);
      *(_QWORD *)(v78 + 80) = v105;
      v106 = v218;
      if (v218)
      {
        v12 = v182;
LABEL_214:
        v15 = (id *)&unk_1ECFE9000;
LABEL_215:
        v151 = v8;
        LODWORD(v150) = v106;
        FigDebugAssert3();
        v123 = 0;
        goto LABEL_204;
      }
      v12 = v182;
      if (!v105)
      {
        v106 = -12786;
        goto LABEL_214;
      }
      objc_msgSend(*(id *)(v78 + 80), "setUltraHighResolutionZeroShutterLagSupportEnabled:", objc_msgSend((id)objc_msgSend(v184, "objectForKeyedSubscript:", 0x1E4952DF8), "BOOLValue"));
      objc_msgSend(*(id *)(v78 + 176), "setObject:forKeyedSubscript:", CMClockGetHostTimeClock(), CFSTR("Clock"));
      objc_msgSend(*(id *)(v78 + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), 0x1E4952E78);
      v107 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)(v107 + 200) = 0;
      if (*(_QWORD *)(v107 + 80))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        v108 = CMNotificationCenterAddListener();
        if (dword_1ECFE9450)
        {
          v220 = 0;
          v219 = OS_LOG_TYPE_DEFAULT;
          v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v110 = v220;
          if (os_log_type_enabled(v109, v219))
            v111 = v110;
          else
            v111 = v110 & 0xFFFFFFFE;
          if (v111)
          {
            v226 = 136315394;
            v227 = "captureSource_registerDeviceNotificationListeners";
            v228 = 2048;
            v229 = *(double *)&v72;
            LODWORD(v152) = 22;
            v150 = &v226;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v77 = v188;
        }
        v218 = v108;
        if (!v108)
        {
          if ((objc_msgSend((id)objc_msgSend(*(id *)(v78 + 104), "objectForKeyedSubscript:", CFSTR("Torch")), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(*(id *)(v78 + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue"))
          {
            v112 = *(void **)(v78 + 80);
            objc_msgSend((id)sThermalMonitor_0, "maxTorchLevel", v150, v152);
            v114 = v113;
            objc_msgSend((id)sPowerMonitor, "maxTorchLevel");
            v116 = (id *)(v114 >= v115 ? &sPowerMonitor : &sThermalMonitor_0);
            objc_msgSend(*v116, "maxTorchLevel");
            objc_msgSend(v112, "setMaxTorchLevel:");
            if (dword_1ECFE9450)
            {
              v220 = 0;
              v219 = OS_LOG_TYPE_DEFAULT;
              v117 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v118 = v220;
              if (os_log_type_enabled(v117, v219))
                v119 = v118;
              else
                v119 = v118 & 0xFFFFFFFE;
              if (v119)
              {
                objc_msgSend((id)sThermalMonitor_0, "maxTorchLevel");
                v121 = v120;
                objc_msgSend((id)sPowerMonitor, "maxTorchLevel");
                v226 = 136315650;
                v227 = "captureSource_bringupBWFigVideoCaptureDevice";
                v228 = 2048;
                v229 = v121;
                v230 = 2048;
                v231 = v122;
                LODWORD(v152) = 32;
                v150 = &v226;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v77 = v188;
            }
          }
          objc_msgSend(*(id *)(v78 + 80), "sendCalibrationDataToISP", v150, v152);
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(*(_QWORD *)(v78 + 80), *(unsigned __int8 *)(v78 + 228));
          goto LABEL_178;
        }
      }
      else
      {
        FigDebugAssert3();
        v108 = -12780;
        v218 = -12780;
      }
      v153 = v8;
      LODWORD(v150) = v108;
      FigDebugAssert3();
      v15 = (id *)&unk_1ECFE9000;
LABEL_208:
      v72 = v186;
      v77 = v188;
LABEL_179:
      v106 = v218;
      if (v218)
        goto LABEL_215;
      *(_BYTE *)(v77 + 13) = 1;
      v123 = *(id *)(v77 + 80);
      v124 = objc_msgSend((id)sThermalMonitor_0, "thermalLevel");
      objc_msgSend((id)sPowerMonitor, "maxTorchLevel");
      v126 = v125;
      objc_msgSend((id)sThermalMonitor_0, "maxTorchLevel");
      if (v126 >= v127)
        v128 = &sThermalMonitor_0;
      else
        v128 = &sPowerMonitor;
      objc_msgSend((id)*v128, "maxTorchLevel", v150, v153);
      captureSource_setThermalLevelAndMaxTorchLevel(v77, v124, v129);
      objc_msgSend((id)sSystemPressureMonitor, "callSystemPressureLevelChangedHandler");
      if (v184
        && objc_msgSend((id)objc_msgSend(*(id *)(v77 + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
      {
        *(_BYTE *)(v77 + 230) = objc_msgSend((id)objc_msgSend(v184, "objectForKeyedSubscript:", CFSTR("SuspendAdjustingFocusNotifications")), "BOOLValue");
      }
      memset(v233, 0, 64);
      v130 = *(void **)(v77 + 192);
      v131 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", v233, v236, 16);
      if (v131)
      {
        v132 = v131;
        v133 = **(_QWORD **)&v233[1];
        do
        {
          for (ii = 0; ii != v132; ++ii)
          {
            if (**(_QWORD **)&v233[1] != v133)
              objc_enumerationMutation(v130);
            v135 = *(void **)(*((_QWORD *)&v233[0] + 1) + 8 * ii);
            if ((!objc_msgSend(v135, "isEqualToString:", CFSTR("ImageControlMode"))
               || (objc_msgSend((id)objc_msgSend(*(id *)(v188 + 176), "objectForKeyedSubscript:", CFSTR("AutoAdjustImageControlMode")), "BOOLValue") & 1) == 0)&& (objc_msgSend(v135, "isEqualToString:", CFSTR("AutoFlashEnabled")) & 1) == 0&& (objc_msgSend(v135, "isEqualToString:", CFSTR("StillImageStabilizationAutomaticallyEnabled")) & 1) == 0)
            {
              v136 = (const __CFDictionary *)objc_msgSend(*(id *)(v188 + 176), "objectForKeyedSubscript:", v135);
              if (v136)
                captureSource_setPropertyInternal(v186, v135, v136);
            }
          }
          v132 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", v233, v236, 16);
        }
        while (v132);
      }
      v77 = v188;
      if (*(_BYTE *)(v188 + 229))
      {
        v137 = *(_OWORD *)(v188 + 32);
        v232[0] = *(_OWORD *)(v188 + 16);
        v232[1] = v137;
        HasAccessToCamera = FigCaptureSourceClientHasAccessToCamera(v232);
        *(_BYTE *)(v188 + 228) = HasAccessToCamera;
        v139 = *(_QWORD *)(v188 + 80);
        v12 = v182;
        v72 = v186;
        if (v139)
          BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(v139, HasAccessToCamera);
        v106 = 0;
      }
      else
      {
        v106 = 0;
        v12 = v182;
        v72 = v186;
      }
LABEL_204:
      pthread_mutex_unlock(*(pthread_mutex_t **)(v77 + 48));
      v209 = v106;
      if (v106)
      {
        v151 = v8;
        LODWORD(v150) = v106;
        goto LABEL_248;
      }
      objc_msgSend(v15[468], "addObject:", v72);
      objc_msgSend(v170, "addObject:", v123);

      v11 = v180;
      v68 = v179 + 1;
      a6 = v169;
      if (v179 + 1 == Count)
        goto LABEL_221;
    }
    v88 = 0;
LABEL_138:
    v86 = 0;
    goto LABEL_139;
  }
LABEL_221:
  if (v155)
  {
    v140 = -[BWMultiCamConfiguration multiCamConfigurationForDevice:errorOut:](v159, "multiCamConfigurationForDevice:errorOut:", v165, &v209);
    if (v209)
    {
      v151 = v8;
      LODWORD(v150) = v209;
    }
    else
    {
      v141 = objc_msgSend(v165, "setPropertyIfSupported:value:", *MEMORY[0x1E0D059D0], v140);
      v209 = v141;
      if (!v141)
        goto LABEL_224;
      v151 = v8;
      LODWORD(v150) = v141;
    }
LABEL_248:
    FigDebugAssert3();
    goto LABEL_233;
  }
LABEL_224:
  if (sTimeOfFlightAFEnabled != (v160 & 1))
  {
    if (v165)
    {
      sTimeOfFlightAFEnabled = v160 & 1;
      if ((v160 & 1) != 0)
      {
        sTimeOfFlightAFSuspended = (int)objc_msgSend((id)sThermalMonitor_0, "thermalLevel") > 1;
        if (objc_msgSend(v162, "containsObject:", *MEMORY[0x1E0D05A20], v150, v151))
        {
          updated = cs_updateTimeOfFlightAFEnabledStatus();
          v209 = updated;
          if (updated)
          {
            v151 = v8;
            LODWORD(v150) = updated;
            goto LABEL_248;
          }
        }
      }
    }
  }
  if (sStructuredLightAFEnabled != v156)
  {
    if (v165)
    {
      sStructuredLightAFEnabled = v156;
      sStructuredLightAFSuspended = (int)objc_msgSend((id)sThermalMonitor_0, "thermalLevel") > 1;
      if (sStructuredLightAFEnabled)
        cs_updateStructuredLightAFTargetStreamResources();
    }
  }
LABEL_233:
  if (!v209)
  {
    v148 = v170;
    goto LABEL_243;
  }
LABEL_234:

  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  v143 = v15[468];
  v144 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v189, v221, 16);
  if (v144)
  {
    v145 = v144;
    v146 = *(_QWORD *)v190;
    do
    {
      for (jj = 0; jj != v145; ++jj)
      {
        if (*(_QWORD *)v190 != v146)
          objc_enumerationMutation(v143);
        captureSource_deactivateInternal(*(const void **)(*((_QWORD *)&v189 + 1) + 8 * jj));
      }
      v145 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v189, v221, 16);
    }
    while (v145);
  }
  objc_msgSend(v15[468], "removeAllObjects", v150, v151);
  v148 = 0;
  v45 = (pthread_mutex_t **)&unk_1ECFE9000;
LABEL_243:
  pthread_mutex_unlock(v45[467]);
  if (a8)
    *a8 = objc_msgSend(v148, "copy");

  return v209;
}

uint64_t cs_addObjectToStreamsAttributes(uint64_t a1, void *a2)
{
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
  if (*(_BYTE *)(a1 + 12))
  {
    v4 = 4294954511;
  }
  else if (*(_QWORD *)(a1 + 104))
  {
    objc_msgSend(a2, "addObject:");
    v4 = 0;
  }
  else
  {
    v4 = 4294954513;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
  return v4;
}

void captureSource_turnOffAndTeardownFigFlashlight(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void (*v4)(uint64_t, float);
  const void *v5;
  double v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (*(_QWORD *)(DerivedStorage + 208))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v3 = *(_QWORD *)(DerivedStorage + 208);
    v4 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v4)
      v4(v3, 0.0);
    v5 = *(const void **)(DerivedStorage + 208);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 208) = 0;
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a1, CFSTR("TorchActive"), (uint64_t)&unk_1E49FC558, 0, 1);
    LODWORD(v6) = 0;
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a1, CFSTR("TorchLevel"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6), 1, 1);
  }
}

uint64_t captureSource_setThermalLevelAndMaxTorchLevel(uint64_t a1, uint64_t a2, float a3)
{
  double v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  FigSimpleMutexCheckIsLockedOnThisThread();
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", CFSTR("Torch")), "BOOLValue") & 1) != 0
    || objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue"))
  {
    *(float *)&v6 = a3;
    objc_msgSend(*(id *)(a1 + 80), "setMaxTorchLevel:", v6);
  }
  result = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", CFSTR("Sphere")), "BOOLValue");
  if ((_DWORD)result)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v8 = (void *)objc_msgSend(*(id *)(a1 + 80), "captureStreams", 0);
    result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (result)
    {
      v9 = result;
      v10 = *(_QWORD *)v13;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v13 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "setSphereThermalLevel:", a2);
        }
        while (v9 != v11);
        result = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        v9 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t BWFigVideoCaptureDeviceSetClientProcessHasAccessToCamera(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v5 = +[BWCameraStreamingMonitor sharedCameraStreamingMonitor](BWCameraStreamingMonitor, "sharedCameraStreamingMonitor");
  v6 = *(unsigned int *)(a1 + 492);
  v7 = objc_msgSend(*(id *)(a1 + 504), "tccIdentity");
  v8 = objc_msgSend(*(id *)(a1 + 504), "mediaEnvironment");
  v9 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v9;
  objc_msgSend(v5, "setCameraAccess:deviceType:clientAuditToken:tccIdentity:mediaEnvironment:completionHandler:", a2, v6, v19, v7, v8, 0);
  os_unfair_lock_unlock(v4);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = *(void **)(a1 + 560);
  result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)v16;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        BWFigVideoCaptureStreamSetClientProcessHasAccessToCamera(*(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v14++), a2);
      }
      while (v12 != v14);
      result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
      v12 = result;
    }
    while (result);
  }
  return result;
}

void BWFigVideoCaptureStreamSetClientProcessHasAccessToCamera(uint64_t a1, char a2)
{
  os_unfair_lock_s *v4;

  if (a1)
  {
    v4 = (os_unfair_lock_s *)(a1 + 352);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 352));
    *(_BYTE *)(a1 + 356) = a2;
    os_unfair_lock_unlock(v4);
  }
}

float FigVideoCaptureSourceUIBaseZoomFactor(uint64_t a1, _DWORD *a2)
{
  float v2;
  _QWORD v4[5];
  uint64_t v5;
  float *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = (float *)&v5;
  v7 = 0x2020000000;
  v8 = 1065353216;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceUIBaseZoomFactor_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = v6[6];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2D800B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *psn_updateFocusDistanceBasedScene(uint64_t a1, void *a2)
{
  void *result;
  float v5;
  float v6;
  float v7;

  result = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A88]);
  if (result)
  {
    objc_msgSend(result, "floatValue");
    v6 = v5;
    result = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AB8]), "intValue");
    if ((_DWORD)result != 1)
    {
      v7 = 100.0;
      if (v6 >= 0.0 && v6 <= 100.0)
        v7 = v6;
      return (void *)BWSmartCameraSceneUpdateWithConfidence(a1, v7);
    }
  }
  return result;
}

uint64_t BWSmartCameraSceneUpdateWithConfidence(uint64_t result, float a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;

  if (!*(_BYTE *)result)
    return result;
  if (*(_BYTE *)(result + 26))
  {
    *(_BYTE *)(result + 26) = 0;
    v2 = 22;
    if (!*(_BYTE *)(result + 1))
      v2 = 20;
    *(_WORD *)(result + 24) = *(_WORD *)(result + v2);
    v3 = a2;
  }
  else
  {
    v3 = *(float *)(result + 8);
  }
  v4 = (float)(*(float *)(result + 4) * a2) + (float)(v3 * (float)(1.0 - *(float *)(result + 4)));
  *(float *)(result + 8) = v4;
  v5 = *(float *)(result + 12);
  if (*(_BYTE *)(result + 1))
  {
    if (v4 < (float)(v5 - *(float *)(result + 16)))
    {
LABEL_9:
      v6 = 22;
      if (!*(_BYTE *)(result + 1))
        v6 = 20;
      v7 = *(__int16 *)(result + v6);
      v8 = *(__int16 *)(result + 24);
      if (v8 >= v7)
      {
        v9 = 0;
        *(_BYTE *)(result + 1) ^= 1u;
      }
      else
      {
        v9 = v8 + 1;
      }
      *(_WORD *)(result + 24) = v9;
      return result;
    }
  }
  else if (v4 > v5)
  {
    goto LABEL_9;
  }
  if (*(_WORD *)(result + 24))
    *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t FigCaptureExifOrientationFromRotationDegreesAndMirroring(int a1, int a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a2)
    v2 = 4;
  else
    v2 = 3;
  if (a2)
    v3 = 5;
  else
    v3 = 8;
  if (a1 != 270)
    v3 = 1;
  if (a1 != 180)
    v2 = v3;
  if (a2)
    v4 = 2;
  else
    v4 = 1;
  if (a2)
    v5 = 7;
  else
    v5 = 6;
  if (a1 == 90)
    v6 = v5;
  else
    v6 = 1;
  if (!a1)
    v6 = v4;
  if (a1 <= 179)
    return v6;
  else
    return v2;
}

uint64_t FigCaptureNormalizeAngle(int a1)
{
  if (a1 % 360 >= 0)
    return (a1 % 360);
  else
    return (a1 % 360 + 360);
}

uint64_t FigCaptureRotationDegreesAndMirroringFromExifOrientation(int a1, char *a2)
{
  uint64_t result;
  char v3;

  switch(a1)
  {
    case 2:
      result = 0;
      v3 = 1;
      if (a2)
        goto LABEL_17;
      return result;
    case 3:
      v3 = 0;
      goto LABEL_8;
    case 4:
      v3 = 1;
LABEL_8:
      result = 180;
      if (!a2)
        return result;
      goto LABEL_17;
    case 5:
      v3 = 1;
      goto LABEL_16;
    case 6:
      v3 = 0;
      goto LABEL_13;
    case 7:
      v3 = 1;
LABEL_13:
      result = 90;
      if (!a2)
        return result;
      goto LABEL_17;
    case 8:
      v3 = 0;
LABEL_16:
      result = 270;
      if (a2)
        goto LABEL_17;
      return result;
    default:
      result = 0;
      v3 = 0;
      if (!a2)
        return result;
LABEL_17:
      *a2 = v3;
      return result;
  }
}

uint64_t FigCaptureVTRotationFromDegrees(int a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  if (a1 > 179)
  {
    if (a1 == 180)
    {
      v3 = MEMORY[0x1E0CEDA30];
    }
    else
    {
      if (a1 != 270)
        return result;
      v3 = MEMORY[0x1E0CEDA38];
    }
  }
  else if (a1)
  {
    if (a1 != 90)
      return result;
    v3 = MEMORY[0x1E0CEDA40];
  }
  else
  {
    v3 = MEMORY[0x1E0CEDA28];
  }
  return *(_QWORD *)v3;
}

uint64_t captureSession_startDeferredGraphSetupWork(uint64_t a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BWCameraLockScreenLaunchAnalyticsPayload *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  int v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD block[6];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  os_log_type_t type;
  int v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = _FigIsCurrentDispatchQueue();
  if (!(_DWORD)result)
  {
    v36 = v1;
    LODWORD(v35) = 0;
    result = FigDebugAssert3();
  }
  if (dword_1ECFE9590)
  {
    v52 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 610))
  {
    *(_BYTE *)(DerivedStorage + 610) = 1;
    if ((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0
      || objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
    {
      os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
      if (byte_1EE6BF31C)
      {
        os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
        v6 = word_1EE6BF328;
        v7 = dword_1EE6BF32C;
        v8 = HIBYTE(word_1EE6BF328);
        -[BWAggdDataReporter reportLockScreenCameraLaunchCompletedWithPrewarming:restartedSessionDueToError:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportLockScreenCameraLaunchCompletedWithPrewarming:restartedSessionDueToError:", word_1EE6BF328, dword_1EE6BF32C);
        v9 = objc_alloc_init(BWCameraLockScreenLaunchAnalyticsPayload);
        -[BWCameraLockScreenLaunchAnalyticsPayload setCompleted:](v9, "setCompleted:", 1);
        -[BWCameraLockScreenLaunchAnalyticsPayload setPrewarmed:](v9, "setPrewarmed:", v6);
        -[BWCameraLockScreenLaunchAnalyticsPayload setIspStreamingStarted:](v9, "setIspStreamingStarted:", v8);
        -[BWCameraLockScreenLaunchAnalyticsPayload setLaunchError:](v9, "setLaunchError:", v7);
        -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance"), "sendEvent:", v9);

        os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
        byte_1EE6BF31C = 0;
        word_1EE6BF328 = 0;
        dword_1EE6BF32C = 0;
      }
      os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
    }
    if (objc_msgSend(*(id *)(DerivedStorage + 592), "deferredNodePrepareEnabled", v35, v36))
      objc_msgSend(*(id *)(DerivedStorage + 592), "startDeferredSourceNodesIfNeeded");
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v10 = *(void **)(DerivedStorage + 616);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v48;
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v48 != v13)
              objc_enumerationMutation(v10);
            v15 = (_QWORD *)objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * v14));
            if (v15)
            {
              v16 = v15;
              v15 = (_QWORD *)v15[1];
              v17 = v16[2];
            }
            else
            {
              v17 = 0;
            }
            FigVideoCaptureSourceSetSessionProperty(v15, v17, CFSTR("ResumeAdjustingFocusNotifications_FigCaptureSessionOnly"), 0);
            ++v14;
          }
          while (v12 != v14);
          v18 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
          v12 = v18;
        }
        while (v18);
      }
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v19 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines");
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v44;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v44 != v22)
            objc_enumerationMutation(v19);
          objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](*(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * i)), "startupFaceDetectionIfNeeded");
        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v43, v54, 16);
      }
      while (v21);
    }
    v24 = FigVideoCaptureSourcesNeedDeferredTimeOfFlightAFEnablement();
    v25 = MEMORY[0x1E0C809B0];
    if (v24)
    {
      v26 = FigDispatchQueueCreateWithPriority();
      v27 = *(_QWORD *)(DerivedStorage + 600);
      v28 = *(NSObject **)(DerivedStorage + 136);
      if (!v28)
      {
        v28 = dispatch_group_create();
        *(_QWORD *)(DerivedStorage + 136) = v28;
      }
      block[0] = v25;
      block[1] = 3221225472;
      block[2] = __captureSession_startDeferredGraphSetupWork_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = DerivedStorage;
      block[5] = v27;
      dispatch_group_async(v28, v26, block);
      if (v26)
        CFRelease(v26);
    }
    if (objc_msgSend(*(id *)(DerivedStorage + 592), "deferredNodePrepareEnabled"))
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v29 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "stillImageSinkPipelineSessionStorages");
      v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v38, v53, 16);
      if (v30)
      {
        v31 = v30;
        v32 = *(_QWORD *)v39;
        do
        {
          for (j = 0; j != v31; ++j)
          {
            if (*(_QWORD *)v39 != v32)
              objc_enumerationMutation(v29);
            objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * j), "stillImageSinkPipeline"), "enablePrepareTimeAllocationsForDeferredPrepare");
          }
          v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v38, v53, 16);
        }
        while (v31);
      }
      v34 = *(void **)(DerivedStorage + 592);
      v37[0] = v25;
      v37[1] = 3221225472;
      v37[2] = __captureSession_startDeferredGraphSetupWork_block_invoke_2;
      v37[3] = &__block_descriptor_48_e5_v8__0l;
      v37[4] = a1;
      v37[5] = DerivedStorage;
      return objc_msgSend(v34, "startDeferredNodePrepareIfNeededWithCompletionHandler:", v37);
    }
    else
    {
      return objc_msgSend(*(id *)(DerivedStorage + 592), "startDeferredSourceNodesIfNeeded");
    }
  }
  return result;
}

uint64_t FigVideoCaptureSourceSetSessionProperty(const void *a1, uint64_t a2, const void *a3, const __CFDictionary *a4)
{
  return captureSource_setPropertyWithDeviceCheck(a1, 1, a2, a3, a4);
}

uint64_t FigVideoCaptureSourcesNeedDeferredTimeOfFlightAFEnablement()
{
  uint64_t DerivedStorage;
  BOOL v1;
  uint64_t v2;

  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  objc_msgSend((id)sActiveVideoCaptureSources, "firstObject");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (sTimeOfFlightAFEnabled ? (v1 = sTimeOfFlightAFSuspended == 0) : (v1 = 0), v1))
    v2 = objc_msgSend(*(id *)(DerivedStorage + 80), "timeOfFlightAFEnabled") ^ 1;
  else
    v2 = 0;
  pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  return v2;
}

id sipc_prepareDescriptor(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_alloc_init(NSClassFromString(CFSTR("SoftISPPrepareDescriptor")));
  objc_msgSend(v4, "setMaximumWidth:", (int)a1);
  objc_msgSend(v4, "setMaximumHeight:", a1 >> 32);
  objc_msgSend(v4, "setInputPixelFormat:", a2);
  return v4;
}

uint64_t captureSource_setPropertyInternal(const void *a1, const void *Value, const __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  int v8;
  __CFString **v9;
  uint64_t v10;
  int v11;
  char isKindOfClass;
  id v13;
  double v14;
  float v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  double v39;
  void *v40;
  uint64_t *v41;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  int v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t j;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t k;
  CFTypeID v71;
  NSObject *v72;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[6];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  CGPoint origin;
  CGFloat width;
  CGRect v93[4];
  _BYTE v94[128];
  _QWORD v95[4];
  _QWORD v96[4];
  _QWORD v97[4];
  _QWORD v98[4];
  _BYTE v99[128];
  _BYTE v100[128];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (CFEqual(Value, CFSTR("ActiveFormat_FigCaptureSessionOnly")))
  {
    v9 = kFigCaptureSourceProperty_ActiveFormat;
  }
  else if (CFEqual(Value, CFSTR("ActiveMaxFrameRate_FigCaptureSessionOnly")))
  {
    v9 = kFigCaptureSourceProperty_ActiveMaxFrameRate;
  }
  else
  {
    if (!CFEqual(Value, CFSTR("ActiveMinFrameRate_FigCaptureSessionOnly")))
      goto LABEL_9;
    v9 = kFigCaptureSourceProperty_ActiveMinFrameRate;
  }
  if (!*v9)
  {
LABEL_9:
    v11 = CFEqual(Value, CFSTR("PropertySetByProxy"));
    if (v11)
    {
      if (!*(_BYTE *)(DerivedStorage + 241))
      {
        FigDebugAssert3();
        return 4294954516;
      }
      Value = CFDictionaryGetValue(a3, CFSTR("PropertyKey"));
      a3 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("PropertyValue"));
    }
    else if (CFEqual(Value, CFSTR("VideoZoomFactor")))
    {
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
LABEL_15:
      if (CFEqual(Value, CFSTR("PrewarmingEnabled")))
      {
        v10 = 0;
        *(_BYTE *)(DerivedStorage + 240) = -[__CFDictionary BOOLValue](a3, "BOOLValue");
        return v10;
      }
      if (CFEqual(Value, CFSTR("HasProxy")))
      {
        v10 = 0;
        *(_BYTE *)(DerivedStorage + 241) = -[__CFDictionary BOOLValue](a3, "BOOLValue");
        return v10;
      }
      if (*(_BYTE *)(DerivedStorage + 241))
        v13 = (id)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", Value);
      else
        v13 = 0;
      if (!*(_BYTE *)(DerivedStorage + 13))
      {
        if (!CFEqual(Value, CFSTR("TorchLevel")))
          goto LABEL_35;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[__CFDictionary floatValue](a3, "floatValue");
          captureSource_handleThirdPartyTorchLevelCommand(a1, v15);
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, CFSTR("ActiveMinFrameRate")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          *(float *)&v14 = (float)(int)-[__CFDictionary intValue](a3, "intValue");
          objc_msgSend(*(id *)(DerivedStorage + 80), "setMinimumFrameRate:", v14);
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, CFSTR("ActiveMaxFrameRate")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[__CFDictionary floatValue](a3, "floatValue");
          objc_msgSend(*(id *)(DerivedStorage + 80), "setMaximumFrameRate:");
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, CFSTR("ActiveDepthDataMaxFrameRate")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          -[__CFDictionary floatValue](a3, "floatValue");
          objc_msgSend(*(id *)(DerivedStorage + 80), "setDepthMaxFrameRate:");
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, CFSTR("FocusOperation")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v18 = captureSource_setFocusOperation((uint64_t)a1, a3);
LABEL_40:
          v10 = v18;
          goto LABEL_41;
        }
        v75 = v3;
        LODWORD(v74) = 0;
LABEL_90:
        FigDebugAssert3();
        v18 = FigSignalErrorAt();
        goto LABEL_40;
      }
      if (CFEqual(Value, CFSTR("CinematicVideoFocusOperation")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(*(id *)(DerivedStorage + 80), "setCinematicVideoFocus:", a3);
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      if (CFEqual(Value, CFSTR("ObservedPropertyCounts")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v19 = -[__CFDictionary countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v87, v100, 16);
          if (v19)
          {
            v20 = v19;
            v21 = *(_QWORD *)v88;
            v76 = v13;
            do
            {
              for (i = 0; i != v20; ++i)
              {
                if (*(_QWORD *)v88 != v21)
                  objc_enumerationMutation(a3);
                objc_msgSend(*(id *)(DerivedStorage + 80), "setProperty:isObserved:", *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * i), (int)objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v87 + 1) + 8 * i)), "intValue") > 0);
              }
              v20 = -[__CFDictionary countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v87, v100, 16);
              v13 = v76;
            }
            while (v20);
          }
          goto LABEL_35;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_90;
      }
      v77 = v13;
      if (CFEqual(Value, CFSTR("ExposureOperation")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = captureSource_setExposureOperation((uint64_t)a1, a3);
LABEL_60:
          v10 = v23;
          goto LABEL_41;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("ActiveMaxExposureDuration")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        memset(v93, 0, 24);
        CMTimeMakeFromDictionary((CMTime *)v93, a3);
        v24 = *(void **)(DerivedStorage + 80);
        origin = v93[0].origin;
        width = v93[0].size.width;
        objc_msgSend(v24, "setMaxExposureDurationClientOverride:", &origin);
LABEL_64:
        v13 = v77;
        goto LABEL_35;
      }
      if (CFEqual(Value, CFSTR("ExposureTargetBiasOperation")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = captureSource_setExposureTargetBiasOperation((uint64_t)a1, a3);
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
LABEL_184:
        FigDebugAssert3();
        v23 = FigSignalErrorAt();
        goto LABEL_60;
      }
      if (CFEqual(Value, CFSTR("WhiteBalanceOperation")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = captureSource_setWhiteBalanceOperation((uint64_t)a1, a3);
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("TorchLevel")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v25 = *(void **)(DerivedStorage + 80);
          -[__CFDictionary floatValue](a3, "floatValue");
          v23 = objc_msgSend(v25, "setTorchLevel:");
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("AutoTorchEnabled")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setAutomaticallyAdjustsTorch:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("ProvidesStortorgetMetadata")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setProvidesStortorgetMetadata:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("AutoAdjustImageControlMode")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setAutomaticallyAdjustsImageControlMode:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("ImageControlMode")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setImageControlMode:", -[__CFDictionary intValue](a3, "intValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("TimeLapseCaptureRate")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        v26 = *(void **)(DerivedStorage + 80);
        -[__CFDictionary floatValue](a3, "floatValue");
        objc_msgSend(v26, "setTimeLapseCaptureRate:");
        goto LABEL_64;
      }
      if (CFEqual(Value, CFSTR("UltraHighResolutionZeroShutterLagEnabled")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        objc_msgSend(*(id *)(DerivedStorage + 80), "setUltraHighResolutionZeroShutterLagEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
        goto LABEL_64;
      }
      if (CFEqual(Value, CFSTR("FaceDrivenAEAFMode")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = captureSource_setFaceDrivenAEAFMode((uint64_t)a1, -[__CFDictionary intValue](a3, "intValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("FaceDetectionConfiguration")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        objc_msgSend(*(id *)(DerivedStorage + 80), "setFaceDetectionConfiguration:", a3);
        goto LABEL_64;
      }
      if (CFEqual(Value, CFSTR("StillImageSceneMonitoringConfiguration")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:", objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("FlashMode")), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("HDRMode")), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("QualityPrioritization")), "intValue"), objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("DigitalFlashMode")),
                    "intValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("VideoZoomFactor")))
      {
        if ((isKindOfClass & 1) != 0)
        {
          v27 = (void *)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomFactor"));
          v28 = (void *)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomRampRate"));
          v29 = (void *)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomRampDuration"));
          v30 = (void *)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomRampType"));
          v31 = (void *)-[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomRampTuning"));
          v32 = -[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomRampCommandID"));
          if (v27)
          {
            if (v28)
            {
              if (v29)
              {
                if (v30)
                {
                  if (v31)
                  {
                    v33 = (void *)v32;
                    if (v32)
                    {
                      objc_msgSend(v27, "floatValue");
                      v35 = v34;
                      if (objc_msgSend(v30, "intValue") == 3)
                      {
                        v36 = objc_msgSend(v31, "intValue") + 1;
                        v37 = *(void **)(DerivedStorage + 80);
                        v38 = objc_msgSend(v33, "intValue");
                        LODWORD(v39) = v35;
                        objc_msgSend(v37, "rampToVideoZoomFactor:withTuning:commandID:", v36, v38, v39);
                      }
                      else
                      {
                        v43 = *(void **)(DerivedStorage + 80);
                        v44 = objc_msgSend(v30, "intValue");
                        objc_msgSend(v28, "floatValue");
                        v46 = v45;
                        objc_msgSend(v29, "doubleValue");
                        v48 = v47;
                        v49 = objc_msgSend(v33, "intValue");
                        LODWORD(v50) = v35;
                        LODWORD(v51) = v46;
                        objc_msgSend(v43, "rampToVideoZoomFactor:withRampType:rate:duration:commandID:", v44, v49, v50, v51, v48);
                      }
                      v13 = v77;
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
          FigDebugAssert3();
          v10 = 4294954516;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v10 = FigSignalErrorAt();
            if ((_DWORD)v10)
              goto LABEL_140;
            goto LABEL_137;
          }
          -[__CFDictionary floatValue](a3, "floatValue");
          objc_msgSend(*(id *)(DerivedStorage + 80), "setZoomFactor:");
          objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", a3, Value);
          if (*(_BYTE *)(DerivedStorage + 241))
          {
            v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            objc_msgSend(v40, "setObject:forKeyedSubscript:", v13, CFSTR("OldPropertyValue"));
            objc_msgSend(v40, "setObject:forKeyedSubscript:", a3, CFSTR("NewPropertyValue"));
            v41 = &kFigCaptureSourceNotificationKey_ClientShouldIgnoreNotification;
            if (v11)
              v41 = &kFigCaptureSourceNotificationKey_ProxyShouldIgnoreNotification;
            objc_msgSend(v40, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *v41);
            captureSource_postNotificationWithPayload(a1, Value, v40);
            goto LABEL_139;
          }
          v10 = 0;
        }
        goto LABEL_147;
      }
      if (CFEqual(Value, CFSTR("VideoZoomRampAcceleration")))
        goto LABEL_35;
      if (CFEqual(Value, CFSTR("SubjectAreaChangeMonitoringEnabled")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v23 = objc_msgSend(*(id *)(DerivedStorage + 80), "setSubjectAreaChangeMonitoringEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
          goto LABEL_60;
        }
        v75 = v3;
        LODWORD(v74) = 0;
        goto LABEL_184;
      }
      if (CFEqual(Value, CFSTR("BravoCameraSelection")))
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        v93[0].origin.x = 0.0;
        v93[0].origin.y = 0.0;
        -[__CFDictionary getBytes:length:](a3, "getBytes:length:", v93, 16);
        objc_msgSend(*(id *)(DerivedStorage + 80), "setBravoStreamSelectionConfiguration:", *(_QWORD *)&v93[0].origin.x, *(_QWORD *)&v93[0].origin.y);
        goto LABEL_64;
      }
      if (CFEqual(Value, CFSTR("EligibleFallbackCaptureSourceDeviceTypes")))
      {
        if (a3)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
        }
        v52 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
        v53 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v83 = 0u;
        v84 = 0u;
        v85 = 0u;
        v86 = 0u;
        v54 = -[__CFDictionary countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v83, v99, 16);
        if (v54)
        {
          v55 = v54;
          v56 = *(_QWORD *)v84;
          do
          {
            for (j = 0; j != v55; ++j)
            {
              if (*(_QWORD *)v84 != v56)
                objc_enumerationMutation(a3);
              objc_msgSend(v53, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(v52, objc_msgSend(*(id *)(*((_QWORD *)&v83 + 1) + 8 * j), "intValue")));
            }
            v55 = -[__CFDictionary countByEnumeratingWithState:objects:count:](a3, "countByEnumeratingWithState:objects:count:", &v83, v99, 16);
          }
          while (v55);
        }
        objc_msgSend(*(id *)(DerivedStorage + 80), "setBravoStreamSelectionEligibleFallbackPortTypes:", v53);
        goto LABEL_64;
      }
      if (CFEqual(Value, CFSTR("NonDestructiveCropSize")))
      {
        v93[0].origin = (CGPoint)*MEMORY[0x1E0C9D820];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        if (!CGSizeMakeWithDictionaryRepresentation(a3, (CGSize *)v93))
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        objc_msgSend(*(id *)(DerivedStorage + 80), "setNonDestructiveCropSize:", v93[0].origin.x, v93[0].origin.y);
        v10 = 0;
      }
      else
      {
        if (!CFEqual(Value, CFSTR("AutoFlashEnabled")))
        {
          if (CFEqual(Value, CFSTR("StillImageStabilizationAutomaticallyEnabled")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            v61 = -[__CFDictionary BOOLValue](a3, "BOOLValue");
            objc_msgSend(*(id *)(DerivedStorage + 80), "setStillImageStabilizationSceneDetectionEnabled:", v61);
            v62 = (void *)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("StillImageSceneMonitoringConfiguration"));
            v95[0] = CFSTR("FlashMode");
            v96[0] = objc_msgSend(v62, "objectForKeyedSubscript:");
            v95[1] = CFSTR("HDRMode");
            v96[1] = objc_msgSend(v62, "objectForKeyedSubscript:");
            v95[2] = CFSTR("QualityPrioritization");
            if ((_DWORD)v61)
              v63 = 2;
            else
              v63 = 1;
            v96[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v63);
            v95[3] = CFSTR("DigitalFlashMode");
            v96[3] = objc_msgSend(v62, "objectForKeyedSubscript:");
            objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v96, v95, 4), CFSTR("StillImageSceneMonitoringConfiguration"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("ResumeAdjustingFocusNotifications_FigCaptureSessionOnly")))
          {
            if (*(_BYTE *)(DerivedStorage + 230))
            {
              v64 = *(void **)(DerivedStorage + 80);
              v82[0] = MEMORY[0x1E0C809B0];
              v82[1] = 3221225472;
              v82[2] = __captureSource_setPropertyInternal_block_invoke;
              v82[3] = &__block_descriptor_48_e5_v8__0l;
              v82[4] = DerivedStorage;
              v82[5] = a1;
              objc_msgSend(v64, "performBlockOnNotificationQueue:", v82);
            }
            goto LABEL_35;
          }
          if (CFEqual(Value, CFSTR("VideoHDRSuspended")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v65 = -[__CFDictionary BOOLValue](a3, "BOOLValue");
              v78 = 0u;
              v79 = 0u;
              v80 = 0u;
              v81 = 0u;
              v66 = (void *)objc_msgSend(*(id *)(DerivedStorage + 80), "captureStreams");
              v67 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v78, v94, 16);
              if (v67)
              {
                v68 = v67;
                v69 = *(_QWORD *)v79;
                do
                {
                  for (k = 0; k != v68; ++k)
                  {
                    if (*(_QWORD *)v79 != v69)
                      objc_enumerationMutation(v66);
                    objc_msgSend(*(id *)(*((_QWORD *)&v78 + 1) + 8 * k), "setHighlightRecoverySuspended:", v65);
                  }
                  v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v78, v94, 16);
                  v13 = v77;
                }
                while (v68);
              }
              goto LABEL_35;
            }
            v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, CFSTR("DigitalFlashMode")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setStreamingDigitalFlashMode:", -[__CFDictionary intValue](a3, "intValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("GlobalToneMappingEnabled")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setGlobalToneMappingEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("OverheadCameraMode")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setOverheadCameraMode:", -[__CFDictionary intValue](a3, "intValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("CenterStageRectOfInterest")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            memset(v93, 0, 32);
            CGRectMakeWithDictionaryRepresentation(a3, v93);
            objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageRectOfInterest:", v93[0].origin.x, v93[0].origin.y, v93[0].size.width, v93[0].size.height);
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("CenterStageFramingMode")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageFramingMode:", -[__CFDictionary intValue](a3, "intValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("CenterStageMetadataDeliveryEnabled")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageMetadataDeliveryEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("StartPanningAtPoint")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            v93[0].origin.x = 0.0;
            v93[0].origin.y = 0.0;
            CGPointMakeWithDictionaryRepresentation(a3, &v93[0].origin);
            objc_msgSend(*(id *)(DerivedStorage + 80), "startPanningAtPoint:", v93[0].origin.x, v93[0].origin.y);
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("PanWithTranslation")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            v93[0].origin.x = 0.0;
            v93[0].origin.y = 0.0;
            CGPointMakeWithDictionaryRepresentation(a3, &v93[0].origin);
            objc_msgSend(*(id *)(DerivedStorage + 80), "panWithTranslation:", v93[0].origin.x, v93[0].origin.y);
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("PortraitEffectStudioLightQuality")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setPortraitEffectStudioLightQuality:", (int)-[__CFDictionary intValue](a3, "intValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("BackgroundBlurAperture")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            -[__CFDictionary floatValue](a3, "floatValue");
            objc_msgSend(*(id *)(DerivedStorage + 80), "setBackgroundBlurAperture:");
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("StudioLightingIntensity")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            -[__CFDictionary floatValue](a3, "floatValue");
            objc_msgSend(*(id *)(DerivedStorage + 80), "setStudioLightingIntensity:");
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("GesturesEnabled")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setGesturesEnabled:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("BackgroundReplacementPixelBuffer")))
          {
            if (a3)
            {
              v71 = CFGetTypeID(a3);
              if (v71 != CVPixelBufferGetTypeID())
              {
                v75 = v3;
                LODWORD(v74) = 0;
                goto LABEL_184;
              }
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setBackgroundReplacementPixelBuffer:", a3);
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("PerformOneShotFraming")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              if (-[__CFDictionary BOOLValue](a3, "BOOLValue"))
                objc_msgSend(*(id *)(DerivedStorage + 80), "performOneShotFraming");
              goto LABEL_35;
            }
            v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, CFSTR("ResetFraming")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              if (-[__CFDictionary BOOLValue](a3, "BOOLValue"))
                objc_msgSend(*(id *)(DerivedStorage + 80), "resetFraming");
              goto LABEL_35;
            }
            v75 = v3;
            LODWORD(v74) = 0;
            goto LABEL_184;
          }
          if (CFEqual(Value, CFSTR("CenterStageFieldOfViewRestrictedToWide")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            objc_msgSend(*(id *)(DerivedStorage + 80), "setCenterStageFieldOfViewRestrictedToWide:", -[__CFDictionary BOOLValue](a3, "BOOLValue"));
            goto LABEL_64;
          }
          if (CFEqual(Value, CFSTR("Hidden")))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v75 = v3;
              LODWORD(v74) = 0;
              goto LABEL_184;
            }
            if (objc_msgSend(*(id *)(DerivedStorage + 80), "device"))
            {
              objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 80), "device"), "setPropertyIfSupported:value:", CFSTR("Hidden"), a3);
            }
            else
            {
              if (!dword_1ECFE9450)
                goto LABEL_35;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_64;
          }
          if (objc_msgSend(*(id *)(DerivedStorage + 80), "device") && BWDeviceTypeIsExtensionDeviceType(v8))
          {
            if (dword_1ECFE9450)
            {
              v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v23 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 80), "device", v74, v75), "setProperty:value:", Value, a3);
            goto LABEL_60;
          }
          v10 = 4294954512;
LABEL_147:
          v13 = v77;
          if (!v77)
            return v10;
          goto LABEL_141;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v75 = v3;
          LODWORD(v74) = 0;
          goto LABEL_184;
        }
        v93[0].origin.x = 0.0;
        v58 = -[__CFDictionary BOOLValue](a3, "BOOLValue");
        objc_msgSend(*(id *)(DerivedStorage + 80), "setAutoFlashEnabled:error:", v58, v93);
        v10 = objc_msgSend(*(id *)&v93[0].origin.x, "code");
        v59 = (void *)objc_msgSend(*(id *)(DerivedStorage + 176), "objectForKeyedSubscript:", CFSTR("StillImageSceneMonitoringConfiguration"));
        v97[0] = CFSTR("FlashMode");
        if ((_DWORD)v58)
          v60 = 2;
        else
          v60 = 0;
        v98[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v60);
        v97[1] = CFSTR("HDRMode");
        v98[1] = objc_msgSend(v59, "objectForKeyedSubscript:");
        v97[2] = CFSTR("QualityPrioritization");
        v98[2] = objc_msgSend(v59, "objectForKeyedSubscript:");
        v97[3] = CFSTR("DigitalFlashMode");
        v98[3] = objc_msgSend(v59, "objectForKeyedSubscript:");
        objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v98, v97, 4), CFSTR("StillImageSceneMonitoringConfiguration"));
      }
LABEL_41:
      if ((_DWORD)v10)
        goto LABEL_140;
LABEL_35:
      if ((isKindOfClass & 1) != 0)
      {
LABEL_36:
        v16 = -[__CFDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", CFSTR("ZoomFactor"), v74, v75);
        v17 = *(void **)(DerivedStorage + 176);
LABEL_138:
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, Value, v74);
LABEL_139:
        v10 = 0;
LABEL_140:
        if (!v13)
          return v10;
LABEL_141:
        CFRelease(v13);
        return v10;
      }
LABEL_137:
      v17 = *(void **)(DerivedStorage + 176);
      v16 = (uint64_t)a3;
      goto LABEL_138;
    }
    isKindOfClass = 0;
    goto LABEL_15;
  }
  objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", a3);
  return 0;
}

uint64_t captureSource_setWhiteBalanceOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  void *v5;
  int v6;
  void *v8;
  void *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  v4 = DerivedStorage;
  v5 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("WhiteBalanceMode"));
  if (v5)
  {
    v6 = objc_msgSend(v5, "intValue");
    if (v6)
    {
      if (v6 == 2)
        return objc_msgSend(*(id *)(v4 + 80), "setWhiteBalanceModeAuto");
      return FigSignalErrorAt();
    }
    v8 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("DeviceWhiteBalanceGains"));
    if (v8)
    {
      v9 = v8;
      if (objc_msgSend(v8, "length") == 12)
      {
        v15 = 0;
        v14 = 0;
        objc_msgSend(v9, "getBytes:length:", &v14, 12);
        v10 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue");
        LODWORD(v12) = HIDWORD(v14);
        LODWORD(v11) = v14;
        LODWORD(v13) = v15;
        return objc_msgSend(*(id *)(v4 + 80), "setWhiteBalanceModeLockedWithGains:requestID:", v10, v11, v12, v13);
      }
    }
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t captureSource_setExposureTargetBiasOperation(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  void *v4;
  int v5;
  int v6;
  uint64_t v7;
  double v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Bias"));
  if (v4)
  {
    objc_msgSend(v4, "floatValue");
    v6 = v5;
    v7 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("RequestID")), "intValue");
    LODWORD(v8) = v6;
    return objc_msgSend(*(id *)(DerivedStorage + 80), "setExposureTargetBias:requestID:", v7, v8);
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

const __CFArray *FigCaptureSourceCopySourcesForClientAuditToken(int a1, __int128 *a2, uint64_t a3, char a4)
{
  const __CFArray *v6;
  __int128 v7;
  uint64_t PIDFromAuditToken;
  CFMutableArrayRef Mutable;
  FigCaptureSourceBackings *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  uint64_t i;
  void *v34;
  void *v35;
  unsigned int v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _BOOL4 v39;
  BOOL v40;
  int v42;
  int v43;
  __int128 v44;
  const void *v45;
  uint64_t DerivedStorage;
  id *v47;
  void *v48;
  void *v49;
  float v50;
  float v51;
  CFIndex v53;
  uint64_t v54;
  int v55;
  int v56;
  float v57;
  NSArray *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  void *v63;
  __int128 v64;
  int v65;
  const void *v66;
  __int128 v68;
  const void *v69;
  NSObject *v70;
  unsigned int v71;
  unsigned int v72;
  int Count;
  __int128 v74;
  int v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  CFIndex idx;
  const void *v82;
  FigCaptureSourceBackings *v83;
  _BOOL4 IsFacemetricsd;
  const __CFArray *theArray;
  NSArray *obj;
  uint64_t v87;
  int IsLaunchPrewarmingEnabled;
  int IsAllowedToUseMetadataCameras;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  os_log_type_t type;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD v101[2];
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _BYTE v107[128];
  _BYTE value[12];
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int128 v115;
  __int128 v116;
  _BYTE v117[128];
  _BYTE v118[128];
  _QWORD v119[4];

  LODWORD(v6) = a1;
  v119[1] = *MEMORY[0x1E0C80C00];
  if (cs_initializeStatics_onceToken != -1)
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_76);
  v7 = a2[1];
  v115 = *a2;
  v116 = v7;
  PIDFromAuditToken = FigCaptureGetPIDFromAuditToken(&v115);
  v87 = *MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (a3)
    v10 = -[FigCaptureSourceBackings initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:]([FigCaptureSourceBackings alloc], "initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:", a3, 0, 0, 0);
  else
    v10 = +[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings");
  theArray = Mutable;
  v83 = v10;
  FigCaptureSourceInitialize((uint64_t)v10, a4);
  v80 = (int)v6;
  if ((v6 & 1) != 0)
  {
    v12 = objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingIdentifier:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", PIDFromAuditToken));
    v13 = (void *)objc_msgSend(MEMORY[0x1E0D87DC0], "descriptor");
    v14 = *MEMORY[0x1E0D22E58];
    v119[0] = *MEMORY[0x1E0D22E58];
    objc_msgSend(v13, "setEndowmentNamespaces:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v119, 1));
    v15 = (void *)objc_msgSend(MEMORY[0x1E0D87DB8], "statesForPredicate:withDescriptor:error:", v12, v13, 0);
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
    if (!v16)
      goto LABEL_32;
    v17 = v16;
    v18 = 0;
    v19 = *(_QWORD *)v104;
LABEL_9:
    v20 = 0;
    while (1)
    {
      if (*(_QWORD *)v104 != v19)
        objc_enumerationMutation(v15);
      v21 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * v20);
      if (objc_msgSend((id)objc_msgSend(v21, "process"), "isApplication"))
        break;
      if (objc_msgSend((id)objc_msgSend(v21, "process"), "isXPCService"))
      {
        if (objc_msgSend(v21, "taskState") != 4)
          goto LABEL_32;
        goto LABEL_31;
      }
      v22 = (void *)objc_msgSend(v21, "process");
      if (v22)
        objc_msgSend(v22, "auditToken");
      else
        memset(v102, 0, sizeof(v102));
      if (FigCaptureClientIsRunningInMediaserverd(v102))
        goto LABEL_22;
      v23 = (void *)objc_msgSend(v21, "process");
      if (v23)
        objc_msgSend(v23, "auditToken");
      else
        memset(v101, 0, sizeof(v101));
      if (FigCaptureClientIsAVConferenced(v101))
LABEL_22:
        v18 = 1;
      if (v17 == ++v20)
      {
        v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v103, v118, 16);
        if (v17)
          goto LABEL_9;
        if ((v18 & 1) == 0)
        {
LABEL_32:
          v24 = a2[1];
          v115 = *a2;
          v116 = v24;
          IsAllowedToUseMetadataCameras = FigCaptureClientIsAllowedToUseMetadataCameras(&v115);
          v25 = a2[1];
          v115 = *a2;
          v116 = v25;
          IsLaunchPrewarmingEnabled = FigCaptureSessionIsLaunchPrewarmingEnabled();
          v26 = a2[1];
          v115 = *a2;
          v116 = v26;
          IsFacemetricsd = FigCaptureClientIsFacemetricsd(&v115);
          v97 = 0u;
          v98 = 0u;
          v99 = 0u;
          v100 = 0u;
          obj = -[FigCaptureSourceBackings sourceInfoDictionaries](v83, "sourceInfoDictionaries");
          v27 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v97, v117, 16);
          if (v27)
          {
            v28 = v27;
            v82 = 0;
            v29 = *(_QWORD *)v98;
            idx = -1;
            v79 = *MEMORY[0x1E0D05A28];
            v30 = 1.0;
            v31 = 1.0;
            v32 = 1.0;
            do
            {
              for (i = 0; i != v28; ++i)
              {
                if (*(_QWORD *)v98 != v29)
                  objc_enumerationMutation(obj);
                v34 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * i);
                if ((objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E4937598, v77, v78), "isEqual:", CFSTR("vide")) & 1) != 0|| objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E4937598), "isEqual:", CFSTR("pcld")))
                {
                  v35 = (void *)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E493B8F8);
                  v36 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
                  if (objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E493B938), "count"))
                  {
                    v96 = 0;
                    type = OS_LOG_TYPE_DEFAULT;
                    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  v39 = v36 != 15 || IsLaunchPrewarmingEnabled != 0;
                  if (IsAllowedToUseMetadataCameras)
                    v40 = 0;
                  else
                    v40 = v36 - 21 >= 0xFFFFFFFC;
                  if (!v40 && v39)
                  {
                    v42 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
                    v43 = v42;
                    if (!IsFacemetricsd || v42 == 2)
                    {
                      *(_QWORD *)value = 0;
                      v44 = a2[1];
                      v115 = *a2;
                      v116 = v44;
                      if (!FigVideoCaptureSourceCreateWithSourceInfo(v87, v34, (uint64_t)&v115, 0, v83, (CFTypeRef *)value))
                      {
                        v45 = *(const void **)value;
                        if (*(_QWORD *)value)
                        {
                          DerivedStorage = CMBaseObjectGetDerivedStorage();
                          v47 = (id *)DerivedStorage;
                          switch(v36)
                          {
                            case 4u:
                            case 6u:
                            case 8u:
                            case 9u:
                            case 0xCu:
                              if (!*(_QWORD *)(DerivedStorage + 144))
                              {
                                *(_QWORD *)(DerivedStorage + 144) = captureSource_copyCaptureSourcesForStreamUniqueIDs((void *)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E493B9B8), theArray);
                                if (v36 > 9 || ((1 << v36) & 0x310) == 0)
                                  goto LABEL_77;
                                v48 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                                v49 = v48;
                                if (v36 == 9 || v36 == 4)
                                  objc_msgSend(v48, "addObject:", &unk_1E49FC468, v77, v78);
                                if ((v36 & 0xFFFFFFFE) == 8)
                                {
                                  objc_msgSend(v47[18], "objectForKeyedSubscript:", v79);
                                  if (objc_msgSend((id)objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))objc_msgSend(v49, "addObject:", &unk_1E49FC480);
                                }
                                objc_msgSend(v47[22], "setObject:forKeyedSubscript:", v49, CFSTR("EligibleFallbackCaptureSourceDeviceTypes"), v77, v78);
                                objc_msgSend(v47[22], "setObject:forKeyedSubscript:", (id)objc_msgSend(v49, "copy"), CFSTR("SupportedFallbackCaptureSourceDeviceTypes"));
                              }
                              if (v36 == 4)
                              {
                                objc_msgSend((id)objc_msgSend((id)objc_msgSend(v47[13], "objectForKeyedSubscript:", CFSTR("BravoSwitchOverVideoZoomFactors")), "objectAtIndexedSubscript:", 0), "floatValue");
                                v31 = v51;
                              }
                              else
                              {
                                if (v36 != 8)
                                  goto LABEL_77;
                                objc_msgSend((id)objc_msgSend((id)objc_msgSend(v47[13], "objectForKeyedSubscript:", CFSTR("BravoSwitchOverVideoZoomFactors")), "objectAtIndexedSubscript:", 0), "floatValue");
                                v32 = 1.0 / v50;
                              }
                              break;
                            case 5u:
                              idx = CFArrayGetCount(theArray);
                              break;
                            case 0xAu:
                              v82 = v45;
                              break;
                            case 0xDu:
                              if (!*(_QWORD *)(DerivedStorage + 152))
                                *(_QWORD *)(DerivedStorage + 152) = captureSource_copyCaptureSourcesForStreamUniqueIDs((void *)objc_msgSend(v34, "objectForKeyedSubscript:", 0x1E493B9D8), theArray);
LABEL_77:
                              if (v43 == 2 && v36 == 7)
                                v30 = 0.5;
                              break;
                            default:
                              break;
                          }
                          CFArrayAppendValue(theArray, v45);
                          CFRelease(v45);
                        }
                      }
                    }
                  }
                }
              }
              v28 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v97, v117, 16);
            }
            while (v28);
          }
          else
          {
            v82 = 0;
            idx = -1;
            v30 = 1.0;
            v31 = 1.0;
            v32 = 1.0;
          }
          v6 = theArray;
          if (CFArrayGetCount(theArray) >= 1)
          {
            v53 = 0;
            do
            {
              CFArrayGetValueAtIndex(v6, v53);
              v54 = CMBaseObjectGetDerivedStorage();
              if (objc_msgSend(*(id *)(v54 + 104), "objectForKeyedSubscript:", 0x1E4938BD8))
                *(_QWORD *)(v54 + 160) = v82;
              v55 = objc_msgSend((id)objc_msgSend(*(id *)(v54 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType"), v77, v78), "intValue");
              v56 = objc_msgSend((id)objc_msgSend(*(id *)(v54 + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
              if ((v55 - 7) >= 3)
              {
                v57 = v31;
                if (v55 != 3)
                  v57 = 1.0;
              }
              else if (v56 == 2)
              {
                v57 = v30;
              }
              else
              {
                v57 = v32;
              }
              *(float *)(v54 + 168) = v57;
              ++v53;
              v6 = theArray;
            }
            while (CFArrayGetCount(theArray) > v53);
          }
          if (idx != -1)
            CFArrayRemoveValueAtIndex(v6, idx);
          pthread_mutex_lock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
          objc_msgSend((id)sAllVideoCaptureSources, "addObjectsFromArray:", v6);
          pthread_mutex_unlock((pthread_mutex_t *)sAllVideoCaptureSourcesLock);
          objc_msgSend((id)sSystemPressureMonitor, "callSystemPressureLevelChangedHandler");
          LOBYTE(v6) = v80;
          goto LABEL_101;
        }
LABEL_31:
        objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "prewarmDefaultVideoDeviceForPID:completionHandler:", PIDFromAuditToken, 0);
        goto LABEL_32;
      }
    }
    if (objc_msgSend(v21, "taskState") != 4
      || (objc_msgSend((id)objc_msgSend(v21, "endowmentNamespaces"), "containsObject:", v14) & 1) == 0)
    {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_101:
  if ((v6 & 2) != 0)
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v58 = -[FigCaptureSourceBackings sourceInfoDictionaries](v83, "sourceInfoDictionaries");
    v59 = -[NSArray countByEnumeratingWithState:objects:count:](v58, "countByEnumeratingWithState:objects:count:", &v91, v107, 16);
    if (v59)
    {
      v60 = v59;
      v61 = *(_QWORD *)v92;
      do
      {
        for (j = 0; j != v60; ++j)
        {
          if (*(_QWORD *)v92 != v61)
            objc_enumerationMutation(v58);
          v63 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * j);
          if (objc_msgSend((id)objc_msgSend(v63, "objectForKeyedSubscript:", 0x1E4937598, v77, v78), "isEqual:", CFSTR("soun")))
          {
            *(_QWORD *)value = 0;
            v64 = a2[1];
            v115 = *a2;
            v116 = v64;
            v65 = FigAudioCaptureSourceCreateWithSourceInfo(v87, v63, &v115, 0, value);
            v66 = *(const void **)value;
            if (!v65 && *(_QWORD *)value != 0)
            {
              CFArrayAppendValue(theArray, *(const void **)value);
              CFRelease(v66);
            }
          }
        }
        v60 = -[NSArray countByEnumeratingWithState:objects:count:](v58, "countByEnumeratingWithState:objects:count:", &v91, v107, 16);
      }
      while (v60);
    }
  }
  if ((v80 & 8) != 0)
  {
    *(_QWORD *)value = 0;
    v68 = a2[1];
    v115 = *a2;
    v116 = v68;
    if (!FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo(v87, v11, &v115, (uint64_t *)value))
    {
      v69 = *(const void **)value;
      CFArrayAppendValue(theArray, *(const void **)value);
      CFRelease(v69);
    }
  }
  if (dword_1ECFE9450)
  {
    v96 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v71 = v96;
    if (os_log_type_enabled(v70, type))
      v72 = v71;
    else
      v72 = v71 & 0xFFFFFFFE;
    if (v72)
    {
      Count = CFArrayGetCount(theArray);
      v74 = a2[1];
      v115 = *a2;
      v116 = v74;
      v75 = FigCaptureGetPIDFromAuditToken(&v115);
      *(_DWORD *)value = 136315906;
      *(_QWORD *)&value[4] = "FigCaptureSourceCopySourcesForClientAuditToken";
      v109 = 1024;
      v110 = Count;
      v111 = 1024;
      v112 = v80;
      v113 = 1024;
      v114 = v75;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return theArray;
}

uint64_t captureSource_copyCaptureSourcesForStreamUniqueIDs(void *a1, const __CFArray *a2)
{
  uint64_t v4;
  void *v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t DerivedStorage;
  id obj;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(a1, "count"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  obj = a1;
  v12 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v12)
  {
    v11 = *(_QWORD *)v15;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v4);
        if (CFArrayGetCount(a2) >= 1)
        {
          v6 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            if (objc_msgSend(v5, "isEqualToString:", objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("UniqueID"))))objc_msgSend(v13, "setObject:forKeyedSubscript:", ValueAtIndex, BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue"), objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue")));
            ++v6;
          }
          while (CFArrayGetCount(a2) > v6);
        }
        ++v4;
      }
      while (v4 != v12);
      v12 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v12);
  }
  return objc_msgSend(v13, "copy");
}

void FigCaptureSourceInitialize(uint64_t a1, char a2)
{
  _QWORD block[5];
  char v5;

  if (a1)
  {
    if (cs_initializeStatics_onceToken != -1)
      dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_76);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigCaptureSourceInitialize_block_invoke;
    block[3] = &unk_1E491EE18;
    block[4] = a1;
    v5 = a2;
    if (FigCaptureSourceInitialize_onceToken != -1)
      dispatch_once(&FigCaptureSourceInitialize_onceToken, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t FigCaptureClientIsAllowedToUseMetadataCameras(_OWORD *a1)
{
  const __CFAllocator *v2;
  __int128 v3;
  __SecTask *v4;
  __SecTask *v5;
  unsigned __int8 v6;
  __int128 v8;
  audit_token_t v9;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v3;
  v4 = SecTaskCreateWithAuditToken(v2, &v9);
  if (v4)
  {
    v5 = v4;
    v6 = FigCaptureClientHasEntitlementWithSecTask(v4, CFSTR("com.apple.private.avfoundation.metadata-cameras.allow"));
    CFRelease(v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = a1[1];
  *(_OWORD *)v9.val = *a1;
  *(_OWORD *)&v9.val[4] = v8;
  return FigCaptureClientIsRunningInXCTest(&v9);
}

uint64_t FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  __int128 v8;
  id v9;
  _QWORD v11[5];
  uint64_t v12;

  v12 = 0;
  if (cs_initializeStatics_onceToken != -1)
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_76);
  FigCaptureSourceGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    FigDebugAssert3();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = a3[1];
    *(_OWORD *)(DerivedStorage + 16) = *a3;
    *(_OWORD *)(DerivedStorage + 32) = v8;
    *(_QWORD *)DerivedStorage = (int)FigAtomicAdd32();
    *(_QWORD *)(DerivedStorage + 48) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
    *(_DWORD *)(DerivedStorage + 8) = 5;
    v9 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", v12);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __FigProprietaryDefaultsCaptureSourceCreateWithSourceInfo_block_invoke;
    v11[3] = &unk_1E4925578;
    v11[4] = v9;
    *(_QWORD *)(DerivedStorage + 232) = -[FigCaptureProprietaryDefaults initWithDefaultsChangedHandler:]([FigCaptureProprietaryDefaults alloc], "initWithDefaultsChangedHandler:", v11);
    *(_BYTE *)(DerivedStorage + 13) = 1;
    pthread_mutex_lock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
    objc_msgSend((id)sAllProprietaryDefaultsCaptureSources, "addObject:", v12);
    pthread_mutex_unlock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
    *a4 = v12;
  }
  return v6;
}

uint64_t FigAudioCaptureSourceCreateWithSourceInfo(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  __int128 v10;
  id v11;
  id v12;
  CMClockRef clockOut;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (cs_initializeStatics_onceToken != -1)
    dispatch_once(&cs_initializeStatics_onceToken, &__block_literal_global_76);
  FigCaptureSourceGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    FigDebugAssert3();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v10 = a3[1];
    *(_OWORD *)(DerivedStorage + 16) = *a3;
    *(_OWORD *)(DerivedStorage + 32) = v10;
    *(_QWORD *)DerivedStorage = (int)FigAtomicAdd32();
    *(_QWORD *)(DerivedStorage + 48) = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 56) = FigDispatchQueueCreateWithPriority();
    v11 = (id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E493B8F8);
    *(_QWORD *)(DerivedStorage + 104) = v11;
    *(_DWORD *)(DerivedStorage + 8) = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("SourceType")), "intValue");
    v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    clockOut = 0;
    if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0)
    {
      CMAudioDeviceClockCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("VirtualAudioDevice_Default"), &clockOut);
      if (clockOut)
      {
        objc_msgSend(v12, "setObject:forKeyedSubscript:", clockOut, CFSTR("Clock"));
        CFRelease(clockOut);
      }
    }
    objc_msgSend(v12, "setObject:forKeyedSubscript:", &unk_1E49FC468, 0x1E4952E78);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Connected"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("Streaming"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", &unk_1E49FC540, CFSTR("MediaType"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "array"), CFSTR("Formats"));
    *(_QWORD *)(DerivedStorage + 176) = v12;
    v15[0] = 0x1E4953C18;
    *(_QWORD *)(DerivedStorage + 184) = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1);
    *(_QWORD *)(DerivedStorage + 64) = 1;
    *(_BYTE *)(DerivedStorage + 13) = 1;
    *a5 = 0;
  }
  return v8;
}

CGFloat psn_rectBoundedByRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v14;
  double v15;
  double v16;
  double MinX;
  BOOL v18;
  double v19;
  double v20;
  double MinY;
  double v22;
  double v24;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  if (a7 >= a3)
    v14 = a3;
  else
    v14 = a7;
  if (v14 >= 0.0)
    v15 = v14;
  else
    v15 = 0.0;
  if (a8 >= a4)
    v16 = a4;
  else
    v16 = a8;
  if (v16 < 0.0)
    v16 = 0.0;
  v24 = v16;
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v26.size.height = a8;
  MinX = CGRectGetMinX(v26);
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.width = a7;
  v27.size.height = a8;
  v25 = v15;
  v18 = CGRectGetMaxX(v27) - v15 < a1;
  v19 = a1;
  if (v18)
  {
    v28.origin.x = a5;
    v28.origin.y = a6;
    v28.size.width = a7;
    v28.size.height = a8;
    v19 = CGRectGetMaxX(v28) - v15;
  }
  if (MinX <= v19)
  {
    v30.origin.x = a5;
    v30.origin.y = a6;
    v30.size.width = a7;
    v30.size.height = a8;
    v20 = v24;
    if (CGRectGetMaxX(v30) - v25 < a1)
    {
      v31.origin.x = a5;
      v31.origin.y = a6;
      v31.size.width = a7;
      v31.size.height = a8;
      a1 = CGRectGetMaxX(v31) - v25;
    }
  }
  else
  {
    v29.origin.x = a5;
    v29.origin.y = a6;
    v29.size.width = a7;
    v29.size.height = a8;
    a1 = CGRectGetMinX(v29);
    v20 = v24;
  }
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = a7;
  v32.size.height = a8;
  MinY = CGRectGetMinY(v32);
  v33.origin.x = a5;
  v33.origin.y = a6;
  v33.size.width = a7;
  v33.size.height = a8;
  v18 = CGRectGetMaxY(v33) - v20 < a2;
  v22 = a2;
  if (v18)
  {
    v34.origin.x = a5;
    v34.origin.y = a6;
    v34.size.width = a7;
    v34.size.height = a8;
    v22 = CGRectGetMaxY(v34) - v20;
  }
  if (MinY <= v22)
  {
    v36.origin.x = a5;
    v36.origin.y = a6;
    v36.size.width = a7;
    v36.size.height = a8;
    if (CGRectGetMaxY(v36) - v20 < a2)
    {
      v37.origin.x = a5;
      v37.origin.y = a6;
      v37.size.width = a7;
      v37.size.height = a8;
      CGRectGetMaxY(v37);
    }
  }
  else
  {
    v35.origin.x = a5;
    v35.origin.y = a6;
    v35.size.width = a7;
    v35.size.height = a8;
    CGRectGetMinY(v35);
  }
  return a1;
}

double psn_pixelBufferRect(__CVBuffer *a1)
{
  double v2;

  v2 = *MEMORY[0x1E0C9D648];
  CVPixelBufferGetWidth(a1);
  CVPixelBufferGetHeight(a1);
  return v2;
}

double FigCaptureMetadataUtilitiesRectNormalizedToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return (a1 - a5) / a7;
}

double FigMotionAdjustBravoDataForReferenceCamera(uint64_t a1)
{
  double result;

  if (a1)
  {
    if ((*(_BYTE *)a1 & 6) != 0)
    {
      _computeExtrinsicMatrixBetweenCamera(a1, 0, 6, 2);
      _computeExtrinsicMatrixBetweenCamera(a1, 5, 4, 2);
      _invertExtrinsicMatrixStoredInBravoData(a1, 2, 1);
      _computeExtrinsicMatrixBetweenCamera(a1, 1, 6, 4);
      _invertExtrinsicMatrixStoredInBravoData(a1, 0, 1);
      _invertExtrinsicMatrixStoredInBravoData(a1, 0, 2);
      result = 0.0;
      *(_OWORD *)(a1 + 392) = 0u;
      *(_OWORD *)(a1 + 408) = 0u;
      *(_OWORD *)(a1 + 424) = 0u;
      *(_DWORD *)(a1 + 392) = 1065353216;
      *(_DWORD *)(a1 + 412) = 1065353216;
      *(_DWORD *)(a1 + 432) = 1065353216;
    }
  }
  return result;
}

float _invertExtrinsicMatrixStoredInBravoData(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  float *v4;
  uint64_t v5;
  uint64_t i;
  float result;

  v3 = 0;
  v4 = (float *)(a1 + 104 + 48 * BravoCurrentToReferenceMapping[3 * a2 + a3]);
  v5 = a1 + 104 + 48 * BravoCurrentToReferenceMapping[3 * a3 + a2];
  do
  {
    *(float *)(v5 + v3 * 4) = v4[dword_1A32B173C[v3]];
    ++v3;
  }
  while (v3 != 12);
  for (i = 0; i != 48; i += 16)
  {
    result = -(float)((float)((float)(*(float *)(v5 + i + 4) * v4[7]) + (float)(*(float *)(v5 + i) * v4[3]))
                    + (float)(*(float *)(v5 + i + 8) * v4[11]));
    *(float *)(v5 + i + 12) = result;
  }
  return result;
}

float *_computeExtrinsicMatrixBetweenCamera(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  _BYTE *v7;
  double *v8;
  float *v9;
  float *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double v18;
  double *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *result;
  float v29;
  float v30;
  float v31[21];
  _BYTE v32[72];
  _BYTE v33[72];
  uint64_t v34;

  v4 = 0;
  v34 = *MEMORY[0x1E0C80C00];
  v5 = (float *)(a1 + 104 + 48 * a3);
  v6 = (float *)(a1 + 104 + 48 * a4);
  v7 = v33;
  v8 = (double *)v32;
  v9 = v5;
  v10 = v6;
  do
  {
    v11 = 0;
    v12 = v8;
    do
    {
      *(double *)&v7[8 * v11] = v9[v11];
      *v12 = v10[v11];
      v12 += 3;
      ++v11;
    }
    while (v11 != 3);
    ++v4;
    v10 += 4;
    v9 += 4;
    v7 += 24;
    ++v8;
  }
  while (v4 != 3);
  v13 = 0;
  v14 = v32;
  do
  {
    v15 = 0;
    v16 = (double *)v33;
    do
    {
      v17 = 0;
      v18 = 0.0;
      v19 = v16;
      do
      {
        v20 = *v19;
        v19 += 3;
        v18 = v18 + *(double *)&v14[v17] * v20;
        v17 += 8;
      }
      while (v17 != 24);
      *(double *)&v31[6 * v13 + 3 + 2 * v15++] = v18;
      ++v16;
    }
    while (v15 != 3);
    ++v13;
    v14 += 24;
  }
  while (v13 != 3);
  v21 = 0;
  v22 = 0;
  v23 = v5[7] - v6[7];
  v24 = a1 + 48 * a2 + 104;
  v31[0] = v5[3] - v6[3];
  v31[1] = v23;
  v31[2] = v5[11] - v6[11];
  v25 = v24;
  do
  {
    v26 = 0;
    v27 = (4 * v22) | 3;
    *(_DWORD *)(v24 + 4 * v27) = 0;
    result = &v31[v21 + 3];
    do
    {
      v29 = *(double *)&result[2 * v26];
      *(float *)(v25 + 4 * v26) = v29;
      v30 = *(float *)(v24 + 4 * v27) + *(double *)&v32[8 * v26 + v21 * 4] * v31[v26];
      *(float *)(v24 + 4 * v27) = v30;
      ++v26;
    }
    while (v26 != 3);
    ++v22;
    v25 += 16;
    v21 += 6;
  }
  while (v22 != 3);
  return result;
}

uint64_t FigCaptureSpeakerInterferenceMitigationIsRequired()
{
  uint64_t v0;

  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("This function may not be called outside of cameracaptured, mediaserverd, or audiomxd"), 0));
  }
  if (FigCaptureSpeakerInterferenceMitigationInitialize_onceToken != -1)
    dispatch_once(&FigCaptureSpeakerInterferenceMitigationInitialize_onceToken, &__block_literal_global_79);
  pthread_mutex_lock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  v0 = sIsSpeakerInterferenceMitigationRequired;
  pthread_mutex_unlock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  return v0;
}

void FigCaptureSpeakerSetInterferenceMitigationIsRequired(unsigned int a1, int a2)
{
  int v4;
  const char *CStringPtr;
  __CFNotificationCenter *LocalCenter;

  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("This function may not be called outside of cameracaptured, mediaserverd, or audiomxd"), 0));
  }
  if (FigCaptureSpeakerInterferenceMitigationInitialize_onceToken != -1)
    dispatch_once(&FigCaptureSpeakerInterferenceMitigationInitialize_onceToken, &__block_literal_global_79);
  pthread_mutex_lock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  v4 = sIsSpeakerInterferenceMitigationRequired;
  if (sIsSpeakerInterferenceMitigationRequired != a1)
    sIsSpeakerInterferenceMitigationRequired = a1;
  pthread_mutex_unlock((pthread_mutex_t *)sIsSpeakerInterferenceMitigationRequiredLock);
  if (a2 || v4 != a1)
  {
    if ((FigCaptureCurrentProcessIsCameracaptured()
       || FigCaptureCurrentProcessIsMediaserverd())
      && FigCaptureAudiomxdSupportEnabled())
    {
      notify_set_state(gSpeakerInterferenceMitigationToken, a1);
      CStringPtr = CFStringGetCStringPtr(CFSTR("SpeakerInterferenceMitigationRequiredChanged"), 0x8000100u);
      notify_post(CStringPtr);
    }
    else
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterPostNotification(LocalCenter, CFSTR("SpeakerInterferenceMitigationRequiredChanged"), 0, 0, 1u);
    }
  }
}

uint64_t FigCaptureSpeakerInterferenceMitigationIsSupported()
{
  if (!FigCaptureCurrentProcessIsAudiomxd()
    && !FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd()
    && !FigCaptureCurrentProcessIsXCTest())
  {
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("This function may not be called outside of cameracaptured, mediaserverd, or audiomxd"), 0));
  }
  return objc_msgSend(&unk_1E4A011A8, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", MGGetProductType()));
}

uint64_t FigCaptureCurrentProcessIsMediaserverd()
{
  __SecTask *v0;
  __SecTask *v1;
  __CFString *v2;
  uint64_t v3;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  v3 = -[__CFString isEqualToString:](v2, "isEqualToString:", 0x1E492D178);

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureCurrentProcessIsAudiomxd()
{
  __SecTask *v0;
  __SecTask *v1;
  __CFString *v2;
  uint64_t v3;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  v3 = -[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("com.apple.audiomxd"));

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureGetPIDVersionFromAuditToken(_OWORD *a1)
{
  __int128 v1;
  audit_token_t v3;

  v1 = a1[1];
  *(_OWORD *)v3.val = *a1;
  *(_OWORD *)&v3.val[4] = v1;
  return audit_token_to_pidversion(&v3);
}

uint64_t FigCaptureClientIsAVConferenced(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __CFString *v5;
  uint64_t v6;
  audit_token_t v8;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v8.val = *a1;
  *(_OWORD *)&v8.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v8);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (__CFString *)SecTaskCopySigningIdentifier(v3, 0);
  v6 = -[__CFString isEqualToString:](v5, "isEqualToString:", 0x1E493D498);

  CFRelease(v4);
  return v6;
}

uint64_t getPATCCAccessClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__5;
  v7 = __Block_byref_object_dispose__5;
  v0 = getPATCCAccessClass_softClass;
  v8 = getPATCCAccessClass_softClass;
  if (!getPATCCAccessClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPATCCAccessClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPATCCAccessClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D8C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef FigCaptureCopyClientCodeSigningIdentifier(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  CFStringRef v5;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = SecTaskCopySigningIdentifier(v3, 0);
  CFRelease(v4);
  return v5;
}

__SecTask *FigCaptureClientIsNonStandard(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  __SecTask *v5;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = FigCaptureClientHasEntitlementWithSecTask(v3, CFSTR("com.apple.private.avfoundation.capture.nonstandard-client.allow"));
  CFRelease(v4);
  return v5;
}

uint64_t getPAApplicationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__5;
  v7 = __Block_byref_object_dispose__5;
  v0 = getPAApplicationClass_softClass;
  v8 = getPAApplicationClass_softClass;
  if (!getPAApplicationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPAApplicationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPAApplicationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D8CE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t processBuffer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  const __CFString *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const void *v13;
  void *v14;
  float v15;
  float v16;
  float v17;
  char v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  signed int v24;
  __int16 v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  const __CFAllocator *v30;
  const void *v31;
  CFNumberRef v32;
  const void *v33;
  const void *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  CFTypeID v37;
  unint64_t Count;
  uint64_t v39;
  int v40;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v46;
  int *v47;
  uint64_t v48;
  int *v49;
  int v50;
  int v51;
  double v52;
  int v53;
  __CVBuffer *v54;
  OSType PixelFormatType;
  uint64_t v56;
  CVPixelBufferRef *v57;
  int v58;
  int v59;
  OSType v60;
  size_t Width;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  OpaqueVTPixelTransferSession *v66;
  signed int v67;
  const __CFNumber *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t j;
  uint64_t v74;
  int *v75;
  char *v76;
  size_t v77;
  size_t v78;
  const void *v79;
  size_t BytesPerRowOfPlane;
  int WidthOfPlane;
  int HeightOfPlane;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  char *BaseAddressOfPlane;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  const char *v110;
  unsigned __int128 v111;
  const char *v112;
  unsigned __int128 v113;
  const char *v114;
  unsigned __int128 v115;
  const char *v116;
  unsigned __int128 v117;
  uint32x4_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint32x4_t v127;
  uint64_t v128;
  int32x4_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  unsigned int v138;
  unsigned int v139;
  int n;
  float v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  int *v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  opaqueCMSampleBuffer *v163;
  const __CFString *v164;
  uint64_t v165;
  uint64_t v166;
  const __CFDictionary *v167;
  __CVBuffer *v168;
  uint64_t CameraParametersForPortType;
  uint64_t v170;
  _BYTE *v171;
  float v172;
  int v173;
  const __CFNumber *v174;
  const __CFNumber *v175;
  uint64_t v176;
  float v177;
  const __CFData *v178;
  const __CFData *v179;
  float v180;
  const UInt8 *BytePtr;
  const __CFData *v182;
  const UInt8 *v183;
  const __CFData *v184;
  const UInt8 *v185;
  const UInt8 *v186;
  uint64_t v187;
  int32x4_t v188;
  int v189;
  uint64_t v190;
  float64x2_t *v191;
  __int128 v192;
  uint64x2_t v193;
  float64x2_t v194;
  __int128 v195;
  float64x2_t v196;
  __int128 v197;
  float64x2_t v198;
  int v199;
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  float v211;
  float v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  float v216;
  const __CFData *v217;
  const UInt8 *v218;
  float v219;
  uint64_t k;
  float v221;
  int v222;
  unint64_t v223;
  float v224;
  int v225;
  int v226;
  unsigned __int16 v227;
  float v228;
  unint64_t m;
  unsigned int v230;
  int v231;
  int v232;
  unsigned __int16 v233;
  float v234;
  uint64_t v235;
  float v236;
  unsigned int *v237;
  unsigned int v238;
  float v239;
  uint64_t v240;
  uint64x2_t v241;
  uint64_t v242;
  float64x2_t v243;
  int v244;
  int v245;
  double v246;
  int v247;
  float v248;
  int v249;
  int v250;
  int v251;
  unsigned __int16 v252;
  double v253;
  double v254;
  unsigned __int16 v255;
  double v256;
  float v257;
  char v258;
  uint64_t v259;
  const __CFDictionary *v260;
  uint64_t v261;
  uint64_t v262;
  float v263;
  const __CFNumber *v264;
  int v265;
  int v266;
  double v267;
  uint64_t v268;
  int v269;
  unsigned __int16 v270;
  double v271;
  double v272;
  unsigned __int16 v273;
  double v274;
  _BOOL4 v275;
  int v276;
  char *v277;
  const __CFNumber *v278;
  float *v279;
  float v280;
  BOOL v281;
  double v282;
  int v283;
  int v284;
  const void *v285;
  const void *v286;
  unsigned int *v287;
  unsigned int v288;
  unsigned int *v289;
  unsigned int v290;
  uint64_t v291;
  const __CFAllocator *v292;
  __CFDictionary *Mutable;
  uint64_t v294;
  uint64_t v295;
  const __CFDictionary *v296;
  unsigned int v297;
  CFNumberRef v298;
  const void *v299;
  const void *v300;
  __CFArray *v301;
  CFNumberRef v302;
  CFNumberRef v303;
  CFNumberRef v304;
  CFNumberRef v305;
  const __CFNumber *v306;
  const __CFNumber *v307;
  const __CFNumber *v308;
  CFNumberRef v309;
  int v310;
  float *v311;
  float v312;
  float v313;
  CFNumberRef v314;
  __CVBuffer *ImageBuffer;
  CFTypeRef v316;
  const __CFDictionary *v317;
  const void *v318;
  int *v319;
  const void *v320;
  Float64 Seconds;
  int v322;
  CFTypeRef v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  _BYTE *v328;
  int v329;
  char *v330;
  int key;
  void *keya;
  int v333;
  __CVBuffer *pixelBuffer;
  __CVBuffer *pixelBuffera;
  CVPixelBufferRef pixelBufferb;
  const __CFNumber *theDict;
  CFDictionaryRef theDicta;
  char theDictb;
  const __CFDictionary *theDictc;
  unsigned __int8 *v341;
  unsigned int v342;
  uint64_t v343;
  opaqueCMSampleBuffer *sbuf;
  const __CFString *v345;
  uint64_t v346;
  CMTime v347;
  int v348;
  uint64_t valuePtr;
  uint64_t v350;
  CMTime time;
  float v352;
  _BYTE v353[32];
  __int128 v354;
  __int128 v355;
  int v356;
  uint64_t v357;

  v357 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88))
    return 4294954511;
  v6 = DerivedStorage;
  v7 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  result = (uint64_t)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (result)
  {
    v343 = v6;
    v8 = (unsigned __int8 *)(v6 + 7536);
    FigImageControl_Sharpness(a1);
    FigImageControl_ToneMapping(a1, a2);
    v9 = CMBaseObjectGetDerivedStorage();
    pixelBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
    sbuf = (opaqueCMSampleBuffer *)a2;
    v345 = v7;
    v10 = (const __CFDictionary *)CMGetAttachment(a2, v7, 0);
    Value = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D067D0]);
    v12 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D067C8]);
    LODWORD(time.value) = 0;
    v350 = 0;
    v13 = (const void *)*MEMORY[0x1E0D06A98];
    v346 = a1;
    if (!CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D06A98]))
      goto LABEL_213;
    v341 = (unsigned __int8 *)(v6 + 7536);
    HIDWORD(valuePtr) = 0;
    v14 = *(void **)(v9 + 48);
    if (v14)
    {
      CMSampleBufferGetPresentationTimeStamp((CMTime *)((char *)&time.value + 4), sbuf);
      CMTimeGetSeconds((CMTime *)((char *)&time.value + 4));
      FigCoreMotionGetVector(v14, (const char *)&time, (uint64_t)&v350 + 4, (uint64_t)&v350);
      v15 = *((float *)&v350 + 1);
      v16 = *(float *)&time.value;
      v17 = *(float *)&v350;
    }
    else
    {
      v17 = 0.0;
      v15 = 0.0;
      v16 = 0.0;
    }
    theDict = v12;
    v19 = (float)((float)((float)(*(float *)(v9 + 5636) - v16) * (float)(*(float *)(v9 + 5636) - v16))
                + (float)((float)(*(float *)(v9 + 5640) - v15) * (float)(*(float *)(v9 + 5640) - v15)))
        + (float)((float)(*(float *)(v9 + 5644) - v17) * (float)(*(float *)(v9 + 5644) - v17));
    HIDWORD(valuePtr) = *(_DWORD *)(v9 + 5500);
    v18 = BYTE4(valuePtr);
    *(float *)(v9 + 4 * SHIDWORD(valuePtr) + 5508) = v19;
    *(float *)(v9 + 5636) = v16;
    *(float *)(v9 + 5640) = v15;
    *(float *)(v9 + 5644) = v17;
    *(_DWORD *)(v9 + 5500) = (v18 + 1) & 0x1F;
    v20 = (float)((float)(v15 * v15) + (float)(v16 * v16)) + (float)(v17 * v17);
    if (v20 < 1.3225 && v20 > 0.7225)
    {
      v21 = *(int *)(v9 + 5504);
      if ((int)v21 <= 6)
        v22 = v21 + 1;
      else
        v22 = 0;
      *(_DWORD *)(v9 + 5504) = v22;
      if (fabsf((float)(v17 * v17) / v20) <= 0.81)
      {
        if (!*(_BYTE *)(v9 + 573))
          v16 = -v16;
        v26 = atan2f(v15, v16);
        if (v26 < 0.0)
          v26 = v26 + 6.2832;
        v24 = llroundf(v26 * 0.63662);
        v25 = v24 - 4;
        v23 = v24 <= 3;
      }
      else
      {
        v23 = v17 <= 0.0;
        LOWORD(v24) = 4;
        v25 = 5;
      }
      if (v23)
        v25 = v24;
      v27 = 0;
      *(_WORD *)(v9 + 2 * v21 + 5648) = v25;
      memset(v353, 0, 24);
      do
      {
        v28 = *(unsigned __int16 *)(v9 + 5648 + v27);
        if (v28 <= 5)
          ++*(_DWORD *)&v353[4 * v28];
        v27 += 2;
      }
      while (v27 != 16);
      v29 = 0;
      HIDWORD(valuePtr) = 0;
      v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v31 = (const void *)*MEMORY[0x1E0D074A8];
      do
      {
        if (*(int *)&v353[4 * v29] >= 5 && v29 != *(unsigned __int16 *)(v9 + 5664))
        {
          *(_WORD *)(v9 + 5664) = v29;
          if (v29 < 4)
          {
            if (*(_BYTE *)(v9 + 518))
            {
              *(_WORD *)(v9 + 5666) = v29;
              v32 = CFNumberCreate(v30, kCFNumberIntType, (char *)&valuePtr + 4);
              captureStreamSetPropertyOnActivityScheduler(v346, v31, v32);
              CFRelease(v32);
              v29 = HIDWORD(valuePtr);
            }
          }
        }
        HIDWORD(valuePtr) = v29 + 1;
        v23 = v29++ <= 4;
      }
      while (v23);
      a1 = v346;
    }
    v33 = CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D08490]);
    if (v33)
    {
      v34 = *(const void **)(v9 + 9024);
      *(_QWORD *)(v9 + 9024) = v33;
      CFRetain(v33);
      if (v34)
        CFRelease(v34);
    }
    v35 = (const __CFArray *)CFDictionaryGetValue(v10, v13);
    if (v35
      && (v36 = v35, v37 = CFGetTypeID(v35), v37 == CFArrayGetTypeID())
      && ((Count = CFArrayGetCount(v36), Count >= 0x10) ? (v39 = 16) : (v39 = Count), v39))
    {
      v40 = 0;
      for (i = 0; i != v39; ++i)
      {
        *(_DWORD *)v353 = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v36, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v353);
        if (v39 == 1)
          v40 = *(_DWORD *)v353;
        else
          v40 += *(_DWORD *)v353 * *(_DWORD *)(v9 + 436 + 4 * i);
      }
    }
    else
    {
      v40 = 0;
    }
    v8 = (unsigned __int8 *)(v6 + 7536);
    if (Value && theDict)
    {
      LODWORD(v347.value) = 0;
      LODWORD(valuePtr) = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &v347);
      CFNumberGetValue(theDict, kCFNumberIntType, &valuePtr);
      if (LODWORD(v347.value) != 4)
      {
        v44 = *(_DWORD *)(v9 + 640) != 0;
        v43 = v9 + 4336;
LABEL_87:
        *(_BYTE *)(v43 + 1880) = v44;
        if ((_DWORD)valuePtr == 1)
        {
          v348 = -1;
          v68 = (const __CFNumber *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D06970]);
          if (v68)
            CFNumberGetValue(v68, kCFNumberIntType, &v348);
          v69 = v348;
          if (*(int *)(v9 + 6220) > 0 || v348 == *(_DWORD *)(v9 + 92))
          {
            v70 = CMBaseObjectGetDerivedStorage();
            v71 = v70;
            v72 = *(unsigned int *)(v70 + 6220);
            if ((int)v72 < 1)
            {
              LODWORD(v74) = 0;
            }
            else
            {
              for (j = 0; j != v72; ++j)
              {
                if (*(_DWORD *)(v70 + 5736 + 4 * j) == v69)
                {
                  *(_QWORD *)(v70 + 8 * j + 5896) = v40;
                  goto LABEL_167;
                }
              }
              if ((int)v72 > 19)
                goto LABEL_167;
              v74 = 0;
              v75 = (int *)(v70 + 5736);
              v76 = (char *)(v70 + 5904);
              v77 = 8 * (int)v72;
              v78 = 4 * (int)v72;
              while (*v75 < v69)
              {
                ++v74;
                ++v75;
                v76 += 8;
                v77 -= 8;
                v78 -= 4;
                if (v72 == v74)
                {
                  LODWORD(v74) = *(_DWORD *)(v70 + 6220);
                  goto LABEL_165;
                }
              }
              memmove(v75 + 1, v75, v78);
              memmove(v76, v76 - 8, v77);
LABEL_165:
              a1 = v346;
              v8 = v341;
            }
            *(_DWORD *)(v71 + 4336 + 4 * v74 + 1400) = v69;
            *(_QWORD *)(v71 + 4336 + 8 * v74 + 1560) = v40;
            ++*(_DWORD *)(v71 + 6220);
LABEL_167:
            CMSampleBufferGetPresentationTimeStamp((CMTime *)v353, sbuf);
            *(Float64 *)(v9 + 5672) = CMTimeGetSeconds((CMTime *)v353);
          }
          if (*(_DWORD *)(v9 + 640))
          {
            if (LODWORD(v347.value) == 4)
            {
              v141 = (float)v40;
              *(_QWORD *)(v9 + 6232) = (unint64_t)(float)((float)v40 * 0.85);
              *(_QWORD *)(v9 + 6248) = (unint64_t)(float)((float)v40 * 1.4);
              *(_DWORD *)(v9 + 6280) = v348;
              *(_QWORD *)(v9 + 6264) = v40;
              if (*(_BYTE *)(v43 + 3246))
              {
                LODWORD(v142) = *(_DWORD *)(v9 + 6220);
                v142 = (int)v142 >= 20 ? 20 : v142;
                if ((int)v142 < 2)
                  goto LABEL_423;
                v143 = 0;
                v144 = 0;
                do
                {
                  v145 = *(_QWORD *)(v9 + 5904 + 8 * v143++);
                  if (v145 > *(_QWORD *)(v9 + 8 * v144 + 5896))
                    v144 = v143;
                }
                while (v142 - 1 != v143);
                if (!v144)
                {
LABEL_423:
                  v144 = *(_DWORD *)(v9 + 5736);
                  if (v144)
                    goto LABEL_183;
                }
                if (v144 == (_DWORD)v142 - 1 && *(_DWORD *)(v9 + 4 * v144 + 5736) != 255)
                {
LABEL_183:
                  *(_QWORD *)(v9 + 6232) = (unint64_t)(float)(v141 * 0.98);
                  *(_QWORD *)(v9 + 6248) = (unint64_t)(float)(v141 * 1.02);
                }
              }
            }
          }
          else
          {
            LODWORD(v146) = *(_DWORD *)(v9 + 6220);
            if ((int)v146 < 1)
            {
              v150 = 0;
              v149 = 0;
              v148 = 0;
            }
            else
            {
              v147 = 0;
              v148 = 0;
              v149 = 0;
              v150 = 0;
              if ((int)v146 >= 20)
                v146 = 20;
              else
                v146 = v146;
              v151 = (_QWORD *)(v9 + 5912);
              v152 = (int *)(v9 + 5744);
              v153 = -2;
              v154 = v9 + 4336;
              do
              {
                v155 = *(v151 - 2);
                if (v155 > v150)
                {
                  v148 = *(v152 - 2);
                  v156 = ((unint64_t)(6844998857600 * v148) >> 32) - 3200 * v148;
                  v157 = (int)((v156 >> 7) + (v156 >> 31) + 9600) >> 8;
                  if (v147)
                  {
                    v158 = v148 - (uint64_t)*(int *)(v154 + 4 * (v153 + 1) + 1400);
                    v159 = (v155 - *(_QWORD *)(v154 + 8 * (v153 + 1) + 1560)) * v157;
                    if (v159 >= v158)
                      v149 = v159 / v158;
                    else
                      v149 = 0;
                    if (v147 >= 2
                      && (v155 - *(_QWORD *)(v9 + 4336 + 8 * v153 + 1560))
                       * v157
                       / (v148 - (uint64_t)*(int *)(v9 + 4336 + 4 * v153 + 1400)) > v149)
                    {
                      v149 = (v155 - *(_QWORD *)(v9 + 4336 + 8 * v153 + 1560))
                           * v157
                           / (v148 - (uint64_t)*(int *)(v9 + 4336 + 4 * v153 + 1400));
                    }
                  }
                  else
                  {
                    v149 = 0;
                  }
                  if (v147 < (v146 - 1))
                  {
                    v160 = *(v152 - 1) - (uint64_t)v148;
                    if ((v155 - *(v151 - 1)) * v157 / v160 > v149)
                      v149 = (v155 - *(v151 - 1)) * v157 / v160;
                    if ((uint64_t)v147 < (int)v146 - 2)
                    {
                      v161 = (v155 - *v151) * v157;
                      if (v161 / (v148 - (uint64_t)*v152) > v149)
                        v149 = v161 / (v148 - (uint64_t)*v152);
                    }
                  }
                  v150 = *(v151 - 2);
                }
                ++v147;
                ++v153;
                ++v151;
                ++v152;
              }
              while (v146 != v147);
            }
            v162 = v150 >> 5;
            if (v149 > v150 >> 5)
              v162 = v149;
            if (v162 >= v150 >> 2)
              v162 = v150 >> 2;
            *(_QWORD *)(v9 + 6232) = v150 - v162;
            *(_QWORD *)(v9 + 6248) = v150 + ((7 * v162) >> 2);
            *(_DWORD *)(v9 + 6280) = v148;
            *(_QWORD *)(v9 + 6264) = v150;
          }
        }
LABEL_213:
        v163 = sbuf;
        FigImageControl_Focus(a1, sbuf);
        FigImageControl_Exposure(a1, sbuf);
        FigImageControl_WhiteBalance(a1, sbuf);
        v164 = v345;
        v165 = v343;
        if (((v8[1] | v8[1525]) & (*v8 ^ 0xFF)) == 0)
          goto LABEL_357;
        v166 = CMBaseObjectGetDerivedStorage();
        v167 = (const __CFDictionary *)CMGetAttachment(sbuf, v345, 0);
        v168 = (__CVBuffer *)*MEMORY[0x1E0D06D00];
        CFDictionaryGetValue(v167, (const void *)*MEMORY[0x1E0D06D00]);
        CameraParametersForPortType = af_sbp_getCameraParametersForPortType();
        if (!CameraParametersForPortType)
          goto LABEL_357;
        v170 = CameraParametersForPortType;
        if (!*(_DWORD *)(CameraParametersForPortType + 1236))
          goto LABEL_357;
        pixelBufferb = v168;
        v171 = (_BYTE *)(v166 + 7538);
        v172 = *(float *)(CameraParametersForPortType + 1204);
        v173 = *(unsigned __int8 *)(v166 + 9060);
        v333 = *(unsigned __int8 *)(v166 + 17321);
        HIDWORD(v350) = 0;
        LODWORD(time.value) = 0;
        v174 = (const __CFNumber *)CFDictionaryGetValue(v167, (const void *)*MEMORY[0x1E0D06CD0]);
        if (v174)
          CFNumberGetValue(v174, kCFNumberFloatType, (char *)&v350 + 4);
        keya = (void *)*MEMORY[0x1E0D067A0];
        v175 = (const __CFNumber *)CFDictionaryGetValue(v167, (const void *)*MEMORY[0x1E0D067A0]);
        if (v175)
          CFNumberGetValue(v175, kCFNumberSInt32Type, &time);
        v176 = 1224;
        if (!LODWORD(time.value))
          v176 = 1220;
        v177 = v173 ? -*(float *)(v170 + v176) : *(float *)(v170 + v176);
        *(_BYTE *)(v166 + 9060) = 0;
        theDictc = v167;
        v178 = (const __CFData *)CFDictionaryGetValue(v167, (const void *)*MEMORY[0x1E0D06B30]);
        if (!v178 || (v179 = v178, CFDataGetLength(v178) != 1024))
        {
LABEL_357:
          v283 = *(_DWORD *)(v165 + 7460);
          v284 = *(_DWORD *)(v165 + 7604);
          if (v283 > 0 || v284 >= 1)
          {
            if (v283 >= 1)
            {
              v285 = *(const void **)(v165 + 7544);
              if (v285)
                captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07338], v285);
            }
            v286 = *(const void **)(v165 + 9032);
            if (v286 && v284 >= 1)
              captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07358], v286);
            captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07388], (const void *)*MEMORY[0x1E0C9AE50]);
            if (v283)
            {
              v287 = (unsigned int *)(v165 + 7460);
              do
                v288 = __ldxr(v287);
              while (__stxr(v288 - v283, v287));
            }
            if (v284)
            {
              v289 = (unsigned int *)(v165 + 7604);
              do
                v290 = __ldxr(v289);
              while (__stxr(v290 - v284, v289));
            }
          }
          v291 = CMBaseObjectGetDerivedStorage();
          v292 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v294 = a1;
          v295 = CMBaseObjectGetDerivedStorage();
          v296 = (const __CFDictionary *)CMGetAttachment(v163, v164, 0);
          time.value = 0;
          LODWORD(v347.value) = 0;
          *(_QWORD *)v353 = 0;
          if (*(_DWORD *)(v295 + 7464) == 2)
            v297 = 3;
          else
            v297 = 1;
          v350 = v297;
          v298 = CFNumberCreate(v292, kCFNumberIntType, &v350);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D06C78], v298);
          CFRelease(v298);
          v299 = (const void *)*MEMORY[0x1E0D07710];
          v300 = CFDictionaryGetValue(v296, (const void *)*MEMORY[0x1E0D07710]);
          CFDictionaryAddValue(Mutable, v299, v300);
          FigImageControl_CurrentFocusRect(v294, (_DWORD *)&time.value + 1, &v347, &time, (_DWORD *)&v350 + 1);
          if (SLODWORD(time.value) >= 1 && SHIDWORD(v350) >= 1)
          {
            if (!*(_BYTE *)(v295 + 7664))
            {
              v311 = (float *)af_sbp_getCameraParametersForPortType();
              if (!v311)
              {
LABEL_397:
                if (!*(_BYTE *)(v291 + 88))
                {
                  pthread_mutex_lock(*(pthread_mutex_t **)(v291 + 17336));
                  if (!*(_BYTE *)(v291 + 88))
                  {
                    v319 = (int *)(v291 + 17328);
                    v320 = *(const void **)(v291 + 16 * *(int *)(v291 + 17328) + 17352);
                    if (v320)
                    {
                      CFRelease(v320);
                      *(_QWORD *)(v291 + 16 * *v319 + 17352) = 0;
                    }
                    CMSampleBufferGetPresentationTimeStamp((CMTime *)v353, v163);
                    Seconds = CMTimeGetSeconds((CMTime *)v353);
                    v322 = *v319;
                    *(Float64 *)(v291 + 16 * *v319 + 17344) = Seconds;
                    if (Mutable)
                    {
                      v323 = CFRetain(Mutable);
                      v322 = *v319;
                      v324 = *v319;
                    }
                    else
                    {
                      v323 = 0;
                      v324 = v322;
                    }
                    *(_QWORD *)(v291 + 16 * v324 + 17352) = v323;
                    *v319 = (v322 + 1) % 20;
                  }
                  pthread_mutex_unlock(*(pthread_mutex_t **)(v291 + 17336));
                }
                if (Mutable)
                  CFRelease(Mutable);
                return 0;
              }
              v312 = *v311;
              if (*v311 != 1.0)
              {
                v313 = (1000.0 - 1000.0 / v312) * 0.5;
                LODWORD(v347.value) = (int)(float)(v312 * (float)((float)SLODWORD(v347.value) - v313));
                LODWORD(time.value) = (int)(float)(v312 * (float)SLODWORD(time.value));
                HIDWORD(time.value) = (int)(float)(v312 * (float)((float)SHIDWORD(time.value) - v313));
                HIDWORD(v350) = (int)(float)(v312 * (float)SHIDWORD(v350));
              }
            }
            v301 = CFArrayCreateMutable(v292, 4, MEMORY[0x1E0C9B378]);
            v302 = CFNumberCreate(v292, kCFNumberIntType, (char *)&time.value + 4);
            CFArrayAppendValue(v301, v302);
            CFRelease(v302);
            v303 = CFNumberCreate(v292, kCFNumberIntType, &v347);
            CFArrayAppendValue(v301, v303);
            CFRelease(v303);
            v304 = CFNumberCreate(v292, kCFNumberIntType, &time);
            CFArrayAppendValue(v301, v304);
            CFRelease(v304);
            v305 = CFNumberCreate(v292, kCFNumberIntType, (char *)&v350 + 4);
            CFArrayAppendValue(v301, v305);
            CFRelease(v305);
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05858], v301);
            CFRelease(v301);
          }
          v306 = (const __CFNumber *)CFDictionaryGetValue(v296, (const void *)*MEMORY[0x1E0D067B0]);
          v307 = (const __CFNumber *)CFDictionaryGetValue(v296, (const void *)*MEMORY[0x1E0D06770]);
          if (v306)
          {
            v308 = v307;
            if (v307)
            {
              valuePtr = 0;
              CFNumberGetValue(v306, kCFNumberFloatType, (char *)&valuePtr + 4);
              CFNumberGetValue(v308, kCFNumberFloatType, &valuePtr);
              HIDWORD(valuePtr) = log2f(*(float *)&valuePtr / *((float *)&valuePtr + 1));
              v309 = CFNumberCreate(v292, kCFNumberFloatType, (char *)&valuePtr + 4);
              *(_QWORD *)v353 = v309;
              CFDictionaryAddValue(Mutable, CFSTR("AEOffset"), v309);
              CFRelease(v309);
            }
          }
          switch(*(_DWORD *)(v295 + 7464))
          {
            case 1:
              v310 = 1;
              goto LABEL_391;
            case 2:
              v310 = 2;
              goto LABEL_391;
            case 3:
              v310 = 3;
              goto LABEL_391;
            case 4:
              v310 = 4;
              goto LABEL_391;
            case 5:
              v310 = 5;
LABEL_391:
              HIDWORD(valuePtr) = v310;
              break;
            default:
              HIDWORD(valuePtr) = 0;
              break;
          }
          v314 = CFNumberCreate(v292, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05E60], v314);
          CFRelease(v314);
          ImageBuffer = CMSampleBufferGetImageBuffer(v163);
          if (ImageBuffer)
          {
            v316 = CVBufferCopyAttachment(ImageBuffer, v345, 0);
            if (v316)
            {
              v317 = (const __CFDictionary *)CFAutorelease(v316);
              if (v317)
              {
                v318 = (const void *)*MEMORY[0x1E0D05EE8];
                if (CFDictionaryGetValueIfPresent(v317, (const void *)*MEMORY[0x1E0D05EE8], (const void **)v353))
                  CFDictionaryAddValue(Mutable, v318, *(const void **)v353);
              }
            }
          }
          goto LABEL_397;
        }
        v330 = (char *)(v166 + 17320);
        v327 = v173;
        v180 = *(float *)(v170 + 1200);
        BytePtr = CFDataGetBytePtr(v179);
        v182 = (const __CFData *)CFDictionaryGetValue(theDictc, (const void *)*MEMORY[0x1E0D06B28]);
        v183 = CFDataGetBytePtr(v182);
        v184 = (const __CFData *)CFDictionaryGetValue(theDictc, (const void *)*MEMORY[0x1E0D06B20]);
        v185 = CFDataGetBytePtr(v184);
        v186 = v185;
        v342 = *(_DWORD *)(v166 + 10180);
        if (!v342)
        {
          v187 = 0;
          v188 = 0uLL;
          do
          {
            v188 = vaddq_s32(*(int32x4_t *)&BytePtr[v187], v188);
            v187 += 16;
          }
          while (v187 != 1024);
          v189 = vaddvq_s32(v188);
          *(_DWORD *)(v166 + 10180) = v189;
          v342 = v189;
        }
        if (*v171)
        {
          v190 = 0;
          v191 = (float64x2_t *)(v166 + 10184);
          do
          {
            v192 = *(_OWORD *)&BytePtr[v190];
            v193.i64[0] = v192;
            v193.i64[1] = DWORD1(v192);
            v194 = vcvtq_f64_u64(v193);
            v193.i64[0] = DWORD2(v192);
            v193.i64[1] = HIDWORD(v192);
            *v191 = v194;
            v191[1] = vcvtq_f64_u64(v193);
            v195 = *(_OWORD *)&v183[v190];
            v193.i64[0] = v195;
            v193.i64[1] = DWORD1(v195);
            v196 = vcvtq_f64_u64(v193);
            v193.i64[0] = DWORD2(v195);
            v193.i64[1] = HIDWORD(v195);
            v191[129] = vcvtq_f64_u64(v193);
            v191[128] = v196;
            v197 = *(_OWORD *)&v185[v190];
            v193.i64[0] = v197;
            v193.i64[1] = DWORD1(v197);
            v198 = vcvtq_f64_u64(v193);
            v193.i64[0] = DWORD2(v197);
            v193.i64[1] = HIDWORD(v197);
            v191[257] = vcvtq_f64_u64(v193);
            v191[256] = v198;
            v190 += 16;
            v191 += 2;
          }
          while (v190 != 1024);
        }
        v347.value = 0;
        *(_QWORD *)&v347.timescale = 0;
        LOWORD(valuePtr) = 0;
        FigCFDictionaryGetInt16IfPresent();
        v325 = v166 + 9096;
        if ((__int16)valuePtr <= 0)
        {
          if ((*(_DWORD *)(v170 + 1216) - 256) >= 0xFFFFFFC8)
            v199 = *(_DWORD *)(v170 + 1216);
          else
            v199 = 255;
        }
        else
        {
          HIWORD(v347.value) = valuePtr;
          FigCFDictionaryGetInt16IfPresent();
          FigCFDictionaryGetInt16IfPresent();
          FigCFDictionaryGetInt16IfPresent();
          if ((*(_DWORD *)(v170 + 1216) - 256) >= 0xFFFFFFC8)
            v199 = *(_DWORD *)(v170 + 1216);
          else
            v199 = 255;
          if ((__int16)valuePtr >= 1)
          {
            v200 = 0;
            v201 = (float)SWORD2(v347.value) * 0.0039062;
            v202 = (float)SHIWORD(v347.value) * 0.0039062;
            v203 = (float)SLOWORD(v347.timescale) * 0.0039062;
            v204 = (float)(v203 + (float)((float)SHIWORD(v347.timescale) * 0.0039062)) + -2.0;
            do
            {
              v205 = (float)(unsigned __int16)v200 * 0.0039062;
              *((float *)&time.value + v200 + 1) = v205;
              v206 = fminf(v202 * fmaxf(v205 - v201, 0.0), 1.0);
              v207 = v206
                   * (float)(v203 + (float)(v206 * (float)((float)((float)(1.0 - v203) - v204) + (float)(v206 * v204))));
              if (v207 < 0.0)
                v207 = 0.0;
              if (v207 > 1.0)
                v207 = 1.0;
              *(float *)&v353[4 * v200++] = v207;
            }
            while (v200 != 257);
            v208 = 0;
            v209 = 0;
            *(_DWORD *)v353 = 0;
            v356 = 1065353216;
            v210 = 1;
            v211 = v352;
            do
            {
              v212 = *(float *)(v166 + 9152 + 4 * v208);
              if (v212 >= v211)
                v212 = v211;
              if (v209 <= 0xFF)
              {
                v213 = v209;
                do
                {
                  v214 = *((float *)&time.value + v213 + 1);
                  if (v214 >= v212)
                    break;
                  if (v212 >= v214 && v214 > *((float *)&time.value + v209 + 1))
                    v209 = (unsigned __int16)v213;
                  ++v213;
                }
                while ((unsigned __int16)v213 != 256);
              }
              if (v210 <= 0x100)
              {
                v215 = v210;
                do
                {
                  v216 = *((float *)&time.value + v215 + 1);
                  if (v212 <= v216)
                  {
                    v210 = (unsigned __int16)v215;
                    if (v216 > *((float *)&time.value + v209 + 1))
                      break;
                  }
                  ++v215;
                }
                while ((unsigned __int16)v215 != 257);
              }
              ispToneCurve[v208++] = *(float *)&v353[4 * v209]
                                   + (float)((float)((float)(*(float *)&v353[4 * v210] - *(float *)&v353[4 * v209])
                                                   / (float)(*((float *)&time.value + v210 + 1)
                                                           - *((float *)&time.value + v209 + 1)))
                                           * (float)(v212 - *((float *)&time.value + v209 + 1)));
            }
            while (v208 != 257);
            goto LABEL_270;
          }
        }
        v217 = (const __CFData *)CFDictionaryGetValue(theDictc, (const void *)*MEMORY[0x1E0D06AF0]);
        if (v217)
        {
          v218 = CFDataGetBytePtr(v217);
          if (v218)
          {
            if (*(_WORD *)v218 == 257)
            {
              for (k = 0; k != 257; ++k)
              {
                LOWORD(v219) = *(_WORD *)&v218[2 * k + 2];
                v219 = (float)LODWORD(v219) * 0.000015259;
                ispToneCurve[k] = v219;
              }
            }
          }
        }
LABEL_270:
        v326 = v166;
        v221 = v172 + v177;
        v222 = 256;
        do
        {
          v223 = (unsigned __int16)v222;
          v224 = ispToneCurve[(unsigned __int16)v222--];
        }
        while (v224 > (float)((float)v199 / 255.0));
        v225 = v223 - 1;
        v226 = v223 - 1;
        do
        {
          v227 = v226;
          v228 = ispToneCurve[(unsigned __int16)v226--];
        }
        while (v228 > (float)((float)(v199 - 1) / 255.0));
        if (v223 <= 0xFE)
        {
          for (m = 254; m >= v223; --m)
          {
            *((_DWORD *)BytePtr + 255) += *(_DWORD *)&BytePtr[4 * m];
            *((_DWORD *)v183 + 255) += *(_DWORD *)&v183[4 * m];
            *((_DWORD *)v186 + 255) += *(_DWORD *)&v186[4 * m];
          }
        }
        *((_DWORD *)BytePtr + 254) = *(_DWORD *)&BytePtr[4 * v225];
        *((_DWORD *)v183 + 254) = *(_DWORD *)&v183[4 * v225];
        v230 = *(_DWORD *)&v186[4 * v225];
        *((_DWORD *)v186 + 254) = v230;
        v231 = v223 - 2;
        if ((unsigned __int16)(v223 - 2) >= v227 && v225 > v227)
        {
          do
          {
            *((_DWORD *)BytePtr + 254) += *(_DWORD *)&BytePtr[4 * (unsigned __int16)v231];
            *((_DWORD *)v183 + 254) += *(_DWORD *)&v183[4 * (unsigned __int16)v231];
            v230 = *((_DWORD *)v186 + 254) + *(_DWORD *)&v186[4 * (unsigned __int16)v231];
            *((_DWORD *)v186 + 254) = v230;
            --v231;
          }
          while ((unsigned __int16)v231 >= v227);
        }
        v328 = v171;
        v232 = *(_DWORD *)(v170 + 1000);
        if (v232 >= 1)
        {
          v233 = 0;
          v234 = *(float *)(v170 + 1004);
          do
          {
            v235 = v233;
            v236 = 0.0;
            switch(*(_DWORD *)(v170 + 4 * v233 + 1072))
            {
              case 1:
                v237 = (unsigned int *)&BytePtr[4 * *(int *)(v170 + 4 * v233 + 1008)];
                goto LABEL_286;
              case 2:
                v237 = (unsigned int *)&v183[4 * *(int *)(v170 + 4 * v233 + 1008)];
                goto LABEL_286;
              case 3:
                v237 = (unsigned int *)&v186[4 * *(int *)(v170 + 4 * v233 + 1008)];
LABEL_286:
                v238 = v342;
                goto LABEL_290;
              case 5:
                v237 = (unsigned int *)&BytePtr[4 * *(int *)(v170 + 4 * v233 + 1008)];
                v238 = *((_DWORD *)BytePtr + 255);
                goto LABEL_290;
              case 6:
                v237 = (unsigned int *)&v183[4 * *(int *)(v170 + 4 * v233 + 1008)];
                v238 = *((_DWORD *)v183 + 255);
                goto LABEL_290;
              case 7:
                v237 = (unsigned int *)&v186[4 * *(int *)(v170 + 4 * v233 + 1008)];
                v238 = *((_DWORD *)v186 + 255);
LABEL_290:
                v236 = (float)*v237 / (float)v238;
                break;
              default:
                break;
            }
            v239 = *(float *)(v170 + 4 * v235 + 1136);
            v180 = v180 + (float)(v239 * powf(v236, v234));
            v233 = v235 + 1;
          }
          while (v232 > (unsigned __int16)(v235 + 1));
        }
        *(double *)(v326 + 16328) = (double)v223;
        *(double *)(v326 + 16336) = (double)v227;
        v240 = *((_QWORD *)BytePtr + 127);
        v241.i64[0] = v240;
        v241.i64[1] = HIDWORD(v240);
        *(float64x2_t *)v325 = vcvtq_f64_u64(v241);
        v242 = *((_QWORD *)v183 + 127);
        v241.i64[0] = v242;
        v241.i64[1] = HIDWORD(v242);
        v243 = vcvtq_f64_u64(v241);
        *(float64x2_t *)(v325 + 16) = v243;
        *(double *)(v326 + 9128) = (double)v230;
        LODWORD(v243.f64[0]) = *((_DWORD *)v186 + 255);
        *(double *)(v326 + 9136) = (double)*(unint64_t *)&v243.f64[0];
        *(double *)(v326 + 9144) = (double)v342;
        LODWORD(v350) = 0;
        FigCFDictionaryGetFloatIfPresent();
        HIDWORD(valuePtr) = 0;
        if (*(float *)(v170 + 1248) > 0.0)
          FigCaptureComputeImageGainFromMetadata();
        v244 = *(_DWORD *)(v170 + 1236);
        v245 = *(_DWORD *)(v325 + 8216) % v244;
        v246 = v180;
        *(double *)(v326 + 8 * v245 + 16344) = v180;
        v163 = sbuf;
        v164 = v345;
        if (v330[2])
        {
          v247 = *(_DWORD *)(v325 + 8208) - 1;
          goto LABEL_305;
        }
        v248 = *(float *)(v170 + 1244);
        if (*((float *)&valuePtr + 1) <= 0.0)
        {
          if (*(float *)&v350 <= v248 && *((float *)&v350 + 1) >= *(float *)(v170 + 1212))
            goto LABEL_303;
        }
        else if (*(float *)&v350 < v248 && *((float *)&valuePtr + 1) < *(float *)(v170 + 1248))
        {
LABEL_303:
          v249 = -1;
          goto LABEL_304;
        }
        v249 = 1;
LABEL_304:
        v247 = *(_DWORD *)(v325 + 8208) + v249;
LABEL_305:
        *(_DWORD *)(v325 + 8208) = v247;
        if (v247 < 0)
        {
          v247 = 0;
          *(_DWORD *)(v325 + 8208) = 0;
        }
        v250 = *(_DWORD *)(v170 + 1232);
        if (v247 > v250)
        {
          *(_DWORD *)(v325 + 8208) = v250;
          v247 = v250;
        }
        *(double *)(v326 + 8 * v245 + 16824) = vabdd_f64(v246, *(double *)(v326 + 9072));
        *(double *)(v326 + 9072) = v246;
        *(_DWORD *)(v325 + 8216) = v245 + 1;
        if (v244 < 1)
        {
          v251 = 0;
          v253 = 0.0;
        }
        else
        {
          v251 = 0;
          v252 = 0;
          v253 = 0.0;
          v254 = 0.0;
          do
          {
            v255 = v252;
            v256 = *(double *)(v326 + 8 * v252 + 16344);
            if (v256 < 1.79769313e308)
            {
              ++v251;
              v254 = v254 + v256;
              v253 = v253 + *(double *)(v326 + 8 * v252 + 16824);
            }
            ++v252;
          }
          while (v244 > (unsigned __int16)(v255 + 1));
          if (v251)
          {
            *(double *)(v326 + 9064) = v254 / (double)v251;
            v253 = v253 / (double)v251;
            v330[1] = v247 > 0;
          }
        }
        if (v251 >= *(_DWORD *)(v170 + 1240))
          v257 = v221;
        else
          v257 = v221 + v221;
        if (*(_DWORD *)(v326 + 7464) == 2)
        {
          if (v333 || !v330[1])
            goto LABEL_326;
          v258 = 1;
        }
        else
        {
          v258 = 0;
        }
        *v330 = v258;
LABEL_326:
        v259 = CMBaseObjectGetDerivedStorage();
        v260 = (const __CFDictionary *)CMGetAttachment(sbuf, v345, 0);
        CFDictionaryGetValue(v260, pixelBufferb);
        v261 = af_sbp_getCameraParametersForPortType();
        if (v261
          && (v262 = v261,
              v263 = *(float *)(v261 + 1208),
              *(_DWORD *)v353 = 0,
              (v264 = (const __CFNumber *)CFDictionaryGetValue(v260, (const void *)*MEMORY[0x1E0D08330])) != 0))
        {
          CFNumberGetValue(v264, kCFNumberFloatType, v353);
          v265 = *(_DWORD *)(v262 + 1236);
          v266 = *(_DWORD *)(v259 + 17316) % v265;
          v267 = *(float *)v353;
          v268 = v259 + 8 * v266;
          *(double *)(v268 + 16584) = *(float *)v353;
          *(double *)(v268 + 17064) = vabdd_f64(v267, *(double *)(v259 + 9088));
          *(double *)(v259 + 9088) = v267;
          *(_DWORD *)(v259 + 17316) = v266 + 1;
          if (v265 < 1)
          {
            v269 = 0;
            v271 = 0.0;
          }
          else
          {
            v269 = 0;
            v270 = 0;
            v271 = 0.0;
            v272 = 0.0;
            do
            {
              v273 = v270;
              v274 = *(double *)(v259 + 8 * v270 + 16584);
              if (v274 < 1.79769313e308)
              {
                ++v269;
                v272 = v272 + v274;
                v271 = v271 + *(double *)(v259 + 8 * v270 + 17064);
              }
              ++v270;
            }
            while (v265 > (unsigned __int16)(v273 + 1));
            if (v269)
            {
              *(double *)(v259 + 9080) = v272 / (double)v269;
              v271 = v271 / (double)v269;
            }
          }
          if (v269 < *(_DWORD *)(v262 + 1240))
            v263 = v263 + v263;
          HIDWORD(time.value) = 0;
          v278 = (const __CFNumber *)CFDictionaryGetValue(v260, keya);
          if (v278 && (CFNumberGetValue(v278, kCFNumberSInt32Type, (char *)&time.value + 4), HIDWORD(time.value)))
            v279 = (float *)(v262 + 1224);
          else
            v279 = (float *)(v262 + 1220);
          v165 = v343;
          v276 = v327;
          v277 = v330;
          v280 = *v279;
          if (v327)
            v280 = -*v279;
          v275 = *(double *)(v259 + 9080) > (float)(v263 + v280);
          a1 = v346;
        }
        else
        {
          v275 = 0;
          v271 = 0.0;
          a1 = v346;
          v165 = v343;
          v276 = v327;
          v277 = v330;
        }
        v281 = *(double *)(v326 + 9064) <= v257 && !v275;
        if (!v281 && (!v277[1] || *v277))
          v328[1522] = 1;
        v282 = *(float *)(v170 + 1228);
        if (v253 > v282 && v271 > v282 && v328[1522] != v276)
          v328[1522] = v276;
        goto LABEL_357;
      }
      if (*(_BYTE *)(v9 + 6216))
      {
        v43 = v9 + 4336;
        v44 = 0;
        goto LABEL_87;
      }
    }
    if (v19 < 0.0016)
      *(_QWORD *)(v9 + 6264) = (unint64_t)(float)((float)((float)(1.0 - (float)((float)(v19 * 62.5) + 0.9))
                                                               * (float)v40)
                                                       + (float)((float)*(unint64_t *)(v9 + 6264)
                                                               * (float)((float)(v19 * 62.5) + 0.9)));
    v45 = *(_DWORD *)(v9 + 7628);
    if (v45 < 1 || (v46 = *(_DWORD *)(v9 + 7632), v46 < 1))
    {
      v45 = *(_DWORD *)(v9 + 7484);
      if (!v45)
        goto LABEL_213;
      v46 = *(_DWORD *)(v9 + 7488);
      if (!v46)
        goto LABEL_213;
      v47 = (int *)(v9 + 7476);
      v48 = 7480;
    }
    else
    {
      v47 = (int *)(v9 + 7620);
      v48 = 7624;
    }
    v49 = (int *)(v9 + v48);
    if (!*(_BYTE *)(v9 + 4336))
    {
      v79 = *(const void **)(v9 + 6296);
      if (v79)
      {
        CFRelease(v79);
        *(_QWORD *)(v9 + 6296) = 0;
      }
      goto LABEL_213;
    }
    v50 = *v49;
    v51 = *v47;
    CMSampleBufferGetPresentationTimeStamp(&v347, sbuf);
    v52 = CMTimeGetSeconds(&v347);
    if (v52 - *(double *)(v9 + 6304) < 0.00826446281)
      goto LABEL_213;
    *(double *)(v9 + 6304) = v52;
    v53 = (*(_DWORD *)(v9 + 5492) + 1) & 0x1F;
    *(_DWORD *)(v9 + 5492) = v53;
    HIDWORD(valuePtr) = v53;
    v54 = pixelBuffer;
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (!FigCapturePixelFormatGetCompressionType(PixelFormatType)
      && !FigCapturePixelFormatIsTenBit(PixelFormatType))
    {
      if (!pixelBuffer)
        goto LABEL_160;
      goto LABEL_82;
    }
    v56 = CMBaseObjectGetDerivedStorage();
    v57 = (CVPixelBufferRef *)(v56 + 6296);
    if (!*(_QWORD *)(v56 + 6296))
    {
      v58 = v50;
      v59 = v51;
      v60 = CVPixelBufferGetPixelFormatType(pixelBuffer);
      Width = CVPixelBufferGetWidth(pixelBuffer);
      theDicta = (CFDictionaryRef)CVPixelBufferGetHeight(pixelBuffer);
      v62 = v60;
      v51 = v59;
      v50 = v58;
      if (FigCapturePixelFormatIsFullRange(v62))
        v63 = 875704422;
      else
        v63 = 875704438;
      v64 = Width >> 2;
      if (Width <= 0xA03)
        v64 = 640;
      if (v64 >= Width)
        v64 = Width;
      v65 = 2 * llroundf((float)v64 * 0.5);
      a1 = v346;
      if (BWCreateIOSurfaceBackedCVPixelBuffer(v65, 2 * llroundf((float)((uint64_t)theDicta * (int)v65 / Width) * 0.5), v63, v57, CFSTR("AF SBP: Scene Monitoring Intermediate")))goto LABEL_418;
    }
    v66 = *(OpaqueVTPixelTransferSession **)(v56 + 6288);
    if (!v66)
    {
      if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (VTPixelTransferSessionRef *)(v56 + 6288)))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        a1 = v346;
        goto LABEL_420;
      }
      v66 = *(OpaqueVTPixelTransferSession **)(v56 + 6288);
      a1 = v346;
    }
    if (VTPixelTransferSessionTransferImage(v66, pixelBuffer, *v57))
    {
LABEL_418:
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v54 = *v57;
      if (*v57)
      {
LABEL_82:
        v67 = CVPixelBufferGetPixelFormatType(v54);
        if (v67 > 2037741157)
        {
          if (v67 != 2037741171 && v67 != 2037741158)
            goto LABEL_160;
          theDictb = 1;
        }
        else
        {
          theDictb = 0;
          if (v67 != 875704422 && v67 != 875704438)
            goto LABEL_160;
        }
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v54, 0);
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(v54, 0);
        pixelBuffera = v54;
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v54, 0);
        v83 = v51 * WidthOfPlane / 1000;
        v84 = v45 * WidthOfPlane / 1000;
        v85 = v50 * HeightOfPlane;
        v86 = v50 * HeightOfPlane / 1000;
        v87 = v46 * HeightOfPlane / 1000;
        if (v51 * WidthOfPlane >= -999)
          v88 = (v51 * WidthOfPlane / 1000) & 0xF;
        else
          v88 = v51 * WidthOfPlane / 1000;
        v89 = v83 - v88;
        v90 = v88 + v84;
        if (v85 >= -999)
          v91 = v86 & 3;
        else
          v91 = v86;
        v92 = WidthOfPlane - (v84 + v83);
        if (WidthOfPlane >= v84 + v83)
          v92 = ((v90 + 7) & 0xFFFFFFF0) - v90;
        if (v87 + v86 <= HeightOfPlane)
          v93 = v87 + v86 - (((_BYTE)v91 + (_BYTE)v87) & 3);
        else
          v93 = HeightOfPlane;
        if (v89 >= WidthOfPlane)
          goto LABEL_160;
        v94 = v86 - v91;
        if (v86 - v91 >= HeightOfPlane)
          goto LABEL_160;
        v95 = v92 + v90;
        if ((int)(v92 + v90 + v89) > WidthOfPlane || v93 > HeightOfPlane)
          goto LABEL_160;
        if ((theDictb & 1) != 0)
        {
          if (BytesPerRowOfPlane >= 2 * WidthOfPlane)
            goto LABEL_123;
        }
        else if (BytesPerRowOfPlane >= WidthOfPlane)
        {
LABEL_123:
          key = v91;
          v329 = v88;
          v354 = 0u;
          v355 = 0u;
          memset(v353, 0, sizeof(v353));
          if (!CVPixelBufferLockBaseAddress(pixelBuffera, 1uLL))
          {
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffera, 0);
            if (BaseAddressOfPlane)
            {
              if ((theDictb & 1) != 0)
              {
                if (v94 < v93)
                {
                  v97 = 2 * v89;
                  v98 = v94;
                  v99 = &BaseAddressOfPlane[BytesPerRowOfPlane * v94];
                  v100 = 4 * BytesPerRowOfPlane;
                  v101 = v86 - (uint64_t)key;
                  v102 = &BaseAddressOfPlane[BytesPerRowOfPlane + BytesPerRowOfPlane * v101];
                  v103 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v101 + 2)];
                  v104 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v101 + 3)];
                  do
                  {
                    if (v95 >= 1)
                    {
                      v105 = 0;
                      v106 = v104;
                      v107 = v103;
                      v108 = v102;
                      v109 = v99;
                      do
                      {
                        v110 = &v108[v97];
                        v111 = (unsigned __int128)vld2q_s8(v110);
                        v112 = &v109[v97];
                        v113 = (unsigned __int128)vld2q_s8(v112);
                        v114 = &v107[v97];
                        v115 = (unsigned __int128)vld2q_s8(v114);
                        v116 = &v106[v97];
                        v117 = (unsigned __int128)vld2q_s8(v116);
                        v118 = vshrq_n_u32(vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8((uint8x16_t)v111), (uint8x16_t)v113), (uint8x16_t)v115), (uint8x16_t)v117)), 8uLL);
                        ++*(_DWORD *)&v353[4 * v118.u32[0]];
                        ++*(_DWORD *)&v353[4 * v118.u32[1]];
                        ++*(_DWORD *)&v353[4 * v118.u32[2]];
                        ++*(_DWORD *)&v353[4 * v118.u32[3]];
                        v105 += 16;
                        v109 += 32;
                        v108 += 32;
                        v107 += 32;
                        v106 += 32;
                      }
                      while (v105 < v95);
                    }
                    v98 += 4;
                    v99 += v100;
                    v102 += v100;
                    v103 += v100;
                    v104 += v100;
                  }
                  while (v98 < v93);
                }
              }
              else if (v94 < v93)
              {
                v119 = v94;
                v120 = &BaseAddressOfPlane[BytesPerRowOfPlane * v94 + v83 - v329];
                v121 = 4 * BytesPerRowOfPlane;
                v122 = v86 - (uint64_t)key;
                v123 = &BaseAddressOfPlane[BytesPerRowOfPlane + BytesPerRowOfPlane * v122 + v83 - v329];
                v124 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v122 + 2) + v83 - v329];
                v125 = &BaseAddressOfPlane[BytesPerRowOfPlane * (v122 + 3) + v83 - v329];
                do
                {
                  if (v95 >= 1)
                  {
                    v126 = 0;
                    do
                    {
                      v127 = vshrq_n_u32(vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(*(uint8x16_t *)&v123[v126]), *(uint8x16_t *)&v120[v126]), *(uint8x16_t *)&v124[v126]), *(uint8x16_t *)&v125[v126])), 8uLL);
                      ++*(_DWORD *)&v353[4 * v127.u32[0]];
                      ++*(_DWORD *)&v353[4 * v127.u32[1]];
                      ++*(_DWORD *)&v353[4 * v127.u32[2]];
                      ++*(_DWORD *)&v353[4 * v127.u32[3]];
                      v126 += 16;
                    }
                    while ((int)v126 < v95);
                  }
                  v119 += 4;
                  v120 += v121;
                  v123 += v121;
                  v124 += v121;
                  v125 += v121;
                }
                while (v119 < v93);
              }
              if (!CVPixelBufferUnlockBaseAddress(pixelBuffera, 1uLL))
              {
                v128 = 0;
                v129 = 0uLL;
                a1 = v346;
                v8 = v341;
                do
                {
                  v129 = vaddq_s32(*(int32x4_t *)&v353[v128], v129);
                  v128 += 16;
                }
                while (v128 != 64);
                v130 = 0;
                v131 = vaddvq_s32(v129);
                v132 = SHIDWORD(valuePtr);
                v133 = v9 + 32 * SHIDWORD(valuePtr) + 4338;
                do
                {
                  *(_WORD *)(v133 + 2 * v130) = 4095 * *(_DWORD *)&v353[4 * v130] / v131;
                  ++v130;
                }
                while (v130 != 16);
                v134 = 0;
                v135 = v9 + 32 * v132 + 4338;
                v136 = v9 + 32 * (((_BYTE)v132 + 26) & 0x1F) + 4338;
                v137 = 0.0;
                do
                {
                  if (*(_WORD *)(v136 + v134) && *(_WORD *)(v135 + v134))
                  {
                    v138 = *(unsigned __int16 *)(v136 + v134);
                    v137 = v137 + (float)((float)v138 * log2f((float)v138 / (float)*(unsigned __int16 *)(v135 + v134)));
                  }
                  v134 += 2;
                }
                while (v134 != 32);
                v139 = 0;
                ++*(_DWORD *)(v9 + 5496);
                *(_DWORD *)(v9 + 4 * v132 + 5364) = (int)fmaxf(v137, 0.0);
                for (n = -1; n != -6; --n)
                {
                  if (*(_DWORD *)(v9 + 4 * (((_BYTE)v132 + (_BYTE)n) & 0x1F) + 5364) > *(_DWORD *)(v9 + 9056))
                    ++v139;
                }
                if (v139 >= 4 && *(int *)(v9 + 5496) >= 49)
                {
                  CMNotificationCenterGetDefaultLocalCenter();
                  CMNotificationCenterPostNotification();
                }
                goto LABEL_213;
              }
            }
          }
        }
LABEL_160:
        fig_log_get_emitter();
        FigDebugAssert3();
        fig_log_get_emitter();
        FigDebugAssert3();
        a1 = v346;
LABEL_161:
        v8 = v341;
        goto LABEL_213;
      }
    }
LABEL_420:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_161;
  }
  return result;
}

uint64_t af_sbp_getCameraParametersForPortType()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend(*(id *)(DerivedStorage + 8), "portType");
  if (FigCFEqual())
    return DerivedStorage + 568;
  if (FigCFEqual())
    return DerivedStorage + 1824;
  if (FigCFEqual())
    return DerivedStorage + 3080;
  return 0;
}

uint64_t FigCoreMotionGetVector(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "getVectorX:y:z:forTimeStamp:", a2, a3, a4);
}

uint64_t FigImageControl_ToneMapping(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v5;
  uint64_t v6;
  float v7;
  unsigned int *v8;
  unsigned int v9;
  CFDictionaryRef v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  int v17;
  int v18;
  int v19;
  const __CFData *v20;
  const __CFData *v21;
  const __CFData *v22;
  const __CFData *v23;
  const UInt8 *BytePtr;
  const UInt8 *v25;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  float v33;
  float v34;
  float v35;
  CFAllocatorRef *v36;
  float v37;
  CFNumberRef v38;
  const __CFData *v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  const UInt8 *v43;
  uint64_t v44;
  int v45;
  int v46;
  float v47;
  float v48;
  float v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  BOOL *v82;
  float v83;
  unsigned int *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  uint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  float32x4_t v105;
  uint32x4_t v106;
  int32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  const __CFAllocator *v112;
  CFArrayRef v113;
  unsigned int v114;
  unsigned int v117;
  int v118;
  int v119;
  int valuePtr;
  int v121;
  int v122;
  int v123;
  void *values[128];
  void *keys[129];

  keys[128] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v6 = 0;
  v122 = 256;
  v123 = 256;
  valuePtr = 64;
  v121 = 256;
  v118 = 64;
  v119 = 64;
  v117 = 0;
  if (!*(_BYTE *)(DerivedStorage + 6336))
  {
    if (*(_BYTE *)(DerivedStorage + 508))
    {
      v6 = 0;
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 6348) = 1065353216;
      *(_QWORD *)(DerivedStorage + 6352) = *(_QWORD *)(DerivedStorage + 584);
      v7 = *(float *)(DerivedStorage + 580);
      *(float *)(DerivedStorage + 6368) = v7;
      *(float *)(DerivedStorage + 6372) = 1.0 / (float)(1.0 - v7);
      v8 = (unsigned int *)(DerivedStorage + 6340);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      keys[0] = *(void **)MEMORY[0x1E0D07190];
      values[0] = *(void **)MEMORY[0x1E0C9AE50];
      v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07578], v10);
      CFRelease(v10);
    }
    *(_BYTE *)(DerivedStorage + 6336) = 1;
  }
  if (!*(_BYTE *)(DerivedStorage + 508))
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06848]);
    if (Value)
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v12 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06820]);
    if (v12)
      CFNumberGetValue(v12, kCFNumberIntType, &v119);
    v13 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D067E8]);
    if (v13)
      CFNumberGetValue(v13, kCFNumberIntType, &v118);
    v14 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D067E0]);
    if (v14)
      CFNumberGetValue(v14, kCFNumberIntType, &v123);
    v15 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06F78]);
    if (v15)
      CFNumberGetValue(v15, kCFNumberIntType, &v122);
    v16 = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06F60]);
    if (v16)
      CFNumberGetValue(v16, kCFNumberIntType, &v121);
    v18 = v122;
    v17 = v123;
    v19 = v121;
    v20 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06B30]);
    v21 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06B28]);
    v22 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06B20]);
    if (v20)
    {
      if (v21)
      {
        v23 = v22;
        if (v22)
        {
          BytePtr = CFDataGetBytePtr(v20);
          v25 = CFDataGetBytePtr(v21);
          v26 = CFDataGetBytePtr(v23);
          v27 = 0;
          v28 = DerivedStorage + 6388;
          do
          {
            v29 = *(_DWORD *)&v25[v27] + *(_DWORD *)&BytePtr[v27] + *(_DWORD *)&v26[v27];
            v30 = *(_DWORD *)(v28 + v27);
            if (v30)
              v29 = (5 * v29 + 11 * v30 + 7) >> 4;
            *(_DWORD *)(v28 + v27) = v29;
            v27 += 4;
          }
          while (v27 != 1024);
        }
      }
    }
    v31 = *(_DWORD *)(DerivedStorage + 6344);
    *(_DWORD *)(DerivedStorage + 6344) = v31 + 1;
    if ((v31 & 1) != 0)
    {
      v32 = *(_DWORD *)(DerivedStorage + 7468);
      if (!v32)
        v32 = *(_DWORD *)(DerivedStorage + 7464);
      if ((v32 - 3) >= 2)
      {
        v33 = *(float *)(DerivedStorage + 584);
        v34 = *(float *)(DerivedStorage + 588);
        v35 = *(float *)(DerivedStorage + 580);
        v36 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
        if (*(_BYTE *)(DerivedStorage + 522))
        {
          v37 = *(float *)(DerivedStorage + 604);
          if (*(_DWORD *)(DerivedStorage + 40))
            v37 = v37
                + (float)((float)((float)(v37 - *(float *)(DerivedStorage + 600)) * -0.066667)
                        * (float)((float)((float)((float)((float)v17 * (float)v18) * (float)v19) * 0.000000059605) + -1.0));
          if (v37 != *(float *)(DerivedStorage + 6348))
          {
            *(float *)(DerivedStorage + 6348) = v37;
            v117 = vcvts_n_s32_f32(v37, 0xAuLL);
            v38 = CFNumberCreate(*v36, kCFNumberIntType, &v117);
            v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07420], v38);
            CFRelease(v38);
          }
        }
        v39 = (const __CFData *)CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E0D06B38]);
        if (v39)
        {
          *(_BYTE *)(DerivedStorage + 6384) = 1;
          v43 = CFDataGetBytePtr(v39);
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = *(float *)(DerivedStorage + 592);
          v48 = *(float *)(DerivedStorage + 596);
          do
          {
            v46 += *(_DWORD *)(DerivedStorage + 6388 + v44);
            v45 += *(_DWORD *)&v43[v44];
            *(_DWORD *)((char *)keys + v44) = v46;
            *(_DWORD *)((char *)values + v44) = v45;
            v44 += 4;
          }
          while (v44 != 1024);
          v49 = (float)v46;
          v50 = (int)(float)((float)((float)v46 * 0.001) + 0.5);
          v51 = (int)keys[0];
          if (SLODWORD(keys[0]) >= v50)
          {
            v55 = 0;
            v53 = 0;
            LODWORD(v52) = 0;
            v54 = (int)(float)((float)(v49 * 0.985) + 0.5);
LABEL_49:
            v56 = v52;
            v58 = *((_DWORD *)keys + v52);
            if (v58 >= v54)
            {
              v57 = v53;
            }
            else
            {
              while (1)
              {
                v57 = v58;
                if (v56 == 255)
                  break;
                v58 = *((_DWORD *)keys + ++v56);
                if (v58 >= v54)
                  goto LABEL_57;
              }
              LODWORD(v56) = 256;
            }
          }
          else
          {
            v52 = 0;
            do
            {
              v53 = v51;
              if (v52 == 255)
              {
                v55 = 256;
                v54 = (int)(float)((float)(v49 * 0.985) + 0.5);
                LODWORD(v56) = 256;
                v57 = v51;
                v58 = v51;
                goto LABEL_57;
              }
              v51 = *((_DWORD *)keys + ++v52);
            }
            while (v51 < v50);
            v54 = (int)(float)((float)(v49 * 0.985) + 0.5);
            v55 = v52;
            if (v52 < 0x100)
              goto LABEL_49;
            LODWORD(v56) = v52;
            v57 = v53;
            v58 = v51;
          }
LABEL_57:
          v60 = v47
              + (float)((float)(1.0 - v47)
                      * (float)((float)((float)((float)(v54 - v57) / (float)(v58 - v57)) + (float)(int)v56) * 0.0039062));
          v61 = 0.005625;
          if ((float)(v35 * (float)((float)((float)((float)(v50 - v53) / (float)(v51 - v53)) + (float)v55) * 0.0039062)) <= 0.005625)
            v61 = v35 * (float)((float)((float)((float)(v50 - v53) / (float)(v51 - v53)) + (float)v55) * 0.0039062);
          if (v60 >= 0.62996)
            v62 = v60;
          else
            v62 = 0.62996;
          v63 = v61 + (float)((float)(v62 - v61) * 0.18);
          v64 = *((_DWORD *)values + (int)(float)((float)(v63 * 90.51) + 0.5));
          v65 = v64 - *((_DWORD *)values + (int)(float)((float)(v63 * 11.314) + 0.5));
          v66 = (int)(float)((float)(v63 * 724.08) + 0.5);
          if (v66 >= 255)
            v66 = 255;
          v67 = *((_DWORD *)values + v66);
          v68 = v67 - v64;
          if ((int)(float)((float)(v63 * 5792.6) + 0.5) >= 255)
            v69 = 255;
          else
            v69 = (int)(float)((float)(v63 * 5792.6) + 0.5);
          v70 = (float)v68 / (float)v45;
          v71 = 1.2;
          v72 = (float)v65 / (float)v45;
          v73 = (float)(*((_DWORD *)values + v69) - v67) / (float)v45;
          v74 = v48 + (float)((float)(1.0 - v48) * (float)((float)(1.2 - v70) - v72));
          v75 = v48 + (float)((float)(1.0 - v48) * (float)((float)(1.2 - v70) - v73));
          if (v74 <= 1.2)
            v76 = v74;
          else
            v76 = 1.2;
          if (v74 <= 0.1)
            v33 = 0.1;
          else
            v33 = v76;
          if (v75 <= 1.2)
            v71 = v75;
          *(float *)(DerivedStorage + 7412) = v72;
          if (v75 <= 0.1)
            v34 = 0.1;
          else
            v34 = v71;
          *(float *)(DerivedStorage + 7416) = v70;
          *(float *)(DerivedStorage + 7420) = v73;
          v35 = powf(v61, 0.45455);
          v59 = 1.0 / (float)(powf(v62, 0.45455) - v35);
        }
        else if (*(_BYTE *)(DerivedStorage + 6384))
        {
          v33 = *(float *)(DerivedStorage + 6360);
          v34 = *(float *)(DerivedStorage + 6364);
          v35 = *(float *)(DerivedStorage + 6376);
          v59 = *(float *)(DerivedStorage + 6380);
        }
        else
        {
          v59 = 1.0 / (float)(1.0 - v35);
        }
        v77 = *(_DWORD *)(DerivedStorage + 6340);
        v78 = *(float *)(DerivedStorage + 6352);
        v79 = *(float *)(DerivedStorage + 6356);
        if (vabds_f32(v78, v33) > 0.02
          || vabds_f32(v79, v34) > 0.02
          || ((v80 = *(float *)(DerivedStorage + 6372), v80 <= (float)(v59 * 1.02))
            ? (_NF = (float)(v80 * 1.02) < v59)
            : (_NF = 1),
              _NF))
        {
          v82 = (BOOL *)(DerivedStorage + 6385);
          v83 = *(float *)(DerivedStorage + 6368);
          v80 = *(float *)(DerivedStorage + 6372);
        }
        else
        {
          v83 = *(float *)(DerivedStorage + 6368);
          v82 = (BOOL *)(DerivedStorage + 6385);
          if (!*(_BYTE *)(DerivedStorage + 6385) && vabds_f32(v83, v35) <= 0.01 && v77 == 0)
            return v6;
        }
        v84 = (unsigned int *)(DerivedStorage + 6340);
        *(float *)(DerivedStorage + 6360) = v33;
        *(float *)(DerivedStorage + 6364) = v34;
        *(float *)(DerivedStorage + 6376) = v35;
        *(float *)(DerivedStorage + 6380) = v59;
        v85 = 0.01;
        if ((float)(v33 - v78) <= 0.01)
          v86 = v33 - v78;
        else
          v86 = 0.01;
        if ((float)(v33 - v78) <= -0.01)
          v87 = -0.01;
        else
          v87 = v86;
        *(float *)v40.i32 = v78 + v87;
        if ((float)(v34 - v79) <= 0.01)
          v88 = v34 - v79;
        else
          v88 = 0.01;
        if ((float)(v34 - v79) <= -0.01)
          v89 = -0.01;
        else
          v89 = v88;
        *(float *)v41.i32 = v79 + v89;
        if ((float)(v35 - v83) <= 0.01)
          v85 = v35 - v83;
        if ((float)(v35 - v83) <= -0.01)
          v90 = -0.01;
        else
          v90 = v85;
        *(float *)v42.i32 = v83 + v90;
        v91 = 1.008;
        if ((float)(v59 / v80) <= 1.008)
          v91 = v59 / v80;
        if ((float)(v59 / v80) <= 0.99206)
          v92 = 0.99206;
        else
          v92 = v91;
        v93 = v80 * v92;
        *(_DWORD *)(DerivedStorage + 6352) = v40.i32[0];
        *(_DWORD *)(DerivedStorage + 6356) = v41.i32[0];
        *(_DWORD *)(DerivedStorage + 6368) = v42.i32[0];
        *(float *)(DerivedStorage + 6372) = v93;
        v94 = vabds_f32(v33, *(float *)v40.i32) > 0.00001
           || vabds_f32(v34, *(float *)v41.i32) > 0.00001
           || vabds_f32(v59, v93) > 0.00001
           || vabds_f32(v35, *(float *)v42.i32) > 0.00001;
        v95 = 0;
        *v82 = v94;
        *(float *)v41.i32 = (float)(*(float *)v40.i32 + *(float *)v41.i32) + -2.0;
        v96 = (float32x4_t)vdupq_lane_s32(v42, 0);
        v97 = (float32x4_t)vdupq_lane_s32(v41, 0);
        *(float *)v41.i32 = (float)(1.0 - *(float *)v40.i32) - *(float *)v41.i32;
        v98 = (float32x4_t)vdupq_lane_s32(v41, 0);
        v99 = (float32x4_t)vdupq_lane_s32(v40, 0);
        v100 = (int32x4_t)xmmword_1A3161E00;
        v101 = (float32x4_t)vdupq_n_s32(0x3B808081u);
        __asm { FMOV            V16.4S, #1.0 }
        v105 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v106.i64[0] = 0xFF000000FFLL;
        v106.i64[1] = 0xFF000000FFLL;
        v107.i64[0] = 0x400000004;
        v107.i64[1] = 0x400000004;
        do
        {
          v108 = vminnmq_f32(vmulq_n_f32(vmaxnmq_f32(vsubq_f32(vmulq_f32(vcvtq_f32_s32(v100), v101), v96), (float32x4_t)0), v93), _Q16);
          v109.i64[0] = 0x3F0000003F000000;
          v109.i64[1] = 0x3F0000003F000000;
          v110 = vmlaq_f32(v109, v105, vmulq_f32(v108, vmlaq_f32(v99, vmlaq_f32(v98, v97, v108), v108)));
          v111 = (int32x4_t)vminq_u32((uint32x4_t)vmaxq_s32(vcvtq_s32_f32(v110), (int32x4_t)0), v106);
          *(int16x4_t *)v110.f32 = vmovn_s32(v111);
          *(_DWORD *)((char *)keys + v95) = vmovn_s16((int16x8_t)v110).u32[0];
          v95 += 4;
          v100 = vaddq_s32(v100, v107);
        }
        while (v95 != 256);
        v117 = v111.u32[3];
        v112 = *v36;
        values[0] = CFDataCreate(*v36, (const UInt8 *)keys, 256);
        values[1] = values[0];
        values[2] = values[0];
        v113 = CFArrayCreate(v112, (const void **)values, 3, MEMORY[0x1E0C9B378]);
        if (*(_BYTE *)(DerivedStorage + 508))
          v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07430], v113);
        if (v77)
        {
          do
            v114 = __ldxr(v84);
          while (__stxr(v114 - v77, v84));
        }
        CFRelease(values[0]);
        CFRelease(v113);
      }
    }
  }
  return v6;
}

uint64_t FigImageControl_WhiteBalance(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _BYTE *v5;
  uint64_t v6;
  int *v7;
  int v8;
  CFIndex v9;
  void *v10;
  const __CFAllocator *v11;
  CFDictionaryRef v12;
  uint64_t i;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFNumber *Value;
  const __CFNumber *v18;
  const __CFNumber *v19;
  void *values[3];
  CFNumberRef v21;
  void *keys[3];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (_BYTE *)(DerivedStorage + 7424);
  if (!*(_BYTE *)(DerivedStorage + 7444))
  {
    v7 = (int *)DerivedStorage;
    v8 = *(_DWORD *)(DerivedStorage + 7428);
    if (v8 == 1)
    {
      if (*v5)
      {
        v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07858], 0);
        *v5 = 0;
        goto LABEL_27;
      }
    }
    else if (!v8)
    {
      if (*v5)
      {
        v6 = 0;
      }
      else
      {
        v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07620], 0);
        *v5 = 1;
      }
      if (*((_WORD *)v7 + 3716))
      {
        if ((!*((_WORD *)v7 + 3717) || !*((_WORD *)v7 + 3718)) && !v7[1860])
          goto LABEL_27;
        goto LABEL_19;
      }
      if (v7[1860])
      {
        if (!*((_WORD *)v7 + 3717) && !*((_WORD *)v7 + 3718))
        {
          v15 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
          if (v15)
          {
            v16 = v15;
            Value = (const __CFNumber *)CFDictionaryGetValue(v15, (const void *)*MEMORY[0x1E0D06848]);
            if (Value)
              CFNumberGetValue(Value, kCFNumberSInt16Type, v7 + 1858);
            v18 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06820]);
            if (v18)
              CFNumberGetValue(v18, kCFNumberSInt16Type, (char *)v7 + 7434);
            v19 = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D067E8]);
            if (v19)
              CFNumberGetValue(v19, kCFNumberSInt16Type, v7 + 1859);
          }
        }
LABEL_19:
        if (v7[1860] <= 0)
          v9 = 3;
        else
          v9 = 4;
        v21 = 0;
        v10 = (void *)*MEMORY[0x1E0D06670];
        v23 = 0;
        keys[0] = v10;
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, v7 + 1858);
        keys[1] = *(void **)MEMORY[0x1E0D06668];
        values[1] = CFNumberCreate(v11, kCFNumberSInt16Type, (char *)v7 + 7434);
        keys[2] = *(void **)MEMORY[0x1E0D06660];
        values[2] = CFNumberCreate(v11, kCFNumberSInt16Type, v7 + 1859);
        if (v7[1860] >= 1)
        {
          v23 = *MEMORY[0x1E0D05AD0];
          v21 = CFNumberCreate(v11, kCFNumberSInt32Type, v7 + 1860);
        }
        v12 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v6 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07670], v12);
        for (i = 0; i != v9; ++i)
          CFRelease(values[i]);
        CFRelease(v12);
      }
LABEL_27:
      v5[20] = 1;
      return v6;
    }
    v6 = 0;
    goto LABEL_27;
  }
  return 0;
}

uint64_t FigImageControl_Sharpness(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  const __CFAllocator **v17;
  CFIndex v18;
  void **v19;
  CFDictionaryRef v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  const __CFAllocator *v26;
  void *v27;
  void *v28;
  char *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFDictionaryRef v33;
  CFDictionaryRef v34;
  void **v35;
  uint64_t v37;
  CFTypeRef cf;
  void *keys[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43[2];
  void *values[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 736))
    return 0;
  v3 = (_BYTE *)(DerivedStorage + 7448);
  if (*(_BYTE *)(DerivedStorage + 7448))
    return 0;
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = (char *)v5;
  v7 = 0;
  v47 = 0u;
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)values = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)keys = 0u;
  v40 = 0u;
  while (*(_DWORD *)(v5 + 736 + 4 * v7))
  {
    if (++v7 == 10)
      goto LABEL_9;
  }
  if (v7)
  {
LABEL_9:
    keys[0] = *(void **)MEMORY[0x1E0D07260];
    v8 = v7;
    values[0] = createCFArrayFromIntArray((char *)(v5 + 696), v7);
    keys[1] = *(void **)MEMORY[0x1E0D07258];
    values[1] = createCFArrayFromIntArray(v6 + 736, v8);
    v9 = 2;
    goto LABEL_10;
  }
  v9 = 0;
LABEL_10:
  v10 = 0;
  while (*(_DWORD *)&v6[4 * v10 + 896])
  {
    if (++v10 == 10)
    {
      v11 = a1;
      goto LABEL_15;
    }
  }
  v11 = a1;
  if (!v10)
    goto LABEL_16;
LABEL_15:
  keys[v9] = (void *)*MEMORY[0x1E0D07230];
  v12 = v10;
  v13 = v9 | 1;
  values[v9] = createCFArrayFromIntArray(v6 + 856, v10);
  keys[v9 | 1u] = (void *)*MEMORY[0x1E0D07228];
  v9 += 2;
  values[v13] = createCFArrayFromIntArray(v6 + 896, v12);
LABEL_16:
  v14 = 0;
  while (*(_DWORD *)&v6[4 * v14 + 936])
  {
    if (++v14 == 10)
      goto LABEL_21;
  }
  if (!v14)
    goto LABEL_22;
LABEL_21:
  keys[v9] = (void *)*MEMORY[0x1E0D07158];
  v15 = v14;
  v16 = v9 + 1;
  values[v9] = createCFArrayFromIntArray(v6 + 936, v14);
  keys[v9 + 1] = (void *)*MEMORY[0x1E0D07150];
  v9 += 2;
  values[v16] = createCFArrayFromIntArray(v6 + 976, v15);
LABEL_22:
  v17 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v9 >= 1)
  {
    v18 = v9;
    v19 = values;
    v20 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, v18, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    captureStreamSetPropertyOnActivityScheduler(v11, (const void *)*MEMORY[0x1E0D07650], v20);
    do
    {
      v21 = *v19++;
      CFRelease(v21);
      --v18;
    }
    while (v18);
    CFRelease(v20);
  }
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  cf = 0;
  v47 = 0u;
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)values = 0u;
  v24 = (_DWORD *)(v22 + 1448);
  while (*(v24 - 8) && *v24)
  {
    ++v24;
    if (++v23 == 8)
      goto LABEL_32;
  }
  if (!v23)
  {
    v4 = 0;
    goto LABEL_57;
  }
LABEL_32:
  v37 = v11;
  v25 = 0;
  v26 = *v17;
  v27 = (void *)*MEMORY[0x1E0D065B8];
  v28 = (void *)*MEMORY[0x1E0D065C0];
  v29 = (char *)(v22 + 1448);
  do
  {
    v30 = CFNumberCreate(v26, kCFNumberSInt32Type, v29 - 32);
    v31 = CFNumberCreate(v26, kCFNumberSInt32Type, v29);
    v32 = v31;
    keys[0] = v27;
    keys[1] = v28;
    v43[0] = v30;
    v43[1] = v31;
    if (v30 && v31)
    {
      v33 = CFDictionaryCreate(v26, (const void **)keys, (const void **)v43, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      values[v25] = v33;
      if (v33)
        v4 = 0;
      else
        v4 = 4294954510;
    }
    else
    {
      v4 = 4294954510;
      if (!v30)
        goto LABEL_40;
    }
    CFRelease(v30);
LABEL_40:
    if (v32)
      CFRelease(v32);
    if ((_DWORD)v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v34 = 0;
      goto LABEL_48;
    }
    ++v25;
    v29 += 4;
  }
  while (v23 != v25);
  cf = CFArrayCreate(v26, (const void **)values, v23, MEMORY[0x1E0C9B378]);
  if (!cf)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v34 = 0;
LABEL_63:
    v4 = 4294954510;
    goto LABEL_48;
  }
  v34 = CFDictionaryCreate(v26, MEMORY[0x1E0D065C8], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v34)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_63;
  }
  v4 = captureStreamSetPropertyOnActivityScheduler(v37, (const void *)*MEMORY[0x1E0D07540], v34);
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_48:
  v35 = values;
  do
  {
    if (*v35)
      CFRelease(*v35);
    ++v35;
    --v23;
  }
  while (v23);
  if (cf)
    CFRelease(cf);
  if (v34)
    CFRelease(v34);
LABEL_57:
  *v3 = 1;
  return v4;
}

uint64_t FigImageControl_Exposure(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _BYTE *v5;
  const __CFString *v6;
  const __CFDictionary *v7;
  int v8;
  int v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const void *v23;
  const __CFBoolean *v24;
  const __CFBoolean *v25;
  uint64_t v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  float v30;
  double v31;
  double v32;
  double v33;
  float v34;
  int v35;
  CFNumberRef v36;
  const void **v37;
  const __CFAllocator *v38;
  CFNumberRef v39;
  CFDictionaryRef v40;
  CFPropertyListRef v41;
  uint64_t v42;
  CFNumberRef v43;
  CFNumberRef v44;
  const __CFAllocator *v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFDictionaryRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  float v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  float v58;
  const __CFAllocator *v59;
  unsigned int v60;
  CFDictionaryRef v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const __CFDictionary *v65;
  const __CFData *v66;
  const UInt8 *BytePtr;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint32x4_t *v71;
  uint16x8_t v72;
  const __CFNumber *v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  const __CFData *v76;
  const __CFData *v77;
  uint64_t v78;
  int32x4_t v79;
  uint64_t v80;
  float64x2_t v81;
  float64x2_t v82;
  __int128 v83;
  uint64x2_t v84;
  float64x2_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  const __CFArray *v91;
  const __CFArray *v92;
  unint64_t Count;
  uint64_t v94;
  CFIndex v95;
  int v96;
  const void *v97;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v99;
  void **v100;
  uint64_t v101;
  uint64_t *v102;
  const __CFDictionary *v103;
  int v104;
  const __CFDictionary *v105;
  const __CFNumber *Value;
  const __CFNumber *v107;
  const __CFNumber *v108;
  const __CFNumber *v109;
  const __CFNumber *v110;
  const __CFNumber *v111;
  const __CFNumber *v112;
  const __CFNumber *v113;
  const __CFNumber *v114;
  const __CFNumber *v115;
  double v116;
  double v117;
  double v118;
  long double v119;
  double v120;
  int v121;
  double v122;
  double v123;
  int v124;
  uint64_t v125;
  double v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint16x8_t v134;
  int8x16_t v135;
  int8x16_t *v136;
  uint64_t i;
  unint64_t v138;
  uint64_t v139;
  CGRect *v140;
  char *v141;
  unint64_t v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t j;
  uint64_t k;
  int v163;
  void **v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  BOOL v174;
  unsigned int v175;
  int v177;
  uint64_t v178;
  unsigned int v179;
  int v180;
  void **v181;
  char *v182;
  uint64_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t *v187;
  int32x4_t v188;
  uint16x8_t v189;
  int32x4_t v190;
  int32x4_t v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  int32x4_t v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  const __CFNumber *v216;
  const __CFNumber *v217;
  double v218;
  int v220;
  float v221;
  float v222;
  float v223;
  int v224;
  const __CFAllocator *v225;
  CFDictionaryRef v226;
  uint64_t m;
  CFPropertyListRef v228;
  CFPropertyListRef v229;
  CFPropertyListRef v230;
  const __CFDictionary *v231;
  void *v232;
  int v233;
  void **v234;
  const void *v235;
  uint64_t v236;
  const __CFAllocator *v237;
  const CFArrayCallBacks *v238;
  CFArrayRef v239;
  CFArrayRef v240;
  const __CFDictionary *v241;
  void *v242;
  uint64_t v243;
  void *v244;
  double v245;
  int v246;
  int v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  const __CFAllocator *v251;
  CFDictionaryRef v252;
  int v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  const __CFString *key;
  FILE *keya;
  unsigned int v263;
  unsigned int v264;
  int v265;
  int v266;
  __int16 v267;
  int v268;
  int v269;
  uint64_t v270;
  uint64_t valuePtr;
  void *v272[2];
  void *v273[2];
  CFNumberRef v274;
  CFNumberRef v275;
  CFNumberRef v276;
  UInt8 buffer[16];
  __int128 v278;
  int v279;
  void *values[2];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  void *v285[2];
  __int128 v286;
  CGRect keys[2];
  uint64_t v288;
  uint64_t v289;
  CFRange v290;

  v289 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (_BYTE *)(DerivedStorage + 7456);
  v6 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v7 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v8 = *(_DWORD *)(DerivedStorage + 7468);
  if (!v8)
    v8 = *(_DWORD *)(DerivedStorage + 7464);
  key = v6;
  if (*v5 && !*(_BYTE *)(DerivedStorage + 7457))
  {
    v13 = 0;
    goto LABEL_131;
  }
  v9 = *(_DWORD *)(DerivedStorage + 7484);
  if (!v9 || (v10 = *(_DWORD *)(DerivedStorage + 7488)) == 0)
  {
    v11 = *(float *)(DerivedStorage + 608);
    v12 = (int)((float)((float)(v11 * -1000.0) + 1000.0) * 0.5);
    *(_DWORD *)(DerivedStorage + 7476) = v12;
    *(_DWORD *)(DerivedStorage + 7480) = v12;
    v10 = (int)(float)(v11 * 1000.0);
    *(_DWORD *)(DerivedStorage + 7484) = v10;
    *(_DWORD *)(DerivedStorage + 7488) = v10;
    LOWORD(v9) = v10;
  }
  v13 = 0;
  switch(v8)
  {
    case 0:
    case 1:
      if (*(_BYTE *)(DerivedStorage + 7472))
        unlockAEnow(a1);
      if (*(float *)(DerivedStorage + 1508) <= 0.0)
      {
        v21 = *(_DWORD *)(DerivedStorage + 7476);
        v22 = *(_DWORD *)(DerivedStorage + 7480);
        v9 = *(_DWORD *)(DerivedStorage + 7484);
        v10 = *(_DWORD *)(DerivedStorage + 7488);
        goto LABEL_46;
      }
      v13 = setupMeteringFaceDetection(a1, *(void **)(DerivedStorage + 8), 1);
      goto LABEL_130;
    case 2:
      if (*(_BYTE *)(DerivedStorage + 7472))
      {
        unlockAEnow(a1);
        v9 = *(_DWORD *)(DerivedStorage + 7484);
        v10 = *(_DWORD *)(DerivedStorage + 7488);
      }
      setupExposureWindow(a1, *(_DWORD *)(DerivedStorage + 7476), *(_DWORD *)(DerivedStorage + 7480), v9, v10, *(_DWORD *)(DerivedStorage + 40) != 3);
      if (*v5 || !*(_BYTE *)(DerivedStorage + 512))
        v13 = 0;
      else
        v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07310], (const void *)*MEMORY[0x1E0D07218]);
      if (*(_DWORD *)(DerivedStorage + 40) == 3)
      {
        *(_DWORD *)buffer = 204;
        LODWORD(v285[0]) = 60;
        LODWORD(v273[0]) = 75;
        LODWORD(v272[0]) = 8;
        v36 = CFNumberCreate(0, kCFNumberIntType, v273);
        v37 = (const void **)MEMORY[0x1E0D07320];
        if (*(_BYTE *)(DerivedStorage + 511))
        {
          keys[0].origin.y = 0.0;
          keys[0].origin.x = 0.0;
          values[0] = 0;
          values[1] = 0;
          v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v39 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, v272);
          keys[0].origin.x = *(CGFloat *)MEMORY[0x1E0D070F0];
          keys[0].origin.y = *(CGFloat *)MEMORY[0x1E0D070E8];
          values[0] = v36;
          values[1] = v39;
          v40 = CFDictionaryCreate(v38, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (captureStreamSetPropertyOnActivityScheduler(a1, *v37, v40))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          CFRelease(v40);
          CFRelease(v39);
        }
        else if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07320], v36))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        v43 = CFNumberCreate(0, kCFNumberIntType, v285);
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072D8], v43))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        v44 = CFNumberCreate(0, kCFNumberIntType, buffer);
        v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D074C8], v44);
        if ((_DWORD)v13)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v36);
        CFRelease(v43);
        CFRelease(v44);
      }
      goto LABEL_130;
    case 3:
      v14 = CMBaseObjectGetDerivedStorage();
      v15 = (_BYTE *)(v14 + 7472);
      if (*(_DWORD *)(v14 + 40) != 4)
      {
        if (!captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07610], (const void *)*MEMORY[0x1E0C9AE50]))goto LABEL_92;
        fig_log_get_emitter();
        goto LABEL_373;
      }
      *(_BYTE *)(v14 + 17705) = 1;
      if (*(_DWORD *)(v14 + 1548))
      {
        v16 = *(_DWORD *)(v14 + 9048);
        if (v16 < 1)
          v17 = 0.001;
        else
          v17 = 1.0 / (float)v16;
        FigImageControl_SetExposureStabilityZone(a1, 1, v17);
        v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v14 + 1552));
        keys[0].origin.x = *(CGFloat *)MEMORY[0x1E0D072C0];
        values[0] = v46;
        v47 = CFNumberCreate(v45, kCFNumberIntType, (const void *)(v14 + 1556));
        keys[0].origin.y = *(CGFloat *)MEMORY[0x1E0D071D8];
        values[1] = v47;
        v48 = CFDictionaryCreate(v45, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D075F8], v48))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v48);
        CFRelease(v46);
        CFRelease(v47);
        v49 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v14 + 1560));
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07200], v49))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        CFRelease(v49);
        if (!*(_BYTE *)(v14 + 1566))
        {
          v50 = CFNumberCreate(0, kCFNumberIntType, (const void *)(v14 + 612));
          if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072D8], v50))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          CFRelease(v50);
        }
        v15 = (_BYTE *)(v14 + 7472);
      }
      else if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07610], (const void *)*MEMORY[0x1E0C9AE50]))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      if (!*(_BYTE *)(v14 + 1564)
        && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07628], (const void *)*MEMORY[0x1E0C9AE50]))
      {
        fig_log_get_emitter();
LABEL_373:
        FigDebugAssert3();
      }
LABEL_92:
      if ((*(_DWORD *)(v14 + 40) != 4 || !*(_BYTE *)(v14 + 1565)) && !*(_BYTE *)(v14 + 620))
      {
        if (*(_BYTE *)(v14 + 508)
          && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07630], (const void *)*MEMORY[0x1E0C9AE50]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        if (*(_BYTE *)(v14 + 520)
          && captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07638], (const void *)*MEMORY[0x1E0C9AE50]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
      v13 = 0;
      *v15 = 1;
LABEL_130:
      *(_WORD *)v5 = 1;
LABEL_131:
      if (v8 != 8)
        return v13;
      if (!v5[112])
      {
        v101 = CMBaseObjectGetDerivedStorage();
        v102 = *(uint64_t **)(v101 + 7560);
        v103 = (const __CFDictionary *)CMGetAttachment(a2, key, 0);
        if (!v103)
          goto LABEL_341;
        if (!v102)
          return v13;
        if (!*v102)
          return v13;
        v104 = *(_DWORD *)(v101 + 7532) + 1;
        *(_DWORD *)(v101 + 7532) = v104;
        if ((v104 & 1) != 0)
          return v13;
        v105 = v103;
        v270 = 0;
        valuePtr = 0;
        *(_QWORD *)buffer = 0;
        v285[0] = 0;
        v267 = 0;
        v273[0] = 0;
        v269 = 0;
        v272[0] = 0;
        Value = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E0D06770]);
        if (!Value)
          goto LABEL_341;
        CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
        v107 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D067B0]);
        if (!v107)
          goto LABEL_341;
        CFNumberGetValue(v107, kCFNumberIntType, &valuePtr);
        v108 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06A68]);
        if (v108
          && (CFNumberGetValue(v108, kCFNumberDoubleType, buffer),
              (v109 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06A20])) != 0)
          && (CFNumberGetValue(v109, kCFNumberDoubleType, v285),
              (v110 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06B48])) != 0))
        {
          CFNumberGetValue(v110, kCFNumberSInt16Type, &v267);
          v111 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06B40]);
          if (v111)
          {
            CFNumberGetValue(v111, kCFNumberDoubleType, v273);
            v112 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D067E0]);
            if (v112)
            {
              CFNumberGetValue(v112, kCFNumberIntType, (char *)&v270 + 4);
              v113 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06F60]);
              if (v113)
              {
                CFNumberGetValue(v113, kCFNumberIntType, &v270);
                v114 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06F78]);
                if (v114)
                {
                  CFNumberGetValue(v114, kCFNumberIntType, &v269);
                  v115 = (const __CFNumber *)CFDictionaryGetValue(v105, (const void *)*MEMORY[0x1E0D06F68]);
                  if (v115)
                  {
                    CFNumberGetValue(v115, kCFNumberDoubleType, v272);
                    v116 = *(double *)buffer * *(double *)buffer;
                    v117 = log2(*(double *)buffer * *(double *)buffer / (*(double *)v285 * ((double)v267 / 100.0)));
                    v118 = log2((double)SHIDWORD(valuePtr));
                    v119 = v117 + v118 - log2((double)(int)valuePtr);
                    if (vabdd_f64(v117, v119) <= *((double *)v102 + 3))
                      return v13;
                    v120 = *(double *)v102;
                    if (*v102 && (v121 = *((_DWORD *)v102 + 2)) != 0)
                    {
                      v122 = *(double *)v273 * *(double *)v272;
                      v123 = log2(v116/ (*(double *)(*(_QWORD *)&v120 + 8)* ((double)(int)(*(double *)v273 * *(double *)v272 * *(double *)(*(_QWORD *)&v120 + 16))/ 100.0)));
                      v124 = (int)((double)(int)**(_DWORD **)&v120
                                 + (v119 - v123)
                                 * ((double)(*(_DWORD *)(*(_QWORD *)&v120 + 24 * v121 - 24) - **(_DWORD **)&v120)
                                  / (log2(v116/ (*(double *)(*(_QWORD *)&v120 + 24 * v121 - 16)* ((double)(int)(v122 * *(double *)(*(_QWORD *)&v120 + 24 * v121 - 8))/ 100.0)))- v123))+ 0.5);
                      if ((v124 & 0x80000000) == 0)
                      {
                        if (v121 <= v124)
                          v124 = v121 - 1;
                        v125 = *(_QWORD *)&v120 + 24 * v124;
                        v126 = *(double *)(v125 + 8);
                        v127 = vcvtd_n_s64_f64(*(double *)(v125 + 16), 8uLL);
LABEL_353:
                        if (v126 >= 0.01)
                          v246 = 1000;
                        else
                          v246 = 100000;
                        v268 = v246;
                        v266 = (int)((double)v246 * v126 + 0.5);
                        v247 = v127 >> 3;
                        v248 = v127 >> 5;
                        if (v127 <= 256)
                          v127 = 256;
                        if (v127 >= 0x800)
                          v127 = 2048;
                        v265 = v127;
                        if (v247 <= 256)
                          v249 = 256;
                        else
                          v249 = v247;
                        if (v249 >= 0x400)
                          v249 = 1024;
                        v264 = v249;
                        if (v248 <= 256)
                          v250 = 256;
                        else
                          v250 = v248;
                        if (v250 >= 0x200)
                          v250 = 512;
                        v263 = v250;
                        keys[0].origin.x = *(CGFloat *)MEMORY[0x1E0D05BB0];
                        v251 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v266);
                        keys[0].origin.y = *(CGFloat *)MEMORY[0x1E0D05BA8];
                        values[1] = CFNumberCreate(v251, kCFNumberIntType, &v268);
                        keys[0].size.width = *(CGFloat *)MEMORY[0x1E0D05AB8];
                        *(_QWORD *)&v281 = CFNumberCreate(v251, kCFNumberIntType, &v265);
                        keys[0].size.height = *(CGFloat *)MEMORY[0x1E0D05B98];
                        *((_QWORD *)&v281 + 1) = CFNumberCreate(v251, kCFNumberIntType, &v264);
                        keys[1].origin.x = *(CGFloat *)MEMORY[0x1E0D05BA0];
                        *(_QWORD *)&v282 = CFNumberCreate(v251, kCFNumberIntType, &v263);
                        v252 = CFDictionaryCreate(v251, (const void **)keys, (const void **)values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07660], v252);
                        CFRelease(values[0]);
                        CFRelease(values[1]);
                        CFRelease((CFTypeRef)v281);
                        CFRelease(*((CFTypeRef *)&v281 + 1));
                        CFRelease((CFTypeRef)v282);
                        CFRelease(v252);
                        return v13;
                      }
                    }
                    else
                    {
                      fig_log_get_emitter();
                      FigDebugAssert3();
                    }
                    v244 = v273[0];
                    v245 = *(double *)buffer * *(double *)buffer;
                    v126 = v245 / (exp2(v119) * (*(double *)&v244 / 100.0));
                    v127 = 256;
                    if (v126 < 0.00001)
                      v126 = 0.00001;
                    goto LABEL_353;
                  }
                }
              }
            }
          }
          fig_log_get_emitter();
        }
        else
        {
LABEL_341:
          fig_log_get_emitter();
        }
        FigDebugAssert3();
        return v13;
      }
      v64 = CMBaseObjectGetDerivedStorage();
      v65 = (const __CFDictionary *)CMGetAttachment(a2, key, 0);
      v66 = (const __CFData *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D06798]);
      if (v66)
      {
        BytePtr = CFDataGetBytePtr(v66);
        v68 = 0;
        v69 = values;
        do
        {
          v70 = 0;
          v71 = (uint32x4_t *)v69;
          do
          {
            v72 = *(uint16x8_t *)&BytePtr[v70];
            *v71 = vmovl_u16(*(uint16x4_t *)v72.i8);
            v71[1] = vmovl_high_u16(v72);
            v71 += 2;
            v70 += 16;
          }
          while (v70 != 32);
          ++v68;
          v69 += 8;
          BytePtr += 32;
        }
        while (v68 != 16);
        LODWORD(v272[0]) = 0;
        valuePtr = 0;
        v73 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D06848]);
        if (v73)
          CFNumberGetValue(v73, kCFNumberIntType, v272);
        v74 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D06820]);
        if (v74)
          CFNumberGetValue(v74, kCFNumberIntType, (char *)&valuePtr + 4);
        v75 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D067E8]);
        if (v75)
          CFNumberGetValue(v75, kCFNumberIntType, &valuePtr);
        v76 = (const __CFData *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D06B38]);
        if (v76)
        {
          v77 = v76;
          if (CFDataGetLength(v76) == 1024)
          {
            v290.location = 0;
            v290.length = 1024;
            CFDataGetBytes(v77, v290, buffer);
            v78 = 0;
            v79 = 0uLL;
            do
            {
              v79 = vaddq_s32(*(int32x4_t *)&buffer[v78], v79);
              v78 += 16;
            }
            while (v78 != 1024);
            v80 = 0;
            v81 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)vaddvq_s32(v79)), 0);
            v82 = (float64x2_t)vdupq_n_s64(0x4117E80000000000uLL);
            do
            {
              v83 = *(_OWORD *)&buffer[v80];
              v84.i64[0] = v83;
              v84.i64[1] = DWORD1(v83);
              v85 = vcvtq_f64_u64(v84);
              v84.i64[0] = DWORD2(v83);
              v84.i64[1] = HIDWORD(v83);
              *(int32x4_t *)&buffer[v80] = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v85, v82), v81)), (int32x4_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v84), v82), v81)));
              v80 += 16;
            }
            while (v80 != 1024);
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = *(_DWORD *)&buffer[4 * v86];
              v88 += v89;
              if (v89 > *(_DWORD *)&buffer[4 * v87])
                v87 = v86;
              ++v86;
            }
            while (v86 != 256);
            *(_DWORD *)&buffer[4 * v87] = *(_DWORD *)&buffer[4 * v87] - v88 + 391680;
            v90 = *(_DWORD *)(v64 + 7532) + 1;
            *(_DWORD *)(v64 + 7532) = v90;
            if ((v90 & 1) == 0)
            {
              v91 = (const __CFArray *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D08490]);
              v260 = v64;
              if (v91)
              {
                v92 = v91;
                memset(keys, 0, 32);
                Count = CFArrayGetCount(v91);
                if (Count >= 8)
                  v94 = 8;
                else
                  v94 = Count;
                if (v94)
                {
                  v95 = 0;
                  v96 = 0;
                  v97 = (const void *)*MEMORY[0x1E0D084A0];
                  do
                  {
                    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v92, v95);
                    if (ValueAtIndex)
                    {
                      v99 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v97);
                      if (v99)
                      {
                        CGRectMakeWithDictionaryRepresentation(v99, keys);
                        v100 = &v285[2 * v96];
                        *(_DWORD *)v100 = (int)(CGRectGetMinX(keys[0]) * 3264.0 + 0.5);
                        *((_DWORD *)v100 + 1) = (int)(CGRectGetMinY(keys[0]) * 2448.0 + 0.5);
                        *((_DWORD *)v100 + 2) = (CGRectGetWidth(keys[0]) * 3264.0 + 0.5);
                        *((_DWORD *)v100 + 3) = (CGRectGetHeight(keys[0]) * 2448.0 + 0.5);
                        ++v96;
                      }
                    }
                    ++v95;
                  }
                  while (v94 != v95);
                }
                else
                {
                  v96 = 0;
                }
              }
              else
              {
                v96 = 0;
              }
              keya = fopen("/tmp/ae.txt", "a");
              v128 = 0;
              v129 = 0;
              v130 = *(_DWORD *)(v64 + 7532);
              v131 = (char *)&centerWeight;
              do
              {
                v132 = 0;
                v133 = v128;
                do
                {
                  v134 = *(uint16x8_t *)&v131[v132];
                  v135 = vorrq_s8((int8x16_t)vshlq_n_s32(*(int32x4_t *)((char *)&values[2] + v133), 0x10uLL), (int8x16_t)vmovl_high_u16(v134));
                  v136 = (int8x16_t *)((char *)keys + v133);
                  *v136 = vorrq_s8((int8x16_t)vshlq_n_s32(*(int32x4_t *)((char *)values + v133), 0x10uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8));
                  v136[1] = v135;
                  v133 += 32;
                  v132 += 16;
                }
                while (v132 != 32);
                ++v129;
                v128 += 64;
                v131 += 32;
              }
              while (v129 != 16);
              for (i = 0; i != 9; ++i)
              {
                if ((unint64_t)(i - 3) <= 5)
                {
                  v138 = sort_uint32_increments[i];
                  if (v138 <= 0xFF)
                    v139 = 255;
                  else
                    v139 = sort_uint32_increments[i];
                  v140 = keys;
                  v141 = (char *)keys + 4 * v138;
                  v142 = sort_uint32_increments[i];
                  do
                  {
                    v143 = *((_DWORD *)&keys[0].origin.x + v142);
                    v144 = v142;
                    if (v142 >= v138)
                    {
                      v145 = 0;
                      while (1)
                      {
                        v146 = *((_DWORD *)&v140->origin.x + v145);
                        if (v146 <= v143)
                          break;
                        *(_DWORD *)&v141[4 * v145] = v146;
                        v145 -= v138;
                        v144 = v142 + v145;
                        if (v142 + v145 < v138)
                          goto LABEL_205;
                      }
                      v144 = v142 + v145;
                    }
LABEL_205:
                    *((_DWORD *)&keys[0].origin.x + v144) = v143;
                    v141 += 4;
                    v140 = (CGRect *)((char *)v140 + 4);
                  }
                  while (v142++ != v139);
                }
              }
              v148 = 0;
              v149 = 0;
              v150 = 0;
              v151 = 0;
              v152 = 0;
              v153 = 0;
              do
              {
                v154 = *(_DWORD *)((char *)&keys[0].origin.x + v148);
                v155 = (unsigned __int16)v154;
                v151 += (unsigned __int16)v154;
                if (v151 > 319)
                  v156 = v150;
                else
                  v156 = v150 + 1;
                if (v151 <= 319)
                  v157 = v149;
                else
                  v157 = v149 + 1;
                v158 = v153 + (unsigned __int16)v154 * HIWORD(v154);
                v159 = v155 + v152;
                if ((v151 - 15569) < 0xFFFFC46F)
                {
                  v150 = v156;
                  v149 = v157;
                }
                else
                {
                  v153 = v158;
                  v152 = v159;
                }
                v148 += 4;
              }
              while (v148 != 1024);
              if (v152 < 1)
                v160 = 0;
              else
                v160 = v153 / v152;
              for (j = 0; j != 16; ++j)
              {
                for (k = 0; k != 16; ++k)
                {
                  if (v96 < 1)
                  {
                    v163 = 0;
                  }
                  else
                  {
                    v163 = 0;
                    v164 = &v285[1];
                    v165 = v96;
                    do
                    {
                      v166 = *((_DWORD *)v164 - 2);
                      v167 = *((_DWORD *)v164 - 1);
                      v168 = (v166 << 12) / 3264;
                      v169 = (v167 << 12) / 2448;
                      v170 = ((*(_DWORD *)v164 + v166) << 12) / 0xCC0u;
                      v171 = ((*((_DWORD *)v164 + 1) + v167) << 12) / 0x990u;
                      if (v168 <= (_DWORD)k << 8)
                        v168 = (_DWORD)k << 8;
                      if (v169 <= (_DWORD)j << 8)
                        v172 = (_DWORD)j << 8;
                      else
                        v172 = v169;
                      if (v170 >= ((_DWORD)k << 8) + 256)
                        v173 = ((_DWORD)k << 8) + 256;
                      else
                        v173 = v170;
                      if (v171 >= ((_DWORD)j << 8) + 256)
                        v171 = ((_DWORD)j << 8) + 256;
                      v174 = v173 >= v168;
                      v175 = v173 - v168;
                      if (v175 != 0 && v174 && v171 > v172)
                        v163 += (int)((v171 - v172) * v175) >> 8;
                      v164 += 2;
                      --v165;
                    }
                    while (v165);
                  }
                  if (v130 > 1)
                  {
                    v177 = autoExposureSimulation_state[16 * j + k];
                    v163 = (9 * v163 - v177 + 8 * v177 + 7) >> 4;
                  }
                  autoExposureSimulation_state[16 * j + k] = v163;
                }
              }
              v178 = 0;
              v179 = 0;
              v180 = 0;
              v181 = values;
              v182 = (char *)autoExposureSimulation_state;
              do
              {
                v183 = 0;
                v184 = (int32x4_t)v179;
                v185 = 0uLL;
                v186 = (int32x4_t)v180;
                v187 = (int32x4_t *)v181;
                v188 = 0uLL;
                do
                {
                  v189 = *(uint16x8_t *)&v182[v183];
                  v191 = *v187;
                  v190 = v187[1];
                  v187 += 2;
                  v188 = vmlaq_s32(v188, v190, (int32x4_t)vmovl_high_u16(v189));
                  v186 = vmlaq_s32(v186, v191, (int32x4_t)vmovl_u16(*(uint16x4_t *)v189.i8));
                  v185 = (int32x4_t)vaddw_high_u16((uint32x4_t)v185, v189);
                  v184 = (int32x4_t)vaddw_u16((uint32x4_t)v184, *(uint16x4_t *)v189.i8);
                  v183 += 16;
                }
                while (v183 != 32);
                v180 = vaddvq_s32(vaddq_s32(v186, v188));
                v179 = vaddvq_s32(vaddq_s32(v184, v185));
                ++v178;
                v182 += 32;
                v181 += 8;
              }
              while (v178 != 16);
              v258 = a1;
              v192 = 0;
              v193 = 0x10000;
              do
              {
                if (((v192 + v193) >> 1) * ((v192 + v193) >> 1) > v179)
                  v193 = (v192 + v193) >> 1;
                else
                  v192 = (v192 + v193) >> 1;
              }
              while (v192 + 1 < v193);
              v194 = 0;
              v195 = 0uLL;
              do
              {
                v195 = vaddq_s32(*(int32x4_t *)&buffer[v194], v195);
                v194 += 16;
              }
              while (v194 != 1024);
              v196 = 0;
              v197 = 0;
              v198 = vaddvq_s32(v195);
              v199 = -1;
              v200 = -1;
              v201 = -1;
              do
              {
                v197 += *(_DWORD *)&buffer[4 * v196];
                if (v201 == -1 && v197 >= (int)(10 * v198) >> 10)
                  v201 = v196;
                if (v200 == -1 && v197 >= (int)(665 * v198) >> 10)
                  v200 = v196;
                if (v199 == -1 && v197 >= (int)(972 * v198) >> 10)
                  v199 = v196;
                ++v196;
              }
              while (v196 != 256);
              v205 = (v200 << 11) / (v199 + v201);
              if (v205 <= 512)
                v205 = 512;
              if (v205 >= 2048)
                v206 = 2048;
              else
                v206 = v205;
              v207 = v206 - 1024;
              v208 = v180 / (int)v179;
              if (v206 < 0x401)
              {
                v209 = (112976 * v207 + 192937984) >> 20;
              }
              else
              {
                v209 = (131744 * v207 + 192937984) >> 20;
                v210 = (int)((double)((v279 << 10) / v198) + -51.2);
                if (v210 >= 1)
                {
                  v211 = 4 * v210;
                  if (v211 >= 1024)
                    v211 = 1024;
                  v209 = (int)(184 * v211 + (1024 - v211) * v209) >> 10;
                }
              }
              v212 = 8 * v192;
              if ((int)(8 * v192) >= 768)
                v212 = 768;
              v213 = v212 & ~(v212 >> 31);
              v214 = ((1024 - v213) * v160 + v208 * v213) >> 10;
              v215 = (int)(225 * v213 + v209 * (1024 - v213)) >> 10;
              if (keya)
              {
                v254 = ((1024 - v213) * v160 + v208 * v213) >> 10;
                v255 = v209;
                v256 = v206;
                v257 = v208;
                LODWORD(keys[0].origin.x) = 1065353216;
                LODWORD(v273[0]) = 256;
                v216 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D06A20]);
                if (v216)
                  CFNumberGetValue(v216, kCFNumberFloatType, keys);
                v217 = (const __CFNumber *)CFDictionaryGetValue(v65, (const void *)*MEMORY[0x1E0D067E0]);
                if (v217)
                {
                  CFNumberGetValue(v217, kCFNumberIntType, v273);
                  v218 = (double)SLODWORD(v273[0]) * 0.00390625;
                }
                else
                {
                  v218 = 1.0;
                }
                fprintf(keya, "avg:%3d tgt:%3d  current: t=%.1fms %.1fx", v254, v215, *(float *)&keys[0].origin.x * 1000.0, v218);
                fprintf(keya, " faceAvg=%d faceWeight=%d (xl=%d xm=%d xh=%d) scale:%d sceneTarget:%d blend:%d average:%d target:%d outliers:%d/%d", v257, 4 * v192, v201, v200, v199, v256, v255, v213, v254, v215, v150, v149);
                v214 = v254;
              }
              if ((double)v215 * 1.0443 < (double)v214 || (double)v215 * 0.9576 > (double)v214)
              {
                v220 = 256;
                HIDWORD(v270) = 256;
                v221 = (float)((float)((float)((float)v215 * 0.1) / (float)v214) + 0.9) * *(float *)(v260 + 7528);
                v222 = 0.066667;
                if (v221 <= 0.066667)
                {
                  v222 = (float)((float)((float)((float)v215 * 0.1) / (float)v214) + 0.9) * *(float *)(v260 + 7528);
                }
                else
                {
                  v220 = vcvts_n_s32_f32(v221 / 0.066667, 8uLL);
                  if (v220 >= 3840)
                    v220 = 3840;
                }
                v268 = v220;
                if (v222 >= 0.000125)
                  v223 = v222;
                else
                  v223 = 0.000125;
                if (v223 >= 0.01)
                  v224 = 1000;
                else
                  v224 = 100000;
                v269 = v224;
                LODWORD(v270) = (int)(float)((float)((float)v224 * v223) + 0.5);
                keys[0].origin.x = *(CGFloat *)MEMORY[0x1E0D05BB0];
                v225 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v273[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v270);
                keys[0].origin.y = *(CGFloat *)MEMORY[0x1E0D05BA8];
                v273[1] = CFNumberCreate(v225, kCFNumberIntType, &v269);
                keys[0].size.width = *(CGFloat *)MEMORY[0x1E0D05AB8];
                v274 = CFNumberCreate(v225, kCFNumberIntType, &v268);
                keys[0].size.height = *(CGFloat *)MEMORY[0x1E0D05BA0];
                v275 = CFNumberCreate(v225, kCFNumberIntType, (char *)&v270 + 4);
                keys[1].origin.x = *(CGFloat *)MEMORY[0x1E0D05B98];
                v276 = CFNumberCreate(v225, kCFNumberIntType, (char *)&v270 + 4);
                v226 = CFDictionaryCreate(v225, (const void **)keys, (const void **)v273, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                for (m = 0; m != 5; ++m)
                  CFRelease(v273[m]);
                if (keya)
                  fprintf(keya, "  set: t=%.1fms %.1fx", v223 * 1000.0, (float)((float)v268 * 0.0039062));
                captureStreamSetPropertyOnActivityScheduler(v258, (const void *)*MEMORY[0x1E0D07660], v226);
                *(float *)(v260 + 7528) = (float)(v223 * (float)v268) * 0.0039062;
              }
              if (keya)
              {
                fputc(10, keya);
                fclose(keya);
              }
            }
          }
        }
      }
      return v13;
    case 4:
      *(_QWORD *)buffer = 0;
      if (!*(_BYTE *)(DerivedStorage + 7472))
      {
        if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07610], (const void *)*MEMORY[0x1E0C9AE50]))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        *(_BYTE *)(DerivedStorage + 7472) = 1;
      }
      v18 = *(float *)(DerivedStorage + 7492);
      if (v18 <= 0.125)
      {
        v19 = (int)(float)((float)(1.0 / v18) + 0.5);
        v20 = 1;
      }
      else
      {
        if (v18 >= 0.01)
          v19 = 1000;
        else
          v19 = 100000;
        v20 = (int)(float)((float)((float)v19 * v18) + 0.5);
      }
      LODWORD(v273[0]) = v19;
      LODWORD(v285[0]) = v20;
      v31 = *(double *)(DerivedStorage + 7504);
      if (v31 != 0.0)
      {
        v32 = *(double *)(DerivedStorage + 7512);
        if (v32 != 0.0)
        {
          v33 = (double)v19 / (double)v20;
          if (v33 >= v31)
          {
            if (v33 <= v32)
              *(_QWORD *)buffer = floor(v33);
            else
              *(_QWORD *)buffer = *(_QWORD *)(DerivedStorage + 7512);
          }
          else
          {
            *(_QWORD *)buffer = *(_QWORD *)(DerivedStorage + 7504);
            v34 = 1.0 / v31;
            *(float *)(DerivedStorage + 7492) = v34;
            if (v34 <= 0.125)
            {
              LODWORD(v285[0]) = 1;
              LODWORD(v273[0]) = (int)(float)((float)(1.0 / v34) + 0.5);
            }
            else
            {
              if (v34 >= 0.01)
                v35 = 1000;
              else
                v35 = 100000;
              LODWORD(v273[0]) = v35;
              LODWORD(v285[0]) = (int)(float)((float)((float)v35 * v34) + 0.5);
            }
          }
        }
      }
      LODWORD(v272[0]) = 256;
      valuePtr = 0x10000000100;
      v51 = *(float *)(DerivedStorage + 7500);
      if (v51 == 3.4028e38)
      {
        v52 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06B48]);
        if (v52)
          CFNumberGetValue(v52, kCFNumberFloatType, (void *)(DerivedStorage + 7500));
        v53 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D067E0]);
        if (v53)
          CFNumberGetValue(v53, kCFNumberIntType, &valuePtr);
        v54 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06F78]);
        if (v54)
          CFNumberGetValue(v54, kCFNumberIntType, v272);
        v55 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06F60]);
        if (v55)
          CFNumberGetValue(v55, kCFNumberIntType, (char *)&valuePtr + 4);
        LODWORD(keys[0].origin.x) = 1065353216;
        v56 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06F68]);
        if (v56)
          CFNumberGetValue(v56, kCFNumberFloatType, keys);
        HIDWORD(valuePtr) = vcvtps_s32_f32((float)SHIDWORD(valuePtr) / *(float *)&keys[0].origin.x);
      }
      else if (v51 <= 0.0)
      {
        LODWORD(valuePtr) = vcvts_n_s32_f32(*(float *)(DerivedStorage + 7496), 8uLL);
      }
      else
      {
        LODWORD(keys[0].origin.x) = 1112014848;
        v57 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06B40]);
        if (v57)
        {
          CFNumberGetValue(v57, kCFNumberFloatType, keys);
          v58 = *(float *)&keys[0].origin.x;
        }
        else
        {
          v58 = 50.0;
        }
        LODWORD(valuePtr) = (int)(float)((float)(*(float *)(DerivedStorage + 7500) * 256.0) / v58);
      }
      *(_OWORD *)&keys[1].origin.y = 0u;
      *(_OWORD *)&keys[0].size.height = 0u;
      *(_OWORD *)&keys[0].origin.y = 0u;
      *(_QWORD *)&v283 = 0;
      v282 = 0u;
      *(_OWORD *)values = 0u;
      v281 = 0u;
      keys[0].origin.x = *(CGFloat *)MEMORY[0x1E0D05BB0];
      v59 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, v285);
      keys[0].origin.y = *(CGFloat *)MEMORY[0x1E0D05BA8];
      values[1] = CFNumberCreate(v59, kCFNumberIntType, v273);
      keys[0].size.width = *(CGFloat *)MEMORY[0x1E0D05AB8];
      *(_QWORD *)&v281 = CFNumberCreate(v59, kCFNumberIntType, &valuePtr);
      keys[0].size.height = *(CGFloat *)MEMORY[0x1E0D05BA0];
      *((_QWORD *)&v281 + 1) = CFNumberCreate(v59, kCFNumberIntType, v272);
      keys[1].origin.x = *(CGFloat *)MEMORY[0x1E0D05B98];
      *(_QWORD *)&v282 = CFNumberCreate(v59, kCFNumberIntType, (char *)&valuePtr + 4);
      if (*(double *)buffer <= 0.0)
      {
        v60 = 5;
      }
      else
      {
        keys[1].origin.y = *(CGFloat *)MEMORY[0x1E0D05B08];
        *((_QWORD *)&v282 + 1) = CFNumberCreate(v59, kCFNumberDoubleType, buffer);
        v60 = 6;
      }
      if (*(int *)(DerivedStorage + 7520) >= 1)
      {
        *((_QWORD *)&keys[0].origin.x + v60) = *MEMORY[0x1E0D05AD0];
        values[v60++] = CFNumberCreate(v59, kCFNumberSInt32Type, (const void *)(DerivedStorage + 7520));
      }
      v61 = CFDictionaryCreate(v59, (const void **)keys, (const void **)values, v60, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07660], v61);
      v62 = 0;
      v63 = 8 * v60;
      do
      {
        CFRelease(values[v62 / 8]);
        v62 += 8;
      }
      while (v63 != v62);
      CFRelease(v61);
      goto LABEL_130;
    case 5:
      if (*(float *)(DerivedStorage + 1508) <= 0.0)
      {
        v21 = *(_DWORD *)(DerivedStorage + 7476);
        v22 = *(_DWORD *)(DerivedStorage + 7480);
LABEL_46:
        setupExposureWindow(a1, v21, v22, v9, v10, 1);
      }
      v13 = 0;
      goto LABEL_130;
    case 8:
      HIDWORD(valuePtr) = 1032358025;
      *(_BYTE *)(DerivedStorage + 7472) = 1;
      *(_DWORD *)(DerivedStorage + 7532) = 0;
      v23 = (const void *)*MEMORY[0x1E0C9AE50];
      v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07610], (const void *)*MEMORY[0x1E0C9AE50]);
      v24 = (const __CFBoolean *)CFPreferencesCopyAppValue(CFSTR("exposure_table:Disable"), CFSTR("com.apple.coremedia"));
      if (v24)
      {
        v25 = v24;
        v26 = a1;
        v27 = CFGetTypeID(v24);
        if (v27 == CFBooleanGetTypeID())
          *(_BYTE *)(DerivedStorage + 7568) = CFBooleanGetValue(v25) != 0;
        CFRelease(v25);
        a1 = v26;
      }
      if (*(_BYTE *)(DerivedStorage + 7568))
      {
        v28 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D06A20]);
        LODWORD(keys[0].origin.x) = 256;
        if (v28)
          CFNumberGetValue(v28, kCFNumberFloatType, (char *)&valuePtr + 4);
        v29 = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D067E0]);
        if (v29)
          CFNumberGetValue(v29, kCFNumberIntType, keys);
        v30 = (float)(*((float *)&valuePtr + 1) * (float)SLODWORD(keys[0].origin.x)) * 0.0039062;
        if (v30 < 0.000125)
          v30 = 0.000125;
        *((float *)&valuePtr + 1) = v30;
        *(float *)(DerivedStorage + 7528) = v30;
        v13 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07300], v23);
        goto LABEL_130;
      }
      if (*(_QWORD *)(DerivedStorage + 7560))
        goto LABEL_130;
      *(_OWORD *)buffer = 0u;
      v278 = 0u;
      v286 = 0u;
      *(_OWORD *)v285 = 0u;
      v41 = CFPreferencesCopyAppValue(CFSTR("exposure_table:IntegrationTime"), CFSTR("com.apple.coremedia"));
      if (v41)
      {
        *(_QWORD *)buffer = CFSTR("IntegrationTime");
        v285[0] = (void *)v41;
        LODWORD(v42) = 1;
      }
      else
      {
        LODWORD(v42) = 0;
      }
      v228 = CFPreferencesCopyAppValue(CFSTR("exposure_table:MaxGain"), CFSTR("com.apple.coremedia"));
      if (v228)
      {
        *(_QWORD *)((unint64_t)buffer | (8 * v42)) = CFSTR("MaxGain");
        *(_QWORD *)((unint64_t)v285 & 0xFFFFFFFFFFFFFFF7 | (8 * (v42 & 1))) = v228;
        LODWORD(v42) = v42 + 1;
      }
      v229 = CFPreferencesCopyAppValue(CFSTR("exposure_table:ExposureDelta"), CFSTR("com.apple.coremedia"));
      if (v229)
      {
        *(_QWORD *)&buffer[8 * v42] = CFSTR("ExposureDelta");
        v285[v42] = (void *)v229;
        LODWORD(v42) = v42 + 1;
      }
      v230 = CFPreferencesCopyAppValue(CFSTR("exposure_table:StabilityZone"), CFSTR("com.apple.coremedia"));
      if (v230)
      {
        *(_QWORD *)&buffer[8 * v42] = CFSTR("StabilityZone");
        v285[v42] = (void *)v230;
        LODWORD(v42) = v42 + 1;
      }
      else if (!(_DWORD)v42)
      {
LABEL_332:
        v259 = a1;
        v236 = 0;
        v288 = 0;
        memset(keys, 0, sizeof(keys));
        v284 = 0;
        v282 = 0u;
        v283 = 0u;
        *(_OWORD *)values = 0u;
        v281 = 0u;
        v237 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          *(_QWORD *)((char *)&keys[0].origin.x + v236 * 8) = CFNumberCreate(v237, kCFNumberDoubleType, (char *)&gDefaultExposureTable + v236 * 8);
          values[v236] = CFNumberCreate(v237, kCFNumberDoubleType, (char *)&gDefaultExposureTable + v236 * 8 + 72);
          ++v236;
        }
        while (v236 != 9);
        v238 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        v239 = CFArrayCreate(v237, (const void **)keys, 9, MEMORY[0x1E0C9B378]);
        v240 = CFArrayCreate(v237, (const void **)values, 9, v238);
        *(_OWORD *)v273 = xmmword_1E4928170;
        v272[0] = v239;
        v272[1] = v240;
        v241 = CFDictionaryCreate(v237, (const void **)v273, (const void **)v272, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v242 = malloc_type_malloc(0x20uLL, 0x1020040A02120EAuLL);
        v13 = exposure_table_initialize((uint64_t)v242, v241);
        if ((_DWORD)v13)
          free(v242);
        else
          *(_QWORD *)(DerivedStorage + 7560) = v242;
        CFRelease(v241);
        CFRelease(v239);
        CFRelease(v240);
        v243 = 0;
        a1 = v259;
        do
        {
          CFRelease(*(CFTypeRef *)((char *)&keys[0].origin.x + v243 * 8));
          CFRelease(values[v243++]);
        }
        while (v243 != 9);
        goto LABEL_130;
      }
      v42 = v42;
      v231 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)buffer, (const void **)v285, v42, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v232 = malloc_type_malloc(0x20uLL, 0x1020040A02120EAuLL);
      v233 = exposure_table_initialize((uint64_t)v232, v231);
      if (v233)
        free(v232);
      else
        *(_QWORD *)(DerivedStorage + 7560) = v232;
      CFRelease(v231);
      v234 = v285;
      do
      {
        v235 = *v234++;
        CFRelease(v235);
        --v42;
      }
      while (v42);
      if (!v233)
      {
        v13 = 0;
        goto LABEL_130;
      }
      goto LABEL_332;
    default:
      goto LABEL_130;
  }
}

uint64_t FigImageControl_CurrentFocusRect(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  switch(*(_DWORD *)(DerivedStorage + 7612))
  {
    case 0:
    case 4:
      *a3 = 0;
      *a2 = 0;
      *a5 = 0;
      *a4 = 0;
      break;
    case 1:
      if (!*(_BYTE *)(DerivedStorage + 7664))
        goto LABEL_5;
      *a2 = *(_DWORD *)(DerivedStorage + 7668);
      *a3 = *(_DWORD *)(DerivedStorage + 7672);
      *a4 = *(_DWORD *)(DerivedStorage + 7676);
      v10 = *(_DWORD *)(DerivedStorage + 7680);
      goto LABEL_6;
    case 2:
    case 3:
LABEL_5:
      *a2 = *(_DWORD *)(DerivedStorage + 7620);
      *a3 = *(_DWORD *)(DerivedStorage + 7624);
      *a4 = *(_DWORD *)(DerivedStorage + 7628);
      v10 = *(_DWORD *)(DerivedStorage + 7632);
LABEL_6:
      *a5 = v10;
      break;
    default:
      return 0;
  }
  return 0;
}

uint64_t captureSource_ProprietaryDefaultsDomainForAuditToken(uint64_t a1, _OWORD *a2, const __CFString **a3)
{
  uint64_t result;
  void *CMIOExtensionProviderClass;
  __int128 v7;
  const __CFString *v8;
  _OWORD v9[2];

  *a3 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 12))
    return 4294954511;
  getCMIOExtensionProviderClass();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    CMIOExtensionProviderClass = (void *)getCMIOExtensionProviderClass();
    v7 = a2[1];
    v9[0] = *a2;
    v9[1] = v7;
    v8 = (const __CFString *)(id)objc_msgSend(CMIOExtensionProviderClass, "proprietaryDefaultsDomainForAuditToken:", v9);
  }
  else
  {
    v8 = CFSTR("unknown");
  }
  result = 0;
  *a3 = v8;
  return result;
}

uint64_t getCMIOExtensionProviderClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__39;
  v7 = __Block_byref_object_dispose__39;
  v0 = getCMIOExtensionProviderClass_softClass;
  v8 = getCMIOExtensionProviderClass_softClass;
  if (!getCMIOExtensionProviderClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getCMIOExtensionProviderClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getCMIOExtensionProviderClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2D975F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t csp_shouldCaptureStillsFromVideoStream(void *a1, void *a2, int a3, int a4)
{
  int v8;
  int v9;
  int v10;

  objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "capturesStillsFromVideoStream");
  objc_msgSend(a2, "capturesStillsFromVideoStream");
  v8 = FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("backgroundblur"), objc_msgSend(a1, "backgroundBlurEnabled"), objc_msgSend(a1, "isBackgroundBlurSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isBackgroundBlurProvidedBySource"), a4, 0);
  v9 = FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("studiolighting"), objc_msgSend(a1, "studioLightingEnabled"), objc_msgSend(a1, "isStudioLightingSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isStudioLightingProvidedBySource"), a4, 0);
  v10 = FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("backgroundreplacement"), objc_msgSend(a1, "backgroundReplacementEnabled"), objc_msgSend(a1, "isBackgroundReplacementSupported"), objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "isBackgroundReplacementProvidedBySource"), a4, 0);
  if (a4)
    return objc_msgSend(a2, "capturesStillsFromVideoStream") & (a3 ^ 1) | v8 | v9 | v10;
  else
    return 0;
}

uint64_t FigCaptureVideoEffectEnabledInGraph(uint64_t a1, int a2, int a3, int a4, int a5, _BYTE *a6)
{
  int v6;

  v6 = a3 & ~(a4 | a5);
  if (a6)
    *a6 = v6;
  return (v6 | a2) & (a4 ^ 1u);
}

uint64_t BWDeviceIsiPad()
{
  if (BWDeviceIsiPad_onceToken != -1)
    dispatch_once(&BWDeviceIsiPad_onceToken, &__block_literal_global_36_0);
  return BWDeviceIsiPad_isiPad;
}

void captureSession_postSinkRemoteQueueUpdatedNotification(const void *a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  _QWORD v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5[0] = CFSTR("SectionID");
    v5[1] = CFSTR("RemoteQueueReceiver");
    v6[0] = a2;
    v6[1] = a3;
    v4 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
    if (v4)
      captureSession_postNotificationWithPayload(a1, CFSTR("RemoteQueueUpdated"), v4);
  }
}

uint64_t FigRemoteQueueSenderCreateXPCObject(uint64_t a1, _QWORD *a2)
{
  uint64_t SharedRegion;
  xpc_object_t v5;
  void *v6;
  uint64_t RemoteAddress;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t Address;
  uint64_t v13;
  xpc_object_t value;

  value = 0;
  if (a1 && a2)
  {
    SharedRegion = FigSharedMemPoolGetSharedRegion(*(_QWORD *)(a1 + 16));
    v5 = xpc_dictionary_create(0, 0, 0);
    if (v5)
    {
      v6 = v5;
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
      if ((*(_DWORD *)(a1 + 64) & 0x80000000) != 0 || !*(_BYTE *)(a1 + 160))
        goto LABEL_16;
      RemoteAddress = FigSharedMemBlockGetRemoteAddress(*(_QWORD *)(a1 + 32));
      if (RemoteAddress)
      {
        if (FigSharedMemPoolSharedRegionGetOwner(SharedRegion))
        {
LABEL_16:
          fig_log_get_emitter();
          FigDebugAssert3();
          v13 = 4294950629;
LABEL_17:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
          xpc_release(v6);
          return v13;
        }
      }
      else
      {
        v8 = FigSharedMemPoolSharedRegionCreateXPCObject(SharedRegion, a1, &value);
        if ((_DWORD)v8)
        {
          v13 = v8;
          fig_log_get_emitter();
          FigDebugAssert3();
          goto LABEL_17;
        }
      }
      v9 = *(_DWORD *)(a1 + 52);
      v10 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = -1;
      xpc_dictionary_set_mach_recv();
      *(_BYTE *)(a1 + 160) = 0;
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
      if (value)
      {
        xpc_dictionary_set_value(v6, "SharedRegion", value);
        xpc_release(value);
      }
      v11 = *(_QWORD *)(a1 + 32);
      Address = FigSharedMemPoolSharedRegionGetAddress(SharedRegion);
      xpc_dictionary_set_uint64(v6, "QueueOffset", v11 - Address);
      xpc_dictionary_set_uint64(v6, "QueueData", RemoteAddress);
      xpc_dictionary_set_fd(v6, "RecvFd", v9);
      xpc_dictionary_set_fd(v6, "SendFd", v10);
      close(v10);
      v13 = 0;
      *a2 = v6;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294950630;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return v13;
}

uint64_t FigSharedMemPoolSharedRegionCreateXPCObject(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int *v5;
  xpc_object_t v7;
  uint64_t v9;

  if (a1
    && a3
    && (v5 = (unsigned int *)(a1 + 40), !*(_DWORD *)(a1 + 40))
    && (v7 = xpc_shmem_create(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24))) != 0)
  {
    while (!__ldxr(v5))
    {
      if (!__stxr(1u, v5))
      {
        v9 = 0;
        *(_QWORD *)(a1 + 32) = a2;
        *a3 = v7;
        return v9;
      }
    }
    __clrex();
    xpc_release(v7);
    return FigSignalErrorAt();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
}

void captureSession_makeCommittedConfigurationLive(const void *a1)
{
  uint64_t DerivedStorage;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v3 = *(void **)(DerivedStorage + 416);
  v4 = *(void **)(DerivedStorage + 424);
  if (v3 == v4)
  {
    v4 = 0;
    v6 = 0;
  }
  else
  {
    v5 = v3;
    *(_QWORD *)(DerivedStorage + 424) = v5;
    v6 = objc_msgSend(v5, "configurationID");
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));

  if (v6)
    captureSession_postNotificationWithPayload(a1, CFSTR("ConfigurationDidBecomeLive"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v6), CFSTR("ConfigurationID"), 0, CFSTR("ErrorStatus"), 0));
  v7 = *(void **)(DerivedStorage + 456);
  if (v7)
  {
    *(_QWORD *)(DerivedStorage + 456) = 0;
    captureSession_postNotificationWithPayload(a1, CFSTR("IrisPreparationComplete"), v7);

  }
  captureSession_transitionToSessionStatus(a1, 2, 0);
}

void captureSession_transitionToSessionStatus(const void *a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  os_unfair_lock_s *v7;
  int v8;
  char v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  dispatch_time_t v22;
  os_unfair_lock_s *v23;
  void *v24;
  NSObject *v25;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  int v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  double v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  const void *v62;
  uint64_t CurrentSmartStyle;
  os_unfair_lock_s *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  void *SystemStyle;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t j;
  uint64_t v78;
  uint64_t v79;
  uint64_t k;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  const __CFDictionary *v87;
  void *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  os_unfair_lock_s *v103;
  int v104;
  const void *v105;
  int v107;
  uint64_t v108;
  CGPoint v109;
  void *v110;
  uint64_t v111;
  id obj;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  CGPoint pointa;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  os_log_type_t type[128];
  _DWORD v137[32];
  _DWORD v138[3];
  uint8_t buf[8];
  uint64_t v140;
  void *v141;
  void *v142;
  const void *v143;
  uint64_t v144;
  CGPoint v145;

  v144 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v104 = objc_msgSend(*(id *)(DerivedStorage + 88), "clientType");
  v7 = (os_unfair_lock_s *)(DerivedStorage + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v8 = *(_DWORD *)(DerivedStorage + 368);
  *(_DWORD *)(DerivedStorage + 368) = a2;
  v9 = *(_BYTE *)(DerivedStorage + 334);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  v107 = v8;
  if (dword_1ECFE9590)
  {
    v137[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = (os_unfair_lock_s *)(DerivedStorage + 320);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      if ((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0
        || objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
      {
        os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
        qword_1ECFE9DA8 = mach_absolute_time();
        os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
      }
      os_unfair_lock_lock(v7);
      v11 = 0.0;
      if (*(double *)(DerivedStorage + 376) > 0.0)
      {
        v11 = CFAbsoluteTimeGetCurrent() - *(double *)(DerivedStorage + 376);
        *(_QWORD *)(DerivedStorage + 376) = 0;
      }
      os_unfair_lock_unlock(v7);
      if (v11 > 0.0 && dword_1ECFE9590)
      {
        v137[0] = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v140 = 3221225472;
      v141 = __captureSession_setIsUsingCamera_block_invoke;
      v142 = &__block_descriptor_33_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
      LOBYTE(v143) = v9;
      captureSession_performBlockWithAVCMSessionForIsUsingCamera(a1, (uint64_t)buf);
    }
    v13 = 0;
  }
  else
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v140 = 3221225472;
    v141 = __captureSession_setIsUsingCamera_block_invoke;
    v142 = &__block_descriptor_33_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
    LOBYTE(v143) = 0;
    captureSession_performBlockWithAVCMSessionForIsUsingCamera(a1, (uint64_t)buf);
    os_unfair_lock_lock(v7);

    *(_QWORD *)(DerivedStorage + 352) = 0;
    *(_QWORD *)(DerivedStorage + 376) = 0;
    *(_BYTE *)(DerivedStorage + 341) = 0;
    os_unfair_lock_unlock(v7);
    v13 = 1;
  }
  if (v8 != a2)
  {
    v105 = a1;
    if ((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0)
      v14 = 1;
    else
      v14 = objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8);
    v15 = objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4F8, v96, v99);
    if (v8)
    {
      if (!v13)
        goto LABEL_23;
    }
    else
    {
      -[FigCaptureMemoryReporter incrementActiveClientCount:clientIsCameraMessagesApp:withMemoryPool:](+[FigCaptureMemoryReporter sharedInstance](FigCaptureMemoryReporter, "sharedInstance"), "incrementActiveClientCount:clientIsCameraMessagesApp:withMemoryPool:", v14, v15, +[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"));
      if (!v13)
      {
LABEL_23:
        if (a2 == 2)
        {
          if (v8 != 1)
            return;
          v18 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", cs_notificationPayloadWithErrorStatus(a3));
          os_unfair_lock_lock(v7);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", cs_configurationContainsVideoSource(*(void **)(DerivedStorage + 424))), 0x1E493E498);
          v19 = *(_QWORD *)(DerivedStorage + 352);
          if (v19)
            objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("PrewarmReason"));
          os_unfair_lock_unlock(v7);
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 52));
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", DerivedStorage + 20, 32), CFSTR("ClientAuditToken"));
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 52));
          captureSession_postNotificationWithPayload(v105, CFSTR("DidStartRunning"), v18);
          if (v104 == 5)
          {
            os_unfair_lock_lock(v7);
            v20 = CMBaseObjectGetDerivedStorage();
            os_unfair_lock_assert_owner((const os_unfair_lock *)(v20 + 320));
            if (!*(_QWORD *)(v20 + 528))
            {
              v21 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v20 + 104));
              v22 = dispatch_time(0, 5000000000);
              dispatch_source_set_timer(v21, v22, 0x12A05F200uLL, 0x6F05B59D3B20000uLL);
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              v140 = 3221225472;
              v141 = __captureSession_startAVConferenceBackgroundRunningTrackingTimerIfNeeded_block_invoke;
              v142 = &__block_descriptor_40_e5_v8__0l;
              v143 = v105;
              dispatch_source_set_event_handler(v21, buf);
              *(_QWORD *)(v20 + 528) = v21;
              dispatch_activate(v21);
            }
            os_unfair_lock_unlock(v7);
          }
          os_unfair_lock_lock(v7);
          objc_msgSend(*(id *)(DerivedStorage + 392), "setWindowed:", *(unsigned __int8 *)(DerivedStorage + 338) | objc_msgSend(*(id *)(DerivedStorage + 392), "windowed"));
          objc_msgSend(*(id *)(DerivedStorage + 392), "setPipEnabled:", *(unsigned __int8 *)(DerivedStorage + 339) | objc_msgSend(*(id *)(DerivedStorage + 392), "pipEnabled"));
          v23 = v7;
        }
        else
        {
          if (a2 != 1)
          {
            if (!a2)
            {
              v16 = CMBaseObjectGetDerivedStorage();
              if (!_FigIsCurrentDispatchQueue())
              {
                v100 = v3;
                LODWORD(v97) = 0;
                FigDebugAssert3();
              }
              if ((objc_msgSend(*(id *)(v16 + 56), "isEqualToString:", 0x1E493D4D8, v97, v100) & 1) != 0
                || objc_msgSend(*(id *)(v16 + 56), "isEqualToString:", 0x1E493D5F8))
              {
                os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
                if (a3 == -16407 && dword_1ECFE9D84)
                {
                  if (!(_QWORD)xmmword_1ECFE9DB0)
                  {
                    *(_QWORD *)&xmmword_1ECFE9DB0 = mach_absolute_time();
                    byte_1ECFE9DD5 = *(_BYTE *)(v16 + 608);
                    if (*MEMORY[0x1E0CA1FC0])
                    {
                      v17 = fig_log_handle();
                      if (os_signpost_enabled(v17))
                      {
                        *(_WORD *)buf = 0;
                        _os_signpost_emit_with_name_impl(&dword_1A2C80000, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", (const char *)&unk_1A332D80B, buf, 2u);
                      }
                    }
                  }
                }
                else
                {
                  captureSession_abandonCameraAppSessionStartupTelemetry();
                }
                os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
                os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
                if (byte_1EE6BF31C)
                {
                  if (a3 && a3 != -16403)
                  {
                    if (!dword_1EE6BF32C)
                    {
                      if (a3 == -16407)
                        v33 = 1;
                      else
                        v33 = 2;
                      dword_1EE6BF32C = v33;
                    }
                  }
                  else
                  {
                    captureSession_reportCancelledLockScreenCameraLaunch();
                  }
                }
                os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
              }
              if (dword_1ECFE9590)
              {
                v137[0] = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v103 = v7;
              v35 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v98, v101);
              v118 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v36 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v117 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v116 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v115 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v114 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              v113 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              obj = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v132 = 0u;
              v133 = 0u;
              v134 = 0u;
              v135 = 0u;
              v37 = *(void **)(v16 + 616);
              v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v132, buf, 16);
              if (v38)
              {
                v39 = v38;
                v40 = *(_QWORD *)v133;
                do
                {
                  v41 = 0;
                  do
                  {
                    if (*(_QWORD *)v133 != v40)
                      objc_enumerationMutation(v37);
                    v42 = *(_QWORD *)(*((_QWORD *)&v132 + 1) + 8 * v41);
                    v43 = objc_msgSend(*(id *)(v16 + 616), "objectForKeyedSubscript:", v42);
                    if (v43)
                      v44 = *(_QWORD *)(v43 + 8);
                    else
                      v44 = 0;
                    objc_msgSend(v35, "setObject:forKeyedSubscript:", v44, v42);
                    ++v41;
                  }
                  while (v39 != v41);
                  v45 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v132, buf, 16);
                  v39 = v45;
                }
                while (v45);
              }
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v111 = v16;
              v46 = (void *)objc_msgSend(*(id *)(v16 + 624), "previewSinkPipelines");
              v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v128, v138, 16);
              if (v47)
              {
                v48 = v47;
                v49 = *(_QWORD *)v129;
                do
                {
                  for (i = 0; i != v48; ++i)
                  {
                    if (*(_QWORD *)v129 != v49)
                      objc_enumerationMutation(v46);
                    v51 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * i);
                    v52 = objc_msgSend(v51, "sinkID");
                    if (v52)
                    {
                      v53 = v52;
                      objc_msgSend(obj, "addObject:", v52);
                      objc_msgSend(v118, "setObject:forKeyedSubscript:", objc_msgSend(v51, "filters"), v53);
                      v54 = (void *)MEMORY[0x1E0CB37E8];
                      objc_msgSend(v51, "simulatedAperture");
                      objc_msgSend(v36, "setObject:forKeyedSubscript:", objc_msgSend(v54, "numberWithFloat:"), v53);
                      objc_msgSend(v117, "setObject:forKeyedSubscript:", objc_msgSend(v51, "semanticStyle"), v53);
                      v55 = (void *)MEMORY[0x1E0CB37E8];
                      objc_msgSend(v51, "primaryCaptureRectAspectRatio");
                      objc_msgSend(v115, "setObject:forKeyedSubscript:", objc_msgSend(v55, "numberWithDouble:"), v53);
                      objc_msgSend(v51, "primaryCaptureRectCenter");
                      objc_msgSend(v114, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v145), v53);
                      objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v51, "primaryCaptureRectUniqueID")), v53);
                      v56 = (void *)MEMORY[0x1E0CB37E8];
                      objc_msgSend(v51, "portraitLightingEffectStrength");
                      objc_msgSend(v116, "setObject:forKeyedSubscript:", objc_msgSend(v56, "numberWithFloat:"), v53);
                      v57 = objc_msgSend(*(id *)(v111 + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(v51, "sourceID"));
                      if (v57)
                      {
                        v58 = (void *)MEMORY[0x1E0CB37E8];
                        *(float *)&v59 = -[FigCaptureCinematographyPipeline simulatedAperture](v57);
                        objc_msgSend(v36, "setObject:forKeyedSubscript:", objc_msgSend(v58, "numberWithFloat:", v59), v53);
                      }
                    }
                  }
                  v48 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v128, v138, 16);
                }
                while (v48);
              }
              v60 = v111;
              v61 = (os_unfair_lock_s *)(v111 + 320);
              if (*(_BYTE *)(v111 + 584))
              {
                v62 = v105;
                CurrentSmartStyle = cs_getCurrentSmartStyle();
              }
              else
              {
                CurrentSmartStyle = 0;
                v62 = v105;
              }
              v64 = v103;
              v65 = v107;
              os_unfair_lock_lock(v61);
              v66 = *(unsigned __int8 *)(v111 + 342);
              os_unfair_lock_unlock(v61);
              captureSession_teardownGraph(v62, v66, 0, 0, 0, 0);
              os_unfair_lock_lock(v61);
              v67 = objc_msgSend(v35, "count");
              v68 = *(void **)(v111 + 416);
              if (v67 && v68 == *(void **)(v111 + 408))
              {
                *(_QWORD *)(v111 + 416) = 0;
                os_unfair_lock_unlock(v61);
                if (v68)
                {
                  v126 = 0u;
                  v127 = 0u;
                  v124 = 0u;
                  v125 = 0u;
                  v74 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
                  if (v74)
                  {
                    v75 = v74;
                    v76 = *(_QWORD *)v125;
                    do
                    {
                      for (j = 0; j != v75; ++j)
                      {
                        if (*(_QWORD *)v125 != v76)
                          objc_enumerationMutation(v35);
                        cs_updateConfigurationsWithCaptureSource(v68, objc_msgSend(v35, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v124 + 1) + 8 * j)));
                      }
                      v75 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
                    }
                    while (v75);
                  }
                  v110 = v68;
                  v102 = CurrentSmartStyle;
                  v122 = 0u;
                  v123 = 0u;
                  v120 = 0u;
                  v121 = 0u;
                  v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v120, type, 16);
                  if (v78)
                  {
                    v79 = v78;
                    v108 = *(_QWORD *)v121;
                    v109 = (CGPoint)*MEMORY[0x1E0C9D538];
                    do
                    {
                      for (k = 0; k != v79; ++k)
                      {
                        if (*(_QWORD *)v121 != v108)
                          objc_enumerationMutation(obj);
                        v81 = *(_QWORD *)(*((_QWORD *)&v120 + 1) + 8 * k);
                        v82 = objc_msgSend(v118, "objectForKeyedSubscript:", v81);
                        v83 = (void *)objc_msgSend(v36, "objectForKeyedSubscript:", v81);
                        v84 = (void *)objc_msgSend(v116, "objectForKeyedSubscript:", v81);
                        v85 = objc_msgSend(v117, "objectForKeyedSubscript:", v81);
                        v86 = (void *)objc_msgSend(v115, "objectForKeyedSubscript:", v81);
                        v87 = (const __CFDictionary *)objc_msgSend(v114, "objectForKeyedSubscript:", v81);
                        pointa = v109;
                        CGPointMakeWithDictionaryRepresentation(v87, &pointa);
                        v88 = (void *)objc_msgSend(v113, "objectForKeyedSubscript:", v81);
                        objc_msgSend(v83, "floatValue");
                        v90 = v89;
                        objc_msgSend(v84, "floatValue");
                        v92 = v91;
                        objc_msgSend(v86, "doubleValue");
                        v94 = v93;
                        v95 = objc_msgSend(v88, "longLongValue");
                        cs_updateConfigurationsWithPreviewSinkProperties(v110, v81, v82, v85, v95, v90, v92, v94, pointa.x, pointa.y);
                      }
                      v79 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v120, type, 16);
                    }
                    while (v79);
                  }
                  v60 = v111;
                  v62 = v105;
                  if (*(_BYTE *)(v111 + 584))
                  {
                    v68 = v110;
                    objc_msgSend(v110, "setSmartStyle:", v102);
                    *(_BYTE *)(v111 + 584) = 0;
                    v64 = v103;
                    v65 = v107;
                  }
                  else
                  {
                    v64 = v103;
                    v65 = v107;
                    v68 = v110;
                  }
                }
              }
              else
              {
                *(_QWORD *)(v111 + 416) = 0;
                os_unfair_lock_unlock(v61);
              }

              -[BWMemoryPool disable](+[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"), "disable");
              objc_msgSend(MEMORY[0x1E0C9DDD0], "clearCache");
              objc_msgSend(MEMORY[0x1E0C9DDB8], "clearCache");

              *(_QWORD *)(v60 + 728) = 0;
              if (v65 >= 1)
              {
                v69 = (const void *)cs_notificationPayloadWithErrorStatus(a3);
                captureSession_postNotificationWithPayload(v62, CFSTR("DidStopRunning"), v69);
                if (v104 == 5)
                {
                  os_unfair_lock_lock(v64);
                  v70 = CMBaseObjectGetDerivedStorage();
                  os_unfair_lock_assert_owner((const os_unfair_lock *)(v70 + 320));
                  v71 = *(NSObject **)(v70 + 528);
                  if (v71)
                  {
                    dispatch_source_cancel(v71);

                    *(_QWORD *)(v70 + 528) = 0;
                  }
                  os_unfair_lock_unlock(v64);
                }
                v72 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
                SystemStyle = (void *)FigCaptureSmartStyleSettingsGetSystemStyle(v72);
                if (SystemStyle)
                {
                  if ((objc_msgSend(SystemStyle, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")) & 1) == 0)
                  {
                    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "date"), "timeIntervalSince1970");
                    FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp(objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:"), v72);
                  }
                }
              }
            }
            return;
          }
          v24 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", cs_notificationPayloadWithErrorStatus(a3));
          os_unfair_lock_lock(v7);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", cs_configurationContainsVideoSource(*(void **)(DerivedStorage + 408))), 0x1E493E498);
          os_unfair_lock_unlock(v7);
          os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 52));
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", DerivedStorage + 20, 32), CFSTR("ClientAuditToken"));
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 52));
          captureSession_postNotificationWithPayload(v105, CFSTR("WillStartRunning"), v24);
          if ((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) == 0
            && !objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
          {
            return;
          }
          os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
          qword_1ECFE9DA0 = mach_absolute_time();
          if (!dword_1ECFE9D84)
          {
            dword_1ECFE9D84 = 1;
            v138[0] = 0;
            *(_QWORD *)buf = 4;
            v31 = sysctlbyname("kern.memorystatus_level", v138, (size_t *)buf, 0, 0) ? 0 : v138[0];
            LODWORD(qword_1ECFE9DC8) = v31;
            HIDWORD(qword_1ECFE9DC8) = objc_msgSend(*(id *)(DerivedStorage + 680), "thermalLevel");
            if (*MEMORY[0x1E0CA1FC0])
            {
              v32 = fig_log_handle();
              if (os_signpost_enabled(v32))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A2C80000, v32, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CameraLaunchWithoutPrewarm", (const char *)&unk_1A332D80B, buf, 2u);
              }
            }
          }
          if ((_QWORD)xmmword_1ECFE9DB0)
          {
            *((_QWORD *)&xmmword_1ECFE9DB0 + 1) = mach_absolute_time();
            if (*MEMORY[0x1E0CA1FC0])
            {
              v25 = fig_log_handle();
              if (os_signpost_enabled(v25))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A2C80000, v25, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", " enableTelemetry=YES ", buf, 2u);
              }
            }
          }
          os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
          os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
          mach_absolute_time();
          v27 = (float)((float)FigHostTimeToNanoseconds() / 1000000000.0) < 1.0 || byte_1EE6BF330 != 0;
          mach_absolute_time();
          v28 = FigHostTimeToNanoseconds();
          v29 = byte_1EE6BF31C;
          if (byte_1EE6BF31C && dword_1EE6BF32C && !v27 && (float)((float)v28 / 1000000000.0) > 2.0)
          {
            captureSession_reportCancelledLockScreenCameraLaunch();
            v29 = byte_1EE6BF31C;
          }
          if (v29)
            v30 = 0;
          else
            v30 = v27;
          if (v30)
          {
            byte_1EE6BF31C = 1;
            qword_1EE6BF320 = mach_absolute_time();
          }
          v23 = &sLockScreenCameraLaunchTelemetry;
        }
        os_unfair_lock_unlock(v23);
        return;
      }
    }
    -[FigCaptureMemoryReporter decrementActiveClientCount:clientIsCameraMessagesApp:](+[FigCaptureMemoryReporter sharedInstance](FigCaptureMemoryReporter, "sharedInstance"), "decrementActiveClientCount:clientIsCameraMessagesApp:", v14, v15);
    goto LABEL_23;
  }
}

void captureSession_postNotificationWithPayload(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v7 = DerivedStorage;
    CFRetain(a2);
    if (a3)
      CFRetain(a3);
    if (a1)
      CFRetain(a1);
    v8 = *(NSObject **)(v7 + 120);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSession_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    block[4] = a2;
    block[5] = a3;
    block[6] = v7;
    block[7] = a1;
    dispatch_async(v8, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t cs_notificationPayloadWithErrorStatus(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _QWORD *v4;
  const __CFString **v5;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = 2;
  switch(a1)
  {
    case 0xFFFFBFE8:
      v1 = 5;
      goto LABEL_10;
    case 0xFFFFBFE9:
      v1 = 4;
      goto LABEL_10;
    case 0xFFFFBFEA:
    case 0xFFFFBFEB:
      goto LABEL_6;
    case 0xFFFFBFEC:
      goto LABEL_10;
    case 0xFFFFBFED:
      v1 = 1;
      goto LABEL_10;
    default:
      if ((_DWORD)a1 == -16952)
      {
        v1 = 6;
LABEL_10:
        v7[0] = CFSTR("ErrorStatus");
        v7[1] = CFSTR("ErrorReason");
        v8[0] = &unk_1E49FA038;
        v8[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1);
        v3 = (void *)MEMORY[0x1E0C99D80];
        v4 = v8;
        v5 = (const __CFString **)v7;
        v6 = 2;
      }
      else
      {
        if (!(_DWORD)a1)
          return 0;
LABEL_6:
        v9 = CFSTR("ErrorStatus");
        v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
        v3 = (void *)MEMORY[0x1E0C99D80];
        v4 = v10;
        v5 = &v9;
        v6 = 1;
      }
      return objc_msgSend(v3, "dictionaryWithObjects:forKeys:count:", v4, v5, v6);
  }
}

void captureSession_performBlockWithAVCMSessionForIsUsingCamera(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v6 = *(NSObject **)(v5 + 160);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockWithAVCMSessionForIsUsingCamera_block_invoke;
    block[3] = &unk_1E4923028;
    block[4] = a2;
    block[5] = v5;
    block[6] = a1;
    dispatch_async(v6, block);
  }
}

uint64_t captureSessionServer_serializeSessionNotification(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5, void *a6)
{
  const void *v9;
  const void *v10;
  __IOSurface *v11;
  __IOSurface *v12;
  __IOSurface *v13;
  __IOSurface *v14;
  __IOSurface *v15;
  __IOSurface *v16;
  void *v17;
  __IOSurface *v18;
  _BOOL4 v19;
  uint64_t v20;
  const __CFAllocator *v22;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  xpc_object_t XPCObject;
  void *v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  void *v30;
  xpc_object_t v31;
  void *v32;
  xpc_object_t v33;
  void *v34;
  xpc_object_t v35;
  void *v36;
  xpc_object_t v37;
  void *v38;
  xpc_object_t v39;
  void *v40;
  xpc_object_t v41;
  void *v42;
  xpc_object_t v43;
  void *v44;
  xpc_object_t v45;
  void *v46;
  xpc_object_t value;
  __IOSurface *v48;
  __IOSurface *v49;
  __CFDictionary **v50;
  void *v51;
  __IOSurface *v52;
  const void *v53;
  __IOSurface *v54;
  __IOSurface *v55;
  __IOSurface *v56;
  const void *v57;
  __IOSurface *v58;
  _QWORD v59[4];

  v59[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    FigDebugAssert3();
    return 1;
  }
  if (a4)
  {
    v59[0] = 0x1E493EA78;
    v59[1] = 0x1E493EA98;
    if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v59, 2), "containsObject:", a3) & 1) == 0)
    {
      v50 = a5;
      v51 = a6;
      v9 = CFDictionaryGetValue(a4, CFSTR("FormatDescription"));
      v10 = CFDictionaryGetValue(a4, CFSTR("SampleBuffer"));
      v58 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("Surface"));
      v57 = CFDictionaryGetValue(a4, CFSTR("PreviewSampleBuffer"));
      v11 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("PreviewSurface"));
      v12 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("ThumbnailSurface"));
      v13 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("DepthDataSurface"));
      v52 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("ConstantColorConfidenceMapSurface"));
      v14 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("PortraitEffectsMatteSurface"));
      v15 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("HairSegmentationMatteSurface"));
      v16 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("SkinSegmentationMatteSurface"));
      v55 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("TeethSegmentationMatteSurface"));
      v54 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("GlassesSegmentationMatteSurface"));
      v56 = (__IOSurface *)CFDictionaryGetValue(a4, CFSTR("DeferredPhotoProxySurface"));
      v53 = CFDictionaryGetValue(a4, CFSTR("MasterClock"));
      v17 = (void *)CFDictionaryGetValue(a4, CFSTR("RemoteQueueReceiver"));
      v18 = v16;
      v19 = v10 != 0;
      if (!v9
        && !v10
        && !v58
        && !v56
        && !v57
        && !v11
        && !v12
        && !v13
        && !v14
        && !v15
        && !v18
        && !v55
        && !v54
        && !v17
        && !v53
        && !v52)
      {
        return 0;
      }
      v49 = v15;
      value = v17;
      v48 = v18;
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Count = CFDictionaryGetCount(a4);
      MutableCopy = CFDictionaryCreateMutableCopy(v22, Count, a4);
      CFDictionaryRemoveValue(MutableCopy, CFSTR("ClientAuditToken"));
      CFDictionaryRemoveValue(MutableCopy, CFSTR("ContainsVideoSource"));
      CFDictionaryRemoveValue(MutableCopy, CFSTR("ClientAuditToken"));
      CFDictionaryRemoveValue(MutableCopy, CFSTR("ContainsVideoSource"));
      if (v9)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("FormatDescription"));
        if (FigRemote_CreateSerializableDictionaryForFormatDescription())
          goto LABEL_76;
        CFDictionarySetValue(MutableCopy, CFSTR("FormatDescription_Serialized"), 0);
      }
      if (v10)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("SampleBuffer"));
        if (FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer())
          goto LABEL_76;
        FigXPCMessageSetAndConsumeVMData();
      }
      if (v58)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("Surface"));
        XPCObject = IOSurfaceCreateXPCObject(v58);
        if (!XPCObject)
          goto LABEL_76;
        v26 = XPCObject;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_Surface_Serialized, XPCObject);
        xpc_release(v26);
        v19 = 1;
        if (!v57)
          goto LABEL_35;
      }
      else if (!v57)
      {
        goto LABEL_35;
      }
      CFDictionaryRemoveValue(MutableCopy, CFSTR("PreviewSampleBuffer"));
      if (FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer())
        goto LABEL_76;
      FigXPCMessageSetAndConsumeVMData();
      v19 = 1;
LABEL_35:
      if (v11)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("PreviewSurface"));
        v27 = IOSurfaceCreateXPCObject(v11);
        if (!v27)
          goto LABEL_76;
        v28 = v27;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_PreviewSurface_Serialized, v27);
        xpc_release(v28);
        v19 = 1;
      }
      if (v12)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ThumbnailSurface"));
        v29 = IOSurfaceCreateXPCObject(v12);
        if (!v29)
          goto LABEL_76;
        v30 = v29;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_ThumbnailSurface_Serialized, v29);
        xpc_release(v30);
        v19 = 1;
      }
      if (v13)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("DepthDataSurface"));
        v31 = IOSurfaceCreateXPCObject(v13);
        if (!v31)
          goto LABEL_76;
        v32 = v31;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_DepthDataSurface_Serialized, v31);
        xpc_release(v32);
        v19 = 1;
      }
      if (v52)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ConstantColorConfidenceMapSurface"));
        v33 = IOSurfaceCreateXPCObject(v52);
        if (!v33)
          goto LABEL_76;
        v34 = v33;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_ConstantColorConfidenceMapSurface_Serialized, v33);
        xpc_release(v34);
        v19 = 1;
      }
      if (v14)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("PortraitEffectsMatteSurface"));
        v35 = IOSurfaceCreateXPCObject(v14);
        if (!v35)
          goto LABEL_76;
        v36 = v35;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized, v35);
        xpc_release(v36);
        v19 = 1;
      }
      if (v49)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("HairSegmentationMatteSurface"));
        v37 = IOSurfaceCreateXPCObject(v49);
        if (!v37)
          goto LABEL_76;
        v38 = v37;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_HairSegmentationMatteSurface_Serialized, v37);
        xpc_release(v38);
        v19 = 1;
      }
      if (v48)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("SkinSegmentationMatteSurface"));
        v39 = IOSurfaceCreateXPCObject(v48);
        if (!v39)
          goto LABEL_76;
        v40 = v39;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized, v39);
        xpc_release(v40);
        v19 = 1;
      }
      if (v55)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("TeethSegmentationMatteSurface"));
        v41 = IOSurfaceCreateXPCObject(v55);
        if (!v41)
          goto LABEL_76;
        v42 = v41;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized, v41);
        xpc_release(v42);
        v19 = 1;
      }
      if (v54)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("GlassesSegmentationMatteSurface"));
        v43 = IOSurfaceCreateXPCObject(v54);
        if (!v43)
          goto LABEL_76;
        v44 = v43;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized, v43);
        xpc_release(v44);
        v19 = 1;
      }
      if (v56)
      {
        CFDictionaryRemoveValue(MutableCopy, CFSTR("DeferredPhotoProxySurface"));
        v45 = IOSurfaceCreateXPCObject(v56);
        if (!v45)
          goto LABEL_76;
        v46 = v45;
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface_Serialized, v45);
        xpc_release(v46);
        v19 = 1;
      }
      if (v53)
        CFDictionaryRemoveValue(MutableCopy, CFSTR("MasterClock"));
      if (value)
      {
        xpc_dictionary_set_value(v51, (const char *)kFigCaptureSessionRemoteQueueUpdatedNotificationPayloadKey_RemoteQueueReceiver_Serialized, value);
        CFDictionaryRemoveValue(MutableCopy, CFSTR("RemoteQueueReceiver"));
      }
      else if (!v19)
      {
        *v50 = MutableCopy;
        return 4;
      }
      if (!FigXPCMessageSetCFDictionary())
      {
        v20 = 2;
        if (!MutableCopy)
          return v20;
LABEL_72:
        CFRelease(MutableCopy);
        return v20;
      }
LABEL_76:
      FigDebugAssert3();
      v20 = 1;
      if (!MutableCopy)
        return v20;
      goto LABEL_72;
    }
    return 1;
  }
  return 0;
}

void cso_handleCaptureSessionNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void *a5)
{
  char v8;
  uint64_t v9;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (FigCFEqual())
    {
      cso_postDeferredmediadImmediateTerminationNotificationIfNecessary((uint64_t)a4);
      v17 = 0u;
      v18 = 0u;
      objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("ClientAuditToken")), "getBytes:length:", &v17, 32);
      v19 = v17;
      v20 = v18;
      if (FigCaptureGetPIDFromAuditToken(&v19) != -1)
      {
        v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E493E498), "BOOLValue");
        v19 = v17;
        v20 = v18;
        v9 = a2;
        v10 = 1;
LABEL_8:
        -[FigCaptureSessionObservatory _setStatus:clientAuditToken:containsVideoSource:forCaptureSession:](v9, v10, &v19, v8, a4);
        return;
      }
LABEL_12:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    if (FigCFEqual())
    {
      cso_postDeferredmediadImmediateTerminationNotificationIfNecessary((uint64_t)a4);
      v17 = 0u;
      v18 = 0u;
      objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("ClientAuditToken")), "getBytes:length:", &v17, 32);
      v19 = v17;
      v20 = v18;
      if (FigCaptureGetPIDFromAuditToken(&v19) != -1)
      {
        v8 = objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E493E498), "BOOLValue");
        v19 = v17;
        v20 = v18;
        v9 = a2;
        v10 = 2;
        goto LABEL_8;
      }
      goto LABEL_12;
    }
    if (FigCFEqual())
    {
      -[FigCaptureSessionObservatory _resetFigAssetWriterRecordingsCountForCaptureSession:](a2, a4);
      -[FigCaptureSessionObservatory _setStatus:clientAuditToken:containsVideoSource:forCaptureSession:](a2, 0, (__int128 *)&unk_1A32B12C0, 0, a4);
      return;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      v12 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("SectionID"));
      v13 = a2;
      v14 = 1;
LABEL_17:
      -[FigCaptureSessionObservatory _setMovieFileOutputRecording:sectionID:forCaptureSession:](v13, v14, v12, a4);
      return;
    }
    if (FigCFEqual() || FigCFEqual())
    {
      v12 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("SectionID"));
      v13 = a2;
      v14 = 0;
      goto LABEL_17;
    }
    if (FigCFEqual())
    {
      v15 = a2;
      v16 = 1;
LABEL_25:
      -[FigCaptureSessionObservatory _setFigAssetWriterRecording:forCaptureSession:](v15, v16, a4);
      return;
    }
    if (FigCFEqual())
    {
      v15 = a2;
      v16 = 0;
      goto LABEL_25;
    }
  }
}

void cso_postDeferredmediadImmediateTerminationNotificationIfNecessary(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v3;
  CFTypeRef cf;

  if (cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_onceToken != -1)
    dispatch_once(&cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_onceToken, &__block_literal_global_61);
  cf = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
    v2(a1, CFSTR("CaptureSession_IsCameraOrDerivative"), *MEMORY[0x1E0C9AE00], &cf);
  if (FigCFEqual())
    v3 = cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_sSupportsDeferredProcessing == 0;
  else
    v3 = 1;
  if (!v3)
    notify_post(kFigCaptureDeferredNotification_deferredmediadImmediateTermination);
  if (cf)
    CFRelease(cf);
}

uint64_t captureSession_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  uint64_t result;
  _BYTE *v9;
  CFTypeRef *v10;
  int IsCameraOrDerivative;
  CFTypeRef v12;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v9 = DerivedStorage;
  if (CFEqual(a2, CFSTR("CaptureSession_RemoteVideoPreviewEnabled")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!v9[168])
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
LABEL_11:
    v12 = CFRetain(*v10);
    result = 0;
    *a4 = v12;
    return result;
  }
  if (CFEqual(a2, CFSTR("CaptureSession_IsCameraOrDerivative")))
  {
    IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(a1);
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!IsCameraOrDerivative)
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_11;
  }
  return 4294954512;
}

void fig_dispatch_async_autoreleasepool(NSObject *a1, void *a2)
{
  dispatch_async_f(a1, (void *)objc_msgSend(a2, "copy"), (dispatch_function_t)_executeBlockWithAutoreleasePool);
}

void *FigRemoteOperationReceiverCreateMessageReceiver(_QWORD *a1, void *a2)
{
  void *v2;
  char *v4;
  void *v5;
  _QWORD aBlock[5];

  v2 = a2;
  if (a2)
  {
    if (FigRemoteQueueReceiverGetContext((uint64_t)a1))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v4 = (char *)malloc_type_malloc(0x78uLL, 0x10E20404DDAD7CFuLL);
    *(_QWORD *)v4 = FigSimpleMutexCreate();
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    FigRemoteQueueReceiverSetContext(a1, (uint64_t)v4, &__block_literal_global_7);
    v5 = _Block_copy(v2);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = __FigRemoteOperationReceiverCreateMessageReceiver_block_invoke;
    aBlock[3] = &unk_1E491ECE0;
    aBlock[4] = v5;
    v2 = _Block_copy(aBlock);
    _Block_release(v5);
  }
  return v2;
}

_QWORD *FigRemoteQueueReceiverSetContext(_QWORD *result, uint64_t a2, void *aBlock)
{
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v5 = result;
    if (result[10])
    {
      v6 = result[11];
      if (v6)
        (*(void (**)(void))(v6 + 16))();
    }
    v5[10] = a2;
    result = _Block_copy(aBlock);
    v5[11] = result;
  }
  return result;
}

uint64_t FigRemoteQueueReceiverGetContext(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

uint64_t FigImageControl_Focus(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  int v5;
  uint64_t v6;
  CVImageBufferRef ImageBuffer;
  CFIndex v8;
  __CFDictionary *Mutable;
  const __CFDictionary *v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  const CFArrayCallBacks *v16;
  CFMutableArrayRef v17;
  __CFArray *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  const void **v23;
  const __CFAllocator *v24;
  __CFArray *v25;
  CFNumberRef v26;
  const __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const void *Value;
  const void *v34;
  uint64_t v35;
  unsigned int x_low;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int Width;
  size_t Height;
  int v43;
  int FloatIfPresent;
  float v45;
  CFNumberRef v46;
  uint64_t v47;
  uint64_t v48;
  __CFDictionary *v49;
  uint64_t v50;
  const __CFDictionary *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  int v55;
  _BOOL4 v57;
  const __CFNumber *v58;
  void *v59;
  __CFDictionary *v60;
  __CFDictionary *v61;
  int v62;
  __CFString **v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  int32x4_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  int v89;
  BOOL v90;
  const __CFDictionary *v91;
  int v92;
  _DWORD *v93;
  uint64_t v94;
  const void *v95;
  BOOL v96;
  const __CFNumber *v97;
  const __CFNumber *v98;
  const __CFArray *v99;
  int v100;
  const __CFArray *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  CMTimeValue v106;
  CMTimeValue v107;
  const __CFNumber *ValueAtIndex;
  uint64_t i;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  int64x2_t v113;
  int32x4_t v114;
  int v115;
  uint64_t v116;
  _BYTE *v117;
  const __CFDictionary *v118;
  int v119;
  const __CFDictionary *v120;
  const __CFArray *v121;
  int Count;
  CFIndex v123;
  const void *v124;
  uint64_t v125;
  float v126;
  const __CFDictionary *v127;
  const __CFDictionary *v128;
  double MidX;
  float v130;
  float v131;
  double MidY;
  float v133;
  float v134;
  uint64_t v135;
  const __CFDictionary *v136;
  const __CFNumber *v137;
  const __CFNumber *v138;
  const __CFNumber *v139;
  int v140;
  uint64_t v141;
  int v142;
  const __CFDictionary *v143;
  const __CFNumber *v144;
  const __CFAllocator *v145;
  CGFloat v146;
  CFDictionaryRef v147;
  const __CFNumber *v148;
  int v149;
  float v150;
  int v151;
  _BOOL4 v152;
  void **v153;
  int v154;
  int v155;
  opaqueCMSampleBuffer *v156;
  const __CFNumber *v157;
  int v158;
  int v159;
  int v160;
  CFDictionaryRef v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  opaqueCMSampleBuffer *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  float v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  float v186;
  const __CFArray *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  CFArrayRef v191;
  uint64_t j;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  CFTypeRef *v205;
  int v206;
  BOOL v207;
  int v208;
  void **v209;
  int v210;
  uint64_t v211;
  int *v212;
  _QWORD *v213;
  unint64_t v214;
  int v215;
  int v216;
  CFNumberRef v217;
  int v218;
  _BYTE *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  const __CFDictionary *v223;
  opaqueCMSampleBuffer *target;
  __CFDictionary *theDict;
  unsigned int theDicta;
  CFMutableDictionaryRef theDictb[2];
  const __CFString *key;
  CFStringRef keya[2];
  int v230;
  CMTime v231;
  uint64_t v232;
  uint64_t v233;
  signed int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE time[128];
  CGRect rect;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  CGRect valuePtr;
  uint64_t v247;

  v247 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v5)
    v5 = *(_DWORD *)(DerivedStorage + 7612);
  v220 = v5;
  v222 = DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  v8 = *(int *)(v6 + 6220);
  key = (const __CFString *)*MEMORY[0x1E0D05CB0];
  Mutable = (__CFDictionary *)CMGetAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v10 = Mutable;
  v221 = a1;
  target = a2;
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v47 = FigSignalErrorAt();
      v48 = v222;
      goto LABEL_48;
    }
  }
  theDict = Mutable;
  LODWORD(rect.origin.x) = 0;
  v11 = CFArrayCreateMutable(0, v8, MEMORY[0x1E0C9B378]);
  if (!v11)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v47 = FigSignalErrorAt();
    v48 = v222;
    v49 = theDict;
    if (!v10)
      goto LABEL_46;
    goto LABEL_48;
  }
  v12 = v11;
  v223 = v10;
  if ((int)v8 >= 1)
  {
    v13 = v8;
    v14 = (char *)(v6 + 5896);
    v15 = (char *)(v6 + 5736);
    v16 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v17 = CFArrayCreateMutable(0, 2, v16);
      if (!v17)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v47 = FigSignalErrorAt();
        goto LABEL_255;
      }
      v18 = v17;
      v19 = CFNumberCreate(0, kCFNumberIntType, v15);
      if (!v19)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v47 = FigSignalErrorAt();
        goto LABEL_254;
      }
      v20 = v19;
      CFArraySetValueAtIndex(v18, 0, v19);
      v21 = CFNumberCreate(0, kCFNumberSInt64Type, v14);
      if (!v21)
        break;
      v22 = v21;
      CFArraySetValueAtIndex(v18, 1, v21);
      CFArrayAppendValue(v12, v18);
      CFRelease(v20);
      CFRelease(v22);
      CFRelease(v18);
      v14 += 8;
      v15 += 4;
      if (!--v13)
        goto LABEL_12;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    v47 = FigSignalErrorAt();
    CFRelease(v20);
LABEL_254:
    CFRelease(v18);
LABEL_255:
    a1 = v221;
    v48 = v222;
    v27 = v223;
    CFRelease(v12);
LABEL_44:
    if (v27)
      goto LABEL_48;
    goto LABEL_45;
  }
LABEL_12:
  if (*(_BYTE *)(v6 + 8289) && !*(_BYTE *)(v6 + 8288))
  {
    v23 = (const void **)MEMORY[0x1E0C9AE50];
  }
  else
  {
    v23 = (const void **)MEMORY[0x1E0C9AE50];
    if (*(_DWORD *)(v6 + 7612))
      v23 = (const void **)MEMORY[0x1E0C9AE40];
  }
  CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E0D067C0], *v23);
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v25 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B378]);
  v26 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5636));
  v27 = v223;
  if (!v26)
    goto LABEL_270;
  v28 = v26;
  CFArrayAppendValue(v25, v26);
  CFRelease(v28);
  v29 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5640));
  if (!v29)
    goto LABEL_270;
  v30 = v29;
  CFArrayAppendValue(v25, v29);
  CFRelease(v30);
  v31 = CFNumberCreate(v24, kCFNumberFloat32Type, (const void *)(v6 + 5644));
  if (v31)
  {
    v32 = v31;
    CFArrayAppendValue(v25, v31);
    CFRelease(v32);
    CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E0D05EE8], v25);
    CMSetAttachment(ImageBuffer, key, theDict, 1u);
    Value = CFDictionaryGetValue(v223, (const void *)*MEMORY[0x1E0D06D00]);
    if (Value)
    {
      v34 = Value;
      if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0D05A38])
        && !CFEqual(v34, (CFTypeRef)*MEMORY[0x1E0D05A40])
        && !CFEqual(v34, (CFTypeRef)*MEMORY[0x1E0D05A50]))
      {
        v35 = portIndexFromPortType(v34, (int *)&rect);
        if ((_DWORD)v35)
        {
          v47 = v35;
          fig_log_get_emitter();
          FigDebugAssert3();
          goto LABEL_40;
        }
        if (*(_BYTE *)(v6 + 18120))
        {
          x_low = LODWORD(rect.origin.x);
          if (*(_BYTE *)(v6 + 56 * LODWORD(rect.origin.x) + 17728) || *(_BYTE *)(v6 + LODWORD(rect.origin.x) + 18104))
          {
            v219 = (_BYTE *)(v6 + 56 * LODWORD(rect.origin.x) + 17728);
            v37 = objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](v223, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
            if (v37 <= 1)
              v38 = 1;
            else
              v38 = v37;
            v39 = *(_DWORD *)(v6 + 18112) * v38;
            v40 = (*(_DWORD *)(v6 + 18116) * v38);
            *(_DWORD *)time = 1065353216;
            Width = CVPixelBufferGetWidth(ImageBuffer);
            Height = CVPixelBufferGetHeight(ImageBuffer);
            v43 = Width;
            v27 = v223;
            FigMotionComputeLensPositionScalingFactor(v223, v43, Height, v39, v40, (float *)time);
            LODWORD(valuePtr.origin.x) = 0;
            if (!*(_BYTE *)(v6 + LODWORD(rect.origin.x) + 18104))
              goto LABEL_379;
            FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
            v45 = *(float *)&valuePtr.origin.x;
            if (FloatIfPresent)
            {
              v45 = *(float *)&valuePtr.origin.x * (float)(*(float *)(v6 + 56 * x_low + 17756) * *(float *)time);
              *(float *)&valuePtr.origin.x = v45;
            }
            if (v45 == 0.0)
            {
LABEL_379:
              if (*v219)
                FigMotionCalculateAdjustedLensPosition(v223, v6 + 56 * x_low + 17712, (float *)&valuePtr, *(float *)(v6 + 5644), *(float *)time);
            }
            v46 = CFNumberCreate(v24, kCFNumberFloat32Type, &valuePtr);
            CFDictionaryAddValue(theDict, (const void *)*MEMORY[0x1E0D06CF8], v46);
            CFRelease(v46);
          }
        }
      }
    }
    v47 = 0;
  }
  else
  {
LABEL_270:
    fig_log_get_emitter();
    FigDebugAssert3();
    v47 = FigSignalErrorAt();
  }
LABEL_40:
  CFRelease(v12);
  v48 = v222;
  if (!v25)
  {
    a1 = v221;
    goto LABEL_44;
  }
  CFRelease(v25);
  if (!v27)
  {
    a1 = v221;
LABEL_45:
    v49 = theDict;
LABEL_46:
    CFRelease(v49);
    goto LABEL_48;
  }
  a1 = v221;
LABEL_48:
  if (*(_DWORD *)(v48 + 652))
  {
    theDicta = v47;
    v50 = CMBaseObjectGetDerivedStorage();
    v51 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
    v52 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0D067D0]);
    v53 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0D067C8]);
    v54 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0D06AB8]);
    v236 = 0;
    v237 = 0;
    v244 = 0u;
    v245 = 0u;
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    memset(&rect, 0, sizeof(rect));
    v55 = *(_DWORD *)(v50 + 40);
    v235 = 0;
    FigCFDictionaryGetInt32IfPresent();
    if (!CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0D06A98]))
      goto LABEL_147;
    v57 = ((v55 - 1) & 0xFFFFFFFA) == 0 || *(_BYTE *)(v50 + 7585) != 0;
    getFocusPeakSums(v51, (char *)&rect);
    v235 = -1;
    v58 = (const __CFNumber *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0D06970]);
    if (v58)
      CFNumberGetValue(v58, kCFNumberIntType, &v235);
    v59 = *(void **)(v50 + 48);
    if (v59)
    {
      CMSampleBufferGetPresentationTimeStamp((CMTime *)time, target);
      CMTimeGetSeconds((CMTime *)time);
      FigCoreMotionGetVector(v59, (const char *)&v237, (uint64_t)&v236 + 4, (uint64_t)&v236);
    }
    if (!v52 || !v53)
      goto LABEL_147;
    v234 = 0;
    v233 = 0;
    CFNumberGetValue(v52, kCFNumberIntType, (char *)&v233 + 4);
    CFNumberGetValue(v53, kCFNumberIntType, &v233);
    if (v54)
      CFNumberGetValue(v54, kCFNumberSInt32Type, &v234);
    if (SHIDWORD(v237) >= 1)
      *(_DWORD *)(v50 + 7592) = HIDWORD(v237);
    if (*(int *)(v50 + 7656) <= 0 && !*(_BYTE *)(v50 + 81)
      || HIDWORD(v233) == 2
      || *(_BYTE *)(v50 + 7586) && *(_DWORD *)(v50 + 7588) != *(_DWORD *)(v50 + 7592))
    {
LABEL_80:
      v67 = HIDWORD(v233);
      if (HIDWORD(v233) != *(_DWORD *)(v50 + 7660))
      {
        v68 = vdupq_n_s32(v234);
        if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v68, (int32x4_t)xmmword_1A32B1440), (int16x8_t)vceqq_s32(v68, (int32x4_t)xmmword_1A32B1450)))) & 1) == 0&& !*(_DWORD *)(v50 + 7656)&& HIDWORD(v233) == 2&& v234 != 12)
        {
          sendFocusStartNotification(a1, 0);
          v67 = HIDWORD(v233);
        }
        *(_DWORD *)(v50 + 7660) = v67;
      }
      if (v67 == 4)
      {
        if (*(_BYTE *)(v50 + 8288))
        {
          HIDWORD(v232) = 0;
          *(_BYTE *)(v50 + 8288) = 0;
          v69 = *(unsigned int *)(v50 + 9016);
          v70 = 1.0;
          if ((int)v69 >= 2)
          {
            v71 = 0;
            v72 = (float *)(v50 + 8296);
            v73 = 1;
            do
            {
              v74 = *(float *)(v50 + 8292 + 4 * v71);
              v75 = *(float *)(v50 + 8532 + 4 * v71);
              v76 = *(float *)(v50 + 8772 + 4 * v71);
              v77 = sqrtf((float)((float)(v75 * v75) + (float)(v74 * v74)) + (float)(v76 * v76));
              ++v71;
              if (v77 > 0.0 && v71 < v69)
              {
                v78 = 1.0 / v77;
                v79 = v74 * v78;
                v80 = v75 * v78;
                v81 = v76 * v78;
                v82 = v72;
                v83 = *(unsigned int *)(v50 + 9016);
                do
                {
                  v84 = *v82;
                  v85 = v82[60];
                  v86 = v82[120];
                  v87 = sqrtf((float)((float)(v85 * v85) + (float)(v84 * v84)) + (float)(v86 * v86));
                  if (v87 > 0.0)
                  {
                    v88 = (float)((float)((float)(v80 * v85) + (float)(v79 * v84)) + (float)(v81 * v86)) / v87;
                    if (v88 < v70)
                      v70 = v88;
                  }
                  --v83;
                  ++v82;
                }
                while (v73 != v83);
              }
              ++v73;
              ++v72;
            }
            while (v71 != (_DWORD)v69 - 1);
          }
          *(float *)(v50 + 9012) = acosf(v70);
          if (v57)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
          }
          else
          {
            v94 = objc_msgSend(*(id *)(v50 + 8), "copyProperty:error:", *MEMORY[0x1E0D07510], (char *)&v232 + 4);
            v91 = (const __CFDictionary *)v94;
            v89 = HIDWORD(v232);
            v90 = v94 != 0;
            if (HIDWORD(v232) && v94)
              FigImageControl_Focus_cold_1();
          }
          v95 = *(const void **)(v50 + 8280);
          if (v95)
          {
            CFRelease(v95);
            *(_QWORD *)(v50 + 8280) = 0;
            v89 = HIDWORD(v232);
          }
          valuePtr.origin.x = 7.74860419e-304;
          valuePtr.origin.y = 7.74860419e-304;
          if (v89)
            v96 = 0;
          else
            v96 = v90;
          if (v96)
          {
            LODWORD(v232) = 0;
            v230 = 0;
            *(_QWORD *)(v50 + 8280) = v91;
            v97 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E0D05AE8]);
            if (v97)
              CFNumberGetValue(v97, kCFNumberIntType, &v232);
            v98 = (const __CFNumber *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E0D05AF8]);
            if (v98)
              CFNumberGetValue(v98, kCFNumberIntType, &v230);
            v99 = (const __CFArray *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E0D05AF0]);
            if (!v99)
              goto LABEL_135;
            v100 = v230;
            if (v230 < 1)
              goto LABEL_135;
            v101 = v99;
            v102 = 0;
            v103 = 0;
            v104 = v232;
            do
            {
              v231.value = 0;
              if (v104 < 1)
              {
                v106 = 0;
                v107 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                v105 = 0;
                v106 = 0;
                v107 = 0x7FFFFFFFFFFFFFFFLL;
                do
                {
                  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v101, v105 + (int)v102 * v104);
                  if (ValueAtIndex)
                  {
                    CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &v231);
                    if (v231.value < v107)
                      v107 = v231.value;
                    if (v231.value > v106)
                      v106 = v231.value;
                  }
                  v104 = v232;
                  ++v105;
                }
                while ((int)v105 < (int)v232);
                v100 = v230;
              }
              *((_BYTE *)&valuePtr.origin.x + v102) = 100 * (v106 - v107) <= 20 * v106;
              if (100 * (v106 - v107) > 20 * v106)
                ++v103;
              ++v102;
            }
            while (v102 < v100);
            a1 = v221;
            v48 = v222;
            if (!v103)
            {
LABEL_135:
              valuePtr.origin.x = 0.0;
              valuePtr.origin.y = 0.0;
            }
          }
          for (i = 0; i != 16; ++i)
          {
            v110 = *((_QWORD *)&rect.origin.x + i);
            v111 = v50 + 8 * i;
            *(_QWORD *)(v111 + 7704) = (uint64_t)(float)((float)v110 * 0.85);
            *(_QWORD *)(v111 + 7832) = (uint64_t)(float)((float)v110 * 1.4);
            if (v110 < 1)
            {
              v115 = 0;
            }
            else if (v57)
            {
              v112 = 0;
              v113 = vdupq_n_s64(v110);
              v114 = 0uLL;
              do
              {
                v114 = vsubq_s32(v114, vuzp1q_s32((int32x4_t)vcgtq_s64(*(int64x2_t *)((char *)&rect.origin + v112), v113), (int32x4_t)vcgtq_s64(*(int64x2_t *)((char *)&rect.size + v112), v113)));
                v112 += 32;
              }
              while (v112 != 128);
              v115 = 16 - vaddvq_s32(v114);
            }
            else
            {
              v115 = *((_BYTE *)&valuePtr.origin.x + i) == 0;
            }
            *(_DWORD *)(v50 + 4 * i + 7960) = v115;
          }
          if (*(float *)(v50 + 9012) > 0.044)
          {
            memset_pattern16((void *)(v50 + 7704), &unk_1A32B1460, 0x80uLL);
            *(_OWORD *)(v50 + 7928) = 0u;
            *(_OWORD *)(v50 + 7944) = 0u;
            *(_OWORD *)(v50 + 7896) = 0u;
            *(_OWORD *)(v50 + 7912) = 0u;
            *(_OWORD *)(v50 + 7864) = 0u;
            *(_OWORD *)(v50 + 7880) = 0u;
            *(_OWORD *)(v50 + 7832) = 0u;
            *(_OWORD *)(v50 + 7848) = 0u;
            memset_pattern16((void *)(v50 + 7960), &unk_1A32B1480, 0x40uLL);
          }
        }
        goto LABEL_147;
      }
      if (*(_BYTE *)(v50 + 8288))
      {
        v92 = *(_DWORD *)(v50 + 9016);
        if (v92 > 59)
          goto LABEL_147;
      }
      else
      {
        v92 = 0;
        *(_BYTE *)(v50 + 8288) = 1;
      }
      v93 = (_DWORD *)(v50 + 4 * v92);
      *(_DWORD *)(v50 + 9016) = v92 + 1;
      v93[2073] = v237;
      v93[2133] = HIDWORD(v236);
      v93[2193] = v236;
LABEL_147:
      v47 = theDicta;
      goto LABEL_148;
    }
    v60 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v61 = v60;
    v62 = *(_DWORD *)(v50 + 84);
    if (v62 == 1)
    {
      v63 = kFigAutofocusSampleBufferProcessorFocusMode_FixedFocusPoints;
    }
    else
    {
      if (v62 != 5)
      {
LABEL_76:
        *(_BYTE *)(v50 + 81) = 0;
        v64 = *(_DWORD *)(v50 + 7656);
        v65 = __OFSUB__(v64, 1);
        v66 = v64 - 1;
        if (v66 < 0 == v65)
        {
          *(_DWORD *)(v50 + 7656) = v66;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        if (v61)
          CFRelease(v61);
        goto LABEL_80;
      }
      v63 = kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint;
    }
    CFDictionaryAddValue(v60, CFSTR("FocusMode"), *v63);
    goto LABEL_76;
  }
LABEL_148:
  switch(v220)
  {
    case 1:
      v116 = CMBaseObjectGetDerivedStorage();
      v117 = (_BYTE *)(v116 + 7580);
      v118 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
      v236 = 0;
      v237 = 0;
      v235 = 0;
      *(_OWORD *)theDictb = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
      *(_OWORD *)keya = *MEMORY[0x1E0C9D648];
      valuePtr.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      valuePtr.size = *(CGSize *)theDictb;
      v234 = 0;
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      v119 = 0;
      if (__PAIR64__(v237, HIDWORD(v236)) && (_DWORD)v236)
        v119 = *(_DWORD *)(v116 + 7692) + 1;
      *(_DWORD *)(v116 + 7692) = v119;
      v120 = (const __CFDictionary *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E0D067B8]);
      if (v120 && *(_BYTE *)(v116 + 560))
      {
        CGRectMakeWithDictionaryRepresentation(v120, &valuePtr);
        *(_DWORD *)(v116 + 7668) = (int)CGRectGetMinX(valuePtr);
        *(_DWORD *)(v116 + 7672) = (int)CGRectGetMinY(valuePtr);
        *(_DWORD *)(v116 + 7676) = (int)CGRectGetWidth(valuePtr);
        *(_DWORD *)(v116 + 7680) = (int)CGRectGetHeight(valuePtr);
        *(_BYTE *)(v116 + 7664) = CGRectGetHeight(valuePtr) > 0.0;
        *(_DWORD *)(v116 + 556) = 0;
        v121 = *(const __CFArray **)(v116 + 9024);
        if (v121)
        {
          Count = CFArrayGetCount(v121);
          if (Count >= 1)
          {
            v123 = 0;
            v124 = (const void *)*MEMORY[0x1E0D084A0];
            v125 = Count;
            v126 = 1000000.0;
            do
            {
              v127 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v116 + 9024), v123);
              if (v127)
              {
                rect.origin = *(CGPoint *)keya;
                rect.size = *(CGSize *)theDictb;
                v128 = (const __CFDictionary *)CFDictionaryGetValue(v127, v124);
                if (v128)
                  CGRectMakeWithDictionaryRepresentation(v128, &rect);
                MidX = CGRectGetMidX(valuePtr);
                v130 = MidX - CGRectGetMidX(rect);
                v131 = fabsf(v130);
                MidY = CGRectGetMidY(valuePtr);
                v133 = MidY - CGRectGetMidY(rect);
                v134 = v131 + fabsf(v133);
                if (v134 < v126)
                {
                  *(_DWORD *)(v116 + 556) = v123;
                  v126 = v134;
                }
              }
              ++v123;
            }
            while (v125 != v123);
          }
        }
      }
      else
      {
        *(_BYTE *)(v116 + 7664) = 0;
      }
      if (!*v117)
      {
        if (*(_DWORD *)(v116 + 652))
        {
          if (HIDWORD(v237) != 4 || *(_BYTE *)(v116 + 81))
            return 0;
          setupFocusWindowMatrix(a1, *(_DWORD *)(v116 + 7620), *(_DWORD *)(v116 + 7624), *(_DWORD *)(v116 + 7628), *(_DWORD *)(v116 + 7632), *(unsigned __int8 *)(v116 + 560), 5, 3, 1);
          if (*(_BYTE *)(v116 + 7586))
          {
            if (*(_BYTE *)(v116 + 7585))
            {
              LODWORD(rect.origin.x) = 0;
              *(_DWORD *)time = 0;
              LODWORD(v231.value) = 0;
              HIDWORD(v233) = 0;
              getDefaultFocusScanRange(a1, &rect, (int *)time, &v231, (int *)&v233 + 1);
              setupSearchPositions(a1, SLODWORD(rect.origin.x), *(int *)time, v231.value, SHIDWORD(v233), 1, 1, 1.0);
              v153 = (void **)MEMORY[0x1E0D078F8];
              if (!*(_BYTE *)(v116 + 561))
                v153 = (void **)MEMORY[0x1E0D078F0];
              v47 = doFocusNow(a1, 0, *v153, 1);
              *(_BYTE *)(v116 + 7587) = 0;
            }
            else
            {
              v47 = 0;
              *(_BYTE *)(v116 + 7587) = 1;
            }
            goto LABEL_217;
          }
          if (*(_BYTE *)(v116 + 7585))
          {
            captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07448], 0);
            v47 = 0;
            *(_BYTE *)(v116 + 8289) = 0;
            goto LABEL_217;
          }
        }
        else
        {
          setupFocusWindows((float)*(int *)(v116 + 7620) * 0.001, (float)*(int *)(v116 + 7624) * 0.001, (float)*(int *)(v116 + 7628) * 0.001, (float)*(int *)(v116 + 7632) * 0.001, a1, *(unsigned __int8 *)(v116 + 560));
        }
        v47 = 0;
LABEL_217:
        *(float32x4_t *)(v116 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v116 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
        *(_BYTE *)(v116 + 7664) = 0;
        *v117 = 1;
        *(_QWORD *)(v116 + 6232) = 1;
        *(_QWORD *)(v116 + 6248) = 0;
        *(_DWORD *)(v116 + 7608) = 0;
        return v47;
      }
      if (*(_BYTE *)(v116 + 7581))
      {
        setupFocusWindowMatrix(a1, *(_DWORD *)(v116 + 7620), *(_DWORD *)(v116 + 7624), *(_DWORD *)(v116 + 7628), *(_DWORD *)(v116 + 7632), *(unsigned __int8 *)(v116 + 560), 5, 3, 1);
        v47 = 0;
        *(_BYTE *)(v116 + 7581) = 0;
        return v47;
      }
      if (HIDWORD(v237) == 4)
      {
        v154 = *(_DWORD *)(v116 + 7684);
        v65 = __OFSUB__(v154, 1);
        v155 = v154 - 1;
        v156 = target;
        if (v155 < 0 == v65)
        {
          v47 = 0;
          *(_DWORD *)(v116 + 7684) = v155;
          return v47;
        }
      }
      else
      {
        *(_DWORD *)(v116 + 7684) = 0;
        v156 = target;
      }
      if (*(_BYTE *)(v116 + 81) || *(_BYTE *)(v116 + 8288) || !*(_BYTE *)(v116 + 44))
        return 0;
      v157 = (const __CFNumber *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E0D06970]);
      if (v157)
        CFNumberGetValue(v157, kCFNumberIntType, &v234);
      if (v235)
      {
        v47 = 0;
        *(_DWORD *)(v116 + 7608) = 0;
LABEL_213:
        *(_DWORD *)(v116 + 7688) = 0;
        return v47;
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v116 + 7576));
      v173 = *(_DWORD *)(v116 + 7608);
      v65 = __OFSUB__(v173, 1);
      v174 = v173 - 1;
      if (v174 < 0 == v65)
      {
        *(_DWORD *)(v116 + 7608) = v174;
        os_unfair_lock_unlock((os_unfair_lock_t)(v116 + 7576));
        return 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v116 + 7576));
      if (!*(_BYTE *)(v116 + 7582))
      {
        if (*(_DWORD *)(v116 + 40))
          v175 = *(_DWORD *)(v116 + 692) + 1;
        else
          v175 = 1;
        LODWORD(rect.origin.x) = v175;
        v176 = *(_DWORD *)(v116 + 5500);
        v177 = 20;
        v178 = 3.4028e38;
        LOBYTE(v179) = v176;
        do
        {
          v179 = ((_BYTE)v179 - 1) & 0x1F;
          v180 = v116 + 4 * v179;
          if (*(float *)(v180 + 5508) < v178)
            v178 = *(float *)(v180 + 5508);
          --v177;
        }
        while (v177);
        if (v178 <= 0.0004)
        {
          v47 = 0;
LABEL_289:
          v181 = 0.0;
          v182 = 3;
          do
          {
            v176 = ((_BYTE)v176 - 1) & 0x1F;
            v183 = v116 + 4 * v176;
            if (*(float *)(v183 + 5508) > v181)
              v181 = *(float *)(v183 + 5508);
            --v182;
          }
          while (v182);
          if (v181 > 0.0004)
            return v47;
          goto LABEL_294;
        }
        if (*(_DWORD *)(v116 + 652))
        {
          if (*(uint64_t *)(v116 + 8 * v179 + 7704) >= 2)
          {
            memset_pattern16((void *)(v116 + 7704), &unk_1A32B1470, 0x80uLL);
            *(_OWORD *)(v116 + 7928) = 0u;
            *(_OWORD *)(v116 + 7944) = 0u;
            *(_OWORD *)(v116 + 7896) = 0u;
            *(_OWORD *)(v116 + 7912) = 0u;
            *(_OWORD *)(v116 + 7864) = 0u;
            *(_OWORD *)(v116 + 7880) = 0u;
            *(_OWORD *)(v116 + 7832) = 0u;
            *(_OWORD *)(v116 + 7848) = 0u;
            memset_pattern16((void *)(v116 + 7960), &unk_1A32B1480, 0x40uLL);
          }
        }
        else if (v234 != v175)
        {
          v217 = CFNumberCreate(0, kCFNumberIntType, &rect);
          v47 = doManualFocusNow(v221, (uint64_t)v217);
          CFRelease(v217);
          *(_QWORD *)(v116 + 6232) = 1;
          *(_QWORD *)(v116 + 6248) = 1;
          v176 = *(_DWORD *)(v116 + 5500);
          goto LABEL_288;
        }
        v47 = 0;
LABEL_288:
        v156 = target;
        goto LABEL_289;
      }
      v47 = 0;
LABEL_294:
      if (!*(_BYTE *)(v116 + 573) || !*(_BYTE *)(v116 + 7587))
      {
        v184 = *(_DWORD *)(v116 + 628);
        if (v184 < 1)
        {
          if (!__PAIR64__(v237, HIDWORD(v236)))
            return v47;
        }
        else if (*(_DWORD *)(v116 + 7692) < v184)
        {
          return v47;
        }
      }
      if (!*(_BYTE *)(v116 + 560)
        || CGRectGetHeight(valuePtr) <= 0.0
        || (v185 = *(_DWORD *)(v116 + 6284), CGRectGetHeight(valuePtr) * 0.800000012 >= (double)v185)
        || CGRectGetHeight(valuePtr) <= (float)((float)v185 * 0.8))
      {
        v186 = currentGain(v156);
        if (*(_DWORD *)(v116 + 652))
        {
          v187 = (const __CFArray *)CFDictionaryGetValue(v118, (const void *)*MEMORY[0x1E0D06A98]);
          if (v187)
          {
            v188 = v47;
            v189 = CFArrayGetCount(v187);
            v244 = 0u;
            v245 = 0u;
            v242 = 0u;
            v243 = 0u;
            v240 = 0u;
            v241 = 0u;
            memset(&rect, 0, sizeof(rect));
            getFocusPeakSums(v118, (char *)&rect);
            v190 = 0;
            memset(time, 0, sizeof(time));
            do
            {
              *(_QWORD *)&time[v190] = CFNumberCreate(0, kCFNumberSInt64Type, (char *)&rect + v190);
              v190 += 8;
            }
            while (v190 != 128);
            v191 = CFArrayCreate(0, (const void **)time, 16, MEMORY[0x1E0C9B378]);
            for (j = 0; j != 128; j += 8)
              CFRelease(*(CFTypeRef *)&time[j]);
            if (v189 < 1)
            {
              v195 = 0;
              v194 = 0;
            }
            else
            {
              v193 = 0;
              v194 = 0;
              v195 = 0;
              if (v189 >= 16)
                v196 = 16;
              else
                v196 = v189;
              v197 = v116 + 7960;
              do
              {
                v198 = *(_DWORD *)(v197 + 4 * v193);
                v199 = *((_QWORD *)&rect.origin.x + v193);
                v200 = v197 + 8 * v193;
                if (v199 < *(_QWORD *)(v200 - 256) || v199 > *(_QWORD *)(v200 - 128))
                  v194 += v198;
                v195 += v198;
                ++v193;
              }
              while (v196 != v193);
            }
            if (v191)
            {
              v204 = *(int *)(v116 + 7696);
              v205 = (CFTypeRef *)(v116 + 8 * v204 + 8024);
              if (*v205)
                CFRelease(*v205);
              *v205 = v191;
              if ((int)v204 <= 30)
                v206 = v204 + 1;
              else
                v206 = 0;
              *(_DWORD *)(v116 + 7696) = v206;
            }
            v207 = v194 > (int)(float)((float)v195 * 0.666) || v195 == 0;
            if (v207 || *(_BYTE *)(v116 + 7587))
            {
              v208 = *(_DWORD *)(v116 + 7688);
              *(_DWORD *)(v116 + 7688) = v208 + 1;
              if (v208 >= 4)
              {
                v232 = 0;
                v233 = 0;
                getDefaultFocusScanRange(v221, (_DWORD *)&v233 + 1, (int *)&v233, (_DWORD *)&v232 + 1, (int *)&v232);
                setupSearchPositions(v221, SHIDWORD(v233), v233, SHIDWORD(v232), v232, 1, 1, v186);
                if (*(_BYTE *)(v116 + 7587))
                {
                  v209 = (void **)MEMORY[0x1E0D078F8];
                  if (!*(_BYTE *)(v116 + 561))
                    v209 = (void **)MEMORY[0x1E0D078F0];
                  v188 = doFocusNow(v221, 0, *v209, 1);
                  *(_BYTE *)(v116 + 7587) = 0;
                }
                else if (*(_BYTE *)(v116 + 7586) || *(_BYTE *)(v116 + 7585))
                {
                  v188 = captureStreamSetPropertyOnActivityScheduler(v221, (const void *)*MEMORY[0x1E0D073A0], 0);
                  *(_DWORD *)(v116 + 6220) = 0;
                  *(_DWORD *)(v116 + 5496) = 0;
                }
                else if (*(_BYTE *)(v116 + 7583))
                {
                  if (*(int *)(v116 + 660) <= 1)
                    v218 = 1;
                  else
                    v218 = *(_DWORD *)(v116 + 660);
                  doPeakTrackingAutofocusNow(v221, v218);
                }
                else
                {
                  v188 = doAutofocusNow(v221);
                }
                CMSampleBufferGetPresentationTimeStamp(&v231, target);
                *(Float64 *)(v116 + 5688) = CMTimeGetSeconds(&v231);
                FigImageControl_CurrentFocusRect(v221, (_DWORD *)(v116 + 5704), (_DWORD *)(v116 + 5708), (_DWORD *)(v116 + 5712), (_DWORD *)(v116 + 5716));
                *(_QWORD *)(v116 + 7684) = 10;
                ++*(_DWORD *)(v116 + 9044);
              }
            }
            else
            {
              *(_DWORD *)(v116 + 7688) = 0;
            }
            return v188;
          }
        }
        else
        {
          v201 = *(int *)(v116 + 6264);
          if (v201 >= *(_QWORD *)(v116 + 6232) && v201 <= *(_QWORD *)(v116 + 6248))
            goto LABEL_213;
          v202 = *(_DWORD *)(v116 + 7688);
          *(_DWORD *)(v116 + 7688) = v202 + 1;
          if (v202 >= 2)
          {
            *(_DWORD *)time = 0;
            LODWORD(v231.value) = 0;
            v233 = 0;
            if (*(_BYTE *)(v116 + 560) && CGRectGetHeight(valuePtr) > 0.0)
            {
              v203 = 0;
              *(_DWORD *)(v116 + 6284) = (int)CGRectGetHeight(valuePtr);
            }
            else
            {
              v203 = 0;
              *(_DWORD *)(v116 + 6284) = 0;
              if (v234 >= 97)
              {
                v203 = v234 - 80;
                if (v201 < *(_QWORD *)(v116 + 6232))
                {
                  v210 = *(_DWORD *)(v116 + 6220);
                  if (v210 >= 2)
                  {
                    v211 = (v210 - 1);
                    v212 = (int *)(v116 + 5740);
                    v213 = (_QWORD *)(v116 + 5904);
                    do
                    {
                      v214 = *(v213 - 1);
                      if (v201 > v214 && *v213 >= v201)
                        v203 = *(v212 - 1) + (v201 - v214) * (*v212 - (uint64_t)*(v212 - 1)) / (*v213 - v214) - 20;
                      ++v212;
                      ++v213;
                      --v211;
                    }
                    while (v211);
                  }
                }
              }
            }
            getDefaultFocusScanRange(v221, time, (int *)&v231, (_DWORD *)&v233 + 1, (int *)&v233);
            if (*(_BYTE *)(v116 + 7582))
              v215 = HIDWORD(v233);
            else
              v215 = v203;
            setupSearchPositions(v221, *(int *)time, v231.value, v215, v233, 0, 1, v186);
            ++*(_DWORD *)(v116 + 9044);
            if (*(_BYTE *)(v116 + 7583))
            {
              if (*(int *)(v116 + 660) <= 1)
                v216 = 1;
              else
                v216 = *(_DWORD *)(v116 + 660);
              doPeakTrackingAutofocusNow(v221, v216);
            }
            else
            {
              v47 = doAutofocusNow(v221);
            }
            CMSampleBufferGetPresentationTimeStamp((CMTime *)&rect, target);
            *(Float64 *)(v116 + 5688) = CMTimeGetSeconds((CMTime *)&rect);
            FigImageControl_CurrentFocusRect(v221, (_DWORD *)(v116 + 5704), (_DWORD *)(v116 + 5708), (_DWORD *)(v116 + 5712), (_DWORD *)(v116 + 5716));
            *(_QWORD *)(v116 + 7684) = 10;
          }
        }
      }
      return v47;
    case 2:
      v135 = CMBaseObjectGetDerivedStorage();
      v136 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
      v137 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E0D067A0]);
      v138 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E0D06870]);
      v139 = (const __CFNumber *)CFDictionaryGetValue(v136, (const void *)*MEMORY[0x1E0D06788]);
      if (*(int *)(v135 + 636) >= 1)
        v140 = *(_DWORD *)(v135 + 636);
      else
        v140 = 12;
      v141 = 692;
      if (!*(_DWORD *)(v135 + 40))
        v141 = 688;
      if (*(_BYTE *)(v135 + 81))
        return 0;
      v148 = v139;
      v149 = *(_DWORD *)(v135 + v141);
      v150 = currentGain(target);
      v151 = *(_DWORD *)(v135 + 652);
      if (*(_BYTE *)(v135 + 626))
      {
        v152 = v151 != 0;
      }
      else if (v151)
      {
        v152 = *(_BYTE *)(v135 + 7583) == 0;
      }
      else
      {
        v152 = 0;
      }
      if (*(_BYTE *)(v135 + 7580))
      {
        if (*(_BYTE *)(v135 + 44))
        {
          v158 = *(_DWORD *)(v135 + 524);
          v65 = __OFSUB__(v158, 1);
          v159 = v158 - 1;
          if (v159 < 0 != v65)
          {
            if (!v137 || !v138)
              goto LABEL_380;
            LODWORD(rect.origin.x) = 0;
            *(_DWORD *)time = 0;
            LODWORD(valuePtr.origin.x) = 0;
            CFNumberGetValue(v137, kCFNumberIntType, &rect);
            CFNumberGetValue(v138, kCFNumberIntType, time);
            if (v148)
              CFNumberGetValue(v148, kCFNumberIntType, &valuePtr);
            if (LODWORD(valuePtr.origin.x) | LODWORD(rect.origin.x) | *(unsigned __int8 *)(v135 + 7472)
              && *(_DWORD *)time
              || (v168 = *(_DWORD *)(v135 + 528), v65 = __OFSUB__(v168, 1), v169 = v168 - 1, (v169 < 0) ^ v65))
            {
LABEL_380:
              if (*(_BYTE *)(v135 + 7586))
              {
                v47 = doFocusNow(a1, 1, (void *)*MEMORY[0x1E0D078F8], 1);
                v171 = target;
              }
              else
              {
                v171 = target;
                if (*(_BYTE *)(v135 + 7583))
                {
                  if (*(int *)(v135 + 660) <= 1)
                    v172 = 1;
                  else
                    v172 = *(_DWORD *)(v135 + 660);
                  doPeakTrackingAutofocusNow(a1, v172);
                  v47 = 0;
                }
                else
                {
                  v47 = doAutofocusNow(a1);
                }
              }
              CMSampleBufferGetPresentationTimeStamp((CMTime *)&rect, v171);
              *(Float64 *)(v135 + 5688) = CMTimeGetSeconds((CMTime *)&rect);
              FigImageControl_CurrentFocusRect(a1, (_DWORD *)(v135 + 5704), (_DWORD *)(v135 + 5708), (_DWORD *)(v135 + 5712), (_DWORD *)(v135 + 5716));
              *(_DWORD *)(v135 + 6284) = 0;
              if (*(_DWORD *)(v135 + 7612) == 2)
              {
                *(_DWORD *)(v135 + 7612) = 3;
                *(_BYTE *)(v135 + 8289) = 1;
              }
            }
            else
            {
              v47 = 0;
              *(_DWORD *)(v135 + 528) = v169;
            }
          }
          else
          {
            v47 = 0;
            *(_DWORD *)(v135 + 524) = v159;
          }
        }
        else
        {
          v161 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&kFigAutofocusSampleBufferProcessorProperty_FocusMode, (const void **)kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v161)
            CFRelease(v161);
          return 0;
        }
      }
      else
      {
        if (*(_BYTE *)(v135 + 515))
          captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07618], 0);
        v160 = *(_DWORD *)(v135 + 7620);
        if (v152)
          setupFocusWindowMatrix(a1, v160, *(_DWORD *)(v135 + 7624), *(_DWORD *)(v135 + 7628), *(_DWORD *)(v135 + 7632), 0, 4, 4, 1);
        else
          setupFocusWindows((float)v160 * 0.001, (float)*(int *)(v135 + 7624) * 0.001, (float)*(int *)(v135 + 7628) * 0.001, (float)*(int *)(v135 + 7632) * 0.001, a1, 0);
        *(float32x4_t *)(v135 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v135 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
        *(_BYTE *)(v135 + 7664) = 0;
        if (*(_BYTE *)(v135 + 7582))
        {
          v162 = *(_DWORD *)(v135 + 7640);
          v163 = *(_DWORD *)(v135 + 7636);
          v164 = 2 * v140 * (v162 - v163) / 255;
          if (v164 >= v140)
            v164 = v140;
          if (v164 <= 5)
            v165 = 5;
          else
            v165 = v164;
          v166 = a1;
          v167 = *(_DWORD *)(v135 + 7636);
        }
        else
        {
          v166 = a1;
          v163 = v149;
          v162 = 255;
          v167 = v149;
          v165 = v140;
        }
        v47 = setupSearchPositions(v166, v163, v162, v167, v165, v152, 1, v150);
        *(_QWORD *)(v135 + 524) = 0x1400000004;
        *(_BYTE *)(v135 + 7580) = 1;
      }
      return v47;
    case 3:
      if (!*(_BYTE *)(v48 + 7580))
      {
        doLockFocusNow(a1);
        *(_BYTE *)(v48 + 7580) = 1;
      }
      return v47;
    case 4:
      if (*(_BYTE *)(v48 + 7580) || *(_BYTE *)(v48 + 81))
        return v47;
      doLockFocusNow(a1);
      v142 = *(_DWORD *)(v48 + 7648);
      LODWORD(valuePtr.origin.x) = v142;
      if (v142 == -1)
      {
        v142 = *(_DWORD *)(v48 + 7644);
        LODWORD(valuePtr.origin.x) = v142;
      }
      if (v142 == 0x7FFFFFFF)
      {
        v143 = (const __CFDictionary *)CMGetAttachment(target, key, 0);
        if (v143)
        {
          v144 = (const __CFNumber *)CFDictionaryGetValue(v143, (const void *)*MEMORY[0x1E0D06970]);
          if (v144)
            CFNumberGetValue(v144, kCFNumberSInt32Type, &valuePtr);
        }
      }
      if (*(_BYTE *)(v48 + 516))
      {
        v145 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        if (*(_DWORD *)(v48 + 7652))
        {
          v146 = *MEMORY[0x1E0D05AD0];
          rect.origin.x = *(CGFloat *)MEMORY[0x1E0D06658];
          rect.origin.y = v146;
          *(_QWORD *)time = CFNumberCreate(v145, kCFNumberSInt32Type, &valuePtr);
          *(_QWORD *)&time[8] = CFNumberCreate(v145, kCFNumberSInt32Type, (const void *)(v48 + 7652));
          v147 = CFDictionaryCreate(v145, (const void **)&rect, (const void **)time, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(*(CFTypeRef *)time);
          CFRelease(*(CFTypeRef *)&time[8]);
          goto LABEL_220;
        }
      }
      else
      {
        v145 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      }
      v147 = CFNumberCreate(v145, kCFNumberSInt32Type, &valuePtr);
LABEL_220:
      v47 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07668], v147);
      CFRelease(v147);
      *(_BYTE *)(v48 + 7580) = 1;
      return v47;
    default:
      return v47;
  }
}

CFIndex getFocusPeakSums(const __CFDictionary *a1, char *a2)
{
  CFIndex result;
  const __CFArray *v4;
  CFIndex v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;

  result = (CFIndex)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06A98]);
  if (result)
  {
    v4 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if ((int)result >= 1)
    {
      v5 = 0;
      if ((int)result >= 16)
        v6 = 16;
      else
        v6 = result;
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v4, v5);
        result = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, a2);
        ++v5;
        a2 += 8;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void setupFocusWindowMatrix(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9)
{
  uint64_t DerivedStorage;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const __CFAllocator *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  CFIndex v31;
  CFNumberRef v32;
  _DWORD *v33;
  CFDictionaryRef v34;
  int v35;
  const void *v36;
  CFArrayRef v37;
  int v38;
  const void *v39;
  const void *v40;
  const void *v41;
  unsigned int *v42;
  unsigned int v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int valuePtr;
  int v61;
  void *values[2];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void *keys[2];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = (_BYTE *)(DerivedStorage + 7585);
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)v70 = 0u;
  v71 = 0u;
  if (*(_BYTE *)(DerivedStorage + 9053))
    return;
  v19 = DerivedStorage;
  v55 = a2;
  v56 = a3;
  v20 = *(_DWORD *)(DerivedStorage + 9040);
  *(_OWORD *)(DerivedStorage + 468) = 0uLL;
  *(_OWORD *)(DerivedStorage + 484) = 0uLL;
  *(_OWORD *)(DerivedStorage + 436) = 0uLL;
  *(_OWORD *)(DerivedStorage + 452) = 0uLL;
  v21 = (a8 * a7);
  if ((int)v21 >= 17)
    setupFocusWindowMatrix_cold_1();
  v48 = a6;
  valuePtr = 0;
  v61 = 0;
  *(_DWORD *)(DerivedStorage + 176) = v21;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((int)v21 <= 0)
  {
    v37 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)v70, (a8 * a7), MEMORY[0x1E0C9B378]);
    v59 = 0;
    goto LABEL_33;
  }
  v44 = (_BYTE *)(DerivedStorage + 7585);
  v57 = DerivedStorage;
  v23 = 0;
  v54 = 1000 - (__int16)v20;
  v53 = (void *)*MEMORY[0x1E0D05B88];
  v52 = (void *)*MEMORY[0x1E0D05BB8];
  v51 = *MEMORY[0x1E0D05BC8];
  v50 = *MEMORY[0x1E0D05B90];
  v49 = *MEMORY[0x1E0D05BC0];
  v47 = *MEMORY[0x1E0D05AE0];
  v46 = *MEMORY[0x1E0D05B80];
  v45 = *MEMORY[0x1E0C9AE50];
  do
  {
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    *(_OWORD *)keys = 0u;
    v65 = 0;
    v63 = 0u;
    v64 = 0u;
    *(_OWORD *)values = 0u;
    v59 = 1;
    v24 = (__int16)((int)v23 % a7) * a4 / a7 + v55;
    v25 = (__int16)((__int16)((int)v23 % a7) * a4 / a7 + v55);
    HIWORD(valuePtr) = (__int16)((int)v23 % a7) * a4 / a7 + v55;
    v26 = (__int16)((int)v23 / a7) * a5 / a8 + v56;
    LOWORD(valuePtr) = (__int16)((int)v23 / a7) * a5 / a8 + v56;
    v27 = (a4 + v25 * a4) / a7 - v25 * a4 / a7;
    HIWORD(v61) = (a4 + v25 * a4) / a7 - v25 * a4 / a7;
    v28 = valuePtr;
    v29 = (a5 + (__int16)valuePtr * a5) / a8;
    v30 = v29 - (__int16)valuePtr * a5 / a8;
    LOWORD(v61) = v29 - (__int16)valuePtr * a5 / a8;
    if ((v24 & 0x8000) != 0)
    {
      LOWORD(v25) = 0;
      LOWORD(v27) = v27 + v24;
      HIWORD(v61) = v27;
      HIWORD(valuePtr) = 0;
      if ((v26 & 0x8000) == 0)
        goto LABEL_7;
    }
    else if ((v26 & 0x8000) == 0)
    {
      goto LABEL_7;
    }
    v28 = 0;
    LOWORD(v30) = v30 + v26;
    LOWORD(v61) = v30;
    LOWORD(valuePtr) = 0;
LABEL_7:
    if ((__int16)v27 + (unsigned __int16)v25 >= 1001)
    {
      LOWORD(v27) = 1000 - v25;
      HIWORD(v61) = 1000 - v25;
    }
    if ((__int16)v30 + v28 >= 1001)
    {
      LOWORD(v30) = 1000 - v28;
      LOWORD(v61) = 1000 - v28;
    }
    if (v20 > (__int16)v27)
    {
      HIWORD(v61) = v20;
      if (v54 < (unsigned __int16)v25)
        HIWORD(valuePtr) = 1000 - v20;
    }
    if (v20 > (__int16)v30)
    {
      LOWORD(v61) = v20;
      if (v54 < v28)
        LOWORD(valuePtr) = 1000 - v20;
    }
    keys[0] = v53;
    values[0] = CFNumberCreate(v22, kCFNumberSInt16Type, (char *)&valuePtr + 2);
    keys[1] = v52;
    values[1] = CFNumberCreate(v22, kCFNumberSInt16Type, &valuePtr);
    *(_QWORD *)&v67 = v51;
    *(_QWORD *)&v63 = CFNumberCreate(v22, kCFNumberSInt16Type, (char *)&v61 + 2);
    *((_QWORD *)&v67 + 1) = v50;
    *((_QWORD *)&v63 + 1) = CFNumberCreate(v22, kCFNumberSInt16Type, &v61);
    *(_QWORD *)&v68 = v49;
    *(_QWORD *)&v64 = CFNumberCreate(v22, kCFNumberIntType, &v59);
    v31 = 5;
    if (!v23 && v48)
    {
      v58 = 4096;
      *((_QWORD *)&v68 + 1) = v47;
      v32 = CFNumberCreate(v22, kCFNumberIntType, &v58);
      v69 = v46;
      *((_QWORD *)&v64 + 1) = v32;
      v65 = v45;
      v31 = 7;
    }
    v33 = (_DWORD *)(v57 + 4 * v23);
    v33[45] = SHIWORD(valuePtr);
    v33[61] = (__int16)valuePtr;
    v33[77] = SHIWORD(v61);
    v33[93] = (__int16)v61;
    v33[109] = v59;
    v34 = CFDictionaryCreate(v22, (const void **)keys, (const void **)values, v31, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v35 = 0;
    v70[v23] = v34;
    v59 = 0;
    do
    {
      v36 = values[v35];
      if (v36)
      {
        CFRelease(v36);
        v35 = v59;
      }
      v59 = ++v35;
    }
    while (v35 < (int)v31);
    ++v23;
  }
  while (v23 != v21);
  v37 = CFArrayCreate(v22, (const void **)v70, (a8 * a7), MEMORY[0x1E0C9B378]);
  v38 = 0;
  v59 = 0;
  v19 = v57;
  v18 = v44;
  do
  {
    v39 = v70[v38];
    if (v39)
    {
      CFRelease(v39);
      v38 = v59;
    }
    v59 = ++v38;
  }
  while (v38 < (int)v21);
LABEL_33:
  v40 = *(const void **)(v19 + 9032);
  if (v40)
    CFRelease(v40);
  *(_QWORD *)(v19 + 9032) = v37;
  if (*v18)
  {
    v41 = (const void *)*MEMORY[0x1E0D07358];
    if (a9)
      captureStreamSetPropertyOnActivityScheduler(a1, v41, v37);
    else
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v41, (uint64_t)v37);
  }
  else
  {
    v42 = (unsigned int *)(v19 + 7604);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
}

uint64_t setupSearchPositions(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8)
{
  uint64_t DerivedStorage;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  __CFArray *v20;
  CFIndex v21;
  const __CFNumber *ValueAtIndex;
  __CFDictionary *Mutable;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  const void *v30;
  const void *v31;
  __CFDictionary *v32;
  int v33;
  CFNumberRef v34;
  const void *v35;
  const void *v36;
  CFNumberRef v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  int v48;
  int v49;
  int v50;
  int valuePtr;
  unsigned int v52;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = llroundf((float)(a8 * -0.16667) + 21.0);
  valuePtr = 0;
  v52 = v16;
  if (a4 <= a2)
    v17 = a2;
  else
    v17 = a4;
  if (v17 >= a3)
    v18 = a3;
  else
    v18 = v17;
  v19 = v18 == a2;
  v46 = v18;
  v20 = computeAFSearchPositions(a1, a2, a3, v18, a5, v19);
  *(_DWORD *)(DerivedStorage + 172) = a5;
  if (a5 >= 1)
  {
    v21 = 0;
    do
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v20, v21);
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      *(_DWORD *)(DerivedStorage + 92 + 4 * v21++) = valuePtr;
    }
    while (a5 != v21);
  }
  if (*(_BYTE *)(DerivedStorage + 504)
    && *(unsigned __int8 *)(DerivedStorage + 505) == v19
    && *(unsigned __int8 *)(DerivedStorage + 506) == a6
    && (*(_DWORD *)(DerivedStorage + 500) == v16 || a6 == 0))
  {
LABEL_32:
    v39 = (const void *)*MEMORY[0x1E0D07350];
    if (!a7)
      goto LABEL_49;
LABEL_44:
    v43 = captureStreamSetPropertyOnActivityScheduler(a1, v39, v20);
    goto LABEL_50;
  }
  *(_BYTE *)(DerivedStorage + 504) = 1;
  *(_BYTE *)(DerivedStorage + 505) = v19;
  *(_DWORD *)(DerivedStorage + 500) = v16;
  *(_BYTE *)(DerivedStorage + 506) = a6;
  if (a6)
  {
    v49 = 66;
    v50 = 56;
    v48 = 42;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    valuePtr = 2;
    v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05B20], v25);
    CFRelease(v25);
    v26 = CFNumberCreate(0, kCFNumberIntType, &v50);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05B18], v26);
    CFRelease(v26);
    v27 = CFNumberCreate(0, kCFNumberIntType, &v49);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05B30], v27);
    CFRelease(v27);
    v28 = CFNumberCreate(0, kCFNumberIntType, &v52);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05B28], v28);
    CFRelease(v28);
    v29 = CFNumberCreate(0, kCFNumberIntType, &v48);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05B10], v29);
    CFRelease(v29);
    v30 = (const void *)*MEMORY[0x1E0D073A8];
    v31 = (const void *)*MEMORY[0x1E0D05AC0];
    if (a7)
    {
      captureStreamSetPropertyOnActivityScheduler(a1, v30, v31);
      captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07678], Mutable);
      if (!Mutable)
        goto LABEL_32;
    }
    else
    {
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v30, (uint64_t)v31);
      af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, *MEMORY[0x1E0D07678], (uint64_t)Mutable);
      if (!Mutable)
        goto LABEL_32;
    }
    CFRelease(Mutable);
    goto LABEL_32;
  }
  v32 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (*(_DWORD *)(DerivedStorage + 640))
    v33 = 1;
  else
    v33 = 2;
  valuePtr = v33;
  v34 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E0D05AB0], v34);
  CFRelease(v34);
  v35 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E0D05AA8], (const void *)*MEMORY[0x1E0C9AE50]);
  if (v46 == a2)
    v36 = v35;
  else
    v36 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E0D05A98], v36);
  valuePtr = 56;
  v37 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v32, (const void *)*MEMORY[0x1E0D05AA0], v37);
  CFRelease(v37);
  v38 = (const void *)*MEMORY[0x1E0D07340];
  if (!a7)
  {
    af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v38, (uint64_t)v32);
    if (!v32)
      goto LABEL_36;
    goto LABEL_35;
  }
  captureStreamSetPropertyOnActivityScheduler(a1, v38, v32);
  if (v32)
LABEL_35:
    CFRelease(v32);
LABEL_36:
  if (!*(_BYTE *)(DerivedStorage + 514))
  {
    if (!*(_DWORD *)(DerivedStorage + 640))
      goto LABEL_32;
    v42 = (const void *)*MEMORY[0x1E0D07348];
    if (a7)
      goto LABEL_42;
    goto LABEL_47;
  }
  v40 = (const void *)*MEMORY[0x1E0D073A8];
  v41 = (const void *)*MEMORY[0x1E0D05AC8];
  if ((a7 & 1) != 0)
  {
    captureStreamSetPropertyOnActivityScheduler(a1, v40, v41);
    if (!*(_DWORD *)(DerivedStorage + 640))
    {
LABEL_43:
      v39 = (const void *)*MEMORY[0x1E0D07350];
      goto LABEL_44;
    }
    v42 = (const void *)*MEMORY[0x1E0D07348];
LABEL_42:
    captureStreamSetPropertyOnActivityScheduler(a1, v42, v35);
    goto LABEL_43;
  }
  af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v40, (uint64_t)v41);
  if (*(_DWORD *)(DerivedStorage + 640))
  {
    v42 = (const void *)*MEMORY[0x1E0D07348];
LABEL_47:
    af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v42, (uint64_t)v35);
  }
  v39 = (const void *)*MEMORY[0x1E0D07350];
LABEL_49:
  v43 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, (uint64_t)v39, (uint64_t)v20);
LABEL_50:
  v44 = v43;
  if (v20)
    CFRelease(v20);
  return v44;
}

uint64_t captureStreamSetPropertyOnActivityScheduler(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 4294954516;
  if (a1 && a2)
  {
    v8 = DerivedStorage;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v10 = Mutable;
      CFDictionaryAddValue(Mutable, CFSTR("propertyKey"), a2);
      if (a3)
        CFDictionaryAddValue(v10, CFSTR("propertyValue"), a3);
      v11 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(v8 + 72), v10);
      if ((_DWORD)v11)
      {
        v7 = v11;
        CFRelease(v10);
      }
      else
      {
        v12 = *(_QWORD *)(v8 + 64);
        v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v13)
          return v13(v12);
        return 4294954514;
      }
    }
    else
    {
      return 4294954510;
    }
  }
  return v7;
}

uint64_t getDefaultFocusScanRange(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4, int *a5)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  result = CMBaseObjectGetDerivedStorage();
  v10 = *(_DWORD *)(result + 636);
  if (v10 <= 0)
    v10 = 12;
  v11 = 692;
  if (!*(_DWORD *)(result + 40))
    v11 = 688;
  if (*(_BYTE *)(result + 7582))
  {
    v12 = *(_DWORD *)(result + 7640);
    v13 = *(_DWORD *)(result + 7636);
    if (2 * v10 * (v12 - v13) / 255 < v10)
      v10 = 2 * v10 * (v12 - v13) / 255;
    if (v10 <= 5)
      v10 = 5;
  }
  else
  {
    v13 = *(_DWORD *)(result + v11);
    if (*(_WORD *)(result + 5664) != 4 && v13 <= *(_DWORD *)(result + 632))
      v13 = *(_DWORD *)(result + 632);
    v12 = 255;
  }
  *a2 = v13;
  *a3 = v12;
  *a4 = v13;
  *a5 = v10;
  return result;
}

__CFArray *computeAFSearchPositions(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t DerivedStorage;
  __CFArray *Mutable;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  BOOL v30;
  CFNumberRef v31;
  float v33;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v13 = *(float *)(DerivedStorage + 664);
  if (v13 == 0.0)
  {
    v16 = (float)a3;
    if (*(_DWORD *)(DerivedStorage + 640))
    {
      v22 = 0;
      v21 = (float)a4;
      v19 = v16 - (float)a2;
      v14 = 0.0;
      v13 = 255.0;
      v33 = 900.0;
      goto LABEL_17;
    }
    v14 = 0.0;
    v15 = 900.0;
    v13 = 255.0;
  }
  else
  {
    v14 = *(float *)(DerivedStorage + 668);
    v15 = *(float *)(DerivedStorage + 672);
    v16 = (float)a3;
    if (v14 > 0.0)
    {
      v17 = v13 * v14;
      if (v13 >= v16)
        v16 = v14 * v16;
      else
        v16 = (float)(v13 * v14) + (float)((float)(v16 - v13) * v15);
      if (v13 >= (float)a2)
        v18 = v14 * (float)a2;
      else
        v18 = v17 + (float)((float)((float)a2 - v13) * v15);
      v19 = v16 - v18;
      v20 = (float)a4;
      v33 = *(float *)(DerivedStorage + 672);
      if (v13 >= (float)a4)
        v21 = v14 * v20;
      else
        v21 = v17 + (float)((float)(v20 - v13) * v15);
      goto LABEL_16;
    }
  }
  v16 = (float)(v13 / (float)(v15 - v16)) + -1.0;
  v19 = v16 - (float)((float)(v13 / (float)(v15 - (float)a2)) + -1.0);
  v33 = v15;
  v21 = (float)(v13 / (float)(v15 - (float)a4)) + -1.0;
LABEL_16:
  v22 = 1;
LABEL_17:
  if (a5 >= 1)
  {
    v23 = 0;
    if (a6)
      v24 = a5 - 1;
    else
      v24 = a5;
    v25 = (float)v24;
    while (1)
    {
      v26 = v19 * (float)v23;
      v27 = v21 + (float)(v26 / v25);
      if (v27 > v16)
        break;
      if ((float)(v21 + (float)(v26 / (float)(a5 - 1))) <= v16)
        goto LABEL_26;
      valuePtr = a3;
      v28 = a3;
LABEL_33:
      v29 = *(_DWORD *)(DerivedStorage + 688);
      v30 = v28 < v29;
      if (v28 <= v29)
        v28 = *(_DWORD *)(DerivedStorage + 688);
      if (v30 || v28 >= 256)
      {
        if (v28 >= 255)
          v28 = 255;
        valuePtr = v28;
      }
      v31 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(Mutable, v31);
      CFRelease(v31);
      if (a5 == ++v23)
        return Mutable;
    }
    v27 = v27 - v19;
LABEL_26:
    if (v22)
    {
      if (v14 <= 0.0)
      {
        v27 = v33 - (float)(v13 / (float)(v27 + 1.0));
      }
      else if ((float)(v14 * v13) >= v27)
      {
        v27 = v27 / v14;
      }
      else
      {
        v27 = v13 + (float)((float)(v27 + (float)((float)-v13 * v14)) / v33);
      }
    }
    v28 = (int)(float)(v27 + 0.5);
    valuePtr = v28;
    goto LABEL_33;
  }
  return Mutable;
}

float currentGain(const void *a1)
{
  const __CFDictionary *v1;
  const __CFNumber *Value;
  const __CFNumber *v3;
  const __CFNumber *v4;
  float v5;
  int v7;
  int v8;
  int valuePtr;

  v1 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v8 = 256;
  valuePtr = 256;
  v7 = 256;
  Value = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0D067E0]);
  if (Value)
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v3 = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0D06F78]);
  if (v3)
    CFNumberGetValue(v3, kCFNumberIntType, &v8);
  v4 = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0D06F60]);
  if (v4)
  {
    CFNumberGetValue(v4, kCFNumberIntType, &v7);
    v5 = (float)v7;
  }
  else
  {
    v5 = 256.0;
  }
  return (float)((float)((float)valuePtr * (float)v8) * v5) * 0.000000059605;
}

uint64_t FigCaptureMainScreenDimensions(int a1)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v2 = MGGetSInt32Answer();
  v3 = MGGetSInt32Answer();
  v4 = (int)v3 > (int)v2;
  v5 = (a1 & v4) == 0;
  if ((a1 & v4) != 0)
    v6 = v2;
  else
    v6 = v3;
  if (v5)
    v7 = v2;
  else
    v7 = v3;
  return v7 | (v6 << 32);
}

void sub_1A2DA2FE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t getDKTrackingAgentClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__35;
  v7 = __Block_byref_object_dispose__35;
  v0 = getDKTrackingAgentClass_softClass;
  v8 = getDKTrackingAgentClass_softClass;
  if (!getDKTrackingAgentClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getDKTrackingAgentClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getDKTrackingAgentClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DA30B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2DA3220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t setProperty(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  float v8;
  const __CFNumber *Value;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  unsigned __int8 v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFBoolean *v24;
  _BOOL4 v25;
  const __CFBoolean *v27;
  _BOOL4 v28;
  const __CFBoolean *v29;
  const void *v31;
  const void **v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  CFTypeID TypeID;
  int v38;
  int v39;
  int v40;
  CGFloat Height;
  CFTypeID v42;
  int v43;
  int v44;
  int v45;
  CGFloat v46;
  int v47;
  const void *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  const __CFNumber *v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  CFTypeID v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  CFTypeID v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  CFTypeID v61;
  int v62;
  CFTypeID v63;
  CFTypeID v64;
  CFTypeID v65;
  float v66;
  CFTypeID v67;
  int v68;
  int v69;
  int v70;
  CGFloat v71;
  CFTypeID v72;
  int v73;
  unsigned __int8 v74;
  const __CFNumber *v75;
  const __CFNumber *v76;
  const __CFNumber *v77;
  const __CFNumber *v78;
  const __CFNumber *v79;
  const __CFNumber *v80;
  const __CFBoolean *v81;
  _BOOL4 v82;
  const __CFBoolean *v83;
  CFTypeID v84;
  const __CFNumber *v85;
  const __CFNumber *v86;
  CFTypeID v87;
  const __CFNumber *v88;
  const __CFNumber *v89;
  CFTypeID v90;
  int v91;
  unsigned int v92;
  CFTypeID v93;
  _BYTE *v94;
  int v95;
  unsigned int *v96;
  int v97;
  const void **v98;
  int v99;
  int v100;
  uint64_t v101;
  int v102;
  CFTypeID v103;
  const __CFNumber *v104;
  const __CFNumber *v105;
  const __CFNumber *v106;
  const __CFNumber *v107;
  int x_low;
  CFTypeID v109;
  char v110;
  CFTypeID v111;
  int v112;
  CFTypeID v113;
  size_t Count;
  uint64_t v115;
  int64_t v116;
  const void **v117;
  const void **v118;
  const void **v119;
  CFTypeRef *v120;
  const void **v121;
  const void *v122;
  CFTypeID v123;
  CFTypeID v124;
  uint64_t CameraParametersForPortType;
  uint64_t v126;
  double v127;
  int v128;
  float v129;
  float v130;
  float v131;
  CGRect rect;
  uint64_t valuePtr;
  uint64_t v134;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  v134 = 0;
  if (*(_BYTE *)(DerivedStorage + 88))
    return 4294954511;
  v7 = DerivedStorage;
  if (CFEqual(a2, CFSTR("AutoExposure")))
  {
    v8 = *(float *)(v7 + 608);
    if (v8 <= 0.0)
      v8 = 0.5;
    *(float *)&valuePtr = v8;
    *((float *)&valuePtr + 1) = v8;
    if (a3)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("w"));
      if (Value)
        CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
      v10 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("h"));
      if (v10)
        CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr);
      *(float *)&v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      v11 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("x"));
      if (v11)
        CFNumberGetValue(v11, kCFNumberFloatType, (char *)&v134 + 4);
      v12 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("y"));
      if (v12)
        CFNumberGetValue(v12, kCFNumberFloatType, &v134);
    }
    else
    {
      *(float *)&v134 = (float)(1.0 - v8) * 0.5;
      *((float *)&v134 + 1) = *(float *)&v134;
    }
    FigImageControl_AutoExposure(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
    return 0;
  }
  if (CFEqual(a2, CFSTR("FlashExposure")))
  {
    valuePtr = 0x3F0000003F000000;
    if (a3)
    {
      v13 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("w"));
      if (v13)
        CFNumberGetValue(v13, kCFNumberFloatType, (char *)&valuePtr + 4);
      v14 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("h"));
      if (v14)
        CFNumberGetValue(v14, kCFNumberFloatType, &valuePtr);
      *(float *)&v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      v15 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("x"));
      if (v15)
        CFNumberGetValue(v15, kCFNumberFloatType, (char *)&v134 + 4);
      v16 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("y"));
      if (v16)
        CFNumberGetValue(v16, kCFNumberFloatType, &v134);
    }
    else
    {
      v134 = 0x3E8000003E800000;
    }
    FigImageControl_FlashMetering(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
    return 0;
  }
  if (CFEqual(a2, CFSTR("ContinuousAutoFocus")))
  {
    v17 = *(_DWORD *)(v7 + 40) == 0;
    valuePtr = 0x3F0000003F000000;
    if (a3)
    {
      v18 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("w"));
      if (v18)
        CFNumberGetValue(v18, kCFNumberFloatType, (char *)&valuePtr + 4);
      v19 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("h"));
      if (v19)
        CFNumberGetValue(v19, kCFNumberFloatType, &valuePtr);
      *(float *)&v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      v20 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("x"));
      if (v20)
        CFNumberGetValue(v20, kCFNumberFloatType, (char *)&v134 + 4);
      v21 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("y"));
      if (v21)
        CFNumberGetValue(v21, kCFNumberFloatType, &v134);
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
      v22 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("far"));
      if (v22)
        CFNumberGetValue(v22, kCFNumberFloatType, &rect);
      v23 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("near"));
      if (v23)
        CFNumberGetValue(v23, kCFNumberFloatType, &v127);
      v24 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("smooth"));
      if (v24)
        v25 = CFBooleanGetValue(v24) != 0;
      else
        v25 = 0;
      v29 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("highFrameRate"));
      if (v29)
        v17 = CFBooleanGetValue(v29) != 0;
    }
    else
    {
      v25 = 0;
      v134 = 0x3E8000003E800000;
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
    }
    return FigImageControl_ContinuousAutoFocus(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5), llroundf(*(float *)&rect.origin.x * 255.0), llroundf(*(float *)&v127 * 255.0), v25, v17);
  }
  if (!CFEqual(a2, CFSTR("ContinuousAutoFocusWithSmoothFocus")))
  {
    if (CFEqual(a2, CFSTR("FocusPreset")))
    {
      if (CFEqual(a3, CFSTR("Still")))
      {
        v31 = *(const void **)(v7 + 680);
        v32 = (const void **)MEMORY[0x1E0D06580];
      }
      else if (CFEqual(a3, CFSTR("Video")))
      {
        v31 = *(const void **)(v7 + 680);
        v32 = (const void **)MEMORY[0x1E0D06598];
      }
      else if (CFEqual(a3, CFSTR("CinematicVideo")))
      {
        *(_BYTE *)(v7 + 625) = 0;
        v31 = *(const void **)(v7 + 680);
        v32 = (const void **)MEMORY[0x1E0D065A0];
      }
      else
      {
        v47 = CFEqual(a3, CFSTR("TimeLapse"));
        v31 = *(const void **)(v7 + 680);
        if (!v47)
        {
          if (v31)
          {
            CFRelease(*(CFTypeRef *)(v7 + 680));
            a3 = 0;
            *(_QWORD *)(v7 + 680) = 0;
            return (uint64_t)a3;
          }
          return 0;
        }
        v32 = (const void **)MEMORY[0x1E0D06590];
      }
      v48 = *v32;
      *(_QWORD *)(v7 + 680) = *v32;
      if (v48)
        CFRetain(v48);
      if (v31)
        CFRelease(v31);
      return 0;
    }
    if (!a3)
      return 4294954516;
    if (CFEqual(a2, CFSTR("SpotMeteredExposure")))
    {
      valuePtr = 0x3F0000003F000000;
      v33 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("w"));
      if (v33)
        CFNumberGetValue(v33, kCFNumberFloatType, (char *)&valuePtr + 4);
      v34 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("h"));
      if (v34)
        CFNumberGetValue(v34, kCFNumberFloatType, &valuePtr);
      *(float *)&v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      v35 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("x"));
      if (v35)
        CFNumberGetValue(v35, kCFNumberFloatType, (char *)&v134 + 4);
      v36 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("y"));
      if (v36)
        CFNumberGetValue(v36, kCFNumberFloatType, &v134);
      *(_DWORD *)(v7 + 5496) = 0;
      FigImageControl_SpotMetering(a1, (int)(float)((float)(*((float *)&v134 + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&v134 * 1000.0) + 0.5), (int)(float)((float)(*((float *)&valuePtr + 1) * 1000.0) + 0.5), (int)(float)((float)(*(float *)&valuePtr * 1000.0) + 0.5));
      return 0;
    }
    if (CFEqual(a2, CFSTR("SpotMeteredExposureAreaOfInterest")))
    {
      memset(&rect, 0, sizeof(rect));
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3) && CGRectMakeWithDictionaryRepresentation(a3, &rect))
      {
        v38 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
        v39 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
        v40 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
        Height = CGRectGetHeight(rect);
        FigImageControl_SetSpotMeteringAreaOfInterest(a1, v38, v39, v40, (int)(Height * 1000.0 + 0.5));
        return 0;
      }
      return 4294954516;
    }
    if (CFEqual(a2, CFSTR("AutoExposureAreaOfInterest")))
    {
      memset(&rect, 0, sizeof(rect));
      v42 = CFDictionaryGetTypeID();
      if (v42 == CFGetTypeID(a3) && CGRectMakeWithDictionaryRepresentation(a3, &rect))
      {
        v43 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
        v44 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
        v45 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
        v46 = CGRectGetHeight(rect);
        FigImageControl_SetAutoExposureAreaOfInterest(a1, v43, v44, v45, (int)(v46 * 1000.0 + 0.5));
        return 0;
      }
      return 4294954516;
    }
    if (CFEqual(a2, CFSTR("ManualExposure")))
    {
      v130 = 1.0;
      v131 = 0.0;
      v128 = 0;
      v129 = 0.033333;
      rect.origin.x = 0.0;
      v127 = 0.0;
      v49 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("IntegrationTime"));
      if (v49)
        CFNumberGetValue(v49, kCFNumberFloatType, &v129);
      v50 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("Gain"));
      if (v50)
        CFNumberGetValue(v50, kCFNumberFloatType, &v130);
      v51 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05AD0]);
      if (v51)
        CFNumberGetValue(v51, kCFNumberSInt32Type, &v128);
      v52 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("ManualExposureMinFrameRate"));
      if (v52)
        CFNumberGetValue(v52, kCFNumberDoubleType, &rect);
      v53 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("ManualExposureMaxFrameRate"));
      if (v53)
        CFNumberGetValue(v53, kCFNumberDoubleType, &v127);
      v54 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("ISO"));
      if (v54)
      {
        CFNumberGetValue(v54, kCFNumberFloatType, &v131);
        FigImageControl_ManualExposureWithISO(v129, rect.origin.x, v127, v131, a1, v128);
      }
      else
      {
        FigImageControl_ManualExposure(v129, v130);
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("ExposureBias")))
    {
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      v55 = CFDictionaryGetTypeID();
      if (v55 == CFGetTypeID(a3))
      {
        v56 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D074C8]);
        if (v56)
        {
          v57 = v56;
          v58 = CFGetTypeID(v56);
          if (v58 == CFNumberGetTypeID())
            CFNumberGetValue(v57, kCFNumberFloatType, &rect);
        }
        v59 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05AD0]);
        if (v59)
        {
          v60 = v59;
          v61 = CFGetTypeID(v59);
          if (v61 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v60, kCFNumberSInt32Type, &v127);
            v62 = LODWORD(v127);
LABEL_121:
            FigImageControl_SetExposureBias(a1, v62, *(float *)&rect.origin.x);
            return 0;
          }
        }
      }
      else
      {
        v64 = CFNumberGetTypeID();
        if (v64 == CFGetTypeID(a3))
        {
          CFNumberGetValue(a3, kCFNumberFloatType, &rect);
        }
        else
        {
          a3 = (const __CFDictionary *)FigSignalErrorAt();
          if ((_DWORD)a3)
            return (uint64_t)a3;
        }
      }
      v62 = 0;
      goto LABEL_121;
    }
    if (CFEqual(a2, CFSTR("ExposureConvergenceSpeed")))
    {
      LODWORD(rect.origin.x) = 1048576000;
      v63 = CFNumberGetTypeID();
      if (v63 == CFGetTypeID(a3))
        CFNumberGetValue(a3, kCFNumberFloatType, &rect);
      return FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata();
    }
    if (CFEqual(a2, CFSTR("ExposureStabilityZone")))
    {
      LODWORD(rect.origin.x) = 1028443341;
      v65 = CFNumberGetTypeID();
      if (v65 == CFGetTypeID(a3))
      {
        CFNumberGetValue(a3, kCFNumberFloatType, &rect);
        v66 = *(float *)&rect.origin.x;
      }
      else
      {
        v66 = 0.05;
      }
      return FigImageControl_SetExposureStabilityZone(a1, 0, v66);
    }
    if (CFEqual(a2, CFSTR("ExposureLock")))
    {
      FigImageControl_LockExposure();
      return 0;
    }
    if (CFEqual(a2, CFSTR("ContinuousAutoFocusAreaOfInterest")))
    {
      memset(&rect, 0, sizeof(rect));
      v67 = CFDictionaryGetTypeID();
      if (v67 != CFGetTypeID(a3) || !CGRectMakeWithDictionaryRepresentation(a3, &rect))
        return 4294954516;
      v68 = (int)(CGRectGetMinX(rect) * 1000.0 + 0.5);
      v69 = (int)(CGRectGetMinY(rect) * 1000.0 + 0.5);
      v70 = (int)(CGRectGetWidth(rect) * 1000.0 + 0.5);
      v71 = CGRectGetHeight(rect);
      return FigImageControl_SetContinuousAutoFocusAreaOfInterest(a1, v68, v69, v70, (int)(v71 * 1000.0 + 0.5));
    }
    if (CFEqual(a2, CFSTR("ContinuousAutoFocusUseStrictAreaOfInterest")))
    {
      v72 = CFGetTypeID(a3);
      if (v72 == CFBooleanGetTypeID())
      {
        v73 = CFBooleanGetValue(a3);
        a3 = 0;
        *(_BYTE *)(v7 + 561) = v73 != 0;
        return (uint64_t)a3;
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("FocusScan")))
    {
      v74 = *(_DWORD *)(v7 + 40) == 0;
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      valuePtr = 0x3F0000003F000000;
      v75 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("w"));
      if (v75)
        CFNumberGetValue(v75, kCFNumberFloatType, (char *)&valuePtr + 4);
      v76 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("h"));
      if (v76)
        CFNumberGetValue(v76, kCFNumberFloatType, &valuePtr);
      *(float *)&v134 = (float)(1.0 - *(float *)&valuePtr) * 0.5;
      *((float *)&v134 + 1) = (float)(1.0 - *((float *)&valuePtr + 1)) * 0.5;
      v77 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("x"));
      if (v77)
        CFNumberGetValue(v77, kCFNumberFloatType, (char *)&v134 + 4);
      v78 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("y"));
      if (v78)
        CFNumberGetValue(v78, kCFNumberFloatType, &v134);
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 1065353216;
      v79 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("far"));
      if (v79)
        CFNumberGetValue(v79, kCFNumberFloatType, &rect);
      v80 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("near"));
      if (v80)
        CFNumberGetValue(v80, kCFNumberFloatType, &v127);
      v81 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("smooth"));
      if (v81)
        v82 = CFBooleanGetValue(v81) != 0;
      else
        v82 = 0;
      v83 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("highFrameRate"));
      if (v83)
        v74 = CFBooleanGetValue(v83) != 0;
      *(_DWORD *)(v7 + 5496) = 0;
      FigImageControl_FocusScan(a1, (int)(float)(*((float *)&v134 + 1) * 1000.0), (int)(float)(*(float *)&v134 * 1000.0), (int)(float)(*((float *)&valuePtr + 1) * 1000.0), (int)(float)(*(float *)&valuePtr * 1000.0), llroundf(*(float *)&rect.origin.x * 255.0), llroundf(*(float *)&v127 * 255.0), v82, v74);
      return 0;
    }
    if (CFEqual(a2, CFSTR("FocusLock")))
    {
      FigImageControl_LockFocus();
      return 0;
    }
    if (CFEqual(a2, CFSTR("ManualFocus")))
    {
      LODWORD(rect.origin.x) = 0;
      LODWORD(v127) = 0;
      v84 = CFDictionaryGetTypeID();
      if (v84 == CFGetTypeID(a3))
      {
        v85 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06658]);
        if (v85)
        {
          v86 = v85;
          v87 = CFGetTypeID(v85);
          if (v87 == CFNumberGetTypeID())
            CFNumberGetValue(v86, kCFNumberSInt32Type, &rect);
        }
        v88 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05AD0]);
        if (v88)
        {
          v89 = v88;
          v90 = CFGetTypeID(v88);
          if (v90 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v89, kCFNumberSInt32Type, &v127);
            v91 = LODWORD(v127);
LABEL_171:
            FigImageControl_ManualFocus(a1, SLODWORD(rect.origin.x), v91);
            return 0;
          }
        }
      }
      else
      {
        v93 = CFNumberGetTypeID();
        if (v93 == CFGetTypeID(a3))
        {
          v131 = 0.0;
          CFNumberGetValue(a3, kCFNumberFloatType, &v131);
          v91 = 0;
          LODWORD(rect.origin.x) = (int)(float)(v131 * 255.0);
          goto LABEL_171;
        }
      }
      v91 = 0;
      goto LABEL_171;
    }
    if (CFEqual(a2, CFSTR("AutofocusProcessor_VideoMode")))
    {
      if (CFEqual(a3, CFSTR("Mode_StillPreview")))
      {
        v92 = 0;
      }
      else if (CFEqual(a3, CFSTR("Mode_VideoPreview")))
      {
        v92 = 1;
      }
      else
      {
        if (CFEqual(a3, CFSTR("Mode_VideoRecording")))
        {
          v100 = *(_DWORD *)(v7 + 40);
          v96 = (unsigned int *)(v7 + 40);
          if (v100 == 2)
          {
            a3 = 0;
            v92 = 2;
            goto LABEL_182;
          }
          v92 = 2;
          FigImageControl_VideoModeChange(a1, 2u);
          v98 = (const void **)MEMORY[0x1E0C9AE50];
          goto LABEL_180;
        }
        if (CFEqual(a3, CFSTR("Mode_Conference")))
        {
          v92 = 3;
        }
        else if (CFEqual(a3, CFSTR("Mode_Panorama")))
        {
          v92 = 4;
        }
        else if (CFEqual(a3, CFSTR("Mode_TimeLapsePreview")))
        {
          v92 = 5;
        }
        else if (CFEqual(a3, CFSTR("Mode_TimeLapseCapture")))
        {
          v92 = 6;
        }
        else
        {
          v92 = 0;
        }
      }
      v97 = *(_DWORD *)(v7 + 40);
      v96 = (unsigned int *)(v7 + 40);
      if (v92 == v97 || (FigImageControl_VideoModeChange(a1, v92), *v96 != 2))
      {
        a3 = 0;
        goto LABEL_182;
      }
      v98 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_180:
      a3 = (const __CFDictionary *)captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D078B0], *v98);
LABEL_182:
      *v96 = v92;
      return (uint64_t)a3;
    }
    v94 = (_BYTE *)(v7 + 4336);
    if (CFEqual(a2, CFSTR("MonitorSubjectArea")))
    {
      v95 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
      if (*v94 != v95)
      {
        a3 = 0;
        *(_DWORD *)(v7 + 5496) = 0;
        *v94 = v95;
        return (uint64_t)a3;
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("ProvidesStortorgetMetadata")))
    {
      v99 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
      if (*(unsigned __int8 *)(v7 + 18120) != v99)
      {
        a3 = 0;
        *(_BYTE *)(v7 + 18120) = v99;
        return (uint64_t)a3;
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("FaceDetectionMode")))
    {
      *(_BYTE *)(v7 + 7580) = 0;
      if (CFEqual(a3, CFSTR("Disable")))
      {
        *(_BYTE *)(v7 + 560) = 0;
LABEL_192:
        v101 = a1;
        v102 = 0;
LABEL_209:
        FigImageControl_SetUseFaceLocationForMetering(v101, v102);
        return 0;
      }
      if (CFEqual(a3, CFSTR("AEOnly")))
      {
        *(_BYTE *)(v7 + 560) = 0;
      }
      else
      {
        if (CFEqual(a3, CFSTR("AFOnly")))
        {
          *(_BYTE *)(v7 + 560) = 1;
          goto LABEL_192;
        }
        if (!CFEqual(a3, CFSTR("AEAndAF")))
          return 4294954516;
        *(_BYTE *)(v7 + 560) = 1;
      }
      v101 = a1;
      v102 = 1;
      goto LABEL_209;
    }
    if (CFEqual(a2, CFSTR("WhiteBalanceGains")))
    {
      v103 = CFGetTypeID(a3);
      if (v103 == CFDictionaryGetTypeID())
      {
        LOWORD(v127) = 0;
        LOWORD(v131) = 0;
        LOWORD(v130) = 0;
        LODWORD(rect.origin.x) = 0;
        v104 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06670]);
        if (v104)
          CFNumberGetValue(v104, kCFNumberSInt16Type, &v127);
        v105 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06668]);
        if (v105)
          CFNumberGetValue(v105, kCFNumberSInt16Type, &v131);
        v106 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06660]);
        if (v106)
          CFNumberGetValue(v106, kCFNumberSInt16Type, &v130);
        v107 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05AD0]);
        if (v107)
        {
          CFNumberGetValue(v107, kCFNumberSInt32Type, &rect);
          x_low = LODWORD(rect.origin.x);
        }
        else
        {
          x_low = 0;
        }
        return FigImageControl_ManualWhiteBalanceGains(a1, SLOWORD(v127), SLOWORD(v131), SLOWORD(v130), x_low);
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("AutoWhiteBalanceLock")))
    {
      v109 = CFGetTypeID(a3);
      if (v109 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue(a3))
          return FigImageControl_LockWhiteBalance();
        else
          return FigImageControl_UnlockWhiteBalance();
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(a2, CFSTR("HDRSceneDetectionEnabled")))
    {
      v110 = CFBooleanGetValue(a3) != 0;
      return FigImageControl_ConfigureHDRSceneDetection(a1, v110);
    }
    if (CFEqual(a2, CFSTR("HDRLowLightDetectionDisabled")))
    {
      v111 = CFGetTypeID(a3);
      if (v111 == CFBooleanGetTypeID())
      {
        v112 = CFBooleanGetValue(a3);
        a3 = 0;
        *(_BYTE *)(v7 + 17322) = v112 != 0;
        return (uint64_t)a3;
      }
      return FigSignalErrorAt();
    }
    if (!CFEqual(a2, CFSTR("HDRLowLightGainThresholdsByPortType")))
      return 4294954512;
    v113 = CFGetTypeID(a3);
    if (v113 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
    Count = CFDictionaryGetCount(a3);
    v115 = 1;
    if (*(_QWORD *)(v7 + 16))
      v115 = 2;
    if (*(_QWORD *)(v7 + 24))
      ++v115;
    if (Count != v115)
      return FigSignalErrorAt();
    v116 = Count;
    v117 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v118 = (const void **)malloc_type_calloc(v116, 8uLL, 0x6004044C4A2DFuLL);
    v119 = v118;
    if (v117 && v118)
    {
      CFDictionaryGetKeysAndValues(a3, v117, v118);
      if (v116 < 1)
      {
LABEL_249:
        a3 = 0;
      }
      else
      {
        v120 = v117;
        v121 = v119;
        while (1)
        {
          v122 = *v121;
          v123 = CFGetTypeID(*v120);
          if (v123 != CFStringGetTypeID())
            break;
          v124 = CFGetTypeID(v122);
          if (v124 != CFNumberGetTypeID())
            break;
          CameraParametersForPortType = af_sbp_getCameraParametersForPortType();
          if (!CameraParametersForPortType)
            break;
          v126 = CameraParametersForPortType;
          CFNumberGetValue((CFNumberRef)v122, kCFNumberFloatType, (void *)(CameraParametersForPortType + 1248));
          *(_DWORD *)(v126 + 1244) = 1007299575;
          ++v121;
          ++v120;
          if (!--v116)
            goto LABEL_249;
        }
        a3 = (const __CFDictionary *)FigSignalErrorAt();
      }
    }
    else
    {
      a3 = (const __CFDictionary *)FigSignalErrorAt();
      if (!v117)
      {
LABEL_256:
        if (v119)
          free(v119);
        return (uint64_t)a3;
      }
    }
    free(v117);
    goto LABEL_256;
  }
  if (!a3)
    return (uint64_t)a3;
  v27 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("smooth"));
  if (!v27)
    return 0;
  v28 = CFBooleanGetValue(v27) != 0;
  return FigImageControl_ContinuousAutoFocusWithSmoothFocus(a1, v28);
}

uint64_t FigImageControl_SetExposureBias(uint64_t a1, int a2, float a3)
{
  uint64_t DerivedStorage;
  int v7;
  int v8;
  BOOL v9;
  const void *v10;
  void *v11;
  const __CFAllocator *v12;
  CFNumberRef v13;
  uint64_t v14;
  int v16;
  int valuePtr;
  void *values;
  CFTypeRef cf;
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = llroundf(exp2f(a3) * 256.0);
  v16 = v7;
  *(float *)(DerivedStorage + 7524) = a3;
  if (v7 <= 0)
  {
    v8 = 1;
  }
  else
  {
    if (v7 < 0x10000)
      goto LABEL_6;
    v8 = 0xFFFF;
  }
  v16 = v8;
LABEL_6:
  if (*(_BYTE *)(DerivedStorage + 513))
    v9 = a2 < 1;
  else
    v9 = 1;
  if (v9)
  {
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v16);
    v10 = (const void *)*MEMORY[0x1E0D074C8];
  }
  else
  {
    v10 = (const void *)*MEMORY[0x1E0D074C8];
    v11 = (void *)*MEMORY[0x1E0D05AD0];
    keys[0] = *(void **)MEMORY[0x1E0D074C8];
    keys[1] = v11;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v16);
    cf = CFNumberCreate(v12, kCFNumberSInt32Type, &valuePtr);
    v13 = CFDictionaryCreate(v12, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFRelease(values);
    CFRelease(cf);
  }
  v14 = captureStreamSetPropertyOnActivityScheduler(a1, v10, v13);
  CFRelease(v13);
  return v14;
}

uint64_t FigImageControl_ContinuousAutoFocus(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  uint64_t DerivedStorage;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  int v21;
  BOOL v22;
  char v23;
  BOOL v24;
  char v25;
  BOOL v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a7 | a6) >= 0x100)
    return FigSignalErrorAt();
  if (a7 <= a6)
    v17 = a6;
  else
    v17 = a7;
  if (a7 >= a6)
    v18 = a6;
  else
    v18 = a7;
  if (*(_DWORD *)(DerivedStorage + 7612) != 1
    || *(_DWORD *)(DerivedStorage + 7620) != a2
    || *(_DWORD *)(DerivedStorage + 7624) != a3
    || *(_DWORD *)(DerivedStorage + 7628) != a4
    || *(_DWORD *)(DerivedStorage + 7632) != a5
    || *(_DWORD *)(DerivedStorage + 7636) != v18
    || *(_DWORD *)(DerivedStorage + 7640) != v17
    || *(unsigned __int8 *)(DerivedStorage + 7583) != a8
    || *(unsigned __int8 *)(DerivedStorage + 7584) != a9)
  {
    if (*(_BYTE *)(DerivedStorage + 521))
      v19 = *(_BYTE *)(DerivedStorage + 624) != 0;
    else
      v19 = 0;
    v21 = *(_DWORD *)(DerivedStorage + 7596);
    if (*(_BYTE *)(DerivedStorage + 521))
      v22 = v21 == 0;
    else
      v22 = 1;
    *(_DWORD *)(DerivedStorage + 7612) = 1;
    v23 = !v22;
    *(_DWORD *)(DerivedStorage + 7620) = a2;
    if (v21 == -1)
      v23 = v19;
    *(_DWORD *)(DerivedStorage + 7624) = a3;
    *(_DWORD *)(DerivedStorage + 7628) = a4;
    *(_DWORD *)(DerivedStorage + 7632) = a5;
    *(_DWORD *)(DerivedStorage + 7636) = v18;
    *(_DWORD *)(DerivedStorage + 7640) = v17;
    if (v18)
      v24 = 0;
    else
      v24 = v17 == 255;
    v25 = !v24;
    *(_BYTE *)(DerivedStorage + 7582) = v25;
    *(_BYTE *)(DerivedStorage + 7584) = a9;
    *(_BYTE *)(DerivedStorage + 7583) = a8;
    *(_BYTE *)(DerivedStorage + 7586) = v23;
    v26 = *(_BYTE *)(DerivedStorage + 621) && *(int *)(DerivedStorage + 656) < 120
       || *(_BYTE *)(DerivedStorage + 622) != 0;
    *(_BYTE *)(DerivedStorage + 7585) = v26;
    *(_BYTE *)(DerivedStorage + 7580) = 0;
    *(_DWORD *)(DerivedStorage + 7688) = 999;
  }
  return 0;
}

uint64_t FigImageControl_AutoExposure(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 1
    || *(_DWORD *)(DerivedStorage + 7476) != a2
    || *(_DWORD *)(DerivedStorage + 7480) != a3
    || *(_DWORD *)(DerivedStorage + 7484) != a4
    || *(_DWORD *)(DerivedStorage + 7488) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 1;
    *(_DWORD *)(DerivedStorage + 7476) = a2;
    *(_DWORD *)(DerivedStorage + 7480) = a3;
    *(_DWORD *)(DerivedStorage + 7484) = a4;
    *(_DWORD *)(DerivedStorage + 7488) = a5;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_VideoModeChange(uint64_t a1, unsigned int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const __CFAllocator *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  uint64_t v19;
  int v20;
  CFNumberRef v21;
  CFNumberRef v22;
  const void *v24;
  int valuePtr;
  int v26;
  int v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  v6 = (_BYTE *)(DerivedStorage + 17704);
  v26 = 0;
  v7 = 616;
  if ((a2 & 0xFFFFFFFE) == 2)
    v7 = 612;
  v8 = *(_DWORD *)(DerivedStorage + v7);
  v27 = v8;
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x68) != 0)
    {
LABEL_18:
      if (v6[1])
        unlockAEnow(a1);
      FigImageControl_RestoreAEValues(a1);
      goto LABEL_21;
    }
    if (((1 << a2) & 6) != 0)
    {
      v9 = FigCapturePlatformIdentifier();
      FigImageControl_SetExposureStabilityZone(a1, 0, flt_1A32B2650[v9 < 10]);
      goto LABEL_18;
    }
  }
  v10 = FigCapturePlatformIdentifier();
  FigImageControl_SetExposureStabilityZone(a1, 0, flt_1A32B2658[v10 < 10]);
  if (a2 != 4)
    goto LABEL_18;
  if (*v6)
  {
LABEL_21:
    v20 = 0;
    v19 = 0;
    goto LABEL_22;
  }
  v11 = (const void *)*MEMORY[0x1E0D07308];
  *(_QWORD *)(v5 + 17672) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:", *MEMORY[0x1E0D07308], 0);
  v12 = (const void *)*MEMORY[0x1E0D07318];
  *(_QWORD *)(v5 + 17680) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:", *MEMORY[0x1E0D07318], 0);
  v13 = (const void *)*MEMORY[0x1E0D072F0];
  *(_QWORD *)(v5 + 17688) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:", *MEMORY[0x1E0D072F0], 0);
  v24 = (const void *)*MEMORY[0x1E0D072F8];
  *(_QWORD *)(v5 + 17696) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:");
  *(_QWORD *)(v5 + 17664) = objc_msgSend(*(id *)(v5 + 8), "copyProperty:error:", *MEMORY[0x1E0D07688], 0);
  valuePtr = *(_DWORD *)(v5 + 1532);
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v11, v15))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v15);
  valuePtr = *(_DWORD *)(v5 + 1536);
  v16 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v12, v16))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v16);
  valuePtr = *(_DWORD *)(v5 + 1540);
  v17 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  if (captureStreamSetPropertyOnActivityScheduler(a1, v13, v17))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v17);
  valuePtr = *(_DWORD *)(v5 + 1544);
  v18 = CFNumberCreate(v14, kCFNumberIntType, &valuePtr);
  v19 = captureStreamSetPropertyOnActivityScheduler(a1, v24, v18);
  if ((_DWORD)v19)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  CFRelease(v18);
  v20 = *(_DWORD *)(v5 + 1528);
  v26 = v20;
  *v6 = 1;
LABEL_22:
  if (v8)
  {
    v21 = CFNumberCreate(0, kCFNumberIntType, &v27);
    v19 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072D8], v21);
    CFRelease(v21);
  }
  if (v20)
  {
    v22 = CFNumberCreate(0, kCFNumberIntType, &v26);
    v19 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07688], v22);
    CFRelease(v22);
  }
  return v19;
}

uint64_t FigImageControl_SetUseFaceLocationForMetering(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 7473) != a2)
  {
    *(_BYTE *)(DerivedStorage + 7473) = a2;
    *(_BYTE *)(DerivedStorage + 7457) = 1;
  }
  return 0;
}

uint64_t FigImageControl_SetExposureStabilityZone(uint64_t a1, int a2, float a3)
{
  uint64_t DerivedStorage;
  int v7;
  int v8;
  int v9;
  CFNumberRef v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  void *v13;
  CFDictionaryRef v14;
  uint64_t v15;
  int v17;
  int valuePtr;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = llroundf((float)(exp2f(a3) + -1.0) * 1024.0);
  v8 = v7 >> 2;
  if (v7 > 31)
    v9 = 1;
  else
    v9 = a2;
  if (!v9)
    v8 = 8;
  v17 = v8;
  valuePtr = v7;
  if (v8 > v7)
    valuePtr = v8;
  v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (*(_BYTE *)(DerivedStorage + 511))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v17);
    v13 = (void *)*MEMORY[0x1E0D070E8];
    keys[0] = *(void **)MEMORY[0x1E0D070F0];
    keys[1] = v13;
    values[0] = v10;
    values[1] = v12;
    v14 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07320], v14);
    CFRelease(v14);
    CFRelease(v12);
  }
  else
  {
    v15 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07320], v10);
  }
  CFRelease(v10);
  return v15;
}

void FigImageControl_RestoreAEValues(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BYTE *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_BYTE *)(DerivedStorage + 17704);
  if (*(_BYTE *)(DerivedStorage + 17704))
  {
    v4 = DerivedStorage;
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07308], *(const void **)(DerivedStorage + 17672));
    v5 = *(const void **)(v4 + 17672);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 17672) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07318], *(const void **)(v4 + 17680));
    v6 = *(const void **)(v4 + 17680);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v4 + 17680) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072F0], *(const void **)(v4 + 17688));
    v7 = *(const void **)(v4 + 17688);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v4 + 17688) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072F8], *(const void **)(v4 + 17696));
    v8 = *(const void **)(v4 + 17696);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v4 + 17696) = 0;
    }
    captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07688], *(const void **)(v4 + 17664));
    v9 = *(const void **)(v4 + 17664);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v4 + 17664) = 0;
    }
    *v3 = 0;
  }
}

uint64_t FigImageControl_SetContinuousAutoFocusAreaOfInterest(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7612) != 1)
    return 4294954516;
  if (*(_DWORD *)(DerivedStorage + 7620) != a2
    || *(_DWORD *)(DerivedStorage + 7624) != a3
    || *(_DWORD *)(DerivedStorage + 7628) != a4
    || *(_DWORD *)(DerivedStorage + 7632) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7620) = a2;
    *(_DWORD *)(DerivedStorage + 7624) = a3;
    *(_DWORD *)(DerivedStorage + 7628) = a4;
    *(_DWORD *)(DerivedStorage + 7632) = a5;
    v11 = *(unsigned __int8 *)(DerivedStorage + 625);
    if (!*(_BYTE *)(DerivedStorage + 625))
    {
      *(_BYTE *)(DerivedStorage + 7581) = 1;
      return v11;
    }
    setupFocusWindowMatrix(a1, a2, a3, a4, a5, *(unsigned __int8 *)(DerivedStorage + 560), 5, 3, 1);
  }
  return 0;
}

uint64_t FigImageControl_SetAutoExposureAreaOfInterest(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) == 1)
  {
    if (*(_DWORD *)(DerivedStorage + 7476) != a2
      || *(_DWORD *)(DerivedStorage + 7480) != a3
      || *(_DWORD *)(DerivedStorage + 7484) != a4
      || *(_DWORD *)(DerivedStorage + 7488) != a5)
    {
      *(_DWORD *)(DerivedStorage + 7476) = a2;
      *(_DWORD *)(DerivedStorage + 7480) = a3;
      *(_DWORD *)(DerivedStorage + 7484) = a4;
      *(_DWORD *)(DerivedStorage + 7488) = a5;
      *(_BYTE *)(DerivedStorage + 7457) = 1;
    }
  }
  else
  {
    FigImageControl_AutoExposure(a1, a2, a3, a4, a5);
  }
  return 0;
}

uint64_t FigImageControl_ConfigureHDRSceneDetection(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  void *v5;
  CFDictionaryRef v6;
  uint64_t v7;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 9061) = a2;
  *(_BYTE *)(DerivedStorage + 9060) = 0;
  v5 = (void *)*MEMORY[0x1E0D07190];
  values = (void *)*MEMORY[0x1E0C9AE50];
  keys[0] = v5;
  v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07578], v6);
  CFRelease(v6);
  return v7;
}

void __captureSession_createClientApplicationStateMonitor_block_invoke(uint64_t a1)
{
  FigCaptureClientApplicationStateMonitor *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  FigCaptureClientApplicationStateMonitor *v6;
  NSString *v7;
  id v8;
  _OWORD v9[2];
  _QWORD v10[4];
  __int128 v11;

  v2 = [FigCaptureClientApplicationStateMonitor alloc];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __captureSession_createClientApplicationStateMonitor_block_invoke_2;
  v10[3] = &__block_descriptor_48_e14_v20__0i8i12i16l;
  v3 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v11 + 64);
  v5 = *(_OWORD *)(a1 + 64);
  v9[0] = v3;
  v9[1] = v5;
  v6 = -[FigCaptureClientApplicationStateMonitor initWithClientAuditToken:mediaEnvironment:forThirdPartyTorch:applicationAndLayoutStateHandler:](v2, "initWithClientAuditToken:mediaEnvironment:forThirdPartyTorch:applicationAndLayoutStateHandler:", v9, v4, 0, v10);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = v6;
  v7 = -[FigCaptureClientApplicationStateMonitor applicationID](v6, "applicationID");
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = -[NSString copy](v7, "copy");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 364) = objc_msgSend((id)FigCaptureGetSupportedPrewarmingBundleIdentifiers(), "containsObject:", v7);
  if (-[NSString isEqualToString:](v7, "isEqualToString:", 0x1E493D4D8)
    || -[NSString isEqualToString:](v7, "isEqualToString:", 0x1E493D5F8))
  {
    os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
    byte_1ECFE9D88 = 1;
    os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
  }
  if (v7 && objc_msgSend((id)FigCaptureGetSupportedPrewarmingBundleIdentifiers(), "containsObject:", v7))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
    os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
    if (!qword_1ECFE9DE0)
      qword_1ECFE9DE0 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v8 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", *(_QWORD *)(a1 + 40));
    objc_msgSend((id)qword_1ECFE9DE0, "setObject:forKeyedSubscript:", v8, v7);
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
    objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "addLayoutObserver:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672));
  }
}

void __captureSession_createClientApplicationStateMonitor_block_invoke_2(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 96))
    captureSession_updateSessionStateWithApplicationAndLayoutState(*(const void **)(a1 + 40), a3 == 1, (a4 - 3) < 2, a4 == 3, a4 == 4);
}

const __CFString *FigCaptureBKSApplicationStateToString(unsigned int a1)
{
  if (a1 > 8)
    return CFSTR("--- Undefined state ---");
  else
    return off_1E4928208[a1];
}

uint64_t BWCIFilterArrayContainsPortraitFilters(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(a1);
        NSClassFromString(CFSTR("CIDepthEffect"));
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(CFSTR("CIPortraitEffect"));
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(CFSTR("CIPortraitEffectV2"));
            if ((objc_opt_isKindOfClass() & 1) == 0)
              continue;
          }
        }
        return 1;
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      result = 0;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

void captureSession_setPreviewRunning(const void *a1, uint64_t a2, void *a3)
{
  const void *v6;
  __CFString **v7;
  __CFString *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "previewRunning") != (_DWORD)a2)
  {
    v9 = CFSTR("SectionID");
    v10[0] = objc_msgSend(a3, "sinkID");
    v6 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = kFigCaptureSessionPreviewSinkNotification_DidStartPreviewing;
    if (!(_DWORD)a2)
      v7 = kFigCaptureSessionPreviewSinkNotification_DidStopPreviewing;
    v8 = *v7;
    objc_msgSend(a3, "setPreviewRunning:", a2);
    captureSession_postNotificationWithPayload(a1, v8, v6);
  }
}

uint64_t getPTEffectRenderRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTEffectRenderRequestClass_softClass;
  v8 = getPTEffectRenderRequestClass_softClass;
  if (!getPTEffectRenderRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectRenderRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTEffectRenderRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DA9F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPTEffectDescriptorClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTEffectDescriptorClass_softClass;
  v8 = getPTEffectDescriptorClass_softClass;
  if (!getPTEffectDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectDescriptorClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTEffectDescriptorClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DAA030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getPTEffectClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTEffectClass_softClass;
  v8 = getPTEffectClass_softClass;
  if (!getPTEffectClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTEffectClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DAA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2DAA82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t cfse_addEndpointInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, const __CFString *a8, void *a9)
{
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[7];
  _QWORD v24[8];

  v24[7] = *MEMORY[0x1E0C80C00];
  v23[0] = CFSTR("endpoint-pid");
  v23[1] = CFSTR("endpoint-proxy-pid");
  v24[0] = a1;
  v24[1] = a2;
  v11 = CFSTR("unknown");
  if (a8)
    v11 = a8;
  v23[2] = CFSTR("endpoint");
  v23[3] = CFSTR("endpoint-uid");
  v24[2] = a3;
  v24[3] = a4;
  v23[4] = CFSTR("endpoint-type");
  v23[5] = CFSTR("endpoint-audit-token");
  v24[4] = a5;
  v24[5] = a6;
  v23[6] = CFSTR("endpoint-camera-uid");
  v24[6] = v11;
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 7));
  v13 = v12;
  if (a7)
    objc_msgSend(v12, "setObject:forKeyedSubscript:", a7, CFSTR("endpoint-proxy-audit-token"));
  v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v13);
  if (!objc_msgSend(a9, "count") || objc_msgSend(a5, "isEqualToString:", CFSTR("InputVideo")))
    return objc_msgSend(a9, "addObject:", v14);
  if (objc_msgSend(a5, "isEqualToString:", CFSTR("ApplicationVideo")))
  {
    v16 = a9;
    v17 = v14;
    v18 = 0;
    return objc_msgSend(v16, "insertObject:atIndex:", v17, v18);
  }
  v19 = objc_msgSend(a5, "isEqualToString:", CFSTR("VideoPreview"));
  v20 = objc_msgSend(a9, "count");
  if ((v19 & 1) != 0)
  {
    if (v20)
    {
      v21 = 0;
      while ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a9, "objectAtIndexedSubscript:", v21), "objectForKeyedSubscript:", CFSTR("endpoint-type")), "isEqualToString:", CFSTR("ApplicationVideo")) & 1) != 0)
      {
        if (++v21 >= (unint64_t)objc_msgSend(a9, "count"))
          return objc_msgSend(a9, "addObject:", v14);
      }
LABEL_23:
      v16 = a9;
      v17 = v14;
      v18 = v21;
      return objc_msgSend(v16, "insertObject:atIndex:", v17, v18);
    }
  }
  else if (v20)
  {
    v21 = 0;
    while (1)
    {
      v22 = (void *)objc_msgSend(a9, "objectAtIndexedSubscript:", v21);
      if ((objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("endpoint-type")), "isEqualToString:", CFSTR("ApplicationVideo")) & 1) == 0&& (objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("endpoint-type")), "isEqualToString:", CFSTR("VideoPreview")) & 1) == 0)
      {
        break;
      }
      if (++v21 >= (unint64_t)objc_msgSend(a9, "count"))
        return objc_msgSend(a9, "addObject:", v14);
    }
    goto LABEL_23;
  }
  return objc_msgSend(a9, "addObject:", v14);
}

void BWPreviewSynchronizerDestroy(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t captureSession_buildGraphWithConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  void *v9;
  void *v10;
  const void *v11;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  BWGraph *v17;
  const char *v18;
  FigCaptureSessionPipelines *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  uint64_t v27;
  void *v28;
  FigCaptureSessionParsedConfiguration *v29;
  FigCaptureSessionParsedConfiguration *v30;
  NSArray *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  FigCaptureSessionPipelines *v36;
  uint64_t j;
  int v38;
  uint64_t v40;
  void *SystemStyle;
  id SystemStyleBackgroundedTimestamp;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t k;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  NSArray *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t m;
  int v63;
  unsigned int v64;
  uint64_t v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t CaptureDeviceID;
  uint64_t v75;
  int SourceDeviceType;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t n;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t ii;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  FigCaptureSessionParsedConfiguration *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t jj;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t kk;
  uint64_t v115;
  void *v116;
  NSArray *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  uint64_t IsSecureCaptureExtension;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  FigCaptureCameraSourcePipelineConfiguration *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  FigCaptureCameraSourcePipeline *v135;
  void *v136;
  id v137;
  id v138;
  uint64_t v139;
  char *v140;
  int v141;
  char v142;
  FigCaptureSessionParsedMicSourceConfiguration *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t PIDFromAuditToken;
  uint64_t v148;
  __int128 v149;
  id v150;
  void *AuxiliaryAVAudioSession;
  uint64_t v152;
  __int128 v153;
  unsigned int v154;
  uint64_t v155;
  _QWORD *v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  void *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  __int128 v168;
  unsigned int v169;
  unsigned int started;
  int v171;
  uint64_t v172;
  unsigned int v173;
  char v174;
  FigCaptureMicSourcePipelineConfiguration *v175;
  uint64_t v176;
  _QWORD *v177;
  __int128 v178;
  _QWORD *v179;
  NSArray *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSArray *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t mm;
  void *v190;
  const __CFString *v191;
  void *v192;
  FigCaptureSessionPipelines *v193;
  NSArray *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t i1;
  NSArray *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t i2;
  uint64_t v204;
  int v205;
  NSArray *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t nn;
  void *v211;
  void *v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  FigCaptureCinematographyPipelineConfiguration *v220;
  NSArray *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t i3;
  void *v227;
  int v228;
  char v229;
  char v230;
  FigCaptureCinematographyPipeline *v231;
  uint64_t v232;
  void *v233;
  void *v234;
  uint64_t v235;
  char *v236;
  void *v237;
  uint64_t v238;
  int v239;
  double v240;
  NSArray *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  float v248;
  NSArray *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  float v257;
  char v259;
  void *v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  void *v267;
  char *v268;
  int StillImageNoiseReductionAndFusionScheme;
  FigCapturePreviewSinkPipelineConfiguration *v270;
  int v271;
  char *v272;
  unint64_t v273;
  unsigned int v274;
  char IsCameraOrDerivative;
  __int128 v276;
  _QWORD *v277;
  void *v278;
  char v279;
  char shouldEnableDeferredNodePrepare;
  char shouldEnableOverCapture;
  double v282;
  char v283;
  char v284;
  char v285;
  char v286;
  char IsLaunchPrewarmingEnabled;
  char v288;
  int v289;
  char shouldEnablePreviewStabilization;
  char shouldEnablePocketDetection;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  FigCaptureSessionPreviewSinkPipeline *v300;
  BWInferenceScheduler *v301;
  FigCaptureSessionPreviewSinkPipeline *v302;
  FigCaptureSessionPreviewSinkPipeline *v303;
  uint64_t v304;
  NSObject *v305;
  unsigned int v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  id v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  BOOL v324;
  uint64_t v325;
  FigCaptureVideoThumbnailSinkPipeline *v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t i4;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  id v341;
  uint64_t v342;
  FigCaptureStillImageSinkPipelineSessionStorage *v343;
  FigCaptureSessionPipelines *v344;
  uint64_t i5;
  void *v346;
  void *v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  void *v353;
  char v354;
  char v355;
  uint64_t v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  char v362;
  id VideoDataSinkPipeline;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  void *v369;
  uint64_t v370;
  id v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  FigCaptureVisionDataSinkPipeline *v377;
  void *v378;
  uint64_t v379;
  __int128 v380;
  _QWORD *v381;
  uint64_t v382;
  FigCaptureSessionParsedConfiguration *v383;
  uint64_t v384;
  unint64_t v385;
  void *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  void *v393;
  void *v394;
  uint64_t v395;
  void *v396;
  uint64_t v397;
  void *v398;
  void *v399;
  void *v400;
  void *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t i6;
  uint64_t v406;
  FigCaptureLiDARDepthPipeline *v407;
  uint64_t v408;
  void *v409;
  FigCaptureLiDARDepthPipeline *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  void *v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  FigCaptureSessionPipelines *v423;
  id v424;
  uint64_t v425;
  id v426;
  id v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  uint64_t v431;
  void *v432;
  char v433;
  FigCaptureDepthDataPipelineConfiguration *DepthDataPipelineConfiguration;
  uint64_t v435;
  uint64_t v436;
  int v437;
  FigCaptureDepthDataPipeline *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  id v442;
  uint64_t v443;
  void *v444;
  void *v445;
  FigCaptureSessionPipelines *v446;
  uint64_t v447;
  uint64_t v448;
  id v449;
  int v450;
  FigCaptureMetadataSinkPipelineConfiguration *v451;
  uint64_t v452;
  id v453;
  id v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  BOOL v458;
  char v459;
  void *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  FigCaptureMetadataSinkPipeline *v468;
  void *v469;
  void *v470;
  BWInferenceScheduler *v471;
  uint64_t v472;
  __int128 v473;
  _QWORD *v474;
  uint64_t v475;
  FigCaptureSessionParsedConfiguration *v476;
  char *v477;
  void *v478;
  void *v479;
  void *v480;
  uint64_t v481;
  _QWORD *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  char v488;
  int v489;
  uint64_t v490;
  FigCaptureSessionPipelines *v491;
  uint64_t v492;
  uint64_t v493;
  char v494;
  int v495;
  FigCaptureMovieFileSinkPipelineConfiguration *MovieFileSinkPipelineConfigurationFromParsedConfiguration;
  NSArray *v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t i7;
  uint64_t v503;
  uint64_t v504;
  int v505;
  uint64_t v506;
  void *v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  char v511;
  char v512;
  void *v513;
  int v514;
  char shouldEnableVideoSTF;
  char shouldEnableVideoGreenGhostMitigation;
  char v517;
  int v518;
  int v519;
  unsigned __int8 v520;
  uint64_t v521;
  uint64_t v522;
  void *v523;
  uint64_t v524;
  FigCaptureSessionMovieFileSinkPipeline *v525;
  uint64_t v526;
  BWInferenceScheduler *v527;
  void *v528;
  uint64_t v529;
  id v530;
  id v531;
  void *v532;
  uint64_t v533;
  void *v534;
  uint64_t v535;
  NSArray *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  void *v541;
  int v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  void *v547;
  unsigned int v548;
  uint64_t v549;
  id *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  int v556;
  uint64_t v557;
  int v558;
  uint64_t v559;
  uint64_t v560;
  void *v561;
  unsigned int v562;
  uint64_t v563;
  uint64_t v564;
  FigCaptureAudioDataSinkPipeline *v565;
  uint64_t v566;
  __int128 v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  void *v573;
  id v574;
  uint64_t v575;
  uint64_t v576;
  FigCapturePointCloudDataSinkPipeline *v577;
  uint64_t v578;
  __int128 v579;
  _QWORD *v580;
  uint64_t v581;
  FigCaptureSessionPipelines *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  id v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  void *v595;
  uint64_t v596;
  FigCaptureCameraCalibrationDataSinkPipeline *v597;
  uint64_t v598;
  __int128 v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t i8;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  id v610;
  uint64_t v611;
  uint64_t v612;
  NSArray *v613;
  uint64_t v614;
  FigCaptureSessionPipelines *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t i9;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  id v627;
  uint64_t v628;
  uint64_t v629;
  BWGraph *v630;
  void *v631;
  void *v632;
  int v633;
  int v634;
  int v635;
  int v636;
  void *v637;
  _DWORD *v638;
  uint64_t result;
  dispatch_source_t v640;
  NSObject *v641;
  dispatch_time_t v642;
  NSObject *v643;
  int v644;
  unsigned int v645;
  NSObject *v646;
  unsigned int v647;
  unsigned int v648;
  NSObject *v649;
  unsigned int v650;
  unsigned int v651;
  uint64_t v652;
  NSObject *v653;
  unsigned int v654;
  unsigned int v655;
  NSObject *v656;
  unsigned int v657;
  unsigned int v658;
  NSObject *v659;
  unsigned int v660;
  unsigned int v661;
  uint64_t v662;
  NSObject *v663;
  unsigned int v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  _OWORD *v668;
  uint64_t v669;
  uint64_t v670;
  _OWORD *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  _BOOL4 v675;
  BOOL IsPlayingToBuiltInSpeaker;
  NSArray *v677;
  uint64_t v678;
  os_unfair_lock_s *lock;
  unsigned int v680;
  uint64_t v681;
  void *v682;
  int v683;
  char *v684;
  uint64_t v685;
  char v686;
  int v687;
  unsigned int v688;
  NSArray *v689;
  unsigned int v690;
  NSArray *v691;
  char *v692;
  id v693;
  unsigned int v694;
  uint64_t v695;
  char IsFullRange;
  uint64_t v697;
  id v698;
  NSArray *v699;
  id v700;
  int v701;
  id v702;
  unsigned int v703;
  char *SystemStyleFromDefaults;
  char v705;
  NSArray *v706;
  char *v707;
  NSArray *obj;
  id obja;
  id objb;
  BWInferenceScheduler *objc;
  char objd;
  id obje;
  FigCaptureMovieFileSinkPipelineConfiguration *objf;
  unsigned int v715;
  id v716;
  char v717;
  NSArray *v718;
  id v719;
  id v720;
  id v721;
  int v722;
  id v723;
  id v724;
  NSArray *v725;
  id v726;
  id v727;
  id v728;
  void *v729;
  void *v730;
  void *v731;
  uint64_t v732;
  void *v733;
  uint64_t v734;
  uint64_t v735;
  id v736;
  id v737;
  char *v738;
  id v739;
  id v740;
  id v741;
  id v742;
  NSArray *v743;
  id v744;
  unsigned int newValue;
  id newValuea;
  id newValueb;
  char *newValuec;
  id newValued;
  _QWORD *newValuee;
  __int128 *newValuef;
  id newValueg;
  id newValueh;
  id newValuei;
  id newValuej;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  void *v760;
  uint64_t v761;
  void *v762;
  void *v763;
  char v764;
  unsigned int v765;
  uint64_t v766;
  uint64_t v767;
  NSArray *v768;
  uint64_t v769;
  NSArray *v770;
  void *v771;
  NSArray *v772;
  BWPipelineStage *v773;
  void *v774;
  id v775[2];
  NSArray *v776;
  NSArray *v777;
  NSArray *v778;
  NSArray *v779;
  uint64_t v780;
  BWGraph *v781;
  FigCaptureSessionParsedConfiguration *v782;
  uint64_t v783;
  uint64_t v784;
  FigCaptureSessionPipelines *v785;
  __int128 v786;
  __int128 v787;
  __int128 v788;
  __int128 v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  __int128 v809;
  __int128 v810;
  uint64_t v811;
  __int128 v812;
  uint64_t v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  id v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  char v895;
  __int16 v896;
  unsigned int v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  __int128 v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  _QWORD v910[6];
  os_log_type_t v911[16];
  __int128 v912;
  __int128 v913;
  __int128 v914;
  unsigned int v915;
  os_log_type_t type[16];
  __int128 v917;
  __int128 v918;
  __int128 v919;
  _BYTE v920[128];
  _BYTE v921[128];
  _BYTE v922[128];
  _BYTE v923[128];
  _BYTE v924[128];
  _BYTE v925[128];
  void *v926;
  _BYTE v927[128];
  _BYTE v928[128];
  _BYTE v929[128];
  _BYTE v930[128];
  _BYTE v931[128];
  _BYTE v932[128];
  _BYTE v933[128];
  _BYTE v934[128];
  _BYTE v935[128];
  _BYTE v936[128];
  _BYTE v937[128];
  _BYTE v938[128];
  _BYTE v939[128];
  _BYTE v940[128];
  _BYTE v941[128];
  _BYTE v942[128];
  _BYTE v943[128];
  _BYTE v944[128];
  _BYTE v945[128];
  _BYTE v946[128];
  _OWORD v947[8];
  __int128 v948;
  __int128 v949;
  __int128 v950;
  __int128 v951;
  __int128 v952;
  __int128 v953;
  __int128 v954;
  __int128 v955;
  _OWORD v956[2];
  __int128 v957;
  __int128 v958;
  __int128 v959;
  __int128 v960;
  id v961;
  _QWORD *v962;
  uint64_t v963;

  v5 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v703 = v6;
  v756 = v7;
  v680 = v8;
  v729 = v9;
  v682 = v10;
  v11 = (const void *)v5;
  v963 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v897 = 0;
  v896 = 0;
  v895 = 0;
  if (!_FigIsCurrentDispatchQueue())
  {
    v672 = v4;
    LODWORD(v667) = 0;
    FigDebugAssert3();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (dword_1ECFE9590)
  {
    LODWORD(v952) = 0;
    LOBYTE(v948) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(DerivedStorage + 592))
  {
    FigDebugAssert3();
    goto LABEL_740;
  }
  v14 = objc_msgSend(*(id *)(DerivedStorage + 616), "count");
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v897 = captureSession_checkClientSessionIsAllowedToRun((uint64_t)v11, v682, (_BYTE *)&v896 + 1, &v895, &v896);
  lock = (os_unfair_lock_s *)(DerivedStorage + 320);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  v675 = v897 == 0;
  if (v897)
    goto LABEL_693;
  if ((int)FigCapturePlatformIdentifier() < 10)
  {
    v15 = 1;
  }
  else if (v895)
  {
    v15 = 3;
  }
  else
  {
    v15 = objc_msgSend(v682, "allCameraSourcesAreMetadataCameras") ^ 1;
  }
  newValue = v15;
  v16 = *(_QWORD **)(DerivedStorage + 672);
  if (v16 && v680)
  {
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "removeLayoutObserver:", *(_QWORD *)(DerivedStorage + 672));
      v16 = *(_QWORD **)(DerivedStorage + 672);
    }

    v16 = -[BWFigCaptureSession initWithFigCaptureSession:]([BWFigCaptureSession alloc], (uint64_t)v11);
    *(_QWORD *)(DerivedStorage + 672) = v16;
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor"), "addLayoutObserver:", *(_QWORD *)(DerivedStorage + 672));
      v16 = *(_QWORD **)(DerivedStorage + 672);
    }
  }
  if (!v16 || (v17 = objc_alloc_init(BWGraph), (*(_QWORD *)(DerivedStorage + 592) = v17) == 0))
  {
    FigDebugAssert3();
LABEL_740:
    v675 = 0;
    v897 = FigSignalErrorAt();
    if (!v897)
      goto LABEL_714;
    goto LABEL_695;
  }
  ++*(_QWORD *)(DerivedStorage + 600);
  v781 = v17;
  -[BWGraph setClientApplicationID:](v17, "setClientApplicationID:", *(_QWORD *)(DerivedStorage + 56));
  objc_msgSend(*(id *)(DerivedStorage + 592), "setClientPID:", *(unsigned int *)(DerivedStorage + 16));
  objc_msgSend(*(id *)(DerivedStorage + 592), "setClientExpectsCameraMountedInLandscapeOrientation:", objc_msgSend(v682, "clientExpectsCameraMountedInLandscapeOrientation"));
  objc_msgSend(*(id *)(DerivedStorage + 592), "setStatusDelegate:", *(_QWORD *)(DerivedStorage + 672));
  v19 = objc_alloc_init(FigCaptureSessionPipelines);
  *(_QWORD *)(DerivedStorage + 624) = v19;
  v20 = *(void **)(DerivedStorage + 672);
  if (v20)
    objc_setProperty_nonatomic(v20, v18, v19, 16);
  v785 = v19;
  objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor", v667, v672), "addLayoutObserverWithoutImmediateCallback:", *(_QWORD *)(DerivedStorage + 672));
  v715 = objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor"), "isDisplayConnected");
  objc_msgSend(*(id *)(DerivedStorage + 592), "beginConfiguration");
  objc_msgSend(*(id *)(DerivedStorage + 592), "setMemoryAnalyticsReportingEnabled:", 1);
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 592), "memoryAnalyticsPayload"), "setClientApplicationID:", *(_QWORD *)(DerivedStorage + 56));
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 592), "memoryAnalyticsPayload"), "setClientIsCameraOrDerivative:", captureSession_clientIsCameraOrDerivative((uint64_t)v11));
  if (objc_msgSend(*(id *)(DerivedStorage + 592), "memoryAnalyticsReportingEnabled"))
    -[FigCaptureMemoryReporter resetPeakFootprint](+[FigCaptureMemoryReporter sharedInstance](FigCaptureMemoryReporter, "sharedInstance"), "resetPeakFootprint");
  v894 = 0u;
  v893 = 0u;
  v892 = 0u;
  v891 = 0u;
  v21 = (void *)objc_msgSend(v682, "connectionConfigurations");
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v891, v946, 16);
  if (v22)
  {
    v23 = v22;
    v24 = *(_QWORD *)v892;
    while (2)
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v892 != v24)
          objc_enumerationMutation(v21);
        v26 = *(void **)(*((_QWORD *)&v891 + 1) + 8 * i);
        v27 = objc_msgSend(v26, "irisSinkConfiguration");
        if (v27)
        {
          v28 = (void *)v27;
          if (objc_msgSend(v26, "mediaType") == 1986618469)
          {
            objc_msgSend(-[FigCaptureSessionPipelines movieFileSinkPipelineWithSinkID:](v785, "movieFileSinkPipelineWithSinkID:", objc_msgSend(v28, "sinkID")), "setMomentCaptureMovieRecordingEnabled:", objc_msgSend(v28, "momentCaptureMovieRecordingEnabled"));
            goto LABEL_37;
          }
        }
      }
      v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v891, v946, 16);
      if (v23)
        continue;
      break;
    }
  }
LABEL_37:
  IsPlayingToBuiltInSpeaker = cs_audioIsPlayingToBuiltInSpeaker((void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance"));
  v29 = -[FigCaptureSessionParsedConfiguration initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:]([FigCaptureSessionParsedConfiguration alloc], "initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:", v682, captureSession_clientSetsUserInitiatedCaptureRequestTime(), *(_QWORD *)(DerivedStorage + 400));
  if (!v29)
    goto LABEL_706;
  v30 = v29;
  *(_BYTE *)(DerivedStorage + 656) = -[FigCaptureSessionParsedConfiguration useOfflineVISPipeline](v29, "useOfflineVISPipeline");
  v887 = 0u;
  v888 = 0u;
  v889 = 0u;
  v890 = 0u;
  v782 = v30;
  v31 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v30, "parsedCameraSourceConfigurations");
  v32 = -[NSArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v887, v945, 16);
  if (v32)
  {
    v33 = v32;
    v34 = 0;
    v35 = *(_QWORD *)v888;
    v36 = v785;
    do
    {
      for (j = 0; j != v33; ++j)
      {
        if (*(_QWORD *)v888 != v35)
          objc_enumerationMutation(v31);
        v38 = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v887 + 1) + 8 * j), "cameraConfiguration"), "sourceDeviceType");
        if (v38 != 5 && v38 != 10)
          ++v34;
      }
      v33 = -[NSArray countByEnumeratingWithState:objects:count:](v31, "countByEnumeratingWithState:objects:count:", &v887, v945, 16);
    }
    while (v33);
  }
  else
  {
    v34 = 0;
    v36 = v785;
  }
  *(_BYTE *)(DerivedStorage + 609) = -[FigCaptureSessionParsedConfiguration empty](v782, "empty");
  captureSession_cancelMemoryPoolPrewarming(0, -[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations"), "count") == 0);
  SystemStyleFromDefaults = -[FigCaptureSessionParsedConfiguration smartStyle](v782, "smartStyle");
  v40 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  SystemStyle = (void *)FigCaptureSmartStyleSettingsGetSystemStyle(v40);
  if (SystemStyle)
  {
    if ((objc_msgSend(SystemStyle, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null")) & 1) == 0)
    {
      SystemStyleBackgroundedTimestamp = FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp(v40);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D68], "now"), "timeIntervalSince1970");
      v44 = v43;
      objc_msgSend(SystemStyleBackgroundedTimestamp, "doubleValue");
      if (v44 - v45 > 30.0)
        FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID(v40);
    }
  }
  v722 = v34;
  if (!SystemStyleFromDefaults)
    SystemStyleFromDefaults = (char *)captureSession_getSystemStyleFromDefaults();
  v783 = (uint64_t)v11;
  v784 = DerivedStorage;
  if (-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations"))
  {
    if (v14)
    {
LABEL_172:
      if ((captureSession_clientIsCameraOrDerivative((uint64_t)v11) & 1) != 0)
        IsSecureCaptureExtension = 1;
      else
        IsSecureCaptureExtension = cs_bundleIdentifierIsSecureCaptureExtension(*(_QWORD *)(DerivedStorage + 56));
      cs_initMemoryPoolSize(IsSecureCaptureExtension);
      -[BWGraph setMemoryPool:](v781, "setMemoryPool:", +[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"));
      v877 = 0u;
      v876 = 0u;
      v875 = 0u;
      v874 = 0u;
      v699 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations");
      v737 = (id)-[NSArray countByEnumeratingWithState:objects:count:](v699, "countByEnumeratingWithState:objects:count:", &v874, v942, 16);
      if (v737)
      {
        objb = *(id *)v875;
        do
        {
          v127 = 0;
          do
          {
            if (*(id *)v875 != objb)
              objc_enumerationMutation(v699);
            v763 = *(void **)(*((_QWORD *)&v874 + 1) + 8 * (_QWORD)v127);
            v128 = objc_msgSend((id)objc_msgSend(v763, "cameraConfiguration"), "sourceID");
            v129 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", v128);
            v130 = -[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v782, "parsedMicSourceConfiguration");
            if (v129)
              newValueb = *(id *)(v129 + 16);
            else
              newValueb = 0;
            v131 = captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration(v783, v763, v130 != 0, v722 > 1, (uint64_t)newValueb, -[FigCaptureSessionParsedConfiguration continuityCameraIsWired](v782, "continuityCameraIsWired"), -[FigCaptureSessionParsedConfiguration continuityCameraClientDeviceClass](v782, "continuityCameraClientDeviceClass"), -[FigCaptureSessionParsedConfiguration clientIsVOIP](v782, "clientIsVOIP"), -[FigCaptureSessionParsedConfiguration suppressVideoEffects](v782, "suppressVideoEffects"), (char *)objc_msgSend(v729, "objectForKeyedSubscript:", v128), -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled"), SystemStyleFromDefaults, v756, &v897);
            if (v897)
              goto LABEL_210;
            v132 = (uint64_t)v131;
            DerivedStorage = v784;
            if (v129)
              v133 = *(_QWORD *)(v129 + 24);
            else
              v133 = 0;
            v11 = (const void *)v783;
            v36 = v785;
            v134 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ Source Pipeline"), v133);
            v135 = [FigCaptureCameraSourcePipeline alloc];
            if (v129)
              v136 = *(void **)(v129 + 16);
            else
              v136 = 0;
            v137 = -[FigCaptureCameraSourcePipeline initWithConfiguration:captureDevice:graph:name:renderDelegate:ispFastSwitchEnabled:error:](v135, v132, v136, *(void **)(v784 + 592), v134, *(_QWORD *)(v784 + 672), v703, (int *)&v897);
            if (!v137)
              goto LABEL_694;
            v138 = v137;
            -[FigCaptureCameraSourcePipeline setBlackenFramesForContinuityDisplayConnected:]((uint64_t)v137, v715);
            -[FigCaptureSessionPipelines addCameraSourcePipeline:](v785, "addCameraSourcePipeline:", v138);
            v127 = (char *)v127 + 1;
          }
          while (v737 != v127);
          v139 = -[NSArray countByEnumeratingWithState:objects:count:](v699, "countByEnumeratingWithState:objects:count:", &v874, v942, 16);
          v737 = (id)v139;
        }
        while (v139);
      }
      goto LABEL_194;
    }
    v46 = -[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations"), "count");
    v762 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v46);
    v685 = v46;
    v736 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v46);
    v883 = 0u;
    v884 = 0u;
    v885 = 0u;
    v886 = 0u;
    obj = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations");
    v47 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v883, v944, 16);
    if (v47)
    {
      v48 = v47;
      v49 = *(_QWORD *)v884;
      v50 = MEMORY[0x1E0C9AAB0];
      do
      {
        for (k = 0; k != v48; ++k)
        {
          if (*(_QWORD *)v884 != v49)
            objc_enumerationMutation(obj);
          v52 = *(void **)(*((_QWORD *)&v883 + 1) + 8 * k);
          v53 = (void *)objc_msgSend(v52, "cameraConfiguration");
          v54 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          if (cs_timeOfFlightAssistedAutoFocusEnabled(v53))
            objc_msgSend(v54, "setObject:forKeyedSubscript:", v50, 0x1E4952D98);
          if (objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v53, "source"), 0x1E4952258), "BOOLValue"))objc_msgSend(v54, "setObject:forKeyedSubscript:", v50, 0x1E4952D78);
          if (objc_msgSend(v53, "depthDataDeliveryEnabled"))
          {
            v55 = objc_msgSend(v53, "sourceDeviceType");
            if (v55 == 12 || v55 == 6)
              objc_msgSend(v54, "setObject:forKeyedSubscript:", v50, 0x1E4952DB8);
          }
          if (*(_BYTE *)(DerivedStorage + 80))
            objc_msgSend(v54, "setObject:forKeyedSubscript:", v50, CFSTR("SuspendAdjustingFocusNotifications"));
          objc_msgSend(v54, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", newValue), 0x1E4952DD8);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v52, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "ultraHighResolutionZeroShutterLagSupportEnabled"))objc_msgSend(v54, "setObject:forKeyedSubscript:", v50, 0x1E4952DF8);
          objc_msgSend(v762, "addObject:", objc_msgSend(v53, "source"));
          objc_msgSend(v736, "addObject:", v54);
        }
        v48 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v883, v944, 16);
      }
      while (v48);
    }
    v882 = 0;
    memset(v956, 0, sizeof(v956));
    v957 = 0u;
    v958 = 0u;
    v57 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v782, "parsedMovieFileSinkConfigurations");
    v58 = -[NSArray countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", v956, &v959, 16);
    if (v58)
    {
      v59 = **(_QWORD **)&v956[1];
      v60 = DerivedStorage;
      v61 = 0x1E0C99000;
      while (2)
      {
        for (m = 0; m != v58; ++m)
        {
          if (**(_QWORD **)&v956[1] != v59)
            objc_enumerationMutation(v57);
          if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v956[0] + 1) + 8 * m), "videoConnectionConfiguration"), "stereoVideoCaptureEnabled") & 1) != 0)
          {
            LODWORD(v58) = 1;
            goto LABEL_93;
          }
        }
        v58 = -[NSArray countByEnumeratingWithState:objects:count:](v57, "countByEnumeratingWithState:objects:count:", v956, &v959, 16);
        if (v58)
          continue;
        break;
      }
    }
    else
    {
      v60 = DerivedStorage;
      v61 = 0x1E0C99000uLL;
    }
LABEL_93:
    v63 = HIBYTE(v896);
    v687 = v896;
    v64 = objc_msgSend(v682, "xctestAuthorizedToStealDevice");
    obja = (id)objc_msgSend(v682, "tccIdentity");
    v698 = *(id *)(v60 + 64);
    v915 = 0;
    v65 = CMBaseObjectGetDerivedStorage();
    v66 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
    v67 = (void *)objc_msgSend(*(id *)(v61 + 3560), "array");
    v68 = objc_msgSend(*(id *)(v61 + 3560), "arrayWithArray:", objc_msgSend(*(id *)(v65 + 720), "allKeys"));
    if (!_FigIsCurrentDispatchQueue())
    {
      v673 = v4;
      LODWORD(v668) = 0;
      FigDebugAssert3();
    }
    v690 = v64;
    newValuea = (id)v68;
    v919 = 0u;
    v918 = 0u;
    v917 = 0u;
    *(_OWORD *)type = 0u;
    v69 = objc_msgSend(v762, "countByEnumeratingWithState:objects:count:", type, &v959, 16, v668, v673);
    if (v69)
    {
      v70 = v69;
      v71 = *(_QWORD *)v917;
LABEL_97:
      v72 = 0;
      while (1)
      {
        if (*(_QWORD *)v917 != v71)
          objc_enumerationMutation(v762);
        v73 = *(_QWORD *)(*(_QWORD *)&type[8] + 8 * v72);
        CaptureDeviceID = FigCaptureSourceGetCaptureDeviceID(v73, &v915);
        if (v915)
        {
          v673 = v4;
          LODWORD(v669) = v915;
          goto LABEL_721;
        }
        v75 = CaptureDeviceID;
        if ((objc_msgSend(v67, "containsObject:", CaptureDeviceID) & 1) == 0)
          objc_msgSend(v67, "addObject:", v75);
        if (objc_msgSend(newValuea, "containsObject:", v75))
          objc_msgSend(newValuea, "removeObject:", v75);
        SourceDeviceType = FigCaptureSourceGetSourceDeviceType(v73, &v915);
        if (v915)
          break;
        if ((SourceDeviceType - 17) < 4)
        {
          v77 = 1;
          goto LABEL_111;
        }
        if (v70 == ++v72)
        {
          v70 = objc_msgSend(v762, "countByEnumeratingWithState:objects:count:", type, &v959, 16);
          if (v70)
            goto LABEL_97;
          goto LABEL_109;
        }
      }
      v673 = v4;
      LODWORD(v669) = v915;
LABEL_721:
      FigDebugAssert3();
LABEL_722:
      v105 = v782;
      if (v915)
        goto LABEL_155;
      goto LABEL_162;
    }
LABEL_109:
    v77 = 0;
LABEL_111:
    v694 = v58;
    v914 = 0u;
    v913 = 0u;
    v912 = 0u;
    *(_OWORD *)v911 = 0u;
    v78 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", v911, v956, 16);
    if (v78)
    {
      v79 = v78;
      v80 = *(_QWORD *)v912;
      do
      {
        for (n = 0; n != v79; ++n)
        {
          if (*(_QWORD *)v912 != v80)
            objc_enumerationMutation(v67);
          v82 = *(_QWORD *)(*(_QWORD *)&v911[8] + 8 * n);
          v83 = objc_msgSend(*(id *)(v65 + 720), "objectForKeyedSubscript:", v82);
          if (v83)
          {
            v84 = v83;
            if (objc_msgSend(v66, "streamsInUseForDevice:", v83))
            {
              objc_msgSend(v66, "invalidateVideoDevice:forPID:", v84, *(unsigned int *)(v65 + 16));
              objc_msgSend(*(id *)(v65 + 720), "setObject:forKeyedSubscript:", 0, v82);
            }
          }
        }
        v79 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", v911, v956, 16);
      }
      while (v79);
    }
    if (objc_msgSend(*(id *)(v65 + 720), "count"))
    {
LABEL_137:
      v909 = 0u;
      v908 = 0u;
      v907 = 0u;
      v906 = 0u;
      v97 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v906, &v952, 16);
      if (v97)
      {
        v98 = v97;
        v99 = *(_QWORD *)v907;
        do
        {
          for (ii = 0; ii != v98; ++ii)
          {
            if (*(_QWORD *)v907 != v99)
              objc_enumerationMutation(v67);
            v101 = *(_QWORD *)(*((_QWORD *)&v906 + 1) + 8 * ii);
            if (!objc_msgSend(*(id *)(v65 + 720), "objectForKeyedSubscript:", v101))
            {
              v102 = objc_msgSend(v66, "copyDeviceWithID:forClient:informClientWhenDeviceAvailableAgain:error:", v101, *(unsigned int *)(v65 + 712), v63 == 0, &v915);
              if (!v102)
                goto LABEL_722;
              v103 = (void *)v102;
              objc_msgSend(*(id *)(v65 + 720), "setObject:forKeyedSubscript:", v102, v101);

            }
          }
          v98 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v906, &v952, 16);
        }
        while (v98);
      }
      v905 = 0u;
      v904 = 0u;
      v903 = 0u;
      v902 = 0u;
      v104 = objc_msgSend(newValuea, "countByEnumeratingWithState:objects:count:", &v902, &v948, 16);
      v105 = v782;
      if (v104)
      {
        v106 = v104;
        v107 = *(_QWORD *)v903;
        do
        {
          for (jj = 0; jj != v106; ++jj)
          {
            if (*(_QWORD *)v903 != v107)
              objc_enumerationMutation(newValuea);
            v109 = *(_QWORD *)(*((_QWORD *)&v902 + 1) + 8 * jj);
            objc_msgSend(v66, "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(v65 + 720), "objectForKeyedSubscript:", v109), *(unsigned int *)(v65 + 712), 0, 0);
            objc_msgSend(*(id *)(v65 + 720), "setObject:forKeyedSubscript:", 0, v109);
          }
          v106 = objc_msgSend(newValuea, "countByEnumeratingWithState:objects:count:", &v902, &v948, 16);
        }
        while (v106);
      }
      v915 = FigVideoCaptureSourcesActivateAndCreateDevices((CFArrayRef)v762, (const __CFArray *)v736, *(void **)(v65 + 56), (uint64_t)obja, (uint64_t)v698, *(void **)(v65 + 720), v694, &v882);
      if (v915)
      {
LABEL_155:
        v901 = 0u;
        v900 = 0u;
        v899 = 0u;
        v898 = 0u;
        v110 = (void *)objc_msgSend(*(id *)(v65 + 720), "allKeys", v669, v673);
        v111 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v898, v947, 16);
        if (v111)
        {
          v112 = v111;
          v113 = *(_QWORD *)v899;
          do
          {
            for (kk = 0; kk != v112; ++kk)
            {
              if (*(_QWORD *)v899 != v113)
                objc_enumerationMutation(v110);
              v115 = *(_QWORD *)(*((_QWORD *)&v898 + 1) + 8 * kk);
              objc_msgSend(v66, "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(v65 + 720), "objectForKeyedSubscript:", v115), *(unsigned int *)(v65 + 712), 0, 0);
              objc_msgSend(*(id *)(v65 + 720), "setObject:forKeyedSubscript:", 0, v115);
            }
            v112 = objc_msgSend(v110, "countByEnumeratingWithState:objects:count:", &v898, v947, 16);
          }
          while (v112);
        }
      }
LABEL_162:
      v897 = v915;
      if (v915)
      {
LABEL_210:
        FigDebugAssert3();
        v11 = (const void *)v783;
        DerivedStorage = v784;
        goto LABEL_694;
      }
      v116 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v685);
      v878 = 0u;
      v879 = 0u;
      v880 = 0u;
      v881 = 0u;
      v117 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v105, "parsedCameraSourceConfigurations");
      v118 = -[NSArray countByEnumeratingWithState:objects:count:](v117, "countByEnumeratingWithState:objects:count:", &v878, v943, 16);
      if (v118)
      {
        v119 = v118;
        v120 = 0;
        v121 = *(_QWORD *)v879;
        do
        {
          v122 = 0;
          v123 = v120;
          do
          {
            if (*(_QWORD *)v879 != v121)
              objc_enumerationMutation(v117);
            v124 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v878 + 1) + 8 * v122), "cameraConfiguration", v669);
            v125 = (void *)objc_msgSend(v882, "objectAtIndexedSubscript:", v123 + v122);
            objc_msgSend(v125, "setClientExpectsCameraMountedInLandscapeOrientation:", objc_msgSend(v682, "clientExpectsCameraMountedInLandscapeOrientation"));
            objc_msgSend(v116, "setObject:forKeyedSubscript:", -[FigCaptureSessionActiveCameraCaptureSource initWithSource:device:]([FigCaptureSessionActiveCameraCaptureSource alloc], (const void *)objc_msgSend(v124, "source"), v125), objc_msgSend(v124, "sourceID"));
            ++v122;
          }
          while (v119 != v122);
          v119 = -[NSArray countByEnumeratingWithState:objects:count:](v117, "countByEnumeratingWithState:objects:count:", &v878, v943, 16);
          v120 = v123 + v122;
        }
        while (v119);
      }
      DerivedStorage = v784;
      *(_QWORD *)(v784 + 616) = objc_msgSend(v116, "copy", v669);

      os_unfair_lock_lock(lock);
      v11 = (const void *)v783;
      v897 = captureSession_checkClientSessionIsAllowedToRun(v783, *(void **)(v784 + 416), 0, 0, 0);
      os_unfair_lock_unlock(lock);
      if (v897)
        goto LABEL_693;
      v36 = v785;
      goto LABEL_172;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v65 + 716));
    v85 = *(unsigned int *)(v65 + 712);
    if ((_DWORD)v85)
    {
      *(_DWORD *)(v65 + 712) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 716));
      objc_msgSend(v66, "unregisterClient:", v85);
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 716));
    }
    v86 = objc_msgSend(*(id *)(v65 + 88), "clientType");
    v87 = *(unsigned int *)(v65 + 16);
    if (v63)
    {
LABEL_126:
      v88 = 0;
LABEL_127:
      v89 = 0;
LABEL_128:
      v90 = 2;
LABEL_136:
      v94 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<FigCaptureSession: %p>"), v783);
      v95 = *(_QWORD *)(v65 + 56);
      v910[0] = MEMORY[0x1E0C809B0];
      v910[1] = 3221225472;
      v910[2] = __captureSession_activateCameraCaptureSourcesAndCreateDevices_block_invoke;
      v910[3] = &unk_1E4922F10;
      v910[5] = v65;
      v910[4] = v783;
      v96 = objc_msgSend(v66, "registerClientWithPID:clientApplicationID:clientDescription:clientPriority:canStealFromClientsWithSamePriority:deviceSharingWithOtherClientsAllowed:deviceAvailabilityChangedHandler:", v87, v95, v94, v90, v88, v89, v910);
      os_unfair_lock_lock((os_unfair_lock_t)(v65 + 716));
      *(_DWORD *)(v65 + 712) = v96;
      os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 716));
      goto LABEL_137;
    }
    v91 = v86;
    if (v86 != 5)
    {
      if (v86 == 6)
      {
        v92 = *(_OWORD *)(v65 + 36);
        v952 = *(_OWORD *)(v65 + 20);
        v953 = v92;
        if (FigCaptureClientIsFacemetricsd(&v952)
          || (objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D4B8) & 1) != 0)
        {
          v88 = 0;
          v89 = 0;
          v90 = 1;
          goto LABEL_136;
        }
        if ((objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D478) & 1) != 0)
        {
          v88 = 0;
          v89 = 0;
          v90 = 3;
          goto LABEL_136;
        }
        if ((objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D538) & 1) != 0
          || (objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D6B8) & 1) != 0)
        {
          v89 = 0;
          v88 = 1;
          v90 = 4;
          goto LABEL_136;
        }
        if ((objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D458) & 1) == 0)
        {
          v88 = objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D678);
          goto LABEL_127;
        }
        goto LABEL_727;
      }
      v93 = *(_OWORD *)(v65 + 36);
      v952 = *(_OWORD *)(v65 + 20);
      v953 = v93;
      if (!FigCaptureClientIsAVConferenced(&v952))
      {
        if (v91 == 8)
        {
          v89 = 0;
          v90 = 2;
          v88 = v690;
          goto LABEL_136;
        }
        if (!v687)
        {
          if ((objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D858) & 1) == 0)
          {
            v90 = 3;
            if (v77)
            {
              v644 = objc_msgSend(*(id *)(v65 + 56), "isEqualToString:", 0x1E493D878);
              v89 = 0;
              if (v644)
                v90 = 1;
              else
                v90 = 3;
              v88 = v644 ^ 1u;
            }
            else
            {
              v89 = 0;
              v88 = 1;
            }
            goto LABEL_136;
          }
          goto LABEL_126;
        }
LABEL_727:
        v89 = 0;
        v88 = 1;
        goto LABEL_128;
      }
    }
    v87 = 0;
    v88 = 1;
    v90 = 3;
    v89 = 1;
    goto LABEL_136;
  }
LABEL_194:
  if (!-[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v782, "parsedMicSourceConfiguration"))
    goto LABEL_247;
  v140 = (char *)objc_msgSend(v682, "sessionPreset");
  v141 = objc_msgSend(v682, "usesAppAudioSession");
  v764 = objc_msgSend(v682, "configuresAppAudioSession");
  v142 = objc_msgSend(v682, "configuresAppAudioSessionToMixWithOthers");
  v143 = -[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v782, "parsedMicSourceConfiguration");
  v144 = CMBaseObjectGetDerivedStorage();
  v145 = (char *)objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedMicSourceConfiguration micConnectionConfigurations](v143, "micConnectionConfigurations"), "firstObject"), "sourceConfiguration");
  newValuec = -[FigCaptureSessionParsedMicSourceConfiguration micConnectionConfigurations](v143, "micConnectionConfigurations");
  if (!_FigIsCurrentDispatchQueue())
  {
    v673 = v4;
    LODWORD(v668) = 0;
    FigDebugAssert3();
  }
  if (*(unsigned __int8 *)(v144 + 232) != v141)
    captureSession_destroyAudioSessionForMicPipeline();
  if (v141 && *(_DWORD *)(v144 + 360) == 1 && FigCaptureAudiomxdSupportEnabled())
  {
    v146 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("FigCaptureSession-%d-proxy"), *(unsigned int *)(v144 + 16));
    captureSession_destroyAudioSessionForMicPipeline();
    v960 = 0u;
    v959 = 0u;
    FigCaptureGetCurrentProcessAuditToken(&v959);
    v956[0] = v959;
    v956[1] = v960;
    PIDFromAuditToken = FigCaptureGetPIDFromAuditToken(v956);
    v956[0] = v959;
    v956[1] = v960;
    *(_QWORD *)(v144 + 216) = cs_createAuxiliaryAVAudioSession(PIDFromAuditToken, (uint64_t)v956, v146);
    *(_BYTE *)(v144 + 256) = 1;
  }
  if (!FigCaptureAudiomxdSupportEnabled() || *(_QWORD *)(v144 + 216))
  {
    if ((FigCaptureAudiomxdSupportEnabled() & 1) != 0 || *(_QWORD *)(v144 + 224))
      goto LABEL_225;
    if (v141)
    {
      if (AudioSessionGetPrimaryAudioSessionIDForAuditToken())
        *(_QWORD *)(v144 + 224) = AudioSessionCopyCMSessionForSessionID();
LABEL_224:
      *(_BYTE *)(v144 + 232) = v141;
      started = captureSession_startObservingAudioInterruptionNotification(v783);
      if (!started)
        goto LABEL_225;
      v645 = started;
      LODWORD(v947[0]) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v653 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v654 = v947[0];
      if (os_log_type_enabled(v653, type[0]))
        v655 = v654;
      else
        v655 = v654 & 0xFFFFFFFE;
      if (!v655)
        goto LABEL_781;
LABEL_775:
      v662 = *(_QWORD *)(v144 + 72);
      LODWORD(v956[0]) = 136315650;
      *(_QWORD *)((char *)v956 + 4) = "captureSession_buildMicSourcePipeline";
      WORD6(v956[0]) = 2114;
      *(_QWORD *)((char *)v956 + 14) = v662;
      WORD3(v956[1]) = 1024;
      DWORD2(v956[1]) = v645;
      _os_log_send_and_compose_impl();
LABEL_781:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_782;
    }
    v165 = CMSessionCreate();
    if (!v165)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("FigCaptureSession-%d"), *(unsigned int *)(v144 + 16));
      v166 = CMSessionSetProperty();
      if (v166)
      {
        v645 = v166;
        LODWORD(v947[0]) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v656 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v657 = v947[0];
        if (os_log_type_enabled(v656, type[0]))
          v658 = v657;
        else
          v658 = v657 & 0xFFFFFFFE;
        if (!v658)
          goto LABEL_781;
        goto LABEL_775;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v144 + 16));
      v167 = CMSessionSetProperty();
      if (v167)
      {
        v645 = v167;
        LODWORD(v947[0]) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v659 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v660 = v947[0];
        if (os_log_type_enabled(v659, type[0]))
          v661 = v660;
        else
          v661 = v660 & 0xFFFFFFFE;
        if (!v661)
          goto LABEL_781;
        goto LABEL_775;
      }
      v168 = *(_OWORD *)(v144 + 36);
      v956[0] = *(_OWORD *)(v144 + 20);
      v956[1] = v168;
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v956, 32);
      v169 = CMSessionSetProperty();
      if (v169)
      {
        v645 = v169;
        *(_DWORD *)type = 0;
        v911[0] = OS_LOG_TYPE_DEFAULT;
        v663 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v664 = *(_DWORD *)type;
        if (os_log_type_enabled(v663, v911[0]))
          v665 = v664;
        else
          v665 = v664 & 0xFFFFFFFE;
        if (v665)
        {
          v666 = *(_QWORD *)(v144 + 72);
          LODWORD(v947[0]) = 136315650;
          *(_QWORD *)((char *)v947 + 4) = "captureSession_buildMicSourcePipeline";
          WORD6(v947[0]) = 2114;
          *(_QWORD *)((char *)v947 + 14) = v666;
          WORD3(v947[1]) = 1024;
          DWORD2(v947[1]) = v645;
          _os_log_send_and_compose_impl();
        }
        goto LABEL_781;
      }
      goto LABEL_224;
    }
    v645 = v165;
LABEL_782:
    v11 = (const void *)v783;
    DerivedStorage = v784;
    v897 = v645;
    goto LABEL_693;
  }
  v148 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("FigCaptureSession-%d"), *(unsigned int *)(v144 + 16));
  if (v141)
  {
    v149 = *(_OWORD *)(v144 + 36);
    v956[0] = *(_OWORD *)(v144 + 20);
    v956[1] = v149;
    v150 = objc_alloc(MEMORY[0x1E0CFF1C8]);
    v959 = v956[0];
    v960 = v956[1];
    AuxiliaryAVAudioSession = (void *)objc_msgSend(v150, "initSiblingSession:auditToken:clientIdentifier:autoReconnect:", 0xFFFFFFFFLL, &v959, v148, 0);
  }
  else
  {
    v152 = *(unsigned int *)(v144 + 16);
    v153 = *(_OWORD *)(v144 + 36);
    v959 = *(_OWORD *)(v144 + 20);
    v960 = v153;
    AuxiliaryAVAudioSession = cs_createAuxiliaryAVAudioSession(v152, (uint64_t)&v959, v148);
  }
  *(_QWORD *)(v144 + 216) = AuxiliaryAVAudioSession;
  if (!AuxiliaryAVAudioSession)
  {
    v645 = -12786;
    goto LABEL_782;
  }
  *(_BYTE *)(v144 + 232) = v141;
  v154 = captureSession_startObservingAudioInterruptionNotification(v783);
  if (v154)
  {
    v645 = v154;
    LODWORD(v947[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v646 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v647 = v947[0];
    if (os_log_type_enabled(v646, type[0]))
      v648 = v647;
    else
      v648 = v647 & 0xFFFFFFFE;
    if (!v648)
      goto LABEL_781;
    goto LABEL_775;
  }
  v155 = CMBaseObjectGetDerivedStorage();
  if (v155)
  {
    v156 = (_QWORD *)v155;
    v738 = v140;
    if (*(_QWORD *)(v155 + 240))
    {
      LODWORD(v947[0]) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v649 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v650 = v947[0];
      if (os_log_type_enabled(v649, type[0]))
        v651 = v650;
      else
        v651 = v650 & 0xFFFFFFFE;
      if (v651)
      {
        v652 = v156[9];
        LODWORD(v956[0]) = 136315394;
        *(_QWORD *)((char *)v956 + 4) = "captureSession_startObservingForAudiomxdDeath";
        WORD6(v956[0]) = 2114;
        *(_QWORD *)((char *)v956 + 14) = v652;
        LODWORD(v673) = 22;
        v668 = v956;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v157 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", v783);
      v158 = (void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance");
      v159 = *MEMORY[0x1E0CFF058];
      v160 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v959 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v959 + 1) = 3221225472;
      *(_QWORD *)&v960 = __captureSession_startObservingForAudiomxdDeath_block_invoke;
      *((_QWORD *)&v960 + 1) = &unk_1E4922F38;
      v961 = v157;
      v962 = v156;
      v161 = (void *)objc_msgSend(v158, "addObserverForType:name:block:", 1, v159, &v959);
      v162 = (void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance");
      v163 = *MEMORY[0x1E0CFF070];
      *(_QWORD *)&v956[0] = v160;
      *((_QWORD *)&v956[0] + 1) = 3221225472;
      *(_QWORD *)&v956[1] = __captureSession_startObservingForAudiomxdDeath_block_invoke_504;
      *((_QWORD *)&v956[1] + 1) = &unk_1E4922F38;
      *(_QWORD *)&v957 = v157;
      *((_QWORD *)&v957 + 1) = v156;
      v164 = (void *)objc_msgSend(v162, "addObserverForType:name:block:", 1, v163, v956);
      v156[30] = v161;
      v156[31] = v164;
    }
    v36 = v785;
    v140 = v738;
  }
LABEL_225:
  v171 = cs_clientWantsAudioResumptionOnBackground(*(void **)(v144 + 56));
  if (v171)
  {
    v172 = *(_QWORD *)(v144 + 224);
    if ((v172 || *(_QWORD *)(v144 + 216)) && !*(_QWORD *)(v144 + 264))
    {
      v637 = *(void **)(v144 + 216);
      if (v637)
      {
        *(_QWORD *)&v959 = 0;
        objc_msgSend(v637, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D49D20], MEMORY[0x1E0C9AAB0], &v959);
      }
      else if (v172)
      {
        v173 = CMSessionSetProperty();
LABEL_703:
        *(_BYTE *)(v144 + 272) = 1;
        v640 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v144 + 104));
        *(_QWORD *)(v144 + 264) = v640;
        if (v640)
        {
          v641 = v640;
          v642 = dispatch_time(0, 300000000000);
          dispatch_source_set_timer(v641, v642, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
          v643 = *(NSObject **)(v144 + 264);
          *(_QWORD *)&v952 = MEMORY[0x1E0C809B0];
          *((_QWORD *)&v952 + 1) = 3221225472;
          *(_QWORD *)&v953 = __captureSession_buildMicSourcePipeline_block_invoke;
          *((_QWORD *)&v953 + 1) = &__block_descriptor_40_e5_v8__0l;
          *(_QWORD *)&v954 = v144;
          dispatch_source_set_event_handler(v643, &v952);
          dispatch_resume(*(dispatch_object_t *)(v144 + 264));
        }
        goto LABEL_230;
      }
      v173 = 0;
      goto LABEL_703;
    }
  }
  v173 = 0;
LABEL_230:
  v174 = v171 ^ 1;
  v175 = objc_alloc_init(FigCaptureMicSourcePipelineConfiguration);
  -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v175, v145);
  -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v175, newValuec);
  -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v175, (char *)-[FigCaptureSessionParsedMicSourceConfiguration cameraConfigurationForStereoAudioCapture](v143, "cameraConfigurationForStereoAudioCapture"));
  -[FigCaptureMetadataSinkPipelineConfiguration setBoxedMetadataEnabled:]((uint64_t)v175, -[FigVideoCaptureConnectionConfiguration physicalMirroringForMovieRecordingEnabled](-[FigCaptureSessionParsedMicSourceConfiguration movieFileVideoConnectionConfigurationForStereoAudioCapture](v143, "movieFileVideoConnectionConfigurationForStereoAudioCapture"), "physicalMirroringForMovieRecordingEnabled"));
  v176 = -[FigCaptureSourceConfiguration sourceID](-[FigCaptureSessionParsedMicSourceConfiguration cameraConfigurationForStereoAudioCapture](v143, "cameraConfigurationForStereoAudioCapture"), "sourceID");
  v11 = (const void *)v783;
  if (v176)
  {
    v177 = (_QWORD *)objc_msgSend(*(id *)(v144 + 616), "objectForKeyedSubscript:", v176);
    if (v177)
      v177 = (_QWORD *)v177[2];
    -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v175, (char *)objc_msgSend(v177, "zoomCommandHandler", v668, v673));
  }
  -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v175, v140);
  -[FigCaptureMicSourcePipelineConfiguration setConfiguresAppAudioSession:]((uint64_t)v175, v764);
  -[FigCaptureMicSourcePipelineConfiguration setAudioSourceNodeShouldCallEndInterruption:]((uint64_t)v175, v174);
  -[FigCaptureMicSourcePipelineConfiguration setConfiguresAppAudioSessionToMixWithOthers:]((uint64_t)v175, v142);
  -[FigCaptureMicSourcePipelineConfiguration setClientOSVersionSupportsDecoupledIO:]((uint64_t)v175, objc_msgSend(v145, "clientOSVersionSupportsDecoupledIO"));
  v178 = *(_OWORD *)(v144 + 36);
  v948 = *(_OWORD *)(v144 + 20);
  v949 = v178;
  -[FigCaptureMicSourcePipelineConfiguration setClientAuditToken:]((uint64_t)v175, (uint64_t)&v948);
  v179 = -[FigCaptureMicSourcePipeline initWithConfiguration:graph:name:audioSession:cmSession:isAppAudioSession:audioSessionIsProxy:audioIsPlayingToBuiltinSpeaker:renderDelegate:]([FigCaptureMicSourcePipeline alloc], (uint64_t)v175, *(void **)(v144 + 592), (uint64_t)CFSTR("Microphone Source Pipeline"), *(_QWORD *)(v144 + 216), *(void **)(v144 + 224), v141, *(_BYTE *)(v144 + 256), IsPlayingToBuiltInSpeaker, *(_QWORD *)(v144 + 672));
  if (v179)
  {
    objc_msgSend(*(id *)(v144 + 624), "setMicSourcePipeline:", v179);
  }
  else
  {
    v673 = v4;
    LODWORD(v668) = 0;
    FigDebugAssert3();
    v173 = FigSignalErrorAt();
  }
  DerivedStorage = v784;
  v897 = v173;
  if (v173)
    goto LABEL_693;
  v873 = 0u;
  v872 = 0u;
  v871 = 0u;
  v870 = 0u;
  v180 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v782, "parsedMovieFileSinkConfigurations");
  v181 = -[NSArray countByEnumeratingWithState:objects:count:](v180, "countByEnumeratingWithState:objects:count:", &v870, v941, 16);
  if (v181)
  {
    v182 = v181;
    v183 = *(_QWORD *)v871;
LABEL_239:
    v184 = 0;
    while (1)
    {
      if (*(_QWORD *)v871 != v183)
        objc_enumerationMutation(v180);
      if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v870 + 1) + 8 * v184), "videoConnectionConfiguration", v668, v673), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled") & 1) != 0)break;
      if (v182 == ++v184)
      {
        v182 = -[NSArray countByEnumeratingWithState:objects:count:](v180, "countByEnumeratingWithState:objects:count:", &v870, v941, 16);
        if (v182)
          goto LABEL_239;
        goto LABEL_245;
      }
    }
  }
  else
  {
LABEL_245:
    if (*(_BYTE *)(v784 + 80))
      -[BWGraph enableDeferredStartForSourceNode:mustStartAfterNonDeferred:](v781, "enableDeferredStartForSourceNode:mustStartAfterNonDeferred:", -[FigCaptureMicSourcePipeline sourceNode]((uint64_t)-[FigCaptureSessionPipelines micSourcePipeline](v36, "micSourcePipeline")), 0);
  }
LABEL_247:
  v869 = 0u;
  v868 = 0u;
  v867 = 0u;
  v866 = 0u;
  v185 = -[FigCaptureSessionParsedConfiguration metadataSourceConfigurations](v782, "metadataSourceConfigurations", v668);
  v186 = -[NSArray countByEnumeratingWithState:objects:count:](v185, "countByEnumeratingWithState:objects:count:", &v866, v940, 16);
  if (v186)
  {
    v187 = v186;
    v188 = *(_QWORD *)v867;
    do
    {
      for (mm = 0; mm != v187; ++mm)
      {
        if (*(_QWORD *)v867 != v188)
          objc_enumerationMutation(v185);
        v190 = *(void **)(*((_QWORD *)&v866 + 1) + 8 * mm);
        if (objc_msgSend(v190, "sourceSubType") != 3)
        {
          if (objc_msgSend(v190, "sourceSubType") == 1)
            v191 = CFSTR("Client Supplied Metadata Source Pipeline");
          else
            v191 = CFSTR("Core Motion Metadata Source Pipeline");
          v192 = -[FigCaptureMetadataSourcePipeline initWithConfiguration:graph:name:errorOut:]([FigCaptureMetadataSourcePipeline alloc], v190, *(void **)(DerivedStorage + 592), (uint64_t)v191, &v897);
          if (v897)
          {
            FigDebugAssert3();
            v11 = (const void *)v783;
            goto LABEL_694;
          }
          -[FigCaptureSessionPipelines addMetadataSourcePipeline:](v785, "addMetadataSourcePipeline:", v192);
        }
      }
      v187 = -[NSArray countByEnumeratingWithState:objects:count:](v185, "countByEnumeratingWithState:objects:count:", &v866, v940, 16);
    }
    while (v187);
  }
  *(_QWORD *)v911 = 0;
  v193 = v785;
  cs_getMasterClockAndType(v785, (uint64_t *)v911, 0);
  if (!*(_QWORD *)v911)
  {
    v204 = -[NSArray count](-[FigCaptureSessionPipelines metadataSourcePipelines](v785, "metadataSourcePipelines"), "count");
    *(_OWORD *)type = 0u;
    v917 = 0u;
    v205 = v204 != 0;
    v918 = 0u;
    v919 = 0u;
    v206 = -[FigCaptureSessionPipelines cameraSourcePipelines](v785, "cameraSourcePipelines");
    v207 = -[NSArray countByEnumeratingWithState:objects:count:](v206, "countByEnumeratingWithState:objects:count:", type, &v952, 16);
    v11 = (const void *)v783;
    if (v207)
    {
      v208 = v207;
      v209 = *(_QWORD *)v917;
      do
      {
        for (nn = 0; nn != v208; ++nn)
        {
          if (*(_QWORD *)v917 != v209)
            objc_enumerationMutation(v206);
          v205 |= -[FigCaptureCameraSourcePipeline requiresMasterClock](*(_QWORD *)(*(_QWORD *)&type[8] + 8 * nn));
        }
        v208 = -[NSArray countByEnumeratingWithState:objects:count:](v206, "countByEnumeratingWithState:objects:count:", type, &v952, 16);
      }
      while (v208);
    }
    if ((v205 & 1) == 0)
      goto LABEL_285;
    v897 = -12783;
LABEL_693:
    FigDebugAssert3();
    goto LABEL_694;
  }
  v951 = 0u;
  v950 = 0u;
  v949 = 0u;
  v948 = 0u;
  v194 = -[FigCaptureSessionPipelines cameraSourcePipelines](v785, "cameraSourcePipelines");
  v195 = -[NSArray countByEnumeratingWithState:objects:count:](v194, "countByEnumeratingWithState:objects:count:", &v948, &v959, 16);
  v11 = (const void *)v783;
  if (v195)
  {
    v196 = v195;
    v197 = *(_QWORD *)v949;
    do
    {
      for (i1 = 0; i1 != v196; ++i1)
      {
        if (*(_QWORD *)v949 != v197)
          objc_enumerationMutation(v194);
        -[FigCaptureCameraSourcePipeline setMasterClock:](*(_QWORD *)(*((_QWORD *)&v948 + 1) + 8 * i1), *(uint64_t *)v911);
      }
      v196 = -[NSArray countByEnumeratingWithState:objects:count:](v194, "countByEnumeratingWithState:objects:count:", &v948, &v959, 16);
    }
    while (v196);
  }
  memset(v947, 0, 64);
  v199 = -[FigCaptureSessionPipelines metadataSourcePipelines](v785, "metadataSourcePipelines");
  v200 = -[NSArray countByEnumeratingWithState:objects:count:](v199, "countByEnumeratingWithState:objects:count:", v947, v956, 16);
  if (v200)
  {
    v201 = v200;
    v202 = **(_QWORD **)&v947[1];
    do
    {
      for (i2 = 0; i2 != v201; ++i2)
      {
        if (**(_QWORD **)&v947[1] != v202)
          objc_enumerationMutation(v199);
        -[FigCaptureMetadataSourcePipeline setMasterClock:](*(_QWORD *)(*((_QWORD *)&v947[0] + 1) + 8 * i2), *(uint64_t *)v911);
      }
      v201 = -[NSArray countByEnumeratingWithState:objects:count:](v199, "countByEnumeratingWithState:objects:count:", v947, v956, 16);
    }
    while (v201);
  }
LABEL_285:
  v897 = 0;
  v862 = 0u;
  v863 = 0u;
  v864 = 0u;
  v865 = 0u;
  v691 = -[FigCaptureSessionParsedConfiguration parsedCinematographyConfigurations](v782, "parsedCinematographyConfigurations");
  v700 = (id)-[NSArray countByEnumeratingWithState:objects:count:](v691, "countByEnumeratingWithState:objects:count:", &v862, v939, 16);
  if (v700)
  {
    v695 = *(_QWORD *)v863;
    do
    {
      v211 = 0;
      do
      {
        if (*(_QWORD *)v863 != v695)
          objc_enumerationMutation(v691);
        v212 = *(void **)(*((_QWORD *)&v862 + 1) + 8 * (_QWORD)v211);
        v213 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v212, "videoPreviewSinkConnectionConfiguration"), "sourceConfiguration"), "sourceID");
        v214 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", v213);
        v730 = v212;
        v215 = objc_msgSend((id)objc_msgSend(v212, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
        if (v214)
        {
          v216 = *(_QWORD *)(v214 + 24);
          v217 = *(_DWORD *)(v214 + 32);
        }
        else
        {
          v216 = 0;
          v217 = 0;
        }
        newValued = (id)FigCaptureBuildSinkPipelineName(v216, v217, v215, (uint64_t)CFSTR("Cinematography Pipeline"));
        v218 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v193, "cameraSourcePipelineWithSourceID:", v213);
        v739 = (id)-[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v218, v215);
        v765 = v215;
        if (-[FigCaptureCameraSourcePipeline depthType](v218) == 3)
        {
          v723 = (id)-[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v218, 7);
          v219 = 2;
        }
        else
        {
          v723 = (id)-[FigCaptureCameraSourcePipeline depthOutput](v218);
          v219 = v215;
        }
        v716 = (id)-[FigCaptureCameraSourcePipeline previewOutputForSourceDeviceType:](v218, v219);
        objc = captureSession_inferenceScheduler();
        v220 = objc_alloc_init(FigCaptureCinematographyPipelineConfiguration);
        v858 = 0u;
        v859 = 0u;
        v860 = 0u;
        v861 = 0u;
        v221 = -[FigCaptureSessionParsedConfiguration parsedMetadataSinkConfigurations](v782, "parsedMetadataSinkConfigurations");
        v222 = -[NSArray countByEnumeratingWithState:objects:count:](v221, "countByEnumeratingWithState:objects:count:", &v858, v938, 16);
        if (v222)
        {
          v223 = v222;
          v224 = 0;
          v225 = *(_QWORD *)v859;
          do
          {
            for (i3 = 0; i3 != v223; ++i3)
            {
              if (*(_QWORD *)v859 != v225)
                objc_enumerationMutation(v221);
              v227 = *(void **)(*((_QWORD *)&v858 + 1) + 8 * i3);
              if (objc_msgSend(v213, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v227, "metadataObjectConnectionConfiguration"), "sourceConfiguration"), "sourceID")))v224 = (char *)objc_msgSend((id)objc_msgSend(v227, "metadataObjectConnectionConfiguration"), "metadataIdentifiers");
            }
            v223 = -[NSArray countByEnumeratingWithState:objects:count:](v221, "countByEnumeratingWithState:objects:count:", &v858, v938, 16);
          }
          while (v223);
        }
        else
        {
          v224 = 0;
        }
        -[FigCaptureCinematographyPipelineConfiguration setObjectMetadataIdentifiers:](v220, v224);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v220, (char *)objc_msgSend(v730, "videoPreviewSinkConnectionConfiguration"));
        v228 = -[FigCaptureCameraSourcePipeline depthType](v218);
        -[FigCaptureMetadataSinkPipelineConfiguration setPearlModuleType:]((uint64_t)v220, v228);
        -[FigCaptureCameraSourcePipelineConfiguration setActionCameraEnabled:]((uint64_t)v220, -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled"));
        -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v220, SystemStyleFromDefaults);
        v229 = -[FigCaptureCameraSourcePipeline preLTMThumbnailEnabled](v218);
        -[FigCaptureMetadataSinkPipelineConfiguration setBoxedMetadataEnabled:]((uint64_t)v220, v229);
        v230 = -[FigCaptureCameraSourcePipeline postColorProcessingThumbnailEnabled](v218);
        -[FigCaptureMetadataSinkPipelineConfiguration setCompressed8BitInputEnabled:]((uint64_t)v220, v230);
        v231 = [FigCaptureCinematographyPipeline alloc];
        v232 = -[FigCaptureCameraSourcePipeline semanticMasksOutputsBySourceDeviceType:](v218, v765);
        v233 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v218);
        v234 = -[FigCaptureCinematographyPipeline initWithConfiguration:videoSourceCaptureOutput:sourceSemanticMasksOutput:previewOutput:auxiliaryOutput:graph:name:sourceID:captureDevice:inferenceScheduler:errorOut:](v231, (uint64_t)v220, (uint64_t)v739, v232, (uint64_t)v716, (uint64_t)v723, v781, (uint64_t)newValued, v213, v233, (uint64_t)objc, &v897);

        v11 = (const void *)v783;
        DerivedStorage = v784;
        if (v897)
          goto LABEL_695;
        v193 = v785;
        -[FigCaptureSessionPipelines addCinematographyPipeline:](v785, "addCinematographyPipeline:", v234);
        v211 = (char *)v211 + 1;
      }
      while (v211 != v700);
      v235 = -[NSArray countByEnumeratingWithState:objects:count:](v691, "countByEnumeratingWithState:objects:count:", &v862, v939, 16);
      v700 = (id)v235;
    }
    while (v235);
  }
  captureSession_teardownImageQueueSinkNodesIfNeeded((uint64_t)v11, -[FigCaptureSessionParsedConfiguration parsedPreviewSinkConfigurations](v782, "parsedPreviewSinkConfigurations"));
  v857 = 0u;
  v856 = 0u;
  v855 = 0u;
  v854 = 0u;
  v677 = -[FigCaptureSessionParsedConfiguration parsedPreviewSinkConfigurations](v782, "parsedPreviewSinkConfigurations");
  v681 = -[NSArray countByEnumeratingWithState:objects:count:](v677, "countByEnumeratingWithState:objects:count:", &v854, v937, 16);
  if (v681)
  {
    v678 = *(_QWORD *)v855;
    do
    {
      v236 = 0;
      do
      {
        if (*(_QWORD *)v855 != v678)
          objc_enumerationMutation(v677);
        v692 = v236;
        v237 = *(void **)(*((_QWORD *)&v854 + 1) + 8 * (_QWORD)v236);
        v740 = (id)objc_msgSend((id)objc_msgSend(v237, "cameraConfiguration"), "sourceID");
        v238 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v193, "cameraSourcePipelineWithSourceID:");
        v239 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v238), "format");
        v724 = (id)objc_msgSend(*(id *)(DerivedStorage + 464), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v237, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
        v688 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 472), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v237, "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "BOOLValue");
        v717 = -[FigCaptureCameraSourcePipeline trueVideoCaptureEnabled](v238);
        newValuee = (_QWORD *)v238;
        v240 = -[FigCaptureCameraSourcePipeline trueVideoCaptureAdditionalZoomFactor](v238);
        v952 = 0u;
        v953 = 0u;
        v954 = 0u;
        v955 = 0u;
        v241 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v782, "parsedMovieFileSinkConfigurations");
        v242 = -[NSArray countByEnumeratingWithState:objects:count:](v241, "countByEnumeratingWithState:objects:count:", &v952, &v959, 16);
        if (v242)
        {
          v243 = v242;
          v244 = *(_QWORD *)v953;
LABEL_318:
          v245 = 0;
          while (1)
          {
            if (*(_QWORD *)v953 != v244)
              objc_enumerationMutation(v241);
            v246 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v952 + 1) + 8 * v245), "videoConnectionConfiguration"), "sourceConfiguration");
            v247 = objc_msgSend((id)objc_msgSend(v246, "requiredFormat"), "dimensions");
            objc_msgSend((id)objc_msgSend(v246, "requiredFormat"), "maxSupportedFrameRate");
            if ((int)v247 >= 3840 && SHIDWORD(v247) >= 2160 && v248 >= 60.0)
              goto LABEL_343;
            if (v243 == ++v245)
            {
              v243 = -[NSArray countByEnumeratingWithState:objects:count:](v241, "countByEnumeratingWithState:objects:count:", &v952, &v959, 16);
              if (v243)
                goto LABEL_318;
              break;
            }
          }
        }
        v951 = 0u;
        v950 = 0u;
        v949 = 0u;
        v948 = 0u;
        v250 = -[FigCaptureSessionParsedConfiguration parsedVideoDataSinkConfigurations](v782, "parsedVideoDataSinkConfigurations");
        v251 = -[NSArray countByEnumeratingWithState:objects:count:](v250, "countByEnumeratingWithState:objects:count:", &v948, v956, 16);
        if (v251)
        {
          v252 = v251;
          v253 = *(_QWORD *)v949;
LABEL_331:
          v254 = 0;
          while (1)
          {
            if (*(_QWORD *)v949 != v253)
              objc_enumerationMutation(v250);
            v255 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v948 + 1) + 8 * v254), "videoDataConnectionConfiguration"), "sourceConfiguration");
            v256 = objc_msgSend((id)objc_msgSend(v255, "requiredFormat"), "dimensions");
            objc_msgSend((id)objc_msgSend(v255, "requiredFormat"), "maxSupportedFrameRate");
            if ((int)v256 >= 3840 && SHIDWORD(v256) >= 2160 && v257 >= 60.0)
              break;
            if (v252 == ++v254)
            {
              v252 = -[NSArray countByEnumeratingWithState:objects:count:](v250, "countByEnumeratingWithState:objects:count:", &v948, v956, 16);
              v259 = 0;
              if (v252)
                goto LABEL_331;
              goto LABEL_344;
            }
          }
LABEL_343:
          v259 = 1;
          goto LABEL_344;
        }
        v259 = 0;
LABEL_344:
        v701 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)newValuee);
        IsFullRange = FigCapturePixelFormatIsFullRange(v239);
        objd = -[FigCaptureCameraSourcePipeline videoHDRImageStatisticsEnabled]((_BOOL8)newValuee);
        v705 = -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled");
        LODWORD(v956[0]) = 0;
        v766 = CMBaseObjectGetDerivedStorage();
        v260 = (void *)objc_msgSend(v237, "cameraConfiguration");
        v261 = objc_msgSend(v237, "videoPreviewSinkConnectionConfiguration");
        v262 = (char *)objc_msgSend(v237, "videoThumbnailConnectionConfiguration");
        v263 = (char *)objc_msgSend(v237, "depthDataConnectionConfiguration");
        v264 = (char *)objc_msgSend(v237, "previewTimeMachineConnectionConfiguration");
        v265 = (char *)objc_msgSend(v237, "previewSmartStyleCoefficientsTimeMachineConnectionConfiguration");
        v266 = (char *)objc_msgSend(v237, "sceneClassifierConnectionConfiguration");
        v267 = (void *)objc_msgSend(v237, "metadataObjectConnectionConfiguration");
        v731 = v237;
        v268 = (char *)objc_msgSend(v237, "stillImageConnectionConfiguration");
        StillImageNoiseReductionAndFusionScheme = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(v260, "source"), v956);
        if (LODWORD(v956[0]))
        {
          v673 = v4;
          LODWORD(v670) = v956[0];
          FigDebugAssert3();
          v270 = 0;
          v11 = (const void *)v783;
          DerivedStorage = v784;
          v193 = v785;
          v277 = newValuee;
          v278 = v731;
        }
        else
        {
          v683 = StillImageNoiseReductionAndFusionScheme;
          v686 = v259;
          v270 = objc_alloc_init(FigCapturePreviewSinkPipelineConfiguration);
          -[FigCaptureMovieFileSinkPipelineConfiguration setCameraConfiguration:](v270, (char *)v261);
          v684 = v262;
          -[FigCaptureMovieFileSinkPipelineConfiguration setVideoConnectionConfiguration:](v270, v262);
          -[FigCaptureMovieFileSinkPipelineConfiguration setAudioConnectionConfiguration:](v270, v263);
          -[FigCaptureMovieFileSinkPipelineConfiguration setCameraDebugInfoMetadataConnectionConfiguration:](v270, v264);
          -[FigCaptureCameraSourcePipelineConfiguration setVideoPreviewSinkConnectionConfiguration:](v270, v265);
          -[FigCaptureMovieFileSinkPipelineConfiguration setDetectedObjectMetadataConnectionConfigurations:](v270, v266);
          v271 = FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(v267);
          if ((FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v267) & 1) != 0 || v271)
            -[FigCaptureMovieFileSinkPipelineConfiguration setDepthDataConnectionConfiguration:](v270, (char *)v267);
          v272 = v268;
          -[FigCapturePreviewSinkPipelineConfiguration setStillImageConnectionConfiguration:](v270, v268);
          v273 = BWInferenceSmartCameraCurrentVersion();
          -[FigCapturePreviewSinkPipelineConfiguration setSceneClassifierPipelineVersion:]((uint64_t)v270, v273 & 0xFFFFFFFFFFFFLL);
          -[FigCapturePreviewSinkPipelineConfiguration setSourceColorSpaceProperties:]((uint64_t)v270, v701);
          -[FigCapturePreviewSinkPipelineConfiguration setSourcePixelFormatIsFullRange:]((uint64_t)v270, IsFullRange);
          v274 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(v260, "source"), (uint64_t)CFSTR("DeviceType")), "intValue");
          -[FigCapturePreviewSinkPipelineConfiguration setSourceIsBravoDevice:]((uint64_t)v270, (v274 < 0xA) & (0x310u >> v274));
          v11 = (const void *)v783;
          IsCameraOrDerivative = captureSession_clientIsCameraOrDerivative(v783);
          -[FigCapturePreviewSinkPipelineConfiguration setClientIsCameraOrDerivative:]((uint64_t)v270, IsCameraOrDerivative);
          v276 = *(_OWORD *)(v766 + 36);
          v959 = *(_OWORD *)(v766 + 20);
          v960 = v276;
          DerivedStorage = v784;
          v277 = newValuee;
          if (+[BWInferenceEngine isNeuralEngineSupported](BWInferenceEngine, "isNeuralEngineSupported", -[FigCapturePreviewSinkPipelineConfiguration setClientAuditToken:]((uint64_t)v270, (uint64_t)&v959).n128_f64[0]))
          {
            v278 = v731;
            if (objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "livePhotoVitalityScoringSupported"))v279 = objc_msgSend((id)objc_msgSend(v272, "irisSinkConfiguration"), "irisMovieCaptureEnabled");
            else
              v279 = 0;
          }
          else
          {
            v279 = 0;
            v278 = v731;
          }
          -[FigCapturePreviewSinkPipelineConfiguration setVitalityScoringEnabled:]((uint64_t)v270, v279);
          shouldEnableDeferredNodePrepare = captureSession_shouldEnableDeferredNodePrepare(v783, (void *)objc_msgSend((id)v261, "sourceConfiguration"), objc_msgSend((id)v261, "enabled"));
          -[FigCapturePreviewSinkPipelineConfiguration setDeferredPrepareEnabled:]((uint64_t)v270, shouldEnableDeferredNodePrepare);
          -[FigCapturePreviewSinkPipelineConfiguration setRemoteVideoPreview:]((uint64_t)v270, *(_BYTE *)(v766 + 168));
          shouldEnableOverCapture = cs_shouldEnableOverCapture(v260);
          -[FigCapturePreviewSinkPipelineConfiguration setOverCaptureEnabled:]((uint64_t)v270, shouldEnableOverCapture);
          -[FigCaptureCameraSourcePipelineConfiguration setForceCNRDisabled:]((uint64_t)v270, objc_msgSend((id)objc_msgSend((id)v261, "videoPreviewSinkConfiguration"), "primaryCaptureRectModificationEnabled"));
          if (objc_msgSend((id)objc_msgSend(v272, "irisSinkConfiguration"), "momentCaptureMovieRecordingEnabled"))v282 = 0.100000001;
          else
            v282 = 0.0;
          -[FigCapturePreviewSinkPipelineConfiguration setVideoStabilizationOverscan:]((uint64_t)v270, v282);
          -[FigCaptureCameraSourcePipelineConfiguration setIspFaceTrackingUseRecognition:]((uint64_t)v270, v717);
          -[FigCapturePreviewSinkPipelineConfiguration setTrueVideoCaptureAdditionalZoomFactor:]((uint64_t)v270, v240);
          v283 = cs_stillImageDepthDataType(v260) == 4;
          -[FigCaptureCameraSourcePipelineConfiguration setConfigureForSIFRStillImageCaptureIfAvailable:]((uint64_t)v270, v283);
          if (objc_msgSend((id)v261, "previewDepthFilterRenderingEnabled"))
            v284 = cs_streamingDepthDataType(v260) == 3;
          else
            v284 = 0;
          -[FigCaptureCameraSourcePipelineConfiguration setSoftISPEnabled:]((uint64_t)v270, v284);
          v285 = objc_msgSend(v260, "smartCameraEnabled");
          if (v683 < 3)
            v286 = v285;
          else
            v286 = 0;
          -[FigCaptureCameraSourcePipelineConfiguration setSensorRawStillImageOutputsEnabledIfAvailable:]((uint64_t)v270, v286);
          if (v271)
            IsLaunchPrewarmingEnabled = FigCaptureSessionIsLaunchPrewarmingEnabled();
          else
            IsLaunchPrewarmingEnabled = 0;
          -[FigCaptureCameraSourcePipelineConfiguration setEnableStillImageSensorOverscanIfAvailable:]((uint64_t)v270, IsLaunchPrewarmingEnabled);
          -[FigCapturePreviewSinkPipelineConfiguration setMaxLossyCompressionLevel:]((uint64_t)v270, +[FigCaptureCameraParameters previewMaxLossyCompressionLevel](FigCaptureCameraParameters, "previewMaxLossyCompressionLevel"));
          if (v261 | (unint64_t)v684)
            v288 = v705;
          else
            v288 = 0;
          -[FigCapturePreviewSinkPipelineConfiguration setSmartStyleRenderingEnabled:]((uint64_t)v270, v288);
          if ((objc_msgSend(v260, "cinematicFramingEnabled") & 1) != 0)
          {
            v289 = 2;
          }
          else if (objc_msgSend(v260, "manualCinematicFramingEnabled"))
          {
            v289 = 2;
          }
          else
          {
            v289 = 1;
          }
          -[FigCapturePreviewSinkPipelineConfiguration setSmartStyleRenderingMethod:]((uint64_t)v270, v289);
          shouldEnablePreviewStabilization = cs_shouldEnablePreviewStabilization(v783, (void *)v261);
          -[FigCapturePreviewSinkPipelineConfiguration setPreviewStabilizationEnabled:]((uint64_t)v270, shouldEnablePreviewStabilization);
          -[FigCaptureMovieFileSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)v270, objc_msgSend(*(id *)(v766 + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(v260, "sourceID")) != 0);
          -[FigCaptureCameraSourcePipelineConfiguration setConfigureForStereoPhotoCaptureSupport:]((uint64_t)v270, objd);
          if (objc_msgSend((id)objc_msgSend((id)v261, "videoPreviewSinkConfiguration"), "zoomPIPOverlayEnabled"))
          {
            LOBYTE(v947[0]) = 0;
            LODWORD(v952) = 0;
            LODWORD(v948) = 0;
            cs_getZoomPIPOverlayConfiguration((void *)v261, (char *)v947, (float *)&v952, (float *)&v948);
            -[FigCaptureCameraSourcePipelineConfiguration setClockSynchronizationEnabled:]((uint64_t)v270, v947[0]);
            -[FigCapturePreviewSinkPipelineConfiguration setZoomPIPMinimumUIZoomFactor:]((uint64_t)v270, *(float *)&v952);
            -[FigCapturePreviewSinkPipelineConfiguration setZoomPIPSlaveStreamingFrameRate:]((uint64_t)v270, *(float *)&v948);
          }
          shouldEnablePocketDetection = cs_shouldEnablePocketDetection(v783, (void *)v261);
          -[FigCapturePreviewSinkPipelineConfiguration setPocketDetectionEnabled:]((uint64_t)v270, shouldEnablePocketDetection);
          -[FigCapturePreviewSinkPipelineConfiguration setParallelGraphRebuildEnabled:]((uint64_t)v270, v680);
          -[FigCapturePreviewSinkPipelineConfiguration setIspFastSwitchEnabled:]((uint64_t)v270, v703);
          -[FigCapturePreviewSinkPipelineConfiguration setRebuildingGraphForTrueVideoTransition:]((uint64_t)v270, v756);
          -[FigCapturePreviewSinkPipelineConfiguration setClientApplicationID:](v270, *(char **)(v766 + 56));
          -[FigCapturePreviewSinkPipelineConfiguration setPreallocatePreviewStitcherOutputBufferPool:]((uint64_t)v270, v686);
          -[FigCaptureMovieFileSinkPipelineConfiguration setLightSourceMaskAndKeypointDescriptorDataEnabled:]((uint64_t)v270, objc_msgSend((id)objc_msgSend(v278, "videoPreviewSinkConnectionConfiguration"), "coreMediaFaceTrackingEnabled"));
          v193 = v785;
        }
        v897 = v956[0];
        if (LODWORD(v956[0]))
          goto LABEL_693;
        v292 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", objc_msgSend(v277, "sourceID"));
        if (v292)
        {
          v293 = *(_QWORD *)(v292 + 24);
          v294 = *(_DWORD *)(v292 + 32);
        }
        else
        {
          v293 = 0;
          v294 = 0;
        }
        v295 = FigCaptureBuildSinkPipelineName(v293, v294, objc_msgSend((id)objc_msgSend(v278, "videoPreviewSinkConnectionConfiguration", v670, v673), "underlyingDeviceType"), (uint64_t)CFSTR("Preview Sink Pipeline"));
        v296 = -[FigCaptureSessionPipelines cinematographyPipelineWithSourceID:](v193, "cinematographyPipelineWithSourceID:", v740);
        v297 = v296;
        if (v296)
          v298 = -[FigCaptureCinematographyPipeline previewOutput](v296);
        else
          v298 = -[FigCaptureCameraSourcePipeline previewOutputForSourceDeviceType:]((uint64_t)v277, objc_msgSend(v278, "sourceDeviceType"));
        v299 = v298;
        v300 = [FigCaptureSessionPreviewSinkPipeline alloc];
        v301 = captureSession_inferenceScheduler();
        v302 = -[FigCapturePreviewSinkPipeline initWithConfiguration:sourcePreviewOutput:imageQueueSinkNode:graph:name:inferenceScheduler:captureDevice:previewTapDelegate:zoomPIPOverlayDelegate:](v300, "initWithConfiguration:sourcePreviewOutput:imageQueueSinkNode:graph:name:inferenceScheduler:captureDevice:previewTapDelegate:zoomPIPOverlayDelegate:", v270, v299, v724, v781, v295, v301, -[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v277), *(_QWORD *)(DerivedStorage + 672), *(_QWORD *)(DerivedStorage + 672));
        if (!v302)
        {
          FigDebugAssert3();
          v897 = FigSignalErrorAt();
          goto LABEL_694;
        }
        v303 = v302;
        -[FigCaptureSessionPreviewSinkPipeline setSourceID:](v302, "setSourceID:", v740);
        -[FigCaptureSessionPreviewSinkPipeline setImageQueueUpdatedNotificationSent:](v303, "setImageQueueUpdatedNotificationSent:", v688);
        if (-[FigCapturePreviewSinkPipeline depthFilterRenderingEnabled](v303, "depthFilterRenderingEnabled"))
          -[FigCaptureCameraSourcePipeline setFaceFilteringDelegate:](v277, (uint64_t)-[FigCapturePreviewSinkPipeline filterNode](v303, "filterNode"));
        v304 = -[FigCaptureCinematographyPipeline cinematicVideoFocusDetectionsProvider](v297);
        -[FigCaptureCameraSourcePipeline setCinematicVideoFocusDetectionsProvider:]((uint64_t)v277, v304);
        if (v756)
        {
          os_unfair_lock_lock(lock);
          if (objc_msgSend(*(id *)(DerivedStorage + 480), "count"))
          {
            -[BWPreviewStitcherNode setWaitsForFencedUpdateBeforeFirstEmit:](-[FigCapturePreviewSinkPipeline previewStitcherNode](v303, "previewStitcherNode"), "setWaitsForFencedUpdateBeforeFirstEmit:", 1);
            if (dword_1ECFE9590)
            {
              LODWORD(v952) = 0;
              LOBYTE(v948) = 0;
              v305 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v306 = v952;
              if (os_log_type_enabled(v305, (os_log_type_t)v948))
                v307 = v306;
              else
                v307 = v306 & 0xFFFFFFFE;
              if (v307)
              {
                v308 = *(_QWORD *)(DerivedStorage + 72);
                LODWORD(v956[0]) = 136315394;
                *(_QWORD *)((char *)v956 + 4) = "captureSession_buildGraphWithConfiguration";
                WORD6(v956[0]) = 2114;
                *(_QWORD *)((char *)v956 + 14) = v308;
                LODWORD(v674) = 22;
                v671 = v956;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          os_unfair_lock_unlock(lock);
        }
        -[FigCaptureSessionPipelines addPreviewSinkPipeline:](v193, "addPreviewSinkPipeline:", v303, v671, v674);
        v236 = v692 + 1;
      }
      while (v692 + 1 != (char *)v681);
      v309 = -[NSArray countByEnumeratingWithState:objects:count:](v677, "countByEnumeratingWithState:objects:count:", &v854, v937, 16);
      v681 = v309;
    }
    while (v309);
  }
  v853 = 0u;
  v852 = 0u;
  v851 = 0u;
  v850 = 0u;
  v725 = -[FigCaptureSessionParsedConfiguration videoThumbnailSinkConfigurations](v782, "videoThumbnailSinkConfigurations");
  v767 = -[NSArray countByEnumeratingWithState:objects:count:](v725, "countByEnumeratingWithState:objects:count:", &v850, v936, 16);
  if (v767)
  {
    newValuef = (__int128 *)(DerivedStorage + 20);
    v757 = *(_QWORD *)v851;
    do
    {
      v310 = 0;
      do
      {
        if (*(_QWORD *)v851 != v757)
          objc_enumerationMutation(v725);
        v311 = *(void **)(*((_QWORD *)&v850 + 1) + 8 * v310);
        v312 = objc_msgSend((id)objc_msgSend(v311, "sourceConfiguration"), "sourceID");
        v313 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v193, "previewSinkPipelineWithSourceID:sourceDeviceType:", v312, objc_msgSend(v311, "underlyingDeviceType"));
        v314 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", v312);
        v315 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v193, "cameraSourcePipelineWithSourceID:", v312);
        v316 = +[FigCaptureCameraParameters previewMaxLossyCompressionLevel](FigCaptureCameraParameters, "previewMaxLossyCompressionLevel");
        if (v314)
        {
          v317 = *(_QWORD *)(v314 + 24);
          LODWORD(v314) = *(_DWORD *)(v314 + 32);
        }
        else
        {
          v317 = 0;
        }
        v318 = FigCaptureBuildSinkPipelineName(v317, v314, objc_msgSend(v311, "underlyingDeviceType"), (uint64_t)CFSTR("Video Thumbnail Sink Pipeline"));
        v319 = objc_msgSend(v313, "videoThumbnailSinkOutputTransform");
        v321 = v320;
        *(_QWORD *)&v956[0] = v319;
        *((_QWORD *)&v956[0] + 1) = v320;
        v323 = objc_msgSend(v313, "outputTransform");
        if (*(_QWORD *)&v956[0])
          v324 = 0;
        else
          v324 = *((_QWORD *)&v956[0] + 1) == 0;
        if (v324)
          v325 = -[FigCaptureCameraSourcePipeline preferredPreviewDimensions](v315);
        else
          v325 = v322;
        v326 = [FigCaptureVideoThumbnailSinkPipeline alloc];
        v327 = objc_msgSend(v313, "videoThumbnailSinkOutput");
        v328 = *(_QWORD *)(v784 + 672);
        v329 = newValuef[1];
        v959 = *newValuef;
        v960 = v329;
        v330 = -[FigCaptureVideoThumbnailSinkPipeline initWithGraph:name:videoSourceOutput:videoSourceTransform:outputTransform:videoThumbnailConnectionConfiguration:maxLossyCompressionLevel:clientAuditToken:notificationDelegate:](v326, v781, v318, v327, v319, v321, v323, v325, v311, v316, &v959, v328);
        if (!v330)
          goto LABEL_713;
        v193 = v785;
        -[FigCaptureSessionPipelines addVideoThumbnailSinkPipeline:](v785, "addVideoThumbnailSinkPipeline:", v330);
        ++v310;
        v11 = (const void *)v783;
        DerivedStorage = v784;
      }
      while (v767 != v310);
      v331 = -[NSArray countByEnumeratingWithState:objects:count:](v725, "countByEnumeratingWithState:objects:count:", &v850, v936, 16);
      v767 = v331;
    }
    while (v331);
  }
  captureSession_cleanUpUnusedPreparedBrackets((uint64_t)v11, -[FigCaptureSessionParsedConfiguration parsedStillImageSinkConfigurations](v782, "parsedStillImageSinkConfigurations"));
  v849 = 0u;
  v848 = 0u;
  v847 = 0u;
  v846 = 0u;
  v768 = -[FigCaptureSessionParsedConfiguration parsedStillImageSinkConfigurations](v782, "parsedStillImageSinkConfigurations");
  v332 = -[NSArray countByEnumeratingWithState:objects:count:](v768, "countByEnumeratingWithState:objects:count:", &v846, v935, 16);
  if (v332)
  {
    v333 = v332;
    v334 = *(_QWORD *)v847;
    do
    {
      for (i4 = 0; i4 != v333; ++i4)
      {
        if (*(_QWORD *)v847 != v334)
          objc_enumerationMutation(v768);
        v336 = *(void **)(*((_QWORD *)&v846 + 1) + 8 * i4);
        v337 = (void *)objc_msgSend(v336, "stillImageConnectionConfiguration");
        v338 = objc_msgSend((id)objc_msgSend(v337, "sourceConfiguration"), "sourceID");
        v339 = objc_msgSend(v337, "underlyingDeviceType");
        v340 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v785, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v337, "sourceConfiguration"), "sourceID"));
        v341 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v785, "previewSinkPipelineWithSourceID:sourceDeviceType:", v338, v339);
        if (objc_msgSend(v336, "pointCloudDataConnectionConfiguration"))
          v342 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v785, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v336, "pointCloudDataConnectionConfiguration"), "sourceConfiguration"), "sourceID"));
        else
          v342 = 0;
        v343 = captureSession_createStillImageSinkPipelineSessionStorage((uint64_t)v11, v336, v340, v342, v341, -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled"), &v897);
        if (v897)
          goto LABEL_693;
        -[FigCaptureSessionPipelines addStillImageSinkPipelineSessionStorage:](v785, "addStillImageSinkPipelineSessionStorage:", v343);
      }
      v333 = -[NSArray countByEnumeratingWithState:objects:count:](v768, "countByEnumeratingWithState:objects:count:", &v846, v935, 16);
    }
    while (v333);
  }
  v845 = 0u;
  v844 = 0u;
  v843 = 0u;
  v842 = 0u;
  v718 = -[FigCaptureSessionParsedConfiguration parsedVideoDataSinkConfigurations](v782, "parsedVideoDataSinkConfigurations");
  v344 = v785;
  v732 = -[NSArray countByEnumeratingWithState:objects:count:](v718, "countByEnumeratingWithState:objects:count:", &v842, v934, 16);
  if (v732)
  {
    v726 = *(id *)v843;
    do
    {
      for (i5 = 0; i5 != v732; ++i5)
      {
        if (*(id *)v843 != v726)
          objc_enumerationMutation(v718);
        v346 = *(void **)(*((_QWORD *)&v842 + 1) + 8 * i5);
        v347 = (void *)objc_msgSend(v346, "videoDataConnectionConfiguration");
        v348 = (void *)objc_msgSend(v346, "metadataObjectConnectionConfiguration");
        LOBYTE(v959) = 0;
        v349 = objc_msgSend((id)objc_msgSend(v346, "cameraConfiguration"), "sourceID");
        v350 = objc_msgSend(v346, "sourceDeviceType");
        v351 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v344, "cameraSourcePipelineWithSourceID:", v349);
        v769 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v344, "previewSinkPipelineWithSourceID:sourceDeviceType:", v349, v350);
        v758 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:sharesBuffersWithOtherConnections:]((uint64_t)v351, v350, (char *)&v959);
        v352 = -[FigCaptureCameraSourcePipeline videoCaptureOutputTransformForSourceDeviceType:]((uint64_t)v351, v350);
        v741 = v353;
        newValueg = (id)v352;
        v354 = FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(v348);
        v355 = FigCaptureMetadataObjectConfigurationRequiresFaceTracking(v348);
        v356 = -[FigCaptureCameraSourcePipeline videoCaptureDimensionsWithoutOverscan]((uint64_t)v351);
        v357 = objc_msgSend((id)objc_msgSend(v346, "cameraConfiguration"), "cinematicFramingEnabled");
        v358 = objc_msgSend((id)objc_msgSend(v346, "cameraConfiguration"), "cinematicFramingEnabled");
        v359 = v357 | objc_msgSend((id)objc_msgSend(v346, "cameraConfiguration"), "cinematicFramingEnabled") | v358;
        if (v359 == 1)
          v356 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v346, "cameraConfiguration"), "requiredFormat"), "cinematicFramingOutputDimensions");
        v360 = objc_msgSend(v347, "videoStabilizationType");
        v361 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v351);
        v362 = -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled");
        VideoDataSinkPipeline = captureSession_createVideoDataSinkPipeline(v783, v758, (uint64_t)newValueg, (uint64_t)v741, v356, v359, v347, v348, v360, v361, v351, v769, v355, v354, v362, v959);
        if (!VideoDataSinkPipeline)
          goto LABEL_713;
        v344 = v785;
        -[FigCaptureSessionPipelines addVideoDataSinkPipeline:](v785, "addVideoDataSinkPipeline:", VideoDataSinkPipeline);
      }
      v732 = -[NSArray countByEnumeratingWithState:objects:count:](v718, "countByEnumeratingWithState:objects:count:", &v842, v934, 16);
    }
    while (v732);
  }
  v11 = (const void *)v783;
  if (-[NSArray count](-[FigCaptureSessionParsedConfiguration parsedVideoDataSinkConfigurations](v782, "parsedVideoDataSinkConfigurations"), "count"))
  {
    captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary(v783);
  }
  v841 = 0u;
  v840 = 0u;
  v839 = 0u;
  v838 = 0u;
  v770 = -[FigCaptureSessionParsedConfiguration parsedVisionDataSinkConfigurations](v782, "parsedVisionDataSinkConfigurations");
  v364 = -[NSArray countByEnumeratingWithState:objects:count:](v770, "countByEnumeratingWithState:objects:count:", &v838, v933, 16);
  if (v364)
  {
    v365 = v364;
    v366 = *(_QWORD *)v839;
    do
    {
      v367 = 0;
      do
      {
        if (*(_QWORD *)v839 != v366)
          objc_enumerationMutation(v770);
        v368 = *(void **)(*((_QWORD *)&v838 + 1) + 8 * v367);
        v369 = (void *)objc_msgSend(v368, "visionDataConnectionConfiguration");
        v370 = objc_msgSend(v368, "videoDataConnectionConfiguration");
        v371 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v344, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v369, "sourceConfiguration"), "sourceID"));
        v372 = objc_msgSend(*(id *)(v784 + 616), "objectForKeyedSubscript:", objc_msgSend(v371, "sourceID"));
        if (v372)
        {
          v373 = *(_QWORD *)(v372 + 24);
          v374 = *(_DWORD *)(v372 + 32);
        }
        else
        {
          v373 = 0;
          v374 = 0;
        }
        v375 = FigCaptureBuildSinkPipelineName(v373, v374, objc_msgSend(v369, "underlyingDeviceType"), (uint64_t)CFSTR("Vision Data Sink Pipeline"));
        v376 = -[FigCaptureCameraSourcePipeline visionDataOutputForSourceDeviceType:]((uint64_t)v371, objc_msgSend(v369, "underlyingDeviceType"));
        v377 = [FigCaptureVisionDataSinkPipeline alloc];
        v378 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v371);
        v379 = *(_QWORD *)(v784 + 672);
        v380 = *(_OWORD *)(v784 + 36);
        v959 = *(_OWORD *)(v784 + 20);
        v960 = v380;
        v381 = -[FigCaptureVisionDataSinkPipeline initWithVisionDataConnectionConfiguration:videoDataConnectionConfiguration:graph:name:visionCaptureOutput:captureDevice:clientAuditToken:delegate:](v377, v369, v370, v781, v375, v376, v378, &v959, v379);
        if (!v381)
          goto LABEL_713;
        v344 = v785;
        -[FigCaptureSessionPipelines addVisionDataSinkPipeline:](v785, "addVisionDataSinkPipeline:", v381);
        ++v367;
        v11 = (const void *)v783;
      }
      while (v365 != v367);
      v382 = -[NSArray countByEnumeratingWithState:objects:count:](v770, "countByEnumeratingWithState:objects:count:", &v838, v933, 16);
      v365 = v382;
    }
    while (v382);
  }
  v837 = 0u;
  v836 = 0u;
  v835 = 0u;
  v834 = 0u;
  v383 = v782;
  v706 = -[FigCaptureSessionParsedConfiguration parsedLiDARDepthPipelineConfigurations](v782, "parsedLiDARDepthPipelineConfigurations");
  v384 = v784;
  v719 = (id)-[NSArray countByEnumeratingWithState:objects:count:](v706, "countByEnumeratingWithState:objects:count:", &v834, v932, 16);
  if (v719)
  {
    obje = *(id *)v835;
    v385 = 0x1E0C99000uLL;
    do
    {
      v386 = 0;
      do
      {
        if (*(id *)v835 != obje)
          objc_enumerationMutation(v706);
        v387 = *(void **)(*((_QWORD *)&v834 + 1) + 8 * (_QWORD)v386);
        v388 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v387, "depthDataConnectionConfiguration"), "sourceConfiguration"), "sourceID");
        v389 = objc_msgSend((id)objc_msgSend(v387, "timeOfFlightCameraConfiguration"), "sourceID");
        v390 = objc_msgSend(*(id *)(v384 + 616), "objectForKeyedSubscript:", v388);
        v391 = objc_msgSend(*(id *)(v384 + 616), "objectForKeyedSubscript:", v389);
        v759 = v388;
        v392 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v344, "cameraSourcePipelineWithSourceID:", v388);
        v727 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v344, "cameraSourcePipelineWithSourceID:", v389);
        v771 = v387;
        newValueh = (id)-[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:](v392, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v387, "depthDataConnectionConfiguration"), "sourceConfiguration"), "sourceDeviceType"));
        v742 = (id)FigCaptureBuildSinkPipelineName((uint64_t)CFSTR("LiDARDepthCamera"), 13, 13, (uint64_t)CFSTR("LiDARDepth Pipeline"));
        v393 = (void *)objc_msgSend(*(id *)(v385 + 3592), "dictionary");
        if (v390)
          v394 = *(void **)(v390 + 16);
        else
          v394 = 0;
        v395 = objc_msgSend(v394, "cameraInfoByPortType");
        if (v391)
          v396 = *(void **)(v391 + 16);
        else
          v396 = 0;
        v397 = objc_msgSend(v396, "cameraInfoByPortType");
        objc_msgSend(v393, "addEntriesFromDictionary:", v395);
        objc_msgSend(v393, "addEntriesFromDictionary:", v397);
        v398 = (void *)objc_msgSend(*(id *)(v385 + 3592), "dictionary");
        v399 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        if (v390)
          v400 = *(void **)(v390 + 16);
        else
          v400 = 0;
        objc_msgSend(v399, "addObjectsFromArray:", objc_msgSend(v400, "captureStreams"));
        v733 = v393;
        if (v391)
          v401 = *(void **)(v391 + 16);
        else
          v401 = 0;
        objc_msgSend(v399, "addObjectsFromArray:", objc_msgSend(v401, "captureStreams"));
        v833 = 0u;
        v832 = 0u;
        v831 = 0u;
        v830 = 0u;
        v402 = objc_msgSend(v399, "countByEnumeratingWithState:objects:count:", &v830, v931, 16);
        if (v402)
        {
          v403 = v402;
          v404 = *(_QWORD *)v831;
          do
          {
            for (i6 = 0; i6 != v403; ++i6)
            {
              if (*(_QWORD *)v831 != v404)
                objc_enumerationMutation(v399);
              objc_msgSend(v398, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(*((_QWORD *)&v830 + 1) + 8 * i6), "sensorIDString"), objc_msgSend(*(id *)(*((_QWORD *)&v830 + 1) + 8 * i6), "portType"));
            }
            v403 = objc_msgSend(v399, "countByEnumeratingWithState:objects:count:", &v830, v931, 16);
          }
          while (v403);
        }
        v406 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput]((uint64_t)v727);
        v407 = [FigCaptureLiDARDepthPipeline alloc];
        if (v390)
          v408 = *(_QWORD *)(v390 + 16);
        else
          v408 = 0;
        v11 = (const void *)v783;
        v384 = v784;
        v383 = v782;
        if (v391)
          v409 = *(void **)(v391 + 16);
        else
          v409 = 0;
        v410 = -[FigCaptureLiDARDepthPipeline initWithCaptureDevice:cameraInfoByPortType:sensorIDStringsByPortType:timeOfFlightCameraType:depthDataCaptureConnectionConfiguration:videoSourceCaptureOutput:pointCloudOutput:graph:name:rgbCameraSourceID:errorOut:](v407, "initWithCaptureDevice:cameraInfoByPortType:sensorIDStringsByPortType:timeOfFlightCameraType:depthDataCaptureConnectionConfiguration:videoSourceCaptureOutput:pointCloudOutput:graph:name:rgbCameraSourceID:errorOut:", v408, v733, v398, objc_msgSend(v409, "timeOfFlightCameraType"), objc_msgSend(v771, "depthDataConnectionConfiguration"), newValueh, v406, v781, v742, v759, &v897);
        v344 = v785;
        -[FigCaptureSessionPipelines addLiDARDepthPipeline:](v785, "addLiDARDepthPipeline:", v410);
        v386 = (char *)v386 + 1;
        v385 = 0x1E0C99000;
      }
      while (v386 != v719);
      v411 = -[NSArray countByEnumeratingWithState:objects:count:](v706, "countByEnumeratingWithState:objects:count:", &v834, v932, 16);
      v719 = (id)v411;
    }
    while (v411);
  }
  v829 = 0u;
  v828 = 0u;
  v826 = 0u;
  v827 = 0u;
  v772 = -[FigCaptureSessionParsedConfiguration parsedDepthDataSinkConfigurations](v383, "parsedDepthDataSinkConfigurations");
  v412 = -[NSArray countByEnumeratingWithState:objects:count:](v772, "countByEnumeratingWithState:objects:count:", &v826, v930, 16);
  if (v412)
  {
    v413 = v412;
    v414 = *(_QWORD *)v827;
    do
    {
      v415 = 0;
      do
      {
        if (*(_QWORD *)v827 != v414)
          objc_enumerationMutation(v772);
        v416 = *(void **)(*((_QWORD *)&v826 + 1) + 8 * v415);
        v417 = (void *)objc_msgSend(v416, "depthDataConnectionConfiguration");
        v418 = objc_msgSend(v416, "videoDataConnectionConfiguration");
        v419 = objc_msgSend(v416, "metadataObjectConnectionConfiguration");
        if (v418)
          v420 = (void *)v418;
        else
          v420 = (void *)v419;
        if (!v417)
          v417 = v420;
        v421 = objc_msgSend((id)objc_msgSend(v417, "sourceConfiguration"), "sourceID");
        v422 = objc_msgSend(v417, "underlyingDeviceType");
        v423 = v344;
        v424 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v344, "previewSinkPipelineWithSourceID:sourceDeviceType:", v421, v422);
        v425 = -[FigCaptureSessionPipelines videoDataSinkPipelineForMetadataWithSourceID:sourceDeviceType:](v423, "videoDataSinkPipelineForMetadataWithSourceID:sourceDeviceType:", v421, v422);
        v426 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v423, "cameraSourcePipelineWithSourceID:", v421);
        v427 = -[FigCaptureSessionPipelines lidarDepthPipelineWithRGBCameraSourceID:](v423, "lidarDepthPipelineWithRGBCameraSourceID:", v421);
        v428 = objc_msgSend(v427, "depthDataSinkOutput");
        if (-[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v425))
        {
          v429 = -[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v425);
          goto LABEL_504;
        }
        if (v428)
        {
          v430 = v427;
LABEL_503:
          v429 = objc_msgSend(v430, "depthDataSinkOutput");
          goto LABEL_504;
        }
        if (objc_msgSend(v424, "depthDataSinkOutput"))
        {
          v430 = v424;
          goto LABEL_503;
        }
        v429 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v426, objc_msgSend(v417, "underlyingDeviceType"));
LABEL_504:
        v431 = v429;
        DerivedStorage = v784;
        v432 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v426);
        v433 = -[FigCaptureCameraSourcePipeline hardwareDepthFilteringEnabled]((_BOOL8)v426);
        DepthDataPipelineConfiguration = captureSession_createDepthDataPipelineConfiguration(v783, v416, v432, v433, v428 != 0);
        v435 = objc_msgSend(*(id *)(v784 + 616), "objectForKeyedSubscript:", objc_msgSend(v426, "sourceID"));
        if (v435)
        {
          v436 = *(_QWORD *)(v435 + 24);
          v437 = *(_DWORD *)(v435 + 32);
        }
        else
        {
          v436 = 0;
          v437 = 0;
        }
        v438 = -[FigCaptureDepthDataPipeline initWithConfiguration:sourceOutput:graph:name:delegate:]([FigCaptureDepthDataPipeline alloc], "initWithConfiguration:sourceOutput:graph:name:delegate:", DepthDataPipelineConfiguration, v431, v781, FigCaptureBuildSinkPipelineName(v436, v437, objc_msgSend(v417, "underlyingDeviceType"), (uint64_t)CFSTR("Depth Data Sink Pipeline")), *(_QWORD *)(v784 + 672));
        v11 = (const void *)v783;
        if (!v438)
        {
          FigDebugAssert3();
LABEL_706:
          v897 = FigSignalErrorAt();
          v675 = 1;
          if (!v897)
            goto LABEL_714;
LABEL_695:
          captureSession_teardownGraph(v11, 0, 0, 0, 0, 0);
          v638 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          goto LABEL_696;
        }
        v344 = v785;
        -[FigCaptureSessionPipelines addDepthDataSinkPipeline:](v785, "addDepthDataSinkPipeline:", v438);
        ++v415;
      }
      while (v413 != v415);
      v439 = -[NSArray countByEnumeratingWithState:objects:count:](v772, "countByEnumeratingWithState:objects:count:", &v826, v930, 16);
      v413 = v439;
    }
    while (v439);
  }
  v824 = 0u;
  v825 = 0u;
  v822 = 0u;
  v823 = 0u;
  v743 = -[FigCaptureSessionParsedConfiguration parsedMetadataSinkConfigurations](v782, "parsedMetadataSinkConfigurations");
  v440 = -[NSArray countByEnumeratingWithState:objects:count:](v743, "countByEnumeratingWithState:objects:count:", &v822, v929, 16);
  if (!v440)
    goto LABEL_544;
  v441 = v440;
  v442 = *(id *)v823;
  v720 = *(id *)v823;
  do
  {
    v443 = 0;
    v734 = v441;
    do
    {
      if (*(id *)v823 != v442)
        objc_enumerationMutation(v743);
      v444 = *(void **)(*((_QWORD *)&v822 + 1) + 8 * v443);
      v445 = (void *)objc_msgSend(v444, "metadataObjectConnectionConfiguration");
      if ((objc_msgSend(v445, "attachMetadataToVideoBuffers") & 1) == 0)
      {
        v446 = v344;
        v447 = objc_msgSend((id)objc_msgSend(v445, "sourceConfiguration"), "sourceID");
        v448 = objc_msgSend(v445, "underlyingDeviceType");
        v449 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v446, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v445, "sourceConfiguration"), "sourceID"));
        v450 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v449);
        v451 = captureSession_createMetadataSinkPipelineConfiguration((uint64_t)v11, v444, v450, &v897);
        if (v897)
        {
          FigDebugAssert3();
          DerivedStorage = v784;
LABEL_694:
          if (!v897)
            goto LABEL_714;
          goto LABEL_695;
        }
        v452 = (uint64_t)v451;
        v453 = -[FigCaptureSessionPipelines depthDataSinkPipelineWithSourceID:sourceDeviceType:](v446, "depthDataSinkPipelineWithSourceID:sourceDeviceType:", v447, v448);
        v773 = (BWPipelineStage *)objc_msgSend(v453, "pipelineStage");
        v454 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v446, "previewSinkPipelineWithSourceID:sourceDeviceType:", v447, v448);
        v455 = -[FigCaptureSessionPipelines videoDataSinkPipelineForMetadataWithSourceID:sourceDeviceType:](v446, "videoDataSinkPipelineForMetadataWithSourceID:sourceDeviceType:", v447, v448);
        if ((FigCaptureMetadataObjectConfigurationRequiresMetadataDetectorPipeline(v445) & 1) != 0
          || FigCaptureMetadataObjectConfigurationRequiresVideoPreviewHistogramPipeline(v445))
        {
          v456 = objc_msgSend(v454, "metadataSinkOutput");
          if (!v456)
            v456 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v449, objc_msgSend(v445, "underlyingDeviceType"));
          v760 = (void *)v456;
          v457 = objc_msgSend(v454, "metadataSinkOutput");
          v458 = -[FigCaptureMetadataSinkPipelineConfiguration compressed8BitInputEnabled](v452);
          if (v457)
            v459 = 0;
          else
            v459 = v458;
          -[FigCaptureMetadataSinkPipelineConfiguration setCompressed8BitInputEnabled:](v452, v459);
        }
        else
        {
          v760 = 0;
        }
        v460 = (void *)objc_msgSend(v453, "videoAndConvertedDepthDataOutput");
        if (!v460)
          v460 = (void *)-[FigCaptureVideoDataSinkPipeline faceTrackingVideoCaptureOutput](v455);
        v461 = -[FigCaptureCameraSourcePipeline detectedObjectsOutputForSourceDeviceType:]((uint64_t)v449, objc_msgSend(v445, "underlyingDeviceType"));
        if (!v461)
          v461 = -[FigCaptureCameraSourcePipeline secureDetectedObjectsOutputForSourceDeviceType:]((uint64_t)v449, objc_msgSend(v445, "underlyingDeviceType"));
        v462 = v455;
        newValuei = (id)-[FigCaptureCameraSourcePipeline eyeReliefStatusOutputForSourceDeviceType:]((uint64_t)v449, objc_msgSend(v445, "underlyingDeviceType"));
        if (!v460)
          v460 = (void *)-[FigCaptureCameraSourcePipeline trackedFacesOutputForSourceDeviceType:]((uint64_t)v449, objc_msgSend(v445, "underlyingDeviceType"));
        v463 = objc_msgSend(*(id *)(v784 + 616), "objectForKeyedSubscript:", objc_msgSend(v449, "sourceID"));
        if (v463)
        {
          v464 = *(_QWORD *)(v463 + 24);
          v465 = *(_DWORD *)(v463 + 32);
        }
        else
        {
          v464 = 0;
          v465 = 0;
        }
        v466 = FigCaptureBuildSinkPipelineName(v464, v465, objc_msgSend(v445, "underlyingDeviceType"), (uint64_t)CFSTR("Metadata Sink Pipeline"));
        v467 = -[FigCaptureSessionPipelines cinematographyPipelineWithSourceID:](v785, "cinematographyPipelineWithSourceID:", v447);
        if (v467)
          v461 = -[FigCaptureCinematographyPipeline detectedObjectsOutput](v467);
        v468 = [FigCaptureMetadataSinkPipeline alloc];
        v469 = (void *)-[FigCaptureVideoDataSinkPipeline offlineVISMotionDataCaptureOutput](v462);
        v470 = (void *)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v449);
        v11 = (const void *)v783;
        v471 = captureSession_inferenceScheduler();
        v472 = *(_QWORD *)(v784 + 672);
        v473 = *(_OWORD *)(v784 + 36);
        v959 = *(_OWORD *)(v784 + 20);
        v960 = v473;
        v474 = -[FigCaptureMetadataSinkPipeline initWithConfiguration:graph:name:videoPreviewOutput:offlineVISMotionDataSourceOutput:objectDetectionSourceOutput:faceTrackingSourceOutput:eyeReliefStatusSourceOutput:captureDevice:faceTrackingPipelineStage:clientAuditToken:inferenceScheduler:delegate:](v468, v452, v781, v466, v760, v469, v461, v460, (uint64_t)newValuei, v470, v773, &v959, (uint64_t)v471, v472);
        if (!v474)
        {
          FigDebugAssert3();
          v897 = FigSignalErrorAt();
          v675 = 1;
          DerivedStorage = v784;
          if (!v897)
            goto LABEL_714;
          goto LABEL_695;
        }
        v344 = v785;
        -[FigCaptureSessionPipelines addMetadataSinkPipeline:](v785, "addMetadataSinkPipeline:", v474);
        v442 = v720;
        v441 = v734;
      }
      ++v443;
    }
    while (v441 != v443);
    v475 = -[NSArray countByEnumeratingWithState:objects:count:](v743, "countByEnumeratingWithState:objects:count:", &v822, v929, 16);
    v441 = v475;
  }
  while (v475);
LABEL_544:
  v820 = 0u;
  v821 = 0u;
  v818 = 0u;
  v819 = 0u;
  v476 = v782;
  v689 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v782, "parsedMovieFileSinkConfigurations");
  v697 = -[NSArray countByEnumeratingWithState:objects:count:](v689, "countByEnumeratingWithState:objects:count:", &v818, v928, 16);
  if (!v697)
    goto LABEL_604;
  v693 = *(id *)v819;
  while (2)
  {
    v477 = 0;
    while (2)
    {
      if (*(id *)v819 != v693)
        objc_enumerationMutation(v689);
      v478 = *(void **)(*((_QWORD *)&v818 + 1) + 8 * (_QWORD)v477);
      v479 = (void *)objc_msgSend(v478, "videoConnectionConfiguration");
      v480 = (void *)objc_msgSend(v478, "audioConnectionConfiguration");
      v774 = v478;
      v481 = objc_msgSend(v478, "detectedObjectMetadataConnectionConfigurations");
      if (v479)
        v482 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v344, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v479, "sourceConfiguration"), "sourceID"));
      else
        v482 = 0;
      v728 = (id)v481;
      if (v480)
        v483 = -[FigCaptureSessionPipelines micSourcePipeline](v344, "micSourcePipeline");
      else
        v483 = 0;
      v484 = -[FigCaptureSessionPipelines cinematographyPipelineWithSourceID:](v344, "cinematographyPipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v479, "sourceConfiguration"), "sourceID"));
      v485 = v484;
      if (v484)
        v486 = -[FigCaptureCinematographyPipeline videoCaptureOutput](v484);
      else
        v486 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v482, objc_msgSend(v479, "underlyingDeviceType"));
      newValuej = (id)v486;
      v487 = -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v483, objc_msgSend(v480, "builtInMicrophonePosition"));
      v488 = objc_msgSend(v480, "audioCaptureMode") != 2 || IsPlayingToBuiltInSpeaker;
      v707 = v477;
      v735 = v487;
      if ((v488 & 1) != 0)
        v721 = 0;
      else
        v721 = (id)-[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v483, objc_msgSend(v480, "builtInMicrophonePosition"));
      v744 = (id)v483;
      objc_msgSend((id)-[FigCaptureMicSourcePipeline sourceNode](v483), "setCinematicVideoCaptureEnabled:", v485 != 0);
      *(_QWORD *)&v959 = 0;
      cs_getMasterClockAndType(v344, (uint64_t *)&v959, 0);
      v489 = objc_msgSend(v479, "videoStabilizationType");
      v702 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v344, "previewSinkPipelineWithSourceID:sourceDeviceType:", objc_msgSend(v482, "sourceID"), objc_msgSend(v479, "underlyingDeviceType"));
      v490 = -[FigCaptureCameraSourcePipeline videoCaptureOutputTransformForSourceDeviceType:]((uint64_t)v482, objc_msgSend((id)objc_msgSend(v479, "sourceConfiguration"), "sourceDeviceType"));
      v491 = v344;
      v493 = v492;
      v494 = -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v782, "smartStyleRenderingEnabled");
      v495 = -[FigCaptureCameraSourcePipeline motionAttachmentsSource]((uint64_t)v482);
      MovieFileSinkPipelineConfigurationFromParsedConfiguration = captureSession_createMovieFileSinkPipelineConfigurationFromParsedConfiguration((uint64_t)v11, v774, v482, v490, v493, v489, v494, v495, IsPlayingToBuiltInSpeaker, v703);
      v497 = -[FigCaptureSessionPipelines metadataSourcePipelines](v491, "metadataSourcePipelines");
      if (-[NSArray count](v497, "count"))
        v498 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", -[NSArray count](v497, "count"));
      else
        v498 = 0;
      v816 = 0u;
      v817 = 0u;
      v814 = 0u;
      v815 = 0u;
      v499 = -[NSArray countByEnumeratingWithState:objects:count:](v497, "countByEnumeratingWithState:objects:count:", &v814, v927, 16);
      if (v499)
      {
        v500 = v499;
        v501 = *(_QWORD *)v815;
        do
        {
          for (i7 = 0; i7 != v500; ++i7)
          {
            if (*(_QWORD *)v815 != v501)
              objc_enumerationMutation(v497);
            objc_msgSend(v498, "addObject:", -[FigCaptureMetadataSourcePipeline output](*(_QWORD *)(*((_QWORD *)&v814 + 1) + 8 * i7)));
          }
          v500 = -[NSArray countByEnumeratingWithState:objects:count:](v497, "countByEnumeratingWithState:objects:count:", &v814, v927, 16);
        }
        while (v500);
      }
      if (v482)
      {
        v503 = objc_msgSend(*(id *)(v784 + 616), "objectForKeyedSubscript:", objc_msgSend(v482, "sourceID"));
        if (v503)
        {
          v504 = *(_QWORD *)(v503 + 24);
          v505 = *(_DWORD *)(v503 + 32);
        }
        else
        {
          v504 = 0;
          v505 = 0;
        }
        v506 = FigCaptureBuildSinkPipelineName(v504, v505, objc_msgSend(v479, "underlyingDeviceType"), (uint64_t)CFSTR("Movie File Sink Pipeline"));
      }
      else
      {
        v507 = (void *)MEMORY[0x1E0CB3940];
        v508 = objc_msgSend(v480, "builtInMicrophonePosition");
        if (v508 > 2)
          v509 = 0;
        else
          v509 = *((_QWORD *)&off_1E4923198 + (int)v508);
        v506 = objc_msgSend(v507, "stringWithFormat:", CFSTR("%@ Microphone Movie File Sink Pipeline"), v509);
      }
      v510 = v506;
      if (cs_shouldConvertToBT2020((uint64_t)v482, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v774, "videoConnectionConfiguration"), "sourceConfiguration"), "colorSpace")))v511 = *(_BYTE *)(v784 + 656) == 0;
      else
        v511 = 0;
      -[FigCaptureMovieFileSinkPipelineConfiguration setP3ToBT2020ConversionEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, v511);
      if (v479)
      {
        v512 = v485 != 0;
        v926 = v479;
        v513 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v926, 1);
        v514 = -[FigCaptureCameraSourcePipeline colorSpaceProperties]((uint64_t)v482);
        shouldEnableVideoSTF = cs_shouldEnableVideoSTF(v513, v512, v514);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoSTFEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, shouldEnableVideoSTF);
        shouldEnableVideoGreenGhostMitigation = cs_shouldEnableVideoGreenGhostMitigation(v479, v512);
        -[FigCaptureMovieFileSinkPipelineConfiguration setVideoGreenGhostMitigationEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, shouldEnableVideoGreenGhostMitigation);
        v517 = -[FigCaptureCameraSourcePipeline isLightSourceMaskAndKeypointDescriptorDataOnVideoCaptureOutputsEnabledForSourceDeviceType:]((uint64_t)v482, objc_msgSend(v479, "underlyingDeviceType"));
        -[FigCaptureMovieFileSinkPipelineConfiguration setLightSourceMaskAndKeypointDescriptorDataEnabled:]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration, v517);
      }
      v761 = (uint64_t)v482;
      -[FigCaptureMovieFileSinkPipelineConfiguration videoSourceCaptureTransform]((uint64_t)MovieFileSinkPipelineConfigurationFromParsedConfiguration);
      v520 = v519 * v518 < 8294400
          && -[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations"), "count") == 1;
      objf = MovieFileSinkPipelineConfigurationFromParsedConfiguration;
      if (-[FigCaptureMovieFileSinkPipelineConfiguration boxedMetadataPostVISEnabled]((_BOOL8)MovieFileSinkPipelineConfigurationFromParsedConfiguration)
        || !objc_msgSend(v728, "count"))
      {
        v522 = v510;
        v523 = 0;
LABEL_595:
        v524 = 0;
      }
      else
      {
        v521 = -[FigCaptureSessionPipelines metadataSinkPipelineWithSourceID:sourceDeviceType:](v785, "metadataSinkPipelineWithSourceID:sourceDeviceType:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v728, "firstObject"), "sourceConfiguration"), "sourceID"), objc_msgSend((id)objc_msgSend(v728, "firstObject"), "underlyingDeviceType"));
        v522 = v510;
        if (v521)
        {
          v523 = (void *)-[FigCaptureMetadataSinkPipeline detectedObjectBoxedMetadataOutputs](v521);
          goto LABEL_595;
        }
        v524 = -[FigCaptureCameraSourcePipeline detectedObjectsOutputForSourceDeviceType:](v761, objc_msgSend(v479, "underlyingDeviceType"));
        v523 = 0;
      }
      v525 = [FigCaptureSessionMovieFileSinkPipeline alloc];
      v526 = *(_QWORD *)(v784 + 592);
      v527 = captureSession_inferenceScheduler();
      v528 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v761);
      v529 = -[FigCaptureMicSourcePipeline sourceNode]((uint64_t)v744);
      v530 = -[FigCaptureMovieFileSinkPipeline initWithConfiguration:videoSourceCaptureOutput:audioSourceCaptureOutput:audioSourceCinematicAudioCaptureOutput:detectedObjectBoxedMetadataOutputs:objectDetectionSourceOutput:metadataSourcePipelineOutputs:graph:name:inferenceScheduler:captureDevice:audioSourceDelegate:fileCoordinatorStatusDelegate:recordingStatusDelegate:irisRequestDelegate:masterClock:delayedCompressorCleanupEnabled:](v525, (uint64_t)objf, (uint64_t)newValuej, v735, (uint64_t)v721, v523, v524, (uint64_t)v498, v526, v522, (uint64_t)v527, v528, v529, *(_QWORD *)(v784 + 672), *(_QWORD *)(v784 + 672), *(_QWORD *)(v784 + 672), v959, v520);
      if (!v530)
        goto LABEL_713;
      v531 = v530;
      objc_msgSend(v530, "setCheckIfFileAlreadyExistForMFO:", objc_msgSend(v682, "checkIfFileAlreadyExistForMFO"));
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v774, "stillImageConnectionConfiguration"), "irisSinkConfiguration"), "irisMovieCaptureEnabled"))
      {
        v532 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v761);
        v812 = *MEMORY[0x1E0CA2E30];
        *(_OWORD *)v775 = v812;
        v813 = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
        v533 = v813;
        objc_msgSend(v532, "setZeroShutterLagEarliestAllowedPTS:", &v812);
        v534 = (void *)objc_msgSend(v702, "timeMachineSinkNode");
        v810 = *(_OWORD *)v775;
        v811 = v533;
        objc_msgSend(v534, "setEarliestAllowedPTS:", &v810);
      }
      v344 = v785;
      -[FigCaptureSessionPipelines addMovieFileSinkPipeline:](v785, "addMovieFileSinkPipeline:", v531);
      v477 = v707 + 1;
      v476 = v782;
      v11 = (const void *)v783;
      if (v707 + 1 != (char *)v697)
        continue;
      break;
    }
    v535 = -[NSArray countByEnumeratingWithState:objects:count:](v689, "countByEnumeratingWithState:objects:count:", &v818, v928, 16);
    v697 = v535;
    if (v535)
      continue;
    break;
  }
LABEL_604:
  v808 = 0u;
  v809 = 0u;
  v806 = 0u;
  v807 = 0u;
  v536 = -[FigCaptureSessionParsedConfiguration audioFileSinkConnectionConfigurations](v476, "audioFileSinkConnectionConfigurations");
  v537 = -[NSArray countByEnumeratingWithState:objects:count:](v536, "countByEnumeratingWithState:objects:count:", &v806, v925, 16);
  if (!v537)
  {
LABEL_618:
    v804 = 0u;
    v805 = 0u;
    v802 = 0u;
    v803 = 0u;
    v776 = -[FigCaptureSessionParsedConfiguration audioDataSinkConnectionConfigurations](v782, "audioDataSinkConnectionConfigurations");
    v551 = -[NSArray countByEnumeratingWithState:objects:count:](v776, "countByEnumeratingWithState:objects:count:", &v802, v924, 16);
    if (v551)
    {
      v552 = v551;
      v553 = *(_QWORD *)v803;
LABEL_620:
      v554 = 0;
      while (1)
      {
        if (*(_QWORD *)v803 != v553)
          objc_enumerationMutation(v776);
        v555 = *(void **)(*((_QWORD *)&v802 + 1) + 8 * v554);
        v556 = objc_msgSend(v555, "audioCaptureMode");
        v557 = -[FigCaptureSessionPipelines micSourcePipeline](v785, "micSourcePipeline");
        v558 = objc_msgSend(v555, "builtInMicrophonePosition");
        v559 = v556 == 2
             ? -[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v557, v558)
             : -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v557, v558);
        v560 = v559;
        v561 = (void *)MEMORY[0x1E0CB3940];
        v562 = objc_msgSend(v555, "builtInMicrophonePosition");
        v563 = v562 > 2 ? 0 : *((_QWORD *)&off_1E4923198 + (int)v562);
        v564 = objc_msgSend(v561, "stringWithFormat:", CFSTR("%@ Microphone Audio Data Sink Pipeline"), v563);
        v565 = [FigCaptureAudioDataSinkPipeline alloc];
        v566 = *(_QWORD *)(v784 + 672);
        v567 = *(_OWORD *)(v784 + 36);
        v959 = *(_OWORD *)(v784 + 20);
        v960 = v567;
        v568 = -[FigCaptureAudioDataSinkPipeline initWithConfiguration:graph:name:sourceAudioOutput:clientAuditToken:renderDelegate:](v565, v555, v781, v564, v560, &v959, v566);
        if (!v568)
          goto LABEL_713;
        -[FigCaptureSessionPipelines addAudioDataSinkPipeline:](v785, "addAudioDataSinkPipeline:", v568);
        if (v552 == ++v554)
        {
          v552 = -[NSArray countByEnumeratingWithState:objects:count:](v776, "countByEnumeratingWithState:objects:count:", &v802, v924, 16);
          if (v552)
            goto LABEL_620;
          break;
        }
      }
    }
    v800 = 0u;
    v801 = 0u;
    v798 = 0u;
    v799 = 0u;
    v777 = -[FigCaptureSessionParsedConfiguration pointCloudDataSinkConnectionConfigurations](v782, "pointCloudDataSinkConnectionConfigurations");
    v569 = -[NSArray countByEnumeratingWithState:objects:count:](v777, "countByEnumeratingWithState:objects:count:", &v798, v923, 16);
    if (v569)
    {
      v570 = v569;
      v571 = *(_QWORD *)v799;
LABEL_634:
      v572 = 0;
      while (1)
      {
        if (*(_QWORD *)v799 != v571)
          objc_enumerationMutation(v777);
        v573 = *(void **)(*((_QWORD *)&v798 + 1) + 8 * v572);
        v574 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v785, "cameraSourcePipelineWithSourceID:", objc_msgSend((id)objc_msgSend(v573, "sourceConfiguration"), "sourceID"));
        v575 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ Point Cloud Data Sink Pipeline"), objc_msgSend(v574, "name"));
        v576 = -[FigCaptureCameraSourcePipeline nextPointCloudOutput]((uint64_t)v574);
        v577 = [FigCapturePointCloudDataSinkPipeline alloc];
        v578 = *(_QWORD *)(v784 + 672);
        v579 = *(_OWORD *)(v784 + 36);
        v959 = *(_OWORD *)(v784 + 20);
        v960 = v579;
        v580 = -[FigCapturePointCloudDataSinkPipeline initWithConfiguration:sourceOutput:graph:name:clientAuditToken:delegate:](v577, v573, v576, v781, v575, &v959, v578);
        if (!v580)
          goto LABEL_713;
        -[FigCaptureSessionPipelines addPointCloudDataSinkPipeline:](v785, "addPointCloudDataSinkPipeline:", v580);
        if (v570 == ++v572)
        {
          v570 = -[NSArray countByEnumeratingWithState:objects:count:](v777, "countByEnumeratingWithState:objects:count:", &v798, v923, 16);
          if (v570)
            goto LABEL_634;
          break;
        }
      }
    }
    v796 = 0u;
    v797 = 0u;
    v794 = 0u;
    v795 = 0u;
    v778 = -[FigCaptureSessionParsedConfiguration cameraCalibrationDataSinkConnectionConfigurations](v782, "cameraCalibrationDataSinkConnectionConfigurations");
    v581 = -[NSArray countByEnumeratingWithState:objects:count:](v778, "countByEnumeratingWithState:objects:count:", &v794, v922, 16);
    v582 = v785;
    if (v581)
    {
      v583 = v581;
      v584 = *(_QWORD *)v795;
LABEL_642:
      v585 = 0;
      while (1)
      {
        if (*(_QWORD *)v795 != v584)
          objc_enumerationMutation(v778);
        v586 = *(void **)(*((_QWORD *)&v794 + 1) + 8 * v585);
        v587 = objc_msgSend((id)objc_msgSend(v586, "sourceConfiguration"), "sourceID");
        v588 = objc_msgSend(v586, "underlyingDeviceType");
        v589 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v582, "cameraSourcePipelineWithSourceID:", v587);
        v590 = objc_msgSend(*(id *)(v784 + 616), "objectForKeyedSubscript:", objc_msgSend(v589, "sourceID"));
        v591 = v590;
        if (v590)
        {
          v590 = *(_QWORD *)(v590 + 24);
          v592 = *(_DWORD *)(v591 + 32);
        }
        else
        {
          v592 = 0;
        }
        v593 = FigCaptureBuildSinkPipelineName(v590, v592, v588, (uint64_t)CFSTR("Calibration Data Sink Pipeline"));
        v594 = -[FigCaptureCameraSourcePipeline nextVideoCaptureOutputForSourceDeviceType:]((uint64_t)v589, v588);
        v595 = v591 ? *(void **)(v591 + 16) : 0;
        v596 = objc_msgSend(v595, "cameraInfoByPortType");
        v597 = [FigCaptureCameraCalibrationDataSinkPipeline alloc];
        v598 = *(_QWORD *)(v784 + 672);
        v599 = *(_OWORD *)(v784 + 36);
        v959 = *(_OWORD *)(v784 + 20);
        v960 = v599;
        v600 = -[FigCaptureCameraCalibrationDataSinkPipeline initWithConfiguration:sourceOutput:graph:name:cameraInfoByPortType:clientAuditToken:delegate:](v597, v586, v594, v781, v593, v596, &v959, v598);
        if (!v600)
          goto LABEL_713;
        v582 = v785;
        -[FigCaptureSessionPipelines addCameraCalibrationDataSinkPipeline:](v785, "addCameraCalibrationDataSinkPipeline:", v600);
        if (v583 == ++v585)
        {
          v601 = -[NSArray countByEnumeratingWithState:objects:count:](v778, "countByEnumeratingWithState:objects:count:", &v794, v922, 16);
          v583 = v601;
          if (v601)
            goto LABEL_642;
          break;
        }
      }
    }
    v792 = 0u;
    v793 = 0u;
    v790 = 0u;
    v791 = 0u;
    v779 = -[FigCaptureSessionParsedConfiguration parsedMetadataSinkConfigurations](v782, "parsedMetadataSinkConfigurations");
    v602 = -[NSArray countByEnumeratingWithState:objects:count:](v779, "countByEnumeratingWithState:objects:count:", &v790, v921, 16);
    DerivedStorage = v784;
    if (v602)
    {
      v603 = v602;
      v604 = *(_QWORD *)v791;
      do
      {
        for (i8 = 0; i8 != v603; ++i8)
        {
          if (*(_QWORD *)v791 != v604)
            objc_enumerationMutation(v779);
          v606 = *(void **)(*((_QWORD *)&v790 + 1) + 8 * i8);
          if (captureSession_shouldUseSceneClassifierToGateMetadataDetection(v783, objc_msgSend(v606, "sceneClassifierConnectionConfiguration"), (void *)objc_msgSend(v606, "metadataObjectConnectionConfiguration")))
          {
            v607 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v606, "metadataObjectConnectionConfiguration"), "sourceConfiguration"), "sourceID");
            v608 = objc_msgSend((id)objc_msgSend(v606, "metadataObjectConnectionConfiguration"), "underlyingDeviceType");
            v609 = -[FigCaptureSessionPipelines metadataSinkPipelineWithSinkID:](v785, "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v606, "metadataObjectConnectionConfiguration"), "sinkConfiguration"), "sinkID"));
            v610 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v785, "previewSinkPipelineWithSourceID:sourceDeviceType:", v607, v608);
            v611 = -[FigCaptureSessionPipelines movieFileSinkPipelineWithSourceID:sourceDeviceType:](v785, "movieFileSinkPipelineWithSourceID:sourceDeviceType:", v607, v608);
            if (-[FigCaptureMetadataSinkPipeline mrcSceneObserver](v609))
            {
              v612 = -[FigCaptureMetadataSinkPipeline mrcSceneObserver](v609);
              -[FigCaptureMovieFileSinkPipeline setMRCSceneObserver:](v611, v612);
              objc_msgSend(v610, "setMRCSceneObserver:", -[FigCaptureMetadataSinkPipeline mrcSceneObserver](v609));
            }
          }
        }
        v603 = -[NSArray countByEnumeratingWithState:objects:count:](v779, "countByEnumeratingWithState:objects:count:", &v790, v921, 16);
      }
      while (v603);
    }
    v788 = 0u;
    v789 = 0u;
    v786 = 0u;
    v787 = 0u;
    v613 = -[FigCaptureSessionParsedConfiguration parsedPreviewSinkConfigurations](v782, "parsedPreviewSinkConfigurations");
    v614 = -[NSArray countByEnumeratingWithState:objects:count:](v613, "countByEnumeratingWithState:objects:count:", &v786, v920, 16);
    v615 = v785;
    if (v614)
    {
      v616 = v614;
      v617 = *(_QWORD *)v787;
      v780 = *(_QWORD *)v787;
      do
      {
        for (i9 = 0; i9 != v616; ++i9)
        {
          if (*(_QWORD *)v787 != v617)
            objc_enumerationMutation(v613);
          v619 = *(void **)(*((_QWORD *)&v786 + 1) + 8 * i9);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v619, "videoPreviewSinkConnectionConfiguration"), "videoPreviewSinkConfiguration"), "semanticStyleRenderingEnabled"))
          {
            v620 = objc_msgSend((id)objc_msgSend(v619, "cameraConfiguration"), "sourceID");
            v621 = objc_msgSend((id)objc_msgSend(v619, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
            -[FigCaptureMovieFileSinkPipeline setSemanticStyleSceneObserver:]((uint64_t)-[FigCaptureSessionPipelines movieFileSinkPipelineWithSourceID:sourceDeviceType:](v615, "movieFileSinkPipelineWithSourceID:sourceDeviceType:", v620, v621), objc_msgSend(-[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v615, "previewSinkPipelineWithSourceID:sourceDeviceType:", v620, v621), "semanticStyleSceneObserver"));
          }
          else if (objc_msgSend(v682, "smartStyleRenderingEnabled"))
          {
            v622 = objc_msgSend((id)objc_msgSend(v619, "cameraConfiguration"), "sourceID");
            v623 = objc_msgSend((id)objc_msgSend(v619, "videoPreviewSinkConnectionConfiguration"), "underlyingDeviceType");
            v624 = -[FigCaptureSessionPipelines cameraSourcePipelineWithSourceID:](v615, "cameraSourcePipelineWithSourceID:", v622);
            v625 = -[FigCaptureSessionPipelines movieFileSinkPipelineWithSourceID:sourceDeviceType:](v615, "movieFileSinkPipelineWithSourceID:sourceDeviceType:", v622, v623);
            v626 = -[FigCaptureSessionPipelines cinematographyPipelineWithSourceID:](v615, "cinematographyPipelineWithSourceID:", v622);
            v627 = -[FigCaptureSessionPipelines previewSinkPipelineWithSourceID:sourceDeviceType:](v615, "previewSinkPipelineWithSourceID:sourceDeviceType:", v622, v623);
            if (v626)
              v628 = -[FigCaptureCinematographyPipeline semanticStyleSceneObserver](v626);
            else
              v628 = -[FigCaptureCameraSourcePipeline semanticStyleSceneObserver](v624);
            objc_msgSend(v627, "setSemanticStyleSceneObserver:", v628);
            v629 = -[FigCaptureCameraSourcePipeline semanticStyleSceneObserver](v624);
            -[FigCaptureMovieFileSinkPipeline setSemanticStyleSceneObserver:](v625, v629);
            v615 = v785;
            v617 = v780;
          }
        }
        v616 = -[NSArray countByEnumeratingWithState:objects:count:](v613, "countByEnumeratingWithState:objects:count:", &v786, v920, 16);
      }
      while (v616);
    }
    v11 = (const void *)v783;
    captureSession_purgeFileSinkCache();
    captureSession_updateGraphConnectionEnabledState(v783, v782);
    captureSession_buildGraphDidBecomeLiveObserver(v783, -[FigCaptureSessionParsedConfiguration isMultiCamSession](v782, "isMultiCamSession"));
    v630 = v781;
    if (!-[BWGraph deferredNodePrepareEnabled](v781, "deferredNodePrepareEnabled"))
      goto LABEL_685;
    v631 = (void *)objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v782, "parsedCameraSourceConfigurations"), "firstObject"), "cameraConfiguration");
    v632 = (void *)objc_msgSend(v631, "requiredFormat");
    v633 = FigCaptureSourceGetStillImageNoiseReductionAndFusionScheme(objc_msgSend(v631, "source"), &v897);
    if (!v897)
    {
      v634 = v633;
      v635 = objc_msgSend(v632, "isPhotoFormat");
      if (v634 > 2)
        v636 = v635;
      else
        v636 = 0;
      v630 = v781;
      -[BWGraph setResumesConnectionsAsNodesArePrepared:](v781, "setResumesConnectionsAsNodesArePrepared:", v636 | v680);
LABEL_685:
      *(_BYTE *)(v784 + 365) = -[BWGraph deferredNodePrepareEnabled](v630, "deferredNodePrepareEnabled");
      captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications(v783);
      goto LABEL_694;
    }
    goto LABEL_693;
  }
  v538 = v537;
  v539 = *(_QWORD *)v807;
LABEL_606:
  v540 = 0;
  while (1)
  {
    if (*(_QWORD *)v807 != v539)
      objc_enumerationMutation(v536);
    v541 = *(void **)(*((_QWORD *)&v806 + 1) + 8 * v540);
    v542 = objc_msgSend(v541, "audioCaptureMode");
    v543 = -[FigCaptureSessionPipelines micSourcePipeline](v785, "micSourcePipeline");
    v544 = objc_msgSend(v541, "builtInMicrophonePosition");
    v545 = v542 == 2
         ? -[FigCaptureMicSourcePipeline cinematicAudioOutputForMicSourcePosition:](v543, v544)
         : -[FigCaptureMicSourcePipeline nextOutputForMicSourcePosition:](v543, v544);
    v546 = v545;
    v547 = (void *)MEMORY[0x1E0CB3940];
    v548 = objc_msgSend(v541, "builtInMicrophonePosition");
    v549 = v548 > 2 ? 0 : *((_QWORD *)&off_1E4923198 + (int)v548);
    v550 = -[FigCaptureAudioFileSinkPipeline initWithConfiguration:graph:name:sourceAudioOutput:recordingStatusDelegate:]([FigCaptureAudioFileSinkPipeline alloc], v541, v781, objc_msgSend(v547, "stringWithFormat:", CFSTR("%@ Microphone Audio File Sink Pipeline"), v549), v546, *(_QWORD *)(v784 + 672));
    if (!v550)
      break;
    -[FigCaptureSessionPipelines addAudioFileSinkPipeline:](v785, "addAudioFileSinkPipeline:", v550);
    if (v538 == ++v540)
    {
      v538 = -[NSArray countByEnumeratingWithState:objects:count:](v536, "countByEnumeratingWithState:objects:count:", &v806, v925, 16);
      if (v538)
        goto LABEL_606;
      goto LABEL_618;
    }
  }
LABEL_713:
  FigDebugAssert3();
  v897 = FigSignalErrorAt();
  v675 = 1;
  v11 = (const void *)v783;
  DerivedStorage = v784;
  if (v897)
    goto LABEL_695;
LABEL_714:
  v638 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (v675)
  {
    *(_QWORD *)&v959 = 0;
    objc_msgSend(*(id *)(DerivedStorage + 592), "commitConfigurationWithID:error:", objc_msgSend(v682, "configurationID"), &v959);
    if ((_QWORD)v959)
      v897 = objc_msgSend((id)v959, "code");
  }
LABEL_696:
  result = v897;
  if (*v638 == 1)
  {
    kdebug_trace();
    return v897;
  }
  return result;
}

uint64_t cs_timeOfFlightAssistedAutoFocusEnabled(void *a1)
{
  uint64_t v2;

  v2 = objc_msgSend(cs_captureSourceGetAttribute(objc_msgSend(a1, "source"), 0x1E4952238), "BOOLValue");
  if ((_DWORD)v2)
    objc_msgSend((id)objc_msgSend(a1, "requiredFormat"), "maxSupportedFrameRate");
  return v2;
}

uint64_t captureSession_teardownImageQueueSinkNodesIfNeeded(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = (void *)objc_msgSend(*(id *)(DerivedStorage + 464), "allKeys");
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v8);
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v15;
LABEL_8:
          v13 = 0;
          while (1)
          {
            if (*(_QWORD *)v15 != v12)
              objc_enumerationMutation(a2);
            if ((objc_msgSend(v9, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13), "videoPreviewSinkConnectionConfiguration"), "sinkConfiguration"), "sinkID")) & 1) != 0)break;
            if (v11 == ++v13)
            {
              v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
              if (v11)
                goto LABEL_8;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          objc_msgSend(*(id *)(DerivedStorage + 464), "setObject:forKeyedSubscript:", 0, v9);
          objc_msgSend(*(id *)(DerivedStorage + 472), "setObject:forKeyedSubscript:", 0, v9);
        }
        ++v8;
      }
      while (v8 != v6);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t captureSession_purgeFileSinkCache()
{
  id *DerivedStorage;
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = (void *)objc_msgSend(DerivedStorage[87], "allKeys", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v9;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v5);
        v7 = objc_msgSend(DerivedStorage[78], "movieFileSinkPipelineWithSinkID:", v6);
        if (!(v7 | objc_msgSend(DerivedStorage[78], "audioFileSinkPipelineWithSinkID:", v6)))
        {
          objc_msgSend(DerivedStorage[87], "setObject:forKeyedSubscript:", 0, v6);
          objc_msgSend(DerivedStorage[88], "setObject:forKeyedSubscript:", 0, v6);
        }
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t captureSession_cleanUpUnusedPreparedBrackets(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = (void *)objc_msgSend(*(id *)(DerivedStorage + 488), "allKeys");
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v19;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v19 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v8);
        v14 = 0u;
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v15;
LABEL_8:
          v13 = 0;
          while (1)
          {
            if (*(_QWORD *)v15 != v12)
              objc_enumerationMutation(a2);
            if ((objc_msgSend(v9, "isEqualToString:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13), "stillImageConnectionConfiguration"), "sinkConfiguration"), "sinkID")) & 1) != 0)break;
            if (v11 == ++v13)
            {
              v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
              if (v11)
                goto LABEL_8;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          objc_msgSend(*(id *)(DerivedStorage + 488), "setObject:forKeyedSubscript:", 0, v9);
        }
        ++v8;
      }
      while (v8 != v6);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void captureSession_cancelMemoryPoolPrewarming(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t *v7;
  BWMemoryPool *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  os_log_type_t type;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (!a1 || qword_1ECFE9DF0 == a1)
  {
    if (byte_1ECFE9E08)
    {
      if (dword_1ECFE9590)
      {
        v17 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      byte_1ECFE9E08 = 0;
      captureSession_cancelMemoryPoolPrewarmingTimeoutTimer();
      v6 = qword_1ECFE9E10;
      qword_1ECFE9E10 = 0;
      if (v6)
      {
        v11 = MEMORY[0x1E0C809B0];
        v12 = 3221225472;
        v13 = __captureSession_cancelMemoryPoolPrewarming_block_invoke;
        v14 = &unk_1E491E720;
        v15 = v6;
        v7 = &v11;
      }
      else
      {
        v7 = 0;
      }
      v8 = +[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool", v9, v10, v11, v12, v13, v14, v15);
      if (a2 && v8)
      {
        -[BWMemoryPool disableWithCompletionHandler:](v8, "disableWithCompletionHandler:", v7);
      }
      else if (v7)
      {
        ((void (*)(uint64_t *))v7[2])(v7);
      }
    }
  }
  else if (dword_1ECFE9590)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
}

uint64_t FigCaptureSourceGetSourceDeviceType(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetSourceDeviceType_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2DB2074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceGetCaptureDeviceID(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = __Block_byref_object_copy__39;
  v9 = __Block_byref_object_dispose__39;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceGetCaptureDeviceID_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2DB2130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2DB2DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t cs_shouldEnableVideoGreenGhostMitigation(void *a1, char a2)
{
  id v3;
  uint64_t result;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
    return 0;
  v5[0] = a1;
  v3 = +[FigVideoCaptureConnectionConfiguration videoStabilizationMethods:includeIris:](FigVideoCaptureConnectionConfiguration, "videoStabilizationMethods:includeIris:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1), 1);
  if ((objc_msgSend(v3, "containsObject:", &unk_1E49F9FD8) & 1) != 0)
    return objc_msgSend(a1, "videoGreenGhostMitigationEnabled");
  if ((objc_msgSend(v3, "containsObject:", &unk_1E49F9FF0) & 1) != 0)
    return objc_msgSend(a1, "videoGreenGhostMitigationEnabled");
  result = objc_msgSend(v3, "containsObject:", &unk_1E49FA008);
  if ((_DWORD)result)
    return objc_msgSend(a1, "videoGreenGhostMitigationEnabled");
  return result;
}

uint64_t captureSession_startObservingAudioInterruptionNotification(uint64_t a1)
{
  _QWORD *DerivedStorage;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v15[5];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (!FigCaptureAudiomxdSupportEnabled())
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
      FigDebugAssert3();
    if (!DerivedStorage[28])
      return 4294954510;
    if (!DerivedStorage[35])
    {
      v8 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", a1);
      v9 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v10 = *MEMORY[0x1E0D493E0];
      v11 = DerivedStorage[28];
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __captureSession_startObservingCMSessionInterruptionNotification_block_invoke;
      v16[3] = &unk_1E491EAC8;
      v16[4] = v8;
      v6 = (void *)objc_msgSend(v9, "addObserverForName:object:queue:usingBlock:", v10, v11, 0, v16);
      goto LABEL_15;
    }
LABEL_16:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (!DerivedStorage[27])
    return 4294954510;
  if (DerivedStorage[35])
    goto LABEL_16;
  v3 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", a1);
  v4 = (void *)DerivedStorage[27];
  v5 = *MEMORY[0x1E0CFF008];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __captureSession_startObservingAVAudioSessionInterruptionNotification_block_invoke;
  v15[3] = &unk_1E491EAC8;
  v15[4] = v3;
  v6 = (void *)objc_msgSend(v4, "addObserverForType:name:block:", 1, v5, v15);
  if (v6)
  {
LABEL_15:
    v12 = v6;
    result = 0;
    DerivedStorage[35] = v12;
    return result;
  }
  v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954510;
}

void captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary(uint64_t a1)
{
  uint64_t DerivedStorage;
  int *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  NSObject *global_queue;
  const char *v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t state64;
  _QWORD handler[28];

  handler[27] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken != -1)
    dispatch_once(&cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken, &__block_literal_global_323);
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 544)))
  {
    LODWORD(state64) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  v3 = (int *)(DerivedStorage + 544);
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("com.apple.coremedia.figassetwriter.writing-video-%d"), *(unsigned int *)(DerivedStorage + 16));
  *(_QWORD *)(DerivedStorage + 536) = v4;
  if (dword_1ECFE9590)
  {
    LODWORD(state64) = 0;
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = *(void **)(DerivedStorage + 536);
  }
  else
  {
    v6 = (void *)v4;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v8 = (const char *)objc_msgSend(v6, "UTF8String");
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke;
  handler[3] = &__block_descriptor_48_e8_v12__0i8l;
  handler[4] = DerivedStorage;
  handler[5] = a1;
  if (notify_register_dispatch(v8, (int *)(DerivedStorage + 544), global_queue, handler))
  {
    LODWORD(state64) = 0;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    state64 = 0;
    if (!notify_get_state(*v3, &state64))
    {
      v9 = state64;
      if (state64 < 2)
      {
        *(_QWORD *)(DerivedStorage + 552) = state64;
        if (v9 == 1)
          *(_BYTE *)(DerivedStorage + 560) = *(_BYTE *)(DerivedStorage + 337);
        goto LABEL_14;
      }
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_19:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_14;
    }
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();

  *(_QWORD *)(DerivedStorage + 536) = 0;
  if (notify_is_valid_token(*(_DWORD *)(DerivedStorage + 544)))
  {
    notify_cancel(*v3);
    *v3 = -1;
  }
  *(_QWORD *)(DerivedStorage + 552) = 0;
LABEL_14:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
}

void __captureSession_cancelMemoryPoolPrewarming_block_invoke(uint64_t a1)
{

}

uint64_t FigCaptureMetadataObjectConfigurationRequiresOfflineVideoStabilizationMotionData(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "metadataIdentifiers");
  return objc_msgSend(v1, "containsObject:", *MEMORY[0x1E0CA4CB8]);
}

uint64_t roDeserializeConfigurationLive(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t FormatDescriptionFromSerializedDictionary;
  int v7;
  const void *v8;
  const void *NameForCache;
  uint64_t v10;
  CFTypeRef cf;

  v3 = *(_QWORD *)a1;
  cf = 0;
  if (!a2)
    goto LABEL_11;
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  if (*(_DWORD *)(v3 + 4) != 5)
    goto LABEL_11;
  v5 = 48;
  if (*(_QWORD *)(v3 + 32) == v3)
    v5 = 40;
  if (*(_QWORD *)(v3 + v5))
  {
    *(_QWORD *)(a2 + 96) = *(_QWORD *)(v3 + 64);
    FormatDescriptionFromSerializedDictionary = roDeserializePropertyListData(v3, 0, &cf);
    if ((_DWORD)FormatDescriptionFromSerializedDictionary
      || (FormatDescriptionFromSerializedDictionary = FigRemote_CreateFormatDescriptionFromSerializedDictionary(),
          (_DWORD)FormatDescriptionFromSerializedDictionary))
    {
      v10 = FormatDescriptionFromSerializedDictionary;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(a2 + 76) = v7;
      v8 = *(const void **)(v3 + 24);
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 16);
      NameForCache = roSerializationContextGetNameForCache(a2, v8);
      if (NameForCache)
        NameForCache = CFRetain(NameForCache);
      v10 = 0;
      *(_QWORD *)(a2 + 88) = NameForCache;
    }
  }
  else
  {
LABEL_11:
    fig_log_get_emitter();
    FigDebugAssert3();
    v10 = 4294950629;
  }
  if (cf)
    CFRelease(cf);
  if (a2)
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  return v10;
}

uint64_t roDeserializePropertyListData(uint64_t a1, CFOptionFlags a2, CFPropertyListRef *a3)
{
  uint64_t v3;
  const UInt8 *v6;
  const __CFAllocator *v7;
  const __CFData *v8;
  const __CFData *v9;
  CFIndex Code;
  CFStringRef v11;
  CFErrorRef error;

  error = 0;
  v3 = 48;
  if (*(_QWORD *)(a1 + 32) == a1)
    v3 = 40;
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  v6 = *(const UInt8 **)(a1 + v3);
  if (!v6)
  {
    Code = 0;
    *a3 = 0;
    return Code;
  }
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, *(_QWORD *)(a1 + 56), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950630;
  }
  v9 = v8;
  *a3 = CFPropertyListCreateWithData(v7, v8, a2, 0, &error);
  CFRelease(v9);
  if (*a3)
    return 0;
  if (!error)
  {
    Code = 4294962336;
LABEL_14:
    fig_log_get_emitter();
    FigDebugAssert3();
    return Code;
  }
  v11 = CFErrorCopyFailureReason(error);
  Code = CFErrorGetCode(error);
  if (v11)
    CFRelease(v11);
  CFRelease(error);
  if ((_DWORD)Code)
    goto LABEL_14;
  return Code;
}

uint64_t captureSessionRemote_SetSectionProperty(uint64_t a1, uint64_t a2, const void *a3, opaqueCMSampleBuffer *a4)
{
  void *BasicMessage;
  uint64_t v7;
  CFTypeID v8;
  CMFormatDescriptionRef FormatDescription;
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer;
  CFTypeID v11;
  void *v12;
  uint64_t v13;
  CFTypeID v14;
  void *v15;
  xpc_object_t empty;
  const __CFString *v17;
  void *v18;
  char **v19;
  void *v20;
  void *v21;
  CFTypeRef cf;

  BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    SerializedAtomDataAndSurfaceForSampleBuffer = 4294954510;
    goto LABEL_29;
  }
  v7 = FigXPCMessageSetCFString();
  if ((_DWORD)v7)
    goto LABEL_8;
  v7 = FigXPCMessageSetCFString();
  if ((_DWORD)v7)
    goto LABEL_8;
  if (CFEqual(a3, CFSTR("CaptureSessionMetadataSource_MetadataSampleBuffer"))
    && (v8 = CFGetTypeID(a4), v8 == CMSampleBufferGetTypeID()))
  {
    FormatDescription = CMSampleBufferGetFormatDescription(a4);
    cf = CFRetain(FormatDescription);
    SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
    CFRelease(cf);
    if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
      goto LABEL_36;
    v7 = FigXPCMessageSetAndConsumeVMData();
    if ((_DWORD)v7)
    {
LABEL_8:
      SerializedAtomDataAndSurfaceForSampleBuffer = v7;
      fig_log_get_emitter();
LABEL_37:
      FigDebugAssert3();
      goto LABEL_29;
    }
  }
  else if (CFEqual(a3, CFSTR("PreviewFilters")) && (v11 = CFGetTypeID(a4), v11 == CFArrayGetTypeID()))
  {
    v12 = (void *)MEMORY[0x1A858DD40]();
    csr_serializeObjectUsingNSSecureCoding((uint64_t)a4);
    v13 = FigXPCMessageSetCFData();
    if ((_DWORD)v13)
    {
      SerializedAtomDataAndSurfaceForSampleBuffer = v13;
      fig_log_get_emitter();
      FigDebugAssert3();
      objc_autoreleasePoolPop(v12);
      goto LABEL_29;
    }
    objc_autoreleasePoolPop(v12);
  }
  else if (CFEqual(a3, CFSTR("SemanticStyles")) && (v14 = CFGetTypeID(a4), v14 == CFDictionaryGetTypeID()))
  {
    v15 = (void *)-[opaqueCMSampleBuffer mutableCopy](a4, "mutableCopy");
    empty = xpc_dictionary_create_empty();
    v17 = CFSTR("SemanticStyleSet");
    if (-[opaqueCMSampleBuffer objectForKeyedSubscript:](a4, "objectForKeyedSubscript:", CFSTR("SemanticStyleSet")))
    {
      v18 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("SemanticStyleSet"));
      v19 = &kFigCaptureSessionSetSectionProperty_SetSemanticStylesKey_SemanticStyleSet;
    }
    else
    {
      v17 = CFSTR("SemanticStyle");
      v18 = (void *)-[opaqueCMSampleBuffer objectForKeyedSubscript:](a4, "objectForKeyedSubscript:", CFSTR("SemanticStyle"));
      v19 = &kFigCaptureSessionSetSectionProperty_SetSemanticStylesKey_SemanticStyle;
    }
    xpc_dictionary_set_value(empty, *v19, (xpc_object_t)objc_msgSend(v18, "copyXPCEncoding"));
    objc_msgSend(v15, "setObject:forKeyedSubscript:", 0, v17);
    FigXPCRelease();
    v21 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("CAContextFencePortSendRight"));
    if (v21)
    {
      objc_msgSend(v21, "port");
      xpc_dictionary_set_mach_send();
      objc_msgSend(v15, "setObject:forKeyedSubscript:", 0, CFSTR("CAContextFencePortSendRight"));
    }
    xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], empty);
    SerializedAtomDataAndSurfaceForSampleBuffer = FigXPCMessageSetCFObject();

    FigXPCRelease();
    if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
      goto LABEL_36;
  }
  else if (CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")))
  {
    v20 = (void *)-[opaqueCMSampleBuffer objectForKeyedSubscript:](a4, "objectForKeyedSubscript:", CFSTR("CAContextFencePortSendRight"));
    if (v20)
    {
      objc_msgSend(v20, "port");
      xpc_dictionary_set_mach_send();
      objc_msgSend((id)-[opaqueCMSampleBuffer mutableCopy](a4, "mutableCopy"), "setObject:forKeyedSubscript:", 0, CFSTR("CAContextFencePortSendRight"));
    }
    v7 = FigXPCMessageSetCFObject();
    if ((_DWORD)v7)
      goto LABEL_8;
  }
  else
  {
    v7 = FigXPCMessageSetCFObject();
    if ((_DWORD)v7)
      goto LABEL_8;
  }
  SerializedAtomDataAndSurfaceForSampleBuffer = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
  {
LABEL_36:
    fig_log_get_emitter();
    goto LABEL_37;
  }
LABEL_29:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return SerializedAtomDataAndSurfaceForSampleBuffer;
}

uint64_t captureSessionRemote_CopyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = captureSessionRemote_getObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v2 = FigXPCSendStdCopyPropertyMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigCaptureSessionRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, const __CFString *, _QWORD);
  uint64_t v8;

  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 4294954516;
    goto LABEL_14;
  }
  v4 = csr_ensureClientEstablished();
  if ((_DWORD)v4
    || (v4 = FigXPCCreateBasicMessage(), (_DWORD)v4)
    || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4)
    || (v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v4))
  {
    v8 = v4;
    fig_log_get_emitter();
LABEL_19:
    FigDebugAssert3();
    goto LABEL_14;
  }
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigCaptureSessionGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v8 = v6;
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_19;
  }
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
  FigXPCRemoteClientAssociateObject();
  v7 = *(uint64_t (**)(_QWORD, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v7)
  {
    v8 = 4294954514;
    goto LABEL_13;
  }
  v8 = v7(0, CFSTR("CaptureSession_RemoteVideoPreviewEnabled"), *MEMORY[0x1E0C9AE50]);
  if ((_DWORD)v8)
  {
LABEL_13:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_14;
  }
  *a3 = 0;
LABEL_14:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t captureSessionRemote_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectID;
  char isKindOfClass;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v11 = 0;
  ObjectID = captureSessionRemote_getObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
  {
    v8 = ObjectID;
    fig_log_get_emitter();
    goto LABEL_8;
  }
  if (!CFEqual(a2, CFSTR("CaptureSession_SmartStyle")) && !CFEqual(a2, CFSTR("CaptureSession_SystemStyleOverride")))
    goto LABEL_13;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if (!a3 || (isKindOfClass & 1) != 0)
  {
    v12 = 0;
    if (!a3)
      a3 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
    if (!objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a3, 1, &v12))
    {
      fig_log_get_emitter();
      LODWORD(v10) = 0;
      FigDebugAssert3();
      objc_msgSend(v12, "code", v10, v3);
      FigSignalErrorAt();
    }
LABEL_13:
    v8 = FigXPCSendStdSetPropertyMessage();
    if (!(_DWORD)v8)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = 4294954516;
LABEL_7:
  fig_log_get_emitter();
LABEL_8:
  FigDebugAssert3();
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t captureSessionRemote_StartRunning(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_commonAsyncMessage(uint64_t a1)
{
  if (!captureSessionRemote_createBasicMessage(a1)
    || FigXPCMessageSetCFString()
    || FigXPCMessageSetCFData()
    || FigXPCRemoteClientSendAsyncMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_SetConfiguration(uint64_t a1, void *a2)
{
  void *BasicMessage;
  void *v4;

  BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || (v4 = (void *)objc_msgSend(a2, "copyXPCEncoding"),
        xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], v4),
        xpc_release(v4),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_createBasicMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  if (captureSessionRemote_getObjectID(a1, &v2) || FigXPCCreateBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

uint64_t captureSessionRemote_getObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_QWORD *)DerivedStorage;
    return 0;
  }
}

uint64_t FigCaptureSessionGetClassID()
{
  if (FigCaptureSessionGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureSessionGetClassID_onceToken, &__block_literal_global_54);
  return FigCaptureSessionGetClassID_sFigCaptureSessionClassID;
}

uint64_t getVCPCaptureAnalysisSubjectMotionScoreKey()
{
  void *VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc;

  VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc = getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc();
  if (!VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc)
    getVCPCaptureAnalysisSubjectMotionScoreKey_cold_1();
  return *(_QWORD *)VCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc;
}

void *getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr;
  v6 = getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr)
  {
    v1 = (void *)MediaAnalysisLibrary();
    v0 = dlsym(v1, "VCPCaptureAnalysisSubjectMotionScoreKey");
    v4[3] = (uint64_t)v0;
    getVCPCaptureAnalysisSubjectMotionScoreKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DB6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getVCPCaptureAnalysisMotionDivScoreKey()
{
  void *VCPCaptureAnalysisMotionDivScoreKeySymbolLoc;

  VCPCaptureAnalysisMotionDivScoreKeySymbolLoc = getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc();
  if (!VCPCaptureAnalysisMotionDivScoreKeySymbolLoc)
    getVCPCaptureAnalysisMotionDivScoreKey_cold_1();
  return *(_QWORD *)VCPCaptureAnalysisMotionDivScoreKeySymbolLoc;
}

void *getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr;
  v6 = getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr)
  {
    v1 = (void *)MediaAnalysisLibrary();
    v0 = dlsym(v1, "VCPCaptureAnalysisMotionDivScoreKey");
    v4[3] = (uint64_t)v0;
    getVCPCaptureAnalysisMotionDivScoreKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DB69D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(int a1)
{
  _BOOL8 v1;
  _QWORD v3[2];
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  if ((a1 & 0xFFFFFFFE) != 6)
    return 0;
  v1 = a1 == 7;
  v3[0] = *MEMORY[0x1E0D07D08];
  v4[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v3[1] = *MEMORY[0x1E0D07D10];
  v4[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1);
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

uint64_t FigRemoteQueueReceiverSetHandler(uint64_t a1, NSObject *a2, const void *a3)
{
  const void *v6;
  int v7;
  void *v8;
  void *v9;
  dispatch_source_t v10;
  NSObject *v11;
  const void *v12;
  _QWORD block[6];

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  ++*(_DWORD *)(a1 + 64);
  v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    _Block_release(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (!a3)
    goto LABEL_9;
  v7 = *(unsigned __int8 *)(a1 + 69);
  v8 = _Block_copy(a3);
  v9 = v8;
  if (!v7)
  {
    *(_QWORD *)(a1 + 56) = v8;
    if (v8)
      goto LABEL_6;
LABEL_9:
    v12 = (const void *)a1;
    v11 = 0;
    goto LABEL_10;
  }
  CFRetain((CFTypeRef)a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigRemoteQueueReceiverSetHandler_block_invoke;
  block[3] = &unk_1E4926830;
  block[4] = v9;
  block[5] = a1;
  dispatch_async(a2, block);
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_9;
LABEL_6:
  v10 = dispatch_source_create(MEMORY[0x1E0C80DB8], *(int *)(a1 + 32), 0, a2);
  if (!v10)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  }
  v11 = v10;
  v12 = (const void *)a1;
LABEL_10:
  rqReceiverSetSource(v12, v11);
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
}

void rqReceiverSetSource(CFTypeRef cf, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[6];
  _QWORD handler[5];

  v4 = *((_QWORD *)cf + 6);
  if (v4)
  {
    dispatch_source_cancel(v4);
    if (*((_BYTE *)cf + 68))
    {
      *((_BYTE *)cf + 68) = 0;
      dispatch_resume(*((dispatch_object_t *)cf + 6));
    }
    *((_QWORD *)cf + 6) = 0;
  }
  if (a2)
  {
    CFRetain(cf);
    v5 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __rqReceiverSetSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_83;
    handler[4] = cf;
    dispatch_source_set_event_handler(a2, handler);
    v6[0] = v5;
    v6[1] = 0x40000000;
    v6[2] = __rqReceiverSetSource_block_invoke_2;
    v6[3] = &__block_descriptor_tmp_84;
    v6[4] = cf;
    v6[5] = a2;
    dispatch_source_set_cancel_handler(a2, v6);
    *((_QWORD *)cf + 6) = a2;
    if (!*((_QWORD *)cf + 9))
    {
      *((_QWORD *)cf + 9) = voucher_copy();
      a2 = *((_QWORD *)cf + 6);
    }
    *((_BYTE *)cf + 68) = 0;
    dispatch_resume(a2);
  }
}

uint64_t doFocusNow(uint64_t a1, int a2, void *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  const void **v17;
  const void **v18;
  const void *v19;
  const void *v20;
  int v21;
  const __CFAllocator *v22;
  __CFDictionary *Mutable;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *value;
  void *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int valuePtr;
  int v43;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 5000;
  if (*(_BYTE *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  v9 = DerivedStorage;
  v10 = DerivedStorage + 7583;
  value = a3;
  v37 = (void *)*MEMORY[0x1E0D06510];
  v11 = 9;
  if (*(_BYTE *)(DerivedStorage + 7583))
  {
    if (*(int *)(DerivedStorage + 660) >= 9)
      v11 = 9;
    else
      v11 = *(_DWORD *)(DerivedStorage + 660);
    if (v11 <= 1)
      v11 = 1;
    v12 = 2;
  }
  else
  {
    v12 = 1;
  }
  v13 = *(unsigned __int8 *)(DerivedStorage + 7585);
  v41 = v11;
  v43 = v12;
  v14 = *(_DWORD *)(DerivedStorage + 40);
  v15 = v14 > 6 || ((1 << v14) & 0x6E) == 0;
  v39 = a4;
  v38 = a1;
  if (v15)
  {
    v16 = a2;
    v18 = (const void **)MEMORY[0x1E0D06580];
  }
  else
  {
    if (v13 && (a2 & 1) == 0)
      v43 = 2;
    v16 = a2;
    if (v14 - 5 >= 2)
      v17 = (const void **)MEMORY[0x1E0D06598];
    else
      v17 = (const void **)MEMORY[0x1E0D06590];
    if (*(_BYTE *)(DerivedStorage + 18160))
      v18 = (const void **)MEMORY[0x1E0D06588];
    else
      v18 = v17;
  }
  v19 = *v18;
  if (*(_QWORD *)(DerivedStorage + 680))
    v20 = *(const void **)(DerivedStorage + 680);
  else
    v20 = v19;
  storePreviousFocusState(DerivedStorage);
  *(_DWORD *)(v9 + 6220) = 0;
  *(_DWORD *)(v9 + 5496) = 0;
  *(_WORD *)(v9 + 80) = 256;
  *(_BYTE *)(v10 + 706) = 0;
  v21 = *(_DWORD *)(v9 + 7588) + 1;
  *(_DWORD *)(v9 + 7588) = v21;
  v40 = v21;
  v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = CFNumberCreate(v22, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(v22, kCFNumberSInt32Type, &v43);
  v26 = CFNumberCreate(v22, kCFNumberSInt32Type, &v41);
  v27 = CFNumberCreate(v22, kCFNumberSInt32Type, &v40);
  v28 = (const void *)*MEMORY[0x1E0C9AE50];
  v29 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v16)
    v30 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v30 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06558], v30);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06560], v24);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06568], value);
  if (v13)
    v31 = v28;
  else
    v31 = v29;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06540], v31);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06570], v25);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06550], v20);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06538], v37);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D06548], v26);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D05AD0], v27);
  CFRelease(v24);
  CFRelease(v25);
  CFRelease(v26);
  CFRelease(v27);
  sendFocusStartNotification(v38, v16 ^ 1);
  v32 = (const void *)*MEMORY[0x1E0D07518];
  if (v39)
    v33 = captureStreamSetPropertyOnActivityScheduler(v38, v32, Mutable);
  else
    v33 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(v38, (uint64_t)v32, (uint64_t)Mutable);
  v34 = v33;
  if ((_DWORD)v33)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable)
      return v34;
    goto LABEL_37;
  }
  if (Mutable)
LABEL_37:
    CFRelease(Mutable);
  return v34;
}

__n128 storePreviousFocusState(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;

  LODWORD(v1) = *(_DWORD *)(a1 + 6220);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = a1 + 5736;
    do
    {
      *(_DWORD *)(a1 + 5816 + 4 * v2) = *(_DWORD *)(v3 + 4 * v2);
      *(_QWORD *)(v3 + 8 * v2 + 320) = *(_QWORD *)(v3 + 8 * v2 + 160);
      ++v2;
      v1 = *(int *)(a1 + 6220);
    }
    while (v2 < v1);
  }
  *(_QWORD *)(a1 + 5680) = *(_QWORD *)(a1 + 5672);
  *(_QWORD *)(a1 + 5696) = *(_QWORD *)(a1 + 5688);
  *(_DWORD *)(a1 + 6224) = v1;
  *(_QWORD *)(a1 + 6240) = *(_QWORD *)(a1 + 6232);
  *(_QWORD *)(a1 + 6256) = *(_QWORD *)(a1 + 6248);
  *(_QWORD *)(a1 + 6272) = *(_QWORD *)(a1 + 6264);
  result = *(__n128 *)(a1 + 5704);
  *(__n128 *)(a1 + 5720) = result;
  return result;
}

void sendFocusStartNotification(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  BOOL v8;
  int v9;
  __CFString **v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  CFDictionaryRef DictionaryRepresentation;
  const __CFArray *v16;
  CFIndex v17;
  const void *ValueAtIndex;
  CGRect v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v5)
    v5 = *(_DWORD *)(DerivedStorage + 7612);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  v8 = v5 == 2;
  if (v5 == 2)
    v9 = 5;
  else
    v9 = 1;
  v10 = kFigAutofocusSampleBufferProcessorFocusMode_FocusAtPoint;
  if (!v8)
    v10 = kFigAutofocusSampleBufferProcessorFocusMode_FixedFocusPoints;
  CFDictionaryAddValue(Mutable, CFSTR("FocusMode"), *v10);
  *(_DWORD *)(v4 + 84) = v9;
  if (*(_BYTE *)(v4 + 7664))
    v11 = (int *)(v4 + 7668);
  else
    v11 = (int *)(v4 + 180);
  if (*(_BYTE *)(v4 + 7664))
    v12 = (int *)(v4 + 7672);
  else
    v12 = (int *)(v4 + 244);
  if (*(_BYTE *)(v4 + 7664))
    v13 = (int *)(v4 + 7676);
  else
    v13 = (int *)(v4 + 308);
  if (*(_BYTE *)(v4 + 7664))
    v14 = (int *)(v4 + 7680);
  else
    v14 = (int *)(v4 + 372);
  v19.size.height = (float)((float)*v14 * 0.001);
  v19.size.width = (float)((float)*v13 * 0.001);
  v19.origin.y = (float)((float)*v12 * 0.001);
  v19.origin.x = (float)((float)*v11 * 0.001);
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v19);
  CFDictionaryAddValue(v7, CFSTR("FocusRectDict"), DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  if (*(_BYTE *)(v4 + 7664))
  {
    CFDictionaryAddValue(v7, CFSTR("isFaceRect"), (const void *)*MEMORY[0x1E0C9AE50]);
    v16 = *(const __CFArray **)(v4 + 9024);
    if (v16)
    {
      v17 = *(int *)(v4 + 556);
      if (CFArrayGetCount(v16) > v17)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 9024), *(int *)(v4 + 556));
        CFDictionaryAddValue(v7, CFSTR("faceData"), ValueAtIndex);
      }
    }
  }
  if ((a2 & 1) == 0)
  {
    ++*(_DWORD *)(v4 + 7656);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v7)
    CFRelease(v7);
}

uint64_t __cdpp_initializeStatics_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t getVCPCaptureAnalysisSessionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__38;
  v7 = __Block_byref_object_dispose__38;
  v0 = getVCPCaptureAnalysisSessionClass_softClass;
  v8 = getVCPCaptureAnalysisSessionClass_softClass;
  if (!getVCPCaptureAnalysisSessionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVCPCaptureAnalysisSessionClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVCPCaptureAnalysisSessionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DB7F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getVCPCaptureAnalysisDispatchQueuePropertyKey()
{
  void *VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc;

  VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc = getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc();
  if (!VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc)
    getVCPCaptureAnalysisDispatchQueuePropertyKey_cold_1();
  return *(_QWORD *)VCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc;
}

void *getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr;
  v6 = getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr;
  if (!getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr)
  {
    v1 = (void *)MediaAnalysisLibrary();
    v0 = dlsym(v1, "VCPCaptureAnalysisDispatchQueuePropertyKey");
    v4[3] = (uint64_t)v0;
    getVCPCaptureAnalysisDispatchQueuePropertyKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2DB7FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void __flashlight_videoDeviceAvailabilityListener_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  void *v6;
  char v7;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v10;
  uint64_t v11;

  v2 = objc_msgSend(*(id *)(a1 + 32), "retainReferencedObject");
  if (v2)
  {
    v3 = (const void *)v2;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
    v6 = (void *)MEMORY[0x1A858DD40](v5);
    v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "userInfo"), "objectForKeyedSubscript:", 0x1E4945078), "BOOLValue");
    v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "userInfo"), "objectForKeyedSubscript:", 0x1E4945098), "BOOLValue");
    if ((v7 & 1) != 0)
    {
      flashlight_postNotificationWithPayload(v3, CFSTR("FlashlightAvailable"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1));
LABEL_14:
      objc_autoreleasePoolPop(v6);
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
      CFRelease(v3);
      return;
    }
    v10 = v8;
    v11 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(_QWORD *)(DerivedStorage + 56));
    if (((v11 | v10) & 1) == 0)
    {
      if (*(_QWORD *)(DerivedStorage + 72) != 1)
      {
        flashlight_postNotificationWithPayload(v3, CFSTR("FlashlightAvailable"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0));
LABEL_13:
        flashlight_teardownDevice(v3, 1);
        goto LABEL_14;
      }
      v11 = (int)objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeClientPriority") < 2;
    }
    flashlight_postNotificationWithPayload(v3, CFSTR("FlashlightAvailable"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v11));
    if ((v11 & 1) != 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (dword_1EE6BE618)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t FigSampleBufferProcessorCreateForAutofocus(uint64_t a1, void *a2, void *a3, void *a4, void *a5, const __CFDictionary *a6, const void *a7, _QWORD *a8)
{
  const void *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  uint64_t v18;
  uint64_t DerivedStorage;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFDictionary *Value;
  const __CFDictionary *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v32)(const void *, const __CFDictionary *(*)(), _QWORD);
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;

  if (!a8 || !a2)
    return FigSignalErrorAt();
  v10 = a7;
  v14 = ((uint64_t (*)(void))FigImageControl_Sharpness_ConfigureLogging)();
  v15 = FigImageControl_Sharpness_ConfigureLogging(v14);
  v16 = FigImageControl_Sharpness_ConfigureLogging(v15);
  FigImageControl_Sharpness_ConfigureLogging(v16);
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferProcessorGetClassID();
  v18 = CMDerivedObjectCreate();
  if (!(_DWORD)v18)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    bzero((void *)DerivedStorage, 0x46F8uLL);
    *(_DWORD *)(DerivedStorage + 7576) = 0;
    *(_DWORD *)(DerivedStorage + 7428) = 1;
    *(_DWORD *)(DerivedStorage + 7616) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7648) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7596) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7600) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 9056) = FigGetCFPreferenceNumberWithDefault();
    *(_DWORD *)(DerivedStorage + 7468) = FigGetCFPreferenceNumberWithDefault();
    *(_BYTE *)(DerivedStorage + 7537) = FigGetCFPreferenceNumberWithDefault() != 0;
    *(_BYTE *)(DerivedStorage + 7536) = FigGetCFPreferenceNumberWithDefault() != 0;
    v20 = 0;
    *(_BYTE *)(DerivedStorage + 7538) = FigGetCFPreferenceNumberWithDefault() != 0;
    do
    {
      v21 = (float)(unsigned __int16)v20 * 0.0039062;
      if (v21 >= 0.018)
        v22 = powf(v21, 0.45) * 1.099 + -0.0989999995;
      else
        v22 = v21 * 4.5;
      *(float *)(DerivedStorage + 9152 + 4 * v20++) = v22;
    }
    while (v20 != 257);
    *(_DWORD *)(DerivedStorage + 10180) = 0;
    if (*(_QWORD *)(DerivedStorage + 17336)
      || (v23 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 17336) = v23) != 0))
    {
      *(_QWORD *)(DerivedStorage + 8) = a2;
      *(_QWORD *)(DerivedStorage + 16) = a3;
      *(_QWORD *)(DerivedStorage + 24) = a4;
      *(_QWORD *)(DerivedStorage + 32) = a5;
      v24 = CMBaseObjectGetDerivedStorage();
      v25 = (const __CFDictionary *)objc_msgSend(*(id *)(v24 + 8), "supportedProperties");
      if (v25)
      {
        v26 = v25;
        *(_BYTE *)(v24 + 44) = CFDictionaryContainsKey(v25, CFSTR("AutoFocusNow")) != 0;
        *(_BYTE *)(v24 + 45) = CFDictionaryContainsKey(v26, CFSTR("AutoAENow")) != 0;
        *(_BYTE *)(v24 + 510) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07710]) != 0;
        *(_BYTE *)(v24 + 509) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D076B8]) != 0;
        *(_BYTE *)(v24 + 508) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D074B0]) != 0;
        *(_BYTE *)(v24 + 511) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D072E0]) != 0;
        *(_BYTE *)(v24 + 512) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07310]) != 0;
        *(_BYTE *)(v24 + 514) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D073A8]) != 0;
        *(_BYTE *)(v24 + 518) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D074A8]) != 0;
        *(_BYTE *)(v24 + 519) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D072E8]) != 0;
        *(_BYTE *)(v24 + 515) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07618]) != 0;
        *(_BYTE *)(v24 + 520) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07638]) != 0;
        *(_BYTE *)(v24 + 521) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07518]) != 0;
        *(_BYTE *)(v24 + 522) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07420]) != 0;
        Value = (const __CFDictionary *)CFDictionaryGetValue(v26, (const void *)*MEMORY[0x1E0D07668]);
        if (Value)
        {
          CFDictionaryGetValue(Value, CFSTR("PropertyType"));
          *(_BYTE *)(v24 + 516) = FigCFEqual() != 0;
        }
        v28 = (const __CFDictionary *)CFDictionaryGetValue(v26, (const void *)*MEMORY[0x1E0D074C8]);
        if (v28)
        {
          CFDictionaryGetValue(v28, CFSTR("PropertyType"));
          *(_BYTE *)(v24 + 513) = FigCFEqual() != 0;
        }
        *(_BYTE *)(v24 + 517) = CFDictionaryContainsKey(v26, (const void *)*MEMORY[0x1E0D07670]) != 0;
      }
      *(_QWORD *)(DerivedStorage + 5656) = -1;
      *(_QWORD *)(DerivedStorage + 5648) = -1;
      *(_DWORD *)(DerivedStorage + 5664) = -1;
      *(_QWORD *)(DerivedStorage + 6304) = 0;
      v29 = FigCoreMotionAlloc(1, 0, 0, 0.033333, 0.0);
      *(_QWORD *)(DerivedStorage + 48) = v29;
      if (v29)
      {
        v30 = CMSimpleQueueCreate(v17, 100, (CMSimpleQueueRef *)(DerivedStorage + 72));
        if (!(_DWORD)v30)
        {
          if (v10)
          {
            CFRetain(v10);
            goto LABEL_24;
          }
          v30 = FigActivitySchedulerCreateForNewThread();
          if (!(_DWORD)v30)
          {
            v10 = a7;
LABEL_24:
            *(_QWORD *)(DerivedStorage + 64) = v10;
            v32 = *(uint64_t (**)(const void *, const __CFDictionary *(*)(), _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
            if (v32)
            {
              v33 = v32(v10, setPropertiesOnStream, 0);
              if (!(_DWORD)v33)
              {
                *(_QWORD *)(DerivedStorage + 532) = 0x3F0000003F000000;
                *(_DWORD *)(DerivedStorage + 7552) = 1;
                *(_DWORD *)(DerivedStorage + 9040) = 1;
                *(_DWORD *)(DerivedStorage + 40) = -1;
                *(_BYTE *)(DerivedStorage + 18160) = 0;
                *(_BYTE *)(DerivedStorage + 17704) = 0;
                configureDevice(0, a6);
                if (*(_DWORD *)(DerivedStorage + 652)
                  || (v30 = objc_msgSend(*(id *)(DerivedStorage + 8), "registerForNotification:listener:callback:", *MEMORY[0x1E0D06FE0], 0, captureStreamListener), !(_DWORD)v30))
                {
                  v34 = *(unsigned int *)(DerivedStorage + 1804);
                  if ((int)v34 >= 1)
                  {
                    v35 = (_QWORD *)(DerivedStorage + 16344);
                    do
                    {
                      *v35 = 0x7FEFFFFFFFFFFFFFLL;
                      v35[30] = 0x7FEFFFFFFFFFFFFFLL;
                      ++v35;
                      --v34;
                    }
                    while (v34);
                  }
                  v36 = 0;
                  *a8 = 0;
                  return v36;
                }
                goto LABEL_41;
              }
              v36 = v33;
            }
            else
            {
              v36 = 4294954514;
            }
            fig_log_get_emitter();
LABEL_34:
            FigDebugAssert3();
            goto LABEL_36;
          }
        }
LABEL_41:
        v36 = v30;
        fig_log_get_emitter();
        goto LABEL_34;
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      v36 = 0;
    }
    else
    {
      v36 = FigSignalErrorAt();
    }
LABEL_36:
    v37 = *(void **)(DerivedStorage + 48);
    if (v37)
      FigCoreMotionRelease(v37);
    return v36;
  }
  v36 = v18;
  fig_log_get_emitter();
  FigDebugAssert3();
  return v36;
}

uint64_t FigCoreMotionAlloc(int a1, int a2, int a3, float a4, float a5)
{
  FigCoreMotionDelegate *v10;
  double v11;
  double v12;

  v10 = [FigCoreMotionDelegate alloc];
  *(float *)&v11 = a4;
  *(float *)&v12 = a5;
  return (uint64_t)-[FigCoreMotionDelegate initWithAccelerometer:gravityZ:fusedMotion:accelUpdateInterval:fusedMotionUpdateInterval:motionCallbackThreadPriority:](v10, "initWithAccelerometer:gravityZ:fusedMotion:accelUpdateInterval:fusedMotionUpdateInterval:motionCallbackThreadPriority:", a1 != 0, a2 != 0, a3 != 0, 0, v11, v12);
}

void BWSampleBufferPropagateAttachedMedia(const void *a1, const void *a2)
{
  void *v3;
  id v4;

  v3 = (void *)BWSampleBufferDeepCopyDictionaryOfAttachedMedia(a1);
  if (v3)
  {
    v4 = v3;
    CMSetAttachment(a2, CFSTR("AttachedMedia"), v3, 1u);

  }
}

uint64_t csp_dockKitNodeEnabled(uint64_t a1, int a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
    v4 = *(void **)(a1 + 184);
  else
    v4 = 0;
  v5 = objc_msgSend(v4, "imageControlMode");
  v6 = objc_msgSend(v4, "imageControlMode");
  v7 = objc_msgSend(v4, "imageControlMode");
  v8 = objc_msgSend(v4, "cinematicFramingEnabled");
  if (objc_msgSend(v4, "manualCinematicFramingEnabled"))
    v9 = objc_msgSend(v4, "isDockedTrackingEnabled") ^ 1;
  else
    v9 = 0;
  v10 = csp_cinematicVideoEnabled(a1);
  v11 = MGGetBoolAnswer();
  if (a2)
    a2 = objc_msgSend(v4, "isDockedTrackingEnabled") ^ 1;
  v12 = _os_feature_enabled_impl();
  v13 = ~(a2 | ~v11 | v8 | v9);
  if (v5 == 5)
    v13 = 0;
  if (v6 == 6)
    v13 = 0;
  if (v7 == 4)
    v13 = 0;
  if (v10)
    v14 = v12 & v13;
  else
    v14 = v13;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 347))
    {
      if (objc_msgSend(v4, "sourcePosition") == 1)
        v14 = 0;
      else
        v14 = v14;
    }
    if (v11 && *(_BYTE *)(a1 + 346))
    {
      if (objc_msgSend(v4, "sourceDeviceType") == 2)
        v14 = 1;
      else
        v14 = v14;
    }
  }
  if (dword_1ECFE9690)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v14;
}

unint64_t BWInferenceVersionMake(unsigned __int16 a1, int a2, uint64_t a3)
{
  return (a2 << 16) | (unint64_t)(a3 << 32) | a1;
}

void __captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync_block_invoke(uint64_t a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  objc_autoreleasePoolPop(v2);
}

opaqueCMSimpleQueue *TimestampedAudioBufferListQueueTransfer(opaqueCMSimpleQueue *result, opaqueCMSimpleQueue *a2)
{
  opaqueCMSimpleQueue *v3;
  opaqueCMSimpleQueue *v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      result = (opaqueCMSimpleQueue *)CMSimpleQueueDequeue(result);
      if (result)
      {
        v4 = result;
        do
        {
          v5 = (unsigned int *)*((_QWORD *)v4 + 6);
          if (v5)
          {
            v6 = *v5;
            if ((_DWORD)v6)
            {
              v7 = *((_DWORD *)v4 + 4);
              v8 = v5 + 3;
              do
              {
                *v8 = v7;
                v8 += 4;
                --v6;
              }
              while (v6);
            }
          }
          *((_DWORD *)v4 + 5) = 0;
          *((_DWORD *)v4 + 14) = 0;
          *((_QWORD *)v4 + 1) = 0;
          CMSimpleQueueEnqueue(a2, v4);
          result = (opaqueCMSimpleQueue *)CMSimpleQueueDequeue(v3);
          v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

__CFDictionary *FigCaptureMetadataUtilitiesCreateMetadataAttachments(CMSampleBufferRef sbuf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, char a14, const void *a15, void *a16, const void *a17, const void *a18, uint64_t a19, char a20)
{
  uint64_t v20;
  const opaqueCMFormatDescription *FormatDescription;
  CVImageBufferRef ImageBuffer;
  __CFDictionary *DeepCopy;
  const __CFString *v30;
  uint64_t v31;
  void *v32;
  int v33;
  void *v34;
  _BOOL4 IsExtensionDeviceType;
  __CFString *v36;
  int v37;
  const __CFString *v38;
  CGSize v39;
  __CFDictionary *v40;
  uint64_t v41;
  CFTypeRef v42;
  uint64_t v43;
  CFTypeRef v44;
  uint64_t v45;
  CFTypeRef v46;
  __CFDictionary *MakerNoteMetadata;
  uint64_t v48;
  CFTypeRef v49;
  CFStringRef *v50;
  CFTypeRef v51;
  void *v52;
  void *v53;
  CFTypeRef v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  CFTypeRef v60;
  void *v61;
  CFTypeRef v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t AttachedInference;
  uint64_t v67;
  uint64_t v68;
  const __CFDictionary *v69;
  const __CFDictionary *v70;
  CGSize v71;
  CFTypeRef v72;
  CFStringRef v73;
  CFTypeRef v74;
  uint64_t v75;
  void *v76;
  const __CFString *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  double width;
  double height;
  const __CFDictionary *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v90;
  uint64_t *v91;
  void *v92;
  int v93;
  const __CFString *v94;
  int v95;
  void *v96;
  uint64_t v97;
  void *v98;
  float v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t i;
  void *v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t j;
  void *v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  CMSampleBufferRef v129;
  float v130;
  void *v131;
  __CFDictionary *v132;
  int v133;
  _QWORD *v134;
  float v135;
  void *v136;
  _QWORD *v137;
  double v138;
  long double v139;
  double v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  void *v146;
  void *v147;
  double v148;
  long double v149;
  double v150;
  long double v151;
  uint64_t v152;
  void *v153;
  _QWORD *v154;
  int v155;
  float v156;
  float v157;
  double v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  void *v163;
  void *v164;
  int v165;
  int v166;
  int v167;
  int v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  void *v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  CFTypeRef v179;
  void *v180;
  void *v181;
  unsigned int v182;
  const __CFString *v183;
  void *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  _QWORD *v190;
  uint64_t v191;
  float v192;
  double v193;
  uint64_t v194;
  void *v195;
  int v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  double v201;
  void *v202;
  double v203;
  double v204;
  void *v205;
  float v206;
  double v207;
  double v208;
  double v209;
  void *v210;
  float v211;
  double v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  __CFDictionary *ExifAuxRegionsDictForSampleBuffer;
  _QWORD *v223;
  __CFDictionary *v224;
  uint64_t v225;
  void *v226;
  CGColorSpace *v227;
  CFDataRef v228;
  void *v229;
  uint64_t v230;
  CFTypeRef v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  CGSize v237;
  void *v238;
  int CGRectIfPresent;
  int v241;
  int v242;
  int v243;
  CVImageBufferRef v244;
  CFTypeRef v245;
  uint64_t v246;
  const __CFString *v247;
  uint64_t v248;
  CGPoint v249;
  unint64_t v250;
  CMSampleBufferRef target;
  unint64_t Dimensions;
  __CFDictionary *v253;
  void *v254;
  CGAffineTransform v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  CGRect v264;
  CGRect rect;
  id v266;
  CGSize size;
  CGSize v268;
  void *v269;
  const __CFString *v270;
  __CFDictionary *v271;
  _QWORD v272[4];
  uint64_t v273;
  _BYTE v274[128];
  _BYTE v275[128];
  uint64_t v276;
  CGRect v277;
  CGRect v278;

  v276 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  DeepCopy = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v30 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v254 = (void *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v254)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return DeepCopy;
  }
  v253 = DeepCopy;
  v242 = a4;
  if (FigCaptureMetadataUtilitiesCreateMetadataAttachments_sOnceToken != -1)
    dispatch_once(&FigCaptureMetadataUtilitiesCreateMetadataAttachments_sOnceToken, &__block_literal_global_13);
  v31 = *MEMORY[0x1E0D06D00];
  v32 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  v243 = a8;
  v235 = v31;
  if ((objc_msgSend(v32, "isEqual:", *MEMORY[0x1E0D05A38]) & 1) != 0)
  {
    v33 = 1;
  }
  else
  {
    v34 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", v31);
    v33 = objc_msgSend(v34, "isEqual:", *MEMORY[0x1E0D05A50]);
  }
  IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D069B8]), "integerValue"));
  v244 = ImageBuffer;
  v241 = a5;
  if (IsExtensionDeviceType)
  {
    v36 = (__CFString *)CMGetAttachment(sbuf, CFSTR("CameraManufacturer"), 0);
    v37 = objc_msgSend((id)-[__CFString lowercaseString](v36, "lowercaseString"), "hasPrefix:", CFSTR("apple"));
    v38 = CFSTR("Apple");
    if (!v37)
      v38 = v36;
    v247 = v38;
    v245 = CMGetAttachment(sbuf, CFSTR("CameraNonLocalizedName"), 0);
  }
  else
  {
    v245 = (CFTypeRef)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString;
    v247 = CFSTR("Apple");
  }
  v39 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v264.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  v264.size = v39;
  CGRectIfPresent = FigCFDictionaryGetCGRectIfPresent();
  CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05E78], 0);
  v236 = FigCFEqual();
  v40 = v253;
  -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(a2, a3 != 0, v33, IsExtensionDeviceType, 0)), *MEMORY[0x1E0CBCFF0]);
  v41 = *MEMORY[0x1E0D05C18];
  v42 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05C18], 0);
  if (v42)
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", v42, v41);
  if (a13)
  {
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2638], 0), *MEMORY[0x1E0CA2638]);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D086F8], 0), *MEMORY[0x1E0D086F8]);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08700], 0), *MEMORY[0x1E0D08700]);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB0]), *MEMORY[0x1E0D06EB0]);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05BF8], 0), *MEMORY[0x1E0D05BF8]);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05BF0], 0), *MEMORY[0x1E0D05BF0]);
  }
  v43 = *MEMORY[0x1E0CA2660];
  v44 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2660], 0);
  if (v44)
  {
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", v44, v43);
    if (FigCFEqual())
    {
      v45 = *MEMORY[0x1E0CA2668];
      v46 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0CA2668], 0);
      if (v46)
        -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", v46, v45);
    }
  }
  if (a10)
  {
    MakerNoteMetadata = fcmu_createMakerNoteMetadata(sbuf, a16, a17, a18);
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", MakerNoteMetadata, *MEMORY[0x1E0CBCF70]);

  }
  v48 = *MEMORY[0x1E0D05A58];
  v49 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05A58], 0);
  if (v49)
    -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", v49, v48);
  v50 = (CFStringRef *)MEMORY[0x1E0D086F0];
  target = sbuf;
  if (a11)
  {
    if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
      dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
    v266 = 0;
    v51 = CMGetAttachment(sbuf, v30, 0);
    if (v51)
    {
      v52 = (void *)v51;
      v53 = (void *)CMGetAttachment(sbuf, CFSTR("StillImageProcessingFlags"), 0);
      if (v53)
      {
        if ((objc_msgSend(v53, "unsignedIntValue") & 0x40) == 0)
          goto LABEL_242;
        v54 = CMGetAttachment(sbuf, *v50, 0);
        if (!v54)
          goto LABEL_242;
        v55 = (void *)v54;
        v56 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        if (v56)
        {
          v57 = v56;
          objc_msgSend(v56, "setObject:forKeyedSubscript:", &unk_1E49F85F8, *MEMORY[0x1E0D05850]);
          v58 = (void *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08778], 0);
          v59 = (void *)objc_msgSend(v55, "objectForKeyedSubscript:", *MEMORY[0x1E0D08360]);
          if (v58)
          {
            objc_msgSend(v58, "floatValue");
            objc_msgSend(v59, "floatValue");
          }
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v59, *MEMORY[0x1E0D05800]);
          v60 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D087B0], 0);
          if (v60)
            v61 = (void *)v60;
          else
            v61 = &unk_1E4A02DE0;
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v61, *MEMORY[0x1E0D05830]);
          v62 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D087A8], 0);
          if (v62)
            v63 = (void *)v62;
          else
            v63 = &unk_1E4A02DE0;
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v63, *MEMORY[0x1E0D05828]);
          v64 = objc_msgSend(v55, "objectForKeyedSubscript:", *MEMORY[0x1E0D08668]);
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v64, *MEMORY[0x1E0D05838]);
          objc_msgSend(v57, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D087A0], 0), *MEMORY[0x1E0D05820]);
          v65 = objc_msgSend(v52, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E50]);
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v65, *MEMORY[0x1E0D05810]);
          AttachedInference = BWInferenceGetAttachedInference(sbuf, 801, 0x1E4951058);
          if (AttachedInference)
            v67 = AttachedInference;
          else
            v67 = MEMORY[0x1E0C9AA60];
          v68 = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v67, 1, &v266);
          objc_msgSend(v57, "setObject:forKeyedSubscript:", v68, *MEMORY[0x1E0D05808]);
          if (v266)
          {
            objc_msgSend(v266, "code");
            FigSignalErrorAt();
          }
          objc_msgSend(v57, "setObject:forKeyedSubscript:", CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08788], 0), *MEMORY[0x1E0D05840]);
          v69 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D087B8], 0);
          v40 = v253;
          v50 = (CFStringRef *)MEMORY[0x1E0D086F0];
          if (v69)
          {
            v70 = v69;
            v71 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
            v249 = (CGPoint)*MEMORY[0x1E0C9D628];
            size = (CGSize)*MEMORY[0x1E0C9D628];
            v268 = v71;
            v237 = v71;
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              rect.origin = v249;
              rect.size = v237;
              if (CGRectMakeWithDictionaryRepresentation(v70, &rect))
              {
                v277.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, size.width, size.height, v268.width);
                v70 = CGRectCreateDictionaryRepresentation(v277);
              }
            }
            objc_msgSend(v57, "setObject:forKeyedSubscript:", v70, *MEMORY[0x1E0D05818]);
          }
          v72 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D087C0], 0);
          if (v72)
            objc_msgSend(v57, "setObject:forKeyedSubscript:", v72, *MEMORY[0x1E0D05848]);
          if (objc_msgSend(v57, "count"))
            -[__CFDictionary setObject:forKeyedSubscript:](v253, "setObject:forKeyedSubscript:", v57, *MEMORY[0x1E0D057F8]);
          goto LABEL_56;
        }
      }
    }
    fig_log_get_emitter();
    v234 = v20;
    LODWORD(v233) = 0;
    FigDebugAssert3();
LABEL_242:
    v57 = 0;
LABEL_56:

  }
  if (a12)
  {
    v73 = *v50;
    v74 = CMGetAttachment(sbuf, *v50, 0);
    if (v74)
      -[__CFDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v74, v73);
  }
  v75 = a19;
  v76 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v233, v234);
  if (v76)
    -[__CFDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v76, *MEMORY[0x1E0CBD090]);
  v77 = v247;
  objc_msgSend(v76, "setObject:forKeyedSubscript:", v247, *MEMORY[0x1E0CBD0B0]);
  objc_msgSend(v76, "setObject:forKeyedSubscript:", v245, *MEMORY[0x1E0CBD0B8]);
  objc_msgSend(v76, "setObject:forKeyedSubscript:", FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSoftwareProductVersion, *MEMORY[0x1E0CBD0D8]);
  objc_msgSend(v76, "setObject:forKeyedSubscript:", FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString, *MEMORY[0x1E0CBD0A0]);
  if (!a19)
    v75 = objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v250 = HIDWORD(Dimensions);
  v78 = objc_msgSend((id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sDateTimeFormatter, "stringFromDate:", v75);
  objc_msgSend(v76, "setObject:forKeyedSubscript:", v78, *MEMORY[0x1E0CBD088]);
  objc_msgSend(v76, "setObject:forKey:", &unk_1E49F8508, *MEMORY[0x1E0CBD0F8]);
  objc_msgSend(v76, "setObject:forKey:", &unk_1E49F8508, *MEMORY[0x1E0CBD108]);
  objc_msgSend(v76, "setObject:forKey:", &unk_1E49F8520, *MEMORY[0x1E0CBD0D0]);
  -[__CFDictionary setObject:forKey:](v40, "setObject:forKey:", &unk_1E49F8508, *MEMORY[0x1E0CBCA00]);
  -[__CFDictionary setObject:forKey:](v40, "setObject:forKey:", &unk_1E49F8508, *MEMORY[0x1E0CBC9F8]);
  v79 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (v79)
    -[__CFDictionary setObject:forKeyedSubscript:](v40, "setObject:forKeyedSubscript:", v79, *MEMORY[0x1E0CBCB50]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", CFSTR("0232"), *MEMORY[0x1E0CBCCB8]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v78, *MEMORY[0x1E0CBCB40]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v78, *MEMORY[0x1E0CBCB38]);
  v80 = objc_msgSend((id)FigCaptureMetadataUtilitiesCreateMetadataAttachments_sSubsecTimeFormatter, "stringFromDate:", v75);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v80, *MEMORY[0x1E0CBCCA0]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v80, *MEMORY[0x1E0CBCC98]);
  *(_QWORD *)&size.width = MEMORY[0x1E0C809B0];
  *(_QWORD *)&size.height = 3221225472;
  *(_QWORD *)&v268.width = __fcmu_getTimeZoneFormatter_block_invoke_2;
  *(_QWORD *)&v268.height = &unk_1E491ECB8;
  v269 = &__block_literal_global_189;
  if (fcmu_getTimeZoneFormatter_onceToken != -1)
    dispatch_once(&fcmu_getTimeZoneFormatter_onceToken, &size);
  os_unfair_lock_lock((os_unfair_lock_t)&fcmu_getTimeZoneFormatter_sLock);
  v81 = (id)fcmu_getTimeZoneFormatter_sTimeZoneFormatter;
  os_unfair_lock_unlock((os_unfair_lock_t)&fcmu_getTimeZoneFormatter_sLock);
  v82 = objc_msgSend(v81, "stringFromDate:", v75);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v82, *MEMORY[0x1E0CBCC10]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v82, *MEMORY[0x1E0CBCC20]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v82, *MEMORY[0x1E0CBCC18]);
  width = (double)(int)Dimensions;
  height = (double)SHIDWORD(Dimensions);
  v85 = (const __CFDictionary *)CMGetAttachment(sbuf, CFSTR("EncodedImageSurfaceCGSize"), 0);
  if (v85)
  {
    size.width = 0.0;
    size.height = 0.0;
    if (CGSizeMakeWithDictionaryRepresentation(v85, &size))
    {
      width = size.width;
      height = size.height;
      LODWORD(Dimensions) = (int)size.width;
      LODWORD(v250) = (int)size.height;
    }
  }
  v86 = v33;
  if (width > 0.0 && height > 0.0)
  {
    v87 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (unint64_t)width);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v87, *MEMORY[0x1E0CBCC28]);
    v77 = v247;
    v88 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (unint64_t)height);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v88, *MEMORY[0x1E0CBCC30]);
  }
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v77, *MEMORY[0x1E0CBCBD8]);
  v89 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v90 = (uint64_t *)MEMORY[0x1E0D06A78];
  v91 = (uint64_t *)MEMORY[0x1E0D06A68];
  if (v89)
  {
    v92 = v89;
    if (IsExtensionDeviceType)
    {
      if (v245)
        objc_msgSend(v89, "appendString:");
LABEL_92:
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v92, *MEMORY[0x1E0CBCBE0]);
      goto LABEL_93;
    }
    if (FigCaptureMetadataUtilitiesCreateMetadataAttachments_sMarketingNameString)
      objc_msgSend(v89, "appendString:");
    v93 = objc_msgSend((id)CMGetAttachment(sbuf, CFSTR("CaptureDeviceType"), 0), "intValue");
    if (v86)
    {
      objc_msgSend(v92, "appendString:", CFSTR(" front"));
      v94 = CFSTR(" TrueDepth");
      if (v93 != 6 && v93 != 12)
        goto LABEL_88;
    }
    else
    {
      objc_msgSend(v92, "appendString:", CFSTR(" back"));
      v95 = v93 - 4;
      if ((v93 - 4) > 6 || ((0x71u >> v95) & 1) == 0)
        goto LABEL_88;
      v94 = off_1E491F230[v95];
    }
    objc_msgSend(v92, "appendString:", v94);
LABEL_88:
    objc_msgSend(v92, "appendString:", CFSTR(" camera"));
    v96 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", *v90);
    if (v96)
    {
      objc_msgSend(v96, "doubleValue");
      objc_msgSend(v92, "appendFormat:", CFSTR(" %gmm"), v97);
    }
    v98 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", *v91);
    if (v98)
    {
      objc_msgSend(v98, "floatValue");
      objc_msgSend(v92, "appendFormat:", CFSTR(" f/%g"), v99);
    }
    goto LABEL_92;
  }
LABEL_93:
  v238 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v248 = *v90;
  v100 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:");
  v246 = *v91;
  v101 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:");
  v102 = (void *)CMGetAttachment(sbuf, CFSTR("ExifSlaveFocalLengths"), 0);
  v103 = (void *)CMGetAttachment(sbuf, CFSTR("ExifSlaveLensFNumbers"), 0);
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v263 = 0u;
  v104 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v260, v275, 16);
  if (v104)
  {
    v105 = v104;
    v106 = *(_QWORD *)v261;
    v107 = v100;
    do
    {
      for (i = 0; i != v105; ++i)
      {
        if (*(_QWORD *)v261 != v106)
          objc_enumerationMutation(v102);
        v109 = *(void **)(*((_QWORD *)&v260 + 1) + 8 * i);
        objc_msgSend(v109, "doubleValue");
        v111 = v110;
        objc_msgSend(v107, "doubleValue");
        if (v111 > v112)
          v107 = v109;
        objc_msgSend(v109, "doubleValue");
        v114 = v113;
        objc_msgSend(v100, "doubleValue");
        if (v114 < v115)
          v100 = v109;
      }
      v105 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v260, v275, 16);
    }
    while (v105);
  }
  else
  {
    v107 = v100;
  }
  v258 = 0u;
  v259 = 0u;
  v256 = 0u;
  v257 = 0u;
  v116 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v256, v274, 16);
  if (!v116)
  {
    v119 = v101;
    if (!v100)
      goto LABEL_126;
    goto LABEL_120;
  }
  v117 = v116;
  v118 = *(_QWORD *)v257;
  v119 = v101;
  do
  {
    for (j = 0; j != v117; ++j)
    {
      if (*(_QWORD *)v257 != v118)
        objc_enumerationMutation(v103);
      v121 = *(void **)(*((_QWORD *)&v256 + 1) + 8 * j);
      objc_msgSend(v121, "doubleValue");
      v123 = v122;
      objc_msgSend(v119, "doubleValue");
      if (v123 > v124)
        v119 = v121;
      objc_msgSend(v121, "doubleValue");
      v126 = v125;
      objc_msgSend(v101, "doubleValue");
      if (v126 < v127)
        v101 = v121;
    }
    v117 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v256, v274, 16);
  }
  while (v117);
  if (v100)
  {
LABEL_120:
    if (v107)
    {
      v128 = !v101 || v119 == 0;
      if (!v128)
      {
        objc_msgSend(v238, "addObject:", v100);
        objc_msgSend(v238, "addObject:", v107);
        objc_msgSend(v238, "addObject:", v101);
        objc_msgSend(v238, "addObject:", v119);
        objc_msgSend(v79, "setObject:forKeyedSubscript:", v238, *MEMORY[0x1E0CBCBF0]);
      }
    }
  }
LABEL_126:
  v129 = target;
  v130 = 0.0;
  v132 = v253;
  v131 = v254;
  if ((objc_msgSend((id)objc_msgSend((id)CMGetAttachment(target, CFSTR("StillSettings"), 0), "captureSettings"), "captureFlags") & 0x80) != 0)
  {
    v133 = objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D80]), "BOOLValue");
    v134 = (_QWORD *)MEMORY[0x1E0D06D78];
    if (!v133)
      v134 = (_QWORD *)MEMORY[0x1E0D06918];
    objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *v134), "floatValue");
    v130 = v135;
  }
  v136 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]);
  v137 = (_QWORD *)MEMORY[0x1E0CBCC70];
  if (v136)
  {
    objc_msgSend(v136, "doubleValue");
    if (v138 <= 0.0)
    {
      v141 = 0.0;
      v142 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 0.0);
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v142, *MEMORY[0x1E0CBCB78]);
    }
    else
    {
      v139 = v138;
      if (v138 >= 1.0)
        v140 = round(v138 * 10.0) / 10.0;
      else
        v140 = 1.0 / (double)(int)(1.0 / v138 + 0.5);
      v143 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v140);
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v143, *MEMORY[0x1E0CBCB78]);
      v141 = -log2(v139);
    }
    objc_msgSend(v79, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v141), *v137);
  }
  v144 = objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06920]);
  v145 = (_QWORD *)MEMORY[0x1E0CBCB00];
  if (v144)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v144, *MEMORY[0x1E0CBCB00]);
  v146 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", v246);
  if (v146)
  {
    v147 = v146;
    objc_msgSend(v146, "doubleValue");
    v149 = v148;
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v147, *MEMORY[0x1E0CBCB80]);
    v150 = 0.0;
    if (v149 > 0.0)
    {
      v151 = log2(v149);
      v150 = v151 + v151;
    }
    v152 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v150);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v152, *MEMORY[0x1E0CBCA20]);
  }
  v153 = (void *)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B48]);
  v154 = (_QWORD *)MEMORY[0x1E0CBCBC8];
  if (v153)
  {
    if (v130 != 0.0)
    {
      v155 = objc_msgSend((id)objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B40]), "intValue");
      LODWORD(size.width) = 0;
      FigCaptureComputeImageGainFromMetadata();
      v156 = exp2f(-v130);
      v157 = (float)v155;
      v131 = v254;
      *(float *)&v158 = v156 * (float)(*(float *)&size.width * v157);
      v153 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v158);
    }
    v159 = objc_msgSend(v153, "intValue");
    v160 = 12;
    v161 = 4u;
    while (1)
    {
      v162 = *(_DWORD *)((char *)&fcmu_snapISO_sISOTable + v161);
      if (v159 <= (v162 + v160) >> 1)
        break;
      v161 += 4;
      v160 = v162;
      if (v161 == 216)
      {
        LOWORD(v160) = v159;
        break;
      }
    }
    v273 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)v160);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v273, 1), *v154);
  }
  v163 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D05858]);
  if (v163)
  {
    v164 = v163;
    v165 = (int)(objc_msgSend((id)objc_msgSend(v163, "objectAtIndexedSubscript:", 0), "intValue") * Dimensions) / 1000;
    v166 = (int)(objc_msgSend((id)objc_msgSend(v164, "objectAtIndexedSubscript:", 1), "intValue") * v250) / 1000;
    v167 = (int)(objc_msgSend((id)objc_msgSend(v164, "objectAtIndexedSubscript:", 2), "intValue") * Dimensions) / 1000;
    v168 = (int)(objc_msgSend((id)objc_msgSend(v164, "objectAtIndexedSubscript:", 3), "intValue") * v250) / 1000;
    if (CGRectIfPresent && !v236)
    {
      CGAffineTransformMakeScale(&v255, (double)(int)Dimensions, (double)(int)v250);
      v278 = CGRectApplyAffineTransform(v264, &v255);
      LOWORD(v165) = llround(FigCaptureTransformRectToCoordinateSpaceOfRect((double)(__int16)v165, (double)(__int16)v166, (double)(__int16)v167, (double)(__int16)v168, v278.origin.x, v278.origin.y, v278.size.width)* (double)(int)Dimensions);
      LOWORD(v166) = llround(v169 * (double)(int)v250);
      LOWORD(v167) = llround(v170 * (double)(int)Dimensions);
      LOWORD(v168) = llround(v171 * (double)(int)v250);
    }
    v272[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)(v165+ ((__int16)(v167 + ((unsigned __int16)(v167 & 0x8000) >> 15)) >> 1)));
    v272[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)(v166+ ((__int16)(v168 + ((unsigned __int16)(v168 & 0x8000) >> 15)) >> 1)));
    v272[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)v167);
    v272[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)v168);
    v172 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v272, 4);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v172, *MEMORY[0x1E0CBCC88]);
    v129 = target;
    v132 = v253;
    v131 = v254;
    v154 = (_QWORD *)MEMORY[0x1E0CBCBC8];
  }
  v173 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E28]);
  if (v173)
  {
    v174 = objc_msgSend(v173, "intValue");
    if ((v174 & 0x80000000) == 0)
    {
      if (v174 < 0xD)
        v175 = 1;
      else
        v175 = 2;
      if (v174 >= 9)
        v176 = v175;
      else
        v176 = 0;
      v177 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v176);
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v177, *MEMORY[0x1E0CBCC68]);
    }
  }
  v178 = objc_msgSend(v131, "objectForKeyedSubscript:", v248);
  if (v178)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v178, *MEMORY[0x1E0CBCBA0]);
  v179 = CMGetAttachment(v129, CFSTR("SDOFCustomRendered"), 0);
  if (v179 || (v179 = (CFTypeRef)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B08])) != 0)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v179, *MEMORY[0x1E0CBCB30]);
  v180 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("CompositeImage"));
  if (v180)
  {
    v181 = v180;
    v182 = objc_msgSend(v180, "intValue");
    if (v182 < 3)
    {
      v183 = CFSTR("CompositeImage");
      v184 = v79;
      v185 = v181;
LABEL_174:
      objc_msgSend(v184, "setObject:forKeyedSubscript:", v185, v183);
      goto LABEL_179;
    }
    if (v182 == 3)
    {
      v186 = objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("SourceImageNumberOfCompositeImage"));
      v187 = objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("SourceExposureTimesOfCompositeImage"));
      if (v186)
      {
        v188 = v187;
        if (v187)
        {
          objc_msgSend(v79, "setObject:forKeyedSubscript:", v181, CFSTR("CompositeImage"));
          objc_msgSend(v79, "setObject:forKeyedSubscript:", v186, CFSTR("SourceImageNumberOfCompositeImage"));
          v183 = CFSTR("SourceExposureTimesOfCompositeImage");
          v184 = v79;
          v185 = (void *)v188;
          goto LABEL_174;
        }
      }
    }
  }
LABEL_179:
  v189 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A10]);
  v190 = (_QWORD *)MEMORY[0x1E0CBCB60];
  if (v189)
  {
    v191 = (uint64_t)v189;
    if (v130 != 0.0)
    {
      objc_msgSend(v189, "floatValue");
      *(float *)&v193 = v192 - v130;
      v191 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v193);
    }
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v191, *v190);
  }
  v194 = objc_msgSend(v131, "objectForKeyedSubscript:", CFSTR("ExifWhiteBalance"));
  if (v194)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v194, *MEMORY[0x1E0CBCCC0]);
  v195 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E60]);
  if (v195)
  {
    v196 = objc_msgSend(v195, "intValue");
    if (v196 == 4)
      v197 = &unk_1E49F8538;
    else
      v197 = &unk_1E49F84F0;
    if (v196 == 4)
      v198 = &unk_1E49F8538;
    else
      v198 = &unk_1E49F8550;
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v197, *MEMORY[0x1E0CBCB68]);
    v199 = v198;
    v131 = v254;
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v199, *MEMORY[0x1E0CBCB70]);
  }
  v200 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D069C0]);
  objc_msgSend(v200, "doubleValue");
  if (v201 > 1.0)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v200, *MEMORY[0x1E0CBCB58]);
  v202 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A70]);
  if (v202)
  {
    objc_msgSend(v202, "doubleValue");
    if (v203 > 0.0)
    {
      v204 = v203;
      v205 = (void *)CMGetAttachment(v129, CFSTR("BWStillImageCaptureSettings"), 0);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v205, "metadata"), "exifFocalLengthMultiplierByPortType"), "objectForKeyedSubscript:", objc_msgSend(v254, "objectForKeyedSubscript:", v235)), "floatValue");
      v207 = v206;
      v128 = v206 == 0.0;
      v208 = 1.0;
      if (!v128)
        v208 = v207;
      v209 = v204 * v208;
      v210 = v205;
      v131 = v254;
      objc_msgSend((id)objc_msgSend(v210, "metadata"), "exifFocalLengthOverride");
      if (v211 == 0.0)
        v212 = v209;
      else
        v212 = v211;
      v213 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", llround(v212));
      objc_msgSend(v79, "setObject:forKeyedSubscript:", v213, *MEMORY[0x1E0CBCB98]);
    }
  }
  v214 = objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B88]);
  if (v214)
    objc_msgSend(v79, "setObject:forKeyedSubscript:", v214, *MEMORY[0x1E0CBCBD0]);
  v215 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C78]);
  v216 = (void *)MEMORY[0x1E0CB37E8];
  if (v215)
    v217 = objc_msgSend(v215, "intValue");
  else
    v217 = 1;
  v218 = objc_msgSend(v216, "numberWithInt:", v217);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v218, *MEMORY[0x1E0CBCC08]);
  v219 = objc_msgSend((id)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AE8]), "intValue");
  v220 = 32 * (v242 == 0);
  if (v242 && v241)
  {
    if (a6 == 2)
    {
      if (v219 == 1)
        v220 = 25;
      else
        v220 = 24;
    }
    else if (a6 == 1)
    {
      if (v219 == 1)
        v220 = 9;
      else
        v220 = 0;
    }
    else if (a6)
    {
      v220 = 32;
    }
    else
    {
      v220 = 16;
    }
  }
  v221 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v220);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v221, *MEMORY[0x1E0CBCB88]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8520, *MEMORY[0x1E0CBCC58]);
  objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8568, *MEMORY[0x1E0CBCC50]);
  ExifAuxRegionsDictForSampleBuffer = FigCaptureMetadataUtiliesCreateExifAuxRegionsDictForSampleBuffer(v129, v243 != 0);
  v223 = (_QWORD *)MEMORY[0x1E0CBCA28];
  if (ExifAuxRegionsDictForSampleBuffer)
  {
    v224 = ExifAuxRegionsDictForSampleBuffer;
    v270 = CFSTR("Regions");
    v271 = ExifAuxRegionsDictForSampleBuffer;
    -[__CFDictionary setObject:forKeyedSubscript:](v132, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v271, &v270, 1), *MEMORY[0x1E0CBCA28]);

  }
  if (a9)
  {
    v225 = objc_msgSend(v254, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
    -[__CFDictionary setObject:forKeyedSubscript:](v132, "setObject:forKeyedSubscript:", v225, *MEMORY[0x1E0D05C30]);
  }
  v226 = (void *)CMGetAttachment(v244, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
  if (v226 && objc_msgSend(v226, "isEqualToString:", *MEMORY[0x1E0CA8D98]))
  {
    v227 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
    v228 = CGColorSpaceCopyICCData(v227);
    -[__CFDictionary setObject:forKeyedSubscript:](v132, "setObject:forKeyedSubscript:", v228, *MEMORY[0x1E0CBC770]);
    CGColorSpaceRelease(v227);
    CFRelease(v228);
    v229 = &unk_1E49F8580;
  }
  else
  {
    v229 = &unk_1E49F8568;
  }
  objc_msgSend(v79, "setObject:forKeyedSubscript:", v229, *MEMORY[0x1E0CBCB10]);
  if (objc_msgSend((id)CMGetAttachment(v129, CFSTR("FrameIsBlackened"), 0), "BOOLValue"))
  {
    -[__CFDictionary setObject:forKeyedSubscript:](v132, "setObject:forKeyedSubscript:", 0, *v223);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8598, *v145);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8598, *v190);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8598, *MEMORY[0x1E0CBCB78]);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E4A00290, *v154);
    objc_msgSend(v79, "setObject:forKeyedSubscript:", &unk_1E49F8598, *v137);
  }
  if (!a15)
  {
    DeepCopy = v132;
    if (!a14)
      return DeepCopy;
    goto LABEL_237;
  }
  DeepCopy = (__CFDictionary *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a15, 1uLL);
  if ((BWStillImageProcessingFlagsForSampleBuffer(v129) & 0x100000) != 0)
    CFDictionaryRemoveValue(DeepCopy, (const void *)*MEMORY[0x1E0CBCD68]);
  FigCFDictionaryAddEntriesToDictionaryWithRecursion();

  if (a14)
  {
LABEL_237:
    v230 = *MEMORY[0x1E0D05DD8];
    v231 = CMGetAttachment(v129, (CFStringRef)*MEMORY[0x1E0D05DD8], 0);
    if (v231)
      -[__CFDictionary setObject:forKeyedSubscript:](DeepCopy, "setObject:forKeyedSubscript:", v231, v230);
  }
  return DeepCopy;
}

uint64_t FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(int a1, int a2, int a3, int a4, int a5)
{
  int v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  unsigned int v21;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v10 = FigCaptureCameraRequires180DegreesRotation(a3, a4);
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    v11 = a2 & ~a5;
    switch(a1)
    {
      case 1:
        if ((a5 & 1) == 0)
        {
          if (!a4 && ((a3 ^ 1 | v10) & 1) != 0)
            goto LABEL_47;
          goto LABEL_46;
        }
        return 8;
      case 2:
        if ((a5 & 1) != 0)
          return 6;
        if (a4 || ((a3 ^ 1 | v10) & 1) == 0)
        {
LABEL_47:
          v20 = a2 == 0;
          v21 = 5;
        }
        else
        {
LABEL_46:
          v20 = a2 == 0;
          v21 = 7;
        }
        if (v20)
          return v21 + 1;
        else
          return v21;
      case 3:
        v15 = v11 == 0;
        if (v11)
          v16 = 2;
        else
          v16 = 1;
        v17 = 3;
        goto LABEL_19;
      case 4:
        v15 = v11 == 0;
        if (v11)
          v16 = 4;
        else
          v16 = 3;
        v17 = 1;
LABEL_19:
        if (!v15)
          ++v17;
        v18 = v10 == 0;
        goto LABEL_38;
      default:
        return 6;
    }
  }
  switch(a1)
  {
    case 1:
      v13 = a2 == 0;
      v14 = 1;
      goto LABEL_24;
    case 2:
      v13 = a2 == 0;
      v14 = 3;
LABEL_24:
      if (v13)
        return v14;
      else
        return v14 + 1;
    case 3:
      v19 = a2 == 0;
      if (a2)
        v16 = 7;
      else
        v16 = 8;
      v17 = 5;
      goto LABEL_35;
    case 4:
      v19 = a2 == 0;
      if (a2)
        v16 = 5;
      else
        v16 = 6;
      v17 = 7;
LABEL_35:
      if (v19)
        ++v17;
      v18 = a3 == 0;
LABEL_38:
      if (v18)
        result = v16;
      else
        result = v17;
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

__CFDictionary *FigCaptureMetadataUtiliesCreateExifAuxRegionsDictForSampleBuffer(const void *a1, int Count)
{
  void *v4;
  int v5;
  double v6;
  double v7;
  double v8;
  CGSize v9;
  const __CFDictionary *v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  const __CFArray *v14;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  void *v17;
  CFMutableArrayRef v18;
  __CFArray *v19;
  CFIndex v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  double width;
  double height;
  CFMutableDictionaryRef v29;
  __CFDictionary *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  double FinalCropRect;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double v40;
  double v41;
  __CFDictionary *v42;
  __CFDictionary *v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  __CFDictionary *v50;
  _BOOL4 v51;
  int v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *key;
  CGAffineTransform v58;
  CGAffineTransform v59;
  CGRect rect;
  CGRect v61;
  double v62;
  double v63;
  double v64;
  CGFloat v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v4 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05E78], 0);
  v5 = FigCFEqual();
  v62 = FigCaptureUnityRect();
  v63 = v6;
  v64 = v7;
  v65 = v8;
  v9 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v61.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  v61.size = v9;
  memset(&rect, 0, sizeof(rect));
  v10 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D087B8], 0);
  if (!v10)
  {
    v11 = 0;
    if (Count)
      goto LABEL_3;
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  v11 = CGRectMakeWithDictionaryRepresentation(v10, &rect);
  if (!Count)
    goto LABEL_8;
LABEL_3:
  v12 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  v13 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
  v14 = (const __CFArray *)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
  if (v14 || (v14 = (const __CFArray *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998])) != 0)
  {
    Count = CFArrayGetCount(v14);
    if (Count)
      goto LABEL_11;
  }
  else
  {
    Count = 0;
  }
LABEL_9:
  if (!v11 && !v5)
    return 0;
LABEL_11:
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_43;
  v51 = v11;
  v52 = v5;
  if (!v5)
    FigCFDictionaryGetCGRectIfPresent();
  v17 = (void *)CMGetAttachment(a1, CFSTR("StillSettings"), 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBCA78], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v17, "requestedSettings"), "outputWidth")));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBCA70], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(v17, "requestedSettings"), "outputHeight")));
  v18 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]);
  if (v18)
  {
    v19 = v18;
    v50 = Mutable;
    if (Count >= 1)
    {
      v20 = 0;
      v21 = (const void *)*MEMORY[0x1E0D06D58];
      key = (void *)*MEMORY[0x1E0D06F20];
      v49 = (void *)*MEMORY[0x1E0CBCAA0];
      v56 = (void *)*MEMORY[0x1E0D06890];
      v48 = (void *)*MEMORY[0x1E0CBCA88];
      v55 = (void *)*MEMORY[0x1E0D06888];
      v47 = (void *)*MEMORY[0x1E0CBCA80];
      v54 = (void *)*MEMORY[0x1E0D06958];
      v46 = (void *)*MEMORY[0x1E0CBCA90];
      v53 = (void *)*MEMORY[0x1E0D06A48];
      v45 = (void *)*MEMORY[0x1E0CBCA98];
      v22 = (const void *)*MEMORY[0x1E0CBCAD0];
      v23 = (const void *)*MEMORY[0x1E0CBCAB0];
      v24 = Count;
      do
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v20);
        Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v21);
        if (Value)
        {
          if (CGRectMakeWithDictionaryRepresentation(Value, &v61))
          {
            v66.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(v61.origin.x, v61.origin.y, v61.size.width, v61.size.height, v62, v63, v64);
            width = v66.size.width;
            height = v66.size.height;
            v74.origin.x = 0.0;
            v74.origin.y = 0.0;
            v74.size.width = 1.0;
            v74.size.height = 1.0;
            v67 = CGRectIntersection(v66, v74);
            v61 = v67;
            if (v67.size.width * v67.size.height >= width * height * 0.5)
            {
              v29 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v29)
              {
                v30 = v29;
                CGRectGetMidX(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetWidth(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetMidY(v61);
                FigCFDictionarySetCGFloat();
                CGRectGetHeight(v61);
                FigCFDictionarySetCGFloat();
                v31 = CFDictionaryGetValue(ValueAtIndex, key);
                if (v31)
                  CFDictionaryAddValue(v30, v49, v31);
                v32 = CFDictionaryGetValue(ValueAtIndex, v56);
                if (v32)
                  CFDictionaryAddValue(v30, v48, v32);
                v33 = CFDictionaryGetValue(ValueAtIndex, v55);
                if (v33)
                  CFDictionaryAddValue(v30, v47, v33);
                v34 = CFDictionaryGetValue(ValueAtIndex, v54);
                if (v34)
                  CFDictionaryAddValue(v30, v46, v34);
                v35 = CFDictionaryGetValue(ValueAtIndex, v53);
                if (v35)
                  CFDictionaryAddValue(v30, v45, v35);
                CFDictionaryAddValue(v30, v22, v23);
                CFArrayAppendValue(v19, v30);
                CFRelease(v30);
              }
            }
          }
        }
        ++v20;
      }
      while (v24 != v20);
    }
    Mutable = v50;
    if (v51)
    {
      FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
      memset(&v59, 0, sizeof(v59));
      FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v59, v62, v63, v64, v65, FinalCropRect, v37, v38, v39);
      v58 = v59;
      v68 = CGRectApplyAffineTransform(rect, &v58);
      v40 = v68.size.width;
      v41 = v68.size.height;
      v75.origin.x = 0.0;
      v75.origin.y = 0.0;
      v75.size.width = 1.0;
      v75.size.height = 1.0;
      v69 = CGRectIntersection(v68, v75);
      rect = v69;
      if (v69.size.width * v69.size.height >= v40 * v41 * 0.5)
      {
        v42 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CGRectGetMidX(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetWidth(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetMidY(rect);
        FigCFDictionarySetCGFloat();
        CGRectGetHeight(rect);
        FigCFDictionarySetCGFloat();
        CFDictionaryAddValue(v42, (const void *)*MEMORY[0x1E0CBCAD0], (const void *)*MEMORY[0x1E0CBCAB8]);
        CFArrayAppendValue(v19, v42);
        CFRelease(v42);
      }
    }
    if (v52)
    {
      memset(&v59, 0, 32);
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        v43 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v70.origin = *(CGPoint *)&v59.a;
        v70.size = *(CGSize *)&v59.c;
        CGRectGetMidX(v70);
        FigCFDictionarySetCGFloat();
        v71.origin = *(CGPoint *)&v59.a;
        v71.size = *(CGSize *)&v59.c;
        CGRectGetWidth(v71);
        FigCFDictionarySetCGFloat();
        v72.origin = *(CGPoint *)&v59.a;
        v72.size = *(CGSize *)&v59.c;
        CGRectGetMidY(v72);
        FigCFDictionarySetCGFloat();
        v73.origin = *(CGPoint *)&v59.a;
        v73.size = *(CGSize *)&v59.c;
        CGRectGetHeight(v73);
        FigCFDictionarySetCGFloat();
        CFDictionaryAddValue(v43, (const void *)*MEMORY[0x1E0CBCAD0], (const void *)*MEMORY[0x1E0CBCAA8]);
        CFArrayAppendValue(v19, v43);
        CFRelease(v43);
      }
    }
    CFDictionaryAddValue(v50, (const void *)*MEMORY[0x1E0CBCAC8], v19);
    CFRelease(v19);
  }
  else
  {
LABEL_43:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return Mutable;
}

uint64_t captureSessionServer_handleNoReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t captureSessionServer_handleSessionSetConfigurationMessage(int a1, void *a2)
{
  uint64_t v3;
  const void *v4;
  FigCaptureSessionConfiguration *v5;
  void (*v6)(const void *, FigCaptureSessionConfiguration *);
  const void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v8, 0, 0);
  v4 = v8;
  if (v8)
  {
    v5 = -[FigCaptureSessionConfiguration initWithXPCEncoding:]([FigCaptureSessionConfiguration alloc], "initWithXPCEncoding:", xpc_dictionary_get_value(a2, (const char *)*MEMORY[0x1E0CA36B0]));
    v6 = *(void (**)(const void *, FigCaptureSessionConfiguration *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
    if (v6)
    {
      v6(v4, v5);
    }
    else
    {
      v9 = CFSTR("ErrorStatus");
      v10[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }

    CFRelease(v4);
  }
  return v3;
}

uint64_t captureSessionServer_handleReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t captureSessionServer_messageUnpackCopy(int a1, xpc_object_t xdict, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  id v18[2];

  v18[0] = 0;
  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v18[1] = 0;
  v10 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v10)
  {
    v16 = v10;
    FigDebugAssert3();
  }
  else
  {
    FigDebugAssert3();
    v16 = FigSignalErrorAt();
  }
  if ((_DWORD)v16)
    goto LABEL_20;
  if (a5)
  {
    v11 = FigXPCMessageCopyCFString();
    if ((_DWORD)v11)
    {
      v16 = v11;
LABEL_20:
      FigDebugAssert3();
      goto LABEL_12;
    }
    if (!*a5)
    {
      FigDebugAssert3();
      v14 = 0;
      v16 = 4294954512;
      goto LABEL_13;
    }
  }
  if (!a6)
  {
    v16 = 0;
LABEL_12:
    v14 = 0;
    goto LABEL_13;
  }
  v12 = FigXPCMessageCopyCFData();
  if ((_DWORD)v12)
  {
    v16 = v12;
    goto LABEL_20;
  }
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", 0, v18);
  v14 = v13;
  if (v18[0])
  {
    LODWORD(v17) = 0;
    FigDebugAssert3();
    objc_msgSend(v18[0], "code", v17, v6);
LABEL_23:
    v16 = FigSignalErrorAt();
    goto LABEL_13;
  }
  *a6 = (id)objc_msgSend(v13, "decodeObjectOfClass:forKey:", a3, *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v14, "finishDecoding");
  if (!*a6)
  {
    FigDebugAssert3();
    goto LABEL_23;
  }
  v16 = 0;
LABEL_13:

  return v16;
}

uint64_t FigCaptureSessionGetTypeID()
{
  if (FigCaptureSessionGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureSessionGetClassID_onceToken, &__block_literal_global_54);
  return CMBaseClassGetCFTypeID();
}

uint64_t captureSessionServer_handleSessionStartRunningMessage(int a1, void *a2)
{
  uint64_t v2;
  const void *v3;
  void (*v4)(const void *);
  const void *v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v6, 0, 0);
  v3 = v6;
  if (v6)
  {
    v4 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v4)
    {
      v4(v3);
    }
    else
    {
      v7 = CFSTR("ErrorStatus");
      v8[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v3);
  }
  return v2;
}

void captureSession_StartRunning(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v4[17];

  v4[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    if (*(double *)(DerivedStorage + 376) == 0.0)
      *(CFAbsoluteTime *)(DerivedStorage + 376) = CFAbsoluteTimeGetCurrent();
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke;
    v4[3] = &__block_descriptor_40_e5_v8__0l;
    v4[4] = a1;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v4);
    captureSession_updateSessionStateWithNewInputCondition((uint64_t)a1, (_BYTE *)(DerivedStorage + 332), 1, 0, 1);
  }
}

void captureSession_updateSessionStateWithNewInputCondition(uint64_t a1, _BYTE *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  os_unfair_lock_s *v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v17;
  NSObject *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v11 = DerivedStorage;
    v12 = (os_unfair_lock_s *)(DerivedStorage + 320);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    v13 = (_BYTE *)(v11 + 332);
    if (a3 && v13 == a2)
    {
      *(_BYTE *)(v11 + 344) = 0;
      *(_BYTE *)(v11 + 340) = 0;
      *(_BYTE *)(v11 + 342) = 0;
    }
    if ((a3 & 1) == 0 && ((v14 = (_BYTE *)(v11 + 342), (_BYTE *)(v11 + 340) == a2) || v14 == a2))
    {
      *(_BYTE *)(v11 + 340) = 0;
      *v14 = 0;
    }
    else
    {
      v15 = *(_DWORD *)(v11 + 368);
      if ((_DWORD)a4 == -16406 && v15 == 3 && v13 == a2 && (a3 & 1) == 0
        || (_DWORD)a4 == -12689 && v15 == 3 && (_BYTE *)(v11 + 340) == a2 && a3)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a4 = 0;
      }
      else
      {
        *a2 = a3;
      }
    }
    v17 = *(unsigned __int8 *)(v11 + 333);
    if (*(_BYTE *)(v11 + 336))
    {
      if (!*(_BYTE *)(v11 + 333))
      {
        *(_BYTE *)(v11 + 340) = 0;
        *(_BYTE *)(v11 + 342) = 0;
        if (*(_BYTE *)(v11 + 334))
          *(_BYTE *)(v11 + 344) = 0;
        goto LABEL_31;
      }
      v17 = 1;
    }
    if (v17 && a3 && ((_BYTE *)(v11 + 340) == a2 || (_BYTE *)(v11 + 342) == a2))
    {
      if (dword_1ECFE9590)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
LABEL_31:
    captureSession_updateRunningCondition(a1, a4, a5);
    os_unfair_lock_unlock(v12);
  }
}

uint64_t sbp_ma_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 8) = a2;
  *(_QWORD *)(DerivedStorage + 16) = a3;
  return 0;
}

uint64_t FigSampleBufferProcessorCreateForMotionAttachments(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  _QWORD *v3;
  const __CFAllocator *v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  const __CFArray *v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  const void *v13;
  const void *ValueAtIndex;
  const void *v15;
  uint64_t CameraCharacterizationData;
  unsigned int v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  const __CFNumber *v22;
  const __CFDictionary *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  uint64_t i;
  int v29;
  CFIndex v30;
  uint64_t v31;
  const void *v32;
  const __CFNumber *v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  CFMutableArrayRef v38;
  uint64_t v39;
  char v40;
  const CFArrayCallBacks *v41;
  char v42;
  CFMutableArrayRef v43;
  void *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v48;
  CFTypeRef v49;
  void *v50;
  CFTypeRef cf2;
  void *v52;
  void *key;
  const __CFDictionary *theDict;
  const __CFDictionary *v55;
  float valuePtr;
  unsigned int v57;
  CFTypeRef v58;
  void *value;

  v58 = 0;
  v57 = 0;
  if (!a3)
    goto LABEL_63;
  v3 = a3;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferProcessorGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v46 = v6;
    fig_log_get_emitter();
LABEL_65:
    FigDebugAssert3();
    goto LABEL_53;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 464) = 0x100000001;
  *(_DWORD *)(DerivedStorage + 40) = 0;
  *(_DWORD *)(DerivedStorage + 560) = 0;
  *(_DWORD *)(DerivedStorage + 64) = 3;
  *(_DWORD *)(DerivedStorage + 592) = 0;
  *(_QWORD *)(DerivedStorage + 568) = 0x3F6CAC083126E979;
  FigMotionInitializeQuaternion((_QWORD *)(DerivedStorage + 480));
  *(_BYTE *)(DerivedStorage + 472) = 0;
  if (a2)
  {
    FigCFDictionaryGetIntIfPresent();
    CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06188]);
    FigCFDictionaryGetDoubleIfPresent();
    v8 = (const __CFArray *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06138]);
    if (!v8)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_61;
    }
    v9 = v8;
    theDict = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06140]);
    if (theDict)
    {
      Count = CFArrayGetCount(v9);
      if (Count <= 7)
      {
        v11 = Count;
        v48 = v3;
        v55 = a2;
        if (Count >= 1)
        {
          v12 = 0;
          v13 = (const void *)*MEMORY[0x1E0D05A40];
          key = (void *)*MEMORY[0x1E0D06178];
          v52 = (void *)*MEMORY[0x1E0D05968];
          cf2 = (CFTypeRef)*MEMORY[0x1E0D05A38];
          v49 = (CFTypeRef)*MEMORY[0x1E0D05A50];
          v50 = (void *)*MEMORY[0x1E0D05948];
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
            if (!ValueAtIndex)
              goto LABEL_59;
            v15 = ValueAtIndex;
            if (!CFEqual(ValueAtIndex, v13))
            {
              LODWORD(value) = 0;
              CameraCharacterizationData = portIndexFromPortType(v15, (int *)&value);
              if ((_DWORD)CameraCharacterizationData)
                goto LABEL_58;
              v17 = value;
              v18 = (const __CFDictionary *)CFDictionaryGetValue(a2, key);
              if (v18)
                v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, v15);
              else
                v19 = 0;
              v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v15);
              if (!v20)
                goto LABEL_59;
              v21 = v20;
              valuePtr = 0.0;
              v22 = (const __CFNumber *)CFDictionaryGetValue(v20, v52);
              if (v22)
                CFNumberGetValue(v22, kCFNumberFloatType, &valuePtr);
              if (CFEqual(v15, cf2) || CFEqual(v15, v49))
                FigCFDictionaryGetBooleanIfPresent();
              v23 = (const __CFDictionary *)CFDictionaryGetValue(v21, v50);
              if (v23)
              {
                CameraCharacterizationData = FigMotionGetCameraCharacterizationData(v23, v19, valuePtr, (uint64_t)v15, DerivedStorage + 56 * v17 + 72);
                if ((_DWORD)CameraCharacterizationData)
                {
LABEL_58:
                  v46 = CameraCharacterizationData;
                  fig_log_get_emitter();
                  goto LABEL_65;
                }
              }
              a2 = v55;
            }
          }
          while (v11 != ++v12);
        }
        FigCFDictionaryGetIntIfPresent();
        FigCFDictionaryGetIntIfPresent();
        v24 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("MotionAttachmentTypes"));
        if (v24)
        {
          v25 = v24;
          TypeID = CFArrayGetTypeID();
          if (TypeID == CFGetTypeID(v25))
          {
            Mutable = CFDictionaryCreateMutable(v5, 8, MEMORY[0x1E0C9B390], 0);
            for (i = 0; i != 8; ++i)
              CFDictionarySetValue(Mutable, *(&off_1E4923CB8 + i), (const void *)dword_1A32B17C8[i]);
            v29 = CFArrayGetCount(v25);
            if (v29 >= 1)
            {
              v30 = 0;
              v31 = v29;
              do
              {
                v32 = CFArrayGetValueAtIndex(v25, v30);
                value = 0;
                if (CFDictionaryGetValueIfPresent(Mutable, v32, (const void **)&value))
                  *(_DWORD *)(DerivedStorage + 40) |= value;
                ++v30;
              }
              while (v31 != v30);
            }
            a2 = v55;
            if (Mutable)
              CFRelease(Mutable);
          }
        }
        FigCFDictionaryGetIntIfPresent();
        v33 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("MotionCallbackThreadPriority"));
        v3 = v48;
        if (v33)
          CFNumberGetValue(v33, kCFNumberSInt32Type, &v57);
        goto LABEL_38;
      }
    }
LABEL_63:
    fig_log_get_emitter();
    goto LABEL_60;
  }
LABEL_38:
  *v3 = v58;
  v58 = 0;
  *(_BYTE *)(DerivedStorage + 24) = 1;
  *(_DWORD *)(DerivedStorage + 28) = 2;
  v34 = malloc_type_calloc(*(int *)(DerivedStorage + 64), 8uLL, 0x2004093837F09uLL);
  *(_QWORD *)(DerivedStorage + 48) = v34;
  if (!v34 || (v35 = *(_DWORD *)(DerivedStorage + 40)) == 0 || v35 >= 512)
  {
LABEL_59:
    fig_log_get_emitter();
LABEL_60:
    FigDebugAssert3();
LABEL_61:
    v46 = FigSignalErrorAt();
    goto LABEL_53;
  }
  if ((v35 & 0x180) != 0)
  {
    *(_BYTE *)(DerivedStorage + 576) = 1;
    v36 = malloc_type_malloc(12 * *(int *)(DerivedStorage + 64) + 12, 0x10000403E1C8BA9uLL);
    *(_QWORD *)(DerivedStorage + 640) = v36;
    if (v36)
    {
      v37 = malloc_type_malloc(0x14A0uLL, 0x1000040AC875A91uLL);
      *(_QWORD *)(DerivedStorage + 600) = v37;
      if (v37)
      {
        v38 = CFArrayCreateMutable(v5, (*(_DWORD *)(DerivedStorage + 64) << 8) + 256, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(DerivedStorage + 584) = v38;
        if (v38)
        {
          v39 = 0;
          v40 = 1;
          v41 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          while (1)
          {
            v42 = v40;
            v43 = CFArrayCreateMutable(v5, (*(_DWORD *)(DerivedStorage + 64) << 9) + 512, v41);
            *(_QWORD *)(DerivedStorage + 8 * v39 + 624) = v43;
            if (!v43)
              break;
            v40 = 0;
            v39 = 1;
            if ((v42 & 1) == 0)
            {
              v44 = malloc_type_malloc(0x2FD0uLL, 0x1000040504FFAC1uLL);
              *(_QWORD *)(DerivedStorage + 608) = v44;
              if (v44)
              {
                v45 = malloc_type_malloc(0x528uLL, 0x10000403E1C8BA9uLL);
                *(_QWORD *)(DerivedStorage + 616) = v45;
                if (v45)
                  goto LABEL_52;
              }
              goto LABEL_59;
            }
          }
        }
      }
    }
    goto LABEL_59;
  }
  *(_QWORD *)(DerivedStorage + 32) = FigCoreMotionAllocWithPriority(1, 1, 1, v57, 0.033333, 0.005);
LABEL_52:
  *(_QWORD *)(DerivedStorage + 656) = 0;
  *(_BYTE *)(DerivedStorage + 664) = 0;
  sbp_ma_resetStorage(DerivedStorage);
  v46 = 0;
LABEL_53:
  if (v58)
    CFRelease(v58);
  return v46;
}

uint64_t FigMotionGetCameraCharacterizationData(const __CFDictionary *a1, const __CFDictionary *a2, float a3, uint64_t a4, uint64_t a5)
{
  BOOL v9;
  const void *Value;
  const void *v11;
  CFTypeID TypeID;
  const __CFNumber *v13;
  unsigned int FocalLengthParametersFromArrayUsingModuleLensID;
  unsigned int v15;

  if (a1 && a2)
  {
    *(_DWORD *)(a5 + 40) = 0;
    v9 = FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
    *(_BYTE *)(a5 + 48) = v9;
    Value = CFDictionaryGetValue(a2, CFSTR("FocalLengthCharacterization"));
    if (Value)
    {
      v11 = Value;
      TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v11)
        && ((FigCFDictionaryGetIntIfPresent(),
             v13 = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05B68]),
             (FocalLengthParametersFromArrayUsingModuleLensID = GetFocalLengthParametersFromArrayUsingModuleLensID(v13, (CFArrayRef)v11, a5)) != 0)|| !*(_BYTE *)(a5 + 16)&& (FocalLengthParametersFromArrayUsingModuleLensID = GetFocalLengthParametersFromArrayUsingModuleLensID(0, (CFArrayRef)v11, a5)) != 0))
      {
        v15 = FocalLengthParametersFromArrayUsingModuleLensID;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        v15 = 0;
        if (a3 <= 0.0)
          *(_DWORD *)(a5 + 44) = 0;
        else
          *(float *)(a5 + 44) = 1.0 / a3;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v15 = -12783;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v15 = FigSignalErrorAt();
  }
  if (*(_BYTE *)(a5 + 16))
    return v15;
  else
    return 4294954513;
}

void sbp_ma_resetStorage(uint64_t a1)
{
  const void *v2;

  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 56) = -*(_DWORD *)(a1 + 64);
  sbp_ma_releaseBufferedFrames(a1);
  *(_DWORD *)(a1 + 652) = 0;
  *(_DWORD *)(a1 + 648) = ~*(_DWORD *)(a1 + 64);
  v2 = *(const void **)(a1 + 656);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 656) = 0;
  }
}

void sbp_ma_releaseBufferedFrames(uint64_t a1)
{
  int v2;
  uint64_t i;
  const void *v4;

  if (*(_QWORD *)(a1 + 48))
  {
    v2 = *(_DWORD *)(a1 + 64);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(const void **)(*(_QWORD *)(a1 + 48) + 8 * i);
        if (v4)
        {
          CFRelease(v4);
          *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i) = 0;
          v2 = *(_DWORD *)(a1 + 64);
        }
      }
    }
  }
}

uint64_t asn_audioUnitRenderProc(uint64_t a1, AudioUnitRenderActionFlags *a2, const AudioTimeStamp *a3, uint64_t a4, UInt32 a5)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  const AudioStreamBasicDescription *StreamBasicDescription;
  char *v13;
  uint64_t v14;
  int64_t v15;
  int32_t v16;
  CMClockRef HostTimeClock;
  double RelativeRate;
  int32_t mSampleRate;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  int64_t v23;
  CMClockRef v24;
  CMTimeEpoch epoch;
  int32_t v26;
  int64_t v27;
  _OWORD *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  UInt64 mHostTime;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime time;
  CMTime v39;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v43;
  CMTime v44;

  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v9 = (unint64_t *)(a1 + 440);
  do
  {
    v10 = __ldxr(v9);
    v11 = v10 + 1;
  }
  while (__stxr(v10 + 1, v9));
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 248));
  memset(&v44, 0, sizeof(v44));
  CMTimeMake(&v44, (uint64_t)a3->mSampleTime, (int)StreamBasicDescription->mSampleRate);
  v13 = (char *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 288));
  if (v13)
  {
    if ((~a3->mFlags & 3) == 0)
    {
      v14 = *(_QWORD *)(a1 + 304);
      if (v14)
      {
        if ((*(_BYTE *)(a1 + 324) & 1) != 0)
        {
          memset(&v43, 0, sizeof(v43));
          v15 = AudioConvertHostTimeToNanos(a3->mHostTime - v14);
          CMTimeMake(&v43, v15, 1000000000);
          time1 = v43;
          time2 = *(CMTime *)(a1 + 336);
          v16 = CMTimeCompare(&time1, &time2);
          memset(&time1, 0, sizeof(time1));
          time2 = v44;
          rhs = *(CMTime *)(a1 + 312);
          CMTimeSubtract(&time1, &time2, &rhs);
          time2 = time1;
          CMTimeAbsoluteValue(&v39, &time2);
          time2 = *(CMTime *)(a1 + 336);
          if (CMTimeCompare(&v39, &time2) > 0 || v16 >= 1)
          {
            if (!*(_BYTE *)(a1 + 600) && v16 >= 1)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              RelativeRate = CMSyncGetRelativeRate(HostTimeClock, *(CMClockOrTimebaseRef *)(a1 + 232));
              if (RelativeRate != 1.0)
              {
                rhs = v43;
                CMTimeMultiplyByFloat64(&time2, &rhs, RelativeRate);
                v43 = time2;
              }
              mSampleRate = (int)StreamBasicDescription->mSampleRate;
              rhs = v43;
              CMTimeConvertScale(&time2, &rhs, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              v43 = time2;
              *((_DWORD *)v13 + 14) = time2.value;
            }
            v20 = MEMORY[0x1E0CA2E18];
            *(_OWORD *)(a1 + 360) = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)(a1 + 376) = *(_QWORD *)(v20 + 16);
          }
        }
      }
    }
    v21 = AudioUnitRender(*(AudioUnit *)(a1 + 264), a2, a3, 1u, a5, *((AudioBufferList **)v13 + 6));
    if ((_DWORD)v21)
    {
LABEL_32:
      v31 = v21;
      goto LABEL_34;
    }
    *((_QWORD *)v13 + 1) = v11;
    *((_DWORD *)v13 + 5) = a5;
    if ((a3->mFlags & 2) == 0)
      FigDebugAssert3();
    v22 = v13 + 24;
    if ((*(_BYTE *)(a1 + 372) & 1) != 0)
    {
      CMTimeMake(&v36, *(unsigned int *)(a1 + 384), (int)StreamBasicDescription->mSampleRate);
      time1 = *(CMTime *)(a1 + 360);
      CMTimeAdd(&v43, &time1, &v36);
    }
    else
    {
      v23 = AudioConvertHostTimeToNanos(a3->mHostTime);
      CMTimeMake(&time, v23, 1000000000);
      v24 = CMClockGetHostTimeClock();
      CMSyncConvertTime(&v43, &time, v24, *(CMClockOrTimebaseRef *)(a1 + 232));
      *v22 = *(_OWORD *)&v43.value;
      epoch = v43.epoch;
      *((_QWORD *)v13 + 5) = v43.epoch;
      v26 = (int)StreamBasicDescription->mSampleRate;
      *(_OWORD *)&time1.value = *v22;
      time1.epoch = epoch;
      CMTimeConvertScale(&v43, &time1, v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *v22 = *(_OWORD *)&v43.value;
      *((_QWORD *)v13 + 5) = v43.epoch;
      v27 = *((unsigned int *)v13 + 14);
      if (!(_DWORD)v27)
        goto LABEL_25;
      CMTimeMake(&v37, v27, (int)StreamBasicDescription->mSampleRate);
      *(_OWORD *)&time1.value = *v22;
      time1.epoch = *((_QWORD *)v13 + 5);
      CMTimeSubtract(&v43, &time1, &v37);
    }
    *v22 = *(_OWORD *)&v43.value;
    *((_QWORD *)v13 + 5) = v43.epoch;
LABEL_25:
    *((_QWORD *)v13 + 8) = *(_QWORD *)&a3->mSampleTime;
    *(_DWORD *)(a1 + 384) = *((_DWORD *)v13 + 5);
    v28 = (_OWORD *)(a1 + 360);
    v29 = *((_QWORD *)v13 + 5);
    *(_OWORD *)(a1 + 360) = *v22;
    *(_QWORD *)(a1 + 376) = v29;
    v30 = *((unsigned int *)v13 + 14);
    if ((_DWORD)v30)
    {
      CMTimeMake(&v35, v30, (int)StreamBasicDescription->mSampleRate);
      *(_OWORD *)&time1.value = *v28;
      time1.epoch = *(_QWORD *)(a1 + 376);
      CMTimeAdd(&v43, &time1, &v35);
      *v28 = *(_OWORD *)&v43.value;
      *(_QWORD *)(a1 + 376) = v43.epoch;
    }
    v21 = CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 296), v13);
    if (!(_DWORD)v21)
    {
      CMTimeMake(&v34, a5, (int)StreamBasicDescription->mSampleRate);
      time1 = v44;
      CMTimeAdd(&v43, &time1, &v34);
      *(CMTime *)(a1 + 312) = v43;
      if ((a3->mFlags & 2) != 0)
      {
        memset(&v43, 0, sizeof(v43));
        CMTimeMake(&v43, a5, (int)StreamBasicDescription->mSampleRate);
        time2 = v43;
        CMTimeConvertScale(&time1, &time2, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        v43 = time1;
        mHostTime = a3->mHostTime;
        v31 = 0;
        *(_QWORD *)(a1 + 304) = AudioConvertNanosToHostTime(time1.value) + mHostTime;
      }
      else
      {
        v31 = 0;
        *(_QWORD *)(a1 + 304) = 0;
      }
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 280), (const void *)0xFFFFFFFFFFFFBE56);
  v31 = 4294950486;
LABEL_34:
  CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 280), (const void *)(int)v31);
  if (v13)
    CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 288), v13);
LABEL_31:
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 392), (void *)a1, (dispatch_function_t)asn_generateSamples);
  return v31;
}

uint64_t figremotequeue_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 18453) >= 0xFFFFFFFD
    && (v5 = (void (*)(void))FigRemoteQueueIOSurfaceReceiver_figremotequeue_subsystem[5 * (v4 - 18450) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t _XShareIOSurface(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    v3 = -304;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_7;
  }
  result = FigRemoteQueueIOSurfaceReceiver_ShareIOSurface(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28));
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ShareIOSurface(unsigned int a1, mach_port_t port)
{
  IOSurfaceRef v3;
  IOSurfaceRef v4;
  unint64_t v5;
  void *Value;

  if (port)
  {
    v3 = IOSurfaceLookupFromMachPort(port);
    if (v3)
    {
      v4 = v3;
      v5 = a1;
      Value = (void *)CFDictionaryGetValue((CFDictionaryRef)rqSharedSurfaces, (const void *)a1);
      if (!Value)
      {
        Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        CFDictionaryAddValue((CFMutableDictionaryRef)rqSharedSurfaces, (const void *)v5, Value);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, v4);
      CFRelease(v4);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigMachPortReleaseSendRight_();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

void cdpr_deadConnectionCallback(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 12));
  *(_BYTE *)(DerivedStorage + 9) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 12));
}

uint64_t FigMotionGetBravoDataFromDictionary(const __CFDictionary *a1, uint64_t a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t CameraInfo;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1
    && a2
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05A18])) != 0
    && (v5 = Value,
        v6 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05A30]),
        v7 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05A28]),
        (unint64_t)v6 | (unint64_t)v7))
  {
    v8 = v7;
    memset_pattern16((void *)(a2 + 28), &unk_1A32B1780, 0xCuLL);
    memset_pattern16((void *)(a2 + 40), &unk_1A32B1780, 0xCuLL);
    memset_pattern16((void *)(a2 + 64), &unk_1A32B1480, 0xCuLL);
    v9 = a2 + 104;
    v10 = 76;
    do
    {
      *(_DWORD *)(a2 + v10) = 1065353216;
      *(_OWORD *)v9 = 0uLL;
      *(_OWORD *)(v9 + 16) = 0uLL;
      *(_OWORD *)(v9 + 32) = 0uLL;
      *(_DWORD *)v9 = 1065353216;
      v10 += 4;
      *(_DWORD *)(v9 + 20) = 1065353216;
      *(_DWORD *)(v9 + 40) = 1065353216;
      v9 += 48;
    }
    while (v10 != 104);
    if (v6 && (CameraInfo = FigMotionExtractCameraInfo(v6, a2, 1u, 2), (_DWORD)CameraInfo)
      || v8 && (CameraInfo = FigMotionExtractCameraInfo(v8, a2, 2u, 4), (_DWORD)CameraInfo)
      || (CameraInfo = FigMotionExtractCameraInfo(v5, a2, 0, 6), (_DWORD)CameraInfo))
    {
      v15 = CameraInfo;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      for (i = 0; i != 3; ++i)
      {
        v13 = 0;
        v14 = dword_1A32B176C[i];
        do
        {
          *(float *)(a2 + 76 + 4 * BravoCurrentToReferenceMapping[3 * v14 + dword_1A32B176C[v13]]) = *(float *)(a2 + 28 + 4 * dword_1A32B176C[v13]) / *(float *)(a2 + 28 + 4 * v14);
          ++v13;
        }
        while (v13 != 3);
      }
      return 0;
    }
    return v15;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionExtractCameraInfo(const __CFDictionary *a1, uint64_t a2, unsigned int a3, int a4)
{
  float v8;
  const __CFData *Value;
  const __CFData *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  const void *v15;
  const __CFDictionary *v16;
  uint64_t v17;
  CGPoint v18;
  int v19;
  const __CFDictionary *v20;
  uint64_t v22;
  CGPoint point;
  CFRange v24;

  if (a1 && (LODWORD(point.x) = 0, FigCFDictionaryGetFloatIfPresent()))
  {
    v8 = *(float *)&point.x;
    if (*(float *)&point.x <= 1.0e-10)
      v8 = 1.0;
    *(float *)(a2 + 4 * a3 + 28) = v8;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v14 = FigSignalErrorAt();
    if ((_DWORD)v14)
    {
      fig_log_get_emitter();
      goto LABEL_26;
    }
  }
  Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D058E8]);
  if (!Value || (v10 = Value, CFDataGetLength(Value) != 48))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v22 = FigSignalErrorAt();
    if (!(_DWORD)v22)
      goto LABEL_9;
    v14 = v22;
    fig_log_get_emitter();
LABEL_26:
    FigDebugAssert3();
    return v14;
  }
  v24.location = 0;
  v24.length = 48;
  CFDataGetBytes(v10, v24, (UInt8 *)(a2 + 48 * a4 + 104));
LABEL_9:
  v11 = a3;
  v12 = a2 + 4 * a3;
  v13 = (int *)(v12 + 64);
  if (a1 && (LODWORD(point.x) = 0, FigCFDictionaryGetFloatIfPresent()))
  {
    v14 = 0;
    *(_DWORD *)(v12 + 52) = LODWORD(point.x);
    *v13 = 1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v14 = FigSignalErrorAt();
  }
  v15 = (const void *)*MEMORY[0x1E0D05960];
  if (CFDictionaryContainsKey(a1, (const void *)*MEMORY[0x1E0D05960]))
  {
    v16 = (const __CFDictionary *)CFDictionaryGetValue(a1, v15);
    if (v16)
    {
      v17 = a2 + 8 * v11;
      point = (CGPoint)*MEMORY[0x1E0C9D538];
      CGPointMakeWithDictionaryRepresentation(v16, &point);
      v18 = point;
      goto LABEL_17;
    }
LABEL_24:
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
    if (!(_DWORD)v14)
      return v14;
    goto LABEL_25;
  }
  v19 = *v13;
  v20 = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05958]);
  if (!v20)
    goto LABEL_24;
  v17 = a2 + 8 * v11;
  point = (CGPoint)*MEMORY[0x1E0C9D538];
  CGPointMakeWithDictionaryRepresentation(v20, &point);
  v18 = (CGPoint)vmulq_n_f64((float64x2_t)point, (double)v19);
LABEL_17:
  *(float32x2_t *)(v17 + 4) = vcvt_f32_f64((float64x2_t)v18);
  if ((_DWORD)v14)
  {
LABEL_25:
    fig_log_get_emitter();
    goto LABEL_26;
  }
  return v14;
}

uint64_t captureDeferredPhotoProcessorServer_handleReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t captureDeferredPhotoProcessor_Prewarm(const void *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v9;
  _QWORD v11[8];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  kdebug_trace();
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9390)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1ECFE9390)
    {
      v13 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __captureDeferredPhotoProcessor_Prewarm_block_invoke;
  v11[3] = &unk_1E49223F8;
  v11[6] = DerivedStorage;
  v11[7] = a1;
  v11[4] = a2;
  v11[5] = a3;
  captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v11);
  if (*v6 == 1)
    kdebug_trace();
  kdebug_trace();
  return 0;
}

void captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync_block_invoke;
    block[3] = &unk_1E4922E60;
    block[4] = a2;
    block[5] = a1;
    dispatch_sync(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

uint64_t captureDeferredPhotoProcessorServer_getAndRetainProcessorObjectFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  uint64_t v4;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t FigCaptureDeferredPhotoProcessorSetXPCConnection(uint64_t a1, void *a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v6 = DerivedStorage;
    xpc_retain(a2);
    *((_QWORD *)v6 + 10) = a2;
    *((_QWORD *)v6 + 11) = a3;
  }
  return 0;
}

uint64_t FigCaptureDeferredPhotoProcessorGetTypeID()
{
  if (FigCaptureDeferredPhotoProcessorGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureDeferredPhotoProcessorGetClassID_onceToken, &__block_literal_global_23);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigCaptureDeferredPhotoProcessorCopyProcessorForPID(int a1, _OWORD *a2)
{
  uint64_t v2;
  const __CFAllocator *v5;
  __int128 v6;
  __SecTask *v7;
  __SecTask *v8;
  __CFString *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v12;
  NSObject *v13;
  CFTypeRef v14;
  uint64_t DerivedStorage;
  __CFString *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD handler[5];
  int out_token;
  os_log_type_t type;
  int v23;
  CFTypeRef cf;
  audit_token_t token;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (FigCaptureDeferredPhotoProcessorCopyProcessorForPID_onceToken != -1)
    dispatch_once(&FigCaptureDeferredPhotoProcessorCopyProcessorForPID_onceToken, &__block_literal_global_96);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = a2[1];
  *(_OWORD *)token.val = *a2;
  *(_OWORD *)&token.val[4] = v6;
  v7 = SecTaskCreateWithAuditToken(v5, &token);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = (__CFString *)SecTaskCopySigningIdentifier(v7, 0);
  if (FigCaptureClientHasEntitlementWithSecTask(v8, CFSTR("com.apple.private.avfoundation.capture.deferred-photo-processor.allow")))
  {
    cf = 0;
    if (!a1)
    {
      v19 = v2;
      LODWORD(v18) = 0;
      FigDebugAssert3();
      v14 = 0;
LABEL_12:
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v16 = *(__CFString **)(DerivedStorage + 24);
      if (!v16)
      {
        v16 = v9;
        *(_QWORD *)(DerivedStorage + 24) = v16;
      }
      if (-[__CFString isEqualToString:](v16, "isEqualToString:", 0x1E493D438, v18, v19))
      {

        *(_QWORD *)(DerivedStorage + 24) = CFSTR("com.apple.camera");
      }
      goto LABEL_16;
    }
    if (cdpp_initializeStatics_onceToken != -1)
      dispatch_once(&cdpp_initializeStatics_onceToken, &__block_literal_global_97);
    FigCaptureDeferredPhotoProcessorGetClassID();
    if (!CMDerivedObjectCreate())
    {
      v10 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(v10 + 8) = FigDispatchQueueCreateWithPriority();
      *(_QWORD *)(v10 + 16) = FigDispatchQueueCreateWithPriority();
      *(_DWORD *)(v10 + 32) = a1;
      *(_BYTE *)(v10 + 1) = MGGetBoolAnswer();
      if (dword_1ECFE9390)
      {
        v23 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_QWORD *)(v10 + 40) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      *(_QWORD *)(v10 + 96) = -[BWCaptureDeferredPhotoProcessor initWithFigCaptureDeferredPhotoProcessor:]([BWCaptureDeferredPhotoProcessor alloc], "initWithFigCaptureDeferredPhotoProcessor:", cf);
      *(_BYTE *)v10 = 1;
      out_token = 0;
      v12 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", cf);
      v13 = *(NSObject **)(v10 + 16);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = __FigCaptureDeferredPhotoProcessorCreate_block_invoke;
      handler[3] = &unk_1E491FB78;
      handler[4] = v12;
      notify_register_dispatch(kFigCaptureDeferredNotification_deferredmediadImmediateTermination, &out_token, v13, handler);
      v14 = cf;
      goto LABEL_12;
    }
    FigDebugAssert3();
  }
  v14 = 0;
LABEL_16:

  CFRelease(v8);
  return v14;
}

uint64_t FigCaptureDeferredPhotoProcessorGetClassID()
{
  if (FigCaptureDeferredPhotoProcessorGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureDeferredPhotoProcessorGetClassID_onceToken, &__block_literal_global_23);
  return FigCaptureDeferredPhotoProcessorGetClassID_sFigCaptureDeferredPhotoProcessorClassID;
}

void captureDeferredPhotoProcessorRemote_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureDeferredPhotoProcessorRemote_Invalidate();
  if (sCaptureDeferredPhotoProcessorRemoteClient)
    FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

uint64_t captureDeferredPhotoProcessorRemote_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (!*(_BYTE *)(DerivedStorage + 9))
    {
      v3 = FigXPCCreateBasicMessage();
      if ((_DWORD)v3)
      {
        v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        v1 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t FigCaptureDeferredPhotoProcessorServerStart()
{
  const __CFDictionary *Mutable;
  uint64_t v1;
  _OWORD v3[3];

  v3[0] = xmmword_1E4923910;
  memset(&v3[1], 0, 32);
  if (captureDeferredPhotoProcessorServer_initializeStatics_onceToken != -1)
    dispatch_once(&captureDeferredPhotoProcessorServer_initializeStatics_onceToken, &__block_literal_global_72);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v1 = FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.deferredmedia.photoprocessor", (uint64_t)v3, Mutable);
  if ((_DWORD)v1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable)
      return v1;
    goto LABEL_5;
  }
  if (Mutable)
LABEL_5:
    CFRelease(Mutable);
  return v1;
}

uint64_t captureSession_commitInflightConfiguration(const void *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t started;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  NSObject *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  NSArray *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t j;
  void *v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  NSArray *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t k;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSArray *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  id v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  NSObject *v86;
  id *v87;
  int v88;
  NSArray *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t jj;
  int v94;
  NSArray *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t kk;
  void *v100;
  int v101;
  void *v102;
  int v103;
  int v104;
  int v105;
  _BOOL4 v106;
  NSArray *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t mm;
  void *v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  float v148;
  void *v151;
  double v152;
  NSArray *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t nn;
  uint64_t v158;
  uint64_t v159;
  id *v160;
  FigCaptureCameraSourcePipelineConfiguration *v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t m;
  char v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t n;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  double v186;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v188;
  void (*v189)(uint64_t, const __CFString *, CFDictionaryRef);
  const void *v190;
  void *v191;
  void *v192;
  void *v193;
  uint64_t v194;
  NSArray *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t ii;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t i1;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t i2;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  float v217;
  uint64_t v218;
  float v219;
  uint64_t v220;
  float v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  _BOOL4 v226;
  int v227;
  char v228;
  int v229;
  unsigned int v230;
  void *v231;
  void *v232;
  void *i3;
  void *v234;
  void *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  void *v239;
  unint64_t v240;
  void *v241;
  void *v242;
  uint64_t CaptureDeviceID;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t i4;
  NSObject *v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  NSObject *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  NSObject *v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  uint64_t v268;
  float v269;
  float v270;
  uint64_t v271;
  void *v272;
  float v273;
  int v274;
  int v275;
  float v276;
  float v277;
  float v278;
  int v279;
  float v280;
  float v281;
  int v282;
  BOOL v283;
  float v284;
  float v285;
  int v286;
  float v287;
  NSObject *v288;
  unsigned int v289;
  unsigned int v290;
  NSObject *v291;
  unsigned int v292;
  unsigned int v293;
  const void *v294;
  NSObject *v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v298;
  CFNumberRef v299;
  uint64_t v300;
  const void *v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t i5;
  void *v307;
  const void *v308;
  NSObject *v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  NSArray *v324;
  unsigned int v325;
  int v326;
  void *v327;
  void *v328;
  int v329;
  int v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  NSArray *v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  id v341;
  void *v342;
  char v343;
  _BOOL4 v344;
  int v345;
  id v346;
  char v347;
  NSArray *v348;
  const void *v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  FigCaptureSessionParsedConfiguration *v353;
  NSArray *v354;
  id v355;
  void *v356;
  uint64_t v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  unsigned int v361;
  int v362;
  void *v363;
  uint64_t v364;
  NSArray *obj;
  unsigned int obja;
  int objb;
  id objc;
  FigCaptureSessionParsedConfiguration *v369;
  NSArray *v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  _QWORD v375[5];
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  unsigned int v432;
  os_log_type_t v433[16];
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  _BYTE v441[128];
  _BYTE v442[128];
  _BYTE v443[128];
  _BYTE v444[128];
  _BYTE v445[128];
  _BYTE v446[128];
  _BYTE v447[128];
  _BYTE v448[128];
  _BYTE v449[128];
  _BYTE v450[128];
  _BYTE v451[128];
  _BYTE v452[128];
  os_log_type_t v453[128];
  os_log_type_t type[128];
  _DWORD v455[32];
  _OWORD valuePtr[3];
  __int128 v457;
  __int128 v458;
  __int128 v459;
  uint64_t v460;
  CGSize v461;

  v460 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v319 = v1;
    LODWORD(v314) = 0;
    FigDebugAssert3();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v4 = captureSession_checkClientSessionIsAllowedToRun((uint64_t)a1, *(void **)(DerivedStorage + 408), 0, 0, 0);
  if ((_DWORD)v4)
  {
    started = v4;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
    FigDebugAssert3();
    v6 = 0;
    v7 = 0;
    goto LABEL_456;
  }
  v8 = *(void **)(DerivedStorage + 408);
  if (v8 == *(void **)(DerivedStorage + 416))
  {
    v6 = 0;
    v341 = 0;
  }
  else
  {
    v341 = v8;
    if ((objc_msgSend(*(id *)(DerivedStorage + 440), "isEqual:", *(_QWORD *)(DerivedStorage + 448)) & 1) != 0)
      v6 = 0;
    else
      v6 = (void *)objc_msgSend(*(id *)(DerivedStorage + 440), "mutableCopy");
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  if (*(_QWORD *)(DerivedStorage + 64))
  {
    v9 = objc_msgSend(*(id *)(DerivedStorage + 88), "mediaEnvironmentTCCIdentity");
    if (!v9)
      goto LABEL_458;
    v10 = *(_OWORD *)(DerivedStorage + 36);
    v458 = *(_OWORD *)(DerivedStorage + 20);
    v459 = v10;
    v11 = soft_PAAuthenticatedClientIdentity(&v458, v9);
    if (!v11)
      goto LABEL_458;
  }
  else
  {
    v12 = v341;
    if (!objc_msgSend(v341, "tccIdentity"))
      goto LABEL_17;
    v13 = objc_msgSend(v341, "tccIdentity");
    v14 = *(_OWORD *)(DerivedStorage + 36);
    v458 = *(_OWORD *)(DerivedStorage + 20);
    v459 = v14;
    v11 = soft_PAAuthenticatedClientIdentity(&v458, v13);
    if (!v11)
    {
LABEL_458:
      FigDebugAssert3();
      started = FigSignalErrorAt();
      goto LABEL_455;
    }
  }
  v12 = v341;
  objc_msgSend(v341, "setTccIdentity:", v11, v314, v319);
LABEL_17:
  if (!v12)
  {
    v455[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = 0;
    started = 0;
    goto LABEL_456;
  }
  if (dword_1ECFE9590)
  {
    v455[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17 = v341;
  v18 = v6;
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v356 = *(void **)(DerivedStorage + 416);
  *(_QWORD *)(DerivedStorage + 416) = v341;
  v19 = *(void **)(DerivedStorage + 448);
  if (v6)
  {
    v20 = v6;
  }
  else
  {
    if (v19)
    {
      v19 = 0;
      goto LABEL_26;
    }
    v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  *(_QWORD *)(DerivedStorage + 448) = v20;
LABEL_26:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  v352 = DerivedStorage;
  v327 = v6;
  v328 = v19;
  if (!*(_QWORD *)(DerivedStorage + 592))
  {
    v85 = captureSession_buildGraphWithConfiguration((uint64_t)a1, (uint64_t)v341, 0, 0);
    if ((_DWORD)v85)
    {
      started = v85;
      v455[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v329 = 0;
      v105 = 0;
      goto LABEL_352;
    }
    v329 = 0;
    goto LABEL_340;
  }
  v432 = 0;
  v21 = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v319 = v1;
    LODWORD(v314) = 0;
    FigDebugAssert3();
  }
  v22 = captureSession_clientSetsUserInitiatedCaptureRequestTime();
  v353 = -[FigCaptureSessionParsedConfiguration initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:]([FigCaptureSessionParsedConfiguration alloc], "initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:", v356, v22, *(_QWORD *)(v21 + 400));
  if (!v353
    || (v369 = -[FigCaptureSessionParsedConfiguration initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:]([FigCaptureSessionParsedConfiguration alloc], "initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:", v341, v22, *(_QWORD *)(v21 + 400))) == 0)
  {
    started = FigSignalErrorAt();
    v329 = 0;
    v105 = 0;
    if ((_DWORD)started)
      goto LABEL_346;
    goto LABEL_423;
  }
  v431 = 0u;
  v430 = 0u;
  v429 = 0u;
  v428 = 0u;
  v23 = *(void **)(v21 + 616);
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v428, v455, 16);
  v25 = v356;
  v26 = v21;
  if (v24)
  {
    v27 = v24;
    v28 = *(_QWORD *)v429;
    do
    {
      v29 = 0;
      do
      {
        if (*(_QWORD *)v429 != v28)
          objc_enumerationMutation(v23);
        v30 = objc_msgSend(*(id *)(v26 + 616), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v428 + 1) + 8 * v29), v314, v319);
        if (v30)
          v31 = *(_QWORD *)(v30 + 8);
        else
          v31 = 0;
        cs_updateConfigurationsWithCaptureSource(v356, v31);
        ++v29;
      }
      while (v27 != v29);
      v32 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v428, v455, 16);
      v27 = v32;
    }
    while (v32);
  }
  v427 = 0u;
  v426 = 0u;
  v425 = 0u;
  v424 = 0u;
  v357 = v26;
  v33 = (void *)objc_msgSend(*(id *)(v26 + 624), "previewSinkPipelines", v314);
  v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v424, type, 16);
  if (v34)
  {
    v35 = v34;
    v36 = *(_QWORD *)v425;
    do
    {
      for (i = 0; i != v35; ++i)
      {
        if (*(_QWORD *)v425 != v36)
          objc_enumerationMutation(v33);
        v38 = *(void **)(*((_QWORD *)&v424 + 1) + 8 * i);
        if (objc_msgSend(v38, "sinkID"))
        {
          v39 = objc_msgSend(v38, "sinkID");
          v40 = objc_msgSend(v38, "filters");
          objc_msgSend(v38, "simulatedAperture");
          v42 = v41;
          objc_msgSend(v38, "portraitLightingEffectStrength");
          v44 = v43;
          v45 = objc_msgSend(v38, "semanticStyle");
          objc_msgSend(v38, "primaryCaptureRectAspectRatio");
          v47 = v46;
          objc_msgSend(v38, "primaryCaptureRectCenter");
          cs_updateConfigurationsWithPreviewSinkProperties(v356, v39, v40, v45, objc_msgSend(v38, "primaryCaptureRectUniqueID"), v42, v44, v47, v48, v49);
        }
      }
      v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v424, type, 16);
    }
    while (v35);
  }
  v349 = a1;
  if (cs_configurationChangesAreLiveReconfigurable(v356, v341))
  {
    captureSession_updateGraphForVideoPreviewSinkConfigurationChanges((uint64_t)a1, v369, 1);
    if (!*(_BYTE *)(v357 + 364) || *(_DWORD *)(v357 + 360) != 2)
      captureSession_waitForGraphToStart((uint64_t)a1, 0);
    v50 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v319 = v1;
      LODWORD(v315) = 0;
      FigDebugAssert3();
    }
    v457 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v51 = -[FigCaptureSessionParsedConfiguration parsedMetadataSinkConfigurations](v369, "parsedMetadataSinkConfigurations", v315, v319);
    v52 = -[NSArray countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
    if (v52)
    {
      v53 = v52;
      v54 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (j = 0; j != v53; ++j)
        {
          if (**(_QWORD **)&valuePtr[1] != v54)
            objc_enumerationMutation(v51);
          v56 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * j), "metadataObjectConnectionConfiguration");
          v57 = objc_msgSend(*(id *)(v50 + 624), "metadataSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v56, "sinkConfiguration"), "sinkID"));
          objc_msgSend(v56, "metadataRectOfInterest");
          -[FigCaptureMetadataSinkPipeline setRectOfInterest:](v57, v58, v59, v60, v61);
        }
        v53 = -[NSArray countByEnumeratingWithState:objects:count:](v51, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
      }
      while (v53);
    }
    captureSession_updateGraphForVideoPreviewSinkConfigurationChanges((uint64_t)a1, v369, 0);
    v62 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v320 = v1;
      LODWORD(v316) = 0;
      FigDebugAssert3();
    }
    v457 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v63 = -[FigCaptureSessionParsedConfiguration parsedStillImageSinkConfigurations](v369, "parsedStillImageSinkConfigurations", v316, v320);
    v64 = -[NSArray countByEnumeratingWithState:objects:count:](v63, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
    if (v64)
    {
      v65 = v64;
      v66 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (k = 0; k != v65; ++k)
        {
          if (**(_QWORD **)&valuePtr[1] != v66)
            objc_enumerationMutation(v63);
          objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](objc_msgSend((id)objc_msgSend(*(id *)(v62 + 624), "stillImageSinkPipelineSessionStorageWithSinkID:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * k), "stillImageConnectionConfiguration"), "sinkConfiguration"), "sinkID")), "cameraSourcePipeline")), "setExifFocalLengthsByZoomFactor:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * k), "stillImageConnectionConfiguration"),
                    "irisSinkConfiguration"),
              "exifFocalLengthsByZoomFactor"));
        }
        v65 = -[NSArray countByEnumeratingWithState:objects:count:](v63, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
      }
      while (v65);
    }
    v68 = CMBaseObjectGetDerivedStorage();
    v437 = 0u;
    v438 = 0u;
    v439 = 0u;
    v440 = 0u;
    obj = -[FigCaptureSessionParsedConfiguration parsedPreviewSinkConfigurations](v369, "parsedPreviewSinkConfigurations");
    v69 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v437, &v458, 16);
    if (v69)
    {
      v70 = v69;
      v358 = 0;
      v360 = v68;
      v71 = *(_QWORD *)v438;
      v345 = 1;
      do
      {
        v72 = 0;
        do
        {
          if (*(_QWORD *)v438 != v71)
            objc_enumerationMutation(obj);
          v73 = objc_msgSend(*(id *)(*((_QWORD *)&v437 + 1) + 8 * v72), "videoPreviewSinkConnectionConfiguration");
          if (v73)
          {
            v74 = (void *)v73;
            v436 = 0u;
            v435 = 0u;
            v434 = 0u;
            *(_OWORD *)v433 = 0u;
            v75 = -[FigCaptureSessionParsedConfiguration parsedPreviewSinkConfigurations](v353, "parsedPreviewSinkConfigurations");
            v76 = -[NSArray countByEnumeratingWithState:objects:count:](v75, "countByEnumeratingWithState:objects:count:", v433, valuePtr, 16);
            if (v76)
            {
              v77 = v76;
              v78 = *(_QWORD *)v434;
LABEL_81:
              v79 = 0;
              while (1)
              {
                if (*(_QWORD *)v434 != v78)
                  objc_enumerationMutation(v75);
                v80 = (void *)objc_msgSend(*(id *)(*(_QWORD *)&v433[8] + 8 * v79), "videoPreviewSinkConnectionConfiguration");
                if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(v80, "sinkConfiguration"), "sinkID"), "isEqualToString:", objc_msgSend((id)objc_msgSend(v74, "sinkConfiguration"), "sinkID")) & 1) != 0)break;
                if (v77 == ++v79)
                {
                  v77 = -[NSArray countByEnumeratingWithState:objects:count:](v75, "countByEnumeratingWithState:objects:count:", v433, valuePtr, 16);
                  if (v77)
                    goto LABEL_81;
                  goto LABEL_94;
                }
              }
              if (!v80)
                goto LABEL_94;
              v81 = (void *)objc_msgSend(*(id *)(v360 + 624), "previewSinkPipelineWithSinkID:", objc_msgSend((id)objc_msgSend(v74, "sinkConfiguration"), "sinkID"));
              v25 = v356;
              if ((objc_msgSend(v80, "enabled") & 1) != 0 || !objc_msgSend(v74, "enabled"))
              {
                if (objc_msgSend(v80, "enabled") && (objc_msgSend(v74, "enabled") & 1) == 0)
                  captureSession_setPreviewRunning(v349, 0, v81);
              }
              else
              {
                objc_msgSend((id)objc_msgSend(v81, "imageQueueSinkNode"), "inputConnectionWillBeEnabled");
                v82 = v358;
                if (!v358)
                  v82 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                v358 = v82;
                objc_msgSend(v82, "addObject:", v81);
                v345 = 0;
              }
            }
            else
            {
LABEL_94:
              v25 = v356;
            }
          }
          ++v72;
        }
        while (v72 != v70);
        v83 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v437, &v458, 16);
        v70 = v83;
      }
      while (v83);
      if (v358)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v360 + 320));
        v84 = *(void **)(v360 + 432);
        a1 = v349;
        if (v84)
        {
          objc_msgSend(v84, "addObjectsFromArray:", v358);

        }
        else
        {
          *(_QWORD *)(v360 + 432) = v358;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v360 + 320));
      }
      else
      {
        a1 = v349;
      }
    }
    else
    {
      v345 = 1;
    }
    captureSession_updateGraphConnectionEnabledState((uint64_t)a1, v369);
    FigMemoryBarrier();
    v437 = 0u;
    v438 = 0u;
    v439 = 0u;
    v440 = 0u;
    v163 = (void *)objc_msgSend(v25, "connectionConfigurations");
    v164 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v437, &v458, 16);
    if (v164)
    {
      v165 = v164;
      v166 = *(_QWORD *)v438;
      while (2)
      {
        for (m = 0; m != v165; ++m)
        {
          if (*(_QWORD *)v438 != v166)
            objc_enumerationMutation(v163);
          if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v437 + 1) + 8 * m), "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource") & 1) != 0)
          {
            v168 = 1;
            goto LABEL_233;
          }
        }
        v165 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v437, &v458, 16);
        if (v165)
          continue;
        break;
      }
    }
    v168 = 0;
LABEL_233:
    v436 = 0u;
    v435 = 0u;
    v434 = 0u;
    *(_OWORD *)v433 = 0u;
    v169 = (void *)objc_msgSend(v341, "connectionConfigurations");
    v170 = objc_msgSend(v169, "countByEnumeratingWithState:objects:count:", v433, valuePtr, 16);
    if (v170)
    {
      v171 = v170;
      v172 = *(_QWORD *)v434;
LABEL_235:
      v173 = 0;
      while (1)
      {
        if (*(_QWORD *)v434 != v172)
          objc_enumerationMutation(v169);
        if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)&v433[8] + 8 * v173), "sourceConfiguration"), "requiredFormat"), "isCinematicFramingProvidedBySource") & 1) != 0)break;
        if (v171 == ++v173)
        {
          v171 = objc_msgSend(v169, "countByEnumeratingWithState:objects:count:", v433, valuePtr, 16);
          if (v171)
            goto LABEL_235;
          goto LABEL_244;
        }
      }
      if ((v168 & 1) == 0)
        goto LABEL_244;
      objb = 1;
    }
    else
    {
LABEL_244:
      objb = cs_configurationsTransitionBetweenCenterStageAndManualFraming(v25, v341);
    }
    v364 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v321 = v1;
      LODWORD(v317) = 0;
      FigDebugAssert3();
    }
    v457 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v354 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations", v317, v321);
    v174 = -[NSArray countByEnumeratingWithState:objects:count:](v354, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
    if (v174)
    {
      v175 = v174;
      v359 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (n = 0; n != v175; ++n)
        {
          if (**(_QWORD **)&valuePtr[1] != v359)
            objc_enumerationMutation(v354);
          v177 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * n), "cameraConfiguration");
          v178 = objc_msgSend(*(id *)(v364 + 624), "cameraSourcePipelineWithSourceID:", objc_msgSend(v177, "sourceID"));
          if (objb)
          {
            v179 = objc_msgSend(v177, "cinematicFramingEnabled");
            objc_msgSend(v177, "manualFramingPanningAngleX");
            v181 = v180;
            objc_msgSend(v177, "manualFramingPanningAngleY");
            v183 = v182;
            objc_msgSend(v177, "videoZoomFactor");
            v185 = v184;
            objc_msgSend(v177, "manualFramingDefaultZoomFactor");
            -[FigCaptureCameraSourcePipeline setCinematicFramingControlsWhileRunning:panningAngleX:panningAngleY:videoZoomFactor:manualFramingDefaultZoomFactor:](v178, v179, v181, v183, v185, v186);
          }
          -[FigCaptureCameraSourcePipeline setWhileRunningBackgroundBlurEnabled:studioLightingEnabled:reactionEffectsEnabled:backgroundReplacementEnabled:](v178, objc_msgSend(v177, "backgroundBlurEnabled"), objc_msgSend(v177, "studioLightingEnabled"), objc_msgSend(v177, "reactionEffectsEnabled"), objc_msgSend(v177, "backgroundReplacementEnabled"));
          -[FigCaptureCameraSourcePipeline setSmartStyle:](v178, (uint64_t)-[FigCaptureSessionParsedConfiguration smartStyle](v369, "smartStyle"));
          if (objc_msgSend(v177, "nonDestructiveCropEnabled"))
          {
            objc_msgSend(v177, "normalizedNonDestructiveCropSize");
            DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v461);
            v188 = objc_msgSend(v177, "source");
            v189 = *(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
            if (v189)
              v189(v188, CFSTR("NonDestructiveCropSize"), DictionaryRepresentation);
            CFRelease(DictionaryRepresentation);
          }
          v190 = (const void *)objc_msgSend(v177, "source");
          v191 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v178);
          v192 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v177, "requiredMaxFrameRate");
          FigVideoCaptureSourceSetSessionProperty(v190, (uint64_t)v191, CFSTR("ActiveMaxFrameRate_FigCaptureSessionOnly"), (const __CFDictionary *)objc_msgSend(v192, "numberWithFloat:"));
          v193 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v177, "requiredMinFrameRate");
          FigVideoCaptureSourceSetSessionProperty(v190, (uint64_t)v191, CFSTR("ActiveMinFrameRate_FigCaptureSessionOnly"), (const __CFDictionary *)objc_msgSend(v193, "numberWithFloat:"));
          objc_msgSend(v177, "requiredMinFrameRate");
          objc_msgSend(v191, "setMinimumFrameRate:");
          objc_msgSend(v177, "requiredMaxFrameRate");
          objc_msgSend(v191, "setMaximumFrameRate:");
        }
        v175 = -[NSArray countByEnumeratingWithState:objects:count:](v354, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
      }
      while (v175);
    }
    a1 = v349;
    v194 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v322 = v1;
      LODWORD(v318) = 0;
      FigDebugAssert3();
    }
    v105 = v345;
    v457 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    v195 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations", v318, v322);
    v196 = -[NSArray countByEnumeratingWithState:objects:count:](v195, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
    DerivedStorage = v352;
    if (v196)
    {
      v197 = v196;
      v198 = **(_QWORD **)&valuePtr[1];
      do
      {
        for (ii = 0; ii != v197; ++ii)
        {
          if (**(_QWORD **)&valuePtr[1] != v198)
            objc_enumerationMutation(v195);
          -[FigCaptureCinematographyPipeline setSmartStyle:](objc_msgSend(*(id *)(v194 + 624), "cinematographyPipelineWithSourceID:", objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&valuePtr[0] + 1) + 8 * ii), "cameraConfiguration"), "sourceID")), (uint64_t)-[FigCaptureSessionParsedConfiguration smartStyle](v369, "smartStyle"));
        }
        v197 = -[NSArray countByEnumeratingWithState:objects:count:](v195, "countByEnumeratingWithState:objects:count:", valuePtr, &v458, 16);
      }
      while (v197);
    }
    v329 = 0;
    goto LABEL_345;
  }
  v87 = (id *)v357;
  v88 = *(unsigned __int8 *)(v357 + 608);
  v329 = v88;
  if (*(_BYTE *)(v357 + 608))
  {
    v423 = 0u;
    v422 = 0u;
    v421 = 0u;
    v420 = 0u;
    v89 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v353, "parsedMovieFileSinkConfigurations");
    v90 = -[NSArray countByEnumeratingWithState:objects:count:](v89, "countByEnumeratingWithState:objects:count:", &v420, v453, 16);
    if (v90)
    {
      v91 = v90;
      v92 = *(_QWORD *)v421;
      while (2)
      {
        for (jj = 0; jj != v91; ++jj)
        {
          if (*(_QWORD *)v421 != v92)
            objc_enumerationMutation(v89);
          if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v420 + 1) + 8 * jj), "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled") & 1) != 0)
          {
            v94 = 1;
            goto LABEL_119;
          }
        }
        v91 = -[NSArray countByEnumeratingWithState:objects:count:](v89, "countByEnumeratingWithState:objects:count:", &v420, v453, 16);
        if (v91)
          continue;
        break;
      }
    }
    v94 = 0;
LABEL_119:
    v419 = 0u;
    v418 = 0u;
    v417 = 0u;
    v416 = 0u;
    v95 = -[FigCaptureSessionParsedConfiguration parsedMovieFileSinkConfigurations](v369, "parsedMovieFileSinkConfigurations");
    v96 = -[NSArray countByEnumeratingWithState:objects:count:](v95, "countByEnumeratingWithState:objects:count:", &v416, v452, 16);
    if (v96)
    {
      v97 = v96;
      v98 = *(_QWORD *)v417;
      while (2)
      {
        for (kk = 0; kk != v97; ++kk)
        {
          if (*(_QWORD *)v417 != v98)
            objc_enumerationMutation(v95);
          v100 = *(void **)(*((_QWORD *)&v416 + 1) + 8 * kk);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v100, "videoConnectionConfiguration"), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled"))
          {
            if ((int)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v100, "videoConnectionConfiguration"), "sourceConfiguration"), "requiredFormat"), "dimensions") <= 3839)v101 = 40;
            else
              v101 = 0;
            v323 = v101;
            v88 = 1;
            goto LABEL_132;
          }
        }
        v97 = -[NSArray countByEnumeratingWithState:objects:count:](v95, "countByEnumeratingWithState:objects:count:", &v416, v452, 16);
        if (v97)
          continue;
        break;
      }
    }
    v88 = 0;
    v323 = 100;
LABEL_132:
    obja = v94 ^ v88;
    v325 = v94 | v88;
  }
  else
  {
    obja = 0;
    v325 = 0;
    v323 = 100;
  }
  v326 = v88;
  v102 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v350 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v331 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (!v329
    || !-[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations"), "count"))
  {
    v330 = 0;
    v104 = 0;
    v361 = 0;
    goto LABEL_271;
  }
  if (-[FigCaptureSessionParsedConfiguration isMultiCamSession](v353, "isMultiCamSession"))
  {
    v103 = 0;
  }
  else
  {
    v106 = -[FigCaptureSessionParsedConfiguration isMultiCamSession](v369, "isMultiCamSession");
    v103 = !v106;
    if (!v106)
    {
      v362 = !v106;
      v346 = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v342 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v412 = 0u;
      v413 = 0u;
      v414 = 0u;
      v415 = 0u;
      v107 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v353, "parsedCameraSourceConfigurations");
      v108 = -[NSArray countByEnumeratingWithState:objects:count:](v107, "countByEnumeratingWithState:objects:count:", &v412, v451, 16);
      if (v108)
      {
        v109 = v108;
        v110 = *(_QWORD *)v413;
        do
        {
          for (mm = 0; mm != v109; ++mm)
          {
            if (*(_QWORD *)v413 != v110)
              objc_enumerationMutation(v107);
            v112 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v412 + 1) + 8 * mm), "cameraConfiguration");
            v113 = objc_msgSend(v112, "sourceID");
            objc_msgSend(v346, "addObject:", v113);
            v114 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v112, "videoZoomFactor");
            objc_msgSend(v342, "setObject:forKeyedSubscript:", objc_msgSend(v114, "numberWithFloat:"), v113);
          }
          v109 = -[NSArray countByEnumeratingWithState:objects:count:](v107, "countByEnumeratingWithState:objects:count:", &v412, v451, 16);
        }
        while (v109);
      }
      v115 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v408 = 0u;
      v409 = 0u;
      v410 = 0u;
      v411 = 0u;
      v337 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations");
      v116 = -[NSArray countByEnumeratingWithState:objects:count:](v337, "countByEnumeratingWithState:objects:count:", &v408, v450, 16);
      if (v116)
      {
        v117 = v116;
        v118 = *(_QWORD *)v409;
        v332 = *(_QWORD *)v409;
        v334 = v115;
        do
        {
          v119 = 0;
          v336 = v117;
          do
          {
            if (*(_QWORD *)v409 != v118)
              objc_enumerationMutation(v337);
            v120 = *(void **)(*((_QWORD *)&v408 + 1) + 8 * v119);
            v121 = (void *)objc_msgSend(v120, "cameraConfiguration");
            v122 = objc_msgSend(v121, "sourceID");
            objc_msgSend(v115, "addObject:", v122);
            if (objc_msgSend(v346, "containsObject:", v122))
            {
              v123 = objc_msgSend(v121, "sourceDeviceType");
              if (v123 <= 9 && ((1 << v123) & 0x310) != 0)
              {
                v125 = objc_msgSend(*(id *)(v357 + 624), "cameraSourcePipelineWithSourceID:", v122);
                objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v125), "masterCaptureStreamLastFrameEIT");
                v127 = v126;
                v128 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v125), "masterCaptureStream"), "portType");
                v339 = v125;
                v129 = -[FigCaptureCameraSourcePipeline captureSource](v125);
                v338 = (void *)v128;
                v130 = FigVideoCaptureSourceCopyUnderlyingSourceFormatForFormatAndPortType(v129, (void *)objc_msgSend(v121, "requiredFormat"), v128, &v432);
                if (v432)
                {
LABEL_376:
                  FigDebugAssert3();
                  v329 = 0;
                  v105 = 0;
                  a1 = v349;
                  goto LABEL_377;
                }
                v131 = (void *)v130;
                if (objc_msgSend(v121, "variableFrameRateVideoCaptureEnabled"))
                {
                  objc_msgSend(v131, "variableFrameRateVideoCaptureFromFWAEMaxGain");
                }
                else if (objc_msgSend(v121, "lowLightVideoCaptureEnabled"))
                {
                  objc_msgSend(v131, "lowLightVideoAEMaxGain");
                }
                else
                {
                  objc_msgSend(v131, "aeMaxGain");
                }
                v133 = v132;
                if (objc_msgSend(FigCaptureConnectionConfigurationWithSinkType((void *)objc_msgSend(v120, "videoCaptureConnectionConfigurations"), 4), "stereoVideoCaptureEnabled"))
                {
                  objc_msgSend(v131, "stereoVideoAEMaxGain");
                  if (v134 != 0.0)
                  {
                    objc_msgSend(v131, "stereoVideoAEMaxGain");
                    v133 = v135;
                  }
                }
                v136 = 24.0;
                if ((objc_msgSend(v121, "variableFrameRateVideoCaptureEnabled") & 1) == 0
                  && (objc_msgSend(v121, "lowLightVideoCaptureEnabled") & 1) == 0)
                {
                  objc_msgSend(v121, "requiredMinFrameRate");
                  v136 = v137;
                }
                v138 = v133 / v136;
                objc_msgSend((id)objc_msgSend(v342, "objectForKeyedSubscript:", v122), "floatValue");
                v140 = v139;
                objc_msgSend(v121, "videoZoomFactor");
                if (v141 > v140)
                {
                  v142 = v141;
                  v143 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v339), "clientBaseZoomFactorsByPortType"), "allValues"), "sortedArrayUsingSelector:", sel_compare_);
                  v404 = 0u;
                  v405 = 0u;
                  v406 = 0u;
                  v407 = 0u;
                  v144 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v404, v449, 16);
                  if (v144)
                  {
                    v145 = v144;
                    v146 = *(_QWORD *)v405;
LABEL_174:
                    v147 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v405 != v146)
                        objc_enumerationMutation(v143);
                      objc_msgSend(*(id *)(*((_QWORD *)&v404 + 1) + 8 * v147), "floatValue");
                      if (v142 >= v148 && v140 < v148)
                        break;
                      if (v140 < v148 && v142 < v148)
                        goto LABEL_189;
                      if (v145 == ++v147)
                      {
                        v145 = objc_msgSend(v143, "countByEnumeratingWithState:objects:count:", &v404, v449, 16);
                        if (v145)
                          goto LABEL_174;
                        goto LABEL_189;
                      }
                    }
                    v151 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v339);
                    *(float *)&v152 = v142;
                    if (!objc_msgSend(v338, "isEqualToString:", objc_msgSend(v151, "preferredMasterPortTypeForZoomFactor:", v152)))goto LABEL_191;
                  }
                }
LABEL_189:
                if (v127 <= v138)
                  objc_msgSend(v331, "setObject:forKeyedSubscript:", v338, v122);
LABEL_191:

                v118 = v332;
                v115 = v334;
                v117 = v336;
              }
            }
            ++v119;
          }
          while (v119 != v117);
          v117 = -[NSArray countByEnumeratingWithState:objects:count:](v337, "countByEnumeratingWithState:objects:count:", &v408, v450, 16);
        }
        while (v117);
      }
      v103 = v362;
      if (!objc_msgSend(v346, "isEqualToSet:", v115))
        v103 = 0;
      a1 = v349;
      v87 = (id *)v357;
    }
  }
  v402 = 0u;
  v403 = 0u;
  v400 = 0u;
  v401 = 0u;
  v153 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations");
  v154 = -[NSArray countByEnumeratingWithState:objects:count:](v153, "countByEnumeratingWithState:objects:count:", &v400, v448, 16);
  if (v154)
  {
    v155 = v154;
    v156 = *(_QWORD *)v401;
    while (2)
    {
      for (nn = 0; nn != v155; ++nn)
      {
        if (*(_QWORD *)v401 != v156)
          objc_enumerationMutation(v153);
        if ((cs_timeOfFlightAssistedAutoFocusEnabled((void *)objc_msgSend(*(id *)(*((_QWORD *)&v400 + 1) + 8 * nn), "cameraConfiguration")) & 1) != 0)
        {
          v330 = 1;
          goto LABEL_207;
        }
      }
      v155 = -[NSArray countByEnumeratingWithState:objects:count:](v153, "countByEnumeratingWithState:objects:count:", &v400, v448, 16);
      if (v155)
        continue;
      break;
    }
  }
  v330 = 0;
LABEL_207:
  if (!v103)
  {
    v361 = 0;
    v104 = 0;
    goto LABEL_271;
  }
  v398 = 0u;
  v399 = 0u;
  v396 = 0u;
  v397 = 0u;
  v324 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations");
  v335 = -[NSArray countByEnumeratingWithState:objects:count:](v324, "countByEnumeratingWithState:objects:count:", &v396, v447, 16);
  v104 = 0;
  if (!v335)
    goto LABEL_220;
  v333 = *(_QWORD *)v397;
LABEL_211:
  v158 = 0;
  while (1)
  {
    if (*(_QWORD *)v397 != v333)
      objc_enumerationMutation(v324);
    v363 = *(void **)(*((_QWORD *)&v396 + 1) + 8 * v158);
    v159 = objc_msgSend((id)objc_msgSend(v363, "cameraConfiguration"), "sourceID");
    v160 = (id *)objc_msgSend(v87[78], "cameraSourcePipelineWithSourceID:", v159);
    v347 = -[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v369, "parsedMicSourceConfiguration") != 0;
    v343 = -[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations"), "count") > 1;
    v340 = -[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v160);
    a1 = v349;
    v161 = captureSession_createCameraSourcePipelineConfigurationFromParsedConfiguration((uint64_t)v349, v363, v347, v343, v340, -[FigCaptureSessionParsedConfiguration continuityCameraIsWired](v369, "continuityCameraIsWired"), -[FigCaptureSessionParsedConfiguration continuityCameraClientDeviceClass](v369, "continuityCameraClientDeviceClass"), -[FigCaptureSessionParsedConfiguration clientIsVOIP](v369, "clientIsVOIP"), -[FigCaptureSessionParsedConfiguration suppressVideoEffects](v369, "suppressVideoEffects"), (char *)objc_msgSend(v331, "objectForKeyedSubscript:", v159), -[FigCaptureSessionParsedConfiguration smartStyleRenderingEnabled](v369, "smartStyleRenderingEnabled"), (char *)-[FigCaptureSessionParsedConfiguration smartStyle](v369, "smartStyle"), obja, &v432);
    if (v432)
      break;
    v162 = (uint64_t)v161;
    LOBYTE(valuePtr[0]) = 0;
    *(_QWORD *)&v458 = 0;
    if ((-[FigCaptureCameraSourcePipeline newConfigurationRequiresStreamRestart:tnrConfigurationChanged:newFormatIndexByPortTypeOut:](v160, (uint64_t)v161, valuePtr, &v458) & 1) != 0)
    {
      v361 = 0;
      v87 = (id *)v357;
LABEL_271:
      v394 = 0u;
      v395 = 0u;
      v392 = 0u;
      v393 = 0u;
      v200 = (void *)objc_msgSend(v87[78], "cameraSourcePipelines");
      v201 = objc_msgSend(v200, "countByEnumeratingWithState:objects:count:", &v392, v446, 16);
      if (v201)
      {
        v202 = v201;
        v203 = *(_QWORD *)v393;
        v204 = v361 & v104;
        do
        {
          for (i1 = 0; i1 != v202; ++i1)
          {
            if (*(_QWORD *)v393 != v203)
              objc_enumerationMutation(v200);
            v206 = *(_QWORD *)(*((_QWORD *)&v392 + 1) + 8 * i1);
            -[FigCaptureCameraSourcePipeline setKeepISPStreamingWhenStopping:](v206, v361);
            -[FigCaptureCameraSourcePipeline setDisableTemporalNoiseReductionWhenStopping:](v206, v204);
            -[FigCaptureCameraSourcePipeline setEmitsFramesWhileStopping:](v206, obja);
          }
          v202 = objc_msgSend(v200, "countByEnumeratingWithState:objects:count:", &v392, v446, 16);
        }
        while (v202);
      }
      if (-[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v353, "parsedMicSourceConfiguration")
        && -[FigCaptureSessionParsedConfiguration parsedMicSourceConfiguration](v369, "parsedMicSourceConfiguration"))
      {
        if (FigCaptureAudiomxdSupportEnabled())
        {
          *(_QWORD *)&v458 = 0;
          objc_msgSend(v87[27], "setMXSessionProperty:value:error:", *MEMORY[0x1E0D49750], MEMORY[0x1E0C9AAB0], &v458);
          v432 = objc_msgSend((id)v458, "code");
        }
        else
        {
          v432 = CMSessionSetProperty();
        }
      }
      if ((obja & (v326 ^ 1)) != 0)
        v207 = v356;
      else
        v207 = v341;
      v208 = objc_msgSend(v207, "smartStyleRenderingEnabled");
      if (v329)
        captureSession_stopGraph(a1, 0, v325, v361, v326, v323, v208);
      if (v361)
      {
        v390 = 0u;
        v391 = 0u;
        v388 = 0u;
        v389 = 0u;
        v209 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v388, v445, 16);
        if (v209)
        {
          v210 = v209;
          v211 = *(_QWORD *)v389;
          do
          {
            for (i2 = 0; i2 != v210; ++i2)
            {
              if (*(_QWORD *)v389 != v211)
                objc_enumerationMutation(v102);
              v213 = *(_QWORD *)(*((_QWORD *)&v388 + 1) + 8 * i2);
              v214 = objc_msgSend(v87[78], "cameraSourcePipelineWithSourceID:", v213);
              v215 = objc_msgSend(v102, "objectForKeyedSubscript:", v213);
              v216 = objc_msgSend(v350, "objectForKeyedSubscript:", v213);
              objc_msgSend((id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v216), "maxFrameRateClientOverride");
              v218 = (int)v217;
              objc_msgSend((id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v216), "requiredMinFrameRate");
              v220 = (int)v219;
              objc_msgSend((id)-[FigCaptureCameraSourcePipelineConfiguration cameraConfiguration](v216), "requiredMaxFrameRate");
              v222 = (int)v221;
              v223 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v214);
              v224 = v220;
              v87 = (id *)v357;
              objc_msgSend(v223, "setNondisruptiveSwitchingFormatIndicesByPortType:maximumAllowedFrameRate:minimumFrameRate:maximumFrameRate:", v215, v218, v224, v222);
            }
            v210 = objc_msgSend(v102, "countByEnumeratingWithState:objects:count:", &v388, v445, 16);
          }
          while (v210);
        }
      }
      if (!-[NSArray count](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations"), "count"))
      {
        v226 = 0;
        a1 = v349;
        DerivedStorage = v352;
        v229 = v326;
        v230 = obja;
        v227 = v361;
        goto LABEL_333;
      }
      v225 = objc_msgSend(v87[90], "count");
      v226 = v225 != 0;
      v227 = v361;
      if (v225)
        v228 = v361;
      else
        v228 = 1;
      a1 = v349;
      DerivedStorage = v352;
      v229 = v326;
      v230 = obja;
      if ((v228 & 1) == 0 && ((v330 ^ 1) & 1) == 0)
      {
        v344 = v225 != 0;
        v231 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v232 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v384 = 0u;
        v385 = 0u;
        v386 = 0u;
        v387 = 0u;
        v348 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations");
        v355 = (id)-[NSArray countByEnumeratingWithState:objects:count:](v348, "countByEnumeratingWithState:objects:count:", &v384, v444, 16);
        if (!v355)
          goto LABEL_323;
        v351 = *(_QWORD *)v385;
        while (1)
        {
          for (i3 = 0; i3 != v355; i3 = (char *)i3 + 1)
          {
            if (*(_QWORD *)v385 != v351)
              objc_enumerationMutation(v348);
            v234 = *(void **)(*((_QWORD *)&v384 + 1) + 8 * (_QWORD)i3);
            v235 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v236 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v237 = (void *)objc_msgSend(v234, "cameraConfiguration");
            v238 = objc_msgSend(v237, "sourceDeviceType");
            if (v238 > 0xD)
              goto LABEL_315;
            if (((1 << v238) & 0x1350) == 0)
            {
              if ((_DWORD)v238 == 13)
              {
                v241 = v235;
                v242 = &unk_1E49F9FD8;
              }
              else
              {
LABEL_315:
                v242 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v237, "sourceDeviceType"));
                v241 = v235;
              }
              objc_msgSend(v241, "addObject:", v242);
              objc_msgSend(v236, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v237, "sourcePosition")));
              goto LABEL_317;
            }
            v239 = (void *)BWUnderlyingDeviceTypesForCompositeDeviceType(v238);
            objc_msgSend(v235, "addObjectsFromArray:", v239);
            if (objc_msgSend(v239, "count"))
            {
              v240 = 0;
              do
              {
                objc_msgSend(v236, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v237, "sourcePosition")));
                ++v240;
              }
              while (objc_msgSend(v239, "count") > v240);
            }
LABEL_317:
            CaptureDeviceID = FigCaptureSourceGetCaptureDeviceID(objc_msgSend(v237, "source"), &v432);
            if (v432)
              goto LABEL_376;
            v244 = CaptureDeviceID;
            a1 = v349;
            if (objc_msgSend(v231, "objectForKeyedSubscript:", CaptureDeviceID))
            {
              objc_msgSend((id)objc_msgSend(v231, "objectForKeyedSubscript:", v244), "addObjectsFromArray:", v235);
              objc_msgSend((id)objc_msgSend(v232, "objectForKeyedSubscript:", v244), "addObjectsFromArray:", v236);
            }
            else
            {
              objc_msgSend(v231, "setObject:forKeyedSubscript:", v235, v244);
              objc_msgSend(v232, "setObject:forKeyedSubscript:", v236, v244);
            }
          }
          v355 = (id)-[NSArray countByEnumeratingWithState:objects:count:](v348, "countByEnumeratingWithState:objects:count:", &v384, v444, 16);
          if (!v355)
          {
LABEL_323:
            v382 = 0u;
            v383 = 0u;
            v380 = 0u;
            v381 = 0u;
            v245 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v380, v443, 16);
            if (v245)
            {
              v246 = v245;
              v247 = *(_QWORD *)v381;
              do
              {
                for (i4 = 0; i4 != v246; ++i4)
                {
                  if (*(_QWORD *)v381 != v247)
                    objc_enumerationMutation(v231);
                  v432 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "keepControlOfStreamsWithPositions:deviceTypes:forDevice:", objc_msgSend(v232, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v380 + 1) + 8 * i4)), objc_msgSend(v231, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v380 + 1) + 8 * i4)), objc_msgSend(*(id *)(v357 + 720), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v380 + 1) + 8 * i4)));
                }
                v246 = objc_msgSend(v231, "countByEnumeratingWithState:objects:count:", &v380, v443, 16);
              }
              while (v246);
              a1 = v349;
            }
            DerivedStorage = v352;
            v229 = v326;
            v230 = obja;
            v227 = v361;
            v226 = v344;
            break;
          }
        }
      }
LABEL_333:
      captureSession_teardownGraph(a1, 0, v227, v226, v330, v325);
      v432 = captureSession_buildGraphWithConfiguration((uint64_t)a1, (uint64_t)v341, (uint64_t)v331, v325);
      if (v432)
      {
        LODWORD(v437) = 0;
        v433[0] = OS_LOG_TYPE_DEFAULT;
        v249 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v250 = v437;
        if (os_log_type_enabled(v249, v433[0]))
          v251 = v250;
        else
          v251 = v250 & 0xFFFFFFFE;
        if (v251)
        {
          v252 = *(_QWORD *)(v357 + 72);
          LODWORD(valuePtr[0]) = 136315906;
          *(_QWORD *)((char *)valuePtr + 4) = "captureSession_updateGraphConfiguration";
          WORD6(valuePtr[0]) = 2114;
          *(_QWORD *)((char *)valuePtr + 14) = v252;
          WORD3(valuePtr[1]) = 1024;
          DWORD2(valuePtr[1]) = v432;
          WORD6(valuePtr[1]) = 2114;
          *(_QWORD *)((char *)&valuePtr[1] + 14) = v341;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (v329)
        {
          captureSession_resetSessionRunningStateOnFatalError((uint64_t)a1, v432);
          captureSession_transitionToSessionStatus(a1, 0, v432);
        }
        v329 = 0;
LABEL_344:
        v105 = 0;
        goto LABEL_345;
      }
      if ((v229 | v230 ^ 1) != 1)
      {
        if (objc_msgSend((id)objc_msgSend(-[NSArray firstObject](-[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations"), "firstObject"), "cameraConfiguration"), "sourcePosition") == 1)
        {
          v378 = 0u;
          v379 = 0u;
          v376 = 0u;
          v377 = 0u;
          v370 = -[FigCaptureSessionParsedConfiguration parsedCameraSourceConfigurations](v369, "parsedCameraSourceConfigurations");
          v261 = -[NSArray countByEnumeratingWithState:objects:count:](v370, "countByEnumeratingWithState:objects:count:", &v376, v442, 16);
          if (v261)
          {
            v262 = v261;
            v263 = *(_QWORD *)v377;
            v264 = *MEMORY[0x1E0D05A18];
            objc = (id)*MEMORY[0x1E0D05A28];
            v265 = v357;
LABEL_364:
            v266 = 0;
            while (1)
            {
              if (*(_QWORD *)v377 != v263)
                objc_enumerationMutation(v370);
              v267 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v376 + 1) + 8 * v266), "cameraConfiguration");
              v268 = objc_msgSend(v267, "sourceID");
              objc_msgSend(v267, "videoZoomFactor");
              v270 = v269;
              v271 = objc_msgSend(*(id *)(v265 + 624), "cameraSourcePipelineWithSourceID:", v268);
              v272 = (void *)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v271), "clientBaseZoomFactorsByPortType");
              objc_msgSend((id)objc_msgSend(v272, "objectForKeyedSubscript:", v264), "floatValue");
              v274 = v270 >= v273
                   ? objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v271), "preferredMasterPortType"), "isEqual:", objc): 0;
              v275 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v271), "thermalSystemPressureLevel");
              if (objc_msgSend(v267, "sourceDeviceType") == 9)
                break;
              if ((v361 & 1) == 0 && objc_msgSend(v267, "sourceDeviceType") == 8)
              {
                objc_msgSend((id)objc_msgSend(v272, "objectForKeyedSubscript:", v264), "floatValue");
                if (v270 < v281)
                  v282 = 1;
                else
                  v282 = v274;
                v283 = v282 == 0;
                v276 = 0.166;
                v284 = 0.266;
LABEL_397:
                if (!v283)
                  v276 = v284;
                goto LABEL_399;
              }
              ++v266;
              v265 = v357;
              if (v262 == v266)
              {
                v262 = -[NSArray countByEnumeratingWithState:objects:count:](v370, "countByEnumeratingWithState:objects:count:", &v376, v442, 16);
                if (v262)
                  goto LABEL_364;
                v276 = 0.0;
                goto LABEL_399;
              }
            }
            objc_msgSend((id)objc_msgSend(v272, "objectForKeyedSubscript:", v264), "floatValue");
            if (!v361)
            {
              if (v270 < v277)
              {
                v276 = 0.3;
                goto LABEL_399;
              }
              objc_msgSend((id)objc_msgSend(v272, "objectForKeyedSubscript:", *MEMORY[0x1E0D05A30]), "floatValue");
              if (v270 >= v285)
                v286 = 1;
              else
                v286 = v274;
              v283 = v286 == 0;
              v276 = 0.183;
              v284 = 0.3;
              goto LABEL_397;
            }
            if (v270 < v277
              || ((objc_msgSend((id)objc_msgSend(v272, "objectForKeyedSubscript:", *MEMORY[0x1E0D05A30]), "floatValue"),
                   v270 >= v278)
                ? (v279 = 1)
                : (v279 = v274),
                  v276 = 0.0,
                  v279 == 1))
            {
              v276 = 0.116;
            }
LABEL_399:
            if (v275 == 1)
            {
              v280 = 0.033;
              a1 = v349;
              DerivedStorage = v352;
            }
            else
            {
              a1 = v349;
              DerivedStorage = v352;
              if (v275 == 2)
              {
                v280 = 0.083;
              }
              else
              {
                v280 = 0.133;
                if (v275 <= 2)
                  v280 = 0.0;
              }
            }
          }
          else
          {
            v276 = 0.0;
            v280 = 0.0;
          }
          v287 = v276 + v280;
          if ((float)(v276 + v280) <= 0.0)
          {
            if (dword_1ECFE9590)
            {
              LODWORD(v437) = 0;
              v433[0] = OS_LOG_TYPE_DEFAULT;
              v291 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v292 = v437;
              if (os_log_type_enabled(v291, v433[0]))
                v293 = v292;
              else
                v293 = v292 & 0xFFFFFFFE;
              if (v293)
              {
                LODWORD(valuePtr[0]) = 136315138;
                *(_QWORD *)((char *)valuePtr + 4) = "captureSession_updateGraphConfiguration";
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            captureSession_makeCommittedConfigurationLive(a1);
          }
          else
          {
            if (dword_1ECFE9590)
            {
              LODWORD(v437) = 0;
              v433[0] = OS_LOG_TYPE_DEFAULT;
              v288 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v289 = v437;
              if (os_log_type_enabled(v288, v433[0]))
                v290 = v289;
              else
                v290 = v289 & 0xFFFFFFFE;
              if (v290)
              {
                LODWORD(valuePtr[0]) = 136315394;
                *(_QWORD *)((char *)valuePtr + 4) = "captureSession_updateGraphConfiguration";
                WORD6(valuePtr[0]) = 2048;
                *(double *)((char *)valuePtr + 14) = (float)(v287 * 1000.0);
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v375[0] = MEMORY[0x1E0C809B0];
            v375[1] = 3221225472;
            v375[2] = __captureSession_updateGraphConfiguration_block_invoke;
            v375[3] = &__block_descriptor_40_e8_v12__0B8l;
            v375[4] = a1;
            captureSession_dispatchGraphCalloutToWorkerQueueAfter(a1, (uint64_t)v375, v287);
          }
        }
        goto LABEL_344;
      }
LABEL_340:
      v105 = 0;
LABEL_423:

      started = 0;
      goto LABEL_424;
    }
    v87 = (id *)v357;
    if (!(_QWORD)v458)
      -[FigCaptureCameraSourcePipeline nondisruptiveSwitchingFormatIndicesByPortTypeForConfiguration:]((uint64_t)v160, v162);
    objc_msgSend(v102, "setObject:forKeyedSubscript:");
    objc_msgSend(v350, "setObject:forKeyedSubscript:", v162, v159);
    v104 |= LOBYTE(valuePtr[0]) != 0;
    if (v335 == ++v158)
    {
      v335 = -[NSArray countByEnumeratingWithState:objects:count:](v324, "countByEnumeratingWithState:objects:count:", &v396, v447, 16);
      if (!v335)
      {
LABEL_220:
        v361 = 1;
        goto LABEL_271;
      }
      goto LABEL_211;
    }
  }
  FigDebugAssert3();
  v329 = 0;
  v105 = 0;
LABEL_377:
  DerivedStorage = v352;
LABEL_345:
  started = v432;
  if (!v432)
    goto LABEL_423;
LABEL_346:
  v455[0] = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v253 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v254 = v455[0];
  if (os_log_type_enabled(v253, type[0]))
    v255 = v254;
  else
    v255 = v254 & 0xFFFFFFFE;
  if (v255)
  {
    v256 = *(_QWORD *)(DerivedStorage + 72);
    LODWORD(valuePtr[0]) = 136315650;
    *(_QWORD *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
    WORD6(valuePtr[0]) = 2114;
    *(_QWORD *)((char *)valuePtr + 14) = v256;
    WORD3(valuePtr[1]) = 1024;
    DWORD2(valuePtr[1]) = started;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_352:

  if ((_DWORD)started == -12785 || (_DWORD)started == -12681 || (_DWORD)started == -12689)
  {
    v455[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v257 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v258 = v455[0];
    if (os_log_type_enabled(v257, type[0]))
      v259 = v258;
    else
      v259 = v258 & 0xFFFFFFFE;
    if (v259)
    {
      v260 = *(_QWORD *)(DerivedStorage + 72);
      LODWORD(valuePtr[0]) = 136315906;
      *(_QWORD *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
      WORD6(valuePtr[0]) = 2114;
      *(_QWORD *)((char *)valuePtr + 14) = v260;
      WORD3(valuePtr[1]) = 1024;
      DWORD2(valuePtr[1]) = started;
      WORD6(valuePtr[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr[1] + 14) = -16407;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    started = 4294950889;
  }
LABEL_424:
  if (cs_errorIsFatal(started))
  {
    v294 = (const void *)cs_notificationPayloadWithConfigurationIDAndErrorStatus(objc_msgSend(v341, "configurationID"), started);
    v455[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v295 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v296 = v455[0];
    if (os_log_type_enabled(v295, type[0]))
      v297 = v296;
    else
      v297 = v296 & 0xFFFFFFFE;
    if (v297)
    {
      v298 = *(_QWORD *)(DerivedStorage + 72);
      LODWORD(valuePtr[0]) = 136315650;
      *(_QWORD *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
      WORD6(valuePtr[0]) = 2114;
      *(_QWORD *)((char *)valuePtr + 14) = v298;
      WORD3(valuePtr[1]) = 1024;
      DWORD2(valuePtr[1]) = started;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    captureSession_postNotificationWithPayload(a1, CFSTR("ConfigurationCommitted"), v294);
  }
  else
  {
    *(_QWORD *)&v458 = 0;
    LODWORD(valuePtr[0]) = 0;
    cs_getMasterClockAndType(*(void **)(DerivedStorage + 624), (uint64_t *)&v458, (int *)valuePtr);
    v299 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
    v300 = objc_msgSend(v341, "configurationID");
    v301 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v300), CFSTR("ConfigurationID"), (_QWORD)v458, CFSTR("MasterClock"), v299, CFSTR("MasterClockType"), 0);
    if (v299)
      CFRelease(v299);
    captureSession_postNotificationWithPayload(a1, CFSTR("ConfigurationCommitted"), v301);
    v373 = 0u;
    v374 = 0u;
    v371 = 0u;
    v372 = 0u;
    v302 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelines");
    v303 = objc_msgSend(v302, "countByEnumeratingWithState:objects:count:", &v371, v441, 16);
    if (v303)
    {
      v304 = v303;
      v305 = *(_QWORD *)v372;
      do
      {
        for (i5 = 0; i5 != v304; ++i5)
        {
          if (*(_QWORD *)v372 != v305)
            objc_enumerationMutation(v302);
          v307 = *(void **)(*((_QWORD *)&v371 + 1) + 8 * i5);
          if (objc_msgSend(v307, "sinkID") && (objc_msgSend(v307, "imageQueueUpdatedNotificationSent") & 1) == 0)
          {
            v308 = (const void *)objc_msgSend(v307, "imageQueueUpdatedPayloadToBeSentAfterCommitConfiguration");
            objc_msgSend(v307, "setImageQueueUpdatedNotificationSent:", *(unsigned __int8 *)(v352 + 128));
            captureSession_postNotificationWithPayload(a1, CFSTR("ImageQueueUpdated"), v308);
          }
        }
        v304 = objc_msgSend(v302, "countByEnumeratingWithState:objects:count:", &v371, v441, 16);
      }
      while (v304);
    }
  }
  if (v329)
  {
    started = captureSession_startGraph(a1);
    v6 = v327;
    if ((_DWORD)started)
    {
      v455[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v309 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v310 = v455[0];
      if (os_log_type_enabled(v309, type[0]))
        v311 = v310;
      else
        v311 = v310 & 0xFFFFFFFE;
      if (v311)
      {
        v312 = *(_QWORD *)(v352 + 72);
        LODWORD(valuePtr[0]) = 136315650;
        *(_QWORD *)((char *)valuePtr + 4) = "captureSession_commitInflightConfiguration";
        WORD6(valuePtr[0]) = 2114;
        *(_QWORD *)((char *)valuePtr + 14) = v312;
        WORD3(valuePtr[1]) = 1024;
        DWORD2(valuePtr[1]) = started;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      captureSession_resetSessionRunningStateOnFatalError((uint64_t)a1, started);
      captureSession_transitionToSessionStatus(a1, 0, started);
    }
  }
  else
  {
    if (v105)
      captureSession_makeCommittedConfigurationLive(a1);
    v6 = v327;
  }
LABEL_455:
  v7 = v341;
LABEL_456:

  return started;
}

BOOL cs_errorIsFatal(int a1)
{
  return ((a1 + 16408) > 5 || ((1 << (a1 + 24)) & 0x33) == 0) && a1 != -16952 && a1 != 0;
}

void sub_1A2DD77E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DepthSource()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_DepthSourceSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_DepthSourceSymbolLoc_ptr;
  if (!getkCVAFaceTracking_DepthSourceSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_DepthSource");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_DepthSourceSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_DepthSource_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2DD78A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureDeferredPhotoProcessorRemoteCopyPhotoProcessor(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *Mutable;
  uint64_t v8;
  unsigned int v9;
  int v10;
  useconds_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t uint64;
  uint64_t v16;
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t v19;

  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 4294954516;
    goto LABEL_19;
  }
  v4 = a4;
  v5 = a3;
  v6 = a1;
  if (!sCaptureDeferredPhotoProcessorRemoteClient)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A8], (const void *)*MEMORY[0x1E0C9AE50]);
    v8 = FigXPCRemoteClientCreate();
    if (!sCaptureDeferredPhotoProcessorRemoteClient)
    {
      v9 = 1;
      v10 = 250;
      v11 = 250000;
      do
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        usleep(v11);
        v8 = FigXPCRemoteClientCreate();
        if (sCaptureDeferredPhotoProcessorRemoteClient)
          break;
        v10 += 250;
        v11 += 250000;
      }
      while (v9++ < 3);
    }
    v4 = a4;
    v6 = a1;
    if (Mutable)
      CFRelease(Mutable);
    v5 = a3;
    if ((_DWORD)v8)
    {
      fig_log_get_emitter();
LABEL_28:
      FigDebugAssert3();
      goto LABEL_19;
    }
  }
  v14 = FigXPCCreateBasicMessage();
  if ((_DWORD)v14
    || v5 && (v14 = FigXPCMessageSetCFString(), (_DWORD)v14)
    || (v14 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v14))
  {
    v8 = v14;
    fig_log_get_emitter();
    goto LABEL_28;
  }
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 0xFFFFFFFFLL;
    goto LABEL_19;
  }
  v16 = uint64;
  FigCaptureDeferredPhotoProcessorGetClassID();
  v17 = CMDerivedObjectCreate();
  if ((_DWORD)v17)
  {
    v8 = v17;
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_28;
  }
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = v16;
  FigXPCRemoteClientAssociateObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 12) = 0;
  *(_QWORD *)(DerivedStorage + 16) = v6;
  v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_QWORD *)(DerivedStorage + 24) = v19;
  if (v19)
  {
    v8 = 0;
    *v4 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 4294954510;
  }
LABEL_19:
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t mrcn_createSampleBufferProcessor()
{
  uint64_t v0;

  v0 = FigSampleBufferProcessorCreateForCustom();
  if ((_DWORD)v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

void flashlight_teardownDevice(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  void *v5;
  void *v6;
  id v7;
  double v8;
  id v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 80))
    FigSimpleMutexCheckIsLockedOnThisThread();
  v5 = *(void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = 0;
  if (v5)
  {
    if (*(float *)(DerivedStorage + 24) > 0.0)
    {
      v6 = *(void **)(DerivedStorage + 64);
      if (v6)
        objc_msgSend(v6, "setProperty:value:", *MEMORY[0x1E0D07840], &unk_1E49F81D8);
    }
    objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", v5, *(unsigned int *)(DerivedStorage + 40), 0, 0);

  }
  *(_QWORD *)(DerivedStorage + 64) = 0;
  flashlight_handleSystemSleepPrevention(0.0, (uint64_t)a1, 0);
  if (*(float *)(DerivedStorage + 24) > 0.0)
  {
    *(_DWORD *)(DerivedStorage + 24) = 0;
    if (a2)
    {
      v7 = objc_alloc(MEMORY[0x1E0CB37E8]);
      LODWORD(v8) = *(_DWORD *)(DerivedStorage + 24);
      v9 = (id)objc_msgSend(v7, "initWithFloat:", v8);
      flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightLevel"), v9);

    }
    else
    {
      FigCaptureLogTorchPowerEvent(*(_DWORD *)(DerivedStorage + 96), *(const void **)(DerivedStorage + 104), 0.0);
    }
  }
}

uint64_t flashlight_postNotificationWithPayload(const void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t result;
  int v11;
  const void *v12;
  float v13;
  _QWORD block[8];
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigDebugAssert3();
  v7 = DerivedStorage;
  if (a1)
    CFRetain(a1);
  CFRetain(a2);
  v15 = CFSTR("FlashlightValue");
  v16[0] = a3;
  v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
  v9 = *(NSObject **)v7;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __flashlight_postNotificationWithPayload_block_invoke;
  block[3] = &unk_1E491EED0;
  block[4] = v8;
  block[5] = v7;
  block[6] = a2;
  block[7] = a1;
  dispatch_async(v9, block);
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(v7 + 96);
    v12 = *(const void **)(v7 + 104);
    objc_msgSend(a3, "floatValue");
    return FigCaptureLogTorchPowerEvent(v11, v12, v13);
  }
  return result;
}

uint64_t flashlight_handleSystemSleepPrevention(float a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  void *v7;
  int v8;
  const char *v9;
  char v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 80);
  if (result)
    result = FigSimpleMutexCheckIsLockedOnThisThread();
  if ((*(_QWORD *)(DerivedStorage + 72) | 2) != 2)
  {
    if (a1 == 0.0 || a3)
    {
      if (!*(_BYTE *)(DerivedStorage + 32))
        return result;
      result = IOPMAssertionRelease(*(_DWORD *)(DerivedStorage + 36));
      v10 = 0;
    }
    else
    {
      if (*(_BYTE *)(DerivedStorage + 32))
        return result;
      v7 = (void *)MEMORY[0x1E0CB3940];
      v8 = FigCaptureCameracapturedEnabled();
      v9 = "mediaserverd";
      if (v8)
        v9 = "cameracaptured";
      result = IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, (CFStringRef)objc_msgSend(v7, "stringWithFormat:", CFSTR("%s-idleSleepPreventionForFlashlight(ClientPID:%d)"), v9, *(unsigned int *)(DerivedStorage + 96)), (IOPMAssertionID *)(DerivedStorage + 36));
      if ((_DWORD)result)
        return result;
      v10 = 1;
    }
    *(_BYTE *)(DerivedStorage + 32) = v10;
  }
  return result;
}

uint64_t fcsc_deserializeDataUsingNSSecureCoding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  id v8;

  v8 = 0;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, &v8);
  if (v8)
  {
    fig_log_get_emitter();
    LODWORD(v7) = 0;
    FigDebugAssert3();
    objc_msgSend(v8, "code", v7, v2);
    FigSignalErrorAt();
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "setDelegate:", +[FigCaptureCIFilterUnarchiverDelegate sharedInstance](FigCaptureCIFilterUnarchiverDelegate, "sharedInstance"));
    v5 = objc_msgSend(v4, "decodeObjectOfClasses:forKey:", a2, *MEMORY[0x1E0CB2CD0]);
    objc_msgSend(v4, "finishDecoding");
  }

  return v5;
}

void *csu_dependentUserDefaultsDictionary()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t i;
  const __CFString *v6;
  CFPropertyListRef v7;
  const void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v1 = objc_msgSend(MEMORY[0x1E0C9AA60], "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v11;
    v4 = (void *)MEMORY[0x1E0C9AA60];
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v11 != v3)
          objc_enumerationMutation(v4);
        v6 = *(const __CFString **)(*((_QWORD *)&v10 + 1) + 8 * i);
        v7 = CFPreferencesCopyAppValue(v6, CFSTR("com.apple.coremedia"));
        if (v7)
        {
          v8 = v7;
          objc_msgSend(v0, "setObject:forKeyedSubscript:", v7, v6);
          CFRelease(v8);
        }
      }
      v2 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v2);
  }
  if (objc_msgSend((id)objc_msgSend(v0, "allKeys"), "count"))
    return v0;
  else
    return 0;
}

uint64_t csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  FigCaptureFlatPlist *v13;
  FigCaptureFlatPlist *v14;
  __int128 *v15;
  _QWORD *v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  const __CFString *v26;
  const __CFString *v27;
  int *v28;
  uint64_t v29;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  id v43;
  unsigned int v44;
  int v45;
  const char *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  unsigned int v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v36 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v34 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v43 = 0;
  v42 = 0uLL;
  FigSimpleMutexCheckIsLockedOnThisThread();
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v39;
    do
    {
      v9 = 0;
      v35 = v7;
      do
      {
        if (*(_QWORD *)v39 != v8)
          objc_enumerationMutation(a1);
        v10 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v9);
        v11 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor", v28, v29), "copyDeviceForPublishingWithID:error:", v10, &v44);
        if (v11)
        {
          v12 = (void *)v11;
          v37 = 0;
          if (objc_msgSend(v10, "isEqualToString:", 0x1E492D2B8)
            && (v13 = FigCaptureCFCreatePropertyList((uint64_t)CFSTR("AVCaptureSession.plist"))) != 0)
          {
            v14 = v13;

            FigCaptureCreateSourceInfoArrayFromDeviceAndModelSpecificPlist(v12, v14, 1, &v37, &v43, &v42, (_QWORD *)&v42 + 1);
            objc_msgSend(v34, "addObjectsFromArray:", v37);
          }
          else
          {
            if (v42 == 0)
            {
              v15 = &v42;
              v16 = (_QWORD *)&v42 + 1;
              v17 = v12;
            }
            else
            {
              v17 = v12;
              v15 = 0;
              v16 = 0;
            }
            FigCaptureCreateSourceInfoArrayFromDeviceAndGenericPlist(v17, &v37, v15, v16);
            v14 = 0;
          }
          if (dword_1ECFE9B90)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v7 = v35;
          }

          objc_msgSend(v36, "addObjectsFromArray:", v37);
          objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", v12, 0, 0, 0);

        }
        else
        {
          LODWORD(v37) = 0;
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v19 = v37;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if (v20)
          {
            v45 = 136315650;
            v46 = "csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs";
            v47 = 2112;
            v48 = v10;
            v49 = 1024;
            v50 = v44;
            LODWORD(v29) = 28;
            v28 = &v45;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
    }
    while (v7);
  }
  if (a2)
    *a2 = v36;
  if (a3)
    *a3 = v43;
  if (a4)
    *a4 = (id)v42;
  if (a5)
    *a5 = *((id *)&v42 + 1);

  if (!v44)
    return 0;
  LODWORD(v37) = 0;
  v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v23 = v37;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    v24 = v23;
  else
    v24 = v23 & 0xFFFFFFFE;
  if (v24)
  {
    v45 = 136315394;
    v46 = "csu_createSourceInfoDictionariesFromAVCaptureSessionPlistForCaptureDeviceIDs";
    v47 = 1024;
    LODWORD(v48) = v44;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v26 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v27 = (const __CFString *)*MEMORY[0x1E0C9B230];
  CFPreferencesSetValue(CFSTR("CaptureSourceInfo"), 0, CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  CFPreferencesSynchronize(CFSTR("com.apple.cameracapture.volatile"), v26, v27);
  return v44;
}

FigCaptureSourceBackings *csu_createBackingsFromCaptureSourceInfoDict(void *a1)
{
  uint64_t v1;
  id v3;
  FigCaptureSourceBackings *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v8 = v1;
    LODWORD(v7) = 0;
    FigDebugAssert3();
  }
  objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("DependentUserDefaults"), v7, v8);
  csu_dependentUserDefaultsDictionary();
  if (!FigCFEqual())
    return 0;
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Version")), "intValue") != 203)
  {
    if (!dword_1ECFE9B90)
      return 0;
LABEL_16:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  if ((objc_msgSend((id)MGCopyAnswer(), "isEqualToString:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("BuildVersion"))) & 1) == 0)
  {
    if (!dword_1ECFE9B90)
      return 0;
    goto LABEL_16;
  }
  if ((objc_msgSend((id)FigCaptureGetModelSpecificName(), "isEqualToString:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("DeviceModel"))) & 1) == 0)
  {
    if (!dword_1ECFE9B90)
      return 0;
    goto LABEL_16;
  }
  if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ExperimentsEnabled")), "BOOLValue"))
  {
    v3 = csu_createInMemorySourcesArrayFromOnDiskSourcesArray((void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Sources")));
    v4 = -[FigCaptureSourceBackings initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:]([FigCaptureSourceBackings alloc], "initWithSourceInfoDictionaries:commonSettings:hevcSettings:h264Settings:", v3, objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CommonSettings")), objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("HEVCSettings")), objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("H264Settings")));

    return v4;
  }
  if (dword_1ECFE9B90)
    goto LABEL_16;
  return 0;
}

uint64_t css_cameraInfoIsValid(void *a1)
{
  uint64_t result;

  if (objc_msgSend(a1, "count") != 3)
    return 0;
  result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CreatorID"));
  if (result)
  {
    result = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("DeviceUID"));
    if (result)
      return objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("OverrideRanking")) != 0;
  }
  return result;
}

uint64_t cs_configurationsTransitionBetweenCenterStageAndManualFraming(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v3 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v25;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v25 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        v9 = objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "cinematicFramingEnabled");
        if ((v9 & 1) != 0
          || (objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "manualCinematicFramingEnabled") & 1) != 0)
        {
          v11 = v9 ^ 1;
          v10 = v9 ^ 1;
          goto LABEL_13;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      v10 = 0;
      v11 = 1;
      if (v5)
        continue;
      break;
    }
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
LABEL_13:
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v12 = (void *)objc_msgSend(a2, "connectionConfigurations", 0);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v21;
LABEL_15:
    v16 = 0;
    while (1)
    {
      if (*(_QWORD *)v21 != v15)
        objc_enumerationMutation(v12);
      v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v16);
      if ((objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "cinematicFramingEnabled") & 1) != 0)
      {
        v18 = 1;
        return v10 & v18;
      }
      if ((objc_msgSend((id)objc_msgSend(v17, "sourceConfiguration"), "manualCinematicFramingEnabled") & 1) != 0)
        break;
      if (v14 == ++v16)
      {
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
        if (v14)
          goto LABEL_15;
        goto LABEL_25;
      }
    }
    if (v11)
      goto LABEL_25;
    return 1;
  }
  else
  {
LABEL_25:
    v18 = 0;
    return v10 & v18;
  }
}

uint64_t cs_cameraInfosAreEqualExcludingRank(void *a1, void *a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
  {
    result = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CreatorID")), "isEqualToString:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CreatorID")));
    if ((_DWORD)result)
      return objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("DeviceUID")), "isEqualToString:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("DeviceUID")));
  }
  return result;
}

uint64_t captureSource_UpdateCameraHistory(uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned int a5, int a6, int a7, _QWORD *a8)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v16;
  void *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  CFTypeRef v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;

  *a8 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return 4294954511;
  v16 = DerivedStorage;
  v36 = a5;
  v17 = (void *)objc_msgSend(*(id *)(DerivedStorage + 232), "objectForKey:", a3);
  if (dword_1ECFE9450)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a6)
  {
    cs_updateCameraHistoryDownplayOverrideListForPreferenceKey((uint64_t)a3);
    v19 = (void *)objc_msgSend(a3, "componentsSeparatedByString:", CFSTR("/"));
    v20 = v17;
    if (objc_msgSend(v19, "count") == 3)
    {
      v35 = a6;
      v21 = (void *)MEMORY[0x1E0CB3940];
      v22 = objc_msgSend(v19, "firstObject");
      v34 = objc_msgSend(v19, "lastObject");
      v23 = v21;
      a6 = v35;
      v24 = objc_msgSend(v23, "stringWithFormat:", CFSTR("%@/override/%@"), v22, v34);
      v20 = v17;
      if (v24)
      {
        v25 = (void *)objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "objectForKeyedSubscript:", a3);
        v20 = v17;
        if ((cs_cameraInfosAreEqualExcludingRank(v25, a4) & 1) == 0)
        {
          v26 = a4;
          if (!a7)
          {
            v20 = v17;
            if (!v25)
              goto LABEL_15;
            v26 = 0;
          }
          objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "setObject:forKeyedSubscript:", v26, a3);
          if (dword_1ECFE9450)
          {
            v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
          objc_msgSend((id)sTemporaryCameraHistoryItems, "setObject:forKeyedSubscript:", sCameraHistoriesUpdatedWithOverridingCamera, CFSTR("camera-histories-updated-with-overriding-camera"));
          objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", sTemporaryCameraHistoryItems, CFSTR("tmp"));
          pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
          v20 = v17;
          a6 = v35;
        }
      }
    }
  }
  else
  {
    v20 = 0;
  }
LABEL_15:
  if (!objc_msgSend(v17, "count", v32, v33))
  {
LABEL_19:
    LODWORD(v28) = -1;
LABEL_21:
    if (v17)
    {
      v29 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v17);
      v20 = v29;
      if ((int)v28 >= 1)
        objc_msgSend(v29, "removeObjectAtIndex:", v28);
    }
    else
    {
      v20 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    }
    while (objc_msgSend(v20, "count") >= (unint64_t)v36)
      objc_msgSend(v20, "removeLastObject");
    objc_msgSend(v20, "insertObject:atIndex:", a4, 0);
    objc_msgSend(*(id *)(v16 + 232), "setObject:forKey:", v20, a3);
    goto LABEL_28;
  }
  v28 = 0;
  while ((cs_cameraInfosAreEqualExcludingRank(a4, (void *)objc_msgSend(v17, "objectAtIndexedSubscript:", v28)) & 1) == 0)
  {
    if (objc_msgSend(v17, "count") <= (unint64_t)++v28)
      goto LABEL_19;
  }
  if ((_DWORD)v28)
    goto LABEL_21;
  if (dword_1ECFE9450)
  {
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!a6)
      return 0;
  }
  else if (!a6)
  {
    return 0;
  }
LABEL_28:
  if (v20)
    v30 = CFRetain(v20);
  else
    v30 = 0;
  result = 0;
  *a8 = v30;
  return result;
}

uint64_t captureSession_SetSectionProperty(const void *a1, const void *a2, const void *a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  os_unfair_lock_s *v10;
  int v11;
  id v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  void *v24;
  _QWORD v25[10];
  _QWORD v26[8];
  _QWORD v27[8];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;

  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    if (a2 && a3 && a4)
    {
      if (CFEqual(a3, CFSTR("PreviewFilters"))
        || CFEqual(a3, CFSTR("SimulatedAperture"))
        || CFEqual(a3, CFSTR("PortraitLightingEffectStrength"))
        || CFEqual(a3, CFSTR("SemanticStyles"))
        || CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")))
      {
        v10 = (os_unfair_lock_s *)(DerivedStorage + 320);
        os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
        v11 = *(unsigned __int8 *)(DerivedStorage + 496);
        if (CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")))
        {
          v12 = (id)objc_msgSend(*(id *)(DerivedStorage + 480), "objectForKeyedSubscript:", a2);
          os_unfair_lock_unlock(v10);
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
          if (!v11)
          {
            if (CFEqual(a3, CFSTR("PrimaryCaptureRectAspectRatio")) || CFEqual(a3, CFSTR("SemanticStyles")))
            {
              v24 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a4);
              objc_msgSend(v24, "setObject:forKeyedSubscript:", 0, CFSTR("CAContextFencePortSendRight"));
              a4 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v24);
            }
            v12 = 0;
            v13 = 0;
            goto LABEL_16;
          }
          v12 = 0;
        }
        v13 = 1;
LABEL_16:
        CFRetain(a2);
        CFRetain(a3);
        if (a4)
          CFRetain(a4);
        if (v13)
        {
          if (v12)
          {
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("AspectRatio")), "doubleValue");
            v15 = v14;
            v16 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CAContextFencePortSendRight"));
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterX")), "doubleValue");
            v18 = v17;
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("CenterY")), "doubleValue");
            v20 = v19;
            v21 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("UniqueID")), "longLongValue");
            objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("TrueVideoTransitionPercentComplete")), "doubleValue");
            objc_msgSend(v12, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", v16, v21, v15, v18, v20, v22);
            CFRelease(a2);
            CFRelease(a3);
            if (a4)
              CFRelease(a4);
          }
          else
          {
            v27[0] = MEMORY[0x1E0C809B0];
            v27[1] = 3221225472;
            v27[2] = __captureSession_SetSectionProperty_block_invoke;
            v27[3] = &__block_descriptor_64_e5_v8__0l;
            v27[4] = a1;
            v27[5] = a2;
            v27[6] = a3;
            v27[7] = a4;
            captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v27);
          }
        }
        else
        {
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 3221225472;
          v26[2] = __captureSession_SetSectionProperty_block_invoke_2;
          v26[3] = &__block_descriptor_64_e5_v8__0l;
          v26[4] = a1;
          v26[5] = a2;
          v26[6] = a3;
          v26[7] = a4;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v26);
        }

        goto LABEL_25;
      }
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __captureSession_SetSectionProperty_block_invoke_3;
      v25[3] = &unk_1E49230D0;
      v25[6] = a2;
      v25[7] = a3;
      v25[8] = a4;
      v25[9] = a1;
      v25[4] = &v28;
      v25[5] = DerivedStorage;
      captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v25);
    }
    else
    {
      FigDebugAssert3();
      *((_DWORD *)v29 + 6) = FigSignalErrorAt();
    }
LABEL_25:
    v9 = *((unsigned int *)v29 + 6);
    goto LABEL_26;
  }
  v9 = FigSignalErrorAt();
LABEL_26:
  _Block_object_dispose(&v28, 8);
  return v9;
}

void sub_1A2DD9F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_SetProperty(const void *a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  BOOL v7;
  uint64_t result;
  int Value;
  CFTypeID v10;
  uint64_t v11;
  _QWORD v12[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("CaptureSession_SmartStyle")))
    v7 = 1;
  else
    v7 = CFEqual(a2, CFSTR("CaptureSession_SystemStyleOverride")) != 0;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
    goto LABEL_21;
  if (a3)
    v7 = 1;
  if (!v7)
    goto LABEL_21;
  if (CFEqual(a2, CFSTR("CaptureSession_RemoteVideoPreviewEnabled")))
  {
    Value = CFBooleanGetValue(a3);
    result = 0;
    *(_BYTE *)(DerivedStorage + 168) = Value != 0;
    return result;
  }
  if (CFEqual(a2, CFSTR("CaptureSession_ForegroundAutoResumeStopTime")))
  {
    v10 = CFGetTypeID(a3);
    if (v10 == CFNumberGetTypeID())
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
      -[__CFBoolean doubleValue](a3, "doubleValue");
      *(_QWORD *)(DerivedStorage + 512) = v11;
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
      return 0;
    }
LABEL_21:
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("CaptureSession_SmartStyle")))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __captureSession_SetProperty_block_invoke;
    v12[3] = &unk_1E4920768;
    v12[4] = a3;
    v12[5] = a1;
    v12[6] = DerivedStorage;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v12);
    return 0;
  }
  if (CFEqual(a2, CFSTR("CaptureSession_SystemStyleOverride")))
  {
    FigCaptureSmartStyleSettingsSetSystemStyle((uint64_t)a3, *(_QWORD *)(DerivedStorage + 56));
    return 0;
  }
  return 4294954512;
}

void captureSessionServer_handlePrewarm(xpc_object_t xdict)
{
  int64_t int64;
  int64_t v3;

  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  int64 = xpc_dictionary_get_int64(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  v3 = xpc_dictionary_get_int64(xdict, (const char *)*MEMORY[0x1E0CA36D8]);
  FigXPCMessageCopyCFString();
  FigXPCMessageCopyCFString();
  FigCaptureSessionPrewarm(0, int64, v3, 0);
}

void captureDeferredContainerManager_servedObjectRefconDestructor(CFTypeRef *a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef);

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t captureDeferredContainerManager_handleReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294951138;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

void *als_updateAmbientLightValue(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (result)
  {
    if (a3)
    {
      if (a4)
      {
        v4 = objc_msgSend(result, "referencedObject");
        result = (void *)IOHIDEventGetType();
        if ((_DWORD)result == 12)
        {
          if (v4)
          {
            result = (void *)IOHIDEventGetIntegerValue();
            *(_DWORD *)(v4 + 24) = (_DWORD)result;
          }
        }
      }
    }
  }
  return result;
}

void __ubn_dispatch_sync_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __ubn_dispatch_sync_block_invoke_0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

CFAllocatorRef __roGetShmemDeallocator_block_invoke()
{
  CFAllocatorRef result;

  result = FigSharedMemPoolAllocatorCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0);
  roGetShmemDeallocator_shmemDeallocator = (uint64_t)result;
  return result;
}

Class __getVNRecognizeFoodAndDrinkRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNRecognizeFoodAndDrinkRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNRecognizeFoodAndDrinkRequestClass_block_invoke_cold_1();
  getVNRecognizeFoodAndDrinkRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNProcessingDeviceClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNProcessingDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNProcessingDeviceClass_block_invoke_cold_1();
  getVNProcessingDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNDetectFaceRectanglesRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNDetectFaceRectanglesRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNDetectFaceRectanglesRequestClass_block_invoke_cold_1();
  getVNDetectFaceRectanglesRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void __flashlight_postNotificationWithPayload_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  const void *v4;

  if (dword_1EE6BE618)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v3 = *(const void **)(a1 + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(a1 + 56);
  if (v4)
    CFRelease(v4);
}

uint64_t __fcdpe_resolveFormatsAndUpdateSettings_block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "uniqueID"), "isEqualToString:", *(_QWORD *)(a1 + 32));
}

uint64_t __cs_prewarmSystemOverride_block_invoke_2()
{
  return system_override();
}

void __containerManager_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("ServerConnectionDied"));
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A8], (const void *)*MEMORY[0x1E0C9AE50]);
  sDeadServerNotificationQueue_0 = (uint64_t)dispatch_queue_create("com.apple.coremedia.capturedeferredcontainermanager.deadserver-notifications", 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t FigCaptureSourceUpdateCameraHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (a1)
    v16 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  else
    v16 = 0;
  if (*v16 >= 3uLL
    && (v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v16[8]) != 0)
  {
    return v17(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    return 4294954514;
  }
}

uint64_t FigCaptureSessionCreate(uint64_t a1, __int128 *a2, void *a3, CFTypeRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  __int128 v13;
  __int128 v14;
  FigCaptureSessionParsedConfigurationRestrictions *v15;
  BWFigCaptureSession *v16;
  id v17;
  __int128 v18;
  FigCaptureSessionLoggingPrefix *v19;
  __int128 v20;
  CFTypeRef v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v25;
  void *v26;
  NSObject *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const __CFString *v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v39;
  _QWORD v40[5];
  os_log_type_t type;
  unsigned int v42;
  CFTypeRef cf;
  _BYTE v44[32];
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  const __CFString *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (initializeGlobals_initializeGlobalsOnceToken != -1)
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_616);
  if (dword_1ECFE9590)
  {
    v42 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3)
  {
    v8 = a2[1];
    v49 = *a2;
    v50 = v8;
    if (!FigCaptureClientIsWebBrowserRenderingExtension(&v49))
    {
LABEL_31:
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954516;
    }
  }
  else
  {
    v9 = a2[1];
    v49 = *a2;
    v50 = v9;
    if (FigCaptureClientIsWebBrowserRenderingExtension(&v49))
    {
      v10 = a2[1];
      v49 = *a2;
      v50 = v10;
      if ((FigCaptureClientHasEntitlement(&v49, CFSTR("com.apple.private.avfoundation.capture.temporary.no-media-environment.allow")) & 1) == 0)goto LABEL_31;
    }
  }
  FigCaptureSessionGetClassID();
  v11 = CMDerivedObjectCreate();
  if ((_DWORD)v11)
  {
    v37 = v11;
    FigDebugAssert3();
    return v37;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = a2[1];
  v49 = *a2;
  v50 = v13;
  *(_DWORD *)(DerivedStorage + 16) = FigCaptureGetPIDFromAuditToken(&v49);
  v14 = *a2;
  *(_OWORD *)(DerivedStorage + 36) = a2[1];
  *(_OWORD *)(DerivedStorage + 20) = v14;
  *(_DWORD *)(DerivedStorage + 52) = 0;
  *(_QWORD *)(DerivedStorage + 64) = objc_msgSend(a3, "copy");
  *(_DWORD *)(DerivedStorage + 320) = 0;
  *(_QWORD *)(DerivedStorage + 392) = objc_alloc_init(BWMultitaskingSessionAnalyticsPayload);
  v15 = [FigCaptureSessionParsedConfigurationRestrictions alloc];
  v49 = *(_OWORD *)(DerivedStorage + 20);
  v50 = *(_OWORD *)(DerivedStorage + 36);
  *(_QWORD *)(DerivedStorage + 400) = -[FigCaptureSessionParsedConfigurationRestrictions initWithClientAuditToken:](v15, "initWithClientAuditToken:", &v49);
  *(_DWORD *)(DerivedStorage + 544) = -1;
  *(_QWORD *)(DerivedStorage + 552) = 0;
  *(_DWORD *)(DerivedStorage + 176) = 0;
  *(_QWORD *)(DerivedStorage + 208) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 104) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 112) = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 120) = FigDispatchQueueCreateWithPriority();
  *(_BYTE *)(DerivedStorage + 128) = 1;
  *(_QWORD *)(DerivedStorage + 160) = FigDispatchQueueCreateWithPriority();
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = __FigCaptureSessionCreate_block_invoke;
  v40[3] = &__block_descriptor_40_e45_v24__0__AVAudioSession_8__opaqueCMSession__16l;
  v40[4] = DerivedStorage;
  captureSession_performBlockWithAVCMSessionForIsUsingCamera(cf, (uint64_t)v40);
  v16 = [BWFigCaptureSession alloc];
  *(_QWORD *)(DerivedStorage + 672) = -[BWFigCaptureSession initWithFigCaptureSession:](v16, (uint64_t)cf);
  *(_QWORD *)(DerivedStorage + 680) = objc_alloc_init(FigCaptureThermalMonitor);
  v17 = +[FigCaptureSessionObservatory sharedObservatory](FigCaptureSessionObservatory, "sharedObservatory");
  objc_msgSend(v17, "captureSessionWasCreated:", cf);
  v18 = a2[1];
  v49 = *a2;
  v50 = v18;
  captureSession_createClientApplicationStateMonitor(cf, &v49);
  v19 = [FigCaptureSessionLoggingPrefix alloc];
  v20 = a2[1];
  v49 = *a2;
  v50 = v20;
  *(_QWORD *)(DerivedStorage + 72) = -[FigCaptureSessionLoggingPrefix initWithClientAuditToken:captureSession:](v19, &v49, (uint64_t)cf);
  v21 = cf;
  v22 = a2[1];
  *(_OWORD *)v44 = *a2;
  *(_OWORD *)&v44[16] = v22;
  os_unfair_lock_lock((os_unfair_lock_t)&sSessionIDLock);
  v23 = sNextSessionCount + 1;
  if ((unint64_t)(sNextSessionCount + 1) > 1)
    v24 = sNextSessionCount + 1;
  else
    v24 = 1;
  sNextSessionCount = v24;
  os_unfair_lock_unlock((os_unfair_lock_t)&sSessionIDLock);
  v49 = *(_OWORD *)v44;
  v50 = *(_OWORD *)&v44[16];
  v25 = (__CFString *)FigCaptureCopyClientCodeSigningIdentifier(&v49);
  v26 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%p[%@][%llu]>"), v21, v25, v23);

  *(_QWORD *)(DerivedStorage + 8) = v26;
  *(_DWORD *)(DerivedStorage + 716) = 0;
  *(_QWORD *)(DerivedStorage + 720) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_QWORD *)(DerivedStorage + 736) = 0;
  *(_BYTE *)(DerivedStorage + 81) = objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "highPriorityLaunchFromLockScreenSupported");
  if (FigCaptureOSVariantHasInternalUI())
  {
    if (dword_1ECFE9590)
    {
      v42 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v28 = v42;
      if (os_log_type_enabled(v27, type))
        v29 = v28;
      else
        v29 = v28 & 0xFFFFFFFE;
      if (v29)
      {
        v30 = *(_QWORD *)(DerivedStorage + 72);
        v31 = FigCapturePlatformIdentifierString();
        v32 = FigCapturePlatformChipRevisionIdentifierString();
        *(_DWORD *)v44 = 136316162;
        *(_QWORD *)&v44[4] = "FigCaptureSessionCreate";
        *(_WORD *)&v44[12] = 2114;
        *(_QWORD *)&v44[14] = v30;
        *(_WORD *)&v44[22] = 2112;
        *(_QWORD *)&v44[24] = CFSTR("DISABLED");
        v45 = 2112;
        v46 = v31;
        v47 = 2112;
        v48 = v32;
        _os_log_send_and_compose_impl();
      }
LABEL_27:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else if (dword_1ECFE9590)
  {
    v42 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v34 = v42;
    if (os_log_type_enabled(v33, type))
      v35 = v34;
    else
      v35 = v34 & 0xFFFFFFFE;
    if (v35)
    {
      v36 = *(_QWORD *)(DerivedStorage + 72);
      *(_DWORD *)v44 = 136315394;
      *(_QWORD *)&v44[4] = "FigCaptureSessionCreate";
      *(_WORD *)&v44[12] = 2114;
      *(_QWORD *)&v44[14] = v36;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_27;
  }
  v37 = 0;
  *a4 = cf;
  return v37;
}

uint64_t FigCaptureReleaseCameraDriverService(uint64_t object)
{
  if ((_DWORD)object)
    return IOObjectRelease(object);
  return object;
}

uint64_t FigCapturePlatformIdentifierString()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformIDString;
}

uint64_t FigCapturePlatformGetVariant()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformVariant;
}

const __CFString *FigCapturePlatformChipRevisionIdentifierString()
{
  const __CFString *v0;
  const __CFString *v1;
  const __CFString *v2;

  if (fcp_identifyChipRevision_identifyChipRevisionOnceToken != -1)
    dispatch_once(&fcp_identifyChipRevision_identifyChipRevisionOnceToken, &__block_literal_global_50);
  v0 = CFSTR("Unknown");
  v1 = CFSTR("B0");
  v2 = CFSTR("B1");
  if (sPlatformChipRevisionID != 17)
    v2 = CFSTR("Unknown");
  if (sPlatformChipRevisionID != 16)
    v1 = v2;
  if (sPlatformChipRevisionID == 1)
    v0 = CFSTR("A1");
  if (!sPlatformChipRevisionID)
    v0 = CFSTR("A0");
  if (sPlatformChipRevisionID <= 15)
    return v0;
  else
    return v1;
}

uint64_t FigCaptureOrientationFromRotationDegrees(int a1, int a2, int a3, int a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v8 = FigCaptureCameraRequires180DegreesRotation(a2, a3);
  if (a4)
  {
    if (a1 % 360 <= 0)
      v9 = 0;
    else
      v9 = 360;
    a1 = v9 - a1 % 360;
  }
  if (FigCapturePlatformMountsCamerasInLandscapeOrientation())
  {
    if (v8)
      v10 = 3;
    else
      v10 = 4;
    v11 = a3 | a2 & (v8 ^ 1);
    if (v11)
      v12 = 1;
    else
      v12 = 2;
    if (a1 != 270)
      v12 = 0;
    if (a1 != 180)
      v10 = v12;
    if (v8)
      v13 = 4;
    else
      v13 = 3;
    if (v11)
      v14 = 2;
    else
      v14 = 1;
    if (a1 != 90)
      v14 = 0;
    if (a1)
      v13 = v14;
    if (a1 <= 179)
      return v13;
    else
      return v10;
  }
  else
  {
    if (a2)
      v16 = 4;
    else
      v16 = 3;
    if (a1 != 270)
      v16 = 0;
    if (a1 == 180)
      v17 = 2;
    else
      v17 = v16;
    if (a2)
      v18 = 3;
    else
      v18 = 4;
    if (a1 != 90)
      v18 = 0;
    if (!a1)
      v18 = 1;
    if (a1 <= 179)
      return v18;
    else
      return v17;
  }
}

uint64_t FigCaptureIsRunningInVirtualization()
{
  if (FigCaptureIsRunningInVirtualization_sOnceToken != -1)
    dispatch_once(&FigCaptureIsRunningInVirtualization_sOnceToken, &__block_literal_global_70);
  return FigCaptureIsRunningInVirtualization_sAnswer;
}

uint64_t FigCaptureGetCameraDriverService()
{
  unint64_t v0;
  mach_port_t v1;
  const char **v2;
  const char *v3;
  const __CFDictionary *v4;
  uint64_t result;

  v0 = 0;
  v1 = *MEMORY[0x1E0CBBAA8];
  v2 = (const char **)sCameraDriverInfo;
  do
  {
    v3 = *v2;
    v2 += 3;
    v4 = IOServiceMatching(v3);
    result = IOServiceGetMatchingService(v1, v4);
    if (v0 > 3)
      break;
    ++v0;
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t FigCaptureDeferredContainerManagerRemoteCopyContainerManager()
{
  int v0;
  uint64_t uint64;
  uint64_t v2;
  uint64_t v3;
  _QWORD block[5];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __containerManager_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E491EC40;
  block[4] = &v6;
  if (containerManager_ensureClientEstablished_onceToken != -1)
    dispatch_once(&containerManager_ensureClientEstablished_onceToken, block);
  v0 = *((_DWORD *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  if (v0
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || (uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0])) == 0)
  {
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    v3 = 0;
    goto LABEL_9;
  }
  v2 = uint64;
  block[0] = 0;
  FigCaptureDeferredContainerManagerGetClassID();
  if (CMDerivedObjectCreate())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_12;
  }
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = v2;
  FigXPCRemoteClientAssociateObject();
  v3 = block[0];
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v3;
}

uint64_t FigCaptureDeferredContainerManagerGetClassID()
{
  if (FigCaptureDeferredContainerManagerGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureDeferredContainerManagerGetClassID_onceToken, &__block_literal_global_21);
  return FigCaptureDeferredContainerManagerGetClassID_sFigCaptureDeferredContainerManagerClassID;
}

uint64_t FigCaptureDeferredContainerManagerCopyContainerManagerForPID(int a1)
{
  if (a1)
  {
    if (containerManager_initializeStatics_onceToken != -1)
      dispatch_once(&containerManager_initializeStatics_onceToken, &__block_literal_global_115);
    FigCaptureDeferredContainerManagerGetClassID();
    if (CMDerivedObjectCreate())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
}

__SecTask *FigCaptureClientIsWebBrowserRenderingExtension(_OWORD *a1)
{
  __int128 v1;
  _OWORD v3[2];

  v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  return FigCaptureClientHasEntitlement(v3, CFSTR("com.apple.developer.web-browser-engine.rendering"));
}

__SecTask *FigCaptureClientHasEntitlement(_OWORD *a1, __CFString *a2)
{
  const __CFAllocator *v4;
  __int128 v5;
  __SecTask *v6;
  __SecTask *v7;
  __SecTask *v8;
  audit_token_t v10;

  if (!-[__CFString length](a2, "length"))
    return 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = a1[1];
  *(_OWORD *)v10.val = *a1;
  *(_OWORD *)&v10.val[4] = v5;
  v6 = SecTaskCreateWithAuditToken(v4, &v10);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = FigCaptureClientHasEntitlementWithSecTask(v6, a2);
  CFRelease(v7);
  return v8;
}

CFTypeRef FigAppleMakerNoteStillImageProcessingFlagsToShortString(uint64_t a1)
{
  CFStringRef v1;

  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%u"), a1);
  return CFAutorelease(v1);
}

void sub_1A2DDEC44(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A2DE08D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWStillImageProcessorTypeToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%llu)"), a1);
}

void __sipc_createStateMachine_block_invoke(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  objc_msgSend(a2, "reset");
  objc_autoreleasePoolPop(v3);
}

uint64_t __sipc_createStateMachine_block_invoke_2(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  objc_msgSend(a2, "reset");
  objc_msgSend(a2, "_completeCurrentRequestAndInitiateNextRequest");
  objc_autoreleasePoolPop(v3);
  return objc_msgSend(a2, "_updateStateIfNeeded");
}

uint64_t __sipc_createStateMachine_block_invoke_3(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  objc_msgSend(a2, "_prepare");
  objc_autoreleasePoolPop(v3);
  return objc_msgSend(a2, "_updateStateIfNeeded");
}

uint64_t __sipc_createStateMachine_block_invoke_4(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  objc_msgSend(a2, "_process");
  objc_autoreleasePoolPop(v3);
  return objc_msgSend(a2, "_updateStateIfNeeded");
}

void sub_1A2DEDCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2DEE540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2DEF980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void cfr_bbufUtilXPCObjectReleaser(xpc_object_t object)
{
  if (object)
    xpc_release(object);
}

void sub_1A2DF09DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t cfss_atExitHandler()
{
  uint64_t result;

  if (!sRunningInsideCameracaptured)
    return FigCaptureSourceRemoteSuppressFrameSenderServerEndpoint(CFSTR("all-endpoint-uids"));
  result = +[CMCaptureFrameSenderEndpointsServerSideSingleton removeAllEndpointsWithPID:](CMCaptureFrameSenderEndpointsServerSideSingleton, "removeAllEndpointsWithPID:", getpid());
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter"), "postNotificationName:object:", CFSTR("FrameServerEndpointsChanged"), 0);
  return result;
}

CMCaptureFrameSenderEndpoints *__cfs_serverSideEndpoints_block_invoke()
{
  CMCaptureFrameSenderEndpoints *result;

  result = objc_alloc_init(CMCaptureFrameSenderEndpoints);
  sServerSideEndpoints = (uint64_t)result;
  return result;
}

uint64_t FigLivePhotoMetadataComputeSerializationSize(unsigned int a1, unsigned int a2, _QWORD *a3)
{
  return FigLivePhotoMetadataComputeSerializationSizeV3(a1, a2, 0, 0, 0, 0, a3);
}

uint64_t FigLivePhotoMetadataComputeSerializationSizeV3(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, _QWORD *a7)
{
  uint64_t v7;
  unint64_t v8;

  *a7 = 0;
  if (a1 && a1 < 4 && (a1 > 1 || !(a4 | a3 | a5 | a6)))
  {
    v7 = 32 * a2 + 48;
    if (a1 > 1)
    {
      v8 = v7 + 32 * a3 + 32 * (a5 + (unint64_t)a4 + a6) + 16;
      *a7 = v8;
      if (a1 == 2)
        return 0;
      v7 = v8 + 72;
    }
    *a7 = v7;
    return 0;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigLivePhotoMetadataComputeDeserializationSize(unsigned int *a1, unint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *a6 = 0;
  if (a4)
    *a4 = 0;
  if (!a3 && !a5)
    goto LABEL_30;
  if (a2 <= 0x2F)
    goto LABEL_30;
  v6 = *a1;
  if (!*a1)
    goto LABEL_30;
  if (a3 >= v6)
    v7 = *a1;
  else
    v7 = a3;
  if (v7 >= 3)
    v7 = 3;
  v8 = a1[11];
  v9 = 32 * v8;
  v10 = 32 * v8 + 48;
  if (v6 != 1)
  {
    if (v10 <= a2)
    {
      v11 = (32 * a1[8 * v8 + 15] + 32 * a1[8 * v8 + 12] + 32
                                                             * (a1[8 * v8 + 14] + (unint64_t)a1[8 * v8 + 13])) | 0x10;
      v12 = v11 + v10;
      if (v6 == 2)
      {
        if (v12 == a2)
          goto LABEL_18;
      }
      else if (v12 <= a2)
      {
        v14 = v9 + v11 + 120;
        if (v6 == 3)
        {
          if (v14 != a2)
            goto LABEL_30;
        }
        else if (v14 > a2)
        {
          goto LABEL_30;
        }
        v13 = 72;
        goto LABEL_25;
      }
    }
LABEL_30:
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  if (v10 != a2)
    goto LABEL_30;
  v11 = 0;
LABEL_18:
  v13 = 0;
LABEL_25:
  if (v7 <= 1)
    v11 = 0;
  v15 = v11 + v10 + v13;
  if (a4)
    *a4 = v6;
  *a5 = v7;
  *a6 = v15;
  return 0;
}

uint64_t FigLivePhotoMetadataSerializeIntoBuffer(const void *a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, unsigned int a5, size_t a6, unsigned int *a7)
{
  CGPoint v8;
  uint64_t v9;

  v8 = *(CGPoint *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  return FigLivePhotoMetadataSerializeIntoBufferV3(a1, &v8, a3, a4, 0, 0, 0, 0, a5, a6, a7);
}

uint64_t FigLivePhotoMetadataSerializeIntoBufferV3(const void *a1, CGPoint *a2, const __CFDictionary *a3, const __CFArray *a4, const __CFDictionary *Value, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unsigned int a9, size_t a10, unsigned int *a11)
{
  const void **v17;
  const __CFArray *v18;
  unsigned int Count;
  unsigned int v20;
  uint64_t result;
  const __CFNumber *v22;
  int v23;
  const __CFNumber *v24;
  const __CFData *v25;
  const __CFData *v26;
  const __CFData *v27;
  const __CFData *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFIndex v32;
  int v33;
  const void *v34;
  const void *v35;
  const void *v36;
  _WORD *v37;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *v39;
  int64_t v40;
  const __CFDictionary *v41;
  const __CFNumber *v42;
  uint64_t v43;
  unsigned int *v44;
  _DWORD *v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  const __CFNumber *v49;
  int64_t v50;
  CMTimeValue v51;
  __int16 v52;
  CFIndex v53;
  const __CFArray *v54;
  uint64_t v55;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  __int16 v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  __int16 v61;
  const __CFNumber *v62;
  uint64_t v63;
  uint64_t v64;
  const __CFData *v65;
  const __CFData *v66;
  unsigned int *v67;
  __int128 v68;
  __int16 v69;
  unsigned int *v70;
  const __CFDictionary *v71;
  const __CFDictionary *v72;
  CFTypeID v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  CFTypeID v76;
  const __CFNumber *v77;
  const __CFNumber *v78;
  CFTypeID v79;
  const __CFNumber *v80;
  const __CFNumber *v81;
  CFTypeID v82;
  uint64_t v83;
  CGPoint *v84;
  const __CFDictionary *v85;
  const __CFDictionary *v86;
  const __CFDictionary *v87;
  const __CFDictionary *v88;
  const __CFDictionary *v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  const void *v96;
  unsigned int v97;
  uint64_t v98;
  const __CFArray *v99;
  const __CFArray *key;
  void *keya;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  CFDictionaryRef theDicta;
  CMTime time;
  CMTime v107;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CGRect valuePtr;
  CMTime v112;
  CMTime lhs;
  CMTime v114;
  int v115;
  int v116;
  uint64_t v117;
  UInt8 v118[16];
  __int128 v119;
  unsigned int v120;
  _QWORD v121[4];
  _QWORD v122[4];
  _QWORD v123[4];
  _DWORD v124[4];
  UInt8 v125[8];
  UInt8 buffer[8];
  uint64_t v127;
  CFRange v128;
  CFRange v129;
  CFRange v130;

  v127 = *MEMORY[0x1E0C80C00];
  if (!a11)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  bzero(a11, a10);
  v17 = (const void **)MEMORY[0x1E0D064D0];
  v87 = Value;
  if (Value)
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0D064D0]);
  if (a6)
  {
    key = (const __CFArray *)CFDictionaryGetValue(a6, *v17);
    if (a7)
    {
LABEL_6:
      v18 = (const __CFArray *)CFDictionaryGetValue(a7, *v17);
      goto LABEL_9;
    }
  }
  else
  {
    key = 0;
    if (a7)
      goto LABEL_6;
  }
  v18 = 0;
LABEL_9:
  theArray = v18;
  if (a8)
    v99 = (const __CFArray *)CFDictionaryGetValue(a8, *v17);
  else
    v99 = 0;
  v88 = a7;
  v89 = a8;
  if (a4)
  {
    Count = CFArrayGetCount(a4);
    if (Value)
      goto LABEL_14;
LABEL_17:
    v97 = 0;
    if (key)
      goto LABEL_15;
    goto LABEL_18;
  }
  Count = 0;
  if (!Value)
    goto LABEL_17;
LABEL_14:
  v97 = CFArrayGetCount(Value);
  if (key)
  {
LABEL_15:
    v95 = CFArrayGetCount(key);
    goto LABEL_19;
  }
LABEL_18:
  v95 = 0;
LABEL_19:
  v20 = v99;
  if (theArray)
  {
    v93 = CFArrayGetCount(theArray);
    if (!v99)
      goto LABEL_22;
    goto LABEL_21;
  }
  v93 = 0;
  if (v99)
LABEL_21:
    v20 = CFArrayGetCount(v99);
LABEL_22:
  v117 = 0;
  result = FigLivePhotoMetadataComputeSerializationSizeV3(a9, Count, v97, v95, v93, v20, &v117);
  if ((_DWORD)result)
    return result;
  if (v117 != a10)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v91 = v20;
  *a11 = a9;
  v22 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06A20]);
  if (v22)
  {
    LODWORD(valuePtr.origin.x) = 0;
    CFNumberGetValue(v22, kCFNumberFloat32Type, &valuePtr);
    a11[1] = LODWORD(valuePtr.origin.x);
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D068C0]);
  if (v24)
  {
    valuePtr.origin.x = 0.0;
    CFNumberGetValue(v24, kCFNumberSInt64Type, &valuePtr);
    *((_QWORD *)a11 + 1) = *(_QWORD *)&valuePtr.origin.x;
    v23 |= 2u;
  }
  v25 = (const __CFData *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D08858]);
  if (v25)
  {
    v26 = v25;
    if (CFDataGetLength(v25) == 8)
    {
      v128.location = 0;
      v128.length = 8;
      CFDataGetBytes(v26, v128, buffer);
      *((_QWORD *)a11 + 2) = *(_QWORD *)buffer;
      v23 |= 4u;
    }
  }
  v27 = (const __CFData *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D08860]);
  if (v27)
  {
    v28 = v27;
    if (CFDataGetLength(v27) == 8)
    {
      v129.location = 0;
      v129.length = 8;
      CFDataGetBytes(v28, v129, v125);
      *((_QWORD *)a11 + 3) = *(_QWORD *)v125;
      v23 |= 8u;
    }
  }
  v116 = 1065353216;
  v29 = (const __CFNumber *)CMGetAttachment(a1, CFSTR("TotalZoomFactor"), 0);
  if (v29)
  {
    CFNumberGetValue(v29, kCFNumberFloat32Type, &v116);
    a11[8] = v116;
    v23 |= 0x10u;
  }
  v115 = 1065353216;
  if (!FigCaptureComputeImageGainFromMetadata())
  {
    a11[9] = v115;
    v23 |= 0x20u;
  }
  v30 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D067D0]);
  if (v30)
  {
    CFNumberGetValue(v30, kCFNumberSInt8Type, a11 + 10);
    v23 |= 0x40u;
  }
  v86 = Value;
  v31 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D06AB8]);
  if (v31)
  {
    CFNumberGetValue(v31, kCFNumberSInt8Type, (char *)a11 + 41);
    LOWORD(v23) = v23 | 0x80;
  }
  else if (!v23)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v84 = a2;
  v85 = a3;
  *((_WORD *)a11 + 21) = v23;
  memset(&v114, 0, sizeof(v114));
  valuePtr.origin = *a2;
  valuePtr.size.width = a2[1].x;
  CMTimeConvertScale(&v114, (CMTime *)&valuePtr, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  a11[11] = Count;
  if (Count)
  {
    v32 = 0;
    v33 = 0;
    v34 = (const void *)*MEMORY[0x1E0D06F20];
    v35 = (const void *)*MEMORY[0x1E0D06D58];
    v36 = (const void *)*MEMORY[0x1E0D06A48];
    v37 = (_WORD *)a11 + 39;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v32);
      v39 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v34);
      if (v39)
      {
        time.value = 0;
        CFNumberGetValue(v39, kCFNumberSInt64Type, &time);
        v40 = FigHostTimeToNanoseconds();
        CMTimeMake(&lhs, v40, 1000000000);
        valuePtr.origin = *(CGPoint *)&v114.value;
        *(_QWORD *)&valuePtr.size.width = v114.epoch;
        CMTimeSubtract(&v112, &lhs, (CMTime *)&valuePtr);
        *(_QWORD *)(v37 - 15) = v112.value;
        v33 |= 1u;
      }
      memset(&valuePtr, 0, sizeof(valuePtr));
      v41 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v35);
      if (v41 && CGRectMakeWithDictionaryRepresentation(v41, &valuePtr))
      {
        *(float32x4_t *)(v37 - 11) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)valuePtr.origin), (float64x2_t)valuePtr.size);
        v33 |= 2u;
      }
      v42 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v36);
      if (v42)
      {
        LODWORD(time.value) = 0;
        CFNumberGetValue(v42, kCFNumberSInt32Type, &time);
        *(_DWORD *)(v37 - 3) = time.value;
        v33 |= 4u;
      }
      *v37 = v33;
      *(v37 - 1) = 0;
      ++v32;
      v37 += 16;
    }
    while (Count != v32);
  }
  if (a9 < 2)
    return 0;
  v43 = 0;
  v83 = Count;
  v44 = &a11[8 * Count];
  v44[12] = v97;
  v44[13] = v95;
  v44 += 12;
  v44[2] = v93;
  v44[3] = v91;
  v124[0] = v97;
  v124[1] = v95;
  v124[2] = v93;
  v124[3] = v91;
  v123[0] = v87;
  v123[1] = a6;
  v123[2] = v88;
  v123[3] = v89;
  v122[0] = v86;
  v122[1] = key;
  v122[2] = theArray;
  v122[3] = v99;
  v90 = v44;
  v45 = v44 + 4;
  v121[0] = v44 + 4;
  v121[1] = &v44[8 * v97 + 4];
  v46 = v95 + v97;
  v94 = v93 + v46;
  v121[2] = &v45[8 * v46];
  v121[3] = &v45[8 * v94];
  v96 = (const void *)*MEMORY[0x1E0D06F20];
  theDicta = (CFDictionaryRef)*MEMORY[0x1E0D06D58];
  theArraya = (CFArrayRef)*MEMORY[0x1E0D06460];
  keya = (void *)*MEMORY[0x1E0D06958];
  v47 = (const void *)*MEMORY[0x1E0D06470];
  do
  {
    v98 = v43;
    v48 = v124[v43];
    if ((_DWORD)v48)
    {
      v49 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v123[v43], v96);
      if (v49)
      {
        time.value = 0;
        CFNumberGetValue(v49, kCFNumberSInt64Type, &time);
        v50 = FigHostTimeToNanoseconds();
        CMTimeMake(&v110, v50, 1000000000);
        valuePtr.origin = *(CGPoint *)&v114.value;
        *(_QWORD *)&valuePtr.size.width = v114.epoch;
        CMTimeSubtract(&v109, &v110, (CMTime *)&valuePtr);
        v51 = v109.value;
        v52 = 1;
      }
      else
      {
        v52 = 0;
        v51 = 0;
      }
      v53 = 0;
      v54 = (const __CFArray *)v122[v98];
      v55 = v121[v98];
      do
      {
        v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v53);
        *(_QWORD *)v55 = v51;
        memset(&valuePtr, 0, sizeof(valuePtr));
        v57 = (const __CFDictionary *)CFDictionaryGetValue(v56, theDicta);
        v58 = v52;
        if (v57)
        {
          v58 = v52;
          if (CGRectMakeWithDictionaryRepresentation(v57, &valuePtr))
          {
            *(float32x4_t *)(v55 + 8) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)valuePtr.origin), (float64x2_t)valuePtr.size);
            v58 = v52 | 2;
          }
        }
        v59 = (const __CFNumber *)CFDictionaryGetValue(v56, theArraya);
        if (v59)
        {
          LODWORD(time.value) = 0;
          CFNumberGetValue(v59, kCFNumberSInt32Type, &time);
          *(_DWORD *)(v55 + 24) = time.value;
          v58 |= 4u;
        }
        v60 = (const __CFNumber *)CFDictionaryGetValue(v56, keya);
        if (v60)
        {
          LOWORD(time.value) = 0;
          CFNumberGetValue(v60, kCFNumberSInt16Type, &time);
          v61 = time.value & 0x3FF;
          v58 |= 8u;
        }
        else
        {
          v61 = 0;
        }
        v62 = (const __CFNumber *)CFDictionaryGetValue(v56, v47);
        if (v62)
        {
          LOWORD(time.value) = 0;
          CFNumberGetValue(v62, kCFNumberSInt16Type, &time);
          v61 = v61 & 0xF3FF | ((time.value & 3) << 10);
          v58 |= 0x10u;
        }
        *(_WORD *)(v55 + 30) = v58;
        *(_WORD *)(v55 + 28) = v61;
        ++v53;
        v55 += 32;
      }
      while (v48 != v53);
    }
    v43 = v98 + 1;
  }
  while (v98 != 3);
  if (a9 < 3)
    return 0;
  v63 = v91 + v94;
  v64 = (uint64_t)&v90[8 * v63 + 4];
  v120 = 0;
  *(_OWORD *)v118 = 0u;
  v119 = 0u;
  v65 = (const __CFData *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D08898], 0);
  if (v65 && (v66 = v65, CFDataGetLength(v65) == 36))
  {
    v130.location = 0;
    v130.length = 36;
    CFDataGetBytes(v66, v130, v118);
    v67 = &a11[8 * v83 + 8 * v63];
    v68 = v119;
    *(_OWORD *)(v67 + 17) = *(_OWORD *)v118;
    *(_OWORD *)(v67 + 21) = v68;
    v67[25] = v120;
    v69 = 3;
  }
  else
  {
    v70 = &a11[8 * v83 + 8 * v63];
    v70[25] = 0;
    *(_OWORD *)(v70 + 21) = 0u;
    *(_OWORD *)(v70 + 17) = 0u;
    v69 = 2;
  }
  valuePtr.origin = *v84;
  valuePtr.size.width = v84[1].x;
  CMTimeConvertScale(&v108, (CMTime *)&valuePtr, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  *(_QWORD *)&v90[8 * v63 + 14] = v108.value;
  *(_QWORD *)&v90[8 * v63 + 16] = 0;
  v71 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
  if (v71)
  {
    v72 = v71;
    v73 = CFGetTypeID(v71);
    if (v73 == CFDictionaryGetTypeID())
    {
      memset(&valuePtr, 0, 24);
      CMTimeMakeFromDictionary((CMTime *)&valuePtr, v72);
      if ((BYTE4(valuePtr.origin.y) & 1) != 0)
      {
        *(CGPoint *)&time.value = valuePtr.origin;
        time.epoch = *(_QWORD *)&valuePtr.size.width;
        CMTimeConvertScale(&v107, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        *(_QWORD *)&v90[8 * v63 + 16] = v107.value;
        v69 |= 4u;
      }
    }
  }
  LOWORD(v90[8 * v63 + 18]) = 0;
  v74 = (const __CFNumber *)CFDictionaryGetValue(v85, CFSTR("IrisSequenceAdjusterRecipe"));
  if (v74)
  {
    v75 = v74;
    v76 = CFGetTypeID(v74);
    if (v76 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v75, kCFNumberSInt8Type, &v90[8 * v63 + 18]);
      if (LOBYTE(v90[8 * v63 + 18]))
      {
        v77 = (const __CFNumber *)CFDictionaryGetValue(v85, CFSTR("IrisSequenceAdjusterDisplacement"));
        if (v77)
        {
          v78 = v77;
          v79 = CFGetTypeID(v77);
          if (v79 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v78, kCFNumberSInt8Type, (char *)&v90[8 * v63 + 18] + 1);
            v69 |= 0x18u;
          }
        }
      }
    }
  }
  BYTE2(v90[8 * v63 + 18]) = 0;
  v80 = (const __CFNumber *)CFDictionaryGetValue(v85, CFSTR("InterpolatedFrame"));
  if (v80)
  {
    v81 = v80;
    v82 = CFGetTypeID(v80);
    if (v82 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v81, kCFNumberSInt8Type, (void *)(v64 + 58));
      v69 |= 0x20u;
    }
  }
  result = 0;
  *(_WORD *)v64 = v69;
  *(_QWORD *)(v64 + 59) = 0;
  *(_QWORD *)(v64 + 64) = 0;
  return result;
}

uint64_t FigLivePhotoMetadataSerializeIntoBufferV2(const void *a1, uint64_t a2, const __CFDictionary *a3, const __CFArray *a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unsigned int a9, size_t a10, unsigned int *a11)
{
  CGPoint v12;
  uint64_t v13;

  v12 = *(CGPoint *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  return FigLivePhotoMetadataSerializeIntoBufferV3(a1, &v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t FigLivePhotoMetadataDeserializeIntoBuffer(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int i;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  char v37;
  __int16 v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  _QWORD v46[4];
  _QWORD v47[4];
  _DWORD v48[4];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v45 = 0;
  v44 = 0;
  result = FigLivePhotoMetadataComputeDeserializationSize((unsigned int *)a1, a2, a3, 0, &v44, &v45);
  if (!(_DWORD)result)
  {
    if (v44 != a3 || v45 != a4)
      goto LABEL_72;
    v10 = *(unsigned int *)(a1 + 44);
    *(_DWORD *)a5 = a3;
    v11 = *(unsigned __int16 *)(a1 + 42);
    *(_WORD *)(a5 + 42) = v11;
    if ((v11 & 1) != 0)
    {
      *(_DWORD *)(a5 + 4) = *(_DWORD *)(a1 + 4);
      if ((v11 & 2) == 0)
      {
LABEL_7:
        if ((v11 & 4) == 0)
          goto LABEL_8;
        goto LABEL_47;
      }
    }
    else if ((v11 & 2) == 0)
    {
      goto LABEL_7;
    }
    *(_QWORD *)(a5 + 8) = *(_QWORD *)(a1 + 8);
    if ((v11 & 4) == 0)
    {
LABEL_8:
      if ((v11 & 8) == 0)
        goto LABEL_9;
      goto LABEL_48;
    }
LABEL_47:
    *(_QWORD *)(a5 + 16) = *(_QWORD *)(a1 + 16);
    if ((v11 & 8) == 0)
    {
LABEL_9:
      if ((v11 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_49;
    }
LABEL_48:
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
    if ((v11 & 0x10) == 0)
    {
LABEL_10:
      if ((v11 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_50;
    }
LABEL_49:
    *(_DWORD *)(a5 + 32) = *(_DWORD *)(a1 + 32);
    if ((v11 & 0x20) == 0)
    {
LABEL_11:
      if ((v11 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_51;
    }
LABEL_50:
    *(_DWORD *)(a5 + 36) = *(_DWORD *)(a1 + 36);
    if ((v11 & 0x40) == 0)
    {
LABEL_12:
      if ((v11 & 0x80) == 0)
        goto LABEL_13;
      goto LABEL_52;
    }
LABEL_51:
    *(_BYTE *)(a5 + 40) = *(_BYTE *)(a1 + 40);
    if ((v11 & 0x80) == 0)
    {
LABEL_13:
      if (v11)
      {
LABEL_14:
        *(_DWORD *)(a5 + 44) = v10;
        if ((_DWORD)v10)
        {
          v12 = 0;
          for (i = v10; i; --i)
          {
            v14 = *(_WORD *)(a1 + v12 + 78);
            v15 = a5 + v12;
            *(_WORD *)(v15 + 78) = v14;
            *(_WORD *)(v15 + 76) = 0;
            if ((v14 & 1) != 0)
            {
              *(_QWORD *)(v15 + 48) = *(_QWORD *)(a1 + v12 + 48);
              if ((v14 & 2) != 0)
              {
LABEL_23:
                *(_OWORD *)(a5 + v12 + 56) = *(_OWORD *)(a1 + v12 + 56);
                if ((v14 & 4) == 0)
                  goto LABEL_20;
LABEL_19:
                *(_DWORD *)(a5 + v12 + 72) = *(_DWORD *)(a1 + v12 + 72);
                goto LABEL_20;
              }
            }
            else if ((v14 & 2) != 0)
            {
              goto LABEL_23;
            }
            if ((v14 & 4) != 0)
              goto LABEL_19;
LABEL_20:
            v12 += 32;
          }
        }
        if (a3 < 2)
          return 0;
        v16 = a1 + 32 * v10;
        v19 = *(_DWORD *)(v16 + 48);
        v17 = (_DWORD *)(v16 + 48);
        v18 = v19;
        v20 = a5 + 32 * v10;
        *(_DWORD *)(v20 + 48) = v19;
        v21 = (_DWORD *)(v20 + 48);
        v22 = v17[1];
        v23 = v17[2];
        v24 = v17[3];
        v21[1] = v22;
        v21[2] = v23;
        v21[3] = v24;
        if (v19 || v22 || v23 || v24)
        {
          v25 = 0;
          v47[0] = v17 + 4;
          v47[1] = &v17[8 * v18 + 4];
          v26 = (v22 + v18);
          v27 = (v26 + v23);
          v47[2] = &v17[8 * v26 + 4];
          v47[3] = &v17[8 * v27 + 4];
          v46[0] = v21 + 4;
          v46[1] = &v21[8 * v18 + 4];
          v48[0] = v18;
          v48[1] = v22;
          v48[2] = v23;
          v48[3] = v24;
          v46[2] = &v21[8 * v26 + 4];
          v46[3] = &v21[8 * v27 + 4];
          while (1)
          {
            v28 = v48[v25];
            if (v28)
              break;
LABEL_42:
            if (++v25 == 4)
              goto LABEL_43;
          }
          v29 = 0;
          v30 = v46[v25];
          v31 = v47[v25];
          while (1)
          {
            v32 = *(_WORD *)(v31 + v29 + 30);
            v33 = v30 + v29;
            *(_WORD *)(v33 + 30) = v32;
            *(_WORD *)(v33 + 28) = *(_WORD *)(v31 + v29 + 28);
            if ((v32 & 1) != 0)
            {
              *(_QWORD *)(v30 + v29) = *(_QWORD *)(v31 + v29);
              if ((v32 & 2) != 0)
              {
LABEL_40:
                *(_OWORD *)(v30 + v29 + 8) = *(_OWORD *)(v31 + v29 + 8);
                if ((v32 & 4) == 0)
                  goto LABEL_37;
LABEL_36:
                *(_DWORD *)(v30 + v29 + 24) = *(_DWORD *)(v31 + v29 + 24);
                goto LABEL_37;
              }
            }
            else if ((v32 & 2) != 0)
            {
              goto LABEL_40;
            }
            if ((v32 & 4) != 0)
              goto LABEL_36;
LABEL_37:
            v29 += 32;
            if (!--v28)
              goto LABEL_42;
          }
        }
LABEL_43:
        if (a3 < 3)
          return 0;
        v34 = (v22 + v18 + v23 + v24);
        v35 = &v17[8 * v34];
        v38 = *((_WORD *)v35 + 8);
        v36 = v35 + 4;
        v37 = v38;
        v39 = &v21[8 * v34];
        *((_WORD *)v39 + 8) = v38;
        v40 = v39 + 4;
        if ((v38 & 1) != 0)
        {
          v42 = 0;
          v43 = 32 * v10 + 32 * v34 + a5 + 68;
          do
          {
            *(_DWORD *)(v43 + v42 * 4) = v36[v42 + 1];
            ++v42;
          }
          while (v42 != 9);
        }
        else
        {
          v41 = a5 + 32 * (v10 + v34);
          *(_DWORD *)(v41 + 100) = 0;
          *(_OWORD *)(v41 + 84) = 0u;
          *(_OWORD *)(v41 + 68) = 0u;
        }
        if ((v37 & 2) != 0)
        {
          *((_QWORD *)v40 + 5) = *((_QWORD *)v36 + 5);
          if ((v37 & 4) == 0)
          {
LABEL_60:
            if ((v37 & 8) == 0)
              goto LABEL_61;
            goto LABEL_68;
          }
        }
        else if ((v37 & 4) == 0)
        {
          goto LABEL_60;
        }
        *((_QWORD *)v40 + 6) = *((_QWORD *)v36 + 6);
        if ((v37 & 8) == 0)
        {
LABEL_61:
          if ((v37 & 0x10) == 0)
            goto LABEL_62;
          goto LABEL_69;
        }
LABEL_68:
        *((_BYTE *)v40 + 56) = *((_BYTE *)v36 + 56);
        if ((v37 & 0x10) == 0)
        {
LABEL_62:
          if ((v37 & 0x20) == 0)
          {
LABEL_64:
            result = 0;
            *((_QWORD *)v40 + 8) = 0;
            *(_QWORD *)((char *)v40 + 59) = 0;
            return result;
          }
LABEL_63:
          *((_BYTE *)v40 + 58) = *((_BYTE *)v36 + 58);
          goto LABEL_64;
        }
LABEL_69:
        *((_BYTE *)v40 + 57) = *((_BYTE *)v36 + 57);
        if ((v37 & 0x20) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
LABEL_72:
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
LABEL_52:
    *(_BYTE *)(a5 + 41) = *(_BYTE *)(a1 + 41);
    if (v11)
      goto LABEL_14;
    goto LABEL_72;
  }
  return result;
}

uint64_t FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader(__CFData **a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const __CFURL *v5;
  __CFDictionary *v6;
  __CFReadStream *v7;
  __CFReadStream *v8;
  CFPropertyListRef v9;
  CFTypeID v10;
  uint64_t i;
  __CFString *v12;
  const void *Value;
  uint64_t v14;
  const __CFString *v15;
  const __CFURL *v16;
  const __CFURL *v17;
  __CFBundle *v18;
  __CFBundle *v19;
  CFTypeRef ValueForInfoDictionaryKey;
  const void *v21;
  CFTypeRef v22;
  const __CFData *v23;
  const __CFData *v24;
  CFIndex Length;
  const UInt8 *BytePtr;
  __CFData *v27;
  __CFData *v28;
  uint64_t v29;
  __CFData **v31;
  const __CFURL *v32;
  CFErrorRef error;
  UInt8 bytes[4];
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  error = 0;
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v29 = FigSignalErrorAt();
    v24 = 0;
    v5 = 0;
    v4 = 0;
    Mutable = 0;
    v9 = 0;
    v6 = 0;
    goto LABEL_29;
  }
  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v24 = 0;
    v5 = 0;
    v4 = 0;
LABEL_48:
    v9 = 0;
    v6 = 0;
    goto LABEL_52;
  }
  v4 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v24 = 0;
    v5 = 0;
    goto LABEL_48;
  }
  FigCFDictionarySetInt32();
  v5 = CFURLCreateWithFileSystemPath(v2, CFSTR("/System/Library/CoreServices/SystemVersion.plist"), kCFURLPOSIXPathStyle, 0);
  if (!v5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v24 = 0;
    goto LABEL_48;
  }
  v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v6)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v24 = 0;
    v9 = 0;
    goto LABEL_52;
  }
  v7 = CFReadStreamCreateWithFile(v2, v5);
  if (!v7)
    goto LABEL_28;
  v8 = v7;
  if (!CFReadStreamOpen(v7))
  {
    CFRelease(v8);
    goto LABEL_28;
  }
  v9 = CFPropertyListCreateWithStream(v2, v8, 0, 0, 0, &error);
  CFReadStreamClose(v8);
  CFRelease(v8);
  if (!v9)
  {
LABEL_28:
    fig_log_get_emitter();
    FigDebugAssert3();
    CFErrorGetCode(error);
    v29 = FigSignalErrorAt();
    v24 = 0;
    v9 = 0;
    goto LABEL_29;
  }
  v31 = a1;
  v32 = v5;
  v10 = CFGetTypeID(v9);
  if (v10 == CFDictionaryGetTypeID())
  {
    for (i = 0; i != 3; ++i)
    {
      v12 = off_1E491E988[i];
      Value = CFDictionaryGetValue((CFDictionaryRef)v9, v12);
      if (Value)
        CFDictionaryAddValue(v6, v12, Value);
    }
  }
  if (CFDictionaryGetCount(Mutable) >= 1)
    CFDictionaryAddValue(Mutable, CFSTR("SystemVersion"), v6);
  v14 = 0;
  v15 = (const __CFString *)*MEMORY[0x1E0C9AE90];
  do
  {
    v16 = CFURLCreateWithFileSystemPath(v2, FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader_frameworkList[v14], kCFURLPOSIXPathStyle, 1u);
    if (!v16)
      goto LABEL_23;
    v17 = v16;
    v18 = CFBundleCreate(v2, v16);
    if (v18)
    {
      v19 = v18;
      ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(v18, v15);
      if (ValueForInfoDictionaryKey)
      {
        v21 = ValueForInfoDictionaryKey;
        v22 = CFRetain(ValueForInfoDictionaryKey);
        CFAutorelease(v22);
        CFRelease(v19);
        CFRelease(v17);
        CFDictionaryAddValue(v4, FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader_frameworkList[v14 + 1], v21);
        goto LABEL_23;
      }
      CFRelease(v19);
    }
    CFRelease(v17);
LABEL_23:
    v14 += 2;
  }
  while (v14 != 14);
  CFDictionaryAddValue(Mutable, CFSTR("FrameworkVersions"), v4);
  v23 = CFPropertyListCreateData(v2, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, &error);
  v24 = v23;
  if (v23)
  {
    Length = CFDataGetLength(v23);
    BytePtr = CFDataGetBytePtr(v24);
    *(_DWORD *)bytes = bswap32(Length + 8);
    v35 = 1986487907;
    v27 = CFDataCreateMutable(v2, Length + 8);
    v5 = v32;
    if (v27)
    {
      v28 = v27;
      CFDataAppendBytes(v27, bytes, 8);
      CFDataAppendBytes(v28, BytePtr, Length);
      v29 = 0;
      *v31 = v28;
      goto LABEL_29;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_52:
    v29 = 4294954510;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CFErrorGetCode(error);
    v29 = FigSignalErrorAt();
    v5 = v32;
  }
LABEL_29:
  if (error)
    CFRelease(error);
  if (v9)
    CFRelease(v9);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  if (Mutable)
    CFRelease(Mutable);
  if (v24)
    CFRelease(v24);
  return v29;
}

uint64_t BWInferenceSchedulerGraphDirectedEdgeSize()
{
  return 32;
}

void BWInferenceSchedulerGraphDirectedEdgeRelinquish(id *a1)
{

  free(a1);
}

uint64_t qtrmg_trackQueueNowBelowWaterLevelCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6;

  v6 = objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E0CC3CB8]);
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  objc_msgSend(*(id *)(a2 + 16), "addObject:", v6);
  MEMORY[0x1A858C5AC](*(_QWORD *)(a2 + 8));
  return pthread_mutex_unlock(*(pthread_mutex_t **)a2);
}

uint64_t qtrmg_metadataTrackWithIDShouldBePropagated(uint64_t a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, _QWORD, _QWORD, id *);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  CFArrayRef Identifiers;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  CFTypeRef cf;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  cf = 0;
  if (qtrmg_metadataTrackWithIDShouldBePropagated_onceToken != -1)
    dispatch_once(&qtrmg_metadataTrackWithIDShouldBePropagated_onceToken, &__block_literal_global_3);
  v4 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v4
    || v4(a1, a2, &cf, 0)
    || (FigBaseObject = FigTrackReaderGetFigBaseObject(),
        (v6 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48)) == 0)
    || v6(FigBaseObject, *MEMORY[0x1E0CC6190], *MEMORY[0x1E0C9AE00], &v27))
  {
    FigDebugAssert3();
    goto LABEL_26;
  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v7 = v27;
  v8 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
  if (!v8)
  {
LABEL_26:
    v17 = 1;
    goto LABEL_27;
  }
  v9 = v8;
  v10 = *(_QWORD *)v24;
  do
  {
    for (i = 0; i != v9; ++i)
    {
      if (*(_QWORD *)v24 != v10)
        objc_enumerationMutation(v7);
      Identifiers = CMMetadataFormatDescriptionGetIdentifiers(*(CMMetadataFormatDescriptionRef *)(*((_QWORD *)&v23 + 1)
                                                                                                + 8 * i));
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v13 = -[__CFArray countByEnumeratingWithState:objects:count:](Identifiers, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v20;
        while (2)
        {
          for (j = 0; j != v14; ++j)
          {
            if (*(_QWORD *)v20 != v15)
              objc_enumerationMutation(Identifiers);
            if ((objc_msgSend((id)qtrmg_metadataTrackWithIDShouldBePropagated_nonPropagatingMetadataIdentifiers, "containsObject:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * j)) & 1) != 0)
            {
              v17 = 0;
              goto LABEL_27;
            }
          }
          v14 = -[__CFArray countByEnumeratingWithState:objects:count:](Identifiers, "countByEnumeratingWithState:objects:count:", &v19, v29, 16);
          if (v14)
            continue;
          break;
        }
      }
    }
    v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
    v17 = 1;
  }
  while (v9);
LABEL_27:
  if (cf)
    CFRelease(cf);

  return v17;
}

uint64_t qtrmg_getTrackTimescale(uint64_t a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, id *);
  int v7;
  id v8;
  uint64_t v9;
  id v11;
  CFTypeRef cf;

  cf = 0;
  v4 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 56);
  if (!v4 || v4(a1, a2, &cf, 0))
  {
    FigDebugAssert3();
    return 0;
  }
  else
  {
    v11 = 0;
    FigBaseObject = FigTrackReaderGetFigBaseObject();
    v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      v7 = v6(FigBaseObject, *MEMORY[0x1E0CC6238], *MEMORY[0x1E0C9AE00], &v11);
      v8 = v11;
    }
    else
    {
      v8 = 0;
      v7 = -12782;
    }
    v9 = objc_msgSend(v8, "intValue");

    if (cf)
      CFRelease(cf);
    if (v7)
      FigDebugAssert3();
  }
  return v9;
}

uint64_t FigTrackReaderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t qtrmg_setupMetadataTrackReferences(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t (*v13)(uint64_t, _QWORD, void *);
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2 * objc_msgSend(a3, "count"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(a3);
        objc_msgSend(v6, "addObject:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i));
        objc_msgSend(v6, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
      }
      v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }
  if (objc_msgSend(v6, "count"))
  {
    v11 = objc_alloc(MEMORY[0x1E0C99D80]);
    v12 = (void *)objc_msgSend(v11, "initWithObjectsAndKeys:", v6, *MEMORY[0x1E0CC6268], 0);
    v13 = *(uint64_t (**)(uint64_t, _QWORD, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (!v13)
    {

      v14 = 4294954514;
LABEL_14:
      FigDebugAssert3();
      goto LABEL_15;
    }
    v14 = v13(a1, *MEMORY[0x1E0CC44D8], v12);

    if ((_DWORD)v14)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
  }
LABEL_15:

  return v14;
}

uint64_t FigAssetReaderStartExtractionForTimeRange(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t (*v6)(uint64_t, __int128 *, __int128 *);
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v6 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v6)
    return 4294954514;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  return v6(a1, &v10, &v8);
}

uint64_t qtrmg_trackIDForNextTrackBelowWater(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a2 = 0;
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  if (!objc_msgSend(*(id *)(a1 + 16), "count") && (v4 = FigConditionVariableWaitRelative(), (_DWORD)v4))
  {
    v5 = v4;
    FigDebugAssert3();
  }
  else
  {
    *a2 = (id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 16), "firstObject"), "copy");
    objc_msgSend(*(id *)(a1 + 16), "removeObjectAtIndex:", 0);
    v5 = 0;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return v5;
}

CMSampleBufferRef qtrmg_createTrimmedSampleBufferIfNeeded(void *a1, CMTime *a2)
{
  const __CFString *v4;
  const __CFDictionary *v5;
  const __CFString *v6;
  const __CFDictionary *v7;
  __int128 v8;
  __int128 v9;
  CMTime presentationTimeStamp;
  CMTime lhs;
  CMSampleTimingInfo v13;
  CMSampleTimingInfo timingInfoOut;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v18;
  CMSampleBufferRef sampleBufferOut;

  sampleBufferOut = 0;
  memset(&v18, 0, sizeof(v18));
  v4 = (const __CFString *)*MEMORY[0x1E0CA2728];
  v5 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
  CMTimeMakeFromDictionary(&v18, v5);
  if ((v18.flags & 1) != 0)
  {
    time1 = v18;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (!CMTimeCompare(&time1, &time2))
      v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  memset(&time1, 0, sizeof(time1));
  v6 = (const __CFString *)*MEMORY[0x1E0CA2720];
  v7 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2720], 0);
  CMTimeMakeFromDictionary(&time1, v7);
  if ((time1.flags & 1) != 0)
  {
    time2 = time1;
    rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (!CMTimeCompare(&time2, &rhs))
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  if (((v18.flags | time1.flags) & 1) != 0)
  {
    v8 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
    *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
    *(_OWORD *)&timingInfoOut.decodeTimeStamp.value = v8;
    timingInfoOut.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
    v9 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
    *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E90];
    *(_OWORD *)&timingInfoOut.duration.epoch = v9;
    if (CMSampleBufferGetSampleTimingInfo((CMSampleBufferRef)a1, 0, &timingInfoOut))
      goto LABEL_27;
    v13 = timingInfoOut;
    if ((v18.flags & 1) == 0)
    {
LABEL_14:
      time2 = v13.presentationTimeStamp;
      rhs = *a2;
      if (CMTimeCompare(&time2, &rhs) < 0 && (v13.duration.flags & 1) != 0)
      {
        if ((time1.flags & 1) != 0)
        {
          rhs = v13.duration;
          lhs = time1;
          CMTimeSubtract(&time2, &rhs, &lhs);
          v13.duration = time2;
        }
        time2 = v13.duration;
        rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&time2, &rhs) >= 1)
        {
          memset(&time2, 0, sizeof(time2));
          rhs = v13.presentationTimeStamp;
          lhs = v13.duration;
          CMTimeAdd(&time2, &rhs, &lhs);
          rhs = time2;
          lhs = *a2;
          if (CMTimeCompare(&rhs, &lhs) >= 1)
          {
            lhs = *a2;
            presentationTimeStamp = v13.presentationTimeStamp;
            CMTimeSubtract(&rhs, &lhs, &presentationTimeStamp);
            v13.duration = rhs;
          }
        }
      }
      if ((v13.duration.flags & 1) != 0)
      {
        time2 = v13.duration;
        rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&time2, &rhs) <= 0)
        {
          CMTimeMake(&time2, 1, v13.duration.timescale);
          v13.duration = time2;
        }
      }
      if (!CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMSampleBufferRef)a1, 1, &v13, &sampleBufferOut))
      {
        CMRemoveAttachment(sampleBufferOut, v4);
        CMRemoveAttachment(sampleBufferOut, v6);
        return sampleBufferOut;
      }
LABEL_27:
      FigDebugAssert3();
      return sampleBufferOut;
    }
    if ((v13.duration.flags & 1) == 0)
    {
LABEL_13:
      rhs = v13.presentationTimeStamp;
      lhs = v18;
      CMTimeAdd(&time2, &rhs, &lhs);
      v13.presentationTimeStamp = time2;
      goto LABEL_14;
    }
    time2 = v18;
    rhs = timingInfoOut.duration;
    if (CMTimeCompare(&time2, &rhs) < 0)
    {
      time2 = v13.duration;
      rhs = v18;
      CMTimeSubtract(&v13.duration, &time2, &rhs);
      goto LABEL_13;
    }
  }
  return sampleBufferOut;
}

uint64_t CMTimeCompareApproximately(CMTime *a1, CMTime *a2)
{
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime time1;

  if ((a1->flags & 0x1F) == 3 || (a2->flags & 0x1F) == 3)
  {
    memset(&time1, 0, sizeof(time1));
    lhs = *a1;
    rhs = *a2;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1, &time);
    CMTimeMake(&time2, 1, 1000000000);
    lhs = time1;
    if (CMTimeCompare(&lhs, &time2) < 1)
      return 0;
  }
  time1 = *a1;
  lhs = *a2;
  return CMTimeCompare(&time1, &lhs);
}

uint64_t qtrmg_writeStillImageTimeMetadataSample(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, uint64_t a5, int32_t a6)
{
  CMSampleBufferRef QuickTimeMovieStillImageTimeSampleBuffer;
  CMSampleBufferRef v9;
  uint64_t (*v10)(uint64_t, uint64_t, CMSampleBufferRef);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v15 = *a3;
  v16 = *((_QWORD *)a3 + 2);
  QuickTimeMovieStillImageTimeSampleBuffer = FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer((uint64_t)&v15, a4, a5, a6);
  if (!QuickTimeMovieStillImageTimeSampleBuffer)
  {
    FigDebugAssert3();
    return 0;
  }
  v9 = QuickTimeMovieStillImageTimeSampleBuffer;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CMSampleBufferRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v10)
  {
    v13 = 4294954514;
LABEL_9:
    FigDebugAssert3();
    goto LABEL_10;
  }
  v11 = v10(a1, a2, v9);
  if ((_DWORD)v11)
  {
    v13 = v11;
    goto LABEL_9;
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (!v12)
  {
    v13 = 4294954514;
    goto LABEL_9;
  }
  v13 = v12(a1, a2);
  if ((_DWORD)v13)
    goto LABEL_9;
LABEL_10:
  CFRelease(v9);
  return v13;
}

uint64_t qtrmg_writeVideoOrientationMetadataSamples(uint64_t a1, uint64_t a2, void *a3, CMTime *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  opaqueCMSampleBuffer *v12;
  uint64_t (*v13)(uint64_t, uint64_t, opaqueCMSampleBuffer *);
  int v14;
  CMAttachmentBearerRef v15;
  uint64_t (*v16)(uint64_t, uint64_t, CMAttachmentBearerRef);
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  CMSampleTimingInfo sampleTimingArray;
  CMAttachmentBearerRef target;
  CMTime v22;
  CMTime v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v25;
LABEL_3:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v25 != v10)
        objc_enumerationMutation(a3);
      v12 = *(opaqueCMSampleBuffer **)(*((_QWORD *)&v24 + 1) + 8 * v11);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 80);
      v14 = v13 ? v13(a1, a2, v12) : -12782;
      memset(&v23, 0, sizeof(v23));
      CMSampleBufferGetPresentationTimeStamp(&v23, v12);
      memset(&v22, 0, sizeof(v22));
      CMSampleBufferGetDecodeTimeStamp(&v22, v12);
      if (v14)
        goto LABEL_19;
      if (v9 == ++v11)
      {
        v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        if (v9)
          goto LABEL_3;
        break;
      }
    }
  }
  target = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E90];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 16);
  sampleTimingArray.presentationTimeStamp = *a4;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  if (CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&target))
  {
    goto LABEL_19;
  }
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2690], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
  v15 = target;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, CMAttachmentBearerRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 80);
  if (v16)
    v17 = v16(a1, a2, v15);
  else
    v17 = -12782;
  if (target)
    CFRelease(target);
  if (v17)
LABEL_19:
    FigDebugAssert3();
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v18)
    return v18(a1, a2);
  else
    return 4294954514;
}

uint64_t FigAssetReaderInvalidate()
{
  uint64_t FigBaseObject;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  FigBaseObject = FigAssetReaderGetFigBaseObject();
  if (!FigBaseObject)
    return 4294954516;
  v1 = FigBaseObject;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(v1);
  else
    return 4294954514;
}

uint64_t FigAssetWriterInvalidate()
{
  uint64_t FigBaseObject;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  FigBaseObject = FigAssetWriterGetFigBaseObject();
  if (!FigBaseObject)
    return 4294954516;
  v1 = FigBaseObject;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(v1);
  else
    return 4294954514;
}

uint64_t __qtrmg_metadataTrackWithIDShouldBePropagated_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D20]);
  result = objc_msgSend(v0, "initWithObjects:", *MEMORY[0x1E0CA4CC0], *MEMORY[0x1E0CA2590], 0);
  qtrmg_metadataTrackWithIDShouldBePropagated_nonPropagatingMetadataIdentifiers = result;
  return result;
}

uint64_t BWPhotoEncoderResolveEncodingSchemeForRequestedSettings(void *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a1, "rawOutputFormat")))
  {
    if (objc_msgSend(a1, "rawOutputFileCodec") == 1786276963)
      return 4;
    else
      return 3;
  }
  else if (objc_msgSend(a1, "outputFileType") == 1785096550)
  {
    return 1;
  }
  else if (objc_msgSend(a1, "outputFileType") == 1751476579
         || objc_msgSend(a1, "outputFileType") == 1751476582)
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t BWPhotoEncoderResolveEncodingSchemeForCompressedPhotoWithLinDNG(void *a1)
{
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a1, "rawOutputFormat"));
  if ((_DWORD)result)
  {
    if (objc_msgSend(a1, "outputFileType") == 1785096550)
    {
      return 1;
    }
    else if (objc_msgSend(a1, "outputFileType") == 1751476579
           || objc_msgSend(a1, "outputFileType") == 1751476582)
    {
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL BWPhotoEncoderIsLinDNGEncodingScheme(int a1)
{
  return (a1 - 3) < 2;
}

uint64_t BWPhotoEncoderCodecTypeForEncodingScheme(unsigned int a1)
{
  if (a1 > 4)
    return 1785750887;
  else
    return dword_1A3161ED4[a1];
}

BOOL BWPhotoEncoderShouldGenerateClientThumbnail(void *a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  int IsBayerRaw;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _BOOL8 result;

  if (objc_msgSend(a1, "payloadType") != 1)
    return 0;
  v5 = objc_msgSend(a1, "outputFormat") ? objc_msgSend(a1, "isOutputFormatCompressed") ^ 1 : 0;
  IsBayerRaw = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a1, "rawOutputFormat"));
  v7 = IsBayerRaw;
  if ((v5 & 1) == 0 && !IsBayerRaw)
    return 0;
  if (objc_msgSend(a1, "previewEnabled"))
  {
    v8 = objc_msgSend(a1, "previewWidth");
    v9 = objc_msgSend(a1, "previewHeight");
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if ((objc_msgSend(a1, "thumbnailEnabled") & v5) == 1)
  {
    v10 = objc_msgSend(a1, "thumbnailWidth");
    v11 = objc_msgSend(a1, "thumbnailHeight");
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if ((objc_msgSend(a1, "rawThumbnailEnabled") & v7) == 1)
  {
    v12 = objc_msgSend(a1, "rawThumbnailWidth");
    v13 = objc_msgSend(a1, "rawThumbnailHeight");
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (v11 * v10 <= v13 * v12)
    v14 = v12;
  else
    v14 = v10;
  if (v11 * v10 <= v13 * v12)
    v15 = v13;
  else
    v15 = v11;
  result = v14 * v15 > v9 * v8;
  if (a3)
  {
    if (v14 * v15 > v9 * v8)
    {
      *a3 = v14;
      a3[1] = v15;
      return 1;
    }
  }
  return result;
}

void BWPhotoEncoderApplyFinalCropToFaceObservationsForSampleBuffer(const void *a1)
{
  double FinalCropRectFromSource;
  double v3;
  double v4;
  double v5;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0))
  {
    FinalCropRectFromSource = FigCaptureMetadataUtilitiesGetFinalCropRectFromSource();
    BWUpdateLandmarksForStillImageCrop(a1, 802, FinalCropRectFromSource, v3, v4, v5);
  }
  else
  {
    FigDebugAssert3();
  }
}

void BWPhotoEncoderApplyCropRectOnSampleBufferMetadata(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CFTypeRef v10;
  void *v11;
  CVImageBufferRef ImageBuffer;
  __CVBuffer *v13;
  CFTypeRef v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  void *v20;
  double FinalCropRectFromSource;
  double v22;
  double v23;
  double v24;
  id v25;
  CGRect v26;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v10 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v10)
    goto LABEL_10;
  v11 = (void *)v10;
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  if (!CGRectIsEmpty(v26))
  {
    ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
    if (ImageBuffer)
    {
      v13 = ImageBuffer;
      v14 = CMGetAttachment(a1, CFSTR("StillImageSettings"), 0);
      if (v14)
      {
        v15 = (void *)v14;
        v16 = psn_pixelBufferDimensions(v13);
        v17 = objc_msgSend(v15, "outputWidth");
        v18 = v17 | (unint64_t)(objc_msgSend(v15, "outputHeight") << 32);
        FigCaptureMetadataUtilitiesUpdateMetadataForStillImageCrop(v11, v16, v18, a2, a3, a4, a5, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
        FigCaptureMetadataUtilitiesUpdateMetadataForNewFinalDimensions((uint64_t)v11, v16, v18);
        goto LABEL_6;
      }
    }
LABEL_10:
    FigDebugAssert3();
    v19 = 0;
    goto LABEL_9;
  }
LABEL_6:
  v19 = (void *)CMGetAttachment(a1, CFSTR("RawDNGDictionary"), 0);
  if (v19)
  {
    v20 = v19;
    FinalCropRectFromSource = FigCaptureMetadataUtilitiesGetFinalCropRectFromSource();
    v19 = BWCreateDNGDictionaryForZoom(v20, FinalCropRectFromSource, v22, v23, v24);
    if (v19)
    {
      v25 = v19;
      CMSetAttachment(a1, CFSTR("RawDNGDictionary"), v19, 1u);
      v19 = v25;
    }
  }
LABEL_9:

}

uint64_t BWPhotoEncoderScalePixelBuffer(__CVBuffer *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v19;
  uint64_t v20;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
  {
    v19 = objc_msgSend(a4, "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", CVPixelBufferGetPixelFormatType(a1), a2, a5, a3, 1);
    if ((_DWORD)v19)
    {
      v20 = v19;
    }
    else
    {
      v20 = objc_msgSend(a4, "convertPixelBuffer:cropRect:allocateOutputFromBufferPool:outputPixelBuffer:", a1, (int)a5 > 0, a6, a7, a8, a9, a10);
      if (!(_DWORD)v20)
        return v20;
    }
    FigDebugAssert3();
    return v20;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWPhotoEncoderThumbnailEnabled(int a1, void *a2, _DWORD *a3, _DWORD *a4, _QWORD *a5)
{
  char v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if ((a1 - 3) > 1)
  {
    v14 = objc_msgSend(a2, "thumbnailEnabled");
    v11 = objc_msgSend(a2, "thumbnailFormat");
    v12 = objc_msgSend(a2, "thumbnailWidth");
    v13 = objc_msgSend(a2, "thumbnailHeight");
    if (!v14)
      return 0;
  }
  else
  {
    v10 = objc_msgSend(a2, "rawThumbnailEnabled");
    v11 = objc_msgSend(a2, "rawThumbnailFormat");
    v12 = objc_msgSend(a2, "rawThumbnailWidth");
    v13 = objc_msgSend(a2, "rawThumbnailHeight");
    if ((v10 & 1) == 0)
      return 0;
  }
  v15 = v13;
  switch(a1)
  {
    case 1:
    case 3:
      goto LABEL_7;
    case 2:
      if (v11 == 1752589105)
        goto LABEL_11;
LABEL_7:
      v16 = 1785750887;
      break;
    case 4:
      if (v11 == 1785750887)
        goto LABEL_11;
      v16 = 1786276963;
      break;
    default:
      return 0;
  }
  if (v11 != v16)
    return 0;
LABEL_11:
  v17 = objc_msgSend(a2, "outputWidth");
  if (v12 >= v17)
    v18 = v17;
  else
    v18 = v12;
  v19 = objc_msgSend(a2, "outputHeight");
  if (v15 >= v19)
    v20 = v19;
  else
    v20 = v15;
  if (v18 <= v20)
    v21 = v20;
  else
    v21 = v18;
  if (a3)
    *a3 = v11;
  if (a4)
  {
    *a4 = v18;
    a4[1] = v20;
  }
  if (a5)
    *a5 = v21;
  return 1;
}

uint64_t BWPhotoEncoderContainerFormatForEncodingScheme(unsigned int a1)
{
  if (a1 > 4)
    return 1;
  else
    return dword_1A3161EE8[a1];
}

uint64_t BWPhotoEncoderFileTypeForEncodingScheme(unsigned int a1)
{
  if (a1 > 4)
    return 1785096550;
  else
    return dword_1A3161EFC[a1];
}

uint64_t BWPhotoEncoderIsLeftEyeFrameForCurrentRequest(void *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  unsigned __int8 v11;

  v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E50]), "intValue");
  v11 = 0;
  v3 = FigCaptureRotationDegreesAndMirroringFromExifOrientation(v2, (char *)&v11);
  v4 = v11;
  v5 = v3 | v11;
  v6 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  if (v4)
    v7 = v3 == 180;
  else
    v7 = 0;
  v8 = v7 || v5 == 0;
  v9 = (_QWORD *)MEMORY[0x1E0D05A18];
  if (v8)
    v9 = (_QWORD *)MEMORY[0x1E0D05A28];
  return objc_msgSend(v6, "isEqualToString:", *v9);
}

BOOL BWPhotoEncoderIsPrimaryFrame(int a1)
{
  return (a1 & 0x100000) == 0;
}

const __CFString *BWPhotoEncoderStringForPhotoEncoderNodeAttachedMediaPropagationMode(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Propagate Only");
  if (a1 == 1)
    v1 = CFSTR("Encode Only");
  if (a1 == 2)
    return CFSTR("Propagate And Encode");
  else
    return v1;
}

void *BWPhotoEncoderEncodingOptionsForAuxiliaryImage(unint64_t a1, unint64_t a2, void *a3, int a4, uint64_t a5)
{
  void *v6;
  int v10;
  id v11;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v13;
  CGRect v15;

  if (!a1 || !a2)
  {
    FigDebugAssert3();
    return 0;
  }
  v6 = a3;
  if (!a3)
    return v6;
  v10 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FB8]), "intValue");
  if (!(v10 | objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FA0]), "intValue")))return 0;
  v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v6 = v11;
  if (v11)
  {
    objc_msgSend(v11, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09458]);
    v15.size.width = (double)a1;
    v15.size.height = (double)a2;
    v15.origin.x = 0.0;
    v15.origin.y = 0.0;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v15);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D09430]);

    if (a4)
      objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E49F7FC8, *MEMORY[0x1E0D09400]);
    v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a5);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0D09438]);
  }
  else
  {
    FigDebugAssert3();
  }
  return v6;
}

uint64_t BWPhotoEncoderTonemapItemMetadataFromGainMapMetadata(void *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EB8], (uint64_t)CFSTR("TonemapBaseHDRHeadroom"), v4);
  if ((_DWORD)v5)
  {
    v13 = v5;
LABEL_18:
    FigDebugAssert3();
    return v13;
  }
  v6 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EA8], (uint64_t)CFSTR("TonemapAlternateHDRHeadroom"), v4);
  if ((_DWORD)v6)
  {
    v13 = v6;
    goto LABEL_18;
  }
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v8 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EE0], (uint64_t)CFSTR("GainMapMin"), v7);
  if ((_DWORD)v8)
  {
    v13 = v8;
    goto LABEL_18;
  }
  v9 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05ED0], (uint64_t)CFSTR("GainMapMax"), v7);
  if ((_DWORD)v9)
  {
    v13 = v9;
    goto LABEL_18;
  }
  v10 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EC8], (uint64_t)CFSTR("Gamma"), v7);
  if ((_DWORD)v10)
  {
    v13 = v10;
    goto LABEL_18;
  }
  v11 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EC0], (uint64_t)CFSTR("BaseOffset"), v7);
  if ((_DWORD)v11)
  {
    v13 = v11;
    goto LABEL_18;
  }
  v12 = BWPhotoEncoderAddKeyAsRationalToDict(a1, *MEMORY[0x1E0D05EB0], (uint64_t)CFSTR("AlternateOffset"), v7);
  if ((_DWORD)v12)
  {
    v13 = v12;
    goto LABEL_18;
  }
  v15[0] = v7;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 1), CFSTR("TonemapChannelMetadata"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("TonemapBaseColorIsWorkingColor"));
  v13 = 0;
  if (a2)
    *a2 = v4;
  return v13;
}

uint64_t BWPhotoEncoderAddKeyAsRationalToDict(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v8;
  double v9;
  uint64_t v10;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v8 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", a2);
  if (v8)
  {
    objc_msgSend(v8, "doubleValue");
    LODWORD(v10) = llround(v9 * 1000000.0);
    v12[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
    v12[1] = &unk_1E49F7FE0;
    objc_msgSend(a4, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 2), a3);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294950306;
  }
}

uint64_t BWPhotoEncoderCreateGTCColorSpaceFromGainMapMetadata(void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  void *v9;
  CFUUIDRef v10;
  CFUUIDRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  float v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  float v29;
  double v30;
  uint64_t v31;
  void *v32;
  void *v33;
  CFStringRef *v34;
  ColorSyncProfileRef v35;
  ColorSyncProfileRef v36;
  uint64_t CopyWithFlexGTC;
  const void *v38;
  const void *v39;
  uint64_t v40;

  if (!a1 || !a2)
    goto LABEL_28;
  v8 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (!v8)
    goto LABEL_29;
  v9 = (void *)v8;
  v10 = CFUUIDCreate(0);
  if (!v10)
    goto LABEL_29;
  v11 = v10;
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0C95558]);
  CFRelease(v11);
  v12 = *MEMORY[0x1E0D05EA8];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EA8]))
    goto LABEL_28;
  v13 = objc_msgSend(a1, "objectForKeyedSubscript:", v12);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0C95578]);
  v14 = *MEMORY[0x1E0D05EB8];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EB8]))
    goto LABEL_28;
  v15 = objc_msgSend(a1, "objectForKeyedSubscript:", v14);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v15, *MEMORY[0x1E0C95568]);
  v16 = *MEMORY[0x1E0D05EB0];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EB0]))
    goto LABEL_28;
  v17 = objc_msgSend(a1, "objectForKeyedSubscript:", v16);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0C95570]);
  v18 = *MEMORY[0x1E0D05EC0];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EC0]))
    goto LABEL_28;
  v19 = objc_msgSend(a1, "objectForKeyedSubscript:", v18);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v19, *MEMORY[0x1E0C95560]);
  v20 = *MEMORY[0x1E0D05EC8];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EC8]))
    goto LABEL_28;
  v21 = objc_msgSend(a1, "objectForKeyedSubscript:", v20);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0C95580]);
  v22 = *MEMORY[0x1E0D05EE0];
  if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EE0])
    || (v23 = (void *)MEMORY[0x1E0CB37E8],
        objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v22), "floatValue"),
        *(float *)&v25 = -v24,
        v26 = objc_msgSend(v23, "numberWithFloat:", v25),
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v26, *MEMORY[0x1E0C95590]),
        v27 = *MEMORY[0x1E0D05ED0],
        !objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05ED0])))
  {
LABEL_28:
    FigDebugAssert3();
    return 4294950306;
  }
  v28 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v27), "floatValue");
  *(float *)&v30 = -v29;
  v31 = objc_msgSend(v28, "numberWithFloat:", v30);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0C95588]);
  v32 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (!v32)
  {
LABEL_29:
    FigDebugAssert3();
    return 4294950305;
  }
  v33 = v32;
  objc_msgSend(v32, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0C955A8]);
  objc_msgSend(v33, "setObject:forKeyedSubscript:", a2, *MEMORY[0x1E0C955A0]);
  v34 = (CFStringRef *)MEMORY[0x1E0C95538];
  if (!a3)
    v34 = (CFStringRef *)MEMORY[0x1E0C95598];
  v35 = ColorSyncProfileCreateWithName(*v34);
  if (v35)
  {
    v36 = v35;
    CopyWithFlexGTC = ColorSyncProfileCreateCopyWithFlexGTC();
    if (CopyWithFlexGTC)
    {
      v38 = (const void *)CopyWithFlexGTC;
      v39 = (const void *)MEMORY[0x1A858B670](CopyWithFlexGTC, 0);
      if (v39)
      {
        if (a4)
        {
          v40 = 0;
          *a4 = v39;
        }
        else
        {
          CFRelease(v39);
          v40 = 0;
        }
      }
      else
      {
        FigDebugAssert3();
        v40 = FigSignalErrorAt();
      }
      CFRelease(v38);
    }
    else
    {
      FigDebugAssert3();
      v40 = FigSignalErrorAt();
    }
    CFRelease(v36);
    return v40;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

double BWPhotoEncoderDenormalizedZoomRectForAttachedMedia(opaqueCMSampleBuffer *a1, double a2, double a3)
{
  __int128 *v6;
  double x;
  __CVBuffer *ImageBuffer;
  __CVBuffer *v14;
  size_t Width;
  size_t Height;
  unint64_t v17;
  CGFloat y;
  CGFloat v19;
  CGFloat v20;
  __int128 v22;
  __int128 v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v6 = (__int128 *)MEMORY[0x1E0C9D628];
  x = *MEMORY[0x1E0C9D628];
  if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0))
  {
    v22 = *v6;
    v23 = v6[1];
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      v22 = 0uLL;
      __asm { FMOV            V0.2D, #1.0 }
      v23 = _Q0;
    }
    ImageBuffer = CMSampleBufferGetImageBuffer(a1);
    if (ImageBuffer)
    {
      v14 = ImageBuffer;
      Width = CVPixelBufferGetWidth(ImageBuffer);
      Height = CVPixelBufferGetHeight(v14);
      if (a3 != 0.0)
      {
        if (Width)
        {
          v17 = Height;
          if (Height)
          {
            v24.origin.x = FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRectForAttachedMedia(Width, Height, *(CGFloat *)&v22, *((CGFloat *)&v22 + 1), *(CGFloat *)&v23, *((CGFloat *)&v23 + 1), a2, a3);
            x = v24.origin.x;
            y = v24.origin.y;
            v19 = v24.size.width;
            v20 = v24.size.height;
            if (CGRectIsNull(v24))
            {
              FigDebugAssert3();
            }
            else
            {
              v25.origin.x = 0.0;
              v25.origin.y = 0.0;
              v25.size.width = (double)Width;
              v25.size.height = (double)v17;
              v27.origin.x = x;
              v27.origin.y = y;
              v27.size.width = v19;
              v27.size.height = v20;
              if (!CGRectContainsRect(v25, v27))
              {
                v28.origin.x = 0.0;
                v28.origin.y = 0.0;
                v26.origin.x = x;
                v26.origin.y = y;
                v26.size.width = v19;
                v26.size.height = v20;
                v28.size.width = (double)Width;
                v28.size.height = (double)v17;
                *(_QWORD *)&x = (unint64_t)CGRectIntersection(v26, v28);
              }
            }
          }
        }
      }
    }
  }
  return x;
}

uint64_t BWPhotoEncoderAddGainMapQualityControllerParametersToEncodingOptions(void *a1)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "setObject:forKeyedSubscript:", &unk_1E49F7FF8, *MEMORY[0x1E0D09418]);
  v4 = *MEMORY[0x1E0D09618];
  v5[0] = &unk_1E4A02DD0;
  v2 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", v2, *MEMORY[0x1E0D09410]);
}

BOOL BWPhotoEncoderIsHighGainImage(_BOOL8 result, int a2, int a3)
{
  BOOL v5;

  if (result)
  {
    if (FigCaptureComputeImageGainFromMetadata())
    {
      return 0;
    }
    else if ((a2 - 3) <= 1 && a3)
    {
      return 1.0 >= 16.0;
    }
    else
    {
      if (a2 == 10)
        v5 = 1.0 <= 32.0;
      else
        v5 = 1.0 <= 8.0;
      return !v5;
    }
  }
  return result;
}

uint64_t BWPhotoEncoderDefaultJPEGIndexedQTable(__CVBuffer *a1, _BOOL8 a2, int a3, int *a4, _BYTE *a5, int a6)
{
  _BOOL4 IsHighGainImage;
  size_t Width;
  size_t Height;
  int v12;
  int v15;
  int v16;

  IsHighGainImage = BWPhotoEncoderIsHighGainImage(a2, a3, a6);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (a4)
  {
    v12 = Height * Width > 0xF423FF || IsHighGainImage;
    if (Height >= 0xBD1 || Height <= 0x77F || Width - 3265 >= 0x3C0)
      v15 = 5;
    else
      v15 = 2;
    if (v12)
      v16 = 0;
    else
      v16 = v15;
    *a4 = v16;
  }
  if (a5)
    *a5 = IsHighGainImage;
  return 0;
}

__CFString *BWPhotoEncoderTranscodeQualityHintFromQuantizationTableIndex(unsigned int a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E491EA60[a1];
}

uint64_t BWPhotoEncoderAuxImageTypeForDepthPixelFormat(int a1)
{
  uint64_t v1;
  int v2;

  if (a1 <= 1717856626)
  {
    if (a1 == 825306677 || a1 == 825437747)
      return 0;
    v2 = 1717855600;
    goto LABEL_8;
  }
  v1 = 2;
  if (a1 > 1751411058)
  {
    if (a1 == 1751411059)
      return v1;
    return 0;
  }
  if (a1 != 1717856627)
  {
    v2 = 1751410032;
LABEL_8:
    if (a1 == v2)
      return 3;
    return 0;
  }
  return v1;
}

uint64_t BWPhotoEncoderFacePrintInferenceVersion()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  return BWInferenceVersionMakeMajor(2);
}

uint64_t BWPhotoEncoderSemanticSegmentationMatteURNForAttachedMediaKey(void *a1)
{
  uint64_t v2;

  if (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsHair")))
  {
    v2 = MEMORY[0x1E0D09288];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsSkin")))
  {
    v2 = MEMORY[0x1E0D09290];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsTeeth")))
  {
    v2 = MEMORY[0x1E0D092A0];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsGlasses")))
  {
    v2 = MEMORY[0x1E0D09280];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", 0x1E495B0B8))
    return *MEMORY[0x1E0D09298];
  else
    return 0;
}

uint64_t BWPhotoEncoderNodeAuxImageTypeForSemanticMatteAttachedMediaKey(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsHair")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsSkin")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsTeeth")) & 1) != 0)
    return 7;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsGlasses")) & 1) != 0)
    return 8;
  if (objc_msgSend(a1, "isEqualToString:", 0x1E495B0B8))
    return 9;
  return 0;
}

const __CFString *BWPhotoEncoderAttachedMediaKeyForSemanticSegmentationMatteURN(void *a1)
{
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D09288]))
    return CFSTR("PersonSemanticsHair");
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D09290]))
    return CFSTR("PersonSemanticsSkin");
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D092A0]))
    return CFSTR("PersonSemanticsTeeth");
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D09280]))
    return CFSTR("PersonSemanticsGlasses");
  return 0;
}

BOOL BWPhotoEncoderSupportsAddingAuxiliaryMetadataSeparately(int a1)
{
  return (a1 - 5) < 0xFFFFFFFE;
}

uint64_t BWPhotoEncoderSmartStyleCastIsSystemStyle(void *a1)
{
  if ((objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeStandard) & 1) != 0
    || (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeNeutral) & 1) != 0
    || (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeBlushWarm) & 1) != 0
    || (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeGoldWarm) & 1) != 0
    || (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeTanWarm) & 1) != 0
    || (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeCool) & 1) != 0)
  {
    return 1;
  }
  if ((objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeNoFilter) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeWarmAuthentic) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeColorful) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeEarthy) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeCloudCover) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeUrbanCool) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeDreamyHues) & 1) == 0
    && (objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeStarkBW) & 1) == 0)
  {
    objc_msgSend(a1, "isEqual:", FigSmartStyleCastTypeLongGray);
  }
  return 0;
}

float BWPhotoEncoderHEIFDeltaMapDownscalingFactor()
{
  return 1.4142;
}

float BWPhotoEncoderHEIFDeltaMapQuality(void *a1)
{
  int IsSystemStyle;
  float result;

  IsSystemStyle = BWPhotoEncoderSmartStyleCastIsSystemStyle((void *)objc_msgSend(a1, "cast"));
  result = 0.6;
  if (IsSystemStyle)
    return *(float *)"fff?";
  return result;
}

uint64_t BWPhotoEncoderDeltaMapPixelFormat(void *a1, int a2)
{
  unsigned int v4;
  void *v5;
  void *v6;
  unsigned int v7;

  v4 = 641230384;
  v5 = (void *)objc_msgSend(a1, "cast");
  if ((objc_msgSend(v5, "isEqual:", FigSmartStyleCastTypeStarkBW) & 1) != 0
    || (v6 = (void *)objc_msgSend(a1, "cast"), objc_msgSend(v6, "isEqual:", FigSmartStyleCastTypeLongGray)))
  {
    v4 = 641230388;
    v7 = 645424692;
  }
  else
  {
    v7 = 645424688;
  }
  if (a2 == 1)
    return v4;
  else
    return v7;
}

uint64_t BWPhotoEncoderDecompressStyledImageForDeltaMap(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 1) != 0)
    return 0;
  else
    return BWPhotoEncoderSmartStyleCastIsSystemStyle((void *)objc_msgSend(a1, "cast", v2, v3)) ^ 1;
}

double scaleHomography(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5)
{
  uint64_t v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  float32x4_t v13;
  _OWORD v15[2];
  __int128 v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;

  v5 = 0;
  v7 = a5;
  v16 = xmmword_1A3161F30;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v17 + v5 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(v15[v5])), a2, *(float32x2_t *)&v15[v5], 1), a3, (float32x4_t)v15[v5], 2);
    ++v5;
  }
  while (v5 != 3);
  v8 = 0;
  v9.i64[1] = 0;
  *(float *)&v6 = a4;
  v9.i64[0] = v6;
  v10.i32[0] = 0;
  v10.i64[1] = 0;
  v10.f32[1] = v7;
  v13 = v17;
  v11 = v18;
  v12 = v19;
  v13.i32[3] = 0;
  HIDWORD(v11) = 0;
  HIDWORD(v12) = 0;
  v15[0] = v13;
  v15[1] = v11;
  v16 = v12;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v17 + v8 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(v15[v8])), v10, *(float32x2_t *)&v15[v8], 1), (float32x4_t)xmmword_1A3161F30, (float32x4_t)v15[v8], 2);
    ++v8;
  }
  while (v8 != 3);
  if (fabsf(*((float *)&v19 + 2)) > 0.00000001)
    v13.i64[0] = vmulq_n_f32(v17, 1.0 / *((float *)&v19 + 2)).u64[0];
  return *(double *)v13.i64;
}

double bwsc_convertHomographyToPixelCoordinates(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  simd_float3 v15;
  simd_float3 v16;
  simd_float3 v17;
  simd_float3 v18;
  float32x4_t v20;
  float32x4_t v22;
  float32x4_t v24;
  __int128 v25;
  simd_float3 v26;
  simd_float3 v27;
  simd_float3 v28;
  simd_float3 v29;
  simd_float3 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  simd_float3x3 v34;
  simd_float3x3 v35;
  simd_float3x3 v36;
  simd_float3x3 v37;

  v34.columns[0] = (simd_float3)*MEMORY[0x1E0C83FE8];
  __asm { FMOV            V2.4S, #-1.0 }
  _Q2.i32[2] = *(_QWORD *)(MEMORY[0x1E0C83FE8] + 24);
  v25 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
  _Q2.i32[0] = v25;
  v27 = *(simd_float3 *)(MEMORY[0x1E0C83FE8] + 32);
  _Q2.i32[3] = HIDWORD(v25);
  v34.columns[1] = _Q2;
  v15 = *(simd_float3 *)MEMORY[0x1E0C83FE8];
  v16 = _Q2;
  __asm { FMOV            V2.4S, #1.0 }
  v34.columns[2].i32[0] = v27.i32[0];
  v34.columns[2].i64[1] = *(_QWORD *)(MEMORY[0x1E0C83FE8] + 40);
  v17 = v34.columns[2];
  v35 = __invert_f3(v34);
  v10 = 0;
  v28 = v15;
  v29 = v16;
  v30 = v17;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v10 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v10 * 4))), a3, *(float32x2_t *)&v28.f32[v10], 1), a4, *(float32x4_t *)((char *)&v28 + v10 * 4), 2);
    v10 += 4;
  }
  while (v10 != 12);
  v11 = 0;
  v28 = (simd_float3)v31;
  v29 = (simd_float3)v32;
  v30 = (simd_float3)v33;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v11 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v35.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v11 * 4))), (float32x4_t)v35.columns[1], *(float32x2_t *)&v28.f32[v11], 1), (float32x4_t)v35.columns[2], *(float32x4_t *)((char *)&v28 + v11 * 4), 2);
    v11 += 4;
  }
  while (v11 != 12);
  v22 = v32;
  v24 = v31;
  v36.columns[0].f32[0] = 1.0 / (float)(int)a1;
  v36.columns[0].i32[1] = v15.i32[1];
  v36.columns[0].i64[1] = v15.i64[1];
  v18 = v36.columns[0];
  v20 = v33;
  v36.columns[1].i32[0] = v25;
  v36.columns[1].f32[1] = 1.0 / (float)SHIDWORD(a1);
  v36.columns[1].i64[1] = *((_QWORD *)&v25 + 1);
  v26 = v36.columns[1];
  v36.columns[2] = v27;
  v37 = __invert_f3(v36);
  v12 = 0;
  v28 = v18;
  v29 = v26;
  v30 = v27;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v12 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v12 * 4))), v22, *(float32x2_t *)&v28.f32[v12], 1), v20, *(float32x4_t *)((char *)&v28 + v12 * 4), 2);
    v12 += 4;
  }
  while (v12 != 12);
  v13 = 0;
  v28 = (simd_float3)v31;
  v29 = (simd_float3)v32;
  v30 = (simd_float3)v33;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v31 + v13 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v37.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v28 + v13 * 4))), (float32x4_t)v37.columns[1], *(float32x2_t *)&v28.f32[v13], 1), (float32x4_t)v37.columns[2], *(float32x4_t *)((char *)&v28 + v13 * 4), 2);
    v13 += 4;
  }
  while (v13 != 12);
  return *(double *)v31.i64;
}

void *BWSemanticStyleFiltersForSemanticStyleAndFilterToCombine(void *a1, unsigned int a2, int a3, int a4, int a5, void *a6, uint64_t a7)
{
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const __CFString *v30;
  int v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __CFString *v37;
  CGColorSpaceRef v38;
  void *v39;
  const __CFString *v41;
  id obj;
  void *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (void *)MEMORY[0x1E0C9AA60];
  v13 = (void *)MEMORY[0x1E0C9DD90];
  v52[0] = *MEMORY[0x1E0C9DFC8];
  v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *MEMORY[0x1E0C9E080]);
  v52[1] = CFSTR("kCIContextIOSurfaceMemoryPoolID");
  v53[0] = v14;
  v53[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", -[BWMemoryPool poolIdentifier](+[BWMemoryPool sharedMemoryPool](BWMemoryPool, "sharedMemoryPool"), "poolIdentifier"));
  v15 = (void *)objc_msgSend(v13, "contextWithOptions:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v53, v52, 2));
  if (a3)
  {
    v16 = sscc_colorCubesForSemanticStyle(a1, a2, 1, a6);
    v17 = sscc_colorCubeFiltersForColorCubes(v16, a2, a4, a5);
    v18 = sscc_colorCubesForSemanticStyle(a1, a2, 0, a6);
    v19 = sscc_colorCubeFiltersForColorCubes(v18, a2, a4, a5);
    if (a7)
    {
      v17 = (void *)objc_msgSend(v17, "arrayByAddingObjectsFromArray:", a7);
      v19 = (void *)objc_msgSend(v19, "arrayByAddingObjectsFromArray:", a7);
    }
    v20 = objc_msgSend(v15, "createColorCubeDataForFilters:dimension:", v17, 32);
    v21 = objc_msgSend(v15, "createColorCubeDataForFilters:dimension:", v19, 32);
    if (a4)
      v22 = v20;
    else
      v22 = v21;
    if (a5)
      v23 = v22;
    else
      v23 = v20;
    v51 = v21;
    v24 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v51, 1);
    v50 = v23;
    v25 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v50, 1);
    v44 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    obj = v24;
    v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
    if (v26)
    {
      v27 = v26;
      v28 = 0;
      v29 = *(_QWORD *)v46;
      v30 = CFSTR("-forced-to-background");
      v31 = a4 | a5;
      if (a4)
        v30 = CFSTR("-mask-visualization");
      v41 = v30;
      v32 = (const __CFString *)*MEMORY[0x1E0C9D908];
      do
      {
        v33 = 0;
        v34 = v28;
        do
        {
          if (*(_QWORD *)v46 != v29)
            objc_enumerationMutation(obj);
          v35 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * v33);
          v36 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "colorCubesMixedWithMaskFilter");
          v37 = CFSTR("semanticStyleSceneType-unknown");
          if (a2 <= 3)
            v37 = off_1E491EA90[a2];
          if (v31)
            v37 = (__CFString *)-[__CFString stringByAppendingString:](v37, "stringByAppendingString:", v41);
          objc_msgSend(v36, "setName:", v37);
          objc_msgSend(v36, "setCubeDimension:", 8589936700.0);
          v38 = CGColorSpaceCreateWithName(v32);
          objc_msgSend(v36, "setColorSpace:", CFAutorelease(v38));
          objc_msgSend(v36, "setCube0Data:", v35);
          objc_msgSend(v36, "setCube1Data:", objc_msgSend(v25, "objectAtIndexedSubscript:", v34 + v33));
          objc_msgSend(v44, "addObject:", v36);
          ++v33;
        }
        while (v27 != v33);
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
        v28 = v34 + v33;
      }
      while (v27);
    }
  }
  else
  {
    v39 = sscc_colorCubesForSemanticStyle(a1, a2, 0, a6);
    v49 = objc_msgSend(v15, "createColorCubeDataForFilters:dimension:", sscc_colorCubeFiltersForColorCubes(v39, a2, a4, a5), 32);
    return sscc_colorCubeFiltersForColorCubes((void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v49, 1), a2, a4, a5);
  }
  return v44;
}

void *sscc_colorCubeFiltersForColorCubes(void *a1, unsigned int a2, int a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  uint64_t i;
  uint64_t v16;
  void *v17;
  __CFString *v18;
  CGColorSpaceRef v19;
  const __CFString *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    v12 = CFSTR("-forced-to-background");
    v13 = a3 | a4;
    if (a3)
      v12 = CFSTR("-mask-visualization");
    v21 = v12;
    v14 = (const __CFString *)*MEMORY[0x1E0C9D908];
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(a1);
        v16 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v17 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "colorCubeWithColorSpaceFilter");
        v18 = CFSTR("semanticStyleSceneType-unknown");
        if (a2 <= 3)
          v18 = off_1E491EA90[a2];
        if (v13)
          v18 = (__CFString *)-[__CFString stringByAppendingString:](v18, "stringByAppendingString:", v21);
        objc_msgSend(v17, "setName:", v18);
        objc_msgSend(v17, "setCubeDimension:", 8589936700.0);
        v19 = CGColorSpaceCreateWithName(v14);
        objc_msgSend(v17, "setColorSpace:", CFAutorelease(v19));
        objc_msgSend(v17, "setCubeData:", v16);
        objc_msgSend(v8, "addObject:", v17);
      }
      v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }
  return v8;
}

void *sscc_colorCubesForSemanticStyle(void *a1, int a2, int a3, void *a4)
{
  void *v8;
  float v9;
  float v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  float v15;
  float v16;
  uint64_t v17;
  double v18;
  float v19;
  void *v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  double v26;

  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_msgSend(a1, "mappedToneBias");
  v10 = v9;
  switch(a2)
  {
    case 0:
      v11 = (void *)MEMORY[0x1E0C99D50];
      if (v9 <= 0.0)
        v12 = &sBWSemanticStyleIndoorSceneToneBiasMinusOneCubeData;
      else
        v12 = &sBWSemanticStyleIndoorSceneToneBiasPlusOneCubeData;
      goto LABEL_14;
    case 1:
      v11 = (void *)MEMORY[0x1E0C99D50];
      if (v9 <= 0.0)
        v12 = &sBWSemanticStyleFoodSceneToneBiasMinusOneCubeData;
      else
        v12 = &sBWSemanticStyleFoodSceneToneBiasPlusOneCubeData;
      goto LABEL_14;
    case 2:
      v11 = (void *)MEMORY[0x1E0C99D50];
      if (v9 <= 0.0)
        v12 = &sBWSemanticStyleOutdoorSceneToneBiasMinusOneCubeData;
      else
        v12 = &sBWSemanticStyleOutdoorSceneToneBiasPlusOneCubeData;
      goto LABEL_14;
    case 3:
      v11 = (void *)MEMORY[0x1E0C99D50];
      if (v9 <= 0.0)
        v12 = &sBWSemanticStyleSunsetSceneToneBiasMinusOneCubeData;
      else
        v12 = &sBWSemanticStyleSunsetSceneToneBiasPlusOneCubeData;
LABEL_14:
      v13 = objc_msgSend(v11, "dataWithBytesNoCopy:length:freeWhenDone:", v12, 0x20000, 0);
      if (!v13)
        goto LABEL_15;
      goto LABEL_19;
    default:
LABEL_15:
      if (v10 <= 0.0)
        v14 = &sBWSemanticStyleIndoorSceneToneBiasMinusOneCubeData;
      else
        v14 = &sBWSemanticStyleIndoorSceneToneBiasPlusOneCubeData;
      v13 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v14, 0x20000, 0);
LABEL_19:
      v15 = fabsf(v10);
      if (a3)
        v16 = v15 * 0.2;
      else
        v16 = v15;
      v17 = objc_msgSend(a4, "identityColorLookupTable");
      *(float *)&v18 = v16;
      objc_msgSend(v8, "addObject:", objc_msgSend(a4, "interpolatedColorLookupTableFromTable:toTable:fractionComplete:", v17, v13, v18));
      objc_msgSend(a1, "mappedWarmthBias");
      if (v19 >= 0.0)
        v20 = &sBWSemanticStyleWarmthBiasPlusOneCubeData;
      else
        v20 = &sBWSemanticStyleWarmthBiasMinusOneCubeData;
      v21 = 0.4;
      if (v19 <= 0.0)
        v21 = 0.5;
      v22 = fabsf(v19);
      if (a3)
        v23 = v21;
      else
        v23 = 1.0;
      v24 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v20, 0x20000, 0);
      v25 = objc_msgSend(a4, "identityColorLookupTable");
      *(float *)&v26 = v22 * v23;
      objc_msgSend(v8, "addObject:", objc_msgSend(a4, "interpolatedColorLookupTableFromTable:toTable:fractionComplete:", v25, v24, v26));
      return v8;
  }
}

_DWORD *fdvc_buildForest(void *a1)
{
  _DWORD *v2;
  void *v3;
  uint64_t v4;
  int v5;
  size_t v6;
  unint64_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;

  v2 = malloc_type_malloc(0x20uLL, 0x10200406C4767B9uLL);
  v3 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("trees"));
  v2[6] = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("nFeatures")), "intValue");
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("threshold")), "doubleValue");
  *((_QWORD *)v2 + 2) = v4;
  v5 = objc_msgSend(v3, "count");
  v2[7] = v5;
  *(_QWORD *)v2 = malloc_type_malloc(16 * v5, 0x10200403A5D3213uLL);
  v6 = objc_msgSend(v3, "count");
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
      v8 += objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", v7++), "objectForKeyedSubscript:", CFSTR("nodes")), "count");
    while (objc_msgSend(v3, "count") > v7);
    v6 = 24 * v8;
  }
  v9 = (char *)malloc_type_malloc(v6, 0x10000401E56706BuLL);
  *((_QWORD *)v2 + 1) = v9;
  if (objc_msgSend(v3, "count"))
  {
    v10 = 0;
    do
    {
      v11 = (void *)objc_msgSend(v3, "objectAtIndexedSubscript:", v10);
      v12 = *(_QWORD *)v2 + 16 * v10;
      v13 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("nodes"));
      *(_DWORD *)(v12 + 8) = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("maxDepth")), "intValue");
      *(_QWORD *)v12 = v9;
      if (objc_msgSend(v13, "count"))
      {
        v14 = 0;
        v15 = v9 + 8;
        do
        {
          v16 = (void *)objc_msgSend(v13, "objectAtIndex:", v14);
          *((_DWORD *)v15 - 2) = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 0), "intValue");
          *((_DWORD *)v15 - 1) = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 1), "intValue");
          *(_DWORD *)v15 = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 2), "intValue");
          objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 3), "doubleValue");
          *((_QWORD *)v15 + 1) = v17;
          ++v14;
          v15 += 24;
        }
        while (objc_msgSend(v13, "count") > v14);
      }
      v9 += 24 * (int)objc_msgSend(v13, "count");
      ++v10;
    }
    while (objc_msgSend(v3, "count") > v10);
  }
  return v2;
}

void FigDisplayedVitalityClassify(void *a1, int a2, double *a3, double *a4, double *a5, double a6)
{
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t i;
  int v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  char *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  double v47;
  double *v48;
  double v49;
  char *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  size_t v54;
  double *v55;
  void *v56;
  double *v57;
  int v58;
  int v59;
  int v60;
  double *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  double *v66;
  uint64_t v67;
  double v68;
  double *v69;
  double v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  double v76;
  double *v77;
  double v78;
  size_t v79;
  double *v80;
  char *v81;
  void *v82;
  unint64_t v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  double *v88;
  uint64_t v89;
  int v90;
  double v91;
  int v92;
  double v93;
  uint64_t v94;
  double v95;
  double *v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  double *v100;
  uint64_t v101;
  double v102;
  double *v103;
  uint64_t v104;
  double *v105;
  uint64_t v106;
  double v107;
  double *v108;
  double v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  double v115;
  double *v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  double v129;
  double *v130;
  double v131;
  __int128 v132;
  __int128 v133;
  double *v134;
  double *v135;
  uint64_t v136;
  double *v137;
  double *v138;
  int v139;
  uint64_t v140;
  double *v141;
  uint64_t v142;
  double *v143;
  uint64_t v144;
  double *v145;
  uint64_t v146;
  double v147;
  double *v148;
  double v149;
  double *v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  double v154;
  unsigned int v155;
  uint64_t v156;
  double *v157;
  double v158;
  double v159;
  float v160;
  float v161;
  double v162;
  float v163;
  float v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double *v169;
  BOOL v170;
  int v171;
  uint64_t v172;
  double v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int *v179;
  uint64_t v180;
  double v181;
  double v182;
  int *v183;
  double v184;
  _QWORD v185[8];
  double *v186;
  double *v187;
  void *v188;
  uint64_t v189;
  double *v190;
  double *v191;
  double *v192;
  void *v193;
  uint64_t v194;
  void *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  int __pattern4;
  int v201;
  int v202;
  _DWORD v203[4];
  __int16 v204;
  _BYTE v205[128];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD v220[4];
  uint64_t v221;
  _QWORD v222[9];
  _QWORD v223[9];
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;

  v191 = a4;
  v248 = *MEMORY[0x1E0C80C00];
  if (FigDisplayedVitalityClassifierLoadModel_once != -1)
    dispatch_once(&FigDisplayedVitalityClassifierLoadModel_once, &__block_literal_global_5);
  v11 = FigDisplayedVitalityClassifierLoadModel_aForestClassifier;
  if (objc_msgSend(a1, "count"))
  {
    v192 = a3;
    v190 = a5;
    v12 = 72 * objc_msgSend(a1, "count");
    v195 = malloc_type_malloc(v12, 0x9950293BuLL);
    v193 = malloc_type_malloc(v12, 0xEA285674uLL);
    v196 = 0u;
    v197 = 0u;
    v198 = 0u;
    v199 = 0u;
    v13 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v196, v205, 16);
    if (v13)
    {
      v14 = v13;
      v15 = 0;
      v16 = *(_QWORD *)v197;
      do
      {
        v17 = 0;
        v18 = (char *)v195 + 72 * v15;
        do
        {
          if (*(_QWORD *)v197 != v16)
            objc_enumerationMutation(a1);
          v19 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * v17);
          if ((unint64_t)objc_msgSend(v19, "length") <= 0x23)
            FigDisplayedVitalityClassify_cold_2();
          v20 = objc_msgSend(v19, "bytes");
          for (i = 0; i != 9; ++i)
            *(double *)&v18[8 * i] = *(float *)(v20 + 4 * i);
          ++v15;
          ++v17;
          v18 += 72;
        }
        while (v17 != v14);
        v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v196, v205, 16);
      }
      while (v14);
    }
    v189 = v11;
    v22 = objc_msgSend(a1, "count");
    v23 = v193;
    *(_QWORD *)v193 = 0x3FF0000000000000;
    v23[1] = 0;
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = 0x3FF0000000000000;
    v23[5] = 0;
    v23[6] = 0;
    v23[7] = 0;
    v23[8] = 0x3FF0000000000000;
    if (v22 >= 2)
    {
      v24 = 1;
      v25 = 9;
      v26 = (char *)v195;
      do
      {
        v27 = (double *)((char *)v195 + 8 * v25);
        v28 = v27[7];
        v29 = v27[8];
        v30 = v27[4];
        v31 = v27[5];
        v32 = v30 * v29 - v28 * v31;
        v224 = v32;
        v33 = v27[1];
        v34 = v27[2];
        v35 = v28 * v34 - v33 * v29;
        v36 = v33 * v31 - v30 * v34;
        v225 = v35;
        v226 = v36;
        v37 = *v27;
        v38 = v27[3];
        v39 = v27[6];
        v40 = v35 * v38 + *v27 * v32 + v39 * v36;
        if (v40 >= 2.22044605e-16 || v40 <= -2.22044605e-16)
        {
          v224 = v32 / v40;
          v225 = v35 / v40;
          v226 = v36 / v40;
          v227 = (v39 * v31 - v38 * v29) / v40;
          v228 = (v37 * v29 - v39 * v34) / v40;
          v229 = (v38 * v34 - v37 * v31) / v40;
          v230 = (v38 * v28 - v39 * v30) / v40;
          v231 = (v39 * v33 - v37 * v28) / v40;
          v232 = (v37 * v30 - v38 * v33) / v40;
        }
        else
        {
          printf("FAILED: Matrix inversion.");
        }
        v42 = 0;
        v43 = v26;
        do
        {
          v44 = 0;
          v45 = &v224;
          do
          {
            v46 = 0;
            v47 = 0.0;
            v48 = v45;
            do
            {
              v49 = *v48;
              v48 += 3;
              v47 = v47 + *(double *)&v43[v46] * v49;
              v46 += 8;
            }
            while (v46 != 24);
            *((double *)&v206 + 3 * v42 + v44++) = v47;
            ++v45;
          }
          while (v44 != 3);
          ++v42;
          v43 += 24;
        }
        while (v42 != 3);
        v50 = (char *)v193 + 8 * v25;
        *((_OWORD *)v50 + 1) = v207;
        *((_OWORD *)v50 + 2) = v208;
        *((_OWORD *)v50 + 3) = v209;
        *((_QWORD *)v50 + 8) = v210;
        *(_OWORD *)v50 = v206;
        v25 += 9;
        ++v24;
        v26 += 72;
      }
      while (v24 != v22);
    }
    v51 = objc_msgSend(a1, "count");
    v52 = v51;
    __pattern4 = 2143289344;
    if (v51)
    {
      v194 = v51;
      v53 = 8 * v51;
      v54 = 72 * v51;
      v55 = (double *)malloc_type_malloc(v54, 0xC6F7D147uLL);
      v56 = malloc_type_malloc(v54, 0xE762A6C2uLL);
      memset_pattern4(v56, &__pattern4, v54);
      v57 = (double *)malloc_type_malloc(8 * v52, 0x100004000313F17uLL);
      v224 = 1.0;
      v225 = 0.0;
      v227 = 0.0;
      v228 = 1.0;
      v231 = 0.0;
      v230 = 0.0;
      v232 = 1.0;
      v243 = 0x3FF0000000000000uLL;
      v244 = 0uLL;
      *(_QWORD *)&v245 = 0x3FF0000000000000;
      v246 = 0uLL;
      v247 = 0x3FF0000000000000;
      if (a2 >= 0)
        v58 = a2;
      else
        v58 = a2 + 1;
      v226 = (double)(v58 >> 1);
      if ((int)v192 >= 0)
        v59 = (int)v192;
      else
        v59 = (_DWORD)v192 + 1;
      v229 = (double)(v59 >> 1);
      *(double *)&v244 = (double)-(v58 >> 1);
      *((double *)&v245 + 1) = (double)-(v59 >> 1);
      if (v52 >= 1)
      {
        v60 = 0;
        v61 = v55;
        v62 = (char *)v193;
        do
        {
          v63 = 0;
          v64 = v62;
          do
          {
            v65 = 0;
            v66 = &v224;
            do
            {
              v67 = 0;
              v68 = 0.0;
              v69 = v66;
              do
              {
                v70 = *v69;
                v69 += 3;
                v68 = v68 + *(double *)&v64[v67] * v70;
                v67 += 8;
              }
              while (v67 != 24);
              *((double *)&v206 + 3 * v63 + v65++) = v68;
              ++v66;
            }
            while (v65 != 3);
            ++v63;
            v64 += 24;
          }
          while (v63 != 3);
          v71 = 0;
          v240 = v208;
          v241 = v209;
          v242 = v210;
          v239 = v207;
          v238 = v206;
          v72 = &v243;
          do
          {
            v73 = 0;
            v74 = &v238;
            do
            {
              v75 = 0;
              v76 = 0.0;
              v77 = (double *)v74;
              do
              {
                v78 = *v77;
                v77 += 3;
                v76 = v76 + *(double *)((char *)v72 + v75) * v78;
                v75 += 8;
              }
              while (v75 != 24);
              *((double *)&v206 + 3 * v71 + v73++) = v76;
              v74 = (__int128 *)((char *)v74 + 8);
            }
            while (v73 != 3);
            ++v71;
            v72 = (__int128 *)((char *)v72 + 24);
          }
          while (v71 != 3);
          *((_OWORD *)v61 + 1) = v207;
          *((_OWORD *)v61 + 2) = v208;
          *((_OWORD *)v61 + 3) = v209;
          *((_QWORD *)v61 + 8) = v210;
          *(_OWORD *)v61 = v206;
          v61 += 9;
          v62 += 72;
          ++v60;
        }
        while (v60 != v52);
      }
      v186 = (double *)v56;
      v79 = 72 * v52;
      v80 = (double *)malloc_type_malloc(v79, 0x100004000313F17uLL);
      v81 = (char *)malloc_type_malloc(v79, 0x100004000313F17uLL);
      v82 = v81;
      if (v52 >= 1)
      {
        v83 = 0;
        v84 = v55 + 5;
        do
        {
          v85 = *(v84 - 3) * v84[1];
          if (v85 >= 0.0 || (v86 = *v84 * v84[2], v86 >= 0.0))
          {
            v57[v83 / 8] = -1.0;
            *(_QWORD *)&v81[v83] = 0xBFF0000000000000;
            v87 = -1.0;
            v88 = v80;
          }
          else
          {
            v57[v83 / 8] = 0.0;
            v80[v83 / 8] = v85 + v86;
            v87 = *v84 * *v84 + *(v84 - 3) * *(v84 - 3);
            v88 = (double *)v81;
          }
          v88[v83 / 8] = v87;
          v83 += 8;
          v84 += 9;
        }
        while (v53 != v83);
        v89 = 0;
        v90 = -1;
        do
        {
          if (v57[v89] >= 0.0)
          {
            v91 = 0.0;
            v92 = -3;
            v93 = 0.0;
            do
            {
              v94 = (v89 + v92);
              if ((int)v89 + v92 >= 0 && (int)v94 < v52)
              {
                v95 = *(double *)&v81[8 * v94];
                if (v95 >= 0.0)
                {
                  v93 = v93 + v80[v94];
                  v91 = v91 + v95;
                }
              }
              ++v92;
            }
            while (v92 != 4);
            v57[v89] = sqrt(-v91 / v93);
            if (v90 < 0)
              v90 = v89;
          }
          else if (v89)
          {
            v57[v89] = v57[(v89 - 1)];
          }
          ++v89;
        }
        while (v89 != v194);
        if (v90 >= 1)
        {
          v96 = v57;
          v97 = v90;
          do
          {
            *v96++ = v57[v90];
            --v97;
          }
          while (v97);
        }
      }
      v192 = v57;
      v187 = v55;
      free(v80);
      free(v82);
      v185[7] = v185;
      v203[2] = 3;
      v203[3] = 3;
      v203[0] = 3;
      v203[1] = 3;
      v201 = 100;
      v202 = 0;
      v242 = 0;
      v241 = 0u;
      v240 = 0u;
      v239 = 0u;
      v238 = 0u;
      v237 = 0;
      v236 = 0u;
      v235 = 0u;
      v234 = 0u;
      v233 = 0u;
      v204 = 65;
      v223[0] = 0x3FF0000000000000;
      memset(&v223[1], 0, 24);
      v223[4] = 0x3FF0000000000000;
      memset(&v223[5], 0, 24);
      v222[0] = 0x3FF0000000000000;
      memset(&v222[1], 0, 24);
      v222[4] = 0x3FF0000000000000;
      memset(&v222[5], 0, 24);
      v188 = malloc_type_malloc(v79, 0x100004000313F17uLL);
      if (v52 >= 1)
      {
        v98 = 0;
        v100 = v187;
        v99 = v188;
        do
        {
          v101 = 0;
          v102 = v192[v98];
          *(double *)&v222[8] = 1.0 / v102;
          *(double *)&v223[8] = v102;
          v103 = v100;
          do
          {
            v104 = 0;
            v105 = (double *)v222;
            do
            {
              v106 = 0;
              v107 = 0.0;
              v108 = v105;
              do
              {
                v109 = *v108;
                v108 += 3;
                v107 = v107 + v103[v106++] * v109;
              }
              while (v106 != 3);
              *((double *)&v243 + 3 * v101 + v104++) = v107;
              ++v105;
            }
            while (v104 != 3);
            ++v101;
            v103 += 3;
          }
          while (v101 != 3);
          v110 = 0;
          v220[2] = v245;
          v220[3] = v246;
          v221 = v247;
          v220[1] = v244;
          v220[0] = v243;
          v111 = v223;
          do
          {
            v112 = 0;
            v113 = v220;
            do
            {
              v114 = 0;
              v115 = 0.0;
              v116 = (double *)v113;
              do
              {
                v117 = *v116;
                v116 += 3;
                v115 = v115 + *(double *)&v111[v114++] * v117;
              }
              while (v114 != 3);
              *((double *)&v243 + 3 * v110 + v112++) = v115;
              v113 = (_OWORD *)((char *)v113 + 8);
            }
            while (v112 != 3);
            ++v110;
            v111 += 3;
          }
          while (v110 != 3);
          v211 = v243;
          v215 = v245;
          v212 = *((_QWORD *)&v244 + 1);
          v213 = v246;
          v214 = *((_QWORD *)&v243 + 1);
          v216 = *((_QWORD *)&v246 + 1);
          v219 = v247;
          v217 = v244;
          v218 = *((_QWORD *)&v245 + 1);
          v239 = 0uLL;
          v238 = 0x3FF0000000000000uLL;
          v240 = 0x3FF0000000000000uLL;
          v241 = 0uLL;
          v242 = 0x3FF0000000000000;
          v234 = 0uLL;
          v233 = 0x3FF0000000000000uLL;
          v235 = 0x3FF0000000000000uLL;
          v236 = 0uLL;
          v237 = 0x3FF0000000000000;
          v185[5] = &v202;
          v185[4] = &v224;
          v185[3] = &v201;
          v185[2] = &v206;
          v185[1] = v203;
          v185[0] = &v233;
          dgesdd_NEWLAPACK();
          if (v202)
          {
            v239 = 0uLL;
            v238 = 0x3FF0000000000000uLL;
            v240 = 0x3FF0000000000000uLL;
            v241 = 0uLL;
            v242 = 0x3FF0000000000000;
            v234 = 0uLL;
            v233 = 0x3FF0000000000000uLL;
            v235 = 0x3FF0000000000000uLL;
            v236 = 0uLL;
            v237 = 0x3FF0000000000000;
          }
          else
          {
            v118 = *((_QWORD *)&v238 + 1);
            v119 = v239;
            v120 = *((_QWORD *)&v240 + 1);
            *((_QWORD *)&v238 + 1) = *((_QWORD *)&v239 + 1);
            *(_QWORD *)&v239 = v241;
            *((_QWORD *)&v239 + 1) = v118;
            *((_QWORD *)&v240 + 1) = *((_QWORD *)&v241 + 1);
            *(_QWORD *)&v241 = v119;
            *((_QWORD *)&v241 + 1) = v120;
            v121 = *((_QWORD *)&v233 + 1);
            v122 = v234;
            v123 = *((_QWORD *)&v235 + 1);
            *((_QWORD *)&v233 + 1) = *((_QWORD *)&v234 + 1);
            *(_QWORD *)&v234 = v236;
            *((_QWORD *)&v234 + 1) = v121;
            *((_QWORD *)&v235 + 1) = *((_QWORD *)&v236 + 1);
            *(_QWORD *)&v236 = v122;
            *((_QWORD *)&v236 + 1) = v123;
          }
          v124 = 0;
          v125 = &v238;
          do
          {
            v126 = 0;
            v127 = &v233;
            do
            {
              v128 = 0;
              v129 = 0.0;
              v130 = (double *)v127;
              do
              {
                v131 = *v130;
                v130 += 3;
                v129 = v129 + *(double *)((char *)v125 + v128) * v131;
                v128 += 8;
              }
              while (v128 != 24);
              *((double *)&v243 + 3 * v124 + v126++) = v129;
              v127 = (__int128 *)((char *)v127 + 8);
            }
            while (v126 != 3);
            ++v124;
            v125 = (__int128 *)((char *)v125 + 24);
          }
          while (v124 != 3);
          v132 = v246;
          v99[2] = v245;
          v99[3] = v132;
          *((_QWORD *)v99 + 8) = v247;
          v133 = v244;
          *v99 = v243;
          v99[1] = v133;
          v99 = (_OWORD *)((char *)v99 + 72);
          v100 += 9;
          ++v98;
        }
        while (v98 != v194);
      }
      v135 = v186;
      v134 = v187;
      *v186 = 1.0;
      v135[1] = 0.0;
      v135[2] = 0.0;
      v135[3] = 0.0;
      v135[4] = 1.0;
      v135[5] = 0.0;
      v135[6] = 0.0;
      v135[7] = 0.0;
      v135[8] = 1.0;
      v136 = v189;
      v137 = v192;
      if (v52 > 1)
      {
        v138 = (double *)((char *)v188 + 72);
        v139 = 1;
        v140 = 9;
        v141 = v135;
        do
        {
          v142 = 0;
          v143 = v141;
          do
          {
            v144 = 0;
            v145 = v138;
            do
            {
              v146 = 0;
              v147 = 0.0;
              v148 = v145;
              do
              {
                v149 = *v148;
                v148 += 3;
                v147 = v147 + v143[v146++] * v149;
              }
              while (v146 != 3);
              *((double *)&v243 + 3 * v142 + v144++) = v147;
              ++v145;
            }
            while (v144 != 3);
            ++v142;
            v143 += 3;
          }
          while (v142 != 3);
          v150 = &v135[v140];
          v151 = v246;
          *((_OWORD *)v150 + 2) = v245;
          *((_OWORD *)v150 + 3) = v151;
          *((_QWORD *)v150 + 8) = v247;
          v152 = v244;
          *(_OWORD *)v150 = v243;
          *((_OWORD *)v150 + 1) = v152;
          v140 += 9;
          ++v139;
          v138 += 9;
          v141 += 9;
        }
        while (v139 != v52);
      }
      free(v188);
      v153 = 0;
      v154 = *v137;
      v155 = v52 <= 1 ? 1 : v52;
      v156 = 8 * v155;
      v157 = v135 + 8;
      v158 = *v137;
      v159 = -1.0;
      do
      {
        v160 = *(v157 - 8);
        v161 = *(v157 - 4);
        v162 = *v157;
        v157 += 9;
        v163 = v162;
        v164 = ((float)((float)(v160 + v161) + v163) + -1.0) * 0.5;
        v165 = acosf(fmaxf(fminf(v164, 1.0), -1.0));
        if (v159 < v165)
          v159 = v165;
        v166 = v137[v153 / 8];
        if (v158 > v166)
          v158 = v137[v153 / 8];
        if (v154 < v166)
          v154 = v137[v153 / 8];
        v153 += 8;
      }
      while (v156 != v153);
      v167 = v159 * 57.2957795;
      v168 = v154 - v158;
      free(v134);
      free(v135);
      free(v137);
    }
    else
    {
      v167 = 0.0;
      v168 = 0.0;
      v136 = v189;
    }
    free(v193);
    free(v195);
    *(double *)&v206 = v167;
    *((double *)&v206 + 1) = v168;
    *(double *)&v207 = a6;
    v169 = v190;
    if (v52)
    {
      if (v191)
        *v191 = v167;
      if (v169)
        *v169 = v168;
      if (v136)
      {
        if (*(_DWORD *)(v136 + 24) != 3)
          FigDisplayedVitalityClassify_cold_1();
        if (a6 >= 0.1 || (v167 < 1.0 ? (v170 = v168 < 10.0) : (v170 = 0), !v170))
        {
          v171 = *(_DWORD *)(v136 + 28);
          if (v171 >= 1)
          {
            v172 = 0;
            v173 = 0.0;
            do
            {
              v174 = *(_DWORD *)(*(_QWORD *)v136 + 16 * v172 + 8);
              if (v174 < 0)
              {
LABEL_141:
                NSLog(CFSTR("Programming error in tree classifier. Exceeded maximum depth."));
                v171 = *(_DWORD *)(v136 + 28);
                v184 = -1.0;
              }
              else
              {
                v175 = 0;
                v176 = *(_QWORD *)(*(_QWORD *)v136 + 16 * v172);
                v177 = v174 + 1;
                while (1)
                {
                  v178 = v175;
                  v179 = (int *)(v176 + 24 * v175);
                  if (*v179 < 0 && (*(_DWORD *)(v176 + 24 * v178 + 4) & 0x80000000) != 0)
                    break;
                  v180 = v176 + 24 * v178;
                  v181 = *((double *)&v206 + *(int *)(v180 + 8));
                  v182 = *(double *)(v180 + 16);
                  v183 = (int *)(v180 + 4);
                  if (v181 > v182)
                    v179 = v183;
                  v175 = *v179;
                  if (--v177 <= 0)
                    goto LABEL_141;
                }
                v184 = *(double *)(v176 + 24 * v178 + 16);
              }
              v173 = v173 + v184;
              ++v172;
            }
            while (v172 < v171);
          }
        }
      }
    }
  }
}

void *FigCaptureMultiStreamFormatGetDescriptionString(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  const __CFString *v13;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED0]), "intValue");
  v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC8]), "intValue");
  v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
  objc_msgSend(v2, "appendFormat:", CFSTR("Sensor: %i x %i"), v3, v4);
  if (v5)
  {
    v6 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorHorizontal")), "intValue");
    if (v6)
      v7 = v6;
    else
      v7 = 2;
    v8 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorVertical")), "intValue");
    if (v8)
      v9 = v8;
    else
      v9 = 2;
    objc_msgSend(v2, "appendFormat:", CFSTR(" (Binned) (%d x %d)"), v7, v9);
  }
  v10 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E80]), "intValue");
  v11 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E78]), "intValue");
  if ((_DWORD)v10)
    v12 = (_DWORD)v11 == 0;
  else
    v12 = 1;
  if (v12)
    objc_msgSend(v2, "appendString:", CFSTR(", FES: Disabled"));
  else
    objc_msgSend(v2, "appendFormat:", CFSTR(", FES: %i x %i"), v10, v11);
  objc_msgSend(v2, "appendFormat:", CFSTR(", %i-%ifps"), objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "intValue"), objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue"));
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC0]), "intValue"))
    objc_msgSend(v2, "appendString:", CFSTR(", *HDR*"));
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Experimental")), "BOOLValue"))
    objc_msgSend(v2, "appendString:", CFSTR(", *EXP*"));
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED8]), "BOOLValue"))
    v13 = CFSTR(", *SBS ON*");
  else
    v13 = CFSTR(", *SBS OFF*");
  objc_msgSend(v2, "appendString:", v13);
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EA8]), "BOOLValue"))
    objc_msgSend(v2, "appendFormat:", CFSTR(", *SIFR ON, binning factor %d*"), objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EA0]), "intValue"));
  else
    objc_msgSend(v2, "appendString:", CFSTR(", *SIFR OFF*"));
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E98]), "intValue") == 1)
    objc_msgSend(v2, "appendString:", CFSTR(", *Quadra SensorRaw*"));
  return v2;
}

void *FigCaptureMultiStreamFormatsArrayGetDescriptionString(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "appendFormat:", CFSTR("\t%i: %@\n"), v5 + v7, FigCaptureMultiStreamFormatGetDescriptionString(*(void **)(*((_QWORD *)&v9 + 1) + 8 * v7)));
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v5 = (v5 + v7);
    }
    while (v4);
  }
  return v2;
}

void *FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets()
{
  return &unk_1E4A001E8;
}

uint64_t noiseReductionGetAlgorithmFromTuningOptions(CFDictionaryRef theDict)
{
  uint64_t result;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  unsigned int valuePtr;

  result = 1;
  valuePtr = 1;
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("NoiseReductionMethod"));
    if (Value && (v4 = Value, v5 = CFGetTypeID(Value), v5 == CFNumberGetTypeID()))
    {
      CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL noiseReductionRequiresOutputSampleBuffer(const __CFDictionary *a1)
{
  return noiseReductionGetAlgorithmFromTuningOptions(a1) > 1;
}

_QWORD *noiseReductionContextCreate(int a1, int a2)
{
  return noiseReductionContextCreateWithOptions(a1, a2, 0);
}

_QWORD *noiseReductionContextCreateWithOptions(int a1, int a2, const __CFDictionary *a3)
{
  _QWORD *v6;
  int AlgorithmFromTuningOptions;
  char *v8;

  v6 = malloc_type_malloc(0x40uLL, 0x10A0040916CA4BBuLL);
  if (v6)
  {
    AlgorithmFromTuningOptions = noiseReductionGetAlgorithmFromTuningOptions(a3);
    *(_DWORD *)v6 = -348055553;
    if ((AlgorithmFromTuningOptions - 2) < 2)
    {
      v6[2] = multiBandNoiseReductionContextCreate;
      v6[3] = multiBandNoiseReductionContextDestroy;
      v6[4] = multiBandNoiseReductionReleaseBuffers;
      v6[5] = 0;
      v6[6] = multiBandNoiseReductionWithTuningOptions;
      v6[7] = multiBandPyramidFusion;
      v8 = ((char *(*)(int, int))multiBandNoiseReductionContextCreate)(a1, a2);
    }
    else
    {
      if (!AlgorithmFromTuningOptions)
      {
        v6[7] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 3) = 0u;
        *(_OWORD *)(v6 + 1) = 0u;
        return v6;
      }
      if (AlgorithmFromTuningOptions != 1)
      {
        free(v6);
        return 0;
      }
      v6[2] = powerBlurNoiseReductionContextCreate;
      v6[3] = powerBlurNoiseReductionContextDestroy;
      v6[4] = powerBlurNoiseReductionReleaseBuffers;
      v6[5] = powerBlurNoiseReductionWithTuningOptions;
      v6[6] = 0;
      v6[7] = 0;
      v8 = powerBlurNoiseReductionContextCreate(a1, a2);
    }
    v6[1] = v8;
  }
  return v6;
}

void noiseReductionContextDestroy(_QWORD *a1)
{
  void (*v2)(_QWORD);

  if (a1)
  {
    v2 = (void (*)(_QWORD))a1[3];
    if (v2)
      v2(a1[1]);
    free(a1);
  }
}

uint64_t noiseReductionReleaseBuffers(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  if (result && *(_DWORD *)result == -348055553)
  {
    v1 = *(uint64_t (**)(_QWORD))(result + 32);
    if (v1)
      return v1(*(_QWORD *)(result + 8));
  }
  return result;
}

uint64_t noiseReductionWithTuningOptions(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  _DWORD *v10;
  uint64_t (*v11)(_QWORD, CMSampleBufferRef, uint64_t, uint64_t, const __CFDictionary *);
  uint64_t v12;

  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!a1)
  {
    v12 = powerBlurNoiseReductionWithTuningOptions(0, sbuf, a3, a4, a5);
    if (!(_DWORD)v12)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (*(_DWORD *)a1 == -348055553)
  {
    v11 = *(uint64_t (**)(_QWORD, CMSampleBufferRef, uint64_t, uint64_t, const __CFDictionary *))(a1 + 40);
    if (v11)
    {
      v12 = v11(*(_QWORD *)(a1 + 8), sbuf, a3, a4, a5);
      if (!(_DWORD)v12)
        goto LABEL_11;
LABEL_9:
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v12 = FigSignalErrorAt();
  }
LABEL_11:
  if (*v10 == 1)
    kdebug_trace();
  return v12;
}

uint64_t noiseReduction(CMSampleBufferRef sbuf, char a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;

  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v7 = powerBlurNoiseReduction(sbuf, a2, a3);
  if (*v6 == 1)
    kdebug_trace();
  return v7;
}

uint64_t noiseReductionInOutWithTuningOptions(uint64_t a1, opaqueCMSampleBuffer *a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v10;
  uint64_t (*v11)(_QWORD, opaqueCMSampleBuffer *, opaqueCMSampleBuffer *, uint64_t);
  unsigned int v12;
  CVImageBufferRef ImageBuffer;
  __CVBuffer *v14;
  CVImageBufferRef v15;
  __CVBuffer *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (a1 && a2 && a3 && a2 != a3 && *(_DWORD *)a1 == -348055553)
  {
    v11 = *(uint64_t (**)(_QWORD, opaqueCMSampleBuffer *, opaqueCMSampleBuffer *, uint64_t))(a1 + 48);
    if (*(_QWORD *)(a1 + 40))
    {
      if (!v11)
        goto LABEL_10;
    }
    else if (!v11)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v12 = -12780;
      goto LABEL_11;
    }
    v19 = v11(*(_QWORD *)(a1 + 8), a2, a3, a6);
    if (v19)
    {
      v12 = v19;
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_11;
    }
LABEL_23:
    v18 = 0;
    goto LABEL_24;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_10:
  v12 = FigSignalErrorAt();
  if (!v12)
    goto LABEL_23;
LABEL_11:
  pixelTransferSessionOut = 0;
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  if (!ImageBuffer || (v14 = ImageBuffer, (v15 = CMSampleBufferGetImageBuffer(a3)) == 0))
  {
    fig_log_get_emitter();
LABEL_33:
    FigDebugAssert3();
    v17 = 0;
    goto LABEL_16;
  }
  v16 = v15;
  if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut)
    || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v14, v16))
  {
    fig_log_get_emitter();
    goto LABEL_33;
  }
  CMPropagateAttachments(a2, a3);
  v17 = 1;
LABEL_16:
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v17)
    v18 = v12;
  else
    v18 = 4294954513;
LABEL_24:
  if (*v10 == 1)
    kdebug_trace();
  return v18;
}

uint64_t noiseReductionPyramidLayers(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -348055553)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      return multiBandNoiseReductionPyramidLayers(*(_DWORD **)(a1 + 8));
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294954516;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t noiseReductionWithPyramid(uint64_t a1, opaqueCMSampleBuffer *a2, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5)
{
  _DWORD *v10;
  uint64_t v11;
  CVPixelBufferRef *v12;
  uint64_t v13;

  v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!a1 || !a2)
    goto LABEL_18;
  if (a4 == 1)
    goto LABEL_8;
  if (noiseReductionPyramidLayers(a1) != a4)
    goto LABEL_22;
  if (a4 >= 1)
  {
LABEL_8:
    v11 = a4;
    v12 = a3;
    while (*v12)
    {
      ++v12;
      if (!--v11)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (*(_DWORD *)a1 != -348055553)
  {
LABEL_18:
    fig_log_get_emitter();
    FigDebugAssert3();
    v13 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
LABEL_22:
    fig_log_get_emitter();
    FigDebugAssert3();
    v13 = 4294954516;
    goto LABEL_15;
  }
  v13 = multiBandNoiseReductionWithPyramid(*(_DWORD **)(a1 + 8), a2, a3, a4, a5);
  if ((_DWORD)v13)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
LABEL_15:
  if (*v10 == 1)
    kdebug_trace();
  return v13;
}

uint64_t noiseReductionPyramidFusionMaxBuffers(uint64_t a1)
{
  if (a1 && *(_DWORD *)a1 == -348055553)
  {
    if (*(_QWORD *)(a1 + 48))
    {
      return multiBandNoiseReductionPyramidFusionMaxBuffers(*(_DWORD **)(a1 + 8));
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294954516;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t noiseReductionPyramidFusion(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!a1 || !a5 || (int)noiseReductionPyramidFusionMaxBuffers(a1) < (int)a4)
    goto LABEL_18;
  if ((int)a4 >= 1)
  {
    v15 = a4;
    v16 = a2;
    while (*v16 && *(_QWORD *)*v16 != a5)
    {
      ++v16;
      if (!--v15)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  if (*(_DWORD *)a1 != -348055553)
  {
LABEL_18:
    fig_log_get_emitter();
    FigDebugAssert3();
    v18 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v17 = *(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 56);
  if (v17)
  {
    v18 = v17(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7);
    if ((_DWORD)v18)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v18 = 4294954516;
  }
LABEL_15:
  if (*v14 == 1)
    kdebug_trace();
  return v18;
}

uint64_t powerBlurNoiseReduction(CMSampleBufferRef sbuf, char a2, int a3)
{
  return powerBlurNoiseReductionWithTuningOptions(0, sbuf, a2, a3, 0);
}

uint64_t powerBlurNoiseReductionWithTuningOptions(uint64_t a1, CMSampleBufferRef sbuf, char a3, int a4, const __CFDictionary *a5)
{
  __CVBuffer *ImageBuffer;
  CGSize v11;
  __CVBuffer *v12;
  size_t BytesPerRowOfPlane;
  uint64_t result;
  uint64_t v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  const __CFNumber *Value;
  const void *v19;
  const __CFDictionary *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  int v40;
  int CFPreferenceNumberWithDefault;
  int v42;
  float v44;
  float v45;
  _BOOL4 v46;
  int v47;
  float v48;
  size_t Width;
  size_t Height;
  unint64_t v51;
  uint64_t WidthOfPlane;
  unint64_t HeightOfPlane;
  int v54;
  int v55;
  int v56;
  void *BaseAddressOfPlane;
  uint64_t v58;
  size_t v59;
  void *v60;
  size_t v61;
  size_t v62;
  int v63;
  char v64;
  size_t v65;
  NSObject *global_queue;
  int v67;
  void *v68;
  unsigned int v69;
  const __CFDictionary *dict;
  CFDictionaryRef dicta;
  _QWORD block[12];
  unsigned int v73;
  float v74;
  int v75;
  int v76;
  BOOL v77;
  size_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  CGRect rect;
  int valuePtr;
  uint64_t v86;
  float v87;
  CGRect v88;
  CGRect v89;

  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  valuePtr = 0;
  v11 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  rect.size = v11;
  v83 = 0;
  if (!ImageBuffer)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v12 = ImageBuffer;
  if ((CVPixelBufferGetPixelFormatType(ImageBuffer) | 0x10) != 0x34323076)
    return FigSignalErrorAt();
  if ((CVPixelBufferGetWidthOfPlane(v12, 1uLL) & 7) != 0)
    return FigSignalErrorAt();
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v12, 1uLL);
  if ((BytesPerRowOfPlane & 7) != 0)
    return FigSignalErrorAt();
  v15 = BytesPerRowOfPlane;
  v16 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v17 = v16;
  v82 = 1017370378;
  v80 = 256;
  v81 = 256;
  v79 = 256;
  if (v16)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06DE8]);
    if (Value)
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  }
  if (!a5)
  {
    v19 = 0;
    dict = 0;
    if (!v17)
      goto LABEL_27;
    goto LABEL_19;
  }
  v19 = CFDictionaryGetValue(a5, CFSTR("ChromaNoiseReductionTuningParameters"));
  dict = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("CropRect"));
  v20 = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("ClientSpecifiedMetadata"));
  v21 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("Method"));
  if (v21)
    CFNumberGetValue(v21, kCFNumberIntType, (char *)&v83 + 4);
  v22 = (const __CFNumber *)CFDictionaryGetValue(a5, CFSTR("Synchronization"));
  if (v22)
    CFNumberGetValue(v22, kCFNumberIntType, &v83);
  if (v20)
    v17 = v20;
  if (v17)
  {
LABEL_19:
    v23 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0D06A20]);
    if (v23)
      CFNumberGetValue(v23, kCFNumberFloatType, &v82);
    v24 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0D067E0]);
    if (v24)
      CFNumberGetValue(v24, kCFNumberIntType, &v81);
    v25 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0D06F78]);
    if (v25)
      CFNumberGetValue(v25, kCFNumberIntType, &v80);
    v26 = (const __CFNumber *)CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E0D06F60]);
    if (v26)
      CFNumberGetValue(v26, kCFNumberIntType, &v79);
  }
LABEL_27:
  v28 = v80;
  v27 = v81;
  v29 = v79;
  v30 = powerBlurNoiseReductionWithTuningOptions_ncpu;
  if (!powerBlurNoiseReductionWithTuningOptions_ncpu)
  {
    v78 = 4;
    sysctlbyname("hw.ncpu", &powerBlurNoiseReductionWithTuningOptions_ncpu, &v78, 0, 0);
    v30 = powerBlurNoiseReductionWithTuningOptions_ncpu;
  }
  v31 = v28 * v27;
  v32 = v30 > 1;
  v33 = 2 * v30;
  if ((a4 & v32) != 0)
    v34 = v33;
  else
    v34 = 1;
  v69 = v34;
  if (v19)
  {
    LODWORD(v78) = 1065353216;
    v87 = 1.0;
    v86 = 0;
    FigCFDictionaryGetInt32IfPresent();
    v35 = HIDWORD(v86);
    FigCFDictionaryGetInt32IfPresent();
    v36 = v86;
    if (FigCFDictionaryGetFloat32IfPresent())
    {
      FigCFDictionaryGetFloat32IfPresent();
      v35 = (int)(float)((float)(v87 * (float)v35) / *(float *)&v78);
    }
  }
  else
  {
    v37 = 0;
    while (sensorParameters[v37] != valuePtr)
    {
      v38 = v37 >= 0xC;
      v37 += 3;
      if (v38)
      {
        v35 = 20;
        v36 = 30;
        goto LABEL_41;
      }
    }
    v39 = (char *)&sensorParameters[v37];
    v36 = *((_DWORD *)v39 + 1);
    v35 = *((_DWORD *)v39 + 2);
  }
LABEL_41:
  v40 = v31 * v29;
  CFPreferenceNumberWithDefault = powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning;
  if (powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning == -1)
  {
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    powerBlurNoiseReductionWithTuningOptions_enable_camera_tuning = CFPreferenceNumberWithDefault;
  }
  v42 = powerBlurNoiseReductionWithTuningOptions_parameterOverride;
  if (powerBlurNoiseReductionWithTuningOptions_parameterOverride == -1 || CFPreferenceNumberWithDefault != 0)
  {
    if (CFPreferenceNumberWithDefault)
      CFPreferencesSynchronize(CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    powerBlurNoiseReductionWithTuningOptions_slopeOverride = FigGetCFPreferenceNumberWithDefault();
    powerBlurNoiseReductionWithTuningOptions_biasOverride = FigGetCFPreferenceNumberWithDefault();
    v42 = (powerBlurNoiseReductionWithTuningOptions_slopeOverride & powerBlurNoiseReductionWithTuningOptions_biasOverride) >= 0;
    powerBlurNoiseReductionWithTuningOptions_parameterOverride = v42;
  }
  v44 = (float)v40 * 0.000000059605;
  if (v42)
  {
    if (powerBlurNoiseReductionWithTuningOptions_slopeOverride >= 0)
      v35 = powerBlurNoiseReductionWithTuningOptions_slopeOverride;
    if (powerBlurNoiseReductionWithTuningOptions_biasOverride >= 0)
      v36 = powerBlurNoiseReductionWithTuningOptions_biasOverride;
  }
  v45 = (float)((float)v36 + (float)((float)v35 * v44)) * 0.1;
  v46 = v44 <= 2.0;
  if (a1)
  {
    v47 = *(_DWORD *)(a1 + 8);
    if (v47 == 17)
    {
      v46 = 0;
    }
    else if (v47 == 9)
    {
      v46 = 1;
    }
  }
  if (v45 > 40.0)
    v45 = 40.0;
  if (v45 >= 4.0)
    v48 = v45;
  else
    v48 = 4.0;
  if (powerBlurNoiseReductionWithTuningOptions_enableBinOutput == -1)
    powerBlurNoiseReductionWithTuningOptions_enableBinOutput = FigGetCFPreferenceNumberWithDefault();
  if (dict && CGRectMakeWithDictionaryRepresentation(dict, &rect))
  {
    Width = CVPixelBufferGetWidth(v12);
    Height = CVPixelBufferGetHeight(v12);
    if (CGRectIsEmpty(rect))
      return FigSignalErrorAt();
    rect = CGRectIntegral(rect);
    v88.origin.x = 0.0;
    v88.origin.y = 0.0;
    v88.size.width = (double)Width;
    v88.size.height = (double)Height;
    v89 = CGRectIntersection(rect, v88);
    if (!CGRectEqualToRect(rect, v89))
      return FigSignalErrorAt();
    v51 = (unint64_t)rect.size.width + 1;
    if ((v51 & 0xE) != 0 || ((int)rect.origin.x & 0xE) != 0)
      return FigSignalErrorAt();
    WidthOfPlane = v51 >> 1;
    HeightOfPlane = ((unint64_t)rect.size.height + 1) >> 1;
    v54 = (int)rect.origin.x >> 1;
    v55 = (int)rect.origin.y >> 1;
    v56 = 1;
  }
  else
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v12, 1uLL);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v12, 1uLL);
    v56 = 0;
    v54 = 0;
    v55 = 0;
  }
  rect.origin.x = (double)v54;
  rect.origin.y = (double)v55;
  rect.size.width = (double)(unint64_t)WidthOfPlane;
  rect.size.height = (double)HeightOfPlane;
  if (a1 && *(_DWORD *)(a1 + 4) && (a3 & 1) == 0 && (v83 & 0xFFFFFFFD00000000) == 0)
  {
    result = powerBlurNoiseReductionGPU(a1 + 16, v12, (float64x2_t *)&rect, v46, v83, v48);
    if (!(_DWORD)result)
      return result;
    if (HIDWORD(v83) == 2)
      return FigSignalErrorAt();
    if ((_DWORD)result == -2)
    {
      powerBlurNoiseReductionGPUContextDestroy(a1 + 16);
      *(_DWORD *)(a1 + 4) = 0;
    }
  }
  if (CVPixelBufferLockBaseAddress(v12, 0))
    return FigSignalErrorAt();
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v12, 1uLL);
  if (v56)
    v58 = (uint64_t)BaseAddressOfPlane + 2 * v54 + v15 * v55;
  else
    v58 = (uint64_t)BaseAddressOfPlane;
  v59 = CVPixelBufferGetBytesPerRowOfPlane(v12, 0);
  v60 = CVPixelBufferGetBaseAddressOfPlane(v12, 0);
  v61 = CVPixelBufferGetWidthOfPlane(v12, 0);
  v62 = CVPixelBufferGetHeightOfPlane(v12, 0);
  if (v69 < 2)
  {
    if (v46)
      chromapowerblur11x11(v58, v15, v58, v15, WidthOfPlane, HeightOfPlane, 0, HeightOfPlane, (int)v48);
    else
      chromapowerblur17x17(v58, v15, v58, v15, WidthOfPlane, HeightOfPlane, 0, HeightOfPlane, (int)v48);
  }
  else
  {
    v68 = v60;
    dicta = (CFDictionaryRef)v62;
    v67 = FigGetCFPreferenceNumberWithDefault();
    v63 = FigGetCFPreferenceNumberWithDefault();
    if (v63 > 0)
      v64 = 1;
    else
      v64 = a3;
    v65 = v69 << v64;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __powerBlurNoiseReductionWithTuningOptions_block_invoke;
    block[3] = &__block_descriptor_tmp;
    v73 = v69;
    v77 = v46;
    block[4] = v58;
    block[5] = v15;
    block[6] = WidthOfPlane;
    block[7] = HeightOfPlane;
    v74 = v48;
    block[8] = v68;
    block[9] = v59;
    block[10] = v61;
    block[11] = dicta;
    v75 = v63;
    v76 = v67;
    dispatch_apply(v65, global_queue, block);
  }
  CVPixelBufferUnlockBaseAddress(v12, 0);
  return 0;
}

void __powerBlurNoiseReductionWithTuningOptions_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  uint8x16_t v24;
  const __int16 *v25;
  int16x8_t v26;
  unint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  unsigned int v35;
  int8x16_t v36;
  unsigned __int128 v37;
  int8x16_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  uint8x16_t v41;
  int8x16_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  int8x16_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  uint8x16_t v66;
  unsigned __int128 v67;
  uint8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  uint8x16_t v71;
  int8x16_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  uint8x16_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  uint8x16_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  int8x16_t v83;
  uint8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  int8x16_t v87;
  uint8x16_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int8x16_t v91;
  uint8x16_t v92;
  int8x16_t v93;
  uint8x16_t v94;
  int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  int8x16_t *v102;
  int8x16_t v103;
  int8x16_t v104;
  unsigned int v105;
  int8x16_t *v106;
  int8x16_t v107;
  unsigned __int128 v108;
  uint8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint8x16_t v112;
  int8x16_t v113;
  uint8x16_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  int8x16_t v117;
  uint8x16_t v118;
  uint16x8_t v119;
  int8x16_t v120;
  uint8x16_t v121;
  uint16x8_t v122;
  uint16x8_t v123;
  int8x16_t v124;
  uint8x16_t v125;
  uint16x8_t v126;
  uint16x8_t v127;
  int8x16_t v128;
  uint8x16_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  int8x16_t v132;
  uint8x16_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  int8x16_t v136;
  uint8x16_t v137;
  unsigned __int128 v138;
  uint8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint8x16_t v142;
  int8x16_t v143;
  uint8x16_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  int8x16_t v147;
  uint8x16_t v148;
  uint16x8_t v149;
  int8x16_t v150;
  uint8x16_t v151;
  uint16x8_t v152;
  uint16x8_t v153;
  int8x16_t v154;
  uint8x16_t v155;
  uint16x8_t v156;
  uint16x8_t v157;
  int8x16_t v158;
  uint8x16_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  int8x16_t v162;
  uint8x16_t v163;
  int8x16_t v164;
  uint8x16_t v165;
  int v166;
  uint8x8_t *v167;
  _BYTE *v168;
  int v169;
  int8x16_t v170;
  unsigned __int128 v171;
  uint8x16_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int v175;
  int8x16_t v176;
  uint8x16_t v177;
  uint16x8_t v178;
  uint16x8_t v179;
  int8x16_t v180;
  uint8x16_t v181;
  unint64_t v183;
  int16x8_t v184;
  uint8x16_t v185;
  _BYTE __src[32768];
  uint64_t v187;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v187 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(v4 + 96);
  v7 = v5 - v6;
  if (v5 >= v6)
  {
    v17 = *(_QWORD *)(v4 + 64);
    v18 = *(_QWORD *)(v4 + 72);
    v20 = *(_QWORD *)(v4 + 80);
    v19 = *(_QWORD *)(v4 + 88);
    v21 = v19 * v7 / v6;
    v183 = v19;
    v22 = v19 + v19 * v7;
    v23 = (const char *)(v4 + 104);
    v24 = (uint8x16_t)vld1q_dup_s8(v23);
    v25 = (const __int16 *)(v4 + 108);
    v26 = vld1q_dup_s16(v25);
    v27 = v22 / v6;
    v184 = v26;
    v185 = v24;
    if (16 * v20 > 0x8000)
    {
      v29 = malloc_type_malloc(16 * v20, 0xE5C6AAA2uLL);
      v26 = v184;
      v24 = v185;
      v28 = v29;
    }
    else
    {
      v28 = __src;
    }
    v30 = v21 + 3;
    do
    {
      if (v30 < 0)
      {
        memcpy(&v28[v20 * (v30 & 0xF)], v28, v20);
        v26 = v184;
        v24 = v185;
      }
      else
      {
        v31 = (int8x16_t *)(v17 + v18 * v30);
        v32 = (int8x16_t *)&v28[v20 * (v30 & 0xF)];
        v33 = *v31;
        v34 = vdupq_lane_s8(*(int8x8_t *)v31->i8, 0);
        if ((int)v20 < 32)
        {
          v36 = v34;
        }
        else
        {
          v35 = (v20 >> 4) - 1;
          do
          {
            v36 = v33;
            v37 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v33), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            v38 = v31[1];
            ++v31;
            v33 = v38;
            v39 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v37), (int8x16_t)v37), v24);
            v40 = vextq_s8(v34, v36, 0xCuLL);
            v41 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v36), v39), v36, v40);
            v42 = vextq_s8(v34, v36, 0xDuLL);
            v43 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v42, (uint8x16_t)v36), v39), v36, v42);
            v44 = vaddl_u8(*(uint8x8_t *)v43.i8, *(uint8x8_t *)v41.i8);
            v45 = vaddl_high_u8(v43, v41);
            v46 = vextq_s8(v34, v36, 0xEuLL);
            v47 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v46, (uint8x16_t)v36), v39), v36, v46);
            v48 = vaddw_high_u8(v45, v47);
            v49 = vextq_s8(v34, v36, 0xFuLL);
            v50 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v36), v39), v36, v49);
            v51 = vaddw_u8(vaddw_u8(v44, *(uint8x8_t *)v47.i8), *(uint8x8_t *)v50.i8);
            v52 = vaddw_high_u8(v48, v50);
            v53 = vextq_s8(v36, v38, 1uLL);
            v54 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v36), v39), v36, v53);
            v55 = vaddw_u8(v51, *(uint8x8_t *)v54.i8);
            v56 = vaddw_high_u8(v52, v54);
            v57 = vextq_s8(v36, v38, 2uLL);
            v58 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v57, (uint8x16_t)v36), v39), v36, v57);
            v59 = vaddw_u8(v55, *(uint8x8_t *)v58.i8);
            v60 = vaddw_high_u8(v56, v58);
            v61 = vextq_s8(v36, v38, 3uLL);
            v62 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v61, (uint8x16_t)v36), v39), v36, v61);
            v63 = vaddw_u8(v59, *(uint8x8_t *)v62.i8);
            v64 = vaddw_high_u8(v60, v62);
            v65 = vextq_s8(v36, v38, 4uLL);
            v66 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v36), v39), v36, v65);
            *v32++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(v63, *(uint8x8_t *)v66.i8), 3uLL), (int16x8_t)vaddw_high_u8(v64, v66), 3uLL);
            v34 = v36;
            --v35;
          }
          while (v35);
        }
        v67 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v33), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
        v68 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v67), (int8x16_t)v67), v24);
        v69 = vdupq_laneq_s8(v33, 15);
        v70 = vextq_s8(v36, v33, 0xCuLL);
        v71 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v33), v68), v33, v70);
        v72 = vextq_s8(v36, v33, 0xDuLL);
        v73 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v72, (uint8x16_t)v33), v68), v33, v72);
        v74 = vaddl_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v71.i8);
        v75 = vaddl_high_u8(v73, v71);
        v76 = vextq_s8(v36, v33, 0xEuLL);
        v77 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v76, (uint8x16_t)v33), v68), v33, v76);
        v78 = vaddw_high_u8(v75, v77);
        v79 = vextq_s8(v36, v33, 0xFuLL);
        v80 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v79, (uint8x16_t)v33), v68), v33, v79);
        v81 = vaddw_u8(vaddw_u8(v74, *(uint8x8_t *)v77.i8), *(uint8x8_t *)v80.i8);
        v82 = vaddw_high_u8(v78, v80);
        v83 = vextq_s8(v33, v69, 1uLL);
        v84 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v83, (uint8x16_t)v33), v68), v33, v83);
        v85 = vaddw_u8(v81, *(uint8x8_t *)v84.i8);
        v86 = vaddw_high_u8(v82, v84);
        v87 = vextq_s8(v33, v69, 2uLL);
        v88 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v87, (uint8x16_t)v33), v68), v33, v87);
        v89 = vaddw_u8(v85, *(uint8x8_t *)v88.i8);
        v90 = vaddw_high_u8(v86, v88);
        v91 = vextq_s8(v33, v69, 3uLL);
        v92 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v91, (uint8x16_t)v33), v68), v33, v91);
        v93 = vextq_s8(v33, v69, 4uLL);
        v94 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v93, (uint8x16_t)v33), v68), v33, v93);
        *v32 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(v89, *(uint8x8_t *)v92.i8), *(uint8x8_t *)v94.i8), 3uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(v90, v92), v94), 3uLL);
      }
    }
    while (v30-- > (int)v21 - 4);
    if ((int)v21 < (int)v27)
    {
      if ((int)v20 >> 4 <= 1)
        v96 = 1;
      else
        v96 = (int)v20 >> 4;
      v97 = (int)v21 + 4;
      if ((uint64_t)v97 <= (int)v27 + 3)
        v98 = (int)v27 + 3;
      else
        v98 = (int)v21 + 4;
      v99 = v17 + v18 * v97 + 16;
      v100 = v21 + 1;
      v101 = v21 - 1;
      do
      {
        if (v97 >= v183)
        {
          memcpy(&v28[(v97 & 0xF) * v20], &v28[(((_BYTE)v183 - 1) & 0xF) * v20], v20);
          v26 = v184;
          v24 = v185;
        }
        else
        {
          v102 = (int8x16_t *)&v28[(v97 & 0xF) * v20];
          v103 = *(int8x16_t *)(v17 + v97 * v18);
          v104 = vdupq_lane_s8(*(int8x8_t *)v103.i8, 0);
          if ((int)v20 < 32)
          {
            v107 = v104;
          }
          else
          {
            v105 = (v20 >> 4) - 1;
            v106 = (int8x16_t *)v99;
            do
            {
              v107 = v103;
              v108 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v103), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
              v109 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v108), (int8x16_t)v108), v24);
              v110 = *v106++;
              v103 = v110;
              v111 = vextq_s8(v104, v107, 0xCuLL);
              v112 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v111, (uint8x16_t)v107), v109), v107, v111);
              v113 = vextq_s8(v104, v107, 0xDuLL);
              v114 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v113, (uint8x16_t)v107), v109), v107, v113);
              v115 = vaddl_u8(*(uint8x8_t *)v114.i8, *(uint8x8_t *)v112.i8);
              v116 = vaddl_high_u8(v114, v112);
              v117 = vextq_s8(v104, v107, 0xEuLL);
              v118 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v117, (uint8x16_t)v107), v109), v107, v117);
              v119 = vaddw_high_u8(v116, v118);
              v120 = vextq_s8(v104, v107, 0xFuLL);
              v121 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v120, (uint8x16_t)v107), v109), v107, v120);
              v122 = vaddw_u8(vaddw_u8(v115, *(uint8x8_t *)v118.i8), *(uint8x8_t *)v121.i8);
              v123 = vaddw_high_u8(v119, v121);
              v124 = vextq_s8(v107, v110, 1uLL);
              v125 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v124, (uint8x16_t)v107), v109), v107, v124);
              v126 = vaddw_u8(v122, *(uint8x8_t *)v125.i8);
              v127 = vaddw_high_u8(v123, v125);
              v128 = vextq_s8(v107, v110, 2uLL);
              v129 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v128, (uint8x16_t)v107), v109), v107, v128);
              v130 = vaddw_u8(v126, *(uint8x8_t *)v129.i8);
              v131 = vaddw_high_u8(v127, v129);
              v132 = vextq_s8(v107, v110, 3uLL);
              v133 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v132, (uint8x16_t)v107), v109), v107, v132);
              v134 = vaddw_u8(v130, *(uint8x8_t *)v133.i8);
              v135 = vaddw_high_u8(v131, v133);
              v136 = vextq_s8(v107, v110, 4uLL);
              v137 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v136, (uint8x16_t)v107), v109), v107, v136);
              *v102++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(v134, *(uint8x8_t *)v137.i8), 3uLL), (int16x8_t)vaddw_high_u8(v135, v137), 3uLL);
              v104 = v107;
              --v105;
            }
            while (v105);
          }
          v138 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v103), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
          v139 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v138), (int8x16_t)v138), v24);
          v140 = vdupq_laneq_s8(v103, 15);
          v141 = vextq_s8(v107, v103, 0xCuLL);
          v142 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v141, (uint8x16_t)v103), v139), v103, v141);
          v143 = vextq_s8(v107, v103, 0xDuLL);
          v144 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v143, (uint8x16_t)v103), v139), v103, v143);
          v145 = vaddl_u8(*(uint8x8_t *)v144.i8, *(uint8x8_t *)v142.i8);
          v146 = vaddl_high_u8(v144, v142);
          v147 = vextq_s8(v107, v103, 0xEuLL);
          v148 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v147, (uint8x16_t)v103), v139), v103, v147);
          v149 = vaddw_high_u8(v146, v148);
          v150 = vextq_s8(v107, v103, 0xFuLL);
          v151 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v150, (uint8x16_t)v103), v139), v103, v150);
          v152 = vaddw_u8(vaddw_u8(v145, *(uint8x8_t *)v148.i8), *(uint8x8_t *)v151.i8);
          v153 = vaddw_high_u8(v149, v151);
          v154 = vextq_s8(v103, v140, 1uLL);
          v155 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v154, (uint8x16_t)v103), v139), v103, v154);
          v156 = vaddw_u8(v152, *(uint8x8_t *)v155.i8);
          v157 = vaddw_high_u8(v153, v155);
          v158 = vextq_s8(v103, v140, 2uLL);
          v159 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v158, (uint8x16_t)v103), v139), v103, v158);
          v160 = vaddw_u8(v156, *(uint8x8_t *)v159.i8);
          v161 = vaddw_high_u8(v157, v159);
          v162 = vextq_s8(v103, v140, 3uLL);
          v163 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v162, (uint8x16_t)v103), v139), v103, v162);
          v164 = vextq_s8(v103, v140, 4uLL);
          v165 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v164, (uint8x16_t)v103), v139), v103, v164);
          *v102 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(v160, *(uint8x8_t *)v163.i8), *(uint8x8_t *)v165.i8), 3uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(v161, v163), v165), 3uLL);
        }
        if ((int)v20 >= 16)
        {
          v166 = 0;
          v167 = (uint8x8_t *)(v17 + (v97 - 4) * v18);
          v168 = v28;
          do
          {
            v169 = 0;
            v170 = *(int8x16_t *)&v168[((v97 - 4) & 0xF) * v20];
            v171 = *(_OWORD *)&vmulq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v170), v26) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            v172 = vminq_u8((uint8x16_t)vorrq_s8(vrev16q_s8((int8x16_t)v171), (int8x16_t)v171), v24);
            v173 = (int16x8_t)vshll_n_u8(*v167, 3uLL);
            v174 = (int16x8_t)vshll_high_n_u8(*(uint8x16_t *)v167->i8, 3uLL);
            v175 = v101;
            do
            {
              v176 = *(int8x16_t *)&v168[v20 * (v175 & 0xF)];
              v177 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v176, (uint8x16_t)v170), v172), v170, v176);
              v178 = vaddw_u8((uint16x8_t)v173, *(uint8x8_t *)v177.i8);
              v179 = vaddw_high_u8((uint16x8_t)v174, v177);
              v180 = *(int8x16_t *)&v168[v20 * ((v100 + (_BYTE)v169) & 0xF)];
              v181 = (uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(vabdq_u8((uint8x16_t)v180, (uint8x16_t)v170), v172), v170, v180);
              v173 = (int16x8_t)vaddw_u8(v178, *(uint8x8_t *)v181.i8);
              v174 = (int16x8_t)vaddw_high_u8(v179, v181);
              ++v169;
              --v175;
            }
            while (v169 != 4);
            *(int8x16_t *)v167->i8 = vrshrn_high_n_s16(vrshrn_n_s16(v173, 4uLL), v174, 4uLL);
            v167 += 2;
            ++v166;
            v168 += 16;
          }
          while (v166 != v96);
        }
        v99 += v18;
        ++v100;
        ++v101;
      }
      while (v97++ != v98);
    }
    if (v28 != __src)
      free(v28);
  }
  else
  {
    v8 = v5;
    v10 = *(_QWORD *)(v4 + 32);
    v9 = *(_QWORD *)(v4 + 40);
    v11 = *(_QWORD *)(v4 + 48);
    v12 = *(_QWORD *)(v4 + 56);
    v13 = v12 * v8;
    v14 = v13 / v6;
    v15 = *(float *)(v4 + 100);
    v16 = (v12 + v13) / v6;
    if (*(_BYTE *)(v4 + 112))
      chromapowerblur11x11(v10, v9, v10, v9, v11, v12, v14, v16, (int)v15);
    else
      chromapowerblur17x17(v10, v9, v10, v9, v11, v12, v14, v16, (int)v15);
  }
}

void chromapowerblur11x11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  char v28;
  int32x4_t v29;
  int v30;
  uint8x16_t *v31;
  _BYTE *v32;
  int v33;
  uint8x16_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int v38;
  int8x16_t v39;
  int16x8_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  uint16x8_t v44;
  int16x8_t v45;
  uint8x16_t v46;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  int v51;
  uint64_t v52;
  uint16x8_t v53;
  unint64_t v54;
  _BYTE __src[32768];
  uint64_t v56;

  v9 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v12 = v11;
  v54 = v13;
  v14 = v10;
  v48 = v15;
  v49 = v16;
  v18 = v17;
  v19 = v9;
  v56 = *MEMORY[0x1E0C80C00];
  v20 = 2 * v10;
  v51 = v21;
  if ((unint64_t)(32 * v10) > 0x8000)
    v22 = malloc_type_malloc(32 * v10, 0x7ECF81AFuLL);
  else
    v22 = __src;
  LODWORD(v23) = v12 + 5;
  v53 = (uint16x8_t)vdupq_n_s16(a9);
  do
  {
    v23 = (v23 - 1);
    if ((int)v23 < 0)
      memcpy(&v22[v20 * (v23 & 0xF)], v22, v20);
    else
      chromapowerblur11H((int16x4_t *)(v19 + v23 * v18), (uint8x16_t *)&v22[v20 * (v23 & 0xF)], v14, a9);
  }
  while ((int)v23 > v12 - 5);
  if (v12 < v51)
  {
    if (v14 >> 3 <= 1)
      v24 = 1;
    else
      v24 = v14 >> 3;
    v25 = v12;
    v26 = v12 + 5;
    v52 = v51 + 4;
    v27 = v25 + 1;
    v28 = v25 - 1;
    v50 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      if (v26 >= v54)
        memcpy(&v22[v20 * (v26 & 0xF)], &v22[(((_BYTE)v54 - 1) & 0xF) * v20], v20);
      else
        chromapowerblur11H((int16x4_t *)(v19 + v26 * v18), (uint8x16_t *)&v22[v20 * (v26 & 0xF)], v14, a9);
      v29.i64[0] = 0x1000100010001;
      v29.i64[1] = 0x1000100010001;
      if (v14 >= 8)
      {
        v30 = 0;
        v31 = (uint8x16_t *)(v48 + (v26 - 5) * v49);
        v32 = v22;
        do
        {
          v33 = 0;
          v34 = *(uint8x16_t *)&v32[v20 * ((v26 - 5) & 0xF)];
          v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8);
          v36 = (int16x8_t)vmovl_high_u8(v34);
          v37.i64[0] = 0x1000100010001;
          v37.i64[1] = 0x1000100010001;
          v38 = v27;
          do
          {
            v39 = *(int8x16_t *)&v32[v20 * ((v28 + (_BYTE)v33) & 0xF)];
            v40 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v34)));
            v41 = (uint8x16_t)vandq_s8(v39, (int8x16_t)v40);
            v42 = vaddw_u8((uint16x8_t)v35, *(uint8x8_t *)v41.i8);
            v43 = *(int8x16_t *)&v32[v20 * (v38 & 0xF)];
            v44 = vaddw_high_u8((uint16x8_t)v36, v41);
            v45 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v43, v34)));
            v46 = (uint8x16_t)vandq_s8(v43, (int8x16_t)v45);
            v37 = vsubq_s16(vsubq_s16(v37, v40), v45);
            v35 = (int16x8_t)vaddw_u8(v42, *(uint8x8_t *)v46.i8);
            v36 = (int16x8_t)vaddw_high_u8(v44, v46);
            --v33;
            ++v38;
          }
          while (v33 != -5);
          *v31++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v35, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), v50)), v29))), (uint16x8_t)vqrdmulhq_s16(v36, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v37))), v50)), v29)));
          ++v30;
          v32 += 16;
        }
        while (v30 != v24);
      }
      ++v27;
      ++v28;
    }
    while ((uint64_t)v26++ < v52);
  }
  if (v22 != __src)
    free(v22);
}

void chromapowerblur17x17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  char v27;
  int v28;
  int32x4_t v29;
  int v30;
  uint8x16_t *v31;
  _BYTE *v32;
  int v33;
  uint8x16_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int v38;
  int8x16_t v39;
  int16x8_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  uint16x8_t v44;
  int16x8_t v45;
  uint8x16_t v46;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  int v51;
  uint64_t v52;
  uint16x8_t v53;
  unint64_t v54;
  _BYTE __src[65536];
  uint64_t v56;

  v9 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v12 = v11;
  v54 = v13;
  v14 = v10;
  v48 = v15;
  v49 = v16;
  v18 = v17;
  v19 = v9;
  v56 = *MEMORY[0x1E0C80C00];
  v20 = 2 * v10;
  v51 = v21;
  if ((unint64_t)(v10 << 6) > 0x10000)
    v22 = malloc_type_malloc(v10 << 6, 0xAC138ACAuLL);
  else
    v22 = __src;
  LODWORD(v23) = v12 + 8;
  v53 = (uint16x8_t)vdupq_n_s16(a9);
  do
  {
    v23 = (v23 - 1);
    if ((int)v23 < 0)
      memcpy(&v22[v20 * (v23 & 0x1F)], v22, v20);
    else
      chromapowerblur17H((int16x4_t *)(v19 + v23 * v18), (uint8x16_t *)&v22[v20 * (v23 & 0x1F)], v14, a9);
  }
  while ((int)v23 > v12 - 8);
  if (v12 < v51)
  {
    if (v14 >> 3 <= 1)
      v24 = 1;
    else
      v24 = v14 >> 3;
    v25 = v12;
    v26 = v12 + 8;
    v52 = v51 + 7;
    v27 = v25 + 1;
    v28 = v25 - 1;
    v50 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    do
    {
      if (v26 >= v54)
        memcpy(&v22[v20 * (v26 & 0x1F)], &v22[(((_BYTE)v54 - 1) & 0x1F) * v20], v20);
      else
        chromapowerblur17H((int16x4_t *)(v19 + v26 * v18), (uint8x16_t *)&v22[v20 * (v26 & 0x1F)], v14, a9);
      v29.i64[0] = 0x1000100010001;
      v29.i64[1] = 0x1000100010001;
      if (v14 >= 8)
      {
        v30 = 0;
        v31 = (uint8x16_t *)(v48 + (v26 - 8) * v49);
        v32 = v22;
        do
        {
          v33 = 0;
          v34 = *(uint8x16_t *)&v32[v20 * ((v26 - 8) & 0x1F)];
          v35 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v34.i8);
          v36 = (int16x8_t)vmovl_high_u8(v34);
          v37.i64[0] = 0x1000100010001;
          v37.i64[1] = 0x1000100010001;
          v38 = v28;
          do
          {
            v39 = *(int8x16_t *)&v32[v20 * (v38 & 0x1F)];
            v40 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v39, v34)));
            v41 = (uint8x16_t)vandq_s8(v39, (int8x16_t)v40);
            v42 = vaddw_u8((uint16x8_t)v35, *(uint8x8_t *)v41.i8);
            v43 = *(int8x16_t *)&v32[v20 * ((v27 + (_BYTE)v33) & 0x1F)];
            v44 = vaddw_high_u8((uint16x8_t)v36, v41);
            v45 = (int16x8_t)vcgeq_u16(v53, vpaddlq_u8(vabdq_u8((uint8x16_t)v43, v34)));
            v46 = (uint8x16_t)vandq_s8(v43, (int8x16_t)v45);
            v37 = vsubq_s16(vsubq_s16(v37, v40), v45);
            v35 = (int16x8_t)vaddw_u8(v42, *(uint8x8_t *)v46.i8);
            v36 = (int16x8_t)vaddw_high_u8(v44, v46);
            ++v33;
            --v38;
          }
          while (v33 != 8);
          *v31++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v35, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v37.i8))), v50)), v29))), (uint16x8_t)vqrdmulhq_s16(v36, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v37))), v50)), v29)));
          ++v30;
          v32 += 16;
        }
        while (v30 != v24);
      }
      ++v27;
      ++v28;
    }
    while ((uint64_t)v26++ < v52);
  }
  if (v22 != __src)
    free(v22);
}

char *powerBlurNoiseReductionContextCreate(int a1, int a2)
{
  char *v4;
  char *v5;
  int CFPreferenceNumberWithDefault;
  int v7;

  v4 = (char *)malloc_type_malloc(0xB8uLL, 0x10A0040E2CBC39CuLL);
  v5 = v4;
  if (v4)
  {
    *(_OWORD *)(v4 + 40) = 0u;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 152) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 88) = 0u;
    *(_OWORD *)(v4 + 72) = 0u;
    *(_OWORD *)(v4 + 56) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 8) = 0u;
    *((_DWORD *)v4 + 10) = a2;
    *(_QWORD *)v4 = 0x172482717;
    *((_DWORD *)v4 + 1) = FigGetCFPreferenceNumberWithDefault();
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    if (CFPreferenceNumberWithDefault == 9)
      v7 = 9;
    else
      v7 = 0;
    if (CFPreferenceNumberWithDefault == 17)
      v7 = 17;
    *((_DWORD *)v5 + 2) = v7;
    *((_DWORD *)v5 + 17) = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v5 + 18) = FigGetCFPreferenceNumberWithDefault();
    *((_DWORD *)v5 + 19) = FigGetCFPreferenceNumberWithDefault();
    if (*((_DWORD *)v5 + 1))
      powerBlurNoiseReductionGPUContextInit(a1, (_QWORD *)v5 + 2);
  }
  return v5;
}

void powerBlurNoiseReductionContextDestroy(_DWORD *a1)
{
  if (a1 && *a1 == 1917331223)
  {
    if (a1[1])
      powerBlurNoiseReductionGPUContextDestroy((uint64_t)(a1 + 4));
    *((_QWORD *)a1 + 22) = 0;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *(_OWORD *)a1 = 0u;
    free(a1);
  }
}

_DWORD *powerBlurNoiseReductionReleaseBuffers(_DWORD *result)
{
  if (result && *result == 1917331223)
  {
    if (result[1])
      return (_DWORD *)powerBlurNoiseReductionGPUReleaseBuffers((uint64_t)(result + 4));
  }
  return result;
}

uint16x8_t chromapowerblur11H(int16x4_t *a1, uint8x16_t *a2, int a3, unsigned int a4)
{
  uint16x8_t v4;
  int16x8_t v5;
  int8x16_t v6;
  int8x16_t *v7;
  int v8;
  int8x16_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint8x16_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v19;
  uint8x16_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  uint16x8_t v23;
  int16x8_t v24;
  uint8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  uint8x16_t v30;
  int8x16_t v31;
  int16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  uint16x8_t v35;
  int8x16_t v36;
  int16x8_t v37;
  uint16x8_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  int8x16_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  uint16x8_t v50;
  int16x8_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  int16x8_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  int8x16_t v74;
  int16x8_t v75;
  uint8x16_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  int8x16_t v79;
  int16x8_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int8x16_t v84;
  int16x8_t v85;
  uint8x16_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  int8x16_t v89;
  int16x8_t v90;
  uint8x16_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int8x16_t v94;
  int16x8_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  int8x16_t v99;
  int16x8_t v100;
  uint8x16_t v101;
  int8x16_t v102;
  int16x8_t v103;
  uint8x16_t v104;
  uint16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  float32x4_t v108;
  float32x4_t v109;
  uint16x8_t result;

  v4 = (uint16x8_t)vdupq_n_s16(a4);
  v5 = *(int16x8_t *)a1->i8;
  v6 = (int8x16_t)vdupq_lane_s16(*a1, 0);
  if (a3 <= 15)
  {
    v45 = vextq_s8(v6, (int8x16_t)v5, 6uLL);
    v49 = vextq_s8(v6, (int8x16_t)v5, 8uLL);
    v53 = vextq_s8(v6, (int8x16_t)v5, 0xAuLL);
  }
  else
  {
    v7 = (int8x16_t *)&a1[2];
    v8 = (a3 >> 3) - 1;
    v9.i64[0] = 0x2000200020002;
    v9.i64[1] = 0x2000200020002;
    v10 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    v11.i64[0] = 0x1000100010001;
    v11.i64[1] = 0x1000100010001;
    v12 = v6;
    do
    {
      v6 = (int8x16_t)v5;
      v13 = *v7++;
      v5 = (int16x8_t)v13;
      v14 = vextq_s8(v12, v6, 6uLL);
      v15 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v14, (uint8x16_t)v6)));
      v16 = (uint8x16_t)vandq_s8(v14, v15);
      v17 = vsubq_s16((int16x8_t)vandq_s8(v15, v9), (int16x8_t)vmvnq_s8(v15));
      v18 = vextq_s8(v12, v6, 8uLL);
      v19 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v18, (uint8x16_t)v6)));
      v20 = (uint8x16_t)vandq_s8(v18, (int8x16_t)v19);
      v21 = vaddw_u8(vaddl_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v6.i8), *(uint8x8_t *)v20.i8);
      v22 = vextq_s8(v12, v6, 0xAuLL);
      v23 = vaddw_high_u8(vaddl_high_u8(v16, (uint8x16_t)v6), v20);
      v24 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v22, (uint8x16_t)v6)));
      v25 = (uint8x16_t)vandq_s8(v22, (int8x16_t)v24);
      v26 = vaddw_u8(v21, *(uint8x8_t *)v25.i8);
      v27 = vaddw_high_u8(v23, v25);
      v28 = vextq_s8(v12, v6, 0xCuLL);
      v29 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v28, (uint8x16_t)v6)));
      v30 = (uint8x16_t)vandq_s8(v28, (int8x16_t)v29);
      v31 = vextq_s8(v12, v6, 0xEuLL);
      v32 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v31, (uint8x16_t)v6)));
      v33 = (uint8x16_t)vandq_s8(v31, (int8x16_t)v32);
      v34 = vaddw_high_u8(v27, v30);
      v35 = vaddw_u8(vaddw_u8(v26, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v33.i8);
      v36 = vextq_s8(v6, v13, 2uLL);
      v37 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v36, (uint8x16_t)v6)));
      v38 = vaddw_high_u8(v34, v33);
      v39 = (uint8x16_t)vandq_s8(v36, (int8x16_t)v37);
      v40 = vextq_s8(v6, v13, 4uLL);
      v41 = vaddw_high_u8(v38, v39);
      v42 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v6)));
      v43 = (uint8x16_t)vandq_s8(v40, (int8x16_t)v42);
      v44 = vaddw_u8(vaddw_u8(v35, *(uint8x8_t *)v39.i8), *(uint8x8_t *)v43.i8);
      v45 = vextq_s8(v6, v13, 6uLL);
      v46 = vaddw_high_u8(v41, v43);
      v47 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v6)));
      v48 = (uint8x16_t)vandq_s8(v45, (int8x16_t)v47);
      v49 = vextq_s8(v6, v13, 8uLL);
      v50 = vaddw_u8(v44, *(uint8x8_t *)v48.i8);
      v51 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v6)));
      v52 = (uint8x16_t)vandq_s8(v49, (int8x16_t)v51);
      v53 = vextq_s8(v6, v13, 0xAuLL);
      v54 = vaddw_high_u8(v46, v48);
      v55 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v6)));
      v56 = vsubq_s16(v17, v19);
      v57 = (uint8x16_t)vandq_s8(v53, (int8x16_t)v55);
      v58 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v56, v24), v29), v32), v37), v42), v47), v51), v55);
      *a2++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(v50, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v57.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v58.i8))), v10)), v11))), (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(v54, v52), v57), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v58))), v10)), v11)));
      v12 = v6;
      --v8;
    }
    while (v8);
  }
  v59 = (int8x16_t)vdupq_laneq_s16(v5, 7);
  v60 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v5)));
  v61 = (uint8x16_t)vandq_s8(v45, v60);
  v62.i64[0] = 0x2000200020002;
  v62.i64[1] = 0x2000200020002;
  v63 = vsubq_s16((int16x8_t)vandq_s8(v60, v62), (int16x8_t)vmvnq_s8(v60));
  v64 = vaddl_u8(*(uint8x8_t *)v61.i8, *(uint8x8_t *)v5.i8);
  v65 = vaddl_high_u8(v61, (uint8x16_t)v5);
  v66 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v49, (uint8x16_t)v5)));
  v67 = (uint8x16_t)vandq_s8(v49, (int8x16_t)v66);
  v68 = vaddw_u8(v64, *(uint8x8_t *)v67.i8);
  v69 = vaddw_high_u8(v65, v67);
  v70 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v53, (uint8x16_t)v5)));
  v71 = (uint8x16_t)vandq_s8(v53, (int8x16_t)v70);
  v72 = vaddw_u8(v68, *(uint8x8_t *)v71.i8);
  v73 = vaddw_high_u8(v69, v71);
  v74 = vextq_s8(v6, (int8x16_t)v5, 0xCuLL);
  v75 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v5)));
  v76 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v75);
  v77 = vaddw_u8(v72, *(uint8x8_t *)v76.i8);
  v78 = vaddw_high_u8(v73, v76);
  v79 = vextq_s8(v6, (int8x16_t)v5, 0xEuLL);
  v80 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v79, (uint8x16_t)v5)));
  v81 = (uint8x16_t)vandq_s8(v79, (int8x16_t)v80);
  v82 = vaddw_u8(v77, *(uint8x8_t *)v81.i8);
  v83 = vaddw_high_u8(v78, v81);
  v84 = vextq_s8((int8x16_t)v5, v59, 2uLL);
  v85 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v84, (uint8x16_t)v5)));
  v86 = (uint8x16_t)vandq_s8(v84, (int8x16_t)v85);
  v87 = vaddw_u8(v82, *(uint8x8_t *)v86.i8);
  v88 = vaddw_high_u8(v83, v86);
  v89 = vextq_s8((int8x16_t)v5, v59, 4uLL);
  v90 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v89, (uint8x16_t)v5)));
  v91 = (uint8x16_t)vandq_s8(v89, (int8x16_t)v90);
  v92 = vaddw_u8(v87, *(uint8x8_t *)v91.i8);
  v93 = vaddw_high_u8(v88, v91);
  v94 = vextq_s8((int8x16_t)v5, v59, 6uLL);
  v95 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v94, (uint8x16_t)v5)));
  v96 = (uint8x16_t)vandq_s8(v94, (int8x16_t)v95);
  v97 = vaddw_u8(v92, *(uint8x8_t *)v96.i8);
  v98 = vaddw_high_u8(v93, v96);
  v99 = vextq_s8((int8x16_t)v5, v59, 8uLL);
  v100 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v99, (uint8x16_t)v5)));
  v101 = (uint8x16_t)vandq_s8(v99, (int8x16_t)v100);
  v102 = vextq_s8((int8x16_t)v5, v59, 0xAuLL);
  v103 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v102, (uint8x16_t)v5)));
  v104 = (uint8x16_t)vandq_s8(v102, (int8x16_t)v103);
  v105 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v63, v66), v70), v75), v80), v85), v90), v95), v100), v103);
  v106 = (int16x8_t)vaddw_u8(vaddw_u8(v97, *(uint8x8_t *)v101.i8), *(uint8x8_t *)v104.i8);
  v107 = (int16x8_t)vaddw_high_u8(vaddw_high_u8(v98, v101), v104);
  v108 = vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v105.i8)));
  v109 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
  v66.i64[0] = 0x1000100010001;
  v66.i64[1] = 0x1000100010001;
  result = (uint16x8_t)vqrdmulhq_s16(v107, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v105))), v109)), (int32x4_t)v66));
  *a2 = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16(v106, (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v108, v109)), (int32x4_t)v66))), result);
  return result;
}

uint16x8_t chromapowerblur17H(int16x4_t *a1, uint8x16_t *a2, int a3, unsigned int a4)
{
  uint16x8_t v4;
  int16x8_t v5;
  int8x16_t v6;
  int8x16_t *v7;
  int v8;
  int8x16_t v9;
  float32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint8x16_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int16x8_t v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  int8x16_t v22;
  int16x8_t v23;
  uint8x16_t v24;
  int8x16_t v25;
  int16x8_t v26;
  uint8x16_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  int16x8_t v31;
  uint16x8_t v32;
  uint8x16_t v33;
  uint16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  int16x8_t v37;
  uint8x16_t v38;
  uint16x8_t v39;
  int8x16_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  uint8x16_t v43;
  uint16x8_t v44;
  int8x16_t v45;
  uint16x8_t v46;
  int16x8_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint16x8_t v50;
  int8x16_t v51;
  int16x8_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  int8x16_t v55;
  int16x8_t v56;
  uint8x16_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  int8x16_t v60;
  int16x8_t v61;
  uint16x8_t v62;
  uint8x16_t v63;
  uint16x8_t v64;
  int8x16_t v65;
  uint16x8_t v66;
  int16x8_t v67;
  uint8x16_t v68;
  uint16x8_t v69;
  int8x16_t v70;
  uint16x8_t v71;
  int16x8_t v72;
  uint8x16_t v73;
  int8x16_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  uint16x8_t v79;
  int16x8_t v80;
  uint8x16_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  uint8x16_t v85;
  uint16x8_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint8x16_t v89;
  int8x16_t v90;
  int16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  uint8x16_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  int16x8_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int16x8_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int16x8_t v106;
  uint8x16_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  int16x8_t v110;
  uint8x16_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  int16x8_t v114;
  uint8x16_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  int16x8_t v118;
  uint8x16_t v119;
  uint16x8_t v120;
  uint16x8_t v121;
  int8x16_t v122;
  int16x8_t v123;
  uint8x16_t v124;
  uint16x8_t v125;
  uint16x8_t v126;
  int8x16_t v127;
  int16x8_t v128;
  uint8x16_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  int8x16_t v132;
  int16x8_t v133;
  uint8x16_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  int8x16_t v137;
  int16x8_t v138;
  uint8x16_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  int8x16_t v142;
  int16x8_t v143;
  uint8x16_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  int8x16_t v147;
  int16x8_t v148;
  uint8x16_t v149;
  uint16x8_t v150;
  uint16x8_t v151;
  int8x16_t v152;
  int16x8_t v153;
  uint8x16_t v154;
  int16x8_t v155;
  uint8x16_t v156;
  uint16x8_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint16x8_t result;

  v4 = (uint16x8_t)vdupq_n_s16(a4);
  v5 = *(int16x8_t *)a1->i8;
  v6 = (int8x16_t)vdupq_lane_s16(*a1, 0);
  if (a3 <= 15)
  {
    v51 = vextq_s8(v6, (int8x16_t)v5, 2uLL);
    v55 = vextq_s8(v6, (int8x16_t)v5, 4uLL);
    v60 = vextq_s8(v6, (int8x16_t)v5, 6uLL);
    v65 = vextq_s8(v6, (int8x16_t)v5, 8uLL);
    v70 = vextq_s8(v6, (int8x16_t)v5, 0xAuLL);
    v74 = vextq_s8(v6, (int8x16_t)v5, 0xCuLL);
    v78 = vextq_s8(v6, (int8x16_t)v5, 0xEuLL);
  }
  else
  {
    v7 = (int8x16_t *)&a1[2];
    v8 = (a3 >> 3) - 1;
    v9.i64[0] = 0x2000200020002;
    v9.i64[1] = 0x2000200020002;
    v10 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
    v11.i64[0] = 0x1000100010001;
    v11.i64[1] = 0x1000100010001;
    do
    {
      v12 = (int8x16_t)v5;
      v13 = *v7++;
      v5 = (int16x8_t)v13;
      v14 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v6, (uint8x16_t)v12)));
      v15 = (uint8x16_t)vandq_s8(v6, v14);
      v16 = vsubq_s16((int16x8_t)vandq_s8(v14, v9), (int16x8_t)vmvnq_s8(v14));
      v17 = vextq_s8(v6, v12, 2uLL);
      v18 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v17, (uint8x16_t)v12)));
      v19 = (uint8x16_t)vandq_s8(v17, (int8x16_t)v18);
      v20 = vaddw_u8(vaddl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v12.i8), *(uint8x8_t *)v19.i8);
      v21 = vaddw_high_u8(vaddl_high_u8(v15, (uint8x16_t)v12), v19);
      v22 = vextq_s8(v6, v12, 4uLL);
      v23 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v22, (uint8x16_t)v12)));
      v24 = (uint8x16_t)vandq_s8(v22, (int8x16_t)v23);
      v25 = vextq_s8(v6, v12, 6uLL);
      v26 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v25, (uint8x16_t)v12)));
      v27 = (uint8x16_t)vandq_s8(v25, (int8x16_t)v26);
      v28 = vaddw_high_u8(v21, v24);
      v29 = vaddw_u8(vaddw_u8(v20, *(uint8x8_t *)v24.i8), *(uint8x8_t *)v27.i8);
      v30 = vextq_s8(v6, v12, 8uLL);
      v31 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v30, (uint8x16_t)v12)));
      v32 = vaddw_high_u8(v28, v27);
      v33 = (uint8x16_t)vandq_s8(v30, (int8x16_t)v31);
      v34 = vaddw_u8(v29, *(uint8x8_t *)v33.i8);
      v35 = vextq_s8(v6, v12, 0xAuLL);
      v36 = vaddw_high_u8(v32, v33);
      v37 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v35, (uint8x16_t)v12)));
      v38 = (uint8x16_t)vandq_s8(v35, (int8x16_t)v37);
      v39 = vaddw_u8(v34, *(uint8x8_t *)v38.i8);
      v40 = vextq_s8(v6, v12, 0xCuLL);
      v41 = vaddw_high_u8(v36, v38);
      v42 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v40, (uint8x16_t)v12)));
      v43 = (uint8x16_t)vandq_s8(v40, (int8x16_t)v42);
      v44 = vaddw_u8(v39, *(uint8x8_t *)v43.i8);
      v45 = vextq_s8(v6, v12, 0xEuLL);
      v46 = vaddw_high_u8(v41, v43);
      v47 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v45, (uint8x16_t)v12)));
      v48 = (uint8x16_t)vandq_s8(v45, (int8x16_t)v47);
      v49 = vaddw_u8(v44, *(uint8x8_t *)v48.i8);
      v50 = vaddw_high_u8(v46, v48);
      v51 = vextq_s8(v12, v13, 2uLL);
      v52 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v12)));
      v53 = (uint8x16_t)vandq_s8(v51, (int8x16_t)v52);
      v54 = vaddw_u8(v49, *(uint8x8_t *)v53.i8);
      v55 = vextq_s8(v12, v13, 4uLL);
      v56 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v55, (uint8x16_t)v12)));
      v57 = (uint8x16_t)vandq_s8(v55, (int8x16_t)v56);
      v58 = vaddw_high_u8(v50, v53);
      v59 = vaddw_u8(v54, *(uint8x8_t *)v57.i8);
      v60 = vextq_s8(v12, v13, 6uLL);
      v61 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v60, (uint8x16_t)v12)));
      v62 = vaddw_high_u8(v58, v57);
      v63 = (uint8x16_t)vandq_s8(v60, (int8x16_t)v61);
      v64 = vaddw_u8(v59, *(uint8x8_t *)v63.i8);
      v65 = vextq_s8(v12, v13, 8uLL);
      v66 = vaddw_high_u8(v62, v63);
      v67 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v12)));
      v68 = (uint8x16_t)vandq_s8(v65, (int8x16_t)v67);
      v69 = vaddw_u8(v64, *(uint8x8_t *)v68.i8);
      v70 = vextq_s8(v12, v13, 0xAuLL);
      v71 = vaddw_high_u8(v66, v68);
      v72 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v12)));
      v73 = (uint8x16_t)vandq_s8(v70, (int8x16_t)v72);
      v74 = vextq_s8(v12, v13, 0xCuLL);
      v75 = vaddw_u8(v69, *(uint8x8_t *)v73.i8);
      v76 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v12)));
      v77 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v76);
      v78 = vextq_s8(v12, v13, 0xEuLL);
      v79 = vaddw_high_u8(v71, v73);
      v80 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v78, (uint8x16_t)v12)));
      v81 = (uint8x16_t)vandq_s8(v78, (int8x16_t)v80);
      v82 = vsubq_s16(v16, v18);
      v83 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v13, (uint8x16_t)v12)));
      v84 = vsubq_s16(v82, v23);
      v85 = (uint8x16_t)vandq_s8(v13, (int8x16_t)v83);
      v86 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v84, v26), v31), v37), v42), v47), v52), v56), v61), v67), v72), v76), v80), v83);
      *a2++ = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(v75, *(uint8x8_t *)v77.i8), *(uint8x8_t *)v81.i8), *(uint8x8_t *)v85.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v86.i8))), v10)), v11))), (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddw_high_u8(v79, v77), v81), v85), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v86))), v10)), v11)));
      v6 = v12;
      --v8;
    }
    while (v8);
    v6 = v12;
  }
  v87 = (int8x16_t)vdupq_laneq_s16(v5, 7);
  v88 = (int8x16_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v6, (uint8x16_t)v5)));
  v89 = (uint8x16_t)vandq_s8(v6, v88);
  v90.i64[0] = 0x2000200020002;
  v90.i64[1] = 0x2000200020002;
  v91 = vsubq_s16((int16x8_t)vandq_s8(v88, v90), (int16x8_t)vmvnq_s8(v88));
  v92 = vaddl_u8(*(uint8x8_t *)v89.i8, *(uint8x8_t *)v5.i8);
  v93 = vaddl_high_u8(v89, (uint8x16_t)v5);
  v94 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v51, (uint8x16_t)v5)));
  v95 = (uint8x16_t)vandq_s8(v51, (int8x16_t)v94);
  v96 = vaddw_u8(v92, *(uint8x8_t *)v95.i8);
  v97 = vaddw_high_u8(v93, v95);
  v98 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v55, (uint8x16_t)v5)));
  v99 = (uint8x16_t)vandq_s8(v55, (int8x16_t)v98);
  v100 = vaddw_u8(v96, *(uint8x8_t *)v99.i8);
  v101 = vaddw_high_u8(v97, v99);
  v102 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v60, (uint8x16_t)v5)));
  v103 = (uint8x16_t)vandq_s8(v60, (int8x16_t)v102);
  v104 = vaddw_u8(v100, *(uint8x8_t *)v103.i8);
  v105 = vaddw_high_u8(v101, v103);
  v106 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v65, (uint8x16_t)v5)));
  v107 = (uint8x16_t)vandq_s8(v65, (int8x16_t)v106);
  v108 = vaddw_u8(v104, *(uint8x8_t *)v107.i8);
  v109 = vaddw_high_u8(v105, v107);
  v110 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v70, (uint8x16_t)v5)));
  v111 = (uint8x16_t)vandq_s8(v70, (int8x16_t)v110);
  v112 = vaddw_u8(v108, *(uint8x8_t *)v111.i8);
  v113 = vaddw_high_u8(v109, v111);
  v114 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v5)));
  v115 = (uint8x16_t)vandq_s8(v74, (int8x16_t)v114);
  v116 = vaddw_u8(v112, *(uint8x8_t *)v115.i8);
  v117 = vaddw_high_u8(v113, v115);
  v118 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v78, (uint8x16_t)v5)));
  v119 = (uint8x16_t)vandq_s8(v78, (int8x16_t)v118);
  v120 = vaddw_u8(v116, *(uint8x8_t *)v119.i8);
  v121 = vaddw_high_u8(v117, v119);
  v122 = vextq_s8((int8x16_t)v5, v87, 2uLL);
  v123 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v122, (uint8x16_t)v5)));
  v124 = (uint8x16_t)vandq_s8(v122, (int8x16_t)v123);
  v125 = vaddw_u8(v120, *(uint8x8_t *)v124.i8);
  v126 = vaddw_high_u8(v121, v124);
  v127 = vextq_s8((int8x16_t)v5, v87, 4uLL);
  v128 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v127, (uint8x16_t)v5)));
  v129 = (uint8x16_t)vandq_s8(v127, (int8x16_t)v128);
  v130 = vaddw_u8(v125, *(uint8x8_t *)v129.i8);
  v131 = vaddw_high_u8(v126, v129);
  v132 = vextq_s8((int8x16_t)v5, v87, 6uLL);
  v133 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v132, (uint8x16_t)v5)));
  v134 = (uint8x16_t)vandq_s8(v132, (int8x16_t)v133);
  v135 = vaddw_u8(v130, *(uint8x8_t *)v134.i8);
  v136 = vaddw_high_u8(v131, v134);
  v137 = vextq_s8((int8x16_t)v5, v87, 8uLL);
  v138 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v137, (uint8x16_t)v5)));
  v139 = (uint8x16_t)vandq_s8(v137, (int8x16_t)v138);
  v140 = vaddw_u8(v135, *(uint8x8_t *)v139.i8);
  v141 = vaddw_high_u8(v136, v139);
  v142 = vextq_s8((int8x16_t)v5, v87, 0xAuLL);
  v143 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v142, (uint8x16_t)v5)));
  v144 = (uint8x16_t)vandq_s8(v142, (int8x16_t)v143);
  v145 = vaddw_u8(v140, *(uint8x8_t *)v144.i8);
  v146 = vaddw_high_u8(v141, v144);
  v147 = vextq_s8((int8x16_t)v5, v87, 0xCuLL);
  v148 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v147, (uint8x16_t)v5)));
  v149 = (uint8x16_t)vandq_s8(v147, (int8x16_t)v148);
  v150 = vaddw_u8(v145, *(uint8x8_t *)v149.i8);
  v151 = vaddw_high_u8(v146, v149);
  v152 = vextq_s8((int8x16_t)v5, v87, 0xEuLL);
  v153 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v152, (uint8x16_t)v5)));
  v154 = (uint8x16_t)vandq_s8(v152, (int8x16_t)v153);
  v155 = (int16x8_t)vcgeq_u16(v4, vpaddlq_u8(vabdq_u8((uint8x16_t)v87, (uint8x16_t)v5)));
  v156 = (uint8x16_t)vandq_s8(v87, (int8x16_t)v155);
  v157 = (uint16x8_t)vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(vsubq_s16(v91, v94), v98), v102), v106), v110), v114), v118), v123), v128), v133), v138), v143),
                           v148),
                         v153),
                       v155);
  v158 = vrecpeq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v157.i8)));
  v159 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
  v98.i64[0] = 0x1000100010001;
  v98.i64[1] = 0x1000100010001;
  result = (uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_high_u8(vaddw_high_u8(v151, v154), v156), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(vrecpeq_f32(vcvtq_f32_u32(vmovl_high_u16(v157))), v159)), (int32x4_t)v98));
  *a2 = vqmovn_high_u16(vqmovn_u16((uint16x8_t)vqrdmulhq_s16((int16x8_t)vaddw_u8(vaddw_u8(v150, *(uint8x8_t *)v154.i8), *(uint8x8_t *)v156.i8), (int16x8_t)vmulq_s32((int32x4_t)vcvtq_u32_f32(vmulq_f32(v158, v159)), (int32x4_t)v98))), result);
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetTypeID()
{
  MEMORY[0x1A858C99C](&FigSharedMemPoolSharedRegionGetTypeID_registerOnce, shmemRegionRegister);
  return sSharedMemRegionID;
}

uint64_t shmemRegionRegister()
{
  uint64_t result;

  sSharedMemRegionClass = 0;
  unk_1ECFEA4B0 = "FigSharedMemPoolSharedRegion";
  qword_1ECFEA4B8 = (uint64_t)shmemRegionInit;
  unk_1ECFEA4C0 = 0;
  qword_1ECFEA4C8 = (uint64_t)shmemRegionFinalize;
  unk_1ECFEA4D0 = 0;
  qword_1ECFEA4D8 = 0;
  unk_1ECFEA4E0 = 0;
  qword_1ECFEA4E8 = (uint64_t)shmemRegionCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sSharedMemRegionID = result;
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetSize(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t FigSharedMemPoolSharedRegionGetOwner(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t FigSharedMemPoolGetTypeID()
{
  MEMORY[0x1A858C99C](&FigSharedMemPoolGetTypeID_registerOnce, shmemPoolRegister);
  return sSharedMemPoolID;
}

uint64_t shmemPoolRegister()
{
  uint64_t result;

  sSharedMemPoolClass = 0;
  *(_QWORD *)algn_1ECFE9F68 = "FigSharedMemoryPool";
  qword_1ECFE9F70 = (uint64_t)shmemPoolInit;
  unk_1ECFE9F78 = 0;
  qword_1ECFE9F80 = (uint64_t)shmemPoolFinalize;
  unk_1ECFE9F88 = 0;
  qword_1ECFE9F90 = 0;
  unk_1ECFE9F98 = 0;
  qword_1ECFE9FA0 = (uint64_t)shmemPoolCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sSharedMemPoolID = result;
  return result;
}

void FigSharedMemPoolGetBlockStats(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a1 && a3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (a2)
    {
      if (v6 >= *a3)
        v6 = *a3;
      if (v6)
      {
        for (i = 0; i != v6; ++i)
        {
          v8 = *(_QWORD *)(a1 + 48) + 24 * i;
          *(_QWORD *)(a2 + 24 * i) = *(_QWORD *)(v8 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
          v9 = *(_QWORD **)v8;
          if (*(_QWORD *)v8)
          {
            v10 = *(_QWORD *)(a1 + 24) + 4;
            v11 = a2 + 24 * i;
            v12 = (_QWORD *)(v11 + 8);
            v13 = (_QWORD *)(v11 + 16);
            do
            {
              if (*(_DWORD *)(v10 + *v9))
                v14 = v12;
              else
                v14 = v13;
              ++*v14;
              v9 = (_QWORD *)v9[1];
            }
            while (v9);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
        }
      }
    }
    *a3 = v6;
  }
}

uint64_t FigSharedMemBlockGetUsableSize(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result - 8) - 16;
  return result;
}

void shmemAllocatorRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef shmemAllocatorCopyDescription(const void *a1)
{
  if (a1)
    return CFCopyDescription(a1);
  else
    return (CFStringRef)CFRetain(CFSTR("<FigSharedMemPool NULL>"));
}

unsigned int *shmemAllocatorReallocate(unsigned int *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v5;
  void *v6;
  void *v7;

  if (a1)
    v5 = *(a1 - 2) - 16;
  else
    v5 = 0;
  if (v5 >= a2)
    return a1;
  if (!a4)
    return 0;
  v6 = (void *)FigSharedMemBlockAllocate(a4, a2);
  v7 = v6;
  if (a1 && v6)
  {
    memcpy(v6, a1, v5);
    FigSharedMemBlockRelease((uint64_t)a1);
  }
  return (unsigned int *)v7;
}

uint64_t shmemAllocatorPreferredSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (!a3)
    return 0;
  if (a1 >= 1 && *(_QWORD *)(a3 + 32) > (unint64_t)a1)
  {
    v3 = shmemPoolLookupSubPool(a3, a1);
    if (v3)
      return *(_QWORD *)(v3 + 16) - 16;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t FigSharedMemBlockGetSharedRegionAddressAndSize(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = result - *(unsigned int *)(result - 4) - 16;
    if (a2)
      *a2 = v3;
    if (a3)
      *a3 = *(unsigned int *)(v3 + 4);
  }
  return result;
}

uint64_t shmemRegionFinalize(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v3 = v1[4];
    if (v3 == getpid())
    {
      v1[3] = 0;
    }
    else
    {
      v1[1] = 0;
      v1[2] = 0;
    }
    return munmap(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
}

CFStringRef shmemRegionCopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigSharedMemPoolSharedRegion %p> {\n  Shared region: %p\n  Shared region size: %zu\n}"), a1, a1[2], a1[3]);
}

void shmemPoolFinalize(_QWORD *a1)
{
  void *v2;
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  const void *v7;

  v2 = (void *)a1[6];
  if (v2)
  {
    v3 = a1[7];
    if (v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD **)(a1[6] + 24 * i);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)v5[1];
            free(v5);
            v5 = v6;
          }
          while (v6);
          v3 = a1[7];
        }
      }
      v2 = (void *)a1[6];
    }
    free(v2);
  }
  v7 = (const void *)a1[2];
  if (v7)
    CFRelease(v7);
}

CFStringRef shmemPoolCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigSharedMemPool %p> {\n}"), a1);
}

void fcsvm_vibeNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  -[FigCaptureSourceVibeMitigation _handleVibeNotification:userInfo:](a2, a3, a5);
}

uint64_t FigCaptureSessionRemoteCancelPrewarm(CFTypeRef cf, CFTypeRef a2)
{
  NSObject *global_queue;
  _QWORD v6[6];

  if (sCaptureSessionRemoteClient)
  {
    captureSessionRemote_cancelPrewarm((uint64_t)cf);
  }
  else
  {
    if (cf)
      CFRetain(cf);
    if (a2)
      CFRetain(a2);
    global_queue = dispatch_get_global_queue(2, 0);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionRemoteCancelPrewarm_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = cf;
    v6[5] = a2;
    dispatch_async(global_queue, v6);
  }
  return 0;
}

uint64_t captureSessionRemote_cancelPrewarm(uint64_t a1)
{
  int v2;

  os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  v2 = objc_msgSend((id)objc_msgSend((id)sPrewarmedBundleIdentifiers, "objectForKeyedSubscript:", a1), "BOOLValue");
  os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
  if (v2)
  {
    if (csr_ensureClientEstablished()
      || FigXPCCreateBasicMessage()
      || a1 && FigXPCMessageSetCFString()
      || FigXPCRemoteClientSendAsyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else if (a1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
      objc_msgSend((id)sPrewarmedBundleIdentifiers, "setObject:forKeyedSubscript:", 0, a1);
      os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmedBundleIdentifiersLock);
    }
  }
  return FigXPCRelease();
}

uint64_t FigCaptureSessionRemoteSetWombatEnabled(BOOL a1)
{
  if (csr_ensureClientEstablished()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_BOOL(0, (const char *)kFigCaptureSessionSetWombatEnabledMessagePayload_Value, a1),
        FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSessionRemoteSetWombatInUse(BOOL a1)
{
  if (csr_ensureClientEstablished()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_BOOL(0, (const char *)kFigCaptureSessionSetWombatInUseMessagePayload_Value, a1),
        FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t csr_deadConnectionCallback(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    result = FigDebugAssert3();
  }
  *(_BYTE *)(v3 + 9) = 1;
  return result;
}

uint64_t captureSessionRemote_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (!*(_BYTE *)(DerivedStorage + 9))
    {
      v3 = FigXPCCreateBasicMessage();
      if ((_DWORD)v3)
      {
        v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        v1 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

void captureSessionRemote_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSessionRemote_Invalidate();
  if (sCaptureSessionRemoteClient)
    FigXPCRemoteClientDisassociateObject();
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
    CFRelease(v5);
  if (!*(_BYTE *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    FigXPCRemoteClientKillServerOnTimeout();
  }
}

__CFString *captureSessionRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureSessionRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>"), a1, v5, v6, v7, *(_QWORD *)DerivedStorage);
  return Mutable;
}

uint64_t captureSessionRemote_CopySectionProperty(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!captureSessionRemote_createBasicMessage(a1))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v2 = 4294954510;
    goto LABEL_6;
  }
  v1 = FigXPCMessageSetCFString();
  if ((_DWORD)v1
    || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1)
    || (v1 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v1))
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_6;
  }
  v2 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSessionRemote_StopRunning(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_FileSinkStartRecording(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  if (objc_msgSend(a3, "outputURL"))
  {
    objc_msgSend(a3, "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

uint64_t captureSessionRemote_FileSinkStopRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_FileSinkPauseRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

uint64_t captureSessionRemote_FileSinkResumeRecording(uint64_t a1)
{
  return captureSessionRemote_commonAsyncMessage(a1);
}

void captureSessionRemote_StillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

void captureSessionRemote_StillImageSinkPrepareToCaptureBracket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

void captureSessionRemote_IrisStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  if (objc_msgSend(a3, "movieURLForOriginalImage"))
  {
    objc_msgSend(a3, "movieURLForOriginalImage");
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

uint64_t captureSessionRemote_IrisStillImageSinkPrepareToCapture(uint64_t a1, uint64_t a2, void *a3)
{
  void *BasicMessage;
  void *v5;

  BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (v5 = (void *)objc_msgSend(a3, "copyXPCEncoding"),
        xpc_dictionary_set_value(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], v5),
        xpc_release(v5),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

void captureSessionRemote_IrisStillImageSinkBeginMomentCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  csr_serializeObjectUsingNSSecureCoding(a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

void captureSessionRemote_IrisStillImageSinkCommitMomentCaptureToStillImageCapture(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void *v6;

  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend(a3, "movieURLForOriginalImage"))
  {
    objc_msgSend(a3, "movieURLForOriginalImage");
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "spatialOverCaptureMovieURL"))
  {
    objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "spatialOverCaptureMovieURL");
    FigSandboxRegisterURLWithProcess();
  }
  v5 = objc_msgSend(a3, "spatialOverCaptureMovieURLForOriginalImage");
  if (v5)
  {
    objc_msgSend(a3, "spatialOverCaptureMovieURLForOriginalImage");
    v5 = FigSandboxRegisterURLWithProcess();
  }
  v6 = (void *)MEMORY[0x1A858DD40](v5);
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v6);
}

void captureSessionRemote_IrisStillImageSinkCommitMomentCaptureToMovieRecording(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  v5 = (void *)MEMORY[0x1A858DD40]();
  if (objc_msgSend(a3, "outputURL"))
  {
    objc_msgSend(a3, "outputURL");
    FigSandboxRegisterURLWithProcess();
  }
  if (objc_msgSend(a3, "spatialOverCaptureMovieURL"))
  {
    objc_msgSend(a3, "spatialOverCaptureMovieURL");
    FigSandboxRegisterURLWithProcess();
  }
  csr_serializeObjectUsingNSSecureCoding((uint64_t)a3);
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v5);
}

uint64_t captureSessionRemote_IrisStillImageSinkCancelMomentCapture(uint64_t a1, uint64_t a2, int64_t a3)
{
  void *BasicMessage;

  BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (xpc_dictionary_set_int64(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], a3),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t captureSessionRemote_IrisStillImageSinkEndMomentCapture(uint64_t a1, uint64_t a2, int64_t a3)
{
  void *BasicMessage;

  BasicMessage = (void *)captureSessionRemote_createBasicMessage(a1);
  if (!BasicMessage
    || FigXPCMessageSetCFString()
    || (xpc_dictionary_set_int64(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], a3),
        FigXPCRemoteClientSendAsyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

void captureSessionRemote_VisionDataSinkTriggerBurst(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  captureSessionRemote_commonAsyncMessage(a1);
  objc_autoreleasePoolPop(v2);
}

uint64_t FigRemoteQueueServerStart(uint64_t a1)
{
  uint64_t result;

  if (a1)
  {
    if (gFigRemoteQueueServerState_0)
    {
      FigDebugAssert3();
      return 4294954514;
    }
    else
    {
      result = 0;
      gFigRemoteQueueServerState_0 = a1;
    }
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

uint64_t FigRemoteQueueServerGetName()
{
  return gFigRemoteQueueServerState_0;
}

uint64_t FigRemoteQueueServerCurrentProcessIsRunningService()
{
  return 1;
}

uint64_t FigRemoteQueueServerAddSender()
{
  return 0;
}

uint64_t FigRemoteQueueServerRegisterIOSurface()
{
  return 0;
}

uint64_t FigRemoteQueueServerReleaseIOSurfaces()
{
  return 0;
}

void sicibmr_renderToPixelBuffer(void *a1, uint64_t a2, __CVBuffer *a3, _QWORD *a4)
{
  double Width;
  void *v9;
  id v10;

  v10 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDE8]), "initWithPixelBuffer:", a3);
  Width = (double)CVPixelBufferGetWidth(a3);
  v9 = (void *)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", a2, v10, a4, 0.0, 0.0, Width, (double)CVPixelBufferGetHeight(a3), 0.0, 0.0);
  if (!*a4)
    objc_msgSend(v9, "waitUntilCompletedAndReturnError:", a4);

}

uint64_t sicibmr_landmarkToC0(uint64_t result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  float v6;
  float v7;

  v4 = *a3 + *a2 * a3[2];
  v5 = 1.0 - (a3[1] + a2[1] * a3[3]);
  *a4 = v4;
  a4[1] = v5;
  switch((int)result)
  {
    case 2:
      *a4 = 1.0 - v4;
      return result;
    case 3:
      *a4 = 1.0 - v4;
      a4[1] = 1.0 - v5;
      return result;
    case 4:
      a4[1] = 1.0 - v5;
      return result;
    case 5:
      v6 = v4;
      goto LABEL_10;
    case 6:
      v7 = v4;
      goto LABEL_8;
    case 7:
      v7 = v4;
      v5 = 1.0 - v5;
LABEL_8:
      v6 = 1.0 - v7;
      goto LABEL_10;
    case 8:
      v6 = v4;
      v5 = 1.0 - v5;
LABEL_10:
      *a4 = v5;
      a4[1] = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigRemoteOperationSenderResetWithApplier(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __FigRemoteOperationSenderResetWithApplier_block_invoke;
  v3[3] = &unk_1E491ED08;
  v3[4] = a2;
  return FigRemoteQueueSenderResetWithApplier(a1, (uint64_t)v3);
}

_DWORD *FigRemoteOperationCleanupMessageData(_DWORD *result)
{
  uint64_t v1;

  if (result && *result == 1919774576)
  {
    v1 = result[1];
    if ((v1 - 7) >= 0xFFFFFFFA)
      return (_DWORD *)roGetCallbacksForOperationType_sRemoteOperationCallbacks[4 * v1 + 3]();
  }
  else
  {
    fig_log_get_emitter();
    return (_DWORD *)FigDebugAssert3();
  }
  return result;
}

uint64_t FigRemoteOperationSenderResetIfFullAndEnqueueOperation(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  return roEnqueue(a1, a2, 1, a3);
}

void roSerializationContextReceiverFinalize_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    v3 = *(const void **)(a2 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a2 + 8) = 0;
    }
    v4 = *(const void **)(a2 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a2 + 16) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    FigSimpleMutexDestroy();
    free((void *)a2);
  }
}

uint64_t roEnqueueDictionaryPayload(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  const void *v10;
  void *MutableCopy;
  pthread_mutex_t **Context;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  const __CFDictionary *Count;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t CacheForName;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const void **v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  const void **v37;
  uint64_t v38;
  const void *Value;
  const void *v40;
  const __CFAllocator *v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  char *v45;
  uint64_t SerializedAtomDataAndSurfaceForSampleBuffer;
  uint64_t v47;
  uint64_t v48;
  uint64_t RemoteAddress;
  const __CFAllocator *v50;
  _OWORD *v51;
  unsigned int v52;
  char *v53;
  const __CFAllocator *v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  CFIndex v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  _QWORD *v71;
  uint64_t v72;
  const void *Region;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  _QWORD *v80;
  uint64_t *v81;
  CFAllocatorRef v82;
  uint64_t v83;
  CFAllocatorRef v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  uint64_t v88;
  const void *v89;
  CFTypeRef v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v85 = a2;
  v10 = *(const void **)(a2 + 24);
  if (v10)
    MutableCopy = (void *)CFRetain(v10);
  else
    MutableCopy = 0;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  v16 = (uint64_t)Context;
  if (Context)
    pthread_mutex_lock(*Context);
  v17 = *(CFTypeRef *)(v16 + 8);
  if (v17)
    v17 = CFRetain(v17);
  v90 = v17;
  Count = *(const __CFDictionary **)(v85 + 32);
  if (Count)
  {
    Count = (const __CFDictionary *)CFDictionaryGetCount(Count);
    v19 = (uint64_t)Count;
  }
  else
  {
    v19 = 0;
  }
  v81 = &v75;
  MEMORY[0x1E0C80A78](Count, v13, v14, v15);
  v21 = (char *)&v75 - ((v20 + 35) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)v85 != 1 || !MutableCopy)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    LODWORD(v64) = 0;
    v59 = 4294950629;
    goto LABEL_70;
  }
  v22 = CFAllocatorAllocate(a1, 64, 0);
  if (!v22)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    LODWORD(v64) = 0;
    v59 = 4294950630;
    goto LABEL_70;
  }
  v79 = a4;
  v75 = v5;
  *(_QWORD *)v21 = v22;
  *((_QWORD *)v21 + 1) = 0;
  v23 = v22;
  v24 = v85;
  *((_DWORD *)v21 + 4) = *(_DWORD *)(v85 + 4);
  v22[2] = 0u;
  v22[3] = 0u;
  *v22 = 0u;
  v22[1] = 0u;
  *(_QWORD *)v22 = 0x1726D6F70;
  *((_QWORD *)v22 + 2) = *(_QWORD *)(v24 + 8);
  *((_QWORD *)v22 + 4) = v22;
  CacheForName = roSerializationContextGetCacheForName(v16, a1, *(const __CFString **)(v24 + 16));
  v80 = v23;
  *((_QWORD *)v23 + 3) = CacheForName;
  if (v19 < 1)
  {
    LODWORD(v64) = 1;
    v60 = v80;
LABEL_40:
    v65 = roSerializePropertyListData(a1, MutableCopy, v60);
    if ((_DWORD)v65)
    {
      v59 = v65;
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_70;
    }
    v66 = (v64 - 1);
    if ((_DWORD)v64 != 1)
    {
      v67 = (uint64_t *)v21;
      do
      {
        v68 = *v67;
        v67 = (uint64_t *)((char *)v67 + 20);
        *(_DWORD *)(v68 + 12) = 1;
        --v66;
      }
      while (v66);
    }
    if (v79)
      v69 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)v21, v64, a5);
    else
      v69 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)v21, v64);
    v59 = v69;
    if ((_DWORD)v69)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_70;
    }
    v70 = *(const void **)(v16 + 8);
    if (v70)
      CFRelease(v70);
    v59 = 0;
    *(_QWORD *)(v16 + 8) = v90;
    v90 = 0;
    goto LABEL_51;
  }
  v76 = a3;
  v77 = a5;
  v83 = v16;
  v84 = a1;
  v78 = &v75;
  MEMORY[0x1E0C80A78](CacheForName, v26, v27, v28);
  v29 = (8 * v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (const void **)((char *)&v75 - v29);
  if ((unint64_t)(8 * v19) >= 0x200)
    v31 = 512;
  else
    v31 = 8 * v19;
  bzero((char *)&v75 - v29, v31);
  MEMORY[0x1E0C80A78](v32, v33, v34, v35);
  v36 = (_DWORD *)((char *)&v75 - v29);
  bzero((char *)&v75 - v29, v31);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v24 + 32), (const void **)((char *)&v75 - v29), (const void **)((char *)&v75 - v29));
  v87 = 1;
  v82 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  v37 = (const void **)((char *)&v75 - v29);
  v38 = v19;
  while (1)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v24 + 24), *v37);
    if (Value)
      break;
LABEL_28:
    v36 += 2;
    ++v37;
    if (!--v38)
    {
      v16 = v83;
      a1 = v84;
      a3 = v76;
      a5 = v77;
      v60 = v80;
      if (!MutableCopy)
      {
        v61 = v85;
        v62 = CFDictionaryGetCount(*(CFDictionaryRef *)(v85 + 24));
        MutableCopy = CFDictionaryCreateMutableCopy(v82, v62, *(CFDictionaryRef *)(v61 + 24));
        do
        {
          v63 = *v30++;
          CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, v63);
          --v19;
        }
        while (v19);
      }
      LODWORD(v64) = v87;
      goto LABEL_40;
    }
  }
  v40 = Value;
  switch(*v36)
  {
    case 0:
    case 1:
      v59 = 4294950633;
      goto LABEL_69;
    case 2:
      v50 = v84;
      v51 = CFAllocatorAllocate(v84, 64, 0);
      if (!v51)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v59 = 4294950630;
        goto LABEL_69;
      }
      v52 = v87;
      v53 = &v21[20 * v87];
      *(_QWORD *)v53 = v51;
      *((_QWORD *)v53 + 1) = v40;
      *((_DWORD *)v53 + 4) = 2;
      v87 = v52 + 1;
      v51[2] = 0u;
      v51[3] = 0u;
      *v51 = 0u;
      v51[1] = 0u;
      *(_QWORD *)v51 = 0x1726D6F70;
      *((_DWORD *)v51 + 2) = 2;
      *((_QWORD *)v51 + 3) = roSerializationContextGetCacheForName(v83, v50, (const __CFString *)*v37);
      v24 = v85;
LABEL_27:
      if (!MutableCopy)
        goto LABEL_28;
      goto LABEL_34;
    case 3:
    case 6:
      v86 = MutableCopy;
      v88 = 0;
      v89 = 0;
      v41 = v84;
      v42 = CFAllocatorAllocate(v84, 64, 0);
      if (!v42)
        goto LABEL_75;
      v43 = v42;
      v44 = v87;
      v45 = &v21[20 * v87];
      *(_QWORD *)v45 = v42;
      *((_QWORD *)v45 + 1) = 0;
      *((_DWORD *)v45 + 4) = 2;
      *((_OWORD *)v42 + 2) = 0u;
      *((_OWORD *)v42 + 3) = 0u;
      *(_OWORD *)v42 = 0u;
      *((_OWORD *)v42 + 1) = 0u;
      *v42 = 0x1726D6F70;
      *((_DWORD *)v42 + 2) = 3;
      v42[3] = roSerializationContextGetCacheForName(v83, v41, (const __CFString *)*v37);
      v87 = v44 + 1;
      SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer();
      if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
        goto LABEL_73;
      v48 = v88;
      v47 = (uint64_t)v89;
      v43[4] = v43;
      v43[5] = v47;
      v43[7] = v48;
      RemoteAddress = FigSharedMemBlockGetRemoteAddress(v47);
      v43[6] = RemoteAddress;
      v24 = v85;
      if (!RemoteAddress)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      goto LABEL_33;
    case 4:
      v86 = MutableCopy;
      v89 = 0;
      v54 = v84;
      v55 = CFAllocatorAllocate(v84, 64, 0);
      if (!v55)
      {
LABEL_75:
        fig_log_get_emitter();
        FigDebugAssert3();
        v59 = 4294950630;
        goto LABEL_79;
      }
      v56 = v55;
      v57 = v87;
      v58 = &v21[20 * v87];
      *(_QWORD *)v58 = v55;
      *((_QWORD *)v58 + 1) = 0;
      *((_DWORD *)v58 + 4) = 2;
      v87 = v57 + 1;
      *((_OWORD *)v55 + 2) = 0u;
      *((_OWORD *)v55 + 3) = 0u;
      *(_OWORD *)v55 = 0u;
      *((_OWORD *)v55 + 1) = 0u;
      *v55 = 0x1726D6F70;
      *((_DWORD *)v55 + 2) = 4;
      v55[4] = v55;
      v55[3] = roSerializationContextGetCacheForName(v83, v54, (const __CFString *)*v37);
      SerializedAtomDataAndSurfaceForSampleBuffer = FigRemote_CreateSerializableDictionaryForFormatDescription();
      if ((_DWORD)SerializedAtomDataAndSurfaceForSampleBuffer)
      {
LABEL_73:
        v59 = SerializedAtomDataAndSurfaceForSampleBuffer;
        fig_log_get_emitter();
        goto LABEL_78;
      }
      v59 = roSerializePropertyListData(v54, v89, v56);
      CFRelease(v89);
      if (!(_DWORD)v59)
      {
LABEL_33:
        MutableCopy = v86;
        if (v86)
        {
LABEL_34:
          CFRelease(MutableCopy);
          MutableCopy = 0;
        }
        goto LABEL_28;
      }
      fig_log_get_emitter();
LABEL_78:
      FigDebugAssert3();
LABEL_79:
      MutableCopy = v86;
LABEL_69:
      v16 = v83;
      a1 = v84;
      LODWORD(v64) = v87;
LABEL_70:
      if (v90)
        CFRelease(v90);
LABEL_51:
      if (MutableCopy)
        CFRelease(MutableCopy);
      if ((_DWORD)v64)
      {
        v64 = v64;
        do
        {
          v71 = *(_QWORD **)v21;
          if (*(_QWORD *)v21)
          {
            if ((_DWORD)v59)
            {
              if ((_QWORD *)v71[4] == v71)
                v72 = 5;
              else
                v72 = 6;
              FigSharedMemBlockRelease(v71[v72]);
              v71[5] = 0;
              v71[6] = 0;
            }
            else
            {
              Region = (const void *)FigSharedMemBlockGetRegion(v71[5]);
              if (Region)
                CFRelease(Region);
            }
            CFAllocatorDeallocate(a1, v71);
          }
          v21 += 20;
          --v64;
        }
        while (v64);
      }
      if (v16)
        pthread_mutex_unlock(*(pthread_mutex_t **)v16);
      return v59;
    default:
      goto LABEL_27;
  }
}

uint64_t roDeserializeDictionaryPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const void *NameForCache;
  const void *v6;
  int v7;
  uint64_t SampleBufferFromSerializedAtomBlockBufferAndSurface;
  uint64_t v9;
  CFTypeRef v10;
  void *v11;
  uint64_t BlockBufferWrapper;
  uint64_t v13;
  CFTypeRef cf;
  void *value;

  v2 = *(_QWORD *)a1;
  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    NameForCache = roSerializationContextGetNameForCache(a2, *(const void **)(v2 + 24));
    if (*(_DWORD *)(v2 + 4) == 1)
    {
      v6 = NameForCache;
      v7 = *(_DWORD *)(a2 + 72);
      if (v7)
      {
        SampleBufferFromSerializedAtomBlockBufferAndSurface = 4294950633;
        switch(*(_DWORD *)(v2 + 8))
        {
          case 0:
          case 1:
            goto LABEL_31;
          case 2:
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 96), NameForCache, *(const void **)(a1 + 8));
            goto LABEL_25;
          case 3:
            cf = 0;
            value = 0;
            BlockBufferWrapper = roCreateBlockBufferWrapper(v2, (CMBlockBufferRef *)&cf);
            if ((_DWORD)BlockBufferWrapper)
              goto LABEL_35;
            SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface();
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if ((_DWORD)SampleBufferFromSerializedAtomBlockBufferAndSurface)
              goto LABEL_38;
            goto LABEL_24;
          case 4:
            cf = 0;
            value = 0;
            v13 = 48;
            if (*(_QWORD *)(v2 + 32) == v2)
              v13 = 40;
            if (!*(_QWORD *)(v2 + v13))
              goto LABEL_33;
            BlockBufferWrapper = roDeserializePropertyListData(v2, 0, &cf);
            if ((_DWORD)BlockBufferWrapper)
            {
LABEL_35:
              SampleBufferFromSerializedAtomBlockBufferAndSurface = BlockBufferWrapper;
              fig_log_get_emitter();
            }
            else
            {
              SampleBufferFromSerializedAtomBlockBufferAndSurface = FigRemote_CreateFormatDescriptionFromSerializedDictionary();
              if (cf)
                CFRelease(cf);
              if (!(_DWORD)SampleBufferFromSerializedAtomBlockBufferAndSurface)
              {
LABEL_24:
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 96), v6, value);
                CFRelease(value);
                goto LABEL_25;
              }
LABEL_38:
              fig_log_get_emitter();
            }
            break;
          default:
            goto LABEL_26;
        }
      }
      else
      {
        value = 0;
        v9 = roDeserializePropertyListData(v2, *(_DWORD *)(v2 + 12) != 0, (CFPropertyListRef *)&value);
        if (!(_DWORD)v9)
        {
          *(_DWORD *)(a2 + 72) = *(_DWORD *)(v2 + 4);
          *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 16);
          *(_QWORD *)(a2 + 80) = *(_QWORD *)(v2 + 16);
          if (v6)
            v10 = CFRetain(v6);
          else
            v10 = 0;
          v11 = value;
          *(_QWORD *)(a2 + 88) = v10;
          *(_QWORD *)(a2 + 96) = v11;
LABEL_25:
          v7 = *(_DWORD *)(a2 + 72);
LABEL_26:
          if (v7 != 1)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          if (*(_DWORD *)(v2 + 12))
            SampleBufferFromSerializedAtomBlockBufferAndSurface = 36;
          else
            SampleBufferFromSerializedAtomBlockBufferAndSurface = 0;
          goto LABEL_31;
        }
        SampleBufferFromSerializedAtomBlockBufferAndSurface = v9;
        fig_log_get_emitter();
      }
      FigDebugAssert3();
    }
    else
    {
LABEL_33:
      fig_log_get_emitter();
      FigDebugAssert3();
      SampleBufferFromSerializedAtomBlockBufferAndSurface = 4294950629;
    }
LABEL_31:
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    return SampleBufferFromSerializedAtomBlockBufferAndSurface;
  }
  roSerializationContextGetNameForCache(0, *(const void **)(v2 + 24));
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294950629;
}

void roCleanupDictionaryPayloadOperation(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (*(_DWORD *)a1 != 1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

uint64_t roEnqueueIOSurface(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  pthread_mutex_t **Context;
  pthread_mutex_t **v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  _QWORD *v22;
  uint64_t v23;
  const void *Region;
  _QWORD v26[2];
  int v27;
  _OWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  v11 = Context;
  if (Context)
    pthread_mutex_lock(*Context);
  if (*(_DWORD *)a2 != 2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v20 = 4294950629;
    goto LABEL_26;
  }
  v12 = CFAllocatorAllocate(a1, 64, 0);
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v20 = 4294950630;
    goto LABEL_26;
  }
  v13 = v12;
  v14 = *(_QWORD *)(a2 + 32);
  v26[0] = v12;
  v26[1] = v14;
  v27 = *(_DWORD *)(a2 + 4);
  v12[2] = 0u;
  v12[3] = 0u;
  *v12 = 0u;
  v12[1] = 0u;
  *(_QWORD *)v12 = 0x2726D6F70;
  *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v12 + 4) = v12;
  *((_QWORD *)v12 + 3) = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  v15 = *(const void **)(a2 + 24);
  if (v15 && (v16 = roSerializePropertyListData(a1, v15, v13), (_DWORD)v16))
  {
    v20 = v16;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v17 = 1;
    if (!*(_QWORD *)(a2 + 40))
      goto LABEL_10;
    *((_DWORD *)v13 + 3) = 1;
    v18 = CFAllocatorAllocate(a1, 64, 0);
    if (v18)
    {
      v28 = v18;
      v29 = *(_QWORD *)(a2 + 40);
      v17 = 2;
      v30 = 2;
      v18[2] = 0u;
      v18[3] = 0u;
      *v18 = 0u;
      v18[1] = 0u;
      *(_QWORD *)v18 = 0x2726D6F70;
      *((_QWORD *)v18 + 2) = *(_QWORD *)(a2 + 8);
LABEL_10:
      if (a4)
        v19 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)v26, v17, a5);
      else
        v19 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)v26, v17);
      v20 = v19;
      if ((_DWORD)v19)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      goto LABEL_15;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    v20 = 4294950630;
  }
  v17 = 1;
LABEL_15:
  v21 = (_QWORD **)v26;
  do
  {
    v22 = *v21;
    if (*v21)
    {
      if ((_DWORD)v20)
      {
        if ((_QWORD *)v22[4] == v22)
          v23 = 5;
        else
          v23 = 6;
        FigSharedMemBlockRelease(v22[v23]);
        v22[5] = 0;
        v22[6] = 0;
      }
      else
      {
        Region = (const void *)FigSharedMemBlockGetRegion(v22[5]);
        if (Region)
          CFRelease(Region);
      }
      CFAllocatorDeallocate(a1, v22);
    }
    v21 = (_QWORD **)((char *)v21 + 20);
    --v17;
  }
  while (v17);
LABEL_26:
  if (v11)
    pthread_mutex_unlock(*v11);
  return v20;
}

uint64_t roDeserializeIOSurface(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void *v9;
  const void *NameForCache;

  if (a2)
  {
    v4 = *(_QWORD *)a1;
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      if (*(_DWORD *)(a2 + 72))
      {
        if (*(_QWORD *)(a2 + 112))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          v5 = *(_QWORD *)(a1 + 8);
        }
        *(_QWORD *)(a2 + 112) = v5;
LABEL_14:
        *(_QWORD *)(a1 + 8) = 0;
        if (*(_DWORD *)(a2 + 72) != 2)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        if (*(_DWORD *)(v4 + 12))
          v6 = 36;
        else
          v6 = 0;
        goto LABEL_19;
      }
      v7 = roDeserializePropertyListData(v4, 0, (CFPropertyListRef *)(a2 + 96));
      if (!(_DWORD)v7)
      {
        v8 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 72) = *(_DWORD *)(v4 + 4);
        *(_DWORD *)(a2 + 76) = v8;
        v9 = *(const void **)(v4 + 24);
        *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 16);
        NameForCache = roSerializationContextGetNameForCache(a2, v9);
        if (NameForCache)
          NameForCache = CFRetain(NameForCache);
        *(_QWORD *)(a2 + 88) = NameForCache;
        if (*(_QWORD *)(a2 + 104))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 8);
        goto LABEL_14;
      }
      v6 = v7;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v6 = 4294950629;
    }
LABEL_19:
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    return v6;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294950629;
}

void roCleanupIOSurfaceOperation(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  if (*(_DWORD *)a1 != 2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

uint64_t roEnqueueFormatDescription(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  pthread_mutex_t **Context;
  pthread_mutex_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t SerializableDictionaryForFormatDescription;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *Region;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  Context = (pthread_mutex_t **)FigRemoteQueueSenderGetContext(a3);
  v11 = Context;
  if (Context)
    pthread_mutex_lock(*Context);
  if (*(_DWORD *)a2 != 4 || !*(_QWORD *)(a2 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v13 = 0;
    v16 = 4294950629;
    goto LABEL_12;
  }
  v12 = CFAllocatorAllocate(a1, 64, 0);
  v13 = v12;
  if (!v12)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v16 = 4294950630;
    goto LABEL_12;
  }
  v20 = v12;
  v21 = 0;
  v22 = *(_DWORD *)(a2 + 4);
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *v12 = 0x4726D6F70;
  v12[2] = *(_QWORD *)(a2 + 8);
  v12[4] = v12;
  v12[3] = roSerializationContextGetCacheForName((uint64_t)v11, a1, *(const __CFString **)(a2 + 16));
  SerializableDictionaryForFormatDescription = FigRemote_CreateSerializableDictionaryForFormatDescription();
  if ((_DWORD)SerializableDictionaryForFormatDescription
    || (SerializableDictionaryForFormatDescription = roSerializePropertyListData(a1, 0, v13),
        (_DWORD)SerializableDictionaryForFormatDescription))
  {
    v16 = SerializableDictionaryForFormatDescription;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_12;
  }
  if (a4)
    v15 = FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a3, (uint64_t)&v20, 1uLL, a5);
  else
    v15 = FigRemoteQueueSenderEnqueueSequence(a3, (uint64_t)&v20, 1uLL);
  v16 = v15;
  if ((_DWORD)v15)
  {
    fig_log_get_emitter();
    goto LABEL_28;
  }
LABEL_12:
  if (v13)
  {
    if ((_DWORD)v16)
    {
      v17 = 6;
      if ((_QWORD *)v13[4] == v13)
        v17 = 5;
      FigSharedMemBlockRelease(v13[v17]);
      v13[5] = 0;
      v13[6] = 0;
    }
    else
    {
      Region = (const void *)FigSharedMemBlockGetRegion(v13[5]);
      if (Region)
        CFRelease(Region);
    }
    CFAllocatorDeallocate(a1, v13);
  }
  if (v11)
    pthread_mutex_unlock(*v11);
  return v16;
}

uint64_t roDeserializeFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t FormatDescriptionFromSerializedDictionary;
  int v7;
  const void *v8;
  const void *NameForCache;
  uint64_t v10;
  CFTypeRef cf;

  v3 = *(_QWORD *)a1;
  cf = 0;
  if (!a2)
    goto LABEL_11;
  pthread_mutex_lock(*(pthread_mutex_t **)a2);
  if (*(_DWORD *)(v3 + 4) != 4)
    goto LABEL_11;
  v5 = 48;
  if (*(_QWORD *)(v3 + 32) == v3)
    v5 = 40;
  if (*(_QWORD *)(v3 + v5))
  {
    FormatDescriptionFromSerializedDictionary = roDeserializePropertyListData(v3, 0, &cf);
    if ((_DWORD)FormatDescriptionFromSerializedDictionary
      || (FormatDescriptionFromSerializedDictionary = FigRemote_CreateFormatDescriptionFromSerializedDictionary(),
          (_DWORD)FormatDescriptionFromSerializedDictionary))
    {
      v10 = FormatDescriptionFromSerializedDictionary;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v7 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(v3 + 4);
      *(_DWORD *)(a2 + 76) = v7;
      v8 = *(const void **)(v3 + 24);
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(v3 + 16);
      NameForCache = roSerializationContextGetNameForCache(a2, v8);
      if (NameForCache)
        NameForCache = CFRetain(NameForCache);
      v10 = 0;
      *(_QWORD *)(a2 + 88) = NameForCache;
    }
  }
  else
  {
LABEL_11:
    fig_log_get_emitter();
    FigDebugAssert3();
    v10 = 4294950629;
  }
  if (cf)
    CFRelease(cf);
  if (a2)
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
  return v10;
}

void roCleanupFormatDescriptionOperation(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_DWORD *)a1 != 4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t __roEnqueue_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v7;
  const void *Region;

  v5 = *(_QWORD *)(a1 + 32);
  if (v5 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v5 + 16))(v5, a2, a3, a4))
    return 1;
  v7 = *a4;
  if (v7 && *(_DWORD *)v7 == 1919774576)
  {
    Region = (const void *)FigSharedMemBlockGetRegion(*(_QWORD *)(v7 + 40));
    if (Region)
      CFRetain(Region);
    FigRemoteOperationCleanupMessageData((_DWORD *)v7);
  }
  return 0;
}

void roSerializationContextSenderFinalize_block_invoke_2(uint64_t a1, uint64_t a2)
{
  const void *v3;
  CFIndex Count;
  CFIndex v5;
  const void **v6;
  size_t v7;
  const void **v8;
  const void *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a2);
    v3 = *(const void **)(a2 + 8);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a2 + 8) = 0;
    }
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 16));
    if (Count)
    {
      v5 = Count;
      v6 = (const void **)((char *)v10 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
      if ((unint64_t)(8 * Count) >= 0x200)
        v7 = 512;
      else
        v7 = 8 * Count;
      bzero((char *)v10 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a2 + 16), 0, v6);
      v8 = v6 - 1;
      do
        FigSharedMemBlockRelease((uint64_t)v8[v5--]);
      while (v5);
    }
    v9 = *(const void **)(a2 + 16);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a2 + 16) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a2);
    FigSimpleMutexDestroy();
    free((void *)a2);
  }
}

void roSerializationContextReset_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t Context;
  uint64_t v3;
  const void *v4;

  Context = FigRemoteQueueSenderGetContext(a2);
  if (Context)
  {
    v3 = Context;
    v4 = *(const void **)(Context + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
}

uint64_t FusionTrackerLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = FusionTrackerLibraryCore_frameworkLibrary;
  v6 = FusionTrackerLibraryCore_frameworkLibrary;
  if (!FusionTrackerLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E491EE38;
    v8 = *(_OWORD *)&off_1E491EE48;
    v1 = _sl_dlopen();
    v4[3] = v1;
    FusionTrackerLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t FusionTrackerLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = FusionTrackerLibraryCore();
  if (!result)
    FusionTrackerLibrary_cold_1(&v1);
  return result;
}

uint64_t getFTCinematicTrackerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTCinematicTrackerClass_softClass;
  v8 = getFTCinematicTrackerClass_softClass;
  if (!getFTCinematicTrackerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTrackerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTCinematicTrackerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTrackerClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTCinematicTracker");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTCinematicTrackerClass_block_invoke_cold_1();
  getFTCinematicTrackerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicTapRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTCinematicTapRequestClass_softClass;
  v8 = getFTCinematicTapRequestClass_softClass;
  if (!getFTCinematicTapRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTapRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTCinematicTapRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTapRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTCinematicTapRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTCinematicTapRequestClass_block_invoke_cold_1();
  getFTCinematicTapRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicTapResponseClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTCinematicTapResponseClass_softClass;
  v8 = getFTCinematicTapResponseClass_softClass;
  if (!getFTCinematicTapResponseClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicTapResponseClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTCinematicTapResponseClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicTapResponseClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTCinematicTapResponse");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTCinematicTapResponseClass_block_invoke_cold_1();
  getFTCinematicTapResponseClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicConfigClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTCinematicConfigClass_softClass;
  v8 = getFTCinematicConfigClass_softClass;
  if (!getFTCinematicConfigClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicConfigClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTCinematicConfigClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicConfigClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTCinematicConfig");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTCinematicConfigClass_block_invoke_cold_1();
  getFTCinematicConfigClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTCinematicInputClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTCinematicInputClass_softClass;
  v8 = getFTCinematicInputClass_softClass;
  if (!getFTCinematicInputClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTCinematicInputClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTCinematicInputClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1CFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTCinematicInputClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTCinematicInput");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTCinematicInputClass_block_invoke_cold_1();
  getFTCinematicInputClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTTapToBoxClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTTapToBoxClass_softClass;
  v8 = getFTTapToBoxClass_softClass;
  if (!getFTTapToBoxClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTTapToBoxClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTTapToBoxClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1D114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTTapToBoxClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTTapToBox");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTTapToBoxClass_block_invoke_cold_1();
  getFTTapToBoxClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTEspressoBufferClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTEspressoBufferClass_softClass;
  v8 = getFTEspressoBufferClass_softClass;
  if (!getFTEspressoBufferClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTEspressoBufferClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTEspressoBufferClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTEspressoBufferClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTEspressoBuffer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTEspressoBufferClass_block_invoke_cold_1();
  getFTEspressoBufferClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getFTMSRScalerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__0;
  v7 = __Block_byref_object_dispose__0;
  v0 = getFTMSRScalerClass_softClass;
  v8 = getFTMSRScalerClass_softClass;
  if (!getFTMSRScalerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getFTMSRScalerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getFTMSRScalerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1D344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFTMSRScalerClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTMSRScaler");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTMSRScalerClass_block_invoke_cold_1();
  getFTMSRScalerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr;
  v6 = getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr;
  if (!getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr)
  {
    v1 = (void *)FusionTrackerLibrary();
    v0 = dlsym(v1, "FTCinematicHighPriorityTrackerOpDescription");
    v4[3] = (uint64_t)v0;
    getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t FTCinematicHighPriorityTrackerOpDescription(uint64_t a1)
{
  uint64_t (*FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc)(uint64_t);

  FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc = (uint64_t (*)(uint64_t))getFTCinematicHighPriorityTrackerOpDescriptionSymbolLoc();
  if (!FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc)
    FTCinematicHighPriorityTrackerOpDescription_cold_1();
  return FTCinematicHighPriorityTrackerOpDescriptionSymbolLoc(a1);
}

void *getkFTInvalidTrackIdSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkFTInvalidTrackIdSymbolLoc_ptr;
  v6 = getkFTInvalidTrackIdSymbolLoc_ptr;
  if (!getkFTInvalidTrackIdSymbolLoc_ptr)
  {
    v1 = (void *)FusionTrackerLibrary();
    v0 = dlsym(v1, "kFTInvalidTrackId");
    v4[3] = (uint64_t)v0;
    getkFTInvalidTrackIdSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkFTInvalidTrackId()
{
  void *v0;

  v0 = getkFTInvalidTrackIdSymbolLoc();
  if (!v0)
    getkFTInvalidTrackId_cold_1();
  return *(_QWORD *)v0;
}

Class __getFTBipartiteMatcherClass_block_invoke(uint64_t a1)
{
  Class result;

  FusionTrackerLibrary();
  result = objc_getClass("FTBipartiteMatcher");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getFTBipartiteMatcherClass_block_invoke_cold_1();
  getFTBipartiteMatcherClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigFlashlightRemoteCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t uint64;
  _QWORD block[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __flashlightRemote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E491EC40;
  block[4] = &v8;
  if (flashlightRemote_ensureClientEstablished_onceToken != -1)
    dispatch_once(&flashlightRemote_ensureClientEstablished_onceToken, block);
  v3 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  if ((_DWORD)v3)
    goto LABEL_17;
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4 || (v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v4))
  {
    v3 = v4;
    fig_log_get_emitter();
LABEL_18:
    FigDebugAssert3();
    goto LABEL_11;
  }
  uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  block[0] = 0;
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v3 = 4294954516;
LABEL_17:
    fig_log_get_emitter();
    goto LABEL_18;
  }
  FigFlashlightGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_17;
  }
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
  FigXPCRemoteClientAssociateObject();
  *a2 = block[0];
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

void __flashlightRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("FlashlightServerDied"));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t flashlightRemote_deadConnectionCallback(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    result = FigDebugAssert3();
  }
  *(_BYTE *)(v3 + 8) = 1;
  return result;
}

uint64_t flashlightRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = sFlashlightRemoteClient;
  if (sFlashlightRemoteClient)
    result = FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *flashlightRemote_CopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFlashlightRemote %p retainCount: %ld allocator: %p, objectID: %lld>"), a1, v5, v6, *DerivedStorage);
  return Mutable;
}

BOOL flashlightRemote_IsAvailable(uint64_t a1)
{
  _BOOL8 v1;
  xpc_object_t xdict;

  xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1635148137, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v1 = 0;
  }
  else
  {
    v1 = xpc_dictionary_get_BOOL(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  }
  FigXPCRelease();
  return v1;
}

BOOL flashlightRemote_IsOverheated(uint64_t a1)
{
  _BOOL8 v1;
  xpc_object_t xdict;

  xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1751474548, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v1 = 0;
  }
  else
  {
    v1 = xpc_dictionary_get_BOOL(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_PowerOn(uint64_t a1)
{
  return flashlightRemote_sendBasicMessage(a1, 1886876209, 0);
}

uint64_t flashlightRemote_PowerOff(uint64_t a1)
{
  return flashlightRemote_sendBasicMessage(a1, 1886876208, 0);
}

uint64_t flashlightRemote_SetLevel(float a1)
{
  void *BasicMessage;
  uint64_t v3;

  BasicMessage = (void *)flashlightRemote_createBasicMessage();
  if (BasicMessage)
  {
    xpc_dictionary_set_double(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], a1);
    v3 = FigXPCRemoteClientSendSyncMessage();
    if ((_DWORD)v3)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v3 = 4294954510;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

float flashlightRemote_GetLevel(uint64_t a1)
{
  float v1;
  xpc_object_t xdict;

  xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1735161452, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v1 = 0.0;
  }
  else
  {
    v1 = xpc_dictionary_get_double(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_SetBeamWidth(float a1)
{
  void *BasicMessage;
  uint64_t v3;

  BasicMessage = (void *)flashlightRemote_createBasicMessage();
  if (BasicMessage)
  {
    xpc_dictionary_set_double(BasicMessage, (const char *)*MEMORY[0x1E0CA36B0], a1);
    v3 = FigXPCRemoteClientSendSyncMessage();
    if ((_DWORD)v3)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v3 = 4294954510;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

float flashlightRemote_GetBeamWidth(uint64_t a1)
{
  float v1;
  xpc_object_t xdict;

  xdict = 0;
  if (flashlightRemote_sendBasicMessage(a1, 1735879012, &xdict))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v1 = 0.0;
  }
  else
  {
    v1 = xpc_dictionary_get_double(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  }
  FigXPCRelease();
  return v1;
}

uint64_t flashlightRemote_NotifyForCurrentState()
{
  if (!flashlightRemote_createBasicMessage() || FigXPCRemoteClientSendAsyncMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigXPCRelease();
}

uint64_t flashlightRemote_sendBasicMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!flashlightRemote_createBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = 4294954510;
    goto LABEL_8;
  }
  if (!a3)
  {
    v5 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v5)
      goto LABEL_8;
    fig_log_get_emitter();
LABEL_14:
    FigDebugAssert3();
    goto LABEL_8;
  }
  if (*a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = 4294954516;
    goto LABEL_8;
  }
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
  {
    v5 = v4;
    fig_log_get_emitter();
    goto LABEL_14;
  }
  if (*a3)
  {
    v5 = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = 4294954513;
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t flashlightRemote_createBasicMessage()
{
  CMBaseObjectGetDerivedStorage();
  if (FigXPCCreateBasicMessage())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

uint64_t FigFlashlightCreate(uint64_t a1, uint64_t a2, uint64_t a3, const __CFString *a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  int v11;
  CFStringRef Copy;
  void *v13;
  void *v14;
  size_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  _QWORD v23[5];
  _QWORD v24[5];
  uint64_t v25;

  v25 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigFlashlightGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
  {
    FigDebugAssert3();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v10 = DerivedStorage;
    *(_QWORD *)(DerivedStorage + 72) = a2;
    if (a2 == 1)
      v11 = 2;
    else
      v11 = 3;
    *(_DWORD *)(DerivedStorage + 44) = v11;
    *(_BYTE *)(DerivedStorage + 48) = a2 != 1;
    *(_BYTE *)(DerivedStorage + 49) = a2 == 2;
    *(_DWORD *)(DerivedStorage + 96) = a3;
    if (a4)
    {
      Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
      *(_QWORD *)(v10 + 104) = Copy;
      v13 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%p[%d][%@]>"), v25, *(unsigned int *)(v10 + 96), Copy);
    }
    else
    {
      v13 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%p[%d]>"), v25, a3, v21);
    }
    v14 = v13;
    v15 = objc_msgSend(v13, "lengthOfBytesUsingEncoding:", 4) + 1;
    v16 = malloc_type_malloc(v15, 0x4F07FE63uLL);
    *(_QWORD *)(v10 + 112) = v16;
    objc_msgSend(v14, "getCString:maxLength:encoding:", v16, v15, 4);
    *(_QWORD *)v10 = dispatch_queue_create("com.apple.coremedia.flashlight.notificationQueue", 0);
    *(_QWORD *)(v10 + 8) = dispatch_queue_create("com.apple.coremedia.flashlight.powerQueue", 0);
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 80) = FigSimpleMutexCreate();
    *(_QWORD *)(v10 + 88) = objc_alloc_init(FigCaptureThermalMonitor);
    v17 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", v25);
    v18 = MEMORY[0x1E0C809B0];
    v19 = *(void **)(v10 + 88);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __FigFlashlightCreate_block_invoke;
    v24[3] = &unk_1E491EEA8;
    v24[4] = v17;
    objc_msgSend(v19, "setThermalHandler:", v24);
    v23[0] = v18;
    v23[1] = 3221225472;
    v23[2] = __FigFlashlightCreate_block_invoke_2;
    v23[3] = &unk_1E491EAC8;
    v23[4] = v17;
    *(_QWORD *)(v10 + 16) = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "addObserverForName:object:queue:usingBlock:", 0x1E4945058, 0, 0, v23);
    *a5 = v25;
  }
  return v8;
}

void flashlight_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  void *v4;
  NSObject *v5;
  void (*v6)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *(_QWORD *)(DerivedStorage + 16));

  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 80) = 0;
  flashlight_teardownDevice(a1, 0);
  v3 = *(const void **)(DerivedStorage + 104);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v4 = *(void **)(DerivedStorage + 112);
  if (v4)
  {
    *(_QWORD *)(DerivedStorage + 112) = 0;
    free(v4);
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 8);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (a1)
  {
    v6 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v6)
      v6(a1);
  }
}

__CFString *flashlight_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigFlashlight %p retainCount: %ld allocator: %p, "), a1, v4, v5);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t flashlight_IsAvailable()
{
  return objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56));
}

BOOL flashlight_IsOverheated()
{
  float v0;

  objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 88), "maxTorchLevel");
  return v0 < 1.0;
}

uint64_t flashlight_PowerOn()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  if (*(_QWORD *)(DerivedStorage + 56))
    v1 = 0;
  else
    v1 = flashlight_setupDevice();
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_PowerOff(const void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  if (*(float *)(DerivedStorage + 24) <= 0.0)
    flashlight_teardownDevice(a1, 1);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return 0;
}

uint64_t flashlight_SetLevel(const void *a1, float a2)
{
  uint64_t DerivedStorage;
  float v5;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  objc_msgSend(*(id *)(DerivedStorage + 88), "maxTorchLevel");
  if (a2 > 1.0)
    a2 = v5;
  if (a2 > v5)
  {
    FigDebugAssert3();
    v7 = 4294950766;
  }
  else
  {
    if (a2 > 0.0 && !*(_QWORD *)(DerivedStorage + 64))
    {
      v6 = flashlight_setupDevice();
      if ((_DWORD)v6)
      {
        v7 = v6;
LABEL_14:
        FigDebugAssert3();
        goto LABEL_11;
      }
    }
    if (a2 == *(float *)(DerivedStorage + 24))
    {
      v7 = 0;
    }
    else
    {
      v7 = flashlight_setLevelInternal(a1, a2);
      if ((_DWORD)v7)
        goto LABEL_14;
    }
  }
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v7;
}

float flashlight_GetLevel()
{
  uint64_t DerivedStorage;
  float v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  v1 = *(float *)(DerivedStorage + 24);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_SetBeamWidth(const void *a1, float a2)
{
  uint64_t DerivedStorage;
  float v5;
  float v6;
  uint64_t v7;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  v5 = 1.0;
  if (a2 <= 1.0)
    v5 = a2;
  if (v5 >= 0.0)
    v6 = v5;
  else
    v6 = 0.0;
  if (v6 != *(float *)(DerivedStorage + 28))
  {
    v7 = CMBaseObjectGetDerivedStorage();
    *(float *)&v8 = v6;
    v9 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
    FigSimpleMutexCheckIsLockedOnThisThread();
    v10 = *(void **)(v7 + 64);
    if (v10)
    {
      v11 = objc_msgSend(v10, "setProperty:value:", *MEMORY[0x1E0D07838], v9);
      if ((_DWORD)v11)
      {
        v12 = v11;
        FigDebugAssert3();
        goto LABEL_11;
      }
    }
    *(float *)(v7 + 28) = v6;
    flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightBeamWidth"), v9);
  }
  v12 = 0;
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v12;
}

float flashlight_GetBeamWidth()
{
  uint64_t DerivedStorage;
  float v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  v1 = *(float *)(DerivedStorage + 28);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
  return v1;
}

uint64_t flashlight_NotifyForCurrentState(const void *a1)
{
  uint64_t DerivedStorage;
  float v3;
  uint64_t v4;
  double v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 80));
  objc_msgSend(*(id *)(DerivedStorage + 88), "maxTorchLevel");
  flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightOverheated"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3 < 1.0));
  v4 = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "activeDefaultDeviceEquals:", *(_QWORD *)(DerivedStorage + 56));
  flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightAvailable"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4));
  LODWORD(v5) = *(_DWORD *)(DerivedStorage + 24);
  flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightLevel"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5));
  return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 80));
}

uint64_t flashlight_setupDevice()
{
  uint64_t DerivedStorage;
  int IsWombatEnabled;
  void *v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  unsigned int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  v11 = 0;
  IsWombatEnabled = FigCaptureIsWombatEnabled(&v11);
  if (v11)
    goto LABEL_19;
  if (IsWombatEnabled)
    return -12782;
  v2 = (void *)MEMORY[0x1A858DD40]();
  *(_DWORD *)(DerivedStorage + 40) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "registerClientWithPID:clientDescription:clientPriority:canStealFromClientsWithSamePriority:deviceSharingWithOtherClientsAllowed:deviceAvailabilityChangedHandler:", *(unsigned int *)(DerivedStorage + 96), CFSTR("FigFlashlight"), *(unsigned int *)(DerivedStorage + 44), *(unsigned __int8 *)(DerivedStorage + 48), *(unsigned __int8 *)(DerivedStorage + 49), 0);
  *(_QWORD *)(DerivedStorage + 56) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "copyDeviceForClient:informClientWhenDeviceAvailableAgain:error:", *(unsigned int *)(DerivedStorage + 40), 0, &v11);
  if (v11)
  {
    FigDebugAssert3();
    objc_autoreleasePoolPop(v2);
    return v11;
  }
  *(_QWORD *)(DerivedStorage + 64) = objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "copyStreamWithoutControlFromDevice:position:deviceType:error:", *(_QWORD *)(DerivedStorage + 56), 1, 2, &v11);
  if (v11)
  {
    objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", *(_QWORD *)(DerivedStorage + 56), *(unsigned int *)(DerivedStorage + 40), 0, 0);
    v3 = *(const void **)(DerivedStorage + 56);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
  }
  objc_autoreleasePoolPop(v2);
  if (!*(_QWORD *)(DerivedStorage + 56))
  {
LABEL_19:
    FigDebugAssert3();
    return v11;
  }
  v4 = (void *)objc_msgSend(*(id *)(DerivedStorage + 64), "supportedProperties");
  v5 = *MEMORY[0x1E0D07568];
  if (objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D07568]))
  {
    if (*(_QWORD *)(DerivedStorage + 72) == 1)
      v6 = MEMORY[0x1E0C9AAB0];
    else
      v6 = MEMORY[0x1E0C9AAA0];
    v11 = objc_msgSend(*(id *)(DerivedStorage + 64), "setProperty:value:", v5, v6);
  }
  v7 = (void *)objc_msgSend(*(id *)(DerivedStorage + 64), "supportedProperties");
  v8 = *MEMORY[0x1E0D07838];
  if (objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D07838]))
  {
    LODWORD(v9) = *(_DWORD *)(DerivedStorage + 28);
    return objc_msgSend(*(id *)(DerivedStorage + 64), "setProperty:value:", v8, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9));
  }
  return v11;
}

uint64_t flashlight_setLevelInternal(const void *a1, float a2)
{
  uint64_t DerivedStorage;
  id v5;
  double v6;
  void *v7;
  void *v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = objc_alloc(MEMORY[0x1E0CB37E8]);
  *(float *)&v6 = a2;
  v7 = (void *)objc_msgSend(v5, "initWithFloat:", v6);
  FigSimpleMutexCheckIsLockedOnThisThread();
  v8 = *(void **)(DerivedStorage + 64);
  if (v8
    && (v9 = objc_msgSend(v8, "setProperty:value:", *MEMORY[0x1E0D07840], v7),
        flashlight_handleSystemSleepPrevention(a2, (uint64_t)a1, v9),
        (_DWORD)v9))
  {
    FigDebugAssert3();
  }
  else
  {
    *(float *)(DerivedStorage + 24) = a2;
    flashlight_postNotificationWithPayload(a1, CFSTR("FlashlightLevel"), v7);
    v9 = 0;
  }

  return v9;
}

uint64_t AppleDepthLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = AppleDepthLibraryCore_frameworkLibrary;
  v6 = AppleDepthLibraryCore_frameworkLibrary;
  if (!AppleDepthLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E491EF18;
    v8 = *(_OWORD *)&off_1E491EF28;
    v1 = _sl_dlopen();
    v4[3] = v1;
    AppleDepthLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1FEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AppleDepthLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = AppleDepthLibraryCore();
  if (!result)
    AppleDepthLibrary_cold_1(&v1);
  return result;
}

uint64_t getADMonocularPipelineParametersClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADMonocularPipelineParametersClass_softClass;
  v8 = getADMonocularPipelineParametersClass_softClass;
  if (!getADMonocularPipelineParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADMonocularPipelineParametersClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADMonocularPipelineParametersClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E1FFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMonocularPipelineParametersClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADMonocularPipelineParameters");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADMonocularPipelineParametersClass_block_invoke_cold_1();
  getADMonocularPipelineParametersClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADMonocularPipelineClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADMonocularPipelineClass_softClass;
  v8 = getADMonocularPipelineClass_softClass;
  if (!getADMonocularPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADMonocularPipelineClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADMonocularPipelineClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E2010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMonocularPipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADMonocularPipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADMonocularPipelineClass_block_invoke_cold_1();
  getADMonocularPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADMutableJasperPointCloudClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADMutableJasperPointCloudClass_softClass;
  v8 = getADMutableJasperPointCloudClass_softClass;
  if (!getADMutableJasperPointCloudClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADMutableJasperPointCloudClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADMutableJasperPointCloudClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E20224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADMutableJasperPointCloudClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADMutableJasperPointCloud");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADMutableJasperPointCloudClass_block_invoke_cold_1();
  getADMutableJasperPointCloudClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperPointCloudClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADJasperPointCloudClass_softClass;
  v8 = getADJasperPointCloudClass_softClass;
  if (!getADJasperPointCloudClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADJasperPointCloudClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADJasperPointCloudClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E2033C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperPointCloudClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADJasperPointCloud");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADJasperPointCloudClass_block_invoke_cold_1();
  getADJasperPointCloudClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADCameraCalibrationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADCameraCalibrationClass_softClass;
  v8 = getADCameraCalibrationClass_softClass;
  if (!getADCameraCalibrationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADCameraCalibrationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADCameraCalibrationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E20454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADCameraCalibrationClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADCameraCalibration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADCameraCalibrationClass_block_invoke_cold_1();
  getADCameraCalibrationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADPolynomialsLensDistortionModelClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADPolynomialsLensDistortionModelClass_softClass;
  v8 = getADPolynomialsLensDistortionModelClass_softClass;
  if (!getADPolynomialsLensDistortionModelClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADPolynomialsLensDistortionModelClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADPolynomialsLensDistortionModelClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E2056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADPolynomialsLensDistortionModelClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADPolynomialsLensDistortionModel");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADPolynomialsLensDistortionModelClass_block_invoke_cold_1();
  getADPolynomialsLensDistortionModelClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperColorStillsExecutorClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADJasperColorStillsExecutorClass_softClass;
  v8 = getADJasperColorStillsExecutorClass_softClass;
  if (!getADJasperColorStillsExecutorClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADJasperColorStillsExecutorClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADJasperColorStillsExecutorClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E20684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperColorStillsExecutorClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADJasperColorStillsExecutor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADJasperColorStillsExecutorClass_block_invoke_cold_1();
  getADJasperColorStillsExecutorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADJasperColorV2ExecutorClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADJasperColorV2ExecutorClass_softClass;
  v8 = getADJasperColorV2ExecutorClass_softClass;
  if (!getADJasperColorV2ExecutorClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADJasperColorV2ExecutorClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADJasperColorV2ExecutorClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E2079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADJasperColorV2ExecutorClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADJasperColorV2Executor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADJasperColorV2ExecutorClass_block_invoke_cold_1();
  getADJasperColorV2ExecutorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoPipelineClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADStereoPipelineClass_softClass;
  v8 = getADStereoPipelineClass_softClass;
  if (!getADStereoPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADStereoPipelineClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADStereoPipelineClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E208B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoPipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADStereoPipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADStereoPipelineClass_block_invoke_cold_1();
  getADStereoPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoV2PipelineClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADStereoV2PipelineClass_softClass;
  v8 = getADStereoV2PipelineClass_softClass;
  if (!getADStereoV2PipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADStereoV2PipelineClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADStereoV2PipelineClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E209CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoV2PipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADStereoV2Pipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADStereoV2PipelineClass_block_invoke_cold_1();
  getADStereoV2PipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getADStereoV2PipelineParametersClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__1;
  v7 = __Block_byref_object_dispose__1;
  v0 = getADStereoV2PipelineParametersClass_softClass;
  v8 = getADStereoV2PipelineParametersClass_softClass;
  if (!getADStereoV2PipelineParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getADStereoV2PipelineParametersClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getADStereoV2PipelineParametersClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E20AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getADStereoV2PipelineParametersClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADStereoV2PipelineParameters");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADStereoV2PipelineParametersClass_block_invoke_cold_1();
  getADStereoV2PipelineParametersClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getADPCEDisparityColorPipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  AppleDepthLibrary();
  result = objc_getClass("ADPCEDisparityColorPipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getADPCEDisparityColorPipelineClass_block_invoke_cold_1();
  getADPCEDisparityColorPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigFlatDictionaryKeyGetIdentifier(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t FigFlatDictionaryKeyGetValueType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

void *FigFlatDictionaryKeySpaceRegister(unsigned int a1, int a2)
{
  void *result;
  int v5;
  void *v6;
  CFMutableSetRef Mutable;
  uint64_t v8;

  if (sKeySpaceLockCreateOnceToken != -1)
    dispatch_once_f(&sKeySpaceLockCreateOnceToken, 0, (dispatch_function_t)figFlatDictionaryKeySpaceCreateKeySpaceLockOnce);
  pthread_mutex_lock((pthread_mutex_t *)sKeySpaceLock);
  result = (void *)sKeySpaces;
  if (sKeySpaces)
  {
    v5 = sKeySpacesInternalCount;
  }
  else
  {
    sKeySpaces = (uint64_t)malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    sKeySpaceNames = (uint64_t)malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
    v5 = 4;
    sKeySpacesInternalCount = 4;
    result = (void *)sKeySpaces;
  }
  if (sKeySpacesCount == v5)
  {
    sKeySpaces = (uint64_t)malloc_type_realloc(result, 8 * (v5 + 4), 0x6004044C4A2DFuLL);
    v6 = malloc_type_realloc((void *)sKeySpaceNames, 4 * sKeySpacesInternalCount + 16, 0x100004052888210uLL);
    sKeySpaceNames = (uint64_t)v6;
    sKeySpacesInternalCount += 4;
    result = (void *)sKeySpaces;
  }
  else
  {
    v6 = (void *)sKeySpaceNames;
  }
  if (result && v6)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, &sFigFlatDictionaryKeyCFSetCallbacks);
    v8 = sKeySpacesCount;
    *(_QWORD *)(sKeySpaces + 8 * sKeySpacesCount) = Mutable;
    *(_DWORD *)(sKeySpaceNames + 4 * v8) = a2;
    sKeySpacesCount = v8 + 1;
    pthread_mutex_unlock((pthread_mutex_t *)sKeySpaceLock);
    return (void *)(sKeySpacesCount - 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t figFlatDictionaryKeySpaceCreateKeySpaceLockOnce()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  sKeySpaceLock = result;
  return result;
}

BOOL FigFlatDictionaryKeySpaceIsValid(int a1)
{
  return a1 > 0 && sKeySpacesCount > a1;
}

uint64_t FigFlatDictionaryKeySpaceGetKeySpaceWithLabel(int a1)
{
  uint64_t v1;

  if (sKeySpacesCount < 2)
    return 0;
  v1 = 1;
  while (*(_DWORD *)(sKeySpaceNames + 4 * v1) != a1)
  {
    if (sKeySpacesCount == ++v1)
      return 0;
  }
  return v1;
}

uint64_t FigFlatDictionaryKeyRegisterExistingKey(int a1, int *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    if (a2[1] && *a2)
    {
      return 0;
    }
    else
    {
      v5 = a2[4];
      if ((v5 - 7) >= 3)
        v6 = kFigFlatDictionaryValueSizes[v5];
      else
        v6 = *((_QWORD *)a2 + 3) + 4;
      *((_QWORD *)a2 + 3) = v6;
      a2[1] = CFSetGetCount(*(CFSetRef *)(sKeySpaces + 8 * a1));
      CFSetAddValue(*(CFMutableSetRef *)(sKeySpaces + 8 * a1), a2);
      *a2 = a1;
      return 1;
    }
  }
  return result;
}

_DWORD *FigFlatDictionaryKeyRegisterNewKey(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v5;

  v5 = 0;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    v5 = malloc_type_calloc(1uLL, 0x28uLL, 0x10D004010E3ED91uLL);
    v5[4] = a3;
    *((_QWORD *)v5 + 1) = a2;
    *((_QWORD *)v5 + 3) = a4;
    *((_QWORD *)v5 + 4) = a5;
    if ((FigFlatDictionaryKeyRegisterExistingKey(a1, v5) & 1) == 0)
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

const void *FigFlatDictionaryKeyLookupFromIdentifier(int a1, uint64_t a2)
{
  const void *result;
  _DWORD value[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 0;
  value[0] = a1;
  value[1] = 0;
  v7 = 0;
  v8 = 0;
  v5 = a2;
  if (a1 >= 1 && sKeySpacesCount > a1)
  {
    v6 = 0;
    return CFSetGetValue(*(CFSetRef *)(sKeySpaces + 8 * a1), value);
  }
  return result;
}

CFStringRef flatDictionaryKey_CFSetCallbackCopyDescription(uint64_t a1)
{
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const char **)(a1 + 8), 0x8000100u);
}

BOOL flatDictionaryKey_CFSetCallbackEqual(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) == 0;
}

uint64_t flatDictionaryKey_CFSetCallbackHash(uint64_t a1)
{
  _BYTE *v1;
  char v2;
  uint64_t result;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *v1;
  if (!*v1)
    return 0;
  result = 0;
  v4 = v1 + 1;
  do
  {
    result = 65599 * result + v2;
    v5 = *v4++;
    v2 = v5;
  }
  while (v5);
  return result;
}

double acpr_conformRectForMSR420vf(double a1, double a2, double a3, double a4)
{
  float v7;
  double v8;
  float v9;
  float v10;
  float v11;

  v7 = a1;
  v8 = (double)(int)FigCaptureRoundFloatToMultipleOf(1, v7);
  v9 = a2;
  FigCaptureRoundFloatToMultipleOf(1, v9);
  v10 = a3;
  FigCaptureRoundFloatToMultipleOf(2, v10);
  v11 = a4;
  FigCaptureRoundFloatToMultipleOf(2, v11);
  return v8;
}

void sub_1A2E27610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1A2E277DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2E27AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

double ptn_rectBoundedByDimensions(int a1, double result, double a3, double a4)
{
  if (a4 > (double)a1)
    a4 = (double)a1;
  if (a4 < 0.0)
    a4 = 0.0;
  if ((double)a1 - a4 < result)
    result = (double)a1 - a4;
  if (result < 0.0)
    return 0.0;
  return result;
}

void sub_1A2E2A6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

double ptn_rotateRect(int a1, _OWORD *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  __int128 v18;
  double v19;
  double v20;
  CGAffineTransform v22;

  if (a1)
  {
    a3 = (a3 * a7 - a11) / a13;
    a4 = (a4 * a8 - a12) / a14;
    a5 = a5 * a7 / a13;
    a6 = a6 * a8 / a14;
  }
  v18 = a2[1];
  *(_OWORD *)&v22.a = *a2;
  *(_OWORD *)&v22.c = v18;
  *(_OWORD *)&v22.tx = a2[2];
  v19 = COERCE_DOUBLE(CGRectApplyAffineTransform(*(CGRect *)&a3, &v22));
  if (v19 <= 1.0)
    v20 = v19;
  else
    v20 = 1.0;
  if (v19 >= 0.0)
    return v20;
  else
    return 0.0;
}

Class __getHDRProcessorClass_block_invoke(uint64_t a1)
{
  Class result;

  HDRProcessingLibrary();
  result = objc_getClass("HDRProcessor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getHDRProcessorClass_block_invoke_cold_1();
  getHDRProcessorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t HDRProcessingLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!HDRProcessingLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E491F038;
    v3 = 0;
    HDRProcessingLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!HDRProcessingLibraryCore_frameworkLibrary)
    HDRProcessingLibrary_cold_1(&v1);
  return HDRProcessingLibraryCore_frameworkLibrary;
}

double msn_getOriginalPTSForSampleBuffer@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  const __CFDictionary *v6;
  CMTime v8;

  v3 = MEMORY[0x1E0CA2E18];
  v4 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  if (a1)
  {
    v6 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
    if (v6)
      CMTimeMakeFromDictionary(&v8, v6);
    else
      CMSampleBufferGetPresentationTimeStamp(&v8, (CMSampleBufferRef)a1);
    *(_QWORD *)&v4 = v8.value;
    *(CMTime *)a2 = v8;
  }
  return *(double *)&v4;
}

uint64_t pbp_scanIOSurfacesCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

id makeLocalDefaultsWrites()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_opt_new();
  getPrefs();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "addPointer:", v0);

  return v0;
}

uint64_t determineReferenceFrameIndex(CMAttachmentBearerRef *a1, int a2, unsigned int a3, int *a4)
{
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  BOOL v14;
  void *v15;
  char v16;
  int v17;
  void *v18;
  uint64_t v19;
  int *v20;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  float v26;
  float v27;
  void *v29;
  int v30;
  int v31;

  v29 = (void *)objc_opt_new();
  v30 = a2;
  v31 = -1;
  if (a2 >= 1)
  {
    v7 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v8 = *MEMORY[0x1E0D06910];
    v9 = *MEMORY[0x1E0D06D10];
    v10 = a2;
    do
    {
      CMGetAttachment(*a1, v7, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKeyedSubscript:", v8);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "intValue");

      v14 = (a3 == 7 || a3 == 2) && v13 == v30;
      objc_msgSend(v11, "objectForKeyedSubscript:", v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "BOOLValue");

      if ((v16 & 1) == 0 && !v14)
        objc_msgSend(v29, "addObject:", v11);

      ++a1;
      --v10;
    }
    while (v10);
  }
  v17 = -1;
  if (a3 > 9)
  {
    v19 = 0xFFFFFFFFLL;
    v20 = a4;
    v18 = v29;
  }
  else
  {
    v18 = v29;
    if (((1 << a3) & 0xC6) != 0)
    {
      v19 = FigCaptureReferenceFrameSelection((const __CFArray *)v29, &v31);
      v17 = v31;
      v20 = a4;
    }
    else
    {
      v19 = 0xFFFFFFFFLL;
      v20 = a4;
      if (a3 == 9 && objc_msgSend(v29, "count"))
      {
        v22 = 0;
        v23 = *MEMORY[0x1E0D06A10];
        do
        {
          objc_msgSend(v29, "objectAtIndexedSubscript:", v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "objectForKeyedSubscript:", v23);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "floatValue");
          v27 = v26;

          if (v27 >= 0.0)
          {
            v19 = v19;
          }
          else
          {
            v17 = v22;
            v19 = 0;
          }
          ++v22;
        }
        while (v22 < objc_msgSend(v29, "count"));
      }
    }
  }
  *v20 = v17;

  return v19;
}

double makeChromaROI(double a1)
{
  return (double)((int)a1 >> 1);
}

void __extractSubset_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v6 = a2;
  v5 = a3;
  if (objc_msgSend(v6, "hasPrefix:", *(_QWORD *)(a1 + 32)))
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v5, v6);

}

uint64_t FigCapturePlatformReconfigure(uint64_t a1, int a2)
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return fcp_reconfigurePlatformWithOverride(a1, a2, 1);
}

uint64_t FigCapturePlatformSupportsHTPC32x4Compression()
{
  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  return sPlatformSupportsHTPC32x4Compression;
}

uint64_t FigCapturePlatformSupportsExternalCameras()
{
  uint64_t result;

  result = BWDeviceIsiPad();
  if ((_DWORD)result)
    return MGGetBoolAnswer();
  return result;
}

double FigCapturePlatformGetISPHardwareCharacteristics@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;

  if (fcp_identifyPlatform_identifyPlatformOnceToken != -1)
    dispatch_once(&fcp_identifyPlatform_identifyPlatformOnceToken, &__block_literal_global_9);
  result = *(double *)&sISPHardwareCharacteristics;
  v3 = unk_1ECFEA580;
  *(_OWORD *)a1 = sISPHardwareCharacteristics;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = dword_1ECFEA590;
  return result;
}

uint64_t __fcp_identifyChipRevision_block_invoke()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  io_object_t v3;
  const __CFData *CFProperty;
  const __CFData *v5;
  UInt8 buffer[4];
  CFRange v7;

  *(_DWORD *)buffer = -1;
  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceNameMatching("arm-io");
  result = IOServiceGetMatchingService(v0, v1);
  if ((_DWORD)result)
  {
    v3 = result;
    CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(result, CFSTR("chip-revision"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v5 = CFProperty;
      v7.location = 0;
      v7.length = 4;
      CFDataGetBytes(CFProperty, v7, buffer);
      CFRelease(v5);
    }
    result = IOObjectRelease(v3);
    if (*(_DWORD *)buffer <= 0x11u && ((1 << buffer[0]) & 0x30003) != 0)
      sPlatformChipRevisionID = *(_DWORD *)buffer;
  }
  return result;
}

uint64_t PrivacyAccountingLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = PrivacyAccountingLibraryCore_frameworkLibrary;
  v6 = PrivacyAccountingLibraryCore_frameworkLibrary;
  if (!PrivacyAccountingLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E491F108;
    v8 = *(_OWORD *)&off_1E491F118;
    v1 = _sl_dlopen();
    v4[3] = v1;
    PrivacyAccountingLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E30E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t PrivacyAccountingLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = PrivacyAccountingLibraryCore();
  if (!result)
    PrivacyAccountingLibrary_cold_1(&v1);
  return result;
}

uint64_t getPAAccessLoggerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__5;
  v7 = __Block_byref_object_dispose__5;
  v0 = getPAAccessLoggerClass_softClass;
  v8 = getPAAccessLoggerClass_softClass;
  if (!getPAAccessLoggerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPAAccessLoggerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPAAccessLoggerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E30F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPAAccessLoggerClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAAccessLogger");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPAAccessLoggerClass_block_invoke_cold_1();
  getPAAccessLoggerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPATCCAccessClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PATCCAccess");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPATCCAccessClass_block_invoke_cold_1();
  getPATCCAccessClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPAApplicationClass_block_invoke(uint64_t a1)
{
  Class result;

  PrivacyAccountingLibrary();
  result = objc_getClass("PAApplication");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPAApplicationClass_block_invoke_cold_1();
  getPAApplicationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *getPAAuthenticatedClientIdentitySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getPAAuthenticatedClientIdentitySymbolLoc_ptr;
  v6 = getPAAuthenticatedClientIdentitySymbolLoc_ptr;
  if (!getPAAuthenticatedClientIdentitySymbolLoc_ptr)
  {
    v1 = (void *)PrivacyAccountingLibrary();
    v0 = dlsym(v1, "PAAuthenticatedClientIdentity");
    v4[3] = (uint64_t)v0;
    getPAAuthenticatedClientIdentitySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E310D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t soft_PAAuthenticatedClientIdentity(_OWORD *a1, uint64_t a2)
{
  uint64_t (*PAAuthenticatedClientIdentitySymbolLoc)(_OWORD *, uint64_t);
  __int128 v5;
  _OWORD v7[2];

  PAAuthenticatedClientIdentitySymbolLoc = (uint64_t (*)(_OWORD *, uint64_t))getPAAuthenticatedClientIdentitySymbolLoc();
  if (!PAAuthenticatedClientIdentitySymbolLoc)
    soft_PAAuthenticatedClientIdentity_cold_1();
  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  return PAAuthenticatedClientIdentitySymbolLoc(v7, a2);
}

uint64_t __pdn_sendPPSData_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 32)), CFSTR("DetectionSessionStartTime"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 40)), CFSTR("DetectionSessionStopTime"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 48)), CFSTR("InPocketDecision"));
  if (gBWPocketDetectionNodeTrace_block_invoke_telemetryIdOnce != -1)
    dispatch_once(&gBWPocketDetectionNodeTrace_block_invoke_telemetryIdOnce, &__block_literal_global_154);
  result = gBWPocketDetectionNodeTrace_block_invoke_telemetryId;
  if (gBWPocketDetectionNodeTrace_block_invoke_telemetryId)
    return PPSSendTelemetry();
  return result;
}

uint64_t __pdn_sendPPSData_block_invoke_2()
{
  uint64_t result;

  result = PPSCreateTelemetryIdentifier();
  gBWPocketDetectionNodeTrace_block_invoke_telemetryId = result;
  return result;
}

uint64_t FigCaptureSmartStyleSettingsGetSystemStyle(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1)
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_11);
  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = __Block_byref_object_copy__6;
  v9 = __Block_byref_object_dispose__6;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsGetSystemStyle_block_invoke;
  v4[3] = &unk_1E491F1A0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void FigCaptureSmartStyleSettingsSetSystemStyle(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1)
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_11);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsSetSystemStyle_block_invoke;
  v4[3] = &unk_1E491E748;
  v4[4] = a2;
  v4[5] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
}

id FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp(uint64_t a1)
{
  id v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1)
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_11);
  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = __Block_byref_object_copy__6;
  v9 = __Block_byref_object_dispose__6;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsGetSystemStyleBackgroundedTimestamp_block_invoke;
  v4[3] = &unk_1E491F1A0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A2E333F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1)
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_11);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSmartStyleSettingsSetSystemStyleBackgroundedTimestamp_block_invoke;
  v4[3] = &unk_1E491E748;
  v4[4] = a2;
  v4[5] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, v4);
}

void FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID(uint64_t a1)
{
  _QWORD block[5];

  if (FigCaptureSmartStyleSettingsPrewarm_onceToken != -1)
    dispatch_once(&FigCaptureSmartStyleSettingsPrewarm_onceToken, &__block_literal_global_11);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptureSmartStyleSettingsClearSystemStyleAndBackgroundedTimestampForBundleID_block_invoke;
  block[3] = &unk_1E491E720;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)sFigCaptureSmartStyleQueue, block);
}

uint64_t fsss_prefixedSystemStylePreferenceKeyForBundleID(__CFString *a1)
{
  __CFString *v2;
  __CFString *v3;
  uint64_t v4;

  v2 = CFSTR("com.apple.facetime");
  if ((-[__CFString isEqualToString:](a1, "isEqualToString:", 0x1E493D718) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.mediaserverd")) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", 0x1E493D5B8) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", 0x1E493D718) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", 0x1E493D498) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", 0x1E493D898) & 1) == 0
    && (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.FaceTime.FaceTimeNotificationCenterService")) & 1) == 0&& (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.VideoConference.AVConferenceTestRunneriOS")) & 1) == 0&& (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.AVConferenceTestRunnertvOS")) & 1) == 0&& (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.facetime.legacy")) & 1) == 0&& (-[__CFString isEqualToString:](a1, "isEqualToString:", CFSTR("com.apple.facetime.debug")) & 1) == 0)
  {
    if (-[__CFString hasPrefix:](a1, "hasPrefix:", CFSTR("com.apple.WebKit")))
      v2 = CFSTR("com.apple.mobilesafari");
    else
      v2 = a1;
  }
  if (v2)
    v3 = v2;
  else
    v3 = CFSTR("unknown");
  v4 = -[__CFString stringByReplacingOccurrencesOfString:withString:](v3, "stringByReplacingOccurrencesOfString:withString:", CFSTR("."), CFSTR("-"));
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("smartStyle/%@/"), v4);
}

uint64_t FigCaptureGetMacModelMajorVersion()
{
  return 0;
}

uint64_t FigCaptureGetMacModelMinorVersion()
{
  return 0;
}

uint64_t FigCaptureMetadataUtilitiesCreateExifCompositeImageMetadata(uint64_t a1, float a2, float a3, float a4)
{
  void *v8;
  double v9;
  double v10;
  double v11;
  _QWORD v13[8];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v8, "setObject:forKeyedSubscript:", &unk_1E49F84D8, CFSTR("CompositeImage"));
  v14[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v14[1] = &unk_1E49F84F0;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 2), CFSTR("SourceImageNumberOfCompositeImage"));
  v13[0] = &unk_1E4A02DE0;
  *(float *)&v9 = a2;
  v13[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v13[2] = &unk_1E4A02DE0;
  *(float *)&v10 = a4;
  v13[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10);
  v13[4] = &unk_1E4A02DE0;
  *(float *)&v11 = a3;
  v13[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v11);
  v13[6] = &unk_1E4A02DE0;
  v13[7] = &unk_1E49F84F0;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 8), CFSTR("SourceExposureTimesOfCompositeImage"));
  return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v8);
}

uint64_t FigCaptureMetadataUtilitiesDevicePropertiesLockedForPanorama(CMAttachmentBearerRef target, int a2)
{
  void *v4;
  void *v5;
  const __CFBoolean *v6;
  const __CFBoolean *v7;
  uint64_t v8;
  const __CFBoolean *v9;
  uint64_t v10;
  const __CFBoolean *v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v16;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v4)
    goto LABEL_29;
  v5 = v4;
  v6 = (const __CFBoolean *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D067C0]);
  v7 = (const __CFBoolean *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06790]);
  v8 = objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06780]);
  v9 = (const __CFBoolean *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06840]);
  if (a2)
  {
    v10 = objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BE0]);
    v11 = (const __CFBoolean *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D069E8]);
  }
  else
  {
    v10 = *MEMORY[0x1E0C9AE50];
    v11 = (const __CFBoolean *)*MEMORY[0x1E0C9AE50];
  }
  v12 = !v6 || v7 == 0;
  v13 = v12 || v9 == 0;
  v14 = v13 || v11 == 0;
  if (v14 || v10 == 0)
  {
LABEL_29:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (CFBooleanGetValue(v6))
  {
    v16 = !CFBooleanGetValue(v7) && v8 == 0;
    if (!v16 && CFBooleanGetValue(v9) && CFBooleanGetValue(v11) && v10 == *MEMORY[0x1E0C9AE50])
      return 1;
  }
  return 0;
}

id FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama(CMAttachmentBearerRef target, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v4 = *MEMORY[0x1E0D085A8];
  v23 = *MEMORY[0x1E0D08610];
  v24 = v4;
  v5 = *MEMORY[0x1E0D085F0];
  v25 = *MEMORY[0x1E0D08608];
  v26 = v5;
  v6 = *MEMORY[0x1E0D067C0];
  v27 = *MEMORY[0x1E0D085B0];
  v28 = v6;
  v7 = *MEMORY[0x1E0D06840];
  v29 = *MEMORY[0x1E0D06790];
  v30 = v7;
  v8 = *MEMORY[0x1E0D067E0];
  v31 = *MEMORY[0x1E0D069E8];
  v32 = v8;
  v9 = *MEMORY[0x1E0D06F60];
  v33 = *MEMORY[0x1E0D06F78];
  v34 = v9;
  v10 = *MEMORY[0x1E0D06BE0];
  v35 = *MEMORY[0x1E0D06A20];
  v36 = v10;
  v11 = *MEMORY[0x1E0D06D98];
  v37 = *MEMORY[0x1E0D06780];
  v38 = v11;
  v12 = *MEMORY[0x1E0D06820];
  v39 = *MEMORY[0x1E0D06848];
  v40 = v12;
  v13 = *MEMORY[0x1E0D06818];
  v41 = *MEMORY[0x1E0D067E8];
  v42 = v13;
  v14 = *MEMORY[0x1E0D06808];
  v43 = *MEMORY[0x1E0D06810];
  v44 = v14;
  v15 = *MEMORY[0x1E0D06968];
  v45 = *MEMORY[0x1E0D06D00];
  v46 = v15;
  v47 = *MEMORY[0x1E0D069A0];
  v16 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v17 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  for (i = 0; i != 200; i += 8)
  {
    v19 = *(uint64_t *)((char *)&v23 + i);
    v20 = objc_msgSend(v16, "objectForKeyedSubscript:", v19, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38,
            v39,
            v40,
            v41,
            v42,
            v43,
            v44,
            v45,
            v46,
            v47,
            v48);
    if (v20)
    {
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, v19);
    }
    else if ((FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama_haveWarned & 1) == 0)
    {
      FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForPanorama_haveWarned = 1;
    }
  }
  if (FigCaptureMetadataUtilitiesDevicePropertiesLockedForPanorama(target, a2))
    v21 = MEMORY[0x1E0C9AAB0];
  else
    v21 = MEMORY[0x1E0C9AAA0];
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0D08348]);
  return v17;
}

uint64_t FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization(const void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD v19[4];
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = *MEMORY[0x1E0D06D00];
  v4 = *MEMORY[0x1E0D06970];
  v20[0] = *MEMORY[0x1E0D06D00];
  v20[1] = v4;
  v5 = *MEMORY[0x1E0D06A20];
  v20[2] = *MEMORY[0x1E0D085D0];
  v20[3] = v5;
  v6 = *MEMORY[0x1E0D085B8];
  v20[4] = *MEMORY[0x1E0D06AC0];
  v20[5] = v6;
  v7 = *MEMORY[0x1E0D085E0];
  v20[6] = *MEMORY[0x1E0D08600];
  v20[7] = v7;
  v8 = *MEMORY[0x1E0D085D8];
  v19[0] = *MEMORY[0x1E0D08618];
  v19[1] = v8;
  v9 = *MEMORY[0x1E0D06B70];
  v19[2] = *MEMORY[0x1E0D06E58];
  v19[3] = v9;
  v10 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  for (i = 0; i != 8; ++i)
  {
    v12 = v20[i];
    v13 = objc_msgSend(v10, "objectForKeyedSubscript:", v12);
    if (v13)
    {
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, v12);
    }
    else if ((FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization_haveWarned & 1) == 0)
    {
      FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization_haveWarned = 1;
    }
  }
  for (j = 0; j != 4; ++j)
  {
    v15 = v19[j];
    v16 = objc_msgSend(v10, "objectForKeyedSubscript:", v15);
    if (v16)
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, v15);
  }
  if (fcmu_darkShadeHorizontalCrop((void *)objc_msgSend(v10, "objectForKeyedSubscript:", v3)))
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F48]), *MEMORY[0x1E0D06F48]);
  if (!objc_msgSend(v2, "count"))
    return 0;
  v17 = objc_alloc(MEMORY[0x1E0C99D80]);
  return objc_msgSend(v17, "initWithObjectsAndKeys:", v2, *MEMORY[0x1E0D08340], 0);
}

uint64_t fcmu_darkShadeHorizontalCrop(void *a1)
{
  if (!objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D05A18]))
    return 0;
  if ((objc_msgSend(CFSTR("D54p"), "isEqualToString:", FigCaptureGetModelSpecificName()) & 1) != 0)
    return 64;
  if ((objc_msgSend(&unk_1E4A002A8, "containsObject:", FigCaptureGetModelSpecificName()) & 1) != 0)
    return 32;
  else
    return 0;
}

uint64_t FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForAggd(CMAttachmentBearerRef target)
{
  void *v2;
  void *v3;
  void *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  unint64_t v10;
  void *v11;
  double v12;
  unint64_t v13;
  void *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  id v37;
  unint64_t v39;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v2 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]);
    if (v4)
    {
      objc_msgSend(v4, "doubleValue");
      v6 = (unsigned __int16)vcvtad_u64_f64(v5 * 8000.0);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v8 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B48]);
    if (v8)
    {
      objc_msgSend(v8, "doubleValue");
      v7 |= 2uLL;
      v10 = (unint64_t)(unsigned __int16)llround(v9) << 16;
    }
    else
    {
      v10 = 0;
    }
    v11 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06920]);
    if (v11)
    {
      objc_msgSend(v11, "doubleValue");
      v7 |= 4uLL;
      v13 = (unint64_t)vcvtad_u64_f64(v12 * 10.0) << 32;
    }
    else
    {
      v13 = 0;
    }
    v14 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AF8]);
    if (v14 && (objc_msgSend(v14, "doubleValue"), v16 = llround(v15 * 0.00390625 * 16.0), (_DWORD)v16))
    {
      v7 |= 8uLL;
      v17 = v16 << 40;
    }
    else
    {
      v17 = 0;
    }
    v18 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58]);
    if (objc_msgSend(v18, "isEqualToString:", *MEMORY[0x1E0D07A30]))
    {
      v19 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E48]);
      v20 = v19;
      v39 = v13;
      if (v19)
      {
        v21 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D079B0]);
        v22 = v10;
        if (v21)
        {
          v23 = vcvtad_u64_f64((double)(int)objc_msgSend(v21, "intValue") * 0.00390625);
          v24 = 1;
        }
        else
        {
          v24 = 0;
          v23 = 0;
        }
        v26 = v6;
        v28 = (void *)objc_msgSend(v20, "objectForKeyedSubscript:", *MEMORY[0x1E0D079B8]);
        if (v28)
        {
          v24 |= 2uLL;
          v27 = (unint64_t)vcvtad_u64_f64((double)(int)objc_msgSend(v28, "intValue") * 0.00390625) << 8;
        }
        else
        {
          v27 = 0;
        }
        v29 = (void *)objc_msgSend(v20, "objectForKeyedSubscript:", *MEMORY[0x1E0D07978]);
        if (v29)
        {
          v24 |= 4uLL;
          v20 = (void *)(objc_msgSend(v29, "intValue") << 16);
        }
        else
        {
          v20 = 0;
        }
      }
      else
      {
        v22 = v10;
        v26 = v6;
        v27 = 0;
        v23 = 0;
        v24 = 0;
      }
      v30 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B78]);
      if (v30)
      {
        v24 |= 8uLL;
        v31 = objc_msgSend(v30, "intValue") << 24;
      }
      else
      {
        v31 = 0;
      }
      v25 = ((unint64_t)v20 + v31 + (v23 | v27)) | (v24 << 56);
      v6 = v26;
      v10 = v22;
      v13 = v39;
    }
    else
    {
      v25 = 0;
    }
    v32 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if (v32)
    {
      v33 = (void *)v32;
      if (((v10 | v6) + v13 + v17) | (v7 << 56))
      {
        v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
        objc_msgSend(v33, "setObject:forKeyedSubscript:", v34, *MEMORY[0x1E0D05898]);
      }
      if (v25)
      {
        v35 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v25);
        objc_msgSend(v33, "setObject:forKeyedSubscript:", v35, *MEMORY[0x1E0D058A8]);
      }
      v36 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D08670], 0);
      if (v36)
        objc_msgSend(v33, "setObject:forKeyedSubscript:", v36, *MEMORY[0x1E0D058A0]);
      if (objc_msgSend(v33, "count"))
      {
        v37 = objc_alloc(MEMORY[0x1E0C99D80]);
        return objc_msgSend(v37, "initWithObjectsAndKeys:", v33, *MEMORY[0x1E0D08338], 0);
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

__CFDictionary *fcmu_createMakerNoteMetadata(void *a1, void *a2, const void *a3, const void *a4)
{
  const __CFString *v8;
  const __CFDictionary *v9;
  void *v10;
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  CFTypeRef v14;
  const void *v15;
  const __CFDictionary *v16;
  void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  const void *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  const void *v28;
  double v29;
  double v30;
  int AppBooleanValue;
  void *v32;
  void *v33;
  void *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  const void *v39;
  double v40;
  double v41;
  void *v42;
  void *v43;
  const void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  _BOOL8 v49;
  void *v50;
  void *v51;
  void *v52;
  const void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  const void *AttachedMedia;
  void *v59;
  void *v60;
  unsigned int v61;
  void *v62;
  void *v63;
  unint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unsigned __int8 v70;
  float v71;
  uint64_t v72;
  const void *v73;
  int v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  const void *v85;
  double v86;
  double v87;
  double v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  int v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  void *v117;
  const void *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  const void *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  const void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t i;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  void *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  int FloatIfPresent;
  int v168;
  int v169;
  int v170;
  double v171;
  const void *v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  double v176;
  double v177;
  void *v179;
  unint64_t v180;
  void *v181;
  const __CFDictionary *theDict;
  id obj;
  id obja;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  void *v189;
  int valuePtr;
  void *value;
  _QWORD v192[5];
  _QWORD v193[5];
  _QWORD v194[2];
  _QWORD v195[2];
  _BYTE v196[128];
  _QWORD v197[3];
  _QWORD v198[3];
  _QWORD v199[8];
  _QWORD v200[8];
  _QWORD v201[3];
  _QWORD v202[2];
  _QWORD v203[2];
  _QWORD v204[2];
  CMTime time;
  CMTimeValue v206;
  CMTimeScale timescale;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  value = 0;
  v8 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v9 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v9)
  {
    theDict = v9;
    v10 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillSettings"), 0), "captureSettings");
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = Mutable;
    if (!Mutable)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v13;
    }
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D057E8], &unk_1E49F85B0);
    v14 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
    if (v14 && (v15 = CFRetain(v14)) != 0
      || (CMSampleBufferGetPresentationTimeStamp(&time, (CMSampleBufferRef)a1),
          v206 = time.value,
          timescale = time.timescale,
          (time.flags & 1) != 0)
      && (time.value = v206, time.timescale = timescale, (v15 = CMTimeCopyAsDictionary(&time, v11)) != 0))
    {
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057D8], v15);
      CFRelease(v15);
    }
    v16 = theDict;
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06798], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054D0], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D067A0], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054D8], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D067B0], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054E0], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06770], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054C0], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06778], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054C8], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D067C8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05538], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D05EE8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05578], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06040], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056B0], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06E58], (const void **)&value))
    {
      v17 = value;
      if ((objc_msgSend(value, "isEqual:", *MEMORY[0x1E0D07A48]) & 1) != 0)
      {
        v18 = &unk_1E49F84F0;
      }
      else if ((objc_msgSend(v17, "isEqual:", *MEMORY[0x1E0D07A38]) & 1) != 0)
      {
        v18 = &unk_1E49F8538;
      }
      else if ((objc_msgSend(v17, "isEqual:", *MEMORY[0x1E0D07A30]) & 1) != 0)
      {
        v18 = &unk_1E49F8550;
      }
      else if ((objc_msgSend(v17, "isEqual:", *MEMORY[0x1E0D07A50]) & 1) != 0)
      {
        v18 = &unk_1E49F84D8;
      }
      else if ((objc_msgSend(v17, "isEqual:", *MEMORY[0x1E0D07A58]) & 1) != 0)
      {
        v18 = &unk_1E49F85C8;
      }
      else
      {
        if (!objc_msgSend(v17, "isEqual:", *MEMORY[0x1E0D07A40]))
          goto LABEL_40;
        v18 = &unk_1E49F85E0;
      }
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05660], v18);
    }
LABEL_40:
    obj = a2;
    v19 = a3;
    v20 = a4;
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06B08], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055A8], value);
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D05EF0], (const void **)&value))
    {
      if (objc_msgSend(v10, "captureType") == 10)
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057E0], value);
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05598], value);
    }
    if (CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0D06E48], (const void **)&value))
    {
      v21 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D079B0]);
      v22 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D079B8]);
      v23 = CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D07978]);
      if (v21 && v22)
      {
        objc_msgSend(v21, "floatValue");
        v25 = v24 * 0.0039062;
        objc_msgSend(v22, "floatValue");
        v27 = v26 * 0.0039062;
        v28 = (const void *)*MEMORY[0x1E0D05750];
        *(float *)&v29 = v25;
        v204[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v29);
        *(float *)&v30 = v27;
        v204[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v30);
        CFDictionaryAddValue(v13, v28, (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v204, 2));
      }
      if (v23)
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05748], v23);
      v16 = theDict;
      if ((fcmu_createMakerNoteMetadata_didAttemptToGetOISExternalOffsetDefault & 1) != 0)
      {
        AppBooleanValue = fcmu_createMakerNoteMetadata_attachOISExternalOffset;
      }
      else
      {
        AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("attachOISExternalOffset"), CFSTR("com.apple.coremedia"), 0);
        fcmu_createMakerNoteMetadata_attachOISExternalOffset = AppBooleanValue;
        fcmu_createMakerNoteMetadata_didAttemptToGetOISExternalOffsetDefault = 1;
      }
      if (AppBooleanValue)
      {
        v32 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D07998]);
        v33 = (void *)CFDictionaryGetValue((CFDictionaryRef)value, (const void *)*MEMORY[0x1E0D079A0]);
        if (v32)
        {
          v34 = v33;
          if (v33)
          {
            objc_msgSend(v32, "floatValue");
            v36 = v35 * 0.0039062;
            objc_msgSend(v34, "floatValue");
            v38 = v37 * 0.0039062;
            v39 = (const void *)*MEMORY[0x1E0D05740];
            *(float *)&v40 = v36;
            v203[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v40);
            *(float *)&v41 = v38;
            v203[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v41);
            CFDictionaryAddValue(v13, v39, (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v203, 2));
          }
        }
      }
    }
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06B78], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05758], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06E68], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05760], value);
    v42 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D08670], 0);
    value = v42;
    if (v42)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056A8], v42);
    v43 = (void *)CMGetAttachment(a1, CFSTR("StillImageCaptureType"), 0);
    value = v43;
    if (v43)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05770], v43);
    if (obj)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05548], obj);
    if (v19)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055B8], v19);
    if (v20)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05670], v20);
    if (v10)
    {
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05768], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v10, "captureFlags")));
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05798], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v10, "sceneFlags")));
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05790], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v10, "metadata"), "snrType")));
      v44 = (const void *)*MEMORY[0x1E0D05788];
      v45 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend((id)objc_msgSend(v10, "metadata"), "snr");
      CFDictionaryAddValue(v13, v44, (const void *)objc_msgSend(v45, "numberWithFloat:"));
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057A0], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v10, "metadata"), "systemPressureLevel")));
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05568], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v10, "metadata"), "cameraControlsStatisticsMaster")));
      if (objc_msgSend((id)objc_msgSend(v10, "metadata"), "zeroShutterLagFailureReason"))
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057F0], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v10, "metadata"), "zeroShutterLagFailureReason")));
    }
    valuePtr = 0;
    v46 = (void *)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0);
    value = v46;
    if (v46)
    {
      CFNumberGetValue((CFNumberRef)v46, kCFNumberSInt32Type, &valuePtr);
      v47 = value;
    }
    else
    {
      v47 = &unk_1E49F8598;
      value = &unk_1E49F8598;
    }
    CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05778], v47);
    v181 = (void *)*MEMORY[0x1E0D06910];
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06910], (const void **)&value)
      && (objc_msgSend((id)CMGetAttachment(a1, CFSTR("HasUnreliableBracketingMetadata"), 0), "BOOLValue") & 1) == 0)
    {
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05550], value);
    }
    v48 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D087A0], 0);
    value = v48;
    if (v48)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055F0], v48);
    if (fcmu_createMakerNoteMetadata_sFeatureFlagsEligibilityOnceToken != -1)
      dispatch_once(&fcmu_createMakerNoteMetadata_sFeatureFlagsEligibilityOnceToken, &__block_literal_global_177);
    v49 = fcmu_createMakerNoteMetadata_sEligibleForLightingEffects
       && (valuePtr & 0x20) != 0
       && objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D086F0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D08470]), "intValue") == 1;
    CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056A0], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v49));
    v50 = (void *)CMGetAttachment(a1, CFSTR("StillImageSettings"), 0);
    if (objc_msgSend(v50, "captureRequestIdentifier"))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055B0], (const void *)objc_msgSend(v50, "captureRequestIdentifier"));
    v51 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("PhotoManifest"), 0), "descriptorForSampleBuffer:", a1);
    if (objc_msgSend(v51, "photoIdentifier"))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05668], (const void *)objc_msgSend(v51, "photoIdentifier"));
    v52 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06928]);
    value = v52;
    if (v52)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05558], v52);
    v53 = (const void *)*MEMORY[0x1E0D068B0];
    v54 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D068B0]);
    value = v54;
    if (v54)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05540], v54);
    v55 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06C30]);
    value = v55;
    if (v55 || (v55 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06970]), (value = v55) != 0))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05588], v55);
    v56 = (void *)CMGetAttachment(a1, CFSTR("MeteorHeadroom"), 0);
    value = v56;
    if (v56)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05600], v56);
    v57 = (void *)CMGetAttachment(a1, CFSTR("MeteorPlusGainMapAverage"), 0);
    value = v57;
    if (v57)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05608], v57);
    AttachedMedia = (const void *)BWSampleBufferGetAttachedMedia(a1, 0x1E4936818);
    if (AttachedMedia)
      v59 = (void *)CMGetAttachment(AttachedMedia, v8, 0);
    else
      v59 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D05F00]);
    v60 = v59;
    if (v59)
    {
      v61 = objc_msgSend((id)objc_msgSend(v59, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F08]), "intValue");
      objc_msgSend(v10, "captureFlags");
      if (v61 >= 0x20000)
      {
        v62 = (void *)objc_msgSend(v60, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FC8]);
        value = v62;
        if (v62)
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0D05600], v62);
        v63 = (void *)objc_msgSend(v60, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FC0]);
        value = v63;
        if (v63)
          CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E0D05608], v63);
      }
    }
    v64 = (unint64_t)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D068A0]);
    v65 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06A88]);
    v66 = (void *)CFDictionaryGetValue(v16, v53);
    v67 = objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D062A8]);
    if (v65 && v66)
    {
      v68 = (void *)v67;
      v69 = objc_msgSend(v65, "unsignedIntValue");
      v70 = objc_msgSend(v66, "unsignedIntValue");
      objc_msgSend(v68, "floatValue");
      v72 = vcvts_n_u32_f32(v71, 8uLL) & 0xFFFFFFF | (v70 << 28);
      v73 = (const void *)*MEMORY[0x1E0D054F0];
      v202[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v69);
      v202[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v72);
      CFDictionaryAddValue(v13, v73, (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v202, 2));
    }
    if (v64)
    {
      if ((fcmu_createMakerNoteMetadata_didAttemptToGetAFExternalOffsetDefault & 1) != 0)
      {
        v74 = fcmu_createMakerNoteMetadata_attachAFExternalOffset;
      }
      else
      {
        v74 = CFPreferencesGetAppBooleanValue(CFSTR("attachAFExternalOffset"), CFSTR("com.apple.coremedia"), 0);
        fcmu_createMakerNoteMetadata_attachAFExternalOffset = v74;
        fcmu_createMakerNoteMetadata_didAttemptToGetAFExternalOffsetDefault = 1;
      }
      if (v74)
      {
        v75 = (void *)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D062B8]);
        v76 = (void *)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D06248]);
        v77 = objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D062B0]);
        if (v75)
        {
          if (v76)
          {
            v78 = (void *)v77;
            if (v77)
            {
              objc_msgSend(v75, "floatValue");
              v80 = v79;
              objc_msgSend(v76, "floatValue");
              v82 = v81;
              objc_msgSend(v78, "floatValue");
              v84 = v83;
              v85 = (const void *)*MEMORY[0x1E0D054E8];
              LODWORD(v86) = v80;
              v201[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v86);
              LODWORD(v87) = v82;
              v201[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v87);
              LODWORD(v88) = v84;
              v201[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v88);
              CFDictionaryAddValue(v13, v85, (const void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v201, 3));
            }
          }
        }
      }
    }
    v89 = (void *)CMGetAttachment(a1, CFSTR("StillImageProcessingHomography"), 0);
    if (objc_msgSend(v89, "count") == 9)
    {
      v90 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 44);
      v91 = (_QWORD *)objc_msgSend(v90, "mutableBytes");
      v92 = 0;
      *v91 = 0x800000001;
      v93 = v91 + 1;
      do
      {
        objc_msgSend((id)objc_msgSend(v89, "objectAtIndexedSubscript:", v92), "floatValue");
        *((_DWORD *)v93 + v92++) = v94;
      }
      while (v92 != 9);
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05780], v90);
      v16 = theDict;
    }
    v95 = (void *)CMGetAttachment(a1, CFSTR("IntelligentDistortionCorrectionMakernoteEntry"), 0);
    value = v95;
    if (v95)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055C0], v95);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05FF0], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05628], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05FD8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05610], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05FE0], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05618], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05FE8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05620], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05F58], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055A0], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06C40], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055F8], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06BF8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055C8], value);
    v96 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06F10]);
    v97 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D50]);
    value = v97;
    if (v97)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057C0], v97);
    v98 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D60]);
    value = v98;
    if (v98)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057C8], v98);
    v99 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D68]);
    value = v99;
    if (v99)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057D0], v99);
    v100 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D30]);
    value = v100;
    if (v100)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057A8], v100);
    v101 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D40]);
    value = v101;
    if (v101)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057B0], v101);
    v102 = (void *)objc_msgSend(v96, "objectForKeyedSubscript:", *MEMORY[0x1E0D07D48]);
    value = v102;
    if (v102)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D057B8], v102);
    v103 = (void *)CFDictionaryGetValue(v16, (const void *)*MEMORY[0x1E0D06C00]);
    v104 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", *MEMORY[0x1E0D06630]);
    value = v104;
    if (v104)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055D8], v104);
    v105 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", *MEMORY[0x1E0D06638]);
    value = v105;
    if (v105)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055E0], v105);
    v106 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", *MEMORY[0x1E0D06620]);
    value = v106;
    if (v106)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055D0], v106);
    v107 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", *MEMORY[0x1E0D06648]);
    value = v107;
    if (v107)
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D055E8], v107);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v108 = v64;
      v109 = (void *)objc_msgSend(v50, "semanticStyle");
      if ((valuePtr & 0x200000) != 0 && (v110 = objc_msgSend(v50, "smartStyle")) != 0 && (valuePtr & 0x10000) == 0)
      {
        v111 = (void *)v110;
        LOBYTE(time.value) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        LOBYTE(v206) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        v112 = FigCFDictionaryGetValue();
        v113 = *MEMORY[0x1E0D05728];
        v200[0] = &unk_1E49F8538;
        v114 = *MEMORY[0x1E0D05730];
        v199[0] = v113;
        v199[1] = v114;
        v115 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v111, "toneBias");
        v200[1] = objc_msgSend(v115, "numberWithFloat:");
        v199[2] = *MEMORY[0x1E0D05708];
        v116 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v111, "colorBias");
        v200[2] = objc_msgSend(v116, "numberWithFloat:");
        v199[3] = *MEMORY[0x1E0D05718];
        v117 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v111, "intensity");
        v200[3] = objc_msgSend(v117, "numberWithFloat:");
        v199[4] = *MEMORY[0x1E0D05700];
        v200[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E0D08AD0], "makerNoteTagForSmartStyleCastType:smartStyleVersion:", objc_msgSend(v111, "cast"), 1));
        v199[5] = *MEMORY[0x1E0D05720];
        v200[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", LOBYTE(time.value));
        v199[6] = *MEMORY[0x1E0D05738];
        v200[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E0D08AD0], "makerNoteTagForSmartStyleTuningType:smartStyleVersion:", v112, 1));
        v199[7] = *MEMORY[0x1E0D05710];
        v200[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v206);
        v118 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v200, v199, 8);
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056F8], v118);
        v64 = v108;
      }
      else if (v109)
      {
        v119 = *MEMORY[0x1E0D056C0];
        v198[0] = &unk_1E49F8538;
        v120 = *MEMORY[0x1E0D056C8];
        v197[0] = v119;
        v197[1] = v120;
        v121 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v109, "toneBias");
        v198[1] = objc_msgSend(v121, "numberWithFloat:");
        v197[2] = *MEMORY[0x1E0D056D0];
        v122 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v109, "warmthBias");
        v198[2] = objc_msgSend(v122, "numberWithFloat:");
        v123 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v198, v197, 3);
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056B8], v123);
      }
    }
    v189 = 0;
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D07710], (const void **)&v189))
    {
      v124 = *MEMORY[0x1E0D05A38];
      if ((objc_msgSend(v189, "isEqualToString:", *MEMORY[0x1E0D05A38]) & 1) != 0
        || (objc_msgSend(v189, "isEqualToString:", *MEMORY[0x1E0D05A50]) & 1) != 0
        || (objc_msgSend(v189, "isEqualToString:", *MEMORY[0x1E0D05A40]) & 1) != 0)
      {
        v125 = 1;
      }
      else
      {
        v125 = objc_msgSend(v189, "isEqualToString:", *MEMORY[0x1E0D05A48]);
      }
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05590], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v125));
      v126 = v189;
      if ((objc_msgSend(v189, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) != 0)
      {
        v127 = 2;
      }
      else if ((objc_msgSend(v126, "isEqualToString:", *MEMORY[0x1E0D05A30]) & 1) != 0)
      {
        v127 = 3;
      }
      else if ((objc_msgSend(v126, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) != 0)
      {
        v127 = 4;
      }
      else if ((objc_msgSend(v126, "isEqualToString:", v124) & 1) != 0)
      {
        v127 = 5;
      }
      else
      {
        if (!objc_msgSend(v126, "isEqualToString:", *MEMORY[0x1E0D05A50]))
          goto LABEL_190;
        v127 = 6;
      }
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05560], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v127));
    }
LABEL_190:
    v128 = (void *)CMGetAttachment(a1, CFSTR("FocusPixelBlurScoreResult"), 0);
    if (v128)
    {
      v129 = (const void *)*MEMORY[0x1E0D05580];
      v130 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v128, "score");
      CFDictionaryAddValue(v13, v129, (const void *)objc_msgSend(v130, "numberWithFloat:"));
    }
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06E08], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056E8], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06DE8], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056E0], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06E40], (const void **)&value))
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056F0], value);
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06CE8], (const void **)&value))
    {
      v180 = v64;
      v131 = value;
      v132 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v133 = objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D070B0]);
      v179 = v132;
      objc_msgSend(v132, "setObject:forKeyedSubscript:", v133, *MEMORY[0x1E0D05688]);
      v134 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v135 = (void *)objc_msgSend(v131, "objectForKeyedSubscript:", *MEMORY[0x1E0D070A8]);
      v185 = 0u;
      v186 = 0u;
      v187 = 0u;
      v188 = 0u;
      obja = v135;
      v136 = objc_msgSend(v135, "countByEnumeratingWithState:objects:count:", &v185, v196, 16);
      if (v136)
      {
        v137 = v136;
        v138 = *(_QWORD *)v186;
        v139 = *MEMORY[0x1E0D05698];
        v140 = *MEMORY[0x1E0D070A0];
        v141 = *MEMORY[0x1E0D05690];
        v142 = *MEMORY[0x1E0D07098];
        do
        {
          for (i = 0; i != v137; ++i)
          {
            if (*(_QWORD *)v186 != v138)
              objc_enumerationMutation(obja);
            v144 = *(void **)(*((_QWORD *)&v185 + 1) + 8 * i);
            v194[0] = v139;
            v145 = objc_msgSend(v144, "objectForKeyedSubscript:", v140);
            v194[1] = v141;
            v195[0] = v145;
            v195[1] = objc_msgSend(v144, "objectForKeyedSubscript:", v142);
            objc_msgSend(v134, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v195, v194, 2));
          }
          v137 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v185, v196, 16);
        }
        while (v137);
      }
      objc_msgSend(v179, "setObject:forKeyedSubscript:", v134, *MEMORY[0x1E0D05680]);
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05678], v179);
      v16 = theDict;
      v64 = v180;
    }
    if (FigCFDictionaryGetValueIfPresent())
      v146 = (unint64_t)value;
    else
      v146 = 0;
    if (v64 | v146)
    {
      v147 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v148 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      if (v64)
      {
        if (objc_msgSend((id)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D062A0]), "BOOLValue"))v149 = 0x10000;
        else
          v149 = 0;
        if (objc_msgSend((id)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D06278]), "BOOLValue"))v150 = 0x20000;
        else
          v150 = 0;
        v151 = v150 | v149;
        if (objc_msgSend((id)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D06258]), "BOOLValue"))v152 = 0x40000;
        else
          v152 = 0;
        if (objc_msgSend((id)objc_msgSend((id)v64, "objectForKeyedSubscript:", *MEMORY[0x1E0D06250]), "BOOLValue"))v153 = 0x80000;
        else
          v153 = 0;
        v154 = v152 | v153;
        v155 = (void *)v64;
        v64 = v151 | v154;
        v156 = objc_msgSend(v155, "objectForKeyedSubscript:", *MEMORY[0x1E0D06238]);
        objc_msgSend(v147, "setObject:forKeyedSubscript:", v156, *MEMORY[0x1E0D05500]);
        v157 = objc_msgSend(v155, "objectForKeyedSubscript:", *MEMORY[0x1E0D06298]);
        objc_msgSend(v148, "setObject:forKeyedSubscript:", v157, *MEMORY[0x1E0D05520]);
      }
      if (v146)
      {
        v158 = objc_msgSend((id)objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D07A00]), "BOOLValue");
        if (objc_msgSend((id)objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D079C8]), "BOOLValue"))v159 = 2;
        else
          v159 = 0;
        if (objc_msgSend((id)objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D07990]), "BOOLValue"))v160 = 4;
        else
          v160 = 0;
        if (objc_msgSend((id)objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D07988]), "BOOLValue"))v161 = 8;
        else
          v161 = 0;
        v64 = v159 | v158 | v160 | v161 | v64;
        v162 = objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D07980]);
        objc_msgSend(v147, "setObject:forKeyedSubscript:", v162, *MEMORY[0x1E0D05508]);
        v163 = objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D079F0]);
        objc_msgSend(v148, "setObject:forKeyedSubscript:", v163, *MEMORY[0x1E0D05528]);
        v164 = objc_msgSend((id)v146, "objectForKeyedSubscript:", *MEMORY[0x1E0D079F8]);
        objc_msgSend(v148, "setObject:forKeyedSubscript:", v164, *MEMORY[0x1E0D05530]);
      }
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05510], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v64));
      if (objc_msgSend(v147, "count"))
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D054F8], v147);
      if (objc_msgSend(v148, "count"))
        CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D05518], v148);
    }
    if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06F00], (const void **)&value)
      && (FigCFNumberGetSInt32() & 0x80000000) == 0
      && CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06DD8], (const void **)&value))
    {
      if (!FigCFArrayGetIntAtIndex())
        goto LABEL_255;
    }
    else if (!CFDictionaryGetValueIfPresent(v16, v181, (const void **)&value)
           || (FigCFNumberGetSInt32() & 0x80000000) != 0
           || !CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D06DE0], (const void **)&value)
           || !FigCFArrayGetIntAtIndex())
    {
LABEL_255:
      if (CFDictionaryGetValueIfPresent(v16, (const void *)*MEMORY[0x1E0D05FF8], (const void **)&value))
      {
        LODWORD(time.value) = 0;
        FigCFDictionaryGetIntIfPresent();
        if (LODWORD(time.value) == 1)
        {
          LODWORD(v206) = 0;
          FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
          v168 = FigCFDictionaryGetFloatIfPresent();
          v169 = FigCFDictionaryGetFloatIfPresent();
          v170 = FigCFDictionaryGetFloatIfPresent();
          if (FloatIfPresent)
          {
            if ((v168 & v169 & v170 & 1) != 0)
            {
              v172 = (const void *)*MEMORY[0x1E0D05630];
              v173 = *MEMORY[0x1E0D05658];
              v193[0] = &unk_1E49F8538;
              v174 = *MEMORY[0x1E0D05638];
              v192[0] = v173;
              v192[1] = v174;
              LODWORD(v171) = v206;
              v193[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v171);
              v192[2] = *MEMORY[0x1E0D05640];
              LODWORD(v175) = 0;
              v193[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v175);
              v192[3] = *MEMORY[0x1E0D05650];
              LODWORD(v176) = 0;
              v193[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v176);
              v192[4] = *MEMORY[0x1E0D05648];
              LODWORD(v177) = 0;
              v193[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v177);
              CFDictionaryAddValue(v13, v172, (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v193, v192, 5));
            }
          }
        }
      }
      return v13;
    }
    if (FigCFArrayGetIntAtIndex()
      && FigCFArrayGetIntAtIndex()
      && FigCFArrayGetIntAtIndex())
    {
      v165 = vaddvq_s32(*(int32x4_t *)&time.value);
      v166 = v165 + 5;
      if (v165 + 2 >= 0)
        v166 = v165 + 2;
      CFDictionaryAddValue(v13, (const void *)*MEMORY[0x1E0D056D8], (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (v166 >> 2)));
    }
    goto LABEL_255;
  }
  v13 = 0;
  if (!CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA2660], 0))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return v13;
}

uint64_t FigCaptureMetadataUtilitiesGetIrisAssetIdentifierForSettingsAndSampleBuffer(void *a1, const void *a2)
{
  void *v4;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  if (objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D06B08]), "intValue") == 4)v4 = (void *)objc_msgSend(a1, "movieLevelMetadataForOriginalImage");
  else
    v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "movieRecordingSettings"), "movieLevelMetadata");
  return fcmu_extractIdentiferFromMetadata(v4, *MEMORY[0x1E0CC5C18]);
}

uint64_t fcmu_extractIdentiferFromMetadata(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(a1);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v6 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v4);
  v7 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0CC47F8]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v8 = result;
    v9 = *(_QWORD *)v14;
    v10 = *MEMORY[0x1E0CC47A8];
    while (2)
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if ((objc_msgSend((id)objc_msgSend(v12, "objectForKeyedSubscript:", v10), "isEqual:", a2) & 1) != 0)
          return objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0CC47E8]);
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      result = 0;
      if (v8)
        continue;
      break;
    }
  }
  return result;
}

uint64_t FigCaptureMetadataUtilitiesGetStillImageMetadataInSettingsForSampleBuffer(void *a1, const void *a2)
{
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  if ((objc_msgSend((id)CMGetAttachment(a2, CFSTR("StillImageProcessingFlags"), 0), "unsignedIntValue") & 1) != 0)
    return objc_msgSend(a1, "metadataForOriginalImage");
  return objc_msgSend(a1, "metadata");
}

uint64_t FigCaptureMetadataUtilitiesUpdateMetadataForStillImageCrop(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11)
{
  _BOOL4 IsNull;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat y;
  double v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat x;
  double width;
  double height;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGPoint origin;
  CGSize size;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  BOOL IsEmpty;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  double v70;
  float v71;
  float v72;
  float v73;
  float v74;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v76;
  double v77;
  double v78;
  BOOL v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  BOOL v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  double d;
  uint64_t v109;
  double v110;
  uint64_t v111;
  CGFloat v113;
  double v114;
  double v115;
  CGFloat v116;
  double recta;
  CGFloat v119;
  CGFloat v120;
  double r2;
  CGSize v122;
  CGRect v123;
  CGSize v124;
  CGAffineTransform v125;
  CGAffineTransform v126;
  CGRect v127;
  CGAffineTransform v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;
  CGRect v149;

  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
    if (a1)
      goto LABEL_3;
LABEL_79:
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
  if (!a1)
    goto LABEL_79;
LABEL_3:
  if (!FigCaptureVideoDimensionsAreValid(a2) || !FigCaptureVideoDimensionsAreValid(a3))
    goto LABEL_79;
  v115 = a11;
  v122.width = (double)(int)a2;
  v122.height = (double)SHIDWORD(a2);
  r2 = (double)(int)a3;
  v129.origin.x = a4;
  v129.origin.y = a5;
  v129.size.width = a6;
  v129.size.height = a7;
  IsNull = CGRectIsNull(v129);
  v22 = a10;
  if (IsNull)
    v23 = 0.0;
  else
    v23 = a4;
  if (IsNull)
    v24 = 0.0;
  else
    v24 = a5;
  if (IsNull)
    v25 = (double)(int)a2;
  else
    v25 = a6;
  y = 0.0;
  if (IsNull)
    v27 = (double)SHIDWORD(a2);
  else
    v27 = a7;
  v119 = v27;
  v120 = v23;
  v28 = a8;
  v29 = a9;
  v30 = v115;
  v31 = CGRectIsNull(*(CGRect *)(&v22 - 2));
  if (v31)
    v32 = 0.0;
  else
    v32 = a8;
  if (v31)
    v33 = 0.0;
  else
    v33 = a9;
  if (v31)
    v34 = (double)(int)a3;
  else
    v34 = a10;
  memset(&v128.c, 0, 32);
  if (v31)
    v35 = (double)SHIDWORD(a3);
  else
    v35 = v115;
  *(_OWORD *)&v128.a = 0uLL;
  FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v128, v120, v24, v25, v119, v32, v33, v34, v35);
  memset(&v127, 0, sizeof(v127));
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    y = v127.origin.y;
    x = v127.origin.x;
    height = v127.size.height;
    width = v127.size.width;
  }
  else
  {
    v127.origin = 0uLL;
    height = (double)SHIDWORD(a2);
    width = (double)(int)a2;
    x = 0.0;
    v127.size = v122;
  }
  v39 = y;
  v143.origin.x = v120;
  v116 = v24;
  v143.origin.y = v24;
  v113 = v25;
  v143.size.width = v25;
  v143.size.height = v119;
  v130 = CGRectIntersection(*(CGRect *)&x, v143);
  v126 = v128;
  v131 = CGRectApplyAffineTransform(v130, &v126);
  v144.origin.x = 0.0;
  v144.origin.y = 0.0;
  v144.size.width = (double)(int)a3;
  recta = (double)SHIDWORD(a3);
  v144.size.height = (double)SHIDWORD(a3);
  v132 = CGRectIntersection(v131, v144);
  v40 = v132.origin.x;
  v41 = v132.origin.y;
  v42 = v132.size.width;
  v43 = v132.size.height;
  FigCFDictionarySetCGRect();
  origin = v127.origin;
  size = v127.size;
  if (CGRectIsEmpty(v127))
  {
    v114 = 0.0;
    v46 = 0.0;
    v47 = 1.0;
    v48 = 1.0;
  }
  else
  {
    v114 = origin.x / v122.width;
    v46 = origin.y / v122.height;
    v47 = size.width / v122.width;
    v48 = size.height / v122.height;
  }
  v126 = v128;
  CGAffineTransformInvert(&v125, &v126);
  v133.origin.x = v40;
  v133.origin.y = v41;
  v133.size.width = v42;
  v133.size.height = v43;
  v134 = CGRectApplyAffineTransform(v133, &v125);
  v49 = v134.origin.x;
  v50 = v134.origin.y;
  v51 = v134.size.width;
  v52 = v134.size.height;
  IsEmpty = CGRectIsEmpty(v134);
  v54 = 0.0;
  v55 = 0.0;
  v56 = 1.0;
  v57 = 1.0;
  if (!IsEmpty)
  {
    v54 = v49 / v122.width;
    v55 = v50 / v122.height;
    v57 = v51 / v122.width;
    v56 = v52 / v122.height;
  }
  v58 = v57 / v47;
  v59 = v56 / v48;
  v60 = (v54 - v114) / v47;
  v124 = (CGSize)0;
  v61 = *MEMORY[0x1E0D06F30];
  v62 = (v55 - v46) / v48;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v63 = 0.0;
    v64 = 0.0;
  }
  else
  {
    v63 = (double)SHIDWORD(a2);
    v64 = (double)(int)a2;
    v124 = v122;
  }
  v65 = v58 * v64;
  v66 = v59 * v63;
  v67 = v64 * v60 + 0.0;
  v68 = v63 * v62 + 0.0;
  v69 = *MEMORY[0x1E0D06A70];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A70]), "floatValue");
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v69), "floatValue");
  if (*(float *)&v70 != 0.0)
  {
    v71 = v124.width;
    if (v71 != 0.0)
    {
      v72 = v124.height;
      if (v72 != 0.0)
      {
        v73 = v65;
        v74 = v66;
        if (v73 != v71 || v74 != v72)
        {
          *(float *)&v70 = *(float *)&v70
                         * (float)(sqrtf((float)(v72 * v72) + (float)(v71 * v71))
                                 / sqrtf((float)(v74 * v74) + (float)(v73 * v73)));
          objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v70), v69);
        }
      }
    }
  }
  v135.origin.x = v67;
  v135.origin.y = v68;
  v135.size.width = v65;
  v135.size.height = v66;
  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v135);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", (id)CFMakeCollectable(DictionaryRepresentation), v61);
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v69), "floatValue");
  v76 = *MEMORY[0x1E0D05E68];
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v77 = 0.0;
    v78 = 0.0;
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    v77 = 1.0;
    v78 = 1.0;
  }
  v136.origin.x = 0.0;
  v136.origin.y = 0.0;
  v136.size.width = v78;
  v136.size.height = v77;
  v84 = CGRectIsEmpty(v136);
  v85 = 0.0 * v122.width;
  v86 = v78 * v122.width;
  v87 = 0.0 * v122.height;
  v88 = v77 * v122.height;
  if (v84)
  {
    v85 = 0.0;
    v87 = 0.0;
    v86 = (double)(int)a2;
    v88 = (double)SHIDWORD(a2);
  }
  v126 = v128;
  v137 = CGRectApplyAffineTransform(*(CGRect *)&v85, &v126);
  v89 = v137.origin.x;
  v90 = v137.origin.y;
  v91 = v137.size.width;
  v92 = v137.size.height;
  v93 = CGRectIsEmpty(v137);
  v94 = 0.0;
  v95 = 0.0;
  v96 = 1.0;
  v97 = 1.0;
  if (!v93)
  {
    v94 = v89 / r2;
    v95 = v90 / recta;
    v96 = v91 / r2;
    v97 = v92 / recta;
  }
  v145.origin.x = 0.0;
  v145.origin.y = 0.0;
  v145.size.width = 1.0;
  v145.size.height = 1.0;
  v138 = CGRectIntersection(*(CGRect *)&v94, v145);
  v98 = 0.01 / recta;
  if (fabs(v138.origin.x) >= 0.01 / r2)
    v99 = v138.origin.x;
  else
    v99 = 0.0;
  if (fabs(v138.origin.y) >= v98)
    v100 = v138.origin.y;
  else
    v100 = 0.0;
  v101 = vabdd_f64(1.0, v138.origin.x + v138.size.width);
  v102 = 1.0 - v138.origin.x;
  if (v101 >= 0.01 / r2)
    v103 = v138.size.width;
  else
    v103 = v102;
  v104 = vabdd_f64(1.0, v138.origin.y + v138.size.height);
  v105 = 1.0 - v138.origin.y;
  if (v104 >= v98)
    v106 = v138.size.height;
  else
    v106 = v105;
  v146.origin.x = 0.0;
  v146.origin.y = 0.0;
  v146.size.width = 1.0;
  v146.size.height = 1.0;
  v139.origin.x = v99;
  v139.origin.y = v100;
  v139.size.width = v103;
  v139.size.height = v106;
  if (CGRectEqualToRect(v139, v146))
    objc_msgSend(a1, "removeObjectForKey:", v76);
  else
    FigCFDictionarySetCGRect();
  v123.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v123.size = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v107 = *MEMORY[0x1E0D05FD0];
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v147.origin.x = v120;
    v147.origin.y = v116;
    v147.size.width = v113;
    v147.size.height = v119;
    v140 = CGRectIntersection(v123, v147);
    v126 = v128;
    v141 = CGRectApplyAffineTransform(v140, &v126);
    v148.origin.x = 0.0;
    v148.origin.y = 0.0;
    v148.size.width = r2;
    v148.size.height = recta;
    v142 = CGRectIntersection(v141, v148);
    v149.origin.x = 0.0;
    v149.origin.y = 0.0;
    v149.size.width = r2;
    v149.size.height = recta;
    if (CGRectEqualToRect(v142, v149))
      objc_msgSend(a1, "removeObjectForKey:", v107);
    else
      FigCFDictionarySetCGRect();
  }
  d = v128.d;
  v109 = *MEMORY[0x1E0D069C0];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D069C0]), "doubleValue");
  if (v110 == 0.0)
    v110 = 1.0;
  if (d * v110 == 1.0)
    v111 = 0;
  else
    v111 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", v111, v109);
}

double FigCaptureMetadataUtilitiesRectDenormalizedToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + a7 * a1;
}

void *FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(void *a1, double a2, double a3, double a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v17 != v11)
          objc_enumerationMutation(a1);
        v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          v14 = (void *)objc_msgSend(v13, "mutableCopy");
          FigCFDictionarySetCGRect();
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
            FigCFDictionarySetCGRect();
          }
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
            FigCFDictionarySetCGRect();
          }
          objc_msgSend(v8, "addObject:", v14, 0, 0, 0, 0);

        }
      }
      v10 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v10);
  }
  return v8;
}

void *FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(CFPropertyListRef propertyList, double a2, double a3, double a4)
{
  void *DeepCopy;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (propertyList)
  {
    DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, 1uLL);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v21 = objc_msgSend(DeepCopy, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v21)
    {
      v19 = *(_QWORD *)v29;
      v18 = *MEMORY[0x1E0D064D0];
      v17 = *MEMORY[0x1E0D064C0];
      v16 = *MEMORY[0x1E0D07900];
      v20 = DeepCopy;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v29 != v19)
            objc_enumerationMutation(DeepCopy);
          v9 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          v10 = (void *)objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", v18);
          v26 = 0u;
          v27 = 0u;
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v23;
            do
            {
              for (j = 0; j != v12; ++j)
              {
                if (*(_QWORD *)v23 != v13)
                  objc_enumerationMutation(v10);
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(*(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
                  FigCFDictionarySetCGRect();
                }
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v22, v32, 16);
            }
            while (v12);
          }
          DeepCopy = v20;
          if (objc_msgSend(v9, "isEqualToString:", v17))
          {
            objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", v9), "objectForKeyedSubscript:", v16);
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(*(double *)&v26, *((double *)&v26 + 1), *(double *)&v27, *((double *)&v27 + 1), a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
          }
        }
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v21);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return DeepCopy;
}

void FigCaptureMetadataUtilitiesUpdateDetectedObjectsInfoAndFacesArrayWithCropRect(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v9;
  void *v10;
  void *FacesArrayForCropRect;
  uint64_t v12;
  const void *v13;
  id DetectedObjectsInfoForCropRect;

  if (a1)
  {
    if (!CGRectIsNull(*(CGRect *)&a2))
    {
      v9 = *MEMORY[0x1E0D06998];
      v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
      if (v10)
      {
        FacesArrayForCropRect = FigCaptureMetadataUtilitiesCreateFacesArrayForCropRect(v10, a2, a3, a4);
        objc_msgSend(a1, "setObject:forKeyedSubscript:", FacesArrayForCropRect, v9);

      }
      v12 = *MEMORY[0x1E0D069A0];
      v13 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
      if (v13)
      {
        DetectedObjectsInfoForCropRect = FigCaptureMetadataUtilitiesCreateDetectedObjectsInfoForCropRect(v13, a2, a3, a4);
        objc_msgSend(a1, "setObject:forKeyedSubscript:", DetectedObjectsInfoForCropRect, v12);

      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
}

uint64_t FigCaptureMetadataUtilitiesUpdateDepthDataMetadataForStillImageCropAndScale(void *a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  CGSize v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const __CFDictionary *v17;
  void *v18;
  void *v19;
  uint64_t result;
  const __CFDictionary *v21;
  uint64_t v22;
  float v23;
  double v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  float v29;
  float v30;
  double v31;
  CFDictionaryRef DictionaryRepresentation;
  float v33;
  uint64_t v34;
  float v35;
  void *v36;
  CFDictionaryRef v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  CGPoint point;
  _OWORD v42[2];
  __int128 v43;
  CGSize size;

  v13 = (CGSize)*MEMORY[0x1E0C9D820];
  v43 = 0u;
  size = v13;
  memset(v42, 0, sizeof(v42));
  point = (CGPoint)*MEMORY[0x1E0C9D538];
  v14 = (_QWORD *)MEMORY[0x1E0D08448];
  v15 = (_QWORD *)MEMORY[0x1E0D08440];
  v16 = (_QWORD *)MEMORY[0x1E0D08458];
  if (!a1)
  {
    fig_log_get_emitter();
    v40 = v6;
    LODWORD(v39) = 0;
    FigDebugAssert3();
LABEL_15:
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_8;
  }
  v17 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448]);
  if (!v17)
    goto LABEL_15;
  if (!CGSizeMakeWithDictionaryRepresentation(v17, &size))
    goto LABEL_15;
  v18 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *v15);
  if (!v18)
    goto LABEL_15;
  v19 = v18;
  result = objc_msgSend(v18, "length");
  if (result != 48)
    return result;
  objc_msgSend(v19, "getBytes:length:", v42, 48);
  v21 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *v16);
  if (!v21 || !CGPointMakeWithDictionaryRepresentation(v21, &point))
    goto LABEL_15;
LABEL_8:
  v22 = *MEMORY[0x1E0D08468];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08468], v39, v40), "floatValue");
  v24 = *(float *)&v43 - a2 * size.width;
  v25 = point.x - a2 * size.width;
  v26 = *((float *)&v43 + 1) - a3 * size.height;
  point.x = v25;
  point.y = point.y - a3 * size.height;
  v27 = a4 * size.width;
  v28 = a5 * size.height;
  size.width = a4 * size.width;
  size.height = a5 * size.height;
  if (a6 > 0.0)
  {
    v29 = v23 / a6;
    v30 = v29;
  }
  else
  {
    v30 = v23;
  }
  v31 = v27;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(&v28 - 1));
  objc_msgSend(a1, "setObject:forKeyedSubscript:", DictionaryRepresentation, *v14);

  v33 = v24;
  *(float *)&v34 = v33;
  v35 = v26;
  *((float *)&v34 + 1) = v35;
  *(_QWORD *)&v43 = v34;
  v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v42, 48);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", v36, *v15);

  v37 = CGPointCreateDictionaryRepresentation(point);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", v37, *v16);

  *(float *)&v38 = v30;
  return objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v38), v22);
}

uint64_t FigCaptureMetadataUtilitiesUpdateMetadataForNewFinalDimensions(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3;
  unint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  __int128 v20;
  __int128 v21;
  CGRect v22;
  CGRect v23;

  v3 = a3;
  v5 = HIDWORD(a3);
  v20 = *MEMORY[0x1E0C9D648];
  v21 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v7 = *((double *)&v20 + 1);
    v6 = *(double *)&v20;
    v9 = *((double *)&v21 + 1);
    v8 = *(double *)&v21;
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    v7 = 0.0;
    v9 = 1.0;
    v8 = 1.0;
    v6 = 0.0;
  }
  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a2, a2 >> 32, v6, v7, v8, v9, (double)v3 / (double)(int)v5);
  x = v22.origin.x;
  y = v22.origin.y;
  width = v22.size.width;
  height = v22.size.height;
  if (CGRectIsNull(v22))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v23.origin.x = x;
  v23.origin.y = y;
  v23.size.width = width;
  v23.size.height = height;
  CGRectIsEmpty(v23);
  return FigCFDictionarySetCGRect();
}

uint64_t FigCaptureMetadataUtilitiesPreventFurtherCropping(void *a1, const char *a2)
{
  return objc_msgSend(a1, "removeObjectForKey:", *MEMORY[0x1E0D05E68]);
}

void FigCaptureMetadataUtilitiesRefineFinalCropRects(float a1)
{
  CGFloat v3;
  CGFloat v4;
  double v9;
  CGFloat v10;
  CGFloat v11;

  if (a1 != 0.0 && a1 != 1.0)
  {
    if (FigCFDictionaryGetCGRectIfPresent())
    {
      v4 = 0.0;
      v3 = 0.0;
    }
    else
    {
      __asm { FMOV            V0.2D, #1.0 }
      v4 = 1.0;
      v3 = 1.0;
    }
    v9 = a1;
    FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, v3, v4, v9);
    FigCFDictionarySetCGRect();
    if (FigCFDictionaryGetCGRectIfPresent())
    {
      v11 = 0.0;
      v10 = 0.0;
    }
    else
    {
      __asm { FMOV            V0.2D, #1.0 }
      v11 = 1.0;
      v10 = 1.0;
    }
    FigCaptureMetadataUtilitiesScaleRect2D(0.0, 0.0, v10, v11, v9);
    FigCFDictionarySetCGRect();
  }
}

uint64_t FigCaptureMetadataUtilitiesCopyZoomRelatedMetadata(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _BYTE v31[128];
  _QWORD v32[8];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v4 = *MEMORY[0x1E0D05E70];
  v32[0] = *MEMORY[0x1E0D05E68];
  v32[1] = v4;
  v5 = *MEMORY[0x1E0D069C0];
  v32[2] = *MEMORY[0x1E0D05FD0];
  v32[3] = v5;
  v6 = *MEMORY[0x1E0D06F30];
  v32[4] = *MEMORY[0x1E0D06A70];
  v32[5] = v6;
  v7 = *MEMORY[0x1E0D06120];
  v32[6] = *MEMORY[0x1E0D06F48];
  v32[7] = v7;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 8);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v33, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v27;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v27 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v12)), *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v12));
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v26, v33, 16);
    }
    while (v10);
  }
  v13 = *MEMORY[0x1E0D06118];
  result = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06118]);
  if (result)
  {
    v15 = (void *)result;
    v16 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(a2, "objectForKeyedSubscript:", v13));
    objc_msgSend(a2, "setObject:forKeyedSubscript:", v16, v13);
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v17 = *MEMORY[0x1E0D061D8];
    v30[0] = *MEMORY[0x1E0D061D0];
    v30[1] = v17;
    v18 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 2, 0);
    result = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
    if (result)
    {
      v19 = result;
      v20 = *(_QWORD *)v23;
      do
      {
        v21 = 0;
        do
        {
          if (*(_QWORD *)v23 != v20)
            objc_enumerationMutation(v18);
          objc_msgSend(v16, "setObject:forKeyedSubscript:", objc_msgSend(v15, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v21)), *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v21));
          ++v21;
        }
        while (v19 != v21);
        result = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v22, v31, 16);
        v19 = result;
      }
      while (result);
    }
  }
  return result;
}

float64_t FigCaptureMetadataUtilitiesClampRectToBoundingRect(float64x2_t a1, float64_t a2, double a3, double a4, float64x2_t a5, float64_t a6, double a7, double a8)
{
  unsigned int v8;
  unsigned int v9;
  float64x2_t v10;
  float32x4_t v11;

  a5.f64[1] = a6;
  *(float *)&v8 = a5.f64[0] + a7;
  *(float *)&v9 = a6 + a8;
  v10.f64[0] = a1.f64[0] + a3;
  v10.f64[1] = a2 + a4;
  a1.f64[1] = a2;
  v11.i64[0] = __PAIR64__(v9, v8);
  v11.i64[1] = __PAIR64__(v9, v8);
  a1.f64[0] = vminnmq_f32(vmaxnmq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1), v10), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a5), a5)), v11).f32[0];
  return a1.f64[0];
}

double FigCaptureMetadataUtilitiesNormalizePoint(double a1, double a2, double a3)
{
  return a1 / a3;
}

double FigCaptureMetadataUtilitiesDenormalizePoint(double a1, double a2, double a3)
{
  return a1 * a3;
}

double FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRectForAttachedMedia(unint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  double v8;
  double x;
  double y;
  double width;
  double height;
  float v14;
  float v15;
  float v16;
  float v17;
  CGRect v19;

  v8 = *MEMORY[0x1E0C9D628];
  if (a8 == 0.0
    || (FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(vcvtad_u64_f64((double)a1 * a8), vcvtad_u64_f64((double)a2 * a8), a3, a4, a5, a6, a7), x = v19.origin.x, y = v19.origin.y, width = v19.size.width, height = v19.size.height, CGRectIsNull(v19)))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v14 = x / a8;
    v8 = (double)(int)FigCaptureRoundFloatToMultipleOf(1, v14);
    v15 = y / a8;
    FigCaptureRoundFloatToMultipleOf(1, v15);
    v16 = x / a8 + width / a8;
    FigCaptureRoundFloatToMultipleOf(1, v16);
    v17 = y / a8 + height / a8;
    FigCaptureRoundFloatToMultipleOf(1, v17);
  }
  return v8;
}

double FigCaptureMetadataUtilitiesGetFinalCropRectFromSource()
{
  __int128 v1;

  v1 = *MEMORY[0x1E0C9D628];
  if (FigCFDictionaryGetCGRectIfPresent())
    return *(double *)&v1;
  else
    return FigCaptureUnityRect();
}

double FigCaptureMetadataUtilitiesGetFinalCropRect()
{
  __int128 v1;

  v1 = *MEMORY[0x1E0C9D628];
  if (FigCFDictionaryGetCGRectIfPresent())
    return *(double *)&v1;
  else
    return FigCaptureUnityRect();
}

double FigCaptureMetadataUtilitiesGetValidBufferRect()
{
  __int128 v1;

  v1 = *MEMORY[0x1E0C9D628];
  if (FigCFDictionaryGetCGRectIfPresent())
    return *(double *)&v1;
  else
    return 0.0;
}

double FigCaptureMetadataUtilitiesGetTotalSensorCropRect()
{
  __int128 v1;

  v1 = *MEMORY[0x1E0C9D628];
  FigCFDictionaryGetCGRectIfPresent();
  return *(double *)&v1;
}

unint64_t FigCaptureMetadataUtilitiesGetRawSensorDimensions(void *a1)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;

  v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue");
  v3 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue");
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  else
    return v2 | (unint64_t)(v3 << 32);
}

uint64_t FigCaptureMetadataUtilitiesComputeNormalizedPixelBufferCoordinateTransformBetweenSampleBuffers(void *a1, void *a2, int a3, _OWORD *a4)
{
  int v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGAffineTransform v16;

  if (!a4)
    return 4294954516;
  v6 = a3 ^ 1;
  v10 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v11 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v16.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v16.c = v10;
  v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)&v16.tx = v9;
  result = fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(a1, a3 ^ 1u, &v16);
  if (!(_DWORD)result)
  {
    *(_OWORD *)&v15.a = v11;
    *(_OWORD *)&v15.c = v10;
    *(_OWORD *)&v15.tx = v9;
    result = fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(a2, v6, &v15);
    if (!(_DWORD)result)
    {
      v14 = v15;
      CGAffineTransformInvert(&t2, &v14);
      t1 = v16;
      CGAffineTransformConcat(&v14, &t1, &t2);
      result = 0;
      v8 = *(_OWORD *)&v14.c;
      *a4 = *(_OWORD *)&v14.a;
      a4[1] = v8;
      a4[2] = *(_OWORD *)&v14.tx;
    }
  }
  return result;
}

uint64_t fcmu_transformFromNormalizedBufferCoordsToDenormalizedSensorCoordsForSampleBuffer(void *a1, int a2, _OWORD *a3)
{
  void *v6;
  unint64_t v7;

  v6 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v7 = BWPixelBufferDimensionsFromSampleBuffer((opaqueCMSampleBuffer *)a1);
  return fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(v6, v7, a2, a3);
}

double FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v11;
  __int128 v12;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t RawSensorDimensions;
  int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v11 = *MEMORY[0x1E0C9D628];
  v12 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v25.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v25.c = v12;
  *(_OWORD *)&v25.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v25))
  {
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    return v11;
  }
  v24 = v25;
  v26.origin.x = a3;
  v26.origin.y = a4;
  v26.size.width = a5;
  v26.size.height = a6;
  v27 = CGRectApplyAffineTransform(v26, &v24);
  x = v27.origin.x;
  y = v27.origin.y;
  width = v27.size.width;
  height = v27.size.height;
  RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  v18 = RawSensorDimensions;
  v19 = HIDWORD(RawSensorDimensions);
  v20 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
  if (v20 <= 1)
    v21 = 1;
  else
    v21 = v20;
  v22 = (v21 * v18);
  if (!FigCaptureVideoDimensionsAreValid(v22 | ((unint64_t)(v21 * v19) << 32)))
  {
    fig_log_get_emitter();
    goto LABEL_12;
  }
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  if (CGRectIsEmpty(v28))
    return 0.0;
  else
    return x / (double)(int)v22;
}

uint64_t fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(void *a1, uint64_t a2, int a3, _OWORD *a4)
{
  __int128 v8;
  void *v9;
  void *v10;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double ValidBufferRect;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  void *v27;
  uint64_t result;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL IsEmpty;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  float v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CGAffineTransform v51;
  CGAffineTransform v52;
  CGAffineTransform v53;
  CGAffineTransform v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  if (!a4 || !a1 || !FigCaptureVideoDimensionsAreValid(a2))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  v8 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)&v53.a = *MEMORY[0x1E0C9D628];
  *(_OWORD *)&v53.c = v8;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    v9 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]);
    if (v9)
    {
      v10 = v9;
      v53.a = v53.a * (double)(int)objc_msgSend(v9, "intValue");
      v53.b = v53.b * (double)(int)objc_msgSend(v10, "intValue");
      v53.c = v53.c * (double)(int)objc_msgSend(v10, "intValue");
      v53.d = v53.d * (double)(int)objc_msgSend(v10, "intValue");
    }
  }
  a = v53.a;
  b = v53.b;
  c = v53.c;
  d = v53.d;
  v55.origin.x = v53.a;
  v55.origin.y = v53.b;
  v55.size.width = v53.c;
  v55.size.height = v53.d;
  if (CGRectIsNull(v55))
    return 4294954516;
  ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = *MEMORY[0x1E0C9BAA8];
  v23 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v54.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v54.c = v23;
  v24 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  *(_OWORD *)&v54.tx = v24;
  if (!a3)
  {
LABEL_14:
    v52 = v54;
    CGAffineTransformTranslate(&v53, &v52, a, b);
    v54 = v53;
    v52 = v53;
    CGAffineTransformScale(&v53, &v52, c, d);
    v54 = v53;
    v38 = (double)(int)a2;
    v39 = (double)SHIDWORD(a2);
    v40 = 0.0;
    v58.origin.x = 0.0;
    v58.origin.y = 0.0;
    v56.origin.x = ValidBufferRect;
    v56.origin.y = v17;
    v56.size.width = v19;
    v56.size.height = v21;
    v58.size.width = (double)(int)a2;
    v58.size.height = (double)SHIDWORD(a2);
    if (!CGRectEqualToRect(v56, v58))
    {
      v57.origin.x = ValidBufferRect;
      v57.origin.y = v17;
      v57.size.width = v19;
      v57.size.height = v21;
      IsEmpty = CGRectIsEmpty(v57);
      v42 = 0.0;
      v43 = 1.0;
      v44 = 1.0;
      if (!IsEmpty)
      {
        v40 = ValidBufferRect / v38;
        v42 = v17 / v39;
        v43 = v19 / v38;
        v44 = v21 / v39;
      }
      v52 = v54;
      CGAffineTransformScale(&v53, &v52, 1.0 / v43, 1.0 / v44);
      v54 = v53;
      v52 = v53;
      CGAffineTransformTranslate(&v53, &v52, 0.0 - v40, 0.0 - v42);
      v54 = v53;
    }
    result = 0;
    v45 = *(_OWORD *)&v54.c;
    *a4 = *(_OWORD *)&v54.a;
    a4[1] = v45;
    a4[2] = *(_OWORD *)&v54.tx;
    return result;
  }
  v48 = v24;
  v49 = v23;
  v50 = v22;
  v25 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
  *(_OWORD *)&v53.a = *MEMORY[0x1E0C83FE8];
  *(_OWORD *)&v53.c = v25;
  *(_OWORD *)&v53.tx = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
  v26 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06120]);
  if (!v26)
    return 4294954516;
  v27 = v26;
  if (objc_msgSend(v26, "length") != 48)
    return 0;
  objc_msgSend(v27, "getBytes:length:", &v53, 48);
  result = 4294954516;
  if (*(float *)&v53.a > 0.0 && *((float *)&v53.c + 1) > 0.0)
  {
    v46 = *(float *)&v53.tx;
    v47 = b;
    v29 = a;
    v30 = d;
    v31 = c;
    v32 = v21;
    v33 = v19;
    v34 = v17;
    v35 = ValidBufferRect;
    v36 = *((float *)&v53.tx + 1);
    *(_OWORD *)&v52.a = v50;
    *(_OWORD *)&v52.c = v49;
    *(_OWORD *)&v52.tx = v48;
    CGAffineTransformScale(&v54, &v52, 1.0 / *(float *)&v53.a, 1.0 / *((float *)&v53.c + 1));
    v37 = v36;
    ValidBufferRect = v35;
    v17 = v34;
    v19 = v33;
    v21 = v32;
    c = v31;
    d = v30;
    a = v29;
    b = v47;
    v51 = v54;
    CGAffineTransformTranslate(&v52, &v51, 0.0 - v46, 0.0 - v37);
    v54 = v52;
    goto LABEL_14;
  }
  return result;
}

double FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(void *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double v12;
  unint64_t RawSensorDimensions;
  int v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  BOOL IsEmpty;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 v27;
  double v29;
  CGAffineTransform v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGRect v33;
  CGRect v34;

  v12 = *MEMORY[0x1E0C9D628];
  RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  v14 = RawSensorDimensions;
  v15 = HIDWORD(RawSensorDimensions);
  v16 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
  if (v16 <= 1)
    v17 = 1;
  else
    v17 = v16;
  v18 = (v17 * v14);
  v19 = (v17 * v15);
  if (FigCaptureVideoDimensionsAreValid(v18 | (v19 << 32)))
  {
    v29 = v12;
    v20 = (double)(int)v18;
    v33.origin.x = a3;
    v33.origin.y = a4;
    v33.size.width = a5;
    v33.size.height = a6;
    IsEmpty = CGRectIsEmpty(v33);
    v22 = a6 * (double)(int)v19;
    if (IsEmpty)
      v23 = 0.0;
    else
      v23 = a3 * v20;
    if (IsEmpty)
      v24 = 0.0;
    else
      v24 = a4 * (double)(int)v19;
    if (IsEmpty)
      v25 = (double)(int)v18;
    else
      v25 = a5 * v20;
    if (IsEmpty)
      v26 = (double)(int)v19;
    else
      v26 = v22;
    v27 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v32.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v32.c = v27;
    *(_OWORD *)&v32.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v32))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v29;
    }
    else
    {
      v30 = v32;
      memset(&v31, 0, sizeof(v31));
      CGAffineTransformInvert(&v31, &v30);
      v30 = v31;
      v34.origin.x = v23;
      v34.origin.y = v24;
      v34.size.width = v25;
      v34.size.height = v26;
      *(_QWORD *)&v12 = (unint64_t)CGRectApplyAffineTransform(v34, &v30);
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v12;
}

double FigCaptureMetadataUtilitiesNormalizedBufferPointFromNormalizedSensorPoint(void *a1, uint64_t a2, double a3, double a4)
{
  double v8;
  unint64_t RawSensorDimensions;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGAffineTransform v20;

  v8 = *MEMORY[0x1E0C9D538];
  RawSensorDimensions = FigCaptureMetadataUtilitiesGetRawSensorDimensions(a1);
  v10 = RawSensorDimensions;
  v11 = HIDWORD(RawSensorDimensions);
  v12 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  v14 = (v13 * v10);
  v15 = (v13 * v11);
  if (!FigCaptureVideoDimensionsAreValid(v14 | (v15 << 32)))
  {
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    return v8;
  }
  v16 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v20.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v20.c = v16;
  *(_OWORD *)&v20.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  if (fcmu_transformFromNormalizedBufferCoordsToDenormalizedNonBinnedSensorCoords(a1, a2, 0, &v20))
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
  v18 = v20;
  memset(&v19, 0, sizeof(v19));
  CGAffineTransformInvert(&v19, &v18);
  return v19.tx + a4 * (double)(int)v15 * v19.c + v19.a * (a3 * (double)(int)v14);
}

double FigCaptureMetadataUtilitiesNormalizedSensorCenterOffsetInValidBufferRect(void *a1)
{
  void *v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BYTE v11[32];

  v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v3 = BWPixelBufferDimensionsFromSampleBuffer((opaqueCMSampleBuffer *)a1);
  v4 = FigCaptureMetadataUtilitiesNormalizedBufferPointFromNormalizedSensorPoint(v2, v3, 0.5, 0.5);
  v6 = v5;
  *(_OWORD *)v11 = *MEMORY[0x1E0C9D628];
  *(_OWORD *)&v11[16] = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  FigCFDictionaryGetCGRectIfPresent();
  if (!CGRectIsNull(*(CGRect *)v11))
  {
    if (CGRectIsEmpty(*(CGRect *)v11))
    {
      v7 = 0.0;
      v8 = 1.0;
      v9 = 0.0;
    }
    else
    {
      v7 = *(double *)v11 / (double)(int)v3;
      v9 = *(double *)&v11[8] / (double)SHIDWORD(v3);
      v8 = *(double *)&v11[16] / (double)(int)v3;
    }
    v4 = FigCaptureTransformPointToCoordinateSpaceOfRect(v4, v6, v7, v9, v8);
  }
  return v4 + -0.5;
}

float64_t FigCaptureMetadataUtilitiesRoundRectToEvenCoordinatesPreservingSquareness(unsigned int a1, float64_t a2, float64x2_t a3, double a4, double a5, float a6)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v13;
  int32x2_t v14;
  int64x2_t v15;
  float64x2_t v16;

  a3.f64[1] = a2;
  v6 = vrndaq_f64(a3);
  v7 = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(a6), 0), vabdq_f64(a3, v6)), (int8x16_t)v6, (int8x16_t)a3);
  __asm { FMOV            V2.2D, #0.5 }
  v13 = vmulq_f64(v7, _Q2);
  v14 = vdup_n_s32(a1);
  v15.i64[0] = v14.u32[0];
  v15.i64[1] = v14.u32[1];
  v16 = (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v15, 0x3FuLL)), (int8x16_t)vrndpq_f64(v13), (int8x16_t)vrndmq_f64(v13));
  return vaddq_f64(v16, v16).f64[1];
}

void FigCaptureMetadataUtilitiesRoundDenormalizedRectToRawSensorCFABoundary(void *a1)
{
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
  FigCaptureMetadataUtilitiesRoundRectToMultipleOf();
}

double FigCaptureMetadataUtilitiesDenormalizedRectWithinBoundingDimensionsCenteredOnPoint(int a1, int a2, double a3)
{
  int v3;
  double v4;
  int v5;
  double v6;
  double v7;

  if (a2 >= a1)
    v3 = a1;
  else
    v3 = a2;
  v4 = a3 * (double)a1;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  v6 = v4 - (double)(v5 >> 1);
  if (v6 > (double)(a1 - v3))
    v6 = (double)(a1 - v3);
  if (*MEMORY[0x1E0C9D538] > v6)
    v6 = *MEMORY[0x1E0C9D538];
  v7 = round(v6);
  if (vabdd_f64(v6, v7) <= 0.00999999978)
    v6 = v7;
  return ceil(v6);
}

double FigCaptureMetadataUtilitiesNormalizedRectEnforcedWithinValidRegionAfterGDC(uint64_t a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v25;
  _OWORD v26[7];
  CGRect v27;
  CGRect v28;

  memset(v26, 0, sizeof(v26));
  if (!objc_msgSend(MEMORY[0x1E0D08A78], "getGDCParams:cameraInfo:metadata:", v26, a1, a2))
  {
    v13 = FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(a2, a3, a4, a5, a6, a7);
    v15 = v14;
    v25 = a4;
    v17 = v16;
    v19 = v18;
    objc_msgSend(MEMORY[0x1E0D08A78], "adjustCropRectangle:withGDCParams:", v26);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
    v28.origin.x = v13;
    v28.origin.y = v15;
    v28.size.width = v17;
    v28.size.height = v19;
    a4 = v25;
    if (!CGRectEqualToRect(v27, v28))
      return FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(a2, a3, x, y, width, height);
  }
  return a4;
}

void FigCaptureMetadataUtilitiesAddMissingDutyCycleMetadata(CMAttachmentBearerRef target, void *a2)
{
  CFTypeRef v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken == -1)
  {
    if (!target)
      return;
  }
  else
  {
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
    if (!target)
      return;
  }
  if (a2)
  {
    v4 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = 0;
      v7 = *MEMORY[0x1E0D06790];
      v21 = *MEMORY[0x1E0D06C40];
      v22 = v7;
      v8 = *MEMORY[0x1E0D067D0];
      v23 = *MEMORY[0x1E0D06780];
      v24 = v8;
      v9 = *MEMORY[0x1E0D06A98];
      v25 = *MEMORY[0x1E0D06AB8];
      v26 = v9;
      v10 = *MEMORY[0x1E0D067A0];
      v27 = *MEMORY[0x1E0D068C0];
      v28 = v10;
      v11 = *MEMORY[0x1E0D06920];
      v29 = *MEMORY[0x1E0D06770];
      v30 = v11;
      v12 = *MEMORY[0x1E0D06CD0];
      v31 = *MEMORY[0x1E0D06D98];
      v32 = v12;
      v13 = *MEMORY[0x1E0D06788];
      v33 = *MEMORY[0x1E0D067B0];
      v34 = v13;
      v14 = *MEMORY[0x1E0D06C78];
      v35 = *MEMORY[0x1E0D06A10];
      v36 = v14;
      v15 = *MEMORY[0x1E0D06A18];
      v37 = *MEMORY[0x1E0D06798];
      v38 = v15;
      v39 = *MEMORY[0x1E0D06C58];
      while (1)
      {
        v16 = *(uint64_t *)((char *)&v21 + v6);
        v17 = objc_msgSend(v5, "objectForKeyedSubscript:", v16, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
                v37,
                v38,
                v39,
                v40);
        if (v17)
          break;
        v20 = objc_msgSend(a2, "objectForKeyedSubscript:", v16);
        if (v20)
        {
          v18 = v20;
          v19 = v5;
          goto LABEL_10;
        }
LABEL_11:
        v6 += 8;
        if (v6 == 152)
          return;
      }
      v18 = v17;
      v19 = a2;
LABEL_10:
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v18, v16);
      goto LABEL_11;
    }
  }
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, void *a2, uint64_t a3, int32_t a4)
{
  int8x8_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  unsigned int LocalIDForMetadataIdentifyingFactors;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  int32_t v37;
  __int128 v38;
  CMTimeEpoch v39;
  uint64_t v41;
  int32_t v42;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  CMTime time;
  CMTime v46;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CMSampleBufferRef v49;
  CMMetadataFormatDescriptionRef formatDescriptionOut;
  _QWORD v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[2];
  _QWORD v56[2];
  _OWORD v57[4];
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (fcmu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcmu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_160);
  v49 = 0;
  formatDescriptionOut = 0;
  theBuffer = 0;
  if ((*(_BYTE *)(a1 + 12) & 1) == 0)
  {
    fig_log_get_emitter();
LABEL_37:
    FigDebugAssert3();
    goto LABEL_25;
  }
  v41 = a3;
  v42 = a4;
  v9 = *MEMORY[0x1E0CA2528];
  v10 = *MEMORY[0x1E0CA4CC0];
  v11 = *MEMORY[0x1E0CA2518];
  v55[0] = *MEMORY[0x1E0CA2528];
  v55[1] = v11;
  v12 = *MEMORY[0x1E0CA2468];
  v56[0] = v10;
  v56[1] = v12;
  v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 2));
  v14 = (uint64_t *)MEMORY[0x1E0CA2578];
  v15 = (uint64_t *)MEMORY[0x1E0CA23E8];
  if (a2)
  {
    v16 = *MEMORY[0x1E0CA2570];
    v53[0] = v9;
    v53[1] = v11;
    v17 = *MEMORY[0x1E0CA2420];
    v54[0] = v16;
    v54[1] = v17;
    objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 2));
    v18 = *v14;
    v51[0] = v9;
    v51[1] = v11;
    v19 = *v15;
    v52[0] = v18;
    v52[1] = v19;
    objc_msgSend(v13, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, v51, 2));
  }
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x6D656278u, (CFArrayRef)v13, &formatDescriptionOut))
  {
    goto LABEL_36;
  }
  LocalIDForMetadataIdentifyingFactors = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
  if (!LocalIDForMetadataIdentifyingFactors)
    goto LABEL_36;
  v22 = LocalIDForMetadataIdentifyingFactors;
  v23 = objc_msgSend(a2, "length");
  if (v23)
  {
    if (objc_msgSend(a2, "length") == 36)
    {
      v24 = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
      if (v24)
      {
        v25 = bswap32(v24);
        v26 = objc_msgSend(a2, "bytes");
        for (i = 0; i != 9; ++i)
          *((_QWORD *)v57 + i) = bswap64(COERCE_UNSIGNED_INT64(*(float *)(v26 + 4 * i)));
        if (FigCaptureVideoDimensionsAreValid(v41))
        {
          v28 = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
          if (v28)
          {
            v4 = vrev32_s8((int8x8_t)vcvt_f32_s32((int32x2_t)v41));
            v29 = bswap32(v28);
            v30 = 16;
            v31 = 80;
            goto LABEL_17;
          }
        }
      }
    }
LABEL_36:
    fig_log_get_emitter();
    goto LABEL_37;
  }
  v25 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
LABEL_17:
  if (CMBlockBufferCreateWithMemoryBlock(v20, 0, (v31 | 9) + v30, v20, 0, 0, (v31 | 9) + v30, 1u, &theBuffer))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
  dataPointerOut = 0;
  if (CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
  *(_DWORD *)dataPointerOut = 150994944;
  *((_DWORD *)dataPointerOut + 1) = bswap32(v22);
  v32 = dataPointerOut;
  dataPointerOut[8] = -1;
  v33 = v32 + 9;
  dataPointerOut = v32 + 9;
  if (v23)
  {
    v34 = v57[0];
    *(_OWORD *)(v32 + 33) = v57[1];
    v35 = v57[3];
    *(_OWORD *)(v32 + 49) = v57[2];
    *(_OWORD *)(v32 + 65) = v35;
    *(_DWORD *)(v32 + 9) = (_DWORD)v31 << 24;
    *(_DWORD *)(v32 + 13) = v25;
    *(_QWORD *)(v32 + 81) = v58;
    *(_OWORD *)(v32 + 17) = v34;
    dataPointerOut = &v33[v31];
    *(_DWORD *)&v33[v31] = (_DWORD)v30 << 24;
    *((_DWORD *)dataPointerOut + 1) = v29;
    v36 = dataPointerOut;
    *((int8x8_t *)dataPointerOut + 1) = v4;
    dataPointerOut = &v36[v30];
  }
  if (v42)
    v37 = v42;
  else
    v37 = 600;
  memset(&v46, 0, sizeof(v46));
  CMTimeMake(&time, 1, v37);
  CMTimeConvertScale(&v46, &time, *(_DWORD *)(a1 + 8), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  v38 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v38;
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  v39 = *(_QWORD *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  sampleTimingArray.presentationTimeStamp.epoch = v39;
  sampleTimingArray.duration = v46;
  sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  if (CMSampleBufferCreate(v20, theBuffer, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v49))
  {
    fig_log_get_emitter();
    goto LABEL_37;
  }
LABEL_25:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (theBuffer)
    CFRelease(theBuffer);
  return v49;
}

CFTypeRef FigCaptureMetadataUtilitiesCreateBoxedVideoOrientationBlockBuffer()
{
  const void *BlockBuffer;

  if (FigBoxedMetadataCreateForConstruction()
    || FigBoxedMetadataAppendValue()
    || FigBoxedMetadataEndConstruction())
  {
    return 0;
  }
  BlockBuffer = (const void *)FigBoxedMetadataGetBlockBuffer();
  return CFRetain(BlockBuffer);
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateVideoOrientationSampleBuffer(uint64_t a1, OpaqueCMBlockBuffer *cf, uint64_t a3, const opaqueCMFormatDescription *a4)
{
  OpaqueCMBlockBuffer *v6;
  CMSampleBufferRef result;
  __int128 v8;
  CMTimeEpoch v9;
  __int128 v10;
  CMTimeEpoch v11;
  OSStatus v12;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v15;

  v15 = 0;
  if (cf)
  {
    v6 = cf;
    CFRetain(cf);
  }
  else
  {
    result = (CMSampleBufferRef)FigCaptureMetadataUtilitiesCreateBoxedVideoOrientationBlockBuffer();
    v6 = result;
    if (!result)
      return result;
  }
  v8 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v8;
  v9 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  v10 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E90];
  *(_OWORD *)&sampleTimingArray.duration.epoch = v10;
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  v11 = *(_QWORD *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = v9;
  sampleTimingArray.presentationTimeStamp.epoch = v11;
  sampleSizeArray = CMBlockBufferGetDataLength(v6);
  v12 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 1u, 0, 0, a4, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v15);
  CFRelease(v6);
  result = v15;
  if (v12)
  {
    if (v15)
    {
      CFRelease(v15);
      return 0;
    }
  }
  return result;
}

void *FigCaptureMetadataUtilitiesCreateMetadataSidecarFileURL(void *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "stringByDeletingPathExtension"), "stringByAppendingString:", CFSTR("_metadata")), "stringByAppendingPathExtension:", CFSTR("mov"));
    if (!v1 || (result = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initFileURLWithPath:", v1)) == 0)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;

  if (!objc_msgSend(a2, "count"))
    return objc_msgSend(a1, "copy");
  v4 = fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(a1);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    objc_msgSend(v5, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CC4748], *MEMORY[0x1E0CC47F0]);
    v7 = *MEMORY[0x1E0CC47F8];
  }
  else
  {
    v9 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v4);
    v7 = *MEMORY[0x1E0CC47F8];
    v10 = objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CC47F8]);
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v9);
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v10);
  }
  objc_msgSend(v6, "addObjectsFromArray:", a2);
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, v7);
  v11 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (a1)
    v12 = (void *)objc_msgSend(v11, "initWithArray:", a1);
  else
    v12 = (void *)objc_msgSend(v11, "initWithCapacity:", 1);
  v13 = v12;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
    objc_msgSend(v12, "addObject:", v5);
  else
    objc_msgSend(v12, "setObject:atIndexedSubscript:", v5, v4);
  return (uint64_t)v13;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithVitalityScore(void *a1, uint64_t a2, float a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  _QWORD v18[2];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[6];

  v22[4] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1A858DD40]();
  v7 = *MEMORY[0x1E0CC5C30];
  v8 = *MEMORY[0x1E0CC47B0];
  v21[0] = *MEMORY[0x1E0CC47A8];
  v6 = v21[0];
  v21[1] = v8;
  v9 = *MEMORY[0x1E0CA25A0];
  v22[0] = v7;
  v22[1] = v9;
  v10 = *MEMORY[0x1E0CC4778];
  v22[2] = *MEMORY[0x1E0CA23F0];
  v11 = *MEMORY[0x1E0CC47E8];
  v21[2] = v10;
  v21[3] = v11;
  *(float *)&v12 = a3;
  v22[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
  v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 4);
  v14 = *MEMORY[0x1E0CC5C38];
  v19[0] = v6;
  v19[1] = v8;
  v20[0] = v14;
  v20[1] = v9;
  v20[2] = *MEMORY[0x1E0CA2478];
  v19[2] = v10;
  v19[3] = v11;
  v20[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v18[0] = v13;
  v18[1] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 2));
  objc_autoreleasePoolPop(v5);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithVariableFrameRate(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  _QWORD v15[2];
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[4];
  _QWORD v19[6];

  v19[4] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1A858DD40]();
  v7 = *MEMORY[0x1E0CC47B0];
  v18[0] = *MEMORY[0x1E0CC47A8];
  v6 = v18[0];
  v18[1] = v7;
  v8 = *MEMORY[0x1E0CA25A0];
  v19[0] = CFSTR("com.apple.quicktime.60fps.variableframerate");
  v19[1] = v8;
  v9 = *MEMORY[0x1E0CC4778];
  v19[2] = *MEMORY[0x1E0CA2488];
  v10 = *MEMORY[0x1E0CC47E8];
  v18[2] = v9;
  v18[3] = v10;
  v19[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 4);
  v16[0] = v6;
  v16[1] = v7;
  v17[0] = CFSTR("com.apple.quicktime.maximumframerate");
  v17[1] = v8;
  v17[2] = *MEMORY[0x1E0CA2458];
  v16[2] = v9;
  v16[3] = v10;
  v17[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
  v15[0] = v11;
  v15[1] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 2));
  objc_autoreleasePoolPop(v5);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialOverCaptureQualityScore(void *a1, uint64_t a2, float a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  _QWORD v18[2];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[6];

  v22[4] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1A858DD40]();
  v7 = *MEMORY[0x1E0CC5C40];
  v8 = *MEMORY[0x1E0CC47B0];
  v21[0] = *MEMORY[0x1E0CC47A8];
  v6 = v21[0];
  v21[1] = v8;
  v9 = *MEMORY[0x1E0CA25A0];
  v22[0] = v7;
  v22[1] = v9;
  v10 = *MEMORY[0x1E0CC4778];
  v22[2] = *MEMORY[0x1E0CA23F0];
  v11 = *MEMORY[0x1E0CC47E8];
  v21[2] = v10;
  v21[3] = v11;
  *(float *)&v12 = a3;
  v22[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
  v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 4);
  v14 = *MEMORY[0x1E0CC5C48];
  v19[0] = v6;
  v19[1] = v8;
  v20[0] = v14;
  v20[1] = v9;
  v20[2] = *MEMORY[0x1E0CA2478];
  v19[2] = v10;
  v19[3] = v11;
  v20[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v18[0] = v13;
  v18[1] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 2));
  objc_autoreleasePoolPop(v5);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithLimitStillImageTransformFlagIfRequired(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1A858DD40]();
  v3 = *MEMORY[0x1E0D08688];
  v4 = *MEMORY[0x1E0CC47B0];
  v11[0] = *MEMORY[0x1E0CC47A8];
  v11[1] = v4;
  v5 = *MEMORY[0x1E0CA25A0];
  v12[0] = v3;
  v12[1] = v5;
  v6 = *MEMORY[0x1E0CA2488];
  v7 = *MEMORY[0x1E0CC47E8];
  v11[2] = *MEMORY[0x1E0CC4778];
  v11[3] = v7;
  v12[2] = v6;
  v12[3] = &unk_1E49F8568;
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1));
  objc_autoreleasePoolPop(v2);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSubjectRelightingAppliedCurveParameter(void *a1, float a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0CC47B0];
  v12[0] = *MEMORY[0x1E0CC47A8];
  v12[1] = v5;
  v6 = *MEMORY[0x1E0CA25A0];
  v13[0] = *MEMORY[0x1E0D08680];
  v13[1] = v6;
  v13[2] = *MEMORY[0x1E0CA23F0];
  v7 = *MEMORY[0x1E0CC47E8];
  v12[2] = *MEMORY[0x1E0CC4778];
  v12[3] = v7;
  *(float *)&v8 = a2;
  v13[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1));
  objc_autoreleasePoolPop(v4);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithCinematicVideoGlobalMetadata(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0CC5C10];
  v6 = *MEMORY[0x1E0CC47B0];
  v12[0] = *MEMORY[0x1E0CC47A8];
  v12[1] = v6;
  v7 = *MEMORY[0x1E0CA25A0];
  v13[0] = v5;
  v13[1] = v7;
  v8 = *MEMORY[0x1E0CC47E8];
  v12[2] = *MEMORY[0x1E0CC4778];
  v12[3] = v8;
  v13[2] = *MEMORY[0x1E0CA2440];
  v13[3] = a2;
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1));
  objc_autoreleasePoolPop(v4);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithActionCameraGlobalMetadata(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0CC47B0];
  v11[0] = *MEMORY[0x1E0CC47A8];
  v11[1] = v5;
  v6 = *MEMORY[0x1E0CA25A0];
  v12[0] = *MEMORY[0x1E0D08678];
  v12[1] = v6;
  v12[2] = *MEMORY[0x1E0CA2478];
  v7 = *MEMORY[0x1E0CC47E8];
  v11[2] = *MEMORY[0x1E0CC4778];
  v11[3] = v7;
  v12[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1));
  objc_autoreleasePoolPop(v4);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialVersionMetadata(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0D086C8];
  v6 = *MEMORY[0x1E0CC47B0];
  v12[0] = *MEMORY[0x1E0CC47A8];
  v12[1] = v6;
  v7 = *MEMORY[0x1E0CA25A0];
  v13[0] = v5;
  v13[1] = v7;
  v8 = *MEMORY[0x1E0CC47E8];
  v12[2] = *MEMORY[0x1E0CC4778];
  v12[3] = v8;
  v13[2] = *MEMORY[0x1E0CA2498];
  v13[3] = a2;
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1));
  objc_autoreleasePoolPop(v4);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSpatialAggressorsSeenMetadata(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0CC47B0];
  v11[0] = *MEMORY[0x1E0CC47A8];
  v11[1] = v5;
  v6 = *MEMORY[0x1E0CA25A0];
  v12[0] = *MEMORY[0x1E0D086C0];
  v12[1] = v6;
  v12[2] = *MEMORY[0x1E0CA2488];
  v7 = *MEMORY[0x1E0CC47E8];
  v11[2] = *MEMORY[0x1E0CC4778];
  v11[3] = v7;
  v12[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 4);
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1));
  objc_autoreleasePoolPop(v4);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSmartStyleMetadata(void *a1, void *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  void *context;
  _QWORD v31[4];
  _QWORD v32[4];
  _QWORD v33[5];
  _QWORD v34[4];
  _QWORD v35[4];
  _QWORD v36[4];
  _QWORD v37[4];
  _QWORD v38[4];
  _QWORD v39[4];
  _QWORD v40[4];
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x1E0C80C00];
  context = (void *)MEMORY[0x1A858DD40]();
  v5 = *MEMORY[0x1E0D086B0];
  v6 = *MEMORY[0x1E0CC47B0];
  v44[0] = *MEMORY[0x1E0CC47A8];
  v4 = v44[0];
  v44[1] = v6;
  v7 = *MEMORY[0x1E0CA25A0];
  v47[0] = v5;
  v47[1] = v7;
  v28 = *MEMORY[0x1E0CA2478];
  v9 = *MEMORY[0x1E0CA2478];
  v10 = *MEMORY[0x1E0CC47E8];
  v45 = *MEMORY[0x1E0CC4778];
  v8 = v45;
  v46 = v10;
  v47[2] = v9;
  v47[3] = &unk_1E49F8568;
  v26 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v44, 4);
  v11 = *MEMORY[0x1E0D086B8];
  v40[0] = v4;
  v40[1] = v6;
  v41[0] = v11;
  v41[1] = v7;
  v42 = *MEMORY[0x1E0CA23F8];
  v12 = v42;
  v40[2] = v8;
  v40[3] = v10;
  v13 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "toneBias");
  v43 = objc_msgSend(v13, "numberWithFloat:");
  v25 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 4);
  v14 = *MEMORY[0x1E0D08698];
  v38[0] = v4;
  v38[1] = v6;
  v39[0] = v14;
  v39[1] = v7;
  v39[2] = v12;
  v38[2] = v8;
  v38[3] = v10;
  v15 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "colorBias");
  v39[3] = objc_msgSend(v15, "numberWithFloat:");
  v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 4);
  v17 = *MEMORY[0x1E0D086A0];
  v36[0] = v4;
  v36[1] = v6;
  v37[0] = v17;
  v37[1] = v7;
  v37[2] = v12;
  v36[2] = v8;
  v36[3] = v10;
  v18 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a2, "intensity");
  v37[3] = objc_msgSend(v18, "numberWithFloat:");
  v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 4);
  v20 = *MEMORY[0x1E0D086A8];
  v34[0] = v4;
  v34[1] = v6;
  v35[0] = v20;
  v35[1] = v7;
  v35[2] = *MEMORY[0x1E0CA2488];
  v34[2] = v8;
  v34[3] = v10;
  v35[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  v33[0] = v26;
  v33[1] = v25;
  v33[2] = v16;
  v33[3] = v19;
  v33[4] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 4);
  v21 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 5));
  v22 = *MEMORY[0x1E0D08690];
  v31[0] = v4;
  v31[1] = v6;
  v32[0] = v22;
  v32[1] = v7;
  v32[2] = v28;
  v31[2] = v8;
  v31[3] = v10;
  v32[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(MEMORY[0x1E0D08AD0], "makerNoteTagForSmartStyleCastType:smartStyleVersion:", objc_msgSend(a2, "cast"), 1));
  objc_msgSend(v21, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 4));
  MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems = fcmu_createMovieLevelMetadataCopyWithAddedQuickTimeMetadataItems(a1, v21);
  objc_autoreleasePoolPop(context);
  return MovieLevelMetadataCopyWithAddedQuickTimeMetadataItems;
}

uint64_t FigCaptureMetadataUtilitiesAdjustValidBufferRectForDarkShadeCropping(void *a1)
{
  void *v2;
  uint64_t result;
  unsigned int v4;
  int v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  float v12;
  double v13;
  double width;
  double height;
  const opaqueCMFormatDescription *FormatDescription;
  CMVideoDimensions Dimensions;
  __int128 v18;
  __int128 v19;

  v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  result = fcmu_darkShadeHorizontalCrop((void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
  if ((_DWORD)result)
  {
    v4 = result;
    v18 = *MEMORY[0x1E0C9D648];
    v19 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
    v5 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue");
    v6 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue");
    result = FigCFDictionaryGetCGRectIfPresent();
    if ((_DWORD)result || (result = FigCFDictionaryGetCGRectIfPresent(), (_DWORD)result))
    {
      v8 = *((double *)&v18 + 1);
      v7 = *(double *)&v18;
      v10 = *((double *)&v19 + 1);
      v9 = *(double *)&v19;
    }
    else
    {
      v9 = (double)v5;
      v10 = (double)v6;
      v8 = 0.0;
      v7 = 0.0;
    }
    v11 = v5 - 2 * (v4 >> (v5 == 2112));
    if (v9 > (double)v11)
    {
      v12 = v9 / (double)v11;
      v13 = (float)(1.0 / v12);
      fcmu_scaleValidBufferRectOverWidth(v7, v8, v9, v10, v13);
      FigCFDictionarySetCGRect();
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        height = 0.0;
        width = 0.0;
      }
      else
      {
        FormatDescription = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a1);
        Dimensions = CMVideoFormatDescriptionGetDimensions(FormatDescription);
        width = (double)Dimensions.width;
        height = (double)Dimensions.height;
      }
      fcmu_scaleValidBufferRectOverWidth(0.0, 0.0, width, height, v13);
      return FigCFDictionarySetCGRect();
    }
  }
  return result;
}

double fcmu_scaleValidBufferRectOverWidth(double a1, double a2, double a3, double a4, double a5)
{
  float v6;
  float v7;

  v6 = a3 * a5;
  v7 = (a3 - v6) * 0.5;
  return a1 + (double)(int)FigCaptureRoundFloatToMultipleOf(2, v7);
}

CGImageMetadata *FigCaptureMetadataUtilitiesCreateAuxiliaryImagePropertiesFromGainMapSampleBuffer(void *a1)
{
  CGImageMetadata *Mutable;
  CGImageMetadata *v3;
  const __CFString *v4;
  const __CFString *v5;
  void *v6;
  const void *v7;
  uint64_t v9;
  const void *v10;

  Mutable = CGImageMetadataCreateMutable();
  v3 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    return v3;
  }
  v4 = (const __CFString *)*MEMORY[0x1E0D084F8];
  v5 = (const __CFString *)*MEMORY[0x1E0D08500];
  if (!CGImageMetadataRegisterNamespaceForPrefix(Mutable, (CFStringRef)*MEMORY[0x1E0D084F8], (CFStringRef)*MEMORY[0x1E0D08500], 0))
  {
    if (!FigSignalErrorAt())
      return v3;
    goto LABEL_17;
  }
  v6 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F08]);
  v7 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EF8]);
  if (objc_msgSend(v6, "intValue") < 0x20000 || v6 == 0)
    v9 = 0x10000;
  else
    v9 = objc_msgSend(v6, "intValue");
  v10 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
  if (fcmu_addValueToAuxiliaryImageProperties(v3, v10, v4, v5, (CFStringRef)*MEMORY[0x1E0D08510])
    || v7 && fcmu_addValueToAuxiliaryImageProperties(v3, v7, v4, v5, (CFStringRef)*MEMORY[0x1E0D08508]))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_17:
    CFRelease(v3);
    return 0;
  }
  return v3;
}

uint64_t fcmu_addValueToAuxiliaryImageProperties(CGImageMetadata *a1, CFTypeRef value, CFStringRef xmlns, CFStringRef prefix, CFStringRef name)
{
  CGImageMetadataTagRef v8;
  CGImageMetadataTag *v9;
  __CFString *v10;
  uint64_t v11;

  if (value)
  {
    v8 = CGImageMetadataTagCreate(xmlns, prefix, name, kCGImageMetadataTypeDefault, value);
    if (v8)
    {
      v9 = v8;
      v10 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@:%@"), prefix, name);
      if (v10)
      {
        if (CGImageMetadataSetTagWithPath(a1, 0, v10, v9))
        {
          v11 = 0;
        }
        else
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          v11 = 4294954516;
        }
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v11 = 4294954510;
      }
      CFRelease(v9);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v10 = 0;
      v11 = 4294954510;
    }
  }
  else
  {
    v10 = 0;
    v11 = 4294954516;
  }

  return v11;
}

CGImageMetadata *FigCaptureMetadataUtilitiesCreateAuxiliaryImagePropertiesFromDepthMetadata(void *a1)
{
  CGImageMetadata *Mutable;
  CGImageMetadata *v3;
  const __CFString *v4;
  const __CFString *v5;
  const void *v6;
  const __CFString *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const __CFString *v12;
  const __CFDictionary *v13;
  const void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  double v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  void *v27;
  double v28;
  uint64_t j;
  const __CFDictionary *v30;
  const void *v31;
  const void *v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const __CFString *v37;
  const __CFString *v38;
  const void *v39;
  const void *v40;
  const __CFString *v41;
  const __CFString *v42;
  const void *v43;
  CGSize size;
  __n128 v46;
  __n128 v47;
  __n128 v48;

  Mutable = CGImageMetadataCreateMutable();
  v3 = Mutable;
  if (!Mutable)
  {
    FigSignalErrorAt();
    return v3;
  }
  v4 = (const __CFString *)*MEMORY[0x1E0D08388];
  v5 = (const __CFString *)*MEMORY[0x1E0D08390];
  if (!CGImageMetadataRegisterNamespaceForPrefix(Mutable, (CFStringRef)*MEMORY[0x1E0D08388], (CFStringRef)*MEMORY[0x1E0D08390], 0))goto LABEL_49;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08468]), "floatValue");
  v6 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  if (fcmu_addValueToAuxiliaryImageProperties(v3, v6, v4, v5, (CFStringRef)*MEMORY[0x1E0D083E8])
    || ((v7 = (const __CFString *)*MEMORY[0x1E0D083F0],
         objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D083F0]), "intValue"))
      ? (v8 = CFSTR("high"))
      : (v8 = CFSTR("low")),
        fcmu_addValueToAuxiliaryImageProperties(v3, v8, v4, v5, v7)
     || (v9 = *MEMORY[0x1E0D08438],
         v10 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08438]), "BOOLValue"),
         v11 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10),
         fcmu_addValueToAuxiliaryImageProperties(v3, v11, v4, v5, (CFStringRef)*MEMORY[0x1E0D083A8]))
     || (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08428]), "intValue") != 1
       ? (v12 = CFSTR("relative"))
       : (v12 = CFSTR("absolute")),
         fcmu_addValueToAuxiliaryImageProperties(v3, v12, v4, v5, (CFStringRef)*MEMORY[0x1E0D08398]))))
  {
    fig_log_get_emitter();
LABEL_57:
    FigDebugAssert3();
LABEL_58:
    CFRelease(v3);
    return 0;
  }
  v13 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448]);
  if (v13)
  {
    size.width = 0.0;
    size.height = 0.0;
    if (CGSizeMakeWithDictionaryRepresentation(v13, &size))
    {
      v14 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", size.width);
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v14, v4, v5, (CFStringRef)*MEMORY[0x1E0D083C0]))
        goto LABEL_56;
      v15 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", size.height);
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v15, v4, v5, (CFStringRef)*MEMORY[0x1E0D083B8]))
        goto LABEL_56;
    }
  }
  v16 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08440]);
  if (objc_msgSend(v16, "length") == 48)
  {
    v46 = 0u;
    v47 = 0u;
    size = (CGSize)0;
    objc_msgSend(v16, "getBytes:length:", &size, 48);
    v17 = (const void *)fcmu_arrayInColumnMajorOrderFrom3x3MatrixData((__n128)size, v46, v47);
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v17, v4, v5, (CFStringRef)*MEMORY[0x1E0D083B0]))
      goto LABEL_56;
  }
  v18 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08430]);
  if (objc_msgSend(v18, "length") == 64)
  {
    v47 = 0u;
    v48 = 0u;
    size = (CGSize)0;
    v46 = 0u;
    objc_msgSend(v18, "getBytes:length:", &size, 64);
    v19 = (const void *)fcmu_arrayInColumnMajorOrderFrom3x4MatrixData((__n128)size, v46, v47, v48);
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v19, v4, v5, (CFStringRef)*MEMORY[0x1E0D083A0]))
      goto LABEL_56;
  }
  v20 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08460]);
  if (objc_msgSend(v20, "length") == 32)
  {
    v21 = objc_msgSend(v20, "bytes");
    v22 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 8);
    for (i = 0; i != 32; i += 4)
    {
      LODWORD(v23) = *(_DWORD *)(v21 + i);
      objc_msgSend(v22, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v23));
    }
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v22, v4, v5, (CFStringRef)*MEMORY[0x1E0D083E0]))
      goto LABEL_56;
  }
  v25 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08450]);
  if (objc_msgSend(v25, "length") == 32)
  {
    v26 = objc_msgSend(v25, "bytes");
    v27 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 8);
    for (j = 0; j != 32; j += 4)
    {
      LODWORD(v28) = *(_DWORD *)(v26 + j);
      objc_msgSend(v27, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v28));
    }
    if (fcmu_addValueToAuxiliaryImageProperties(v3, v27, v4, v5, (CFStringRef)*MEMORY[0x1E0D083C8]))
      goto LABEL_56;
  }
  v30 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08458]);
  if (v30)
  {
    size.width = 0.0;
    size.height = 0.0;
    if (CGPointMakeWithDictionaryRepresentation(v30, (CGPoint *)&size))
    {
      v31 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", size.width);
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v31, v4, v5, (CFStringRef)*MEMORY[0x1E0D083D0]))
        goto LABEL_56;
      v32 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", size.height);
      if (fcmu_addValueToAuxiliaryImageProperties(v3, v32, v4, v5, (CFStringRef)*MEMORY[0x1E0D083D8]))
        goto LABEL_56;
    }
  }
  if ((v33 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08478]), "intValue"),
        v34 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33),
        fcmu_addValueToAuxiliaryImageProperties(v3, v34, v4, v5, (CFStringRef)*MEMORY[0x1E0D08410]))
    || (v35 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08488])) != 0
    && fcmu_addValueToAuxiliaryImageProperties(v3, v35, v4, v5, (CFStringRef)*MEMORY[0x1E0D08420])
    || (v36 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08480])) != 0
    && fcmu_addValueToAuxiliaryImageProperties(v3, v36, v4, v5, (CFStringRef)*MEMORY[0x1E0D08418]))
  {
LABEL_56:
    fig_log_get_emitter();
    goto LABEL_57;
  }
  if (objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "BOOLValue"))
  {
    v37 = (const __CFString *)*MEMORY[0x1E0D08368];
    v38 = (const __CFString *)*MEMORY[0x1E0D08370];
    if (CGImageMetadataRegisterNamespaceForPrefix(v3, (CFStringRef)*MEMORY[0x1E0D08368], (CFStringRef)*MEMORY[0x1E0D08370], 0))
    {
      v39 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08360]);
      if (v39
        && fcmu_addValueToAuxiliaryImageProperties(v3, v39, v37, v38, (CFStringRef)*MEMORY[0x1E0D08380]))
      {
        goto LABEL_56;
      }
      v40 = (const void *)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08358]), "base64EncodedStringWithOptions:", 0);
      if (v40)
      {
        if (fcmu_addValueToAuxiliaryImageProperties(v3, v40, v37, v38, (CFStringRef)*MEMORY[0x1E0D08378]))
          goto LABEL_56;
      }
      goto LABEL_44;
    }
LABEL_49:
    if (!FigSignalErrorAt())
      return v3;
    goto LABEL_58;
  }
LABEL_44:
  if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "BOOLValue"))
    return v3;
  v41 = (const __CFString *)*MEMORY[0x1E0D083F8];
  v42 = (const __CFString *)*MEMORY[0x1E0D08400];
  if (!CGImageMetadataRegisterNamespaceForPrefix(v3, (CFStringRef)*MEMORY[0x1E0D083F8], (CFStringRef)*MEMORY[0x1E0D08400], 0))goto LABEL_49;
  v43 = (const void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08668]);
  if (v43
    && fcmu_addValueToAuxiliaryImageProperties(v3, v43, v41, v42, (CFStringRef)*MEMORY[0x1E0D08408]))
  {
    goto LABEL_56;
  }
  return v3;
}

uint64_t fcmu_arrayInColumnMajorOrderFrom3x3MatrixData(__n128 a1, __n128 a2, __n128 a3)
{
  double v3;
  double v4;
  double v5;
  _QWORD v10[10];

  v10[9] = *MEMORY[0x1E0C80C00];
  v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  v10[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
  v10[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v10[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2.n128_f64[0]);
  HIDWORD(v4) = a2.n128_u32[1];
  LODWORD(v4) = a2.n128_u32[1];
  v10[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4);
  v10[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v10[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3.n128_f64[0]);
  HIDWORD(v5) = a3.n128_u32[1];
  LODWORD(v5) = a3.n128_u32[1];
  v10[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v10[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 9);
}

uint64_t fcmu_arrayInColumnMajorOrderFrom3x4MatrixData(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD v13[13];

  v13[12] = *MEMORY[0x1E0C80C00];
  v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  HIDWORD(v4) = a1.n128_u32[1];
  LODWORD(v4) = a1.n128_u32[1];
  v13[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4);
  v13[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v13[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2.n128_f64[0]);
  HIDWORD(v5) = a2.n128_u32[1];
  LODWORD(v5) = a2.n128_u32[1];
  v13[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v13[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v13[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3.n128_f64[0]);
  HIDWORD(v6) = a3.n128_u32[1];
  LODWORD(v6) = a3.n128_u32[1];
  v13[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
  v13[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  v13[9] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a4.n128_f64[0]);
  HIDWORD(v7) = a4.n128_u32[1];
  LODWORD(v7) = a4.n128_u32[1];
  v13[10] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7);
  v13[11] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a4.n128_u32[1], a4.n128_u32[2])));
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 12);
}

uint64_t __fcmu_createMakerNoteMetadata_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  fcmu_createMakerNoteMetadata_sEligibleForLightingEffects = result;
  return result;
}

uint64_t fcmu_indexInMetadataArrayOfQuickTimeMetadataDictionary(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!objc_msgSend(a1, "count"))
    return 0x7FFFFFFFFFFFFFFFLL;
  v2 = 0;
  v3 = *MEMORY[0x1E0CC47F0];
  v4 = *MEMORY[0x1E0CC4748];
  while ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v2), "objectForKeyedSubscript:", v3), "isEqual:", v4) & 1) == 0)
  {
    if (++v2 >= (unint64_t)objc_msgSend(a1, "count"))
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  return v2;
}

id __fcmu_getTimeZoneFormatter_block_invoke()
{
  void *v0;
  id v1;
  id v2;
  void *v3;

  v0 = (void *)MEMORY[0x1A858DD40]();
  v1 = objc_alloc_init(MEMORY[0x1E0CB36A8]);
  v2 = objc_alloc(MEMORY[0x1E0C99D48]);
  v3 = (void *)objc_msgSend(v2, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(v1, "setTimeZone:", objc_msgSend(v3, "timeZone"));
  objc_msgSend(v1, "setFormatOptions:", 1088);

  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t __fcmu_getTimeZoneFormatter_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[5];

  fcmu_getTimeZoneFormatter_sTimeZoneFormatter = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = *MEMORY[0x1E0C998A0];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __fcmu_getTimeZoneFormatter_block_invoke_3;
  v5[3] = &unk_1E491F210;
  v5[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v2, "addObserverForName:object:queue:usingBlock:", v3, 0, 0, v5);
}

void __fcmu_getTimeZoneFormatter_block_invoke_3(uint64_t a1)
{
  NSObject *global_queue;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(21, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fcmu_getTimeZoneFormatter_block_invoke_4;
  block[3] = &unk_1E491ECB8;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(global_queue, block);
}

void __fcmu_getTimeZoneFormatter_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v2 = (id)fcmu_getTimeZoneFormatter_sTimeZoneFormatter;
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  os_unfair_lock_lock((os_unfair_lock_t)&fcmu_getTimeZoneFormatter_sLock);
  fcmu_getTimeZoneFormatter_sTimeZoneFormatter = v1;
  os_unfair_lock_unlock((os_unfair_lock_t)&fcmu_getTimeZoneFormatter_sLock);

}

const void *BWStillImageCaptureFrameFlagsForSampleBuffer(const void *result)
{
  if (result)
    return (const void *)objc_msgSend((id)CMGetAttachment(result, CFSTR("StillImageCaptureFrameFlags"), 0), "unsignedLongLongValue");
  return result;
}

void BWStillImageAppendCaptureFrameFlagsToSampleBuffer(const void *a1, uint64_t a2)
{
  const void *v3;

  if (a1)
  {
    v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillImageCaptureFrameFlags"), 0), "unsignedLongLongValue") | a2);
    CMSetAttachment(a1, CFSTR("StillImageCaptureFrameFlags"), v3, 1u);
  }
}

uint64_t BWStillImageCaptureFrameFlagsToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lld"), a1);
}

void BWAddStillImageCaptureFrameMetadataToSampleBuffer(const void *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  uint64_t *v4;
  CFTypeRef v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  float v35;
  float v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v4 = a4;
  v52 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v45 = *a4;
    if (!a2)
      return;
  }
  else
  {
    v45 = 0;
    if (!a2)
      return;
  }
  v6 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = objc_msgSend(a2, "captureType");
    v9 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue");
    v10 = objc_msgSend(a2, "unifiedBracketedCaptureParams");
    if (v9 < 1)
    {
      switch(v8)
      {
        case 4:
        case 5:
          if ((int)objc_msgSend(a2, "expectedTimeMachineFrameCaptureCount") >= 1
            && (objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue") & 1) == 0)
          {
LABEL_13:
            v17 = *MEMORY[0x1E0D05E58];
            v15 = &unk_1E49F8610;
LABEL_44:
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v15, v17);
          }
          goto LABEL_45;
        case 10:
        case 12:
          if (!v45)
          {
            v18 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D80]), "BOOLValue");
            v19 = 2;
            if (v18)
              v19 = 4;
            if (a3)
              v19 |= 0x10uLL;
            v45 = v19;
          }
          goto LABEL_20;
        case 11:
LABEL_20:
          if ((objc_msgSend(a2, "isUnifiedBracketingErrorRecoveryFrame:isReferenceFrame:", a1, a3) & 1) == 0)
            goto LABEL_45;
          v20 = v45 | 0x20;
          goto LABEL_62;
        default:
LABEL_45:
          v20 = v45;
          if (v45)
            goto LABEL_62;
          v34 = 0;
          if (!v4)
            return;
          goto LABEL_63;
      }
    }
    v11 = (void *)v10;
    switch(v8)
    {
      case 1:
        objc_msgSend(a2, "captureFlags");
        goto LABEL_23;
      case 3:
        v33 = (void *)objc_msgSend((id)objc_msgSend(a2, "bracketSettings"), "exposureValues");
        if (objc_msgSend(v33, "count") < (unint64_t)v9)
          return;
        objc_msgSend((id)objc_msgSend(v33, "objectAtIndexedSubscript:", (v9 - 1)), "doubleValue");
        v15 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
        v16 = (uint64_t *)MEMORY[0x1E0D06038];
        goto LABEL_43;
      case 4:
        goto LABEL_13;
      case 5:
      case 6:
        v12 = (void *)objc_msgSend((id)objc_msgSend(a2, "bracketSettings"), "oisBracketedCaptureParams");
        v13 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D07020]);
        if (objc_msgSend(v13, "count") < (unint64_t)v9)
          return;
        v14 = objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", (v9 - 1)), "intValue");
        v15 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v14);
        v16 = (uint64_t *)MEMORY[0x1E0D05E58];
LABEL_43:
        v17 = *v16;
        goto LABEL_44;
      case 7:
LABEL_23:
        if (v11)
          goto LABEL_24;
        goto LABEL_45;
      case 10:
      case 11:
      case 12:
LABEL_24:
        v21 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D80]), "BOOLValue");
        v47 = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v22 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
        if (!v22)
          return;
        v23 = v22;
        v24 = 0;
        v25 = *(_QWORD *)v48;
        v26 = *MEMORY[0x1E0D07C20];
        v43 = v4;
        break;
      default:
        goto LABEL_45;
    }
    while (2)
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v48 != v25)
          objc_enumerationMutation(v11);
        v28 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        v29 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", v26, v43), "intValue");
        if (v29 != 1)
          ++v24;
        v30 = v24 == v9 && v21 == (v29 == 1);
        if (v30)
        {
          v4 = v43;
          if (v28)
          {
            v20 = v45;
            if (v45)
            {
              v31 = *MEMORY[0x1E0D07E60];
              v32 = *MEMORY[0x1E0D07BD0];
            }
            else
            {
              v32 = *MEMORY[0x1E0D07BD0];
              objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0D07BD0]), "floatValue");
              v36 = v35;
              v31 = *MEMORY[0x1E0D07E60];
              v37 = objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E60]), "intValue");
              if (v36 < 0.0)
                v38 = 1;
              else
                v38 = v21;
              v39 = 2;
              if (v37 == 2)
                v39 = 64;
              if (v37 == 1)
                v39 = 8;
              v30 = v38 == 0;
              v40 = 4;
              if (v30)
                v40 = v39;
              v20 = a3 ? v40 | 0x10 : v40;
            }
            v41 = objc_msgSend(v28, "objectForKeyedSubscript:", v31);
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v41, *MEMORY[0x1E0D06128]);
            v42 = objc_msgSend(v28, "objectForKeyedSubscript:", v32);
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v42, *MEMORY[0x1E0D06038]);
LABEL_62:
            v34 = v20;
            CMSetAttachment(a1, CFSTR("StillImageCaptureFrameFlags"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v20), 1u);
            if (v4)
LABEL_63:
              *v4 = v34;
          }
          return;
        }
      }
      v23 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v47, v51, 16);
      if (v23)
        continue;
      break;
    }
  }
}

uint64_t BWStillImageBufferTypeForAttachedMediaKey(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E4936818) & 1) != 0)
    return 19;
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E495B0F8) & 1) != 0)
    return 21;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Depth")) & 1) != 0)
    return 2001;
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E49511B8) & 1) != 0
    || (objc_msgSend(a1, "hasPrefix:", 0x1E4951318) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E495AF38) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsSkin")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E495B0B8) & 1) != 0)
  {
    return 16;
  }
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E495B238) & 1) != 0)
    return 41;
  if (objc_msgSend(a1, "isEqualToString:", 0x1E495B438))
    return 2002;
  return 0;
}

uint64_t BWIsLastAdaptiveBracketingFrame(const void *a1)
{
  return objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D08708], 0), "BOOLValue");
}

uint64_t BWReferenceFrameSelectionUsingBlurScores(void *a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (a2 < 1
    || objc_msgSend(a1, "count") < (unint64_t)a2
    || (unint64_t)objc_msgSend(a1, "count") > 4)
  {
    return 4294954516;
  }
  v13[0] = 0;
  v13[1] = 0;
  result = FigMotionComputeBlurScores((uint64_t)a1, 3, 1, 1);
  if (!(_DWORD)result)
  {
    if ((unint64_t)objc_msgSend(a1, "count") < 2)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      do
      {
        if (*((float *)v13 + v10) < *((float *)v13 + v9))
          v9 = v10;
        ++v10;
      }
      while (objc_msgSend(a1, "count") > v10);
    }
    LODWORD(v11) = v9;
    if (a2 != 1)
    {
      if (a2 == 2)
      {
        if (!v9)
        {
          LODWORD(v11) = 0;
          if (!a4)
          {
LABEL_25:
            result = 0;
            if (a3)
              *a3 = v11;
            return result;
          }
LABEL_24:
          *a4 = v9;
          goto LABEL_25;
        }
        v12 = objc_msgSend(a1, "count");
        v11 = v9 - 1;
        if (v12 - 1 != v9)
        {
          if (*((float *)v13 + v11) > *((float *)v13 + v9 + 1))
            LODWORD(v11) = v9;
          if (!a4)
            goto LABEL_25;
          goto LABEL_24;
        }
      }
      else if (v9 >= a2)
      {
        LODWORD(v11) = v9 - a2 + 1;
      }
      else
      {
        LODWORD(v11) = 0;
      }
    }
    if (!a4)
      goto LABEL_25;
    goto LABEL_24;
  }
  return result;
}

uint64_t BWReferenceFrameSelectionUsingMotionAndFocusScores(void *a1, void *a2, int a3, _DWORD *a4, int *a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  void *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  void *v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t result;
  int v48;
  int *v49;
  _DWORD *v50;
  uint64_t v51;
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[3];

  v54[2] = *MEMORY[0x1E0C80C00];
  if (a3 < 1
    || objc_msgSend(a1, "count") < (unint64_t)a3
    || !objc_msgSend(a1, "count")
    || (unint64_t)objc_msgSend(a1, "count") > 4
    || objc_msgSend(a2, "count") != 3)
  {
    return 4294954516;
  }
  v54[0] = 0;
  v54[1] = 0;
  v53[0] = 0;
  v53[1] = 0;
  v52[0] = 0;
  v52[1] = 0;
  v49 = a5;
  v50 = a4;
  v48 = a3;
  if (objc_msgSend(a1, "count"))
  {
    v10 = 0;
    v11 = *MEMORY[0x1E0D06CA8];
    v12 = *MEMORY[0x1E0D068C0];
    v13 = *MEMORY[0x1E0D06AB0];
    v14 = *MEMORY[0x1E0D070D0];
    v51 = *MEMORY[0x1E0D06AA8];
    v15 = 0.0;
    v16 = 0.0;
    do
    {
      v17 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v10);
      objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v11), "floatValue");
      v19 = v18;
      *((float *)v54 + v10) = v18;
      objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v12), "floatValue");
      v21 = v20;
      *((float *)v53 + v10) = v20;
      v22 = (void *)objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v13), "objectForKeyedSubscript:", v14);
      if (objc_msgSend(v22, "count"))
      {
        v23 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", v51), "intValue") == 2;
        v24 = 0.0;
        if (objc_msgSend(v22, "count") - 1 > v23)
        {
          v25 = v23;
          do
          {
            objc_msgSend((id)objc_msgSend(v22, "objectAtIndexedSubscript:", v25), "floatValue");
            v24 = v24 + v26;
            ++v25;
          }
          while (v25 < objc_msgSend(v22, "count") - 1);
        }
        v27 = objc_msgSend(v22, "count") + ~v23;
        v28 = v24 / (float)(unint64_t)v27;
        if (v28 > 0.0)
        {
          *((float *)v53 + v10) = v28;
          v21 = v24 / (float)(unint64_t)v27;
        }
      }
      if (v16 <= v19)
        v16 = v19;
      if (v15 <= v21)
        v15 = v21;
      ++v10;
    }
    while (objc_msgSend(a1, "count") > v10);
  }
  else
  {
    v16 = 0.0;
    v15 = 0.0;
  }
  if (objc_msgSend(a1, "count"))
  {
    v29 = 0;
    do
    {
      *((float *)v54 + v29) = *((float *)v54 + v29) / v16;
      *((float *)v53 + v29) = *((float *)v53 + v29) / v15;
      ++v29;
    }
    while (objc_msgSend(a1, "count") > v29);
  }
  if (objc_msgSend(a1, "count"))
  {
    v30 = 0;
    v31 = 0;
    v32 = 3.4028e38;
    do
    {
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "floatValue");
      v34 = v33;
      v35 = *((float *)v53 + v30);
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 1), "floatValue");
      v37 = v34 + (float)(v35 * v36);
      v38 = *((float *)v54 + v30);
      objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 2), "floatValue");
      v40 = v37 + (float)(v38 * v39);
      *((float *)v52 + v30) = v40;
      if (v40 < v32)
      {
        v31 = v30;
        v32 = v40;
      }
      ++v30;
    }
    while (objc_msgSend(a1, "count") > v30);
  }
  else
  {
    v31 = 0;
  }
  v41 = (void *)objc_msgSend(MEMORY[0x1E0CB3788], "indexSetWithIndex:", v31);
  v42 = objc_msgSend(v41, "count");
  v43 = v48 - v42;
  if (v48 > v42)
  {
    do
    {
      v44 = objc_msgSend(v41, "firstIndex") - 1;
      v45 = objc_msgSend(v41, "lastIndex") + 1;
      if ((v44 & 0x8000000000000000) == 0)
      {
        if (v45 <= objc_msgSend(a1, "count") - 1)
        {
          if (*((float *)v52 + v44) <= *((float *)v52 + v45))
            v45 = v44;
        }
        else
        {
          v45 = v44;
        }
      }
      objc_msgSend(v41, "addIndex:", v45);
      --v43;
    }
    while (v43);
  }
  if (v49)
    *v49 = v31;
  if (!v50)
    return 0;
  v46 = objc_msgSend(v41, "firstIndex");
  result = 0;
  *v50 = v46;
  return result;
}

uint64_t BWCleanupRawStillImageSampleBuffer(CMAttachmentBearerRef target)
{
  if (BWCleanupRawStillImageSampleBuffer_onceToken != -1)
    dispatch_once(&BWCleanupRawStillImageSampleBuffer_onceToken, &__block_literal_global_15);
  return objc_msgSend((id)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "removeObjectsForKeys:", BWCleanupRawStillImageSampleBuffer_sGarbageKeys);
}

BOOL BWIsSmartStyleCapture(void *a1)
{
  return (objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "burstQualityCaptureEnabled") & 1) == 0
      && objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "smartStyle") != 0;
}

uint64_t BWIsSmartStyleAllowedForAdjustedImage(void *a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "processedImageFilters");
  if ((objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "burstQualityCaptureEnabled") & 1) != 0)
    return 0;
  result = objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "smartStyle");
  if (result)
  {
    result = BWCIFilterArrayContainsPortraitFilters(v2);
    if ((_DWORD)result)
      return BWCIFilterArrayContainsPortraitEffectStageFilters(v2, 0) ^ 1;
  }
  return result;
}

uint64_t BWEmitUnstyledBufferForInferencesOrAdjustedImageWithConfigurations(void *a1, void *a2)
{
  uint64_t result;

  if ((int)objc_msgSend(a1, "smartStyleRenderingVersion") < 1)
    return 0;
  if ((objc_msgSend(a2, "portraitEffectsMatteDeliveryEnabled") & 1) != 0
    || objc_msgSend((id)objc_msgSend(a2, "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    return 1;
  }
  result = objc_msgSend(a2, "depthDataDeliveryEnabled");
  if ((_DWORD)result)
    return objc_msgSend(a2, "filterRenderingEnabled");
  return result;
}

BOOL BWIsConstantColorPrimaryFrame(const void *a1)
{
  return BWSampleBufferGetAttachedMedia(a1, 0x1E495B438) != 0;
}

uint64_t BWStillImageAutoWhiteBalanceReflowMaximumFrameCount()
{
  if ((int)FigCapturePlatformIdentifier() <= 10)
    return 0;
  else
    return 50;
}

uint64_t FigExternalStorageDeviceManagerGetClassID()
{
  MEMORY[0x1A858C99C](&FigExternalStorageDeviceManagerGetClassID_sRegisterFigExternalStorageDeviceManagerBaseTypeOnce, RegisterFigExternalStorageDeviceManagerBaseType);
  return sFigExternalStorageDeviceManagerClassID;
}

uint64_t RegisterFigExternalStorageDeviceManagerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigExternalStorageDeviceManagerGetTypeID()
{
  MEMORY[0x1A858C99C](&FigExternalStorageDeviceManagerGetClassID_sRegisterFigExternalStorageDeviceManagerBaseTypeOnce, RegisterFigExternalStorageDeviceManagerBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigExternalStorageDeviceManagerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigExternalStorageDeviceManager %p]"), a1);
}

void sub_1A2E43274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A2E433B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2E4360C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1A2E43B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v18 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A2E43E8C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

double utlClamp(double a1)
{
  return fmax(fmin(a1, 1.0), 0.0);
}

double utlTransformRectDouble(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  a4.f64[0] = a2.f64[0] + a4.f64[0];
  a5.f64[0] = a3.f64[0] + a5.f64[0];
  return fmin(vdivq_f64(vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(*a1, a2.f64[0]), a1[2], a3.f64[0])), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a1[5], vmlaq_f64(vmulq_f64(a2, a1[1]), a3, a1[3])), 0)).f64[0], vdivq_f64(vaddq_f64(a1[4], vmlaq_n_f64(vmulq_n_f64(*a1, a4.f64[0]), a1[2], a5.f64[0])), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(a1[5], vmlaq_f64(vmulq_f64(a4, a1[1]), a5, a1[3])), 0)).f64[0]);
}

__n128 utlCreateTransformationDouble@<Q0>(int a1@<W0>, _OWORD *a2@<X8>, __n128 result@<Q0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  __int128 v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v8 = 0uLL;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  switch(a1)
  {
    case 1:
      *a2 = result.n128_u64[0];
      a2[1] = 0uLL;
      a2[3] = 0uLL;
      *((double *)&v8 + 1) = a4;
      a2[2] = v8;
      v9 = a5 - a7 * result.n128_f64[0];
      v10 = -a8;
      goto LABEL_6;
    case 3:
      *(_QWORD *)&v11 = 0;
      *a2 = COERCE_UNSIGNED_INT64(-result.n128_f64[0]);
      a2[1] = 0u;
      a2[3] = 0u;
      *((double *)&v11 + 1) = -a4;
      a2[2] = v11;
      v9 = a5 + a7 * result.n128_f64[0];
      v10 = a8;
      goto LABEL_6;
    case 6:
      *(_QWORD *)&v12 = 0;
      *((double *)&v12 + 1) = a4;
      *a2 = v12;
      a2[1] = 0uLL;
      a2[3] = 0uLL;
      *(double *)&v8 = -result.n128_f64[0];
      a2[2] = v8;
      v9 = a5 + a8 * result.n128_f64[0];
      v10 = -a7;
      goto LABEL_6;
    case 8:
      *(_QWORD *)&v13 = 0;
      *((double *)&v13 + 1) = -a4;
      *a2 = v13;
      a2[1] = 0u;
      a2[3] = 0u;
      a2[2] = result.n128_u64[0];
      v9 = a5 - a8 * result.n128_f64[0];
      v10 = a7;
LABEL_6:
      result.n128_f64[0] = v9 + a7;
      result.n128_f64[1] = a6 + v10 * a4 + a8;
      __asm { FMOV            V1.2D, #1.0 }
      a2[4] = result;
      a2[5] = _Q1;
      break;
    default:
      return result;
  }
  return result;
}

void fcn_addAllLookAheadMotionDataToMetadata(const void *a1, void *a2, void *a3)
{
  CFTypeRef v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v7 = (void *)v6;
  v8 = (uint64_t *)MEMORY[0x1E0D05BD8];
  if (!a3)
  {
    v11 = 0;
    if (!a2)
      goto LABEL_25;
    goto LABEL_19;
  }
  v22 = (void *)v6;
  v23 = a2;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v25;
    v13 = *v8;
    v14 = *MEMORY[0x1E0D060D0];
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v25 != v12)
          objc_enumerationMutation(a3);
        v16 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        v17 = objc_msgSend(v16, "objectForKeyedSubscript:", v13);
        if (v17)
        {
          v18 = v17;
          if (objc_msgSend(v16, "objectForKeyedSubscript:", v14))
          {
            if (!v11)
              v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            objc_msgSend(v11, "addObject:", v18);
          }
        }
        objc_msgSend(v16, "removeObjectForKey:", v13);
      }
      v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v7 = v22;
  objc_msgSend(v22, "setObject:forKeyedSubscript:", a3, *MEMORY[0x1E0D082D8]);
  a2 = v23;
  v8 = (uint64_t *)MEMORY[0x1E0D05BD8];
  if (v23)
  {
LABEL_19:
    v19 = *v8;
    v20 = objc_msgSend(a2, "objectForKeyedSubscript:", *v8);
    if (v20)
    {
      v21 = v20;
      if (objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D060D0]))
      {
        if (!v11)
          v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v11, "addObject:", v21);
      }
    }
    objc_msgSend(a2, "removeObjectForKey:", v19);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", a2, *MEMORY[0x1E0D082D0]);
  }
LABEL_25:
  if (objc_msgSend(v11, "count"))
    CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D80], v11, 1u);

}

uint64_t fcn_synchronizedSlaveFrameForSampleBuffer(const void *a1)
{
  uint64_t result;

  result = BWSampleBufferGetAttachedMedia(a1, 0x1E495AE38);
  if (!result)
    return BWSampleBufferGetAttachedMedia(a1, (uint64_t)CFSTR("SynchronizedSlaveFrame"));
  return result;
}

CMTime *fcn_getEndingPTSOfFirstBufferInStagingQueue@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  CMTime *result;
  opaqueCMSampleBuffer *v6;
  CMTimeEpoch epoch;
  CMTime v8;
  CMTime lhs;
  CMTime v10;
  CMTime v11;

  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  result = (CMTime *)objc_msgSend(a1, "count");
  if (result)
  {
    if (result == (CMTime *)1)
    {
      v6 = (opaqueCMSampleBuffer *)objc_msgSend(a1, "objectAtIndexedSubscript:", 0);
      memset(&v11, 0, sizeof(v11));
      result = CMSampleBufferGetDuration(&v11, v6);
      if ((v11.flags & 1) == 0)
        return result;
      CMSampleBufferGetPresentationTimeStamp(&lhs, v6);
      v8 = v11;
      result = CMTimeAdd(&v10, &lhs, &v8);
      *(_OWORD *)a2 = *(_OWORD *)&v10.value;
      epoch = v10.epoch;
    }
    else
    {
      result = CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)objc_msgSend(a1, "objectAtIndexedSubscript:", 1));
      *(_OWORD *)a2 = *(_OWORD *)&v11.value;
      epoch = v11.epoch;
    }
    *(_QWORD *)(a2 + 16) = epoch;
  }
  return result;
}

CMSampleBufferRef fcn_createAudioBufferTrimmedToStartTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  CMItemCount NumSamples;
  CMSampleBufferRef result;
  OSStatus SampleTimingInfo;
  const opaqueCMFormatDescription *FormatDescription;
  const AudioStreamBasicDescription *StreamBasicDescription;
  int32_t mSampleRate;
  int32_t v11;
  CMTimeEpoch epoch;
  CFRange v13;
  CMTime v14;
  CMTime time;
  CMTime lhs;
  CMTime v17;
  CMSampleTimingInfo timingInfoOut;
  CMItemCount timingArrayEntriesNeededOut;
  CMSampleBufferRef sampleBufferOut;

  timingArrayEntriesNeededOut = 0;
  sampleBufferOut = 0;
  NumSamples = CMSampleBufferGetNumSamples(a1);
  CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  result = 0;
  if (timingArrayEntriesNeededOut == 1 && NumSamples >= 2)
  {
    memset(&timingInfoOut, 0, sizeof(timingInfoOut));
    SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
    result = 0;
    if (!SampleTimingInfo)
    {
      memset(&v17, 0, sizeof(v17));
      CMSampleBufferGetPresentationTimeStamp(&v17, a1);
      FormatDescription = CMSampleBufferGetFormatDescription(a1);
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
      mSampleRate = (int)StreamBasicDescription->mSampleRate;
      time = v17;
      CMTimeConvertScale(&lhs, &time, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v17 = lhs;
      v11 = (int)StreamBasicDescription->mSampleRate;
      time = *a2;
      CMTimeConvertScale(&lhs, &time, v11, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      *(_OWORD *)&a2->value = *(_OWORD *)&lhs.value;
      epoch = lhs.epoch;
      a2->epoch = lhs.epoch;
      *(_OWORD *)&lhs.value = *(_OWORD *)&a2->value;
      lhs.epoch = epoch;
      time = v17;
      CMTimeSubtract(&v14, &lhs, &time);
      v13.location = v14.value;
      if (v14.value <= 0)
      {
        return (CMSampleBufferRef)CFRetain(a1);
      }
      else if ((unint64_t)NumSamples <= v14.value)
      {
        return 0;
      }
      else
      {
        v13.length = NumSamples - v14.value;
        CMSampleBufferCopySampleBufferForRange((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v13, &sampleBufferOut);
        return sampleBufferOut;
      }
    }
  }
  return result;
}

uint64_t FigCaptureDeferredContainerManagerGetTypeID()
{
  if (FigCaptureDeferredContainerManagerGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureDeferredContainerManagerGetClassID_onceToken, &__block_literal_global_21);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptureDeferredContainerManagerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureDeferredContainerManager %p]"), a1);
}

CGFloat psn_wideBoundingRect(int a1, CGFloat result, CGFloat a3, CGFloat a4, CGFloat a5, float a6, float a7, double a8, float a9)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v9 = 4032.0 / (a8 * 4224.0);
  v10 = 1.0 / a8;
  if (!a1)
    v10 = v9;
  v11 = v9 * a9;
  if ((float)(a6 * 1.5) < a7)
    a7 = a6 * 1.5;
  if (a7 < a6)
    a7 = a6;
  v12 = (float)(a7 - a6) / (float)((float)(a6 * 1.5) - a6);
  v13 = v11 + (float)((float)(1.0 - v11) * v12);
  v14 = (float)(v10 * a9) + (float)((float)(1.0 - (float)(v10 * a9)) * v12);
  if (v13 != 1.0 || v14 != 1.0)
    return FigCaptureMetadataUtilitiesScaleRect2D(result, a3, a4, a5, v13);
  return result;
}

uint64_t psn_conformRectForMSR420vfBoundedByDimensions(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  float v10;
  float v11;
  float v12;
  int v13;
  float v14;

  v10 = a3;
  FigCaptureRoundFloatToMultipleOf(2, v10);
  v11 = a4;
  FigCaptureRoundFloatToMultipleOf(2, v11);
  if (a6)
    v13 = 2;
  else
    v13 = 1;
  v12 = a1;
  FigCaptureRoundFloatToMultipleOf(v13, v12);
  v14 = a2;
  return FigCaptureRoundFloatToMultipleOf(v13, v14);
}

void psn_propagatePixelBufferDolbyVisionRPUData(__CVBuffer *a1, CVBufferRef buffer)
{
  const __CFString *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  BOOL v7;

  v4 = (const __CFString *)*MEMORY[0x1E0CA8DC0];
  v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8DC0], 0);
  v6 = CVBufferCopyAttachment(a1, v4, 0);
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 0;
  if (v7)
  {
    CVBufferSetAttachment(buffer, v4, v6, kCVAttachmentMode_ShouldPropagate);
LABEL_10:
    CFRelease(v6);
    return;
  }
  if (v5)
    CFRelease(v5);
  if (v6)
    goto LABEL_10;
}

void psn_propagatePixelBufferAmbientViewingEnvironment(__CVBuffer *a1, __CVBuffer *a2)
{
  __IOSurface *IOSurface;
  __IOSurface *v4;
  const __CFString *v5;
  CFTypeRef v6;

  IOSurface = CVPixelBufferGetIOSurface(a1);
  v4 = CVPixelBufferGetIOSurface(a2);
  v5 = (const __CFString *)*MEMORY[0x1E0CA8CC8];
  v6 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CA8CC8]);
  IOSurfaceSetValue(v4, v5, v6);
  if (v6)
    CFRelease(v6);
}

CGFloat psn_blurPixelBufferBorder(void *a1, CVPixelBufferRef pixelBuffer, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, float a7)
{
  size_t Width;
  double v15;
  double Height;
  double v17;
  uint64_t v18;
  id v19;
  double v20;
  uint64_t v22;
  CGRect v23;
  CGRect v24;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  v15 = (double)Width;
  Height = (double)CVPixelBufferGetHeight(pixelBuffer);
  v24.size.width = (double)Width + -2.0;
  v24.size.height = Height + -2.0;
  v24.origin.x = 1.0;
  v24.origin.y = 1.0;
  v23.origin.x = a3;
  v23.origin.y = a4;
  v23.size.width = a5;
  v23.size.height = a6;
  if (!CGRectContainsRect(v23, v24))
  {
    if (a1)
    {
      if (pixelBuffer)
      {
        v17 = Height - (a4 + a6);
        v18 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C9DDC8], "imageWithCVPixelBuffer:", pixelBuffer), "imageByClampingToRect:", a3, v17, a5, a6), "imageByApplyingGaussianBlurWithSigma:", a7);
        v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDE8]), "initWithPixelBuffer:", pixelBuffer);
        if (!Width
          || v17 == 0.0
          || (v22 = 0,
              objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, 0.0, v15, Height - (a4 + a6), 0.0, 0.0), "waitUntilCompletedAndReturnError:", &v22), !v22))
        {
          if (!Width
            || (v20 = Height - (a6 + v17), v20 == 0.0)
            || (v22 = 0,
                objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, a6 + v17, v15, v20, 0.0, a6 + v17), "waitUntilCompletedAndReturnError:", &v22), !v22))
          {
            if (a3 == 0.0
              || a6 == 0.0
              || (v22 = 0,
                  objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0, 0.0, Height - (a4 + a6), a3, a6, 0.0, Height - (a4 + a6)), "waitUntilCompletedAndReturnError:", &v22), !v22))
            {
              if (v15 - (a3 + a5) == 0.0)
                return 0.0;
              if (a6 == 0.0)
                return 0.0;
              v22 = 0;
              objc_msgSend((id)objc_msgSend(a1, "startTaskToRender:fromRect:toDestination:atPoint:error:", v18, v19, 0), "waitUntilCompletedAndReturnError:", &v22);
              if (!v22)
                return 0.0;
            }
          }
        }
      }
    }
  }
  return a3;
}

uint64_t psn_imageWithBlurredEdges(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10, float a11, float a12)
{
  void *v24;
  void *v25;
  double MidX;
  double v27;
  double v28;
  float v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float v35;
  float v36;
  CGColorSpace *v37;
  void *v38;
  double v39;
  CGFloat v40;
  double v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  void *v45;
  double v46;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CGAffineTransform v55;
  CGAffineTransform v56;
  CGAffineTransform v57;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v60;
  CGRect v61;
  CGRect v62;

  v24 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "sourceOverCompositingFilter");
  v25 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "radialGradientFilter");
  v61.origin.x = a3;
  v61.origin.y = a4;
  v61.size.width = a5;
  v61.size.height = a6;
  MidX = CGRectGetMidX(v61);
  v62.origin.x = a3;
  v62.origin.y = a4;
  v62.size.width = a5;
  v62.size.height = a6;
  objc_msgSend(v25, "setCenter:", MidX, CGRectGetMidY(v62));
  if (a5 >= a6)
    v27 = a6;
  else
    v27 = a5;
  v28 = a11;
  if (a11 > 1.0)
    v28 = 1.0;
  v29 = v28;
  v30 = 1.0 - v29;
  v31 = v27 * 0.5;
  if (v28 >= 0.0)
    v32 = v30;
  else
    v32 = 1.0;
  v33 = v31 * v32;
  *(float *)&v33 = v33;
  objc_msgSend(v25, "setRadius0:", v33);
  *(float *)&v34 = v31;
  objc_msgSend(v25, "setRadius1:", v34);
  v35 = 1.0;
  if (a12 <= 1.0)
    v35 = a12;
  if (v35 < 0.0)
    v35 = 0.0;
  v36 = (float)(v35 * 0.6) + 0.4;
  v37 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  objc_msgSend(v25, "setColor0:", objc_msgSend(MEMORY[0x1E0C9DD80], "colorWithRed:green:blue:colorSpace:", v37, 0.0, 0.0, 0.0));
  objc_msgSend(v25, "setColor1:", objc_msgSend(MEMORY[0x1E0C9DD80], "colorWithRed:green:blue:colorSpace:", v37, v36, v36, v36));
  v38 = (void *)objc_msgSend(v25, "outputImage");
  CGColorSpaceRelease(v37);
  v54 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v60.a = *MEMORY[0x1E0C9BAA8];
  v53 = *(_OWORD *)&v60.a;
  *(_OWORD *)&v60.c = v54;
  *(_OWORD *)&v60.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v52 = *(_OWORD *)&v60.tx;
  objc_msgSend(v25, "center");
  v40 = -v39;
  objc_msgSend(v25, "center");
  CGAffineTransformMakeTranslation(&t2, v40, -v41);
  *(_OWORD *)&t1.a = v53;
  *(_OWORD *)&t1.c = v54;
  *(_OWORD *)&t1.tx = v52;
  CGAffineTransformConcat(&v60, &t1, &t2);
  CGAffineTransformMakeScale(&v57, a5 / v27, a6 / v27);
  v56 = v60;
  CGAffineTransformConcat(&t1, &v56, &v57);
  v60 = t1;
  objc_msgSend(v25, "center");
  v43 = v42;
  objc_msgSend(v25, "center");
  CGAffineTransformMakeTranslation(&v55, v43, v44);
  v56 = v60;
  CGAffineTransformConcat(&t1, &v56, &v55);
  v60 = t1;
  objc_msgSend(v24, "setInputImage:", objc_msgSend((id)objc_msgSend(v38, "imageByApplyingTransform:", &t1), "imageByCroppingToRect:", a3, a4, a5, a6));
  objc_msgSend(v24, "setBackgroundImage:", objc_msgSend(MEMORY[0x1E0C9DDC8], "whiteImage"));
  if ((a2 & 1) == 0)
  {
    v45 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "maskedVariableBlurFilter");
    objc_msgSend(v45, "setInputImage:", objc_msgSend(a1, "imageByCroppingToRect:", a7, a8, a9, a10));
    objc_msgSend(v45, "setMask:", objc_msgSend(v24, "outputImage"));
    LODWORD(v46) = 6.0;
    objc_msgSend(v45, "setRadius:", v46);
    v24 = v45;
  }
  return objc_msgSend(v24, "outputImage");
}

uint64_t __psn_attachedMediaKeysToPropagateForStyles_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", 0x1E495B358, 0x1E495B3B8, 0);
  psn_attachedMediaKeysToPropagateForStyles_propagatingKeysForStyles = result;
  return result;
}

double ptmsn_getSampleBufferPTS@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  const __CFDictionary *v4;
  double result;
  CMTime v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
  CMTimeMakeFromDictionary((CMTime *)a2, v4);
  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
  {
    CMSampleBufferGetPresentationTimeStamp(&v6, (CMSampleBufferRef)a1);
    result = *(double *)&v6.value;
    *(CMTime *)a2 = v6;
  }
  return result;
}

CFStringRef FigCaptureDeferredPhotoProcessorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureDeferredPhotoProcessor %p]"), a1);
}

const __CFString *mfsp_pipelineNameFromSmartStyleAttachedMediaKey(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("HumanFullBodiesMask")) & 1) != 0)
    return CFSTR("Person");
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("HumanSkinsMask")) & 1) != 0)
    return CFSTR("Skin");
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E495B218) & 1) != 0)
    return CFSTR("Sky");
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E495B3F8) & 1) != 0)
    return CFSTR("Linear-Thumbnail");
  if (objc_msgSend(a1, "isEqualToString:", 0x1E495B418))
    return CFSTR("Delta-Map");
  return CFSTR("Unknown");
}

uint64_t mfsp_buildMovieFileScalerNode(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, _QWORD *a8, char a9, unsigned int a10)
{
  int v16;
  BWPixelTransferNode *v17;
  BWPixelTransferNode *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v28;

  v28 = 0;
  if ((objc_msgSend(a1, "irisVISEnabled") & 1) != 0)
    v16 = 0;
  else
    v16 = objc_msgSend(a1, "requiresScalingForInputTransForm:nodeName:", a3, a4, CFSTR("Movie File Scaler"));
  v17 = objc_alloc_init(BWPixelTransferNode);
  v18 = v17;
  if ((v16 & 1) == 0 && (a9 & 1) == 0)
    -[BWPixelTransferNode setPassesBuffersThroughWhenPossible:](v17, "setPassesBuffersThroughWhenPossible:", 1);
  v19 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR("Movie File "));
  v20 = v19;
  if (v16)
    objc_msgSend(v19, "appendString:", CFSTR("Scaler/"));
  objc_msgSend(v20, "appendString:", CFSTR("Zoomer/"));
  objc_msgSend(v20, "deleteCharactersInRange:", objc_msgSend(v20, "length") - 1, 1);
  -[BWPixelTransferNode passesBuffersThroughWhenPossible](v18, "passesBuffersThroughWhenPossible");
  -[BWNode setName:](v18, "setName:", v20);
  v21 = (void *)objc_msgSend((id)objc_msgSend(a1, "sourceConfiguration"), "requiredFormat");
  v22 = objc_msgSend(v21, "dimensions");
  v23 = HIDWORD(v22);
  v24 = v22;
  if (objc_msgSend(a1, "outputWidth") && objc_msgSend(a1, "outputHeight"))
  {
    v24 = objc_msgSend(a1, "outputWidth");
    LODWORD(v23) = objc_msgSend(a1, "outputHeight");
  }
  -[BWPixelTransferNode setCropMode:](v18, "setCropMode:", 1);
  -[BWPixelTransferNode setOutputWidth:](v18, "setOutputWidth:", v24);
  -[BWPixelTransferNode setOutputHeight:](v18, "setOutputHeight:", (int)v23);
  -[BWPixelTransferNode setMaxLossyCompressionLevel:](v18, "setMaxLossyCompressionLevel:", a10);
  if (a9)
    -[BWPixelTransferNode setOutputColorSpaceProperties:](v18, "setOutputColorSpaceProperties:", 6);
  if (!FigCapturePlatformSupportsHTPC16x8Compression()
    && !FigCapturePlatformSupportsUniversalCompression())
  {
    -[BWPixelTransferNode setOutputPixelFormat:](v18, "setOutputPixelFormat:", objc_msgSend(v21, "format"));
  }
  -[BWPixelTransferNode setExpectsMarkerBuffers:](v18, "setExpectsMarkerBuffers:", 1);
  if ((objc_msgSend(a6, "addNode:error:", v18, &v28) & 1) != 0)
  {
    *a8 = v18;
    if ((objc_msgSend(a5, "connectOutput:toInput:pipelineStage:", a2, -[BWNode input](v18, "input"), a7) & 1) != 0)
      return (uint64_t)-[BWNode output](v18, "output");
  }
  FigDebugAssert3();
  return a2;
}

void AppC3DUpdateCallbackHandler(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v10;

  v10 = objc_msgSend(a1, "referencedObject");
  if (!a7)
  {
    if (v10)
      -[BWAppClipCodeNode didReceiveAppC3DUpdate:userData:](v10, a2, a6);
  }
}

uint64_t captureSourceRemote_createInternal(void *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  int uint64;
  id v7;
  xpc_object_t value;
  BOOL v9;
  uint64_t v10;
  _QWORD applier[5];
  BOOL v13;

  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  FigCaptureSourceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
    goto LABEL_10;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = xpc_dictionary_get_uint64(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_ObjectID);
  v4 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v4)
    goto LABEL_10;
  uint64 = xpc_dictionary_get_uint64(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_SourceType);
  *(_DWORD *)(DerivedStorage + 52) = uint64;
  if (uint64 != 5)
  {
    v4 = FigXPCMessageCopyCFDictionary();
    if (!(_DWORD)v4)
    {
      v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      value = xpc_dictionary_get_value(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_FormatsArray);
      v9 = xpc_dictionary_get_BOOL(a1, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_420fOptimizationDisabled);
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __csr_createFormatsArrayFromSerializedSource_block_invoke;
      applier[3] = &unk_1E491F888;
      applier[4] = v7;
      v13 = !v9;
      xpc_array_apply(value, applier);
      *(_QWORD *)(DerivedStorage + 40) = v7;
      goto LABEL_7;
    }
LABEL_10:
    v10 = v4;
    fig_log_get_emitter();
    FigDebugAssert3();
    return v10;
  }
LABEL_7:
  v10 = 0;
  *(_DWORD *)(DerivedStorage + 48) = 0;
  *a2 = 0;
  return v10;
}

uint64_t FigCaptureSourceRemoteCopyProxySource(uint64_t a1, uint64_t a2)
{
  xpc_object_t value;
  uint64_t v5;
  xpc_object_t xdict;
  uint64_t v7;

  xdict = 0;
  v7 = 0;
  v5 = 0;
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString()
    || (objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a2, 32), FigXPCMessageSetCFData())
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
  value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CA36C8]);
  if (value && captureSourceRemote_createInternal(value, &v5))
  {
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigCaptureSourceRemoteMaxStillImageJPEGDataSize()
{
  uint64_t uint64;

  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    uint64 = 0;
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36C8]);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return uint64;
}

uint64_t FigCaptureSourceRemoteShowVideoEffectUserInterfaceForCinematicFramingOnboardingUI(void *a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier"), "isEqualToString:", CFSTR("com.apple.CMViewSrvc"));
  if ((_DWORD)result)
    return captureSourceRemote_ShowSystemUserInterface(1, a1, a2);
  return result;
}

uint64_t captureSourceRemote_ShowSystemUserInterface(int a1, void *a2, void *a3)
{
  void *v3;
  void *v4;

  v3 = a3;
  v4 = a2;
  if (!a2)
  {
    v4 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "bundleIdentifier");
    if (v3)
      goto LABEL_3;
LABEL_8:
    v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("CFBundleExecutable"));
    goto LABEL_3;
  }
  if (!a3)
    goto LABEL_8;
LABEL_3:
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_BundleID, (const char *)objc_msgSend(v4, "UTF8String")), xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_AppName, (const char *)objc_msgSend(v3, "UTF8String")), xpc_dictionary_set_int64(0, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_SystemUserInterface, a1), FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSourceRemoteShowSystemUserInterface(int a1)
{
  return captureSourceRemote_ShowSystemUserInterface(a1, 0, 0);
}

uint64_t FigCaptureSourceRemotePublishFrameSenderServerEndpoint(void *a1, void *a2, void *a3, int a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  const char *v15;
  const char *v16;
  xpc_object_t xdict;

  if (csr_ensureClientEstablished_0() || FigXPCCreateBasicMessage())
    goto LABEL_10;
  xpc_dictionary_set_value(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_Endpoint, a1);
  xpc_dictionary_set_string(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointUniqueID, (const char *)objc_msgSend(a2, "UTF8String"));
  xpc_dictionary_set_string(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointType, (const char *)objc_msgSend(a3, "UTF8String"));
  xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointPID, a4);
  xpc_dictionary_set_int64(xdict, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointProxyPID, a5);
  FigXPCMessageSetCFData();
  if (a7)
    FigXPCMessageSetCFData();
  v15 = (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointCameraUniqueID;
  v16 = a8 ? (const char *)objc_msgSend(a8, "UTF8String") : "unknown";
  xpc_dictionary_set_string(xdict, v15, v16);
  if (FigXPCRemoteClientSendSyncMessage())
  {
LABEL_10:
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

uint64_t FigCaptureSourceRemoteSuppressFrameSenderServerEndpoint(void *a1)
{
  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_string(0, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointUniqueID, (const char *)objc_msgSend(a1, "UTF8String")), FigXPCRemoteClientSendSyncMessage()))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

NSDictionary *FigCaptureSourceRemoteCopyFrameSenderEndpoints()
{
  xpc_object_t value;
  CMCaptureFrameSenderEndpoints *v1;
  CMCaptureFrameSenderEndpoints *v2;
  NSDictionary *v3;

  if (csr_ensureClientEstablished_0()
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || (value = xpc_dictionary_get_value(0, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointArray)) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v3 = 0;
    v2 = 0;
  }
  else
  {
    v1 = -[CMCaptureFrameSenderEndpoints initWithXPCArrayOfFrameSenderEndpoints:]([CMCaptureFrameSenderEndpoints alloc], "initWithXPCArrayOfFrameSenderEndpoints:", value);
    v2 = v1;
    if (v1)
    {
      v3 = -[CMCaptureFrameSenderEndpoints endpointsByPID](v1, "endpointsByPID");
      if (!v3)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v3 = 0;
    }
  }
  FigXPCRelease();
  FigXPCRelease();

  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t csr_deadConnectionCallback_0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    result = FigDebugAssert3();
  }
  *(_BYTE *)(v3 + 9) = 1;
  return result;
}

void csr_deadServerCallback()
{
  dispatch_async((dispatch_queue_t)sDeadServerNotificationQueue, &__block_literal_global_24);
}

void __csr_deadServerCallback_block_invoke()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("CaptureSourceConnectionDied"), 0, 0, 0);
}

uint64_t captureSourceRemote_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v1 = DerivedStorage;
    *(_BYTE *)(DerivedStorage + 8) = 1;
    v2 = *(const void **)(DerivedStorage + 16);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(v1 + 16) = 0;
    }
    v3 = *(const void **)(v1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 32) = 0;
    }
    v4 = *(const void **)(v1 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 40) = 0;
    }
    if (!*(_BYTE *)(v1 + 9))
    {
      v7 = FigXPCCreateBasicMessage();
      if ((_DWORD)v7)
      {
        v5 = v7;
        fig_log_get_emitter();
      }
      else
      {
        v5 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v5)
        {
LABEL_13:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v5;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t captureSourceRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSourceRemote_Invalidate();
  result = sCaptureSourceRemoteClient;
  if (sCaptureSourceRemoteClient)
    result = FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *captureSourceRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureSourceRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>"), a1, v5, v6, v7, *(_QWORD *)DerivedStorage);
  return Mutable;
}

uint64_t captureSourceRemote_CheckTCCAccess(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = captureSourceRemote_createBasicMessage(a1, 1668572003, &v4);
  if ((_DWORD)v1)
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_UnregisterNotificationForProprietaryDefaultChanges(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = captureSourceRemote_createBasicMessage(a1, 1970172004, &v4);
  if ((_DWORD)v1 || (v1 = FigXPCMessageSetCFString(), (_DWORD)v1))
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v2 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureSourceRemote_UpdateCameraOverrideHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _BYTE *a6, _QWORD *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t xdict;

  xdict = 0;
  *a6 = 0;
  *a7 = 0;
  v9 = csr_ensureClientEstablished_0();
  if ((_DWORD)v9)
  {
    v11 = v9;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_7;
  }
  v10 = captureSourceRemote_createBasicMessage(a1, 1969450856, &xdict);
  if ((_DWORD)v10
    || (v10 = FigXPCMessageSetCFString(), (_DWORD)v10)
    || (xpc_dictionary_set_BOOL(xdict, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryMessageKey_SetOverride, a5 != 0), v10 = FigXPCMessageSetCFDictionary(), (_DWORD)v10)|| (v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v10))
  {
    v11 = v10;
    fig_log_get_emitter();
    goto LABEL_10;
  }
  v11 = 0xFFFFFFFFLL;
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  return v11;
}

uint64_t captureSourceRemote_PerformReactionEffect(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v2 = csr_ensureClientEstablished_0();
  if ((_DWORD)v2)
  {
    v4 = v2;
    fig_log_get_emitter();
LABEL_10:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v3 = captureSourceRemote_createBasicMessage(a1, 1919120496, &v6);
  if ((_DWORD)v3 || (v3 = FigXPCMessageSetCFString(), (_DWORD)v3))
  {
    v4 = v3;
    fig_log_get_emitter();
    goto LABEL_10;
  }
  v4 = FigXPCRemoteClientSendAsyncMessage();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_10;
  }
LABEL_5:
  FigXPCRelease();
  return v4;
}

uint64_t captureSourceRemote_SetPixelBufferProperty(uint64_t a1, uint64_t a2, __CVBuffer *a3)
{
  uint64_t v4;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  uint64_t v7;
  xpc_object_t xdict;

  xdict = 0;
  v4 = captureSourceRemote_createBasicMessage(a1, 1937010786, &xdict);
  if ((_DWORD)v4 || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4))
  {
    v7 = v4;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    goto LABEL_7;
  }
  if (a3)
  {
    IOSurface = CVPixelBufferGetIOSurface(a3);
    if (!IOSurface)
    {
      v7 = 4294954516;
      goto LABEL_7;
    }
    XPCObject = IOSurfaceCreateXPCObject(IOSurface);
    xpc_dictionary_set_value(xdict, (const char *)kFigCaptureSourceRemoteProprietaryDefaultMessagePayload_Value, XPCObject);
    xpc_release(XPCObject);
  }
  v7 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v7)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t captureSourceRemote_CopyWildcardProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  v3 = captureSourceRemote_createBasicMessage(a1, 1663725668, &v6);
  if (!(_DWORD)v3)
  {
    v3 = FigXPCMessageSetCFString();
    if (!(_DWORD)v3)
    {
      v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v3)
      {
        fig_log_get_emitter();
LABEL_9:
        FigDebugAssert3();
        v5 = 0;
        goto LABEL_6;
      }
    }
  }
  v5 = v3;
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t captureSourceRemote_SetWildcardProprietaryDefault(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  v5 = captureSourceRemote_createBasicMessage(a1, 1932161124, &v9);
  if ((_DWORD)v5
    || (v5 = FigXPCMessageSetCFString(), (_DWORD)v5)
    || (v5 = FigXPCMessageSetCFObject(), (_DWORD)v5)
    || (v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v5))
  {
    v7 = v5;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v6 = (void *)MEMORY[0x1A858DD40]();
    v7 = FigXPCMessageCopyCFObject();
    *a4 = 0;
    if ((_DWORD)v7)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    objc_autoreleasePoolPop(v6);
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

BOOL sis_encoderCanCropDenormalizedZoomRect(unint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  BOOL v6;

  v6 = a5 == (double)a1 && a6 == (double)a2;
  return v6 && ((int)a3 & 1) == 0 && ((int)a4 & 1) == 0 && ((int)a5 & 1) == 0 && ((int)a6 & 1) == 0;
}

void mrcn_processorOutputReadyCallback(void *a1, int a2, void *target)
{
  void *v5;
  uint64_t v6;
  CMTimeEpoch v7;
  OSStatus v8;
  CMSampleBufferRef v9;
  CMTime v10;
  CMSampleTimingInfo timingArrayOut;
  __int128 v12;
  CMTimeEpoch v13;
  CMSampleBufferRef v14;
  CMSampleTimingInfo sampleTimingArray;

  v5 = (void *)objc_msgSend((id)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D05860]);
  v12 = 0uLL;
  v13 = 0;
  v6 = objc_msgSend(v5, "count", BWGetOriginalPresentationTimeStampFromBuffer(target, (uint64_t)&v12));
  *(_OWORD *)&sampleTimingArray.duration.value = v12;
  sampleTimingArray.duration.epoch = v13;
  if (-[BWMRCNode _shouldEmitSBufForBarcodeCount:originalPTS:]((uint64_t)a1, v6, (__int128 *)&sampleTimingArray.duration.value))
  {
    memset(&timingArrayOut, 0, sizeof(timingArrayOut));
    CMSampleBufferGetSampleTimingInfoArray((CMSampleBufferRef)target, 1, &timingArrayOut, 0);
    CMSampleBufferGetPresentationTimeStamp(&v10, (CMSampleBufferRef)target);
    v14 = 0;
    *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
    v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    sampleTimingArray.presentationTimeStamp = v10;
    sampleTimingArray.duration.epoch = v7;
    *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)&sampleTimingArray.duration.value;
    sampleTimingArray.decodeTimeStamp.epoch = v7;
    v8 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v14);
    v9 = v14;
    if (v14 && !v8)
    {
      CMSetAttachment(v14, (CFStringRef)*MEMORY[0x1E0D05BE0], v5, 1u);
      CMSetAttachment(v14, (CFStringRef)*MEMORY[0x1E0D05BE8], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v5, "count")), 1u);
      v9 = v14;
    }
    if (v9)
    {
      objc_msgSend((id)objc_msgSend(a1, "output"), "emitSampleBuffer:", v9);
      CFRelease(v9);
    }
  }
}

uint64_t ___getCurrentPipelineStageKey_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&_getCurrentPipelineStageKey_key, 0);
}

uint64_t gnrn_createSampleBufferProcessorFunction()
{
  return FigSampleBufferProcessorCreateForCustom();
}

void sub_1A2E70FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureCameraStreamingPowerLogInitialize(void *a1, void *a2)
{
  uint64_t v4;
  FigCaptureOSStateHandle *v5;
  unint64_t v6;
  uint64_t v7;
  const __CFString *v8;
  CFComparisonResult v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  FigCapturePowerLogMissingCameraStopEventObserver *v13;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v4 = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  if (!sCameraStreamingPowerEventsByPortType)
    sCameraStreamingPowerEventsByPortType = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (!sCameraPowerLogEventQueue)
    sCameraPowerLogEventQueue = FigDispatchQueueCreateWithPriority();
  if (!sOSStateHandle)
  {
    v5 = [FigCaptureOSStateHandle alloc];
    sOSStateHandle = -[FigCaptureOSStateHandle initWithTitle:queue:dataProviderBlock:](v5, "initWithTitle:queue:dataProviderBlock:", CFSTR("Camera Streaming Power Events"), sCameraPowerLogEventQueue, &__block_literal_global_26);
  }
  if (objc_msgSend(a1, "count"))
  {
    v6 = 0;
    v7 = MEMORY[0x1E0C9AAA0];
    do
    {
      v8 = (const __CFString *)objc_msgSend(a1, "objectAtIndexedSubscript:", v6);
      v9 = figCapturePowerLoggingCameraTypeForPortTypeAndDeviceType(v8, objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v6), "intValue"));
      v15[0] = v7;
      v14[0] = CFSTR("Streaming");
      v14[1] = CFSTR("CameraType");
      v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
      v14[2] = CFSTR("Timestamp");
      v15[1] = v10;
      v15[2] = v4;
      v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
      objc_msgSend((id)sCameraStreamingPowerEventsByPortType, "setObject:forKeyedSubscript:", v11, v8);
      ++v6;
    }
    while (objc_msgSend(a1, "count") > v6);
  }
  dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, &__block_literal_global_20);
  result = FigCaptureOSVariantHasInternalUI();
  if ((_DWORD)result)
  {
    if (!sMissingCameraStopEventObserver)
    {
      v13 = [FigCapturePowerLogMissingCameraStopEventObserver alloc];
      result = (uint64_t)-[FigCapturePowerLogMissingCameraStopEventObserver initWithQueue:](v13, (void *)sCameraPowerLogEventQueue);
      sMissingCameraStopEventObserver = result;
    }
  }
  return result;
}

CFComparisonResult figCapturePowerLoggingCameraTypeForPortTypeAndDeviceType(const __CFString *a1, int a2)
{
  CFComparisonResult result;

  result = CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A18], 0);
  if (result)
  {
    if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A30], 0))
    {
      if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A38], 0))
      {
        if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A50], 0))
        {
          if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A40], 0))
          {
            if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A28], 0))
            {
              if (CFStringCompare(a1, (CFStringRef)*MEMORY[0x1E0D05A20], 0))
                return 0;
              else
                return 5;
            }
            else
            {
              return 4;
            }
          }
          else
          {
            return 3;
          }
        }
        else
        {
          return 6;
        }
      }
      else if ((a2 - 2) >= 9)
      {
        return 7;
      }
      else
      {
        return (unint64_t)dword_1A32A2A08[a2 - 2];
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t FigCaptureLogContinuityCameraPowerEvent(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D87D68], "currentProcess"), "bundle"), "identifier"), "isEqualToString:", 0x1E493D818) & 1) == 0&& !FigCaptureCurrentProcessIsCameracaptured())
  {
    FigCaptureCurrentProcessIsMediaserverd();
  }
  v5[0] = CFSTR("PID");
  v5[1] = CFSTR("Enabled");
  v6[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v6[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a2);
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  return PLLogRegisteredEvent();
}

void *cpls_portTypesReportedStreamingForCameraApp()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  void *v6;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  dispatch_assert_queue_V2((dispatch_queue_t)sCameraPowerLogEventQueue);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v0 = (void *)sCameraStreamingPowerEventsByPortType;
  v1 = objc_msgSend((id)sCameraStreamingPowerEventsByPortType, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * i);
        v6 = (void *)objc_msgSend((id)sCameraStreamingPowerEventsByPortType, "objectForKeyedSubscript:", v5);
        if ((objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ApplicationID")), "isEqualToString:", 0x1E493D4D8) & 1) != 0|| objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("ApplicationID")), "isEqualToString:", 0x1E493D5F8))
        {
          if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Streaming")), "BOOLValue"))objc_msgSend(v8, "addObject:", v5);
        }
      }
      v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v2);
  }
  return v8;
}

uint64_t FigCaptureLogTorchPowerEvent(int a1, const void *a2, float a3)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *Mutable;
  float v9;
  int valuePtr;

  valuePtr = a1;
  v9 = a3;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(v4, kCFNumberFloat32Type, &v9);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  Mutable = CFDictionaryCreateMutable(v4, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, CFSTR("PID"), v5);
  CFDictionaryAddValue(Mutable, CFSTR("State"), v6);
  if (a2)
    CFDictionaryAddValue(Mutable, CFSTR("ApplicationID"), a2);
  PLLogRegisteredEvent();
  CFRelease(Mutable);
  CFRelease(v5);
  CFRelease(v6);
  return 1;
}

void FigCaptureLogCameraStillImageCapturePowerEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  _QWORD block[5];
  char v10;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (sCameraPowerLogEventQueue)
  {
    v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%dx%d"), a1, a2, a3);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigCaptureLogCameraStillImageCapturePowerEvent_block_invoke;
    block[3] = &unk_1E491EE18;
    block[4] = v8;
    v10 = a4;
    dispatch_async((dispatch_queue_t)sCameraPowerLogEventQueue, block);
  }
}

uint64_t _requestConcreteImplementation(objc_class *a1, const char *a2, objc_class *a3)
{
  objc_class *v6;
  NSString *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v13;
  NSString *v14;

  v6 = (objc_class *)objc_opt_class();
  v7 = NSStringFromClass(v6);
  v8 = NSStringFromSelector(a2);
  if (v6 == a3)
    return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("*** -%@ cannot be sent to an abstract object of class %@: Create a concrete instance!"), v8, v7);
  v9 = (void *)MEMORY[0x1E0CB3940];
  v13 = NSStringFromClass(v6);
  v14 = NSStringFromSelector(a2);
  v10 = 45;
  if (v6 == a1)
    v10 = 43;
  v11 = objc_msgSend(v9, "stringWithFormat:", CFSTR("%c[%@ %@]"), v10, v13, v14);
  return objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("*** -%@ only defined for abstract class.  Define %@!"), v8, v11);
}

CFTypeRef qtmfsn_bufferSpecifiesFileWriterAction(const void *a1, const void *a2)
{
  CFTypeRef result;

  result = CMGetAttachment(a1, CFSTR("FileWriterAction"), 0);
  if (result)
    return (CFTypeRef)(CFEqual(result, a2) != 0);
  return result;
}

void *qtmfsn_movieRecordingIsProRes(void *a1)
{
  void *result;
  int v2;

  result = (void *)objc_msgSend((id)objc_msgSend(a1, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoCodecKey"));
  if (result)
  {
    v2 = BWOSTypeForString(result);
    if ((v2 - 1634755432) <= 0xB)
      return (void *)((0x8C1u >> (v2 - 104)) & 1);
    else
      return 0;
  }
  return result;
}

__CFString *qtmfsn_stringForRecordingState(uint64_t a1)
{
  if (a1 >= 7)
    return (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown (%d)"), a1);
  else
    return off_1E491FA78[(int)a1];
}

void qtmfsn_setTrackProperties(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t FigBaseObject;
  void (*v9)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  uint64_t v10;
  const __CFAllocator *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, _QWORD, uint64_t);
  CFDictionaryRef v16;
  void (*v17)(uint64_t, uint64_t, _QWORD, CFDictionaryRef);
  CMTimeEpoch v18;
  void (*v19)(uint64_t, uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  uint64_t v20;
  const __CFAllocator *v21;
  CFDictionaryRef v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, CFDictionaryRef);
  __int128 v24;
  CMTime v25;
  CFDictionaryRef dictionaryRepresentation;
  CMTime time2;
  CMTime time1;
  CMTime time;
  CFDictionaryRef v30;

  v30 = 0;
  if (qtmfsn_movieRecordingIsProRes(a4))
  {
    if (a3 == 1986618469)
    {
      FigBaseObject = FigFormatWriterGetFigBaseObject();
      v9 = *(void (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v9)
        v9(FigBaseObject, *MEMORY[0x1E0CC4458], *MEMORY[0x1E0C9AE00], &v30);
    }
    else
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v30 = CMTimeCopyAsDictionary(&time, v11);
    }
    v10 = 0x4000;
  }
  else
  {
    v10 = 0;
  }
  v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
  v13 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v13)
    v13(a1, a2, *MEMORY[0x1E0CC4618], v12);
  v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0x100000);
  v15 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v15)
    v15(a1, a2, *MEMORY[0x1E0CC4630], v14);
  v16 = v30;
  if (v30)
  {
    v17 = *(void (**)(uint64_t, uint64_t, _QWORD, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
    if (v17)
      v17(a1, a2, *MEMORY[0x1E0CC45C0], v16);
    CFRelease(v30);
  }
  memset(&time, 0, sizeof(time));
  if (a4)
  {
    objc_msgSend(a4, "movieFragmentInterval");
    if ((time.flags & 1) != 0)
    {
      time1 = time;
      v24 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
      v18 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      time2.epoch = v18;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        dictionaryRepresentation = 0;
        v19 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
        if (v19)
        {
          v20 = *MEMORY[0x1E0CC45C0];
          v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v19(a1, a2, *MEMORY[0x1E0CC45C0], *MEMORY[0x1E0C9AE00], &dictionaryRepresentation);
          if (dictionaryRepresentation)
          {
            memset(&time1, 0, sizeof(time1));
            CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
            time2 = time1;
            v25 = time;
            if (CMTimeCompare(&time2, &v25) >= 1)
            {
              *(_OWORD *)&time2.value = v24;
              time2.epoch = v18;
              v22 = CMTimeCopyAsDictionary(&time2, v21);
              v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 24);
              if (v23)
                v23(a1, a2, v20, v22);
              CFRelease(v22);
            }
            CFRelease(dictionaryRepresentation);
          }
        }
      }
    }
  }
}

uint64_t qtmfsn_formatWriterErrorOccurredCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return -[BWQuickTimeMovieFileSinkNode _handleFormatWriterErrorOccurredCallback:userInfo:](a2, a2, a5);
}

uint64_t qtmfsn_formatWriterDidWriteFragment(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    *(_BYTE *)(a2 + 715) = 1;
    return objc_msgSend(*(id *)(a2 + 664), "parseAdditionalFragments");
  }
  return result;
}

void sub_1A2E8135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2E828A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A2E82D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_1A2E846BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DiskArbitrationLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!DiskArbitrationLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E491FA60;
    v3 = 0;
    DiskArbitrationLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!DiskArbitrationLibraryCore_frameworkLibrary)
    DiskArbitrationLibrary_cold_1(&v1);
  return DiskArbitrationLibraryCore_frameworkLibrary;
}

void __qtmfsn_minFreeDiskSpaceLimit_block_invoke()
{
  uint64_t v0;
  const void *v1;

  v0 = MGCopyAnswer();
  if (v0)
  {
    v1 = (const void *)v0;
    FigCFDictionaryGetInt64IfPresent();
    CFRelease(v1);
  }
  if (!qtmfsn_minFreeDiskSpaceLimit_sMinFreeDiskSpaceLimit)
    qtmfsn_minFreeDiskSpaceLimit_sMinFreeDiskSpaceLimit = 209715200;
}

char *OUTLINED_FUNCTION_0()
{
  return dlerror();
}

uint64_t FigImageControl_LockWhiteBalance()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 7428) = 0;
  *(_BYTE *)(DerivedStorage + 7444) = 0;
  return 0;
}

uint64_t FigImageControl_ManualWhiteBalanceGains(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 7428) = 0;
  if (*(_BYTE *)(DerivedStorage + 517))
  {
    *(_WORD *)(DerivedStorage + 7432) = a2;
    *(_WORD *)(DerivedStorage + 7434) = a3;
    *(_WORD *)(DerivedStorage + 7436) = a4;
    *(_DWORD *)(DerivedStorage + 7440) = a5;
  }
  *(_BYTE *)(DerivedStorage + 7444) = 0;
  return 0;
}

BWNodeInputMediaConfiguration *simpleInputMediaConfigurationWithDelayedBufferCount(uint64_t a1)
{
  BWNodeInputMediaConfiguration *v2;

  v2 = objc_alloc_init(BWNodeInputMediaConfiguration);
  -[BWNodeInputMediaConfiguration setFormatRequirements:](v2, "setFormatRequirements:", objc_alloc_init(BWVideoFormatRequirements));
  -[BWNodeInputMediaConfiguration setPassthroughMode:](v2, "setPassthroughMode:", 0);
  -[BWNodeInputMediaConfiguration setDelayedBufferCount:](v2, "setDelayedBufferCount:", a1);
  return v2;
}

uint64_t getVNImageRequestHandlerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNImageRequestHandlerClass_softClass;
  v8 = getVNImageRequestHandlerClass_softClass;
  if (!getVNImageRequestHandlerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNImageRequestHandlerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNImageRequestHandlerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNImageRequestHandlerClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNImageRequestHandler");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNImageRequestHandlerClass_block_invoke_cold_1();
  getVNImageRequestHandlerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNSequenceRequestHandlerClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNSequenceRequestHandler");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNSequenceRequestHandlerClass_block_invoke_cold_1();
  getVNSequenceRequestHandlerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNFaceObservationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNFaceObservationClass_softClass;
  v8 = getVNFaceObservationClass_softClass;
  if (!getVNFaceObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNFaceObservationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNFaceObservationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNFaceObservationClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNFaceObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNFaceObservationClass_block_invoke_cold_1();
  getVNFaceObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNDetectedObjectObservationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNDetectedObjectObservationClass_softClass;
  v8 = getVNDetectedObjectObservationClass_softClass;
  if (!getVNDetectedObjectObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectedObjectObservationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNDetectedObjectObservationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectedObjectObservationClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNDetectedObjectObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNDetectedObjectObservationClass_block_invoke_cold_1();
  getVNDetectedObjectObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNTranslationalImageRegistrationRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNTranslationalImageRegistrationRequestClass_softClass;
  v8 = getVNTranslationalImageRegistrationRequestClass_softClass;
  if (!getVNTranslationalImageRegistrationRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNTranslationalImageRegistrationRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNTranslationalImageRegistrationRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNTranslationalImageRegistrationRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNTranslationalImageRegistrationRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNTranslationalImageRegistrationRequestClass_block_invoke_cold_1();
  getVNTranslationalImageRegistrationRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNClassifyImageAestheticsRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNClassifyImageAestheticsRequestClass_softClass;
  v8 = getVNClassifyImageAestheticsRequestClass_softClass;
  if (!getVNClassifyImageAestheticsRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyImageAestheticsRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNClassifyImageAestheticsRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNClassifyImageAestheticsRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNClassifyImageAestheticsRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNClassifyImageAestheticsRequestClass_block_invoke_cold_1();
  getVNClassifyImageAestheticsRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNGenerateAttentionBasedSaliencyImageRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass;
  v8 = getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass;
  if (!getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNGenerateAttentionBasedSaliencyImageRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke_cold_1();
  getVNGenerateAttentionBasedSaliencyImageRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                             + 40);
  return result;
}

Class __getVNGenerateFaceSegmentsRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNGenerateFaceSegmentsRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNGenerateFaceSegmentsRequestClass_block_invoke_cold_1();
  getVNGenerateFaceSegmentsRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNClassifyJunkImageRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNClassifyJunkImageRequestClass_softClass;
  v8 = getVNClassifyJunkImageRequestClass_softClass;
  if (!getVNClassifyJunkImageRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNClassifyJunkImageRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNClassifyJunkImageRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNClassifyJunkImageRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNClassifyJunkImageRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNClassifyJunkImageRequestClass_block_invoke_cold_1();
  getVNClassifyJunkImageRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNCreateSceneprintRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNCreateSceneprintRequestClass_softClass;
  v8 = getVNCreateSceneprintRequestClass_softClass;
  if (!getVNCreateSceneprintRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNCreateSceneprintRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNCreateSceneprintRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNCreateSceneprintRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNCreateSceneprintRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNCreateSceneprintRequestClass_block_invoke_cold_1();
  getVNCreateSceneprintRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVN5kJNH3eYuyaLxNpZr5Z7ziClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass;
  v8 = getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass;
  if (!getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VN5kJNH3eYuyaLxNpZr5Z7zi");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke_cold_1();
  getVN5kJNH3eYuyaLxNpZr5Z7ziClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getVNClassifyFaceAttributesRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNClassifyFaceAttributesRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNClassifyFaceAttributesRequestClass_block_invoke_cold_1();
  getVNClassifyFaceAttributesRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNTrackObjectRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNTrackObjectRequestClass_softClass;
  v8 = getVNTrackObjectRequestClass_softClass;
  if (!getVNTrackObjectRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNTrackObjectRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNTrackObjectRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNTrackObjectRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNTrackObjectRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNTrackObjectRequestClass_block_invoke_cold_1();
  getVNTrackObjectRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNSessionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNSessionClass_softClass;
  v8 = getVNSessionClass_softClass;
  if (!getVNSessionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNSessionClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNSessionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8DCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNSessionClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNSessionClass_block_invoke_cold_1();
  getVNSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNRecognizedObjectObservationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNRecognizedObjectObservationClass_softClass;
  v8 = getVNRecognizedObjectObservationClass_softClass;
  if (!getVNRecognizedObjectObservationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNRecognizedObjectObservationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNRecognizedObjectObservationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8DDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNRecognizedObjectObservationClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNRecognizedObjectObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNRecognizedObjectObservationClass_block_invoke_cold_1();
  getVNRecognizedObjectObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNProcessingDescriptorClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNProcessingDescriptorClass_softClass;
  v8 = getVNProcessingDescriptorClass_softClass;
  if (!getVNProcessingDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNProcessingDescriptorClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNProcessingDescriptorClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNProcessingDescriptorClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNProcessingDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNProcessingDescriptorClass_block_invoke_cold_1();
  getVNProcessingDescriptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNResourceVersionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNResourceVersionClass_softClass;
  v8 = getVNResourceVersionClass_softClass;
  if (!getVNResourceVersionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNResourceVersionClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNResourceVersionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8E010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNResourceVersionClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNResourceVersion");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNResourceVersionClass_block_invoke_cold_1();
  getVNResourceVersionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getVNDetectHumanRectanglesRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__11;
  v7 = __Block_byref_object_dispose__11;
  v0 = getVNDetectHumanRectanglesRequestClass_softClass;
  v8 = getVNDetectHumanRectanglesRequestClass_softClass;
  if (!getVNDetectHumanRectanglesRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getVNDetectHumanRectanglesRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getVNDetectHumanRectanglesRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8E128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectHumanRectanglesRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionLibrary();
  result = objc_getClass("VNDetectHumanRectanglesRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVNDetectHumanRectanglesRequestClass_block_invoke_cold_1();
  getVNDetectHumanRectanglesRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *getVNInferenceNetworkIdentifierFaceprintSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr;
  v6 = getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr;
  if (!getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr)
  {
    v1 = (void *)VisionLibrary();
    v0 = dlsym(v1, "VNInferenceNetworkIdentifierFaceprint");
    v4[3] = (uint64_t)v0;
    getVNInferenceNetworkIdentifierFaceprintSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNInferenceNetworkIdentifierFaceprint()
{
  void *VNInferenceNetworkIdentifierFaceprintSymbolLoc;

  VNInferenceNetworkIdentifierFaceprintSymbolLoc = getVNInferenceNetworkIdentifierFaceprintSymbolLoc();
  if (!VNInferenceNetworkIdentifierFaceprintSymbolLoc)
    getVNInferenceNetworkIdentifierFaceprint_cold_1();
  return *(_QWORD *)VNInferenceNetworkIdentifierFaceprintSymbolLoc;
}

void *getVNFaceAttributeEyesClosedSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVNFaceAttributeEyesClosedSymbolLoc_ptr;
  v6 = getVNFaceAttributeEyesClosedSymbolLoc_ptr;
  if (!getVNFaceAttributeEyesClosedSymbolLoc_ptr)
  {
    v1 = (void *)VisionLibrary();
    v0 = dlsym(v1, "VNFaceAttributeEyesClosed");
    v4[3] = (uint64_t)v0;
    getVNFaceAttributeEyesClosedSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8E2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNFaceAttributeEyesClosed()
{
  void *VNFaceAttributeEyesClosedSymbolLoc;

  VNFaceAttributeEyesClosedSymbolLoc = getVNFaceAttributeEyesClosedSymbolLoc();
  if (!VNFaceAttributeEyesClosedSymbolLoc)
    getVNFaceAttributeEyesClosed_cold_1();
  return *(_QWORD *)VNFaceAttributeEyesClosedSymbolLoc;
}

void *getVNErrorDomainSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getVNErrorDomainSymbolLoc_ptr;
  v6 = getVNErrorDomainSymbolLoc_ptr;
  if (!getVNErrorDomainSymbolLoc_ptr)
  {
    v1 = (void *)VisionLibrary();
    v0 = dlsym(v1, "VNErrorDomain");
    v4[3] = (uint64_t)v0;
    getVNErrorDomainSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2E8E36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getVNErrorDomain()
{
  void *VNErrorDomainSymbolLoc;

  VNErrorDomainSymbolLoc = getVNErrorDomainSymbolLoc();
  if (!VNErrorDomainSymbolLoc)
    getVNErrorDomain_cold_1();
  return *(_QWORD *)VNErrorDomainSymbolLoc;
}

__CFString *FigCaptureThermalLevelToShortString(uint64_t a1)
{
  if (a1 >= 3)
    return (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown thermal level %d"), a1);
  else
    return off_1E491FB98[(int)a1];
}

uint64_t BWStereoUtilitiesComputeRectificationQuaternion(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  __int128 v6;
  float v7;
  float v8;
  float v9;
  float v11;
  float v12;
  __int128 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float v20;
  float32_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;

  if (a4)
  {
    v4 = *(int32x4_t *)MEMORY[0x1E0C83FE8];
    v5 = *(int32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
    v6 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
    LODWORD(v7) = HIDWORD(*(_QWORD *)(MEMORY[0x1E0C83FE8] + 16));
    v8 = COERCE_FLOAT(*(_QWORD *)(MEMORY[0x1E0C83FE8] + 40));
    v9 = v8 + (float)(COERCE_FLOAT(*MEMORY[0x1E0C83FE8]) + v7);
    if (v9 >= 0.0)
    {
      v20 = sqrtf(v9 + 1.0);
      v21 = v20 + v20;
      v22 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20));
      v23 = vmul_f32(v22, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20), v22));
      v23.i32[0] = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v20 + v20), v23)).u32[0];
      *(float32x2_t *)v35.f32 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(int32x2_t *)&v6), (float32x2_t)vext_s8(*(int8x8_t *)&v6, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), 4uLL)), v23.f32[0]);
      v24.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v5.i8).u32[0];
      v24.f32[1] = v21;
      v23.i32[1] = 0.25;
      v37 = vmul_f32(v24, v23);
    }
    else if (*(float *)v4.i32 < v7 || *(float *)v4.i32 < v8)
    {
      v11 = 1.0 - *(float *)v4.i32;
      if (v7 >= v8)
      {
        v38 = sqrtf(v7 + (float)(v11 - v8));
        *(float *)&v39 = v38 + v38;
        v40 = vrecpe_f32((float32x2_t)v39);
        v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
        v42.i32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
        v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v5.i8).u32[0];
        v41.i32[1] = v39;
        v43 = (float32x2_t)vrev64_s32(*(int32x2_t *)&v6);
        v44.i32[0] = vadd_f32(v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)).u32[0];
        v44.i32[1] = vsub_f32(v43, (float32x2_t)vdup_laneq_s32(v4, 2)).i32[1];
        v37 = vmul_n_f32(v44, v42.f32[0]);
        v42.i32[1] = 0.25;
        *(float32x2_t *)v35.f32 = vmul_f32(v41, v42);
      }
      else
      {
        v12 = sqrtf(v8 + (float)(v11 - v7));
        v13 = *MEMORY[0x1E0C83FE8];
        *(float *)&v13 = v12;
        v14 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)), *(float32x2_t *)&v6);
        v15 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
        v16 = vsub_f32(*(float32x2_t *)v4.i8, v15);
        v15.i32[0] = 2.0;
        v15.i32[0] = vmul_f32(*(float32x2_t *)&v13, v15).u32[0];
        v15.i32[1] = v16.i32[1];
        v17 = vrecpe_f32((float32x2_t)v15.u32[0]);
        v18 = vmul_f32(v17, vrecps_f32((float32x2_t)v15.u32[0], v17));
        v16.i32[0] = vmul_f32(v18, vrecps_f32((float32x2_t)v15.u32[0], v18)).u32[0];
        *(float32x2_t *)v35.f32 = vmul_n_f32(v14, v16.f32[0]);
        __asm { FMOV            V2.2S, #0.25 }
        _D2.i32[1] = v16.i32[0];
        v37 = vmul_f32(v15, _D2);
      }
    }
    else
    {
      v25 = (float32x2_t)__PAIR64__(v4.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v4.i32 + (float)((float)(1.0 - v7) - v8))));
      v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 0);
      v27 = vadd_f32(*(float32x2_t *)v4.i8, v26);
      v26.i32[0] = 2.0;
      v26.i32[0] = vmul_f32(v25, v26).u32[0];
      v26.i32[1] = v27.i32[1];
      v28 = vrecpe_f32((float32x2_t)v26.u32[0]);
      v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v26.u32[0], v28));
      v25.i32[0] = vmul_f32(v29, vrecps_f32((float32x2_t)v26.u32[0], v29)).u32[0];
      __asm { FMOV            V5.2S, #0.25 }
      _D5.i32[1] = v25.i32[0];
      *(float32x2_t *)v35.f32 = vmul_f32(v26, _D5);
      v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL), *(float32x2_t *)&v6).u32[0];
      v36.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v5, 2), *(float32x2_t *)&v6).i32[1];
      v37 = vmul_n_f32(v36, v25.f32[0]);
    }
    *(float32x2_t *)&v35.u32[2] = v37;
    *a4 = vmulq_f32(v35, (float32x4_t)xmmword_1A32A2AE0);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t BWStereoUtilitiesComputeCenterShiftForPrimaryStream(uint64_t a1, int a2, void *a3, void *target, float64x2_t *a5, float64x2_t *a6)
{
  uint64_t IntrinsicsMatrix;
  int32x4_t v9;
  int32x2_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v20;
  unint64_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x2_t v31;
  int32x4_t v32;
  uint64_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;

  if (a3 && target && a5 && a6)
  {
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    IntrinsicsMatrix = su_getIntrinsicsMatrix(a1, a3, target, 1, (uint64_t)&v35);
    if ((_DWORD)IntrinsicsMatrix)
    {
      v33 = IntrinsicsMatrix;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v11 = 0;
      v12 = v35;
      v13 = v36;
      v14 = v37;
      *(float *)v10.i32 = (float)-v37.f32[0] / v35.f32[0];
      *(float *)v9.i32 = (float)-v37.f32[1] / v35.f32[0];
      __asm { FMOV            V6.4S, #1.0 }
      v20 = vzip1q_s32(vzip2q_s32(vdupq_lane_s32(v10, 0), _Q6), v9);
      LODWORD(v21) = 0;
      *((float *)&v21 + 1) = 1.0 / v35.f32[0];
      v20.i32[3] = 0;
      v23 = *(int32x4_t *)MEMORY[0x1E0C83FE8];
      v22 = *(int32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
      v24 = *(int32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
      v25 = vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
      v26 = (float32x4_t)vzip1q_s32(*MEMORY[0x1E0C83FE8], v22);
      v26.i32[2] = v24.i32[0];
      v27 = (float32x4_t)vzip2q_s32(*MEMORY[0x1E0C83FE8], v22);
      v27.i32[2] = *(_QWORD *)(MEMORY[0x1E0C83FE8] + 40);
      v38 = (float32x4_t)COERCE_UNSIGNED_INT(1.0 / v35.f32[0]);
      v39 = (float32x4_t)v21;
      v40 = (float32x4_t)v20;
      v28 = (float32x4_t)vzip2q_s32(vzip1q_s32(v23, v24), v25);
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v41 + v11 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v11 * 4))), v28, *(float32x2_t *)&v38.f32[v11], 1), v27, *(float32x4_t *)((char *)&v38 + v11 * 4), 2);
        v11 += 4;
      }
      while (v11 != 12);
      v29 = 0;
      v38 = v41;
      v39 = v42;
      v40 = v43;
      v41 = 0u;
      v42 = 0u;
      v43 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v41 + v29 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v29 * 4))), v13, *(float32x2_t *)&v38.f32[v29], 1), v14, *(float32x4_t *)((char *)&v38 + v29 * 4), 2);
        v29 += 4;
      }
      while (v29 != 12);
      __asm { FMOV            V5.2D, #0.5 }
      v31 = vcvt_f32_f64(vaddq_f64(*a5, vmulq_f64(a5[1], _Q5)));
      v32 = (int32x4_t)vaddq_f32(v43, vmlaq_lane_f32(vmulq_n_f32(v41, v31.f32[0]), v42, v31, 1));
      if (*(float *)&v32.i32[2] <= 0.0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
      else
      {
        v33 = 0;
        *a6 = vcvtq_f64_f32(vsub_f32(vdiv_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2)), v31));
      }
    }
    return v33;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t su_getIntrinsicsMatrix(uint64_t a1, void *a2, void *target, int a4, uint64_t a5)
{
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  __CVBuffer *ImageBuffer;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  double Seconds;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  CMTime time;
  float64x2_t v34;
  int v35;

  if (a2)
  {
    if (target)
    {
      if (a5)
      {
        v10 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
        if (v10)
        {
          v11 = v10;
          if ((objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]), "isEqualToString:", a1) & 1) != 0)
          {
            v12 = objc_msgSend(a2, "objectForKeyedSubscript:", a1);
            if (v12)
            {
              v13 = (void *)v12;
              v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
              if (v14 <= 1)
                v15 = 1;
              else
                v15 = v14;
              ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
              v17 = psn_pixelBufferDimensions(ImageBuffer);
              v35 = 1065353216;
              v18 = FigMotionComputeLensPositionScalingFactor((const __CFDictionary *)v11, v17, HIDWORD(v17), v15, v15, (float *)&v35);
              if ((_DWORD)v18)
              {
                v28 = v18;
                fig_log_get_emitter();
                goto LABEL_26;
              }
              objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0D05968]), "floatValue");
              if (v19 > 0.0)
              {
                v20 = v19;
                v21 = *(float *)&v35;
                if (a4)
                {
                  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A78]), "floatValue");
                  if (v22 > 0.0)
                  {
                    v23 = v22 * 1000.0;
LABEL_16:
                    v34 = 0uLL;
                    v25 = 1.0 / v20;
                    CMSampleBufferGetPresentationTimeStamp(&time, (CMSampleBufferRef)target);
                    Seconds = CMTimeGetSeconds(&time);
                    v27 = (a4 & 1) == 0
                       && objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58], Seconds) != 0;
                    v28 = FigMotionComputeOpticalCenterInBuffer((const __CFDictionary *)v11, v17, v15, v15, v27, &v34, v25);
                    if (!(_DWORD)v28)
                    {
                      *(float *)&v29 = v34.f64[0];
                      LODWORD(v30) = 0;
                      *((float *)&v30 + 1) = (float)(v25 * v21) * v23;
                      v31 = v34.f64[1];
                      *((float *)&v29 + 1) = v31;
                      *(_DWORD *)(a5 + 40) = 1065353216;
                      *(_DWORD *)(a5 + 8) = 0;
                      *(_QWORD *)a5 = HIDWORD(v30);
                      *(_DWORD *)(a5 + 24) = 0;
                      *(_QWORD *)(a5 + 16) = v30;
                      *(_QWORD *)(a5 + 32) = v29;
                      return v28;
                    }
                    fig_log_get_emitter();
LABEL_26:
                    FigDebugAssert3();
                    return v28;
                  }
                }
                else
                {
                  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06CF0]), "floatValue");
                  v23 = v24;
                  if (v24 > 0.0)
                    goto LABEL_16;
                }
              }
              fig_log_get_emitter();
              FigDebugAssert3();
              return FigSignalErrorAt();
            }
          }
        }
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWStereoUtilitiesComputeInverseRectificationHomographiesAndFOV(opaqueCMSampleBuffer *target, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, _DWORD *a8, double a9, double a10)
{
  float v12;
  _DWORD *v13;
  uint64_t v15;
  uint64_t v21;
  void *v22;
  const __CFDictionary *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  simd_float4 v27;
  simd_float4 v28;
  simd_float4 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  const __CFString *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CVBuffer *v40;
  unint64_t v41;
  uint64_t IntrinsicsMatrix;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ViewMatrixInCameraCoordinates;
  float32x4_t v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __CVBuffer *ImageBuffer;
  unint64_t v57;
  float32x4_t v58;
  float32x2_t v59;
  double v60;
  float v61;
  float64x2_t v62;
  float32x2_t v63;
  float v64;
  float v65;
  double v66;
  float v67;
  long double v68;
  float32x4_t v69;
  unint64_t v70;
  int32x4_t v71;
  float32x4_t v72;
  double v73;
  int32x4_t v74;
  int32x4_t v80;
  float v81;
  int32x4_t v82;
  int32x2_t v83;
  unsigned __int32 v84;
  int32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  unint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  unint64_t v95;
  simd_float4 v96;
  simd_float4 v97;
  simd_float4 v98;
  unint64_t v99;
  uint64_t v100;
  simd_float4 v101;
  simd_float4 v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  unint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  uint64_t v111;
  simd_float4 v112;
  simd_float4 v113;
  uint64_t v115;
  float64x2_t v116;
  double height;
  double width;
  float32x2_t v119;
  float32x2_t v120;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  __int128 v137;
  float64x2_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  __int128 v142;
  float32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  __int128 v146;
  simd_float4x4 v147;
  _OWORD v148[3];
  CGSize size;
  __int128 v150;
  __int128 v151;
  CGRect v152;

  v12 = a9 / a10;
  if (fabsf(v12 + -1.3333) < 0.0001)
  {
    v13 = a8;
    v15 = a6;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    if (a4 && a5)
    {
      v21 = *MEMORY[0x1E0D08440];
      v22 = (void *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D08440]);
      if (v22)
      {
        objc_msgSend(v22, "getBytes:length:", &v125, 48);
        size.width = 0.0;
        size.height = 0.0;
        v23 = (const __CFDictionary *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448]);
        if (v23)
        {
          CGSizeMakeWithDictionaryRepresentation(v23, &size);
          v24 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", v21);
          if (v24)
          {
            objc_msgSend(v24, "getBytes:length:", &v128, 48);
            memset(&v147, 0, sizeof(v147));
            v25 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E0D08430]);
            if (v25)
            {
              objc_msgSend(v25, "getBytes:length:", &v147, 64);
              v26 = 0;
              v27 = v147.columns[0];
              v28 = v147.columns[1];
              v29 = v147.columns[2];
              v27.i32[3] = 0;
              v28.i32[3] = 0;
              v29.i32[3] = 0;
              v30 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
              v131 = *(float32x4_t *)MEMORY[0x1E0C83FE8];
              v132 = v30;
              v133 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
              v31 = v131;
              v32 = v133;
              v139 = (int32x4_t)v27;
              v140 = (int32x4_t)v28;
              v141 = (int32x4_t)v29;
              v143 = 0u;
              v144 = 0u;
              v145 = 0u;
              do
              {
                *(float32x4_t *)((char *)&v143 + v26) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)((char *)&v139 + v26))), v30, *(float32x2_t *)&v139.i8[v26], 1), v32, *(float32x4_t *)((char *)&v139 + v26), 2);
                v26 += 16;
              }
              while (v26 != 48);
              v134.i32[2] = v143.i32[2];
              v135.i32[2] = v144.i32[2];
              v134.i64[0] = v143.i64[0];
              v135.i64[0] = v144.i64[0];
              v136.i32[2] = v145.i32[2];
              v136.i64[0] = v145.i64[0];
              if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0))
              {
                if (FigCFDictionaryGetCGRectIfPresent())
                {
                  v33 = 0;
                }
                else
                {
                  ImageBuffer = CMSampleBufferGetImageBuffer(target);
                  v57 = psn_pixelBufferDimensions(ImageBuffer);
                  v33 = 0;
                  v137 = 0uLL;
                  v138.f64[0] = (double)(int)v57;
                  v138.f64[1] = (double)SHIDWORD(v57);
                }
                goto LABEL_30;
              }
            }
          }
        }
LABEL_64:
        fig_log_get_emitter();
        goto LABEL_65;
      }
    }
    else if (target && a2 && a3)
    {
      v35 = (const __CFString *)*MEMORY[0x1E0D05CB0];
      v36 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      if (v36
        && (v37 = *MEMORY[0x1E0D06D00], (v38 = objc_msgSend(v36, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00])) != 0))
      {
        v39 = v38;
        if (!FigCFDictionaryGetCGRectIfPresent())
        {
          v40 = CMSampleBufferGetImageBuffer(target);
          v41 = psn_pixelBufferDimensions(v40);
          v137 = 0uLL;
          v138.f64[0] = (double)(int)v41;
          v138.f64[1] = (double)SHIDWORD(v41);
        }
        IntrinsicsMatrix = su_getIntrinsicsMatrix(v39, a3, target, 0, (uint64_t)&v125);
        v13 = a8;
        if (!(_DWORD)IntrinsicsMatrix)
        {
          v43 = (void *)CMGetAttachment(a2, v35, 0);
          v15 = a6;
          if (v43)
          {
            v44 = objc_msgSend(v43, "objectForKeyedSubscript:", v37);
            if (v44)
            {
              v45 = v44;
              ViewMatrixInCameraCoordinates = su_getIntrinsicsMatrix(v44, a3, a2, 0, (uint64_t)&v128);
              if ((_DWORD)ViewMatrixInCameraCoordinates)
                goto LABEL_66;
              v47 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
              v131 = *(float32x4_t *)MEMORY[0x1E0C83FE8];
              v132 = v47;
              v133 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
              memset(&v147, 0, sizeof(v147));
              ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)objc_msgSend(a3, "objectForKeyedSubscript:", v39), (int32x2_t *)&v147);
              if ((_DWORD)ViewMatrixInCameraCoordinates
                || (v145 = 0u,
                    v146 = 0u,
                    v143 = 0u,
                    v144 = 0u,
                    ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)objc_msgSend(a3, "objectForKeyedSubscript:", v45), (int32x2_t *)&v143), (_DWORD)ViewMatrixInCameraCoordinates))
              {
LABEL_66:
                v33 = ViewMatrixInCameraCoordinates;
                fig_log_get_emitter();
                FigDebugAssert3();
              }
              else
              {
                v141 = 0u;
                v142 = 0u;
                v139 = 0u;
                v140 = 0u;
                su_computeRelativeExtrinsics(&v147, &v143, (uint64_t)&v139);
                v48 = 0;
                v49 = vzip1q_s32(v139, v141);
                v50 = vzip1q_s32(v49, v140);
                v50.i32[3] = 0;
                v51 = vzip1q_s32(vzip2q_s32(v139, v141), vdupq_laneq_s32(v140, 2));
                v52 = vzip2q_s32(v49, vdupq_lane_s32(*(int32x2_t *)v140.i8, 1));
                v52.i32[3] = 0;
                v51.i32[3] = 0;
                v53 = v131;
                v54 = v132;
                v55 = v133;
                v148[0] = v50;
                v148[1] = v52;
                v148[2] = v51;
                size = (CGSize)0;
                v150 = 0u;
                v151 = 0u;
                do
                {
                  *(float32x4_t *)((char *)&size + v48 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(v148[v48])), v54, *(float32x2_t *)&v148[v48], 1), v55, (float32x4_t)v148[v48], 2);
                  ++v48;
                }
                while (v48 != 3);
                v33 = 0;
                v134.i32[2] = LODWORD(size.height);
                v135.i32[2] = DWORD2(v150);
                v134.i64[0] = *(_QWORD *)&size.width;
                v135.i64[0] = v150;
                v136.i32[2] = DWORD2(v151);
                v136.i64[0] = v151;
              }
LABEL_30:
              if ((_DWORD)v33)
              {
                fig_log_get_emitter();
              }
              else
              {
                v58 = v125;
                v59 = *(float32x2_t *)v127.f32;
                v60 = v138.f64[0];
                v61 = v138.f64[0] / v138.f64[1];
                if (v12 != v61)
                {
                  v119 = *(float32x2_t *)v127.f32;
                  v122 = v125;
                  v116 = v138;
                  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((unint64_t)v138.f64[0], (unint64_t)v138.f64[1], *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), v12);
                  height = v152.size.height;
                  width = v152.size.width;
                  if (CGRectIsNull(v152))
                  {
LABEL_54:
                    fig_log_get_emitter();
                    FigDebugAssert3();
                    return 4294954516;
                  }
                  v60 = width;
                  v62.f64[0] = width;
                  v62.f64[1] = height;
                  v63 = vadd_f32(v119, vmul_f32(vcvt_f32_f64(vsubq_f64(v116, v62)), (float32x2_t)0xBF000000BF000000));
                  v61 = width / height;
                  v59 = v63;
                  v58 = v122;
                }
                v64 = ceil(a9 * 1.02499998 * 0.25) * 4.0;
                v65 = v64 / v12;
                v66 = v64;
                if ((float)(v64 / v65) == v61)
                {
                  v67 = v66 / v60;
                  v58.f32[0] = v67 * v58.f32[0];
                  v120 = vmla_n_f32((float32x2_t)0xBF000000BF000000, vadd_f32(v59, (float32x2_t)0x3F0000003F000000), v67);
                  goto LABEL_36;
                }
                v120 = v59;
                v124 = v58;
                fig_log_get_emitter();
                FigDebugAssert3();
                v115 = FigSignalErrorAt();
                v58 = v124;
                if (!(_DWORD)v115)
                {
LABEL_36:
                  v123 = (int32x4_t)v58;
                  v68 = atan(a9 * 0.5 / v58.f32[0]);
                  *(float *)&v68 = v68 / 3.14159265 * 180.0 + v68 / 3.14159265 * 180.0;
                  *v13 = LODWORD(v68);
                  v69 = vaddq_f32(v133, vmlaq_f32(vmulq_f32(v131, (float32x4_t)0), (float32x4_t)0, v132));
                  if (v69.f32[2] > 0.0)
                  {
                    v70 = 0;
                    v71 = v123;
                    v72.i32[1] = 0;
                    v72.i32[2] = 0;
                    v73 = v66 - a9;
                    *(float *)&v73 = v66 - a9;
                    *(float *)&v73 = (float)-(float)(v120.f32[0] - (float)(*(float *)&v73 * 0.5)) / *(float *)v123.i32;
                    v74 = vdupq_lane_s32(*(int32x2_t *)&v73, 0);
                    __asm { FMOV            V0.4S, #1.0 }
                    v80 = vzip2q_s32(v74, (int32x4_t)_Q0);
                    v81 = v65 - a10;
                    v82.i32[0] = 0;
                    v82.i32[2] = 0;
                    v83 = (int32x2_t)vdivq_f32(v69, (float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2)).u64[0];
                    v84 = vdupq_lane_s32(v83, 1).u32[0];
                    *(float *)v71.i32 = (float)-(float)(v120.f32[1] - (float)(v81 * 0.5)) / *(float *)v123.i32;
                    v85 = vzip1q_s32((int32x4_t)v131, (int32x4_t)v133);
                    v86 = v125;
                    v87 = v126;
                    v143 = (float32x4_t)vzip1q_s32(v85, (int32x4_t)v132);
                    v144 = vzip2q_s32(v85, vdupq_lane_s32(*(int32x2_t *)v132.f32, 1));
                    v88 = v127;
                    v145 = vzip1q_s32(vzip2q_s32((int32x4_t)v131, (int32x4_t)v133), vdupq_laneq_s32((int32x4_t)v132, 2));
                    v89 = vzip1q_s32(v80, v71);
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v70 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v86, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v70 * 4))), v87, *(float32x2_t *)&v143.f32[v70], 1), v88, *(float32x4_t *)((char *)&v143 + v70 * 4), 2);
                      v70 += 4;
                    }
                    while (v70 != 12);
                    v90 = 0;
                    v89.i32[3] = 0;
                    v82.i32[3] = 0;
                    v72.i32[3] = 0;
                    v91 = (float32x4_t)vzip1q_s32((int32x4_t)0x3F800000uLL, (int32x4_t)0x3F800000uLL);
                    v91.i32[1] = 0;
                    _Q0.i64[0] = __PAIR64__(v84, v83.u32[0]);
                    v92 = (float32x4_t)v147.columns[0];
                    v93 = (float32x4_t)v147.columns[1];
                    v94 = (float32x4_t)v147.columns[2];
                    v72.f32[0] = 1.0 / *(float *)v123.i32;
                    v143 = v72;
                    *(float *)&v82.i32[1] = 1.0 / *(float *)v123.i32;
                    v144 = v82;
                    v145 = v89;
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v90 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v90 * 4))), (float32x4_t)xmmword_1A32A2B00, *(float32x2_t *)&v143.f32[v90], 1), _Q0, *(float32x4_t *)((char *)&v143 + v90 * 4), 2);
                      v90 += 4;
                    }
                    while (v90 != 12);
                    v95 = 0;
                    v96 = v147.columns[0];
                    v97 = v147.columns[1];
                    v98 = v147.columns[2];
                    v143 = (float32x4_t)v147.columns[0];
                    v144 = (int32x4_t)v147.columns[1];
                    v145 = (int32x4_t)v147.columns[2];
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v95 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v95 * 4))), v93, *(float32x2_t *)&v143.f32[v95], 1), v94, *(float32x4_t *)((char *)&v143 + v95 * 4), 2);
                      v95 += 4;
                    }
                    while (v95 != 12);
                    v99 = 0;
                    v100 = v147.columns[0].i64[0];
                    v101 = v147.columns[1];
                    v102 = v147.columns[2];
                    *(_DWORD *)(v15 + 8) = v147.columns[0].i32[2];
                    *(_DWORD *)(v15 + 24) = v101.i32[2];
                    *(_QWORD *)v15 = v100;
                    *(_QWORD *)(v15 + 16) = v101.i64[0];
                    *(_DWORD *)(v15 + 40) = v102.i32[2];
                    *(_QWORD *)(v15 + 32) = v102.i64[0];
                    v103 = vzip1q_s32(v134, v136);
                    v104 = v128;
                    v106 = v129;
                    v105 = v130;
                    v143 = (float32x4_t)vzip1q_s32(v103, v135);
                    v144 = vzip2q_s32(v103, vdupq_lane_s32(*(int32x2_t *)v135.i8, 1));
                    v145 = vzip1q_s32(vzip2q_s32(v134, v136), vdupq_laneq_s32(v135, 2));
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v99 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v104, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v99 * 4))), v106, *(float32x2_t *)&v143.f32[v99], 1), v105, *(float32x4_t *)((char *)&v143 + v99 * 4), 2);
                      v99 += 4;
                    }
                    while (v99 != 12);
                    v107 = 0;
                    v108 = (float32x4_t)v147.columns[0];
                    v109 = (float32x4_t)v147.columns[1];
                    v110 = (float32x4_t)v147.columns[2];
                    v143 = (float32x4_t)v96;
                    v144 = (int32x4_t)v97;
                    v145 = (int32x4_t)v98;
                    memset(&v147, 0, 48);
                    do
                    {
                      v147.columns[v107 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v108, COERCE_FLOAT(*(_OWORD *)((char *)&v143 + v107 * 4))), v109, *(float32x2_t *)&v143.f32[v107], 1), v110, *(float32x4_t *)((char *)&v143 + v107 * 4), 2);
                      v107 += 4;
                    }
                    while (v107 != 12);
                    v33 = 0;
                    v111 = v147.columns[0].i64[0];
                    v112 = v147.columns[1];
                    v113 = v147.columns[2];
                    *(_DWORD *)(a7 + 8) = v147.columns[0].i32[2];
                    *(_DWORD *)(a7 + 24) = v112.i32[2];
                    *(_QWORD *)a7 = v111;
                    *(_QWORD *)(a7 + 16) = v112.i64[0];
                    *(_DWORD *)(a7 + 40) = v113.i32[2];
                    *(_QWORD *)(a7 + 32) = v113.i64[0];
                    return v33;
                  }
                  goto LABEL_54;
                }
                v33 = v115;
                fig_log_get_emitter();
              }
              FigDebugAssert3();
              return v33;
            }
          }
          goto LABEL_64;
        }
        v33 = IntrinsicsMatrix;
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v33 = FigSignalErrorAt();
        v13 = a8;
      }
      v15 = a6;
      goto LABEL_30;
    }
    fig_log_get_emitter();
LABEL_65:
    FigDebugAssert3();
    v33 = FigSignalErrorAt();
    goto LABEL_30;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t BWStereoUtilitiesComputeStereoBaseline(uint64_t a1, uint64_t a2, void *a3, float *a4)
{
  uint64_t ViewMatrixInCameraCoordinates;
  uint64_t v8;
  float32x4_t v9;
  _OWORD v11[3];
  float32x4_t v12;
  float32x4_t v13[4];
  simd_float4x4 v14;

  *a4 = 0.0;
  if (a3)
  {
    memset(&v14, 0, sizeof(v14));
    ViewMatrixInCameraCoordinates = su_getViewMatrixInCameraCoordinates((void *)objc_msgSend(a3, "objectForKeyedSubscript:", a1), (int32x2_t *)&v14);
    if ((_DWORD)ViewMatrixInCameraCoordinates)
    {
      v8 = ViewMatrixInCameraCoordinates;
      fig_log_get_emitter();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
      v8 = su_getViewMatrixInCameraCoordinates((void *)objc_msgSend(a3, "objectForKeyedSubscript:", a2), (int32x2_t *)v13);
      if (!(_DWORD)v8)
      {
        v12 = 0u;
        memset(v11, 0, sizeof(v11));
        su_computeRelativeExtrinsics(&v14, v13, (uint64_t)v11);
        v9 = vmulq_f32(v12, v12);
        *a4 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
        return v8;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
    return v8;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t su_getViewMatrixInCameraCoordinates(void *a1, int32x2_t *a2)
{
  void *v3;
  void *v4;
  int32x2_t *v5;
  float32x4_t v6;
  int32x4_t v7;
  int32x2_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;

  if (a2
    && (v3 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D058E8])) != 0
    && (v4 = v3, objc_msgSend(v3, "length") == 48))
  {
    v5 = (int32x2_t *)objc_msgSend(v4, "bytes");
    *(int32x2_t *)v6.f32 = v5[1];
    v6.i64[1] = v6.i64[0];
    v7 = (int32x4_t)vnegq_f32(v6);
    v8 = v5[2];
    *(int32x2_t *)v9.f32 = v5[3];
    v9.i64[1] = v9.i64[0];
    v10 = (int32x4_t)vnegq_f32(v9);
    *(int32x2_t *)v11.f32 = v5[4];
    v12 = v5[5];
    v11.i64[0] = vnegq_f32(v11).u64[0];
    v13 = vzip1_s32(*v5, v8);
    v14 = vzip2_s32(*v5, v8);
    a2[1].i32[0] = v11.i32[0];
    *a2 = v13;
    a2[3].i32[0] = v11.i32[1];
    a2[2] = v14;
    a2[5].i32[0] = v12.i32[0];
    a2[4] = (int32x2_t)vzip1q_s32(vdupq_laneq_s32(v7, 2), vdupq_laneq_s32(v10, 2)).u64[0];
    a2[7].i32[0] = v12.i32[1];
    a2[6] = (int32x2_t)vuzp2q_s32(vuzp2q_s32(v7, v10), v7).u64[0];
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

double su_computeRelativeExtrinsics(simd_float4x4 *a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  simd_float4x4 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  simd_float4x4 v19;

  v19 = __invert_f4(*a1);
  v5 = 0;
  v6 = *a2;
  v7 = a2[1];
  v6.i32[3] = 0;
  v7.i32[3] = 0;
  v8 = a2[2];
  v9 = a2[3];
  v8.i32[3] = 0;
  v9.i32[3] = 1.0;
  v14 = v19;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  do
  {
    *(__int128 *)((char *)&v15 + v5 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)&v14.columns[v5])), v7, *(float32x2_t *)v14.columns[v5].f32, 1), v8, (float32x4_t)v14.columns[v5], 2), v9, (float32x4_t)v14.columns[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  result = *(double *)&v15;
  v11 = v16;
  v12 = v17;
  v13 = v18;
  *(_DWORD *)(a3 + 8) = DWORD2(v15);
  *(double *)a3 = result;
  *(_DWORD *)(a3 + 24) = DWORD2(v11);
  *(_DWORD *)(a3 + 40) = DWORD2(v12);
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 32) = v12;
  *(_DWORD *)(a3 + 56) = DWORD2(v13);
  *(_QWORD *)(a3 + 48) = v13;
  return result;
}

BOOL FigCameraUsageProhibited()
{
  void *v0;
  void *v1;
  _BOOL8 v2;

  v0 = (void *)MEMORY[0x1A858DD40]();
  v1 = (void *)objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v2 = objc_msgSend(v1, "effectiveBoolValueForSetting:", *MEMORY[0x1E0D46F88]) == 2;
  objc_autoreleasePoolPop(v0);
  return v2;
}

FigCameraUsageListener *FigCameraUsageRegisterChangeHandler(FigCameraUsageListener *result)
{
  if (!FigCameraUsageRegisterChangeHandler_sCameraUsageListener)
  {
    result = -[FigCameraUsageListener initWithChangeHandler:]([FigCameraUsageListener alloc], "initWithChangeHandler:", result);
    FigCameraUsageRegisterChangeHandler_sCameraUsageListener = (uint64_t)result;
  }
  return result;
}

uint64_t BWPortraitUtilitiesAttachLumaNoiseLevelToSampleBuffer(const void *a1, void *a2)
{
  CFTypeRef v4;
  void *v5;
  void *v6;
  unsigned int v7;
  const __CFString *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  float v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;

  if (a1 && a2 && (v4 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0)) != 0)
  {
    v5 = (void *)v4;
    if (objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillSettings"), 0), "captureSettings"), "captureType") == 10&& (v6 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D05EF0])) != 0&& (v7 = objc_msgSend(v6, "intValue"), v7 < 3))
    {
      v8 = off_1E491FBD8[v7];
    }
    else
    {
      v9 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D084A8]);
      if (v9)
      {
        v10 = objc_msgSend(v9, "integerValue");
        v8 = CFSTR("SingleImage");
        switch(v10)
        {
          case 0:
          case 4:
          case 5:
          case 10:
            goto LABEL_16;
          case 1:
          case 6:
            v8 = CFSTR("SIS");
            goto LABEL_16;
          case 2:
          case 7:
            v8 = CFSTR("OIS");
            goto LABEL_16;
          case 3:
          case 8:
          case 9:
            v8 = CFSTR("HDR");
            goto LABEL_16;
          default:
            if (v10 != 100)
              goto LABEL_13;
            goto LABEL_16;
        }
      }
      v8 = CFSTR("SingleImage");
    }
LABEL_16:
    v12 = FigCaptureComputeImageGainFromMetadata();
    if ((_DWORD)v12)
    {
      v11 = v12;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v13 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FD8]);
      if (objc_msgSend(v13, "unsignedIntValue"))
        v14 = objc_msgSend(v13, "unsignedIntValue");
      else
        v14 = 4;
      v15 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FE0]);
      if (objc_msgSend(v15, "unsignedIntValue"))
        v16 = (float)(objc_msgSend(v15, "unsignedIntValue") + 1);
      else
        v16 = 4.0;
      v17 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("NoiseEstimation"));
      if (v17
        && (v18 = (void *)objc_msgSend(v17, "objectForKeyedSubscript:", v8)) != 0
        && (v19 = v18, (v20 = objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("GainLevels"))) != 0)
        && (v21 = (void *)v20, (v22 = objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("NoiseLevels"))) != 0)
        && (v23 = (void *)v22, v24 = objc_msgSend(v21, "count"), v24 == objc_msgSend(v23, "count"))
        && (unint64_t)objc_msgSend(v21, "count") > 1)
      {
        objc_msgSend((id)objc_msgSend(v21, "firstObject"), "floatValue");
        v26 = v25;
        objc_msgSend((id)objc_msgSend(v23, "firstObject"), "floatValue");
        v28 = v27;
        if ((unint64_t)objc_msgSend(v21, "count") < 2)
        {
          v31 = NAN;
          v32 = NAN;
        }
        else
        {
          v30 = 1;
          do
          {
            v31 = v26;
            v32 = v28;
            objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v30), "floatValue");
            v26 = v33;
            objc_msgSend((id)objc_msgSend(v23, "objectAtIndex:", v30), "floatValue");
            v28 = *(float *)&v29;
            if (v26 >= NAN)
              break;
            ++v30;
          }
          while (v30 < objc_msgSend(v21, "count"));
        }
        *(float *)&v29 = v32
                       + (float)(fminf(fmaxf((float)(NAN - v31) / (float)(v26 - v31), 0.0), 1.0) * (float)(v28 - v32));
        v34 = (float)(2.0 / sqrtf(v16)) * *(float *)&v29;
        if (v14 >= 5)
          *(float *)&v29 = v34;
        CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D087A0], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v29), 1u);
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      return 0;
    }
  }
  else
  {
LABEL_13:
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v11;
}

uint64_t BWPortraitUtilitiesAttachSyntheticFocusRectangleToSampleBuffer(CMAttachmentBearerRef target)
{
  __int128 v2;
  uint64_t v3;
  CFTypeRef v4;
  void *v5;
  double v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v16;
  const void **v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFDictionary *v23;
  void *v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  const __CFArray *Value;
  const __CFArray *v34;
  CFTypeID v35;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  CFTypeID v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  const void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  const void *v58;
  uint64_t v59;
  const __CFDictionary *v60;
  double v61;
  double v62;
  BOOL IsNull;
  double v64;
  const __CFDictionary *v65;
  const __CFArray *v66;
  const __CFArray *v67;
  int Count;
  CFIndex v69;
  const void *v70;
  uint64_t v71;
  float v72;
  const __CFDictionary *v73;
  const __CFDictionary *v74;
  float v75;
  uint64_t v76;
  CGSize v77;
  const __CFDictionary *v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  const __CFDictionary *v93;
  const __CFDictionary *v94;
  uint64_t v96;
  uint64_t v97;
  CGFloat rect1;
  uint64_t v99;
  CGFloat v100;
  CGFloat v101;
  CGPoint v102;
  CGFloat v103;
  CGPoint v104;
  CGPoint v105;
  CGSize v106;
  CGAffineTransform v107;
  CGRect valuePtr;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  CGRect rect;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  float v118;
  uint64_t v119;
  CGRect v120;
  CGAffineTransform v121[2];
  uint64_t v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;

  v122 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v107.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v107.c = v2;
  *(_OWORD *)&v107.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v3 = MEMORY[0x1E0C9D628];
  if (target)
  {
    v4 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v4)
    {
      v5 = (void *)v4;
      v105 = *(CGPoint *)v3;
      v106 = *(CGSize *)(v3 + 16);
      v102 = *(CGPoint *)v3;
      v104 = *(CGPoint *)v3;
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          y = v105.y;
          x = v105.x;
          height = v106.height;
          width = v106.width;
        }
        else
        {
          __asm { FMOV            V0.2D, #1.0 }
          y = 0.0;
          height = 1.0;
          width = 1.0;
          x = 0.0;
        }
        v6 = FigCaptureComputeAffineTransformFromSourceAndDestRects((uint64_t)&v107, v104.x, v104.y, v106.width, v106.height, x, y, width, height);
      }
      v16 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AA0], v6);
      v17 = (const void **)MEMORY[0x1E0D06998];
      v18 = (_QWORD *)MEMORY[0x1E0D06D58];
      if (v16)
      {
        v19 = v16;
        v116 = 0u;
        v117 = 0u;
        v114 = 0u;
        v115 = 0u;
        v20 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v114, v121, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v115;
          while (1)
          {
            if (*(_QWORD *)v115 != v22)
              objc_enumerationMutation(v19);
            if (!--v21)
            {
              v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v114, v121, 16);
              if (!v21)
                break;
            }
          }
        }
        if ((int)objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A90]), "intValue") >= 1)
        {
          if (objc_msgSend(v19, "count"))
          {
            v23 = (const __CFDictionary *)objc_msgSend(v19, "objectAtIndexedSubscript:", (unint64_t)objc_msgSend(v19, "count") > 1);
            rect.origin = v102;
            rect.size = v106;
            if (CGRectMakeWithDictionaryRepresentation(v23, &rect) && !CGRectIsEmpty(rect))
            {
              v24 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
              v25 = (void *)objc_msgSend(v24, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
              v26 = (void *)objc_msgSend(v25, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
              if (!v26)
                v26 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *v17);
              if (!objc_msgSend(v26, "count"))
                goto LABEL_59;
              v27 = rect.size.width;
              v28 = rect.size.height;
              v29 = *(double *)v3;
              v30 = *(double *)(v3 + 8);
              v32 = *(double *)(v3 + 16);
              v31 = *(double *)(v3 + 24);
              Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, (const void *)*MEMORY[0x1E0D05858]);
              if (!Value)
                goto LABEL_93;
              v34 = Value;
              v35 = CFGetTypeID(Value);
              if (v35 != CFArrayGetTypeID())
                goto LABEL_93;
              if (CFArrayGetCount(v34) != 4)
                goto LABEL_93;
              ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0);
              if (!ValueAtIndex)
                goto LABEL_93;
              v37 = ValueAtIndex;
              v38 = CFGetTypeID(ValueAtIndex);
              if (v38 != CFNumberGetTypeID())
                goto LABEL_93;
              LODWORD(valuePtr.origin.x) = 0;
              v119 = 0;
              v118 = 0.0;
              if (!CFNumberGetValue(v37, kCFNumberFloatType, &valuePtr))
                goto LABEL_93;
              v39 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 1);
              if (!v39)
                goto LABEL_93;
              v40 = v39;
              v41 = CFGetTypeID(v39);
              if (v41 != CFNumberGetTypeID())
                goto LABEL_93;
              if (CFNumberGetValue(v40, kCFNumberFloatType, (char *)&v119 + 4)
                && (v42 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 2)) != 0
                && (v43 = v42, v44 = CFGetTypeID(v42), v44 == CFNumberGetTypeID())
                && CFNumberGetValue(v43, kCFNumberFloatType, &v119)
                && (v45 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 3)) != 0
                && (v46 = v45, v47 = CFGetTypeID(v45), v47 == CFNumberGetTypeID())
                && CFNumberGetValue(v46, kCFNumberFloatType, &v118))
              {
                v29 = (float)(*(float *)&valuePtr.origin.x / 1000.0);
                v30 = (float)(*((float *)&v119 + 1) / 1000.0);
                v32 = (float)(*(float *)&v119 / 1000.0);
                v31 = (float)(v118 / 1000.0);
              }
              else
              {
LABEL_93:
                fig_log_get_emitter();
                v97 = v99;
                LODWORD(v96) = 0;
                FigDebugAssert3();
              }
              v123.origin.x = v29;
              v123.origin.y = v30;
              v123.size.width = v32;
              v123.size.height = v31;
              if (CGRectIsNull(v123))
              {
                fig_log_get_emitter();
                v97 = v99;
                LODWORD(v96) = 0;
                FigDebugAssert3();
                if (v23)
                  goto LABEL_71;
                goto LABEL_60;
              }
              v48 = fabs(v27 * v28);
              v124.origin.x = v29;
              v124.size.height = v31;
              v124.origin.y = v30;
              v49 = v32;
              v124.size.width = v32;
              v125 = CGRectIntersection(v124, rect);
              v50 = v125.size.width;
              v51 = v125.size.height;
              v52 = 0.0;
              if (!CGRectIsNull(v125))
                v52 = fabs(v50 * v51) / fmin(fabs(v31 * v49), v48);
              v53 = v17;
              v111 = 0u;
              v112 = 0u;
              v109 = 0u;
              v110 = 0u;
              v54 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v109, &v120, 16, v96, v97);
              if (v54)
              {
                v55 = v54;
                v56 = *(_QWORD *)v110;
                v57 = v18;
                v58 = (const void *)*v18;
LABEL_43:
                v59 = 0;
                while (1)
                {
                  if (*(_QWORD *)v110 != v56)
                    objc_enumerationMutation(v26);
                  if (v52 >= 0.5)
                    break;
                  v60 = (const __CFDictionary *)objc_msgSend(*(id *)(*((_QWORD *)&v109 + 1) + 8 * v59), "objectForKeyedSubscript:", v58);
                  if (!v60
                    || (valuePtr.origin = v102,
                        valuePtr.size = v106,
                        !CGRectMakeWithDictionaryRepresentation(v60, &valuePtr)))
                  {
                    fig_log_get_emitter();
                    v97 = v99;
                    LODWORD(v96) = 0;
                    FigDebugAssert3();
                    v18 = v57;
                    v17 = v53;
                    v3 = MEMORY[0x1E0C9D628];
                    goto LABEL_59;
                  }
                  v126 = CGRectIntersection(valuePtr, rect);
                  v61 = v126.size.width;
                  v62 = v126.size.height;
                  IsNull = CGRectIsNull(v126);
                  v64 = 0.0;
                  if (!IsNull)
                    v64 = fabs(v61 * v62) / fmin(fabs(valuePtr.size.width * valuePtr.size.height), v48);
                  v52 = fmax(v52, v64);
                  if (v55 == ++v59)
                  {
                    v55 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v109, &v120, 16);
                    if (v55)
                      goto LABEL_43;
                    break;
                  }
                }
              }
              else
              {
                v57 = v18;
              }
              v18 = v57;
              v17 = v53;
              v3 = MEMORY[0x1E0C9D628];
              if (v52 >= 0.5)
              {
LABEL_59:
                if (v23)
                {
LABEL_71:
                  v76 = 0;
                  goto LABEL_72;
                }
                goto LABEL_60;
              }
              v127.origin.x = v29;
              v127.origin.y = v30;
              v127.size.width = v49;
              v127.size.height = v31;
              v65 = CGRectCreateDictionaryRepresentation(v127);
              if (v65)
              {
LABEL_70:
                v23 = v65;
                goto LABEL_71;
              }
            }
          }
          fig_log_get_emitter();
          v97 = v99;
          LODWORD(v96) = 0;
          FigDebugAssert3();
        }
      }
LABEL_60:
      v66 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v5, *v17);
      if (v66)
      {
        v67 = v66;
        Count = CFArrayGetCount(v66);
        if (Count >= 1)
        {
          v69 = 0;
          v23 = 0;
          v70 = (const void *)*v18;
          v71 = Count;
          v72 = 0.0;
          while (1)
          {
            *(CGPoint *)&v121[0].a = v102;
            *(CGSize *)&v121[0].c = v106;
            v73 = (const __CFDictionary *)CFArrayGetValueAtIndex(v67, v69);
            v74 = (const __CFDictionary *)CFDictionaryGetValue(v73, v70);
            if (!CGRectMakeWithDictionaryRepresentation(v74, (CGRect *)v121))
              break;
            v75 = v121[0].c * v121[0].d;
            if (v72 < v75)
            {
              v23 = v74;
              v72 = v121[0].c * v121[0].d;
            }
            if (v71 == ++v69)
            {
              if (v72 <= 0.0)
                break;
              if (v23)
                goto LABEL_71;
              goto LABEL_69;
            }
          }
        }
        fig_log_get_emitter();
        v97 = v99;
        LODWORD(v96) = 0;
        FigDebugAssert3();
      }
LABEL_69:
      v128.origin.x = 0.25;
      v128.origin.y = 0.25;
      v128.size.width = 0.5;
      v128.size.height = 0.5;
      v65 = CGRectCreateDictionaryRepresentation(v128);
      goto LABEL_70;
    }
  }
  fig_log_get_emitter();
  v97 = v99;
  LODWORD(v96) = 0;
  FigDebugAssert3();
  v23 = 0;
  v76 = 4294954516;
LABEL_72:
  v77 = *(CGSize *)(v3 + 16);
  v120.origin = *(CGPoint *)v3;
  v120.size = v77;
  if (!CGRectMakeWithDictionaryRepresentation(v23, &v120))
  {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D08798], v23, 1u);
LABEL_84:
    v78 = (const __CFDictionary *)(id)-[__CFDictionary copy](v23, "copy", v96, v97);
    goto LABEL_85;
  }
  v103 = v120.origin.x;
  v100 = v120.size.width;
  v101 = v120.origin.y;
  rect1 = v120.size.height;
  v78 = CGRectCreateDictionaryRepresentation(v120);
  v79 = v120.origin.x;
  v80 = v120.origin.y;
  v81 = v120.size.width;
  v82 = v120.size.height;
  v121[0] = v107;
  if (!CGAffineTransformIsIdentity(v121))
  {
    v121[0] = v107;
    v129.origin.x = v79;
    v129.origin.y = v80;
    v129.size.width = v81;
    v129.size.height = v82;
    v130 = CGRectApplyAffineTransform(v129, v121);
    v79 = v130.origin.x;
    v80 = v130.origin.y;
    v81 = v130.size.width;
    v82 = v130.size.height;
  }
  v138.origin.x = 0.0;
  v138.origin.y = 0.0;
  v138.size.width = 1.0;
  v138.size.height = 1.0;
  v131.origin.x = v79;
  v131.origin.y = v80;
  v131.size.width = v81;
  v131.size.height = v82;
  v132 = CGRectIntersection(v131, v138);
  v83 = v132.origin.x;
  v84 = v132.origin.y;
  v85 = v132.size.width;
  v86 = v132.size.height;
  v132.origin.x = v79;
  v132.origin.y = v80;
  v132.size.width = v81;
  v132.size.height = v82;
  v139.origin.x = v83;
  v139.origin.y = v84;
  v139.size.width = v85;
  v139.size.height = v86;
  CGRectEqualToRect(v132, v139);
  v140.origin.x = 0.0;
  v140.origin.y = 0.0;
  v140.size.width = 1.0;
  v140.size.height = 1.0;
  v133.origin.x = v103;
  v133.origin.y = v101;
  v133.size.width = v100;
  v133.size.height = rect1;
  v134 = CGRectIntersection(v133, v140);
  v87 = v134.origin.x;
  v88 = v134.origin.y;
  v134.origin.x = v103;
  v89 = v134.size.width;
  v134.origin.y = v101;
  v90 = v134.size.height;
  v134.size.width = v100;
  v91 = v88;
  v134.size.height = rect1;
  v92 = v87;
  v141.origin.x = v87;
  v141.origin.y = v91;
  v141.size.width = v89;
  v141.size.height = v90;
  CGRectEqualToRect(v134, v141);
  v142.origin.x = v83;
  v142.origin.y = v84;
  v142.size.width = v85;
  v142.size.height = v86;
  if (!CGRectEqualToRect(v120, v142))
  {
    v135.origin.x = v83;
    v135.origin.y = v84;
    v135.size.width = v85;
    v135.size.height = v86;
    v93 = CGRectCreateDictionaryRepresentation(v135);
    if (v93)
      v23 = v93;
  }
  v136.origin.x = v103;
  v136.size.width = v100;
  v136.origin.y = v101;
  v136.size.height = rect1;
  v143.origin.x = v92;
  v143.origin.y = v91;
  v143.size.width = v89;
  v143.size.height = v90;
  if (!CGRectEqualToRect(v136, v143))
  {
    v137.origin.x = v92;
    v137.origin.y = v91;
    v137.size.width = v89;
    v137.size.height = v90;
    v94 = CGRectCreateDictionaryRepresentation(v137);
    if (v94)
      v78 = v94;
  }
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D08798], v23, 1u);
  if (!v78)
    goto LABEL_84;
LABEL_85:
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D087B8], v78, 1u);
  return v76;
}

void *_shortStringForFigCaptureSourceDeviceTypes(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  const __CFString *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", CFSTR(" "));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(a1);
        v7 = objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "intValue") - 1;
        v8 = CFSTR("?+");
        if (v7 <= 0xF)
          v8 = off_1E491FBF0[v7];
        objc_msgSend(v2, "appendString:", v8);
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v4);
  }
  objc_msgSend(v2, "deleteCharactersInRange:", objc_msgSend(v2, "length") - 1, 1);
  return v2;
}

void sub_1A2EA6688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  _Block_object_dispose(&a64, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Timestamp()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_TimestampSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_TimestampSymbolLoc_ptr;
  if (!getkCVAFaceTracking_TimestampSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_Timestamp");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_TimestampSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Timestamp_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Rotation()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_RotationSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_RotationSymbolLoc_ptr;
  if (!getkCVAFaceTracking_RotationSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_Rotation");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_RotationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Rotation_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Translation()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_TranslationSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_TranslationSymbolLoc_ptr;
  if (!getkCVAFaceTracking_TranslationSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_Translation");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_TranslationSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Translation_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Intrinsics()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr;
  if (!getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_Intrinsics");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Intrinsics_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

