@implementation BWFigVideoCaptureDevice

- (BOOL)sensorRawStillImageOutputsEnabled
{
  return self->_sensorRawStillImageOutputsEnabled;
}

- (BWFigVideoCaptureStream)pearlInfraredCaptureStream
{
  return self->_pearlInfraredCaptureStream;
}

- (int)maxStillImageCaptureBufferCountForHDRMode:(int)a3 digitalFlashMode:(int)a4 qualityPrioritization:(int)a5 clientBracketCount:(int)a6 bravoConstituentImageDeliveryDeviceTypes:(id)a7
{
  id v7;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSDictionary *ubCaptureParametersByPortType;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t i;
  id v24;
  int v25;
  int v26;
  int v29;
  int v30;
  int v32;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v7 = a7;
  v10 = a3;
  v40 = *MEMORY[0x1E0C80C00];
  if (a6 <= 1)
    v12 = 1;
  else
    v12 = a6;
  if (v12 <= 2)
    v13 = 2;
  else
    v13 = v12;
  if (self->_redEyeReductionEnabled)
    v12 = v13;
  if (v12 <= 3)
    v14 = 3;
  else
    v14 = v12;
  if (a3)
    v15 = v14;
  else
    v15 = v12;
  if (a5 >= 2)
  {
    if (v15 <= 4)
      v15 = 4;
    if (self->_unifiedBracketingMode)
    {
      v16 = v15 <= 5 ? 5 : v15;
      if (self->_hasDeepFusion && a5 > 2)
        v15 = v16;
    }
  }
  if (a4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    ubCaptureParametersByPortType = self->_ubCaptureParametersByPortType;
    v19 = -[NSDictionary countByEnumeratingWithState:objects:count:](ubCaptureParametersByPortType, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    if (v19)
    {
      v20 = v19;
      v21 = 0;
      v22 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v36 != v22)
            objc_enumerationMutation(ubCaptureParametersByPortType);
          v24 = -[NSDictionary objectForKeyedSubscript:](self->_ubCaptureParametersByPortType, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
          if (v21 <= (int)objc_msgSend(v24, "maxNumberOfFramesForAdaptiveBracketing"))
            v21 = objc_msgSend(v24, "maxNumberOfFramesForAdaptiveBracketing");
        }
        v20 = -[NSDictionary countByEnumeratingWithState:objects:count:](ubCaptureParametersByPortType, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      }
      while (v20);
    }
    else
    {
      v21 = 0;
    }
    v25 = v21 + 1;
    v10 = a3;
    v7 = a7;
  }
  else
  {
    v25 = 0;
  }
  if (self->_bravoConstituentPhotoDeliveryEnabled && (int)objc_msgSend(v7, "count") >= 1)
    v26 = objc_msgSend(v7, "count");
  else
    v26 = 1;
  if (self->_stereoFusionEnabled || self->_bravoConstituentPhotoDeliveryEnabled || self->_depthDataDeliveryEnabled)
  {
    if (v26 <= 2)
      v26 = 2;
  }
  else
  {
    if (v26 <= 2)
      v32 = 2;
    else
      v32 = v26;
    if (self->_stereoPhotoCaptureEnabled)
      v26 = v32;
  }
  if (a5 <= 1 && a6 <= 0 && v10 == 0)
    v29 = v15;
  else
    v29 = v15 + 1;
  v30 = v26 * v29;
  if (v30 <= v25)
    return v25;
  else
    return v30;
}

- (BWFigVideoCaptureDevice)supplementalPointCloudCaptureDevice
{
  return (BWFigVideoCaptureDevice *)-[FigWeakReference referencedObject](self->_supplementalPointCloudCaptureDevice, "referencedObject");
}

- (void)setAdaptiveUnifiedBracketingController:(id)a3
{
  self->_ubAdaptiveBracketingController = (BWAdaptiveBracketingController *)a3;
}

uint64_t __130__BWFigVideoCaptureDevice__serviceNondisruptiveSwitchingFormatForCaptureStream_frameStatistics_streamingImageIntent_isStationary___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 1832);
  return result;
}

uint64_t __72__BWFigVideoCaptureDevice__setAutofocusProcessorProperty_propertyValue___block_invoke(uint64_t a1)
{
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(const void **)(a1 + 48));
}

- (uint64_t)_createBWFigVideoCaptureStreamsForCaptureStreams:(void *)a3 attributeDictionaries:(void *)a4 cameraParameters:(uint64_t)a5 synchronizedStreamsGroup:(_OWORD *)a6 clientAuditToken:(uint64_t)a7 tccIdentity:(uint64_t)a8 mediaEnvironment:
{
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BWFigVideoCaptureStream *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  BWFigVideoCaptureStream *v23;
  BWFigVideoCaptureStream *v24;
  double v25;
  void *v31;
  _OWORD v32[2];
  unsigned int v33;

  if (result)
  {
    v10 = result;
    v33 = 0;
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a2, "count"));
    v31 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(a2, "count"));
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(a2, "count"));
    if (objc_msgSend(a2, "count"))
    {
      v13 = 0;
      while (1)
      {
        v14 = v11;
        v15 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", v13);
        v16 = objc_msgSend(v15, "portType");
        v17 = objc_msgSend(a3, "objectAtIndexedSubscript:", v13);
        v18 = objc_msgSend(a4, "sensorIDDictionaryForStream:", v15);
        v19 = [BWFigVideoCaptureStream alloc];
        v20 = *(_QWORD *)(v10 + 8);
        v21 = *(_QWORD *)(v10 + 80);
        v22 = a6[1];
        v32[0] = *a6;
        v32[1] = v22;
        v23 = -[BWFigVideoCaptureStream initWithCaptureStream:parentDevice:attributes:sensorIDDictionary:synchronizedStreamsGroup:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:error:](v19, "initWithCaptureStream:parentDevice:attributes:sensorIDDictionary:synchronizedStreamsGroup:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:error:", v15, v20, v17, v18, a5, v21, v32, a7, a8, &v33);
        v24 = v23;
        if (v33)
          break;
        -[BWFigVideoCaptureStream setDelegate:](v23, "setDelegate:", v10);
        objc_msgSend(v31, "setObject:forKeyedSubscript:", -[BWFigVideoCaptureStream moduleInfo](v24, "moduleInfo"), v16);
        objc_msgSend(v12, "setObject:forKeyedSubscript:", -[BWFigVideoCaptureStream sensorIDDictionary](v24, "sensorIDDictionary"), v16);
        *(_DWORD *)(v10 + 288) = 1077936128;
        *(_DWORD *)(v10 + 320) = 1056964608;
        -[BWFigVideoCaptureDevice _sendInitialValuesToPortraitEffectPropertiesDelegate:](v10, v24, v25);
        v11 = v14;
        objc_msgSend(v14, "addObject:", v24);

        if (objc_msgSend(a2, "count") <= (unint64_t)++v13)
          goto LABEL_6;
      }
      FigDebugAssert3();

      v11 = v14;
    }
    else
    {
LABEL_6:
      *(_QWORD *)(v10 + 96) = objc_msgSend(v31, "copy");
      *(_QWORD *)(v10 + 104) = objc_msgSend(v12, "copy");
      *(_QWORD *)(v10 + 560) = objc_msgSend(v11, "copy");
      *(_QWORD *)(v10 + 112) = objc_alloc_init(MEMORY[0x1E0C99E08]);
    }

    return v33;
  }
  return result;
}

uint64_t __70__BWFigVideoCaptureDevice__serviceAutoTorchNotification_sampleBuffer___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 1832);
  return result;
}

- (unsigned)sensorRawPixelFormat
{
  NSDictionary *v2;
  id v3;

  v2 = -[BWFigVideoCaptureDevice sensorRawPoolRequirements](self, "sensorRawPoolRequirements");
  if (v2)
  {
    v3 = -[NSDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9040]);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return objc_msgSend(v3, "intValue");
  }
  FigDebugAssert3();
  return 0;
}

- (NSArray)captureStreams
{
  return self->_captureStreams;
}

- (void)_captureStreamByPortType:(uint64_t)a1
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = *(void **)(a1 + 560);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
LABEL_4:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(v3);
    v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v7);
    if ((objc_msgSend((id)objc_msgSend(v8, "portType"), "isEqualToString:", a2) & 1) != 0)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_4;
      return 0;
    }
  }
}

- (uint64_t)_copyPortTypesFromStreams:(_DWORD *)a3 errOut:
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a2, "count"));
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v11;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v11 != v8)
            objc_enumerationMutation(a2);
          objc_msgSend(v5, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "portType"));
        }
        while (v7 != v9);
        v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v7);
    }
    *a3 = 0;
    return objc_msgSend(v5, "copy");
  }
  return result;
}

- (unint64_t)_ubDigitalFlashSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(float)a4 snr:(uint64_t)a5 sphereAvailable:(uint64_t)a6 fusionEnabled:(int)a7 sceneMonitoring:
{
  void *v11;
  void *v12;
  double v13;
  double v14;
  float v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  void *v34;
  double v35;
  double v36;
  float v37;

  if (!a1)
    return 0;
  v11 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
  v12 = (void *)objc_msgSend(*(id *)(a1 + 2008), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
  objc_msgSend(v11, "integrationTime");
  v14 = v13;
  objc_msgSend(v11, "gain");
  v16 = v14 * v15;
  v17 = 1.0;
  if (objc_msgSend(v11, "aeTarget") && objc_msgSend(v11, "aeAverage"))
  {
    v18 = (double)objc_msgSend(v11, "aeTarget");
    v17 = v18 / (double)objc_msgSend(v11, "aeAverage");
  }
  objc_msgSend(v11, "exposureBias");
  v20 = v16 * v17 / exp2(v19);
  if (a7)
  {
    v21 = *(double *)(a1 + 2200);
    if (v21 != 0.0 && v20 < v21 && fabs((v21 - v20) / ((v20 + v21) * 0.5)) < 0.2)
      v20 = *(double *)(a1 + 2200);
    *(double *)(a1 + 2200) = v20;
  }
  objc_msgSend(v12, "digitalFlashRecommendRegularFlashSNRThreshold");
  v23 = v22;
  objc_msgSend(v12, "digitalFlashBacklitRecommendRegularFlashSNRThreshold");
  v25 = v24;
  if (a7)
  {
    v26 = *(float *)(a1 + 2208);
    if (v26 != 0.0 && v26 < a4 && fabs((float)(v26 - a4) / ((float)(a4 + v26) * 0.5)) < 0.15)
      a4 = *(float *)(a1 + 2208);
    *(float *)(a1 + 2208) = a4;
  }
  objc_msgSend(v12, "digitalFlashAvailableEffectiveIntegrationTimeThreshold");
  v28 = v27;
  objc_msgSend(v12, "digitalFlashRecommendedEffectiveIntegrationTimeThreshold");
  if (v20 >= v29)
    v30 = ((unint64_t)(v20 >= v28) << 10) | 0x800;
  else
    v30 = (unint64_t)(v20 >= v28) << 10;
  if (a4 < v25 && objc_msgSend(v11, "aeFaceAverage"))
  {
    v31 = (float)objc_msgSend(v11, "aeFaceAverage");
    v32 = v31 - (float)objc_msgSend(v11, "aeAverage");
    v33 = v32 / (float)objc_msgSend(v11, "aeAverage");
    if (a7)
    {
      v34 = *(void **)(a1 + 2224);
      if (v34)
      {
        objc_msgSend(v34, "addDataPoint:", v33);
        objc_msgSend(*(id *)(a1 + 2224), "average");
        v33 = v35;
        v36 = *(double *)(a1 + 2216);
        if (v36 != 0.0 && fabs((v36 - v33) / ((v36 + v33) * 0.5)) < 0.1)
          v33 = v36;
        *(double *)(a1 + 2216) = v33;
      }
    }
    objc_msgSend(v12, "digitalFlashBacklitRecommendRegularFlashAERelativeDifferenceThreshold");
    if (v33 <= v37)
      v30 |= 0x20000uLL;
  }
  if (a4 < v23)
    v30 |= 0x8000uLL;
  return v30;
}

- (uint64_t)_ubStillImageSceneFlagsForCaptureStream:(void *)a3 frameStatisticsByPortType:(unsigned int)a4 fusionEnabled:(void *)a5 metadata:(int)a6 sceneMonitoring:(float)a7 zoomFactorOverride:
{
  uint64_t v11;
  void *v12;
  void *v13;
  float v14;
  float v15;
  double v16;
  double v17;
  float v18;
  float v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  char v33;
  float v34;
  _BOOL4 v35;
  void *v36;
  unsigned int v37;
  double v38;
  char v39;
  void *v40;
  double v42;
  int v43;
  void *v44;
  void *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  void *v54;
  float v55;
  float v56;
  double v57;
  _BOOL4 v58;
  double v59;
  float v60;
  float v61;
  _QWORD *v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  void *v69;
  void *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  void *v76;
  double v77;
  float v78;
  void *v79;
  double v80;
  float v81;
  uint64_t v82;
  int v84;
  void *v85;
  _BOOL4 v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  double v90;
  void *v91;
  float v92;
  float v93;
  float v94;
  int v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  char v100;
  unsigned int v101;
  _QWORD v104[2];
  float (*v105)(uint64_t, uint64_t);
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;

  if (result)
  {
    v11 = result;
    if ((unint64_t)objc_msgSend(a3, "frameCount") <= 3 && !*(_BYTE *)(v11 + 68))
      return 0;
    v12 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
    result = objc_msgSend(*(id *)(v11 + 2008), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
    if (result)
    {
      v13 = (void *)result;
      objc_msgSend(a2, "baseZoomFactor");
      v15 = v14;
      v100 = objc_msgSend(v12, "motionDataStatus");
      if ((v100 & 8) != 0)
        v101 = 0;
      else
        v101 = objc_msgSend(a2, "hasSphere");
      objc_msgSend(v12, "eit");
      v17 = v16;
      objc_msgSend(v12, "sifrGain");
      v19 = v18;
      if (*(_BYTE *)(v11 + 1460))
      {
        v20 = 272629760;
      }
      else if (-[BWFigVideoCaptureDevice _ubIsSuperWidePreferredOrCurrentPrimaryCaptureStreamInWideZoomRange](v11))
      {
        v20 = 0x10000000;
      }
      else
      {
        v20 = 0;
      }
      v109 = 0;
      -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:](v11, 0x1E4942018, (uint64_t)&v109);
      if (objc_msgSend(v109, "BOOLValue"))
        v20 |= 4uLL;

      if (objc_msgSend(v12, "hrEnabled"))
        v20 |= 0x80uLL;
      objc_msgSend(v13, "lowLightEffectiveIntegrationTimeThreshold");
      if (v17 <= v21)
        v22 = v20;
      else
        v22 = v20 | 8;
      if (v19 > 0.0)
      {
        objc_msgSend(v13, "sifrMainEffectiveIntegrationTimeThreshold");
        if (v17 <= v23 || (objc_msgSend(v13, "sifrGainThreshold"), v19 <= v24))
          v22 |= 2uLL;
      }
      v25 = objc_msgSend(v12, "ispDGain");
      objc_msgSend(v12, "ispDGainRangeExpansionFactor");
      v27 = v26;
      objc_msgSend(v13, "lowLightHDRWithoutSIFRISPDGainThreshold");
      if (v28 > 0.0)
      {
        objc_msgSend(v13, "lowLightHDRWithoutSIFRISPDGainThreshold");
        if ((float)((float)v25 / (float)(v27 * 256.0)) < v29)
          v22 |= 0x10000uLL;
      }
      if ((objc_msgSend(a2, "hasSphere") & 1) == 0)
      {
        objc_msgSend(v13, "longWithoutSphereEffectiveIntegrationTimeThreshold");
        if (v30 > 0.0)
        {
          objc_msgSend(v13, "longWithoutSphereEffectiveIntegrationTimeThreshold");
          if (v17 <= v31)
            v22 |= 0x200uLL;
        }
      }
      if (*(_BYTE *)(v11 + 2072) && *(_BYTE *)(v11 + 2073))
      {
        objc_msgSend(v13, "deepFusionEffectiveIntegrationTimeThreshold");
        if (v17 > v32 && ((v22 & 0xC) != 0 || !*(_BYTE *)(v11 + 2001)))
          v22 |= 0x1000uLL;
        v33 = 1;
      }
      else
      {
        v33 = 0;
      }
      if (*(_BYTE *)(v11 + 2056) && FigCaptureVideoDimensionsAreValid(*(_QWORD *)(v11 + 148)))
      {
        if (objc_msgSend(a2, "activeQuadraBinningFactor") == 1
          || (objc_msgSend((id)objc_msgSend(*(id *)(v11 + 2064), "objectForKeyedSubscript:", objc_msgSend(a2, "portType")), "intValue") & 0x80000000) != 0)
        {
          if (FigCaptureVideoDimensionsAreValid(*(_QWORD *)(v11 + 148))
            && FigCaptureVideoDimensionsAreEqual(objc_msgSend(*(id *)(v11 + 504), "sensorDimensions"), *(_QWORD *)(v11 + 148)))
          {
            v22 |= 0x200000uLL;
          }
          else if ((objc_msgSend(a2, "activeNondisruptiveSwitchingFormatIndex") & 0x80000000) == 0)
          {
            v36 = (void *)objc_msgSend((id)objc_msgSend(a2, "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(a2, "activeNondisruptiveSwitchingFormatIndex"));
            v37 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED0]), "intValue");
            if (FigCaptureVideoDimensionsAreEqual(v37 | (unint64_t)(objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC8]), "intValue") << 32), *(_QWORD *)(v11 + 148)))
            {
              v22 |= 0x200000uLL;
            }
          }
        }
        else
        {
          if ((v33 & 1) != 0)
          {
            v34 = v15 + v15;
            if (*(_BYTE *)(v11 + 88))
              v35 = a7 < (float)(v15 + v15);
            else
              v35 = a7 <= v15;
            if (v35)
              v22 |= 0x100000uLL;
          }
          else
          {
            v34 = v15 + v15;
          }
          if (a7 < v34)
            v22 |= 0x200000uLL;
          objc_msgSend(v13, "learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold");
          if (*(_BYTE *)(v11 + 2080))
          {
            objc_msgSend(v13, "learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold");
            if (v17 > v38)
              v22 |= 0x1000000uLL;
          }
        }
      }
      v39 = v33 ^ 1;
      if (!*(_BYTE *)(v11 + 217))
        v39 = 1;
      if ((v39 & 1) == 0)
      {
        v40 = (void *)objc_msgSend(a2, "portType");
        if (objc_msgSend(v40, "isEqualToString:", *MEMORY[0x1E0D05A18]))
        {
          if (a7 < (float)(v15 * 1.1) && v15 <= a7)
            v22 |= 0x80000uLL;
          if (*(_BYTE *)(v11 + 3204))
          {
            objc_msgSend(v12, "integrationTime");
            if (v42 > 0.00833333333)
              v22 |= 0x4000000uLL;
          }
          v43 = objc_msgSend(*(id *)(v11 + 568), "indexOfObject:", a2);
          if (v43 >= 1)
            v44 = (void *)objc_msgSend(*(id *)(v11 + 568), "objectAtIndexedSubscript:", (v43 - 1));
          else
            v44 = 0;
          v45 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v44, "portType"));
          objc_msgSend(v12, "normalizedSNR");
          v47 = v46;
          objc_msgSend(v45, "normalizedSNR");
          v49 = v48;
          if (a6 && objc_msgSend(*(id *)(v11 + 224), "count"))
          {
            v104[0] = MEMORY[0x1E0C809B0];
            v104[1] = 3221225472;
            v105 = __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke;
            v106 = &unk_1E49261F8;
            v107 = v11;
            v108 = a3;
            v47 = __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke((uint64_t)v104, objc_msgSend(a2, "portType"));
            v50 = objc_msgSend(v44, "portType");
            v49 = v105((uint64_t)v104, v50);
          }
          objc_msgSend(v13, "stereoPhotoSNRThreshold");
          if (v47 < v51
            || (objc_msgSend(v13, "stereoPhotoSNRDifferenceSecondarySNRThreshold"), v49 < v52)
            && (objc_msgSend(v13, "stereoPhotoSNRDifferenceThreshold"), vabds_f32(v47, v49) > v53))
          {
            v22 |= 0x8000000uLL;
          }
        }
      }
      if (*(_BYTE *)(v11 + 1472))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v11 + 4048));
        v54 = *(void **)(v11 + 4056);
        if (v54
          && (objc_msgSend(v54, "fudgedLowerBound"), a7 >= v55)
          && (objc_msgSend(*(id *)(v11 + 4056), "fudgedUpperBound"), v56 >= a7))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4048));
          v22 |= 0x800000uLL;
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 4048));
        }
      }
      if (*(_BYTE *)(v11 + 1996))
      {
        objc_msgSend(v13, "redSaturationMainEffectiveIntegrationTimeThreshold");
        v58 = v17 <= v57;
        if (*(_BYTE *)(v11 + 1999))
        {
          v59 = v57;
          objc_msgSend(v13, "redSaturationSIFRGainThreshold");
          if (v60 != 0.0)
          {
            v58 = v19 > 0.0;
            if (v19 > 0.0 && v17 > v59)
            {
              objc_msgSend(v13, "redSaturationSIFRGainThreshold");
              v58 = v19 <= v61;
            }
          }
        }
        if (v58)
          v22 |= 0x100uLL;
      }
      if (*(_BYTE *)(v11 + 3080))
        v22 |= 0x2000uLL;
      if (!*(_BYTE *)(v11 + 1988))
      {
        v65 = 0;
        v66 = 0.0;
        goto LABEL_136;
      }
      v62 = (_QWORD *)MEMORY[0x1E0D05A28];
      if (*(_QWORD *)(v11 + 2320))
      {
        objc_msgSend((id)objc_msgSend(*(id *)(v11 + 2008), "objectForKeyedSubscript:", *MEMORY[0x1E0D05A28]), "autoFlashMacroNormalizedSNRThreshold");
        v64 = v63;
      }
      else
      {
        v64 = NAN;
      }
      if (*(_BYTE *)(v11 + 2082))
      {
        objc_msgSend(v13, "autoFlashColorConstancyNormalizedSNRThreshold");
        objc_msgSend(v13, "autoFlashColorConstancyNormalizedSNRThreshold");
        v68 = v67;
        v69 = v12;
      }
      else
      {
        v70 = (void *)objc_msgSend(*(id *)(v11 + 2304), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
        v69 = v12;
        if (!v70)
        {
          v70 = (void *)objc_msgSend(*(id *)(v11 + 2304), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v11 + 504), "portType"));
          v69 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(*(id *)(v11 + 504), "portType"));
        }
        objc_msgSend(v70, "floatValue");
        v68 = v71;
        if (a4)
        {
          if (v101)
          {
            fvcd_estimateOISOutputImageSNR(v69);
            v66 = v72;
            v65 = 3;
          }
          else
          {
            objc_msgSend(v69, "normalizedSNR");
            v66 = v99 + 4.7712;
            v65 = 2;
          }
          goto LABEL_114;
        }
      }
      objc_msgSend(v69, "normalizedSNR");
      v66 = v73;
      v65 = 1;
LABEL_114:
      objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *v62), "normalizedQsumSNR");
      v75 = v74;
      if (a6)
      {
        v76 = *(void **)(v11 + 2320);
        if (v76)
        {
          objc_msgSend(v76, "addDataPoint:", v66);
          objc_msgSend(*(id *)(v11 + 2320), "average");
          v66 = v77;
          v78 = *(float *)(v11 + 2316);
          if (v78 != 0.0 && fabsf((float)(v78 - v66) / (float)((float)(v78 + v66) * 0.5)) < 0.2)
            v66 = *(float *)(v11 + 2316);
          *(float *)(v11 + 2316) = v66;
        }
        v79 = *(void **)(v11 + 2336);
        if (v79)
        {
          objc_msgSend(v79, "addDataPoint:", v75);
          objc_msgSend(*(id *)(v11 + 2336), "average");
          v75 = v80;
          v81 = *(float *)(v11 + 2328);
          if (v81 != 0.0 && fabsf((float)(v81 - v75) / (float)((float)(v81 + v75) * 0.5)) < 0.2)
            v75 = *(float *)(v11 + 2328);
          *(float *)(v11 + 2328) = v75;
        }
      }
      if (v75 >= v64)
        v82 = v22;
      else
        v82 = v22 | 0x20000000;
      if ((v22 & 0x10000000) == 0)
        v82 = v22;
      if ((v82 & 0x20000000) != 0 || v66 < v68)
        v22 = v82 | 0x20;
      else
        v22 = v82;
LABEL_136:
      if (!*(_BYTE *)(v11 + 2152) || !*(_BYTE *)(v11 + 2153) && !*(_BYTE *)(v11 + 1498))
        goto LABEL_163;
      if (!objc_msgSend(*(id *)(v11 + 2168), "containsObject:", objc_msgSend(a2, "portType")))
        goto LABEL_160;
      v84 = 0;
      if (!*(_QWORD *)(v11 + 2280) || (v22 & 0x800000) == 0)
        goto LABEL_156;
      v85 = (void *)objc_msgSend(a2, "portType");
      if (objc_msgSend(v85, "isEqualToString:", *MEMORY[0x1E0D05A18]))
        v86 = a7 < (float)(v15 * 1.1) && v15 <= a7;
      else
        v86 = 0;
      if (*(_BYTE *)(v11 + 1499) && *(_QWORD *)(v11 + 2280))
      {
        v87 = objc_msgSend((id)v11, "shallowDepthOfFieldEffectStatus");
        if (!v86)
        {
          v84 = 0;
          if (v87 > 0xE || ((1 << v87) & 0x6202) == 0)
            goto LABEL_156;
LABEL_160:
          v22 |= 0x4000uLL;
          goto LABEL_163;
        }
      }
      else if (!v86)
      {
        goto LABEL_160;
      }
      v84 = 1;
LABEL_156:
      if (*(_BYTE *)(v11 + 2180))
      {
        v88 = *(void **)(v11 + 504);
        if (v88 != a2)
        {
          if ((v100 & 8) != 0)
          {
            v89 = 0;
          }
          else
          {
            v89 = objc_msgSend(*(id *)(v11 + 504), "hasSphere");
            v88 = *(void **)(v11 + 504);
          }
          v22 |= -[BWFigVideoCaptureDevice _ubDigitalFlashSceneFlagsForCaptureStream:frameStatisticsByPortType:snr:sphereAvailable:fusionEnabled:sceneMonitoring:](v11, v88, a3, NAN, v89, a4, a6);
          if ((v84 & 1) == 0)
            goto LABEL_163;
          goto LABEL_162;
        }
      }
      v22 |= -[BWFigVideoCaptureDevice _ubDigitalFlashSceneFlagsForCaptureStream:frameStatisticsByPortType:snr:sphereAvailable:fusionEnabled:sceneMonitoring:](v11, a2, a3, v66, v101, a4, a6);
      if (v84)
LABEL_162:
        v22 |= 0x2000000uLL;
LABEL_163:
      objc_msgSend(a5, "setSnrType:", v65);
      *(float *)&v90 = v66;
      objc_msgSend(a5, "setSnr:", v90);
      if (*(_BYTE *)(v11 + 1989))
      {
        if (*(_DWORD *)(v11 + 1992) == 1)
        {
          v91 = (void *)objc_msgSend(a2, "portType");
          if (objc_msgSend(v91, "isEqualToString:", *MEMORY[0x1E0D05A18]))
          {
            objc_msgSend(v13, "nightModeMinGainThreshold");
            if (v92 <= 0.0)
            {
              v95 = objc_msgSend(v12, "aeLimitsReached");
            }
            else
            {
              v93 = v92;
              objc_msgSend(v12, "gain");
              v95 = v94 >= v93;
            }
            if (v95)
              v22 |= 0x10uLL;
          }
        }
      }
      objc_msgSend(v12, "exposureBias");
      if (v96 >= 0.0)
        v97 = v22;
      else
        v97 = v22 | 0x40;
      if (v96 <= 0.0)
        v98 = v97;
      else
        v98 = v22 | 0x40;
      if (objc_msgSend(v12, "aeLocked"))
        return v98 | 0x40000;
      else
        return v98;
    }
  }
  return result;
}

- (uint64_t)_copyAutofocusProcessorProperty:(uint64_t)a3 propertyValueOut:
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = *(NSObject **)(a1 + 1584);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __76__BWFigVideoCaptureDevice__copyAutofocusProcessorProperty_propertyValueOut___block_invoke;
  v6[3] = &unk_1E4925D80;
  v6[4] = a1;
  v6[5] = &v7;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

- (void)_serviceNondisruptiveSwitchingFormatWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  int v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  NSObject *v32;
  unsigned int v33;
  unsigned int v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id obj;
  void *v40;
  char v42;
  void *v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  os_log_type_t type;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  int v56;
  const char *v57;
  __int16 v58;
  void *v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v40 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v43 = (void *)objc_msgSend(v40, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]);
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  obj = *(id *)(a1 + 560);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_17;
  }
  v8 = v7;
  v9 = 0;
  v10 = *(_QWORD *)v52;
  v11 = *MEMORY[0x1E0D06CC0];
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v52 != v10)
        objc_enumerationMutation(obj);
      v13 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * i);
      -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:](a1, v13, objc_msgSend(a4, "objectForKeyedSubscript:", objc_msgSend(v13, "portType")), a5, *(unsigned __int8 *)(a1 + 3080));
      v14 = objc_msgSend(v13, "activeNondisruptiveSwitchingCommandID");
      if (v13 == a3)
      {
        v15 = v40;
      }
      else
      {
        v15 = (void *)objc_msgSend(v43, "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
        if (!v15)
        {
          v16 = objc_msgSend(v13, "completedNondisruptiveSwitchingCommandID");
          goto LABEL_12;
        }
      }
      v16 = objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v11), "intValue");
LABEL_12:
      v17 = v16;
      if ((int)v16 > v14)
      {
        FigDebugAssert3();
        v50 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        goto LABEL_49;
      }
      objc_msgSend(v13, "setCompletedNondisruptiveSwitchingCommandID:", v16);
      v9 |= v17 < v14;
    }
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  }
  while (v8);
LABEL_17:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
  v18 = (*(_BYTE *)(a1 + 1294) == 0) | v9;
  *(_BYTE *)(a1 + 1294) = v9 & 1;
  if ((v9 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 2600) && !*(_BYTE *)(a1 + 2601))
      *(_BYTE *)(a1 + 2601) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1288));
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1288));
    if ((v18 & 1) != 0)
      return;
  }
  v42 = v18;
  v19 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v20 = *(void **)(a1 + 560);
  v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
  if (!v21)
    goto LABEL_35;
  v22 = v21;
  v23 = *(_QWORD *)v46;
  v24 = *MEMORY[0x1E0D06CC0];
  while (2)
  {
    v25 = 0;
    while (2)
    {
      if (*(_QWORD *)v46 != v23)
        objc_enumerationMutation(v20);
      v26 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v25);
      if (v26 == a3)
      {
        v27 = v40;
      }
      else
      {
        v27 = (void *)objc_msgSend(v43, "objectForKeyedSubscript:", objc_msgSend(*(id *)(*((_QWORD *)&v45 + 1) + 8 * v25), "portType"));
        if (!v27)
        {
          v28 = objc_msgSend(v26, "completedNondisruptiveSwitchingCommandID");
          goto LABEL_33;
        }
      }
      v28 = objc_msgSend((id)objc_msgSend(v27, "objectForKeyedSubscript:", v24), "intValue");
LABEL_33:
      v29 = v28;
      v30 = (void *)objc_msgSend(v26, "portType");
      objc_msgSend(v19, "appendFormat:", CFSTR("%@: Metadata ID:%d, active ID:%d."), BWPortTypeToDisplayString(v30, v31), v29, objc_msgSend(v26, "activeNondisruptiveSwitchingCommandID"));
      if (v22 != ++v25)
        continue;
      break;
    }
    v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    if (v22)
      continue;
    break;
  }
LABEL_35:
  if ((v42 & 1) != 0)
  {
    if (dword_1ECFE9470)
    {
      v50 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v33 = v50;
      if (os_log_type_enabled(v32, type))
        v34 = v33;
      else
        v34 = v33 & 0xFFFFFFFE;
      if (v34)
        goto LABEL_47;
      goto LABEL_49;
    }
  }
  else if (dword_1ECFE9470)
  {
    v50 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v36 = v50;
    if (os_log_type_enabled(v35, type))
      v37 = v36;
    else
      v37 = v36 & 0xFFFFFFFE;
    if (v37)
    {
LABEL_47:
      v56 = 136315394;
      v57 = "-[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatWithSampleBuffer:fromCaptureStream:frameStatis"
            "ticsByPortType:streamingImageIntent:]";
      v58 = 2112;
      v59 = v19;
      _os_log_send_and_compose_impl();
    }
LABEL_49:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

- (uint64_t)_updateSlaveFrameRateForZoomFactor:(float)a3 masterCaptureStream:
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  _BOOL4 v16;
  float v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v23;
  float v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  unsigned int v51;
  uint64_t v52;
  float v53;
  int v54;
  int v55;
  float v56;
  id *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  void *v67;
  void *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  id obj;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v5 = result;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v83 = objc_msgSend(*(id *)(v5 + 568), "indexOfObject:", a2);
  v85 = (void *)objc_msgSend(*(id *)(v5 + 1320), "slaveStreamBlockingFocusAndExposureStability");
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  obj = *(id *)(v5 + 560);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v95, 16);
  if (!v7)
  {
    v9 = 0;
    goto LABEL_97;
  }
  v8 = v7;
  v9 = 0;
  v10 = *(_QWORD *)v91;
  v81 = *MEMORY[0x1E0D05A18];
  v82 = *MEMORY[0x1E0D077C0];
  do
  {
    v11 = 0;
    do
    {
      if (*(_QWORD *)v91 != v10)
        objc_enumerationMutation(obj);
      v12 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * v11);
      if (v12 == a2)
      {
        v18 = objc_msgSend(a2, "portType");
        v19 = v6;
        v20 = &unk_1E49FB7F0;
        goto LABEL_85;
      }
      v13 = *(_DWORD *)(v5 + 1384);
      v14 = objc_msgSend(*(id *)(v5 + 568), "indexOfObject:", *(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * v11));
      if (*(_BYTE *)(v5 + 1472))
      {
        v15 = *(void **)(v5 + 1464);
        v16 = v15 ? v12 == v15 : v14 + 1 == v83;
        if (v16 && !*(_BYTE *)(v5 + 3640))
        {
          if (*(float *)(v5 + 1476) == 0.0)
          {
            v13 = 0x7FFFFFFF;
          }
          else
          {
            objc_msgSend(a2, "maximumFrameRate");
            v13 = vcvtps_s32_f32(v17 / *(float *)(v5 + 1476));
          }
        }
      }
      if (*(_BYTE *)(v5 + 1412) && v13 != 1 && *(float *)(v5 + 1372) <= a3 && *(float *)(v5 + 1376) >= a3)
        v13 = 1;
      if (v13 != 1 && *(_BYTE *)(v5 + 1449) != 0)
        v13 = 1;
      if (*(_BYTE *)(v5 + 3640) && !*(_BYTE *)(v5 + 3652) && v13 != 1 && *(_BYTE *)(v5 + 3849) == 0)
        v13 = 1;
      if ((objc_msgSend(v12, "firmwareTimeMachineEnabledWhenConfiguredAsSlave") & (v13 != 1)) != 0)
        v23 = 1;
      else
        v23 = v13;
      objc_msgSend(v12, "streamingFrameRateForZoomPIPOverlay");
      if (v24 == 0.0)
      {
        if ((objc_msgSend(v12, "streamingRequiredWhenConfiguredAsSlave") & ((_DWORD)v23 != 1)) != 0)
          v23 = 1;
        else
          v23 = v23;
      }
      else
      {
        objc_msgSend(*(id *)(v5 + 2744), "appliedZoomFactorWithoutFudge");
        if (*(void **)(v5 + 576) == a2
          && (v26 = *(float *)&v25,
              v27 = *(float *)(v5 + 4032),
              objc_msgSend((id)objc_msgSend(v12, "portType"), "isEqualToString:", v81))
          && (*(float *)&v25 = v26 * v27, (float)(v26 * v27) >= *(float *)(v5 + 4028))
          && *(int *)(v5 + 3828) <= 2
          && !*(_BYTE *)(v5 + 4036))
        {
          objc_msgSend(v12, "streamingFrameRateForZoomPIPOverlay", v25);
          v50 = v49;
          objc_msgSend(a2, "maximumFrameRate");
          *(float *)&v25 = *(float *)&v25 / v50;
          if ((int)v23 >= (int)*(float *)&v25)
            v51 = (int)*(float *)&v25;
          else
            v51 = v23;
          if ((_DWORD)v23)
            v23 = v51;
          else
            v23 = (int)*(float *)&v25;
          v28 = 1;
        }
        else
        {
          v28 = 0;
        }
        objc_msgSend(v12, "setStreamingRequiredWhenConfiguredAsSlave:", v28, v25);
      }
      v29 = objc_msgSend(v12, "streamingRequiredWhenConfiguredAsSlave");
      if (v12 == (void *)objc_msgSend(*(id *)(v5 + 552), "cameraControlsStatisticsMasterStream") && (_DWORD)v23 != 1)
      {
        if (!(_DWORD)v23)
          goto LABEL_56;
        objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
        v31 = 1.0;
        if (floorf(v30 / 30.0) > 1.0)
        {
          objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
          v31 = floorf(v32 / 30.0);
        }
        v33 = (float)(int)v23;
        if (v31 <= (float)(int)v23)
        {
LABEL_56:
          objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
          v35 = floorf(v34 / 30.0);
          v33 = 1.0;
          if (v35 > 1.0)
          {
            objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
            v33 = floorf(v36 / 30.0);
          }
        }
        v23 = (int)v33;
      }
      if (v12 != v85)
      {
LABEL_60:
        v37 = 0;
        goto LABEL_65;
      }
      if (*(_BYTE *)(v5 + 610))
      {
        v37 = 1;
      }
      else
      {
        if (!*(_BYTE *)(v5 + 611))
          goto LABEL_60;
        v37 = objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v81);
      }
LABEL_65:
      if (*(_BYTE *)(v5 + 3640) && !*(_BYTE *)(v5 + 3849))
        v37 = 0;
      if (v37 && (_DWORD)v23 != 1)
      {
        if (!(_DWORD)v23)
          goto LABEL_74;
        objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
        v39 = 1.0;
        if (floorf(v38 / 30.0) > 1.0)
        {
          objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
          v39 = floorf(v40 / 30.0);
        }
        v41 = (float)(int)v23;
        if (v39 <= (float)(int)v23)
        {
LABEL_74:
          objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
          v43 = floorf(v42 / 30.0);
          v41 = 1.0;
          if (v43 > 1.0)
          {
            objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
            v41 = floorf(v44 / 30.0);
          }
        }
        v23 = (int)v41;
      }
      if (v12 == *(void **)(v5 + 1464)
        && (_DWORD)v23 != 1
        && objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "stream"), "getPropertyIfSupported:error:", v82, 0), "BOOLValue"))
      {
        if (!(_DWORD)v23
          || (v45 = (float)(int)v23, objc_msgSend(*(id *)(v5 + 504), "minimumFrameRate"), v46 <= (float)(int)v23))
        {
          objc_msgSend(*(id *)(v5 + 504), "minimumFrameRate");
          v45 = v47;
        }
        v23 = (int)v45;
      }
      v9 += v29;
      v48 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v23);
      v18 = objc_msgSend(v12, "portType");
      v19 = v6;
      v20 = (void *)v48;
LABEL_85:
      objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, v18);
      ++v11;
    }
    while (v8 != v11);
    v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v95, 16);
    v8 = v52;
  }
  while (v52);
LABEL_97:
  if (!v85 || *(_BYTE *)(v5 + 610) || *(_BYTE *)(v5 + 611))
    goto LABEL_116;
  if (v9 < *(_DWORD *)(v5 + 1328))
  {
    ++v9;
    v53 = 30.0;
    goto LABEL_106;
  }
  v53 = 30.0;
  if ((objc_msgSend(v85, "streamingRequiredWhenConfiguredAsSlave") & 1) != 0)
  {
LABEL_106:
    v55 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v85, "portType")), "intValue");
    if (v55)
    {
      v56 = (float)v55;
      v57 = (id *)(v5 + 504);
      objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
      v59 = floorf(v58 / v53);
      v60 = 1.0;
      if (v59 > 1.0)
      {
        objc_msgSend(*v57, "maximumFrameRate");
        v60 = floorf(v61 / v53);
      }
      if (v60 > v56)
        goto LABEL_115;
      objc_msgSend(*v57, "maximumFrameRate");
      v56 = 1.0;
      if (floorf(v62 / v53) <= 1.0)
        goto LABEL_115;
    }
    else
    {
      objc_msgSend(*(id *)(v5 + 504), "maximumFrameRate");
      v56 = 1.0;
      if (floorf(v63 / v53) <= 1.0)
      {
LABEL_115:
        objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)v56), objc_msgSend(v85, "portType"));
        goto LABEL_116;
      }
      v57 = (id *)(v5 + 504);
    }
    objc_msgSend(*v57, "maximumFrameRate");
    v56 = floorf(v64 / v53);
    goto LABEL_115;
  }
  if (*(_BYTE *)(v5 + 612))
  {
    v54 = *(_DWORD *)(v5 + 1404);
    if (v54)
    {
      v53 = (float)v54;
      goto LABEL_106;
    }
  }
LABEL_116:
  if (v9 >= *(_DWORD *)(v5 + 1328) && !*(_BYTE *)(v5 + 612) || *(_DWORD *)(v5 + 1384) == *(_DWORD *)(v5 + 1392))
    goto LABEL_139;
  objc_msgSend(a2, "baseZoomFactor");
  v66 = v65;
  v67 = (void *)v83;
  if (v83 >= objc_msgSend(*(id *)(v5 + 568), "count") - 1)
  {
    v68 = 0;
    if (!v83)
      goto LABEL_125;
LABEL_123:
    if (v83 < objc_msgSend(*(id *)(v5 + 568), "count"))
    {
      v67 = (void *)objc_msgSend(*(id *)(v5 + 568), "objectAtIndexedSubscript:", v83 - 1);
      goto LABEL_125;
    }
    v67 = 0;
    if (!v68)
      goto LABEL_128;
LABEL_126:
    objc_msgSend(v68, "baseZoomFactor");
    v70 = v69;
    v71 = v66;
LABEL_130:
    v72 = v66 + (float)((float)(v70 - v71) * 0.5);
    goto LABEL_131;
  }
  v68 = (void *)objc_msgSend(*(id *)(v5 + 568), "objectAtIndexedSubscript:", v83 + 1);
  if (v83)
    goto LABEL_123;
LABEL_125:
  if (v68)
    goto LABEL_126;
LABEL_128:
  if (v67)
  {
    objc_msgSend(v67, "baseZoomFactor");
    v70 = v66;
    goto LABEL_130;
  }
  v72 = 0.0;
LABEL_131:
  if (v72 > a3)
    v68 = v67;
  if (v68)
  {
    if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v68, "portType")), "intValue"))
    {
      v73 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v68, "portType")), "intValue");
      v74 = *(unsigned int *)(v5 + 1392);
      if (v73 < (int)v74)
        v74 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v68, "portType")), "intValue");
    }
    else
    {
      v74 = *(unsigned int *)(v5 + 1392);
    }
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v74), objc_msgSend(v68, "portType"));
  }
LABEL_139:
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v75 = *(void **)(v5 + 560);
  result = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v86, v94, 16);
  if (result)
  {
    v76 = result;
    v77 = *(_QWORD *)v87;
    do
    {
      v78 = 0;
      do
      {
        if (*(_QWORD *)v87 != v77)
          objc_enumerationMutation(v75);
        v79 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * v78);
        v80 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", objc_msgSend(v79, "portType"));
        if (v80)
          objc_msgSend(v79, "setMasterToSlaveFrameRateRatio:", objc_msgSend(v80, "intValue"));
        ++v78;
      }
      while (v76 != v78);
      result = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v86, v94, 16);
      v76 = result;
    }
    while (result);
  }
  return result;
}

- (int)depthDataBaseRotation
{
  if (self->_pearlInfraredCaptureStream)
    return 90;
  else
    return 0;
}

- (id)cameraInfoByPortType
{
  return -[BWFigVideoCaptureDevice cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:](self, "cameraInfoByPortTypeIncludingLSCGains:includeFocusPixelMap:includeDefectivePixelTable:", 0, 0, 0);
}

- (NSArray)activePortTypes
{
  return self->_activePortTypes;
}

- (BOOL)variableFrameRateControlEnabled
{
  return BYTE3(self->_previewShiftInSensorSpace.x);
}

- (int)position
{
  return self->_position;
}

- (void)setAttachesUprightExifOrientationMetadataToStreamingFrames:(BOOL)a3
{
  BYTE4(self->_zoomFactorChangedDelegatePortType) = a3;
}

- (int)depthType
{
  return self->_depthType;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 2736) == 1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 2720), "removeAllObjects");
    result = objc_msgSend(*(id *)(*(_QWORD *)(v2 + 32) + 2728), "removeAllObjects");
    *(_DWORD *)(*(_QWORD *)(v2 + 32) + 2736) = 0;
  }
  return result;
}

- (void)_configureZoomFudging
{
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  float v6;
  void *v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  float v21;
  float v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v42;
  double v43;
  int v44;
  float v45;
  int v46;
  int v47;
  double v48;
  int v49;
  int v50;
  BWZoomRange *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  uint64_t v70;
  _QWORD v71[3];

  v71[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v64 = (void *)objc_msgSend(*(id *)(a1 + 552), "clientBaseZoomFactorsByPortType");
    if (objc_msgSend(v64, "count")
      || (v57 = *MEMORY[0x1E0D05A28],
          (v58 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, *MEMORY[0x1E0D05A28])) == 0)
      || (v59 = v58,
          objc_msgSend(v58, "baseZoomFactorAfterGDC"),
          v61 = v60,
          objc_msgSend(v59, "baseZoomFactor"),
          v61 == v62))
    {
      v2 = objc_msgSend(v64, "count");
    }
    else
    {
      v70 = v57;
      v71[0] = &unk_1E4A02F40;
      v64 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v71, &v70, 1);
      v2 = objc_msgSend(v64, "count");
    }
    if (!v2)
      goto LABEL_36;
    v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (objc_msgSend(*(id *)(a1 + 568), "count"))
    {
      v5 = 0;
      v63 = *MEMORY[0x1E0D05A40];
      v6 = 0.0;
      do
      {
        v7 = (void *)objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v5, v63);
        v8 = (void *)objc_msgSend(v7, "portType");
        if (objc_msgSend(v64, "objectForKeyedSubscript:", v8) && (objc_msgSend(v8, "isEqualToString:", v63) & 1) == 0)
        {
          objc_msgSend((id)objc_msgSend(v64, "objectForKeyedSubscript:", v8), "floatValue");
          v10 = v9;
          if (v9 == 0.0)
          {
            objc_msgSend(v7, "baseZoomFactor");
            v10 = v11;
          }
          objc_msgSend(v7, "baseZoomFactorAfterGDC");
          v13 = v12;
          *(float *)&v14 = v10;
          objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14));
          *(float *)&v15 = v13;
          objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15));
          v6 = v10 + v10;
          v16 = (void *)objc_msgSend(v7, "nondisruptiveSwitchingZoomFactors");
          v65 = 0u;
          v66 = 0u;
          v67 = 0u;
          v68 = 0u;
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v66;
            do
            {
              for (i = 0; i != v18; ++i)
              {
                if (*(_QWORD *)v66 != v19)
                  objc_enumerationMutation(v16);
                objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * i), "floatValue");
                if (v21 > v13)
                {
                  v22 = v21;
                  if (objc_msgSend(*(id *)(a1 + 568), "count") > v5 + 1)
                  {
                    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v5 + 1), "baseZoomFactorAfterGDC");
                    if (*(float *)&v23 <= v22)
                      goto LABEL_22;
                  }
                  *(float *)&v23 = (float)(v10 * v22) / v13;
                  objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v23));
                  *(float *)&v24 = v22;
                  objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v24));
                  v6 = (float)((float)(v10 * v22) / v13) + (float)((float)(v10 * v22) / v13);
                }
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v65, v69, 16);
            }
            while (v18);
          }
        }
LABEL_22:
        ++v5;
      }
      while (objc_msgSend(*(id *)(a1 + 568), "count") > v5);
      if (v6 != 0.0)
      {
        *(float *)&v25 = v6;
        objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25));
        *(float *)&v26 = v6;
        objc_msgSend(v4, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v26));
      }
    }
    if ((unint64_t)objc_msgSend(v3, "count") >= 2)
    {
      v27 = objc_msgSend(v3, "count") - 1;
      v28 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v27);
      if (v27)
      {
        v29 = 0;
        do
        {
          v30 = v29;
          objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", v29), "floatValue");
          v32 = v31;
          objc_msgSend((id)objc_msgSend(v3, "objectAtIndexedSubscript:", ++v29), "floatValue");
          v34 = v33;
          objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v30), "floatValue");
          v36 = v35;
          objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", v29), "floatValue");
          if (v32 != v36 || v34 != *(float *)&v37)
          {
            LODWORD(v40) = LODWORD(v37);
            *(float *)&v37 = v32;
            *(float *)&v38 = v34;
            *(float *)&v39 = v36;
            v42 = +[BWZoomRange fudgedZoomRangeWithLower:upperBound:fudgedLowerBound:fudgedUpperBound:](BWZoomRange, "fudgedZoomRangeWithLower:upperBound:fudgedLowerBound:fudgedUpperBound:", v37, v38, v39, v40);
            if (v42)
              objc_msgSend(v28, "addObject:", v42);
          }
        }
        while (v29 != v27);
      }
    }
    else
    {
LABEL_36:
      v28 = 0;
    }
    objc_msgSend(*(id *)(a1 + 2744), "setFudgedZoomRanges:", v28);
    if (!*(_BYTE *)(a1 + 1472)
      || (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("VideoZoomFactorsForDepthDataDelivery")), "firstObject"), "floatValue"), *(float *)&v43 == 0.0))
    {
      v56 = 0;
    }
    else
    {
      v44 = LODWORD(v43);
      if (*(float *)(a1 + 4040) == 0.0)
        v45 = INFINITY;
      else
        v45 = *(float *)(a1 + 4040);
      objc_msgSend(*(id *)(a1 + 2744), "applyFudgeToZoomFactor:", v43);
      v47 = v46;
      *(float *)&v48 = v45;
      objc_msgSend(*(id *)(a1 + 2744), "applyFudgeToZoomFactor:", v48);
      v50 = v49;
      v51 = [BWZoomRange alloc];
      LODWORD(v52) = v44;
      *(float *)&v53 = v45;
      LODWORD(v54) = v47;
      LODWORD(v55) = v50;
      v56 = -[BWZoomRange initWithLowerBound:upperBound:fudgedLowerBound:fudgedUpperBound:](v51, "initWithLowerBound:upperBound:fudgedLowerBound:fudgedUpperBound:", v52, v53, v54, v55);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4048));

    *(_QWORD *)(a1 + 4056) = v56;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4048));
  }
}

- (BWZoomCommandHandler)zoomCommandHandler
{
  return (BWZoomCommandHandler *)self->_whiteBalanceGainsOrderedKeys;
}

- (void)_serviceNondisruptiveSwitchingFormatForCaptureStream:(uint64_t)a3 frameStatistics:(int)a4 streamingImageIntent:(uint64_t)a5 isStationary:
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  NSObject *v27;
  void *v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  _BOOL4 v34;
  void *v35;
  float v36;
  float v37;
  void *v38;
  float v39;
  double v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  _BOOL4 v46;
  int v47;
  _BOOL4 v48;
  double v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  float v54;
  float v55;
  uint64_t v56;
  _QWORD block[6];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;

  if (a1)
  {
    v58 = 0;
    v59 = &v58;
    v60 = 0x2020000000;
    v61 = 0;
    if (!objc_msgSend(a2, "zoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned")
      && !objc_msgSend(a2, "zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned"))
    {
LABEL_58:
      _Block_object_dispose(&v58, 8);
      return;
    }
    objc_msgSend(a2, "baseZoomFactorAfterGDC");
    v11 = v10;
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    if (v11 <= v12)
      objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    else
      objc_msgSend(a2, "baseZoomFactorAfterGDC");
    v14 = v13;
    if (*(_BYTE *)(a1 + 4273))
    {
      objc_msgSend(*(id *)(a1 + 2744), "earlySwitchOverScaleFactorForZoomIn");
      if (v15 != 1.0)
      {
        objc_msgSend(a2, "baseZoomFactorAfterGDC");
        v17 = v16;
        objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
        v19 = v18;
        objc_msgSend(*(id *)(a1 + 2744), "earlySwitchOverScaleFactorForZoomIn");
        if (v17 <= (float)(v19 / v20))
        {
          objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
          v23 = v22;
          objc_msgSend(*(id *)(a1 + 2744), "earlySwitchOverScaleFactorForZoomIn");
          v14 = v23 / v24;
        }
        else
        {
          objc_msgSend(a2, "baseZoomFactorAfterGDC");
          v14 = v21;
        }
        objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
        if (v14 >= v25)
        {
          objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
          v14 = v26;
        }
      }
    }
    v27 = *(NSObject **)(a1 + 1584);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __130__BWFigVideoCaptureDevice__serviceNondisruptiveSwitchingFormatForCaptureStream_frameStatistics_streamingImageIntent_isStationary___block_invoke;
    block[3] = &unk_1E491E9A8;
    block[4] = a1;
    block[5] = &v58;
    dispatch_sync(v27, block);
    v28 = (void *)objc_msgSend((id)a1, "masterCaptureStream");
    v29 = *((_DWORD *)v59 + 6);
    objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
    if (v30 == 0.0)
    {
      v34 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
      v32 = v31;
      objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor");
      v34 = v32 < v33;
    }
    if (FigCapturePlatformIdentifier() != 9 || !*(_BYTE *)(a1 + 1472) || v28 == a2)
    {
      if (*(_BYTE *)(a1 + 2464))
      {
        if (v29 != 2
          && !*(_BYTE *)(a1 + 3640)
          && !*(_BYTE *)(a1 + 1472)
          && (objc_msgSend(a2, "streamingRequiredWhenConfiguredAsSlave") & 1) == 0)
        {
          v35 = (void *)objc_msgSend(a2, "portType");
          if (objc_msgSend(v35, "isEqual:", *MEMORY[0x1E0D05A18]))
          {
            if (v34)
            {
              objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
              if (v36 < *(float *)(a1 + 2796))
              {
                objc_msgSend(a2, "baseZoomFactorAfterGDC");
                v14 = v37;
                *(_DWORD *)(a1 + 2472) = 0;
LABEL_34:
                objc_msgSend(a2, "baseZoomFactorAfterGDC");
                if (v14 == *(float *)&v40)
                {
LABEL_39:
                  if (objc_msgSend((id)a1, "ultraHighResolutionZeroShutterLagEnabled"))
                  {
                    if (*(_BYTE *)(a1 + 3207))
                    {
                      v45 = objc_msgSend((id)a1, "systemPressureLevel");
                      v46 = v45 < 2;
                      *(_BYTE *)(a1 + 3208) = v45 > 1;
                    }
                    else
                    {
                      v46 = 1;
                    }
                  }
                  else
                  {
                    v46 = 0;
                  }
                  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
                  v47 = *(unsigned __int8 *)(a1 + 2600);
                  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1288));
                  v48 = -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureUseSecondaryStream:primaryStream:](a1, (uint64_t)a2);
                  if (*(_BYTE *)(a1 + 1999))
                  {
                    if (*(_BYTE *)(a1 + 1449))
                      v50 = 1;
                    else
                      v50 = v48;
                  }
                  else
                  {
                    v50 = 0;
                  }
                  if (*(_BYTE *)(a1 + 1499))
                    v50 &= objc_msgSend(a2, "streamingRequiredWhenConfiguredAsSlave");
                  if (*(_BYTE *)(a1 + 4091))
                    v51 = v46 | v50 ^ 1u;
                  else
                    v51 = 0;
                  if (a4 == 1)
                    v52 = 1;
                  else
                    v52 = 2 * (a4 == 2);
                  LOBYTE(v56) = v46;
                  *(float *)&v49 = v14;
                  objc_msgSend(a2, "serviceNondisruptiveSwitchingFormatForZoomFactor:frameStatistics:imageControlMode:stillImageDigitalFlashMode:isStationary:binnedSIFROnSecondaryStreamAllowed:ignoreZoomFactorAndQuadraSubPixelSceneMonitoring:ultraHighResolutionZeroShutterLagEnabled:", a3, *((unsigned int *)v59 + 6), v52, a5, v51, v47 != 0, v49, v56);
                  goto LABEL_58;
                }
                LODWORD(v40) = 0;
                objc_msgSend(*(id *)(a1 + 2744), "predictRampZoomFactorAfterNumberOfFrames:settingZoomFactorOfInterest:", 4, v40);
                v42 = v41;
                if (v41 != 0.0)
                {
                  objc_msgSend(a2, "baseZoomFactorAfterGDC");
                  v14 = v42;
                  if (v43 > v42)
                  {
                    objc_msgSend(a2, "baseZoomFactorAfterGDC");
                    v14 = v44;
                  }
                }
LABEL_38:
                *(_DWORD *)(a1 + 2472) = 0;
                goto LABEL_39;
              }
            }
            if (*(_QWORD *)(a1 + 576))
            {
              v53 = (void *)objc_msgSend(v28, "portType");
              if (!objc_msgSend(v53, "isEqual:", *MEMORY[0x1E0D05A30]))
              {
                if (!v34)
                  goto LABEL_38;
                if (*(_DWORD *)(a1 + 2472))
                {
                  objc_msgSend(a2, "baseZoomFactorAfterGDC");
                  v14 = v55;
                  --*(_DWORD *)(a1 + 2472);
                }
                goto LABEL_34;
              }
              objc_msgSend(a2, "baseZoomFactorAfterGDC");
              v14 = v54;
              *(_DWORD *)(a1 + 2472) = *(_DWORD *)(a1 + 2468);
            }
LABEL_33:
            if (!v34)
              goto LABEL_38;
            goto LABEL_34;
          }
        }
      }
      v38 = (void *)objc_msgSend(a2, "portType");
      if (!objc_msgSend(v38, "isEqual:", *MEMORY[0x1E0D05A28])
        || !objc_msgSend((id)a1, "isBravoVariant"))
      {
        goto LABEL_33;
      }
      if (v28 == a2)
      {
        if (!*(_BYTE *)(a1 + 3640))
        {
          if ((objc_msgSend(*(id *)(a1 + 1432), "isRamping") & 1) != 0)
            goto LABEL_32;
          if (!*(_BYTE *)(a1 + 3640))
            goto LABEL_33;
        }
        if (*(_BYTE *)(a1 + 3696))
          goto LABEL_33;
      }
    }
LABEL_32:
    objc_msgSend(a2, "baseZoomFactorAfterGDC");
    v14 = v39;
    goto LABEL_33;
  }
}

- (BWFigVideoCaptureStream)masterCaptureStream
{
  os_unfair_lock_s *p_currentMasterCaptureStreamLock;
  BWFigVideoCaptureStream *currentMasterCaptureStream;

  p_currentMasterCaptureStreamLock = &self->_currentMasterCaptureStreamLock;
  os_unfair_lock_lock(&self->_currentMasterCaptureStreamLock);
  currentMasterCaptureStream = self->_currentMasterCaptureStream;
  os_unfair_lock_unlock(p_currentMasterCaptureStreamLock);
  return currentMasterCaptureStream;
}

- (BWFigVideoCaptureStream)bravoTelephotoCaptureStream
{
  return self->_bravoTelephotoCaptureStream;
}

- (BOOL)overCaptureEnabled
{
  return self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
}

- (BOOL)optimizesZoomRampsForVISZoomSmoothing
{
  return BYTE1(self->_lastSphereMode);
}

- (void)setISPZoomFactor:(float)a3 totalZoomFactor:(float)a4
{
  float *p_maxISPZoomFactor;
  NSObject *v8;
  _QWORD block[5];

  p_maxISPZoomFactor = &self->_maxISPZoomFactor;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  *((float *)&self->_zoomCommandHandler + 1) = a3;
  *((float *)&self->_zoomFactorUpdateQueue + 1) = a4;
  os_unfair_lock_unlock((os_unfair_lock_t)p_maxISPZoomFactor);
  v8 = *(NSObject **)&self->_whiteBalanceModeForExif;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __60__BWFigVideoCaptureDevice_setISPZoomFactor_totalZoomFactor___block_invoke;
  block[3] = &unk_1E491E720;
  block[4] = self;
  dispatch_async(v8, block);
}

- (OpaqueCMClock)clock
{
  return self->_clock;
}

- (BOOL)supportsWideColor
{
  return objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", CFSTR("WideColor")), "BOOLValue");
}

- (int)videoStabilizationStrength
{
  return HIDWORD(self->_defaultContinuousAutoFocusWindowSize.height);
}

- (BOOL)stereoVideoCaptureEnabled
{
  return self->_stereoVideoCaptureEnabled;
}

void __76__BWFigVideoCaptureDevice__postNotificationWithPayload_notificationPayload___block_invoke()
{
  void *v0;

  v0 = (void *)MEMORY[0x1A858DD40]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  objc_autoreleasePoolPop(v0);
}

- (uint64_t)_setupStillImageCaptureStateMachine
{
  uint64_t v1;
  uint64_t v2;
  FigStateMachine *v3;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 2552))
    {
      v3 = 0;
    }
    else
    {
      if (*(_BYTE *)(result + 2057))
        v2 = 1;
      else
        v2 = 2;
      v3 = -[FigStateMachine initWithLabel:stateCount:initialState:owner:]([FigStateMachine alloc], "initWithLabel:stateCount:initialState:owner:", CFSTR("Still Image State Machine"), 4, v2, result);
      -[FigStateMachine setPerformsAtomicStateTransitions:](v3, "setPerformsAtomicStateTransitions:", 0);
      -[FigStateMachine setLabel:forState:](v3, "setLabel:forState:", CFSTR("WaitingForValidFrameStatistics"), 1);
      -[FigStateMachine setLabel:forState:](v3, "setLabel:forState:", CFSTR("Idle"), 2);
      -[FigStateMachine setLabel:forState:](v3, "setLabel:forState:", CFSTR("Pending"), 4);
      -[FigStateMachine setLabel:forState:](v3, "setLabel:forState:", CFSTR("InProgress"), 8);
      -[FigStateMachine whenTransitioningFromState:toState:callHandler:](v3, "whenTransitioningFromState:toState:callHandler:", 4, 8, &__block_literal_global_343);
      -[FigStateMachine whenTransitioningFromState:toState:callHandler:](v3, "whenTransitioningFromState:toState:callHandler:", 1, 2, &__block_literal_global_344);
      -[FigStateMachine whenTransitioningFromState:toState:callHandler:](v3, "whenTransitioningFromState:toState:callHandler:", 8, 2, &__block_literal_global_345);
      result = -[FigStateMachine whenTransitioningFromState:toState:callHandler:](v3, "whenTransitioningFromState:toState:callHandler:", 2, 8, &__block_literal_global_346);
    }
    *(_QWORD *)(v1 + 2552) = v3;
  }
  return result;
}

- (void)setRedEyeReductionEnabled:(BOOL)a3
{
  self->_redEyeReductionEnabled = a3;
}

- (BOOL)depthDataDeliveryEnabled
{
  return self->_depthDataDeliveryEnabled;
}

- (BOOL)softISPEnabled
{
  return self->_softISPEnabled;
}

- (BOOL)redEyeReductionEnabled
{
  return self->_redEyeReductionEnabled;
}

- (BWFigVideoCaptureStream)captureStream
{
  return self->_captureStream;
}

- (void)setPortraitEffectStudioLightQuality:(int64_t)a3
{
  BWFigVideoCaptureDevice **v4;
  void *v5;

  if (self)
  {
    v4 = (BWFigVideoCaptureDevice **)self;
    v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v5)
    {
      self = (BWFigVideoCaptureDevice *)objc_msgSend(v5, "referencedObject");
    }
    else if (objc_msgSend(v4, "isBravoVariant"))
    {
      self = (BWFigVideoCaptureDevice *)objc_msgSend(v4, "masterCaptureStream");
    }
    else
    {
      self = v4[63];
    }
  }
  -[BWFigVideoCaptureDevice didChangePortraitEffectStudioLightQuality:](self, "didChangePortraitEffectStudioLightQuality:", a3);
}

- (void)captureStream:(id)a3 willEmitVideoSampleBuffer:(opaqueCMSampleBuffer *)a4 drivesCameraControls:(BOOL)a5
{
  _BOOL4 v5;
  void *v9;
  FigWeakReference *manualCinematicFramingDelegate;
  float v11;
  float v12;
  double v13;
  uint64_t v14;
  void *v15;
  $95D729B680665BEAEFA1D6FCA8238556 *p_mostRecentPTS;
  $95D729B680665BEAEFA1D6FCA8238556 *v17;
  CMTime v18;
  CMTime time1;
  CMTime v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v5 = a5;
  v22[2] = *MEMORY[0x1E0C80C00];
  -[BWFigVideoCaptureDevice _addStateInvariantAttachmentsToVideoSamplebuffer:captureStream:]((uint64_t)self, a4);
  if (v5)
  {
    -[BWFigVideoCaptureDevice _serviceAutoImageControlModeWithSampleBuffer:fromCaptureStream:]((uint64_t)self, a4);
    v9 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    manualCinematicFramingDelegate = self->_manualCinematicFramingDelegate;
    if (manualCinematicFramingDelegate)
    {
      if (-[FigWeakReference containsObject:](manualCinematicFramingDelegate, "containsObject:", objc_msgSend(a3, "portType")))
      {
        objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E08]), "floatValue");
        v12 = roundf(v11 * 10.0) / 10.0;
        objc_msgSend((id)objc_msgSend(*(id *)&self->_manualCinematicFramingActive, "objectForKeyedSubscript:", objc_msgSend(a3, "portType")), "floatValue");
        if (v12 != *(float *)&v13)
        {
          *(float *)&v13 = v12;
          v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13);
          objc_msgSend(*(id *)&self->_manualCinematicFramingActive, "setObject:forKeyedSubscript:", v14, objc_msgSend(a3, "portType"));
          v21[0] = CFSTR("PortType");
          v21[1] = CFSTR("NewPropertyValue");
          v22[0] = objc_msgSend(a3, "portType");
          v22[1] = v14;
          -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("ImageSensorTemperatureChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 2));
        }
      }
    }
    v15 = (void *)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]);
    if (!v15 || objc_msgSend(v15, "BOOLValue"))
    {
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&v20, a4);
      if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
      {
        os_unfair_lock_lock(&self->_bravoMasterLock);
        p_mostRecentPTS = &self->_mostRecentPTS;
        if ((self->_mostRecentPTS.flags & 1) == 0
          || (time1 = v20,
              *(_OWORD *)&v18.value = *(_OWORD *)&p_mostRecentPTS->value,
              v18.epoch = self->_mostRecentPTS.epoch,
              CMTimeCompare(&time1, &v18) >= 1))
        {
          *(_OWORD *)&p_mostRecentPTS->value = *(_OWORD *)&v20.value;
          self->_mostRecentPTS.epoch = v20.epoch;
          -[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]((uint64_t)self, a4, a3);
        }
        os_unfair_lock_unlock(&self->_bravoMasterLock);
      }
      else
      {
        v17 = &self->_mostRecentPTS;
        if ((self->_mostRecentPTS.flags & 1) == 0
          || (time1 = v20,
              *(_OWORD *)&v18.value = *(_OWORD *)&v17->value,
              v18.epoch = self->_mostRecentPTS.epoch,
              CMTimeCompare(&time1, &v18) >= 1))
        {
          *(_OWORD *)&v17->value = *(_OWORD *)&v20.value;
          self->_mostRecentPTS.epoch = v20.epoch;
        }
        -[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]((uint64_t)self, a4, a3);
      }
    }
  }
  -[BWFigVideoCaptureDevice _addStateAttachmentsToVideoSampleBuffer:captureStream:]((uint64_t)self, a4);
}

- (void)_serviceAutoImageControlModeWithSampleBuffer:(uint64_t)a1 fromCaptureStream:(void *)target
{
  void *v4;
  void *v5;
  int v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (**v23)(_QWORD, _QWORD, _QWORD);
  CMTime v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    v5 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]);
    v6 = objc_msgSend(v5, "BOOLValue");
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (!v7)
    {
      if (*(_BYTE *)(a1 + 1836))
      {
        v8 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58]);
        if ((objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D07A30]) & 1) == 0)
        {
          v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v29 = 0u;
          v30 = 0u;
          v31 = 0u;
          v32 = 0u;
          v10 = *(void **)(a1 + 560);
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v30;
            do
            {
              for (i = 0; i != v12; ++i)
              {
                if (*(_QWORD *)v30 != v13)
                  objc_enumerationMutation(v10);
                v15 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
                objc_msgSend(v15, "setSphereVideoEnabled:", 1);
                objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(v15, "currentSphereMode"), objc_msgSend(v15, "portType"));
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
            }
            while (v12);
          }
          *(_BYTE *)(a1 + 1836) = 0;
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1848));
          objc_msgSend(*(id *)(a1 + 1856), "setExpectedSphereModesByPortType:", v9);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1848));
        }
      }
    }
    if (objc_msgSend((id)a1, "isBravoVariant"))
      v16 = (void *)objc_msgSend((id)a1, "masterCaptureStream");
    else
      v16 = *(void **)(a1 + 504);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1848));
    if (!*(_QWORD *)(a1 + 1856))
      goto LABEL_32;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v17 = *(void **)(a1 + 560);
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    if (v18)
    {
      v19 = v18;
      v20 = *(_QWORD *)v26;
LABEL_22:
      v21 = 0;
      while (1)
      {
        if (*(_QWORD *)v26 != v20)
          objc_enumerationMutation(v17);
        v22 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v21);
        if ((objc_msgSend(v22, "streamingRequiredWhenConfiguredAsSlave") & 1) != 0)
          break;
        if (v19 == ++v21)
        {
          v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          if (v19)
            goto LABEL_22;
          goto LABEL_28;
        }
      }
    }
    else
    {
LABEL_28:
      v22 = 0;
    }
    if ((objc_msgSend(*(id *)(a1 + 1856), "isTransitionCompleteWithSampleBuffer:masterCaptureStreamPortType:activeSlaveStreamPortType:", target, objc_msgSend(v16, "portType"), objc_msgSend(v22, "portType")) & 1) != 0)
    {
      v23 = *(void (***)(_QWORD, _QWORD, _QWORD))(a1 + 1864);
      *(_QWORD *)(a1 + 1864) = 0;

      *(_QWORD *)(a1 + 1856) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1848));
      if (v23)
      {
        CMSampleBufferGetPresentationTimeStamp(&v24, (CMSampleBufferRef)target);
        ((void (**)(_QWORD, uint64_t, CMTime *))v23)[2](v23, 1, &v24);

      }
    }
    else
    {
LABEL_32:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1848));
    }
  }
}

- (BOOL)isBravoVariant
{
  return (self->_deviceType < 0xAu) & (0x310u >> self->_deviceType);
}

- (void)_addStateInvariantAttachmentsToVideoSamplebuffer:(uint64_t)a1 captureStream:(const void *)a2
{
  if (a1)
  {
    if ((-[BWFigVideoCaptureDevice _addExifMetadata:fromTimeMachine:](a1, a2, 0),
          CMSetAttachment(a2, CFSTR("CaptureDeviceType"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 492)), 1u), *(_BYTE *)(a1 + 1472))&& *(float *)(a1 + 1476) == 0.0|| *(_BYTE *)(a1 + 4044))
    {
      CMSetAttachment(a2, CFSTR("DepthDisabled"), MEMORY[0x1E0C9AAB0], 1u);
    }
  }
}

- (void)_addStateAttachmentsToVideoSampleBuffer:(uint64_t)a1 captureStream:(void *)a2
{
  void *v4;
  _BYTE *v5;
  _BOOL4 v6;
  _BOOL8 v7;

  if (a1)
  {
    v4 = *(void **)(a1 + 3704);
    if (v4)
      objc_msgSend(v4, "addAttachmentsToSamplebuffer:", a2);
    -[BWFigVideoCaptureDevice _addSystemPressureAttachments:](a1, a2);
    if (*(_BYTE *)(a1 + 3164))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3172));
      CMSetAttachment(a2, CFSTR("UprightExifOrientation"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 3168)), 1u);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3172));
    }
    if (*(_BYTE *)(a1 + 2266))
      CMSetAttachment(a2, CFSTR("BWBurnAfterReading"), MEMORY[0x1E0C9AAB0], 0);
    v5 = (_BYTE *)(a1 + 4160);
    if (objc_msgSend(*(id *)(a1 + 504), "sphereEnabled"))
      v6 = *(_BYTE *)(a1 + 3640) != 0;
    else
      v6 = 0;
    if (*(_BYTE *)(a1 + 1529) && *(_QWORD *)(a1 + 1536))
      -[BWFigVideoCaptureDevice _addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:]((os_unfair_lock_s *)a1, a2);
    if (*v5)
    {
      v7 = 1;
    }
    else if (objc_msgSend(*(id *)(a1 + 2552), "currentState") == 4
           || objc_msgSend(*(id *)(a1 + 2552), "currentState") == 8)
    {
      v7 = 1;
      *v5 = 1;
    }
    else
    {
      v7 = *v5 != 0;
    }
    CMSetAttachment(a2, CFSTR("CaptureInitiatedOnce"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v7), 1u);
    if (v6)
      -[BWFigVideoCaptureDevice _addStationaryFlagToMetadata:]((_QWORD *)a1, a2);
    if (*(_BYTE *)(a1 + 2412) || (*(_BYTE *)(a1 + 2400) & 1) != 0)
      -[BWFigVideoCaptureDevice _addDropFrameWaitingForTorchToRampUpKey:](a1, a2);
    if (*(_BYTE *)(a1 + 4198))
    {
      if (*(_BYTE *)(a1 + 4199))
        CMSetAttachment(a2, CFSTR("TrueVideoTransitionLargeSphereTravelDetected"), MEMORY[0x1E0C9AAB0], 1u);
    }
  }
}

- (void)_addSystemPressureAttachments:(uint64_t)a1
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v4 = (os_unfair_lock_s *)(a1 + 3824);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
    v5 = *(unsigned int *)(a1 + 3828);
    v6 = *(unsigned int *)(a1 + 3832);
    v7 = *(unsigned int *)(a1 + 3844);
    if (*(_BYTE *)(a1 + 3849))
    {
      if (*(int *)(a1 + 3852) > 0)
        v8 = 2;
      else
        v8 = 3;
      os_unfair_lock_unlock(v4);
      CMSetAttachment(a2, CFSTR("OverCaptureSlaveStreamStatus"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8), 1u);
    }
    else
    {
      os_unfair_lock_unlock(v4);
    }
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D088E8], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5), 1u);
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D088F0], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v7), 1u);
    CMSetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D088F8], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6), 1u);
  }
}

- (void)_addExifMetadata:(char)a3 fromTimeMachine:
{
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  const void *v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  float v35;
  void *v36;
  float v37;
  void *v38;
  float v39;
  CMAttachmentBearerRef targeta;
  void *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[5];
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD block[8];
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[128];
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    v7 = v6;
    if ((a3 & 1) == 0)
    {
      v63 = 0;
      v64 = &v63;
      v65 = 0x2020000000;
      v66 = 0;
      if (!v6)
      {
        FigDebugAssert3();
        _Block_object_dispose(&v63, 8);
        return;
      }
      if (objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06840]), "BOOLValue"))
      {
        v8 = objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C68]);
        v62 = 0;
        v60 = 0;
        v61 = 0;
        v55 = 0;
        v56 = &v55;
        v57 = 0x3052000000;
        v58 = __Block_byref_object_copy__36;
        v59 = __Block_byref_object_dispose__36;
        v9 = *(NSObject **)(a1 + 2712);
        v10 = MEMORY[0x1E0C809B0];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke;
        block[3] = &unk_1E4926168;
        block[4] = a1;
        block[5] = v8;
        block[6] = &v63;
        block[7] = &v55;
        dispatch_sync(v9, block);
        objc_msgSend((id)v56[5], "getValue:", &v61);
        if (v61 | v62 || *((_DWORD *)v64 + 6) == 1)
        {
          v11 = *(NSObject **)(a1 + 2712);
          v53[0] = v10;
          v53[1] = 3221225472;
          v53[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_2;
          v53[3] = &unk_1E491E720;
          v53[4] = a1;
          v12 = v53;
        }
        else
        {
          v11 = *(NSObject **)(a1 + 2712);
          v52[0] = v10;
          v52[1] = 3221225472;
          v52[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_3;
          v52[3] = &unk_1E491E720;
          v52[4] = a1;
          v12 = v52;
        }
        dispatch_sync(v11, v12);
        _Block_object_dispose(&v55, 8);
      }
      else
      {
        v13 = *(NSObject **)(a1 + 2712);
        v51[0] = MEMORY[0x1E0C809B0];
        v51[1] = 3221225472;
        v51[2] = __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_4;
        v51[3] = &unk_1E491E720;
        v51[4] = a1;
        dispatch_sync(v13, v51);
      }
      objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 2736)), CFSTR("ExifWhiteBalance"));
      _Block_object_dispose(&v63, 8);
    }
    v42 = a1;
    targeta = target;
    v41 = (void *)objc_msgSend((id)CMGetAttachment(target, CFSTR("BWStillImageCaptureSettings"), 0), "metadata");
    if ((unint64_t)objc_msgSend(*(id *)(a1 + 560), "count") >= 2)
    {
      v14 = objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v15 = *(void **)(a1 + 560);
      v16 = 0;
      v17 = 0;
      v18 = objc_msgSend(*(id *)(v42 + 560), "countByEnumeratingWithState:objects:count:", &v47, v68, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v48;
        v20 = *MEMORY[0x1E0D05A40];
        do
        {
          for (i = 0; i != v18; ++i)
          {
            if (*(_QWORD *)v48 != v19)
              objc_enumerationMutation(v15);
            v22 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            v23 = (void *)objc_msgSend(v22, "portType");
            if ((objc_msgSend(v23, "isEqualToString:", v14) & 1) == 0
              && (objc_msgSend(v23, "isEqualToString:", v20) & 1) == 0)
            {
              if (v16)
              {
                if (!v17)
LABEL_23:
                  v17 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              }
              else
              {
                v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                if (!v17)
                  goto LABEL_23;
              }
              v24 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v22, "focalLength");
              objc_msgSend(v16, "addObject:", objc_msgSend(v24, "numberWithFloat:"));
              v25 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v22, "lensFNumber");
              objc_msgSend(v17, "addObject:", objc_msgSend(v25, "numberWithFloat:"));
              continue;
            }
          }
          v18 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v47, v68, 16);
        }
        while (v18);
      }
      CMSetAttachment(targeta, CFSTR("ExifSlaveFocalLengths"), v16, 1u);
      CMSetAttachment(targeta, CFSTR("ExifSlaveLensFNumbers"), v17, 1u);
      if (!objc_msgSend(v41, "deviceType"))
      {
        objc_msgSend(v41, "setSlaveFocalLengths:", v16);
        objc_msgSend(v41, "setSlaveLensFNumbers:", v17);
      }
    }
    if (!objc_msgSend(v41, "deviceType"))
    {
      objc_msgSend(v41, "setDeviceType:", *(unsigned int *)(v42 + 492));
      objc_msgSend(v41, "setDevicePosition:", *(unsigned int *)(v42 + 520));
      objc_msgSend((id)CMGetAttachment(targeta, CFSTR("TotalZoomFactor"), 0), "floatValue");
      objc_msgSend(v41, "setTotalZoomFactor:");
      objc_msgSend((id)CMGetAttachment(targeta, CFSTR("UIZoomFactor"), 0), "floatValue");
      objc_msgSend(v41, "setUiZoomFactor:");
      v29 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v30 = *(void **)(v42 + 560);
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v43, v67, 16);
      if (v31)
      {
        v32 = *(_QWORD *)v44;
        do
        {
          for (j = 0; j != v31; ++j)
          {
            if (*(_QWORD *)v44 != v32)
              objc_enumerationMutation(v30);
            v34 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * j);
            objc_msgSend(v34, "exifFocalLengthMultiplier");
            if (v35 != 0.0)
            {
              v36 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v34, "exifFocalLengthMultiplier");
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v36, "numberWithFloat:"), objc_msgSend(v34, "portType"));
            }
          }
          v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v43, v67, 16);
        }
        while (v31);
      }
      objc_msgSend(v41, "setExifFocalLengthMultiplierByPortType:", v29);
      objc_msgSend(v41, "totalZoomFactor");
      if (v37 != 0.0)
      {
        v38 = *(void **)(v42 + 2744);
        objc_msgSend(v41, "totalZoomFactor");
        objc_msgSend(v38, "removeFudgeFromZoomFactor:");
        if (-[BWFigVideoCaptureDevice _exifFocalLengthOverrideForZoomFactor:](v42, v39) != 0.0)
          objc_msgSend(v41, "setExifFocalLengthOverride:");
      }
    }
    v26 = v42;
    v27 = *(const void **)(v42 + 536);
    if (v27)
    {
      CMSetAttachment(targeta, CFSTR("CameraManufacturer"), v27, 1u);
      v26 = v42;
    }
    v28 = *(const void **)(v26 + 544);
    if (v28)
      CMSetAttachment(targeta, CFSTR("CameraNonLocalizedName"), v28, 1u);
  }
}

- (_QWORD)_addStationaryFlagToMetadata:(_QWORD *)result
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  if (result)
  {
    v2 = result;
    result = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (result)
    {
      v3 = result;
      result = (_QWORD *)v2[384];
      if (result)
      {
        v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(result, "isStationary"));
        return (_QWORD *)objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0D06110]);
      }
    }
  }
  return result;
}

- (uint64_t)_setSynchronizedStreamsGroupProperty:(uint64_t)a3 value:
{
  uint64_t v5;
  void *v6;

  if (result)
  {
    v5 = result;
    if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 552), "syncGroup"), "supportedProperties"), "objectForKeyedSubscript:", a2))
    {
      v6 = (void *)objc_msgSend(*(id *)(v5 + 552), "syncGroup");
    }
    else
    {
      v6 = (void *)objc_msgSend(*(id *)(v5 + 504), "stream");
    }
    return objc_msgSend(v6, "setProperty:value:", a2, a3);
  }
  return result;
}

void __59__BWFigVideoCaptureDevice_performBlockOnNotificationQueue___block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

- (void)setThermalSystemPressureLevel:(int)a3
{
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(self->_flickerAvoidanceMonitor) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setSystemPressureLevel:(int)a3
{
  BOOL *p_videoStabilizationModeUsesReducedOverscan;
  NSMutableDictionary *v6;
  uint64_t v7;

  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  if (*(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) != a3)
  {
    if (a3 < 3)
    {
      LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque) = 0;
      if (self->_needsToRelieveSystemPressure)
        BYTE1(self->_thermalSystemPressureLevel) = 0;
    }
    else
    {
      LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque) = 1;
      if (self->_timeOfLastSystemPressureChange == -1)
      {
        mach_absolute_time();
        self->_timeOfLastSystemPressureChange = FigHostTimeToNanoseconds() / 0xF4240uLL;
      }
    }
    v6 = (NSMutableDictionary *)mach_absolute_time();
    v7 = *(int *)(&self->_adaptiveOverscanEnabled + 3);
    self->_previousInfraredFramePTS.epoch += FigHostTimeToNanoseconds() / 0xF4240uLL * v7;
    self->_sensorTemperatureStatsByPortType = v6;
    if (SLODWORD(self->_accumulatedSystemPressureLevel) < a3)
    {
      LODWORD(self->_accumulatedSystemPressureLevel) = a3;
      self->_maxSystemPressureLevel = self->_systemPressureLevel;
    }
    *(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) = a3;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setSystemPressureFactors:(unsigned int)a3
{
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  self->_systemPressureLevel = a3;
  if (*(_DWORD *)(&self->_adaptiveOverscanEnabled + 3) == LODWORD(self->_accumulatedSystemPressureLevel))
    self->_maxSystemPressureLevel |= a3;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (void)setPeakPowerSystemPressureLevel:(int)a3
{
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  HIDWORD(self->_flickerAvoidanceMonitor) = a3;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- ($2825F4736939C4A6D3AD43837233062D)ultraHighResSensorRawPoolDimensions
{
  return ($2825F4736939C4A6D3AD43837233062D)self->_ultraHighResSensorRawPoolDimensions;
}

- (float)maxContinuousZoomFactorForDepthDataDelivery
{
  return *(float *)&self->_depthFilteringEnabled;
}

void __60__BWFigVideoCaptureDevice_setISPZoomFactor_totalZoomFactor___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _setNewISPZoomFactorOnStream](*(_QWORD *)(a1 + 32));
}

- (void)sendCalibrationDataToISP
{
  id v3;
  id v4;
  id v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = -[FigCaptureCalibrationMonitor autoFocusPositionSensorCalibrationData](+[FigCaptureCalibrationMonitor sharedInstance](FigCaptureCalibrationMonitor, "sharedInstance"), "autoFocusPositionSensorCalibrationData");
  if ((int)FigCapturePlatformIdentifier() < 6)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v4 = -[FigCaptureCalibrationMonitor autoFocusCalibrationData](+[FigCaptureCalibrationMonitor sharedInstance](FigCaptureCalibrationMonitor, "sharedInstance"), "autoFocusCalibrationData");
    v5 = -[FigCaptureCalibrationMonitor apsSphereInteractionCalibrationData](+[FigCaptureCalibrationMonitor sharedInstance](FigCaptureCalibrationMonitor, "sharedInstance"), "apsSphereInteractionCalibrationData");
  }
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v19;
    v17 = *MEMORY[0x1E0D073B0];
    v16 = *MEMORY[0x1E0D07390];
    v10 = *MEMORY[0x1E0D073D0];
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v19 != v9)
          objc_enumerationMutation(captureStreams);
        v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        if ((objc_msgSend((id)objc_msgSend(v12, "stream", v16), "calibrationDataSent") & 1) == 0)
        {
          v13 = objc_msgSend(v3, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v13)
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v17, v13);
          v14 = objc_msgSend(v4, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v14)
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v16, v14);
          v15 = objc_msgSend(v5, "objectForKeyedSubscript:", objc_msgSend(v12, "nonLocalizedName"));
          if (v15)
            objc_msgSend((id)objc_msgSend(v12, "stream"), "setProperty:value:", v10, v15);
          objc_msgSend((id)objc_msgSend(v12, "stream"), "setCalibrationDataSent:", 1);
        }
      }
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v8);
  }
}

- (void)_setNewISPZoomFactorOnStream
{
  void *v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  double v8;
  float v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 504), "stream"), "supportedProperties");
    v3 = *MEMORY[0x1E0D078E8];
    if (objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D078E8]))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2776));
      v4 = *(float *)(a1 + 2764);
      v5 = *(float *)(a1 + 2760);
      v6 = *(float *)(a1 + 2768);
      v7 = *(float *)(a1 + 2772);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2776));
      -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((_BYTE *)a1, v7);
      v9 = 1.0;
      if (!*(_BYTE *)(a1 + 3640) && !*(_BYTE *)(a1 + 217))
      {
        if (*(_BYTE *)(a1 + 1472))
        {
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1488), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)a1, "masterCaptureStream"), "portType")), "floatValue");
          v9 = v4;
          if (v4 >= *(float *)&v8)
          {
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1488), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)a1, "masterCaptureStream"), "portType")), "floatValue");
            v9 = *(float *)&v8;
          }
        }
        else
        {
          v20 = fminf(v4, 1.5);
          if (*(_BYTE *)(a1 + 216))
            v9 = v20;
          else
            v9 = v4;
        }
      }
      if (v9 != v6 && (v5 == 0.0 || v9 < v5 || v6 < v5))
      {
        if (*(_DWORD *)(a1 + 1480) == 3)
        {
          v10 = *MEMORY[0x1E0D05A18];
          v11 = objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, *MEMORY[0x1E0D05A18]), "videoCaptureDimensions");
          v12 = *MEMORY[0x1E0D07FE0];
          if (v11 == 3840)
            v13 = *MEMORY[0x1E0D07FF0];
          else
            v13 = *MEMORY[0x1E0D07FE0];
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 552), "baseZoomFactorsByPortType"), "objectForKeyedSubscript:", v10), "floatValue");
          v15 = (float)(v9 / v14) * 1.25;
          v25[0] = v10;
          v23 = v13;
          v24 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
          v26[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
          v25[1] = *MEMORY[0x1E0D05A28];
          v21 = v12;
          *(float *)&v16 = v15;
          v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v16);
          v26[1] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1);
          v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
          v18 = *MEMORY[0x1E0D08228];
          v19 = a1;
        }
        else
        {
          *(float *)&v8 = v9;
          v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
          v19 = a1;
          v18 = v3;
        }
        if (!-[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](v19, v18, v17))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2776));
          *(float *)(a1 + 2768) = v9;
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2776));
        }
      }
    }
  }
}

- (_BYTE)_updateSensorRegionsOfInterestBasedOnZoomFactor:(_BYTE *)result
{
  uint64_t v3;
  double v4;
  double v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = *MEMORY[0x1E0C9D538];
    if (result[3697])
    {
      result = (_BYTE *)objc_msgSend(result, "masterCaptureStream");
      if (result == *(_BYTE **)(v3 + 584) && *(float *)(v3 + 2800) <= a2)
      {
        result = (_BYTE *)objc_msgSend(*(id *)(v3 + 1320), "lastSelectionReason");
        if ((_DWORD)result)
        {
          result = (_BYTE *)objc_msgSend(*(id *)(v3 + 584), "previewShiftAtBaseZoom");
          v4 = v5;
        }
      }
    }
    if (*(_BYTE *)(v3 + 3548))
      result = (_BYTE *)-[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v3, *MEMORY[0x1E0D07728], *(double *)(v3 + 3552), *(double *)(v3 + 3560), *(double *)(v3 + 3568), *(double *)(v3 + 3576), a2, v4);
    if (*(_BYTE *)(v3 + 3625))
      return (_BYTE *)-[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v3, *MEMORY[0x1E0D07648], *(double *)(v3 + 1736), *(double *)(v3 + 1744), *(double *)(v3 + 1752), *(double *)(v3 + 1760), a2, v4);
  }
  return result;
}

- (NSDictionary)sensorRawPoolRequirements
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  NSDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  NSDictionary *v12;
  int v13;
  int v14;
  _BOOL4 v15;
  BWFigCaptureSynchronizedStreamsGroup *v16;
  BWFigCaptureStream *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *obj;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  _BYTE v38[128];
  _QWORD v39[6];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v37 = 0;
  if (self->_multipleSensorRawBufferPoolsEnabled)
  {
    v3 = -[BWFigVideoCaptureDevice _sensorRawPoolsRequirements]((id *)&self->super.isa);
    if (!objc_msgSend(v3, "count"))
      return 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
    if (!v4)
      return 0;
    v5 = v4;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v28 = *(_QWORD *)v34;
    v9 = *MEMORY[0x1E0CA90E0];
    v10 = *MEMORY[0x1E0CA8FD8];
    obj = v3;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v34 != v28)
          objc_enumerationMutation(obj);
        v12 = *(NSDictionary **)(*((_QWORD *)&v33 + 1) + 8 * i);
        v13 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v9), "intValue");
        v14 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v10), "intValue");
        v15 = !FigCaptureVideoDimensionsAreValid(v6 | (unint64_t)(v7 << 32));
        if (v13 < (int)v6)
          v15 = 1;
        if (v14 < (int)v7)
          v15 = 1;
        if (v15)
        {
          v6 = v13;
          v7 = v14;
        }
        else
        {
          v7 = v7;
        }
        if (v15)
          v8 = v12;
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v40, 16);
    }
    while (v5);
    return v8;
  }
  if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
  {
    v16 = -[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](self->_synchronizedStreamsGroup, "syncGroup");
    v8 = -[BWFigCaptureSynchronizedStreamsGroup getProperty:error:](v16, "getProperty:error:", *MEMORY[0x1E0D081F8], &v37);
    if (v37)
      goto LABEL_35;
  }
  else
  {
    v17 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    v8 = -[BWFigCaptureStream getProperty:error:](v17, "getProperty:error:", *MEMORY[0x1E0D07758], &v37);
    if (v37)
    {
LABEL_35:
      FigDebugAssert3();
      return v8;
    }
  }
  if (-[NSDictionary count](v8, "count"))
  {
    v18 = *MEMORY[0x1E0CA90E0];
    v39[0] = *MEMORY[0x1E0CA9060];
    v39[1] = v18;
    v19 = *MEMORY[0x1E0CA8F68];
    v39[2] = *MEMORY[0x1E0CA8FD8];
    v39[3] = v19;
    v20 = *MEMORY[0x1E0CA9040];
    v39[4] = *MEMORY[0x1E0CA9048];
    v39[5] = v20;
    v21 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 6);
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v30;
LABEL_28:
      v25 = 0;
      while (1)
      {
        if (*(_QWORD *)v30 != v24)
          objc_enumerationMutation(v21);
        if (!-[NSDictionary objectForKeyedSubscript:](v8, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v25)))break;
        if (v23 == ++v25)
        {
          v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v38, 16);
          if (v23)
            goto LABEL_28;
          return v8;
        }
      }
    }
  }
  return v8;
}

- (uint64_t)_updateStreamMetadataSettings
{
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BOOL8 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 2153) || *(_BYTE *)(result + 2154))
    {
      v2 = 1;
    }
    else
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v10 = *(void **)(result + 2008);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
      if (v11)
      {
        v12 = v11;
        v2 = 0;
        v13 = *(_QWORD *)v20;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v20 != v13)
              objc_enumerationMutation(v10);
            v2 |= objc_msgSend((id)objc_msgSend(*(id *)(v1 + 2008), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i)), "referenceFrameSelectionMethod") == 3;
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        }
        while (v12);
      }
      else
      {
        v2 = 0;
      }
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = *(void **)(v1 + 560);
    result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)v16;
      v6 = v2 & 1;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v16 != v5)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v7);
          if (*(_BYTE *)(v1 + 2153))
            v9 = 1;
          else
            v9 = *(_BYTE *)(v1 + 2154) != 0;
          objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * v7), "setAeStatisticsEnabled:", v9);
          objc_msgSend(v8, "setRawFocusScoresEnabled:", v6);
          ++v7;
        }
        while (v4 != v7);
        result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        v4 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)setGlobalToneMappingEnabledOverride:(id)a3
{
  os_unfair_lock_s *p_frameStatisticsLock;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  if (self->_globalToneMappingEnabledOverride != a3 && (objc_msgSend(a3, "isEqual:") & 1) == 0)
  {

    self->_globalToneMappingEnabledOverride = (NSNumber *)a3;
    -[BWFigVideoCaptureDevice _updateGlobalToneMappingEnabled]((uint64_t)self);
  }
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (uint64_t)_setMinimumMasterToSlaveFrameRateRatio:(uint64_t)result
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    result = objc_msgSend(*(id *)(result + 552), "minimumMasterToSlaveFrameRateRatioSupported");
    if ((_DWORD)result)
    {
      LODWORD(v4) = objc_msgSend(*(id *)(v3 + 552), "minimumMasterToSlaveFrameRateRatio");
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v5 = *(void **)(v3 + 560);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v12;
        if (v4 <= a2)
          v4 = a2;
        else
          v4 = v4;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v12 != v8)
              objc_enumerationMutation(v5);
            v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
            if ((int)objc_msgSend(v10, "masterToSlaveFrameRateRatio") < (int)a2)
              objc_msgSend(v10, "setMasterToSlaveFrameRateRatio:", v4);
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        }
        while (v7);
      }
      return objc_msgSend(*(id *)(v3 + 552), "setMinimumMasterToSlaveFrameRateRatio:", a2);
    }
  }
  return result;
}

- (void)_deviceWillStartStreaming
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  float v12;
  double v13;
  void *v14;
  void *v15;
  float v16;
  double v17;
  void *v18;
  float v19;
  double v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  FigCaptureCameraParameters *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  int v32;
  BWBravoCinematicVideoSceneMonitor *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  FigCaptureCameraParameters *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  int v52;
  BWBravoPortraitSceneMonitorV3 *v53;
  double v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  FigCaptureCameraParameters *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t m;
  void *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  BOOL v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t n;
  void *v77;
  float v78;
  float v79;
  double v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ii;
  int v85;
  void *v86;
  void *v87;
  void *v88;
  float v89;
  int v90;
  int v91;
  int v92;
  int v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  int v102;
  float v103;
  float v104;
  int v105;
  id *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t jj;
  _BOOL8 v111;
  BOOL v112;
  float v113;
  float v114;
  float v115;
  double v116;
  BOOL v117;
  _BOOL4 v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  _BYTE *v123;
  BOOL v124;
  float v125;
  uint64_t v126;
  float v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  float v138;
  float v139;
  uint64_t *v140;
  float v141;
  float v142;
  float v143;
  float v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  int v149;
  void *v150;
  _BOOL8 v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t mm;
  void *v158;
  float v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t kk;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  _BOOL4 v172;
  void *v173;
  double v174;
  double v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t nn;
  void *v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t i1;
  void *v192;
  void *v193;
  id v194;
  id v195;
  id v196;
  _BOOL4 v197;
  char v198;
  _BOOL8 v199;
  uint64_t v200;
  id v201;
  void *v202;
  const __CFDictionary *v203;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t i2;
  uint64_t v210;
  BWVariableFrameRateParameters *v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  uint64_t *v215;
  BWDeviceMotionActivityDetector *v216;
  _BOOL8 v217;
  void *v218;
  int v219;
  void *v220;
  double v221;
  uint64_t v222;
  NSObject *v223;
  uint64_t v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  __int128 v228;
  uint64_t v229;
  id obj;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id *v235;
  uint64_t v236;
  id *v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  _QWORD v241[6];
  _QWORD v242[7];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  os_log_type_t type;
  int v248;
  CMTime time;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  _QWORD block[5];
  _BYTE v295[128];
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  char v299;
  const __CFString *v300;
  const __CFDictionary *v301;
  _BYTE v302[128];
  _BYTE v303[128];
  uint64_t v304;
  _QWORD v305[2];
  _BYTE v306[128];
  _BYTE v307[128];
  _BYTE v308[128];
  _BYTE v309[128];
  _BYTE v310[128];
  _BYTE v311[128];
  _BYTE v312[128];
  _BYTE v313[128];
  _BYTE v314[128];
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v2 = *(NSObject **)(a1 + 1584);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke;
  block[3] = &unk_1E491E720;
  block[4] = a1;
  dispatch_sync(v2, block);
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue") & 1) != 0
    || objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))
  {
    v3 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 504), "stream"), "supportedProperties");
    if (!objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D076E8]))
    {
      v292 = 0u;
      v293 = 0u;
      v290 = 0u;
      v291 = 0u;
      v4 = *(void **)(a1 + 560);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v290, v314, 16);
      if (v5)
      {
        v6 = *(_QWORD *)v291;
        do
        {
          for (i = 0; i != v5; ++i)
          {
            if (*(_QWORD *)v291 != v6)
              objc_enumerationMutation(v4);
            objc_msgSend(*(id *)(*((_QWORD *)&v290 + 1) + 8 * i), "setFaceDetectionEnabled:", 1);
          }
          v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v290, v314, 16);
        }
        while (v5);
      }
    }
  }
  v8 = *(void **)(a1 + 1464);
  if (v8)
  {
    v9 = (void *)objc_msgSend(v8, "stream");
    objc_msgSend(v9, "setProperty:value:", *MEMORY[0x1E0D07720], MEMORY[0x1E0C9AAB0]);
  }

  *(_QWORD *)(a1 + 1488) = 0;
  -[BWFigVideoCaptureDevice _resetSDOFEffectAndStagePreviewStatus](a1);
  if (*(_BYTE *)(a1 + 1472))
  {
    -[BWFigVideoCaptureDevice _updateStreamingForegroundSegmentationNetworkUsingStage:]((_QWORD *)a1, 0);
    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if (*(_QWORD *)(a1 + 1464))
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E4A02F40, objc_msgSend(*(id *)(a1 + 504), "portType"));
    }
    else if (objc_msgSend((id)a1, "isBravoVariant"))
    {
      if ((int)FigCapturePlatformIdentifier() < 9)
      {
        v288 = 0u;
        v289 = 0u;
        v286 = 0u;
        v287 = 0u;
        v21 = *(void **)(a1 + 560);
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v286, v313, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v287;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v287 != v23)
                objc_enumerationMutation(v21);
              objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E4A02F50, objc_msgSend(*(id *)(*((_QWORD *)&v286 + 1) + 8 * j), "portType"));
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v286, v313, 16);
          }
          while (v22);
        }
      }
      else
      {
        if (*(_QWORD *)(a1 + 584))
        {
          v11 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(*(id *)(a1 + 504), "baseZoomFactor");
          *(float *)&v13 = v12 / 1.33;
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v11, "numberWithFloat:", v13), objc_msgSend(*(id *)(a1 + 584), "portType"));
        }
        v14 = *(void **)(a1 + 576);
        if (v14)
        {
          v15 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v14, "baseZoomFactor");
          *(float *)&v17 = v16 / 1.33;
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v15, "numberWithFloat:", v17), objc_msgSend(*(id *)(a1 + 576), "portType"));
        }
        v18 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*(id *)(a1 + 504), "baseZoomFactor");
        *(float *)&v20 = v19 / 1.33;
        objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "numberWithFloat:", v20), objc_msgSend(*(id *)(a1 + 504), "portType"));
      }
    }
    *(_QWORD *)(a1 + 1488) = v10;
  }
  if (*(_BYTE *)(a1 + 1497) || *(_BYTE *)(a1 + 1499))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1500));

    *(_QWORD *)(a1 + 3752) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1500));
    v25 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
    *(_BYTE *)(a1 + 1528) = 1;
    if (*(_QWORD *)(a1 + 576))
    {
      objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", *MEMORY[0x1E0D05A18]);
      v27 = v26;
      v28 = objc_msgSend(*(id *)(a1 + 576), "portType");
      v29 = objc_msgSend(*(id *)(a1 + 576), "sensorIDString");
      LODWORD(v30) = v27;
      v31 = -[FigCaptureCameraParameters portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:](v25, "portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:", v28, v29, v30);
      v32 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", objc_msgSend(*(id *)(a1 + 576), "portType"), objc_msgSend(*(id *)(a1 + 576), "sensorIDString"));
      if (*(_BYTE *)(a1 + 3744))
      {
LABEL_36:
        v33 = -[BWBravoCinematicVideoSceneMonitor initWithTuningParameters:attachDebugFrameStatistics:]([BWBravoCinematicVideoSceneMonitor alloc], "initWithTuningParameters:attachDebugFrameStatistics:", v31, 0);
LABEL_66:
        *(_QWORD *)(a1 + 1520) = v33;
        goto LABEL_67;
      }
      if (v32 != 3)
      {
        if (v32 == 2)
        {
LABEL_42:
          v33 = -[BWBravoPortraitSceneMonitorV2 initWithTuningParameters:attachDebugFrameStatistics:]([BWBravoPortraitSceneMonitorV2 alloc], "initWithTuningParameters:attachDebugFrameStatistics:", v31, 0);
          goto LABEL_66;
        }
LABEL_59:
        v33 = -[BWBravoPortraitSceneMonitor initWithTuningParameters:attachDebugFrameStatistics:]([BWBravoPortraitSceneMonitor alloc], "initWithTuningParameters:attachDebugFrameStatistics:", v31, 0);
        goto LABEL_66;
      }
    }
    else
    {
      if (!*(_QWORD *)(a1 + 584))
      {
        v45 = *(void **)(a1 + 1464);
        if (v45)
        {
          objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", objc_msgSend(v45, "portType"));
          v47 = v46;
          v48 = objc_msgSend(*(id *)(a1 + 1464), "portType");
          v49 = objc_msgSend(*(id *)(a1 + 1464), "sensorIDString");
          LODWORD(v50) = v47;
          v51 = -[FigCaptureCameraParameters portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:](v25, "portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:", v48, v49, v50);
          v52 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", objc_msgSend(*(id *)(a1 + 1464), "portType"), objc_msgSend(*(id *)(a1 + 1464), "sensorIDString"));
          if (*(_BYTE *)(a1 + 3744))
          {
            v33 = -[BWPearlCinematicVideoSceneMonitor initWithTuningParameters:attachDebugFrameStatistics:]([BWPearlCinematicVideoSceneMonitor alloc], "initWithTuningParameters:attachDebugFrameStatistics:", v51, 0);
          }
          else if (v52 == 2)
          {
            v33 = -[BWPearlPortraitSceneMonitorV2 initWithTuningParameters:attachDebugFrameStatistics:portraitAutoSuggestEnabled:shallowDepthOfFieldEnabled:]([BWPearlPortraitSceneMonitorV2 alloc], "initWithTuningParameters:attachDebugFrameStatistics:portraitAutoSuggestEnabled:shallowDepthOfFieldEnabled:", v51, 0, *(unsigned __int8 *)(a1 + 1499), *(unsigned __int8 *)(a1 + 1497));
          }
          else
          {
            v33 = -[BWPearlPortraitSceneMonitor initWithTuningParameters:attachDebugFrameStatistics:]([BWPearlPortraitSceneMonitor alloc], "initWithTuningParameters:attachDebugFrameStatistics:", v51, 0);
          }
        }
        else
        {
          objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", objc_msgSend(*(id *)(a1 + 504), "portType"));
          v56 = v55;
          v57 = objc_msgSend(*(id *)(a1 + 504), "portType");
          v58 = objc_msgSend(*(id *)(a1 + 504), "sensorIDString");
          LODWORD(v59) = v56;
          v33 = -[BWSingleCameraPortraitSceneMonitor initWithTuningParameters:attachDebugFrameStatistics:]([BWSingleCameraPortraitSceneMonitor alloc], "initWithTuningParameters:attachDebugFrameStatistics:", -[FigCaptureCameraParameters portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:](v25, "portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:", v57, v58, v59), 0);
        }
        goto LABEL_66;
      }
      objc_msgSend((id)a1, "requestedZoomFactorRelativeToPortType:", *MEMORY[0x1E0D05A18]);
      v27 = v34;
      v35 = objc_msgSend(*(id *)(a1 + 504), "portType");
      v36 = objc_msgSend(*(id *)(a1 + 504), "sensorIDString");
      LODWORD(v37) = v27;
      v31 = -[FigCaptureCameraParameters portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:](v25, "portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:", v35, v36, v37);
      v38 = -[FigCaptureCameraParameters portraitSceneMonitorVersionForPortType:sensorIDString:](v25, "portraitSceneMonitorVersionForPortType:sensorIDString:", objc_msgSend(*(id *)(a1 + 504), "portType"), objc_msgSend(*(id *)(a1 + 504), "sensorIDString"));
      if (*(_BYTE *)(a1 + 3744))
        goto LABEL_36;
      if (v38 != 3)
      {
        if (v38 == 2)
          goto LABEL_42;
        goto LABEL_59;
      }
    }
    v53 = [BWBravoPortraitSceneMonitorV3 alloc];
    LODWORD(v54) = v27;
    v33 = -[BWBravoPortraitSceneMonitorV3 initWithTuningParameters:zoomFactor:portraitAutoSuggestEnabled:shallowDepthOfFieldEnabled:attachDebugFrameStatistics:](v53, "initWithTuningParameters:zoomFactor:portraitAutoSuggestEnabled:shallowDepthOfFieldEnabled:attachDebugFrameStatistics:", v31, *(unsigned __int8 *)(a1 + 1499), *(unsigned __int8 *)(a1 + 1497), 0, v54);
    goto LABEL_66;
  }
  if (*(int *)(a1 + 3804) >= 3)
  {
    v39 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
    v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v284 = 0u;
    v285 = 0u;
    v282 = 0u;
    v283 = 0u;
    v41 = *(void **)(a1 + 560);
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v282, v312, 16);
    if (v42)
    {
      v43 = *(_QWORD *)v283;
      do
      {
        for (k = 0; k != v42; ++k)
        {
          if (*(_QWORD *)v283 != v43)
            objc_enumerationMutation(v41);
          objc_msgSend(v40, "setObject:forKeyedSubscript:", -[FigCaptureCameraParameters actionCameraSceneMonitoringParametersForPortType:sensorIDString:](v39, "actionCameraSceneMonitoringParametersForPortType:sensorIDString:", objc_msgSend(*(id *)(*((_QWORD *)&v282 + 1) + 8 * k), "portType"), objc_msgSend(*(id *)(*((_QWORD *)&v282 + 1) + 8 * k), "sensorIDString")), objc_msgSend(*(id *)(*((_QWORD *)&v282 + 1) + 8 * k), "portType"));
        }
        v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v282, v312, 16);
      }
      while (v42);
    }
    v33 = -[BWActionCameraSceneMonitor initWithTuningParametersByPortType:videoStabilizationStrength:bravoTelephotoEnabled:attachDebugFrameStatistics:]([BWActionCameraSceneMonitor alloc], "initWithTuningParametersByPortType:videoStabilizationStrength:bravoTelephotoEnabled:attachDebugFrameStatistics:", v40, *(unsigned int *)(a1 + 3804), *(_QWORD *)(a1 + 576) != 0, 0);
    goto LABEL_66;
  }
LABEL_67:
  if (*(_BYTE *)(a1 + 216) || *(_BYTE *)(a1 + 217))
  {
    v60 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
    v61 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v280 = 0u;
    v281 = 0u;
    v278 = 0u;
    v279 = 0u;
    v62 = *(void **)(a1 + 560);
    v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v278, v311, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v279;
      do
      {
        for (m = 0; m != v63; ++m)
        {
          if (*(_QWORD *)v279 != v64)
            objc_enumerationMutation(v62);
          v66 = *(void **)(*((_QWORD *)&v278 + 1) + 8 * m);
          v67 = *(_BYTE *)(a1 + 216) == 0;
          v68 = objc_msgSend(v66, "portType");
          v69 = objc_msgSend(v66, "sensorIDString");
          if (v67)
            v70 = -[FigCaptureCameraParameters stereoPhotoCaptureSceneMonitoringParametersForPortType:sensorIDString:](v60, "stereoPhotoCaptureSceneMonitoringParametersForPortType:sensorIDString:", v68, v69);
          else
            v70 = -[FigCaptureCameraParameters stereoVideoCaptureSceneMonitoringParametersForPortType:sensorIDString:](v60, "stereoVideoCaptureSceneMonitoringParametersForPortType:sensorIDString:", v68, v69);
          objc_msgSend(v61, "setObject:forKeyedSubscript:", v70, objc_msgSend(v66, "portType"));
        }
        v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v278, v311, 16);
      }
      while (v63);
    }
    *(_QWORD *)(a1 + 1536) = -[BWStereoVideoCaptureSceneMonitor initWithTuningParametersByPortType:attachDebugFrameStatistics:]([BWStereoVideoCaptureSceneMonitor alloc], "initWithTuningParametersByPortType:attachDebugFrameStatistics:", v61, 0);
    *(_DWORD *)(a1 + 1544) = 1;
  }
  v71 = *(void **)(a1 + 2608);
  if (v71 && !*(_BYTE *)(a1 + 2440))
  {

    *(_QWORD *)(a1 + 2608) = 0;
  }
  if (!*(_BYTE *)(a1 + 2440))
  {
    v226 = 0;
    goto LABEL_102;
  }
  -[BWFigVideoCaptureDevice _setupStillImageCaptureStateMachine](a1);
  if (objc_msgSend(*(id *)(a1 + 504), "hasSphere")
    && (objc_msgSend(*(id *)(a1 + 504), "enablesSphereWhenAvailable") & 1) != 0)
  {
    v72 = 1;
LABEL_89:
    v226 = v72;
    goto LABEL_92;
  }
  if (objc_msgSend(*(id *)(a1 + 504), "motionDataDeliveryEnabled"))
  {
    v72 = *(_DWORD *)(a1 + 1992) != 0;
    goto LABEL_89;
  }
  v226 = 0;
LABEL_92:
  if (BWDeviceIsiPhone() && !*(_QWORD *)(a1 + 2608))
    *(_QWORD *)(a1 + 2608) = objc_alloc_init(BWAmbientLightSensor);
  v276 = 0u;
  v277 = 0u;
  v274 = 0u;
  v275 = 0u;
  v73 = *(void **)(a1 + 560);
  v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v274, v310, 16);
  if (v74)
  {
    v75 = *(_QWORD *)v275;
    do
    {
      for (n = 0; n != v74; ++n)
      {
        if (*(_QWORD *)v275 != v75)
          objc_enumerationMutation(v73);
        objc_msgSend(*(id *)(a1 + 2064), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", -[BWFigVideoCaptureDevice _ubHighResolutionNondisruptiveSwitchingFormatIndexForCaptureStream:](a1, *(void **)(*((_QWORD *)&v274 + 1) + 8 * n))), objc_msgSend(*(id *)(*((_QWORD *)&v274 + 1) + 8 * n), "portType"));
      }
      v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v274, v310, 16);
    }
    while (v74);
  }
LABEL_102:
  -[BWFigVideoCaptureDevice _configureZoomFudging](a1);
  v77 = *(void **)(a1 + 3136);
  objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
  objc_msgSend(v77, "requestedZoomFactorChanged:");
  if (*(_BYTE *)(a1 + 1472)
    && (*(_DWORD *)(a1 + 1480) - 1) <= 1
    && objc_msgSend((id)a1, "isBravoVariant"))
  {
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    -[BWFigVideoCaptureDevice _setISPZoomFactorSynchronously:](a1, v78);
  }
  else
  {
    -[BWFigVideoCaptureDevice _setISPZoomFactorSynchronously:](a1, 1.0);
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((_BYTE *)a1, v79);
  }
  objc_msgSend(*(id *)(a1 + 2744), "reset");
  -[BWFigVideoCaptureDevice _setupZoomRampTuning](a1, v80);
  v272 = 0u;
  v273 = 0u;
  v270 = 0u;
  v271 = 0u;
  v81 = *(void **)(a1 + 560);
  v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v270, v309, 16);
  if (v82)
  {
    v83 = *(_QWORD *)v271;
    do
    {
      for (ii = 0; ii != v82; ++ii)
      {
        if (*(_QWORD *)v271 != v83)
          objc_enumerationMutation(v81);
        -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:](a1, *(void **)(*((_QWORD *)&v270 + 1) + 8 * ii), 0, 0, 0);
      }
      v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v270, v309, 16);
    }
    while (v82);
  }
  if (*(_BYTE *)(a1 + 3699))
  {
    objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
    *(_DWORD *)(a1 + 3716) = v85;
  }
  if (!objc_msgSend((id)a1, "isBravoVariant"))
    goto LABEL_301;
  v235 = (id *)(a1 + 576);
  v86 = *(void **)(a1 + 576);
  if (v86)
  {
    v87 = (void *)objc_msgSend(v86, "stream");
    v88 = (void *)objc_msgSend(v87, "getProperty:error:", *MEMORY[0x1E0D07308], 0);
    if (v88)
      v89 = (float)(int)objc_msgSend(v88, "intValue") * 0.0039062;
    else
      v89 = 0.0;
    objc_msgSend(*v235, "maxEIT");
    v90 = v91;
  }
  else
  {
    v89 = 0.0;
    v90 = 0;
  }
  if (*(_BYTE *)(a1 + 1472))
  {
    v92 = *(_DWORD *)(a1 + 1396);
    v93 = *(_DWORD *)(a1 + 1400);
  }
  else if (*(_BYTE *)(a1 + 3640))
  {
    v92 = *(_DWORD *)(a1 + 1408);
    v93 = v92;
  }
  else
  {
    v93 = *(_DWORD *)(a1 + 1388);
    v92 = *(_DWORD *)(a1 + 1380);
  }
  objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
  v237 = (id *)(a1 + 504);
  v95 = v94 / (float)v92;
  v96 = 4.0;
  if (v95 > 4.0)
  {
    objc_msgSend(*v237, "maximumFrameRate");
    v96 = v97 / (float)v92;
  }
  *(_DWORD *)(a1 + 1384) = (int)v96;
  objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
  v99 = v98 / (float)v93;
  v100 = 2.0;
  if (v99 > 2.0)
  {
    objc_msgSend(*v237, "maximumFrameRate");
    v100 = v101 / (float)v93;
  }
  v239 = (int)v100;
  *(_DWORD *)(a1 + 1392) = (int)v100;
  *(_DWORD *)(a1 + 1420) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  v102 = objc_msgSend(*(id *)(a1 + 560), "count");
  objc_msgSend(*(id *)(a1 + 504), "maximumSupportedFrameRate");
  v104 = v103;
  v105 = objc_msgSend(*(id *)(a1 + 504), "videoHDRFusionEnabled");
  v106 = (id *)(a1 + 560);
  if (v105)
    v104 = v104 + v104;
  v268 = 0u;
  v269 = 0u;
  v266 = 0u;
  v267 = 0u;
  v107 = *v106;
  v108 = objc_msgSend(*v106, "countByEnumeratingWithState:objects:count:", &v266, v308, 16);
  if (v108)
  {
    v109 = *(_QWORD *)v267;
    do
    {
      for (jj = 0; jj != v108; ++jj)
      {
        if (*(_QWORD *)v267 != v109)
          objc_enumerationMutation(v107);
        if (!*(_BYTE *)(a1 + 1412) && !*(_BYTE *)(a1 + 1449) && !*(_BYTE *)(a1 + 1472) && !*(_BYTE *)(a1 + 217))
        {
LABEL_148:
          v111 = 0;
          goto LABEL_150;
        }
        v111 = *(_BYTE *)(a1 + 3640) == 0;
        if (*(_BYTE *)(a1 + 3640))
          v112 = 1;
        else
          v112 = v102 < 3;
        if (!v112)
        {
          if (*(_BYTE *)(a1 + 1472))
            goto LABEL_148;
          v111 = *(_BYTE *)(a1 + 217) == 0;
        }
LABEL_150:
        objc_msgSend(*(id *)(*((_QWORD *)&v266 + 1) + 8 * jj), "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", v111);
      }
      v108 = objc_msgSend(v107, "countByEnumeratingWithState:objects:count:", &v266, v308, 16);
    }
    while (v108);
  }
  *(_WORD *)(a1 + 610) = 0;
  *(_BYTE *)(a1 + 612) = 0;
  if (*(_BYTE *)(a1 + 1472))
  {
    if (v102 >= 3)
    {
      *(_BYTE *)(a1 + 612) = 1;
      objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
      v114 = (float)v239;
      if ((float)(v113 / (float)*(int *)(a1 + 1404)) < (float)v239)
      {
        objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
        v114 = v115 / (float)*(int *)(a1 + 1404);
      }
      LODWORD(v116) = 2.0;
      if (v114 > 2.0)
      {
        objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate");
        v117 = (float)(*(float *)&v116 / (float)*(int *)(a1 + 1404)) < (float)v239;
        *(float *)&v116 = (float)v239;
        if (v117)
        {
          objc_msgSend(*(id *)(a1 + 504), "maximumFrameRate", v116);
          *(float *)&v116 = *(float *)&v116 / (float)*(int *)(a1 + 1404);
        }
      }
      v118 = 0;
      v119 = 0;
      v239 = (int)*(float *)&v116;
      goto LABEL_164;
    }
LABEL_163:
    v118 = 0;
    v119 = 0;
LABEL_164:
    v120 = 2;
    goto LABEL_165;
  }
  if (*(_BYTE *)(a1 + 217) || *(_BYTE *)(a1 + 3640))
    goto LABEL_163;
  v264 = 0u;
  v265 = 0u;
  v262 = 0u;
  v263 = 0u;
  v163 = *(void **)(a1 + 560);
  v164 = 0;
  v119 = 0;
  v165 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v262, v307, 16);
  if (v165)
  {
    v166 = *(_QWORD *)v263;
    v167 = *MEMORY[0x1E0D05A18];
    do
    {
      for (kk = 0; kk != v165; ++kk)
      {
        if (*(_QWORD *)v263 != v166)
          objc_enumerationMutation(v163);
        v169 = *(void **)(*((_QWORD *)&v262 + 1) + 8 * kk);
        if (objc_msgSend(v169, "streamingRequiredWhenConfiguredAsSlave"))
        {
          ++v164;
        }
        else if (objc_msgSend((id)objc_msgSend(v169, "portType"), "isEqualToString:", v167))
        {
          v164 += *(unsigned __int8 *)(a1 + 608);
          v119 |= *(_BYTE *)(a1 + 608) != 0;
        }
      }
      v165 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v262, v307, 16);
    }
    while (v165);
  }
  v118 = v164 < v102;
  if (v164 >= v102)
    v120 = v164;
  else
    v120 = v164 + 1;
LABEL_165:
  if (*(_BYTE *)(a1 + 496))
  {
    v121 = 0;
    goto LABEL_182;
  }
  v122 = objc_msgSend(*(id *)(a1 + 560), "count");
  v123 = (_BYTE *)(a1 + 610);
  if (v122 == 1)
  {
LABEL_168:
    *v123 = 1;
    goto LABEL_174;
  }
  if (v104 <= 30.0)
  {
    v123 = (_BYTE *)(a1 + 610);
    if (v120 != 1)
    {
      if (v120 != 2 || (v118 & v119) != 1)
        goto LABEL_174;
      v123 = (_BYTE *)(a1 + 611);
    }
    goto LABEL_168;
  }
LABEL_174:
  if (*(_BYTE *)(a1 + 610))
    v124 = v120 < v102;
  else
    v124 = 0;
  v121 = v124;
  if (v124)
    ++v120;
LABEL_182:
  if (*(_BYTE *)(a1 + 3648))
  {
    if (v120 == 1)
    {
      v120 = 2;
      v121 = 1;
    }
    if (v120 < v102)
    {
      objc_msgSend(*v237, "maximumFrameRateForSensorRawOutputBufferPoolRequirements");
      if (v125 == 0.0)
        objc_msgSend(*v237, "maximumFrameRate");
      v126 = 1404;
      if (!*(_BYTE *)(a1 + 1496))
        v126 = 1388;
      v127 = v125 / (float)*(int *)(a1 + v126);
      if (v127 >= (float)v239)
        v127 = (float)v239;
      v239 = (int)fmaxf(v127, 2.0);
    }
  }
  if (v120 < 2
    || objc_msgSend(*(id *)(a1 + 552), "maximumNumberOfSlaveStreamsWithoutFrameSkippingSupported"))
  {
    if (*(_BYTE *)(a1 + 1449))
      v128 = 1;
    else
      v128 = v239;
  }
  else
  {
    v128 = 1;
  }
  -[BWFigVideoCaptureDevice _setMinimumMasterToSlaveFrameRateRatio:](a1, v128);
  if (v120 <= 1)
    v129 = 1;
  else
    v129 = v120;
  *(_DWORD *)(a1 + 1328) = v129 - 1;
  objc_msgSend(*(id *)(a1 + 552), "setMaximumNumberOfSlaveStreamsWithoutFrameSkipping:");
  objc_msgSend(*(id *)(a1 + 552), "setMaximumNumberOfSlaveStreamsWithFrameProcessingEnabled:", (*(_DWORD *)(a1 + 1328) - v121));
  v130 = *(_DWORD *)(a1 + 4276);
  if (v130 <= 0)
    v131 = 0;
  else
    v131 = (v130 - 1);
  objc_msgSend(*(id *)(a1 + 552), "setMaximumNumberOfEnabledSlaveTimeMachines:", v131);
  -[BWFigVideoCaptureDevice _updateStatsMasterForMasterStream:](a1, 0);
  v132 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 552), "syncGroup"), "supportedProperties");
  v133 = *MEMORY[0x1E0D081E0];
  if (objc_msgSend(v132, "objectForKeyedSubscript:", *MEMORY[0x1E0D081E0]))
  {
    v134 = (void *)objc_msgSend(*(id *)(a1 + 552), "syncGroup");
    objc_msgSend(v134, "setProperty:value:", v133, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 613)));
  }
  v135 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 552), "syncGroup"), "supportedProperties");
  v136 = *MEMORY[0x1E0D08188];
  if (objc_msgSend(v135, "objectForKeyedSubscript:", *MEMORY[0x1E0D08188]))
  {
    v137 = (void *)objc_msgSend(*(id *)(a1 + 552), "syncGroup");
    objc_msgSend(v137, "setProperty:value:", v136, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 216)));
  }
  if (!*(_QWORD *)(a1 + 584)
    || (objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor"),
        v139 = v138,
        objc_msgSend(*(id *)(a1 + 504), "baseZoomFactor"),
        v140 = (uint64_t *)(a1 + 584),
        v139 >= v141)
    && (!objc_msgSend(*(id *)(a1 + 4112), "isEqualToString:", objc_msgSend(*(id *)(a1 + 584), "portType"))
     || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1320), "eligibleFallbackPortTypes"), "containsObject:", *(_QWORD *)(a1 + 4112)) & 1) == 0))
  {
    if (!*v235)
      goto LABEL_215;
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    v143 = v142;
    objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
    if (v143 < v144)
      goto LABEL_215;
    if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1320), "eligibleFallbackPortTypes"), "containsObject:", objc_msgSend(*(id *)(a1 + 504), "portType")))
    {
      v140 = (uint64_t *)(a1 + 576);
      if ((objc_msgSend(*(id *)(a1 + 4112), "isEqualToString:", objc_msgSend(*(id *)(a1 + 576), "portType")) & 1) == 0)
LABEL_215:
        v140 = (uint64_t *)(a1 + 504);
    }
    else
    {
      v140 = (uint64_t *)(a1 + 576);
    }
  }
  v145 = *v140;
  *(_QWORD *)(a1 + 1296) = *v140;
  *(_QWORD *)(a1 + 592) = v145;
  if (*(_BYTE *)(a1 + 3640))
  {
    *(_BYTE *)(a1 + 3856) = 1;
    if (*(_BYTE *)(a1 + 3840))
    {
      *(_BYTE *)(a1 + 3849) = 1;
      *(_DWORD *)(a1 + 3852) = 0;
    }
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    v147 = v146;
    if (*(_BYTE *)(a1 + 3650))
    {
      v148 = *(_QWORD *)(a1 + 1296);
    }
    else
    {
      v148 = -[BWFigVideoCaptureDevice _overCaptureMasterStreamForZoomFactor:](a1, v146);
      *(_QWORD *)(a1 + 1296) = v148;
    }
    v150 = (void *)-[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, v148, 0, v147, 0.0);
    objc_msgSend(v150, "setStreamingRequiredWhenConfiguredAsSlave:", 1);
    v151 = (*(_BYTE *)(a1 + 1472) || *(_BYTE *)(a1 + 217)) && *(_BYTE *)(a1 + 3204) != 0;
    objc_msgSend(v150, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", v151);
  }
  else if (*(_BYTE *)(a1 + 1472) || *(_BYTE *)(a1 + 217))
  {
    v149 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:");
    if (v149 >= 1)
      v150 = (void *)objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", (v149 - 1));
    else
      v150 = 0;
    objc_msgSend(v150, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", 1);
  }
  else
  {
    v150 = 0;
  }
  *(_QWORD *)(a1 + 1304) = *(_QWORD *)(a1 + 1296);
  if (*(_BYTE *)(a1 + 1448))
  {
    v152 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:");
    if (v152 >= objc_msgSend(*(id *)(a1 + 568), "count") - 1
      || (v153 = objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v152 + 1)) == 0)
    {
      v153 = *(_QWORD *)(a1 + 1296);
    }
    *(_QWORD *)(a1 + 1440) = v153;
  }
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 560), "count") < 3)
    goto LABEL_282;
  if (v150)
    goto LABEL_279;
  v260 = 0u;
  v261 = 0u;
  v258 = 0u;
  v259 = 0u;
  v154 = *(void **)(a1 + 560);
  v155 = objc_msgSend(v154, "countByEnumeratingWithState:objects:count:", &v258, v306, 16);
  if (v155)
  {
    v150 = 0;
    v156 = *(_QWORD *)v259;
    do
    {
      for (mm = 0; mm != v155; ++mm)
      {
        v158 = v150;
        if (*(_QWORD *)v259 != v156)
          objc_enumerationMutation(v154);
        v150 = *(void **)(*((_QWORD *)&v258 + 1) + 8 * mm);
        if (!objc_msgSend(v150, "streamingRequiredWhenConfiguredAsSlave")
          || v150 == *(void **)(a1 + 1296))
        {
          v150 = v158;
        }
        else if (v158)
        {
          goto LABEL_255;
        }
      }
      v155 = objc_msgSend(v154, "countByEnumeratingWithState:objects:count:", &v258, v306, 16);
    }
    while (v155);
    if (v150)
      goto LABEL_279;
  }
LABEL_255:
  objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
  v150 = (void *)-[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, v159);
  if (v150 != *(void **)(a1 + 1296))
    goto LABEL_278;
  v160 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:", v150);
  v161 = *(void **)(a1 + 568);
  if (v160)
  {
    if (v160 >= objc_msgSend(v161, "count"))
      goto LABEL_278;
    v162 = objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v160 - 1);
  }
  else
  {
    v162 = objc_msgSend(v161, "objectAtIndexedSubscript:", 1);
  }
  v150 = (void *)v162;
LABEL_278:
  if (v150)
  {
LABEL_279:
    v305[0] = *(_QWORD *)(a1 + 1296);
    v305[1] = v150;
    v170 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v305, 2);
    goto LABEL_280;
  }
  if (!*(_QWORD *)(a1 + 1296))
  {
    v171 = 0;
    goto LABEL_281;
  }
  v304 = *(_QWORD *)(a1 + 1296);
  v170 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v304, 1);
LABEL_280:
  v171 = v170;
LABEL_281:
  objc_msgSend(*(id *)(a1 + 600), "setSynchronizationSlavesOrderedByPriority:", v171);
LABEL_282:
  v172 = !*(_BYTE *)(a1 + 4197) || *(_BYTE *)(a1 + 4196) || *(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 504);
  if (((objc_msgSend(*(id *)(a1 + 600), "waitForMasterAEToSettle") ^ 1 | v172) & 1) == 0)
    objc_msgSend(*(id *)(a1 + 600), "setWaitForMasterAEToSettle:", 0);
  -[BWFigVideoCaptureDevice _updateBravoStreamSelectionForMasterStream:forceNotification:](a1, *(void **)(a1 + 1296), 1);
  v173 = *(void **)(a1 + 1320);
  objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
  objc_msgSend(v173, "resetWithZoomFactor:currentMasterStream:", *(_QWORD *)(a1 + 1296));
  *(float *)&v174 = v89;
  objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxAEGain:", v174);
  LODWORD(v175) = v90;
  objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxEIT:", v175);
  if (*(_DWORD *)(a1 + 1480) == 3)
    -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](a1, *MEMORY[0x1E0D078E8], (uint64_t)&unk_1E4A02F60);
  v256 = 0u;
  v257 = 0u;
  v254 = 0u;
  v255 = 0u;
  v176 = *(void **)(a1 + 560);
  v177 = objc_msgSend(v176, "countByEnumeratingWithState:objects:count:", &v254, v303, 16);
  if (v177)
  {
    v178 = *(_QWORD *)v255;
    do
    {
      for (nn = 0; nn != v177; ++nn)
      {
        if (*(_QWORD *)v255 != v178)
          objc_enumerationMutation(v176);
        v180 = *(void **)(*((_QWORD *)&v254 + 1) + 8 * nn);
        if (v180 == *(void **)(a1 + 1296))
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v254 + 1) + 8 * nn), "willBecomeMasterStream");
          objc_msgSend(v180, "didBecomeMasterStream");
        }
        else
        {
          objc_msgSend(*(id *)(*((_QWORD *)&v254 + 1) + 8 * nn), "willBecomeSlaveStream");
          objc_msgSend(v180, "didBecomeSlaveStream");
        }
      }
      v177 = objc_msgSend(v176, "countByEnumeratingWithState:objects:count:", &v254, v303, 16);
    }
    while (v177);
  }
  FigMotionSphereShiftStateInitialize(a1 + 616, (const __CFDictionary *)objc_msgSend((id)a1, "cameraInfoByPortType"), 7);
  *(_DWORD *)(a1 + 1256) = -1;
  objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
  -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)a1, v181);
  objc_msgSend(*(id *)(a1 + 552), "setMasterStream:allStreams:", *(_QWORD *)(a1 + 1296), *(_QWORD *)(a1 + 560));
  -[BWFigVideoCaptureDevice _sendMasterStreamChangedNotificationWithPortType:]((void *)a1, objc_msgSend(*(id *)(a1 + 1296), "portType"));
  -[BWFigVideoCaptureDevice _sendPreferredMasterStreamChangedNotificationWithPortType:]((void *)a1, objc_msgSend(*(id *)(a1 + 1304), "portType"));
LABEL_301:
  v182 = MEMORY[0x1E0CA2E18];
  v228 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(a1 + 1264) = *MEMORY[0x1E0CA2E18];
  v183 = *(_QWORD *)(v182 + 16);
  v184 = MEMORY[0x1E0CA2E68];
  v227 = v183;
  *(_QWORD *)(a1 + 1280) = v183;
  *(_OWORD *)(a1 + 4208) = *(_OWORD *)v184;
  *(_QWORD *)(a1 + 4224) = *(_QWORD *)(v184 + 16);
  *(_BYTE *)(a1 + 1460) = 0;
  -[BWFigVideoCaptureDevice _sendMacroFocusChangedNotification:](a1, 0);
  if (*(_QWORD *)(a1 + 1464))
  {
    -[BWFigVideoCaptureDevice _setMinimumMasterToSlaveFrameRateRatio:](a1, 1);
    objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
    -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)a1, v185);
    objc_msgSend(*(id *)(a1 + 504), "willBecomeMasterStream");
    objc_msgSend(*(id *)(a1 + 1464), "willBecomeSlaveStream");
    objc_msgSend(*(id *)(a1 + 552), "setMasterStream:allStreams:", *(_QWORD *)(a1 + 504), *(_QWORD *)(a1 + 560));
    objc_msgSend(*(id *)(a1 + 504), "didBecomeMasterStream");
    objc_msgSend(*(id *)(a1 + 1464), "didBecomeSlaveStream");
  }
  v252 = 0u;
  v253 = 0u;
  v250 = 0u;
  v251 = 0u;
  obj = *(id *)(a1 + 560);
  v186 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v250, v302, 16);
  if (v186)
  {
    v238 = *(_QWORD *)v251;
    v187 = *MEMORY[0x1E0D073C0];
    v240 = *MEMORY[0x1E0D073C8];
    v229 = *MEMORY[0x1E0D073B8];
    v188 = *MEMORY[0x1E0D07798];
    v189 = *MEMORY[0x1E0D074A0];
    v236 = *MEMORY[0x1E0D077F0];
    v233 = *MEMORY[0x1E0D07820];
    v234 = *MEMORY[0x1E0D077F8];
    v231 = *MEMORY[0x1E0D05B50];
    v232 = *MEMORY[0x1E0D075E0];
    v190 = MEMORY[0x1E0C9AAB0];
    do
    {
      for (i1 = 0; i1 != v186; ++i1)
      {
        if (*(_QWORD *)v251 != v238)
          objc_enumerationMutation(obj);
        v192 = *(void **)(*((_QWORD *)&v250 + 1) + 8 * i1);
        v193 = (void *)objc_msgSend(v192, "stream");
        if (objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v187))
        {
          objc_msgSend(v193, "setProperty:value:", v187, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 1872)));
          if (objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v240))
          {
            objc_msgSend(v193, "setProperty:value:", v229, v190);
            if (!objc_msgSend(v193, "getProperty:error:", v240, 0))
            {
              v194 = *(id *)(a1 + 3256);
              if (!v194)
              {
                v194 = objc_alloc_init(MEMORY[0x1E0C99E20]);
                *(_QWORD *)(a1 + 3256) = v194;
              }
              objc_msgSend(v194, "addObject:", objc_msgSend(v192, "portType"));
            }
            v195 = *(id *)(a1 + 3264);
            if (!v195)
            {
              v195 = objc_alloc_init(MEMORY[0x1E0C99E20]);
              *(_QWORD *)(a1 + 3264) = v195;
            }
            objc_msgSend(v195, "addObject:", objc_msgSend(v192, "portType"));
            v196 = *(id *)(a1 + 3280);
            if (!v196)
            {
              v196 = objc_alloc_init(MEMORY[0x1E0C99E20]);
              *(_QWORD *)(a1 + 3280) = v196;
            }
            objc_msgSend(v196, "addObject:", objc_msgSend(v192, "portType"));
          }
          if (!*(_QWORD *)(a1 + 3296))
            *(_QWORD *)(a1 + 3296) = objc_alloc_init(MEMORY[0x1E0C99E08]);
          if (!*(_QWORD *)(a1 + 3304))
            *(_QWORD *)(a1 + 3304) = objc_alloc_init(MEMORY[0x1E0C99E08]);
        }
        if (objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v188))
          objc_msgSend(v193, "setProperty:value:", v188, v190);
        if (objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v189))
          objc_msgSend(v193, "setProperty:value:", v189, v190);
        v197 = *(_DWORD *)(a1 + 1480) == 3 && v192 == (void *)objc_msgSend(*(id *)(a1 + 568), "firstObject");
        if (objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v236))
          v198 = v197;
        else
          v198 = 1;
        if ((v198 & 1) == 0)
          objc_msgSend(v192, "setTemporalNoiseReductionConfigurationBand0Enabled:rawEnabled:modulation:adaptiveOverscanEnabled:strengthHighEnabled:", *(_BYTE *)(a1 + 3913) == 0, *(unsigned __int8 *)(a1 + 3914), *(unsigned int *)(a1 + 3920), *(unsigned __int8 *)(a1 + 3809), *(unsigned __int8 *)(a1 + 3915));
        if (*(_BYTE *)(a1 + 3912))
          v199 = !v197;
        else
          v199 = 0;
        objc_msgSend(v193, "setPropertyIfSupported:value:", v234, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v199));
        objc_msgSend(v193, "setPropertyIfSupported:value:", v233, v190);
        objc_msgSend(v193, "setPropertyIfSupported:value:", v232, v190);
        if (objc_msgSend(v192, "hasSphere")
          && objc_msgSend((id)objc_msgSend(v193, "supportedProperties"), "objectForKeyedSubscript:", v188))
        {
          objc_msgSend(v193, "setProperty:value:", v188, v190);
          if (!*(_QWORD *)(a1 + 3312))
            *(_QWORD *)(a1 + 3312) = objc_alloc_init(MEMORY[0x1E0C99E08]);
          if (!*(_QWORD *)(a1 + 3320))
            *(_QWORD *)(a1 + 3320) = objc_alloc_init(MEMORY[0x1E0C99E08]);
        }
        v200 = objc_msgSend((id)objc_msgSend(v192, "moduleInfo"), "objectForKeyedSubscript:", v231);
        if (v200)
        {
          v201 = *(id *)(a1 + 3416);
          if (!v201)
          {
            v201 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            *(_QWORD *)(a1 + 3416) = v201;
          }
          objc_msgSend(v201, "setObject:forKeyedSubscript:", v200, objc_msgSend(v192, "portType"));
        }
      }
      v186 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v250, v302, 16);
    }
    while (v186);
  }

  *(_QWORD *)(a1 + 3424) = 0;
  *(_QWORD *)(a1 + 3348) = 0;
  *(_DWORD *)(a1 + 3168) = 0;
  if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))
  {
    v202 = *(void **)(a1 + 504);
    if (v202)
      objc_msgSend(v202, "maxExposureDuration");
    else
      memset(&time, 0, sizeof(time));
    v203 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    v300 = CFSTR("NewPropertyValue");
    v301 = v203;
    objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("MaxExposureDurationChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v301, &v300, 1));
  }
  if (*(_BYTE *)(a1 + 140))
  {
    if (*(_BYTE *)(a1 + 156))
    {
      -[BWFigVideoCaptureDevice _updateSensorRawPools](a1);
    }
    else
    {
      -[BWFigVideoCaptureDevice _updateSensorRawPool](a1);
      if (FigCaptureVideoDimensionsAreValid(*(_QWORD *)(a1 + 148)))
        -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool](a1);
      else
        objc_msgSend(*(id *)(a1 + 160), "setObject:forKeyedSubscript:", 0, &unk_1E49FB7A8);
    }
  }
  objc_msgSend(*(id *)(a1 + 3632), "enableForCaptureDevice:", *(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 2388) = v228;
  *(_QWORD *)(a1 + 2404) = v227;
  *(_BYTE *)(a1 + 2412) = 0;
  if (*(_BYTE *)(a1 + 3699))
  {
    if (dword_1ECFE9470)
    {
      v248 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v205 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v224, v225);
    v245 = 0u;
    v246 = 0u;
    v243 = 0u;
    v244 = 0u;
    v206 = *(void **)(a1 + 104);
    v207 = objc_msgSend(v206, "countByEnumeratingWithState:objects:count:", &v243, v295, 16);
    if (v207)
    {
      v208 = *(_QWORD *)v244;
      do
      {
        for (i2 = 0; i2 != v207; ++i2)
        {
          if (*(_QWORD *)v244 != v208)
            objc_enumerationMutation(v206);
          v210 = *(_QWORD *)(*((_QWORD *)&v243 + 1) + 8 * i2);
          v211 = -[BWVariableFrameRateParameters initWithPortType:sensorIDDictionary:]([BWVariableFrameRateParameters alloc], "initWithPortType:sensorIDDictionary:", v210, objc_msgSend(*(id *)(a1 + 104), "objectForKeyedSubscript:", v210));
          if (v211)
          {
            objc_msgSend(v205, "setObject:forKeyedSubscript:", v211, v210);

          }
        }
        v207 = objc_msgSend(v206, "countByEnumeratingWithState:objects:count:", &v243, v295, 16);
      }
      while (v207);
    }
    if (!*(_QWORD *)(a1 + 3736))
      *(_QWORD *)(a1 + 3736) = FigDispatchQueueCreateWithPriority();
    *(_DWORD *)(a1 + 3728) = 0;
    if (!*(_QWORD *)(a1 + 3704))
      *(_QWORD *)(a1 + 3704) = -[BWVariableFrameRateSelector initWithPortTypes:forParameters:frameRateSwitchBasedOnMotionDisabled:]([BWVariableFrameRateSelector alloc], "initWithPortTypes:forParameters:frameRateSwitchBasedOnMotionDisabled:", *(_QWORD *)(a1 + 120), v205, objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "commonSettings"), "frameRateSwitchBasedOnMotionForVFRDisabled"));
    if (!*(_QWORD *)(a1 + 3720))
      *(_QWORD *)(a1 + 3720) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  else
  {

    *(_QWORD *)(a1 + 3736) = 0;
    *(_QWORD *)(a1 + 3704) = 0;

    *(_QWORD *)(a1 + 3720) = 0;
  }
  v296 = 0;
  v297 = &v296;
  v298 = 0x2020000000;
  v299 = 0;
  v212 = objc_msgSend(*(id *)(a1 + 1296), "portType");
  v213 = MEMORY[0x1E0C809B0];
  if (!v212)
    v212 = objc_msgSend(*(id *)(a1 + 504), "portType");
  v214 = *(NSObject **)(a1 + 1560);
  v242[0] = v213;
  v242[1] = 3221225472;
  v242[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_213;
  v242[3] = &unk_1E491F458;
  v242[5] = v212;
  v242[6] = &v296;
  v242[4] = a1;
  dispatch_sync(v214, v242);
  v215 = v297;
  *(_BYTE *)(a1 + 3112) = *((_BYTE *)v297 + 24);
  if (v226 || *((_BYTE *)v215 + 24))
  {
    v216 = objc_alloc_init(BWDeviceMotionActivityDetector);
    *(_QWORD *)(a1 + 3072) = v216;
    if (*(_DWORD *)(a1 + 2136))
      v217 = *((_BYTE *)v297 + 24) != 0;
    else
      v217 = 0;
    -[BWDeviceMotionActivityDetector setDirectionalMotionDetectionEnabled:](v216, "setDirectionalMotionDetectionEnabled:", v217);
    *(_OWORD *)(a1 + 3084) = v228;
    *(_QWORD *)(a1 + 3100) = v227;
  }
  v218 = *(void **)(a1 + 2280);
  if (v218)
  {
    v219 = *(_DWORD *)(a1 + 2288);
    v220 = (void *)objc_msgSend(v218, "referencedObject");
    LODWORD(v221) = v219;
    objc_msgSend(v220, "setMinimumFrameRate:", v221);
  }
  v222 = mach_absolute_time();
  *(_QWORD *)(a1 + 3328) = v222;
  *(_QWORD *)(a1 + 296) = v222;
  *(_QWORD *)(a1 + 264) = v222;
  *(_QWORD *)(a1 + 368) = v222;
  *(_QWORD *)(a1 + 200) = v222;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = -1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 328) = v222;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = v222;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 3356) = 0;
  *(_QWORD *)(a1 + 3360) = 0;
  *(_DWORD *)(a1 + 3368) = -1;
  *(_QWORD *)(a1 + 3336) = 0;
  *(_DWORD *)(a1 + 3344) = 0;
  *(_QWORD *)(a1 + 3386) = 0;
  *(_OWORD *)(a1 + 3372) = 0u;
  *(_OWORD *)(a1 + 3396) = 0u;
  *(int32x2_t *)(a1 + 3432) = vdup_n_s32(0x7F7FFFFFu);
  *(_DWORD *)(a1 + 3440) = 2139095039;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_QWORD *)(a1 + 3496) = v227;
  *(_OWORD *)(a1 + 3480) = v228;
  *(_QWORD *)(a1 + 3512) = 0;
  *(_DWORD *)(a1 + 3528) = 0;
  *(_QWORD *)(a1 + 3520) = v222;
  *(_QWORD *)(a1 + 3536) = -1;
  *(_DWORD *)(a1 + 3544) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
  if (*(int *)(a1 + 3828) >= 3)
    *(_QWORD *)(a1 + 3536) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
  if (*(_QWORD *)(a1 + 1464))
  {
    *(_QWORD *)(a1 + 3448) = objc_alloc_init(BWStats);
    *(_QWORD *)(a1 + 3456) = objc_alloc_init(BWStats);
  }
  *(_QWORD *)(a1 + 3504) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_DWORD *)(a1 + 3884) = 0;
  *(_OWORD *)(a1 + 3868) = 0u;
  *(_OWORD *)(a1 + 3888) = v228;
  *(_QWORD *)(a1 + 3904) = v227;
  objc_msgSend(*(id *)(a1 + 4152), "start");
  v223 = *(NSObject **)(a1 + 4144);
  v241[0] = v213;
  v241[1] = 3221225472;
  v241[2] = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_215;
  v241[3] = &unk_1E491F158;
  v241[4] = a1;
  v241[5] = v222;
  dispatch_async(v223, v241);
  *(_BYTE *)(a1 + 4090) = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 504), "stream"), "streaming");
  *(_BYTE *)(a1 + 4089) = 1;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio](a1);
  _Block_object_dispose(&v296, 8);
}

- (id)cameraInfoByPortTypeIncludingLSCGains:(BOOL)a3 includeFocusPixelMap:(BOOL)a4 includeDefectivePixelTable:(BOOL)a5
{
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  id v20;
  void *v21;
  float v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _DWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  _BOOL4 v67;
  NSArray *obj;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;
  CGPoint v82;
  CGPoint v83;
  CGPoint v84;
  CGPoint v85;

  v5 = a5;
  v6 = a4;
  v73 = a3;
  v81 = *MEMORY[0x1E0C80C00];
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  obj = self->_captureStreams;
  v74 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
  if (v74)
  {
    v72 = *(_QWORD *)v77;
    v69 = *MEMORY[0x1E0D05938];
    v71 = *MEMORY[0x1E0D05920];
    v70 = *MEMORY[0x1E0D05900];
    v75 = *MEMORY[0x1E0D058B8];
    v60 = *MEMORY[0x1E0D05958];
    v59 = *MEMORY[0x1E0D05960];
    v63 = *MEMORY[0x1E0D05928];
    v53 = *MEMORY[0x1E0D074D0];
    v52 = *MEMORY[0x1E0D05918];
    v51 = *MEMORY[0x1E0D05948];
    v50 = *MEMORY[0x1E0D07748];
    v49 = *MEMORY[0x1E0D05978];
    v48 = *MEMORY[0x1E0D05968];
    v62 = *MEMORY[0x1E0D058E8];
    v47 = *MEMORY[0x1E0D058E0];
    v46 = *MEMORY[0x1E0D07368];
    v45 = *MEMORY[0x1E0D058B0];
    v44 = *MEMORY[0x1E0D058D8];
    v43 = *MEMORY[0x1E0D05910];
    v42 = *MEMORY[0x1E0D07740];
    v41 = *MEMORY[0x1E0D05970];
    v61 = *MEMORY[0x1E0D058D0];
    v38 = *MEMORY[0x1E0D058C8];
    v37 = *MEMORY[0x1E0D05A28];
    v34 = *MEMORY[0x1E0D05A18];
    v36 = *MEMORY[0x1E0D058F8];
    v33 = *MEMORY[0x1E0D058F0];
    v65 = *MEMORY[0x1E0D058C0];
    v64 = *MEMORY[0x1E0D05950];
    v58 = *MEMORY[0x1E0D075B0];
    v40 = *MEMORY[0x1E0D075B8];
    v39 = *MEMORY[0x1E0D05940];
    v35 = *MEMORY[0x1E0D05930];
    v57 = *MEMORY[0x1E0D07520];
    v56 = *MEMORY[0x1E0D07460];
    v55 = *MEMORY[0x1E0D07468];
    v54 = *MEMORY[0x1E0D05908];
    v67 = v6;
    v66 = v5;
    do
    {
      for (i = 0; i != v74; ++i)
      {
        if (*(_QWORD *)v77 != v72)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * i);
        v10 = (void *)objc_msgSend(v9, "portType");
        v11 = -[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10);
        if (v73)
        {
          v12 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v69) == 0;
          if (!v6)
            goto LABEL_8;
        }
        else
        {
          v12 = 0;
          if (!v6)
          {
LABEL_8:
            v13 = 0;
            if (!v5)
              goto LABEL_9;
            goto LABEL_12;
          }
        }
        v13 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v71) == 0;
        if (!v5)
        {
LABEL_9:
          v14 = 0;
          goto LABEL_13;
        }
LABEL_12:
        v14 = objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v70) == 0;
LABEL_13:
        objc_msgSend((id)objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10), "objectForKeyedSubscript:", v75), "floatValue");
        v16 = v15;
        objc_msgSend(v9, "baseZoomFactor");
        v18 = v17;
        if (v11)
          v19 = v12;
        else
          v19 = 1;
        if (((v19 | v13) & 1) == 0 && !v14 && v16 == v17)
          continue;
        if (v11)
        {
          v20 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", -[NSMutableDictionary objectForKeyedSubscript:](self->_cameraInfoByPortType, "objectForKeyedSubscript:", v10));
          if (v16 == v18)
          {
            if (v12)
              goto LABEL_34;
            goto LABEL_37;
          }
        }
        else
        {
          v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          objc_msgSend(v9, "opticalCenterOffset");
          objc_msgSend(v20, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v82), v60);
          objc_msgSend(v9, "opticalCenterOffsetInPhysicalSensorDimensions");
          objc_msgSend(v20, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v83), v59);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "geometricDistortionCoefficients"), v63);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v53, 0), v52);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "moduleInfo"), v51);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v50, 0), v49);
          v21 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v9, "pixelSize");
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v21, "numberWithFloat:"), v48);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraViewMatrix"), v62);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraPoseMatrix"), v47);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v46, 0), v45);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "sensorColorCalibrationData"), v44);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "flashCalibrationData"), v43);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v42, 0), v41);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "calibrationValidRadiusForFullFieldOfView"), v61);
          objc_msgSend(v9, "calibratedRotationAngle");
          if (v22 != 0.0)
          {
            v23 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v9, "calibratedRotationAngle");
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v23, "numberWithFloat:"), v38);
          }
          v24 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          if (objc_msgSend(v9, "hasOpticalCenterOffsetCalibratedForNarrowerFieldOfView"))
          {
            objc_msgSend(v9, "opticalCenterOffsetCalibratedForNarrowerFieldOfView");
            objc_msgSend(v24, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v84), v60);
            objc_msgSend(v9, "opticalCenterOffsetCalibratedForNarrowerFieldOfViewInPhysicalSensorDimensions");
            objc_msgSend(v24, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v85), v59);
          }
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "geometricDistortionCoefficientsCalibratedForNarrowerFieldOfView"), v63);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "cameraViewMatrixCalibratedForNarrowerFieldOfView"), v62);
          objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(v9, "calibrationValidRadiusForNarrowerFieldOfView"), v61);
          if (objc_msgSend(v24, "count"))
          {
            if (objc_msgSend(v10, "isEqualToString:", v37))
            {
              objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, v36);
              v25 = v33;
LABEL_32:
              objc_msgSend(v20, "setObject:forKeyedSubscript:", v24, v25);
              goto LABEL_33;
            }
            if (objc_msgSend(v10, "isEqualToString:", v34))
            {
              v26 = objc_msgSend(v9, "cameraViewMatrixCalibratedForNarrowerFieldOfView");
              v25 = v36;
              if (v26)
                goto LABEL_32;
            }
          }
        }
LABEL_33:
        v27 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v9, "baseZoomFactor");
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v27, "numberWithFloat:"), v75);
        v28 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v9, "baseZoomFactorAfterGDC");
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v28, "numberWithFloat:"), v65);
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v9, "nondisruptiveSwitchingZoomFactors"), v64);
        if (v12)
        {
LABEL_34:
          v29 = (void *)objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v58, 0);
          if (v29)
          {
            v30 = v29;
            v31 = (_DWORD *)objc_msgSend(v29, "bytes");
            objc_msgSend(v20, "setObject:forKeyedSubscript:", v30, v69);
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v40, 0), v39);
            if (*v31 == 2)
            {
              CMILSCOISAdaptation_convertV2LSCTableToV1LSCTable();
              objc_msgSend(v20, "setObject:forKeyedSubscript:", 0, v69);
              objc_msgSend(v20, "setObject:forKeyedSubscript:", v30, v35);
            }
          }
        }
LABEL_37:
        if (v13)
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v57, 0), v71);
        v5 = v66;
        if (v14)
        {
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v56, 0), v70);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "stream"), "getPropertyIfSupported:error:", v55, 0), v54);
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:](self->_cameraInfoByPortType, "setObject:forKeyedSubscript:", (id)objc_msgSend(v20, "copy"), v10);

        v6 = v67;
      }
      v74 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v76, v80, 16);
    }
    while (v74);
  }
  return (id)-[NSMutableDictionary copy](self->_cameraInfoByPortType, "copy");
}

- (os_unfair_lock_s)_updateSlaveFrameRateForZoomFactor:(os_unfair_lock_s *)result
{
  uint64_t v3;
  os_unfair_lock_s *v4;
  void *v5;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result + 328;
    os_unfair_lock_lock(result + 328);
    v5 = *(void **)(v3 + 1296);
    os_unfair_lock_unlock(v4);
    return (os_unfair_lock_s *)-[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](v3, v5, a2);
  }
  return result;
}

- (void)captureStream:(id)a3 didUpdatePreviewShift:(CGPoint)a4
{
  double y;
  double x;
  _BOOL4 nonDisruptiveSwitchOverInProgress;
  float v9;
  double v10;
  float v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *focusAndExposureUpdateQueue;
  int v18;
  _QWORD v19[5];
  int v20;

  if (LOBYTE(self->_overCaptureLockedStreams))
  {
    y = a4.y;
    x = a4.x;
    if (-[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream") == a3)
    {
      os_unfair_lock_lock(&self->_switchOverLock);
      nonDisruptiveSwitchOverInProgress = self->_nonDisruptiveSwitchOverInProgress;
      os_unfair_lock_unlock(&self->_switchOverLock);
      if (!nonDisruptiveSwitchOverInProgress)
      {
        objc_msgSend(a3, "baseZoomFactor");
        v10 = x / v9;
        objc_msgSend(a3, "baseZoomFactor");
        v12 = FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(v10, y / v11, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.x, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.y, self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.width);
        v14 = v13;
        if (v12 != -[BWFigVideoCaptureDevice previewShiftInSensorSpace]((uint64_t)self) || v14 != v15)
        {
          -[BWFigVideoCaptureDevice setPreviewShiftInSensorSpace:]((uint64_t)self, x, y);
          -[BWFigVideoCaptureDevice zoomFactor](self, "zoomFactor");
          focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 3221225472;
          v19[2] = __63__BWFigVideoCaptureDevice_captureStream_didUpdatePreviewShift___block_invoke;
          v19[3] = &unk_1E4920568;
          v19[4] = self;
          v20 = v18;
          dispatch_async(focusAndExposureUpdateQueue, v19);
        }
      }
    }
  }
}

- (_QWORD)_updateStreamingForegroundSegmentationNetworkUsingStage:(_QWORD *)result
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (!result[183])
      a2 = 1;
    v10 = 0u;
    v11 = 0u;
    if (a2)
      v3 = 1;
    else
      v3 = 2;
    v12 = 0uLL;
    v13 = 0uLL;
    v4 = (void *)objc_msgSend(result, "captureStreams", (_QWORD)v10);
    result = (_QWORD *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (result)
    {
      v5 = result;
      v6 = *(_QWORD *)v11;
      v7 = *MEMORY[0x1E0D077A8];
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v4);
          v9 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v8), "stream");
          objc_msgSend(v9, "setPropertyIfSupported:value:", v7, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3));
          v8 = (_QWORD *)((char *)v8 + 1);
        }
        while (v5 != v8);
        result = (_QWORD *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        v5 = result;
      }
      while (result);
    }
  }
  return result;
}

- (double)_setupZoomRampTuning
{
  float v2;

  if (a1)
  {
    *(_OWORD *)(a1 + 2804) = xmmword_1A32B2100;
    *(_QWORD *)(a1 + 2820) = 0x3EF5C28F3F160419;
    *(_WORD *)(a1 + 2828) = 1;
    *(_OWORD *)(a1 + 2832) = xmmword_1A32B2110;
    *(_OWORD *)(a1 + 2848) = xmmword_1A32B2120;
    *(_OWORD *)(a1 + 2864) = xmmword_1A32B2130;
    *(_OWORD *)(a1 + 2880) = xmmword_1A32B2140;
    *(_OWORD *)(a1 + 2896) = xmmword_1A32B2150;
    *(_OWORD *)(a1 + 2912) = xmmword_1A32B2160;
    *(_DWORD *)(a1 + 2944) = 1101004800;
    *(_OWORD *)(a1 + 2928) = xmmword_1A32B2170;
    *(_QWORD *)(a1 + 3012) = 0x41A0000042700000;
    *(_OWORD *)(a1 + 2996) = xmmword_1A32B2180;
    if (*(_DWORD *)(a1 + 3800) == 5)
    {
      v2 = flt_1A32B1F60[*(_BYTE *)(a1 + 3808) == 0];
    }
    else
    {
      v2 = 0.86;
      if ((*(_DWORD *)(a1 + 3804) - 3) >= 2)
        v2 = 1.0;
    }
    *(float *)(a1 + 3056) = v2;
    *(float *)(a1 + 3060) = v2;
    *(_DWORD *)(a1 + 2980) = 1102577664;
    *(_OWORD *)(a1 + 2948) = xmmword_1A32B2190;
    *(_OWORD *)(a1 + 2964) = xmmword_1A32B21A0;
    *(_QWORD *)(a1 + 3048) = 4735535009300480000;
    result = 5.76460878e17;
    *(_OWORD *)(a1 + 3032) = xmmword_1A32B21B0;
  }
  return result;
}

- (void)_setISPZoomFactorSynchronously:(uint64_t)a1
{
  os_unfair_lock_s *v4;

  if (a1)
  {
    v4 = (os_unfair_lock_s *)(a1 + 2776);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2776));
    *(_DWORD *)(a1 + 2768) = 0;
    *(float *)(a1 + 2764) = a2;
    *(float *)(a1 + 2772) = a2;
    os_unfair_lock_unlock(v4);
    -[BWFigVideoCaptureDevice _setNewISPZoomFactorOnStream](a1);
  }
}

- (void)_resetSDOFEffectAndStagePreviewStatus
{
  os_unfair_lock_s *v2;

  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 1500);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1500));
    *(_QWORD *)(a1 + 1504) = 0;
    os_unfair_lock_unlock(v2);
  }
}

- (uint64_t)_updateUltraHighResSensorRawPool
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  void *v9;
  BWVideoFormatRequirements *v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  BWPixelBufferPool *v15;
  BWPixelBufferPool *v16;
  uint64_t v17;
  uint64_t v18;
  BWVideoFormatRequirements *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 140))
    {
      if (*(_BYTE *)(result + 156))
      {
        FigDebugAssert3();
      }
      else
      {
        v2 = (os_unfair_lock_s *)(result + 144);
        os_unfair_lock_lock((os_unfair_lock_t)(result + 144));
        v3 = *(id *)(v1 + 160);
        if (!v3)
        {
          v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          *(_QWORD *)(v1 + 160) = v3;
        }
        v4 = objc_msgSend(v3, "objectForKeyedSubscript:", &unk_1E49FB7A8);
        if (v4)
        {
          v5 = (void *)v4;
          v6 = *(unsigned int *)(v1 + 176);
          if (dword_1ECFE9470)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v5, "flushToMinimumCapacity:", v6, v17, v18);
          objc_msgSend(v5, "setCapacity:", v6);
        }
        else
        {
          v8 = objc_msgSend((id)v1, "sensorRawPoolRequirements");
          if (!v8)
            return 4294954516;
          v9 = (void *)v8;
          v10 = objc_alloc_init(BWVideoFormatRequirements);
          -[BWVideoFormatRequirements setWidth:](v10, "setWidth:", *(int *)(v1 + 148));
          -[BWVideoFormatRequirements setHeight:](v10, "setHeight:", *(int *)(v1 + 152));
          -[BWVideoFormatRequirements setBytesPerRowAlignment:](v10, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8F68]), "intValue"));
          -[BWVideoFormatRequirements setPlaneAlignment:](v10, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9048]), "intValue"));
          -[BWVideoFormatRequirements setHeightAlignment:](v10, "setHeightAlignment:", 16);
          v20[0] = objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9040]);
          -[BWVideoFormatRequirements setSupportedPixelFormats:](v10, "setSupportedPixelFormats:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1));
          -[BWVideoFormatRequirements setSupportedCacheModes:](v10, "setSupportedCacheModes:", +[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess](BWVideoFormatRequirements, "cacheModesForOptimizedDisplayAccess"));
          if (!-[NSArray count](-[BWVideoFormatRequirements supportedPixelFormats](v10, "supportedPixelFormats"), "count"))return 4294954516;
          v19 = v10;
          v11 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1));
          if (!v11)
            return 4294954516;
          v12 = v11;
          v13 = *(unsigned int *)(v1 + 176);
          if (dword_1ECFE9470)
          {
            v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v15 = [BWPixelBufferPool alloc];
          v16 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v15, "initWithVideoFormat:capacity:name:memoryPool:", v12, v13, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_UltraHighResolutionSensorRawBufferPool"), BWStringFromCaptureDeviceType(*(_DWORD *)(v1 + 492))), *(_QWORD *)(v1 + 3632));
          objc_msgSend(*(id *)(v1 + 160), "setObject:forKeyedSubscript:", v16, &unk_1E49FB7A8);

        }
        os_unfair_lock_unlock(v2);
      }
    }
    return 0;
  }
  return result;
}

- (uint64_t)_updateSensorRawPool
{
  void *v2;
  void *v3;
  int v4;
  os_unfair_lock_s *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BWVideoFormatRequirements *v12;
  id v13;
  id v14;
  int v15;
  NSObject *v16;
  BWPixelBufferPool *v17;
  uint64_t v18;
  BWPixelBufferPool *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  BWVideoFormatRequirements *v27;
  _QWORD v28[4];

  v28[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (!*(_BYTE *)(a1 + 140))
    goto LABEL_28;
  if (*(_BYTE *)(a1 + 156))
  {
    FigDebugAssert3();
LABEL_28:
    v17 = 0;
    v18 = 0;
    goto LABEL_25;
  }
  v2 = (void *)objc_msgSend((id)a1, "sensorRawPoolRequirements");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9060]), "intValue");
    v5 = (os_unfair_lock_s *)(a1 + 144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v6 = *(id *)(a1 + 160);
    if (!v6)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      *(_QWORD *)(a1 + 160) = v6;
    }
    v7 = objc_msgSend(v6, "objectForKeyedSubscript:", &unk_1E49FB7C0);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = *(unsigned int *)(a1 + 168);
      v10 = v9 + v4;
      if (dword_1ECFE9470)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v5 = (os_unfair_lock_s *)(a1 + 144);
      }
      objc_msgSend(v8, "flushToMinimumCapacity:", v10, v25, v26);
      objc_msgSend(v8, "setCapacity:", v10);
      v17 = 0;
      goto LABEL_23;
    }
    v12 = objc_alloc_init(BWVideoFormatRequirements);
    -[BWVideoFormatRequirements setWidth:](v12, "setWidth:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA90E0]), "intValue"));
    -[BWVideoFormatRequirements setHeight:](v12, "setHeight:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FD8]), "intValue"));
    if (FigCaptureVideoDimensionsAreValid(-[BWVideoFormatRequirements width](v12, "width") | ((unint64_t)-[BWVideoFormatRequirements height](v12, "height") << 32)))
    {
      -[BWVideoFormatRequirements setBytesPerRowAlignment:](v12, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8F68]), "intValue"));
      -[BWVideoFormatRequirements setPlaneAlignment:](v12, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9048]), "intValue"));
      -[BWVideoFormatRequirements setHeightAlignment:](v12, "setHeightAlignment:", 16);
      v28[0] = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9040]);
      -[BWVideoFormatRequirements setSupportedPixelFormats:](v12, "setSupportedPixelFormats:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 1));
      -[BWVideoFormatRequirements setSupportedCacheModes:](v12, "setSupportedCacheModes:", +[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess](BWVideoFormatRequirements, "cacheModesForOptimizedDisplayAccess"));
      if (-[NSArray count](-[BWVideoFormatRequirements supportedPixelFormats](v12, "supportedPixelFormats"), "count"))
      {
        v27 = v12;
        v13 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v27, 1));
        if (v13)
        {
          v14 = v13;
          v9 = *(unsigned int *)(a1 + 168);
          v15 = v9 + v4;
          if (dword_1ECFE9470)
          {
            v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v19 = [BWPixelBufferPool alloc];
          v17 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v19, "initWithVideoFormat:capacity:name:memoryPool:", v14, v15, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_SensorRawBufferPool"), BWStringFromCaptureDeviceType(*(_DWORD *)(a1 + 492))), *(_QWORD *)(a1 + 3632));
          if (!v17)
          {
            FigDebugAssert3();
            v18 = 0;
            goto LABEL_24;
          }
          if (objc_msgSend((id)a1, "isBravoVariant"))
          {
            v20 = (void *)objc_msgSend(*(id *)(a1 + 552), "syncGroup");
            v21 = objc_msgSend(v20, "setProperty:value:", *MEMORY[0x1E0D081F0], -[BWPixelBufferPool cvPixelBufferPool](v17, "cvPixelBufferPool"));
            if ((_DWORD)v21)
            {
              v18 = v21;
              goto LABEL_29;
            }
          }
          else
          {
            v22 = (void *)objc_msgSend(*(id *)(a1 + 504), "stream");
            v23 = objc_msgSend(v22, "setProperty:value:", *MEMORY[0x1E0D07750], -[BWPixelBufferPool cvPixelBufferPool](v17, "cvPixelBufferPool"));
            if ((_DWORD)v23)
            {
              v18 = v23;
              goto LABEL_29;
            }
          }
          objc_msgSend(*(id *)(a1 + 160), "setObject:forKeyedSubscript:", v17, &unk_1E49FB7C0);
LABEL_23:
          v18 = -[BWFigVideoCaptureDevice _setPropertySensorRawBufferPoolRetainCount:]((id *)a1, v9);
          if (!(_DWORD)v18)
          {
LABEL_24:
            os_unfair_lock_unlock(v5);
            goto LABEL_25;
          }
LABEL_29:
          FigDebugAssert3();
          goto LABEL_24;
        }
      }
    }
  }
  v17 = 0;
  v18 = 4294954516;
LABEL_25:

  return v18;
}

- (uint64_t)_setPropertySensorRawBufferPoolRetainCount:(id *)a1
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  if (!a1)
    return 0;
  if (objc_msgSend(a1, "isBravoVariant"))
  {
    v4 = (void *)objc_msgSend((id)objc_msgSend(a1[69], "syncGroup"), "supportedProperties");
    v5 = *MEMORY[0x1E0D08208];
    if (objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D08208]))
    {
      v6 = (void *)objc_msgSend(a1[69], "syncGroup");
      v7 = objc_msgSend(v6, "setProperty:value:", v5, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
      if ((_DWORD)v7)
        goto LABEL_8;
      return v7;
    }
  }
  v8 = (void *)objc_msgSend((id)objc_msgSend(a1[63], "stream"), "supportedProperties");
  v9 = *MEMORY[0x1E0D07768];
  if (!objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D07768]))
    return 0;
  v10 = (void *)objc_msgSend(a1[63], "stream");
  v7 = objc_msgSend(v10, "setProperty:value:", v9, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
  if ((_DWORD)v7)
LABEL_8:
    FigDebugAssert3();
  return v7;
}

- (void)_sendPreferredMasterStreamChangedNotificationWithPortType:(void *)result
{
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = CFSTR("NewPropertyValue");
    v3[0] = a2;
    return (void *)objc_msgSend(result, "_postNotificationWithPayload:notificationPayload:", CFSTR("PreferredBravoMasterStreamChangedNotification"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
  }
  return result;
}

uint64_t __56__BWFigVideoCaptureDevice__setExposureModeAutoWithRect___block_invoke(uint64_t a1)
{
  double MidX;
  CGFloat MidY;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v10;
  float v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  MidX = CGRectGetMidX(*(CGRect *)(a1 + 48));
  MidY = CGRectGetMidY(*(CGRect *)(a1 + 48));
  v4 = MidX != 0.5;
  if (MidY != 0.5)
    v4 = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 1696) = v4;
  v5 = *(_QWORD *)(a1 + 32);
  *(double *)(v5 + 1664) = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(v5 + 1768), *(double *)(v5 + 1776), *(double *)(v5 + 1784));
  *(_QWORD *)(v5 + 1672) = v6;
  *(_QWORD *)(v5 + 1680) = v7;
  *(_QWORD *)(v5 + 1688) = v8;
  v9 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace](*(_QWORD *)(a1 + 32));
  v10 = *(double **)(a1 + 32);
  objc_msgSend(v10, "zoomFactor");
  v12 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v10[208], v10[209], v10[210], v10[211], v11, v9);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v23[0] = CFSTR("x");
  v24[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v12);
  v23[1] = CFSTR("y");
  v24[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v14);
  v23[2] = CFSTR("w");
  v24[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v16);
  v23[3] = CFSTR("h");
  v24[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v18);
  v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = &kFigImageControlSampleBufferProcessorProperty_AutoExposure;
  if (*(_BYTE *)(v20 + 1696))
    v21 = &kFigImageControlSampleBufferProcessorProperty_SpotMeteredExposure;
  result = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v20, *v21, v19);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  double v16;
  float v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[11];
  char v25;
  char v26;

  v2 = 3584;
  if (!*(_BYTE *)(a1 + 88))
    v2 = 1768;
  v3 = 3592;
  if (!*(_BYTE *)(a1 + 88))
    v3 = 1776;
  v4 = 3600;
  if (!*(_BYTE *)(a1 + 88))
    v4 = 1784;
  v5 = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(*(_QWORD *)(a1 + 32) + v2), *(double *)(*(_QWORD *)(a1 + 32) + v3), *(double *)(*(_QWORD *)(a1 + 32) + v4));
  v9 = v5;
  v10 = v6;
  v11 = v7;
  v12 = v8;
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(a1 + 89))
  {
    *(double *)(v13 + 1704) = v5;
    *(double *)(v13 + 1712) = v6;
    *(double *)(v13 + 1720) = v7;
    *(double *)(v13 + 1728) = v8;
  }
  else
  {
    v14 = (_OWORD *)(v13 + 1704);
    v15 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *v14 = *MEMORY[0x1E0C9D628];
    v14[1] = v15;
  }
  v16 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace](*(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 32), "zoomFactor");
  v18 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v9, v10, v11, v12, v17, v16);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(NSObject **)(v19 + 1584);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke_2;
  v24[3] = &unk_1E49224C0;
  v24[4] = v19;
  v25 = *(_BYTE *)(a1 + 90);
  *(double *)&v24[5] = v18;
  v24[6] = v21;
  v24[7] = v22;
  v24[8] = v23;
  v24[10] = *(_QWORD *)(a1 + 80);
  v26 = *(_BYTE *)(a1 + 91);
  v24[9] = *(_QWORD *)(a1 + 72);
  dispatch_sync(v20, v24);
}

- (BOOL)shallowDepthOfFieldEffectEnabled
{
  return self->_shallowDepthOfFieldEffectEnabled;
}

- (float)zoomFactor
{
  float result;
  double v3;

  if (LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension))
  {
    objc_msgSend(-[NSArray firstObject](-[BWFigVideoCaptureDevice captureStreams](self, "captureStreams"), "firstObject"), "cmioZoomFactor");
  }
  else if (LOBYTE(self->_depthDataDeliveryZoomRange))
  {
    objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "manualFramingVideoZoomFactor");
    return v3;
  }
  else
  {
    -[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor");
  }
  return result;
}

- (void)_updateStateUsingVideoSampleBuffer:(void *)a3 fromCaptureStream:
{
  void *v4;
  double v6;
  double v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  _OWORD *v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t k;
  void *v36;
  const char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t i;
  unsigned int v44;
  int v45;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, void *);
  uint64_t FigBaseObject;
  void (*v54)(uint64_t, __CFString *, _QWORD, CMTime *);
  int v55;
  int v56;
  char v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  BWDeviceMotionActivityDetector *v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  _BOOL8 v85;
  char v86;
  int v87;
  void *v88;
  const __CFString *v89;
  int v90;
  NSObject *v91;
  const __CFDictionary *v92;
  const __CFDictionary *v93;
  const __CFNumber *v94;
  const __CFNumber *v95;
  _BOOL4 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  const __CFDictionary *v103;
  const __CFNumber *v104;
  int v105;
  int v106;
  _QWORD *v107;
  uint64_t v108;
  int v109;
  char v110;
  int v111;
  int v112;
  int v113;
  os_unfair_lock_s *v114;
  id v115;
  id v116;
  void *v117;
  unint64_t v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  CGFloat v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  CMTimeValue v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  uint64_t v130;
  double v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  CMTimeEpoch v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t m;
  uint64_t v144;
  void *v145;
  char v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  unint64_t v152;
  int v153;
  void *v154;
  __CVBuffer *ImageBuffer;
  void *v156;
  int32x4_t v157;
  int v158;
  void *v159;
  _DWORD *v160;
  NSObject *v161;
  int v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  os_unfair_lock_s *v169;
  int v170;
  os_unfair_lock_s *lock;
  int v172;
  int v173;
  int v174;
  char v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  int v179;
  const __CFString *v180;
  int v181;
  int v182;
  void *v183;
  void *v184;
  char v185;
  char v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _QWORD v191[5];
  int v192;
  _QWORD block[6];
  int v194;
  int v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  unint64_t v212;
  _BYTE v213[128];
  _BYTE time1[34];
  CMTime v215;
  void *v216;
  uint64_t v217;
  _BYTE v218[128];
  _BYTE v219[128];
  _BYTE v220[128];
  CMTime rhs;
  _BYTE v222[128];
  _QWORD v223[2];
  _QWORD valuePtr[2];
  _QWORD v225[2];
  CMTime lhs;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v4 = (void *)target;
  v180 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v183 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!*(_BYTE *)(a1 + 3864))
    goto LABEL_16;
  v7 = -[BWFigVideoCaptureDevice _accumulateTimeOfFLightStreamingTime:](a1, v4, v6);
  if (!*(_BYTE *)(a1 + 3864) || (*(_BYTE *)(a1 + 180) & 4) != 0)
    goto LABEL_16;
  v8 = *MEMORY[0x1E0D06BF8];
  if (objc_msgSend((id)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BF8], v7), "intValue") != 7)
  {
    v9 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]);
    if (!v9)
      goto LABEL_16;
    v10 = v9;
    v210 = 0u;
    v211 = 0u;
    v208 = 0u;
    v209 = 0u;
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v208, v222, 16);
    if (!v11)
      goto LABEL_16;
    v12 = v11;
    v13 = *(_QWORD *)v209;
LABEL_10:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v209 != v13)
        objc_enumerationMutation(v10);
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v208 + 1) + 8 * v14)), "objectForKeyedSubscript:", v8), "intValue") == 7)break;
      if (v12 == ++v14)
      {
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v208, v222, 16);
        if (v12)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
  }
  *(int8x8_t *)(a1 + 180) = vorr_s8(*(int8x8_t *)(a1 + 180), (int8x8_t)0x2000000004);
LABEL_16:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
  v170 = objc_msgSend(*(id *)(a1 + 2552), "currentState");
  if (objc_msgSend(*(id *)(a1 + 2552), "currentState") == 8 || *(_BYTE *)(a1 + 2266))
  {
    if (*(_BYTE *)(a1 + 2600))
    {
      v178 = 1;
      v15 = 1;
    }
    else
    {
      v15 = 1;
      LODWORD(v178) = *(_BYTE *)(a1 + 2601) != 0;
      HIDWORD(v178) = v178;
    }
  }
  else
  {
    v178 = 0;
    v15 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1288));
  v16 = *(void **)(a1 + 3072);
  v184 = a3;
  if (!v16)
    goto LABEL_27;
  objc_msgSend(v16, "processSampleBuffer:", v4);
  memset(&v215, 0, sizeof(v215));
  CMSampleBufferGetPresentationTimeStamp(&v215, (CMSampleBufferRef)v4);
  v17 = (_OWORD *)(a1 + 3084);
  if ((*(_BYTE *)(a1 + 3096) & 1) == 0)
    goto LABEL_24;
  memset(time1, 0, 24);
  lhs = v215;
  *(_OWORD *)&rhs.value = *v17;
  rhs.epoch = *(_QWORD *)(a1 + 3100);
  CMTimeSubtract((CMTime *)time1, &lhs, &rhs);
  lhs = *(CMTime *)time1;
  if (CMTimeGetSeconds(&lhs) < *(float *)(a1 + 3108))
  {
LABEL_27:
    v18 = 0;
    goto LABEL_28;
  }
  if (!v15 || *(_BYTE *)(a1 + 3112))
  {
    *(_BYTE *)(a1 + 3080) = objc_msgSend(*(id *)(a1 + 3072), "isStationary");
    if (*(_BYTE *)(a1 + 3204)
      && (v206 = 0u,
          v207 = 0u,
          v204 = 0u,
          v205 = 0u,
          v38 = *(void **)(a1 + 560),
          (v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v204, v220, 16)) != 0))
    {
      v40 = v39;
      v41 = v4;
      v42 = *(_QWORD *)v205;
      do
      {
        for (i = 0; i != v40; ++i)
        {
          if (*(_QWORD *)v205 != v42)
            objc_enumerationMutation(v38);
          objc_msgSend(*(id *)(*((_QWORD *)&v204 + 1) + 8 * i), "setIsStationary:", *(unsigned __int8 *)(a1 + 3080));
        }
        v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v204, v220, 16);
      }
      while (v40);
      v18 = 1;
      v4 = v41;
      a3 = v184;
    }
    else
    {
      v18 = 1;
    }
    goto LABEL_25;
  }
LABEL_24:
  v18 = 0;
LABEL_25:
  *v17 = *(_OWORD *)&v215.value;
  *(_QWORD *)(a1 + 3100) = v215.epoch;
LABEL_28:
  v169 = (os_unfair_lock_s *)(a1 + 1288);
  v182 = v15;
  if (*(_QWORD *)(a1 + 2016) && objc_msgSend(*(id *)(a1 + 1960), "frameCount"))
  {
    v175 = v18;
    if (!*(_BYTE *)(a1 + 2024))
    {
      if (*(_BYTE *)(a1 + 1472) || *(_BYTE *)(a1 + 217))
      {
        v166 = v4;
        if ((unint64_t)objc_msgSend(*(id *)(a1 + 1960), "frameCount") <= 1)
          objc_msgSend(*(id *)(a1 + 2032), "removeAllObjects");
        v19 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]);
        v200 = 0u;
        v201 = 0u;
        v202 = 0u;
        v203 = 0u;
        v20 = *(void **)(a1 + 120);
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v200, v219, 16);
        if (v21)
        {
          v22 = v21;
          v23 = *(_QWORD *)v201;
          v24 = *MEMORY[0x1E0D06D88];
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v201 != v23)
                objc_enumerationMutation(v20);
              v26 = *(void **)(*((_QWORD *)&v200 + 1) + 8 * j);
              if ((objc_msgSend(v26, "isEqualToString:", objc_msgSend(v184, "portType")) & 1) == 0)
              {
                v27 = objc_msgSend(v19, "objectForKeyedSubscript:", v26);
                if (v27)
                {
                  if (!*(_BYTE *)(a1 + 1999)
                    || (v28 = (void *)v27, !objc_msgSend(v183, "objectForKeyedSubscript:", v24))
                    || objc_msgSend(v28, "objectForKeyedSubscript:", v24)
                    || *(_QWORD *)(a1 + 1464))
                  {
                    v29 = (void *)objc_msgSend(*(id *)(a1 + 2032), "objectForKeyedSubscript:", v26);
                    if (!v29)
                      v29 = &unk_1E49FB790;
                    objc_msgSend(*(id *)(a1 + 2032), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v29, "intValue") - 1), v26);
                  }
                }
              }
            }
            v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v200, v219, 16);
          }
          while (v22);
        }
        v198 = 0u;
        v199 = 0u;
        v196 = 0u;
        v197 = 0u;
        v30 = *(void **)(a1 + 2032);
        v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v196, v218, 16);
        if (v31)
        {
          v32 = v31;
          v33 = 0;
          v34 = *(_QWORD *)v197;
          a3 = v184;
          v15 = v182;
          do
          {
            for (k = 0; k != v32; ++k)
            {
              if (*(_QWORD *)v197 != v34)
                objc_enumerationMutation(v30);
              v36 = *(void **)(*((_QWORD *)&v196 + 1) + 8 * k);
              if ((int)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2032), "objectForKeyedSubscript:", v36), "intValue") <= 0)
              {
                if (!v33)
                  v33 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                objc_msgSend(v33, "addObject:", BWPortTypeToDisplayString(v36, v37));
              }
            }
            v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v196, v218, 16);
          }
          while (v32);
        }
        else
        {
          v33 = 0;
          a3 = v184;
          v15 = v182;
        }
        if (*(_BYTE *)(a1 + 3640))
          v44 = -[BWFigVideoCaptureDevice overCaptureActiveSlaveStreamForcedOff]((os_unfair_lock_s *)a1);
        else
          v44 = 0;
        v4 = v166;
        if (objc_msgSend(v33, "count"))
          v45 = 1;
        else
          v45 = v44;
        *(_BYTE *)(a1 + 2024) = v45;
        if (v45 == 1 && dword_1ECFE9470)
        {
          LODWORD(lhs.value) = 0;
          LOBYTE(rhs.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = lhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
            v48 = value;
          else
            v48 = value & 0xFFFFFFFE;
          if (v48)
          {
            v49 = objc_msgSend(*(id *)(a1 + 1960), "frameCount");
            v50 = objc_msgSend(v33, "componentsJoinedByString:", CFSTR(", "));
            *(_DWORD *)time1 = 136315906;
            *(_QWORD *)&time1[4] = "-[BWFigVideoCaptureDevice _updateStateUsingVideoSampleBuffer:fromCaptureStream:]";
            *(_WORD *)&time1[12] = 1026;
            *(_DWORD *)&time1[14] = v49;
            *(_WORD *)&time1[18] = 2114;
            *(_QWORD *)&time1[20] = v50;
            *(_WORD *)&time1[28] = 1026;
            *(_DWORD *)&time1[30] = v44;
            LODWORD(v165) = 34;
            v163 = time1;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v15 = v182;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 2024) = 1;
      }
    }
    if (-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines]((os_unfair_lock_s *)a1))
      objc_msgSend(*(id *)(a1 + 2016), "reset");
    v18 = v175;
    if (*(_BYTE *)(a1 + 2024))
      objc_msgSend(*(id *)(a1 + 2016), "addMetadata:", v183);
  }
  v51 = *(_QWORD *)(a1 + 1608);
  if (v51)
  {
    v52 = *(void (**)(uint64_t, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v52)
      v52(v51, v4);
    if (*(_BYTE *)(a1 + 3164))
    {
      v215.value = 0;
      FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
      v54 = *(void (**)(uint64_t, __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
      if (v54)
        v54(FigBaseObject, CFSTR("DeviceRotationDegrees"), *MEMORY[0x1E0C9AE00], &v215);
      v55 = objc_msgSend((id)v215.value, "intValue", v163, v165);
      if (!v215.value || v55 < 0 || v55 > 270)
        goto LABEL_108;
      v56 = FigCaptureExifOrientationFromRotationDegreesAndMirroring(v55, 0);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3172));
      if (v56 != *(_DWORD *)(a1 + 3168))
        *(_DWORD *)(a1 + 3168) = v56;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3172));
      if (v56)
      {
        v57 = 0;
      }
      else
      {
LABEL_108:
        if ((_updateStateUsingVideoSampleBuffer_fromCaptureStream__sHasReportedInvalidOrientation & 1) != 0)
        {
LABEL_111:

          goto LABEL_112;
        }
        v57 = 1;
      }
      _updateStateUsingVideoSampleBuffer_fromCaptureStream__sHasReportedInvalidOrientation = v57;
      goto LABEL_111;
    }
  }
LABEL_112:
  if (!*(_DWORD *)(a1 + 3348))
  {
    v58 = *MEMORY[0x1E0D06940];
    if (objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06940]))
      *(_DWORD *)(a1 + 3348) = objc_msgSend((id)objc_msgSend(v183, "objectForKeyedSubscript:", v58), "intValue");
  }
  if (!*(_DWORD *)(a1 + 3352))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3172));
    v59 = *(_DWORD *)(a1 + 3168);
    if (v59)
      *(_DWORD *)(a1 + 3352) = v59;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3172));
  }
  v60 = objc_msgSend(*(id *)(a1 + 4152), "currentOrientation", v163) - 1;
  if (v60 > 5)
    v61 = 0;
  else
    v61 = dword_1A32B2094[v60];
  if (v61 != *(_DWORD *)(a1 + 400))
  {
    v62 = mach_absolute_time();
    -[BWFigVideoCaptureDevice _updateOrientationTotalTimes:](a1, v62);
    *(_DWORD *)(a1 + 400) = v61;
    *(_QWORD *)(a1 + 408) = v62;
  }
  v63 = *(void **)(a1 + 1968);
  objc_msgSend(*(id *)(a1 + 1960), "copyTo:", v63);
  if (v183 && v63)
    objc_msgSend(v63, "updateWithFrameMetadata:updateFocusDistance:", v183, v15 ^ 1u);
  v64 = objc_msgSend((id)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06790]), "BOOLValue");
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)(a1 + 1960);
  *(_QWORD *)(a1 + 1960) = v63;
  v172 = *(unsigned __int8 *)(a1 + 2439);
  *(_BYTE *)(a1 + 2439) = 0;
  v65 = *(_DWORD *)(a1 + 2084);
  if ((v65 - 5) >= 3 && (*(_DWORD *)(a1 + 2088) - 5) > 2)
  {
    v69 = 1;
    goto LABEL_144;
  }
  if ((v18 & 1) != 0)
  {
    v66 = *(_DWORD *)(a1 + 2132);
    if (!*(_BYTE *)(a1 + 3080) && v66 >= *(_DWORD *)(a1 + 2128) - 1)
      v66 = *(_DWORD *)(a1 + 2128) - 1;
    v67 = v66 & ~(v66 >> 31);
    *(_DWORD *)(a1 + 2128) = v67;
  }
  else
  {
    v67 = *(_DWORD *)(a1 + 2128);
  }
  if (v67 < 1)
  {
    if (v65 == 7)
    {
      v68 = 6;
      goto LABEL_141;
    }
LABEL_142:
    v69 = 0;
    goto LABEL_144;
  }
  if (v65 != 6 && *(_DWORD *)(a1 + 2088) != 6)
    goto LABEL_142;
  v68 = 7;
LABEL_141:
  v69 = 0;
  *(_DWORD *)(a1 + 2088) = v68;
  *(_BYTE *)(a1 + 2083) = 1;
LABEL_144:
  v174 = *(_DWORD *)(a1 + 2428);
  v176 = *(_DWORD *)(a1 + 2424);
  v173 = *(_DWORD *)(a1 + 2432);
  v70 = *(unsigned int *)(a1 + 2192);
  lock = (os_unfair_lock_s *)(a1 + 1956);
  if (v64 && *(_DWORD *)(a1 + 2088) == 3)
  {
    v71 = 3;
LABEL_159:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
    goto LABEL_163;
  }
  v71 = *(_DWORD *)(a1 + 2088);
  if ((v15 & v69 & 1) != 0 || !*(_BYTE *)(a1 + 2083))
    goto LABEL_159;
  *(_DWORD *)(a1 + 2084) = v71;
  *(_BYTE *)(a1 + 2083) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
  v72 = v71 - 5;
  *(_BYTE *)(a1 + 3112) = (v71 - 5) < 3;
  v73 = *(BWDeviceMotionActivityDetector **)(a1 + 3072);
  if (!v73 && v72 <= 2)
  {
    v73 = objc_alloc_init(BWDeviceMotionActivityDetector);
    *(_QWORD *)(a1 + 3072) = v73;
    v74 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(a1 + 3084) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(a1 + 3100) = *(_QWORD *)(v74 + 16);
    goto LABEL_152;
  }
  if ((v65 - 5) < 3 || v72 <= 2)
  {
LABEL_152:
    if (*(_DWORD *)(a1 + 2136))
      v75 = v72 >= 3;
    else
      v75 = 1;
    v76 = !v75;
    -[BWDeviceMotionActivityDetector setDirectionalMotionDetectionEnabled:](v73, "setDirectionalMotionDetectionEnabled:", v76);
  }
  v77 = objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  v78 = *(NSObject **)(a1 + 1560);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke;
  block[3] = &unk_1E491EC68;
  v194 = v71;
  v195 = v65;
  block[4] = a1;
  block[5] = v77;
  dispatch_async(v78, block);
LABEL_163:
  if (*(_BYTE *)(a1 + 1654))
    -[BWFigVideoCaptureDevice _serviceDeferredAutofocusProcessorPropertiesFromCaptureStream:frameStatisticsByPortType:](a1, a3, v63);
  if (*(_BYTE *)(a1 + 1472))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4048));
    objc_msgSend(*(id *)(a1 + 4056), "fudgedLowerBound");
    v80 = v79;
    objc_msgSend(*(id *)(a1 + 4056), "fudgedUpperBound");
    v82 = v81;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4048));
    v85 = v80 == 0.0
       || (objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor"), v83 < v80)
       || (objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor"), v82 < v84)
       || *(float *)(a1 + 1476) == 0.0
       || *(_BYTE *)(a1 + 4044) != 0;
    CMSetAttachment(v4, CFSTR("DepthDisabled"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v85), 1u);
  }
  if (*(_QWORD *)(a1 + 1520))
  {
    v86 = *(_BYTE *)(a1 + 1512) ? v15 : 1;
    if ((v86 & 1) == 0)
      -[BWFigVideoCaptureDevice _serviceSDOFSceneMonitoringWithCaptureStream:sampleBuffer:frameStatisticsByPortType:flashModeForSceneMonitoring:hdrModeForSceneMonitoring:qualityPrioritizationForSceneMonitoring:streamingImageIntent:](a1, a3, v4, v63, v176, v174, v173);
  }
  if (*(_QWORD *)(a1 + 1320))
  {
    if ((v15 & 1) == 0)
      -[BWFigVideoCaptureDevice _serviceBravoStreamSelectionWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:streamingImageIntent:](a1, v4, v184, (uint64_t)v63, v71);
    if (!CMGetAttachment(v4, CFSTR("RecommendedMasterPortType"), 0))
    {
      CMSetAttachment(v4, CFSTR("RecommendedMasterPortType"), (CFTypeRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1320), "recommendedMasterStream"), "portType"), 1u);
      CMSetAttachment(v4, CFSTR("PreferredMasterPortType"), (CFTypeRef)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1320), "preferredMasterStreamIgnoringEligibleFallbackPortTypes"), "portType"), 1u);
      CMSetAttachment(v4, CFSTR("LastRecommendedMasterSelectionReason"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 1320), "lastSelectionReason")), 1u);
    }
  }
  v87 = v15 ^ 1;
  v88 = v184;
  if ((v178 | v87) == 1)
    -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:streamingImageIntent:](a1, v4, v184, v63, v71);
  if (HIDWORD(v178))
    objc_msgSend((id)a1, "_resetStillImageCaptureRequestState");
  -[BWFigVideoCaptureDevice _servicePendingStillImageCapture](a1);
  v89 = v180;
  if (*(_QWORD *)(a1 + 1464))
    objc_msgSend(*(id *)(a1 + 552), "setMasterStream:allStreams:", *(_QWORD *)(a1 + 504), *(_QWORD *)(a1 + 560));
  if (*(_BYTE *)(a1 + 1450))
    -[BWFigVideoCaptureDevice _serviceMacroFocusDetectionWithFrameStatisticsByPortType:](a1, v63);
  if (*(_QWORD *)(a1 + 3704))
    -[BWFigVideoCaptureDevice _serviceVariableFrameRateWithSampleBuffer:fromCaptureStream:frameStatisticsByPortType:](a1, (uint64_t)v4, v184, v63);
  if (v65 == 8
    && objc_msgSend(*(id *)(a1 + 3816), "detectFlickerWithSampleBuffer:fromCaptureStreamWithPortType:", v4, objc_msgSend(v184, "portType")))
  {
    v90 = objc_msgSend(*(id *)(a1 + 3816), "flickerFrequency");
    v91 = *(NSObject **)(a1 + 1560);
    v191[0] = MEMORY[0x1E0C809B0];
    v191[1] = 3221225472;
    v191[2] = __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke_2;
    v191[3] = &unk_1E4920568;
    v191[4] = a1;
    v192 = v90;
    dispatch_async(v91, v191);
  }
  -[BWFigVideoCaptureDevice _servicePropertyChangeNotifications:](a1, v4);
  if (!v4)
  {
    FigDebugAssert3();
    v165 = v167;
    LODWORD(v164) = 0;
    v88 = v184;
    v89 = v180;
LABEL_349:
    FigDebugAssert3();
    goto LABEL_226;
  }
  v92 = (const __CFDictionary *)CMGetAttachment(v4, v180, 0);
  if (v92)
  {
    v93 = v92;
    v94 = (const __CFNumber *)CFDictionaryGetValue(v92, (const void *)*MEMORY[0x1E0D067A0]);
    if (v94)
    {
      LODWORD(valuePtr[0]) = 0;
      LODWORD(v223[0]) = 0;
      CFNumberGetValue(v94, kCFNumberSInt32Type, valuePtr);
      v95 = (const __CFNumber *)CFDictionaryGetValue(v93, (const void *)*MEMORY[0x1E0D06788]);
      if (v95)
      {
        CFNumberGetValue(v95, kCFNumberSInt32Type, v223);
        v96 = LODWORD(v223[0]) != 0;
      }
      else
      {
        v96 = 0;
      }
      if (LODWORD(valuePtr[0]))
        v97 = 1;
      else
        v97 = v96;
      pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 1600));
      if (*(_BYTE *)(a1 + 1616))
      {
        if (*(_DWORD *)(a1 + 1644))
        {
          if ((*(_BYTE *)(a1 + 1632) & 1) != 0)
          {
            memset(&v215, 0, sizeof(v215));
            CMSampleBufferGetPresentationTimeStamp(&v215, (CMSampleBufferRef)v4);
            *(CMTime *)time1 = v215;
            lhs = *(CMTime *)(a1 + 1620);
            if (CMTimeCompare((CMTime *)time1, &lhs) >= 1 && *(unsigned __int8 *)(a1 + 1617) == (_DWORD)v97)
            {
              v98 = *(_DWORD *)(a1 + 1648);
              if (v98 < 3)
              {
                *(_DWORD *)(a1 + 1648) = v98 + 1;
              }
              else
              {
                v97 = v97 ^ 1;
                v99 = MEMORY[0x1E0CA2E18];
                *(_OWORD *)(a1 + 1620) = *MEMORY[0x1E0CA2E18];
                *(_QWORD *)(a1 + 1636) = *(_QWORD *)(v99 + 16);
              }
            }
          }
        }
        if ((_DWORD)v97 != *(unsigned __int8 *)(a1 + 1617))
        {
          v100 = *(_DWORD *)(a1 + 1644);
          if (v100)
          {
            v101 = v100 - 1;
            *(_DWORD *)(a1 + 1644) = v101;
            if (!v101)
            {
              v102 = MEMORY[0x1E0CA2E18];
              *(_OWORD *)(a1 + 1620) = *MEMORY[0x1E0CA2E18];
              *(_QWORD *)(a1 + 1636) = *(_QWORD *)(v102 + 16);
            }
          }
          *(_BYTE *)(a1 + 1617) = v97;
          v225[0] = CFSTR("NewPropertyValue");
          rhs.value = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v97);
          objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("AEStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &rhs, v225, 1));
        }
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 1600));
    }
  }
  else
  {
    v165 = v167;
    LODWORD(v164) = 0;
    FigDebugAssert3();
  }
  v103 = (const __CFDictionary *)CMGetAttachment(v4, v180, 0);
  if (!v103)
  {
    v165 = v167;
    LODWORD(v164) = 0;
    goto LABEL_349;
  }
  v104 = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E0D06870]);
  if (v104)
  {
    LODWORD(lhs.value) = 0;
    CFNumberGetValue(v104, kCFNumberSInt32Type, &lhs);
    v105 = lhs.value;
    v106 = LODWORD(lhs.value) != 0;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 1600));
    if (*(_BYTE *)(a1 + 1652) && *(unsigned __int8 *)(a1 + 1653) != v106)
    {
      *(_BYTE *)(a1 + 1653) = v106;
      *(_QWORD *)time1 = CFSTR("NewPropertyValue");
      v215.value = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v105 != 0, v164, v165);
      objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("AWBStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v215, time1, 1));
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 1600));
  }
LABEL_226:
  -[BWFigVideoCaptureDevice _serviceCompletedRequestNotifications:](a1, v4);
  v107 = (_QWORD *)MEMORY[0x1E0D069A0];
  if (!*(_BYTE *)(a1 + 2440))
  {
    v127 = 0;
    v110 = v182;
    goto LABEL_266;
  }
  v108 = objc_msgSend((id)CMGetAttachment(v4, v89, 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  v212 = 0;
  if (*(int *)(a1 + 2444) < 3)
    v109 = 1;
  else
    v109 = v87;
  v110 = v182;
  v111 = v172;
  if (v172 || v109)
  {
    v168 = (void *)v108;
    v112 = -[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](a1, v88, v63, v176, v174, v173, v70, (uint64_t *)&v212);
    v113 = v112 == 2;
    v179 = v112 == 3;
    v181 = v112 == 1;
    memset(&lhs, 0, sizeof(lhs));
    if ((_DWORD)v70)
    {
      v114 = (os_unfair_lock_s *)(a1 + 1956);
      if (objc_msgSend(*(id *)(a1 + 2168), "containsObject:", objc_msgSend(v88, "portType")))
      {
        os_unfair_lock_lock(lock);
        v70 = *(unsigned int *)(a1 + 2196);
        v115 = (id)objc_msgSend(*(id *)(a1 + 2256), "objectForKeyedSubscript:", objc_msgSend(v88, "portType"));
        if (v115)
        {
          v116 = v115;
          os_unfair_lock_unlock(lock);
LABEL_236:
          v113 = v112 == 2;
          if ((v212 & 0x4000) != 0)
          {
            v70 = 0;
          }
          else
          {
            if ((~(_DWORD)v212 & 0x40040) != 0)
              v70 = -[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v212, v176);
            if ((int)v70 >= 1)
            {
              v177 = v70;
              v117 = (void *)objc_msgSend(v63, "objectForKeyedSubscript:", objc_msgSend(v88, "portType"));
              v118 = v212;
              objc_msgSend(v117, "finalCropRect");
              v123 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:](a1, v168, v119, v120, v121, v122);
              v124 = 1;
              v125 = (v118 >> 13) & 1;
              do
              {
                objc_msgSend(v116, "totalIntegrationTimeForDigitalFlashMode:frameStatistics:stationary:detectedObjects:", v124, v117, v125, v123, v164, v165);
                *(&lhs.value + v124++) = v126;
              }
              while (v124 != 3);
              v88 = v184;
              v110 = v182;
              v114 = (os_unfair_lock_s *)(a1 + 1956);
              v70 = v177;
              v113 = v112 == 2;
            }
          }

          v111 = v172;
          goto LABEL_249;
        }
        v148 = *(void **)(a1 + 2184);
        if (v148)
        {
          v116 = (id)objc_msgSend(v148, "adaptiveBracketingDigitalFlashTotalIntegrationTimesProviderForPortType:wait:", objc_msgSend(v88, "portType"), 0);
          objc_msgSend(*(id *)(a1 + 2256), "setObject:forKeyedSubscript:", v116, objc_msgSend(v88, "portType"));
          os_unfair_lock_unlock(lock);
          if (v116)
            goto LABEL_236;
        }
        else
        {
          os_unfair_lock_unlock(lock);
        }
        v111 = v172;
      }
      else
      {
        v70 = 0;
      }
      v113 = v112 == 2;
    }
    else
    {
      v114 = (os_unfair_lock_s *)(a1 + 1956);
    }
LABEL_249:
    os_unfair_lock_lock(v114);
    if (!v111 && *(unsigned __int8 *)(a1 + 2436) == v181 && *(unsigned __int8 *)(a1 + 2437) == v113)
    {
      v128 = *(unsigned __int8 *)(a1 + 2438);
      *(_BYTE *)(a1 + 2436) = v181;
      *(_BYTE *)(a1 + 2437) = v113;
      *(_BYTE *)(a1 + 2438) = v179;
      v129 = v128 != v179 || *(_DWORD *)(a1 + 2196) != (_DWORD)v70;
    }
    else
    {
      *(_BYTE *)(a1 + 2436) = v181;
      *(_BYTE *)(a1 + 2437) = v113;
      v129 = 1;
      *(_BYTE *)(a1 + 2438) = v179;
    }
    v130 = 0;
    *(_DWORD *)(a1 + 2196) = v70;
    do
    {
      v131 = *(double *)((char *)&lhs.timescale + v130);
      v129 = v129 || *(double *)(a1 + v130 + 2240) != v131;
      *(double *)(a1 + v130 + 2240) = v131;
      v130 += 8;
    }
    while (v130 != 16);
    os_unfair_lock_unlock(v114);
    v107 = (_QWORD *)MEMORY[0x1E0D069A0];
    if (v129)
    {
      if ((int)v70 < 1)
      {
        v132 = MEMORY[0x1E0C9AA70];
      }
      else
      {
        v225[0] = CFSTR("Min");
        rhs.value = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&lhs.timescale);
        v225[1] = CFSTR("Max");
        *(_QWORD *)&rhs.timescale = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)&lhs.epoch);
        v132 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &rhs, v225, 2);
      }
      v223[0] = CFSTR("Status");
      v133 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v70);
      v223[1] = CFSTR("ExposureTimes");
      valuePtr[0] = v133;
      valuePtr[1] = v132;
      v134 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", valuePtr, v223, 2);
      *(_QWORD *)time1 = CFSTR("FlashScene");
      v215.value = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v112 == 1);
      *(_QWORD *)&time1[8] = CFSTR("HDRScene");
      *(_QWORD *)&v215.timescale = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v112 == 2);
      *(_QWORD *)&time1[16] = CFSTR("SISScene");
      v135 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v112 == 3);
      *(_QWORD *)&time1[24] = CFSTR("DigitalFlashScene");
      v215.epoch = v135;
      v216 = (void *)v134;
      objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("StillImageSceneChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v215, time1, 4));
      v88 = v184;
      v107 = (_QWORD *)MEMORY[0x1E0D069A0];
    }
  }
  v127 = v212;
LABEL_266:
  if (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("Torch"), v164), "BOOLValue"))-[BWFigVideoCaptureDevice _serviceAutoTorchNotification:sampleBuffer:](a1, v63);
  if ((v110 & 1) == 0 && *(_BYTE *)(a1 + 1529))
    -[BWFigVideoCaptureDevice _serviceStereoVideoCaptureSceneMonitoringWithFrameStatisticsByPortType:sceneFlags:](a1, v63, v127);
  if (*(_BYTE *)(a1 + 1876))
  {
    -[BWFigVideoCaptureDevice _collectAPSStatistics:]((float *)a1, v4);
  }
  else if (*(_BYTE *)(a1 + 1877))
  {
    +[BWAutoFocusPositionSensorMonitor logVideoRecordingAPSStatistics:](BWAutoFocusPositionSensorMonitor, "logVideoRecordingAPSStatistics:", a1 + 1880);
    *(_BYTE *)(a1 + 1877) = 0;
  }
  if (objc_msgSend(*(id *)(a1 + 3264), "count"))
    -[BWFigVideoCaptureDevice _checkCriticalFocusError:](a1, v4);
  if (*(_QWORD *)(a1 + 3280)
    && objc_msgSend(*(id *)(a1 + 3280), "containsObject:", objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00])))
  {
    -[BWFigVideoCaptureDevice _checkDegradedAutoFocus:](a1, v4);
  }
  if (*(_QWORD *)(a1 + 3312))
    -[BWFigVideoCaptureDevice _checkSphereJitterDetection:]((void *)a1, v4);
  if (!*(_QWORD *)(a1 + 3424))
    *(_QWORD *)(a1 + 3424) = (id)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58]);
  -[BWFigVideoCaptureDevice _collectAPSMacroInstabilityStatistics:]((id *)a1, v4);
  -[BWFigVideoCaptureDevice _collectSensorTemperatureStatistics:]((void *)a1, v4);
  if (!*(_BYTE *)(a1 + 2440))
    goto LABEL_314;
  if (v170 == 1 && objc_msgSend(v63, "frameCount"))
  {
    if (*(_BYTE *)(a1 + 1449))
    {
      v189 = 0u;
      v190 = 0u;
      v187 = 0u;
      v188 = 0u;
      v136 = *(void **)(a1 + 120);
      v137 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", &v187, v213, 16);
      if (v137)
      {
        v138 = v137;
        v139 = v4;
        v140 = *(_QWORD *)v188;
        v141 = *MEMORY[0x1E0D05A40];
        v142 = 1;
        do
        {
          for (m = 0; m != v138; ++m)
          {
            if (*(_QWORD *)v188 != v140)
              objc_enumerationMutation(v136);
            v144 = *(_QWORD *)(*((_QWORD *)&v187 + 1) + 8 * m);
            if (!*(_QWORD *)(a1 + 1464)
              || (objc_msgSend(*(id *)(*((_QWORD *)&v187 + 1) + 8 * m), "isEqualToString:", v141) & 1) == 0)
            {
              if ((v142 & 1) != 0)
              {
                v145 = (void *)objc_msgSend(v63, "objectForKeyedSubscript:", v144);
                if (v145)
                {
                  objc_msgSend(v145, "pts");
                  v146 = v186;
                }
                else
                {
                  v146 = 0;
                  v186 = 0;
                }
                v142 = v146 & 1;
              }
              else
              {
                v142 = 0;
              }
            }
          }
          v138 = objc_msgSend(v136, "countByEnumeratingWithState:objects:count:", &v187, v213, 16);
        }
        while (v138);
        v4 = v139;
        v88 = v184;
        v107 = (_QWORD *)MEMORY[0x1E0D069A0];
        if ((v142 & 1) == 0)
          goto LABEL_312;
      }
    }
    else
    {
      v147 = (void *)objc_msgSend(v63, "objectForKeyedSubscript:", objc_msgSend(v88, "portType"));
      if (!v147)
        goto LABEL_312;
      objc_msgSend(v147, "pts");
      if ((v185 & 1) == 0)
        goto LABEL_312;
    }
    os_unfair_lock_lock(v169);
    objc_msgSend(*(id *)(a1 + 2552), "transitionToState:", 2);
    os_unfair_lock_unlock(v169);
  }
LABEL_312:
  if (!*(_BYTE *)(a1 + 1976))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
    if (!*(_BYTE *)(a1 + 2544))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
      goto LABEL_314;
    }
    if (+[BWStillImageTimeMachine afComplete:](BWStillImageTimeMachine, "afComplete:", v4))
    {
      *(_BYTE *)(a1 + 2544) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
      if (*(int *)(a1 + 2496) < 60)
      {
        v160 = (_DWORD *)(a1 + 2496);
        v161 = *(NSObject **)(a1 + 2480);
        v215.value = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v215.timescale = 3221225472;
        v215.epoch = (CMTimeEpoch)__fvcd_serviceRetryStillImageCapture_block_invoke;
        v216 = &unk_1E491E720;
        v217 = a1;
        dispatch_async(v161, &v215);
        v162 = *(_DWORD *)(a1 + 2496);
LABEL_342:
        *v160 = v162 + 1;
        goto LABEL_314;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
      v162 = *(_DWORD *)(a1 + 2496);
      if (v162 < 60)
      {
        v160 = (_DWORD *)(a1 + 2496);
        goto LABEL_342;
      }
    }
    -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:]((char *)a1, 4294950493);
    goto LABEL_314;
  }
  -[BWFigVideoCaptureDevice _serviceRetryStillImageCaptureUsingFrameStatisticsByPortType:](a1, v63);
LABEL_314:
  if (*(_BYTE *)(a1 + 448))
  {
    v149 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *v107);
    v150 = (void *)objc_msgSend(v149, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
    v151 = (void *)objc_msgSend(v150, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
    if (!v151)
      v151 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
    v152 = *(unsigned int *)(a1 + 472);
    if (objc_msgSend(v151, "count") >= v152)
      v153 = objc_msgSend(v151, "count");
    else
      v153 = *(_DWORD *)(a1 + 472);
    *(_DWORD *)(a1 + 472) = v153;
    v154 = *(void **)(a1 + 480);
    objc_msgSend((id)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C40]), "doubleValue");
    objc_msgSend(v154, "addDataPoint:");
  }

  *(_QWORD *)(a1 + 512) = (id)objc_msgSend(v88, "portType");
  if (v4)
  {
    if (*(_DWORD *)(a1 + 4192) == -1)
    {
      ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)v4);
      if (ImageBuffer)
        *(_DWORD *)(a1 + 4192) = BWPixelBufferColorSpace(ImageBuffer);
    }
  }
  if (objc_msgSend(*(id *)(a1 + 504), "hasSphere"))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4204));
    v156 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E78]);
    if (v156)
    {
      *(_QWORD *)&time1[8] = 0;
      *(_QWORD *)time1 = 0;
      objc_msgSend(v156, "getBytes:length:", time1, 16);
      if (!*(_WORD *)time1)
      {
        v157 = (int32x4_t)vmovl_u16(*(uint16x4_t *)&time1[2]);
        v158 = vaddvq_s32(v157)
             + *(unsigned __int16 *)&time1[10]
             + *(unsigned __int16 *)&time1[12]
             + *(unsigned __int16 *)&time1[14];
        if ((float)((float)(v158 - v157.i32[0]) / (float)v158) >= 0.05)
        {
          CMSampleBufferGetPresentationTimeStamp(&v215, (CMSampleBufferRef)v4);
          *(CMTime *)(a1 + 4208) = v215;
        }
      }
    }
    v159 = (void *)objc_msgSend(v183, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58]);
    if (objc_msgSend(v159, "isEqual:", *MEMORY[0x1E0D07A60]))
    {
      if (objc_msgSend(*(id *)(a1 + 4256), "isEqual:", *MEMORY[0x1E0D07A30]))
      {
        CMSampleBufferGetPresentationTimeStamp(&v215, (CMSampleBufferRef)v4);
        *(CMTime *)(a1 + 4232) = v215;
      }
    }

    *(_QWORD *)(a1 + 4256) = v159;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 4204));
  }
}

- (uint64_t)_stillImageSceneTypeForCaptureStream:(void *)a3 frameStatisticsByPortType:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 digitalFlashMode:(uint64_t *)a8 sceneFlags:
{
  _BYTE *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;

  if (result)
  {
    v12 = (_BYTE *)result;
    if (a6 >= 2 || a5 | a4 | a7)
    {
      if (*(int *)(result + 2444) <= 2)
      {
        v18 = 0;
        v16 = -[BWFigVideoCaptureDevice _resolveStillImageCaptureTypeFromStatisticsByPortType:masterCaptureStream:flashMode:hdrMode:qualityPrioritization:stereoFusionMode:depthDataDeliveryEnabled:bravoConstituentImageDeliveryDeviceTypes:burstQualityCaptureEnabled:clientBracketMode:forSceneMonitoring:captureFlags:](result, a3, a2, 2 * (a4 != 0), 2 * (a5 != 0), a6, 0, 0, 0, 0, 0, 1, &v18);
        result = 0;
        v17 = v16 - 2;
        if (v17 <= 4)
          return dword_1A32B20AC[v17];
      }
      else
      {
        if (a5)
          v13 = 0;
        else
          v13 = a6 <= 1;
        v14 = !v13;
        v15 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](result, a2, a3, v14, 0, 1, NAN);
        if (a4
          && -[BWFigVideoCaptureDevice _ubIsAutoFlashForSceneFlags:digitalFlashModeForSceneMonitoring:]((uint64_t)v12, v15, a7))
        {
          result = 1;
        }
        else if (a5 && (-[BWFigVideoCaptureDevice _ubIsHDRCaptureUsingSceneFlags:](v12, v15) & 1) != 0)
        {
          result = 2;
        }
        else
        {
          result = 3;
        }
        if (a8)
          *a8 = v15;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (BOOL)_ubIsAutoFlashForSceneFlags:(int)a3 digitalFlashModeForSceneMonitoring:
{
  uint64_t v3;
  _BOOL4 v5;

  if (!a1)
    return 0;
  if ((a2 & 0x20) != 0)
  {
    if (!a3 || (a2 & 0x4800) != 0)
      return -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1);
    v3 = (a2 >> 29) & 1;
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  v5 = (~(_DWORD)a2 & 0x10000800) == 0 && *(_BYTE *)(a1 + 2181) != 0;
  if ((v3 & 1) == 0 && !v5)
    return 0;
  return -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1);
}

- (void)_collectSensorTemperatureStatistics:(void *)result
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  float v8;

  if (result)
  {
    v2 = (uint64_t)result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      result = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E08]);
      if (result)
      {
        v5 = result;
        v6 = objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
        if (!objc_msgSend(*(id *)(v2 + 3504), "objectForKeyedSubscript:", v6))
          objc_msgSend(*(id *)(v2 + 3504), "setObject:forKeyedSubscript:", objc_alloc_init(BWStats), v6);
        v7 = (void *)objc_msgSend(*(id *)(v2 + 3504), "objectForKeyedSubscript:", v6);
        objc_msgSend(v5, "floatValue");
        return (void *)objc_msgSend(v7, "addDataPoint:", v8);
      }
    }
    else
    {
      return (void *)FigDebugAssert3();
    }
  }
  return result;
}

- (id)_collectAPSMacroInstabilityStatistics:(id *)result
{
  id *v2;
  void *v3;
  void *v4;
  id *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  void *v12;
  id *v13;
  float v14;
  float v15;
  float v16;
  void *v17;

  if (result)
  {
    v2 = result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      result = (id *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D068A0]);
      if (result)
      {
        v5 = result;
        v6 = objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
        v7 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06260]);
        if (v7)
        {
          v8 = v7;
          objc_msgSend(v7, "floatValue");
          v10 = v9;
          objc_msgSend((id)objc_msgSend(v2[412], "objectForKeyedSubscript:", v6), "floatValue");
          if (v10 > v11)
          {
            v12 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v8, "floatValue");
            objc_msgSend(v2[412], "setObject:forKeyedSubscript:", objc_msgSend(v12, "numberWithFloat:"), v6);
          }
        }
        result = (id *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06268]);
        if (result)
        {
          v13 = result;
          objc_msgSend(result, "floatValue");
          v15 = v14;
          result = (id *)objc_msgSend((id)objc_msgSend(v2[413], "objectForKeyedSubscript:", v6), "floatValue");
          if (v15 > v16)
          {
            v17 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v13, "floatValue");
            return (id *)objc_msgSend(v2[413], "setObject:forKeyedSubscript:", objc_msgSend(v17, "numberWithFloat:"), v6);
          }
        }
      }
    }
    else
    {
      return (id *)FigDebugAssert3();
    }
  }
  return result;
}

uint64_t __76__BWFigVideoCaptureDevice__copyAutofocusProcessorProperty_propertyValueOut___block_invoke(uint64_t a1)
{
  uint64_t result;

  result = -[BWFigVideoCaptureDevice _copyAutofocusProcessorPropertyInternal:propertyValueOut:](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD **)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (uint64_t)_copyAutofocusProcessorPropertyInternal:(_QWORD *)a3 propertyValueOut:
{
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t v8;
  const void *v9;
  CFTypeRef v10;

  if (result)
  {
    v5 = result;
    if (_FigIsCurrentDispatchQueue())
    {
      if (!a2)
        goto LABEL_16;
    }
    else
    {
      FigDebugAssert3();
      if (!a2)
        goto LABEL_16;
    }
    if (a3)
    {
      if (*(_QWORD *)(v5 + 1608))
      {
        FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
        v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
        if (v7)
          return v7(FigBaseObject, a2, *MEMORY[0x1E0C9AE00], a3);
        else
          return 4294954514;
      }
      else
      {
        v8 = objc_msgSend(*(id *)(v5 + 1592), "objectForKeyedSubscript:", a2);
        if (v8)
        {
          v9 = (const void *)v8;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            result = 0;
            *a3 = 0;
          }
          else
          {
            v10 = CFRetain(v9);
            result = 0;
            *a3 = v10;
          }
        }
        else
        {
          return 4294954513;
        }
      }
      return result;
    }
LABEL_16:
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

- (void)_serviceCompletedRequestNotifications:(uint64_t)a1
{
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  const __CFAllocator *v16;
  CFDictionaryRef v17;
  id v18;
  double v19;
  CFDictionaryRef v20;
  double v21;
  void *v22;
  int v23;
  int v24;
  CMTime time;
  CMTime v26;

  if (a1)
  {
    v4 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C60]), "intValue");
      v7 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C58]), "intValue");
      v8 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A18]), "intValue");
      v9 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C68]), "intValue");
      v10 = *(_DWORD *)(a1 + 2616);
      v11 = *(_DWORD *)(a1 + 2620);
      v12 = *(_DWORD *)(a1 + 2624);
      v13 = v6 <= v10 && v7 <= v11;
      v14 = v13 && v8 <= v12;
      if (!v14 || v9 > *(_DWORD *)(a1 + 2628))
      {
        v23 = *(_DWORD *)(a1 + 2628);
        v24 = v9;
        memset(&v26, 0, sizeof(v26));
        CMSampleBufferGetPresentationTimeStamp(&v26, (CMSampleBufferRef)target);
        v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        time = v26;
        v17 = CMTimeCopyAsDictionary(&time, v16);
        v18 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        if (v6 > v10)
        {
          *(_DWORD *)(a1 + 2616) = v6;
          LODWORD(v19) = *(_DWORD *)(a1 + 2648);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19), CFSTR("FocusLensPositionCurrentValue"));
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, (uint64_t)CFSTR("ManualFocusComplete"), *(unsigned int *)(a1 + 2616), (uint64_t)v17, v18);
        }
        if (v7 > v11)
        {
          time = *(CMTime *)(a1 + 2652);
          v20 = CMTimeCopyAsDictionary(&time, v16);
          *(_DWORD *)(a1 + 2620) = v7;
          LODWORD(v21) = *(_DWORD *)(a1 + 2676);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v21), CFSTR("ISOCurrentValue"));
          objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("ExposureDurationCurrentValue"));
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, (uint64_t)CFSTR("ManualExposureComplete"), *(unsigned int *)(a1 + 2620), (uint64_t)v17, v18);

        }
        if (v8 > v12)
        {
          *(_DWORD *)(a1 + 2624) = v8;
          LODWORD(v19) = *(_DWORD *)(a1 + 2680);
          objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19), CFSTR("ExposureTargetBiasCurrentValue"));
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, (uint64_t)CFSTR("BiasedExposureComplete"), *(unsigned int *)(a1 + 2624), (uint64_t)v17, v18);
        }
        if (v24 > v23)
        {
          v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a1 + 2688, 12);
          *(_DWORD *)(a1 + 2628) = v24;
          objc_msgSend(v18, "setObject:forKeyedSubscript:", v22, CFSTR("WhiteBalanceGainsCurrentValue"));
          -[BWFigVideoCaptureDevice _postManualControlRequestCompletedWithName:requestID:timeDictionary:additionalPayloadItems:]((void *)a1, (uint64_t)CFSTR("ManualWhiteBalanceComplete"), *(unsigned int *)(a1 + 2628), (uint64_t)v17, v18);

        }
      }
    }
  }
}

- (uint64_t)_serviceMacroFocusDetectionWithFrameStatisticsByPortType:(uint64_t)result
{
  uint64_t v2;
  void *v3;
  void *v4;
  float v5;
  uint64_t v6;
  float v7;
  int v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    v3 = *(void **)(result + 584);
    if (!v3)
      v3 = *(void **)(v2 + 504);
    v4 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v3, "portType"));
    result = -[BWFigVideoCaptureDevice _superWideFocusIsStable:](v2, v4);
    if ((_DWORD)result)
    {
      result = objc_msgSend(v4, "focusDistance");
      v6 = 1456;
      if (!*(_BYTE *)(v2 + 1460))
        v6 = 1452;
      v7 = *(float *)(v2 + v6);
      v8 = v5 < v7;
      if (*(unsigned __int8 *)(v2 + 1460) != v8)
      {
        *(_BYTE *)(v2 + 1460) = v8;
        v9 = CFSTR("NewPropertyValue");
        v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5 < v7);
        return objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("MacroFocusNotification"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
      }
    }
  }
  return result;
}

- (void)_serviceAutoTorchNotification:(uint64_t)a1 sampleBuffer:(void *)a2
{
  NSObject *v4;
  float v5;
  int v6;
  _BOOL4 v7;
  _BOOL8 v8;
  double v9;
  void *v10;
  float v11;
  float v12;
  float v13;
  void *v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  OpaqueCMClock *HostTimeClock;
  BOOL v20;
  CMTime rhs;
  CMTime lhs;
  CMTime v23;
  _QWORD block[6];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  const __CFString *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v25 = 0;
    v26 = &v25;
    v27 = 0x2020000000;
    v28 = 0;
    if (!a2)
    {
      FigDebugAssert3();
LABEL_14:
      _Block_object_dispose(&v25, 8);
      return;
    }
    v4 = *(NSObject **)(a1 + 1584);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__BWFigVideoCaptureDevice__serviceAutoTorchNotification_sampleBuffer___block_invoke;
    block[3] = &unk_1E491E9A8;
    block[4] = a1;
    block[5] = &v25;
    dispatch_sync(v4, block);
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2376));
    v5 = -1.0;
    if (*(_BYTE *)(a1 + 2384) && *(float *)(a1 + 2420) > 0.0)
    {
      v6 = *((_DWORD *)v26 + 6);
      v7 = v6 != 2;
      if (v6 != 2)
      {
        *(_BYTE *)(a1 + 2385) = 0;
        if (*(float *)(a1 + 2416) != 0.0)
        {
          v7 = 0;
          v8 = 0;
          v5 = 0.0;
LABEL_10:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2376));
          if (v5 != -1.0)
          {
            *(float *)&v9 = v5;
            objc_msgSend((id)a1, "setTorchLevel:", v9);
          }
          if (v7)
          {
            v29 = CFSTR("NewPropertyValue");
            v30[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v8);
            objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("TorchActive"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1));
          }
          goto LABEL_14;
        }
        v10 = *(void **)(a1 + 1296);
        if (!v10)
          v10 = *(void **)(a1 + 504);
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "normalizedSNR");
        v12 = v11;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2304), "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "floatValue");
        v8 = v12 < v13;
        if (*(_BYTE *)(a1 + 2413) == v8)
        {
          v7 = 0;
          goto LABEL_10;
        }
        *(_BYTE *)(a1 + 2413) = v8;
        v20 = v12 < v13;
LABEL_31:
        *(_BYTE *)(a1 + 2412) = v20;
        goto LABEL_10;
      }
      if (!*(_BYTE *)(a1 + 2385) && ((unint64_t)objc_msgSend(a2, "frameCount") > 3 || *(_BYTE *)(a1 + 4090)))
      {
        v14 = *(void **)(a1 + 1296);
        if (!v14)
          v14 = *(void **)(a1 + 504);
        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v14, "portType")), "normalizedSNR");
        v16 = v15;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2304), "objectForKeyedSubscript:", objc_msgSend(v14, "portType")), "floatValue");
        v18 = v16 < v17;
        if (v16 >= v17)
          v5 = 0.0;
        else
          v5 = 3.4028e38;
        *(_BYTE *)(a1 + 2385) = 1;
        if (v18)
        {
          HostTimeClock = CMClockGetHostTimeClock();
          CMClockGetTime(&lhs, HostTimeClock);
          CMTimeMake(&rhs, 120, 1000);
          CMTimeAdd(&v23, &lhs, &rhs);
          v20 = 0;
          v8 = 0;
          *(CMTime *)(a1 + 2388) = v23;
        }
        else
        {
          v20 = 0;
          v8 = 0;
        }
        goto LABEL_31;
      }
    }
    v7 = 0;
    v8 = 0;
    goto LABEL_10;
  }
}

- (void)_checkSphereJitterDetection:(void *)result
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = (uint64_t)result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      result = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E50]);
      if (result)
      {
        v5 = result;
        v6 = objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
        v7 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D07A08]), "intValue");
        if (v7)
          objc_msgSend(*(id *)(v2 + 3312), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(*(id *)(v2 + 3312), "objectForKeyedSubscript:", v6), "intValue")+ v7), v6);
        result = (void *)objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D07A28]), "intValue");
        if ((_DWORD)result)
          return (void *)objc_msgSend(*(id *)(v2 + 3320), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(*(id *)(v2 + 3320), "objectForKeyedSubscript:", v6), "intValue")+ result), v6);
      }
    }
    else
    {
      return (void *)FigDebugAssert3();
    }
  }
  return result;
}

- (void)_checkDegradedAutoFocus:(uint64_t)a1
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
      v6 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D068A0]);
      v7 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06240]);
      if (!v7)
        goto LABEL_8;
      v8 = v7;
      if (objc_msgSend(v7, "intValue"))
      {
        if (!*(_QWORD *)(a1 + 3288))
          *(_QWORD *)(a1 + 3288) = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(*(id *)(a1 + 3288), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v8, "intValue")), v5);
        objc_msgSend(*(id *)(a1 + 3280), "removeObject:", v5);
        if (!objc_msgSend(*(id *)(a1 + 3280), "count"))
        {
LABEL_8:

          *(_QWORD *)(a1 + 3280) = 0;
        }
      }
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

- (uint64_t)_checkCriticalFocusError:(uint64_t)result
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  if (result)
  {
    v2 = result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
      result = objc_msgSend(*(id *)(v2 + 3264), "containsObject:", v5);
      if ((_DWORD)result)
      {
        result = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06968]), "BOOLValue");
        if ((_DWORD)result)
        {
          v6 = *(id *)(v2 + 3272);
          if (!v6)
          {
            v6 = objc_alloc_init(MEMORY[0x1E0C99E20]);
            *(_QWORD *)(v2 + 3272) = v6;
          }
          objc_msgSend(v6, "addObject:", v5);
          return objc_msgSend(*(id *)(v2 + 3264), "removeObject:", v5);
        }
      }
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

- (uint64_t)_updateOrientationTotalTimes:(uint64_t)result
{
  uint64_t v2;
  unsigned int v3;

  if (result)
  {
    v2 = *(_QWORD *)(result + 408);
    if ((v2 & 0x8000000000000000) == 0)
    {
      v3 = *(_DWORD *)(result + 400) - 1;
      if (v3 <= 3)
        *(_QWORD *)(result + 8 * v3 + 416) += a2 - v2;
    }
  }
  return result;
}

- (void)setReactionEffectsEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  if (self->_reactionEffectsEnabled != a3)
  {
    self->_reactionEffectsEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_reactionEffectsEnabledStartTime = v5;
    else
      self->_reactionEffectsEnabledTotalTime += v5 - self->_reactionEffectsEnabledStartTime;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "setReactionEffectsEnabled:", v3);
      }
      while (v8 != v10);
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
}

- (BOOL)cinematicVideoEnabled
{
  return self->_variableFrameRateUpdateLock._os_unfair_lock_opaque;
}

- (void)captureStreamDidChangeActiveFormatIndex:(id)a3
{
  -[NSMutableDictionary setObject:forKeyedSubscript:](self->_cameraInfoByPortType, "setObject:forKeyedSubscript:", 0, objc_msgSend(a3, "portType"));
  -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
}

- (uint64_t)_ubHighResolutionNondisruptiveSwitchingFormatIndexForCaptureStream:(uint64_t)result
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    v4 = (void *)objc_msgSend(a2, "supportedFormats");
    if (objc_msgSend(v4, "count"))
    {
      v5 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", (int)objc_msgSend(a2, "activeFormatIndex"));
      v6 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE0]);
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      obj = v6;
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v17;
        v10 = *MEMORY[0x1E0D07ED0];
        v11 = *MEMORY[0x1E0D07EC8];
        while (2)
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v17 != v9)
              objc_enumerationMutation(obj);
            v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
            v14 = (void *)objc_msgSend(v4, "objectAtIndexedSubscript:", (int)objc_msgSend(v13, "intValue"));
            if (FigCaptureVideoDimensionsAreEqual(objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", v10), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", v11), "intValue") << 32), *(_QWORD *)(v3 + 148)))
            {
              return objc_msgSend(v13, "intValue");
            }
          }
          v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          if (v8)
            continue;
          break;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

- (uint64_t)_ubUpdateSIFREnabled
{
  uint64_t v1;
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 1992))
    {
      v2 = *(unsigned __int8 *)(result + 1998);
      *(_BYTE *)(result + 1999) = v2;
      if (v2)
      {
        v14 = 0u;
        v15 = 0u;
        v12 = 0u;
        v13 = 0u;
        v3 = *(void **)(result + 560);
        result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (result)
        {
          v4 = result;
          v5 = *(_QWORD *)v13;
          v6 = *MEMORY[0x1E0D05A40];
          v7 = *MEMORY[0x1E0D07EA8];
          do
          {
            v8 = 0;
            do
            {
              if (*(_QWORD *)v13 != v5)
                objc_enumerationMutation(v3);
              v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8);
              if ((objc_msgSend((id)objc_msgSend(v9, "portType"), "isEqualToString:", v6) & 1) == 0
                && (objc_msgSend(v9, "activeFormatIndex") & 0x80000000) == 0)
              {
                v10 = (void *)objc_msgSend((id)objc_msgSend(v9, "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(v9, "activeFormatIndex"));
                if (*(_BYTE *)(v1 + 1999))
                  v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v7), "BOOLValue");
                else
                  v11 = 0;
                *(_BYTE *)(v1 + 1999) = v11;
              }
              ++v8;
            }
            while (v4 != v8);
            result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
            v4 = result;
          }
          while (result);
        }
      }
    }
    else
    {
      *(_BYTE *)(result + 1999) = 0;
    }
  }
  return result;
}

- (void)setZoomPIPSuspended:(BOOL)a3
{
  LOBYTE(self->_depthPixelFormat) = a3;
}

- (NSDictionary)moduleCalibrationByPortType
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  NSDictionary *result;
  NSArray *obj;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = self->_captureStreams;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  v6 = *(_QWORD *)v20;
  v7 = *MEMORY[0x1E0D07778];
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v20 != v6)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v8);
      if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "stream"), "supportedProperties"), "objectForKeyedSubscript:", v7))
      {
        v12 = 0;
LABEL_14:
        v13 = 0;
LABEL_15:
        v14 = 0;
        goto LABEL_11;
      }
      v10 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", objc_msgSend(v9, "stream"));
      v11 = objc_msgSend(v9, "portType");
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __54__BWFigVideoCaptureDevice_moduleCalibrationByPortType__block_invoke;
      v18[3] = &unk_1E4925D58;
      v18[4] = v10;
      v18[5] = v11;
      v12 = objc_alloc_init(MEMORY[0x1E0D08AA0]);
      if (!v12)
        goto LABEL_14;
      v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D08AA8]), "initWithPixelBufferProvider:", v18);
      if (!v13)
        goto LABEL_15;
      v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D08A70]), "initWithPixelBufferProvider:", v18);
      if (v14)
      {
        objc_msgSend(v12, "setShadingFPNCorrectionImage:", v13);
        objc_msgSend(v12, "setBlacklevelShadingCorrectionThumbnails:", v14);
        objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, objc_msgSend(v9, "portType"));
      }
LABEL_11:

      ++v8;
    }
    while (v5 != v8);
    v15 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    v5 = v15;
  }
  while (v15);
LABEL_17:
  result = (NSDictionary *)objc_msgSend(v3, "count");
  if (result)
    return (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v3);
  return result;
}

- (BOOL)sensorRawPoolEnabled
{
  return self->_sensorRawPoolEnabled;
}

uint64_t __70__BWFigVideoCaptureDevice__setAutoImageControlMode_completionHandler___block_invoke(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD *)(result + 56);
  if (*(_DWORD *)(v1 + 1828) != v2)
  {
    v3 = result;
    *(_DWORD *)(v1 + 1828) = v2;
    result = *(_QWORD *)(result + 32);
    if (*(_BYTE *)(result + 1824))
    {
      v4 = *(_DWORD *)(result + 1832);
      if (*(_DWORD *)(result + 1828) != v4)
      {
        result = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](result, *(_DWORD *)(v3 + 56));
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24) = result;
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24))
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8) + 24) = v4;
      }
    }
  }
  return result;
}

- (uint64_t)_setAutofocusProcessorImageControlModeProperty:(uint64_t)result
{
  uint64_t v3;
  __CFString *v4;
  void *v5;
  BOOL v6;

  if (result)
  {
    v3 = result;
    if (!_FigIsCurrentDispatchQueue())
      FigDebugAssert3();
    if (*(_DWORD *)(v3 + 1832) == a2)
    {
      return 0;
    }
    else
    {
      v4 = +[BWFigVideoCaptureDevice _autofocusProcessorImageControlModeFromImageControlMode:]((uint64_t)BWFigVideoCaptureDevice, a2);
      if (v4)
      {
        result = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](v3, CFSTR("AutofocusProcessor_VideoMode"), v4);
        if (!(_DWORD)result)
        {
          *(_DWORD *)(v3 + 1832) = a2;
          if (a2 == 2)
          {
            v5 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 504), "stream"), "supportedProperties");
            v6 = objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D073C8]) != 0;
          }
          else
          {
            v6 = 0;
          }
          result = 0;
          *(_BYTE *)(v3 + 1876) = v6;
        }
      }
      else
      {
        FigDebugAssert3();
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

+ (__CFString)_autofocusProcessorImageControlModeFromImageControlMode:(uint64_t)a1
{
  __CFString *result;

  objc_opt_self();
  switch(a2)
  {
    case 0:
      result = CFSTR("Mode_StillPreview");
      break;
    case 1:
      result = CFSTR("Mode_VideoPreview");
      break;
    case 2:
      result = CFSTR("Mode_VideoRecording");
      break;
    case 3:
      result = CFSTR("Mode_Conference");
      break;
    case 4:
      result = CFSTR("Mode_Panorama");
      break;
    case 5:
      result = CFSTR("Mode_TimeLapsePreview");
      break;
    case 6:
      result = CFSTR("Mode_TimeLapseCapture");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

- (void)startupFaceDetectionIfNeeded
{
  NSArray *captureStreams;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  captureStreams = self->_captureStreams;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "setObjectDetectionStartupDeferred:", 0);
      }
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }
}

uint64_t __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  const void *v6;
  _QWORD v8[7];
  _QWORD v9[8];

  v9[7] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 3698) && *(_DWORD *)(v2 + 1828) == 2)
    v3 = MEMORY[0x1E0C9AAB0];
  else
    v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 88));
  v8[0] = CFSTR("x");
  v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 40));
  v8[1] = CFSTR("y");
  v9[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 48));
  v8[2] = CFSTR("w");
  v9[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 56));
  v8[3] = CFSTR("h");
  v9[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 64));
  v8[4] = CFSTR("near");
  LODWORD(v4) = *(_DWORD *)(a1 + 80);
  v9[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4);
  v8[5] = CFSTR("far");
  LODWORD(v5) = *(_DWORD *)(a1 + 84);
  v8[6] = CFSTR("smooth");
  v9[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v9[6] = v3;
  v6 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 7);
  -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(_QWORD *)(a1 + 32), CFSTR("ContinuousAutoFocusUseStrictAreaOfInterest"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 89)));
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 72), v6);
}

- (uint64_t)_setAutofocusProcessorPropertyInternal:(const void *)a3 propertyValue:
{
  uint64_t v3;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, void *, const void *);
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    return 0;
  if (!_FigIsCurrentDispatchQueue())
  {
    v12 = v3;
    LODWORD(v11) = 0;
    FigDebugAssert3();
  }
  if (*(_QWORD *)(a1 + 1608))
  {
    -[BWFigVideoCaptureDevice _updateDeferredAutofocusProcessorPropertyStatesForProperty:](a1, a2);
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    v8 = *(uint64_t (**)(uint64_t, void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v8)
    {
      v9 = 4294954514;
      if (!a3)
        goto LABEL_12;
      goto LABEL_11;
    }
    v9 = v8(FigBaseObject, a2, a3);
    if (!(_DWORD)v9)
    {
      -[BWFigVideoCaptureDevice _updateExposureStateForAutofocusProperty:](a1, a2);
      -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:](a1, a2, a3);
      -[BWFigVideoCaptureDevice _updateFaceDetectionStateForAutofocusProperty:propertyValue:](a1, a2, a3);
      -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:](a1, a2, a3);
      -[BWFigVideoCaptureDevice _updateBravoSwitchOverStateForAutofocusProperty:propertyValue:](a1, a2);
      if (!a3)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
  }
  if (!a3)
  {
LABEL_12:
    a3 = (const void *)objc_msgSend(MEMORY[0x1E0C99E38], "null", v11, v12);
    goto LABEL_13;
  }
LABEL_11:
  if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0C9B0D0]))
    goto LABEL_12;
LABEL_13:
  objc_msgSend(*(id *)(a1 + 1592), "setObject:forKeyedSubscript:", a3, a2, v11);
  -[BWFigVideoCaptureDevice _updateSceneMonitorFocusStateForAutofocusProperty:propertyValue:](a1, a2);
  return v9;
}

- (void)_updateSceneMonitorFocusStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1
{
  _BOOL8 v4;
  _BOOL8 v5;
  int v6;
  _BOOL8 v7;

  if (a1)
  {
    if (CFEqual(cf1, CFSTR("ContinuousAutoFocus")))
      v4 = 1;
    else
      v4 = CFEqual(cf1, CFSTR("ContinuousAutoFocusAreaOfInterest")) != 0;
    if (CFEqual(cf1, CFSTR("ManualFocus")))
      v5 = 1;
    else
      v5 = CFEqual(cf1, CFSTR("FocusLock")) != 0;
    v6 = CFEqual(cf1, CFSTR("FocusScan"));
    if (v4 || v5 || v6)
    {
      v7 = v6 != 0;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1500));
      objc_msgSend(*(id *)(a1 + 1520), "setAutoFocusInProgress:focusLocked:oneShotFocusScanInProgress:", v4, v5, v7);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1500));
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1548));
      objc_msgSend(*(id *)(a1 + 1536), "setAutoFocusInProgress:focusLocked:oneShotFocusScanInProgress:", v4, v5, v7);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1548));
    }
  }
}

- (uint64_t)_updateImageControlModeStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  void *v3;
  CFTypeID v5;
  uint64_t v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = (void *)result;
    if (*(_BYTE *)(result + 1824))
    {
      result = CFEqual(cf1, CFSTR("AutofocusProcessor_VideoMode"));
      if ((_DWORD)result)
      {
        if (!a3)
          return FigDebugAssert3();
        v5 = CFGetTypeID(a3);
        if (v5 != CFStringGetTypeID())
          return FigDebugAssert3();
        if (CFEqual(a3, CFSTR("Mode_StillPreview")))
        {
          v6 = 0;
        }
        else if (CFEqual(a3, CFSTR("Mode_VideoPreview")))
        {
          v6 = 1;
        }
        else if (CFEqual(a3, CFSTR("Mode_VideoRecording")))
        {
          v6 = 2;
        }
        else if (CFEqual(a3, CFSTR("Mode_Conference")))
        {
          v6 = 3;
        }
        else if (CFEqual(a3, CFSTR("Mode_Panorama")))
        {
          v6 = 4;
        }
        else if (CFEqual(a3, CFSTR("Mode_TimeLapsePreview")))
        {
          v6 = 5;
        }
        else
        {
          result = CFEqual(a3, CFSTR("Mode_TimeLapseCapture"));
          if (!(_DWORD)result)
            return result;
          v6 = 6;
        }
        v7 = CFSTR("NewPropertyValue");
        v8[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v6);
        return objc_msgSend(v3, "_postNotificationWithPayload:notificationPayload:", CFSTR("ImageControlModeChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1));
      }
    }
  }
  return result;
}

- (uint64_t)_updateFaceDetectionStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  uint64_t v4;
  CFTypeID v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v4 = result;
    result = CFEqual(cf1, CFSTR("FaceDetectionMode"));
    if ((_DWORD)result)
    {
      if (a3 && (v5 = CFGetTypeID(a3), v5 == CFStringGetTypeID()))
      {
        result = CFEqual(a3, CFSTR("Disable"));
        if (!(_DWORD)result)
        {
          v12 = 0u;
          v13 = 0u;
          v10 = 0u;
          v11 = 0u;
          v6 = *(void **)(v4 + 560);
          result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
          if (result)
          {
            v7 = result;
            v8 = *(_QWORD *)v11;
            do
            {
              v9 = 0;
              do
              {
                if (*(_QWORD *)v11 != v8)
                  objc_enumerationMutation(v6);
                objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "setFaceDetectionEnabled:", 1);
              }
              while (v7 != v9);
              result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
              v7 = result;
            }
            while (result);
          }
        }
      }
      else
      {
        return FigDebugAssert3();
      }
    }
  }
  return result;
}

- (uint64_t)_updateExposureStateForAutofocusProperty:(uint64_t)result
{
  uint64_t v3;
  _BOOL4 v4;
  _BOOL4 v5;
  OpaqueCMClock *HostTimeClock;
  CMTime v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    if (CFEqual(cf1, CFSTR("SpotMeteredExposure")))
      v4 = 1;
    else
      v4 = CFEqual(cf1, CFSTR("AutoExposure")) != 0;
    if (CFEqual(cf1, CFSTR("ManualExposure")))
    {
      v5 = 1;
      goto LABEL_7;
    }
    result = CFEqual(cf1, CFSTR("ExposureLock"));
    v5 = result != 0;
    if (v4 || (_DWORD)result)
    {
LABEL_7:
      pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 1600));
      *(_BYTE *)(v3 + 1616) = v4;
      if (v4)
      {
        *(_QWORD *)(v3 + 1644) = (*(_DWORD *)(v3 + 1644) + 1);
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v7, HostTimeClock);
        *(CMTime *)(v3 + 1620) = v7;
        if (!v5)
          return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1600));
      }
      else
      {
        *(_DWORD *)(v3 + 1644) = 0;
        if (!v5)
          return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1600));
      }
      v8 = CFSTR("NewPropertyValue");
      v9[0] = MEMORY[0x1E0C9AAB0];
      objc_msgSend((id)v3, "_postNotificationWithPayload:notificationPayload:", CFSTR("AEStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1));
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 1600));
    }
  }
  return result;
}

- (void)_updateBravoSwitchOverStateForAutofocusProperty:(uint64_t)a1 propertyValue:(CFTypeRef)cf1
{
  int v4;
  _BOOL4 v5;
  int v6;
  _BOOL4 v7;
  char v8;
  os_unfair_lock_s *v9;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;

  if (a1)
  {
    v4 = CFEqual(cf1, CFSTR("ContinuousAutoFocus"));
    if (CFEqual(cf1, CFSTR("ManualFocus")))
      v5 = 1;
    else
      v5 = CFEqual(cf1, CFSTR("FocusLock")) != 0;
    v6 = CFEqual(cf1, CFSTR("FocusScan"));
    if (CFEqual(cf1, CFSTR("SpotMeteredExposure")))
      v7 = 1;
    else
      v7 = CFEqual(cf1, CFSTR("AutoExposure")) != 0;
    if (CFEqual(cf1, CFSTR("ManualExposure")))
    {
      if (v4)
        v8 = 1;
      else
        v8 = v5;
      v9 = (os_unfair_lock_s *)(a1 + 1288);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
      if ((v8 & 1) == 0)
      {
        v10 = 1;
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    v11 = CFEqual(cf1, CFSTR("ExposureLock"));
    v10 = v11 != 0;
    if (v4)
      v12 = 1;
    else
      v12 = v5;
    if (v6)
      v13 = 1;
    else
      v13 = v12;
    if (((v13 | v7) & 1) != 0 || v11)
    {
      v9 = (os_unfair_lock_s *)(a1 + 1288);
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
      if (!v12)
      {
LABEL_25:
        if (v6)
        {
          *(_BYTE *)(a1 + 1332) = 1;
        }
        else if (v7 || v10)
        {
          objc_msgSend(*(id *)(a1 + 1320), "exposureModeDidChange");
        }
        goto LABEL_29;
      }
LABEL_24:
      objc_msgSend(*(id *)(a1 + 1320), "focusModeDidChange");
LABEL_29:
      os_unfair_lock_unlock(v9);
    }
  }
}

- (void)setStudioLightingEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  if (self->_studioLightingEnabled != a3)
  {
    self->_studioLightingEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_studioLightingStartTime = v5;
    else
      self->_studioLightingTotalTime += v5 - self->_studioLightingStartTime;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "setStudioLightingEnabled:", v3);
      }
      while (v8 != v10);
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
}

- (void)setBackgroundBlurEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  if (self->_backgroundBlurEnabled != a3)
  {
    self->_backgroundBlurEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_backgroundBlurStartTime = v5;
    else
      self->_backgroundBlurTotalTime += v5 - self->_backgroundBlurStartTime;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "setBackgroundBlurEnabled:", v3);
      }
      while (v8 != v10);
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
}

- (BOOL)_superWideFocusIsStable:(_BOOL8)result
{
  if (result)
  {
    if (objc_msgSend(a2, "afStatus") == 4 || objc_msgSend(a2, "afStatus") == 3)
    {
      return 1;
    }
    else
    {
      objc_msgSend(a2, "focusingMethod");
      return FigCaptureStreamFocusingMethodIsPhaseDetectionBased() != 0;
    }
  }
  return result;
}

- (BWPreviewTimeMachineProcessor)previewTimeMachineProcessor
{
  return (BWPreviewTimeMachineProcessor *)self->_ptsOfLastFrameForStationaryCheck.epoch;
}

- (void)setBravoStreamSelectionEligibleFallbackPortTypes:(id)a3
{
  os_unfair_lock_s *p_switchOverLock;

  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  -[BWBravoStreamSelector setEligibleFallbackPortTypes:](self->_bravoStreamSelector, "setEligibleFallbackPortTypes:", a3);
  os_unfair_lock_unlock(p_switchOverLock);
}

- (void)_serviceBravoStreamSelectionWithSampleBuffer:(void *)a3 fromCaptureStream:(uint64_t)a4 frameStatisticsByPortType:(int)a5 streamingImageIntent:
{
  os_unfair_lock_s *v10;
  void *v11;
  void *v12;
  float v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  uint64_t v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  void *v30;
  float v31;
  float v32;
  void *v33;
  BOOL v34;
  void *v36;
  void *v37;
  float v38;
  float v39;
  float v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  void *v46;
  void *v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t i;
  void *v57;
  float v58;
  float v59;
  float v60;
  _BOOL4 v61;
  float v62;
  float v63;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t k;
  void *v72;
  float v73;
  float v74;
  float v75;
  _BOOL4 v76;
  _BOOL4 v77;
  unsigned int v78;
  char v79;
  int v80;
  _BOOL4 v81;
  _BYTE *v82;
  int v83;
  void *v84;
  double v85;
  double v86;
  void *v87;
  int v88;
  float v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t j;
  void *v95;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  os_unfair_lock_s *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  os_unfair_lock_s *lock;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  _BYTE v120[128];
  _BYTE v121[128];
  _BYTE v122[128];
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v10 = (os_unfair_lock_s *)(a1 + 1312);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1312));
  v11 = *(void **)(a1 + 1296);
  v12 = *(void **)(a1 + 1304);
  os_unfair_lock_unlock(v10);
  objc_msgSend(*(id *)(a1 + 2744), "rampZoomFactorOfInterest");
  if (v13 > 0.0)
  {
    if (*(_BYTE *)(a1 + 3640))
    {
      v14 = (void *)MEMORY[0x1E0CB37E8];
LABEL_20:
      CMSetAttachment(a2, CFSTR("RampZoomFactorOfInterest"), (CFTypeRef)objc_msgSend(v14, "numberWithFloat:"), 1u);
      return;
    }
    return;
  }
  v106 = v12;
  v15 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v16 = objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  v17 = -[BWFigVideoCaptureDevice overCaptureActiveSlaveStreamForcedOff]((os_unfair_lock_s *)a1);
  if (*(_BYTE *)(a1 + 3640))
  {
    objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D06978]), "floatValue");
    v19 = v18;
  }
  else
  {
    v19 = 0.0;
  }
  objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
  v21 = v20;
  if (*(_BYTE *)(a1 + 3640))
    v22 = v17;
  else
    v22 = 1;
  if (v22)
    v23 = 3;
  else
    v23 = 24;
  *(float *)&v24 = -[BWFigVideoCaptureDevice _nextLargerBaseZoomFactorForRequestedZoomFactor:](a1, v20);
  objc_msgSend(*(id *)(a1 + 2744), "predictRampZoomFactorAfterNumberOfFrames:settingZoomFactorOfInterest:", v23, v24);
  v26 = v25;
  if (v25 != 0.0)
    v21 = v25;
  objc_msgSend(*(id *)(a1 + 2744), "rampZoomFactorOfInterest");
  v28 = v27;
  if (v11 == a3)
  {
    v102 = v10;
    v29 = *(float *)(a1 + 1420);
    v30 = *(void **)(a1 + 1440);
    objc_msgSend(*(id *)(a1 + 2744), "rampTargetZoomFactor");
    v32 = v31;
    -[BWFigVideoCaptureDevice _updateStatsMasterForMasterStream:](a1, (uint64_t)a3);
    -[BWFigVideoCaptureDevice _updateBravoStreamSelectionForMasterStream:forceNotification:](a1, a3, 0);
    lock = (os_unfair_lock_s *)(a1 + 1288);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
    v33 = *(void **)(a1 + 592);
    v34 = v33 != a3 && v33 == v30;
    v103 = *(void **)(a1 + 592);
    v104 = v30;
    if (!v34 || v30 == 0)
      v36 = a3;
    else
      v36 = *(void **)(a1 + 592);
    if (*(_BYTE *)(a1 + 3640))
      v37 = *(void **)(a1 + 592);
    else
      v37 = v36;
    v38 = v21;
    if (*(_BYTE *)(a1 + 4273))
    {
      objc_msgSend(*(id *)(a1 + 2744), "earlySwitchOverScaleFactorForZoomIn");
      v38 = v21;
      if (v39 != 1.0)
      {
        objc_msgSend(*(id *)(a1 + 2744), "earlySwitchOverScaleFactorForZoomIn");
        v38 = v21 / v40;
      }
    }
    v41 = *(void **)(a1 + 1320);
    v42 = *(unsigned __int8 *)(a1 + 2436);
    if (a5 == 1)
      v43 = 1;
    else
      v43 = 2 * (a5 == 2);
    v44 = objc_msgSend(*(id *)(a1 + 552), "cameraControlsStatisticsMasterStream");
    *(float *)&v45 = v38;
    v46 = (void *)objc_msgSend(v41, "recommendMasterStreamUsingCurrentMasterStream:frameStatisticsByPortType:zoomFactor:isAutoFlashScene:digitalFlashMode:detectedObjects:cameraControlsStatisticsMasterStream:", v37, a4, v42, v43, v16, v44, v45);
    v47 = (void *)objc_msgSend(*(id *)(a1 + 1320), "preferredMasterStreamIgnoringEligibleFallbackPortTypes");
    CMSetAttachment(a2, CFSTR("RecommendedMasterPortType"), (CFTypeRef)objc_msgSend(v46, "portType"), 1u);
    v105 = v47;
    CMSetAttachment(a2, CFSTR("PreferredMasterPortType"), (CFTypeRef)objc_msgSend(v47, "portType"), 1u);
    CMSetAttachment(a2, CFSTR("LastRecommendedMasterSelectionReason"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 1320), "lastSelectionReason")), 1u);
    if (*(_BYTE *)(a1 + 3640))
    {
      if (v28 > 0.0)
      {
        *(float *)&v48 = v28;
        CMSetAttachment(a2, CFSTR("RampZoomFactorOfInterest"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v48), 1u);
      }
      -[BWFigVideoCaptureDevice _overCaptureSelectLockedStreamsForRecommendedMasterStream:requestedZoomFactor:currentFrameRate:](a1, (uint64_t)v46, v21, v19);
      v49 = *(void **)(a1 + 3656);
      if ((!v49 || objc_msgSend(v49, "containsObject:", v46)) && v46 != *(void **)(a1 + 592))
        *(_QWORD *)(a1 + 592) = v46;
      v46 = (void *)-[BWFigVideoCaptureDevice _overCaptureMasterStreamForZoomFactor:](a1, v21);
      if (!*(_BYTE *)(a1 + 3650) && !*(_BYTE *)(a1 + 1472))
      {
        v50 = (void *)-[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, (uint64_t)v46, 0, v21, v19);
        v116 = 0u;
        v117 = 0u;
        v118 = 0u;
        v119 = 0u;
        v51 = *(void **)(a1 + 568);
        v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v116, v122, 16);
        if (v52)
        {
          v53 = v52;
          v54 = 0;
          v55 = *(_QWORD *)v117;
          do
          {
            for (i = 0; i != v53; ++i)
            {
              if (*(_QWORD *)v117 != v55)
                objc_enumerationMutation(v51);
              v57 = *(void **)(*((_QWORD *)&v116 + 1) + 8 * i);
              if (v57 != *(void **)(a1 + 1296)
                && objc_msgSend(*(id *)(*((_QWORD *)&v116 + 1) + 8 * i), "streamingRequiredWhenConfiguredAsSlave"))
              {
                v54 = v57;
              }
            }
            v53 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v116, v122, 16);
          }
          while (v53);
        }
        else
        {
          v54 = 0;
        }
        if (v50 != v54)
        {
          objc_msgSend(v50, "setStreamingRequiredWhenConfiguredAsSlave:", 1);
          objc_msgSend(v50, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", 0);
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v90 = *(void **)(a1 + 560);
          v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v112, v121, 16);
          if (v91)
          {
            v92 = v91;
            v93 = *(_QWORD *)v113;
            do
            {
              for (j = 0; j != v92; ++j)
              {
                if (*(_QWORD *)v113 != v93)
                  objc_enumerationMutation(v90);
                v95 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * j);
                if (v95 != v46 && v95 != v50)
                {
                  objc_msgSend(*(id *)(*((_QWORD *)&v112 + 1) + 8 * j), "setStreamingRequiredWhenConfiguredAsSlave:", 0);
                  objc_msgSend(v95, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", 0);
                }
              }
              v92 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v112, v121, 16);
            }
            while (v92);
          }
        }
      }
    }
    else if (v46 != *(void **)(a1 + 592))
    {
      *(_QWORD *)(a1 + 592) = v46;
    }
    os_unfair_lock_unlock(lock);
    objc_msgSend(a3, "baseZoomFactor");
    v59 = v58;
    objc_msgSend(v46, "baseZoomFactor");
    v61 = v59 < v60 && *(_BYTE *)(a1 + 3640) == 0;
    if (objc_msgSend(*(id *)(a1 + 1432), "isRamping"))
    {
      objc_msgSend(*(id *)(a1 + 1432), "updateRampForNextIteration");
      v29 = v62;
      if (objc_msgSend(*(id *)(a1 + 1432), "isRampingUp"))
      {
        if (v46 == v103)
          goto LABEL_133;
        objc_msgSend(*(id *)(a1 + 1432), "reset");
      }
    }
    if (v61)
    {
      v63 = *(float *)(a1 + 1420);
      if (*(_BYTE *)(a1 + 1292))
        LOBYTE(v64) = v63 == 1.0;
      else
        LOBYTE(v64) = 0;
      v65 = (_BYTE *)(a1 + 1292);
      if (v63 == 1.0 || !*(_BYTE *)(a1 + 1292))
        goto LABEL_96;
    }
    else
    {
      v65 = (_BYTE *)(a1 + 1292);
      if (!*(_BYTE *)(a1 + 1292))
      {
        LOBYTE(v64) = 0;
        goto LABEL_96;
      }
      if ((objc_msgSend(*(id *)(a1 + 1432), "isRamping") & 1) == 0)
      {
        v29 = 0.0;
        if (*(_BYTE *)(a1 + 1448))
        {
          v66 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:", a3);
          if (v66 >= objc_msgSend(*(id *)(a1 + 568), "count") - 1)
            v67 = 0;
          else
            v67 = objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v66 + 1);
          if (v67)
            v68 = v67;
          else
            v68 = (uint64_t)a3;
          v104 = (void *)v68;
        }
        else
        {
          v104 = 0;
        }
      }
    }
    os_unfair_lock_lock(lock);
    *(_BYTE *)(a1 + 1292) = 0;
    os_unfair_lock_unlock(lock);
    objc_msgSend(a3, "didBecomeMasterStream");
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v69 = *(void **)(a1 + 560);
    v64 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v108, v120, 16);
    if (v64)
    {
      v70 = *(_QWORD *)v109;
      do
      {
        for (k = 0; k != v64; ++k)
        {
          if (*(_QWORD *)v109 != v70)
            objc_enumerationMutation(v69);
          v72 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * k);
          if (v72 != a3)
            objc_msgSend(v72, "didBecomeSlaveStream");
        }
        v64 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v108, v120, 16);
      }
      while (v64);
    }
LABEL_96:
    if (*(_BYTE *)(a1 + 1293))
    {
      objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor");
      if (vabds_f32(v32, v73) < 0.001 || v32 == 0.0)
      {
        os_unfair_lock_lock(lock);
        *(_BYTE *)(a1 + 1293) = 0;
        os_unfair_lock_unlock(lock);
      }
    }
    if (*(_BYTE *)(a1 + 3640))
    {
      if (*(_QWORD *)(a1 + 576)
        && (objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor"), v21 > v74)
        && (objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor"), v21 >= v75))
      {
        v76 = *(_QWORD *)(a1 + 584) == (_QWORD)a3;
        v77 = *(_QWORD *)(a1 + 504) == (_QWORD)a3;
      }
      else
      {
        v76 = 0;
        v77 = 0;
      }
      if (*(_BYTE *)(a1 + 3640))
      {
        if (*(_BYTE *)(a1 + 1472))
        {
          v78 = objc_msgSend((id)a1, "shallowDepthOfFieldEffectStatus");
          if (v78 <= 0xE)
          {
            v79 = 1;
            if (((1 << v78) & 0x7A02) != 0)
            {
              if ((v64 & 1) != 0)
              {
LABEL_110:
                v80 = 1;
                v81 = 1;
LABEL_120:
                v83 = !v81;
                if (v81 && v105 != v106)
                {
                  os_unfair_lock_lock(lock);
                  *(_QWORD *)(a1 + 1304) = v105;
                  os_unfair_lock_unlock(lock);
                  -[BWFigVideoCaptureDevice _sendPreferredMasterStreamChangedNotificationWithPortType:]((void *)a1, objc_msgSend(*(id *)(a1 + 1304), "portType"));
                }
                if (v80)
                {
                  if (objc_msgSend(*(id *)(a1 + 3144), "isEqualToString:", objc_msgSend(v46, "portType")))
                  {
                    objc_msgSend(*(id *)(a1 + 2744), "resetZoomFactorOfInterest");
                    return;
                  }
                  objc_msgSend(a3, "willBecomeSlaveStream");
                  objc_msgSend(v46, "willBecomeMasterStream");
                  v87 = *(void **)(a1 + 1432);
                  v88 = *(unsigned __int8 *)(a1 + 3640);
                  if (v87)
                  {
                    if (*(_BYTE *)(a1 + 3640))
                    {
                      v84 = v104;
LABEL_163:
                      -[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)v46, v79, v21, v19);
LABEL_168:
                      -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](a1, v46, v21);
                      if (objc_msgSend(*(id *)(a1 + 552), "setMasterStream:allStreams:", v46, *(_QWORD *)(a1 + 560)))
                      {
                        os_unfair_lock_lock(lock);
                        *(_WORD *)(a1 + 1292) = 0;
                        os_unfair_lock_unlock(lock);
                        objc_msgSend(a3, "willBecomeMasterStream");
                        objc_msgSend(v46, "willBecomeSlaveStream");
                        objc_msgSend(a3, "didBecomeMasterStream");
                        objc_msgSend(v46, "didBecomeSlaveStream");
                        if (*(_BYTE *)(a1 + 3640))
                        {
                          -[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)a3, v79, v21, v19);
                        }
                        else if (*(_BYTE *)(a1 + 1472) || *(_BYTE *)(a1 + 217))
                        {
                          -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:](a1, (uint64_t)v46);
                        }
                      }
                      else
                      {
                        os_unfair_lock_lock(v102);
                        *(_QWORD *)(a1 + 1296) = v46;
                        os_unfair_lock_unlock(v102);
                        v100 = objc_msgSend(v46, "portType");
                        -[BWFigVideoCaptureDevice _sendMasterStreamChangedNotificationWithPortType:]((void *)a1, v100);
                        -[BWFigVideoCaptureDevice _updateStreamingImageIntentForChangedMasterStreamWithPortType:](a1, v100);
                        if (*(_BYTE *)(a1 + 3697))
                        {
                          objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor");
                          -[BWFigVideoCaptureDevice _updateSensorRegionsOfInterestBasedOnZoomFactor:]((_BYTE *)a1, v101);
                        }
                        a3 = v46;
                      }
                      goto LABEL_177;
                    }
                    if (v61)
                    {
                      if (v26 == 0.0)
                      {
                        v84 = v104;
                        if (*(float *)(a1 + 1420) == 0.0)
                        {
                          LODWORD(v85) = 0;
                          LODWORD(v86) = 1.0;
                          objc_msgSend(v87, "startRampFrom:to:iterations:shape:", *(unsigned int *)(a1 + 1424), *(unsigned int *)(a1 + 1428), v85, v86);
                          objc_msgSend(*(id *)(a1 + 1432), "updateRampForNextIteration");
                          v29 = v89;
                          v84 = v46;
                          goto LABEL_177;
                        }
                      }
                      else
                      {
                        v84 = v104;
                      }
LABEL_165:
                      if (*(_BYTE *)(a1 + 1472) || *(_BYTE *)(a1 + 217))
                        -[BWFigVideoCaptureDevice _depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:](a1, (uint64_t)v46);
                      goto LABEL_168;
                    }
                    v97 = *(_DWORD *)(a1 + 1428);
                    if (v97 == 1)
                      v98 = 2;
                    else
                      v98 = *(_DWORD *)(a1 + 1428);
                    if (v97 == 2)
                      v99 = 1;
                    else
                      v99 = v98;
                    v29 = 1.0;
                    LODWORD(v85) = 1.0;
                    LODWORD(v86) = 0;
                    objc_msgSend(v87, "startRampFrom:to:iterations:shape:", *(unsigned int *)(a1 + 1424), v99, v85, v86);
                    v88 = *(unsigned __int8 *)(a1 + 3640);
                    v84 = a3;
                  }
                  else
                  {
                    v84 = v104;
                  }
                  if (v88)
                    goto LABEL_163;
                  goto LABEL_165;
                }
                if (*(_BYTE *)(a1 + 3640))
                {
                  v84 = v104;
                  if ((v77 & v83 & 1) == 0
                    && (-[BWFigVideoCaptureDevice _overCaptureConfigureActiveSlaveStreamForMasterStream:zoomFactor:currentFrameRate:preferWider:](a1, (uint64_t)a3, v79, v21, v19) & v77) == 1)
                  {
                    os_unfair_lock_lock(lock);
                    *(_BYTE *)(a1 + 1293) = 1;
                    os_unfair_lock_unlock(lock);
                  }
                  goto LABEL_177;
                }
LABEL_133:
                v84 = v104;
LABEL_177:
                -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:masterCaptureStream:](a1, a3, v21);
                if (objc_msgSend(*(id *)(a1 + 552), "setMasterStream:allStreams:", a3, *(_QWORD *)(a1 + 560)))
                {
                  os_unfair_lock_lock(lock);
                  *(_BYTE *)(a1 + 1293) = 0;
                  os_unfair_lock_unlock(lock);
                }
                if (*(float *)(a1 + 1420) != v29 || *(_BYTE *)(a1 + 1448) && *(void **)(a1 + 1440) != v84)
                {
                  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1416));
                  *(float *)(a1 + 1420) = v29;
                  *(_QWORD *)(a1 + 1440) = v84;
                  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1416));
                }
                return;
              }
LABEL_113:
              v82 = v65;
              os_unfair_lock_lock(lock);
              v81 = objc_msgSend(*(id *)(a1 + 2552), "currentState") != 8;
              v80 = v46 != a3 && v81;
              if (v80 == 1)
              {
                *v82 = 1;
                if (v76)
                  *(_BYTE *)(a1 + 1293) = 1;
              }
              os_unfair_lock_unlock(lock);
              goto LABEL_120;
            }
          }
        }
      }
    }
    else
    {
      v77 = 0;
      v76 = 0;
    }
    v79 = 0;
    if ((v64 & 1) != 0)
      goto LABEL_110;
    goto LABEL_113;
  }
  if (v27 > 0.0 && *(_BYTE *)(a1 + 3640))
  {
    v14 = (void *)MEMORY[0x1E0CB37E8];
    goto LABEL_20;
  }
}

- (int)shallowDepthOfFieldEffectStatus
{
  BWFigVideoCaptureDevice *v2;
  os_unfair_lock_s *p_sdofLock;

  v2 = self;
  p_sdofLock = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  LODWORD(v2) = v2->_sdofEffectStatus;
  os_unfair_lock_unlock(p_sdofLock);
  return (int)v2;
}

- (void)_overCaptureSelectLockedStreamsForRecommendedMasterStream:(float)a3 requestedZoomFactor:(float)a4 currentFrameRate:
{
  void *v5;
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if (a1 && *(_BYTE *)(a1 + 3653))
  {
    v5 = *(void **)(a1 + 3656);
    if (v5)
    {
      v6 = *(_DWORD *)(a1 + 3664) - 1;
      *(_DWORD *)(a1 + 3664) = v6;
      if (!v6)
      {

        *(_QWORD *)(a1 + 3656) = 0;
        *(_DWORD *)(a1 + 3664) = 0;
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_18:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
      if (v11 <= a3)
      {
        objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactor");
        v13 = v12;
        objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
        if (v13 >= v14)
        {
          if ((v15 = (uint64_t *)(a1 + 576), v16 = *(_QWORD *)(a1 + 592), v17 = *(_QWORD *)(a1 + 584), v16 == v17)
            && v17 != a2
            || v16 == *v15 && *v15 != a2)
          {
            if (v16 == v17)
            {
              v21[0] = *(_QWORD *)(a1 + 592);
              v15 = (uint64_t *)(a1 + 504);
              v18 = v21;
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 504);
              v18 = &v20;
            }
            v18[1] = *v15;
            *(_QWORD *)(a1 + 3656) = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:");
            *(_DWORD *)(a1 + 3664) = FigCaptureRoundFloatToMultipleOf(1, (float)((float)*(int *)(a1 + 3668) * a4) / 30.0);
            if (dword_1ECFE9470)
            {
              v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
}

- (uint64_t)_overCaptureMasterStreamForZoomFactor:(uint64_t)a1
{
  uint64_t v4;
  float v6;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 3650))
  {
    if (!*(_BYTE *)(a1 + 3651))
      return -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, a2);
    return *(_QWORD *)(a1 + 592);
  }
  else
  {
    if (*(_QWORD *)(a1 + 584) || (v4 = *(_QWORD *)(a1 + 576)) == 0)
      v4 = *(_QWORD *)(a1 + 504);
    if (*(_BYTE *)(a1 + 1472) && *(_DWORD *)(a1 + 492) == 9)
    {
      objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
      if (v6 <= a2)
        return *(_QWORD *)(a1 + 576);
    }
  }
  return v4;
}

- (uint64_t)_overCaptureConfigureActiveSlaveStreamForMasterStream:(char)a3 zoomFactor:(float)a4 currentFrameRate:(float)a5 preferWider:
{
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  _BOOL8 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v7 = -[BWFigVideoCaptureDevice _overCaptureActiveSlaveStreamForZoomFactor:masterStream:currentFrameRate:preferWider:](a1, a2, a3, a4, a5);
    v8 = (void *)-[BWFigVideoCaptureDevice _overCaptureLockedSlaveStreamForMasterStream:recommendedSlaveStream:](a1, a2, v7);
    if ((objc_msgSend(*(id *)(a1 + 3144), "isEqualToString:", objc_msgSend(v8, "portType")) & 1) == 0)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v9 = *(void **)(a1 + 560);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v10)
      {
        v11 = v10;
        v12 = 0;
        v13 = *(_QWORD *)v19;
        while (1)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v19 != v13)
              objc_enumerationMutation(v9);
            v15 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
            if (v15 != v8)
            {
              objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "setStreamingRequiredWhenConfiguredAsSlave:", 0);
LABEL_10:
              v16 = 0;
              goto LABEL_14;
            }
            v12 |= objc_msgSend(v8, "streamingRequiredWhenConfiguredAsSlave") ^ 1;
            objc_msgSend(v8, "setStreamingRequiredWhenConfiguredAsSlave:", 1);
            if (!*(_BYTE *)(a1 + 1472) && !*(_BYTE *)(a1 + 217))
              goto LABEL_10;
            v16 = *(_BYTE *)(a1 + 3204) != 0;
LABEL_14:
            objc_msgSend(v15, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", v16);
          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
          if (!v11)
            return v12 & 1;
        }
      }
    }
  }
  LOBYTE(v12) = 0;
  return v12 & 1;
}

- (uint64_t)_overCaptureActiveSlaveStreamForZoomFactor:(char)a3 masterStream:(float)a4 currentFrameRate:(float)a5 preferWider:
{
  float v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (!a1)
    return 0;
  if (!*(_BYTE *)(a1 + 3848))
    goto LABEL_14;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
  if (*(_BYTE *)(a1 + 3840))
  {
    if (!*(_BYTE *)(a1 + 3849))
    {
      *(_BYTE *)(a1 + 3849) = 1;
      v10 = a5 * 4.0;
      if (a5 <= 0.0)
        v10 = 120.0;
      *(_DWORD *)(a1 + 3852) = (int)v10;
    }
  }
  else if (*(_BYTE *)(a1 + 3849) && *(_BYTE *)(a1 + 3856))
  {
    *(_BYTE *)(a1 + 3849) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
  if (!*(_BYTE *)(a1 + 3849))
    goto LABEL_14;
  v11 = *(_DWORD *)(a1 + 3852);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v13 < 0 != v12)
    return 0;
  *(_DWORD *)(a1 + 3852) = v13;
LABEL_14:
  v14 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:", -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](a1, a4));
  v15 = objc_msgSend(*(id *)(a1 + 568), "indexOfObject:", a2);
  if ((a3 & 1) != 0)
    goto LABEL_18;
  v16 = v15 - v14;
  if (v15 - v14 < 0)
    v16 = v14 - v15;
  if (v16 != 1)
  {
LABEL_18:
    if (v15)
      v14 = v15 - 1;
    else
      v14 = 1;
  }
  return objc_msgSend(*(id *)(a1 + 568), "objectAtIndexedSubscript:", v14);
}

- (uint64_t)_captureStreamBasedSolelyOnZoomFactor:(uint64_t)a1
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  float v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = objc_msgSend(*(id *)(a1 + 568), "firstObject");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = *(void **)(a1 + 568);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v10, "baseZoomFactor");
        if (v11 <= a2)
          v4 = (uint64_t)v10;
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }
  return v4;
}

- (uint64_t)_overCaptureLockedSlaveStreamForMasterStream:(uint64_t)a3 recommendedSlaveStream:
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = *(void **)(a1 + 3656);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        if (*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i) != a2)
          return *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
  return a3;
}

- (uint64_t)_updateStatsMasterForMasterStream:(uint64_t)result
{
  uint64_t v2;
  _BOOL4 v4;
  _BOOL4 v5;
  void *v6;
  int v7;

  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 552))
    {
      if (*(_BYTE *)(result + 3640))
      {
        os_unfair_lock_lock((os_unfair_lock_t)(result + 3824));
        if (*(_BYTE *)(v2 + 3849))
          v4 = *(_DWORD *)(v2 + 3852) < 1;
        else
          v4 = 0;
        os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3824));
      }
      else
      {
        v4 = 0;
      }
      if (*(_BYTE *)(v2 + 1472))
        v5 = *(float *)(v2 + 4040) != 0.0;
      else
        v5 = 1;
      v6 = *(void **)(v2 + 552);
      if (!v6)
        goto LABEL_17;
      v7 = !v5;
      if (!*(_BYTE *)(v2 + 608))
        v7 = 1;
      if (((v7 | v4) & 1) == 0)
      {
        if (!*(_BYTE *)(v2 + 609) || *(_QWORD *)(v2 + 584) != a2)
          a2 = *(_QWORD *)(v2 + 504);
      }
      else
      {
LABEL_17:
        a2 = 0;
      }
      return objc_msgSend(v6, "setCameraControlsStatisticsMasterStream:", a2);
    }
  }
  return result;
}

- (void)_updateBravoStreamSelectionForMasterStream:(int)a3 forceNotification:
{
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v11;
  void *v12;
  float v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (os_unfair_lock_s *)(a1 + 1288);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
    v7 = 1352;
    if (!*(_BYTE *)(a1 + 1368))
      v7 = 1336;
    v16 = *(_OWORD *)(a1 + v7);
    v8 = objc_msgSend(*(id *)(a1 + 1320), "selectionConfiguration", (_QWORD)v16);
    if (v8 == (_QWORD)v16 && v9 == *((_QWORD *)&v16 + 1))
    {
      os_unfair_lock_unlock(v6);
      if (!a3)
        return;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 1320), "setSelectionConfiguration:", (_QWORD)v16);
      os_unfair_lock_unlock(v6);
    }
    v11 = 1.0;
    if ((_QWORD)v16 == 3)
    {
      v12 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 552), "clientBaseZoomFactorsByPortType"), "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
      if (v12)
        objc_msgSend(v12, "floatValue");
      else
        objc_msgSend(a2, "baseZoomFactor");
      v11 = v13;
    }
    v17[0] = CFSTR("NewPropertyValue");
    v14 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v16, 16);
    v17[1] = CFSTR("MinAvailableVideoZoomFactor");
    v18[0] = v14;
    *(float *)&v15 = v11;
    v18[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15);
    objc_msgSend((id)a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("BravoStreamSelectionConfigurationChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 2));
  }
}

- (os_unfair_lock_s)overCaptureActiveSlaveStreamForcedOff
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  v1 = a1;
  if (a1)
  {
    v2 = a1 + 956;
    os_unfair_lock_lock(a1 + 956);
    v1 = (os_unfair_lock_s *)(BYTE1(v1[962]._os_unfair_lock_opaque) != 0);
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

- (float)_nextLargerBaseZoomFactorForRequestedZoomFactor:(uint64_t)a1
{
  float v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  float v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  void *v16;
  float v17;
  float v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = 0.0;
  if (a1)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v4 = *(void **)(a1 + 568);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v25 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
          objc_msgSend(v9, "baseZoomFactor");
          if (v10 >= a2)
          {
            objc_msgSend(v9, "baseZoomFactor");
            return v18;
          }
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v11 = (void *)objc_msgSend(v9, "nondisruptiveSwitchingZoomFactors", 0);
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
          if (v12)
          {
            v13 = v12;
            v14 = *(_QWORD *)v21;
            while (2)
            {
              for (j = 0; j != v13; ++j)
              {
                if (*(_QWORD *)v21 != v14)
                  objc_enumerationMutation(v11);
                v16 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * j);
                objc_msgSend(v16, "floatValue");
                if (v17 >= a2)
                {
                  objc_msgSend(v16, "floatValue");
                  return v18;
                }
              }
              v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
              if (v13)
                continue;
              break;
            }
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
        if (v6)
          continue;
        break;
      }
    }
  }
  return v2;
}

- (void)_sendMasterStreamChangedNotificationWithPortType:(void *)result
{
  const __CFString *v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = CFSTR("NewPropertyValue");
    v3[0] = a2;
    return (void *)objc_msgSend(result, "_postNotificationWithPayload:notificationPayload:", CFSTR("BravoMasterStreamChangedNotification"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, &v2, 1));
  }
  return result;
}

- (uint64_t)_sendMacroFocusChangedNotification:(uint64_t)result
{
  void *v2;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = (void *)result;
    v3 = CFSTR("NewPropertyValue");
    v4[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
    return objc_msgSend(v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("MacroFocusNotification"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1));
  }
  return result;
}

- (int)setTorchLevel:(float)a3
{
  uint64_t v3;
  float torchLevel;
  float v7;
  float v8;
  BWFigCaptureStream *v9;
  double v10;
  int v11;
  _BOOL4 v12;
  _BOOL8 v13;
  int v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  const __CFString *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  torchLevel = self->_torchLevel;
  if (a3 == -3.4028e38)
  {
    v7 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    if (v7 <= torchLevel)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = a3;
  if (a3 == 3.4028e38)
LABEL_3:
    v7 = self->_torchLevel;
LABEL_4:
  if (v7 > torchLevel)
  {
    v18 = v3;
    LODWORD(v17) = 0;
    FigDebugAssert3();
    v13 = 0;
    v14 = 0;
    v12 = 0;
    v11 = -16540;
  }
  else
  {
    v8 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    if (v7 == v8)
    {
      v11 = 0;
    }
    else
    {
      v9 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
      *(float *)&v10 = v7;
      v11 = -[BWFigCaptureStream setProperty:value:](v9, "setProperty:value:", *MEMORY[0x1E0D07840], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10));
      if (v11)
        v7 = 0.0;
      v8 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
    }
    v12 = v7 != v8;
    if (v7 != v8)
      *(float *)&self->_torchWillBeEnabledForVideoRecording = v7;
    v13 = v7 > 0.0;
    if (BYTE5(self->_autoTorchRampedUpTime.epoch) == v13)
    {
      v14 = 0;
    }
    else
    {
      BYTE5(self->_autoTorchRampedUpTime.epoch) = v13;
      v14 = 1;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  if (a3 == -3.4028e38)
  {
    v23 = CFSTR("NewPropertyValue");
    v24[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", torchLevel < 1.0, v17, v18);
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("TorchOverheated"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1));
  }
  if (v14)
  {
    v21 = CFSTR("NewPropertyValue");
    v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v13);
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("TorchActive"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v22, &v21, 1));
  }
  if (v12)
  {
    v19 = CFSTR("NewPropertyValue");
    *(float *)&v15 = v7;
    v20 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v15);
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("TorchLevel"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
    os_unfair_lock_lock(&self->_clientAuditTokenLock);
    FigCaptureLogTorchPowerEvent(self->_clientPID, self->_applicationID, v7);
    os_unfair_lock_unlock(&self->_clientAuditTokenLock);
  }
  return v11;
}

- (void)_postManualControlRequestCompletedWithName:(uint64_t)a3 requestID:(uint64_t)a4 timeDictionary:(void *)a5 additionalPayloadItems:
{
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = objc_alloc(MEMORY[0x1E0C99E08]);
    v11 = (void *)objc_msgSend(v10, "initWithObjectsAndKeys:", a4, CFSTR("NewPropertyValue"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3), CFSTR("ManualControlRequestID"), 0);
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v12 = (void *)objc_msgSend(a5, "allKeys");
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v18;
      do
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v18 != v15)
            objc_enumerationMutation(v12);
          objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(a5, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v16)), *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v16));
          ++v16;
        }
        while (v14 != v16);
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v14);
    }
    objc_msgSend(a1, "_postNotificationWithPayload:notificationPayload:", a2, v11);

  }
}

- (uint64_t)_servicePropertyChangeNotifications:(uint64_t)result
{
  uint64_t v2;
  void *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  void *v15;
  float v16;
  void *v17;
  Float64 v18;
  void *v19;
  float v20;
  float v21;
  float v22;
  void *v23;
  void *v24;
  float v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  void *v46;
  void *v47;
  BOOL v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v59;
  int v61;
  double v62;
  const __CFAllocator *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  CMTime time2;
  CMTime time1;
  uint64_t v71;
  float v72;
  uint64_t v73;
  float v74;
  CMTime v75;
  const __CFString *v76;
  uint64_t v77;
  const __CFString *v78;
  uint64_t v79;
  const __CFString *v80;
  uint64_t v81;
  const __CFString *v82;
  uint64_t v83;
  const __CFString *v84;
  uint64_t v85;
  const __CFString *v86;
  const __CFDictionary *v87;
  const __CFString *v88;
  _QWORD v89[3];

  v89[1] = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v2 = result;
  v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v75 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v74 = 0.0;
  v73 = 0;
  v72 = 0.0;
  v71 = 0;
  if (_servicePropertyChangeNotifications__sSendManualPropertyNotificationsOnceToken != -1)
    dispatch_once(&_servicePropertyChangeNotifications__sSendManualPropertyNotificationsOnceToken, &__block_literal_global_251);
  v4 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C60]), "intValue");
  v5 = *(_DWORD *)(v2 + 2616);
  v6 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C58]), "intValue");
  v7 = *(_DWORD *)(v2 + 2620);
  v67 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A18]), "intValue");
  v64 = *(_DWORD *)(v2 + 2624);
  v8 = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C68]), "intValue");
  v65 = *(_DWORD *)(v2 + 2628);
  v66 = v8;
  v9 = objc_msgSend((id)v2, "isBravoVariant");
  v10 = v3;
  if (v9)
  {
    v11 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
    v12 = *MEMORY[0x1E0D05A18];
    v13 = objc_msgSend(v11, "isEqualToString:", *MEMORY[0x1E0D05A18]);
    v10 = v3;
    if ((v13 & 1) == 0)
      v10 = (void *)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]), "objectForKeyedSubscript:", v12);
  }
  if (v10)
  {
    v14 = (_QWORD *)MEMORY[0x1E0D06C30];
    if (*(_DWORD *)(v2 + 1872) != 8)
      v14 = (_QWORD *)MEMORY[0x1E0D06970];
    v15 = (void *)objc_msgSend(v10, "objectForKeyedSubscript:", *v14);
    if (v15)
      v16 = (float)((float)(int)objc_msgSend(v15, "intValue") / -255.0) + 1.0;
    else
      v16 = 0.0;
  }
  else
  {
    v16 = *(float *)(v2 + 2648);
  }
  v17 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]);
  if (v17)
  {
    objc_msgSend(v17, "doubleValue");
    CMTimeMakeWithSeconds(&v75, v18, 1000000000);
  }
  v19 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B48]);
  v20 = 0.0;
  v21 = 0.0;
  if (v19)
  {
    objc_msgSend(v19, "floatValue");
    v21 = v22;
  }
  v23 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A10]);
  v24 = v23;
  if (v23)
  {
    objc_msgSend(v23, "floatValue");
    v20 = v25;
  }
  v26 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06848]);
  v27 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06820]);
  v28 = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E8]);
  if (v26)
  {
    if (v27)
    {
      v29 = (void *)v28;
      if (v28)
      {
        objc_msgSend(v26, "floatValue");
        v31 = v30;
        objc_msgSend(v27, "floatValue");
        v33 = v32;
        objc_msgSend(v29, "floatValue");
        if (v31 >= v33)
          v35 = v33;
        else
          v35 = v31;
        if (v35 >= v34)
          v35 = v34;
        *(float *)&v73 = v31 / v35;
        *((float *)&v73 + 1) = v33 / v35;
        v74 = v34 / v35;
      }
    }
  }
  v36 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06838]);
  v37 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06830]);
  v38 = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06828]);
  if (v36)
  {
    if (v37)
    {
      v39 = (void *)v38;
      if (v38)
      {
        objc_msgSend(v36, "floatValue");
        v41 = v40;
        objc_msgSend(v37, "floatValue");
        v43 = v42;
        objc_msgSend(v39, "floatValue");
        if (v41 >= v43)
          v45 = v43;
        else
          v45 = v41;
        if (v45 >= v44)
          v45 = v44;
        *(float *)&v71 = v41 / v45;
        *((float *)&v71 + 1) = v43 / v45;
        v72 = v44 / v45;
      }
    }
  }
  v46 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D067B0]);
  v47 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06770]);
  if (v46)
    v48 = v47 == 0;
  else
    v48 = 1;
  v49 = !v48;
  v50 = 0.0;
  if (!v48)
  {
    objc_msgSend(v47, "floatValue");
    v52 = v51;
    objc_msgSend(v46, "floatValue");
    v50 = log2f(v52 / v53);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 2640));
  if (v16 == *(float *)(v2 + 2648))
  {
    v54 = 0;
  }
  else
  {
    *(float *)(v2 + 2648) = v16;
    v54 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v4 <= v5)
      v54 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("LensPosition"));
  }
  time1 = v75;
  time2 = *(CMTime *)(v2 + 2652);
  if (CMTimeCompare(&time1, &time2))
  {
    *(CMTime *)(v2 + 2652) = v75;
    v55 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v6 <= v7)
      v55 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("ExposureDuration"));
  }
  else
  {
    v55 = 0;
  }
  if (v21 == *(float *)(v2 + 2676))
  {
    v56 = 0;
    if (!v24)
      goto LABEL_65;
  }
  else
  {
    *(float *)(v2 + 2676) = v21;
    v56 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v6 <= v7)
      v56 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("ISO"));
    if (!v24)
      goto LABEL_65;
  }
  if (v20 != *(float *)(v2 + 2680) || v67 > v64)
  {
    *(float *)(v2 + 2680) = v20;
    v68 = 1;
    if (!v49)
      goto LABEL_71;
    goto LABEL_68;
  }
LABEL_65:
  v68 = 0;
  if (!v49)
    goto LABEL_71;
LABEL_68:
  if (v50 != *(float *)(v2 + 2684))
  {
    *(float *)(v2 + 2684) = v50;
    if (_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications)
      v57 = 1;
    else
      v57 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("ExposureTargetOffset"));
    goto LABEL_72;
  }
LABEL_71:
  v57 = 0;
LABEL_72:
  if (v73 == *(_QWORD *)(v2 + 2688) && LODWORD(v74) == (unint64_t)*(unsigned int *)(v2 + 2696))
  {
    v59 = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 2688) = v73;
    *(float *)(v2 + 2696) = v74;
    v59 = 1;
    if (!_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications && v66 <= v65)
      v59 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("DeviceWhiteBalanceGains"));
  }
  if (v71 == *(_QWORD *)(v2 + 2700) && LODWORD(v72) == (unint64_t)*(unsigned int *)(v2 + 2708))
  {
    v61 = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 2700) = v71;
    *(float *)(v2 + 2708) = v72;
    if (_servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications)
      v61 = 1;
    else
      v61 = objc_msgSend((id)v2, "isPropertyObserved:", CFSTR("GrayWorldDeviceWhiteBalanceGains"));
  }
  result = pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 2640));
  if (!v54)
  {
    if (!v55)
      goto LABEL_90;
LABEL_102:
    v86 = CFSTR("NewPropertyValue");
    v63 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time1 = v75;
    v87 = CMTimeCopyAsDictionary(&time1, v63);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("ExposureDurationChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1));
    if (!v56)
      goto LABEL_92;
    goto LABEL_91;
  }
  v88 = CFSTR("NewPropertyValue");
  *(float *)&v62 = v16;
  v89[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v62);
  result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("LensPositionChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v89, &v88, 1));
  if (v55)
    goto LABEL_102;
LABEL_90:
  if (v56)
  {
LABEL_91:
    v84 = CFSTR("NewPropertyValue");
    *(float *)&v62 = v21;
    v85 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v62);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("ISOChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1));
  }
LABEL_92:
  if (v68)
  {
    v82 = CFSTR("NewPropertyValue");
    *(float *)&v62 = v20;
    v83 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v62);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("ExposureTargetBiasChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v83, &v82, 1));
  }
  if (v57)
  {
    v80 = CFSTR("NewPropertyValue");
    *(float *)&v62 = v50;
    v81 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v62);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("ExposureTargetOffsetChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v81, &v80, 1));
  }
  if (v59)
  {
    v78 = CFSTR("NewPropertyValue");
    v79 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v73, 12);
    result = objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("WhiteBalanceGainsChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v79, &v78, 1));
  }
  if (v61)
  {
    v76 = CFSTR("NewPropertyValue");
    v77 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v71, 12);
    return objc_msgSend((id)v2, "_postNotificationWithPayload:notificationPayload:", CFSTR("GrayWorldWhiteBalanceGainsChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v77, &v76, 1));
  }
  return result;
}

- (void)_postNotificationWithPayload:(id)a3 notificationPayload:(id)a4
{
  NSObject *notificationQueue;
  _QWORD block[7];

  if (a3)
  {
    notificationQueue = self->_notificationQueue;
    if (notificationQueue)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __76__BWFigVideoCaptureDevice__postNotificationWithPayload_notificationPayload___block_invoke;
      block[3] = &unk_1E491EB90;
      block[4] = a3;
      block[5] = self;
      block[6] = a4;
      dispatch_async(notificationQueue, block);
    }
  }
  else
  {
    FigDebugAssert3();
  }
}

- (BOOL)isPropertyObserved:(id)a3
{
  return objc_msgSend((id)objc_msgSend(*(id *)&self->_currentBiasedExposureCompletedID, "objectForKeyedSubscript:", a3), "BOOLValue");
}

- (BOOL)smartCameraEnabled
{
  return (BOOL)self->_zoomFactorChangedDelegate;
}

- (void)captureStreamWillStartStreaming:(id)a3
{
  if (self->_captureStream == a3)
    -[BWFigVideoCaptureDevice _deviceWillStartStreaming]((uint64_t)self);
  -[BWStreamStartStopSynchronizer streamWillStart:](self->_synchronizedStreamsStartStopSynchronizer, "streamWillStart:", a3);
}

- (void)captureStreamDidStartStreaming:(id)a3
{
  void *v5;
  void *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t lastRequestedZoomFactor_low;
  void *v13;

  v5 = (void *)objc_msgSend(a3, "stream");
  v6 = (void *)objc_msgSend(v5, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07690], 0);
  if (v6)
  {
    objc_msgSend(v6, "floatValue");
    v8 = v7;
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    if (v9 == 0.0)
      objc_msgSend(a3, "baseZoomFactor");
    v10 = v8 * v9;
  }
  else
  {
    v10 = 1.0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  v11 = *(float *)&self->_zoomCommandHandler;
  if (v11 <= v10)
    v11 = v10;
  *(float *)&self->_zoomCommandHandler = v11;
  os_unfair_lock_unlock((os_unfair_lock_t)&self->_maxISPZoomFactor);
  -[BWStreamStartStopSynchronizer streamDidStart:](self->_synchronizedStreamsStartStopSynchronizer, "streamDidStart:", a3);
  if (self->_captureStream == a3)
  {
    if (v10 <= 1.0)
      lastRequestedZoomFactor_low = 0;
    else
      lastRequestedZoomFactor_low = LODWORD(self->_lastRequestedZoomFactor);
    -[NSMutableArray setTypicalISPZoomDelay:maxISPZoomDelay:clientCanCompensateForDelay:](self->_whiteBalanceGainsOrderedKeys, "setTypicalISPZoomDelay:maxISPZoomDelay:clientCanCompensateForDelay:", lastRequestedZoomFactor_low, LODWORD(self->_newTotalZoomFactor), 0);
  }
  v13 = (void *)objc_msgSend(a3, "portType");
  if (objc_msgSend(v13, "isEqualToString:", *MEMORY[0x1E0D05A20]))
    self->_timeOfFlightCameraUseCaseMask |= 2u;
  if (self->_deviceType == 13 && self->_depthDataDeliveryEnabled)
    self->_timeOfFlightCameraUseCaseMask |= 8u;
  if (self->_supplementalPointCloudCaptureDevice)
    self->_timeOfFlightCameraUseCaseMask |= 0x10u;
  if (self->_bravoTelephotoCaptureStream == a3)
  {
    objc_msgSend(a3, "maxEIT");
    -[BWBravoStreamSelector setTeleMaxEIT:](self->_bravoStreamSelector, "setTeleMaxEIT:");
  }
}

- (void)setZoomFactorChangedDelegate:(id)a3 forPortType:(id)a4
{
  if (!a3 || !self->_previewTimeMachineProcessor)
  {
    self->_previewTimeMachineProcessor = (BWPreviewTimeMachineProcessor *)a3;
    if (!a3)
      a4 = 0;
    self->_smartStyleAttachedMediaTimeMachineDelegate = (FigWeakReference *)a4;
  }
}

- (void)setCinematicFramingEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  if (self->_cinematicFramingEnabled != a3)
  {
    self->_cinematicFramingEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_cinematicFramingStartTime = v5;
    else
      self->_cinematicFramingTotalTime += v5 - self->_cinematicFramingStartTime;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "setCinematicFramingEnabled:", v3);
      }
      while (v8 != v10);
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_2(uint64_t a1, uint64_t a2)
{
  -[BWFigVideoCaptureDevice _handlePendingStillImageCaptureRequest](a2);
}

- (void)setStillImageCaptureEnabled:(BOOL)a3
{
  _BOOL8 v3;
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v3 = a3;
  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "setStillImageCaptureEnabled:", v3);
      }
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }
  if (!v3)
    -[BWFigVideoCaptureDevice setUnifiedBracketingMode:](self, "setUnifiedBracketingMode:", 0);
  self->_flashScene = v3;
}

- (BOOL)attachesUprightExifOrientationMetadataToStreamingFrames
{
  return BYTE4(self->_zoomFactorChangedDelegatePortType);
}

- (void)_serviceSDOFSceneMonitoringWithCaptureStream:(uint64_t)a1 sampleBuffer:(void *)a2 frameStatisticsByPortType:(const void *)a3 flashModeForSceneMonitoring:(void *)a4 hdrModeForSceneMonitoring:(int)a5 qualityPrioritizationForSceneMonitoring:(int)a6 streamingImageIntent:(int)a7
{
  void *v13;
  void *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  FigCaptureCameraParameters *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  int v26;
  int v27;
  float v28;
  float v29;
  void *v30;
  CFStringRef *v31;
  void *v32;
  CFDictionaryRef DictionaryRepresentation;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  void *v44;
  float v45;
  unsigned int v46;
  int v47;
  void *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  CGRect rect;
  CGPoint point;
  uint64_t v56;
  uint64_t v57;
  CGPoint v58;

  if (a1)
  {
    v56 = 0;
    v57 = 0;
    -[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](a1, a2, a4, a5, a6, a7, 0, &v56);
    v52 = a6;
    v53 = a7;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1500));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v13 = *(void **)(a1 + 1520);
      v14 = (void *)objc_msgSend(*(id *)(a1 + 552), "clientBaseZoomFactorsByPortType");
      objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0D05A18]), "floatValue");
      v16 = v15 == 0.0 ? 1.0 : v15;
      objc_msgSend(*(id *)(a1 + 2744), "appliedZoomFactorWithoutFudge");
      v18 = v17 / v16;
      objc_msgSend(v13, "zoomFactorForTuningParameters");
      if (vabds_f32(v18, v19) > 0.1)
      {
        v20 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
        v21 = objc_msgSend(*(id *)(a1 + 1296), "portType");
        v22 = objc_msgSend(*(id *)(a1 + 1296), "sensorIDString");
        *(float *)&v23 = v18;
        v24 = -[FigCaptureCameraParameters portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:](v20, "portraitSceneMonitoringParametersForPortType:sensorIDString:zoomFactorRelativeToWidePortType:", v21, v22, v23);
        if (v24)
        {
          *(float *)&v25 = v18;
          objc_msgSend(v13, "updateTuningParameters:zoomFactor:", v24, v25);
        }
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3824));
    v26 = *(_DWORD *)(a1 + 3836);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3824));
    LODWORD(v51) = v26;
    v27 = objc_msgSend(*(id *)(a1 + 1520), "resolveSDOFStatusWithSampleBuffer:frameStatisticsByPortType:sceneFlags:flashOrTorchWillBeActive:digitalFlashWillFire:thermalPressureLevel:peakPowerPressureLevel:effectStatus:stagePreviewStatus:", a3, a4, v51, (char *)&v57 + 4, &v57);
    objc_msgSend(*(id *)(a1 + 1520), "focusDistanceToMaxAllowedFocusDistanceRatio");
    v29 = v28;
    v30 = *(void **)(a1 + 3752);
    v31 = (CFStringRef *)MEMORY[0x1E0D05CB0];
    if (v30)
    {
      point = (CGPoint)*MEMORY[0x1E0C9D538];
      CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusPoint")), &point);
      v32 = (void *)CMGetAttachment(a3, *v31, 0);
      rect.origin.x = 0.0;
      rect.origin.y = 0.0;
      __asm { FMOV            V0.2D, #1.0 }
      rect.size = _Q0;
      CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v32, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E68]), &rect);
      v58.x = FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(point.x, point.y, rect.origin.x, rect.origin.y, rect.size.width);
      DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v58);
      objc_msgSend(*(id *)(a1 + 3752), "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("CinematicVideoFocusPoint"));
      CMSetAttachment(a3, CFSTR("CinematicVideoFocusRequest"), *(CFTypeRef *)(a1 + 3752), 1u);

      *(_QWORD *)(a1 + 3752) = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1500));
    if (!*(_BYTE *)(a1 + 1499))
      goto LABEL_47;
    v39 = objc_msgSend((id)CMGetAttachment(a3, CFSTR("DepthDisabled"), 0), "BOOLValue");
    v40 = *(_QWORD *)(a1 + 584);
    if (v40)
    {
      v41 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 1320), "eligibleFallbackPortTypes"), "containsObject:", objc_msgSend(*(id *)(a1 + 584), "portType"));
      if (*(_BYTE *)(a1 + 1460))
        LODWORD(v40) = v41;
      else
        LODWORD(v40) = 0;
    }
    if ((v40 | v39) == 1)
    {
      v57 = 0;
      v27 = 1;
      if (((v40 ^ 1 | v39) & 1) == 0)
        CMSetAttachment(a3, CFSTR("DepthDisabled"), MEMORY[0x1E0C9AAB0], 1u);
    }
    if (*(_BYTE *)(a1 + 1499) && *(_QWORD *)(a1 + 2280))
    {
      if ((HIDWORD(v57) - 11) <= 1
        && (v56 & 0x2000000) == 0
        && (-[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v56, a5) == 2
         || objc_msgSend((id)a1, "streamingDigitalFlashMode")))
      {
        HIDWORD(v57) = 0;
      }
    }
    else
    {
LABEL_47:
      if ((!*(_BYTE *)(a1 + 2153) || (v56 & 0x4000) != 0) && *(_BYTE *)(a1 + 1498) && (HIDWORD(v57) & 0xFFFFFFFB) == 1)
      {
        v42 = !v52 && v53 <= 1;
        v43 = !v42;
        v44 = *(void **)(a1 + 504);
        objc_msgSend(v44, "baseZoomFactor");
        v46 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](a1, v44, a4, v43, 0, 1, v45);
        if (-[BWFigVideoCaptureDevice _ubResolveDigitalFlashStatusForSceneFlags:flashMode:](a1, v46, a5))
        {
          if (HIDWORD(v57) == 1)
            v47 = 9;
          else
            v47 = 10;
          HIDWORD(v57) = v47;
        }
      }
    }
    if (v29 != 0.0)
    {
      v48 = (void *)CMGetAttachment(a3, *v31, 0);
      *(float *)&v49 = v29;
      v50 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v49);
      objc_msgSend(v48, "setObject:forKeyedSubscript:", v50, *MEMORY[0x1E0D08790]);
    }
    if (v27)
      -[BWFigVideoCaptureDevice _updateSDOFEffectStatus:newStagePreviewStatus:]((os_unfair_lock_s *)a1, HIDWORD(v57), v57);
  }
}

- (void)_updateSDOFEffectStatus:(unsigned int)a3 newStagePreviewStatus:
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  if (a1)
  {
    if ((_DWORD)a2)
      v5 = a3;
    else
      v5 = 0;
    v6 = a1 + 375;
    os_unfair_lock_lock(a1 + 375);
    if (a1[376]._os_unfair_lock_opaque == (_DWORD)a2)
    {
      if ((_DWORD)v5 == a1[377]._os_unfair_lock_opaque)
      {
        os_unfair_lock_unlock(v6);
        return;
      }
    }
    else
    {
      a1[376]._os_unfair_lock_opaque = a2;
      if ((_DWORD)v5 == a1[377]._os_unfair_lock_opaque)
      {
LABEL_10:
        os_unfair_lock_unlock(v6);
        -[BWFigVideoCaptureDevice _postSDOFEffectStatus:SDOFStagePreviewStatus:]((uint64_t)a1, a2, v5);
        return;
      }
    }
    a1[377]._os_unfair_lock_opaque = v5;
    goto LABEL_10;
  }
}

- (BWFigVideoCaptureStream)bravoSuperWideCaptureStream
{
  return self->_bravoSuperWideCaptureStream;
}

- (BOOL)parallaxMitigationBasedOnZoomFactorEnabled
{
  return self->_parallaxMitigationBasedOnZoomFactorEnabled;
}

- (uint64_t)_postSDOFEffectStatus:(uint64_t)a3 SDOFStagePreviewStatus:
{
  id *v4;
  void *v5;

  if (result)
  {
    v4 = (id *)result;
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2), CFSTR("EffectStatus"), 0);
    if (objc_msgSend(v4[190], "portraitSceneMonitoringRequiresStageThresholds"))
      objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3), CFSTR("StagePreviewStatus"));
    return objc_msgSend(v4, "_postNotificationWithPayload:notificationPayload:", CFSTR("ShallowDepthOfFieldStatusChanged"), v5);
  }
  return result;
}

- (NSString)preferredMasterPortType
{
  return (NSString *)&self->_shouldNotifySensorTemperatureByPortType->super.super.isa;
}

- (NSDictionary)clientBaseZoomFactorsByPortType
{
  return -[BWFigVideoCaptureSynchronizedStreamsGroup clientBaseZoomFactorsByPortType](self->_synchronizedStreamsGroup, "clientBaseZoomFactorsByPortType");
}

- (int)autoImageControlMode
{
  NSObject *autofocusProcessorQueue;
  int v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __47__BWFigVideoCaptureDevice_autoImageControlMode__block_invoke;
  v5[3] = &unk_1E491E9A8;
  v5[4] = self;
  v5[5] = &v6;
  dispatch_sync(autofocusProcessorQueue, v5);
  v3 = *((_DWORD *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

- (uint64_t)_sendInitialValuesToPortraitEffectPropertiesDelegate:(double)a3
{
  uint64_t v4;
  double v5;
  id v6;
  _QWORD v7[5];

  if (result)
  {
    v4 = result;
    LODWORD(a3) = *(_DWORD *)(result + 288);
    objc_msgSend(a2, "didChangeBackgroundBlurAperture:", a3);
    LODWORD(v5) = *(_DWORD *)(v4 + 320);
    objc_msgSend(a2, "didChangeStudioLightingIntensity:", v5);
    objc_msgSend(a2, "didChangeGesturesEnabled:", *(unsigned __int8 *)(v4 + 326));
    objc_msgSend(a2, "didChangeBackgroundReplacementPixelBuffer:", *(_QWORD *)(v4 + 392));
    v6 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", v4);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __80__BWFigVideoCaptureDevice__sendInitialValuesToPortraitEffectPropertiesDelegate___block_invoke;
    v7[3] = &unk_1E4926358;
    v7[4] = v6;
    return objc_msgSend(a2, "setReactionsInProgressChangedHandler:", v7);
  }
  return result;
}

- (void)setVideoStabilizationStrength:(int)a3
{
  uint64_t v3;
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v3 = *(_QWORD *)&a3;
  v15 = *MEMORY[0x1E0C80C00];
  HIDWORD(self->_defaultContinuousAutoFocusWindowSize.height) = a3;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "setVideoStabilizationStrength:", v3);
      }
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }
  if (SHIDWORD(self->_defaultContinuousAutoFocusWindowSize.height) >= 3)
  {
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    self->_nextStreamingImageIntent = 8;
    self->_streamingImageIntentNeedsUpdate = 1;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
  }
}

- (void)setDigitalFlashEnabled:(BOOL)a3
{
  uint64_t v3;
  _BOOL8 v4;
  NSMutableDictionary *v6;
  NSArray *captureStreams;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (self->_digitalFlashEnabled != a3)
  {
    v4 = a3;
    if (a3)
    {
      if (self->_unifiedBracketingMode != 1)
      {
        v13 = v3;
        LODWORD(v12) = 0;
        FigDebugAssert3();
      }
      self->_digitalFlashEnabled = v4;

      v6 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {
      self->_digitalFlashEnabled = 0;

      v6 = 0;
    }
    self->_digitalFlashExposureTimesForSceneMonitoringByPortType = v6;
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    captureStreams = self->_captureStreams;
    v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(captureStreams);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v11++), "setDigitalFlashEnabled:", v4, v12, v13);
        }
        while (v9 != v11);
        v9 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }
  }
}

uint64_t __47__BWFigVideoCaptureDevice_autoImageControlMode__block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 1828);
  return result;
}

- (BOOL)setAutoFlashEnabled:(BOOL)a3 error:(id *)a4
{
  uint64_t v5;
  os_unfair_lock_s *p_frameStatisticsLock;
  uint64_t flashModeForSceneMonitoring;
  uint64_t hdrModeForSceneMonitoring;
  uint64_t digitalFlashModeForSceneMonitoring;

  if (a3)
    v5 = 2;
  else
    v5 = 0;
  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  hdrModeForSceneMonitoring = self->_hdrModeForSceneMonitoring;
  digitalFlashModeForSceneMonitoring = self->_digitalFlashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  -[BWFigVideoCaptureDevice setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:](self, "setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:", v5, flashModeForSceneMonitoring, hdrModeForSceneMonitoring, digitalFlashModeForSceneMonitoring);
  return 1;
}

- (int)setStillImageSceneMonitoringFlashMode:(int)a3 hdrMode:(int)a4 qualityPrioritization:(int)a5 digitalFlashMode:(int)a6
{
  os_unfair_lock_s *p_frameStatisticsLock;
  int flashModeForSceneMonitoring;
  NSObject *autofocusProcessorQueue;
  int v14;
  _QWORD block[6];
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  if ((a4 & 0xFFFFFFFD) == 0 && flashModeForSceneMonitoring != a4)
  {
    autofocusProcessorQueue = self->_autofocusProcessorQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __112__BWFigVideoCaptureDevice_setStillImageSceneMonitoringFlashMode_hdrMode_qualityPrioritization_digitalFlashMode___block_invoke;
    block[3] = &unk_1E4926110;
    v17 = a4;
    block[4] = self;
    block[5] = &v18;
    dispatch_sync(autofocusProcessorQueue, block);
  }
  if (*((_DWORD *)v19 + 6))
  {
    FigDebugAssert3();
  }
  else
  {
    os_unfair_lock_lock(p_frameStatisticsLock);
    LODWORD(self->_maxTorchLevel) = a3;
    self->_flashModeForSceneMonitoring = a4;
    self->_hdrModeForSceneMonitoring = a5;
    self->_digitalFlashModeForSceneMonitoring = a6;
    HIBYTE(self->_qualityPrioritizationForSceneMonitoring) = 1;
    os_unfair_lock_unlock(p_frameStatisticsLock);
  }
  v14 = *((_DWORD *)v19 + 6);
  _Block_object_dispose(&v18, 8);
  return v14;
}

- (BOOL)portraitPreviewForegroundBlurEnabled
{
  FigCaptureCameraParameters *v3;
  void *v4;
  NSString *v5;
  NSArray *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  BWFigVideoCaptureStream *v13;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
  v4 = (void *)*MEMORY[0x1E0D05A18];
  v5 = -[BWFigVideoCaptureStream sensorIDString](-[BWFigVideoCaptureDevice captureStream](self, "captureStream"), "sensorIDString");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = -[BWFigVideoCaptureDevice activePortTypes](self, "activePortTypes");
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (!v7)
    goto LABEL_14;
  v8 = v7;
  v15 = v4;
  v9 = *(_QWORD *)v17;
  v10 = *MEMORY[0x1E0D05A30];
  v11 = *MEMORY[0x1E0D05A40];
  while (2)
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v17 != v9)
        objc_enumerationMutation(v6);
      v4 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
      if (objc_msgSend(v4, "isEqualToString:", v10))
      {
        v13 = -[BWFigVideoCaptureDevice bravoTelephotoCaptureStream](self, "bravoTelephotoCaptureStream");
LABEL_13:
        v5 = -[BWFigVideoCaptureStream sensorIDString](v13, "sensorIDString");
        goto LABEL_14;
      }
      if (objc_msgSend(v4, "isEqualToString:", v11))
      {
        v13 = -[BWFigVideoCaptureDevice pearlInfraredCaptureStream](self, "pearlInfraredCaptureStream");
        goto LABEL_13;
      }
    }
    v8 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v8)
      continue;
    break;
  }
  v4 = v15;
LABEL_14:
  -[BWFigVideoCaptureDevice requestedZoomFactorRelativeToPortType:](self, "requestedZoomFactorRelativeToPortType:", v4);
  return -[FigCaptureCameraParameters portraitPreviewForegroundBlurEnabledForPortType:sensorIDString:zoomFactor:](v3, "portraitPreviewForegroundBlurEnabledForPortType:sensorIDString:zoomFactor:", v4, v5);
}

- (float)requestedZoomFactorRelativeToPortType:(id)a3
{
  float v5;
  float v6;
  float v7;

  -[BWFigVideoCaptureDevice _configureZoomFudging]((uint64_t)self);
  objc_msgSend(-[NSDictionary objectForKeyedSubscript:](-[BWFigVideoCaptureDevice baseZoomFactorsByPortType](self, "baseZoomFactorsByPortType"), "objectForKeyedSubscript:", a3), "floatValue");
  if (v5 == 0.0)
    v6 = 1.0;
  else
    v6 = v5;
  -[BWZoomCommandHandler requestedZoomFactor](-[BWFigVideoCaptureDevice zoomCommandHandler](self, "zoomCommandHandler"), "requestedZoomFactor");
  return v7 / v6;
}

- (NSDictionary)baseZoomFactorsByPortType
{
  return -[BWFigVideoCaptureSynchronizedStreamsGroup baseZoomFactorsByPortType](self->_synchronizedStreamsGroup, "baseZoomFactorsByPortType");
}

- (BOOL)isExternalVariant
{
  return BWDeviceTypeIsExtensionDeviceType(self->_deviceType);
}

- (BOOL)clientExpectsCameraMountedInLandscapeOrientation
{
  return (BOOL)self->_lastSphereMode;
}

- (int)setFocusModeAutoWithRect:(CGRect)a3 restrictToRect:(BOOL)a4 continuous:(BOOL)a5 smooth:(BOOL)a6 rangeRestrictionNear:(float)a7 rangeRestrictionFar:(float)a8 isFocusRectInOverscanSpace:(BOOL)a9
{
  uint64_t *v9;
  uint64_t v10;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD v13[5];
  CGRect v14;
  uint64_t v15;
  float v16;
  float v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;

  v9 = &kFigImageControlSampleBufferProcessorProperty_ContinuousAutoFocus;
  if (!a5)
    v9 = &kFigImageControlSampleBufferProcessorProperty_FocusScan;
  v10 = *v9;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __153__BWFigVideoCaptureDevice_setFocusModeAutoWithRect_restrictToRect_continuous_smooth_rangeRestrictionNear_rangeRestrictionFar_isFocusRectInOverscanSpace___block_invoke;
  v13[3] = &unk_1E4925F90;
  v14 = a3;
  v18 = a9;
  v13[4] = self;
  v19 = a5;
  v20 = a6;
  v16 = a7;
  v17 = a8;
  v21 = a4;
  v15 = v10;
  dispatch_sync(focusAndExposureUpdateQueue, v13);
  return 0;
}

- (uint64_t)_setExposureModeAutoWithRect:(double)a3
{
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[10];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  if (!a1)
    return 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v5 = *(NSObject **)(a1 + 1560);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __56__BWFigVideoCaptureDevice__setExposureModeAutoWithRect___block_invoke;
  v8[3] = &unk_1E4926088;
  *(double *)&v8[6] = a2;
  *(double *)&v8[7] = a3;
  *(double *)&v8[8] = a4;
  *(double *)&v8[9] = a5;
  v8[4] = a1;
  v8[5] = &v9;
  dispatch_sync(v5, v8);
  v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

- (uint64_t)_updateExposureRectIfNeededForZoomFactor:(CGRect *)a1
{
  uint64_t v2;
  double v4;
  CFDictionaryRef DictionaryRepresentation;
  __CFString **v6;
  CGRect v8;

  v2 = (uint64_t)a1;
  if (a1)
  {
    if (CGRectIsEmpty(a1[52]))
    {
      return 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 3676));
      v4 = *(double *)(v2 + 3680);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3676));
      v8.origin.x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(*(double *)(v2 + 1664), *(double *)(v2 + 1672), *(double *)(v2 + 1680), *(double *)(v2 + 1688), a2, v4);
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v8);
      v6 = kFigImageControlSampleBufferProcessorProperty_AutoExposureAreaOfInterest;
      if (*(_BYTE *)(v2 + 1696))
        v6 = kFigImageControlSampleBufferProcessorProperty_SpotMeteredExposureAreaOfInterest;
      v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v2, (uint64_t)*v6, (uint64_t)DictionaryRepresentation);
      if (DictionaryRepresentation)
        CFRelease(DictionaryRepresentation);
    }
  }
  return v2;
}

- (uint64_t)_updateAutoFocusRectIfNeededForZoomFactor:(uint64_t)a1
{
  uint64_t v2;
  double v4;
  CFDictionaryRef DictionaryRepresentation;
  CGRect v7;

  v2 = a1;
  if (a1)
  {
    if (!_FigIsCurrentDispatchQueue())
      FigDebugAssert3();
    if (CGRectIsEmpty(*(CGRect *)(v2 + 1704)))
    {
      return 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 3676));
      v4 = *(double *)(v2 + 3680);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 3676));
      v7.origin.x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(*(double *)(v2 + 1704), *(double *)(v2 + 1712), *(double *)(v2 + 1720), *(double *)(v2 + 1728), a2, v4);
      DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v7);
      v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](v2, 0x1E4941E78, (uint64_t)DictionaryRepresentation);
      if (DictionaryRepresentation)
        CFRelease(DictionaryRepresentation);
    }
  }
  return v2;
}

- (void)setOverCaptureEnabled:(BOOL)a3
{
  _BOOL8 v3;
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t i;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled != a3)
  {
    v3 = a3;
    self->_cinematicFramingFeedbackForCameraControlsROIEnabled = a3;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    captureStreams = self->_captureStreams;
    v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v14;
      v9 = *MEMORY[0x1E0C9D538];
      v10 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v14 != v8)
            objc_enumerationMutation(captureStreams);
          v12 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          objc_msgSend(v12, "setOverCaptureEnabled:", v3);
          objc_msgSend(v12, "setPreviewShift:", v9, v10);
          objc_msgSend(v12, "setPreviewShiftAtBaseZoom:", v9, v10);
        }
        v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v7);
    }
    if (v3)
    {
      *(_DWORD *)((char *)&self->_memoryPool + 1) = 16843009;
      BYTE5(self->_memoryPool) = -[BWBravoStreamSelector superWideAutoSwitchingSupported](self->_bravoStreamSelector, "superWideAutoSwitchingSupported");
      *(_DWORD *)&self->_standbySlaveFrameSkippingEnabledForOverCapture = 22;
    }
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (uint64_t)_updateParallaxMitigationBasedOnZoomFactorEnabled
{
  uint64_t v1;
  BOOL v2;

  if (result)
  {
    v1 = result;
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 528), "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsSwitchOverParameters")), "objectForKeyedSubscript:", CFSTR("parallaxMitigationBasedOnZoomFactorEnabled")), "BOOLValue");
    v2 = (_DWORD)result && !*(_BYTE *)(v1 + 3640) && (*(float *)(v1 + 4040) != 0.0 || *(_BYTE *)(v1 + 1472) == 0);
    if (*(_BYTE *)(v1 + 216))
      v2 = 0;
    *(_BYTE *)(v1 + 1448) = v2;
  }
  return result;
}

- (void)setUnifiedBracketingMode:(int)a3
{
  NSDictionary *ubCaptureParametersByPortType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  int unifiedBracketingMode;
  NSArray *captureStreams;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  _BOOL8 v18;
  _BOOL8 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if ((!a3 || self->_flashScene) && self->_unifiedBracketingMode != a3)
  {
    self->_unifiedBracketingMode = a3;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    ubCaptureParametersByPortType = self->_ubCaptureParametersByPortType;
    v6 = -[NSDictionary countByEnumeratingWithState:objects:count:](ubCaptureParametersByPortType, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v25 != v8)
            objc_enumerationMutation(ubCaptureParametersByPortType);
          v10 = -[NSDictionary objectForKeyedSubscript:](self->_ubCaptureParametersByPortType, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * i));
          if (objc_msgSend(v10, "preserveBlackLevel"))
            self->_ubHDRWithBiasEnabled = 1;
          if (objc_msgSend(v10, "nonHDRBrightLightCapturesEnabled"))
            self->_ubNonHDRBrightLightCaptureEnabled = 1;
        }
        v7 = -[NSDictionary countByEnumeratingWithState:objects:count:](ubCaptureParametersByPortType, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      }
      while (v7);
    }
    unifiedBracketingMode = self->_unifiedBracketingMode;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    captureStreams = self->_captureStreams;
    v13 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v21;
      do
      {
        for (j = 0; j != v14; ++j)
        {
          if (*(_QWORD *)v21 != v15)
            objc_enumerationMutation(captureStreams);
          v17 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * j);
          objc_msgSend(v17, "setUnifiedBracketingEnabled:", unifiedBracketingMode == 1);
          if (BYTE4(self->_mostRecentSmartCameraResult))
            v18 = unifiedBracketingMode == 1;
          else
            v18 = 0;
          objc_msgSend(v17, "setZeroShutterLagEnabled:", v18);
        }
        v14 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      }
      while (v14);
    }
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
    -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
    -[BWFigVideoCaptureDevice _ubSetupMetadataTimeMachine]((uint64_t)self);
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    if (a3)
      v19 = 1;
    else
      v19 = self->_flashModeForSceneMonitoring != 0;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4942038, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v19));
    -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4942058, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3 != 0));
  }
}

- (void)setZeroShutterLagEnabled:(BOOL)a3
{
  NSArray *captureStreams;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _BOOL8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (BYTE4(self->_mostRecentSmartCameraResult) != a3)
  {
    BYTE4(self->_mostRecentSmartCameraResult) = a3;
    -[BWFigVideoCaptureDevice _ubSetupMetadataTimeMachine]((uint64_t)self);
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    captureStreams = self->_captureStreams;
    v5 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v11 != v7)
            objc_enumerationMutation(captureStreams);
          if (BYTE4(self->_mostRecentSmartCameraResult))
            v9 = self->_unifiedBracketingMode != 2;
          else
            v9 = 0;
          objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "setZeroShutterLagEnabled:", v9);
        }
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v6);
    }
  }
}

- (void)setCinematicVideoEnabled:(BOOL)a3
{
  _BOOL8 v3;
  __CFString *v5;
  uint64_t v6;
  NSArray *captureStreams;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef cf1;
  _BYTE v17[128];
  uint64_t v18;

  v3 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque) = a3;
  if (a3)
    v5 = CFSTR("CinematicVideo");
  else
    v5 = 0;
  -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941B58, (uint64_t)v5);
  cf1 = 0;
  -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:]((uint64_t)self, 0x1E4941F38, (uint64_t)&cf1);
  if (CFEqual(cf1, CFSTR("AEAndAF")))
  {
    v6 = 3;
  }
  else if (CFEqual(cf1, CFSTR("AEOnly")))
  {
    v6 = 1;
  }
  else
  {
    v6 = 2 * (CFEqual(cf1, CFSTR("AFOnly")) != 0);
  }
  -[BWFigVideoCaptureDevice setFaceDetectionDrivenImageProcessingMode:](self, "setFaceDetectionDrivenImageProcessingMode:", v6);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  captureStreams = self->_captureStreams;
  v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "setCinematicVideoEnabled:", v3);
      }
      v9 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v9);
  }
}

- (int)setFaceDetectionDrivenImageProcessingMode:(int)a3
{
  __CFString *v4;
  uint64_t *v5;
  int os_unfair_lock_opaque_low;
  uint64_t *v7;
  __CFString *faceDetectionDrivenImageProcessingModeString;
  __CFString *v9;

  switch(a3)
  {
    case 0:
      v4 = CFSTR("Disable");
      break;
    case 1:
      v4 = CFSTR("AEOnly");
      break;
    case 2:
      v5 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_Disable;
      os_unfair_lock_opaque_low = LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque);
      v7 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AF;
      goto LABEL_7;
    case 3:
      v5 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AE;
      os_unfair_lock_opaque_low = LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque);
      v7 = &kFigAutofocusSampleBufferProcessorFaceDetectionMode_AEAndAF;
LABEL_7:
      if (!os_unfair_lock_opaque_low)
        v5 = v7;
      v4 = (__CFString *)*v5;
      break;
    default:
      v4 = 0;
      break;
  }
  if (self->_faceDetectionDrivenImageProcessingModeString == v4)
    return 0;
  if (self->_faceDrivenAEAFEnabledByDefault)
  {
    if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
    {
      faceDetectionDrivenImageProcessingModeString = self->_faceDetectionDrivenImageProcessingModeString;
      if ((faceDetectionDrivenImageProcessingModeString == CFSTR("AFOnly")
         || faceDetectionDrivenImageProcessingModeString == CFSTR("AEAndAF"))
        && (v4 == CFSTR("AEOnly") || v4 == CFSTR("Disable")))
      {
        ++self->_faceDrivenAFDisabledCount;
      }
    }
    if (self->_faceDrivenAEAFEnabledByDefault)
    {
      if (objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))
      {
        v9 = self->_faceDetectionDrivenImageProcessingModeString;
        if ((v9 == CFSTR("AEOnly") || v9 == CFSTR("AEAndAF")) && (v4 == CFSTR("AFOnly") || v4 == CFSTR("Disable")))
          ++self->_faceDrivenAEDisabledCount;
      }
    }
  }
  self->_faceDetectionDrivenImageProcessingModeString = v4;
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941F38, (uint64_t)v4);
}

- (int)setExposureTargetBias:(float)a3 requestID:(int)a4
{
  uint64_t v4;
  int v6;
  _QWORD v8[2];
  _QWORD v9[3];

  v4 = *(_QWORD *)&a4;
  v9[2] = *MEMORY[0x1E0C80C00];
  if (a3 == 3.4028e38)
    a3 = -[BWFigVideoCaptureDevice exposureTargetBias]((uint64_t)self);
  v8[0] = *MEMORY[0x1E0D074C8];
  v9[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", *(double *)&a3);
  v8[1] = *MEMORY[0x1E0D05AD0];
  v9[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
  v6 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941EB8, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2));
  if (v6)
    FigDebugAssert3();
  return v6;
}

- (int)setWhiteBalanceModeAuto
{
  int v2;

  v2 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941EF8, *MEMORY[0x1E0C9AE40]);
  if (v2)
    FigDebugAssert3();
  return v2;
}

- (uint64_t)_setAutofocusProcessorProperty:(uint64_t)a3 propertyValue:
{
  NSObject *v3;
  _QWORD block[7];

  if (result)
  {
    if (a2)
    {
      v3 = *(NSObject **)(result + 1584);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __72__BWFigVideoCaptureDevice__setAutofocusProcessorProperty_propertyValue___block_invoke;
      block[3] = &unk_1E4920768;
      block[4] = result;
      block[5] = a2;
      block[6] = a3;
      dispatch_sync(v3, block);
      return 0;
    }
    else
    {
      FigDebugAssert3();
      return 4294954516;
    }
  }
  return result;
}

- (void)_ubSetupMetadataTimeMachine
{
  BWMetadataTimeMachine *v2;
  __int128 v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a1)
  {
    if (*(_DWORD *)(a1 + 1992) && *(_BYTE *)(a1 + 3204))
    {
      if (!*(_QWORD *)(a1 + 2016))
      {
        v5[0] = MEMORY[0x1E0C809B0];
        v5[1] = 3221225472;
        v5[2] = __54__BWFigVideoCaptureDevice__ubSetupMetadataTimeMachine__block_invoke;
        v5[3] = &unk_1E49261D0;
        v5[4] = a1;
        v2 = -[BWMetadataTimeMachine initWithName:capacity:metadataHandlingPriority:addHandler:]([BWMetadataTimeMachine alloc], "initWithName:capacity:metadataHandlingPriority:addHandler:", CFSTR("ZSL"), (*(_DWORD *)(a1 + 3212) + 4), 14, v5);
        *(_QWORD *)(a1 + 2016) = v2;
        v3 = *(_OWORD *)(a1 + 3216);
        v4 = *(_QWORD *)(a1 + 3232);
        -[BWMetadataTimeMachine setEarliestAllowedPTS:](v2, "setEarliestAllowedPTS:", &v3);
        *(_QWORD *)(a1 + 2032) = objc_alloc_init(MEMORY[0x1E0C99E08]);
      }
    }
    else
    {

      *(_QWORD *)(a1 + 2016) = 0;
      *(_QWORD *)(a1 + 2032) = 0;
    }
  }
}

- (void)setZeroShutterLagEarliestAllowedPTS:(id *)a3
{
  __int128 v3;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v4;

  v3 = *(_OWORD *)&a3->var0;
  self->_zeroShutterLagEarliestAllowedPTS.value = a3->var3;
  *(_OWORD *)&self->_stillImageISPMultiBandNoiseReductionEnabled = v3;
  v4 = *a3;
  -[BWMetadataTimeMachine setEarliestAllowedPTS:](self->_ubZeroShutterLagMetadataTimeMachine, "setEarliestAllowedPTS:", &v4);
}

- (void)_serviceRetryStillImageCaptureUsingFrameStatisticsByPortType:(uint64_t)a1
{
  os_unfair_lock_s *v4;
  int v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _QWORD block[5];

  if (a1)
  {
    v4 = (os_unfair_lock_s *)(a1 + 2504);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
    v5 = *(unsigned __int8 *)(a1 + 2544);
    v6 = (id)objc_msgSend(*(id *)(a1 + 2512), "masterPortType");
    v7 = objc_msgSend(*(id *)(a1 + 2512), "captureType");
    v8 = objc_msgSend(*(id *)(a1 + 2512), "captureFlags");
    os_unfair_lock_unlock(v4);
    if (v5)
    {
      v9 = -[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:captureType:captureFlags:](a1, a2, (uint64_t)v6, v7, v8);
      if (v9)
      {
        if (v9 == 1)
        {
          os_unfair_lock_lock(v4);
          *(_BYTE *)(a1 + 2544) = 0;
          os_unfair_lock_unlock(v4);
          v10 = *(NSObject **)(a1 + 2480);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __88__BWFigVideoCaptureDevice__serviceRetryStillImageCaptureUsingFrameStatisticsByPortType___block_invoke;
          block[3] = &unk_1E491E720;
          block[4] = a1;
          dispatch_async(v10, block);
        }
        else
        {
          ++*(_DWORD *)(a1 + 2496);
          if (v9 == 5)
            ++*(_DWORD *)(a1 + 2604);
        }
      }
    }
  }
}

- (void)registerForAEMatrixMetadata
{
  NSArray *captureStreams;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    v6 = *MEMORY[0x1E0D07300];
    v7 = MEMORY[0x1E0C9AAB0];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(captureStreams);
        objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "stream"), "setPropertyIfSupported:value:", v6, v7);
      }
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
}

void __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateStreamingImageIntentTo:from:masterPortType:](*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(void **)(a1 + 40));
}

- (NSDictionary)sensorIDDictionaryByPortType
{
  return self->_sensorIDDictionaryByPortType;
}

- (void)setTimeOfFlightAFEnabled:(BOOL)a3
{
  self->_allowSystemPressureToForceOffOverCaptureActiveSlaveStream = a3;
}

- (BWFigCaptureDevice)device
{
  return self->_device;
}

- (BOOL)zeroShutterLagEnabled
{
  return BYTE4(self->_mostRecentSmartCameraResult);
}

- (void)setSwfrEnabled:(BOOL)a3
{
  self->_swfrEnabled = a3;
}

- (void)setSupplementalPointCloudCaptureDevice:(id)a3
{
  uint64_t v5;
  void *v6;
  float v7;
  int v8;

  self->_supplementalPointCloudCaptureDevice = 0;
  if (a3)
  {
    v8 = 0;
    v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "captureStream"), "stream"), "getPropertyIfSupported:error:", CFSTR("MaximumFrameRate"), &v8);
    if (v8)
    {
      FigDebugAssert3();
    }
    else
    {
      v6 = (void *)v5;
      objc_msgSend(a3, "setSupplementalPointCloudCaptureDeviceDelegate:", self);
      self->_supplementalPointCloudCaptureDevice = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
      self->_supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate = 0.0;
      objc_msgSend(v6, "floatValue");
      self->_supplementalPointCloudCaptureDeviceCaptureMinimumFrameRate = v7;
      self->_digitalFlashCaptureSupplementalPointCloudCaptureDeviceFrameRateMaxSkippedFrames = 30;
    }
  }
}

- (void)setStillImageFusionScheme:(int)a3
{
  *(_DWORD *)&self->_stillImageCaptureEnabled = a3;
}

- (void)setSoftISPEnabled:(BOOL)a3
{
  self->_softISPEnabled = a3;
}

- (void)setSifrStillImageCaptureEnabledIfAvailable:(BOOL)a3
{
  if (self->_sifrStillImageCaptureEnabledIfAvailable != a3)
  {
    self->_sifrStillImageCaptureEnabledIfAvailable = a3;
    -[BWFigVideoCaptureDevice _ubUpdateSIFREnabled]((uint64_t)self);
  }
}

- (void)setSensorRawStillImageOutputsEnabled:(BOOL)a3
{
  self->_sensorRawStillImageOutputsEnabled = a3;
}

- (void)setRedSaturationMitigationEnabled:(BOOL)a3
{
  self->_redSaturationMitigationEnabled = a3;
}

- (void)setLearnedNRUltraHighResolutionDowngradeEnabled:(BOOL)a3
{
  self->_learnedNRUltraHighResolutionDowngradeEnabled = a3;
}

- (void)setLearnedNRMode:(unsigned int)a3
{
  if (self->_learnedNRMode != a3)
  {
    if (a3)
    {
      if (!self->_unifiedBracketingMode)
        FigDebugAssert3();
    }
    self->_learnedNRMode = a3;
  }
}

- (void)setIrisFrameHarvestingEnabled:(BOOL)a3
{
  BYTE1(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount) = a3;
}

- (void)setDisparityGenerationFromReferenceFramesSupported:(BOOL)a3
{
  self->_disparityGenerationFromReferenceFramesSupported = a3;
}

- (void)setDepthWithDeepFusionEnabled:(BOOL)a3
{
  BOOL v3;
  BWFigVideoCaptureDevice *v4;

  if (self->_depthWithDeepFusionEnabled != a3)
  {
    if (a3 && !self->_deepFusionEnabled)
    {
      v4 = self;
      v3 = a3;
      FigDebugAssert3();
      self = v4;
      a3 = v3;
    }
    self->_depthWithDeepFusionEnabled = a3;
  }
}

- (void)setDeepFusionEnabled:(BOOL)a3
{
  BOOL v3;
  BWFigVideoCaptureDevice *v4;

  if (self->_deepFusionEnabled != a3)
  {
    if (a3 && self->_unifiedBracketingMode != 1)
    {
      v4 = self;
      v3 = a3;
      FigDebugAssert3();
      self = v4;
      a3 = v3;
    }
    self->_deepFusionEnabled = a3;
  }
}

- (void)setConstantColorEnabled:(BOOL)a3
{
  self->_constantColorEnabled = a3;
}

- (NSArray)captureStreamsByFocalLength
{
  return self->_captureStreamsByFocalLength;
}

- (void)setZoomPIPMinimumUIZoomFactor:(float)a3
{
  *(float *)&self->_depthFormatDimensions.width = a3;
}

- (void)setZeroShutterLagTimeMachineBufferCapacity:(int)a3
{
  HIDWORD(self->_currentStillSmartCameraResult) = a3;
}

- (void)setWideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled:(BOOL)a3
{
  self->_wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled = a3;
}

- (void)setWideCaptureStreamAsStatsMasterPreferred:(BOOL)a3
{
  self->_wideCaptureStreamAsStatsMasterPreferred = a3;
}

- (void)setVariableFrameRateControlEnabled:(BOOL)a3
{
  BYTE3(self->_previewShiftInSensorSpace.x) = a3;
}

- (void)setUiBaseZoomFactor:(float)a3
{
  *(float *)&self->_depthFormatDimensions.height = a3;
}

- (void)setTimeOfFlightProjectorMode:(int)a3
{
  uint64_t v3;
  NSString *v5;
  uint64_t v6;
  BWFigCaptureStream *v7;
  int v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = *(_QWORD *)&a3;
  v10[1] = *MEMORY[0x1E0C80C00];
  v5 = -[BWFigVideoCaptureStream portType](self->_captureStream, "portType");
  if (-[NSString isEqualToString:](v5, "isEqualToString:", *MEMORY[0x1E0D05A20]))
  {
    v9 = *MEMORY[0x1E0D08260];
    v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3);
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    -[BWFigCaptureStream setProperty:value:](v7, "setProperty:value:", *MEMORY[0x1E0D07830], v6);
    if (v3 > 6)
      v8 = 0;
    else
      v8 = dword_1A32B20C0[(int)v3];
    self->_timeOfFlightCameraProjectorModeMask |= v8;
  }
}

- (void)setTemporalNoiseReductionRawEnabled:(BOOL)a3
{
  BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTemporalNoiseReductionEnabled:(BOOL)a3
{
  LOBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setTemporalNoiseReductionBand0Disabled:(BOOL)a3
{
  BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (void)setStudioLightingSupported:(BOOL)a3
{
  self->_studioLightingSupported = a3;
}

- (void)setStreamingSessionAnalyticsVideoDimensions:(id)a3
{
  *($2825F4736939C4A6D3AD43837233062D *)(&self->_captureInitiatedOnce + 4) = a3;
}

- (void)setStreamingSessionAnalyticsPixelFormat:(unsigned int)a3
{
  *(_DWORD *)&self->_captureInitiatedOnce = a3;
}

- (void)setStreamingSessionAnalyticsHighlightRecoveryEnabled:(BOOL)a3
{
  BYTE4(self->_exifFocalLengthsByZoomFactor) = a3;
}

- (void)setStillImageSashimiRawCaptureWithDepthEnabled:(BOOL)a3
{
  BYTE3(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStillImageISPMultiBandNoiseReductionEnabled:(BOOL)a3
{
  LOBYTE(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStillImageFocusPixelDataCaptureWithDepthEnabled:(BOOL)a3
{
  BYTE2(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setStereoVideoCaptureEnabled:(BOOL)a3
{
  if (self->_stereoVideoCaptureEnabled != a3)
  {
    self->_stereoVideoCaptureEnabled = a3;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setStereoFusionEnabled:(BOOL)a3
{
  self->_stereoFusionEnabled = a3;
}

- (void)setSmartCameraEnabled:(BOOL)a3
{
  const __CFString *v4;
  uint64_t v5;
  const __CFString *v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (LOBYTE(self->_zoomFactorChangedDelegate) != a3)
  {
    LOBYTE(self->_zoomFactorChangedDelegate) = a3;
    v6 = CFSTR("NewPropertyValue");
    v7[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:");
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("SmartCameraEnabledChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1));
    if (*(_QWORD *)&self->_currentExifOrientation)
    {
      v4 = CFSTR("NewPropertyValue");
      v5 = MEMORY[0x1E0C9AA70];
      -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("SceneClassificationConfidencesChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));
    }
  }
}

- (void)setSensorRegionOfInterestForCameraControls:(CGRect)a3
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;

  if (*((_BYTE *)&self->_maxSystemPressureLevel + 4))
  {
    *(CGRect *)&self->_timeToCriticalSystemPressureInMS = a3;
    LODWORD(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.width) = (int)(a3.size.width
                                                                                              + a3.origin.x * 2.0);
    HIDWORD(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.width) = (int)(a3.size.height
                                                                                              + a3.origin.y * 2.0);
    FigCaptureMetadataUtilitiesNormalizeCropRect(a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
    self->_regionOfInterestForCameraControls.size.width = v4;
    self->_regionOfInterestForCameraControls.size.height = v5;
    self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.origin.x = v6;
    self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.origin.y = v7;
  }
}

- (void)setRegionOfInterestWithoutOverscan:(CGRect)a3
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;

  self->_regionOfInterestWithoutOverscan = a3;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.x = FigCaptureMetadataUtilitiesRectNormalizedToRect(a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, 0.0, 0.0, a3.size.width + a3.origin.x * 2.0);
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.origin.y = v4;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.width = v5;
  self->_regionOfInterestWithoutOverscanNormalizedInSensorSpace.size.height = v6;
}

- (void)setReactionEffectsSupported:(BOOL)a3
{
  self->_reactionEffectsSupported = a3;
}

- (void)setPreferredMasterPortType:(id)a3
{
  objc_setProperty_nonatomic(self, a2, a3, 4112);
}

- (void)setPortraitAutoSuggestEnabled:(BOOL)a3
{
  self->_portraitAutoSuggestEnabled = a3;
}

- (void)setPhotoFormat:(BOOL)a3
{
  self->_photoFormat = a3;
}

- (void)setOverCapturePercentage:(float)a3
{
  *(float *)(&self->_lumaHistogramsEnabled + 3) = a3;
}

- (void)setOptimizesZoomRampsForVISZoomSmoothing:(BOOL)a3
{
  BYTE1(self->_lastSphereMode) = a3;
}

- (void)setNumberOfActiveTimeMachines:(int)a3
{
  HIDWORD(self->_lastSphereMode) = a3;
}

- (void)setMomentCaptureVideoRecordingSupported:(BOOL)a3
{
  if (BYTE2(self->_previewShiftInSensorSpace.x) != a3)
  {
    BYTE2(self->_previewShiftInSensorSpace.x) = a3;
    if (a3 && !BYTE1(self->_memoryPool))
      BYTE1(self->_memoryPool) = 1;
  }
}

- (void)setMaxContinuousZoomFactorForDepthDataDelivery:(float)a3
{
  if (*(float *)&self->_depthFilteringEnabled != a3
    && !-[BWFigVideoCaptureStream started](self->_captureStream, "started"))
  {
    *(float *)&self->_depthFilteringEnabled = a3;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setManualCinematicFramingEnabled:(BOOL)a3
{
  LOBYTE(self->_depthDataDeliveryZoomRange) = a3;
}

- (void)setLumaHistogramsEnabled:(BOOL)a3
{
  BYTE1(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.height) = a3;
}

- (void)setFullBinSIFROnSecondaryCameraAllowed:(BOOL)a3
{
  *(&self->_manualCinematicFramingEnabled + 3) = a3;
}

- (void)setFocusPixelsEnabled:(BOOL)a3
{
  BYTE1(self->_mostRecentSmartCameraResult) = a3;
}

- (void)setFaceDrivenAEAFEnabledByDefault:(BOOL)a3
{
  self->_faceDrivenAEAFEnabledByDefault = a3;
}

- (void)setDigitalFlashMetadataEnabled:(BOOL)a3
{
  if (self->_digitalFlashMetadataEnabled != a3)
  {
    self->_digitalFlashMetadataEnabled = a3;
    -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)self);
  }
}

- (void)setDigitalFlashDetectedObjectTypes:(id)a3
{

  self->_digitalFlashDetectedObjectTypes = (NSArray *)a3;
}

- (void)setDepthType:(int)a3
{
  self->_depthType = a3;
}

- (void)setDepthPixelFormat:(unsigned int)a3
{
  self->_centerStageFramingMode = a3;
}

- (void)setDepthFormatDimensions:(id)a3
{
  *($2825F4736939C4A6D3AD43837233062D *)((char *)&self->_centerStageDelegate + 4) = a3;
}

- (void)setDepthFilteringEnabled:(BOOL)a3
{
  self->_centerStageMetadataDeliveryEnabled = a3;
}

- (void)setCinematicFramingSupported:(BOOL)a3
{
  self->_cinematicFramingSupported = a3;
}

- (void)setCinematicFramingControlMode:(unsigned int)a3
{
  self->_cinematicFramingControlMode = a3;
}

- (void)setBravoConstituentPhotoDeliveryEnabled:(BOOL)a3
{
  self->_bravoConstituentPhotoDeliveryEnabled = a3;
}

- (void)setBackgroundBlurSupported:(BOOL)a3
{
  self->_backgroundBlurSupported = a3;
}

- (int)setAutoImageControlMode:(int)a3
{
  return -[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]((uint64_t)self, a3, 0);
}

- (void)setAllocateResourcesCompatibleWithOverCapture:(BOOL)a3
{
  LOBYTE(self->_memoryPool) = a3;
}

- (BOOL)manualCinematicFramingEnabled
{
  return (BOOL)self->_depthDataDeliveryZoomRange;
}

- (BOOL)isCMIOZoomStreamPropertySupported
{
  return LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension);
}

- (uint64_t)_setAutoImageControlMode:(_QWORD *)a3 completionHandler:
{
  uint64_t v3;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v10)(_QWORD *, BOOL, __int128 *);
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  _DWORD *v17;
  BWImageControlModeTransitionMonitor *v18;
  _QWORD *v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  void (*v23)(_QWORD *, _QWORD, __int128 *);
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __CFString *v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  os_log_type_t type;
  unsigned int v38;
  _QWORD block[7];
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  const char *v50;
  __int16 v51;
  __CFString *v52;
  __int16 v53;
  const __CFString *v54;
  _BYTE v55[128];
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v3 = a1;
  v58 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v45 = 0;
    v46 = &v45;
    v47 = 0x2020000000;
    v48 = 0;
    v41 = 0;
    v42 = &v41;
    v43 = 0x2020000000;
    v44 = a2;
    v6 = *(NSObject **)(a1 + 1584);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __70__BWFigVideoCaptureDevice__setAutoImageControlMode_completionHandler___block_invoke;
    block[3] = &unk_1E49260E8;
    v40 = a2;
    block[4] = v3;
    block[5] = &v45;
    block[6] = &v41;
    dispatch_sync(v6, block);
    v7 = *((_DWORD *)v42 + 6);
    if (a3 && v7 == a2)
    {
      v8 = *((_DWORD *)v46 + 6);
      if (dword_1ECFE9470)
      {
        v38 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v10 = (void (*)(_QWORD *, BOOL, __int128 *))a3[2];
      v56 = *MEMORY[0x1E0CA2E18];
      v57 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      v10(a3, v8 == 0, &v56);
      v7 = *((_DWORD *)v42 + 6);
    }
    if (v7 != a2)
    {
      if (*(_BYTE *)(v3 + 3698))
      {
        *(_BYTE *)(v3 + 1836) = a2 == 2;
        if (a2 == 2)
          v11 = 0;
        else
          v11 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v12 = *(void **)(v3 + 560);
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v33, v55, 16, v31, v32);
        if (v13)
        {
          v14 = *(_QWORD *)v34;
          do
          {
            for (i = 0; i != v13; ++i)
            {
              if (*(_QWORD *)v34 != v14)
                objc_enumerationMutation(v12);
              if (a2 != 2)
              {
                v16 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
                objc_msgSend(v16, "setSphereVideoEnabled:", 0);
                objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(v16, "currentSphereMode"), objc_msgSend(v16, "portType"));
              }
            }
            v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v33, v55, 16);
          }
          while (v13);
        }
        if (a3)
        {
          v17 = (_DWORD *)&unk_1ECFE9000;
          v18 = objc_alloc_init(BWImageControlModeTransitionMonitor);
          -[BWImageControlModeTransitionMonitor setExpectedSphereModesByPortType:](v18, "setExpectedSphereModesByPortType:", v11);
          if (a2 == 2)
          {
            -[BWImageControlModeTransitionMonitor setCoarseFocusCheckTimeout:](v18, "setCoarseFocusCheckTimeout:", *(double *)(v3 + 1840));
            -[BWImageControlModeTransitionMonitor setWaitForTorchToRampUp:](v18, "setWaitForTorchToRampUp:", 1);
          }
        }
        else
        {
          v18 = 0;
          v17 = &unk_1ECFE9000;
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1848));

        *(_QWORD *)(v3 + 1856) = v18;
        v19 = *(_QWORD **)(v3 + 1864);
        *(_QWORD *)(v3 + 1864) = objc_msgSend(a3, "copy");
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1848));
        if (v19)
        {
          if (v17[284])
          {
            v38 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v21 = v38;
            if (os_log_type_enabled(v20, type))
              v22 = v21;
            else
              v22 = v21 & 0xFFFFFFFE;
            if (v22)
            {
              v49 = 136315138;
              v50 = "-[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]";
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v23 = (void (*)(_QWORD *, _QWORD, __int128 *))v19[2];
          v56 = *MEMORY[0x1E0CA2E18];
          v57 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v23(v19, 0, &v56);

        }
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1956));
        if (a2 == 2)
        {
          if (*(_DWORD *)(v3 + 2088) != 3 && v17[284])
          {
            v38 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v25 = v38;
            if (os_log_type_enabled(v24, type))
              v26 = v25;
            else
              v26 = v25 & 0xFFFFFFFE;
            if (v26)
            {
              v27 = *(int *)(v3 + 2088);
              if (v27 > 8)
                v28 = 0;
              else
                v28 = off_1E4926380[v27];
              v49 = 136315650;
              v50 = "-[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]";
              v51 = 2112;
              v52 = v28;
              v53 = 2112;
              v54 = CFSTR("MomentCaptureVideoRecording");
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_DWORD *)(v3 + 2088) = 3;
          *(_BYTE *)(v3 + 2083) = 1;
        }
        else
        {
          -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](v3, a2, *((_DWORD *)v42 + 6));
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1956));
        v29 = -[BWFigVideoCaptureDevice _setSmoothFocusEnabled:](v3, a2 == 2);
        *((_DWORD *)v46 + 6) = v29;
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1956));
        -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](v3, a2, *((_DWORD *)v42 + 6));
        os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 1956));
      }
    }
    v3 = *((unsigned int *)v46 + 6);
    _Block_object_dispose(&v41, 8);
    _Block_object_dispose(&v45, 8);
  }
  return v3;
}

- (void)setUltraHighResSensorRawPoolDimensions:(id)a3
{
  self->_ultraHighResSensorRawPoolDimensions = ($470D365275581EF16070F5A11344F73E)a3;
}

- (void)setSensorRawPoolEnabled:(BOOL)a3
{
  self->_sensorRawPoolEnabled = a3;
}

- (void)setMidFrameSynchronizationEnabled:(BOOL)a3
{
  self->_midFrameSynchronizationEnabled = a3;
}

- (void)_updateStreamingImageIntentWithNewImageControlMode:(int)a3 oldImageControlMode:
{
  const os_unfair_lock *v6;
  int v7;
  void *v8;
  int v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    v6 = (const os_unfair_lock *)(a1 + 1956);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 1956));
    if (a2 != a3)
    {
      v7 = a2;
      if (a2 == 5)
        goto LABEL_15;
      if (a2 == 6)
      {
        v7 = 6;
        goto LABEL_15;
      }
      if (*(int *)(a1 + 3804) > 2)
      {
        v7 = 8;
        goto LABEL_15;
      }
      os_unfair_lock_assert_owner(v6);
      v8 = *(void **)(a1 + 2144);
      if (v8)
      {
        if ((objc_msgSend(v8, "BOOLValue") & 1) == 0)
          goto LABEL_10;
      }
      else if (!*(_BYTE *)(a1 + 2140))
      {
LABEL_10:
        v9 = *(_DWORD *)(a1 + 2176);
        if (v9 == 2)
          v7 = 2;
        else
          v7 = v9 == 1;
        goto LABEL_15;
      }
      v7 = 4;
LABEL_15:
      *(_DWORD *)(a1 + 2088) = v7;
      *(_BYTE *)(a1 + 2083) = 1;
      if (dword_1ECFE9470)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
}

- (BOOL)hasFlash
{
  return self->_hasFlash;
}

- (void)setBaseZoomFactorsByPortType:(id)a3
{
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(captureStreams);
        v10 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v10, "portType")), "floatValue");
        objc_msgSend(v10, "setBaseZoomFactor:");
      }
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v7);
  }
  -[BWFigVideoCaptureSynchronizedStreamsGroup setBaseZoomFactorsByPortType:](self->_synchronizedStreamsGroup, "setBaseZoomFactorsByPortType:", a3);
}

- (void)setMaxTorchLevel:(float)a3
{
  double v5;

  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  self->_torchLevel = a3;
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  LODWORD(v5) = -8388609;
  -[BWFigVideoCaptureDevice setTorchLevel:](self, "setTorchLevel:", v5);
}

- (BOOL)timeOfFlightAFEnabled
{
  return self->_allowSystemPressureToForceOffOverCaptureActiveSlaveStream;
}

- (void)setNonDestructiveCropSize:(CGSize)a3
{
  CGFloat height;
  CGFloat width;
  os_unfair_lock_s *p_nonDestructiveCropSizeLock;

  height = a3.height;
  width = a3.width;
  p_nonDestructiveCropSizeLock = &self->_nonDestructiveCropSizeLock;
  os_unfair_lock_lock(&self->_nonDestructiveCropSizeLock);
  self->_nonDestructiveCropSize.width = width;
  self->_nonDestructiveCropSize.height = height;
  os_unfair_lock_unlock(p_nonDestructiveCropSizeLock);
}

- (void)setDepthMaxFrameRate:(float)a3
{
  float v5;
  void *v6;
  double v7;

  if (self->_depthMaxFrameRate != a3)
  {
    self->_depthMaxFrameRate = a3;
    -[NSMutableArray requestedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "requestedZoomFactor");
    -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)self, v5);
    v6 = (void *)objc_msgSend(*(id *)&self->_temporalNoiseReductionEnabled, "referencedObject");
    *(float *)&v7 = a3;
    objc_msgSend(v6, "didChangeDepthMaxFrameRate:", v7);
  }
}

- (int)setSubjectAreaChangeMonitoringEnabled:(BOOL)a3
{
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941BF8, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3));
}

- (int)setAutomaticallyAdjustsTorch:(BOOL)a3
{
  _BOOL4 v3;

  v3 = a3;
  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  if (self->_autoTorchEnabled != v3)
  {
    self->_autoTorchEnabled = v3;
    self->_autoTorchStatsCheckedForVideoRecording = 0;
    BYTE4(self->_autoTorchRampedUpTime.epoch) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  return 0;
}

- (void)setTimeLapseCaptureRate:(float)a3
{
  NSDictionary *v5;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD v7[5];
  float v8;

  v5 = -[BWFigCaptureStream supportedProperties](-[BWFigVideoCaptureStream stream](self->_captureStream, "stream"), "supportedProperties");
  if (-[NSDictionary objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D07800]))
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __51__BWFigVideoCaptureDevice_setTimeLapseCaptureRate___block_invoke;
    v7[3] = &unk_1E4920568;
    v7[4] = self;
    v8 = a3;
    dispatch_sync(focusAndExposureUpdateQueue, v7);
  }
}

- (void)setStreamingDigitalFlashMode:(int)a3
{
  os_unfair_lock_s *p_frameStatisticsLock;
  int nextStreamingImageIntent;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v9;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  nextStreamingImageIntent = self->_nextStreamingImageIntent;
  if ((nextStreamingImageIntent - 5) < 4 || nextStreamingImageIntent == 3)
  {
    if (!a3)
      goto LABEL_9;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_8:
    self->_globalToneMappingEnabled = 0;
    goto LABEL_9;
  }
  v9 = a3 == 1;
  if (a3 == 2)
    v9 = 2;
  self->_nextStreamingImageIntent = v9;
  self->_streamingImageIntentNeedsUpdate = 1;
  if (a3)
    goto LABEL_8;
LABEL_9:
  self->_streamingDigitalFlashMode = a3;
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (int)setProvidesStortorgetMetadata:(BOOL)a3
{
  return -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941BB8, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3));
}

- (void)setGlobalToneMappingEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_frameStatisticsLock;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  self->_globalToneMappingEnabled = a3;
  -[BWFigVideoCaptureDevice _updateGlobalToneMappingEnabled]((uint64_t)self);
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (void)setFaceDetectionConfiguration:(id)a3
{
  NSArray *captureStreams;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "setFaceDetectionConfiguration:", a3);
      }
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }
}

- (int)setAutomaticallyAdjustsImageControlMode:(BOOL)a3
{
  NSObject *autofocusProcessorQueue;
  int v4;
  _QWORD block[6];
  BOOL v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __67__BWFigVideoCaptureDevice_setAutomaticallyAdjustsImageControlMode___block_invoke;
  block[3] = &unk_1E49260C0;
  v7 = a3;
  block[4] = self;
  block[5] = &v8;
  dispatch_sync(autofocusProcessorQueue, block);
  v4 = *((_DWORD *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

- (uint64_t)_updateGlobalToneMappingEnabled
{
  uint64_t v1;
  const os_unfair_lock *v2;
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v6;
  int v7;

  if (result)
  {
    v1 = result;
    v2 = (const os_unfair_lock *)(result + 1956);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(result + 1956));
    os_unfair_lock_assert_owner(v2);
    result = *(_BYTE *)(v1 + 2140) != 0;
    if (*(_QWORD *)(v1 + 2144))
      result = objc_msgSend(*(id *)(v1 + 2144), "BOOLValue");
    v3 = *(_DWORD *)(v1 + 2088);
    if ((v3 - 5) < 4 || v3 == 3)
    {
      if (!(_DWORD)result)
        return result;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_13;
    }
    if ((_DWORD)result)
    {
      *(_DWORD *)(v1 + 2088) = 4;
      *(_BYTE *)(v1 + 2083) = 1;
LABEL_13:
      *(_DWORD *)(v1 + 2176) = 0;
      return result;
    }
    v6 = *(_DWORD *)(v1 + 2176);
    if (v6 == 2)
      v7 = 2;
    else
      v7 = v6 == 1;
    *(_DWORD *)(v1 + 2088) = v7;
    *(_BYTE *)(v1 + 2083) = 1;
  }
  return result;
}

- (void)setStudioLightingIntensity:(float)a3
{
  float studioLightingIntensityInitial;
  void *v7;
  BWFigVideoCaptureStream *captureStream;
  double v9;

  studioLightingIntensityInitial = self->_studioLightingIntensityInitial;
  if (studioLightingIntensityInitial >= 0.0)
  {
    if (studioLightingIntensityInitial != a3 && self->_studioLightingEnabled)
      self->_studioLightingIntensityChanged = 1;
  }
  else
  {
    self->_studioLightingIntensityInitial = a3;
  }
  self->_studioLightingIntensity = a3;
  v7 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v7)
  {
    captureStream = (BWFigVideoCaptureStream *)objc_msgSend(v7, "referencedObject");
  }
  else if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
  {
    captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
  }
  else
  {
    captureStream = self->_captureStream;
  }
  *(float *)&v9 = a3;
  -[BWFigVideoCaptureStream didChangeStudioLightingIntensity:](captureStream, "didChangeStudioLightingIntensity:", v9);
}

- (void)setGesturesEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  void *v6;
  BWFigVideoCaptureStream *captureStream;

  if (self->_gesturesEnabled != a3)
  {
    v3 = a3;
    self->_gesturesEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_gesturesEnabledStartTime = v5;
    else
      self->_gesturesEnabledTotalTime += v5 - self->_gesturesEnabledStartTime;
    v6 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v6)
    {
      captureStream = (BWFigVideoCaptureStream *)objc_msgSend(v6, "referencedObject");
    }
    else if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
    {
      captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
    }
    else
    {
      captureStream = self->_captureStream;
    }
    -[BWFigVideoCaptureStream didChangeGesturesEnabled:](captureStream, "didChangeGesturesEnabled:", v3);
  }
}

- (void)setBravoStreamSelectionConfiguration:(id)a3
{
  unint64_t var1;
  int64_t var0;
  os_unfair_lock_s *p_switchOverLock;

  var1 = a3.var1;
  var0 = a3.var0;
  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfiguration.selectionBehavior = var0;
  self->_bravoStreamSelectionConfiguration.restrictedSelectionConditions = var1;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (void)setBackgroundBlurAperture:(float)a3
{
  float backgroundBlurApertureInitial;
  void *v7;
  BWFigVideoCaptureStream *captureStream;
  double v9;

  backgroundBlurApertureInitial = self->_backgroundBlurApertureInitial;
  if (backgroundBlurApertureInitial >= 0.0)
  {
    if (backgroundBlurApertureInitial != a3 && self->_backgroundBlurEnabled)
      self->_backgroundBlurApertureChanged = 1;
  }
  else
  {
    self->_backgroundBlurApertureInitial = a3;
  }
  self->_backgroundBlurAperture = a3;
  v7 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v7)
  {
    captureStream = (BWFigVideoCaptureStream *)objc_msgSend(v7, "referencedObject");
  }
  else if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
  {
    captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
  }
  else
  {
    captureStream = self->_captureStream;
  }
  *(float *)&v9 = a3;
  -[BWFigVideoCaptureStream didChangeBackgroundBlurAperture:](captureStream, "didChangeBackgroundBlurAperture:", v9);
}

- (void)performBlockOnNotificationQueue:(id)a3
{
  NSObject *notificationQueue;
  _QWORD block[5];

  if (a3)
  {
    notificationQueue = self->_notificationQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __59__BWFigVideoCaptureDevice_performBlockOnNotificationQueue___block_invoke;
    block[3] = &unk_1E491ECB8;
    block[4] = a3;
    dispatch_async(notificationQueue, block);
  }
}

- (NSString)applicationID
{
  return self->_applicationID;
}

- (void)setPortraitEffectPropertiesDelegate:(id)a3
{
  void *v5;
  double v6;

  v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v5)
  {
    objc_msgSend((id)objc_msgSend(v5, "referencedObject"), "setReactionsInProgressChangedHandler:", 0);

    *(_QWORD *)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque = 0;
  }
  if (a3)
  {
    *(_QWORD *)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
    -[BWFigVideoCaptureDevice _sendInitialValuesToPortraitEffectPropertiesDelegate:]((uint64_t)self, a3, v6);
  }
}

uint64_t __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_setupAutofocusSampleBufferProcessor");
}

- (int)_setupAutofocusSampleBufferProcessor
{
  NSString *v3;
  uint64_t (*createAutofocusSampleBufferProcessorFunction)(uint64_t, void *, void *, void *, void *, const __CFDictionary *, const void *, OpaqueFigSampleBufferProcessor **);
  BWFigVideoCaptureStream *captureStream;
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSDictionary *sensorIDDictionaryByPortType;
  uint64_t v14;
  NSArray *activePortTypes;
  uint64_t v16;
  uint64_t v17;
  NSDictionary *moduleInfoByPortType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMClock *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString *v25;
  __CFString *v26;
  uint64_t FigBaseObject;
  uint64_t (*v28)(uint64_t, __CFString *, __CFString *);
  NSMutableDictionary *autofocusCachedPropertiesDictionary;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, void *, void *);
  int v38;
  float v39;
  float v40;
  double v41;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, __CFString *, CFDictionaryRef);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  os_log_type_t type;
  int v58;
  CMTime lhs;
  CMTime v60;
  CMTime v61;
  int started;
  _BYTE v63[128];
  CMTime rhs;
  _QWORD v65[9];
  _QWORD v66[12];
  CGRect v67;

  v66[9] = *MEMORY[0x1E0C80C00];
  started = 0;
  if (!_FigIsCurrentDispatchQueue())
  {
    v49 = v52;
    LODWORD(v46) = 0;
    FigDebugAssert3();
  }
  if (-[NSString isEqualToString:](-[BWFigCaptureDevice deviceID](self->_device, "deviceID", v46, v49), "isEqualToString:", 0x1E492D2B8))
  {
    v3 = -[BWFigVideoCaptureStream portType](self->_captureStream, "portType");
    if (!-[NSString isEqualToString:](v3, "isEqualToString:", *MEMORY[0x1E0D05A20]))
    {
      createAutofocusSampleBufferProcessorFunction = (uint64_t (*)(uint64_t, void *, void *, void *, void *, const __CFDictionary *, const void *, OpaqueFigSampleBufferProcessor **))self->_createAutofocusSampleBufferProcessorFunction;
      if (!createAutofocusSampleBufferProcessorFunction)
      {
        FigDebugAssert3();
        FigSignalErrorAt();
        return started;
      }
      if ((char *)createAutofocusSampleBufferProcessorFunction != (char *)FigSampleBufferProcessorCreateForAutofocus)
        return createAutofocusSampleBufferProcessorFunction(*MEMORY[0x1E0C9AE00], -[BWFigVideoCaptureStream stream](self->_captureStream, "stream"), -[BWFigVideoCaptureStream stream](self->_bravoTelephotoCaptureStream, "stream"), -[BWFigVideoCaptureStream stream](self->_bravoSuperWideCaptureStream, "stream"), -[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](self->_synchronizedStreamsGroup, "syncGroup"), 0, 0, &self->_autofocusProcessor);
      if (!self->_sensorIDDictionaryByPortType
        || (captureStream = self->_captureStream) == 0
        || !self->_moduleInfoByPortType)
      {
        FigDebugAssert3();
        return -12780;
      }
      v7 = -[BWFigCaptureStream getProperty:error:](-[BWFigVideoCaptureStream stream](captureStream, "stream"), "getProperty:error:", CFSTR("FormatIndex"), &started);
      if (started)
        goto LABEL_58;
      v8 = -[NSArray objectAtIndexedSubscript:](-[BWFigVideoCaptureStream supportedFormats](self->_captureStream, "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(v7, "intValue"));
      v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
      v10 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorHorizontal")))
      {
        v11 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorHorizontal")), "intValue");
      }
      else if (v9)
      {
        v11 = 2;
      }
      else
      {
        v11 = 1;
      }
      if (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorVertical")))
      {
        v12 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorVertical")), "intValue");
      }
      else if (v9)
      {
        v12 = 2;
      }
      else
      {
        v12 = 1;
      }
      sensorIDDictionaryByPortType = self->_sensorIDDictionaryByPortType;
      v14 = *MEMORY[0x1E0D06138];
      v65[0] = *MEMORY[0x1E0D06178];
      v65[1] = v14;
      activePortTypes = self->_activePortTypes;
      v66[0] = sensorIDDictionaryByPortType;
      v66[1] = activePortTypes;
      v65[2] = *MEMORY[0x1E0D06198];
      v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
      v17 = *MEMORY[0x1E0D06148];
      moduleInfoByPortType = self->_moduleInfoByPortType;
      v66[2] = v16;
      v66[3] = moduleInfoByPortType;
      v19 = *MEMORY[0x1E0D06140];
      v65[3] = v17;
      v65[4] = v19;
      v66[4] = -[BWFigVideoCaptureDevice cameraInfoByPortType](self, "cameraInfoByPortType");
      v65[5] = *MEMORY[0x1E0D06160];
      v66[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v11);
      v65[6] = *MEMORY[0x1E0D06168];
      v66[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v12);
      v65[7] = *MEMORY[0x1E0D06150];
      v66[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", BYTE1(self->_mostRecentSmartCameraResult));
      v65[8] = *MEMORY[0x1E0D06180];
      v66[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", self->_stereoVideoCaptureEnabled);
      v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 9);
      *(_WORD *)&self->_allowAEStableNotifications = 256;
      v21 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(&self->_aeStable + 3) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)&self->_aeRequestTime.flags = *(_QWORD *)(v21 + 16);
      *(int64_t *)((char *)&self->_aeRequestTime.epoch + 4) = 0;
      LOWORD(self->_aeFrameWaitCount) = 256;
      memset(&v61, 0, sizeof(v61));
      HostTimeClock = CMClockGetHostTimeClock();
      CMClockGetTime(&v61, HostTimeClock);
      started = ((uint64_t (*)(_QWORD, BWFigCaptureStream *, BWFigCaptureStream *, BWFigCaptureStream *, BWFigCaptureSynchronizedStreamsGroup *, uint64_t, _QWORD, OpaqueFigSampleBufferProcessor **))self->_createAutofocusSampleBufferProcessorFunction)(*MEMORY[0x1E0C9AE00], -[BWFigVideoCaptureStream stream](self->_captureStream, "stream"), -[BWFigVideoCaptureStream stream](self->_bravoTelephotoCaptureStream, "stream"), -[BWFigVideoCaptureStream stream](self->_bravoSuperWideCaptureStream, "stream"), -[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](self->_synchronizedStreamsGroup, "syncGroup"), v20, 0, &self->_autofocusProcessor);
      memset(&v60, 0, sizeof(v60));
      v23 = CMClockGetHostTimeClock();
      CMClockGetTime(&lhs, v23);
      rhs = v61;
      CMTimeSubtract(&v60, &lhs, &rhs);
      rhs = v60;
      if (CMTimeGetSeconds(&rhs) > 0.5 && dword_1ECFE9470)
      {
        v58 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (started)
        goto LABEL_58;
      if (!-[NSMutableDictionary objectForKeyedSubscript:](self->_autofocusCachedPropertiesDictionary, "objectForKeyedSubscript:", 0x1E4941D18))
      {
        v25 = +[BWFigVideoCaptureDevice _autofocusProcessorImageControlModeFromImageControlMode:]((uint64_t)BWFigVideoCaptureDevice, self->_currentImageControlMode);
        if (!v25)
        {
          FigDebugAssert3();
          return FigSignalErrorAt();
        }
        v26 = v25;
        FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
        v28 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (!v28)
        {
          started = -12782;
          goto LABEL_58;
        }
        started = v28(FigBaseObject, CFSTR("AutofocusProcessor_VideoMode"), v26);
        if (started)
        {
LABEL_58:
          FigDebugAssert3();
          return started;
        }
        -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:]((uint64_t)self, CFSTR("AutofocusProcessor_VideoMode"), v26);
        -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:]((uint64_t)self, CFSTR("AutofocusProcessor_VideoMode"), v26);
      }
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      autofocusCachedPropertiesDictionary = self->_autofocusCachedPropertiesDictionary;
      v30 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](autofocusCachedPropertiesDictionary, "countByEnumeratingWithState:objects:count:", &v53, v63, 16, v47, v50);
      if (!v30)
        goto LABEL_48;
      v31 = v30;
      v32 = *(_QWORD *)v54;
LABEL_34:
      v33 = 0;
      while (1)
      {
        if (*(_QWORD *)v54 != v32)
          objc_enumerationMutation(autofocusCachedPropertiesDictionary);
        v34 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * v33);
        v35 = (void *)-[NSMutableDictionary objectForKeyedSubscript:](self->_autofocusCachedPropertiesDictionary, "objectForKeyedSubscript:", v34, v48, v51);
        if (-[BWFigVideoCaptureDevice _shouldDeferAutofocusProcessorProperty:value:]((uint64_t)self, v34, v35))
        {
          BYTE2(self->_aeFrameWaitCount) = 1;
        }
        else
        {
          v36 = FigSampleBufferProcessorGetFigBaseObject();
          v37 = *(uint64_t (**)(uint64_t, void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v37)
          {
            v38 = v37(v36, v34, v35);
            started = v38;
            if (!v38)
              goto LABEL_45;
          }
          else
          {
            v38 = -12782;
            started = -12782;
          }
          v51 = v52;
          LODWORD(v48) = v38;
          FigDebugAssert3();
        }
        if (!started)
        {
LABEL_45:
          -[BWFigVideoCaptureDevice _updateExposureStateForAutofocusProperty:]((uint64_t)self, v34);
          -[BWFigVideoCaptureDevice _updateWhiteBalanceStateForAutofocusProperty:propertyValue:]((uint64_t)self, v34, v35);
          -[BWFigVideoCaptureDevice _updateFaceDetectionStateForAutofocusProperty:propertyValue:]((uint64_t)self, v34, v35);
          -[BWFigVideoCaptureDevice _updateImageControlModeStateForAutofocusProperty:propertyValue:]((uint64_t)self, v34, v35);
        }
        started = 0;
        if (v31 == ++v33)
        {
          v31 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](autofocusCachedPropertiesDictionary, "countByEnumeratingWithState:objects:count:", &v53, v63, 16);
          if (!v31)
          {
LABEL_48:
            if ((int)FigCapturePlatformIdentifier() < 10)
              goto LABEL_55;
            if (CGRectIsEmpty(self->_cachedFocusRectNormalizedInSensorSpace))
              goto LABEL_54;
            -[NSMutableArray requestedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "requestedZoomFactor");
            v40 = v39;
            v41 = -[BWFigVideoCaptureDevice previewShiftInSensorSpace]((uint64_t)self);
            v67.origin.x = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(self->_cachedFocusRectNormalizedInSensorSpace.origin.x, self->_cachedFocusRectNormalizedInSensorSpace.origin.y, self->_cachedFocusRectNormalizedInSensorSpace.size.width, self->_cachedFocusRectNormalizedInSensorSpace.size.height, v40, v41);
            DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v67);
            v43 = FigSampleBufferProcessorGetFigBaseObject();
            v44 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
            if (v44)
            {
              started = v44(v43, CFSTR("ContinuousAutoFocusAreaOfInterest"), DictionaryRepresentation);
              if (!started)
              {
                if (DictionaryRepresentation)
                  goto LABEL_53;
                goto LABEL_54;
              }
            }
            else
            {
              started = -12782;
            }
            FigDebugAssert3();
            if (DictionaryRepresentation)
LABEL_53:
              CFRelease(DictionaryRepresentation);
LABEL_54:
            started = FigSampleBufferAutofocusProcessorStartNow(self->_autofocusProcessor);
            if (!started)
            {
LABEL_55:
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              return started;
            }
            goto LABEL_58;
          }
          goto LABEL_34;
        }
      }
    }
  }
  return started;
}

- (uint64_t)_updateWhiteBalanceStateForAutofocusProperty:(const void *)a3 propertyValue:
{
  uint64_t v5;
  CFTypeID v6;
  int v7;
  char v8;
  _BOOL8 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  const __CFString *v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v5 = result;
  if (CFEqual(cf1, CFSTR("AutoWhiteBalanceLock")))
  {
    v6 = CFGetTypeID(a3);
    if (v6 != CFBooleanGetTypeID() || !CFBooleanGetValue((CFBooleanRef)a3))
    {
      v7 = 0;
      v8 = 1;
LABEL_8:
      pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 1600));
      *(_BYTE *)(v5 + 1652) = v8;
      if (v7)
      {
        v20 = CFSTR("NewPropertyValue");
        v21 = MEMORY[0x1E0C9AAB0];
        objc_msgSend((id)v5, "_postNotificationWithPayload:notificationPayload:", CFSTR("AWBStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
      }
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 1600));
    }
LABEL_7:
    v8 = 0;
    v7 = 1;
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("WhiteBalanceGains")))
    goto LABEL_7;
  result = CFEqual(cf1, CFSTR("AutofocusProcessor_VideoMode"));
  if ((_DWORD)result)
  {
    result = objc_msgSend(&unk_1E4A018B0, "containsObject:", FigCaptureGetModelSpecificName());
    if ((result & 1) == 0)
    {
      v9 = !CFEqual(a3, CFSTR("Mode_StillPreview")) && (unint64_t)(CFEqual(a3, CFSTR("Mode_Panorama")) == 0);
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v10 = *(void **)(v5 + 560);
      result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
      if (result)
      {
        v11 = result;
        v12 = *(_QWORD *)v17;
        v13 = *MEMORY[0x1E0D07360];
        do
        {
          v14 = 0;
          do
          {
            if (*(_QWORD *)v17 != v12)
              objc_enumerationMutation(v10);
            v15 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v14), "stream");
            objc_msgSend(v15, "setPropertyIfSupported:value:", v13, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v9));
            ++v14;
          }
          while (v11 != v14);
          result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
          v11 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void __67__BWFigVideoCaptureDevice_setAutomaticallyAdjustsImageControlMode___block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 32);
  if (v1 != *(unsigned __int8 *)(v2 + 1824))
  {
    *(_BYTE *)(v2 + 1824) = v1;
    if (*(_BYTE *)(a1 + 48))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_DWORD *)(v4 + 1828);
      v6 = *(_DWORD *)(v4 + 1832);
      if (v5 != v6)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](v4, v5);
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
          -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](*(_QWORD *)(a1 + 32), *(_DWORD *)(*(_QWORD *)(a1 + 32) + 1828), v6);
          os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
        }
      }
    }
  }
}

- (void)setSmartCameraVersion:(id)a3
{
  int v3;
  BWFigCaptureStream *v5;

  v3 = *(_DWORD *)&a3.var0;
  if (!-[BWFigVideoCaptureStream started](self->_captureStream, "started"))
  {
    v5 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    -[BWFigCaptureStream setProperty:value:](v5, "setProperty:value:", *MEMORY[0x1E0D07738], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", (unsigned __int16)(((_WORD)v3 << 8) | BYTE2(v3))));
  }
}

- (void)setDepthDataDeliveryEnabled:(BOOL)a3
{
  char v5;

  if (self->_depthDataDeliveryEnabled != a3 && !-[BWFigVideoCaptureStream started](self->_captureStream, "started"))
  {
    self->_depthDataDeliveryEnabled = a3;
    if (a3)
      v5 = 0;
    else
      v5 = objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_attributes, "objectForKeyedSubscript:", CFSTR("NightMode")), "BOOLValue");
    self->_hasNightMode = v5;
    -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)self);
  }
}

- (void)setMemoryPool:(id)a3
{
  id activeSensorRegionForCameraControls;

  if (-[BWFigVideoCaptureStream started](self->_captureStream, "started"))
  {
    FigDebugAssert3();
  }
  else
  {
    activeSensorRegionForCameraControls = (id)self->_activeSensorRegionForCameraControls;
    if (activeSensorRegionForCameraControls != a3)
    {

      self->_activeSensorRegionForCameraControls = ($470D365275581EF16070F5A11344F73E)a3;
    }
  }
}

- (void)setClientExpectsCameraMountedInLandscapeOrientation:(BOOL)a3
{
  LOBYTE(self->_lastSphereMode) = a3;
}

uint64_t __51__BWFigVideoCaptureDevice_setTimeLapseCaptureRate___block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int os_unfair_lock_opaque;
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 2124) = *(_DWORD *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_opaque = v2[521]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 489);
  result = fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(os_unfair_lock_opaque);
  if (result)
  {
    v5 = result;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v6 = *(void **)(*(_QWORD *)(a1 + 32) + 560);
    result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (result)
    {
      v7 = result;
      v8 = *(_QWORD *)v12;
      v9 = *MEMORY[0x1E0D07800];
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v6);
          objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "stream"), "setProperty:value:", v9, v5);
        }
        while (v7 != v10);
        result = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        v7 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)setShallowDepthOfFieldEffectEnabled:(BOOL)a3
{
  _BOOL8 v3;
  os_unfair_lock_s *p_sdofLock;
  char isKindOfClass;
  BWPortraitSceneMonitor *portraitSceneMonitor;

  self->_shallowDepthOfFieldEffectEnabled = a3;
  if (self->_sdofSceneMonitoringEnabled)
  {
    v3 = a3;
    p_sdofLock = &self->_sdofLock;
    os_unfair_lock_lock(&self->_sdofLock);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    portraitSceneMonitor = self->_portraitSceneMonitor;
    if ((isKindOfClass & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_6:
        os_unfair_lock_unlock(p_sdofLock);
        return;
      }
      portraitSceneMonitor = self->_portraitSceneMonitor;
    }
    -[BWPortraitSceneMonitor setShallowDepthOfFieldRenderingEnabled:](portraitSceneMonitor, "setShallowDepthOfFieldRenderingEnabled:", v3);
    goto LABEL_6;
  }
}

- (void)setZoomFactor:(float)a3
{
  id v5;
  double v6;
  BWPreviewTimeMachineProcessor *previewTimeMachineProcessor;

  if (LOBYTE(self->_zoomRampTuning.jumpFrontFacingZoomOut[2].tension))
  {
    v5 = -[NSArray firstObject](-[BWFigVideoCaptureDevice captureStreams](self, "captureStreams"), "firstObject");
    *(float *)&v6 = a3;
    objc_msgSend(v5, "setCmioZoomFactor:", v6);
  }
  else if (LOBYTE(self->_depthDataDeliveryZoomRange))
  {
    objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "setManualFramingVideoZoomFactor:", a3);
  }
  else
  {
    -[NSMutableArray setRequestedZoomFactor:](self->_whiteBalanceGainsOrderedKeys, "setRequestedZoomFactor:", *(double *)&a3);
    previewTimeMachineProcessor = self->_previewTimeMachineProcessor;
    -[NSMutableArray requestedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "requestedZoomFactor");
    -[BWPreviewTimeMachineProcessor requestedZoomFactorChanged:](previewTimeMachineProcessor, "requestedZoomFactorChanged:");
  }
}

- (void)_updateStreamingImageIntentTo:(int)a3 from:(void *)a4 masterPortType:
{
  uint64_t v4;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  float v34;
  float v35;
  CMTimeEpoch epoch;
  CMTimeEpoch v37;
  float v38;
  void *v39;
  uint64_t v40;
  double v41;
  int v42;
  int v43;
  double v44;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int timescale;
  uint64_t v50;
  uint64_t v51;
  const __CFAllocator *allocator;
  uint64_t v54;
  void *v55;
  id obj;
  uint64_t v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void *v63;
  void *v64;
  uint64_t v65;
  int v66;
  CMTimeEpoch v67;
  __int128 v68;
  unsigned int v69;
  CMTime v70;
  CMTime v71;
  CMTime time;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[15];
  CMTime v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  if (!_FigIsCurrentDispatchQueue())
  {
    v48 = v4;
    LODWORD(v47) = 0;
    FigDebugAssert3();
  }
  if (a2 == a3)
    return;
  if (!a3)
  {
    objc_msgSend((id)a1, "minimumFrameRate");
    *(_DWORD *)(a1 + 2092) = v8;
    objc_msgSend((id)a1, "maximumFrameRate");
    *(_DWORD *)(a1 + 2096) = v9;
  }
  v66 = a3;
  if ((a2 - 1) >= 2)
  {
    v10 = (a3 - 1) < 2;
    if ((a2 - 5) < 3)
    {
      v11 = 1;
      v12 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v10 = 1;
  }
  v11 = 0;
  v12 = (a3 - 5) < 3;
LABEL_12:
  v58 = v12;
  v57 = fvcd_timeLapseCaptureConfigurationForStreamingImageIntent(a2);
  v13 = (_QWORD *)MEMORY[0x1E0D070F0];
  v14 = (_QWORD *)MEMORY[0x1E0D070E8];
  if (v11)
  {
    if (a2 == 7)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v16 = (int)FigCapturePlatformIdentifier() >= 10 ? 16 : 33;
      v15 = 8;
    }
    v77[0] = *v13;
    v78.value = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v16, v47, v48);
    v77[1] = *v14;
    *(_QWORD *)&v78.timescale = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v15);
    v17 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v78, v77, 2);
    if (v17)
      -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](a1, *MEMORY[0x1E0D07320], v17);
  }
  v62 = -[BWFigVideoCaptureDevice _ltmCurveForStreamingImageIntent:](a1, v66);
  v69 = -[BWFigVideoCaptureDevice _ltmCurveForStreamingImageIntent:](a1, a2);
  v19 = -[BWFigVideoCaptureDevice _minimumFrameRateForStreamingImageIntent:masterPortType:](a1, a2, a4, v18);
  v20 = v19;
  v21 = 30.0;
  if (a2 != 3)
    v21 = *(float *)(a1 + 2096);
  -[BWFigVideoCaptureDevice _setMinimumFrameRate:](a1, v19);
  *(float *)&v22 = v21;
  objc_msgSend((id)a1, "setMaximumFrameRate:", v22);
  v64 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v63 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v55 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  obj = *(id *)(a1 + 560);
  v65 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
  if (v65)
  {
    if (a2 == 2)
      v23 = 2048.0;
    else
      v23 = 1024.0;
    if (a2 == 2)
      v24 = 1024.0;
    else
      v24 = 512.0;
    v25 = v66 == 3 || v10;
    v61 = *(_QWORD *)v74;
    v54 = *MEMORY[0x1E0D075C0];
    timescale = (int)fmaxf(v20, 1.0);
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v50 = *MEMORY[0x1E0D05A30];
    v60 = *MEMORY[0x1E0D07308];
    if (a2 == 3)
      v25 = 1;
    v59 = v58 | v25;
    v51 = *MEMORY[0x1E0D07800];
    v68 = *MEMORY[0x1E0CA2E18];
    v67 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    do
    {
      v26 = 0;
      v27 = v11;
      do
      {
        if (*(_QWORD *)v74 != v61)
          objc_enumerationMutation(obj);
        v28 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v26);
        v29 = (void *)objc_msgSend(v28, "portType", v47, v48);
        v30 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v28, "minimumFrameRate");
        objc_msgSend(v64, "setObject:forKeyedSubscript:", objc_msgSend(v30, "numberWithFloat:"), v29);
        v31 = &unk_1E49FB7F0;
        if (*(float *)(a1 + 2096) < v21)
        {
          v32 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v28, "maximumFrameRate", &unk_1E49FB7F0);
          v31 = (void *)objc_msgSend(v32, "numberWithFloat:");
        }
        objc_msgSend(v63, "setObject:forKeyedSubscript:", v31, v29);
        if (v62 != v69)
        {
          objc_msgSend(v55, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69), v29);
          objc_msgSend((id)objc_msgSend(v28, "stream"), "setProperty:value:", v54, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69));
        }
        if (!v66)
        {
          if (!*(_QWORD *)(a1 + 2104))
            *(_QWORD *)(a1 + 2104) = objc_alloc_init(MEMORY[0x1E0C99E08]);
          v33 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v28, "aeMaxGain");
          objc_msgSend(*(id *)(a1 + 2104), "setObject:forKeyedSubscript:", objc_msgSend(v33, "numberWithFloat:"), v29);
          if (*(_QWORD *)(a1 + 2112))
          {
            if (v28)
              goto LABEL_48;
LABEL_50:
            memset(&time, 0, sizeof(time));
          }
          else
          {
            *(_QWORD *)(a1 + 2112) = objc_alloc_init(MEMORY[0x1E0C99E08]);
            if (!v28)
              goto LABEL_50;
LABEL_48:
            objc_msgSend(v28, "maxExposureDurationFrameworkOverride");
          }
          objc_msgSend(*(id *)(a1 + 2112), "setObject:forKeyedSubscript:", CMTimeCopyAsDictionary(&time, allocator), v29);
        }
        *(_OWORD *)&v71.value = v68;
        v71.epoch = v67;
        memset(&v78, 0, sizeof(v78));
        CMTimeMakeFromDictionary(&v78, (CFDictionaryRef)objc_msgSend(*(id *)(a1 + 2112), "objectForKeyedSubscript:", objc_msgSend(v28, "portType")));
        switch(a2)
        {
          case 0:
          case 4:
          case 8:
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2104), "objectForKeyedSubscript:", v29), "floatValue");
            v35 = v34;
            *(_OWORD *)&v71.value = *(_OWORD *)&v78.value;
            epoch = v78.epoch;
            goto LABEL_59;
          case 1:
          case 2:
            if (!*(_BYTE *)(a1 + 2120)
              || !objc_msgSend(v29, "isEqualToString:", v50)
              || (v35 = v23, (objc_msgSend(*(id *)(a1 + 2168), "containsObject:", v29) & 1) == 0))
            {
              v35 = v24;
            }
            *(_OWORD *)&v71.value = v68;
            epoch = v67;
LABEL_59:
            v71.epoch = epoch;
            break;
          case 3:
            objc_msgSend(v28, "momentCaptureVideoRecordingAEMaxGain");
            if (v38 == 0.0)
              v35 = 120.0;
            else
              v35 = v38;
            CMTimeMake(&v71, 1, timescale);
            break;
          case 5:
          case 7:
            *(_OWORD *)&v71.value = v68;
            v37 = v67;
            goto LABEL_66;
          case 6:
            *(_OWORD *)&v71.value = *(_OWORD *)&v78.value;
            v37 = v78.epoch;
LABEL_66:
            v71.epoch = v37;
            v35 = 512.0;
            break;
          default:
            v35 = 0.0;
            break;
        }
        v39 = (void *)objc_msgSend(v28, "stream");
        LODWORD(v40) = vcvts_n_s32_f32(v35, 8uLL);
        if (!objc_msgSend(v39, "setProperty:value:", v60, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v40)))
        {
          *(float *)&v41 = v35;
          objc_msgSend(v28, "setAeMaxGain:", v41);
        }
        if ((((a2 == 3) ^ objc_msgSend(v28, "lowLightVideoEnabled")) & 1) != 0
          || (_DWORD)v27 != objc_msgSend(v28, "timeLapseEnabled"))
        {
          objc_msgSend(v28, "setLowLightVideoEnabled:", a2 == 3);
          objc_msgSend(v28, "setTimeLapseEnabled:", v27);
          objc_msgSend(v28, "updateAETables");
        }
        if (v59)
        {
          v70 = v71;
          objc_msgSend(v28, "setMaxExposureDurationFrameworkOverride:", &v70);
          objc_msgSend(v28, "updateMaxExposureDuration");
          if (v58)
            objc_msgSend((id)objc_msgSend(v28, "stream"), "setProperty:value:", v51, v57);
        }
        if (v28 == *(void **)(a1 + 576))
        {
          objc_msgSend(v28, "maxEIT");
          v43 = v42;
          if ((a2 - 1) > 1)
          {
            if (!(_DWORD)v27)
              goto LABEL_82;
          }
          else if ((objc_msgSend(*(id *)(a1 + 2168), "containsObject:", objc_msgSend(*(id *)(a1 + 576), "portType")) & 1) != 0)
          {
            v43 = 2139095039;
LABEL_82:
            objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxAEGain:");
            LODWORD(v44) = v43;
            objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxEIT:", v44);
            goto LABEL_83;
          }
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2104), "objectForKeyedSubscript:", objc_msgSend(v28, "portType")), "floatValue");
          goto LABEL_82;
        }
LABEL_83:
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v27 = v11;
        }
        ++v26;
      }
      while (v65 != v26);
      v65 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
    }
    while (v65);
  }
  if (objc_msgSend(v55, "count", v47))
    v46 = 5;
  else
    v46 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1848));
  objc_msgSend(*(id *)(a1 + 1856), "setExpectedMinimumFrameRatesByPortType:", v64);
  objc_msgSend(*(id *)(a1 + 1856), "setExpectedMaximumFrameRatesByPortType:", v63);
  objc_msgSend(*(id *)(a1 + 1856), "setExpectedLTMCurvesByPortType:", v55);
  objc_msgSend(*(id *)(a1 + 1856), "setLtmCurvesTransitionFrameCount:", v46);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1848));
}

- (uint64_t)_addDropFrameWaitingForTorchToRampUpKey:(uint64_t)result
{
  uint64_t v3;
  uint64_t v4;
  CMTime time2;
  CMTime time1;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      pthread_mutex_lock(*(pthread_mutex_t **)(result + 2376));
      if (*(_BYTE *)(v3 + 2412)
        || (CMSampleBufferGetPresentationTimeStamp(&time1, (CMSampleBufferRef)a2),
            time2 = *(CMTime *)(v3 + 2388),
            CMTimeCompare(&time1, &time2) < 0))
      {
        CMSetAttachment(a2, CFSTR("DropFrameWaitingForTorchToRampUp"), MEMORY[0x1E0C9AAB0], 1u);
      }
      else
      {
        v4 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(v3 + 2388) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(v3 + 2404) = *(_QWORD *)(v4 + 16);
      }
      return pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 2376));
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

- (double)_accumulateTimeOfFLightStreamingTime:(double)result
{
  float v5;
  int v6;
  _OWORD *v7;
  CMTime v8;
  CMTime time1;
  CMTime v10;

  if (a1)
  {
    objc_msgSend((id)objc_msgSend((id)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D06F08]), "floatValue");
    if (v5 == 0.0)
    {
      v6 = 0;
    }
    else if (fabsf(v5 + -1.0) <= 0.2)
    {
      v6 = 1;
    }
    else if (fabsf(v5 + -8.0) > 0.2)
    {
      v6 = -1;
    }
    else
    {
      v6 = 8;
    }
    memset(&v10, 0, sizeof(v10));
    CMSampleBufferGetPresentationTimeStamp(&v10, (CMSampleBufferRef)target);
    v7 = (_OWORD *)(a1 + 3888);
    if ((*(_BYTE *)(a1 + 3900) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 3884) != v6)
    {
      time1 = v10;
      *(_OWORD *)&v8.value = *v7;
      v8.epoch = *(_QWORD *)(a1 + 3904);
      if (CMTimeCompare(&time1, &v8) >= 1)
      {
        time1 = v10;
        -[BWFigVideoCaptureDevice _updateTimeOfFlightStreamingTime:](a1, &time1, *(float *)&v10.value);
LABEL_13:
        *(_DWORD *)(a1 + 3884) = v6;
        result = *(double *)&v10.value;
        *v7 = *(_OWORD *)&v10.value;
        *(_QWORD *)(a1 + 3904) = v10.epoch;
      }
    }
  }
  return result;
}

+ (void)initialize
{
  if ((id)objc_opt_class() == a1)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
  }
}

- (BWFigVideoCaptureDevice)initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceClientPriority:(int)a12 error:(int *)a13
{
  id v17;
  FigCaptureCameraParameters *v18;
  __int128 v19;
  uint64_t v21;
  _BOOL4 v23;
  _OWORD v25[3];

  v23 = a7;
  v17 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
  v18 = +[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance");
  v19 = *(_OWORD *)&a9->var0[4];
  v25[0] = *(_OWORD *)a9->var0;
  v25[1] = v19;
  LODWORD(v21) = a12;
  return (BWFigVideoCaptureDevice *)-[BWFigVideoCaptureDevice _initWithCaptureDevice:attributes:synchronizedStreamsAttributes:unsynchronizedStreamsAttributes:multiCamEnabled:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:deviceVendor:createAutofocusSampleBufferProcessorFunction:cameraParameters:deviceClientPriority:error:](self, "_initWithCaptureDevice:attributes:synchronizedStreamsAttributes:unsynchronizedStreamsAttributes:multiCamEnabled:applicationID:clientAuditToken:tccIdentity:mediaEnvironment:deviceVendor:createAutofocusSampleBufferProcessorFunction:cameraParameters:deviceClientPriority:error:", a3, a4, a5, a6, v23, a8, v25, a10, a11, v17, FigSampleBufferProcessorCreateForAutofocus, v18, v21, a13);
}

- (id)_initWithCaptureDevice:(id)a3 attributes:(id)a4 synchronizedStreamsAttributes:(id)a5 unsynchronizedStreamsAttributes:(id)a6 multiCamEnabled:(BOOL)a7 applicationID:(id)a8 clientAuditToken:(id *)a9 tccIdentity:(id)a10 mediaEnvironment:(id)a11 deviceVendor:(id)a12 createAutofocusSampleBufferProcessorFunction:(void *)a13 cameraParameters:(id)a14 deviceClientPriority:(int)a15 error:(int *)a16
{
  int *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  uint64_t *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  void *v45;
  int v46;
  int v47;
  int v48;
  void *v49;
  void *v50;
  int v51;
  int v52;
  double v53;
  int v54;
  void *v55;
  int v56;
  int v57;
  uint64_t *v58;
  void *v59;
  BWStreamStartStopSynchronizer *v60;
  double v61;
  BWStreamStartStopSynchronizer *v62;
  void *v63;
  void *v64;
  float v65;
  float v66;
  uint64_t v67;
  int v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t j;
  uint64_t v80;
  BWUBCaptureParameters *v81;
  BWUBCaptureParameters *v82;
  int v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  void *v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  char v94;
  id v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t m;
  uint64_t v101;
  BWZoomCommandHandler *v102;
  int v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t n;
  int CFPreferenceNumberWithDefault;
  void *v110;
  uint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  void *v115;
  int v116;
  uint64_t v118;
  id v119;
  unint64_t v120;
  int *v121;
  void *v122;
  id v123;
  void *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  objc_super v147;
  int v148;
  _BYTE v149[128];
  _BYTE v150[128];
  _BYTE v151[128];
  _BYTE v152[128];
  _BYTE v153[128];
  _QWORD v154[3];

  v22 = a16;
  v154[1] = *MEMORY[0x1E0C80C00];
  v148 = 0;
  v147.receiver = self;
  v147.super_class = (Class)BWFigVideoCaptureDevice;
  v23 = -[BWFigVideoCaptureDevice init](&v147, sel_init);
  if (!v23)
  {
    v37 = 0;
    v38 = 0;
    goto LABEL_153;
  }
  if (!a3)
  {
    FigDebugAssert3();
LABEL_158:
    v29 = 0;
    goto LABEL_40;
  }
  *((_QWORD *)v23 + 1) = a3;
  *((_QWORD *)v23 + 2) = a12;
  *((_DWORD *)v23 + 130) = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
  *((_DWORD *)v23 + 123) = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
  *((_QWORD *)v23 + 66) = a4;
  v24 = *(_OWORD *)&a9->var0[4];
  *((_OWORD *)v23 + 2) = *(_OWORD *)a9->var0;
  *((_OWORD *)v23 + 3) = v24;
  v25 = *(_OWORD *)&a9->var0[4];
  v145 = *(_OWORD *)a9->var0;
  v146 = v25;
  *((_DWORD *)v23 + 16) = FigCaptureGetPIDFromAuditToken(&v145);
  v26 = *(_OWORD *)&a9->var0[4];
  v145 = *(_OWORD *)a9->var0;
  v146 = v26;
  v23[68] = FigCaptureClientIsRunningInXCTest(&v145) != 0;
  *((_DWORD *)v23 + 18) = 0;
  v27 = (void *)objc_msgSend(a8, "copy");
  *((_QWORD *)v23 + 10) = v27;
  v23[88] = FigCaptureClientApplicationIDIsCameraOrDerivative(v27);
  v23[496] = a7;
  *((_QWORD *)v23 + 3) = objc_msgSend(*((id *)v23 + 1), "copyProperty:error:", CFSTR("Clock"), &v148);
  if (v148)
  {
    FigDebugAssert3();
    a3 = 0;
    goto LABEL_158;
  }
  *((_QWORD *)v23 + 16) = (id)objc_msgSend(*((id *)v23 + 1), "supportedProperties");
  *(_OWORD *)(v23 + 1768) = 0u;
  *((_QWORD *)v23 + 223) = 0x3FF0000000000000;
  *((_QWORD *)v23 + 224) = 0x3FF0000000000000;
  v28 = a5;
  if (!a5)
  {
    v28 = a6;
    if (!a6)
    {
      v154[0] = a4;
      v28 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v154, 1);
    }
  }
  v124 = v28;
  v29 = -[BWFigVideoCaptureDevice _copyStreamsForAttributes:deviceClientPriority:errOut:]((uint64_t)v23, v28, a15, &v148);
  if (v148)
    goto LABEL_39;
  *((_QWORD *)v23 + 15) = -[BWFigVideoCaptureDevice _copyPortTypesFromStreams:errOut:]((uint64_t)v23, v29, &v148);
  if (v148)
    goto LABEL_39;
  v30 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsBaseZoomFactorOverrides"));
  v123 = a4;
  v31 = objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsClientBaseZoomFactorsByPortType"));
  v32 = objc_msgSend(v29, "count");
  v33 = (void *)objc_msgSend(*((id *)v23 + 1), "supportedProperties");
  if (objc_msgSend(v33, "objectForKeyedSubscript:", *MEMORY[0x1E0D059D8]))
  {
    v34 = objc_msgSend(*((id *)v23 + 1), "copySynchronizedStreamsGroupForStreams:error:", v29, 0);
    if (v34)
    {
      v35 = (void *)v34;
      a3 = -[BWFigVideoCaptureSynchronizedStreamsGroup initWithSynchronizedStreamsGroup:activeStreams:readOnly:baseZoomFactorOverrides:clientBaseZoomFactorsByPortType:error:]([BWFigVideoCaptureSynchronizedStreamsGroup alloc], "initWithSynchronizedStreamsGroup:activeStreams:readOnly:baseZoomFactorOverrides:clientBaseZoomFactorsByPortType:error:", v34, v29, v32 < 2, v30, v31, &v148);

      if (a3)
      {
        v36 = v123;
        if (v32 >= 2)
          *((_QWORD *)v23 + 69) = a3;
        v22 = a16;
        goto LABEL_18;
      }
      FigDebugAssert3();
      v22 = a16;
LABEL_40:

      if (v22)
      {
        v56 = v148;
        if (!v148)
          v56 = -12780;
        *v22 = v56;
      }

      return 0;
    }
    if (v32 >= 2)
    {
LABEL_39:
      FigDebugAssert3();
      a3 = 0;
      goto LABEL_40;
    }
  }
  else if (v32 >= 2)
  {
    goto LABEL_39;
  }
  a3 = 0;
  v36 = v123;
LABEL_18:
  v39 = *(_OWORD *)&a9->var0[4];
  v145 = *(_OWORD *)a9->var0;
  v146 = v39;
  v148 = -[BWFigVideoCaptureDevice _createBWFigVideoCaptureStreamsForCaptureStreams:attributeDictionaries:cameraParameters:synchronizedStreamsGroup:clientAuditToken:tccIdentity:mediaEnvironment:]((uint64_t)v23, v29, v124, a14, (uint64_t)a3, &v145, (uint64_t)a10, (uint64_t)a11);
  if (v148)
  {
LABEL_163:
    FigDebugAssert3();
    goto LABEL_40;
  }
  *((_QWORD *)v23 + 71) = (id)objc_msgSend(*((id *)v23 + 70), "sortedArrayUsingComparator:", &__block_literal_global_103);
  v40 = (uint64_t *)MEMORY[0x1E0D05A28];
  v120 = v32;
  if (v32 >= 2)
  {
    if (objc_msgSend(v23, "isBravoVariant"))
    {
      v42 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v23, *MEMORY[0x1E0D05A18]);
      *((_QWORD *)v23 + 63) = v42;
      if (!v42)
        goto LABEL_163;
      v43 = (void *)*((_QWORD *)v23 + 73);
      if (!v43)
        v43 = v42;
      *((_QWORD *)v23 + 162) = v43;
      *((_QWORD *)v23 + 163) = v43;
      *((_QWORD *)v23 + 72) = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v23, *MEMORY[0x1E0D05A30]);
      v44 = (unint64_t)-[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v23, *v40);
      *((_QWORD *)v23 + 73) = v44;
      if (!(*((_QWORD *)v23 + 72) | v44))
        goto LABEL_163;
      *((_DWORD *)v23 + 329) = 0;
      v45 = (void *)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsSlaveFrameRates"));
      *((_DWORD *)v23 + 345) = objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("NominalSlaveFrameRate")), "intValue");
      *((_DWORD *)v23 + 347) = objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("ElevatedSlaveFrameRate")), "intValue");
      v46 = objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("NominalSlaveFrameRateForDepthDataDelivery")), "intValue");
      *((_DWORD *)v23 + 349) = v46;
      if (!v46)
        *((_DWORD *)v23 + 349) = *((_DWORD *)v23 + 345);
      v47 = objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("ElevatedSlaveFrameRateForDepthDataDelivery")), "intValue");
      *((_DWORD *)v23 + 350) = v47;
      if (!v47)
        *((_DWORD *)v23 + 350) = *((_DWORD *)v23 + 347);
      v48 = objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", CFSTR("ElevatedSlaveFrameRateForDepthDataDeliveryWhenWaitingForExposureFocusStability")), "intValue");
      *((_DWORD *)v23 + 351) = v48;
      if (!v48)
        *((_DWORD *)v23 + 351) = *((_DWORD *)v23 + 347);
      *((_DWORD *)v23 + 352) = 2;
      v49 = (void *)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsSwitchOverParameters"));
      *((_QWORD *)v23 + 165) = -[BWBravoStreamSelector initWithStreamSelectionAttributes:wideStream:teleStream:superWideStream:cameraCalibrationValid:]([BWBravoStreamSelector alloc], "initWithStreamSelectionAttributes:wideStream:teleStream:superWideStream:cameraCalibrationValid:", v49, *((_QWORD *)v23 + 63), *((_QWORD *)v23 + 72), *((_QWORD *)v23 + 73), objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "cameraCalibrationValid"));
      *((_DWORD *)v23 + 357) = 1;
      *((_DWORD *)v23 + 356) = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", CFSTR("parallaxMitigationRampDuration")), "intValue");
      *((_QWORD *)v23 + 179) = -[BWRamp initWithName:]([BWRamp alloc], "initWithName:", CFSTR("ParallaxMitigationRamp"));
      *((_DWORD *)v23 + 354) = 0;
      -[BWFigVideoCaptureDevice _updateParallaxMitigationBasedOnZoomFactorEnabled]((uint64_t)v23);
      v50 = (void *)objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsStereoFusionZoomFactorRange"));
      objc_msgSend((id)objc_msgSend(v50, "objectAtIndexedSubscript:", 0), "floatValue");
      *((_DWORD *)v23 + 343) = v51;
      objc_msgSend((id)objc_msgSend(v50, "objectAtIndexedSubscript:", 1), "floatValue");
      *((_DWORD *)v23 + 344) = v52;
      objc_msgSend((id)objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsOISSISStereoFusionTeleMinIntegrationTimeDenominator")), "doubleValue");
      *((double *)v23 + 295) = 1.0 / v53;
      objc_msgSend((id)objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsOISSISStereoFusionTeleMinGain")), "floatValue");
      *((_DWORD *)v23 + 592) = v54;
      v55 = (void *)*((_QWORD *)v23 + 72);
      if (v55)
        *((double *)v23 + 294) = fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary((void *)objc_msgSend(v55, "sensorIDDictionary"));
      if (*((_QWORD *)v23 + 73))
        v23[609] = 0;
    }
    else
    {
      v57 = *((_DWORD *)v23 + 123);
      if (v57 != 12 && v57 != 6)
        goto LABEL_40;
      if (v57 == 6)
        v58 = (uint64_t *)MEMORY[0x1E0D05A38];
      else
        v58 = (uint64_t *)MEMORY[0x1E0D05A50];
      v59 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v23, *v58);
      *((_QWORD *)v23 + 63) = v59;
      *((_QWORD *)v23 + 162) = v59;
      if (objc_msgSend(a5, "count") == 2)
        *((_QWORD *)v23 + 183) = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)v23, *MEMORY[0x1E0D05A40]);
    }
    v60 = [BWStreamStartStopSynchronizer alloc];
    LODWORD(v61) = 0;
    v62 = -[BWStreamStartStopSynchronizer initWithStreams:timeoutInSeconds:](v60, "initWithStreams:timeoutInSeconds:", *((_QWORD *)v23 + 70), v61);
    *((_QWORD *)v23 + 75) = v62;
    -[BWStreamStartStopSynchronizer setWaitForMasterAEToSettle:](v62, "setWaitForMasterAEToSettle:", (*((_DWORD *)v23 + 123) & 0xFFFFFFFE) == 8);
  }
  else
  {
    v41 = (void *)objc_msgSend(*((id *)v23 + 70), "objectAtIndexedSubscript:", 0);
    *((_QWORD *)v23 + 63) = v41;
    objc_msgSend(v41, "portType");
    if (FigCFEqual() && *((_DWORD *)v23 + 123) != 20)
      goto LABEL_163;
  }
  v63 = (void *)objc_msgSend(*((id *)v23 + 71), "firstObject");
  v64 = (void *)objc_msgSend(v63, "portType");
  v118 = *v40;
  if (objc_msgSend(v64, "isEqualToString:") && objc_msgSend(v63, "hasFocus"))
  {
    v23[1450] = 1;
    if (*((_QWORD *)v23 + 73))
    {
      objc_msgSend(*((id *)v23 + 165), "wideToSuperWideFocusDistance");
      if (v65 == 0.0)
        v65 = 14.0;
      *((float *)v23 + 363) = v65;
      objc_msgSend(*((id *)v23 + 165), "superWideToWideFocusDistance");
      if (v66 == 0.0)
        v66 = 16.0;
    }
    else
    {
      *((_DWORD *)v23 + 363) = 1090519040;
      v66 = 10.0;
    }
    *((float *)v23 + 364) = v66;
  }
  v121 = v22;
  v122 = v29;
  *((_QWORD *)v23 + 67) = objc_msgSend((id)objc_msgSend(*((id *)v23 + 63), "stream"), "copyPropertyIfSupported:error:", CFSTR("Manufacturer"), 0);
  v67 = objc_msgSend((id)objc_msgSend(*((id *)v23 + 63), "stream"), "copyPropertyIfSupported:error:", CFSTR("NonLocalizedName"), 0);
  *((_QWORD *)v23 + 68) = v67;
  if (!v67)
    *((_QWORD *)v23 + 68) = objc_msgSend((id)objc_msgSend(*((id *)v23 + 63), "stream"), "copyPropertyIfSupported:error:", CFSTR("LocalizedName"), 0);
  *((_QWORD *)v23 + 194) = FigDispatchQueueCreateWithPriority();
  *((_QWORD *)v23 + 310) = FigDispatchQueueCreateWithPriority();
  *((_QWORD *)v23 + 518) = FigDispatchQueueCreateWithPriority();
  *((_DWORD *)v23 + 662) = 1065353216;
  v68 = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("SoftISP")), "BOOLValue");
  v23[2056] = v68;
  if (v68)
  {
    *((_QWORD *)v23 + 258) = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v141 = 0u;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v69 = (void *)*((_QWORD *)v23 + 70);
    v70 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v141, v153, 16);
    if (v70)
    {
      v71 = v70;
      v72 = *(_QWORD *)v142;
      do
      {
        for (i = 0; i != v71; ++i)
        {
          if (*(_QWORD *)v142 != v72)
            objc_enumerationMutation(v69);
          objc_msgSend(*((id *)v23 + 258), "setObject:forKeyedSubscript:", &unk_1E49FB760, objc_msgSend(*(id *)(*((_QWORD *)&v141 + 1) + 8 * i), "portType"));
        }
        v71 = objc_msgSend(v69, "countByEnumeratingWithState:objects:count:", &v141, v153, 16);
      }
      while (v71);
    }
  }
  v119 = a3;
  v139 = 0u;
  v140 = 0u;
  v137 = 0u;
  v138 = 0u;
  v74 = (void *)*((_QWORD *)v23 + 13);
  v75 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v137, v152, 16);
  if (v75)
  {
    v76 = v75;
    v77 = 0;
    v78 = *(_QWORD *)v138;
    do
    {
      for (j = 0; j != v76; ++j)
      {
        if (*(_QWORD *)v138 != v78)
          objc_enumerationMutation(v74);
        v80 = *(_QWORD *)(*((_QWORD *)&v137 + 1) + 8 * j);
        v81 = -[BWUBCaptureParameters initWithPortType:sensorIDDictionary:]([BWUBCaptureParameters alloc], "initWithPortType:sensorIDDictionary:", v80, objc_msgSend(*((id *)v23 + 13), "objectForKeyedSubscript:", v80));
        v82 = v81;
        if (!v77 && v81)
          v77 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        objc_msgSend(v77, "setObject:forKeyedSubscript:", v82, v80);

      }
      v76 = objc_msgSend(v74, "countByEnumeratingWithState:objects:count:", &v137, v152, 16);
    }
    while (v76);
  }
  else
  {
    v77 = 0;
  }
  *((_QWORD *)v23 + 251) = objc_msgSend(v77, "copy");
  *((double *)v23 + 293) = fvcd_stillImageStabilizationIntegrationTimeThresholdFromSensorIDDictionary((void *)objc_msgSend(*((id *)v23 + 63), "sensorIDDictionary"));
  v83 = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("StillImageCaptureNowAfterAutofocusTimeout")), "BOOLValue");
  v23[1976] = v83;
  if (v83)
  {
    *((_DWORD *)v23 + 495) = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("StillImageContrastBasedAutofocusTimeout")), "intValue");
    *((_DWORD *)v23 + 496) = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("StillImagePhaseDetectionAutofocusTimeout")), "intValue");
  }
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v84 = (void *)*((_QWORD *)v23 + 70);
  v85 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v133, v151, 16);
  v22 = v121;
  if (v85)
  {
    v86 = v85;
    v87 = *(_QWORD *)v134;
    do
    {
      for (k = 0; k != v86; ++k)
      {
        if (*(_QWORD *)v134 != v87)
          objc_enumerationMutation(v84);
        *((_DWORD *)v23 + 34) |= BWActiveDeviceTypeFromPortType((void *)objc_msgSend(*(id *)(*((_QWORD *)&v133 + 1) + 8 * k), "portType"));
      }
      v86 = objc_msgSend(v84, "countByEnumeratingWithState:objects:count:", &v133, v151, 16);
    }
    while (v86);
  }
  v23[1988] = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue");
  *((_DWORD *)v23 + 578) = 1097859072;
  v89 = (void *)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("AutoFlashNormalizedSNRThreshold"));
  if (v89)
  {
    objc_msgSend(v89, "floatValue");
    *((_DWORD *)v23 + 578) = v90;
  }
  *((_QWORD *)v23 + 288) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  if (objc_msgSend(v122, "count"))
  {
    v91 = 0;
    do
    {
      v92 = objc_msgSend((id)objc_msgSend(v124, "objectAtIndexedSubscript:", v91), "objectForKeyedSubscript:", CFSTR("AutoFlashNormalizedSNRThreshold"));
      if (v92)
        v93 = (void *)v92;
      else
        v93 = &unk_1E4A02F30;
      objc_msgSend(*((id *)v23 + 288), "setObject:forKeyedSubscript:", v93, objc_msgSend(*((id *)v23 + 15), "objectAtIndexedSubscript:", v91++));
    }
    while (objc_msgSend(v122, "count") > v91);
  }
  v23[1989] = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("NightMode")), "BOOLValue");
  v94 = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("DigitalFlash")), "BOOLValue");
  v23[2152] = v94;
  if ((v94 & 1) != 0)
  {
    v95 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v129 = 0u;
    v130 = 0u;
    v131 = 0u;
    v132 = 0u;
    v96 = (void *)*((_QWORD *)v23 + 251);
    v97 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v129, v150, 16);
    if (v97)
    {
      v98 = v97;
      v99 = *(_QWORD *)v130;
      do
      {
        for (m = 0; m != v98; ++m)
        {
          if (*(_QWORD *)v130 != v99)
            objc_enumerationMutation(v96);
          v101 = *(_QWORD *)(*((_QWORD *)&v129 + 1) + 8 * m);
          objc_msgSend((id)objc_msgSend(*((id *)v23 + 251), "objectForKeyedSubscript:", v101), "digitalFlashAvailableEffectiveIntegrationTimeThreshold");
          objc_msgSend(v95, "addObject:", v101);
        }
        v98 = objc_msgSend(v96, "countByEnumeratingWithState:objects:count:", &v129, v150, 16);
      }
      while (v98);
    }
    *((_QWORD *)v23 + 271) = v95;
    v23[2180] = (int)FigCapturePlatformIdentifier() > 7;
    v23[2181] = 1;
    *((_DWORD *)v23 + 549) = -1;
    if (*((_DWORD *)v23 + 130) == 2 || (int)FigCapturePlatformIdentifier() >= 8)
    {
      *((_QWORD *)v23 + 290) = -[BWMovingWindowStats initWithWindowSize:]([BWMovingWindowStats alloc], "initWithWindowSize:", 6);
      *((_QWORD *)v23 + 278) = -[BWMovingWindowStats initWithWindowSize:]([BWMovingWindowStats alloc], "initWithWindowSize:", 8);
    }
    v23[2120] = 0;
    v22 = v121;
  }
  if (v23[1450])
  {
    objc_msgSend((id)objc_msgSend(*((id *)v23 + 251), "objectForKeyedSubscript:", v118), "autoFlashMacroNormalizedSNRThreshold");
    *((_QWORD *)v23 + 292) = -[BWMovingWindowStats initWithWindowSize:]([BWMovingWindowStats alloc], "initWithWindowSize:", 6);
  }
  v23[2072] = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("DeepFusion")), "BOOLValue");
  *((_DWORD *)v23 + 574) = 0;
  *((_DWORD *)v23 + 615) = 1104150528;
  *((_DWORD *)v23 + 690) = 0;
  v102 = objc_alloc_init(BWZoomCommandHandler);
  *((_QWORD *)v23 + 343) = v102;
  -[BWZoomCommandHandler setZoomCompletionDelegate:](v102, "setZoomCompletionDelegate:", v23);
  *((_DWORD *)v23 + 695) = 1036831949;
  *((_QWORD *)v23 + 344) = FigDispatchQueueCreateWithPriority();
  *((_DWORD *)v23 + 694) = 0;
  if ((int)FigCapturePlatformIdentifier() >= 3)
    v103 = 2;
  else
    v103 = 3;
  *((_DWORD *)v23 + 696) = v103;
  *(_WORD *)(v23 + 2793) = 257;
  *((_DWORD *)v23 + 697) = v103 + 3;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v104 = (void *)*((_QWORD *)v23 + 70);
  v105 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v125, v149, 16);
  if (v105)
  {
    v106 = v105;
    v107 = *(_QWORD *)v126;
    while (2)
    {
      for (n = 0; n != v106; ++n)
      {
        if (*(_QWORD *)v126 != v107)
          objc_enumerationMutation(v104);
        if (objc_msgSend(*(id *)(*((_QWORD *)&v125 + 1) + 8 * n), "isCMIOZoomFactorSupported"))
        {
          v23[3064] = 1;
          goto LABEL_129;
        }
      }
      v106 = objc_msgSend(v104, "countByEnumeratingWithState:objects:count:", &v125, v149, 16);
      if (v106)
        continue;
      break;
    }
  }
LABEL_129:
  *((_QWORD *)v23 + 195) = FigDispatchQueueCreateWithPriority();
  *((_QWORD *)v23 + 196) = FigDispatchQueueCreateWithPriority();
  *((_QWORD *)v23 + 197) = a13;
  *((_QWORD *)v23 + 198) = dispatch_queue_create("com.apple.bwgraph.capture-device-autofocus-processor", 0);
  *((_QWORD *)v23 + 199) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *((_QWORD *)v23 + 200) = FigSimpleMutexCreate();
  v23[1824] = 1;
  *(_QWORD *)(v23 + 1828) = 0;
  *((_QWORD *)v23 + 230) = 0x3FE0000000000000;
  *((_DWORD *)v23 + 462) = 0;
  objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("AutoFocusPositionSensorMode")), "intValue");
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  *((_DWORD *)v23 + 468) = CFPreferenceNumberWithDefault;
  if (CFPreferenceNumberWithDefault)
  {
    v110 = (void *)objc_msgSend((id)objc_msgSend(*((id *)v23 + 63), "stream"), "supportedProperties");
    if (!objc_msgSend(v110, "objectForKeyedSubscript:", *MEMORY[0x1E0D073C0]))
      *((_DWORD *)v23 + 468) = 0;
  }
  v111 = 0;
  *((_DWORD *)v23 + 489) = 0;
  v38 = v122;
  if (v120 >= 2)
  {
    if (objc_msgSend(v23, "isBravoVariant"))
      v111 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v123, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamsSwitchOverParameters")), "objectForKeyedSubscript:", CFSTR("autoFocusRecommendedMasterPortTypeEnabled")), "BOOLValue");
    else
      v111 = 0;
  }
  *((_QWORD *)v23 + 245) = -[BWFrameStatisticsByPortType initWithPortTypes:autoFocusRecommendedMasterPortTypeEnabled:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:autoFocusRecommendedMasterPortTypeEnabled:", *((_QWORD *)v23 + 15), v111);
  *((_QWORD *)v23 + 246) = -[BWFrameStatisticsByPortType initWithPortTypes:autoFocusRecommendedMasterPortTypeEnabled:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:autoFocusRecommendedMasterPortTypeEnabled:", *((_QWORD *)v23 + 15), v111);
  if (objc_msgSend(v122, "count"))
  {
    v112 = 0;
    do
    {
      if (objc_msgSend((id)objc_msgSend(v124, "objectAtIndexedSubscript:", v112), "objectForKeyedSubscript:", CFSTR("SensorThermalLevelsByTemperature")))
      {
        v113 = (id)*((_QWORD *)v23 + 512);
        if (!v113)
        {
          v113 = objc_alloc_init(MEMORY[0x1E0C99E20]);
          *((_QWORD *)v23 + 512) = v113;
        }
        objc_msgSend(v113, "addObject:", objc_msgSend(*((id *)v23 + 15), "objectAtIndexedSubscript:", v112));
      }
      ++v112;
    }
    while (objc_msgSend(v122, "count") > v112);
  }
  if (*((_QWORD *)v23 + 512))
    *((_QWORD *)v23 + 513) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(*((id *)v23 + 512), "count"));
  v114 = MEMORY[0x1E0CA2E18];
  *((_OWORD *)v23 + 161) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)v23 + 324) = *(_QWORD *)(v114 + 16);
  *((_QWORD *)v23 + 330) = FigSimpleMutexCreate();
  *((_QWORD *)v23 + 297) = FigSimpleMutexCreate();
  *(int32x4_t *)(v23 + 2616) = vdupq_n_s32(0xDEADBEEF);
  *((_QWORD *)v23 + 329) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *((_DWORD *)v23 + 626) = 0;
  *((_DWORD *)v23 + 328) = 0;
  *((_DWORD *)v23 + 322) = 0;
  *((_DWORD *)v23 + 315) = 0;
  *((_QWORD *)v23 + 339) = dispatch_queue_create("com.apple.bwgraph.capture-device-whitebalancegains", 0);
  *((_QWORD *)v23 + 340) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *((_QWORD *)v23 + 341) = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v115 = (void *)objc_msgSend((id)objc_msgSend(*((id *)v23 + 63), "stream"), "supportedProperties");
  v23[3548] = objc_msgSend(v115, "objectForKeyedSubscript:", *MEMORY[0x1E0D07728]) != 0;
  v23[3624] = 0;
  CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("DefaultAutoFocusTapWindowSize")), (CGSize *)v23 + 235);
  CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("DefaultContinuousAutoFocusWindowSize")), (CGSize *)v23 + 236);
  v23[3848] = 1;
  v23[3856] = 1;
  v23[3672] = 1;
  *((_DWORD *)v23 + 919) = 0;
  *((_OWORD *)v23 + 230) = *MEMORY[0x1E0C9D538];
  v23[1512] = 1;
  *((_DWORD *)v23 + 375) = 0;
  v23[1529] = 1;
  *((_DWORD *)v23 + 387) = 0;
  *((_DWORD *)v23 + 450) = 0;
  *((_OWORD *)v23 + 113) = 0u;
  v23[3153] = objc_msgSend(*((id *)v23 + 63), "hasSphere");
  v23[3154] = 1;
  *((_DWORD *)v23 + 789) = 1065353216;
  *((_DWORD *)v23 + 793) = 0;
  *((_DWORD *)v23 + 777) = 1065353216;
  *(_QWORD *)(v23 + 2132) = 0x100000001;
  v23[2464] = 1;
  *((_DWORD *)v23 + 617) = 3;
  -[BWFigVideoCaptureDevice _updateStreamMetadataSettings]((uint64_t)v23);
  *((_QWORD *)v23 + 60) = objc_alloc_init(BWStats);
  v37 = v119;
  if (*((_DWORD *)v23 + 123) == 10)
    *((_DWORD *)v23 + 965) = objc_msgSend((id)objc_msgSend(*((id *)v23 + 66), "objectForKeyedSubscript:", CFSTR("TimeOfFlightCameraType")), "intValue");
  *((_DWORD *)v23 + 36) = 0;
  v23[156] = objc_msgSend(*((id *)v23 + 63), "isMultipleSensorRawBufferPoolsSupported");
  *((_DWORD *)v23 + 1012) = 0;
  -[BWFigVideoCaptureDevice _configureZoomFudging]((uint64_t)v23);
  *((_DWORD *)v23 + 984) = 2;
  *((_DWORD *)v23 + 78) = -1082130432;
  v23[316] = 0;
  *((_DWORD *)v23 + 70) = -1082130432;
  v23[284] = 0;
  v23[384] = 0;
  *((_DWORD *)v23 + 1030) = 0;
  *((_QWORD *)v23 + 519) = objc_alloc_init(BWDeviceOrientationMonitor);
  v116 = *((_DWORD *)v23 + 123);
  if (v116 == 14)
  {
    objc_msgSend(v23, "setDeskCamActive:", 1);
    v116 = *((_DWORD *)v23 + 123);
  }
  if (v116 == 7 && *((_DWORD *)v23 + 130) == 1)
    objc_msgSend(v23, "setUltraWideActive:", 1);
  *((_DWORD *)v23 + 1044) = 808464432;
  *(_QWORD *)(v23 + 4180) = 0;
  *((_WORD *)v23 + 2094) = 0;
  *((_DWORD *)v23 + 1048) = -1;
  *((_DWORD *)v23 + 1051) = 0;
LABEL_153:

  if (v22)
    *v22 = v148;
  return v23;
}

- (void)_copyStreamsForAttributes:(uint64_t)a3 deviceClientPriority:(int *)a4 errOut:
{
  char v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v36 = 0;
  v8 = FigCaptureExternalCameraReplacesBuiltIn(0);
  v9 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "deviceID"), "isEqualToString:", 0x1E492D2B8);
  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a2, "count"));
  if ((v9 & 1) != 0 || (v8 & 1) != 0)
  {
    v27 = a3;
    v18 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(a2, "count"));
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v19 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    if (v19)
    {
      v20 = v19;
      v21 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v29 != v21)
            objc_enumerationMutation(a2);
          v23 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * i);
          objc_msgSend(v10, "addObject:", objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("DeviceType")));
          objc_msgSend(v18, "addObject:", objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("Position")));
        }
        v20 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
      }
      while (v20);
    }
    v24 = (void *)objc_msgSend(*(id *)(a1 + 16), "copyStreamsFromDevice:positions:deviceTypes:deviceClientPriority:allowsStreamControlLoss:error:", *(_QWORD *)(a1 + 8), v18, v10, v27, 0, &v36);
    v16 = v24;
    if (v36)
    {
      FigDebugAssert3();
    }
    else
    {
      v25 = objc_msgSend(v24, "count");
      if (v25 != objc_msgSend(a2, "count"))
      {
LABEL_27:
        FigDebugAssert3();
        v36 = -12780;
      }
    }
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v33;
      do
      {
        for (j = 0; j != v12; ++j)
        {
          if (*(_QWORD *)v33 != v13)
            objc_enumerationMutation(a2);
          objc_msgSend(v10, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * j), "objectForKeyedSubscript:", CFSTR("UniqueID")));
        }
        v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v32, v38, 16);
      }
      while (v12);
    }
    v15 = (void *)objc_msgSend(*(id *)(a1 + 16), "copyStreamsWithUniqueIDs:forDevice:deviceClientPriority:error:", v10, *(_QWORD *)(a1 + 8), a3, &v36);
    v16 = v15;
    if (v36)
    {
      FigDebugAssert3();
    }
    else
    {
      v17 = objc_msgSend(v15, "count");
      if (v17 != objc_msgSend(a2, "count"))
        goto LABEL_27;
    }
  }
  *a4 = v36;
  return v16;
}

uint64_t __301__BWFigVideoCaptureDevice__initWithCaptureDevice_attributes_synchronizedStreamsAttributes_unsynchronizedStreamsAttributes_multiCamEnabled_applicationID_clientAuditToken_tccIdentity_mediaEnvironment_deviceVendor_createAutofocusSampleBufferProcessorFunction_cameraParameters_deviceClientPriority_error___block_invoke(uint64_t a1, void *a2, void *a3)
{
  float v4;
  float v5;
  float v6;

  objc_msgSend(a2, "baseZoomFactor");
  v5 = v4;
  objc_msgSend(a3, "baseZoomFactor");
  if (v5 >= v6)
    return 1;
  else
    return -1;
}

- (NSString)description
{
  void *v3;
  objc_class *v4;
  NSString *v5;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = (objc_class *)objc_opt_class();
  v5 = NSStringFromClass(v4);
  return (NSString *)objc_msgSend(v3, "stringWithFormat:", CFSTR("<%@: %p> type:%@ portTypes:%@"), v5, self, FigCaptureSourceDeviceTypeToShortString(self->_deviceType, self->_position), -[NSArray componentsJoinedByString:](self->_activePortTypes, "componentsJoinedByString:", CFSTR(",")));
}

- (BWMemoryPool)memoryPool
{
  return (BWMemoryPool *)self->_activeSensorRegionForCameraControls;
}

- (uint64_t)_returnStreamsToVendor
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(*(id *)(result + 560), "count"));
    v8 = 0u;
    v9 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = *(void **)(v1 + 560);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v9;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v9 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "stream"));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      }
      while (v5);
    }
    result = objc_msgSend(v2, "count");
    if (result)
    {
      mach_absolute_time();
      return objc_msgSend(*(id *)(v1 + 16), "takeBackStreams:device:totalStreamingDuration:", v2, *(_QWORD *)(v1 + 8), FigHostTimeToNanoseconds() / 0xF4240uLL);
    }
  }
  return result;
}

- (void)invalidateForParallelGraphRebuild
{
  NSArray *captureStreams;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  -[BWFigVideoCaptureDevice releaseResources](self, "releaseResources");
  -[BWFigVideoCaptureDevice _returnStreamsToVendor]((uint64_t)self);

  self->_deviceVendor = 0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  captureStreams = self->_captureStreams;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "setDelegate:", 0);
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v5);
  }

  self->_synchronizedStreamsStartStopSynchronizer = 0;
  self->_synchronizedStreamsGroup = 0;
  self->_captureStream = 0;
  self->_pearlInfraredCaptureStream = 0;
  self->_parallaxMitigationTargetCaptureStream = 0;
  self->_bravoTelephotoCaptureStream = 0;
  *(_OWORD *)&self->_bravoSuperWideCaptureStream = 0u;
  *(_OWORD *)&self->_currentMasterCaptureStream = 0u;

  self->_captureStreams = 0;
  self->_captureStreamsByFocalLength = 0;

  *(_QWORD *)&self->_overCaptureEnabled = 0;
  self->_device = 0;
}

- (void)dealloc
{
  NSArray *captureStreams;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  OpaqueCMClock *clock;
  id autoImageControlModeCompletionHandler;
  __CVBuffer *backgroundReplacementPixelBuffer;
  objc_super v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  -[BWFigVideoCaptureDevice releaseResources](self, "releaseResources");

  self->_notificationQueue = 0;
  -[BWFigVideoCaptureDevice _returnStreamsToVendor]((uint64_t)self);

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  captureStreams = self->_captureStreams;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "setDelegate:", 0);
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  clock = self->_clock;
  if (clock)
    CFRelease(clock);

  autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  if (autoImageControlModeCompletionHandler)
  {
    FigDebugAssert3();
    autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  }

  if (self->_autofocusProcessor)
    FigDebugAssert3();

  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();

  FigSimpleMutexDestroy();
  backgroundReplacementPixelBuffer = self->_backgroundReplacementPixelBuffer;
  if (backgroundReplacementPixelBuffer)
    CFRelease(backgroundReplacementPixelBuffer);

  v11.receiver = self;
  v11.super_class = (Class)BWFigVideoCaptureDevice;
  -[BWFigVideoCaptureDevice dealloc](&v11, sel_dealloc);
}

- (void)drainNotifications
{
  dispatch_sync((dispatch_queue_t)self->_notificationQueue, &__block_literal_global_130);
}

- (void)releaseResources
{
  uint64_t *v3;
  uint64_t v4;
  BWFigCaptureSynchronizedStreamsGroup *v5;
  uint64_t *v6;

  if (self->_sensorRawPools)
  {
    if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
    {
      if (self->_multipleSensorRawBufferPoolsEnabled)
        v3 = (uint64_t *)MEMORY[0x1E0D08200];
      else
        v3 = (uint64_t *)MEMORY[0x1E0D081F0];
      v4 = *v3;
      v5 = -[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](self->_synchronizedStreamsGroup, "syncGroup");
    }
    else
    {
      if (self->_multipleSensorRawBufferPoolsEnabled)
        v6 = (uint64_t *)MEMORY[0x1E0D07760];
      else
        v6 = (uint64_t *)MEMORY[0x1E0D07750];
      v4 = *v6;
      v5 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    }
    -[BWFigCaptureSynchronizedStreamsGroup setProperty:value:](v5, "setProperty:value:", v4, 0);

    self->_sensorRawPools = 0;
  }
}

- (float)minimumFrameRate
{
  float result;

  -[BWFigVideoCaptureStream minimumFrameRate](self->_captureStream, "minimumFrameRate");
  return result;
}

- (void)setMinimumFrameRate:(float)a3
{
  NSObject *focusAndExposureUpdateQueue;
  _QWORD v6[5];
  float v7;

  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __47__BWFigVideoCaptureDevice_setMinimumFrameRate___block_invoke;
  v6[3] = &unk_1E4920568;
  v6[4] = self;
  v7 = a3;
  dispatch_async(focusAndExposureUpdateQueue, v6);
  -[BWFigVideoCaptureDevice _setMinimumFrameRate:]((uint64_t)self, a3);
}

float __47__BWFigVideoCaptureDevice_setMinimumFrameRate___block_invoke(uint64_t a1)
{
  float result;

  result = *(float *)(a1 + 40);
  *(float *)(*(_QWORD *)(a1 + 32) + 2092) = result;
  return result;
}

- (uint64_t)_setMinimumFrameRate:(uint64_t)result
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  const __CFAllocator *v11;
  const __CFDictionary *v12;
  CMTime v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CMTime v18;
  const __CFString *v19;
  const __CFDictionary *v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    memset(&v18, 0, sizeof(v18));
    v4 = *(void **)(result + 504);
    if (v4)
      objc_msgSend(v4, "maxExposureDuration");
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = *(void **)(v3 + 560);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
    if (v6)
    {
      v8 = v6;
      v9 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(v5);
          *(float *)&v7 = a2;
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "setMinimumFrameRate:", v7);
        }
        v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
      }
      while (v8);
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(v3 + 528), "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))
    {
      if ((v18.flags & 1) == 0)
      {
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v13 = v18;
        v12 = CMTimeCopyAsDictionary(&v13, v11);
        v19 = CFSTR("NewPropertyValue");
        v20 = v12;
        objc_msgSend((id)v3, "_postNotificationWithPayload:notificationPayload:", CFSTR("MaxExposureDurationChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v20, &v19, 1));
      }
    }
    return -[BWFigVideoCaptureDevice _updateFrameSkippingRatio](v3);
  }
  return result;
}

- (uint64_t)_updateFrameSkippingRatio
{
  uint64_t v1;
  int v2;
  int v3;
  float v4;
  uint64_t v7;
  float v8;
  void *v9;

  if (result)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 4268);
    v3 = *(unsigned __int8 *)(result + 4264);
    objc_msgSend(*(id *)(result + 504), "minimumFrameRate");
    if (v2 >= 1 && v3 != 0 && *(_DWORD *)(v1 + 4268) <= (int)v4)
    {
      objc_msgSend(*(id *)(v1 + 504), "minimumFrameRate");
      v7 = (((int)v8 + *(_DWORD *)(v1 + 4268) - 1) / *(_DWORD *)(v1 + 4268));
    }
    else
    {
      v7 = 1;
    }
    result = BWDeviceModelIsD9x();
    if ((_DWORD)result)
    {
      result = objc_msgSend(*(id *)(v1 + 560), "count");
      if (result == 1)
      {
        v9 = (void *)objc_msgSend(*(id *)(v1 + 504), "stream");
        return objc_msgSend(v9, "setPropertyIfSupported:value:", *MEMORY[0x1E0D07528], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v7));
      }
    }
  }
  return result;
}

- (float)maximumFrameRate
{
  float result;

  -[BWFigVideoCaptureStream maximumFrameRate](self->_captureStream, "maximumFrameRate");
  return result;
}

- (void)setMaximumFrameRate:(float)a3
{
  NSArray *captureStreams;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  float v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v13 != v9)
          objc_enumerationMutation(captureStreams);
        *(float *)&v7 = a3;
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "setMaximumFrameRate:", v7);
      }
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v8);
  }
  -[NSMutableArray requestedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "requestedZoomFactor");
  -[BWFigVideoCaptureDevice _updateSlaveFrameRateForZoomFactor:]((os_unfair_lock_s *)self, v11);
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (BOOL)cinematicFramingEnabled
{
  return self->_cinematicFramingEnabled;
}

- (BOOL)backgroundBlurEnabled
{
  return self->_backgroundBlurEnabled;
}

- (BOOL)studioLightingEnabled
{
  return self->_studioLightingEnabled;
}

- (BOOL)reactionEffectsEnabled
{
  return self->_reactionEffectsEnabled;
}

- (void)setBackgroundReplacementEnabled:(BOOL)a3
{
  _BOOL8 v3;
  uint64_t v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v3 = a3;
  v16 = *MEMORY[0x1E0C80C00];
  if (self->_backgroundReplacementEnabled != a3)
  {
    self->_backgroundReplacementEnabled = a3;
    v5 = mach_absolute_time();
    if (v3)
      self->_backgroundReplacementStartTime = v5;
    else
      self->_backgroundReplacementTotalTime += v5 - self->_backgroundReplacementStartTime;
  }
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v12;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v12 != v9)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v10++), "setBackgroundReplacementEnabled:", v3);
      }
      while (v8 != v10);
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v8);
  }
}

- (BOOL)backgroundReplacementEnabled
{
  return self->_backgroundReplacementEnabled;
}

uint64_t __54__BWFigVideoCaptureDevice_moduleCalibrationByPortType__block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = (void *)objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  v2 = objc_msgSend(v1, "copyPropertyIfSupported:error:", *MEMORY[0x1E0D07778], 0);
  if (dword_1ECFE9470)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v2;
}

- (void)unregisterForAEMatrixMetadata
{
  NSArray *captureStreams;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  captureStreams = self->_captureStreams;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    v6 = *MEMORY[0x1E0D07300];
    v7 = MEMORY[0x1E0C9AAA0];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(captureStreams);
        objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "stream"), "setPropertyIfSupported:value:", v6, v7);
      }
      v4 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }
}

- (NSDictionary)faceDetectionConfiguration
{
  return -[BWFigVideoCaptureStream faceDetectionConfiguration](self->_captureStream, "faceDetectionConfiguration");
}

- (int)temporalNoiseReductionBand0StrengthModulation
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.epoch;
}

- (void)setTemporalNoiseReductionBand0StrengthModulation:(int)a3
{
  uint64_t v3;
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t timescale_high;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v3 = *(_QWORD *)&a3;
  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v19;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(captureStreams);
        v10 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v9);
        if (self->_depthType == 3 && v10 == -[NSArray firstObject](self->_captureStreamsByFocalLength, "firstObject"))
        {
          v13 = BYTE1(self->_cinematicVideoAverageRenderingTime);
          timescale_high = HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          v15 = v10;
          v11 = 0;
          v12 = 0;
          v16 = 0;
        }
        else
        {
          v11 = BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) == 0;
          v12 = BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          v13 = BYTE1(self->_cinematicVideoAverageRenderingTime);
          timescale_high = HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
          v15 = v10;
          v16 = v3;
        }
        objc_msgSend(v15, "setTemporalNoiseReductionConfigurationBand0Enabled:rawEnabled:modulation:adaptiveOverscanEnabled:strengthHighEnabled:", v11, v12, v16, v13, timescale_high);
        ++v9;
      }
      while (v7 != v9);
      v17 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      v7 = v17;
    }
    while (v17);
  }
  LODWORD(self->_ptsOfLastTimeOfFlightFrameRateChange.epoch) = v3;
}

- (void)updateClientAuditToken:(id *)a3
{
  os_unfair_lock_s *p_clientAuditTokenLock;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSArray *captureStreams;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  p_clientAuditTokenLock = &self->_clientAuditTokenLock;
  os_unfair_lock_lock(&self->_clientAuditTokenLock);
  v6 = *(_OWORD *)&a3->var0[4];
  *(_OWORD *)self->_clientAuditToken.val = *(_OWORD *)a3->var0;
  *(_OWORD *)&self->_clientAuditToken.val[4] = v6;
  v7 = *(_OWORD *)&a3->var0[4];
  v20 = *(_OWORD *)a3->var0;
  v21 = v7;
  self->_clientPID = FigCaptureGetPIDFromAuditToken(&v20);
  v8 = *(_OWORD *)&a3->var0[4];
  v20 = *(_OWORD *)a3->var0;
  v21 = v8;
  self->_isRunningInXCTest = FigCaptureClientIsRunningInXCTest(&v20) != 0;
  os_unfair_lock_unlock(p_clientAuditTokenLock);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  captureStreams = self->_captureStreams;
  v10 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v17;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v17 != v12)
          objc_enumerationMutation(captureStreams);
        v14 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v13);
        v15 = *(_OWORD *)&a3->var0[4];
        v20 = *(_OWORD *)a3->var0;
        v21 = v15;
        objc_msgSend(v14, "updateClientAuditToken:", &v20);
        ++v13;
      }
      while (v11 != v13);
      v11 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v11);
  }
}

- (void)_postNotificationWithName:(uint64_t)a3 payloadNewPropertyValue:
{
  void *v5;
  uint64_t v6;

  v6 = a3;
  if (a1)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjects:forKeys:count:", &v6, &BWFigVideoCaptureDeviceNotificationNewPropertyValueKey, 1);
    objc_msgSend(a1, "_postNotificationWithPayload:notificationPayload:", a2, v5);

  }
}

- (uint64_t)_shouldDeferAutofocusProcessorProperty:(void *)a3 value:
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  if (result)
  {
    v6 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      v12 = v3;
      LODWORD(v11) = 0;
      FigDebugAssert3();
    }
    if ((objc_msgSend(a2, "isEqualToString:", 0x1E4941A38, v11, v12) & 1) != 0)
    {
      v7 = 1655;
LABEL_6:
      result = 1;
      *(_BYTE *)(v6 + v7) = 1;
      return result;
    }
    result = objc_msgSend(a2, "isEqualToString:", 0x1E4941ED8);
    if ((_DWORD)result)
    {
      objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06670]), "floatValue");
      if (v8 == 0.0)
      {
        objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06668]), "floatValue");
        if (v9 == 0.0)
        {
          objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06660]), "floatValue");
          if (v10 == 0.0)
          {
            v7 = 1656;
            goto LABEL_6;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

- (double)previewShiftInSensorSpace
{
  os_unfair_lock_s *v2;
  double v3;

  if (!a1)
    return 0.0;
  v2 = (os_unfair_lock_s *)(a1 + 3676);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3676));
  v3 = *(double *)(a1 + 3680);
  os_unfair_lock_unlock(v2);
  return v3;
}

- (void)_teardownAutoFocusSampleBufferProcessor
{
  uint64_t FigBaseObject;
  uint64_t v4;
  void (*v5)(uint64_t);
  OpaqueFigSampleBufferProcessor *autofocusProcessor;

  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (self->_autofocusProcessor)
  {
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    if (FigBaseObject)
    {
      v4 = FigBaseObject;
      v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v5(v4);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    autofocusProcessor = self->_autofocusProcessor;
    if (autofocusProcessor)
    {
      CFRelease(autofocusProcessor);
      self->_autofocusProcessor = 0;
    }
  }
}

- (uint64_t)_updateDeferredAutofocusProcessorPropertyStatesForProperty:(uint64_t)result
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    result = _FigIsCurrentDispatchQueue();
    if (!(_DWORD)result)
      result = FigDebugAssert3();
    if (*(_BYTE *)(v3 + 1655))
    {
      result = objc_msgSend(a2, "isEqualToString:", 0x1E49419F8);
      if ((result & 1) != 0
        || (result = objc_msgSend(a2, "isEqualToString:", 0x1E4941E18), (result & 1) != 0)
        || (result = objc_msgSend(a2, "isEqualToString:", 0x1E4941A58), (result & 1) != 0)
        || (result = objc_msgSend(a2, "isEqualToString:", 0x1E4941A38), (_DWORD)result))
      {
        *(_BYTE *)(v3 + 1655) = 0;
      }
    }
    if (*(_BYTE *)(v3 + 1656))
    {
      result = objc_msgSend(a2, "isEqualToString:", 0x1E4941EF8);
      if ((result & 1) != 0 || (result = objc_msgSend(a2, "isEqualToString:", 0x1E4941ED8), (_DWORD)result))
        *(_BYTE *)(v3 + 1656) = 0;
    }
  }
  return result;
}

- (void)_serviceDeferredAutofocusProcessorPropertiesFromCaptureStream:(void *)a3 frameStatisticsByPortType:
{
  void *v6;
  unsigned int v7;
  unsigned int v8;
  float v9;
  NSObject *v10;
  _QWORD block[5];

  if (a1)
  {
    if (*(_BYTE *)(a1 + 1654))
    {
      if ((unint64_t)objc_msgSend(a3, "frameCount") >= 3)
      {
        v6 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "portType"));
        if (objc_msgSend(v6, "aeTarget"))
        {
          if (objc_msgSend(v6, "aeAverage"))
          {
            v7 = objc_msgSend(v6, "aeTarget");
            v8 = objc_msgSend(v6, "aeAverage");
            if ((unint64_t)objc_msgSend(a3, "frameCount") > 0xB
              || (v9 = (float)v7 / (float)v8, v9 > 0.8) && v9 < 1.2)
            {
              v10 = *(NSObject **)(a1 + 1584);
              block[0] = MEMORY[0x1E0C809B0];
              block[1] = 3221225472;
              block[2] = __115__BWFigVideoCaptureDevice__serviceDeferredAutofocusProcessorPropertiesFromCaptureStream_frameStatisticsByPortType___block_invoke;
              block[3] = &unk_1E491E720;
              block[4] = a1;
              dispatch_async(v10, block);
              *(_BYTE *)(a1 + 1654) = 0;
            }
          }
        }
      }
    }
  }
}

uint64_t __115__BWFigVideoCaptureDevice__serviceDeferredAutofocusProcessorPropertiesFromCaptureStream_frameStatisticsByPortType___block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, __CFString *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __CFString *, uint64_t);
  _QWORD v9[3];
  _QWORD v10[4];

  v1 = result;
  v10[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v2 + 1655))
  {
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    v4 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v4 || (result = v4(FigBaseObject, CFSTR("ExposureLock"), *MEMORY[0x1E0C9B0D0]), (_DWORD)result))
      result = FigDebugAssert3();
    *(_BYTE *)(*(_QWORD *)(v1 + 32) + 1655) = 0;
    v2 = *(_QWORD *)(v1 + 32);
  }
  if (*(_BYTE *)(v2 + 1656))
  {
    v5 = *MEMORY[0x1E0D06668];
    v9[0] = *MEMORY[0x1E0D06670];
    v9[1] = v5;
    v10[0] = &unk_1E49FB778;
    v10[1] = &unk_1E49FB778;
    v9[2] = *MEMORY[0x1E0D06660];
    v10[2] = &unk_1E49FB778;
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 3);
    v7 = FigSampleBufferProcessorGetFigBaseObject();
    v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v8 || (result = v8(v7, CFSTR("WhiteBalanceGains"), v6), (_DWORD)result))
      result = FigDebugAssert3();
    *(_BYTE *)(*(_QWORD *)(v1 + 32) + 1656) = 0;
  }
  return result;
}

- (void)shutDownSystemPressuredDevice
{
  -[BWFigCaptureDeviceVendor shutDownSystemPressuredDevice:](self->_deviceVendor, "shutDownSystemPressuredDevice:", self->_device);
}

- (void)captureStreamFailedToStartStreaming:(id)a3
{
  -[BWStreamStartStopSynchronizer streamDidStart:](self->_synchronizedStreamsStartStopSynchronizer, "streamDidStart:", a3);
}

- (void)captureStreamWillStopStreaming:(id)a3
{
  char *v5;
  CMTimeFlags flags;
  int64_t *p_epoch;
  CMTimeEpoch v8;
  float v9;
  float v10;
  _BOOL4 v11;
  double v12;
  _QWORD *autoImageControlModeCompletionHandler;
  id v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  void (*v18)(_QWORD *, _QWORD, CMTime *);
  CMTime v19;
  CMTime rhs;
  CMTime v21;
  CMTime lhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = (char *)&self->_streamingSessionAnalyticsVideoDimensions + 2;
  if (BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width)
    && -[BWFigVideoCaptureStream hasSphere](self->_captureStream, "hasSphere"))
  {
    os_unfair_lock_lock(&self->_bravoMasterLock);
    value = self->_mostRecentPTS.value;
    timescale = self->_mostRecentPTS.timescale;
    flags = self->_mostRecentPTS.flags;
    if ((flags & 1) != 0)
    {
      p_epoch = &self->_mostRecentPTS.epoch;
    }
    else
    {
      value = *MEMORY[0x1E0CA2E30];
      flags = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 12);
      timescale = *(_DWORD *)(MEMORY[0x1E0CA2E30] + 8);
      p_epoch = (int64_t *)(MEMORY[0x1E0CA2E30] + 16);
    }
    v8 = *p_epoch;
    os_unfair_lock_unlock(&self->_bravoMasterLock);
    os_unfair_lock_lock((os_unfair_lock_t)&self->_streamingSessionAnalyticsHighlightRecoveryEnabled);
    memset(&v21, 0, sizeof(v21));
    lhs.value = value;
    lhs.timescale = timescale;
    lhs.flags = flags;
    lhs.epoch = v8;
    rhs = *(CMTime *)&self->_colorSpace;
    CMTimeSubtract(&v21, &lhs, &rhs);
    memset(&lhs, 0, sizeof(lhs));
    rhs.value = value;
    rhs.timescale = timescale;
    rhs.flags = flags;
    rhs.epoch = v8;
    v19 = *(CMTime *)&self->_lastPTSWithLargeSphereTravel.timescale;
    CMTimeSubtract(&lhs, &rhs, &v19);
    if (objc_msgSend(*(id *)&self->_lastPTSOfActiveToStillPreviewActiveTransition.timescale, "isEqual:", *MEMORY[0x1E0D07A30]))
    {
      CMTimeMake(&rhs, -1, 30);
      lhs = rhs;
    }
    if ((lhs.flags & 1) != 0 && (rhs = lhs, CMTimeGetSeconds(&rhs) <= 0.5))
    {
      rhs = v21;
      v11 = CMTimeGetSeconds(&rhs) < 0.200000003;
      v12 = dbl_1A32B20F0[v11];
      rhs = lhs;
      v9 = v12 - CMTimeGetSeconds(&rhs);
    }
    else
    {
      if ((float)(0.033 - *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height) >= 0.0)
        v9 = 0.033 - *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height;
      else
        v9 = 0.0;
      rhs = v21;
      if (CMTimeGetSeconds(&rhs) >= 0.100000001)
      {
        LOBYTE(v11) = 0;
      }
      else
      {
        rhs = v21;
        v10 = 0.100000001 - CMTimeGetSeconds(&rhs);
        if (v9 < v10)
          v9 = v10;
        LOBYTE(v11) = 1;
      }
    }
    os_unfair_lock_lock(&self->_currentMasterCaptureStreamLock);
    if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled
      && self->_currentMasterCaptureStream == self->_captureStream)
    {
      v9 = v9 + -0.0333333333;
    }
    os_unfair_lock_unlock(&self->_currentMasterCaptureStreamLock);
    if (v9 < 0.0)
      v9 = 0.0;
    v5[1] = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)&self->_streamingSessionAnalyticsHighlightRecoveryEnabled);
    if (v9 > 0.0)
      usleep((float)(v9 * 1000000.0));
  }
  -[BWStreamStartStopSynchronizer streamWillStop:](self->_synchronizedStreamsStartStopSynchronizer, "streamWillStop:", a3);
  os_unfair_lock_lock(&self->_autoImageControlModeCompletionLock);
  autoImageControlModeCompletionHandler = self->_autoImageControlModeCompletionHandler;
  self->_autoImageControlModeCompletionHandler = 0;
  v14 = -[BWImageControlModeTransitionMonitor description](self->_autoImageControlModeTransitionMonitor, "description");

  self->_autoImageControlModeTransitionMonitor = 0;
  os_unfair_lock_unlock(&self->_autoImageControlModeCompletionLock);
  if (autoImageControlModeCompletionHandler)
  {
    if (dword_1ECFE9470)
    {
      LODWORD(rhs.value) = 0;
      LOBYTE(v19.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v19.value))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
        LODWORD(lhs.value) = 136315394;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice captureStreamWillStopStreaming:]";
        LOWORD(lhs.flags) = 2112;
        *(_QWORD *)((char *)&lhs.flags + 2) = v14;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v18 = (void (*)(_QWORD *, _QWORD, CMTime *))autoImageControlModeCompletionHandler[2];
    v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v18(autoImageControlModeCompletionHandler, 0, &v21);

  }
}

- (void)captureStreamDidStopStreaming:(id)a3
{
  if (self->_captureStream == a3)
    -[BWFigVideoCaptureDevice _deviceDidStopStreaming]((uint64_t)self);
  -[BWStreamStartStopSynchronizer streamDidStop:](self->_synchronizedStreamsStartStopSynchronizer, "streamDidStop:", a3);
}

- (uint64_t)_deviceDidStopStreaming
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  double v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[6];
  _QWORD block[5];
  _BYTE v44[128];
  _BYTE v45[128];
  _BYTE v46[128];
  const __CFString *v47;
  void *v48;
  _QWORD v49[2];
  _QWORD v50[4];

  v50[2] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 4089))
    {
      *(_WORD *)(result + 4198) = 0;
      *(_DWORD *)(result + 4200) = 0;
      v2 = MEMORY[0x1E0CA2E18];
      v27 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(result + 4232) = *MEMORY[0x1E0CA2E18];
      v3 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(result + 4248) = v3;
      if (*(_QWORD *)(result + 1520))
      {
        v49[0] = CFSTR("EffectStatus");
        v49[1] = CFSTR("StagePreviewStatus");
        v50[0] = &unk_1E49FB7C0;
        v50[1] = &unk_1E49FB7C0;
        objc_msgSend((id)result, "_postNotificationWithPayload:notificationPayload:", CFSTR("ShallowDepthOfFieldStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50, v49, 2));
      }
      if (*(_QWORD *)(v1 + 1536))
      {
        v47 = CFSTR("NewPropertyValue");
        v48 = &unk_1E49FB7D8;
        objc_msgSend((id)v1, "_postNotificationWithPayload:notificationPayload:", CFSTR("StereoVideoCaptureStatusChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1));
      }
      v4 = MEMORY[0x1E0C809B0];
      v5 = *(NSObject **)(v1 + 1584);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke;
      block[3] = &unk_1E491E720;
      block[4] = v1;
      dispatch_sync(v5, block);
      v6 = objc_msgSend(*(id *)(v1 + 1296), "portType");
      if (!v6)
        v6 = objc_msgSend(*(id *)(v1 + 504), "portType");
      v7 = *(NSObject **)(v1 + 1560);
      v42[0] = v4;
      v42[1] = 3221225472;
      v42[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_2;
      v42[3] = &unk_1E491E748;
      v42[4] = v1;
      v42[5] = v6;
      dispatch_sync(v7, v42);
      dispatch_sync(*(dispatch_queue_t *)(v1 + 1568), &__block_literal_global_230_0);
      dispatch_sync(*(dispatch_queue_t *)(v1 + 2752), &__block_literal_global_232);
      if (*(_BYTE *)(v1 + 3916))
      {
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v8 = *(void **)(v1 + 560);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v39;
          v12 = *MEMORY[0x1E0D077F8];
          v13 = MEMORY[0x1E0C9AAA0];
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v39 != v11)
                objc_enumerationMutation(v8);
              objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * i), "stream", v27), "setPropertyIfSupported:value:", v12, v13);
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
          }
          while (v10);
        }
      }
      objc_msgSend(*(id *)(v1 + 2744), "setFudgedZoomRanges:", 0, v27);
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1500));

      *(_QWORD *)(v1 + 1520) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1500));
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1548));

      *(_QWORD *)(v1 + 1536) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1548));
      if (*(_BYTE *)(v1 + 2440))
      {
        objc_msgSend(*(id *)(v1 + 2016), "reset");
        *(_BYTE *)(v1 + 2024) = 0;
        *(_OWORD *)(v1 + 2040) = 0u;
        HIDWORD(v15) = DWORD1(v28);
        *(_OWORD *)(v1 + 2576) = v28;
        *(_QWORD *)(v1 + 2592) = v3;
        *(_BYTE *)(v1 + 3208) = 0;
        if (*(_QWORD *)(v1 + 2552))
        {
          v16 = *(NSObject **)(v1 + 2480);
          v37[0] = v4;
          v37[1] = 3221225472;
          v37[2] = __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_3;
          v37[3] = &unk_1E491E720;
          v37[4] = v1;
          dispatch_sync(v16, v37);
          objc_msgSend((id)v1, "_resetStillImageCaptureRequestState");

          *(_QWORD *)(v1 + 2552) = 0;
        }
      }
      LODWORD(v15) = 0;
      objc_msgSend((id)v1, "setTorchLevel:", v15);

      *(_QWORD *)(v1 + 3072) = 0;
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1956));
      objc_msgSend(*(id *)(v1 + 1960), "reset");
      *(_DWORD *)(v1 + 2196) = -1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 1956));
      -[BWFigVideoCaptureDevice _reportAPSOffsetEstimatorInfo](v1);
      if (!*(_BYTE *)(v1 + 240)
        || (-[BWFigVideoCaptureDevice _reportDeskViewStreamingSessionCoreAnalyticsData](v1), *(_BYTE *)(v1 + 256)))
      {
        -[BWFigVideoCaptureDevice _reportStreamingSessionCoreAnalyticsData](v1);
      }
      if (objc_msgSend(*(id *)(v1 + 3272), "count"))
      {
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v17 = *(void **)(v1 + 3272);
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v34;
          do
          {
            for (j = 0; j != v19; ++j)
            {
              if (*(_QWORD *)v34 != v20)
                objc_enumerationMutation(v17);
              -[BWAggdDataReporter reportCriticalFocusErrorOccurredForPortType:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportCriticalFocusErrorOccurredForPortType:", *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * j));
            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v33, v45, 16);
          }
          while (v19);
        }
      }

      *(_QWORD *)(v1 + 3264) = 0;
      *(_QWORD *)(v1 + 3272) = 0;

      *(_QWORD *)(v1 + 3280) = 0;
      *(_QWORD *)(v1 + 3288) = 0;

      *(_QWORD *)(v1 + 3296) = 0;
      *(_QWORD *)(v1 + 3304) = 0;
      if (objc_msgSend(*(id *)(v1 + 3312), "count"))
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v22 = *(void **)(v1 + 3312);
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v44, 16);
        if (v23)
        {
          v24 = v23;
          v25 = *(_QWORD *)v30;
          do
          {
            for (k = 0; k != v24; ++k)
            {
              if (*(_QWORD *)v30 != v25)
                objc_enumerationMutation(v22);
              -[BWAggdDataReporter reportSphereJitterDetectionsForPortType:detectionAttemps:successfulDetections:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportSphereJitterDetectionsForPortType:detectionAttemps:successfulDetections:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * k), objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3312), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * k)), "intValue"), objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3320), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * k)), "intValue"));
            }
            v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v29, v44, 16);
          }
          while (v24);
        }
      }

      *(_QWORD *)(v1 + 3312) = 0;
      *(_QWORD *)(v1 + 3320) = 0;

      *(_QWORD *)(v1 + 3416) = 0;
      *(_QWORD *)(v1 + 3448) = 0;

      *(_QWORD *)(v1 + 3456) = 0;
      *(_QWORD *)(v1 + 3504) = 0;
      objc_msgSend(*(id *)(v1 + 3632), "disableForCaptureDevice:", *(_QWORD *)(v1 + 8));

      *(_QWORD *)(v1 + 3704) = 0;
      *(_QWORD *)(v1 + 3720) = 0;
      objc_msgSend(*(id *)(v1 + 600), "setWaitForMasterAEToSettle:", 0);
      *(_DWORD *)(v1 + 312) = -1082130432;
      *(_BYTE *)(v1 + 316) = 0;
      *(_DWORD *)(v1 + 280) = -1082130432;
      *(_BYTE *)(v1 + 284) = 0;
      *(_BYTE *)(v1 + 384) = 0;
      result = objc_msgSend(*(id *)(v1 + 4152), "stop");
      *(_QWORD *)(v1 + 4128) = 0;
      *(_WORD *)(v1 + 4089) = 0;
    }
  }
  return result;
}

- (float)_updateTimeOfFlightStreamingTime:(float)result
{
  float Seconds;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CMTime v9;
  CMTime lhs;
  CMTime time;

  if (a1)
  {
    lhs = *a2;
    v9 = *(CMTime *)(a1 + 3888);
    CMTimeSubtract(&time, &lhs, &v9);
    Seconds = CMTimeGetSeconds(&time);
    v5 = *(_DWORD *)(a1 + 3884);
    v6 = 3876;
    v7 = 3880;
    if (v5 == 1)
      v7 = 3872;
    if (v5 != 8)
      v6 = v7;
    if (v5)
      v8 = v6;
    else
      v8 = 3868;
    result = *(float *)(a1 + v8) + Seconds;
    *(float *)(a1 + v8) = result;
  }
  return result;
}

- (os_unfair_lock_s)_ubZeroShutterLagCancelWaitingForTimeMachines
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = a1;
  if (a1)
  {
    v2 = a1 + 626;
    os_unfair_lock_lock(a1 + 626);
    v3 = *(_QWORD *)&v1[510]._os_unfair_lock_opaque;
    if (v3 < 1)
      v1 = 0;
    else
      v1 = (os_unfair_lock_s *)(v3 == *(_QWORD *)&v1[512]._os_unfair_lock_opaque);
    os_unfair_lock_unlock(v2);
  }
  return v1;
}

- (void)_servicePendingStillImageCapture
{
  os_unfair_lock_s *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 1288);
    os_unfair_lock_assert_not_owner((const os_unfair_lock *)(a1 + 1288));
    os_unfair_lock_lock(v2);
    if (objc_msgSend(*(id *)(a1 + 2552), "currentState") == 4)
    {
      os_unfair_lock_assert_owner(v2);
      if (!*(_BYTE *)(a1 + 1292) && !*(_BYTE *)(a1 + 1293) && !*(_BYTE *)(a1 + 1294))
      {
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        objc_msgSend(*(id *)(a1 + 2552), "transitionToState:", 8, v4, v5);
      }
    }
    os_unfair_lock_unlock(v2);
  }
}

- (void)_serviceVariableFrameRateWithSampleBuffer:(void *)a3 fromCaptureStream:(void *)a4 frameStatisticsByPortType:
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  _BOOL8 v11;
  id v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  double v17;
  double v18;
  float v19;
  float v20;
  float v21;
  NSObject *v22;
  _QWORD block[5];

  if (a1)
  {
    v7 = objc_msgSend(a4, "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    objc_msgSend(a3, "maximumFrameRate");
    v9 = v8;
    v10 = objc_msgSend(*(id *)(a1 + 2744), "timeForLastRequestedZoomFactor");
    v11 = (float)((float)((float)(1.0 / v9) * 1000.0) * 3.0) > (float)(uint64_t)(FigGetUpTimeNanoseconds() / 0xF4240uLL
                                                                              - v10);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
    v12 = *(id *)(a1 + 3184);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
    v13 = *(void **)(a1 + 3704);
    objc_msgSend(a3, "maximumFrameRate");
    v15 = v14;
    objc_msgSend(a3, "aeMaxGain");
    LODWORD(v17) = v16;
    LODWORD(v18) = v15;
    objc_msgSend(v13, "processSampleBuffer:frameStatistics:currentFrameRate:aeMaxGain:zoomInProgress:mostRecentInferenceResult:", a2, v7, v11, v12, v18, v17);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3728));
    objc_msgSend(*(id *)(a1 + 3704), "suggestedFrameRate");
    *(float *)(a1 + 3712) = v19;
    if (v19 == 0.0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3728));
    }
    else
    {
      v20 = v19;
      v21 = *(float *)(a1 + 3716);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 3728));
      if (v20 != v21)
      {
        v22 = *(NSObject **)(a1 + 3736);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __113__BWFigVideoCaptureDevice__serviceVariableFrameRateWithSampleBuffer_fromCaptureStream_frameStatisticsByPortType___block_invoke;
        block[3] = &unk_1E491E720;
        block[4] = a1;
        dispatch_async(v22, block);
      }
    }
  }
}

uint64_t __80__BWFigVideoCaptureDevice__updateStateUsingVideoSampleBuffer_fromCaptureStream___block_invoke_2(uint64_t a1)
{
  return -[BWFigVideoCaptureDevice _updateActionCameraMaxExposureDurationForFlickerFrequency:](*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40));
}

- (uint64_t)_updateActionCameraMaxExposureDurationForFlickerFrequency:(uint64_t)result
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  CMTimeValue value;
  CMTimeScale timescale;
  Float64 Seconds;
  float v11;
  float v12;
  float v13;
  void *v14;
  uint64_t v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;
  uint64_t v23;
  id obj;
  uint64_t v25;
  uint64_t v26;
  CMTimeValue v28;
  CMTimeScale v29;
  uint64_t v30;
  int v31;
  CMTime v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CMTime time;
  _BYTE v38[128];
  uint64_t v39;
  int epoch_high;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      v23 = v2;
      LODWORD(v22) = 0;
      FigDebugAssert3();
    }
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    obj = *(id *)(v3 + 560);
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16, v22, v23);
    if (result)
    {
      v4 = result;
      v26 = *(_QWORD *)v34;
      v25 = *MEMORY[0x1E0D07308];
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v34 != v26)
            objc_enumerationMutation(obj);
          v6 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v5);
          v7 = objc_msgSend(v6, "portType");
          if (a2)
          {
            CMTimeMake(&time, 1, 2 * a2);
            value = time.value;
            timescale = time.timescale;
            v39 = *(_QWORD *)&time.flags;
            epoch_high = HIDWORD(time.epoch);
            Seconds = CMTimeGetSeconds(&time);
            CMTimeMakeFromDictionary(&v32, (CFDictionaryRef)objc_msgSend(*(id *)(v3 + 2112), "objectForKeyedSubscript:", v7));
            *(float *)&Seconds = Seconds / CMTimeGetSeconds(&v32);
            objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2104), "objectForKeyedSubscript:", v7), "floatValue");
            v12 = v11 / *(float *)&Seconds;
          }
          else
          {
            CMTimeMakeFromDictionary(&time, (CFDictionaryRef)objc_msgSend(*(id *)(v3 + 2112), "objectForKeyedSubscript:", v7));
            value = time.value;
            timescale = time.timescale;
            v39 = *(_QWORD *)&time.flags;
            epoch_high = HIDWORD(time.epoch);
            objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2104), "objectForKeyedSubscript:", v7), "floatValue");
            v12 = v13;
          }
          v30 = v39;
          v31 = epoch_high;
          v28 = value;
          v29 = timescale;
          objc_msgSend(v6, "setMaxExposureDurationFrameworkOverride:", &v28);
          objc_msgSend(v6, "updateMaxExposureDuration");
          v14 = (void *)objc_msgSend(v6, "stream");
          LODWORD(v15) = vcvts_n_s32_f32(v12, 8uLL);
          if (!objc_msgSend(v14, "setProperty:value:", v25, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v15)))
          {
            *(float *)&v16 = v12;
            objc_msgSend(v6, "setAeMaxGain:", v16);
          }
          if (v6 == *(void **)(v3 + 576))
          {
            objc_msgSend(v6, "maxEIT");
            v18 = v17;
            *(float *)&v19 = v12;
            objc_msgSend(*(id *)(v3 + 1320), "setTeleMaxAEGain:", v19);
            LODWORD(v20) = v18;
            objc_msgSend(*(id *)(v3 + 1320), "setTeleMaxEIT:", v20);
          }
          ++v5;
        }
        while (v4 != v5);
        result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v38, 16);
        v4 = result;
      }
      while (result);
    }
    if (a2)
    {
      if (!dword_1ECFE9470)
        return result;
    }
    else if (!dword_1ECFE9470)
    {
      return result;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

- (float)_collectAPSStatistics:(float *)result
{
  float *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  void *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  float *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  float v63;
  float v64;
  int v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  int v72;
  float v73;
  float v74;
  int v75;
  void *v76;
  uint64_t v77;
  void *v78;
  float v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  int v85;
  float v86;
  float v87;
  int v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  int v98;
  float *v99;
  float v100;
  float v101;
  uint64_t v102;
  float v103;
  float v104;
  float v105;
  int v106;
  float v107;
  float v108;
  int v109;
  float v110;
  float v111;
  uint64_t v112;
  float v113;
  float v114;
  float v115;
  int v116;
  float v117;
  float v118;
  int v119;

  if (result)
  {
    v2 = result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      v5 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
      v6 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]);
      v7 = *MEMORY[0x1E0D05A18];
      v8 = v4;
      if ((objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) == 0)
        v8 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", v7);
      v9 = *MEMORY[0x1E0D05A30];
      v10 = objc_msgSend(v5, "isEqualToString:", *MEMORY[0x1E0D05A30]);
      v11 = v4;
      if ((v10 & 1) == 0)
        v11 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", v9);
      v12 = (uint64_t *)MEMORY[0x1E0D068A8];
      v13 = (uint64_t *)MEMORY[0x1E0D06E50];
      if (*((_BYTE *)v2 + 1877))
      {
        v14 = *MEMORY[0x1E0D068A8];
        v15 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D068A8]);
        v16 = *v13;
        v17 = objc_msgSend(v8, "objectForKeyedSubscript:", v16);
        if (v15)
          v18 = v17 == 0;
        else
          v18 = 1;
        v19 = (uint64_t *)MEMORY[0x1E0D062D0];
        v20 = (uint64_t *)MEMORY[0x1E0D07A20];
        if (!v18)
        {
          v21 = (void *)v17;
          v22 = v2[470];
          v23 = (float)*((int *)v2 + 488);
          v24 = *MEMORY[0x1E0D062D0];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D062D0]), "floatValue");
          v2[470] = (float)(v25 + (float)(v22 * v23)) / (float)(*((_DWORD *)v2 + 488) + 1);
          v26 = v2[471];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          if (v26 <= v27)
            objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          else
            v28 = *((_DWORD *)v2 + 471);
          *((_DWORD *)v2 + 471) = v28;
          v63 = v2[472];
          objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          if (v63 >= v64)
            objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", v24), "floatValue");
          else
            v65 = *((_DWORD *)v2 + 472);
          *((_DWORD *)v2 + 472) = v65;
          v66 = v2[473];
          v67 = (float)*((int *)v2 + 488);
          v68 = *v20;
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", *v20), "floatValue");
          v2[473] = (float)(v69 + (float)(v66 * v67)) / (float)(*((_DWORD *)v2 + 488) + 1);
          v70 = v2[474];
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          if (v70 <= v71)
            objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          else
            v72 = *((_DWORD *)v2 + 474);
          *((_DWORD *)v2 + 474) = v72;
          v73 = v2[475];
          objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          if (v73 >= v74)
            objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", v68), "floatValue");
          else
            v75 = *((_DWORD *)v2 + 475);
          *((_DWORD *)v2 + 475) = v75;
        }
        v76 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", v14);
        v77 = objc_msgSend(v11, "objectForKeyedSubscript:", v16);
        if (v76)
        {
          v78 = (void *)v77;
          if (v77)
          {
            v79 = v2[476];
            v80 = (float)*((int *)v2 + 488);
            v81 = *v19;
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", *v19), "floatValue");
            v2[476] = (float)(v82 + (float)(v79 * v80)) / (float)(*((_DWORD *)v2 + 488) + 1);
            v83 = v2[477];
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            if (v83 <= v84)
              objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            else
              v85 = *((_DWORD *)v2 + 477);
            *((_DWORD *)v2 + 477) = v85;
            v86 = v2[478];
            objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            if (v86 >= v87)
              objc_msgSend((id)objc_msgSend(v76, "objectForKeyedSubscript:", v81), "floatValue");
            else
              v88 = *((_DWORD *)v2 + 478);
            *((_DWORD *)v2 + 478) = v88;
            v89 = v2[479];
            v90 = (float)*((int *)v2 + 488);
            v91 = *v20;
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", *v20), "floatValue");
            v2[479] = (float)(v92 + (float)(v89 * v90)) / (float)(*((_DWORD *)v2 + 488) + 1);
            v93 = v2[480];
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            if (v93 <= v94)
              objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            else
              v95 = *((_DWORD *)v2 + 480);
            *((_DWORD *)v2 + 480) = v95;
            v96 = v2[481];
            objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            if (v96 >= v97)
              objc_msgSend((id)objc_msgSend(v78, "objectForKeyedSubscript:", v91), "floatValue");
            else
              v98 = *((_DWORD *)v2 + 481);
            *((_DWORD *)v2 + 481) = v98;
          }
        }
        result = (float *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D069B0]);
        if (result)
        {
          v99 = result;
          v100 = v2[482];
          v101 = (float)*((int *)v2 + 488);
          v102 = *MEMORY[0x1E0D06500];
          objc_msgSend((id)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E0D06500]), "floatValue");
          v2[482] = (float)(v103 + (float)(v100 * v101)) / (float)(*((_DWORD *)v2 + 488) + 1);
          v104 = v2[483];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          if (v104 <= v105)
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          else
            v106 = *((_DWORD *)v2 + 483);
          *((_DWORD *)v2 + 483) = v106;
          v107 = v2[484];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          if (v107 >= v108)
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v102), "floatValue");
          else
            v109 = *((_DWORD *)v2 + 484);
          *((_DWORD *)v2 + 484) = v109;
          v110 = v2[485];
          v111 = (float)*((int *)v2 + 488);
          v112 = *MEMORY[0x1E0D06508];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", *MEMORY[0x1E0D06508]), "floatValue");
          v2[485] = (float)(v113 + (float)(v110 * v111)) / (float)(*((_DWORD *)v2 + 488) + 1);
          v114 = v2[486];
          objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          if (v114 <= v115)
            objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          else
            v116 = *((_DWORD *)v2 + 486);
          *((_DWORD *)v2 + 486) = v116;
          v117 = v2[487];
          result = (float *)objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          if (v117 >= v118)
            result = (float *)objc_msgSend((id)objc_msgSend(v99, "objectForKeyedSubscript:", v112), "floatValue");
          else
            v119 = *((_DWORD *)v2 + 487);
          *((_DWORD *)v2 + 487) = v119;
        }
        ++*((_DWORD *)v2 + 488);
      }
      else
      {
        *((_BYTE *)v2 + 1877) = 1;
        *((_DWORD *)v2 + 488) = 1;
        *((_QWORD *)v2 + 243) = 0;
        *(_OWORD *)(v2 + 470) = 0u;
        *(_OWORD *)(v2 + 474) = 0u;
        *(_OWORD *)(v2 + 478) = 0u;
        *(_OWORD *)(v2 + 482) = 0u;
        v29 = *v12;
        v30 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", *v12);
        v31 = *v13;
        v32 = objc_msgSend(v8, "objectForKeyedSubscript:", v31);
        if (v30)
          v33 = v32 == 0;
        else
          v33 = 1;
        if (!v33)
        {
          v34 = (void *)v32;
          v35 = *MEMORY[0x1E0D062D0];
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", *MEMORY[0x1E0D062D0]), "floatValue");
          *((_DWORD *)v2 + 470) = v36;
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v35), "floatValue");
          *((_DWORD *)v2 + 471) = v37;
          objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v35), "floatValue");
          *((_DWORD *)v2 + 472) = v38;
          v39 = *MEMORY[0x1E0D07A20];
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", *MEMORY[0x1E0D07A20]), "floatValue");
          *((_DWORD *)v2 + 473) = v40;
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", v39), "floatValue");
          *((_DWORD *)v2 + 474) = v41;
          objc_msgSend((id)objc_msgSend(v34, "objectForKeyedSubscript:", v39), "floatValue");
          *((_DWORD *)v2 + 475) = v42;
        }
        v43 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", v29);
        v44 = objc_msgSend(v11, "objectForKeyedSubscript:", v31);
        if (v43)
        {
          v45 = (void *)v44;
          if (v44)
          {
            v46 = *MEMORY[0x1E0D062D0];
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", *MEMORY[0x1E0D062D0]), "floatValue");
            *((_DWORD *)v2 + 476) = v47;
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", v46), "floatValue");
            *((_DWORD *)v2 + 477) = v48;
            objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", v46), "floatValue");
            *((_DWORD *)v2 + 478) = v49;
            v50 = *MEMORY[0x1E0D07A20];
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", *MEMORY[0x1E0D07A20]), "floatValue");
            *((_DWORD *)v2 + 479) = v51;
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", v50), "floatValue");
            *((_DWORD *)v2 + 480) = v52;
            objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", v50), "floatValue");
            *((_DWORD *)v2 + 481) = v53;
          }
        }
        result = (float *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D069B0]);
        if (result)
        {
          v54 = result;
          v55 = *MEMORY[0x1E0D06500];
          objc_msgSend((id)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E0D06500]), "floatValue");
          *((_DWORD *)v2 + 482) = v56;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v55), "floatValue");
          *((_DWORD *)v2 + 483) = v57;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v55), "floatValue");
          *((_DWORD *)v2 + 484) = v58;
          v59 = *MEMORY[0x1E0D06508];
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", *MEMORY[0x1E0D06508]), "floatValue");
          *((_DWORD *)v2 + 485) = v60;
          objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v59), "floatValue");
          *((_DWORD *)v2 + 486) = v61;
          result = (float *)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", v59), "floatValue");
          *((_DWORD *)v2 + 487) = v62;
        }
      }
    }
    else
    {
      return (float *)FigDebugAssert3();
    }
  }
  return result;
}

- (os_unfair_lock_s)_addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:(os_unfair_lock_s *)result
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t os_unfair_lock_opaque;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      v4 = result + 387;
      os_unfair_lock_lock(result + 387);
      os_unfair_lock_opaque = v3[386]._os_unfair_lock_opaque;
      os_unfair_lock_unlock(v4);
      return (os_unfair_lock_s *)objc_msgSend((id)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", os_unfair_lock_opaque), 0x1E495A198);
    }
    else
    {
      return (os_unfair_lock_s *)FigDebugAssert3();
    }
  }
  return result;
}

- (void)captureStream:(id)a3 willDiscardVideoSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  void *v5;
  void *v6;

  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    v5 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    v6 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]);
    if (!v6 || objc_msgSend(v6, "BOOLValue"))
      -[BWMetadataTimeMachine addMetadata:](self->_ubZeroShutterLagMetadataTimeMachine, "addMetadata:", v5);
  }
}

- (void)captureStream:(id)a3 didDropVideoSampleBufferWithPTS:(id *)a4
{
  BWFigVideoCaptureStream *captureStream;
  BWMetadataTimeMachine *ubZeroShutterLagMetadataTimeMachine;
  uint64_t v9;
  __int128 v10;
  int64_t var3;

  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
      captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
    else
      captureStream = self->_captureStream;
    if (captureStream == a3)
    {
      ubZeroShutterLagMetadataTimeMachine = self->_ubZeroShutterLagMetadataTimeMachine;
      v9 = objc_msgSend(a3, "portType");
      v10 = *(_OWORD *)&a4->var0;
      var3 = a4->var3;
      -[BWMetadataTimeMachine addDroppedFrameForPortType:pts:](ubZeroShutterLagMetadataTimeMachine, "addDroppedFrameForPortType:pts:", v9, &v10);
    }
  }
}

- (void)captureStream:(id)a3 willEmitStillImageSampleBuffer:(opaqueCMSampleBuffer *)a4 fromTimeMachine:(BOOL)a5
{
  void *v8;
  void *v9;
  _QWORD v10[5];

  -[BWFigVideoCaptureDevice _addCoreMediaMetadataAttachmentsToStillImageSampleBuffer:fromTimeMachine:]((uint64_t)self, a4, a5);
  -[BWFigVideoCaptureDevice _addExifMetadata:fromTimeMachine:]((uint64_t)self, a4, a5);
  self->_digitalFlashCaptureInProgress = objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureType") == 11;
  v8 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v9 = (void *)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D05A40]))
  {
    -[BWFigVideoCaptureDevice _collectPearlTemperatureStatistics:]((float *)self, a4);
    -[BWFigVideoCaptureDevice _collectPearlProjectorUpTime:isStillImage:]((uint64_t)self, a4, 1);
  }
  if (objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D80]), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D068D0]), "intValue") >= 2)
  {
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99750], CFSTR("Still image capture does not support binned SIFR"), 0));
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke;
  v10[3] = &__block_descriptor_40_e21_v16__0____CFString__8l;
  v10[4] = a4;
  __88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke((uint64_t)v10, (const __CFString *)*MEMORY[0x1E0D05CA8]);
  __88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke((uint64_t)v10, (const __CFString *)*MEMORY[0x1E0D05D48]);
}

- (void)_addCoreMediaMetadataAttachmentsToStillImageSampleBuffer:(char)a3 fromTimeMachine:
{
  unint64_t v6;
  __CVBuffer *ImageBuffer;
  OSType PixelFormatType;
  void *v9;
  void *v10;
  const void *v11;
  void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  void *v20;
  uint64_t v21;
  CMTime v22;
  CMTime v23;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 2058))
    {
      v6 = (unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(target);
      if (v6 >> 62)
      {
        if ((v6 & 0x3000000000000000) == 0)
        {
          ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)target);
          PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
          if (FigCapturePixelFormatIsVersatileRaw(PixelFormatType))
            BWCleanupRawStillImageSampleBuffer(target);
        }
      }
    }
    -[BWFigVideoCaptureDevice _addStillImageSettingsToStillImageSampleBuffer:](a1, target);
    -[BWFigVideoCaptureDevice _addPreviewWhiteBalanceMetadataToStillImageSampleBuffer:](a1, target);
    -[BWFigVideoCaptureDevice _addADRCExposureRealizedGainToStillImageSampleBuffer:](a1, target);
    CMSetAttachment(target, CFSTR("CaptureDeviceType"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 492)), 1u);
    -[BWFigVideoCaptureDevice _addAutofocusAndDiagnosticMetadata:](a1, target);
    if (*(_QWORD *)(a1 + 3072) && objc_msgSend(*(id *)(a1 + 504), "sphereEnabled") && (a3 & 1) == 0)
      objc_msgSend(*(id *)(a1 + 3072), "processSampleBuffer:", target);
    if (*(_BYTE *)(a1 + 1512))
      -[BWFigVideoCaptureDevice _addPortraitSceneMonitoringMetadataToSampleBuffer:](a1, target);
    if (*(_BYTE *)(a1 + 217) && *(_BYTE *)(a1 + 1529) && *(_QWORD *)(a1 + 1536))
      -[BWFigVideoCaptureDevice _addStereoVideoCaptureSceneMonitoringMetadataToSampleBuffer:]((os_unfair_lock_s *)a1, target);
    if (*(_QWORD *)(a1 + 3128) && (objc_msgSend(*(id *)(a1 + 2512), "captureFlags") & 4) == 0)
    {
      v9 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      memset(&v23, 0, sizeof(v23));
      CMTimeMakeFromDictionary(&v23, (CFDictionaryRef)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]));
      v10 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v11 = (const void *)objc_msgSend(v10, "copyAttachedMediaSampleBufferForPts:attachedMediaKey:", &v22, 0x1E495B358);
      BWSampleBufferSetAttachedMedia(target, 0x1E495B358, (uint64_t)v11);
      if (v11)
        CFRelease(v11);
      v12 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v13 = (const void *)objc_msgSend(v12, "copyAttachedMediaSampleBufferForPts:attachedMediaKey:", &v22, 0x1E495B3F8);
      BWSampleBufferSetAttachedMedia(target, 0x1E495B3F8, (uint64_t)v13);
      if (v13)
        CFRelease(v13);
      v14 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v15 = (const void *)objc_msgSend(v14, "copyAttachedMediaSampleBufferForPts:attachedMediaKey:", &v22, CFSTR("HumanFullBodiesMask"));
      BWSampleBufferSetAttachedMedia(target, (uint64_t)CFSTR("HumanFullBodiesMask"), (uint64_t)v15);
      if (v15)
        CFRelease(v15);
      v16 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v17 = (const void *)objc_msgSend(v16, "copyAttachedMediaSampleBufferForPts:attachedMediaKey:", &v22, CFSTR("HumanSkinsMask"));
      BWSampleBufferSetAttachedMedia(target, (uint64_t)CFSTR("HumanSkinsMask"), (uint64_t)v17);
      if (v17)
        CFRelease(v17);
      v18 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v19 = (const void *)objc_msgSend(v18, "copyAttachedMediaSampleBufferForPts:attachedMediaKey:", &v22, 0x1E495B218);
      BWSampleBufferSetAttachedMedia(target, 0x1E495B218, (uint64_t)v19);
      if (v19)
        CFRelease(v19);
      v20 = (void *)objc_msgSend(*(id *)(a1 + 3128), "referencedObject");
      v22 = v23;
      v21 = objc_msgSend(v20, "getMetadataDictionaryForPts:", &v22);
      if (v21)
        objc_msgSend(v9, "addEntriesFromDictionary:", v21);
    }
  }
}

- (float)_collectPearlTemperatureStatistics:(float *)result
{
  float *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  void *v11;
  float v12;
  void *v13;
  float v14;

  if (result)
  {
    v2 = result;
    v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
    {
      v4 = v3;
      if (v2[858] == 3.4028e38)
      {
        v5 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E90]);
        if (v5)
        {
          objc_msgSend(v5, "floatValue");
          *((_DWORD *)v2 + 858) = v6;
        }
      }
      v7 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E88]);
      if (v7)
      {
        v8 = v7;
        if (v2[859] == 3.4028e38)
        {
          objc_msgSend(v7, "floatValue");
          *((_DWORD *)v2 + 859) = v9;
        }
        objc_msgSend(v8, "floatValue");
        *((_DWORD *)v2 + 860) = v10;
        v11 = (void *)*((_QWORD *)v2 + 431);
        objc_msgSend(v8, "floatValue");
        objc_msgSend(v11, "addDataPoint:", v12);
      }
      result = (float *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E08]);
      if (result)
      {
        v13 = (void *)*((_QWORD *)v2 + 432);
        objc_msgSend(result, "floatValue");
        return (float *)objc_msgSend(v13, "addDataPoint:", v14);
      }
    }
    else
    {
      return (float *)FigDebugAssert3();
    }
  }
  return result;
}

- (uint64_t)_collectPearlProjectorUpTime:(int)a3 isStillImage:
{
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  uint64_t v8;
  CMTime time2;
  CMTime time1;
  CMTime v11;

  if (result)
  {
    v5 = result;
    v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v6)
    {
      result = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B90]), "intValue");
      if ((_DWORD)result == 2)
      {
        memset(&v11, 0, sizeof(v11));
        result = (uint64_t)CMSampleBufferGetPresentationTimeStamp(&v11, (CMSampleBufferRef)target);
        v7 = (_OWORD *)(v5 + 3480);
        if ((*(_BYTE *)(v5 + 3492) & 1) == 0
          || (time1 = v11,
              *(_OWORD *)&time2.value = *v7,
              time2.epoch = *(_QWORD *)(v5 + 3496),
              result = CMTimeCompare(&time1, &time2),
              (int)result >= 1))
        {
          *v7 = *(_OWORD *)&v11.value;
          *(_QWORD *)(v5 + 3496) = v11.epoch;
          v8 = 3464;
          if (a3)
            v8 = 3472;
          *(_QWORD *)(v5 + v8) += 2940;
        }
      }
    }
    else
    {
      return FigDebugAssert3();
    }
  }
  return result;
}

__CVBuffer *__88__BWFigVideoCaptureDevice_captureStream_willEmitStillImageSampleBuffer_fromTimeMachine___block_invoke(uint64_t a1, const __CFString *a2)
{
  __CVBuffer *result;
  __CVBuffer *v3;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v6;

  result = (__CVBuffer *)CMGetAttachment(*(CMAttachmentBearerRef *)(a1 + 32), a2, 0);
  if (result)
  {
    v3 = result;
    CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    v6 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    if (!FigCFDictionaryGetCGRectIfPresent())
    {
      CVPixelBufferGetWidth(v3);
      CVPixelBufferGetHeight(v3);
      FigCFDictionarySetCGRect();
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return (__CVBuffer *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(double *)&v6 > (double)CVPixelBufferGetWidth(v3)
      || (result = (__CVBuffer *)CVPixelBufferGetHeight(v3), *((double *)&v6 + 1) > (double)(unint64_t)result))
    {
      FigCFDictionarySetCGRect();
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      return (__CVBuffer *)fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

- (void)captureStream:(id)a3 willEmitDepthSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  void *v6;
  uint64_t v7;
  void *v8;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v7 = objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E88]);
  if (v7)
  {
    v9 = CFSTR("NewPropertyValue");
    v10[0] = v7;
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("PearlProjectorTemperatureChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1));
  }
  v8 = (void *)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D05A40]))
  {
    -[BWFigVideoCaptureDevice _collectPearlTemperatureStatistics:]((float *)self, a4);
    -[BWFigVideoCaptureDevice _collectPearlProjectorUpTime:isStillImage:]((uint64_t)self, a4, 0);
  }
  -[BWFigVideoCaptureDevice _addSystemPressureAttachments:]((uint64_t)self, a4);
}

- (void)captureStream:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  objc_msgSend(-[FigWeakReference referencedObject](self->_supplementalPointCloudCaptureDeviceDelegate, "referencedObject", a3), "pointCloudCaptureDevice:willEmitPointCloudSampleBuffer:", self, a4);
}

- (void)captureStream:(id)a3 didCompleteStillImageCaptureWithPTS:(id *)a4 error:(int)a5
{
  int v9;
  int stillImageDispatchQueue;
  __int128 v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  _QWORD v20[6];
  CMTime v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CMTime time2;
  CMTime time1;

  v9 = objc_msgSend((id)objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureStreamSettings"), "count");
  os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  stillImageDispatchQueue = (int)self->_stillImageDispatchQueue;
  LODWORD(self->_stillImageDispatchQueue) = stillImageDispatchQueue + 1;
  if ((a4->var2 & 1) != 0)
  {
    time1 = (CMTime)*a4;
    time2 = *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler;
    if (CMTimeCompare(&time1, &time2) > 0 || (self->_lastStillImageCaptureEndPTS.value & 0x100000000) == 0)
    {
      v11 = *(_OWORD *)&a4->var0;
      *(_QWORD *)&self->_lastStillImageCaptureEndPTS.timescale = a4->var3;
      *(_OWORD *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler = v11;
    }
  }
  v12 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
  if (v12)
  {
    objc_msgSend(v12, "lastTimeMachinePTS");
    if ((v23 & 0x100000000) != 0)
    {
      v13 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
      if (v13)
        objc_msgSend(v13, "lastTimeMachinePTS");
      else
        memset(&v21, 0, sizeof(v21));
      time1 = *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler;
      if (CMTimeCompare(&v21, &time1) > 0 || (self->_lastStillImageCaptureEndPTS.value & 0x100000000) == 0)
      {
        v14 = *(void **)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
        if (v14)
          objc_msgSend(v14, "lastTimeMachinePTS");
        else
          memset(&time1, 0, sizeof(time1));
        *(CMTime *)&self->_pendingPrepareToCaptureStillImageNowCompletionHandler = time1;
      }
    }
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  if (stillImageDispatchQueue >= v9 || stillImageDispatchQueue + 1 == v9)
  {
    v15 = (void *)objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureStreamSettingsForPortType:", objc_msgSend(a3, "portType"));
    if (objc_msgSend(v15, "adaptiveBracketingParameters")
      && (objc_msgSend(v15, "reachedEndOfAdaptiveBracketing") & 1) == 0)
    {
      v17 = (void *)objc_msgSend((id)objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "frameStatisticsByPortType"), "objectForKeyedSubscript:", objc_msgSend(v15, "portType"));
      if (!a5
        && -[BWFigVideoCaptureDevice _ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:frameStatistics:]((uint64_t)self, v15, v17))
      {
        v18 = *(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque;
        os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
        -[BWFigVideoCaptureDevice _resetStillImageCaptureRequestStateInternal]((uint64_t)self);
        os_unfair_lock_unlock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
        v19 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 3221225472;
        v20[2] = __83__BWFigVideoCaptureDevice_captureStream_didCompleteStillImageCaptureWithPTS_error___block_invoke;
        v20[3] = &unk_1E491E748;
        v20[4] = self;
        v20[5] = v18;
        dispatch_async(v19, v20);
        return;
      }
      objc_msgSend(v15, "setReachedEndOfAdaptiveBracketing:", 1);
    }
    else
    {
      os_unfair_lock_lock(&self->_switchOverLock);
      v16 = BYTE1(self->_lastStillImageCaptureEndPTS.epoch);
      LOBYTE(self->_lastStillImageCaptureEndPTS.epoch) = 0;
      os_unfair_lock_unlock(&self->_switchOverLock);
      if (v16)
        return;
    }
    -[BWFigVideoCaptureDevice _resetStillImageCaptureRequestState](self, "_resetStillImageCaptureRequestState");
  }
}

- (uint64_t)_ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:(void *)a3 frameStatistics:
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BOOL4 v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  int v81;
  _BOOL4 v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;

  if (result)
  {
    v6 = result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      v52 = v3;
      LODWORD(v51) = 0;
      FigDebugAssert3();
    }
    if (objc_msgSend(a2, "captureType", v51, v52) == 11)
    {
      v7 = (void *)objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingParameters"), "adaptiveBracketingFrameParametersForGroup:", objc_msgSend(a2, "adaptiveBracketingGroupCaptureCount") + 1);
      result = objc_msgSend(v7, "count");
      if (result)
      {
        v86 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v87 = 0;
        v88 = 0;
        v8 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v6, objc_msgSend(a2, "captureFlags"), objc_msgSend(a2, "captureType"), &v88, &v87);
        v9 = v8;
        if (v8)
          v10 = (objc_msgSend(v8, "intValue") >> 1) & 1;
        else
          v10 = 1;
        v69 = v10;
        v59 = objc_msgSend(a2, "adaptiveBracketingGroupCaptureCount");
        v68 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingParameters"), "generateWhiteBalanceParameters");
        v11 = objc_msgSend(a2, "captureFlags");
        v84 = v9;
        v54 = v7;
        if ((v11 & 0x800000) != 0)
        {
          v12 = 1;
        }
        else if ((v11 & 0x20000000) != 0)
        {
          v12 = 2;
        }
        else if ((v11 & 0x40000000) != 0)
        {
          v12 = 3;
        }
        else
        {
          v12 = 0;
        }
        v67 = v11;
        v66 = v12;
        if ((v11 & 0x100) != 0)
          v13 = v12;
        else
          v13 = 0;
        v14 = *(void **)(v6 + 1296);
        if (!v14)
          v14 = *(void **)(v6 + 504);
        v15 = (void *)objc_msgSend(*(id *)(v6 + 2008), "objectForKeyedSubscript:", objc_msgSend(v14, "portType"));
        v80 = a3;
        objc_msgSend(a3, "gain");
        v17 = v16;
        v57 = a2;
        v18 = objc_msgSend(a2, "captureFlags");
        LODWORD(v19) = v17;
        v20 = objc_msgSend(v14, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v18 >> 4) & 1, v19);
        v21 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        if (v59)
          v22 = 0;
        else
          v22 = v69;
        v23 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v59 != 0);
        v58 = v21;
        objc_msgSend(v21, "setObject:forKeyedSubscript:", v23, *MEMORY[0x1E0D07B88]);
        v24 = (_QWORD *)MEMORY[0x1E0D07BB8];
        if ((v22 & 1) == 0 && !v59)
          goto LABEL_27;
        v25 = (_QWORD *)MEMORY[0x1E0D07BB8];
        objc_msgSend(v58, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07BB8]);
        v26 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v13);
        objc_msgSend(v58, "setObject:forKeyedSubscript:", v26, *MEMORY[0x1E0D07C18]);
        v27 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", ((_DWORD)v13 != 0) & (v67 >> 25));
        objc_msgSend(v58, "setObject:forKeyedSubscript:", v27, *MEMORY[0x1E0D07BF0]);
        v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v67 >> 15) & 1);
        objc_msgSend(v58, "setObject:forKeyedSubscript:", v28, *MEMORY[0x1E0D07B80]);
        v24 = v25;
        objc_msgSend(v58, "setObject:forKeyedSubscript:", v20, *MEMORY[0x1E0D07BE0]);
        if (!v59)
        {
LABEL_27:
          objc_msgSend(v58, "setObject:forKeyedSubscript:", v84, *MEMORY[0x1E0D07B90]);
          objc_msgSend(v86, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v88 | 0x20, 0));
        }
        v85 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v29 = v54;
        v83 = (void *)objc_msgSend(v57, "adaptiveBracketingSphereOffsetsForNextGroupWithFrameCount:", objc_msgSend(v54, "count"));
        if (objc_msgSend(v14, "hasSphere"))
        {
          if (objc_msgSend(v14, "isStationary"))
            v30 = objc_msgSend(v83, "count") != 0;
          else
            v30 = 1;
          v82 = v30;
        }
        else
        {
          v82 = 0;
        }
        if (objc_msgSend(v15, "digitalFlashHighlightRecoveryEnabled"))
          v81 = objc_msgSend(v80, "hrEnabled");
        else
          v81 = 0;
        objc_msgSend((id)objc_msgSend(v57, "adaptiveBracketingParameters"), "evZeroTargetGain");
        if (v69)
          v65 = objc_msgSend(v14, "noiseReductionAndSharpeningConfigurationForType:gain:", 17);
        else
          v65 = 0;
        if ((objc_msgSend(v57, "captureFlags") & 0x100000000) != 0)
        {
          v32 = v24;
          v33 = *(void **)(v6 + 2064);
          v34 = objc_msgSend(v14, "portType");
          v35 = v33;
          v24 = v32;
          v31 = objc_msgSend((id)objc_msgSend(v35, "objectForKeyedSubscript:", v34), "intValue");
        }
        else
        {
          v31 = 0xFFFFFFFFLL;
        }
        v36 = v88;
        if (objc_msgSend(v54, "count"))
        {
          v37 = 0;
          v78 = *MEMORY[0x1E0D07C20];
          v79 = v36 | 0x40;
          v77 = *MEMORY[0x1E0D07E60];
          v76 = *MEMORY[0x1E0D07B98];
          v75 = *MEMORY[0x1E0D07BC0];
          v74 = *MEMORY[0x1E0D07BA0];
          v73 = *MEMORY[0x1E0D07BD8];
          v72 = *MEMORY[0x1E0D07C10];
          v38 = *MEMORY[0x1E0D07C08];
          v39 = *MEMORY[0x1E0D07B90];
          v64 = *MEMORY[0x1E0D07BF0];
          v63 = *MEMORY[0x1E0D07C18];
          v62 = *MEMORY[0x1E0D07BA8];
          v61 = *MEMORY[0x1E0D07BC8];
          v60 = *MEMORY[0x1E0D07BE0];
          v56 = *MEMORY[0x1E0D07C28];
          v53 = *MEMORY[0x1E0D07BB0];
          v55 = *MEMORY[0x1E0D07B80];
          v70 = *v24;
          v71 = *MEMORY[0x1E0D07BE8];
          v40 = MEMORY[0x1E0C9AAB0];
          do
          {
            v41 = v29;
            v42 = (void *)objc_msgSend(v29, "objectAtIndexedSubscript:", v37);
            v43 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v78);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7A8, v77);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v40, v76);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v42, "integrationTimeInMiroseconds")), v75);
            v44 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v42, "gain");
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v44, "numberWithFloat:"), v74);
            v45 = objc_msgSend(v42, "maxAGC");
            if ((int)v45 < 1)
              v46 = 0;
            else
              v46 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v45);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v46, v73);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v82), v72);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v83, "objectAtIndexedSubscript:", v37), v38);
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v84, v39);
            if ((v31 & 0x80000000) != 0)
            {
              if (!v69)
                goto LABEL_60;
              objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v67 >> 25) & 1), v64);
              objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v66), v63);
              objc_msgSend(v43, "setObject:forKeyedSubscript:", v40, v62);
              objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, v61);
              objc_msgSend(v43, "setObject:forKeyedSubscript:", v65, v60);
              if (v68)
              {
                objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, v56);
                v50 = v68;
                if (v37)
                  v50 = 0;
                if (v50 == 1 && !v59)
                  objc_msgSend(v43, "setObject:forKeyedSubscript:", v40, v53);
              }
              if ((v67 & 0x8000) == 0)
                goto LABEL_60;
              v48 = v43;
              v47 = v40;
              v49 = v55;
            }
            else
            {
              v47 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v31);
              v48 = v43;
              v49 = v71;
            }
            objc_msgSend(v48, "setObject:forKeyedSubscript:", v47, v49);
LABEL_60:
            if (v81)
              objc_msgSend(v43, "setObject:forKeyedSubscript:", v40, v70);
            objc_msgSend(v85, "addObject:", v43);
            objc_msgSend(v86, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", ++v37, v79, 0));
            v29 = v41;
          }
          while (objc_msgSend(v41, "count") > v37);
        }
        objc_msgSend(v57, "addAdaptiveUnifiedBracketedCaptureParams:preBracketFrameCaptureParams:bracketedCaptureFrameInfos:", v85, v58, v86);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (void)_resetStillImageCaptureRequestStateInternal
{
  if (a1)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 2504));
    *(_BYTE *)(a1 + 2544) = 0;
    *(_DWORD *)(a1 + 2540) = 0;

    *(_QWORD *)(a1 + 2520) = 0;
    *(_QWORD *)(a1 + 2528) = 0;
    *(_BYTE *)(a1 + 2536) = 0;

    *(_QWORD *)(a1 + 2512) = 0;
    *(_QWORD *)(a1 + 2496) = 0;
    *(_DWORD *)(a1 + 2604) = 0;
    *(_DWORD *)(a1 + 2488) = 0;

    *(_QWORD *)(a1 + 3248) = 0;
    *(_QWORD *)(a1 + 2040) = 0;
  }
}

void __83__BWFigVideoCaptureDevice_captureStream_didCompleteStillImageCaptureWithPTS_error___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _captureStillImageNowWithSettings:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));

}

- (void)_captureStillImageNowWithSettings:(uint64_t)a1
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  unint64_t v20;
  void *v21;
  _BOOL4 v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  id v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v29;
  unint64_t v30;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  void *v37;
  double v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  id v55;
  id v56;
  _BYTE v57[128];
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!_FigIsCurrentDispatchQueue())
    {
      v44 = v2;
      LODWORD(v42) = 0;
      FigDebugAssert3();
    }
    v5 = objc_msgSend(a2, "captureType", v42, v44);
    v6 = objc_msgSend(a2, "captureFlags");
    v55 = 0;
    v56 = 0;
    v7 = a2;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
    *(_QWORD *)(a1 + 2512) = a2;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
    if ((_DWORD)v5 == 8
      || (_DWORD)v5 == 1
      && !*(_BYTE *)(a1 + 2456)
      && objc_msgSend(*(id *)(a1 + 504), "timeMachineEnabled"))
    {
      if (objc_msgSend(*(id *)(a1 + 2512), "deliverSushiRaw"))
      {
        v45 = v2;
        LODWORD(v43) = 0;
        FigDebugAssert3();
      }
      if (objc_msgSend((id)a1, "isBravoVariant", v43, v45))
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v8 = (void *)objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettings");
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v52;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v52 != v11)
                objc_enumerationMutation(v8);
              objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * i), "portType")), "captureStillImageFromTimeMachineWithStillImageSettings:", *(_QWORD *)(a1 + 2512));
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
          }
          while (v10);
          v13 = 0;
          goto LABEL_86;
        }
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 504), "captureStillImageFromTimeMachineWithStillImageSettings:", *(_QWORD *)(a1 + 2512));
      }
      v13 = 0;
LABEL_86:
      -[BWFigVideoCaptureDevice _logStillImageCaptureTimingStatisticsForCoreAnalytics](a1);
      goto LABEL_87;
    }
    v46 = v6;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v14 = *(void **)(a1 + 560);
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v48;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v48 != v17)
            objc_enumerationMutation(v14);
          v19 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * j);
          if (objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettingsForPortType:", objc_msgSend(v19, "portType")))
            objc_msgSend(v19, "prepareForStillImageCaptureFromFirmwareWithStillImageSettings:", *(_QWORD *)(a1 + 2512));
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
      }
      while (v16);
    }
    if ((_DWORD)v5 == 2)
    {
      v20 = v46;
      v21 = (void *)objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(a2, "masterPortType"));
      v22 = (v46 & 0x60800000) != 0
         || objc_msgSend((id)objc_msgSend(v21, "unifiedBracketedCaptureParams"), "count") != 0;
    }
    else
    {
      v22 = 0;
      v20 = v46;
    }
    if ((v20 & 0x8004) != 0)
    {
      v23 = 1;
      if (!*(_QWORD *)(a1 + 1464) || (v20 & 0x100) != 0 || (v20 & 0x80) != 0)
      {
LABEL_43:
        if (*(_QWORD *)(a1 + 552) && *(int *)(a1 + 2444) >= 3)
        {
          if ((_DWORD)v5 == 7)
          {
            v24 = 0;
          }
          else
          {
            v29 = (void *)objc_msgSend(a2, "masterPortType");
            v24 = objc_msgSend(v29, "isEqualToString:", *MEMORY[0x1E0D05A28]);
          }
          v30 = objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "count");
          v32 = (v20 & 0x800) == 0 && v30 > 1;
          v33 = (v20 >> 8) & 1;
          v34 = *(_QWORD *)(a1 + 1464);
          if ((_DWORD)v5 != 2)
            LOBYTE(v33) = 0;
          if (!v34)
            LOBYTE(v33) = 0;
          v25 = 1;
          if ((_DWORD)v5 == 11 || (v33 & 1) != 0)
            goto LABEL_49;
          v25 = 0;
          if (!v34 && (_DWORD)v5 != 6)
          {
            if (*(_BYTE *)(a1 + 3640))
              v35 = 1;
            else
              v35 = v23;
            v25 = v35 | v24 | v32;
          }
        }
        else
        {
          v25 = 0;
        }
        if ((v25 | v23) != 1)
        {
          v26 = -[BWFigVideoCaptureDevice _convertStillImageCaptureSettings:toStillImageCaptureNowOptions:captureStreamPropertyValues:](a1, *(void **)(a1 + 2512), &v56, &v55);
          LOBYTE(v25) = 0;
LABEL_51:
          v13 = v56;
          if (!(_DWORD)v26)
          {
            *(_QWORD *)(a1 + 2520) = v56;
            v27 = v55;
            *(_QWORD *)(a1 + 2528) = v55;
            *(_BYTE *)(a1 + 2536) = v25;
            if ((objc_msgSend(a2, "captureFlags") & 0x200) != 0)
            {
              if (dword_1ECFE9470)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v20 = v46;
              }
              v36 = *(_DWORD *)(a1 + 2292);
              v37 = (void *)objc_msgSend(*(id *)(a1 + 2280), "referencedObject", v43, v45);
              LODWORD(v38) = v36;
              objc_msgSend(v37, "setMinimumFrameRate:", v38);
            }
            if ((_DWORD)v5 == 2
              && (objc_msgSend(a2, "sceneFlags") & 0x10000000) != 0
              && objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2008), "objectForKeyedSubscript:", objc_msgSend(a2, "masterPortType")), "macroFlashQSubSwitchingEnabled"))
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
              *(_BYTE *)(a1 + 2600) = 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1288));
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
              *(_BYTE *)(a1 + 2544) = 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
LABEL_87:

              return;
            }
            if (*(_BYTE *)(a1 + 1976))
            {
              v39 = *(_DWORD *)(a1 + 1980);
              if (v39 >= *(_DWORD *)(a1 + 1984))
                v39 = *(_DWORD *)(a1 + 1984);
              *(_DWORD *)(a1 + 2500) = v39;
              v40 = -[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:captureType:captureFlags:](a1, (void *)objc_msgSend(*(id *)(a1 + 2512), "frameStatisticsByPortType"), objc_msgSend(*(id *)(a1 + 2512), "masterPortType"), v5, v20);
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
              *(_BYTE *)(a1 + 2544) = v40 > 1;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
              if (v40 > 1)
                goto LABEL_87;
            }
            else
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
              *(_BYTE *)(a1 + 2544) = 0;
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
            }
            v41 = -[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](a1, v13, v27);
            if (!(_DWORD)v41)
              goto LABEL_86;
            v26 = v41;
          }
          -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:]((char *)a1, v26);
          goto LABEL_87;
        }
LABEL_49:
        v26 = -[BWFigVideoCaptureDevice _ubConvertStillImageCaptureSettings:useSynchronizedStreamsGroup:toStillImageCaptureNowOptions:captureStreamPropertyValues:](a1, *(void **)(a1 + 2512), v25, &v56, &v55);
        goto LABEL_51;
      }
    }
    else if ((v20 & 0x180) != 0)
    {
      v23 = 1;
      goto LABEL_43;
    }
    v23 = v22;
    goto LABEL_43;
  }
}

- (void)setPreviewShiftInSensorSpace:(double)a3
{
  os_unfair_lock_s *v6;

  if (a1)
  {
    v6 = (os_unfair_lock_s *)(a1 + 3676);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3676));
    *(double *)(a1 + 3680) = a2;
    *(double *)(a1 + 3688) = a3;
    os_unfair_lock_unlock(v6);
  }
}

uint64_t __63__BWFigVideoCaptureDevice_captureStream_didUpdatePreviewShift___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateAutoFocusRectIfNeededForZoomFactor:](*(_QWORD *)(a1 + 32), *(float *)(a1 + 40));
  return -[BWFigVideoCaptureDevice _updateExposureRectIfNeededForZoomFactor:](*(CGRect **)(a1 + 32), *(float *)(a1 + 40));
}

- (uint64_t)_updateSensorRawPools
{
  uint64_t v1;
  id *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  void *v13;
  BWVideoFormatRequirements *v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  BWPixelBufferPool *v24;
  BWPixelBufferPool *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  int *v56;
  uint64_t v57;
  os_unfair_lock_s *lock;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  id *obj;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _QWORD v83[6];
  os_log_type_t type;
  unsigned int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  const char *v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  _BYTE v95[10];
  _BYTE v96[6];
  int v97;
  __int16 v98;
  int v99;
  _BYTE v100[128];
  _BYTE v101[128];
  BWVideoFormatRequirements *v102;
  uint64_t v103;
  _BYTE v104[128];
  uint64_t v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = a1;
  v67 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v106 = 0;
  v105 = 0;
  if (!*(_BYTE *)(v1 + 156))
    return 0;
  v2 = -[BWFigVideoCaptureDevice _sensorRawPoolsRequirements]((id *)v1);
  if (!objc_msgSend(v2, "count") || (unint64_t)objc_msgSend(v2, "count") > 3)
    return 0;
  lock = (os_unfair_lock_s *)(v1 + 144);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 144));
  if (!*(_QWORD *)(v1 + 160))
    *(_QWORD *)(v1 + 160) = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v72 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v86, v104, 16);
  v74 = v1;
  if (!v72)
    goto LABEL_45;
  v63 = 0;
  v3 = *(_QWORD *)v87;
  v70 = *MEMORY[0x1E0CA90E0];
  v68 = *MEMORY[0x1E0CA8FD8];
  v66 = *MEMORY[0x1E0CA9060];
  v62 = *MEMORY[0x1E0CA8F68];
  v61 = *MEMORY[0x1E0CA9048];
  v64 = v1 + 168;
  v4 = 0x1E0CB3000uLL;
  v60 = *MEMORY[0x1E0CA9040];
  v59 = *(_QWORD *)v87;
  obj = v2;
  while (2)
  {
    for (i = 0; i != v72; ++i)
    {
      v6 = v4;
      if (*(_QWORD *)v87 != v3)
        objc_enumerationMutation(obj);
      v7 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * i);
      v8 = FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v70), "intValue") | (unint64_t)(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v68), "intValue") << 32));
      v9 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v70), "intValue");
      v10 = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v68), "intValue");
      v11 = v10;
      v12 = v9 | (unint64_t)(v10 << 32);
      if (!FigCaptureVideoDimensionsAreValid(v12))
      {
LABEL_42:
        v26 = 0;
        goto LABEL_63;
      }
      if ((_DWORD)v8 == 2 && !FigCaptureVideoDimensionsAreEqual(*(_QWORD *)(v1 + 148), v12))
      {
        v51 = (void *)MEMORY[0x1E0C99DA0];
        v52 = *MEMORY[0x1E0C99768];
        v53 = (void *)MEMORY[0x1E0CB3940];
        v54 = BWStringFromDimensions(*(_QWORD *)(v1 + 148));
        v55 = (void *)objc_msgSend(v51, "exceptionWithName:reason:userInfo:", v52, objc_msgSend(v53, "stringWithFormat:", CFSTR("Ultra high resolution sensor raw pool dimensions don't match expected %@ received %@"), v54, BWStringFromDimensions(v12)), 0);
        objc_exception_throw(v55);
      }
      *((_DWORD *)&v105 + (int)v8) = objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v66), "intValue");
      if (objc_msgSend(*(id *)(v1 + 160), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v4 + 2024), "numberWithInt:", v8)))
      {
        v13 = (void *)objc_msgSend(*(id *)(v1 + 160), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v4 + 2024), "numberWithInt:", v8));
        if (objc_msgSend(v13, "width") != v9 || objc_msgSend(v13, "height") != v11)
          goto LABEL_42;
      }
      else
      {
        v14 = objc_alloc_init(BWVideoFormatRequirements);
        -[BWVideoFormatRequirements setWidth:](v14, "setWidth:", (int)v9);
        -[BWVideoFormatRequirements setHeight:](v14, "setHeight:", v11);
        -[BWVideoFormatRequirements setBytesPerRowAlignment:](v14, "setBytesPerRowAlignment:", (int)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v62), "intValue"));
        -[BWVideoFormatRequirements setPlaneAlignment:](v14, "setPlaneAlignment:", (int)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", v61), "intValue"));
        -[BWVideoFormatRequirements setHeightAlignment:](v14, "setHeightAlignment:", 16);
        v103 = objc_msgSend(v7, "objectForKeyedSubscript:", v60);
        -[BWVideoFormatRequirements setSupportedPixelFormats:](v14, "setSupportedPixelFormats:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v103, 1));
        -[BWVideoFormatRequirements setSupportedCacheModes:](v14, "setSupportedCacheModes:", +[BWVideoFormatRequirements cacheModesForOptimizedDisplayAccess](BWVideoFormatRequirements, "cacheModesForOptimizedDisplayAccess"));
        if (!-[NSArray count](-[BWVideoFormatRequirements supportedPixelFormats](v14, "supportedPixelFormats"), "count"))goto LABEL_42;
        v102 = v14;
        v15 = +[BWVideoFormat formatByResolvingRequirements:](BWVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v102, 1));
        if (!v15)
          goto LABEL_42;
        v16 = v15;
        v17 = (*((_DWORD *)&v105 + (int)v8) + *(_DWORD *)(v64 + 4 * (int)v8));
        if (dword_1ECFE9470)
        {
          v85 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v19 = v85;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if (v20)
          {
            v21 = FigCaptureSourceSensorRawHighResolutionFlavorToShortString(v8);
            v22 = *(_DWORD *)(v64 + 4 * (int)v8);
            v23 = *((_DWORD *)&v105 + (int)v8);
            v90 = 136316162;
            v91 = "-[BWFigVideoCaptureDevice _updateSensorRawPools]";
            v92 = 2112;
            v93 = v21;
            v94 = 1024;
            *(_DWORD *)v95 = v17;
            *(_WORD *)&v95[4] = 1024;
            *(_DWORD *)&v95[6] = v22;
            *(_WORD *)v96 = 1024;
            *(_DWORD *)&v96[2] = v23;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v4 = v6;
        }
        v24 = [BWPixelBufferPool alloc];
        v1 = v74;
        v25 = -[BWPixelBufferPool initWithVideoFormat:capacity:name:memoryPool:](v24, "initWithVideoFormat:capacity:name:memoryPool:", v16, v17, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_SensorRawBufferPool_%u"), BWStringFromCaptureDeviceType(*(_DWORD *)(v74 + 492)), v8), *(_QWORD *)(v74 + 3632));
        v26 = (uint64_t)v25;
        if (!v25)
          goto LABEL_65;
        -[BWPixelBufferPool preallocate](v25, "preallocate");
        objc_msgSend(*(id *)(v74 + 160), "setObject:forKeyedSubscript:", v26, objc_msgSend(*(id *)(v4 + 2024), "numberWithInt:", v8));
        v63 = 1;
        v3 = v59;
      }
      v83[0] = MEMORY[0x1E0C809B0];
      v83[1] = 3221225472;
      v83[2] = __48__BWFigVideoCaptureDevice__updateSensorRawPools__block_invoke;
      v83[3] = &unk_1E4925E08;
      v83[4] = v1;
      v83[5] = &v105;
      objc_msgSend(v67, "insertObject:atIndex:", objc_msgSend(*(id *)(v4 + 2024), "numberWithInt:", v8), objc_msgSend(v67, "indexOfObject:inSortedRange:options:usingComparator:", objc_msgSend(*(id *)(v4 + 2024), "numberWithInt:", v8), 0, objc_msgSend(v67, "count"), 1024, v83));
    }
    v72 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v104, 16);
    if (v72)
      continue;
    break;
  }
  if ((v63 & 1) == 0)
    goto LABEL_45;
  v27 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v28 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v79, v101, 16);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)v80;
    do
    {
      for (j = 0; j != v29; ++j)
      {
        if (*(_QWORD *)v80 != v30)
          objc_enumerationMutation(v67);
        objc_msgSend(v27, "addObject:", objc_msgSend((id)objc_msgSend(*(id *)(v1 + 160), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v79 + 1) + 8 * j)), "cvPixelBufferPool"));
      }
      v29 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v79, v101, 16);
    }
    while (v29);
  }
  if (objc_msgSend((id)v1, "isBravoVariant"))
  {
    v32 = (void *)objc_msgSend(*(id *)(v1 + 552), "syncGroup");
    v33 = (_QWORD *)MEMORY[0x1E0D08200];
  }
  else
  {
    v32 = (void *)objc_msgSend(*(id *)(v1 + 504), "stream");
    v33 = (_QWORD *)MEMORY[0x1E0D07760];
  }
  v34 = objc_msgSend(v32, "setProperty:value:", *v33, v27);
  if ((_DWORD)v34)
  {
    v26 = v34;
  }
  else
  {
LABEL_45:
    v71 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v67, "count"));
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v73 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v75, v100, 16);
    if (v73)
    {
      v69 = *(_QWORD *)v76;
      v35 = v1 + 168;
      do
      {
        for (k = 0; k != v73; ++k)
        {
          if (*(_QWORD *)v76 != v69)
            objc_enumerationMutation(v67);
          v37 = objc_msgSend(*(id *)(*((_QWORD *)&v75 + 1) + 8 * k), "intValue");
          v38 = (void *)objc_msgSend(*(id *)(v1 + 160), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v37));
          v39 = (*((_DWORD *)&v105 + (int)v37) + *(_DWORD *)(v35 + 4 * (int)v37));
          if (dword_1ECFE9470)
          {
            v85 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v41 = v85;
            if (os_log_type_enabled(v40, type))
              v42 = v41;
            else
              v42 = v41 & 0xFFFFFFFE;
            if (v42)
            {
              v43 = FigCaptureSourceSensorRawHighResolutionFlavorToShortString((int)v37);
              v44 = objc_msgSend(v38, "capacity");
              v45 = *(_DWORD *)(v35 + 4 * (int)v37);
              v46 = *((_DWORD *)&v105 + (int)v37);
              v90 = 136316418;
              v91 = "-[BWFigVideoCaptureDevice _updateSensorRawPools]";
              v92 = 2112;
              v93 = v43;
              v94 = 2048;
              *(_QWORD *)v95 = v44;
              *(_WORD *)&v95[8] = 1024;
              *(_DWORD *)v96 = v39;
              *(_WORD *)&v96[4] = 1024;
              v97 = v45;
              v98 = 1024;
              v99 = v46;
              LODWORD(v57) = 50;
              v56 = &v90;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          objc_msgSend(v38, "flushToMinimumCapacity:", v39, v56, v57);
          objc_msgSend(v38, "setCapacity:", v39);
          v47 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(v35 + 4 * (int)v37));
          objc_msgSend(v71, "setObject:forKeyedSubscript:", v47, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", objc_msgSend(v38, "cvPixelBufferPool")));
          v1 = v74;
        }
        v73 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v75, v100, 16);
      }
      while (v73);
    }
    if (objc_msgSend((id)v1, "isBravoVariant"))
    {
      v48 = (void *)objc_msgSend(*(id *)(v1 + 552), "syncGroup");
      v49 = (_QWORD *)MEMORY[0x1E0D08210];
    }
    else
    {
      v48 = (void *)objc_msgSend(*(id *)(v1 + 504), "stream");
      v49 = (_QWORD *)MEMORY[0x1E0D07770];
    }
    v26 = objc_msgSend(v48, "setProperty:value:", *v49, v71);
    if (!(_DWORD)v26)
      goto LABEL_63;
  }
LABEL_65:
  FigDebugAssert3();
LABEL_63:
  os_unfair_lock_unlock(lock);
  return v26;
}

void __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_213(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 2084);
  v4 = *(_DWORD *)(v2 + 2088);
  *(_DWORD *)(v2 + 2084) = v4;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (v4 - 5) < 3;
  if (v3 != v4 && dword_1ECFE9470 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  -[BWFigVideoCaptureDevice _updateStreamingImageIntentTo:from:masterPortType:](*(_QWORD *)(a1 + 32), v4, v3, *(void **)(a1 + 40));
  if (v4 == 8 && !*(_BYTE *)(*(_QWORD *)(a1 + 32) + 3699))
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3816) = -[BWActionCameraFlickerAvoidanceMonitor initWithDefaultMaxExposureDurationFrameworkOverrideByPortType:]([BWActionCameraFlickerAvoidanceMonitor alloc], "initWithDefaultMaxExposureDurationFrameworkOverrideByPortType:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2112));
}

void __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_215(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, void *);
  void *v7;
  id v8;
  id location;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 4136);
  if (v2)

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 4136) = objc_alloc_init(BWDeviceThermalMonitor);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v3 = *(void **)(*(_QWORD *)(a1 + 32) + 4136);
  v4 = MEMORY[0x1E0C809B0];
  v5 = 3221225472;
  v6 = __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_2;
  v7 = &unk_1E49207E0;
  objc_copyWeak(&v8, &location);
  objc_msgSend(v3, "setThermalHandler:", &v4);
  if ((int)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 4136), "thermalLevel", v4, v5, v6, v7) >= 2)
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 4128) = *(_QWORD *)(a1 + 40);
  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

uint64_t __52__BWFigVideoCaptureDevice__deviceWillStartStreaming__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result;
  uint64_t v4;

  result = (uint64_t)objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    if (a2)
    {
      v4 = result;
      if (!*(_QWORD *)(result + 4128))
      {
        result = objc_msgSend(a2, "thermalLevel");
        if ((int)result >= 2)
        {
          result = mach_absolute_time();
          *(_QWORD *)(v4 + 4128) = result;
        }
      }
    }
  }
  return result;
}

uint64_t __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_teardownAutoFocusSampleBufferProcessor");
}

void __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const os_unfair_lock *v4;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v11;
  NSObject *v12;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 2084);
  *(_DWORD *)(v2 + 2084) = 0;
  v4 = *(const os_unfair_lock **)(a1 + 32);
  if (v4[522]._os_unfair_lock_opaque != 3)
    goto LABEL_15;
  v5 = -[BWFigVideoCaptureDevice _globalToneMappingEnabled](v4);
  v6 = *(_QWORD *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 2176);
    if (v8 == 2)
      v7 = 2;
    else
      v7 = v8 == 1;
  }
  *(_DWORD *)(v6 + 2088) = v7;
  if ((-[BWFigVideoCaptureDevice _globalToneMappingEnabled](*(const os_unfair_lock **)(a1 + 32)) & 1) != 0)
  {
    if (!dword_1ECFE9470)
      goto LABEL_15;
LABEL_14:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_15;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 2176))
    v9 = dword_1ECFE9470 == 0;
  else
    v9 = 1;
  if (!v9)
    goto LABEL_14;
LABEL_15:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  if (v3)
    v11 = dword_1ECFE9470 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  -[BWFigVideoCaptureDevice _updateStreamingImageIntentTo:from:masterPortType:](*(_QWORD *)(a1 + 32), 0, v3, *(void **)(a1 + 40));

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3816) = 0;
}

- (const)_globalToneMappingEnabled
{
  const os_unfair_lock *v1;
  void *v2;

  if (result)
  {
    v1 = result;
    os_unfair_lock_assert_owner(result + 489);
    v2 = *(void **)&v1[536]._os_unfair_lock_opaque;
    result = (const os_unfair_lock *)(LOBYTE(v1[535]._os_unfair_lock_opaque) != 0);
    if (v2)
      return (const os_unfair_lock *)objc_msgSend(v2, "BOOLValue");
  }
  return result;
}

void __50__BWFigVideoCaptureDevice__deviceDidStopStreaming__block_invoke_3(uint64_t a1)
{

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2560) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2568) = 0;
}

- (void)_reportAPSOffsetEstimatorInfo
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 && *(_QWORD *)(a1 + 3256))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v2 = *(void **)(a1 + 560);
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v12;
      v6 = *MEMORY[0x1E0D073C8];
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v2);
          v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(*(id *)(a1 + 3256), "containsObject:", objc_msgSend(v8, "portType")))
          {
            v10 = 0;
            v9 = objc_msgSend((id)objc_msgSend(v8, "stream"), "getProperty:error:", v6, &v10);
            if (v9)
              +[BWAutoFocusPositionSensorMonitor processAPSOffsetEstimatorInfo:portType:](BWAutoFocusPositionSensorMonitor, "processAPSOffsetEstimatorInfo:portType:", v9, objc_msgSend(v8, "portType"));
          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v4);
    }

    *(_QWORD *)(a1 + 3256) = 0;
  }
}

- (uint64_t)_reportDeskViewStreamingSessionCoreAnalyticsData
{
  uint64_t v1;
  BWStreamingSessionAnalyticsPayload *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = objc_alloc_init(BWStreamingSessionAnalyticsPayload);
    -[BWStreamingSessionAnalyticsPayload setActiveDeviceMask:](v2, "setActiveDeviceMask:", *(unsigned int *)(v1 + 136));
    -[BWStreamingSessionAnalyticsPayload setDeviceType:](v2, "setDeviceType:", 14);
    -[BWStreamingSessionAnalyticsPayload setContinuityCameraClientDeviceClass:](v2, "setContinuityCameraClientDeviceClass:", objc_msgSend(*(id *)(v1 + 504), "continuityCameraClientDeviceClass"));
    mach_absolute_time();
    -[BWStreamingSessionAnalyticsPayload setStreamingTime:](v2, "setStreamingTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setClientApplicationID:](v2, "setClientApplicationID:", *(_QWORD *)(v1 + 80));
    if (dword_1ECFE9470)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance", v4, v5), "sendEvent:", v2);
  }
  return result;
}

- (uint64_t)_reportStreamingSessionCoreAnalyticsData
{
  uint64_t v1;
  BWStreamingSessionAnalyticsPayload *v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  int64_t v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  void *v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v35;
  uint64_t v36;
  CMTime time2;
  CMTime time1;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = objc_alloc_init(BWStreamingSessionAnalyticsPayload);
    -[BWStreamingSessionAnalyticsPayload setActiveDeviceMask:](v2, "setActiveDeviceMask:", *(unsigned int *)(v1 + 136));
    -[BWStreamingSessionAnalyticsPayload setDeviceType:](v2, "setDeviceType:", *(unsigned int *)(v1 + 492));
    -[BWStreamingSessionAnalyticsPayload setDevicePosition:](v2, "setDevicePosition:", *(unsigned int *)(v1 + 520));
    -[BWStreamingSessionAnalyticsPayload setStartingCameraPosture:](v2, "setStartingCameraPosture:", *(unsigned int *)(v1 + 3348));
    -[BWStreamingSessionAnalyticsPayload setStreamingStartExifOrientation:](v2, "setStreamingStartExifOrientation:", *(unsigned int *)(v1 + 3352));
    v3 = mach_absolute_time();
    v4 = FigHostTimeToNanoseconds();
    -[BWStreamingSessionAnalyticsPayload setStreamingTime:](v2, "setStreamingTime:", v4 / 0xF4240);
    if (*(_BYTE *)(v1 + 293))
      *(_QWORD *)(v1 + 304) += v3 - *(_QWORD *)(v1 + 296);
    if (*(_BYTE *)(v1 + 258))
      *(_QWORD *)(v1 + 272) += v3 - *(_QWORD *)(v1 + 264);
    if (*(_BYTE *)(v1 + 361))
      *(_QWORD *)(v1 + 376) += v3 - *(_QWORD *)(v1 + 368);
    if (*(_BYTE *)(v1 + 189))
      *(_QWORD *)(v1 + 208) += v3 - *(_QWORD *)(v1 + 200);
    if (*(_BYTE *)(v1 + 325))
      *(_QWORD *)(v1 + 336) += v3 - *(_QWORD *)(v1 + 328);
    if (*(_BYTE *)(v1 + 326))
      *(_QWORD *)(v1 + 352) += v3 - *(_QWORD *)(v1 + 344);
    -[BWFigVideoCaptureDevice _updateOrientationTotalTimes:](v1, v3);
    if (*(_DWORD *)(v1 + 3336))
    {
      -[BWStreamingSessionAnalyticsPayload setNumberOfPhotoCaptures:](v2, "setNumberOfPhotoCaptures:");
      -[BWStreamingSessionAnalyticsPayload setNumberOfBurstPhotoCaptures:](v2, "setNumberOfBurstPhotoCaptures:", *(unsigned int *)(v1 + 3340));
      -[BWStreamingSessionAnalyticsPayload setNumberOfBalancedPhotoCaptures:](v2, "setNumberOfBalancedPhotoCaptures:", *(unsigned int *)(v1 + 3344));
      -[BWStreamingSessionAnalyticsPayload setNumberOfButtonMashingCapturesAtRate0:](v2, "setNumberOfButtonMashingCapturesAtRate0:", *(unsigned int *)(v1 + 3376));
      -[BWStreamingSessionAnalyticsPayload setNumberOfButtonMashingEventsAtRate0:](v2, "setNumberOfButtonMashingEventsAtRate0:", *(unsigned int *)(v1 + 3384));
      -[BWStreamingSessionAnalyticsPayload setNumberOfButtonMashingCapturesAtRate1:](v2, "setNumberOfButtonMashingCapturesAtRate1:", *(unsigned int *)(v1 + 3380));
      -[BWStreamingSessionAnalyticsPayload setNumberOfButtonMashingEventsAtRate1:](v2, "setNumberOfButtonMashingEventsAtRate1:", *(unsigned int *)(v1 + 3388));
      -[BWStreamingSessionAnalyticsPayload setLongestButtonMashingEventAtRate0:](v2, "setLongestButtonMashingEventAtRate0:", *(unsigned int *)(v1 + 3396));
      -[BWStreamingSessionAnalyticsPayload setLongestButtonMashingEventAtRate1:](v2, "setLongestButtonMashingEventAtRate1:", *(unsigned int *)(v1 + 3400));
      if (*(_DWORD *)(v1 + 3356))
        -[BWStreamingSessionAnalyticsPayload setTimeToFirstPhotoCapture:](v2, "setTimeToFirstPhotoCapture:");
      if (*(_DWORD *)(v1 + 3372))
        -[BWStreamingSessionAnalyticsPayload setMaxTimeSinceLastPhotoCapture:](v2, "setMaxTimeSinceLastPhotoCapture:");
      if (*(_DWORD *)(v1 + 3368) != -1)
        -[BWStreamingSessionAnalyticsPayload setMinTimeSinceLastPhotoCapture:](v2, "setMinTimeSinceLastPhotoCapture:");
    }
    -[BWStreamingSessionAnalyticsPayload setClientApplicationID:](v2, "setClientApplicationID:", *(_QWORD *)(v1 + 80));
    -[BWStreamingSessionAnalyticsPayload setSunburnDetectOccurred:](v2, "setSunburnDetectOccurred:", *(_QWORD *)(v1 + 3272));
    -[BWStreamingSessionAnalyticsPayload setDegradedAutoFocusStatus:](v2, "setDegradedAutoFocusStatus:", *(_QWORD *)(v1 + 3288));
    -[BWStreamingSessionAnalyticsPayload setApsMaxDynamicGainDerate:](v2, "setApsMaxDynamicGainDerate:", *(_QWORD *)(v1 + 3296));
    -[BWStreamingSessionAnalyticsPayload setApsMaxTopEndDynamicBuffer:](v2, "setApsMaxTopEndDynamicBuffer:", *(_QWORD *)(v1 + 3304));
    -[BWStreamingSessionAnalyticsPayload setNumberOfSphereJitterDetectAttempts:](v2, "setNumberOfSphereJitterDetectAttempts:", *(_QWORD *)(v1 + 3312));
    -[BWStreamingSessionAnalyticsPayload setNumberOfSphereJitterDetects:](v2, "setNumberOfSphereJitterDetects:", *(_QWORD *)(v1 + 3320));
    -[BWStreamingSessionAnalyticsPayload setActuatorVendor:](v2, "setActuatorVendor:", *(_QWORD *)(v1 + 3416));
    -[BWStreamingSessionAnalyticsPayload setSphereMode:](v2, "setSphereMode:", *(_QWORD *)(v1 + 3424));
    if (*(_DWORD *)(v1 + 180))
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightCameraUsageTypeMask:](v2, "setTimeOfFlightCameraUsageTypeMask:");
    if (*(_DWORD *)(v1 + 184))
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightCameraProjectorModeMask:](v2, "setTimeOfFlightCameraProjectorModeMask:");
    if (*(float *)(v1 + 3432) != 3.4028e38)
      -[BWStreamingSessionAnalyticsPayload setStructuredLightIdleTemperatureFirstReading:](v2, "setStructuredLightIdleTemperatureFirstReading:");
    if (*(float *)(v1 + 3436) != 3.4028e38)
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureFirstReading:](v2, "setStructuredLightActiveTemperatureFirstReading:");
    if (*(float *)(v1 + 3440) != 3.4028e38)
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureLastReading:](v2, "setStructuredLightActiveTemperatureLastReading:");
    if (objc_msgSend(*(id *)(v1 + 3448), "numberOfSamples"))
    {
      objc_msgSend(*(id *)(v1 + 3448), "max");
      v6 = v5;
      objc_msgSend(*(id *)(v1 + 3448), "min");
      v8 = v6 - v7;
      *(float *)&v8 = v8;
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureRange:](v2, "setStructuredLightActiveTemperatureRange:", v8);
      objc_msgSend(*(id *)(v1 + 3448), "average");
      *(float *)&v9 = v9;
      -[BWStreamingSessionAnalyticsPayload setStructuredLightActiveTemperatureAverage:](v2, "setStructuredLightActiveTemperatureAverage:", v9);
    }
    if (objc_msgSend(*(id *)(v1 + 3456), "numberOfSamples"))
    {
      objc_msgSend(*(id *)(v1 + 3456), "max");
      v11 = v10;
      objc_msgSend(*(id *)(v1 + 3456), "min");
      v13 = v11 - v12;
      *(float *)&v13 = v13;
      -[BWStreamingSessionAnalyticsPayload setInfaredSensorTemperatureRange:](v2, "setInfaredSensorTemperatureRange:", v13);
      objc_msgSend(*(id *)(v1 + 3456), "average");
      *(float *)&v14 = v14;
      -[BWStreamingSessionAnalyticsPayload setInfaredSensorTemperatureAverage:](v2, "setInfaredSensorTemperatureAverage:", v14);
    }
    -[BWStreamingSessionAnalyticsPayload setSensorTemperatureStats:](v2, "setSensorTemperatureStats:", *(_QWORD *)(v1 + 3504));
    if (*(_QWORD *)(v1 + 3464) || *(_QWORD *)(v1 + 3472))
    {
      -[BWStreamingSessionAnalyticsPayload setInfraredProjectorUptimeInMsForLowPowerSparse:](v2, "setInfraredProjectorUptimeInMsForLowPowerSparse:", *(_QWORD *)(v1 + 3464) / 0x3E8uLL);
      -[BWStreamingSessionAnalyticsPayload setInfraredProjectorUptimeInMsForHighPowerSparse:](v2, "setInfraredProjectorUptimeInMsForHighPowerSparse:", *(_QWORD *)(v1 + 3472) / 0x3E8uLL);
    }
    v15 = (int)objc_msgSend((id)v1, "systemPressureLevel");
    v16 = *(_QWORD *)(v1 + 3512) + FigHostTimeToNanoseconds() / 0xF4240uLL * v15;
    *(_QWORD *)(v1 + 3512) = v16;
    if (v4 >= 0xF4240)
    {
      *(float *)&v17 = (float)(v16 / (uint64_t)(v4 / 0xF4240));
      -[BWStreamingSessionAnalyticsPayload setAverageSystemPressureLevel:](v2, "setAverageSystemPressureLevel:", v17);
    }
    -[BWStreamingSessionAnalyticsPayload setMaxSystemPressureLevel:](v2, "setMaxSystemPressureLevel:", *(unsigned int *)(v1 + 3528));
    -[BWStreamingSessionAnalyticsPayload setSystemPressureFactors:](v2, "setSystemPressureFactors:", *(unsigned int *)(v1 + 3544));
    if ((*(_QWORD *)(v1 + 3536) & 0x8000000000000000) == 0)
      -[BWStreamingSessionAnalyticsPayload setTimeToCriticalSystemPressureInMS:](v2, "setTimeToCriticalSystemPressureInMS:");
    -[BWStreamingSessionAnalyticsPayload setOrientationPortraitTime:](v2, "setOrientationPortraitTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setOrientationLandscapeTime:](v2, "setOrientationLandscapeTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setOrientationFaceUpTime:](v2, "setOrientationFaceUpTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setOrientationFaceDownTime:](v2, "setOrientationFaceDownTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setCinematicFramingSupported:](v2, "setCinematicFramingSupported:", *(unsigned __int8 *)(v1 + 188));
    -[BWStreamingSessionAnalyticsPayload setCinematicFramingEnabled:](v2, "setCinematicFramingEnabled:", *(unsigned __int8 *)(v1 + 189));
    -[BWStreamingSessionAnalyticsPayload setCinematicFramingControlMode:](v2, "setCinematicFramingControlMode:", *(unsigned int *)(v1 + 192));
    -[BWStreamingSessionAnalyticsPayload setCinematicFramingTime:](v2, "setCinematicFramingTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setBackgroundBlurSupported:](v2, "setBackgroundBlurSupported:", *(unsigned __int8 *)(v1 + 257));
    -[BWStreamingSessionAnalyticsPayload setBackgroundBlurEnabled:](v2, "setBackgroundBlurEnabled:", *(unsigned __int8 *)(v1 + 258));
    -[BWStreamingSessionAnalyticsPayload setBackgroundBlurTime:](v2, "setBackgroundBlurTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    LODWORD(v18) = *(_DWORD *)(v1 + 288);
    -[BWStreamingSessionAnalyticsPayload setBackgroundBlurAperture:](v2, "setBackgroundBlurAperture:", v18);
    -[BWStreamingSessionAnalyticsPayload setBackgroundBlurApertureChanged:](v2, "setBackgroundBlurApertureChanged:", *(unsigned __int8 *)(v1 + 284));
    -[BWStreamingSessionAnalyticsPayload setStudioLightingSupported:](v2, "setStudioLightingSupported:", *(unsigned __int8 *)(v1 + 292));
    -[BWStreamingSessionAnalyticsPayload setStudioLightingEnabled:](v2, "setStudioLightingEnabled:", *(unsigned __int8 *)(v1 + 293));
    -[BWStreamingSessionAnalyticsPayload setStudioLightingTime:](v2, "setStudioLightingTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    LODWORD(v19) = *(_DWORD *)(v1 + 320);
    -[BWStreamingSessionAnalyticsPayload setStudioLightingIntensity:](v2, "setStudioLightingIntensity:", v19);
    -[BWStreamingSessionAnalyticsPayload setStudioLightingIntensityChanged:](v2, "setStudioLightingIntensityChanged:", *(unsigned __int8 *)(v1 + 316));
    -[BWStreamingSessionAnalyticsPayload setReactionEffectsSupported:](v2, "setReactionEffectsSupported:", *(unsigned __int8 *)(v1 + 324));
    -[BWStreamingSessionAnalyticsPayload setReactionEffectsEnabled:](v2, "setReactionEffectsEnabled:", *(unsigned __int8 *)(v1 + 325));
    -[BWStreamingSessionAnalyticsPayload setGesturesEnabled:](v2, "setGesturesEnabled:", *(unsigned __int8 *)(v1 + 326));
    v20 = *(void **)(v1 + 4064);
    if (v20)
    {
      v21 = (void *)objc_msgSend(v20, "referencedObject");
    }
    else if (objc_msgSend((id)v1, "isBravoVariant"))
    {
      v21 = (void *)objc_msgSend((id)v1, "masterCaptureStream");
    }
    else
    {
      v21 = *(void **)(v1 + 504);
    }
    -[BWStreamingSessionAnalyticsPayload setReactionCount:](v2, "setReactionCount:", objc_msgSend(v21, "reactionCount"));
    -[BWStreamingSessionAnalyticsPayload setReactionEffectsEnabledTime:](v2, "setReactionEffectsEnabledTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setGesturesEnabledTime:](v2, "setGesturesEnabledTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setBackgroundReplacementSupported:](v2, "setBackgroundReplacementSupported:", *(unsigned __int8 *)(v1 + 360));
    -[BWStreamingSessionAnalyticsPayload setBackgroundReplacementEnabled:](v2, "setBackgroundReplacementEnabled:", *(unsigned __int8 *)(v1 + 361));
    -[BWStreamingSessionAnalyticsPayload setBackgroundReplacementTime:](v2, "setBackgroundReplacementTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    -[BWStreamingSessionAnalyticsPayload setBackgroundReplacementPixelBufferChanged:](v2, "setBackgroundReplacementPixelBufferChanged:", *(unsigned __int8 *)(v1 + 384));
    -[BWStreamingSessionAnalyticsPayload setCinematicVideoEnabled:](v2, "setCinematicVideoEnabled:", *(unsigned __int8 *)(v1 + 3744));
    LODWORD(v22) = *(_DWORD *)(v1 + 3792);
    -[BWStreamingSessionAnalyticsPayload setCinematicVideoAverageRenderingTime:](v2, "setCinematicVideoAverageRenderingTime:", v22);
    LODWORD(v23) = *(_DWORD *)(v1 + 3796);
    -[BWStreamingSessionAnalyticsPayload setCinematicVideoWorstCaseRenderingTime:](v2, "setCinematicVideoWorstCaseRenderingTime:", v23);
    if ((*(_BYTE *)(v1 + 3900) & 1) != 0)
    {
      if ((*(_BYTE *)(v1 + 1276) & 1) != 0)
      {
        time1 = *(CMTime *)(v1 + 1264);
        time2 = *(CMTime *)(v1 + 3888);
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          time1 = *(CMTime *)(v1 + 1264);
          -[BWFigVideoCaptureDevice _updateTimeOfFlightStreamingTime:](v1, &time1, *(float *)&time1.value);
        }
      }
      LODWORD(v24) = vcvtas_u32_f32(*(float *)(v1 + 3868) * 1000.0);
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightAssistedAutoFocusStreamingTimeAt0FPS:](v2, "setTimeOfFlightAssistedAutoFocusStreamingTimeAt0FPS:", v24);
      LODWORD(v25) = vcvtas_u32_f32(*(float *)(v1 + 3872) * 1000.0);
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightAssistedAutoFocusStreamingTimeAt1FPS:](v2, "setTimeOfFlightAssistedAutoFocusStreamingTimeAt1FPS:", v25);
      LODWORD(v26) = vcvtas_u32_f32(*(float *)(v1 + 3876) * 1000.0);
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightAssistedAutoFocusStreamingTimeAt8FPS:](v2, "setTimeOfFlightAssistedAutoFocusStreamingTimeAt8FPS:", v26);
      LODWORD(v27) = vcvtas_u32_f32(*(float *)(v1 + 3880) * 1000.0);
      -[BWStreamingSessionAnalyticsPayload setTimeOfFlightAssistedAutoFocusStreamingTimeAtOtherFPS:](v2, "setTimeOfFlightAssistedAutoFocusStreamingTimeAtOtherFPS:", v27);
    }
    -[BWStreamingSessionAnalyticsPayload setCaptureDeviceType:](v2, "setCaptureDeviceType:", BWUtilitiesUnderlyingDeviceTypeFromPortType(*(void **)(v1 + 512), *(_DWORD *)(v1 + 492)));
    -[BWStreamingSessionAnalyticsPayload setFaceDrivenAEAFEnabledByDefault:](v2, "setFaceDrivenAEAFEnabledByDefault:", *(unsigned __int8 *)(v1 + 448));
    if (*(_BYTE *)(v1 + 448))
    {
      -[BWStreamingSessionAnalyticsPayload setFaceDrivenAEDisabledCount:](v2, "setFaceDrivenAEDisabledCount:", *(unsigned int *)(v1 + 468));
      -[BWStreamingSessionAnalyticsPayload setFaceDrivenAFDisabledCount:](v2, "setFaceDrivenAFDisabledCount:", *(unsigned int *)(v1 + 464));
      -[BWStreamingSessionAnalyticsPayload setMaxFacesDetected:](v2, "setMaxFacesDetected:", *(unsigned int *)(v1 + 472));
      objc_msgSend(*(id *)(v1 + 480), "min");
      *(float *)&v29 = v29;
      -[BWStreamingSessionAnalyticsPayload setMinLuxValue:](v2, "setMinLuxValue:", v29);
      objc_msgSend(*(id *)(v1 + 480), "max");
      *(float *)&v30 = v30;
      -[BWStreamingSessionAnalyticsPayload setMaxLuxValue:](v2, "setMaxLuxValue:", v30);
      objc_msgSend(*(id *)(v1 + 480), "average");
      *(float *)&v31 = v31;
      -[BWStreamingSessionAnalyticsPayload setAverageLuxValue:](v2, "setAverageLuxValue:", v31);
      -[BWStreamingSessionAnalyticsPayload setPhotoFormat:](v2, "setPhotoFormat:", *(unsigned __int8 *)(v1 + 488));
    }
    if (*(_BYTE *)(v1 + 1472))
    {
      LODWORD(v28) = *(_DWORD *)(v1 + 1476);
      -[BWStreamingSessionAnalyticsPayload setDepthMaxFrameRate:](v2, "setDepthMaxFrameRate:", v28);
      -[BWStreamingSessionAnalyticsPayload setDepthFormatDimensionWidth:](v2, "setDepthFormatDimensionWidth:", *(unsigned int *)(v1 + 4012));
      -[BWStreamingSessionAnalyticsPayload setDepthFormatDimensionHeight:](v2, "setDepthFormatDimensionHeight:", *(unsigned int *)(v1 + 4016));
      -[BWStreamingSessionAnalyticsPayload setDepthPixelFormat:](v2, "setDepthPixelFormat:", *(unsigned int *)(v1 + 4020));
      -[BWStreamingSessionAnalyticsPayload setDepthDataFiltered:](v2, "setDepthDataFiltered:", *(unsigned __int8 *)(v1 + 4024));
    }
    -[BWStreamingSessionAnalyticsPayload setContinuityCameraClientDeviceClass:](v2, "setContinuityCameraClientDeviceClass:", objc_msgSend(*(id *)(v1 + 504), "continuityCameraClientDeviceClass"));
    if (*(uint64_t *)(v1 + 4128) >= 1)
      -[BWStreamingSessionAnalyticsPayload setThermalThrottledTime:](v2, "setThermalThrottledTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
    if (*(_QWORD *)(v1 + 504))
    {
      -[BWStreamingSessionAnalyticsPayload setPixelFormat:](v2, "setPixelFormat:", *(unsigned int *)(v1 + 4176));
      -[BWStreamingSessionAnalyticsPayload setVideoDimensions:](v2, "setVideoDimensions:", *(_QWORD *)(v1 + 4180));
      -[BWStreamingSessionAnalyticsPayload setHighlightRecoveryEnabled:](v2, "setHighlightRecoveryEnabled:", *(unsigned __int8 *)(v1 + 4188));
      objc_msgSend(*(id *)(v1 + 504), "minimumSupportedFrameRate");
      -[BWStreamingSessionAnalyticsPayload setMinimumSupportedFrameRate:](v2, "setMinimumSupportedFrameRate:");
      objc_msgSend(*(id *)(v1 + 504), "maximumSupportedFrameRate");
      -[BWStreamingSessionAnalyticsPayload setMaximumSupportedFrameRate:](v2, "setMaximumSupportedFrameRate:");
      objc_msgSend(*(id *)(v1 + 504), "minimumFrameRate");
      -[BWStreamingSessionAnalyticsPayload setMinimumFrameRate:](v2, "setMinimumFrameRate:");
      objc_msgSend(*(id *)(v1 + 504), "maximumFrameRate");
      -[BWStreamingSessionAnalyticsPayload setMaximumFrameRate:](v2, "setMaximumFrameRate:");
      v32 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v1 + 504), "supportedFormats"), "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(v1 + 504), "activeFormatIndex"));
      if (v32)
      {
        v33 = v32;
        objc_msgSend((id)objc_msgSend(v32, "objectForKeyedSubscript:", *MEMORY[0x1E0D08820]), "floatValue");
        -[BWStreamingSessionAnalyticsPayload setFieldOfView:](v2, "setFieldOfView:");
        -[BWStreamingSessionAnalyticsPayload setBinned:](v2, "setBinned:", objc_msgSend((id)objc_msgSend(v33, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue"));
      }
      -[BWStreamingSessionAnalyticsPayload setColorSpace:](v2, "setColorSpace:", *(unsigned int *)(v1 + 4192));
    }
    -[BWStreamingSessionAnalyticsPayload setClientIsVOIP:](v2, "setClientIsVOIP:", *(unsigned __int8 *)(v1 + 4189));
    if (dword_1ECFE9470)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance", v35, v36), "sendEvent:", v2);
  }
  return result;
}

- (id)_sensorRawPoolsRequirements
{
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _BYTE v27[128];
  _BYTE v28[128];
  _QWORD v29[7];

  v1 = a1;
  v29[6] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v26 = 0;
    if (objc_msgSend(a1, "isBravoVariant"))
    {
      v2 = (void *)objc_msgSend(v1[69], "syncGroup");
      v1 = (id *)objc_msgSend(v2, "getProperty:error:", *MEMORY[0x1E0D08198], &v26);
      if (v26)
        goto LABEL_23;
    }
    else
    {
      v3 = (void *)objc_msgSend(v1[63], "stream");
      v1 = (id *)objc_msgSend(v3, "getProperty:error:", *MEMORY[0x1E0D07380], &v26);
      if (v26)
      {
LABEL_23:
        FigDebugAssert3();
        return v1;
      }
    }
    if (objc_msgSend(v1, "count"))
    {
      v4 = *MEMORY[0x1E0CA90E0];
      v29[0] = *MEMORY[0x1E0CA9060];
      v29[1] = v4;
      v5 = *MEMORY[0x1E0CA8F68];
      v29[2] = *MEMORY[0x1E0CA8FD8];
      v29[3] = v5;
      v6 = *MEMORY[0x1E0CA9040];
      v29[4] = *MEMORY[0x1E0CA9048];
      v29[5] = v6;
      v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 6);
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v8 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
      if (v8)
      {
        v9 = v8;
        v10 = *(_QWORD *)v23;
        while (2)
        {
          for (i = 0; i != v9; ++i)
          {
            if (*(_QWORD *)v23 != v10)
              objc_enumerationMutation(v1);
            v12 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
            v18 = 0u;
            v19 = 0u;
            v20 = 0u;
            v21 = 0u;
            v13 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
            if (v13)
            {
              v14 = v13;
              v15 = *(_QWORD *)v19;
LABEL_14:
              v16 = 0;
              while (1)
              {
                if (*(_QWORD *)v19 != v15)
                  objc_enumerationMutation(v7);
                if (!objc_msgSend(v12, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v16)))
                  return v1;
                if (v14 == ++v16)
                {
                  v14 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
                  if (v14)
                    goto LABEL_14;
                  break;
                }
              }
            }
          }
          v9 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
          if (v9)
            continue;
          break;
        }
      }
    }
  }
  return v1;
}

uint64_t __48__BWFigVideoCaptureDevice__updateSensorRawPools__block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "objectForKeyedSubscript:", a2);
  v7 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "objectForKeyedSubscript:", a3);
  v8 = *(_QWORD *)(a1 + 32);
  LODWORD(v8) = *(_DWORD *)(v8 + 4 * (int)objc_msgSend(a2, "intValue") + 168);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = (*(_DWORD *)(v9 + 4 * (int)objc_msgSend(a2, "intValue")) + v8);
  v11 = *(_QWORD *)(a1 + 32);
  LODWORD(v11) = *(_DWORD *)(v11 + 4 * (int)objc_msgSend(a3, "intValue") + 168);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_DWORD *)(v12 + 4 * (int)objc_msgSend(a3, "intValue")) + v11;
  if (objc_msgSend(v6, "capacity") > v10 && objc_msgSend(v7, "capacity") <= (unint64_t)v13)
    return -1;
  if (objc_msgSend(v6, "capacity") <= v10 && objc_msgSend(v7, "capacity") > (unint64_t)v13)
    return 1;
  v15 = objc_msgSend(v6, "width");
  v16 = objc_msgSend(v6, "height") * v15;
  v17 = objc_msgSend(v7, "width");
  if (v16 > objc_msgSend(v7, "height") * v17)
    return -1;
  else
    return 1;
}

- (BOOL)isPortTypeUsingZoomBasedSourceSensorRaws:(id)a3
{
  os_unfair_lock_s *p_sensorRawPoolLock;
  BOOL v6;

  if (self->_multipleSensorRawBufferPoolsEnabled
    && -[NSArray containsObject:](self->_activePortTypes, "containsObject:"))
  {
    p_sensorRawPoolLock = &self->_sensorRawPoolLock;
    os_unfair_lock_lock(&self->_sensorRawPoolLock);
    if (-[NSMutableDictionary objectForKeyedSubscript:](self->_sensorRawPools, "objectForKeyedSubscript:", &unk_1E49FB7D8))
    {
      if ((objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0D05A28]) & 1) != 0)
      {
        v6 = 1;
LABEL_10:
        os_unfair_lock_unlock(p_sensorRawPoolLock);
        return v6;
      }
      if (objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0D05A30]))
      {
        v6 = -[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant");
        goto LABEL_10;
      }
    }
    v6 = 0;
    goto LABEL_10;
  }
  return 0;
}

- (int)sensorRawHighResolutionFlavorForDimensions:(id)a3
{
  NSMutableDictionary *sensorRawPools;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  int v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!self->_multipleSensorRawBufferPoolsEnabled && !self->_sensorRawPoolEnabled)
    return 0;
  os_unfair_lock_lock(&self->_sensorRawPoolLock);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  sensorRawPools = self->_sensorRawPools;
  v6 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](sensorRawPools, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(sensorRawPools);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (FigCaptureVideoDimensionsAreEqual(*(_QWORD *)&a3, objc_msgSend((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_sensorRawPools, "objectForKeyedSubscript:", v10), "dimensions")))
        {
          v11 = objc_msgSend(v10, "intValue");
          goto LABEL_13;
        }
      }
      v7 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:](sensorRawPools, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v7)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_13:
  os_unfair_lock_unlock(&self->_sensorRawPoolLock);
  return v11;
}

- (int)updateStillImageSensorRawBufferPoolsWithRetainedBufferCount:(int)a3 zoomBasedRetainedBufferCount:(int)a4 ultraHighResolutionRetainedBufferCount:(int)a5
{
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int updated;
  int v14;
  unsigned int v15;
  int v16;

  if (!self->_multipleSensorRawBufferPoolsEnabled)
  {
    if (!FigCaptureVideoDimensionsAreValid(*(_QWORD *)&self->_ultraHighResSensorRawPoolDimensions))
      -[NSMutableDictionary setObject:forKeyedSubscript:](self->_sensorRawPools, "setObject:forKeyedSubscript:", 0, &unk_1E49FB7A8);
    v10 = self->_stillImageSensorRawPoolRetainedBufferCounts[0];
    if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] != a5)
    {
      v11 = FigCaptureVideoDimensionsAreValid(*(_QWORD *)&self->_ultraHighResSensorRawPoolDimensions);
      v12 = v11;
      if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] < a5)
      {
        if (v10 != a3)
        {
          self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
          updated = -[BWFigVideoCaptureDevice _updateSensorRawPool]((uint64_t)self);
          if (updated)
          {
            v14 = updated;
            goto LABEL_30;
          }
        }
        if (v12)
        {
          self->_stillImageSensorRawPoolRetainedBufferCounts[2] = a5;
          v14 = -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool]((uint64_t)self);
          if (!v14)
            return v14;
LABEL_30:
          FigDebugAssert3();
          return v14;
        }
        return 0;
      }
      if (v11)
      {
        self->_stillImageSensorRawPoolRetainedBufferCounts[2] = a5;
        v16 = -[BWFigVideoCaptureDevice _updateUltraHighResSensorRawPool]((uint64_t)self);
        if (v16)
        {
          v14 = v16;
          goto LABEL_30;
        }
      }
    }
    if (v10 != a3)
    {
      self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
      v14 = -[BWFigVideoCaptureDevice _updateSensorRawPool]((uint64_t)self);
      if (!v14)
        return v14;
      goto LABEL_30;
    }
    return 0;
  }
  v8 = self->_stillImageSensorRawPoolRetainedBufferCounts[0];
  if (v8 != a3)
    self->_stillImageSensorRawPoolRetainedBufferCounts[0] = a3;
  if (self->_stillImageSensorRawPoolRetainedBufferCounts[1] != a4)
  {
    v9 = &self->_stillImageSensorRawPoolRetainedBufferCounts[2];
    v15 = self->_stillImageSensorRawPoolRetainedBufferCounts[2];
    self->_stillImageSensorRawPoolRetainedBufferCounts[1] = a4;
    if (v15 == a5)
      goto LABEL_19;
    goto LABEL_18;
  }
  v9 = &self->_stillImageSensorRawPoolRetainedBufferCounts[2];
  if (self->_stillImageSensorRawPoolRetainedBufferCounts[2] != a5)
  {
LABEL_18:
    *v9 = a5;
    goto LABEL_19;
  }
  if (v8 == a3)
    return 0;
LABEL_19:
  v14 = -[BWFigVideoCaptureDevice _updateSensorRawPools]((uint64_t)self);
  if (v14)
    goto LABEL_30;
  return v14;
}

uint64_t __63__BWFigVideoCaptureDevice__servicePropertyChangeNotifications___block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  _servicePropertyChangeNotifications__sAlwaysSendManualPropertyNotifications = (_DWORD)result != 0;
  return result;
}

- (BWFrameStatisticsByPortType)_copyCurrentFrameStatistics
{
  BWFrameStatisticsByPortType *v2;

  if (!a1)
    return 0;
  v2 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", objc_msgSend(*(id *)(a1 + 1960), "portTypes"));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
  objc_msgSend(*(id *)(a1 + 1960), "copyTo:", v2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
  return v2;
}

- (float)masterCaptureStreamLastFrameEIT
{
  os_unfair_lock_s *p_frameStatisticsLock;
  double v4;
  float v5;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  objc_msgSend(-[BWFrameStatisticsByPortType objectForKeyedSubscript:](self->_currentFrameStatisticsByPortType, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](-[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream"), "portType")), "eit");
  v5 = v4;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v5;
}

- (BOOL)stillImageCaptureEnabled
{
  return self->_flashScene;
}

- (id)stillImageCaptureSettingsWithSettings:(id)a3 speedOverQualityCaptureEnabled:(BOOL)a4 processingSupportProvider:(id)a5
{
  BWStillImageCaptureSettings *v9;
  BWStillImageCaptureSettings *v10;
  NSString *v11;
  BWFigVideoCaptureSynchronizedStreamsGroup *synchronizedStreamsGroup;
  BWFigVideoCaptureStream *currentMasterCaptureStream;
  int v14;
  int v15;
  id v16;
  double v17;

  objc_msgSend(*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled, "forceUpdateRearLuxLevel");
  if (*(int *)&self->_stillImageCaptureEnabled < 3)
    v9 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithSettings:]((uint64_t)self, a3);
  else
    v9 = -[BWFigVideoCaptureDevice _ubStillImageCaptureSettingsWithSettings:speedOverQualityCaptureEnabled:processingSupportProvider:]((uint64_t)self, a3, a4, a5);
  v10 = v9;
  -[BWStillImageCaptureSettings setApplicationID:](v9, "setApplicationID:", self->_applicationID);
  v11 = -[BWFigVideoCaptureStream portType](self->_currentMasterCaptureStream, "portType");
  if (!v11)
    v11 = -[BWFigVideoCaptureStream portType](self->_captureStream, "portType");
  -[BWStillImageCaptureSettings setMasterPortType:](v10, "setMasterPortType:", v11);
  objc_msgSend(a3, "scaleFactor");
  -[BWStillImageCaptureSettings setScaleFactor:](v10, "setScaleFactor:");
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setSystemPressureLevel:", -[BWFigVideoCaptureDevice systemPressureLevel](self, "systemPressureLevel"));
  synchronizedStreamsGroup = self->_synchronizedStreamsGroup;
  if (synchronizedStreamsGroup)
  {
    currentMasterCaptureStream = -[BWFigVideoCaptureSynchronizedStreamsGroup cameraControlsStatisticsMasterStream](synchronizedStreamsGroup, "cameraControlsStatisticsMasterStream");
    if (!currentMasterCaptureStream)
      currentMasterCaptureStream = self->_currentMasterCaptureStream;
  }
  else
  {
    currentMasterCaptureStream = self->_captureStream;
  }
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setCameraControlsStatisticsMaster:", BWActiveDeviceTypeFromPortType(-[BWFigVideoCaptureStream portType](currentMasterCaptureStream, "portType")));
  objc_msgSend(-[BWStillImageCaptureSettings metadata](v10, "metadata"), "setAlsLuxLevel:", objc_msgSend(*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled, "luxLevel"));
  objc_msgSend(*(id *)&self->_stillImageCaptureWithQSubSwitchingEnabled, "rearLuxLevel");
  v15 = v14;
  v16 = -[BWStillImageCaptureSettings metadata](v10, "metadata");
  LODWORD(v17) = v15;
  objc_msgSend(v16, "setAlsRearLuxLevel:", v17);
  return v10;
}

- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithSettings:(unsigned __int8)a3 speedOverQualityCaptureEnabled:(void *)a4 processingSupportProvider:
{
  void *v7;
  BWStillImageCaptureMetadata *v8;
  BWFrameStatisticsByPortType *v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  char IsDemosaicedRaw;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  BWFrameStatisticsByPortType *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v36;
  NSObject *v37;
  _BOOL4 v38;
  int v39;
  unsigned __int8 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  void *v45;
  BWStillImageCaptureSettings *v46;
  BWStillImageCaptureSettings *v47;
  BWStillImageCaptureSettings *v48;
  BWStillImageCaptureSettings *v49;
  uint64_t v50;
  BWStillImageCaptureMetadata *v51;
  uint64_t v52;
  char IsBayerRaw;
  _BOOL8 v54;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  BWFrameStatisticsByPortType *v63;
  BWStillImageCaptureMetadata *v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  os_log_type_t type;
  int v70;
  char v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (objc_msgSend((id)a1, "isBravoVariant"))
    v7 = (void *)objc_msgSend((id)a1, "masterCaptureStream");
  else
    v7 = *(void **)(a1 + 504);
  v8 = objc_alloc_init(BWStillImageCaptureMetadata);
  v78 = 0;
  v9 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics](a1);
  objc_msgSend(a2, "stillImageRequestTime");
  -[BWStillImageCaptureMetadata setStreamingTime:](v8, "setStreamingTime:", FigHostTimeToNanoseconds() / 0xF4240uLL);
  -[BWFigVideoCaptureDevice _updateCurrentStillSmartCameraState](a1);
  if (objc_msgSend(*(id *)(a1 + 3192), "isValid"))
  {
    -[BWStillImageCaptureMetadata setSmartCamVersion:](v8, "setSmartCamVersion:", *(unsigned __int16 *)(a1 + 3176));
    v10 = *(void **)(a1 + 3192);
    if (v10)
    {
      objc_msgSend(v10, "timestamp");
    }
    else
    {
      v76 = 0uLL;
      v77 = 0;
    }
    v74 = v76;
    v75 = v77;
    -[BWStillImageCaptureMetadata setSmartCamTimestamp:](v8, "setSmartCamTimestamp:", &v74);
    -[BWStillImageCaptureMetadata setSmartCamInferences:](v8, "setSmartCamInferences:", objc_msgSend(*(id *)(a1 + 3192), "inferences"));
    -[BWStillImageCaptureMetadata setIsPreviewSmartCamInferences:](v8, "setIsPreviewSmartCamInferences:", 1);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
    -[BWStillImageCaptureMetadata setSemanticStyleSceneType:](v8, "setSemanticStyleSceneType:", *(unsigned int *)(a1 + 3160));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
  }
  v11 = objc_msgSend(a2, "qualityPrioritization");
  v12 = objc_msgSend(a2, "HDRMode");
  v13 = v12;
  v15 = v11 > 1 || v12 != 0;
  if (objc_msgSend(a2, "flashMode") == 2)
    v16 = 1;
  else
    v16 = objc_msgSend(a2, "autoStereoPhotoCaptureEnabled");
  v64 = v8;
  v17 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:](a1, v7, v9, v15, v8, v16, NAN);
  if (objc_msgSend(a2, "autoDeferredProcessingEnabled"))
    v18 = -[BWDeferredCaptureContainerManager canDefer](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "canDefer");
  else
    v18 = 1;
  v73 = a3;
  v72 = 0;
  v71 = 0;
  v63 = v9;
  if (objc_msgSend(-[BWFrameStatisticsByPortType objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", objc_msgSend(v7, "portType")), "ltmCurve") == 2&& v11 > 1)
  {
    v13 = 0;
    v11 = 1;
  }
  v19 = v17;
  v60 = v13;
  v61 = v11;
  v20 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureTypeWithSettings:sceneFlags:hdrMode:qualityPrioritization:clientBracket:canDefer:primaryPortType:speedOverQualityInOut:speedOverQualityDowngradeOut:](a1, a2, v17, v13, v11, objc_msgSend(a2, "bracketType") != 0, v18, objc_msgSend(v7, "portType"), (char *)&v73, (char *)&v72);
  if ((_DWORD)v20 == 12 && *(_BYTE *)(a1 + 2057))
    objc_msgSend(v7, "activeNondisruptiveSwitchingFormatIndex");
  v21 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](a1, a2, 0, v17);
  v22 = objc_msgSend(v7, "portType");
  v23 = objc_msgSend(a2, "resolutionFlavor");
  v24 = objc_msgSend(a2, "constituentPhotoDeliveryEnabled");
  v25 = objc_msgSend(a2, "autoDeferredProcessingEnabled");
  IsDemosaicedRaw = FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a2, "rawOutputFormat"));
  v27 = v22;
  v28 = v61;
  v59 = v21;
  v29 = -[BWFigVideoCaptureDevice _ubIsRequestedHighResolutionFlavorSupportedForCaptureType:portType:qualityPrioritization:requestedHighResolutionFlavor:sceneFlags:deliverDepthData:bravoConstituentPhotoCapture:autoDeferredProcessingEnabled:canDefer:demosaicedRawRequested:isUltraHighResolutionDowngradeOut:](a1, v20, v27, v61, v23, v19, v21, v24, v25, v18, IsDemosaicedRaw, &v71);
  v30 = 0;
  if (v29)
    v30 = objc_msgSend(a2, "resolutionFlavor");
  v31 = v63;
  v32 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureFlagsForCaptureType:sceneFlags:settings:frameStatisticsByPortType:hdrMode:speedOverQuality:speedOverQualityDowngrade:qualityPrioritization:highResolutionFlavor:ultraHighResolutionDowngrade:canDefer:processingSupportProvider:zeroShutterLagFailureReasonOut:metadata:](a1, v20, v19, a2, v63, v60, v73, v72, v61, v30, v71, v18, a4, &v78, v64);
  v33 = v32;
  if ((_DWORD)v20 == 1)
  {
    v34 = v19;
  }
  else
  {
    v34 = v19;
    if (*(_DWORD *)(a1 + 1992) == 2 && v73 && *(_BYTE *)(a1 + 3204) && (v32 & 0x2000) == 0)
    {
      if (dword_1ECFE9470)
      {
        v70 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        v28 = v61;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v36 = v73;
        v31 = v63;
      }
      else
      {
        v36 = 1;
      }
      v20 = 1;
      v33 = -[BWFigVideoCaptureDevice _ubResolveStillImageCaptureFlagsForCaptureType:sceneFlags:settings:frameStatisticsByPortType:hdrMode:speedOverQuality:speedOverQualityDowngrade:qualityPrioritization:highResolutionFlavor:ultraHighResolutionDowngrade:canDefer:processingSupportProvider:zeroShutterLagFailureReasonOut:metadata:](a1, 1u, v19, a2, v31, v60, v36 != 0, v72, v28, 0, v71, v18, a4, &v78, v64);
    }
  }
  if (v78 && dword_1ECFE9470)
  {
    v70 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v31 = v63;
  }
  if (v20 <= 0xC && ((1 << v20) & 0x1CC4) != 0)
  {
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    v38 = v20 == 10;
    switch((int)v20)
    {
      case 2:
        if ((v33 & 8) == 0)
        {
          v20 = 2;
          goto LABEL_63;
        }
        v52 = objc_msgSend(a2, "settingsID");
        IsBayerRaw = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a2, "rawOutputFormat"));
        LODWORD(v20) = 2;
        v47 = -[BWFigVideoCaptureDevice _ubFlashStillImageCaptureSettingsWithID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:]((BWStillImageCaptureSettings *)a1, v52, 2, v33, v34, (uint64_t)v31, IsBayerRaw, (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"));
        goto LABEL_76;
      case 7:
        if (*(_QWORD *)(a1 + 1464))
        {
          v20 = 7;
          goto LABEL_63;
        }
        LODWORD(v20) = 7;
        v47 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _ubClientBracketStillImageCaptureSettings:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:]((id)a1, a2, 7, v33, v34, v31);
LABEL_76:
        v49 = v47;
        break;
      case 10:
      case 12:
        goto LABEL_45;
      case 11:
        LODWORD(v20) = 11;
        v47 = -[BWFigVideoCaptureDevice _ubAdaptiveStillImageCaptureSettingsWithID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, objc_msgSend(a2, "settingsID"), 11, v33, v34, v31);
        goto LABEL_76;
      default:
        goto LABEL_63;
    }
    goto LABEL_77;
  }
  if (*(_BYTE *)(a1 + 3204) || (v33 & 0x8000) != 0 || (v33 & 0x100) != 0 || (v33 & 0x80) != 0)
  {
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    v38 = 0;
    LODWORD(v20) = 1;
  }
  else
  {
    v41 = (v33 >> 2) & 1;
    if (!*(_BYTE *)(a1 + 2058))
      LOBYTE(v41) = 0;
    v42 = BYTE4(v33) & 1 | v41;
    -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, v34, v59);
    v20 = 1;
    if ((v42 & 1) == 0)
    {
LABEL_63:
      v43 = objc_msgSend(a2, "settingsID", v56, v58);
      v44 = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a2, "rawOutputFormat"));
      v45 = (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes");
      v46 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _clientBracketSettingsWithSettings:frameStatisticsByPortType:]((id *)a1, a2, v31);
      if (a2)
      {
        objc_msgSend(a2, "stillImageUserInitiatedRequestPTS");
      }
      else
      {
        v65 = 0uLL;
        v66 = 0;
      }
      v48 = v46;
      v31 = v63;
      v49 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, v43, v20, 0, v44, v45, v48, v33, &v65, (uint64_t)v63);
      -[BWStillImageCaptureSettings setSceneFlags:](v49, "setSceneFlags:", v34);
LABEL_77:
      v51 = v64;
      goto LABEL_78;
    }
    v38 = 0;
  }
LABEL_45:
  v39 = objc_msgSend(a2, "providesOriginalImage", v56, v58);
  v40 = 0;
  if (v38 && v39 && (v33 & 0x100000) != 0)
    v40 = ((v34 & 4) != 0 || v60 == 1)
       && objc_msgSend((id)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), "count") == 0;
  v50 = objc_msgSend(a2, "settingsID");
  if (a2)
  {
    objc_msgSend(a2, "stillImageUserInitiatedRequestPTS");
  }
  else
  {
    v67 = 0uLL;
    v68 = 0;
  }
  v57 = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a2, "rawOutputFormat"));
  v51 = v64;
  v49 = -[BWFigVideoCaptureDevice _ubStillImageCaptureSettingsWithID:userInitiatedRequestPTS:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:metadata:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:]((BWStillImageCaptureSettings *)a1, v50, &v67, v20, v33, v34, v31, v64, v40, v57, (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"));
LABEL_78:
  -[BWStillImageCaptureMetadata setZeroShutterLagFailureReason:](v51, "setZeroShutterLagFailureReason:", v78, v56, v58);
  if ((v33 & 0x2004) == 4 && ((v33 & 8) != 0 || *(_BYTE *)(a1 + 2058) || (v33 & 0x300000000) != 0))
  {
    -[BWStillImageCaptureMetadata setPreviewWhiteBalanceMetadataByPortType:](v51, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromFrameStatistics:masterPortType:](a1, v31, (uint64_t)-[BWStillImageCaptureSettings masterPortType](v49, "masterPortType")));
    if (!v18)
      goto LABEL_89;
  }
  else if (!v18)
  {
    goto LABEL_89;
  }
  if (objc_msgSend(a2, "autoDeferredProcessingEnabled"))
  {
    if ((_DWORD)v20 == 12)
    {
      v54 = 1;
      goto LABEL_90;
    }
    if ((_DWORD)v20 == 1 && (v33 & 0x80) != 0)
    {
      v54 = (*(_BYTE *)(a1 + 2076) & 0xA) != 0;
      goto LABEL_90;
    }
  }
LABEL_89:
  v54 = 0;
LABEL_90:
  -[BWStillImageCaptureSettings setDeliverDeferredPhotoProxyImage:](v49, "setDeliverDeferredPhotoProxyImage:", v54);
  -[BWStillImageCaptureSettings setMetadata:](v49, "setMetadata:", v51);
  return v49;
}

- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithSettings:(uint64_t)a1
{
  BWFrameStatisticsByPortType *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char IsBayerRaw;
  void *v10;
  BWStillImageCaptureSettings *v11;
  uint64_t v12;
  BWStillImageCaptureSettings *v13;
  void *v14;
  id v15;
  void *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1 || *(int *)(a1 + 2444) > 2)
    return 0;
  if (objc_msgSend((id)a1, "isBravoVariant"))
    v17 = (void *)objc_msgSend((id)a1, "masterCaptureStream");
  else
    v17 = *(void **)(a1 + 504);
  v4 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics](a1);
  v5 = -[BWFigVideoCaptureDevice _deliverDepthDataForSettings:](a1, a2);
  v24 = 0;
  v6 = -[BWFigVideoCaptureDevice _resolveStillImageCaptureTypeFromStatisticsByPortType:masterCaptureStream:flashMode:hdrMode:qualityPrioritization:stereoFusionMode:depthDataDeliveryEnabled:bravoConstituentImageDeliveryDeviceTypes:burstQualityCaptureEnabled:clientBracketMode:forSceneMonitoring:captureFlags:](a1, v4, v17, objc_msgSend(a2, "flashMode"), objc_msgSend(a2, "HDRMode"), objc_msgSend(a2, "qualityPrioritization"), objc_msgSend(a2, "bravoImageFusionMode"), v5, (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), objc_msgSend(a2, "burstQualityCaptureEnabled"), objc_msgSend(a2, "bracketType"), 0, &v24);
  v7 = objc_msgSend(a2, "settingsID");
  v8 = objc_msgSend(a2, "providesOriginalImage");
  IsBayerRaw = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a2, "rawOutputFormat"));
  v10 = (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes");
  v11 = (BWStillImageCaptureSettings *)-[BWFigVideoCaptureDevice _clientBracketSettingsWithSettings:frameStatisticsByPortType:]((id *)a1, a2, v4);
  v12 = v24;
  if (a2)
  {
    objc_msgSend(a2, "stillImageUserInitiatedRequestPTS");
  }
  else
  {
    v22 = 0uLL;
    v23 = 0;
  }
  v13 = -[BWFigVideoCaptureDevice _stillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:frameStatisticsByPortType:]((BWStillImageCaptureSettings *)a1, v7, v6, v8, IsBayerRaw, v10, v11, v12, &v22, (uint64_t)v4);
  if (objc_msgSend(*(id *)(a1 + 3192), "isValid"))
  {
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setSmartCamVersion:", *(unsigned __int16 *)(a1 + 3176));
    v14 = *(void **)(a1 + 3192);
    if (v14)
    {
      objc_msgSend(v14, "timestamp");
    }
    else
    {
      v20 = 0uLL;
      v21 = 0;
    }
    v15 = -[BWStillImageCaptureSettings metadata](v13, "metadata");
    v18 = v20;
    v19 = v21;
    objc_msgSend(v15, "setSmartCamTimestamp:", &v18);
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setSmartCamInferences:", objc_msgSend(*(id *)(a1 + 3192), "inferences"));
    objc_msgSend(-[BWStillImageCaptureSettings metadata](v13, "metadata"), "setIsPreviewSmartCamInferences:", 1);
  }
  -[BWStillImageCaptureSettings setCmioCompressedFormat:](v13, "setCmioCompressedFormat:", objc_msgSend(a2, "cmioCompressedFormat"));
  -[BWStillImageCaptureSettings setCmioHighResolutionPhotoEnabled:](v13, "setCmioHighResolutionPhotoEnabled:", objc_msgSend(a2, "cmioHighResolutionPhotoEnabled"));
  -[BWStillImageCaptureSettings setCmioFlashMode:](v13, "setCmioFlashMode:", objc_msgSend(a2, "flashMode"));
  -[BWStillImageCaptureSettings setCmioQualityPrioritization:](v13, "setCmioQualityPrioritization:", objc_msgSend(a2, "clientQualityPrioritization"));
  -[BWStillImageCaptureSettings setCmioMaxPhotoDimensions:](v13, "setCmioMaxPhotoDimensions:", objc_msgSend(a2, "cmioMaxPhotoDimensionsWidth") | (unint64_t)(objc_msgSend(a2, "cmioMaxPhotoDimensionsHeight") << 32));
  return v13;
}

- (uint64_t)_deliverDepthDataForSettings:(uint64_t)result
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    if ((objc_msgSend(a2, "depthDataDeliveryEnabled") & 1) != 0
      || (BWCIFilterArrayContainsPortraitFilters((void *)objc_msgSend(a2, "processedImageFilters")) & 1) != 0)
    {
      return 1;
    }
    else
    {
      result = objc_msgSend((id)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes"), "count");
      if (result)
      {
        result = objc_msgSend(a2, "cameraCalibrationDataDeliveryEnabled");
        if ((_DWORD)result)
          return objc_msgSend((id)objc_msgSend(*(id *)(v3 + 528), "objectForKeyedSubscript:", CFSTR("ConstituentPhotoCalibrationData")), "BOOLValue") ^ 1;
      }
    }
  }
  return result;
}

- (uint64_t)_resolveStillImageCaptureTypeFromStatisticsByPortType:(void *)a3 masterCaptureStream:(int)a4 flashMode:(int)a5 hdrMode:(int)a6 qualityPrioritization:(int)a7 stereoFusionMode:(int)a8 depthDataDeliveryEnabled:(void *)a9 bravoConstituentImageDeliveryDeviceTypes:(char)a10 burstQualityCaptureEnabled:(int)a11 clientBracketMode:(char)a12 forSceneMonitoring:(uint64_t *)a13 captureFlags:
{
  void *v17;
  _BOOL4 v20;
  _BOOL4 v22;
  int v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BOOL4 v29;
  float v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  float v38;
  float v39;
  float v40;
  BOOL v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v53;
  float v54;
  _BOOL4 v55;
  float v56;
  int v57;
  uint64_t v58;
  float v59;
  int v60;
  int v61;
  float v62;
  NSObject *v63;
  void *v64;
  float v66;
  char v67;
  int v68;
  char v69;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  char v74;
  BOOL v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  _BOOL4 v82;
  _BOOL4 v83;
  int v84;
  void *v85;
  void *v86;
  int v87;
  void *v88;
  void *v90;
  int v91;
  _QWORD v92[6];
  id v93;
  id *v94;
  uint64_t v95;
  char v96;

  if (!a1)
    return 0;
  v17 = a2;
  v20 = a4 != 2 || *(_BYTE *)(a1 + 1988) == 0;
  v82 = v20;
  v22 = a6 > 1 && *(_BYTE *)(a1 + 1989) != 0;
  v83 = v22;
  v90 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 504), "portType"));
  if ((objc_msgSend(v90, "motionDataStatus") & 8) != 0)
    v84 = 0;
  else
    v84 = objc_msgSend(*(id *)(a1 + 504), "hasSphere");
  v91 = objc_msgSend((id)a1, "isBravoVariant");
  v88 = *(void **)(a1 + 576);
  v23 = v88 == a3;
  if (objc_msgSend(a9, "count"))
  {
    v85 = a3;
    v24 = v17;
    v25 = v23;
    v26 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E49FB7A8, &unk_1E49FB8C8, 0);
    v27 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", &unk_1E49FB8E0, &unk_1E49FB7A8, 0);
    v28 = (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a9);
    if ((objc_msgSend(v28, "isEqual:", v26) & 1) != 0)
    {
      v23 = 2;
    }
    else
    {
      if (objc_msgSend(v28, "isEqual:", v27))
        v25 = 4;
      v23 = v25;
    }
    v17 = v24;
    a3 = v85;
  }
  v29 = *(_BYTE *)(a1 + 1988) != 0;
  if (a4)
  {
    v29 = *(unsigned __int8 *)(a1 + 1988) != 0;
    if (*(_BYTE *)(a1 + 1988))
    {
      if (*(_DWORD *)(a1 + 520) != 2)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2376));
        v29 = *(float *)(a1 + 2420) > 0.0;
        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2376));
      }
    }
  }
  objc_msgSend(v90, "normalizedSNR");
  if (*(_BYTE *)(a1 + 2456))
    v31 = v30 < *(float *)(a1 + 2460);
  else
    v31 = 0;
  if (a10)
    v32 = 0x4000;
  else
    v32 = 0;
  if (a4 == 1 && v29)
  {
    v34 = 2;
    goto LABEL_46;
  }
  v35 = a5 != 1 || v31;
  if (v35 != 1)
  {
    v34 = 3;
    goto LABEL_46;
  }
  if (a11)
  {
    v34 = 7;
    goto LABEL_46;
  }
  if (*(_BYTE *)(a1 + 68) || (unint64_t)objc_msgSend(v17, "frameCount") >= 4)
  {
    v42 = (void *)objc_msgSend(*(id *)(a1 + 2304), "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    v43 = objc_msgSend(v17, "objectForKeyedSubscript:", objc_msgSend(a3, "portType"));
    if (v42)
    {
      v86 = (void *)v43;
    }
    else
    {
      v42 = (void *)objc_msgSend(*(id *)(a1 + 2304), "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 504), "portType"));
      v86 = v90;
    }
    objc_msgSend(v42, "floatValue");
    v54 = v53;
    v80 = a8;
    if (a6 >= 2)
    {
      v55 = -[BWFigVideoCaptureDevice _isLowLightSceneUsingFrameStatisticsByPortType:](a1, v17);
      if (v82 || !v55 || !v29)
        goto LABEL_120;
      if (v84)
      {
        fvcd_estimateOISOutputImageSNR(v86);
      }
      else
      {
        objc_msgSend(v86, "normalizedSNR");
        v56 = v66 + 4.7712;
      }
      if (v56 >= v54)
      {
LABEL_120:
        v29 = 0;
        if (v55)
        {
          v87 = v84 ^ 1;
          v55 = 1;
LABEL_124:
          v67 = a5 != 2 || v31;
          if ((v67 & 1) != 0)
          {
            v68 = 0;
          }
          else
          {
            v93 = 0;
            -[BWFigVideoCaptureDevice _copyAutofocusProcessorProperty:propertyValueOut:](a1, 0x1E4942018, (uint64_t)&v93);
            v68 = objc_msgSend(v93, "BOOLValue");

          }
          v69 = v83;
          if (v83)
          {
            v70 = objc_msgSend(a9, "count");
            v69 = 0;
            if (!v70 && v88 != a3)
            {
              objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 504), "sensorIDDictionary"), "objectForKeyedSubscript:", CFSTR("StillImageStabilization")), "objectForKeyedSubscript:", CFSTR("NightModeMinGainThreshold")), "floatValue");
              if (v71 <= 0.0)
              {
                v74 = objc_msgSend(v90, "aeLimitsReached");
              }
              else
              {
                v72 = v71;
                objc_msgSend(v90, "gain");
                v74 = v73 >= v72;
              }
              v69 = v74 & (v87 ^ 1);
            }
          }
          v75 = v29 || v31;
          if (v29)
            v34 = 2;
          else
            v34 = 8;
          if (!v75)
          {
            if (v68)
            {
              v69 = 1;
              v34 = 3;
            }
            else
            {
              v34 = 6;
            }
            if ((v69 & 1) == 0)
            {
              if (v55)
                v76 = 4;
              else
                v76 = 1;
              if (v87)
                v34 = v76;
              else
                v34 = 5;
            }
          }
          v77 = v91 ^ 1;
          if (v88 != a3)
            v77 = 1;
          if (v68)
            v78 = v77;
          else
            v78 = 1;
          if (v55)
            LODWORD(v79) = 4;
          else
            LODWORD(v79) = v34;
          if (v84)
            v79 = 5;
          else
            v79 = v79;
          a8 = v80;
          if (v78 != 1)
            v34 = v79;
LABEL_46:
          if (a8
            && (!*(_BYTE *)(a1 + 1497) || objc_msgSend((id)a1, "shallowDepthOfFieldEffectStatus") == 1))
          {
            if (*(_QWORD *)(a1 + 576))
            {
              v23 = 2;
            }
            else if (*(_QWORD *)(a1 + 1464))
            {
              v23 = 3;
            }
            v36 = 2048;
            if ((v91 & ((_DWORD)v34 == 3)) != 0)
              v36 = 133120;
            v32 |= v36;
            if (!v91)
              goto LABEL_97;
          }
          else if (!v91)
          {
            goto LABEL_97;
          }
          if (!a7 || !*(_BYTE *)(a1 + 1412))
            goto LABEL_97;
          v37 = objc_msgSend(*(id *)(a1 + 1320), "telephotoLimitsReachedForFrameStatisticsByPortType:", v17);
          if (v88 == a3)
          {
            v41 = 0;
          }
          else
          {
            objc_msgSend((id)a1, "zoomFactor");
            v39 = v38;
            objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
            v41 = v39 >= v40;
          }
          if ((v34 - 1) > 4)
            goto LABEL_97;
          v44 = v41 | v37;
          if (a7 != 2)
            v44 = 1;
          if (a7 != 1 && (v44 & 1) != 0)
            goto LABEL_97;
          objc_msgSend((id)a1, "zoomFactor");
          v47 = v46;
          if (v88 == a3)
          {
            objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
            if (v47 < v48)
            {
              objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
              v47 = v49;
            }
          }
          v50 = *(float *)(a1 + 1372);
          if ((v34 - 1) > 2)
          {
            v57 = -[BWFigVideoCaptureDevice _bravoCameraForOISOrSISCaptureType:stereoFusionMode:frameStatisticsByPortType:zoomFactor:stereoFusionLowerBoundZoomFactor:stereoFusionUpperBoundZoomFactor:](a1, v47, *(float *)(a1 + 1372), *(float *)(a1 + 1376), v45, a7, v17);
            if (v57 == 2)
            {
LABEL_90:
              v23 = 2;
              v58 = 1024;
LABEL_96:
              v32 |= v58;
LABEL_97:
              if (v23 == 1)
              {
                v60 = objc_msgSend(*(id *)(a1 + 576), "hasSphere");
                if ((_DWORD)v34 == 5)
                  v61 = v60;
                else
                  v61 = 1;
                if (v61)
                  v34 = v34;
                else
                  v34 = 4;
              }
              if ((a12 & 1) == 0)
              {
                if (*(_BYTE *)(a1 + 3152))
                {
                  -[BWFigVideoCaptureDevice _updateCurrentStillSmartCameraState](a1);
                  if ((_DWORD)v34 == 5)
                  {
                    if (-[BWFigVideoCaptureDevice _currentSceneAllowsMotionFreezing:](a1, 0)
                      && (objc_msgSend((id)a1, "zoomFactor"), v62 <= 2.5))
                    {
                      v93 = 0;
                      v94 = &v93;
                      v95 = 0x2020000000;
                      v96 = 0;
                      v63 = dispatch_semaphore_create(0);
                      v64 = *(void **)(a1 + 3120);
                      v92[0] = MEMORY[0x1E0C809B0];
                      v92[1] = 3221225472;
                      v92[2] = __301__BWFigVideoCaptureDevice__resolveStillImageCaptureTypeFromStatisticsByPortType_masterCaptureStream_flashMode_hdrMode_qualityPrioritization_stereoFusionMode_depthDataDeliveryEnabled_bravoConstituentImageDeliveryDeviceTypes_burstQualityCaptureEnabled_clientBracketMode_forSceneMonitoring_captureFlags___block_invoke;
                      v92[3] = &unk_1E49262D8;
                      v92[4] = v63;
                      v92[5] = &v93;
                      objc_msgSend(v64, "detectMotionOnStoredFramesWithSmartCameraDiagnostics:completionHandler:", 0, v92);
                      dispatch_semaphore_wait(v63, 0xFFFFFFFFFFFFFFFFLL);

                      if (*((_BYTE *)v94 + 24))
                        v34 = 4;
                      else
                        v34 = 5;
                      _Block_object_dispose(&v93, 8);
                    }
                    else
                    {
                      v34 = 5;
                    }
                  }
                }
              }
              goto LABEL_114;
            }
            v23 = v57;
          }
          else
          {
            objc_msgSend(*(id *)(a1 + 576), "baseZoomFactor");
            if (v47 < v51 && v47 >= v50)
              goto LABEL_90;
          }
          v58 = 0;
          goto LABEL_96;
        }
        v84 = 0;
      }
      else
      {
        v84 = 0;
        v29 = 1;
      }
LABEL_123:
      v87 = 1;
      goto LABEL_124;
    }
    if (v82)
    {
      v29 = 0;
    }
    else if (v29)
    {
      objc_msgSend(v86, "normalizedSNR");
      v84 = 0;
      v55 = 0;
      v29 = v59 < v54;
      goto LABEL_123;
    }
    v84 = 0;
    v55 = 0;
    goto LABEL_123;
  }
  v34 = 1;
LABEL_114:
  if (a13)
    *a13 = v32;
  return v34;
}

- (id)_clientBracketSettingsWithSettings:(void *)a3 frameStatisticsByPortType:
{
  id v6;
  void *v7;

  if (!a1 || !objc_msgSend(a2, "bracketType"))
    return 0;
  v6 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 4);
  objc_msgSend(v6, "setLensStabilizationEnabledForClientBracket:", objc_msgSend(a2, "lensStabilizationDuringBracketEnabled"));
  v7 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1[63], "portType"));
  if (objc_msgSend(a2, "bracketType") == 2)
  {
    objc_msgSend(v6, "setExposureValues:", -[BWFigVideoCaptureDevice _autoExposureBracketValuesForSettings:frameStatistics:](a1, a2, v7));
  }
  else if (objc_msgSend(a2, "bracketType") == 1)
  {
    objc_msgSend(v6, "setManualExposureBracketedCaptureParams:", -[BWFigVideoCaptureDevice _manualExposureBracketParametersForSettings:frameStatistics:use8dot8FixedPointGain:](a1, a2, v7, 1));
  }
  return v6;
}

- (BWStillImageCaptureSettings)_stillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(void *)a6 bravoConstituentImageDeliveryDeviceTypes:(BWStillImageCaptureSettings *)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(__int128 *)a9 userInitiatedRequestPTS:(uint64_t)a10 frameStatisticsByPortType:
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  uint64_t v34;
  int v35;
  int v36;
  id *v37;
  BWStillImageCaptureSettings *v38;
  int v39;
  char v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  BWStillImageCaptureSettings *v44;
  BWStillImageCaptureSettings *v45;
  BWStillImageCaptureSettings *v46;
  id v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  _BOOL8 v52;
  void *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  BWStillImageCaptureSettings *v62;
  BWStillImageCaptureSettings *v63;
  BWStillImageCaptureSettings *v64;
  BWStillImageCaptureSettings *v65;
  BWStillImageCaptureSettings *v66;
  uint64_t v67;
  BWStillImageCaptureSettings *v68;
  int v69;
  BWStillImageCaptureSettings *v70;
  void *v71;
  BWStillImageCaptureSettings *v72;
  BWStillImageCaptureSettings *v73;
  void *v74;
  BWStillImageCaptureSettings *v75;
  uint64_t v76;
  BWStillImageCaptureSettings *v77;
  void *v78;
  uint64_t v79;
  BWStillImageCaptureSettings *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t j;
  void *v91;
  id v92;
  uint64_t v93;
  BWStillImageCaptureStreamSettings *v94;
  uint64_t v95;
  BWStillImageCaptureStreamSettings *v96;
  BWStillImageCaptureStreamSettings *v97;
  BWStillImageCaptureStreamSettings *v98;
  BWStillImageCaptureSettings *v99;
  uint64_t v100;
  void *v101;
  BWStillImageCaptureSettings *v102;
  uint64_t v103;
  BWStillImageCaptureSettings *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  BWStillImageCaptureSettings *v108;
  BWStillImageCaptureSettings *v109;
  BWStillImageCaptureSettings *v110;
  BWStillImageCaptureSettings *v111;
  BWStillImageCaptureSettings *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  BWStillImageCaptureSettings *v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  id obj;
  uint64_t v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[128];
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *v156;
  _QWORD v157[2];
  _QWORD v158[2];
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v16 = (uint64_t)result;
    v17 = -[BWStillImageCaptureSettings isBravoVariant](result, "isBravoVariant");
    v18 = *(_QWORD *)(v16 + 1464);
    v122 = objc_msgSend(*(id *)(v16 + 584), "portType");
    v116 = objc_msgSend(*(id *)(v16 + 584), "sensorIDString");
    v117 = objc_msgSend(*(id *)(v16 + 504), "portType");
    v118 = objc_msgSend(*(id *)(v16 + 504), "sensorIDString");
    v123 = objc_msgSend(*(id *)(v16 + 576), "portType");
    v119 = objc_msgSend(*(id *)(v16 + 576), "sensorIDString");
    v120 = objc_msgSend(*(id *)(v16 + 1464), "portType");
    v121 = objc_msgSend(*(id *)(v16 + 1464), "sensorIDString");
    obj = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v21 = *(void **)(v16 + 1296);
    if (!v21)
      v21 = *(void **)(v16 + 504);
    v130 = a3;
    v131 = a4;
    v129 = a2;
    v128 = a5;
    if (v17)
    {
      v125 = v17;
      v126 = a7;
      v22 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v23 = v22;
      v24 = a8;
      if ((a8 & 0xC00) != 0)
      {
        if (*(_QWORD *)(v16 + 576) || *(_QWORD *)(v16 + 584))
          objc_msgSend(v22, "addObject:");
      }
      else if (objc_msgSend(a6, "count"))
      {
        v27 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v16, a6);
        v142 = 0u;
        v143 = 0u;
        v144 = 0u;
        v145 = 0u;
        v28 = *(void **)(v16 + 560);
        v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v142, v159, 16);
        if (v29)
        {
          v30 = v29;
          v31 = *(_QWORD *)v143;
          do
          {
            for (i = 0; i != v30; ++i)
            {
              if (*(_QWORD *)v143 != v31)
                objc_enumerationMutation(v28);
              v33 = *(void **)(*((_QWORD *)&v142 + 1) + 8 * i);
              if (v33 != v21)
                objc_msgSend(v23, "addObject:", *(_QWORD *)(*((_QWORD *)&v142 + 1) + 8 * i));
              if ((objc_msgSend(v27, "containsObject:", v33) & 1) == 0)
                objc_msgSend(obj, "addObject:", objc_msgSend(v33, "portType"));
            }
            v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v142, v159, 16);
          }
          while (v30);
        }
      }
      if (objc_msgSend(v23, "count"))
      {
        v34 = *(_QWORD *)(v16 + 584);
        v25 = v34 == 0;
        v35 = 4 * (v34 != 0);
        if (v25)
          v36 = 2;
        else
          v36 = 6;
        if (*(_QWORD *)(v16 + 576))
          v26 = v36;
        else
          v26 = v35;
        a8 = v24;
        a3 = v130;
        a4 = v131;
        a2 = v129;
        a5 = v128;
        a7 = v126;
        LOBYTE(v17) = v125;
      }
      else
      {
        a8 = v24;
        a3 = v130;
        a2 = v129;
        a5 = v128;
        a7 = v126;
        LOBYTE(v17) = v125;
        if ((objc_msgSend((id)objc_msgSend(*(id *)(v16 + 1296), "portType"), "isEqualToString:", v123) & 1) != 0)
        {
          v26 = 1;
        }
        else if (objc_msgSend((id)objc_msgSend(*(id *)(v16 + 1296), "portType"), "isEqualToString:", v122))
        {
          v26 = 5;
        }
        else
        {
          v26 = 0;
        }
        a4 = v131;
      }
    }
    else
    {
      if (v18)
        v25 = (a8 & 0x800) == 0;
      else
        v25 = 1;
      if (v25)
        v26 = 0;
      else
        v26 = 3;
    }
    if (*(_BYTE *)(v16 + 3204))
    {
      v140 = *a9;
      v141 = *((_QWORD *)a9 + 2);
      v37 = -[BWFigVideoCaptureDevice _zeroShutterLagStillImageCaptureSettingsWithID:captureType:deliverOriginalImage:deliverSushiRaw:bravoConstituentImageDeliveryDeviceTypes:clientBracketSettings:captureFlags:userInitiatedRequestPTS:captureStreams:frameStatisticsByPortType:]((id *)v16, a2, a3, a4, a5, v19, v20, a8, (uint64_t)&v140, v26, a10);
      if (v37)
      {
        v38 = v37;
        return v38;
      }
    }
    v38 = 0;
    v39 = 0;
    v40 = v17;
    v127 = 0;
    v41 = 0;
    v42 = a8;
    v43 = a8;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v124 = 0;
    switch((int)a3)
    {
      case 0:
      case 10:
        return v38;
      case 1:
        v39 = 1;
        goto LABEL_46;
      case 2:
LABEL_46:
        v49 = 0;
        v124 = __PAIR64__(a3, v39);
        v127 = v26;
        v50 = a3;
        v41 = v26;
        v39 = v26;
        v51 = v40;
        switch(v26)
        {
          case 0u:
            goto LABEL_75;
          case 1u:
            HIDWORD(v124) = 0;
            v49 = 0;
            goto LABEL_73;
          case 2u:
            goto LABEL_73;
          case 3u:
            v41 = 0;
            v39 = 0;
            HIDWORD(v124) = a3;
            v127 = a3;
            goto LABEL_75;
          case 4u:
            break;
          case 5u:
            v49 = a3;
            goto LABEL_71;
          case 6u:
            HIDWORD(v124) = a3;
            v49 = a3;
LABEL_73:
            v50 = v49;
            v49 = a3;
            break;
          default:
            v51 = v40;
LABEL_71:
            HIDWORD(v124) = 0;
            v50 = v49;
            v49 = 0;
            break;
        }
        v127 = 0;
        v41 = v49;
        v39 = v50;
LABEL_75:
        v57 = v51 ^ 1;
        if ((a8 & 0x800) == 0)
          v57 = 1;
        if ((v57 & 1) != 0)
          goto LABEL_81;
        v58 = v41;
        v59 = v39;
        if (objc_msgSend(a6, "count"))
        {
          v38 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v42 = a8;
          v43 = a8;
          v39 = v59;
          v41 = v58;
          goto LABEL_130;
        }
        v39 = v59;
        v41 = v58;
        if (*(_BYTE *)(v16 + 3640))
          goto LABEL_81;
        if (v26 == 4)
        {
          v38 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v42 = a8 & 0xFFFFFFFFFFFEFFFFLL;
          goto LABEL_129;
        }
        if (v26 != 2)
        {
LABEL_81:
          v38 = 0;
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          goto LABEL_128;
        }
        v38 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v43 = a8 & 0xFFFFFFFFFFFEFFFFLL;
        v42 = a8;
        goto LABEL_130;
      case 3:
        v52 = (a4 & 1) != 0 || *(_BYTE *)(v16 + 2477) || *(_BYTE *)(v16 + 2476) != 0;
        if (*(_BYTE *)(v16 + 2476))
          v53 = &unk_1E4A018C8;
        else
          v53 = &unk_1E4A018E0;
        switch(v26)
        {
          case 0u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", v53);
            v39 = 0;
            v41 = 0;
            v127 = 0;
            v38 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            v54 = 3;
            goto LABEL_66;
          case 1u:
            v65 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v65, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v65, "setExposureValues:", v53);
            v45 = v65;
            v39 = 0;
            v124 = 0;
            v127 = 0;
            v38 = 0;
            v44 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v41 = 3;
            goto LABEL_128;
          case 2u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", v53);
            v66 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v66, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v66, "setExposureValues:", v53);
            if (objc_msgSend(v53, "containsObject:", &unk_1E49FB7F0))
              v67 = objc_msgSend(v53, "indexOfObject:", &unk_1E49FB7F0) + 1;
            else
              v67 = 2;
            if ((a8 & 0x400) != 0)
            {
              v158[0] = &unk_1E49FB7F0;
              v158[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v67);
              v48 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v158, 2);
              v39 = 0;
              v127 = 0;
              v38 = 0;
              v46 = 0;
              v47 = 0;
            }
            else
            {
              if ((a8 & 0x800) != 0)
              {
                v157[0] = &unk_1E49FB7F0;
                v157[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v67);
                v47 = (id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v157, 2);
                v39 = 0;
                v127 = 0;
                v38 = 0;
                v46 = 0;
              }
              else
              {
                v39 = 0;
                v127 = 0;
                v38 = 0;
                v46 = 0;
                v47 = 0;
              }
              v48 = 0;
            }
            v124 = 0x300000000;
            v41 = 3;
            v42 = a8;
            v43 = a8;
            v45 = v66;
            break;
          case 3u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", v53);
            v68 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 1);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v68, "setProvidePreBracketedEV0:", v52);
            -[BWStillImageCaptureSettings setExposureValues:](v68, "setExposureValues:", &unk_1E4A018F8);
            v46 = v68;
            v39 = 0;
            v41 = 0;
            v38 = 0;
            v45 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            v69 = 3;
            goto LABEL_98;
          default:
            goto LABEL_126;
        }
        goto LABEL_130;
      case 4:
        switch(v26)
        {
          case 0u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", 1);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", &unk_1E4A01910);
            v39 = 0;
            v41 = 0;
            v127 = 0;
            v38 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            v54 = 4;
            goto LABEL_66;
          case 1u:
            v70 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v70, "setProvidePreBracketedEV0:", 1);
            v71 = &unk_1E4A01910;
            goto LABEL_114;
          case 2u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", 1);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", &unk_1E4A01910);
            v72 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v72, "setProvidePreBracketedEV0:", 1);
            -[BWStillImageCaptureSettings setExposureValues:](v72, "setExposureValues:", &unk_1E4A01910);
            v45 = v72;
            v39 = 0;
            v38 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v124 = 0x400000000;
            v127 = 0;
            goto LABEL_115;
          case 3u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", 1);
            -[BWStillImageCaptureSettings setExposureValues:](v44, "setExposureValues:", &unk_1E4A01910);
            v73 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v73, "setProvidePreBracketedEV0:", 1);
            -[BWStillImageCaptureSettings setExposureValues:](v73, "setExposureValues:", &unk_1E4A01910);
            v46 = v73;
            v39 = 0;
            v41 = 0;
            v38 = 0;
            v45 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            v69 = 4;
LABEL_98:
            HIDWORD(v124) = v69;
            v127 = v69;
            break;
          default:
            goto LABEL_126;
        }
        goto LABEL_128;
      case 5:
        v55 = *MEMORY[0x1E0D07020];
        v155 = *MEMORY[0x1E0D07020];
        v156 = &unk_1E4A01928;
        v56 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v156, &v155, 1);
        switch(v26)
        {
          case 2u:
            if ((a8 & 0x400) != 0 || (v60 = objc_msgSend(a6, "count"), (a8 & 0x800) == 0) && v60)
            {
              v61 = objc_msgSend(*(id *)(v16 + 576), "hasSphere");
              v62 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
              if (!v61)
              {
                v77 = v62;
                v110 = v62;
                -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v62, "setProvidePreBracketedEV0:", 1);
                -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v77, "setOisBracketedCaptureParams:", v56);
                if (*(_BYTE *)(v16 + 2477))
                  v78 = 0;
                else
                  v78 = &unk_1E4A01940;
                v153 = v55;
                v154 = &unk_1E4A01958;
                v79 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v154, &v153, 1);
                v80 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
                -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v80, "setProvidePreBracketedEV0:", 1);
                -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v80, "setOisBracketedCaptureParams:", v79);
                v47 = v78;
                v45 = v80;
                v39 = 0;
                v38 = 0;
                v46 = 0;
                v48 = 0;
                v124 = 0x500000000;
                v41 = 4;
                v127 = 0;
                v42 = a8;
                v43 = a8;
                v44 = v110;
                goto LABEL_130;
              }
              v44 = v62;
              -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v62, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
              -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v44, "setOisBracketedCaptureParams:", v56);
            }
            else
            {
              if ((a8 & 0x800) == 0)
                goto LABEL_126;
              if (!objc_msgSend(*(id *)(v16 + 576), "hasSphere"))
              {
                v151 = v55;
                v152 = &unk_1E4A01970;
                v100 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v152, &v151, 1);
                if (*(_BYTE *)(v16 + 2477))
                  v101 = 0;
                else
                  v101 = &unk_1E4A01988;
                v135 = v101;
                v102 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
                -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v102, "setProvidePreBracketedEV0:", 1);
                -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v102, "setOisBracketedCaptureParams:", v100);
                v149 = v55;
                v150 = &unk_1E4A019A0;
                v103 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v150, &v149, 1);
                v104 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
                -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v104, "setProvidePreBracketedEV0:", 1);
                -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v104, "setOisBracketedCaptureParams:", v103);
                v47 = v135;
                v45 = v104;
                v39 = 0;
                v38 = 0;
                v46 = 0;
                v48 = 0;
                v124 = 0x500000000;
                v41 = 4;
                v127 = 0;
                v42 = a8;
                v43 = a8;
                v44 = v102;
                goto LABEL_130;
              }
              v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
              -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
              -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v44, "setOisBracketedCaptureParams:", v56);
            }
            v63 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v63, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
            -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v63, "setOisBracketedCaptureParams:", v56);
            v45 = v63;
            v39 = 0;
            v38 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v124 = 0x500000000;
            v127 = 0;
            break;
          case 1u:
            if (!objc_msgSend(*(id *)(v16 + 576), "hasSphere"))
            {
              v70 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
              -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v70, "setProvidePreBracketedEV0:", 1);
              v71 = &unk_1E4A019B8;
LABEL_114:
              -[BWStillImageCaptureSettings setExposureValues:](v70, "setExposureValues:", v71);
              v45 = v70;
              v39 = 0;
              v124 = 0;
              v127 = 0;
              v38 = 0;
              v44 = 0;
              v46 = 0;
              v47 = 0;
              v48 = 0;
LABEL_115:
              v41 = 4;
              goto LABEL_128;
            }
            v64 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v64, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
            -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v64, "setOisBracketedCaptureParams:", v56);
            v45 = v64;
            v39 = 0;
            v124 = 0;
            v127 = 0;
            v38 = 0;
            v44 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            break;
          case 0u:
            v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
            -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v44, "setOisBracketedCaptureParams:", v56);
            v39 = 0;
            v41 = 0;
            v127 = 0;
            v38 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            v54 = 5;
LABEL_66:
            HIDWORD(v124) = v54;
LABEL_128:
            v42 = a8;
LABEL_129:
            v43 = a8;
LABEL_130:
            v106 = v42;
            v107 = v43;
            v81 = v48;
            v82 = v47;
            v113 = v41;
            v114 = v39;
            v108 = v38;
            v109 = v46;
            v111 = v44;
            v112 = v45;
            v115 = a8;
            v138 = 0u;
            v139 = 0u;
            v136 = 0u;
            v137 = 0u;
            v83 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v136, v146, 16);
            if (v83)
            {
              v84 = v83;
              v85 = 0;
              v134 = *(_QWORD *)v137;
              v86 = *MEMORY[0x1E0D05A28];
              v87 = *MEMORY[0x1E0D05A18];
              v88 = *MEMORY[0x1E0D05A30];
              v89 = (void *)MEMORY[0x1E0C9AA60];
              do
              {
                for (j = 0; j != v84; ++j)
                {
                  if (*(_QWORD *)v137 != v134)
                    objc_enumerationMutation(obj);
                  v91 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * j);
                  if (objc_msgSend(v91, "isEqualToString:", v86))
                    v85 = v89;
                  if (objc_msgSend(v91, "isEqualToString:", v87))
                    v82 = v89;
                  if (objc_msgSend(v91, "isEqualToString:", v88))
                    v81 = (uint64_t)v89;
                }
                v84 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v136, v146, 16);
              }
              while (v84);
            }
            else
            {
              v85 = 0;
            }
            v92 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            if (v114)
            {
              v93 = v124;
              v94 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v122, v114, v106, v124, v108, v85);
              -[BWStillImageCaptureStreamSettings setSensorIDString:](v94, "setSensorIDString:", v116);
              objc_msgSend(v92, "addObject:", v94);
              v95 = v127;
            }
            else
            {
              v94 = 0;
              v95 = v127;
              v93 = v124;
            }
            if (HIDWORD(v124))
            {
              v96 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v117, HIDWORD(v124), v107, v93, v111, v82);
              -[BWStillImageCaptureStreamSettings setSensorIDString:](v96, "setSensorIDString:", v118);
              objc_msgSend(v92, "addObject:", v96);
            }
            else
            {
              v96 = 0;
            }
            if (v113)
            {
              v97 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v123, v113, v115, v93, v112, v81);
              -[BWStillImageCaptureStreamSettings setSensorIDString:](v97, "setSensorIDString:", v119);
              objc_msgSend(v92, "addObject:", v97);
              if ((_DWORD)v95)
              {
LABEL_153:
                v98 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v120, v95, v115, v93, v109, 0);
                -[BWStillImageCaptureStreamSettings setSensorIDString:](v98, "setSensorIDString:", v121);
                objc_msgSend(v92, "addObject:", v98);
LABEL_156:
                LOBYTE(v105) = v128;
                v99 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:]([BWStillImageCaptureSettings alloc], "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v129, v130, v115, 0, a10, v131, v105, v92);
                -[BWStillImageCaptureSettings setMetadata:](v99, "setMetadata:", objc_alloc_init(BWStillImageCaptureMetadata));

                v38 = v99;
                return v38;
              }
            }
            else
            {
              v97 = 0;
              if ((_DWORD)v95)
                goto LABEL_153;
            }
            v98 = 0;
            goto LABEL_156;
          default:
LABEL_126:
            v39 = 0;
            HIDWORD(v124) = 0;
            v127 = 0;
            v41 = 0;
            v38 = 0;
LABEL_127:
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            LODWORD(v124) = 0;
            goto LABEL_128;
        }
        v41 = 5;
        goto LABEL_128;
      case 6:
        v44 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
        -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](v44, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v16 + 2477));
        v147 = *MEMORY[0x1E0D07020];
        v148 = &unk_1E4A019D0;
        -[BWStillImageCaptureSettings setOisBracketedCaptureParams:](v44, "setOisBracketedCaptureParams:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v148, &v147, 1));
        v39 = 0;
        v41 = 0;
        v38 = 0;
        v45 = 0;
        v46 = 0;
        v48 = 0;
        v124 = 0x600000000;
        v127 = 0;
        v42 = a8;
        v43 = a8;
        v47 = &unk_1E4A019E8;
        goto LABEL_130;
      case 7:
        v39 = 0;
        v38 = 0;
        v41 = 7;
        v127 = 0;
        v42 = a8;
        v43 = a8;
        v44 = 0;
        v45 = a7;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v124 = 0;
        switch(v26)
        {
          case 0u:
            v39 = 0;
            v41 = 0;
            v38 = 0;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v124 = 0x700000000;
            v127 = 0;
            v42 = a8;
            v43 = a8;
            goto LABEL_112;
          case 1u:
            goto LABEL_130;
          case 2u:
            v39 = 0;
            v38 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v124 = 0x700000000;
            v127 = 0;
            v42 = a8;
            v43 = a8;
            v44 = a7;
            v45 = a7;
            goto LABEL_130;
          case 3u:
            -[BWStillImageCaptureSettings setProvidePreBracketedEV0:](a7, "setProvidePreBracketedEV0:", 1);
            v74 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (int)-[BWStillImageCaptureSettings bracketFrameCount](a7, "bracketFrameCount"));
            v75 = a7;
            if ((int)-[BWStillImageCaptureSettings bracketFrameCount](a7, "bracketFrameCount") >= 1)
            {
              LODWORD(v76) = 0;
              do
              {
                v76 = (v76 + 1);
                objc_msgSend(v74, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v76));
              }
              while ((int)v76 < (int)-[BWStillImageCaptureSettings bracketFrameCount](v75, "bracketFrameCount"));
            }
            v47 = (id)objc_msgSend(v74, "copy");
            v39 = 0;
            v41 = 0;
            v38 = 0;
            v45 = 0;
            v48 = 0;
            v124 = 0x700000000;
            v127 = 7;
            v42 = a8;
            v43 = a8;
            v44 = v75;
            v46 = v75;
            goto LABEL_130;
          case 4u:
            goto LABEL_111;
          case 5u:
            v39 = 7;
            v38 = a7;
            goto LABEL_109;
          case 6u:
            v39 = 7;
            v38 = a7;
LABEL_111:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v124 = 0x700000000;
            v45 = v38;
            v41 = v39;
            v39 = 7;
            v127 = 0;
            v42 = a8;
            v43 = a8;
            v38 = a7;
LABEL_112:
            v44 = a7;
            goto LABEL_130;
          default:
LABEL_109:
            HIDWORD(v124) = 0;
            v127 = 0;
            v41 = 0;
            goto LABEL_127;
        }
      case 8:
        v39 = 0;
        v41 = 0;
        v127 = 0;
        v38 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        LODWORD(v124) = 0;
        v54 = 8;
        goto LABEL_66;
      case 9:
        goto LABEL_130;
      default:
        v127 = 0;
        v41 = 0;
        v42 = a8;
        v43 = a8;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v124 = 0;
        goto LABEL_130;
    }
  }
  return result;
}

- (void)_captureStreamsForBravoConstituentImageDeliveryDeviceTypes:(uint64_t)a1
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    v8 = *MEMORY[0x1E0D05A18];
    v9 = *MEMORY[0x1E0D05A30];
    v10 = *MEMORY[0x1E0D05A28];
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(a2);
        v12 = objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v11), "intValue");
        v13 = v8;
        if (v12 != 2)
        {
          if (v12 == 7)
          {
            v13 = v10;
          }
          else
          {
            v13 = v9;
            if (v12 != 3)
              goto LABEL_14;
          }
        }
        v14 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, v13);
        if (v14)
          objc_msgSend(v4, "addObject:", v14);
LABEL_14:
        ++v11;
      }
      while (v6 != v11);
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }
  return v4;
}

- (id)_zeroShutterLagStillImageCaptureSettingsWithID:(uint64_t)a3 captureType:(uint64_t)a4 deliverOriginalImage:(char)a5 deliverSushiRaw:(uint64_t)a6 bravoConstituentImageDeliveryDeviceTypes:(uint64_t)a7 clientBracketSettings:(uint64_t)a8 captureFlags:(uint64_t)a9 userInitiatedRequestPTS:(unsigned int)a10 captureStreams:(uint64_t)a11 frameStatisticsByPortType:
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFArray *v28;
  BWAggdDataReporter *v29;
  id v30;
  BWStillImageCaptureSettings *v31;
  uint64_t v32;
  id v33;
  BWStillImageCaptureStreamSettings *v34;
  BWStillImageCaptureStreamSettings *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  CMTime v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  CMTime v50;
  _QWORD v51[2];
  unsigned int v52;
  CMTime v53;
  _BYTE v54[128];
  uint64_t v55;
  _QWORD v56[3];

  v56[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v12 = (uint64_t)result;
    v13 = a10;
    if ((a3 & 0xFFFFFFFE) != 4 && (_DWORD)a3 != 1 || (a10 & 0xFFFFFFFE) == 2)
      goto LABEL_39;
    v20 = objc_msgSend(result[63], "portType");
    v21 = objc_msgSend(*(id *)(v12 + 576), "portType");
    v53 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v22 = objc_msgSend(*(id *)(v12 + 576), "hasSphere");
    v23 = a3;
    if ((_DWORD)a3 != 1)
    {
      if ((_DWORD)a3 == 4)
      {
        if (a10 > 1)
          goto LABEL_39;
        v23 = 4;
      }
      else
      {
        if ((_DWORD)a3 != 5)
          goto LABEL_39;
        if (a10)
        {
          if (a10 != 1)
            goto LABEL_39;
          if (v22)
            v23 = 3;
          else
            v23 = 4;
        }
        else
        {
          v23 = 2;
        }
      }
    }
    v44 = a5;
    v52 = 0;
    v51[0] = 0;
    v51[1] = 0;
    v24 = *(void **)(v12 + 3248);
    if (v24)
    {
      v25 = objc_msgSend(v24, "count");
      if ((_DWORD)a3 != 1 || v25 == *(_DWORD *)(v12 + 3212))
      {
        v28 = *(const __CFArray **)(v12 + 3248);
        *(_OWORD *)&v50.value = *(_OWORD *)a9;
        v50.epoch = *(_QWORD *)(a9 + 16);
        if (-[BWFigVideoCaptureDevice _tryZeroShutterLagReferenceFrameSelectionWithZeroShutterLagPTS:captureType:captureFlags:framesMetadata:frameCount:referenceFrameBracketedCaptureSequenceNumberOut:preferredPTSOut:selectedFramesRangeOut:](v12, &v50, v26, v27, v28, v23, &v52, &v53, v51))a8 |= 0x2000uLL;
      }
      else
      {
        a8 |= 0x2000uLL;
      }
      v29 = +[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance");
      if ((a8 & 0x2000) != 0)
        -[BWAggdDataReporter reportZeroShutterLagSuccess](v29, "reportZeroShutterLagSuccess");
      else
        -[BWAggdDataReporter reportZeroShutterLagReferenceFrameSelectionFailureForCaptureType:](v29, "reportZeroShutterLagReferenceFrameSelectionFailureForCaptureType:", a3);
    }
    if ((_DWORD)a3 == 1 && (a8 & 0x2000) == 0)
    {
      a8 |= 0x2000uLL;
      if (*(_QWORD *)(v12 + 3248))
      {
        *(_OWORD *)&v53.value = *(_OWORD *)a9;
        v53.epoch = *(_QWORD *)(a9 + 16);
      }
    }
    if ((a8 & 0x2000) != 0)
    {
      if ((_DWORD)a3 == 5)
      {
        v55 = *MEMORY[0x1E0D07020];
        v56[0] = &unk_1E4A01A00;
        v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, &v55, 1);
        v43 = a2;
        if (a10 != 1)
        {
          if (!a10)
          {
            v30 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
            objc_msgSend(v30, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v12 + 2477));
            objc_msgSend(v30, "setOisBracketedCaptureParams:", v32);
            goto LABEL_46;
          }
LABEL_47:
          v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v34 = 0;
          goto LABEL_48;
        }
        if (objc_msgSend(*(id *)(v12 + 576), "hasSphere"))
        {
          v30 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 3);
          objc_msgSend(v30, "setProvidePreBracketedEV0:", *(unsigned __int8 *)(v12 + 2477));
          objc_msgSend(v30, "setOisBracketedCaptureParams:", v32);
          v13 = 5;
          goto LABEL_52;
        }
      }
      else
      {
        if ((_DWORD)a3 != 4)
        {
          v43 = a2;
          v30 = 0;
          if (a10)
          {
            if (a10 != 1)
              goto LABEL_47;
LABEL_52:
            v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v35 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v21, v13, a8, v23, v30, 0);
            objc_msgSend(v33, "addObject:", v35);
            v34 = 0;
LABEL_53:
            LOBYTE(v42) = v44;
            v31 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:]([BWStillImageCaptureSettings alloc], "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v43, a3, a8, 0, a11, a4, v42, v33);
            -[BWStillImageCaptureSettings setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:](v31, "setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:", v52);
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            v36 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
            if (v36)
            {
              v37 = v36;
              v38 = *(_QWORD *)v47;
              do
              {
                for (i = 0; i != v37; ++i)
                {
                  if (*(_QWORD *)v47 != v38)
                    objc_enumerationMutation(v33);
                  v40 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
                  v45 = v53;
                  objc_msgSend(v40, "setPreferredTimeMachinePTS:", &v45);
                }
                v37 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
              }
              while (v37);
            }
            -[BWStillImageCaptureSettings setMetadata:](v31, "setMetadata:", objc_alloc_init(BWStillImageCaptureMetadata));

            if (v31)
              return (id *)v31;
            goto LABEL_61;
          }
LABEL_46:
          v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          v34 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:timeMachineFrameCount:bracketSettings:validBracketedCaptureSequenceNumbers:", v20, a3, a8, v23, v30, 0);
          objc_msgSend(v33, "addObject:", v34);
LABEL_48:
          v35 = 0;
          goto LABEL_53;
        }
        v43 = a2;
        if (a10 != 1)
        {
          if (!a10)
          {
            v30 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      v30 = +[BWBracketSettings bracketSettingsForBracketingMode:](BWBracketSettings, "bracketSettingsForBracketingMode:", 2);
      v13 = 4;
      goto LABEL_52;
    }
LABEL_39:
    v31 = 0;
LABEL_61:
    if (*(_QWORD *)(v12 + 3248))
    {
      if (*(_BYTE *)(v12 + 3204))
      {
        objc_msgSend(*(id *)(v12 + 3120), "resume");
        v41 = (void *)objc_msgSend(*(id *)(v12 + 504), "stream");
        objc_msgSend(v41, "sendCommandProperty:", *MEMORY[0x1E0D07810]);
      }
    }
    return (id *)v31;
  }
  return result;
}

- (uint64_t)_tryZeroShutterLagReferenceFrameSelectionWithZeroShutterLagPTS:(uint64_t)a3 captureType:(uint64_t)a4 captureFlags:(const __CFArray *)a5 framesMetadata:(int)a6 frameCount:(_DWORD *)a7 referenceFrameBracketedCaptureSequenceNumberOut:(CMTime *)a8 preferredPTSOut:(_QWORD *)a9 selectedFramesRangeOut:
{
  uint64_t v13;
  int v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  CMTime v18;
  CMTime v19;
  unsigned int v20;
  int v21;

  if (result)
  {
    v13 = result;
    v21 = -1;
    v20 = -1;
    v19 = *a2;
    v14 = FigCapturePTSBasedReferenceFrameSelection(0, a5, &v19, a6, &v21, (int *)&v20);
    result = 0;
    if (!v14)
    {
      v15 = v20;
      if ((v20 & 0x80000000) == 0)
      {
        if (-[__CFArray count](a5, "count") <= v15)
        {
          return 0;
        }
        else
        {
          v16 = (void *)objc_msgSend(*(id *)(v13 + 3248), "objectAtIndexedSubscript:", a6 + v21 - 1);
          result = objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]);
          if (result)
          {
            memset(&v18, 0, sizeof(v18));
            CMTimeMakeFromDictionary(&v18, (CFDictionaryRef)result);
            v17 = v21;
            if (a7)
              *a7 = v20 - v21 + 1;
            if (a8)
              *a8 = v18;
            if (a9)
            {
              *a9 = v17;
              a9[1] = a6;
            }
            return 1;
          }
        }
      }
    }
  }
  return result;
}

- (uint64_t)_resumeTimeMachines
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 3204))
    {
      objc_msgSend(*(id *)(result + 3120), "resume");
      v2 = (void *)objc_msgSend(*(id *)(v1 + 504), "stream");
      return objc_msgSend(v2, "sendCommandProperty:", *MEMORY[0x1E0D07810]);
    }
  }
  return result;
}

- (BOOL)_validateTimeMachineFramesUsingPreviewFramesMetadata:(uint64_t)a1
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int IsUsableForPTSBasedReferenceFrameSelection;
  _BOOL8 v12;
  BWAggdDataReporter *v13;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (*(_QWORD *)(a1 + 3072))
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = -[__CFArray countByEnumeratingWithState:objects:count:](theArray, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v17;
      v7 = *MEMORY[0x1E0D06E58];
      v8 = *MEMORY[0x1E0D07A60];
LABEL_5:
      v9 = 0;
      while (1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(theArray);
        v10 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v9), "objectForKeyedSubscript:", v7);
        if (v10)
        {
          if (!objc_msgSend(v10, "isEqualToString:", v8))
            break;
        }
        if (v5 == ++v9)
        {
          v5 = -[__CFArray countByEnumeratingWithState:objects:count:](theArray, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
          if (v5)
            goto LABEL_5;
          goto LABEL_14;
        }
      }
      if ((objc_msgSend(*(id *)(a1 + 3072), "isStationary") & 1) != 0)
        goto LABEL_14;
      -[BWAggdDataReporter reportZeroShutterLagSphereInitFailure](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportZeroShutterLagSphereInitFailure");
      return 0;
    }
  }
LABEL_14:
  v15 = 0;
  IsUsableForPTSBasedReferenceFrameSelection = FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(theArray, (int *)&v15);
  v12 = IsUsableForPTSBasedReferenceFrameSelection == 0;
  if (IsUsableForPTSBasedReferenceFrameSelection)
  {
    v13 = +[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance");
    -[BWAggdDataReporter reportZeroShutterLagMetadataInitFailureWithReasons:](v13, "reportZeroShutterLagMetadataInitFailureWithReasons:", v15);
  }
  return v12;
}

- (uint64_t)_suspendTimeMachineWithCompletionHandler:(uint64_t)result
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  const __CFDictionary *v8;
  void *v9;
  void *v10;
  void (*v11)(uint64_t, _QWORD, _QWORD, _QWORD, CMTimeRange *);
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  CMTimeRange v15;
  _QWORD v16[6];
  CMTimeRange v17;
  int v18;

  if (result)
  {
    v4 = result;
    if (!_FigIsCurrentDispatchQueue())
    {
      v14 = v2;
      LODWORD(v13) = 0;
      FigDebugAssert3();
    }
    v5 = (void *)objc_msgSend(*(id *)(v4 + 504), "stream", v13, v14);
    v18 = objc_msgSend(v5, "sendCommandProperty:", *MEMORY[0x1E0D07818]);
    if (v18)
      goto LABEL_14;
    v6 = *(void **)(v4 + 1296);
    if (!v6)
      v6 = *(void **)(v4 + 504);
    v7 = (void *)objc_msgSend(v6, "stream");
    v8 = (const __CFDictionary *)objc_msgSend(v7, "getProperty:error:", *MEMORY[0x1E0D07808], &v18);
    if (v18)
    {
LABEL_14:
      result = FigDebugAssert3();
    }
    else
    {
      memset(&v17, 0, sizeof(v17));
      CMTimeRangeMakeFromDictionary(&v17, v8);
      v9 = *(void **)(v4 + 3120);
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke;
      v16[3] = &unk_1E4925E78;
      v16[4] = v4;
      v16[5] = a2;
      v15 = v17;
      result = objc_msgSend(v9, "suspendWithPTSRange:completionHandler:", &v15, v16);
    }
    if (v18)
    {
      if (*(_BYTE *)(v4 + 3204))
      {
        objc_msgSend(*(id *)(v4 + 3120), "resume");
        v10 = (void *)objc_msgSend(*(id *)(v4 + 504), "stream");
        objc_msgSend(v10, "sendCommandProperty:", *MEMORY[0x1E0D07810]);
      }
      v11 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, CMTimeRange *))(a2 + 16);
      v12 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)&v15.start.value = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)&v15.start.epoch = v12;
      *(_OWORD *)&v15.duration.timescale = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      v11(a2, 0, 0, 0, &v15);
      return -[BWAggdDataReporter reportZeroShutterLagFirmwareTimeMachineInitFailure](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportZeroShutterLagFirmwareTimeMachineInitFailure");
    }
  }
  return result;
}

void __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke(uint64_t a1, char a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __int128 v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[7];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v8[1] = 3221225472;
  v5 = a5[1];
  v9 = *a5;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 2480);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[2] = __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke_2;
  v8[3] = &unk_1E4925E50;
  v8[5] = a4;
  v8[6] = v6;
  v12 = a2;
  v8[4] = a3;
  v10 = v5;
  v11 = a5[2];
  dispatch_async(v7, v8);
}

uint64_t __68__BWFigVideoCaptureDevice__suspendTimeMachineWithCompletionHandler___block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *);
  __int128 v6;
  _OWORD v8[3];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))(v2 + 16);
  v6 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v6;
  v8[2] = *(_OWORD *)(a1 + 88);
  return v5(v2, v3, v4, v1, v8);
}

- (uint64_t)_initiateCaptureStillImageNowWithPTS:(uint64_t)a3 completionHandler:
{
  uint64_t v4;
  _QWORD v5[6];

  if (result)
  {
    v4 = result;
    if (!_FigIsCurrentDispatchQueue())
      FigDebugAssert3();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __82__BWFigVideoCaptureDevice__initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke;
    v5[3] = &unk_1E4925E78;
    v5[4] = v4;
    v5[5] = a3;
    return -[BWFigVideoCaptureDevice _suspendTimeMachineWithCompletionHandler:](v4, (uint64_t)v5);
  }
  return result;
}

uint64_t __82__BWFigVideoCaptureDevice__initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke(uint64_t a1, int a2, CFArrayRef theArray)
{
  if (a2
    && -[BWFigVideoCaptureDevice _validateTimeMachineFramesUsingPreviewFramesMetadata:](*(_QWORD *)(a1 + 32), theArray))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 3248) = theArray;
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    return -[BWAggdDataReporter reportZeroShutterLagInitSuccess](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportZeroShutterLagInitSuccess");
  }
  else
  {
    -[BWFigVideoCaptureDevice _resumeTimeMachines](*(_QWORD *)(a1 + 32));
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

- (void)initiateCaptureStillImageNowWithPTS:(id *)a3 completionHandler:(id)a4
{
  NSObject *v4;
  _QWORD block[6];
  $3CC8671D27C23BF42ADDB32F2B5E48AE v6;

  v4 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __81__BWFigVideoCaptureDevice_initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke;
  block[3] = &unk_1E4925EA0;
  v6 = *a3;
  block[4] = self;
  block[5] = a4;
  dispatch_async(v4, block);
}

uint64_t __81__BWFigVideoCaptureDevice_initiateCaptureStillImageNowWithPTS_completionHandler___block_invoke(uint64_t a1, uint64_t a2)
{
  return -[BWFigVideoCaptureDevice _initiateCaptureStillImageNowWithPTS:completionHandler:](*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

- (void)prepareToCaptureStillImageNow:(id)a3
{
  NSObject *v3;
  _QWORD v4[6];

  v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __57__BWFigVideoCaptureDevice_prepareToCaptureStillImageNow___block_invoke;
  v4[3] = &unk_1E491F098;
  v4[4] = self;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

void __57__BWFigVideoCaptureDevice_prepareToCaptureStillImageNow___block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2568) = objc_msgSend(*(id *)(a1 + 40), "copy");
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1288));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "currentState") == 2)
    -[BWFigVideoCaptureDevice _handlePendingStillImageCaptureRequest](*(_QWORD *)(a1 + 32));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1288));
}

- (void)_handlePendingStillImageCaptureRequest
{
  const os_unfair_lock *v2;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    v2 = (const os_unfair_lock *)(a1 + 1288);
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 1288));
    v3 = *(_QWORD *)(a1 + 2568);
    if (v3)
    {
      *(_QWORD *)(a1 + 2560) = v3;
      *(_QWORD *)(a1 + 2568) = 0;
      objc_msgSend(*(id *)(a1 + 2552), "transitionToState:", 4);
      os_unfair_lock_assert_owner(v2);
      if (*(_BYTE *)(a1 + 1292) || *(_BYTE *)(a1 + 1293) || *(_BYTE *)(a1 + 1294))
      {
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 2552), "transitionToState:", 8);
      }
    }
  }
}

- (void)cancelPrepareToCaptureStillImageNow
{
  NSObject *v3;
  _QWORD block[5];

  if (self->_zeroShutterLagEarliestAllowedPTS.epoch)
  {
    -[BWFigVideoCaptureDevice _resumeTimeMachines]((uint64_t)self);

    self->_zeroShutterLagEarliestAllowedPTS.epoch = 0;
  }
  v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __62__BWFigVideoCaptureDevice_cancelPrepareToCaptureStillImageNow__block_invoke;
  block[3] = &unk_1E491E720;
  block[4] = self;
  dispatch_async(v3, block);
}

void __62__BWFigVideoCaptureDevice_cancelPrepareToCaptureStillImageNow__block_invoke(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1288));
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "currentState") == 8
    || objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "currentState") == 4)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2552), "transitionToState:", 2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1288));
}

- (int)captureStillImageNowWithSettings:(id)a3 captureSettings:(id)a4
{
  NSObject *v6;
  _QWORD v8[6];

  if ((unint64_t)objc_msgSend((id)objc_msgSend(a4, "captureStreamSettings", a3), "count") >= 2
    && (!self
     || !self->_stereoFusionEnabled
     && !self->_bravoConstituentPhotoDeliveryEnabled
     && !self->_depthDataDeliveryEnabled
     && !self->_stereoPhotoCaptureEnabled))
  {
    return -12780;
  }
  v6 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __76__BWFigVideoCaptureDevice_captureStillImageNowWithSettings_captureSettings___block_invoke;
  v8[3] = &unk_1E491E748;
  v8[4] = self;
  v8[5] = a4;
  dispatch_async(v6, v8);
  return 0;
}

void __76__BWFigVideoCaptureDevice_captureStillImageNowWithSettings_captureSettings___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _captureStillImageNowWithSettings:](*(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke(uint64_t a1, uint64_t a2)
{
  -[BWFigVideoCaptureDevice _stillImageCaptureStateMachineDidTransitionToInProgress](a2);
}

- (void)_stillImageCaptureStateMachineDidTransitionToInProgress
{
  NSObject *v1;
  _QWORD block[5];

  if (a1)
  {
    v1 = *(NSObject **)(a1 + 2480);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __82__BWFigVideoCaptureDevice__stillImageCaptureStateMachineDidTransitionToInProgress__block_invoke;
    block[3] = &unk_1E491E720;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_3(uint64_t a1, uint64_t a2)
{
  -[BWFigVideoCaptureDevice _handlePendingStillImageCaptureRequest](a2);
}

void __62__BWFigVideoCaptureDevice__setupStillImageCaptureStateMachine__block_invoke_4(uint64_t a1, uint64_t a2)
{
  -[BWFigVideoCaptureDevice _stillImageCaptureStateMachineDidTransitionToInProgress](a2);
}

void __82__BWFigVideoCaptureDevice__stillImageCaptureStateMachineDidTransitionToInProgress__block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 2560) + 16))();

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 2560) = 0;
}

- (const)_isSwitchOverPreventingStillImageCaptureInProgress
{
  const os_unfair_lock *v1;

  if (result)
  {
    v1 = result;
    os_unfair_lock_assert_owner(result + 322);
    if (LOBYTE(v1[323]._os_unfair_lock_opaque) || BYTE1(v1[323]._os_unfair_lock_opaque))
      return (const os_unfair_lock *)1;
    else
      return (const os_unfair_lock *)(BYTE2(v1[323]._os_unfair_lock_opaque) != 0);
  }
  return result;
}

- (void)_currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:(int)a3 forcingHDRSceneDetectionEnabled:(int)a4 forcingSISSceneDetectionEnabled:(int)a5 forcingDigitalFlashSceneDetectionEnabled:
{
  uint64_t v8;
  BWFrameStatisticsByPortType *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void *v19;

  if (result)
  {
    v8 = (uint64_t)result;
    if (objc_msgSend(result, "isBravoVariant"))
      v19 = (void *)objc_msgSend((id)v8, "masterCaptureStream");
    else
      v19 = *(void **)(v8 + 504);
    v9 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", objc_msgSend(*(id *)(v8 + 1960), "portTypes"));
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 1956));
    objc_msgSend(*(id *)(v8 + 1960), "copyTo:", v9);
    v10 = *(_DWORD *)(v8 + 2424);
    v11 = *(_DWORD *)(v8 + 2428);
    v12 = *(_DWORD *)(v8 + 2432);
    v13 = *(_DWORD *)(v8 + 2192);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 1956));
    if (a2)
      v14 = 2;
    else
      v14 = v10;
    if (a3)
      v15 = 2;
    else
      v15 = v11;
    if (v12 <= 2)
      v16 = 2;
    else
      v16 = v12;
    if (a4)
      v17 = v16;
    else
      v17 = v12;
    if (a5)
      v18 = 1;
    else
      v18 = v13;
    return (void *)-[BWFigVideoCaptureDevice _stillImageSceneTypeForCaptureStream:frameStatisticsByPortType:flashMode:hdrMode:qualityPrioritization:digitalFlashMode:sceneFlags:](v8, v19, v9, v14, v15, v17, v18, 0);
  }
  return result;
}

- (_BYTE)_ubIsHDRCaptureUsingSceneFlags:(_BYTE *)result
{
  uint64_t v2;
  _BOOL4 v4;
  unsigned int v5;

  if (result)
  {
    if ((a2 & 0x40) == 0 || result[2000])
    {
      if (result[2001])
      {
        v2 = a2 & 0xC;
        v4 = (~a2 & 0x10008) == 0 || v2 == 4;
        v5 = (v2 != 0) & (a2 >> 1);
        if (result[1999])
          return (_BYTE *)v5;
        else
          return (_BYTE *)v4;
      }
      else
      {
        return (_BYTE *)((*(_QWORD *)&a2 & 0x10002) != 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (uint64_t)_bravoCameraForOISOrSISCaptureType:(float)a3 stereoFusionMode:(float)a4 frameStatisticsByPortType:(uint64_t)a5 zoomFactor:(int)a6 stereoFusionLowerBoundZoomFactor:(void *)a7 stereoFusionUpperBoundZoomFactor:
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  float v15;
  float v16;
  float v17;
  double v18;
  BOOL v19;
  float v20;
  float v21;

  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(*(id *)(result + 576), "portType"));
    if (a6 == 1)
    {
      return 2;
    }
    else
    {
      if (a2 < a3)
        goto LABEL_13;
      v13 = (void *)v12;
      v14 = *(double *)(v11 + 2360);
      objc_msgSend(*(id *)(v11 + 576), "baseZoomFactor");
      v16 = v15;
      objc_msgSend(*(id *)(v11 + 576), "baseZoomFactor");
      if (v17 <= a2 && (objc_msgSend(v13, "integrationTime"), v18 >= v14 + -0.0000999999975))
      {
        objc_msgSend(v13, "gain");
        v19 = v20 >= *(float *)(v11 + 2368);
      }
      else
      {
        v19 = 0;
      }
      if (a2 >= a4)
        v19 = 0;
      result = 2;
      if (v16 <= a2 && !v19)
      {
LABEL_13:
        objc_msgSend(*(id *)(v11 + 576), "baseZoomFactor");
        return v21 <= a2;
      }
    }
  }
  return result;
}

- (uint64_t)_ubConvertStillImageCaptureSettings:(int)a3 useSynchronizedStreamsGroup:(_QWORD *)a4 toStillImageCaptureNowOptions:(_QWORD *)a5 captureStreamPropertyValues:
{
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  double v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t j;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  id v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  void *v87;
  uint64_t v88;
  char v89;
  id obj;
  id obja;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  id v101;
  uint64_t v102;
  id v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void *v116;
  _BYTE v117[128];
  _QWORD v118[3];
  _QWORD v119[3];
  _BYTE v120[128];
  uint64_t v121;
  void *v122;
  _BYTE v123[128];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v8 = a1;
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v103 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v101 = v9;
  v102 = v8;
  v87 = a2;
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "firstObject"), "timeMachineBracketedCaptureParams"), "count")|| objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "captureStreamSettings"), "firstObject"), "unifiedBracketedCaptureParams"), "count"))&& (objc_msgSend(a2, "captureType") != 2 || (objc_msgSend(a2, "captureFlags") & 8) != 0))
  {
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    obja = (id)objc_msgSend(a2, "captureStreamSettings");
    v35 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
    if (!v35)
    {
      v54 = 0;
      goto LABEL_66;
    }
    v36 = v35;
    v79 = v10;
    v81 = a4;
    v83 = a5;
    v89 = 0;
    v37 = *(_QWORD *)v113;
    v96 = *MEMORY[0x1E0D07B20];
    v98 = *MEMORY[0x1E0D07B38];
    v94 = *MEMORY[0x1E0D07B50];
    v84 = *MEMORY[0x1E0D07268];
    v38 = *MEMORY[0x1E0D07128];
    v100 = -1;
    LOBYTE(v86) = 1;
    v39 = *MEMORY[0x1E0D07198];
LABEL_41:
    v40 = 0;
    while (1)
    {
      if (*(_QWORD *)v113 != v37)
        objc_enumerationMutation(obja);
      v41 = *(void **)(*((_QWORD *)&v112 + 1) + 8 * v40);
      v42 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary", v79);
      if (objc_msgSend((id)objc_msgSend(v41, "timeMachineBracketedCaptureParams"), "count"))
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "timeMachineBracketedCaptureParams"), v98);
      if (objc_msgSend((id)objc_msgSend(v41, "unifiedBracketedCaptureParams"), "count"))
      {
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "preBracketFrameCaptureParams"), v96);
        objc_msgSend(v42, "setObject:forKeyedSubscript:", objc_msgSend(v41, "unifiedBracketedCaptureParams"), v94);
        if ((int)objc_msgSend(v41, "captureFlags") < 0)
          v43 = 500;
        else
          v43 = 0;
        v100 = v43;
        v44 = objc_msgSend(v41, "adaptiveBracketingParameters");
        if (!v44)
        {
          if ((v89 & 1) != 0 || objc_msgSend(v41, "captureType") != 7)
            v89 = 1;
          else
            v89 = objc_msgSend(v41, "lensStabilizationEnabledForClientBracket");
          goto LABEL_54;
        }
        v45 = (void *)v44;
        v86 = objc_msgSend(-[BWFigVideoCaptureDevice _captureStreamByPortType:](v102, objc_msgSend(v41, "portType")), "hasFocus") ^ 1;
        v46 = ((unint64_t)objc_msgSend(v41, "captureFlags") >> 37) & 1;
        v47 = (void *)MEMORY[0x1E0CB37E8];
        v48 = objc_msgSend(v45, "stationary") ^ 1 | v46;
        v9 = v101;
        v49 = objc_msgSend(v47, "numberWithInt:", v48);
        v50 = v101;
        v51 = v84;
      }
      else
      {
        v50 = v9;
        v49 = v38;
        v51 = v39;
      }
      objc_msgSend(v50, "setObject:forKeyedSubscript:", v49, v51);
LABEL_54:
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v38, v39);
      objc_msgSend(v103, "setObject:forKeyedSubscript:", v42, objc_msgSend(v41, "portType"));
      if (v36 == ++v40)
      {
        v52 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v112, v123, 16);
        v36 = v52;
        if (!v52)
        {
          if ((v100 & 0x80000000) == 0)
          {
            v53 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
            objc_msgSend(v9, "setObject:forKeyedSubscript:", v53, *MEMORY[0x1E0D07AB8]);
          }
          a4 = v81;
          a5 = v83;
          v10 = v79;
          v8 = v102;
          v54 = v89;
          if ((v86 & 1) == 0)
          {
LABEL_68:
            if ((v54 & 1) != 0)
              goto LABEL_78;
            goto LABEL_80;
          }
LABEL_66:
          v55 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v8 + 2008), "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType")), "afWindowParams");
          if (objc_msgSend(v55, "count"))
          {
            v121 = *MEMORY[0x1E0D07358];
            v122 = v55;
            v56 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v122, &v121, 1);
            objc_msgSend(v9, "setObject:forKeyedSubscript:", v56, *MEMORY[0x1E0D07108]);
          }
          goto LABEL_68;
        }
        goto LABEL_41;
      }
    }
  }
  if (objc_msgSend(a2, "captureType") != 1 && objc_msgSend(a2, "captureType") != 2)
  {
    v76 = 4294954516;
    goto LABEL_116;
  }
  v80 = a4;
  v82 = a5;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  v11 = (void *)objc_msgSend(a2, "captureStreamSettings", v10);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v108, v120, 16);
  v13 = a2;
  if (!v12)
    goto LABEL_36;
  v14 = v12;
  v15 = *(_QWORD *)v109;
  v99 = *MEMORY[0x1E0D07BE0];
  v97 = *MEMORY[0x1E0D07AF0];
  v88 = *MEMORY[0x1E0D07410];
  v85 = *MEMORY[0x1E0D07B80];
  v95 = *MEMORY[0x1E0D07C18];
  v93 = *MEMORY[0x1E0D07BF0];
  v16 = *MEMORY[0x1E0D07B90];
  obj = v11;
  do
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v109 != v15)
        objc_enumerationMutation(v11);
      v18 = *(void **)(*((_QWORD *)&v108 + 1) + 8 * i);
      if (objc_msgSend((id)objc_msgSend(v18, "portType"), "isEqualToString:", *(_QWORD *)(v8 + 1464)))
        v19 = a3 == 0;
      else
        v19 = 0;
      if (!v19)
      {
        v20 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v21 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](v8, objc_msgSend(v18, "portType"));
        v22 = (void *)objc_msgSend((id)objc_msgSend(v13, "frameStatisticsByPortType"), "objectForKeyedSubscript:", objc_msgSend(v18, "portType"));
        if ((objc_msgSend(v18, "captureFlags") & 0x80) != 0)
          v23 = 30;
        else
          v23 = 1;
        objc_msgSend(v22, "gain");
        v25 = v24;
        v26 = objc_msgSend(v18, "captureFlags");
        LODWORD(v27) = v25;
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(v21, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", v23, (v26 >> 4) & 1, v27), v99);
        if ((objc_msgSend(v18, "captureFlags") & 0x10000) != 0)
          objc_msgSend(v20, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v97);
        v13 = v87;
        v9 = v101;
        if (objc_msgSend(v87, "captureType") != 2)
          goto LABEL_33;
        if ((objc_msgSend(v18, "captureFlags") & 0x8000) != 0)
          objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v21, "stream"), "getPropertyIfSupported:error:", v88, 0), v85);
        v28 = objc_msgSend(v18, "captureFlags");
        if ((v28 & 0x800000) != 0)
        {
          v29 = 1;
        }
        else
        {
          if ((v28 & 0x20000000) == 0)
          {
            if ((v28 & 0x40000000) != 0)
            {
              v29 = 3;
              goto LABEL_31;
            }
LABEL_32:
            objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v18, "unifiedBracketedCaptureParams"), "firstObject"), "objectForKeyedSubscript:", v16), v16);
LABEL_33:
            objc_msgSend(v103, "setObject:forKeyedSubscript:", v20, objc_msgSend(v18, "portType"));
            v8 = v102;
            continue;
          }
          v29 = 2;
        }
LABEL_31:
        v30 = ((unint64_t)objc_msgSend(v18, "captureFlags") >> 25) & 1;
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29), v95);
        objc_msgSend(v20, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v30), v93);
        v13 = v87;
        v11 = obj;
        goto LABEL_32;
      }
    }
    v14 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v108, v120, 16);
  }
  while (v14);
LABEL_36:
  v31 = objc_msgSend(v13, "captureType");
  a4 = v80;
  a5 = v82;
  v10 = v78;
  if (v31 == 2)
  {
    if (a3)
    {
      v32 = *MEMORY[0x1E0D07AE8];
      v33 = &unk_1E49FB7D8;
      v34 = v9;
    }
    else
    {
      v33 = (void *)*MEMORY[0x1E0D059F8];
      v32 = *MEMORY[0x1E0D074F8];
      v34 = v78;
    }
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v33, v32);
  }
  if ((objc_msgSend(v87, "captureFlags") & 0x800) != 0)
  {
    if (*(_BYTE *)(v8 + 3202))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AA0]);
    if (*(_BYTE *)(v8 + 3203))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AA8]);
  }
  if (v31 == 2)
  {
LABEL_78:
    if (-[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v8, objc_msgSend(v87, "captureType")))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07268]);
  }
LABEL_80:
  if (*(_QWORD *)(v8 + 1464) && (objc_msgSend(v87, "captureFlags") & 0x800) != 0)
  {
    v57 = *MEMORY[0x1E0D06610];
    v118[0] = *MEMORY[0x1E0D06608];
    v118[1] = v57;
    v119[0] = &unk_1E49FB7A8;
    v119[1] = &unk_1E49FB7A8;
    v118[2] = *MEMORY[0x1E0D06618];
    v119[2] = &unk_1E49FB7C0;
    v58 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v119, v118, 3);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v58, *MEMORY[0x1E0D07B00]);
  }
  if (objc_msgSend(v87, "deliverSushiRaw"))
    objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AB0]);
  v59 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](v8, objc_msgSend(v87, "masterPortType"));
  v60 = objc_msgSend(v59, "stillImageKeypointDetectionEnabled");
  if ((_DWORD)v60 != objc_msgSend(v59, "keypointDetectionEnabled"))
  {
    v61 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v60);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v61, *MEMORY[0x1E0D07B08]);
  }
  v62 = (void *)objc_msgSend(v59, "stream");
  if (objc_msgSend((id)objc_msgSend(v62, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
  v63 = (void *)objc_msgSend(v59, "stream");
  if (objc_msgSend((id)objc_msgSend(v63, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07608], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AD8]);
  v64 = (void *)objc_msgSend(v59, "stream");
  if (objc_msgSend((id)objc_msgSend(v64, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07600], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AD0]);
  v65 = (void *)objc_msgSend(v59, "stream");
  if (objc_msgSend((id)objc_msgSend(v65, "getPropertyIfSupported:error:", *MEMORY[0x1E0D075C8], 0), "BOOLValue"))objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AC8]);
  if (objc_msgSend((id)objc_msgSend(*(id *)(v8 + 528), "objectForKeyedSubscript:", CFSTR("StillImageISPChromaNoiseReduction")), "BOOLValue"))
  {
    v66 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(v8 + 2492));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v66, *MEMORY[0x1E0D07AC0]);
  }
  if (a3)
  {
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v67 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v104, v117, 16);
    if (v67)
    {
      v68 = v67;
      v69 = *(_QWORD *)v105;
      do
      {
        for (j = 0; j != v68; ++j)
        {
          if (*(_QWORD *)v105 != v69)
            objc_enumerationMutation(v103);
          objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(v103, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * j)), *(_QWORD *)(*((_QWORD *)&v104 + 1) + 8 * j));
        }
        v68 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v104, v117, 16);
      }
      while (v68);
    }
  }
  else
  {
    v71 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType"));
    v72 = *MEMORY[0x1E0D07BE0];
    v73 = (id)objc_msgSend(v71, "objectForKeyedSubscript:", *MEMORY[0x1E0D07BE0]);
    if (v73)
    {
      v74 = v73;
      objc_msgSend(v71, "setObject:forKeyedSubscript:", 0, v72);
      v116 = v74;
      v75 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v116, 1);
      objc_msgSend(v71, "setObject:forKeyedSubscript:", v75, *MEMORY[0x1E0D07B10]);

    }
    objc_msgSend(v9, "addEntriesFromDictionary:", objc_msgSend(v103, "objectForKeyedSubscript:", objc_msgSend(v87, "masterPortType")));
    if (*(_QWORD *)(v102 + 552))
      objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07B30]);
  }
  if (*(_BYTE *)(v102 + 1988) && objc_msgSend(v87, "captureType") != 2)
    objc_msgSend(v10, "setObject:forKeyedSubscript:", *MEMORY[0x1E0D059F0], *MEMORY[0x1E0D074F8]);
  if ((objc_msgSend((id)objc_msgSend(*(id *)(v102 + 8), "deviceID"), "isEqualToString:", 0x1E492D2B8) & 1) == 0)
    -[BWFigVideoCaptureDevice _propagateStillImageSettings:toCMIOCaptureOptions:](v102, v87, v9);
  v76 = 0;
LABEL_116:
  if (!objc_msgSend(v9, "count"))
  {

    v9 = 0;
  }
  if (!objc_msgSend(v10, "count"))
  {

    v10 = 0;
  }
  *a4 = v9;
  *a5 = v10;
  return v76;
}

- (uint64_t)_ubEnableSphereForCaptureType:(uint64_t)result
{
  uint64_t v3;
  int v4;

  if (result)
  {
    v3 = result;
    result = objc_msgSend(*(id *)(result + 504), "sphereEnabled");
    if ((_DWORD)result)
    {
      if ((objc_msgSend(*(id *)(v3 + 504), "motionDataInvalid") & 1) != 0)
      {
        return 0;
      }
      else if (a2 == 7)
      {
        return 1;
      }
      else
      {
        if (*(_DWORD *)(v3 + 1992) == 2)
          v4 = objc_msgSend(*(id *)(v3 + 504), "sphereVideoEnabled");
        else
          v4 = 1;
        return v4 & (objc_msgSend(*(id *)(v3 + 3072), "isStationary") ^ 1);
      }
    }
  }
  return result;
}

- (uint64_t)_propagateStillImageSettings:(void *)a3 toCMIOCaptureOptions:
{
  if (result)
  {
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(a2, "cmioCompressedFormat"), CFSTR("CMIOCompressedFormat"));
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a2, "cmioHighResolutionPhotoEnabled")), CFSTR("CMIOHighResolutionPhotoEnabled"));
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(a2, "cmioFlashMode")), CFSTR("CMIOFlashMode"));
    objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(a2, "cmioQualityPrioritization")), CFSTR("CMIOQualityPrioritization"));
    result = objc_msgSend(a2, "cmioMaxPhotoDimensions");
    if ((int)result >= 1)
    {
      result = objc_msgSend(a2, "cmioMaxPhotoDimensions");
      if (SHIDWORD(result) >= 1)
      {
        objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(a2, "cmioMaxPhotoDimensions")), CFSTR("CMIOMaxPhotoDimensionsWidth"));
        return objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (unint64_t)objc_msgSend(a2, "cmioMaxPhotoDimensions") >> 32), CFSTR("CMIOMaxPhotoDimensionsHeight"));
      }
    }
  }
  return result;
}

- (uint64_t)_convertStillImageCaptureSettings:(_QWORD *)a3 toStillImageCaptureNowOptions:(_QWORD *)a4 captureStreamPropertyValues:
{
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  int v29;
  int v30;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  _BOOL4 v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  CFDictionaryRef v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v77;
  int v78;
  uint64_t v79;
  void *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  _QWORD *v108;
  _QWORD *v109;
  _BOOL4 v110;
  void *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  CMTime time;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD block[6];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t);
  void (*v134)(uint64_t);
  uint64_t v135;
  _QWORD v136[3];
  _QWORD v137[3];
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[2];
  _QWORD v141[2];
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE v148[128];
  _BYTE v149[128];
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v115 = objc_msgSend(a2, "masterPortType");
  v130 = 0;
  v131 = &v130;
  v132 = 0x3052000000;
  v133 = __Block_byref_object_copy__36;
  v134 = __Block_byref_object_dispose__36;
  v135 = 0;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v10 = *(void **)(a1 + 560);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v126, v149, 16);
  v113 = a2;
  v114 = a1;
  if (!v11)
  {
    v12 = 0;
LABEL_19:
    v103 = v106;
    LODWORD(v101) = 0;
    FigDebugAssert3();
    v116 = 0;
    goto LABEL_20;
  }
  v116 = 0;
  v12 = 0;
  v13 = *(_QWORD *)v127;
  do
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v127 != v13)
        objc_enumerationMutation(v10);
      v15 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * i);
      v16 = objc_msgSend((id)objc_msgSend(v15, "portType"), "isEqualToString:", v115);
      if (v12)
        v17 = v12;
      else
        v17 = v15;
      v18 = v116;
      if (v16)
        v18 = v15;
      v116 = v18;
      if (!v16)
        v12 = v17;
    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v126, v149, 16);
  }
  while (v11);
  a2 = v113;
  if (!v116)
    goto LABEL_19;
LABEL_20:
  v19 = (void *)objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(v116, "portType", v101, v103));
  v111 = (void *)objc_msgSend(a2, "captureStreamSettingsForPortType:", objc_msgSend(v12, "portType"));
  v112 = v19;
  if (objc_msgSend((id)objc_msgSend(v19, "timeMachineBracketedCaptureParams"), "count"))
    v20 = 1;
  else
    v20 = objc_msgSend((id)objc_msgSend(v19, "unifiedBracketedCaptureParams"), "count") != 0;
  v110 = v20;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  v21 = (void *)objc_msgSend(v113, "captureStreamSettings");
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v122, v148, 16);
  v107 = v8;
  v108 = a3;
  v109 = a4;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (v22)
  {
    v26 = *(_QWORD *)v123;
    do
    {
      for (j = 0; j != v22; ++j)
      {
        if (*(_QWORD *)v123 != v26)
          objc_enumerationMutation(v21);
        v28 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * j);
        if ((v23 & 1) != 0)
        {
          v23 = 1;
          if (v25)
            goto LABEL_30;
        }
        else
        {
          v23 = objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v122 + 1) + 8 * j), "bracketSettings"), "providePreBracketedEV0");
          if (v25)
          {
LABEL_30:
            v25 = 1;
            goto LABEL_33;
          }
        }
        v25 = objc_msgSend(v28, "captureType") == 2;
LABEL_33:
        v29 = objc_msgSend((id)objc_msgSend(v28, "bracketSettings"), "bracketingMode");
        if (v24 == 3)
          v30 = 3;
        else
          v30 = 2;
        if (v29 != 2)
          v30 = v24;
        if ((v29 - 3) < 2 || v29 == 1)
          v24 = v29;
        else
          v24 = v30;
      }
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v122, v148, 16);
    }
    while (v22);
  }
  v33 = v9;
  v32 = v107;
  if (*(_QWORD *)(v114 + 552) && !v111)
    objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07B30]);
  if (objc_msgSend(v113, "deliverSushiRaw"))
    objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AB0]);
  v34 = (void *)objc_msgSend(v116, "stream");
  if (objc_msgSend((id)objc_msgSend(v34, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07608], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AD8]);
  v35 = (void *)objc_msgSend(v116, "stream");
  if (objc_msgSend((id)objc_msgSend(v35, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07600], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AD0]);
  v36 = (void *)objc_msgSend(v116, "stream");
  if (objc_msgSend((id)objc_msgSend(v36, "getPropertyIfSupported:error:", *MEMORY[0x1E0D075C8], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AC8]);
  if (!v110 && (objc_msgSend(v113, "captureFlags") & 0x800) != 0)
  {
    if (*(_BYTE *)(v114 + 3202))
      objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AA0]);
    if (*(_BYTE *)(v114 + 3203))
      objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AA8]);
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v114 + 528), "objectForKeyedSubscript:", CFSTR("StillImageISPChromaNoiseReduction")), "BOOLValue"))
  {
    v37 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(v114 + 2492));
    objc_msgSend(v107, "setObject:forKeyedSubscript:", v37, *MEMORY[0x1E0D07AC0]);
  }
  if (*(_BYTE *)(v114 + 1988))
  {
    v38 = (_QWORD *)MEMORY[0x1E0D059F8];
    if (!v25)
      v38 = (_QWORD *)MEMORY[0x1E0D059F0];
    objc_msgSend(v9, "setObject:forKeyedSubscript:", *v38, *MEMORY[0x1E0D074F8]);
  }
  if (!v25)
  {
    if (v24)
    {
      v41 = (void *)objc_msgSend(v112, "bracketSettings");
      v105 = (void *)objc_msgSend(v111, "bracketSettings");
      if (v23)
        v42 = MEMORY[0x1E0C9AAB0];
      else
        v42 = MEMORY[0x1E0C9AAA0];
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v42, *MEMORY[0x1E0D07248]);
      switch(v24)
      {
        case 1:
          if (!objc_msgSend(v41, "exposureValues"))
            goto LABEL_205;
          v43 = objc_msgSend(v41, "exposureValues");
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v43, *MEMORY[0x1E0D070D8]);
          objc_msgSend(v107, "setObject:forKeyedSubscript:", *MEMORY[0x1E0D07118], *MEMORY[0x1E0D07198]);
          objc_msgSend(v107, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", -[BWFigVideoCaptureDevice _shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:deviceMotionActivity:frameStatisticsByPortType:](v114, 1, 1, (void *)objc_msgSend(v113, "frameStatisticsByPortType"))), *MEMORY[0x1E0D07268]);
          if (*(_BYTE *)(v114 + 2476))
            objc_msgSend(v107, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, *MEMORY[0x1E0D07B48]);
          if (v105)
          {
            v44 = objc_msgSend(v105, "exposureValues");
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v44, *MEMORY[0x1E0D070E0]);
          }
          v45 = (void *)objc_msgSend(v116, "stream");
          if (objc_msgSend((id)objc_msgSend(v45, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
          break;
        case 2:
          if (objc_msgSend(v41, "exposureValues"))
          {
            v71 = objc_msgSend(v41, "exposureValues");
            v72 = (_QWORD *)MEMORY[0x1E0D070D8];
          }
          else
          {
            if (!objc_msgSend(v41, "manualExposureBracketedCaptureParams"))
              goto LABEL_157;
            v71 = objc_msgSend(v41, "manualExposureBracketedCaptureParams");
            v72 = (_QWORD *)MEMORY[0x1E0D071E0];
          }
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v71, *v72);
LABEL_157:
          objc_msgSend(v107, "setObject:forKeyedSubscript:", *MEMORY[0x1E0D07120], *MEMORY[0x1E0D07198]);
          if (*(_BYTE *)(v114 + 3153))
          {
            objc_msgSend(v113, "frameStatisticsByPortType");
            if (objc_msgSend(*(id *)(v114 + 504), "sphereEnabled"))
            {
              v77 = *(void **)(v114 + 3072);
              if (v77)
                v78 = objc_msgSend(v77, "isStationary");
              else
                v78 = 0;
              v84 = (objc_msgSend(*(id *)(v114 + 504), "motionDataInvalid") | v78) ^ 1;
            }
            else
            {
              v84 = 0;
            }
            v93 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v84);
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v93, *MEMORY[0x1E0D07268]);
          }
          if (objc_msgSend(v105, "exposureValues"))
          {
            v94 = objc_msgSend(v105, "exposureValues");
            v95 = (_QWORD *)MEMORY[0x1E0D070E0];
          }
          else
          {
            if (!objc_msgSend(v105, "manualExposureBracketedCaptureParams"))
              goto LABEL_200;
            v94 = objc_msgSend(v105, "manualExposureBracketedCaptureParams");
            v95 = (_QWORD *)MEMORY[0x1E0D071E8];
          }
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v94, *v95);
LABEL_200:
          v96 = (void *)objc_msgSend(v116, "stream");
          if (objc_msgSend((id)objc_msgSend(v96, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
          v97 = (void *)objc_msgSend((id)objc_msgSend(v116, "sensorIDDictionary"), "objectForKeyedSubscript:", CFSTR("StillImageStabilization"));
          v98 = *MEMORY[0x1E0D07358];
          v99 = objc_msgSend(v97, "objectForKeyedSubscript:", *MEMORY[0x1E0D07358]);
          if (v99)
          {
            v146 = v98;
            v147 = v99;
            v100 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v147, &v146, 1);
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v100, *MEMORY[0x1E0D07108]);
          }
          break;
        case 3:
          if (objc_msgSend(v41, "oisBracketedCaptureParams"))
          {
            v73 = objc_msgSend(v41, "oisBracketedCaptureParams");
            v74 = (_QWORD *)MEMORY[0x1E0D07238];
          }
          else
          {
            if (!objc_msgSend(v41, "manualExposureBracketedCaptureParams"))
              goto LABEL_164;
            v79 = objc_msgSend(v41, "manualExposureBracketedCaptureParams");
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v79, *MEMORY[0x1E0D071E0]);
            v73 = *MEMORY[0x1E0D07110];
            v74 = (_QWORD *)MEMORY[0x1E0D07198];
          }
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v73, *v74);
LABEL_164:
          objc_msgSend(v113, "frameStatisticsByPortType");
          if (objc_msgSend(*(id *)(v114 + 504), "sphereEnabled"))
          {
            v80 = *(void **)(v114 + 3072);
            if (v80)
              v81 = objc_msgSend(v80, "isStationary");
            else
              v81 = 0;
            v82 = (objc_msgSend(*(id *)(v114 + 504), "motionDataInvalid") | v81) ^ 1;
          }
          else
          {
            v82 = 0;
          }
          v85 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v82);
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v85, *MEMORY[0x1E0D07268]);
          if (objc_msgSend(v105, "oisBracketedCaptureParams"))
          {
            v86 = objc_msgSend(v105, "oisBracketedCaptureParams");
            v87 = (_QWORD *)MEMORY[0x1E0D07240];
          }
          else
          {
            if (!objc_msgSend(v105, "manualExposureBracketedCaptureParams"))
              goto LABEL_183;
            v86 = objc_msgSend(v105, "manualExposureBracketedCaptureParams");
            v87 = (_QWORD *)MEMORY[0x1E0D071E8];
          }
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v86, *v87);
LABEL_183:
          v88 = (void *)objc_msgSend(v116, "stream");
          if (objc_msgSend((id)objc_msgSend(v88, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
          if (*(_DWORD *)(v114 + 1992))
          {
            v89 = objc_msgSend((id)objc_msgSend(*(id *)(v114 + 2008), "objectForKeyedSubscript:", objc_msgSend(v116, "portType")), "afWindowParams");
          }
          else
          {
            v90 = (void *)objc_msgSend((id)objc_msgSend(v116, "sensorIDDictionary"), "objectForKeyedSubscript:", CFSTR("StillImageStabilization"));
            v89 = objc_msgSend(v90, "objectForKeyedSubscript:", *MEMORY[0x1E0D07358]);
          }
          if (v89)
          {
            v144 = *MEMORY[0x1E0D07358];
            v145 = v89;
            v91 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v145, &v144, 1);
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v91, *MEMORY[0x1E0D07108]);
          }
          break;
        case 4:
          if (!objc_msgSend(v41, "exposureValues") && !objc_msgSend(v41, "manualExposureBracketedCaptureParams")
            || objc_msgSend(v41, "exposureValues") && objc_msgSend(v41, "manualExposureBracketedCaptureParams"))
          {
LABEL_205:
            v104 = v106;
            LODWORD(v102) = 0;
            FigDebugAssert3();
            v69 = 0;
            goto LABEL_138;
          }
          if (objc_msgSend(v41, "exposureValues"))
          {
            v75 = objc_msgSend(v41, "exposureValues");
            v76 = (_QWORD *)MEMORY[0x1E0D070D8];
          }
          else
          {
            if (!objc_msgSend(v41, "manualExposureBracketedCaptureParams"))
              goto LABEL_171;
            v75 = objc_msgSend(v41, "manualExposureBracketedCaptureParams");
            v76 = (_QWORD *)MEMORY[0x1E0D071E0];
          }
          objc_msgSend(v107, "setObject:forKeyedSubscript:", v75, *v76);
LABEL_171:
          objc_msgSend(v107, "setObject:forKeyedSubscript:", *MEMORY[0x1E0D07110], *MEMORY[0x1E0D07198]);
          if (objc_msgSend(*(id *)(v114 + 504), "hasSphere")
            && objc_msgSend(v41, "lensStabilizationEnabledForClientBracket"))
          {
            objc_msgSend(v113, "frameStatisticsByPortType");
            if (objc_msgSend(*(id *)(v114 + 504), "sphereEnabled"))
              v83 = objc_msgSend(*(id *)(v114 + 504), "motionDataInvalid") ^ 1;
            else
              v83 = 0;
            v92 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v83);
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v92, *MEMORY[0x1E0D07268]);
          }
          break;
        default:
          break;
      }
    }
    else if (objc_msgSend((id)objc_msgSend(v112, "unifiedBracketedCaptureParams"), "count"))
    {
      v46 = objc_msgSend(v112, "preBracketFrameCaptureParams");
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v46, *MEMORY[0x1E0D07B20]);
      v47 = objc_msgSend(v111, "preBracketFrameCaptureParams");
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v47, *MEMORY[0x1E0D07B28]);
      v48 = objc_msgSend(v112, "unifiedBracketedCaptureParams");
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v48, *MEMORY[0x1E0D07B50]);
      v49 = objc_msgSend(v111, "unifiedBracketedCaptureParams");
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v49, *MEMORY[0x1E0D07B58]);
      if ((objc_msgSend(v112, "captureType") != 7
         || objc_msgSend(v112, "lensStabilizationEnabledForClientBracket"))
        && -[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v114, objc_msgSend(v113, "captureType")))
      {
        objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07268]);
      }
      v50 = (void *)objc_msgSend(v116, "stream");
      if (objc_msgSend((id)objc_msgSend(v50, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
      if ((int)objc_msgSend(v112, "captureFlags") < 0)
        v51 = 500;
      else
        v51 = 0;
      v52 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v51);
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v52, *MEMORY[0x1E0D07AB8]);
      v53 = objc_msgSend((id)objc_msgSend(*(id *)(v114 + 2008), "objectForKeyedSubscript:", objc_msgSend(v116, "portType")), "afWindowParams");
      if (v53)
      {
        v142 = *MEMORY[0x1E0D07358];
        v143 = v53;
        v54 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v143, &v142, 1);
        objc_msgSend(v107, "setObject:forKeyedSubscript:", v54, *MEMORY[0x1E0D07108]);
      }
    }
LABEL_106:
    if (!v110)
    {
      -[BWFigVideoCaptureDevice _addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:captureSettings:portType:](v114, v107, v113, v115);
      if (v111)
        -[BWFigVideoCaptureDevice _addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:captureSettings:portType:](v114, v107, v113, objc_msgSend(v12, "portType"));
    }
    v56 = objc_msgSend(v116, "stillImageKeypointDetectionEnabled");
    if ((_DWORD)v56 != objc_msgSend(v116, "keypointDetectionEnabled"))
    {
      v57 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v56);
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v57, *MEMORY[0x1E0D07B08]);
    }
    if (*(_BYTE *)(v114 + 3204))
    {
      if ((objc_msgSend(v113, "captureFlags") & 0x2000) == 0)
      {
        v58 = objc_msgSend(v113, "captureType") == 1;
        if (!v110)
          goto LABEL_118;
LABEL_116:
        v59 = objc_msgSend((id)objc_msgSend(v112, "timeMachineBracketedCaptureParams"), "count") != 0;
        goto LABEL_119;
      }
      v58 = 1;
      if (v110)
        goto LABEL_116;
    }
    else
    {
      v58 = 0;
      if (v110)
        goto LABEL_116;
    }
LABEL_118:
    v59 = 0;
LABEL_119:
    if (!v58 && !v59)
      goto LABEL_132;
    if (objc_msgSend((id)objc_msgSend(v112, "timeMachineBracketedCaptureParams"), "count"))
    {
      v60 = objc_msgSend(v112, "timeMachineBracketedCaptureParams");
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v60, *MEMORY[0x1E0D07B38]);
      if (objc_msgSend(v113, "captureType") == 10)
      {
        v61 = (void *)objc_msgSend(v116, "stream");
        if (objc_msgSend((id)objc_msgSend(v61, "getPropertyIfSupported:error:", *MEMORY[0x1E0D07640], 0), "BOOLValue"))objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AE0]);
      }
      if (!objc_msgSend((id)objc_msgSend(v112, "unifiedBracketedCaptureParams"), "count"))
        objc_msgSend(v107, "setObject:forKeyedSubscript:", *MEMORY[0x1E0D07128], *MEMORY[0x1E0D07198]);
      goto LABEL_132;
    }
    v62 = objc_msgSend(v112, "expectedTimeMachineFrameCaptureCount");
    if (v112)
    {
      objc_msgSend(v112, "preferredTimeMachinePTS");
      if ((v119 & 0x100000000) != 0)
      {
        objc_msgSend(v112, "preferredTimeMachinePTS");
        v63 = CMTimeCopyAsDictionary(&time, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        v140[0] = *MEMORY[0x1E0D07D18];
        v64 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
        v140[1] = *MEMORY[0x1E0D07D20];
        v141[0] = v64;
        v141[1] = v63;
        v65 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v141, v140, 2);

LABEL_131:
        objc_msgSend(v107, "setObject:forKeyedSubscript:", v65, *MEMORY[0x1E0D07B40]);
LABEL_132:
        v66 = v114;
        if (*(_QWORD *)(v114 + 1464))
        {
          v66 = v114;
          if ((objc_msgSend(v113, "captureFlags") & 0x800) != 0)
          {
            v67 = *MEMORY[0x1E0D06610];
            v136[0] = *MEMORY[0x1E0D06608];
            v136[1] = v67;
            v137[0] = &unk_1E49FB7A8;
            v137[1] = &unk_1E49FB7A8;
            v136[2] = *MEMORY[0x1E0D06618];
            v137[2] = &unk_1E49FB7C0;
            v68 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v137, v136, 3);
            objc_msgSend(v107, "setObject:forKeyedSubscript:", v68, *MEMORY[0x1E0D07B00]);
          }
        }
        if ((objc_msgSend((id)objc_msgSend(*(id *)(v66 + 8), "deviceID"), "isEqualToString:", 0x1E492D2B8) & 1) == 0)
          -[BWFigVideoCaptureDevice _propagateStillImageSettings:toCMIOCaptureOptions:](v114, v113, v107);
        v69 = 0;
        goto LABEL_138;
      }
    }
    else
    {
      v118 = 0;
      v119 = 0;
      v120 = 0;
    }
    v138 = *MEMORY[0x1E0D07D18];
    v139 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
    v65 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v139, &v138, 1);
    goto LABEL_131;
  }
  if (*(_BYTE *)(v114 + 1988))
  {
    v39 = *(NSObject **)(v114 + 1584);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __119__BWFigVideoCaptureDevice__convertStillImageCaptureSettings_toStillImageCaptureNowOptions_captureStreamPropertyValues___block_invoke;
    block[3] = &unk_1E491F1A0;
    block[4] = v114;
    block[5] = &v130;
    dispatch_sync(v39, block);
    if (v131[5])
    {
      objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D070F8]);
      objc_msgSend(v9, "addEntriesFromDictionary:", v131[5]);
    }
    if (objc_msgSend(*(id *)(v114 + 504), "sphereEnabled"))
    {
      if (*(int *)(v114 + 2444) < 3)
        v40 = -[BWFigVideoCaptureDevice _shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:deviceMotionActivity:frameStatisticsByPortType:](v114, 1, 1, (void *)objc_msgSend(v113, "frameStatisticsByPortType"));
      else
        v40 = -[BWFigVideoCaptureDevice _ubEnableSphereForCaptureType:](v114, objc_msgSend(v113, "captureType"));
      v55 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v40);
      objc_msgSend(v107, "setObject:forKeyedSubscript:", v55, *MEMORY[0x1E0D07268]);
    }
    if ((objc_msgSend(v112, "captureFlags") & 0x10000) != 0)
      objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AF0]);
    if ((objc_msgSend(v111, "captureFlags") & 0x10000) != 0)
      objc_msgSend(v107, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07AF8]);
    goto LABEL_106;
  }
  v69 = 4294954516;
LABEL_138:
  if (!objc_msgSend(v107, "count", v102, v104))
  {

    v32 = 0;
  }
  if (!objc_msgSend(v9, "count"))
  {

    v33 = 0;
  }

  *v108 = v32;
  *v109 = v33;
  _Block_object_dispose(&v130, 8);
  return v69;
}

uint64_t __119__BWFigVideoCaptureDevice__convertStillImageCaptureSettings_toStillImageCaptureNowOptions_captureStreamPropertyValues___block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v6;
  void (*v7)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, __CFString *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __CFString *, uint64_t, uint64_t);
  CFTypeRef cf;
  _QWORD v15[4];
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1608);
  if (result)
  {
    cf = 0;
    v3 = *MEMORY[0x1E0C9AE00];
    FigBaseObject = FigSampleBufferProcessorGetFigBaseObject();
    v5 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v5)
    {
      v5(FigBaseObject, CFSTR("SpotMeteredExposure"), v3, &cf);
      if (cf)
        goto LABEL_7;
    }
    v6 = FigSampleBufferProcessorGetFigBaseObject();
    v7 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v7)
      v7(v6, CFSTR("AutoExposure"), v3, &cf);
    if (cf)
    {
LABEL_7:
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      FigCFDictionaryGetCGFloatIfPresent();
      v15[0] = CFSTR("x");
      v16[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
      v15[1] = CFSTR("y");
      v16[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 0.0 * 0.5 + 0.5 + -0.45);
      v15[2] = CFSTR("w");
      v16[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 0.0);
      v15[3] = CFSTR("h");
      v16[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 0.0);
      v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 4);
      v9 = FigSampleBufferProcessorGetFigBaseObject();
      v10 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v10)
        v10(v9, CFSTR("FlashExposure"), v8);
      if (cf)
        CFRelease(cf);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = FigSampleBufferProcessorGetFigBaseObject();
    result = CMBaseObjectGetVTable();
    v13 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 48);
    if (v13)
      return v13(v12, CFSTR("PreFlashAFParameters"), v3, v11 + 40);
  }
  return result;
}

- (uint64_t)_shouldUseSphereForStillImageCaptureTakingLowLightIntoAccount:(int)a3 deviceMotionActivity:(void *)a4 frameStatisticsByPortType:
{
  uint64_t v7;
  int v8;
  void *v9;

  if (result)
  {
    v7 = result;
    result = objc_msgSend(*(id *)(result + 504), "sphereEnabled");
    if ((_DWORD)result)
    {
      v8 = 0;
      v9 = *(void **)(v7 + 3072);
      if (v9 && a3)
        v8 = objc_msgSend(v9, "isStationary");
      if ((objc_msgSend(*(id *)(v7 + 504), "motionDataInvalid") & 1) != 0)
      {
        return 0;
      }
      else
      {
        result = a3 & v8 ^ 1u;
        if ((a3 & v8 & 1) == 0)
        {
          if (a2)
            return -[BWFigVideoCaptureDevice _isLowLightSceneUsingFrameStatisticsByPortType:](v7, a4);
        }
      }
    }
  }
  return result;
}

- (uint64_t)_addNoiseReductionAndSharpeningConfigurationToStillImageCaptureOptions:(void *)a3 captureSettings:(uint64_t)a4 portType:
{
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  double v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v7 = result;
  v8 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](result, a4);
  v9 = (void *)objc_msgSend((id)objc_msgSend(v8, "stream"), "supportedProperties");
  result = objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D076D8]);
  if (!result)
    return result;
  v10 = (void *)objc_msgSend(a3, "captureStreamSettingsForPortType:", a4);
  v11 = (void *)objc_msgSend((id)objc_msgSend(a3, "frameStatisticsByPortType"), "objectForKeyedSubscript:", a4);
  v12 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 528), "objectForKeyedSubscript:", CFSTR("IspMBNRSupported")), "BOOLValue");
  v13 = objc_msgSend((id)objc_msgSend(*(id *)(v7 + 528), "objectForKeyedSubscript:", CFSTR("MultiPassIspMBNRSupported")), "BOOLValue");
  v14 = objc_msgSend((id)objc_msgSend(a3, "masterPortType"), "isEqualToString:", a4);
  if ((v12 & 1) != 0
    || v13
    && *(_BYTE *)(v7 + 3200)
    && (objc_msgSend(a3, "captureFlags") & 0x4000) == 0
    && (!*(_BYTE *)(v7 + 1497) ? (v24 = 1) : (v24 = v14), v24 == 1))
  {
    objc_msgSend(v11, "gain");
    v16 = v15;
    v17 = objc_msgSend(v10, "captureFlags");
    LODWORD(v18) = v16;
    result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v17 >> 4) & 1, v18);
    if (!result)
      return result;
    v19 = result;
    v20 = objc_msgSend(a3, "captureType");
    v21 = 0;
    switch(v20)
    {
      case 0:
      case 10:
      case 11:
      case 12:
        v29 = (void *)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Still image capture type '%@' not supported"), BWPhotoEncoderStringFromEncodingScheme(objc_msgSend(a3, "captureType", 0))), 0);
        objc_exception_throw(v29);
      case 1:
      case 2:
      case 6:
      case 7:
      case 8:
        v32 = v19;
        v22 = (void *)MEMORY[0x1E0C99D20];
        v23 = &v32;
        break;
      case 3:
        objc_msgSend(v11, "gain", 0);
        result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 2);
        if (!result)
          return result;
        v28 = result;
        if (objc_msgSend((id)objc_msgSend(v10, "bracketSettings"), "providePreBracketedEV0"))
        {
          v36[0] = v19;
          v36[1] = v28;
          v22 = (void *)MEMORY[0x1E0C99D20];
          v23 = v36;
          goto LABEL_28;
        }
        v35 = v28;
        v22 = (void *)MEMORY[0x1E0C99D20];
        v23 = &v35;
        break;
      case 4:
        objc_msgSend(v11, "gain", 0);
        result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 4);
        if (!result)
          return result;
        v34 = result;
        v22 = (void *)MEMORY[0x1E0C99D20];
        v23 = &v34;
        break;
      case 5:
        objc_msgSend(v11, "gain", 0);
        result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 3);
        if (!result)
          return result;
        v33 = result;
        v22 = (void *)MEMORY[0x1E0C99D20];
        v23 = &v33;
        break;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    objc_msgSend(v11, "gain");
    result = objc_msgSend(v8, "noiseReductionAndSharpeningConfigurationForType:gain:", 0);
    if (!result)
      return result;
    v25 = result;
    if (objc_msgSend(a3, "captureType") == 3
      && objc_msgSend((id)objc_msgSend(v10, "bracketSettings"), "providePreBracketedEV0"))
    {
      v31[0] = v25;
      v31[1] = v25;
      v22 = (void *)MEMORY[0x1E0C99D20];
      v23 = v31;
LABEL_28:
      v26 = 2;
      goto LABEL_20;
    }
    v30 = v25;
    v22 = (void *)MEMORY[0x1E0C99D20];
    v23 = &v30;
  }
  v26 = 1;
LABEL_20:
  v21 = objc_msgSend(v22, "arrayWithObjects:count:", v23, v26);
LABEL_21:
  v27 = (_QWORD *)MEMORY[0x1E0D07B10];
  if (!v14)
    v27 = (_QWORD *)MEMORY[0x1E0D07B18];
  return objc_msgSend(a2, "setObject:forKeyedSubscript:", v21, *v27);
}

- (uint64_t)_captureStillImageNowOnStreamWithOptions:(void *)a3 captureStreamProperties:
{
  uint64_t v3;
  double v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  uint64_t v20;
  _DWORD *v21;
  void *v22;
  id v23;
  int v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD v43[3];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  os_log_type_t type;
  int v49;
  id v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _BYTE v61[128];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if (!_FigIsCurrentDispatchQueue())
  {
    v40 = v3;
    LODWORD(v38) = 0;
    FigDebugAssert3();
  }
  if (objc_msgSend(*(id *)(a1 + 2512), "captureType", v38, v40) == 2)
  {
    LODWORD(v7) = 0;
    objc_msgSend((id)a1, "setTorchLevel:", v7);
LABEL_12:
    v42 = 0;
    goto LABEL_13;
  }
  if (objc_msgSend(*(id *)(a1 + 2512), "captureType") != 11)
    goto LABEL_12;
  v42 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettingsForPortType:", objc_msgSend(*(id *)(a1 + 2512), "masterPortType")), "adaptiveBracketingGroupCaptureCount");
  if (v42 <= 1)
  {
    if (*(_BYTE *)(a1 + 2264))
    {
      v8 = (void *)objc_msgSend(*(id *)(a1 + 504), "stream");
      objc_msgSend(v8, "sendCommandProperty:", *MEMORY[0x1E0D07610]);
    }
    if (*(_BYTE *)(a1 + 2265))
    {
      v9 = (void *)objc_msgSend(*(id *)(a1 + 504), "stream");
      objc_msgSend(v9, "sendCommandProperty:", *MEMORY[0x1E0D07618]);
    }
  }
LABEL_13:
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v56;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v56 != v12)
          objc_enumerationMutation(a3);
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 504), "stream"), "setProperty:value:", *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i), objc_msgSend(a3, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i)));
      }
      v11 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v55, v61, 16);
    }
    while (v11);
  }
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v14 = *(void **)(a1 + 560);
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v52;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v52 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * j);
        if (objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettingsForPortType:", objc_msgSend(v19, "portType")))
          objc_msgSend(v19, "willCaptureStillImageFromFirmware");
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
    }
    while (v16);
  }
  v50 = 0;
  if (!*(_BYTE *)(a1 + 156))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
    v20 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToStillImageCaptureOptionsIfNeeded:stillImageCaptureOptionsOut:](a1, a2, &v50);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
    if ((_DWORD)v20)
    {
      FigDebugAssert3();
      return v20;
    }
  }
  v21 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    objc_msgSend(*(id *)(a1 + 2512), "settingsID");
    objc_msgSend(*(id *)(a1 + 2512), "captureType");
    kdebug_trace();
  }
  if (*(_BYTE *)(a1 + 2536))
    v22 = (void *)objc_msgSend(*(id *)(a1 + 552), "syncGroup");
  else
    v22 = (void *)objc_msgSend(*(id *)(a1 + 504), "stream");
  if (v50)
    v23 = v50;
  else
    v23 = a2;
  v20 = objc_msgSend(v22, "setProperty:value:", CFSTR("StillImageCaptureNow"), v23);
  if (*v21 == 1)
  {
    objc_msgSend(*(id *)(a1 + 2512), "settingsID");
    objc_msgSend(*(id *)(a1 + 2512), "captureType");
    kdebug_trace();
  }
  if (v50)
  {

    v50 = 0;
  }
  if (*(_QWORD *)(a1 + 3248))
    -[BWFigVideoCaptureDevice _resumeTimeMachines](a1);
  if ((_DWORD)v20 == -12688)
  {
    ++*(_DWORD *)(a1 + 2540);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2504));
    if ((objc_msgSend(*(id *)(a1 + 2512), "captureFlags") & 0x2000) == 0)
    {
      *(_BYTE *)(a1 + 2544) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
      goto LABEL_49;
    }
    v24 = *(_DWORD *)(a1 + 2540);
    *(_BYTE *)(a1 + 2544) = v24 < 8;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2504));
    if (v24 < 8)
    {
LABEL_49:
      if (dword_1ECFE9470)
      {
        v49 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 0;
    }
    if (dword_1ECFE9470)
    {
      v49 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (v42 >= 2 && (_DWORD)v20)
  {
    if (dword_1ECFE9470)
    {
      v49 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v28 = (void *)objc_msgSend(*(id *)(a1 + 2512), "portTypes", v39, v41);
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v45;
      do
      {
        for (k = 0; k != v30; ++k)
        {
          if (*(_QWORD *)v45 != v31)
            objc_enumerationMutation(v28);
          v33 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * k);
          v34 = (void *)objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettingsForPortType:", v33);
          v35 = -[BWFigVideoCaptureDevice _captureStreamByPortType:](a1, (uint64_t)v33);
          objc_msgSend(v34, "setReachedEndOfAdaptiveBracketing:", 1);
          if (objc_msgSend(v33, "isEqualToString:", objc_msgSend(*(id *)(a1 + 2512), "masterPortType")))
          {
            v36 = (void *)objc_msgSend(v35, "stillImageCaptureDelegate");
            if (v34)
              objc_msgSend(v34, "adaptiveBracketingLastFramePTS");
            else
              memset(v43, 0, sizeof(v43));
            objc_msgSend(v36, "captureStream:didCaptureReferenceFrameWithPTS:referenceFrameBracketedCaptureSequenceNumber:", v35, v43, 0);
          }
          objc_msgSend((id)objc_msgSend(v35, "stillImageCaptureDelegate"), "captureStreamDidCompleteStillImageCapture:", v35);
        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
      }
      while (v30);
    }
    objc_msgSend(*(id *)(a1 + 2184), "stopAdaptiveBracketingForSettings:withGroup:", *(_QWORD *)(a1 + 2512), (v42 - 1));
    objc_msgSend((id)a1, "_resetStillImageCaptureRequestState");
    return 0;
  }
  return v20;
}

- (uint64_t)_ubAddSensorRawOutputBuffersToStillImageCaptureOptionsIfNeeded:(_QWORD *)a3 stillImageCaptureOptionsOut:
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 144));
  if (*(_BYTE *)(a1 + 156) || !objc_msgSend(*(id *)(a1 + 160), "objectForKeyedSubscript:", &unk_1E49FB7A8))
  {
    v6 = 0;
    goto LABEL_23;
  }
  v20 = 0;
  v6 = 0;
  if (!a3 || !*(_BYTE *)(a1 + 2058))
    goto LABEL_17;
  if ((objc_msgSend(*(id *)(a1 + 2512), "captureFlags") & 0x300000000) == 0)
  {
    v20 = 0;
LABEL_27:
    v6 = 0;
    goto LABEL_28;
  }
  v20 = (void *)objc_msgSend(a2, "mutableCopy");
  if (*(_BYTE *)(a1 + 2536))
  {
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v7 = (void *)objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettings");
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    if (v8)
    {
      v9 = v8;
      v19 = a3;
      v10 = *(_QWORD *)v23;
      v11 = *MEMORY[0x1E0D07B50];
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v23 != v10)
            objc_enumerationMutation(v7);
          v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
          v14 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
          v21 = 0;
          v15 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:unifiedBracketedCaptureParamsOut:](a1, (void *)objc_msgSend(v14, "objectForKeyedSubscript:", v11), &v21);
          if ((_DWORD)v15)
          {
            v6 = v15;
            FigDebugAssert3();
            a3 = v19;
            goto LABEL_22;
          }
          v16 = (void *)objc_msgSend(v14, "mutableCopy");
          objc_msgSend(v16, "setObject:forKeyedSubscript:", v21, v11);
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v16, objc_msgSend(v13, "portType"));

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
        if (v9)
          continue;
        break;
      }
      v6 = 0;
      a3 = v19;
LABEL_17:
      if (!a3)
        return v6;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v21 = 0;
  v17 = *MEMORY[0x1E0D07B50];
  v6 = -[BWFigVideoCaptureDevice _ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:unifiedBracketedCaptureParamsOut:](a1, (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07B50]), &v21);
  if ((_DWORD)v6)
  {
    FigDebugAssert3();
LABEL_22:

LABEL_23:
    v20 = 0;
    if (!a3)
      return v6;
    goto LABEL_28;
  }
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v21, v17);

LABEL_28:
  *a3 = v20;
  return v6;
}

- (uint64_t)_stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:(uint64_t)a3 masterPortType:(uint64_t)a4 captureType:(uint64_t)a5 captureFlags:
{
  os_unfair_lock_s *v10;
  unsigned __int8 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned __int8 v15;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFString *v23;
  int v24;
  int v25;
  const __CFString *v26;
  const __CFString *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  float v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  void *v41;
  void *v42;
  int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  void *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  os_log_type_t type;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  const char *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  const __CFString *v68;
  __int16 v69;
  const __CFString *v70;
  __int16 v71;
  const __CFString *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = (os_unfair_lock_s *)(a1 + 1288);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1288));
  if (!*(_BYTE *)(a1 + 2600))
  {
    os_unfair_lock_unlock(v10);
    goto LABEL_22;
  }
  v11 = -[BWFigVideoCaptureDevice _isSwitchOverPreventingStillImageCaptureInProgress]((const os_unfair_lock *)a1);
  os_unfair_lock_unlock(v10);
  if ((v11 & 1) == 0)
  {
LABEL_22:
    v28 = objc_msgSend(a2, "objectForKeyedSubscript:", a3);
    v16 = 1;
    if (a4 > 0xB || ((1 << a4) & 0x906) == 0)
      return v16;
    if (!*(_QWORD *)(a1 + 3248))
    {
      v29 = (void *)v28;
      if ((_DWORD)a4 == 1 && (unint64_t)objc_msgSend(a2, "frameCount") < 5)
      {
        v48 = a5;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v16 = 4;
        goto LABEL_5;
      }
      v47 = v29;
      if ((a5 & 0x400) != 0)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v31 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v55, v78, 16);
        if (v31)
        {
          v32 = v31;
          v15 = 0;
          v33 = *(_QWORD *)v56;
          do
          {
            for (i = 0; i != v32; ++i)
            {
              if (*(_QWORD *)v56 != v33)
                objc_enumerationMutation(a2);
              v15 |= objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i)), "afStatus") == 2;
            }
            v32 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v55, v78, 16);
          }
          while (v32);
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = objc_msgSend(v29, "afStatus") == 2;
      }
      if ((_DWORD)a4 == 11)
      {
        if ((int)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 2512), "captureStreamSettingsForPortType:", a3), "adaptiveBracketingGroupCaptureCount") > 1)return 1;
        v48 = a5;
        if ((a5 & 0x200) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2296));
          v35 = *(float *)(a1 + 2300);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2296));
          if (v35 < *(float *)(a1 + 2292) && *(_DWORD *)(a1 + 2496) < *(_DWORD *)(a1 + 2268))
          {
            if (dword_1ECFE9470)
            {
              v54 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v16 = 3;
            goto LABEL_5;
          }
        }
        v42 = v47;
        objc_msgSend(v47, "focusingMethod");
        v13 = 0;
        v14 = FigCaptureStreamFocusingMethodIsContrastBased() != 0;
        v15 = v14;
      }
      else
      {
        v48 = a5;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v37 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v49, v77, 16);
        if (v37)
        {
          v38 = v37;
          LOBYTE(v13) = 0;
          LOBYTE(v14) = 0;
          v39 = *(_QWORD *)v50;
          do
          {
            for (j = 0; j != v38; ++j)
            {
              if (*(_QWORD *)v50 != v39)
                objc_enumerationMutation(a2);
              v41 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * j));
              objc_msgSend(v41, "focusingMethod");
              v14 = (FigCaptureStreamFocusingMethodIsContrastBased() | v14) != 0;
              objc_msgSend(v41, "focusingMethod");
              v13 = (FigCaptureStreamFocusingMethodIsPhaseDetectionBased() | v13) != 0;
            }
            v38 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v49, v77, 16);
          }
          while (v38);
        }
        else
        {
          v13 = 0;
          v14 = 0;
        }
        v42 = v47;
      }
      v43 = *(_DWORD *)(a1 + 2500);
      if (v14 || v13)
      {
        v44 = 1984;
        if (v14)
          v44 = 1980;
        v45 = *(_DWORD *)(a1 + v44);
        if (v43 <= v45)
          v43 = v45;
      }
      v12 = *(_DWORD *)(a1 + 2496) >= *(_DWORD *)(a1 + 2604) + v43;
      if ((v15 ^ 1) & 1 | (*(_DWORD *)(a1 + 2496) >= *(_DWORD *)(a1 + 2604) + v43))
        v16 = 1;
      else
        v16 = 2;
      if ((_DWORD)a4 != 11 || !((v15 ^ 1) & 1 | (*(_DWORD *)(a1 + 2496) >= *(_DWORD *)(a1 + 2604) + v43)))
        goto LABEL_5;
      *(_BYTE *)(a1 + 2264) = objc_msgSend(v42, "aeLocked") ^ 1;
      *(_BYTE *)(a1 + 2265) = objc_msgSend(v42, "afLocked") ^ 1;
    }
    return 1;
  }
  v48 = a5;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 5;
LABEL_5:
  if (v16 >= 2 && dword_1ECFE9470)
  {
    v46 = v12;
    v54 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v18 = v54;
    if (os_log_type_enabled(v17, type))
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFE;
    if (v19)
    {
      v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), v16);
      v21 = BWPhotoEncoderStringFromEncodingScheme(a4);
      v22 = BWStillImageCaptureFrameFlagsToShortString(v48);
      v23 = CFSTR("NO");
      v24 = *(_DWORD *)(a1 + 2496);
      v25 = *(_DWORD *)(a1 + 2500);
      v59 = 136317186;
      v60 = "-[BWFigVideoCaptureDevice _stillImageCaptureInProgressSubstateForFrameStatisticsByPortType:masterPortType:ca"
            "ptureType:captureFlags:]";
      if ((v15 & 1) != 0)
        v26 = CFSTR("YES");
      else
        v26 = CFSTR("NO");
      v62 = v20;
      v27 = CFSTR("None");
      v61 = 2112;
      v63 = 2112;
      v64 = v21;
      if (v13)
        v27 = CFSTR("NonCBAF");
      v65 = 2112;
      if (v14)
        v27 = CFSTR("CBAF");
      v66 = v22;
      if (v46)
        v23 = CFSTR("YES");
      v67 = 2112;
      v68 = v26;
      v69 = 2112;
      v70 = v27;
      v71 = 2112;
      v72 = v23;
      v73 = 1024;
      v74 = v24;
      v75 = 1024;
      v76 = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v16;
}

- (void)_logStillImageCaptureTimingStatisticsForCoreAnalytics
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD v15[6];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  if (a1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 2512), "stillImageRequestTime");
    ++*(_DWORD *)(a1 + 3336);
    if ((objc_msgSend(*(id *)(a1 + 2512), "captureFlags") & 0x4000) != 0)
      goto LABEL_4;
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v3 = *(NSObject **)(a1 + 1584);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __80__BWFigVideoCaptureDevice__logStillImageCaptureTimingStatisticsForCoreAnalytics__block_invoke;
    v15[3] = &unk_1E491E9A8;
    v15[4] = a1;
    v15[5] = &v16;
    dispatch_sync(v3, v15);
    v4 = *((_DWORD *)v17 + 6);
    _Block_object_dispose(&v16, 8);
    if (v4 == 2)
    {
LABEL_4:
      ++*(_DWORD *)(a1 + 3340);
      return;
    }
    ++*(_DWORD *)(a1 + 3344);
    if (!*(_DWORD *)(a1 + 3356))
      *(_DWORD *)(a1 + 3356) = FigHostTimeToNanoseconds() / 0xF4240uLL;
    if (!*(_QWORD *)(a1 + 3360))
      goto LABEL_31;
    v5 = FigHostTimeToNanoseconds() / 0xF4240uLL;
    v6 = *(_DWORD *)(a1 + 3372);
    if (v6 <= v5)
      v6 = v5;
    *(_DWORD *)(a1 + 3372) = v6;
    v7 = *(_DWORD *)(a1 + 3368);
    if (v7 >= v5)
      v7 = v5;
    *(_DWORD *)(a1 + 3368) = v7;
    if (v5 > 0x1F3)
    {
      if (*(_BYTE *)(a1 + 3392))
        *(_BYTE *)(a1 + 3392) = 0;
      *(_DWORD *)(a1 + 3404) = 0;
      v9 = (unsigned int *)(a1 + 3408);
      if (v5 > 0x3E7)
      {
        if (*(_BYTE *)(a1 + 3393))
          *(_BYTE *)(a1 + 3393) = 0;
        *v9 = 0;
        goto LABEL_31;
      }
      v10 = (unsigned int *)(a1 + 3400);
      v11 = (_DWORD *)(a1 + 3380);
      if (*(_BYTE *)(a1 + 3393))
      {
LABEL_28:
        ++*v11;
        v12 = *v9;
        v13 = *v9 + 1;
        *v9 = v13;
        v14 = *v10;
        if (*v10 <= v13)
          v14 = v12 + 1;
        *v10 = v14;
LABEL_31:
        *(_QWORD *)(a1 + 3360) = v2;
        return;
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 3392))
      {
        v8 = *(_DWORD *)(a1 + 3404) + 1;
      }
      else
      {
        *(_BYTE *)(a1 + 3392) = 1;
        ++*(_DWORD *)(a1 + 3384);
        v8 = 2;
      }
      ++*(_DWORD *)(a1 + 3376);
      *(_DWORD *)(a1 + 3404) = v8;
      if (*(_DWORD *)(a1 + 3396) > v8)
        v8 = *(_DWORD *)(a1 + 3396);
      *(_DWORD *)(a1 + 3396) = v8;
      v11 = (_DWORD *)(a1 + 3380);
      v9 = (unsigned int *)(a1 + 3408);
      v10 = (unsigned int *)(a1 + 3400);
      if (*(_BYTE *)(a1 + 3393))
        goto LABEL_28;
    }
    *(_BYTE *)(a1 + 3393) = 1;
    ++*(_DWORD *)(a1 + 3388);
    *(_DWORD *)(a1 + 3408) = 1;
    goto LABEL_28;
  }
}

- (char)_terminateCaptureAndEmitStillImageCaptureError:(char *)result stillImageCaptureNowOptions:(uint64_t)a2 stillImageCaptureStreamProperties:
{
  char *v3;
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (result && (_DWORD)a2)
  {
    v3 = result;
    v4 = objc_msgSend(result, "isBravoVariant");
    v5 = 504;
    if (v4)
      v5 = 1296;
    objc_msgSend(*(id *)&v3[v5], "portType");
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v6 = (void *)*((_QWORD *)v3 + 70);
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v13 != v9)
            objc_enumerationMutation(v6);
          v11 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (objc_msgSend(*((id *)v3 + 314), "captureStreamSettingsForPortType:", objc_msgSend(v11, "portType")))
            objc_msgSend(v11, "failedToCaptureStillImageFromFirmwareWithError:", a2);
        }
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v8);
    }
    return (char *)objc_msgSend(v3, "_resetStillImageCaptureRequestState");
  }
  return result;
}

- (void)_addStillImageSettingsToStillImageSampleBuffer:(uint64_t)a1
{
  if (a1)
  {
    if (target)
    {
      CMSetAttachment(target, CFSTR("BWStillImageCaptureSettings"), *(CFTypeRef *)(a1 + 2512), 1u);
      CMSetAttachment(target, CFSTR("StillImageCaptureType"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(*(id *)(a1 + 2512), "captureType")), 1u);
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

- (uint64_t)_addPreviewWhiteBalanceMetadataToStillImageSampleBuffer:(uint64_t)result
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;

  if (result)
  {
    if (a2)
    {
      v3 = result;
      result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(result + 2512), "metadata"), "previewWhiteBalanceMetadataByPortType"), "count");
      if (result)
      {
        result = objc_msgSend(*(id *)(v3 + 2512), "captureFlags");
        if ((result & 4) != 0)
        {
          v4 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
          v5 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
          v6 = *(void **)(v3 + 1464);
          if (!v6 || (result = objc_msgSend(v5, "isEqualToString:", objc_msgSend(v6, "portType")), (result & 1) == 0))
          {
            v7 = (unint64_t)BWStillImageCaptureFrameFlagsForSampleBuffer(a2);
            v8 = objc_msgSend(*(id *)(v3 + 2512), "captureFlags");
            result = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
            if (v7 >> 62)
            {
              if ((v7 & 0x3000000000000000) == 0)
                return objc_msgSend(v4, "addEntriesFromDictionary:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2512), "metadata"), "previewWhiteBalanceMetadataByPortType"), "objectForKeyedSubscript:", v5));
            }
            if ((v8 & 0x300000000) != 0 && (_DWORD)result == 1)
              return objc_msgSend(v4, "addEntriesFromDictionary:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v3 + 2512), "metadata"), "previewWhiteBalanceMetadataByPortType"), "objectForKeyedSubscript:", v5));
          }
        }
      }
    }
  }
  return result;
}

- (uint64_t)_addADRCExposureRealizedGainToStillImageSampleBuffer:(uint64_t)result
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  float v7;
  float v8;
  double v9;

  if (result)
  {
    if (target)
    {
      v2 = result;
      v3 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      v4 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
      v5 = *(void **)(v2 + 1464);
      if (!v5 || (result = objc_msgSend(v4, "isEqualToString:", objc_msgSend(v5, "portType")), (result & 1) == 0))
      {
        result = objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue");
        if ((int)result >= 1)
        {
          v6 = *MEMORY[0x1E0D06128];
          result = objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06128]);
          if (result)
          {
            v7 = 1.0;
            if (objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", v6), "intValue") - 3 <= 0xFFFFFFFD)
            {
              os_unfair_lock_lock((os_unfair_lock_t)(v2 + 1956));
              objc_msgSend(*(id *)(v2 + 1960), "adrcExposureRealizedGain");
              v7 = v8;
              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 1956));
            }
            objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("ADRCExposureRealizedGain")), "floatValue");
            *(float *)&v9 = v7;
            return objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9), CFSTR("ADRCExposureRealizedGain"));
          }
        }
      }
    }
  }
  return result;
}

- (void)_addAutofocusAndDiagnosticMetadata:(uint64_t)a1
{
  const __CFString *v4;
  CFTypeRef v5;
  NSObject *v6;
  _QWORD block[7];

  if (a1)
  {
    if (target)
    {
      v4 = (const __CFString *)*MEMORY[0x1E0D05CB0];
      v5 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      if (!v5)
      {
        v5 = (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        CMSetAttachment(target, v4, v5, 1u);
      }
      v6 = *(NSObject **)(a1 + 1584);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __62__BWFigVideoCaptureDevice__addAutofocusAndDiagnosticMetadata___block_invoke;
      block[3] = &unk_1E491EC68;
      block[5] = v5;
      block[6] = target;
      block[4] = a1;
      dispatch_sync(v6, block);
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

- (void)_addPortraitSceneMonitoringMetadataToSampleBuffer:(uint64_t)a1
{
  os_unfair_lock_s *v4;
  float v5;
  float v6;
  CFTypeRef v7;
  double v8;
  void *v9;
  uint64_t v10;

  if (a1)
  {
    if (!a2)
      goto LABEL_6;
    v4 = (os_unfair_lock_s *)(a1 + 1500);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1500));
    objc_msgSend(*(id *)(a1 + 1520), "focusDistanceToMaxAllowedFocusDistanceRatio");
    v6 = v5;
    os_unfair_lock_unlock(v4);
    if (v6 == 0.0)
      return;
    v7 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v7)
    {
      v9 = (void *)v7;
      *(float *)&v8 = v6;
      v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8);
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D08790]);
    }
    else
    {
LABEL_6:
      FigDebugAssert3();
    }
  }
}

_QWORD *__62__BWFigVideoCaptureDevice__addAutofocusAndDiagnosticMetadata___block_invoke(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_QWORD *)(result[4] + 1608))
    return (_QWORD *)FigSampleBufferAutofocusProcessorAddTimestampedMetadata(*(_QWORD *)(result[4] + 1608), result[6], result[5], a4);
  return result;
}

- (void)_resetStillImageCaptureRequestState
{
  os_unfair_lock_s *p_skippedFramesCountForStillImageCaptureRetry;
  _BOOL4 digitalFlashLockingAE;
  _BOOL4 digitalFlashLockingAF;
  __int16 v6;
  BWFigCaptureStream *v7;
  BWFigCaptureStream *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate;
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  p_skippedFramesCountForStillImageCaptureRetry = (os_unfair_lock_s *)&self->_skippedFramesCountForStillImageCaptureRetry;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
  digitalFlashLockingAE = self->_digitalFlashLockingAE;
  digitalFlashLockingAF = self->_digitalFlashLockingAF;
  self->_digitalFlashLockingAE = 0;
  *(_WORD *)&self->_digitalFlashLockingAF = 0;
  v6 = objc_msgSend(*(id *)&self->_stillImageCaptureStateLock._os_unfair_lock_opaque, "captureFlags");
  -[BWFigVideoCaptureDevice _resetStillImageCaptureRequestStateInternal]((uint64_t)self);
  os_unfair_lock_unlock(p_skippedFramesCountForStillImageCaptureRetry);
  -[BWFigVideoCaptureDevice _resumeTimeMachines]((uint64_t)self);
  if (digitalFlashLockingAE)
  {
    v7 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    -[BWFigCaptureStream sendCommandProperty:](v7, "sendCommandProperty:", *MEMORY[0x1E0D07850]);
  }
  if (digitalFlashLockingAF)
  {
    v8 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream");
    -[BWFigCaptureStream sendCommandProperty:](v8, "sendCommandProperty:", *MEMORY[0x1E0D07448]);
  }
  if ((v6 & 0x200) != 0)
  {
    if (dword_1ECFE9470)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate = self->_supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate;
    v11 = -[FigWeakReference referencedObject](self->_supplementalPointCloudCaptureDevice, "referencedObject", v13, v14);
    *(float *)&v12 = supplementalPointCloudCaptureDeviceStreamingMinimumFrameRate;
    objc_msgSend(v11, "setMinimumFrameRate:", v12);
  }

  *(_QWORD *)&self->_smartCameraVersion.major = 0;
  os_unfair_lock_lock(&self->_switchOverLock);
  LOWORD(self->_lastStillImageCaptureEndPTS.epoch) = 0;
  objc_msgSend(*(id *)&self->_retryCaptureStillImageNow, "transitionToState:", 2);
  os_unfair_lock_unlock(&self->_switchOverLock);
}

char *__88__BWFigVideoCaptureDevice__serviceRetryStillImageCaptureUsingFrameStatisticsByPortType___block_invoke(uint64_t a1)
{
  char *result;

  result = (char *)-[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](*(_QWORD *)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 32) + 2520), *(void **)(*(_QWORD *)(a1 + 32) + 2528));
  if ((_DWORD)result)
    return -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:](*(char **)(a1 + 32), (uint64_t)result);
  return result;
}

uint64_t __80__BWFigVideoCaptureDevice__logStillImageCaptureTimingStatisticsForCoreAnalytics__block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 1832);
  return result;
}

- (id)copyISPProcessingSessionWithType:(int)a3 error:(int *)a4
{
  return -[BWFigCaptureDevice copyISPProcessingSessionWithType:error:](self->_device, "copyISPProcessingSessionWithType:error:", *(_QWORD *)&a3, a4);
}

- (CGRect)sensorRegionOfInterestForCameraControls
{
  double v2;
  double v3;
  double x;
  double y;
  CGRect result;

  v2 = *(double *)&self->_timeToCriticalSystemPressureInMS;
  v3 = *(double *)&self->_factorsContributingToMaxSystemPressureLevel;
  x = self->_regionOfInterestForCameraControls.origin.x;
  y = self->_regionOfInterestForCameraControls.origin.y;
  result.size.height = y;
  result.size.width = x;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

- (uint64_t)_updateSensorRegionOfInterest:(double)a3 forZoomFactor:(double)a4 previewShiftInSensorSpace:(double)a5 streamProperty:(double)a6
{
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v11 = result;
    FigCaptureMetadataUtilitiesNormalizeCropRect(a3, a4, a5, a6);
    v16 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v12, v13, v14, v15, a7, a8);
    v18 = (v17 * 1000.0);
    v20 = (v19 * 1000.0);
    v22 = (v21 * 1000.0);
    v23[0] = *MEMORY[0x1E0D05B88];
    v24[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (v16 * 1000.0));
    v23[1] = *MEMORY[0x1E0D05BB8];
    v24[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v18);
    v23[2] = *MEMORY[0x1E0D05BC8];
    v24[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v20);
    v23[3] = *MEMORY[0x1E0D05B90];
    v24[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v22);
    return -[BWFigVideoCaptureDevice _setSynchronizedStreamsGroupProperty:value:](v11, a2, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 4));
  }
  return result;
}

- (uint64_t)_updateSensorRegionOfInterestForActiveFraming
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  CGRect v4;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 189))
    {
      if (*(_BYTE *)(result + 4072) && *(_BYTE *)(result + 3548))
      {
        if (*(_BYTE *)(result + 3624) && !*(_BYTE *)(result + 240))
        {
          objc_msgSend((id)objc_msgSend(*(id *)(result + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 1);
          v2 = (void *)objc_msgSend(*(id *)(v1 + 4080), "referencedObject");
          v3 = 1;
        }
        else
        {
          if (!*(_BYTE *)(result + 4009)
            || *(_BYTE *)(result + 4088)
            || *(_BYTE *)(result + 240)
            || (v4.origin.x = 0.0,
                v4.origin.y = 0.0,
                v4.size.width = 1.0,
                v4.size.height = 1.0,
                CGRectEqualToRect(*(CGRect *)(result + 3960), v4)))
          {
            objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 0);
            objc_msgSend((id)objc_msgSend(*(id *)(v1 + 4080), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 0);
            return -[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:](v1, *MEMORY[0x1E0D07728], *(double *)(v1 + 3552), *(double *)(v1 + 3560), *(double *)(v1 + 3568), *(double *)(v1 + 3576), 1.0, *MEMORY[0x1E0C9D538]);
          }
          objc_msgSend((id)objc_msgSend(*(id *)(v1 + 3992), "referencedObject"), "setRegionOfInterestForCameraControlsFeedbackEnabled:", 1);
          v2 = (void *)objc_msgSend(*(id *)(v1 + 4080), "referencedObject");
          v3 = 0;
        }
        return objc_msgSend(v2, "setRegionOfInterestForCameraControlsFeedbackEnabled:", v3);
      }
    }
  }
  return result;
}

- (int)setContinuousAutoFocusRect:(CGRect)a3 isFocusRectInOverscanSpace:(BOOL)a4
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  NSObject *focusAndExposureUpdateQueue;
  int v11;
  _QWORD block[10];
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  if (!_FigIsNotCurrentDispatchQueue())
    FigDebugAssert3();
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke;
  block[3] = &unk_1E4925FE0;
  *(CGFloat *)&block[6] = x;
  *(CGFloat *)&block[7] = y;
  *(CGFloat *)&block[8] = width;
  *(CGFloat *)&block[9] = height;
  v14 = a4;
  block[4] = self;
  block[5] = &v15;
  dispatch_sync(focusAndExposureUpdateQueue, block);
  v11 = *((_DWORD *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v11;
}

void __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  float v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD v18[4];
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = 3584;
  if (!*(_BYTE *)(a1 + 80))
    v2 = 1768;
  v3 = 3592;
  if (!*(_BYTE *)(a1 + 80))
    v3 = 1776;
  v4 = 3600;
  if (!*(_BYTE *)(a1 + 80))
    v4 = 1784;
  v5 = FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(*(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(*(_QWORD *)(a1 + 32) + v2), *(double *)(*(_QWORD *)(a1 + 32) + v3), *(double *)(*(_QWORD *)(a1 + 32) + v4));
  v7 = v6;
  v9 = v8;
  v11 = v10;
  objc_msgSend(*(id *)(a1 + 32), "zoomFactor");
  v13 = fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(v5, v7, v9, v11, v12, *MEMORY[0x1E0C9D538]);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke_2;
  v18[3] = &unk_1E4925FB8;
  v20 = v13;
  v21 = v14;
  v22 = v15;
  v23 = v16;
  v19 = *(_OWORD *)(a1 + 32);
  dispatch_sync(*(dispatch_queue_t *)(v19 + 1584), v18);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    v17 = *(double **)(a1 + 32);
    v17[213] = v5;
    v17[214] = v7;
    v17[215] = v9;
    v17[216] = v11;
  }
}

void __81__BWFigVideoCaptureDevice_setContinuousAutoFocusRect_isFocusRectInOverscanSpace___block_invoke_2(uint64_t a1)
{
  CFDictionaryRef DictionaryRepresentation;

  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](*(_QWORD *)(a1 + 32), CFSTR("ContinuousAutoFocusAreaOfInterest"), DictionaryRepresentation);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
}

- (int)setFocusModeManualWithLensPosition:(float)a3 requestID:(int)a4
{
  uint64_t v4;
  _BOOL4 v6;
  int apsMode;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD block[5];
  _QWORD v15[2];
  _QWORD v16[3];

  v4 = *(_QWORD *)&a4;
  v16[2] = *MEMORY[0x1E0C80C00];
  if (a3 != 3.4028e38)
  {
    v10 = (int)((float)(1.0 - a3) * 255.0);
    goto LABEL_12;
  }
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  v6 = -[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant");
  apsMode = self->_apsMode;
  if (!v6)
  {
    if (apsMode != 8)
    {
      v10 = 0x7FFFFFFFLL;
      goto LABEL_11;
    }
    v8 = -[BWFrameStatisticsByPortType objectForKeyedSubscript:](self->_currentFrameStatisticsByPortType, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](self->_captureStream, "portType"));
    goto LABEL_8;
  }
  v8 = -[BWFrameStatisticsByPortType objectForKeyedSubscript:](self->_currentFrameStatisticsByPortType, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](self->_captureStream, "portType"));
  if (apsMode == 8)
  {
LABEL_8:
    v9 = objc_msgSend(v8, "logicalFocusLensPosition");
    goto LABEL_9;
  }
  v9 = objc_msgSend(v8, "focusPosition");
LABEL_9:
  v10 = v9;
LABEL_11:
  os_unfair_lock_unlock(&self->_frameStatisticsLock);
LABEL_12:
  v15[0] = *MEMORY[0x1E0D06658];
  v16[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
  v15[1] = *MEMORY[0x1E0D05AD0];
  v16[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
  v11 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941B18, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 2));
  if (v11)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __72__BWFigVideoCaptureDevice_setFocusModeManualWithLensPosition_requestID___block_invoke;
    block[3] = &unk_1E491E720;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v11;
}

__n128 __72__BWFigVideoCaptureDevice_setFocusModeManualWithLensPosition_requestID___block_invoke(uint64_t a1)
{
  _OWORD *v1;
  __n128 result;
  __int128 v3;

  v1 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 1704);
  result = *(__n128 *)MEMORY[0x1E0C9D628];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *v1 = *MEMORY[0x1E0C9D628];
  v1[1] = v3;
  return result;
}

- (float)lensPosition
{
  float v3;

  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  v3 = *(float *)&self->_manualPropertyMutex;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (void)setCinematicVideoFocus:(id)a3
{
  os_unfair_lock_s *p_sdofLock;
  OS_dispatch_queue *variableFrameRateUpdateQueue;

  p_sdofLock = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  variableFrameRateUpdateQueue = self->_variableFrameRateUpdateQueue;
  if (variableFrameRateUpdateQueue != a3)
  {

    self->_variableFrameRateUpdateQueue = (OS_dispatch_queue *)objc_msgSend(a3, "mutableCopy");
  }
  os_unfair_lock_unlock(p_sdofLock);
}

- (CGRect)regionOfInterestWithoutOverscan
{
  double x;
  double y;
  double width;
  double height;
  CGRect result;

  x = self->_regionOfInterestWithoutOverscan.origin.x;
  y = self->_regionOfInterestWithoutOverscan.origin.y;
  width = self->_regionOfInterestWithoutOverscan.size.width;
  height = self->_regionOfInterestWithoutOverscan.size.height;
  result.size.height = height;
  result.size.width = width;
  result.origin.y = y;
  result.origin.x = x;
  return result;
}

- (uint64_t)_setSmoothFocusEnabled:(uint64_t)a1
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[7];
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (!a1)
    return 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v2 = *(NSObject **)(a1 + 1560);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __50__BWFigVideoCaptureDevice__setSmoothFocusEnabled___block_invoke;
  v5[3] = &unk_1E4926008;
  v6 = a2;
  v5[4] = a1;
  v5[5] = &v7;
  v5[6] = 0x1E4941B38;
  dispatch_sync(v2, v5);
  v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __50__BWFigVideoCaptureDevice__setSmoothFocusEnabled___block_invoke(uint64_t a1)
{
  uint64_t result;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v3 = CFSTR("smooth");
  v4[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 56));
  result = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:](*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (int)setExposureModeLocked
{
  int v3;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD block[5];

  v3 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941A38, *MEMORY[0x1E0C9B0D0]);
  if (v3)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __48__BWFigVideoCaptureDevice_setExposureModeLocked__block_invoke;
    block[3] = &unk_1E491E720;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v3;
}

__n128 __48__BWFigVideoCaptureDevice_setExposureModeLocked__block_invoke(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)MEMORY[0x1E0C9D628];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v1 + 1664) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v1 + 1680) = v3;
  return result;
}

- (float)exposureTargetBias
{
  float v2;

  if (!a1)
    return 0.0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2640));
  v2 = *(float *)(a1 + 2680);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2640));
  return v2;
}

- (int)setExposureModeCustomWithExposureDuration:(id *)a3 minFrameRate:(double)a4 maxFrameRate:(double)a5 ISO:(float)a6 requestID:(int)a7
{
  uint64_t v7;
  double v12;
  int v13;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD block[5];
  CMTime time;
  _QWORD v18[5];
  _QWORD v19[6];

  v7 = *(_QWORD *)&a7;
  v19[5] = *MEMORY[0x1E0C80C00];
  time = *(CMTime *)a3;
  v18[0] = CFSTR("IntegrationTime");
  v19[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", CMTimeGetSeconds(&time));
  v18[1] = CFSTR("ISO");
  *(float *)&v12 = a6;
  v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
  v18[2] = CFSTR("ManualExposureMinFrameRate");
  v19[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a4);
  v18[3] = CFSTR("ManualExposureMaxFrameRate");
  v19[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a5);
  v18[4] = *MEMORY[0x1E0D05AD0];
  v19[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v7);
  v13 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941A58, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 5));
  if (v13)
  {
    FigDebugAssert3();
  }
  else
  {
    focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __109__BWFigVideoCaptureDevice_setExposureModeCustomWithExposureDuration_minFrameRate_maxFrameRate_ISO_requestID___block_invoke;
    block[3] = &unk_1E491E720;
    block[4] = self;
    dispatch_sync(focusAndExposureUpdateQueue, block);
  }
  return v13;
}

__n128 __109__BWFigVideoCaptureDevice_setExposureModeCustomWithExposureDuration_minFrameRate_maxFrameRate_ISO_requestID___block_invoke(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)MEMORY[0x1E0C9D628];
  v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v1 + 1664) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v1 + 1680) = v3;
  return result;
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)exposureDuration
{
  retstr->var0 = 0;
  *(_QWORD *)&retstr->var1 = 0;
  retstr->var3 = 0;
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  *(_OWORD *)&retstr->var0 = *(_OWORD *)((char *)&self->_manualPropertyMutex + 4);
  retstr->var3 = *(int64_t *)((char *)&self->_exposureDuration.value + 4);
  return ($3CC8671D27C23BF42ADDB32F2B5E48AE *)pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
}

- (float)ISO
{
  float v3;

  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  v3 = *(float *)&self->_exposureDuration.flags;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (float)exposureTargetOffset
{
  float v3;

  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  v3 = *((float *)&self->_exposureDuration.epoch + 1);
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  return v3;
}

- (void)setMaxExposureDurationClientOverride:(id *)a3
{
  CMTimeEpoch v5;
  NSArray *captureStreams;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  BWFigVideoCaptureStream *v11;
  const __CFAllocator *v12;
  const __CFDictionary *v13;
  __int128 v14;
  CMTime time2;
  CMTime time1;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CMTime v21;
  const __CFString *v22;
  const __CFDictionary *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v14 = *MEMORY[0x1E0CA2E10];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
  v21.epoch = v5;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)&v21.value = v14;
  captureStreams = self->_captureStreams;
  v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(captureStreams);
        v11 = *(BWFigVideoCaptureStream **)(*((_QWORD *)&v17 + 1) + 8 * i);
        memset(&time1, 0, sizeof(time1));
        if (v11)
        {
          time2 = (CMTime)*a3;
          -[BWFigVideoCaptureStream updateMaxExposureDurationClientOverride:](v11, "updateMaxExposureDurationClientOverride:", &time2);
        }
        if (v11 == self->_captureStream)
          v21 = time1;
        if (v11 == self->_bravoTelephotoCaptureStream)
        {
          -[BWFigVideoCaptureStream maxEIT](v11, "maxEIT");
          -[BWBravoStreamSelector setTeleMaxEIT:](self->_bravoStreamSelector, "setTeleMaxEIT:");
        }
      }
      v8 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
    }
    while (v8);
  }
  time1 = v21;
  *(_OWORD *)&time2.value = v14;
  time2.epoch = v5;
  if (CMTimeCompare(&time1, &time2))
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time1 = v21;
    v13 = CMTimeCopyAsDictionary(&time1, v12);
    v22 = CFSTR("NewPropertyValue");
    v23 = v13;
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("MaxExposureDurationChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1));
  }
}

- (void)_updateVariableFrameRateSettings
{
  os_unfair_lock_s *v2;
  float v3;
  float v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  int v13;
  BOOL v14;
  int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  void *v23;
  uint64_t v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  double v32;
  os_unfair_lock_s *lock;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (os_unfair_lock_s *)(a1 + 3728);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 3728));
    v3 = *(float *)(a1 + 3712);
    v4 = *(float *)(a1 + 3716);
    os_unfair_lock_unlock(v2);
    if (v3 != v4)
    {
      lock = v2;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v5 = *(void **)(a1 + 560);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v36;
        v9 = *MEMORY[0x1E0D05A30];
        v10 = *MEMORY[0x1E0D07308];
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v36 != v8)
              objc_enumerationMutation(v5);
            v12 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * i);
            v13 = objc_msgSend((id)objc_msgSend(v12, "portType"), "isEqualToString:", v9);
            if (v13)
              v14 = v3 == 24.0;
            else
              v14 = 0;
            if (!v14)
            {
              v15 = v13;
              objc_msgSend(*(id *)(a1 + 3704), "getAEMaxGainForPortType:suggestedFrameRate:", objc_msgSend(v12, "portType"), v3);
              v17 = v16;
              objc_msgSend((id)objc_msgSend(*(id *)(a1 + 3720), "objectForKeyedSubscript:", objc_msgSend(v12, "portType")), "floatValue");
              v19 = v18;
              *(float *)&v20 = v3;
              objc_msgSend(v12, "setMaximumFrameRate:", v20);
              *(float *)&v21 = v3;
              objc_msgSend(v12, "setMinimumFrameRate:", v21);
              if (v17 > 0.0 && v17 != v19)
              {
                v23 = (void *)objc_msgSend(v12, "stream");
                LODWORD(v24) = vcvts_n_s32_f32(v17, 8uLL);
                if (!objc_msgSend(v23, "setProperty:value:", v10, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v24)))
                {
                  *(float *)&v25 = v17;
                  objc_msgSend(v12, "setAeMaxGain:", v25);
                  *(float *)&v26 = v17;
                  v34 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v26);
                  v27 = v5;
                  v28 = v10;
                  v29 = *(void **)(a1 + 3720);
                  v30 = objc_msgSend(v12, "portType");
                  v31 = v29;
                  v10 = v28;
                  v5 = v27;
                  objc_msgSend(v31, "setObject:forKeyedSubscript:", v34, v30);
                  if (v15)
                  {
                    *(float *)&v32 = v17;
                    objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxAEGain:", v32);
                    objc_msgSend(v12, "maxEIT");
                    objc_msgSend(*(id *)(a1 + 1320), "setTeleMaxEIT:");
                  }
                }
              }
            }
          }
          v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
        }
        while (v7);
      }
      os_unfair_lock_lock(lock);
      *(float *)(a1 + 3716) = v3;
      os_unfair_lock_unlock(lock);
    }
  }
}

void __113__BWFigVideoCaptureDevice__serviceVariableFrameRateWithSampleBuffer_fromCaptureStream_frameStatisticsByPortType___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateVariableFrameRateSettings](*(_QWORD *)(a1 + 32));
}

- (int)stereoVideoCaptureStatus
{
  BWFigVideoCaptureDevice *v2;
  os_unfair_lock_s *p_stereoVideoCaptureSceneMonitorLock;

  v2 = self;
  p_stereoVideoCaptureSceneMonitorLock = &self->_stereoVideoCaptureSceneMonitorLock;
  os_unfair_lock_lock(&self->_stereoVideoCaptureSceneMonitorLock);
  LODWORD(v2) = v2->_stereoVideoCaptureStatus;
  os_unfair_lock_unlock(p_stereoVideoCaptureSceneMonitorLock);
  return (int)v2;
}

- (uint64_t)_serviceStereoVideoCaptureSceneMonitoringWithFrameStatisticsByPortType:(uint64_t)a3 sceneFlags:
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id obj;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    obj = *(id *)(result + 560);
    result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8);
          v11 = 1;
          os_unfair_lock_lock((os_unfair_lock_t)(v5 + 1548));
          LODWORD(v9) = objc_msgSend(*(id *)(v5 + 1536), "resolveStereoVideoCaptureStatusWithFrameStatistics:sceneFlags:stereoVideoCaptureStatusOut:", objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(v9, "portType")), a3, &v11);
          os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 1548));
          if ((_DWORD)v9)
            -[BWFigVideoCaptureDevice _updateStereoVideoCaptureStatus:]((os_unfair_lock_s *)v5, v11);
          ++v8;
        }
        while (v6 != v8);
        result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)_updateStereoVideoCaptureStatus:(os_unfair_lock_s *)a1
{
  os_unfair_lock_s *v4;

  if (a1)
  {
    v4 = a1 + 387;
    os_unfair_lock_lock(a1 + 387);
    if (a1[386]._os_unfair_lock_opaque == (_DWORD)a2)
    {
      os_unfair_lock_unlock(v4);
    }
    else
    {
      a1[386]._os_unfair_lock_opaque = a2;
      os_unfair_lock_unlock(v4);
      -[os_unfair_lock_s _postNotificationWithPayload:notificationPayload:](a1, "_postNotificationWithPayload:notificationPayload:", CFSTR("StereoVideoCaptureStatusChanged"), objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2), CFSTR("NewPropertyValue"), 0));
    }
  }
}

- (BOOL)stereoPhotoCaptureEnabled
{
  return self->_stereoPhotoCaptureEnabled;
}

- (void)setStereoPhotoCaptureEnabled:(BOOL)a3
{
  void *v4;
  NSArray *activePortTypes;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (self->_stereoPhotoCaptureEnabled != a3)
  {
    self->_stereoPhotoCaptureEnabled = a3;
    if (a3)
    {
      v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      activePortTypes = self->_activePortTypes;
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](activePortTypes, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v11;
        do
        {
          for (i = 0; i != v7; ++i)
          {
            if (*(_QWORD *)v11 != v8)
              objc_enumerationMutation(activePortTypes);
            objc_msgSend(v4, "setObject:forKeyedSubscript:", -[BWMovingWindowStats initWithWindowSize:]([BWMovingWindowStats alloc], "initWithWindowSize:", 6), *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i));
          }
          v7 = -[NSArray countByEnumeratingWithState:objects:count:](activePortTypes, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        }
        while (v7);
      }
      self->_stereoPhotoSNRSimpleMovingAverageByPortType = (NSDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v4);
      self->_stereoPhotoLastSceneSNRByPortType = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    }
    else
    {

      self->_stereoPhotoSNRSimpleMovingAverageByPortType = 0;
      self->_stereoPhotoLastSceneSNRByPortType = 0;
    }
  }
}

- (void)setAutoImageControlMode:(int)a3 completionHandler:(id)a4
{
  -[BWFigVideoCaptureDevice _setAutoImageControlMode:completionHandler:]((uint64_t)self, a3, a4);
}

- (int)setImageControlMode:(int)a3
{
  NSObject *autofocusProcessorQueue;
  int v4;
  _QWORD block[6];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __47__BWFigVideoCaptureDevice_setImageControlMode___block_invoke;
  block[3] = &unk_1E4926110;
  block[4] = self;
  block[5] = &v8;
  v7 = a3;
  dispatch_sync(autofocusProcessorQueue, block);
  v4 = *((_DWORD *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void __47__BWFigVideoCaptureDevice_setImageControlMode___block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 1824))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = FigSignalErrorAt();
  }
  else
  {
    v3 = *(_DWORD *)(v2 + 1832);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -[BWFigVideoCaptureDevice _setAutofocusProcessorImageControlModeProperty:](v2, *(_DWORD *)(a1 + 48));
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
      -[BWFigVideoCaptureDevice _updateStreamingImageIntentWithNewImageControlMode:oldImageControlMode:](*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), v3);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
    }
  }
}

- (int)setWhiteBalanceModeLockedWithGains:(id)a3 requestID:(int)a4
{
  uint64_t v4;
  float var2;
  float var1;
  float var0;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD block[5];
  int v16;
  $E2C29196C7A5C696474C6955C5A9CE06 v17;
  _QWORD v18[4];
  _QWORD v19[5];

  v4 = *(_QWORD *)&a4;
  var2 = a3.var2;
  var1 = a3.var1;
  var0 = a3.var0;
  v19[4] = *MEMORY[0x1E0C80C00];
  v9 = *(NSObject **)&self->_grayWorldWhiteBalanceGains.redGain;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __72__BWFigVideoCaptureDevice_setWhiteBalanceModeLockedWithGains_requestID___block_invoke;
  block[3] = &unk_1E4920768;
  block[4] = self;
  v16 = a4;
  v17 = a3;
  dispatch_sync(v9, block);
  v18[0] = *MEMORY[0x1E0D06670];
  LODWORD(v10) = vcvts_n_s32_f32(var0, 0xCuLL);
  v19[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v10);
  v18[1] = *MEMORY[0x1E0D06668];
  LODWORD(v11) = vcvts_n_s32_f32(var1, 0xCuLL);
  v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v11);
  v18[2] = *MEMORY[0x1E0D06660];
  LODWORD(v12) = vcvts_n_s32_f32(var2, 0xCuLL);
  v19[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v12);
  v18[3] = *MEMORY[0x1E0D05AD0];
  v19[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v4);
  v13 = -[BWFigVideoCaptureDevice _setAutofocusProcessorProperty:propertyValue:]((uint64_t)self, 0x1E4941ED8, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 4));
  if (v13)
    FigDebugAssert3();
  return v13;
}

unint64_t __72__BWFigVideoCaptureDevice_setWhiteBalanceModeLockedWithGains_requestID___block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", a1 + 44, "{?=fff}");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2720), "setObject:forKeyedSubscript:", v2, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 40)));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "insertObject:atIndex:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 40)), 0);
  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2720), "count");
  if (result >= 0x1E)
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "count");
    v5 = v4 - ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "count") >> 1);
    v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "count");
    v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "objectsAtIndexes:", objc_msgSend(MEMORY[0x1E0CB36B8], "indexSetWithIndexesInRange:", v5, v6 >> 1));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2720), "removeObjectsForKeys:", v7);
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2728), "removeObjectsInArray:", v7);
  }
  return result;
}

- ($E2C29196C7A5C696474C6955C5A9CE06)deviceWhiteBalanceGains
{
  float ISO;
  float exposureTargetBias;
  float exposureTargetOffset;
  float v6;
  float v7;
  float v8;
  $E2C29196C7A5C696474C6955C5A9CE06 result;

  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  ISO = self->_ISO;
  exposureTargetBias = self->_exposureTargetBias;
  exposureTargetOffset = self->_exposureTargetOffset;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  v6 = ISO;
  v7 = exposureTargetBias;
  v8 = exposureTargetOffset;
  result.var2 = v8;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

- ($E2C29196C7A5C696474C6955C5A9CE06)grayWorldDeviceWhiteBalanceGains
{
  float redGain;
  float greenGain;
  float blueGain;
  float v6;
  float v7;
  float v8;
  $E2C29196C7A5C696474C6955C5A9CE06 result;

  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  redGain = self->_deviceWhiteBalanceGains.redGain;
  greenGain = self->_deviceWhiteBalanceGains.greenGain;
  blueGain = self->_deviceWhiteBalanceGains.blueGain;
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
  v6 = redGain;
  v7 = greenGain;
  v8 = blueGain;
  result.var2 = v8;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

- (float)_exifFocalLengthOverrideForZoomFactor:(uint64_t)a1
{
  float v2;
  void *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = 0.0;
  if (a1)
  {
    v4 = *(void **)(a1 + 4168);
    if (v4)
    {
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v6 = (void *)objc_msgSend(v4, "allKeys", 0);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      if (v7)
      {
        v8 = v7;
        v9 = 0;
        v10 = 0;
        v11 = *(_QWORD *)v26;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v26 != v11)
              objc_enumerationMutation(v6);
            v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
            objc_msgSend(v13, "floatValue");
            v15 = v14;
            if (v14 <= a2)
            {
              if (!v9 || (objc_msgSend(v9, "floatValue"), v15 > v16))
                v9 = v13;
            }
            if (v15 >= a2)
            {
              if (!v10 || (objc_msgSend(v10, "floatValue"), v15 < v17))
                v10 = v13;
            }
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
        }
        while (v8);
        if (v9)
        {
          if (v10)
          {
            objc_msgSend(v9, "floatValue");
            v19 = v18;
            objc_msgSend(v10, "floatValue");
            v21 = v20;
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 4168), "objectForKeyedSubscript:", v9), "floatValue");
            v2 = v22;
            objc_msgSend((id)objc_msgSend(*(id *)(a1 + 4168), "objectForKeyedSubscript:", v10), "floatValue");
            if ((float)(v21 - v19) > 0.0)
              return v2 + (float)((float)(v23 - v2) * (float)((float)(a2 - v19) / (float)(v21 - v19)));
          }
        }
      }
    }
  }
  return v2;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 2736);
  result = objc_msgSend(*(id *)(a1 + 40), "intValue");
  if ((int)result >= 1)
  {
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2720), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) = result;
  }
  return result;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 2736) = 1;
  return result;
}

uint64_t __60__BWFigVideoCaptureDevice__addExifMetadata_fromTimeMachine___block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 2736) = 0;
  return result;
}

- (float)torchLevel
{
  float v3;

  pthread_mutex_lock((pthread_mutex_t *)self->_torchLock);
  v3 = *(float *)&self->_torchWillBeEnabledForVideoRecording;
  pthread_mutex_unlock((pthread_mutex_t *)self->_torchLock);
  return v3;
}

uint64_t __112__BWFigVideoCaptureDevice_setStillImageSceneMonitoringFlashMode_hdrMode_qualityPrioritization_digitalFlashMode___block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 1992))
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 48) != 0;
  result = -[BWFigVideoCaptureDevice _setAutofocusProcessorPropertyInternal:propertyValue:](v2, CFSTR("HDRSceneDetectionEnabled"), (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (BOOL)isFlashScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 1, 0, 0, 0) == 1;
}

- (BOOL)isHDRScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 0, 1, 0, 0) == 2;
}

- (BOOL)isSISScene
{
  return -[BWFigVideoCaptureDevice _currentStillImageSceneTypeForcingFlashSceneDetectionEnabled:forcingHDRSceneDetectionEnabled:forcingSISSceneDetectionEnabled:forcingDigitalFlashSceneDetectionEnabled:](self, 0, 0, 1, 0) == 3;
}

- (int)digitalFlashStatus
{
  BWFigVideoCaptureStream *captureStream;
  int result;
  BWFrameStatisticsByPortType *v5;
  unsigned int v6;

  if (!self->_hasDigitalFlash)
    return 0;
  if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
    captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
  else
    captureStream = self->_captureStream;
  result = -[NSSet containsObject:](self->_digitalFlashSupportedPortTypes, "containsObject:", -[BWFigVideoCaptureStream portType](captureStream, "portType"));
  if (result)
  {
    v5 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", -[BWFrameStatisticsByPortType portTypes](self->_currentFrameStatisticsByPortType, "portTypes"));
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    -[BWFrameStatisticsByPortType copyTo:](self->_currentFrameStatisticsByPortType, "copyTo:", v5);
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    v6 = -[BWFigVideoCaptureDevice _ubStillImageSceneFlagsForCaptureStream:frameStatisticsByPortType:fusionEnabled:metadata:sceneMonitoring:zoomFactorOverride:]((uint64_t)self, captureStream, v5, 0, 0, 0, NAN);
    if ((v6 & 0x800) != 0)
      return 2;
    else
      return (v6 >> 10) & 1;
  }
  return result;
}

- (id)digitalFlashExposureTimes
{
  BWFigVideoCaptureStream *v3;
  BWFrameStatisticsByPortType *v4;
  id v5;
  id v6;
  uint64_t v7;
  BWObjectDetector *v8;
  void *v9;
  void *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD v20[2];
  _QWORD v21[2];
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!self->_hasDigitalFlash)
    return (id)MEMORY[0x1E0C9AA70];
  v3 = -[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant")
     ? -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream")
     : self->_captureStream;
  if (!-[NSSet containsObject:](self->_digitalFlashSupportedPortTypes, "containsObject:", -[BWFigVideoCaptureStream portType](v3, "portType")))return (id)MEMORY[0x1E0C9AA70];
  v4 = -[BWFrameStatisticsByPortType initWithPortTypes:]([BWFrameStatisticsByPortType alloc], "initWithPortTypes:", -[BWFrameStatisticsByPortType portTypes](self->_currentFrameStatisticsByPortType, "portTypes"));
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  -[BWFrameStatisticsByPortType copyTo:](self->_currentFrameStatisticsByPortType, "copyTo:", v4);
  v5 = (id)-[NSMutableDictionary objectForKeyedSubscript:](self->_digitalFlashExposureTimesForSceneMonitoringByPortType, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](v3, "portType"));
  os_unfair_lock_unlock(&self->_frameStatisticsLock);
  if (!v5)
  {
    v5 = (id)-[BWAdaptiveBracketingController adaptiveBracketingDigitalFlashTotalIntegrationTimesProviderForPortType:wait:](self->_ubAdaptiveBracketingController, "adaptiveBracketingDigitalFlashTotalIntegrationTimesProviderForPortType:wait:", -[BWFigVideoCaptureStream portType](v3, "portType"), 1);
    if (!v5)
    {
      FigDebugAssert3();
      return (id)MEMORY[0x1E0C9AA70];
    }
  }
  v22 = 0;
  v23 = 0.0;
  v24 = 0.0;
  v6 = -[BWFrameStatisticsByPortType objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", -[BWFigVideoCaptureStream portType](v3, "portType"));
  v7 = -[BWFigVideoCaptureStream isStationary](v3, "isStationary");
  if (-[NSArray count](self->_digitalFlashDetectedObjectTypes, "count"))
  {
    v8 = -[BWFigVideoCaptureStream objectDetector](v3, "objectDetector");
    if (v6)
      objc_msgSend(v6, "pts");
    else
      memset(v19, 0, sizeof(v19));
    v10 = (void *)-[BWObjectDetector objectsForPTS:](v8, "objectsForPTS:", v19);
    objc_msgSend(v6, "finalCropRect");
    v9 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:]((uint64_t)self, v10, v11, v12, v13, v14);
  }
  else
  {
    v9 = 0;
  }
  for (i = 1; i != 3; ++i)
  {
    objc_msgSend(v5, "totalIntegrationTimeForDigitalFlashMode:frameStatistics:stationary:detectedObjects:", i, v6, v7, v9);
    *(&v22 + i) = v16;
  }

  v20[0] = CFSTR("Min");
  v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v23);
  v20[1] = CFSTR("Max");
  v21[0] = v17;
  v21[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v24);
  return (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
}

- (void)_ubDetectedObjectsForDigitalFlashFromDetectedObjects:(CGFloat)a3 finalCropRect:(CGFloat)a4
{
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1 || !objc_msgSend(a2, "count") || !objc_msgSend(*(id *)(a1 + 2160), "count"))
    return 0;
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(*(id *)(a1 + 2160), "count"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v13 = *(void **)(a1 + 2160);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v20;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v20 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(v12, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17)), *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v17));
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v15);
  }
  if (!objc_msgSend(v12, "count"))
    return 0;
  v25.origin.x = a3;
  v25.origin.y = a4;
  v25.size.width = a5;
  v25.size.height = a6;
  if (!CGRectIsNull(v25))
  {
    v27.origin.x = 0.0;
    v27.origin.y = 0.0;
    v27.size.width = 1.0;
    v27.size.height = 1.0;
    v26.origin.x = a3;
    v26.origin.y = a4;
    v26.size.width = a5;
    v26.size.height = a6;
    if (!CGRectEqualToRect(v26, v27))
    {
      v12 = (id)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 1uLL);
      BWCorrectRectanglesInDetectedObjectsInfo(v12, a3, a4, a5, a6, 0.0, 0.0, 1.0, 1.0);
    }
  }
  if (!objc_msgSend(v12, "count"))
    return 0;
  return v12;
}

- (void)setStillImageStabilizationSceneDetectionEnabled:(BOOL)a3
{
  uint64_t v4;
  os_unfair_lock_s *p_frameStatisticsLock;
  uint64_t maxTorchLevel_low;
  uint64_t flashModeForSceneMonitoring;
  uint64_t digitalFlashModeForSceneMonitoring;

  if (a3)
    v4 = 2;
  else
    v4 = 1;
  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  maxTorchLevel_low = LODWORD(self->_maxTorchLevel);
  flashModeForSceneMonitoring = self->_flashModeForSceneMonitoring;
  digitalFlashModeForSceneMonitoring = self->_digitalFlashModeForSceneMonitoring;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  -[BWFigVideoCaptureDevice setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:](self, "setStillImageSceneMonitoringFlashMode:hdrMode:qualityPrioritization:digitalFlashMode:", maxTorchLevel_low, flashModeForSceneMonitoring, v4, digitalFlashModeForSceneMonitoring);
}

- (void)rampToVideoZoomFactor:(float)a3 withRampType:(int)a4 rate:(float)a5 duration:(double)a6 commandID:(int)a7
{
  uint64_t v7;
  uint64_t v10;
  float v13;
  float v14;
  int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  _BOOL4 v22;
  float newISPZoomFactor;
  float v24;
  _BOOL4 v25;
  int v26;
  double v27;

  v7 = *(_QWORD *)&a7;
  v10 = *(_QWORD *)&a4;
  -[NSMutableArray applyFudgeToZoomFactor:](self->_whiteBalanceGainsOrderedKeys, "applyFudgeToZoomFactor:");
  v14 = v13;
  v15 = -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v13);
  v21 = v15;
  if ((_DWORD)v10 == 2 && self->_cinematicFramingFeedbackForCameraControlsROIEnabled && BYTE1(self->_memoryPool))
  {
    v22 = a6 != 0.25;
    v16 = 0.5;
    if (a6 == 0.5)
      v22 = 0;
    if ((v22 & v15 & 1) != 0)
    {
      newISPZoomFactor = 0.0;
      a6 = 0.0;
      v10 = 3;
      goto LABEL_18;
    }
    -[BWFigVideoCaptureDevice zoomFactor](self, "zoomFactor");
    v25 = v24 > a3;
    v16 = dbl_1A32B21C0[v24 > a3];
    if (v16 >= a6)
      a6 = dbl_1A32B21C0[v25];
  }
  if ((_DWORD)v10 == 2)
    v26 = v21;
  else
    v26 = 0;
  newISPZoomFactor = 0.01;
  if (v26 == 1)
  {
    if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
    {
      -[BWFigVideoCaptureDevice zoomFactor](self, "zoomFactor");
      if (*(float *)&v16 < a3)
        newISPZoomFactor = self->_newISPZoomFactor;
    }
    v10 = 2;
  }
LABEL_18:
  LODWORD(v19) = 1.0;
  LODWORD(v20) = 1.0;
  *(float *)&v16 = a3;
  *(float *)&v17 = a5;
  *(float *)&v18 = newISPZoomFactor;
  -[NSMutableArray rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:", v10, 0, v7, v16, v17, a6, v18, v19, v20);
  *(float *)&v27 = v14;
  -[BWPreviewTimeMachineProcessor requestedZoomFactorChanged:](self->_previewTimeMachineProcessor, "requestedZoomFactorChanged:", v27);
}

- (uint64_t)_isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:(uint64_t)result
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  float v8;
  void *v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = *(void **)(result + 560);
    result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)v12;
      while (2)
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v12 != v5)
            objc_enumerationMutation(v3);
          v7 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          objc_msgSend(v7, "baseZoomFactorAfterGDC");
          if (v8 != a2)
          {
            v9 = (void *)objc_msgSend(v7, "nondisruptiveSwitchingZoomFactors");
            *(float *)&v10 = a2;
            if ((objc_msgSend(v9, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v10)) & 1) == 0)
              continue;
          }
          return 1;
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        result = 0;
        if (v4)
          continue;
        break;
      }
    }
  }
  return result;
}

- (void)rampToVideoZoomFactor:(float)a3 withTuning:(int)a4 commandID:(int)a5
{
  uint64_t v5;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  NSObject *autofocusProcessorQueue;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  int v22;
  unsigned int v23;
  _BOOL4 cinematicFramingFeedbackForCameraControlsROIEnabled;
  float snapFraction;
  float friction;
  float exponentialRampDurationOverCapturePreview;
  float v28;
  float v29;
  float v30;
  float v31;
  _BOOL4 v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  float *v38;
  float *p_friction;
  BWSpringSettings *p_continuousDirectRecordingZoomOutSpring;
  float *p_tension;
  BOOL v42;
  float *v43;
  _DWORD *p_snapFraction;
  float *v45;
  uint64_t v46;
  _BOOL4 v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  BOOL v52;
  int v53;
  int v54;
  float v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  float v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  float v67;
  uint64_t v68;
  float newISPZoomFactor;
  _BOOL4 v70;
  double v72;
  float v73;
  float v74;
  BOOL v75;
  double v76;
  uint64_t v77;
  double v78;
  _QWORD v79[6];
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;

  v5 = *(_QWORD *)&a5;
  -[NSMutableArray applyFudgeToZoomFactor:](self->_whiteBalanceGainsOrderedKeys, "applyFudgeToZoomFactor:");
  v10 = v9;
  -[NSMutableArray appliedZoomFactorWithoutFudge](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactorWithoutFudge");
  v12 = v11;
  v13 = -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v10);
  v80 = 0;
  v81 = &v80;
  v82 = 0x2020000000;
  v83 = 0;
  autofocusProcessorQueue = self->_autofocusProcessorQueue;
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 3221225472;
  v79[2] = __70__BWFigVideoCaptureDevice_rampToVideoZoomFactor_withTuning_commandID___block_invoke;
  v79[3] = &unk_1E491E9A8;
  v79[4] = self;
  v79[5] = &v80;
  dispatch_sync(autofocusProcessorQueue, v79);
  v21 = *((_DWORD *)v81 + 6);
  v22 = BYTE1(self->_lastSphereMode);
  switch(a4)
  {
    case 3:
      cinematicFramingFeedbackForCameraControlsROIEnabled = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
      snapFraction = 1.0;
      if (BYTE1(self->_lastSphereMode) && !self->_cinematicFramingFeedbackForCameraControlsROIEnabled && v12 > a3)
        snapFraction = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
      friction = self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring.friction;
      if (v21 == 2)
      {
        if (BYTE1(self->_lastSphereMode))
        {
          v16 = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationOverCapturePreview + -0.04;
          *(float *)&v16 = v16;
          if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
            exponentialRampDurationOverCapturePreview = *(float *)&v16;
          else
            exponentialRampDurationOverCapturePreview = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationOverCapturePreview;
          if (v12 > a3)
            exponentialRampDurationOverCapturePreview = exponentialRampDurationOverCapturePreview
                                                      * self->_zoomRampTuning.continuousIndirect.zoomOutDurationScalePreview;
        }
        else
        {
          exponentialRampDurationOverCapturePreview = 0.5;
          friction = 0.01;
        }
        goto LABEL_119;
      }
      if (cinematicFramingFeedbackForCameraControlsROIEnabled | v22)
      {
        v42 = !cinematicFramingFeedbackForCameraControlsROIEnabled;
        v46 = 2884;
        if (!v42)
          v46 = 2888;
        exponentialRampDurationOverCapturePreview = *(float *)((char *)&self->super.isa + v46);
        if (v12 > a3)
          exponentialRampDurationOverCapturePreview = exponentialRampDurationOverCapturePreview
                                                    * self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomOutSpring.friction;
        if (!v13)
        {
LABEL_119:
          if (BYTE2(self->_zoomFactorLock._os_unfair_lock_opaque)
            && (-[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor"), v22)
            && *(float *)&v15 == *(float *)&self->_ispZoomLatency
            && v12 > a3
            && self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
          {
            if (!LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
            {
              LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 1;
              v68 = 2788;
LABEL_128:
              -[NSMutableArray updateISPZoomDelay:](self->_whiteBalanceGainsOrderedKeys, "updateISPZoomDelay:", *(unsigned int *)((char *)&self->super.isa + v68));
            }
          }
          else if (LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
          {
            LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 0;
            v68 = 2784;
            goto LABEL_128;
          }
          LODWORD(v16) = 0;
          LODWORD(v19) = 1.0;
          *(float *)&v15 = a3;
          *(float *)&v18 = friction;
          *(float *)&v20 = snapFraction;
          -[NSMutableArray rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:", 2, 3, v5, v15, v16, exponentialRampDurationOverCapturePreview, v18, v19, v20);
          break;
        }
      }
      else
      {
        exponentialRampDurationOverCapturePreview = 0.25;
        friction = 0.01;
        if (!v13)
          goto LABEL_119;
      }
      v59 = -[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant");
      if (v12 < a3 && v59)
      {
        if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
        {
          friction = self->_zoomRampTuning.continuousIndirect.exponentialRampDurationPreview;
        }
        else if (v22)
        {
          friction = self->_zoomRampTuning.continuousIndirect.exponentialSnapFraction;
        }
        else
        {
          friction = self->_newISPZoomFactor;
        }
      }
      goto LABEL_119;
    case 2:
      if (!BYTE1(self->_lastSphereMode))
      {
        LODWORD(v18) = 1028443341;
        LODWORD(v16) = 0;
        LODWORD(v19) = 1.0;
        LODWORD(v20) = 1.0;
        *(float *)&v15 = a3;
        -[NSMutableArray rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:", 2, 2, v5, v15, v16, 0.00100000005, v18, v19, v20);
        break;
      }
      v28 = 1.0;
      v29 = 1.0;
      if (!self->_cinematicFramingFeedbackForCameraControlsROIEnabled && v12 > a3)
        v29 = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
      if (!self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
      {
        if (LOBYTE(self->_zoomRampTuning.continuousDirectPreview.zoomOutDurationScale))
        {
          if (v12 <= a3)
          {
            -[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor");
            v31 = -[BWFigVideoCaptureDevice _baseZoomFactorForZoomFactor:]((uint64_t)self, v30);
            if (-[BWFigVideoCaptureDevice _baseZoomFactorForZoomFactor:]((uint64_t)self, v10) > v31)
              v28 = self->_zoomRampTuning.jumpFrontFacingZoomOut[1].friction;
          }
        }
      }
      if (v21 == 2)
      {
        v32 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
        if (BYTE1(self->_zoomRampTuning.continuousDirectPreview.zoomOutDurationScale))
        {
          v33 = 2832;
          if (v12 > a3)
            v33 = 2844;
          v34 = (float *)((char *)self + v33);
          v35 = 2836;
          if (v12 > a3)
            v35 = 2848;
          v36 = (char *)self + v35;
          v37 = 2840;
          if (v12 > a3)
            v37 = 2852;
          v38 = (float *)((char *)self + v37);
          p_friction = &self->_zoomRampTuning.continuousDirectRecordingZoomInSpring.friction;
          p_continuousDirectRecordingZoomOutSpring = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring;
          p_tension = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring.tension;
          if (v12 > a3)
          {
            p_friction = &self->_zoomRampTuning.continuousDirectRecordingZoomOutSpring.friction;
            p_continuousDirectRecordingZoomOutSpring = &self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring;
            p_tension = &self->_zoomRampTuning.continuousDirectOverCaptureRecordingZoomInSpring.tension;
          }
          v42 = !v32;
          if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
            v43 = p_friction;
          else
            v43 = v34;
          if (v42)
            p_snapFraction = v36;
          else
            p_snapFraction = (_DWORD *)&p_continuousDirectRecordingZoomOutSpring->snapFraction;
          if (v42)
            v45 = v38;
          else
            v45 = p_tension;
          *(float *)&v17 = *v45;
          LODWORD(v16) = *p_snapFraction;
          *(float *)&v18 = *v43;
          *(float *)&v15 = a3;
          *(float *)&v19 = v28;
          *(float *)&v20 = v29;
          -[NSMutableArray rampToVideoZoomFactor:usingSpringWithTension:friction:snapFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:rampStartFrameDelayAt30fps:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:usingSpringWithTension:friction:snapFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:rampStartFrameDelayAt30fps:commandID:", 2, 0, v5, v15, v16, v17, v18, v19, v20);
          break;
        }
        v57 = 2816;
        v58 = 2820;
      }
      else
      {
        v32 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
        v57 = 2804;
        v58 = 2808;
      }
      LODWORD(v15) = *(_DWORD *)((char *)&self->super.isa + v58);
      v75 = v21 == 2 || !v32;
      v76 = *(float *)&v15 + -0.035;
      *(float *)&v76 = v76;
      if (!v75)
        *(float *)&v15 = *(float *)&v76;
      if (v12 > a3)
      {
        v77 = 2812;
        if (v21 == 2)
          v77 = 2824;
        *(float *)&v15 = *(float *)&v15 * *(float *)((char *)&self->super.isa + v77);
      }
      v78 = *(float *)&v15;
      LODWORD(v76) = 0;
      *(float *)&v15 = a3;
      *(float *)&v19 = v28;
      *(float *)&v20 = v29;
      LODWORD(v18) = *(_DWORD *)((char *)&self->super.isa + v57);
      -[NSMutableArray rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:", 2, 2, v5, v15, v76, v78, v18, v19, v20);
      break;
    case 1:
      if (BYTE1(self->_lastSphereMode))
      {
        if (v21 == 2)
        {
          v23 = 2;
          goto LABEL_59;
        }
        v47 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled;
LABEL_58:
        v23 = !v47;
LABEL_59:
        v48 = (char *)self + 12 * v23;
        v49 = v48 + 2948;
        v50 = v48 + 2912;
        if (v12 > a3)
          v50 = v49;
        if (self->_position == 2)
        {
          v51 = (char *)self + 12 * v23;
          if (v12 <= a3)
          {
            v53 = *((_DWORD *)v51 + 748);
            v54 = *((_DWORD *)v51 + 747);
            v55 = *((float *)v51 + 746);
            v52 = 1;
            goto LABEL_80;
          }
          v50 = v51 + 3020;
        }
        v52 = v12 <= a3;
        v54 = *((_DWORD *)v50 + 1);
        v53 = *((_DWORD *)v50 + 2);
        v55 = *(float *)v50;
        v56 = *(float *)v50 != 0.0 || v12 <= a3;
        if (!v56
          && -[BWFigVideoCaptureDevice _isBaseZoomFactorOrNondisruptiveSwitchingFormatBaseZoomFactor:]((uint64_t)self, v10))
        {
          v55 = 0.001;
        }
LABEL_80:
        v61 = 1.0;
        if (v22 && v12 <= a3 && !self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
          v61 = self->_zoomRampTuning.jumpFrontFacingZoomOut[1].friction;
        if (v22)
          v62 = v52;
        else
          v62 = 1;
        if ((v62 & 1) != 0 || self->_cinematicFramingFeedbackForCameraControlsROIEnabled && v21 != 2)
        {
          LODWORD(v63) = 1;
        }
        else
        {
          -[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor");
          if (*(float *)&v15 == self->_rampDefaultBravoSnapDistanceFraction)
            LODWORD(v63) = 3;
          else
            LODWORD(v63) = 1;
        }
        if (BYTE2(self->_zoomFactorLock._os_unfair_lock_opaque)
          && ((-[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor"),
               *(float *)&v15 != *(float *)&self->_ispZoomLatency)
            ? (v64 = 1)
            : (v64 = v52),
              v22 && (v64 & 1) == 0 && self->_cinematicFramingFeedbackForCameraControlsROIEnabled))
        {
          if (!LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
          {
            LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 1;
            v65 = 2788;
LABEL_105:
            -[NSMutableArray updateISPZoomDelay:](self->_whiteBalanceGainsOrderedKeys, "updateISPZoomDelay:", *(unsigned int *)((char *)&self->super.isa + v65));
          }
        }
        else if (LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque))
        {
          LOBYTE(self->_zoomFactorLock._os_unfair_lock_opaque) = 0;
          v65 = 2784;
          goto LABEL_105;
        }
        if (self->_position == 2)
          v63 = 0;
        else
          v63 = v63;
        v66 = self->_cinematicFramingFeedbackForCameraControlsROIEnabled || v52;
        v67 = 1.0;
        if (v22)
        {
          if ((v66 & 1) == 0)
          {
            -[NSMutableArray appliedZoomFactor](self->_whiteBalanceGainsOrderedKeys, "appliedZoomFactor");
            *(float *)&v16 = self->_rampDefaultBravoSnapDistanceFraction;
            if (*(float *)&v15 >= *(float *)&v16 && v10 < *(float *)&v16)
              v67 = self->_zoomRampTuning.jumpFrontFacingZoomOut[2].snapFraction;
          }
        }
        *(float *)&v15 = a3;
        LODWORD(v16) = v54;
        LODWORD(v17) = v53;
        *(float *)&v18 = v55;
        *(float *)&v19 = v61;
        *(float *)&v20 = v67;
        -[NSMutableArray rampToVideoZoomFactor:usingSpringWithTension:friction:snapFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:rampStartFrameDelayAt30fps:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:usingSpringWithTension:friction:snapFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:rampStartFrameDelayAt30fps:commandID:", 1, v63, v5, v15, v16, v17, v18, v19, v20);
        break;
      }
      if (self->_cinematicFramingFeedbackForCameraControlsROIEnabled)
      {
        v47 = 1;
        goto LABEL_58;
      }
      newISPZoomFactor = 0.01;
      if (v13)
      {
        v70 = -[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant");
        if (v12 < a3 && v70)
          newISPZoomFactor = self->_newISPZoomFactor;
      }
      v72 = 0.25;
      if (self->_position != 2)
      {
        v74 = v12 / a3;
        if (v12 < a3)
          v74 = a3 / v12;
        v73 = flt_1A32B1FA0[v21 == 2];
        v72 = (float)(v73 * log2f(v74));
      }
      LODWORD(v16) = 0;
      LODWORD(v19) = 1.0;
      LODWORD(v20) = 1.0;
      *(float *)&v15 = a3;
      *(float *)&v18 = newISPZoomFactor;
      -[NSMutableArray rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:](self->_whiteBalanceGainsOrderedKeys, "rampToVideoZoomFactor:withRampType:rate:duration:snapToTargetZoomFactorWithinRampFraction:rampTuning:earlySwitchOverScaleFactorForZoomIn:allowableMinimumDigitalZoomFactorDuringZoomOut:commandID:", 2, 1, v5, v15, v16, v72, v18, v19, v20);
      break;
    default:
      break;
  }
  *(float *)&v15 = v10;
  -[BWPreviewTimeMachineProcessor requestedZoomFactorChanged:](self->_previewTimeMachineProcessor, "requestedZoomFactorChanged:", v15);
  _Block_object_dispose(&v80, 8);
}

uint64_t __70__BWFigVideoCaptureDevice_rampToVideoZoomFactor_withTuning_commandID___block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 1832);
  return result;
}

- (float)_baseZoomFactorForZoomFactor:(uint64_t)a1
{
  float v4;
  float v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  float v12;
  float v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  float v20;
  float v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0.0;
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 568), "firstObject"), "baseZoomFactorAfterGDC");
  v5 = v4;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v6 = *(void **)(a1 + 568);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v28 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        objc_msgSend(v11, "baseZoomFactorAfterGDC");
        if (v12 <= a2)
        {
          objc_msgSend(v11, "baseZoomFactorAfterGDC");
          v5 = v13;
        }
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v14 = (void *)objc_msgSend(v11, "nondisruptiveSwitchingZoomFactors", 0);
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v24;
          do
          {
            for (j = 0; j != v16; ++j)
            {
              if (*(_QWORD *)v24 != v17)
                objc_enumerationMutation(v14);
              v19 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * j);
              objc_msgSend(v19, "floatValue");
              if (v20 <= a2)
              {
                objc_msgSend(v19, "floatValue");
                v5 = v21;
              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          }
          while (v16);
        }
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v8);
  }
  return v5;
}

- (void)setNondisruptiveSwitchingFormatIndicesByZoomFactorSIFRBinned:(id)a3 nondisruptiveSwitchingFormatIndicesByZoomFactorSIFRNonBinned:(id)a4 ultraHighResolutionNondisruptiveStreamingFormatIndex:(int)a5 mainFormatSIFRBinningFactor:(int)a6 forPortType:(id)a7 quadraSubPixelSwitchingParameters:(id)a8
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  BWFigVideoCaptureDevice *v14;
  id v15;
  void *v16;
  uint64_t v17;
  BWFigVideoCaptureDevice *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  float v30;
  float v31;
  BOOL v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v9 = a7;
  v10 = *(_QWORD *)&a6;
  v11 = *(_QWORD *)&a5;
  v12 = a4;
  v13 = a3;
  v14 = self;
  v52[1] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)&self->_manualCinematicFramingEnabled + 1) = a6;
  if (a6 == 2)
    v15 = a3;
  else
    v15 = a4;
  if (self->_bravoTelephotoCaptureStream && LOBYTE(self->_variableFrameRateUpdateLock._os_unfair_lock_opaque))
    return;
  v16 = -[BWFigVideoCaptureDevice _captureStreamByPortType:]((uint64_t)self, (uint64_t)a7);
  v17 = objc_msgSend(v15, "count");
  if (objc_msgSend(v15, "count") == 1)
  {
    v46 = v9;
    v18 = v14;
    v19 = v13;
    v20 = v10;
    v21 = v12;
    v22 = v11;
    v23 = a8;
    v24 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v16, "baseZoomFactor");
    v25 = v24;
    a8 = v23;
    v11 = v22;
    v12 = v21;
    v10 = v20;
    v13 = v19;
    v14 = v18;
    v9 = v46;
    v26 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", objc_msgSend(v25, "numberWithFloat:"));
    if (v26)
    {
      v27 = objc_msgSend(v26, "intValue");
      goto LABEL_35;
    }
  }
  if (!v17)
  {
    v27 = 0xFFFFFFFFLL;
    goto LABEL_35;
  }
  if (!BYTE1(v14->_zoomFactorLock._os_unfair_lock_opaque)
    || !BYTE2(v14->_zoomFactorLock._os_unfair_lock_opaque)
    && objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D05A28]))
  {
    v47 = a8;
    v28 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v16, "baseZoomFactor", v47);
    v29 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", objc_msgSend(v28, "numberWithFloat:"));
    if (v29)
      v27 = objc_msgSend(v29, "intValue");
    else
      v27 = 0xFFFFFFFFLL;
    v34 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v16, "baseZoomFactor");
    if (objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v34, "numberWithFloat:")))
    {
      v35 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v16, "baseZoomFactor");
      v51 = objc_msgSend(v35, "numberWithFloat:");
      v36 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v16, "baseZoomFactor");
      v52[0] = objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v36, "numberWithFloat:"));
      v13 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, &v51, 1);
    }
    else
    {
      v13 = 0;
    }
    v37 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v16, "baseZoomFactor");
    if (objc_msgSend(v12, "objectForKeyedSubscript:", objc_msgSend(v37, "numberWithFloat:")))
    {
      v38 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v16, "baseZoomFactor");
      v49 = objc_msgSend(v38, "numberWithFloat:");
      v39 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v16, "baseZoomFactor");
      v50 = objc_msgSend(v12, "objectForKeyedSubscript:", objc_msgSend(v39, "numberWithFloat:"));
      v12 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1);
    }
    else
    {
      v12 = 0;
    }
    a8 = v48;
LABEL_35:
    if (*(&v14->_manualCinematicFramingEnabled + 3)
      && (v40 = (void *)MEMORY[0x1E0CB37E8],
          objc_msgSend(v16, "baseZoomFactor"),
          objc_msgSend(v13, "objectForKeyedSubscript:", objc_msgSend(v40, "numberWithFloat:"))))
    {
      v41 = v16;
      v42 = v13;
      v43 = v12;
      v44 = v11;
      v45 = v10;
    }
    else
    {
      v41 = v16;
      v42 = 0;
      v43 = 0;
      v44 = v11;
      v45 = 0;
    }
    objc_msgSend(v41, "setZoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned:zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned:ultraHighResolutionNondisruptiveStreamingFormatIndex:mainFormatSIFRBinningFactor:quadraSubPixelSwitchingParameters:", v42, v43, v44, v45, a8);
    objc_msgSend(v16, "setActiveNondisruptiveSwitchingFormatIndex:", v27);
    return;
  }
  objc_msgSend(v16, "setZoomFactorToNondisruptiveSwitchingFormatIndexSIFRBinned:zoomFactorToNondisruptiveSwitchingFormatIndexSIFRNonBinned:ultraHighResolutionNondisruptiveStreamingFormatIndex:mainFormatSIFRBinningFactor:quadraSubPixelSwitchingParameters:", v13, v12, v11, v10, a8);
  if (objc_msgSend(v9, "isEqual:", *MEMORY[0x1E0D05A18]))
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    v14->_rampDefaultBravoSnapDistanceFraction = v30;
  }
  else if (objc_msgSend(v9, "isEqual:", *MEMORY[0x1E0D05A28]))
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "nondisruptiveSwitchingZoomFactors"), "lastObject"), "floatValue");
    *(float *)&v14->_ispZoomLatency = v31;
    v33 = v31 > 0.0 && v14->_cinematicFramingFeedbackForCameraControlsROIEnabled;
    BYTE1(v14->_previewShiftInSensorSpace.x) = v33;
  }
  -[BWFigVideoCaptureDevice _serviceNondisruptiveSwitchingFormatForCaptureStream:frameStatistics:streamingImageIntent:isStationary:]((uint64_t)v14, v16, 0, 0, 0);
}

- (void)setNondisruptiveSwitchingFormatIndicesByPortType:(id)a3 maximumAllowedFrameRate:(int)a4 minimumFrameRate:(int)a5 maximumFrameRate:(int)a6
{
  uint64_t v6;
  uint64_t v7;
  NSDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSArray *captureStreams;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  void *v38;
  uint64_t v39;
  NSArray *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t k;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  BWFigVideoCaptureDevice *v48;
  unsigned int v49;
  unsigned int v50;
  NSArray *obj;
  uint64_t v52;
  void *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  _BYTE v68[128];
  _BYTE v69[128];
  uint64_t v70;

  v6 = *(_QWORD *)&a6;
  v7 = *(_QWORD *)&a5;
  v70 = *MEMORY[0x1E0C80C00];
  v10 = -[BWFigCaptureSynchronizedStreamsGroup supportedProperties](-[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](self->_synchronizedStreamsGroup, "syncGroup"), "supportedProperties");
  v11 = *MEMORY[0x1E0D08190];
  if (-[NSDictionary objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D08190]))
  {
    v47 = v11;
    v49 = v7;
    v50 = v6;
    v54 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v48 = self;
    obj = self->_captureStreams;
    v12 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
    if (v12)
    {
      v13 = v12;
      v52 = *(_QWORD *)v64;
      v14 = (void *)*MEMORY[0x1E0C9B0D0];
      v15 = *MEMORY[0x1E0D05B00];
      v16 = *MEMORY[0x1E0D05AD0];
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v64 != v52)
            objc_enumerationMutation(obj);
          v18 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
          v19 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v18, "portType"));
          v20 = v19;
          if (v19)
            v21 = objc_msgSend(v19, "intValue");
          else
            v21 = -1;
          v22 = objc_msgSend(v18, "activeNondisruptiveSwitchingCommandID");
          v23 = objc_msgSend(v18, "activeNondisruptiveSwitchingFormatIndex");
          if (v23 == -1 && v21 != -1)
            v23 = objc_msgSend(v18, "activeFormatIndex");
          if (v21 == v23)
            v25 = v22;
          else
            v25 = v22 + 1;
          v26 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v27 = v26;
          if (v20)
            v28 = v20;
          else
            v28 = v14;
          objc_msgSend(v26, "setObject:forKeyedSubscript:", v28, v15);
          objc_msgSend(v27, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25), v16);
          objc_msgSend(v54, "setObject:forKeyedSubscript:", v27, objc_msgSend(v18, "portType"));
        }
        v13 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v63, v69, 16);
      }
      while (v13);
    }
    if (a4
      && v49
      && v50
      && -[BWFigVideoCaptureStream isNondisruptiveFastSwitchingSupported](v48->_captureStream, "isNondisruptiveFastSwitchingSupported"))
    {
      v29 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a4);
      objc_msgSend(v54, "setObject:forKeyedSubscript:", v29, *MEMORY[0x1E0D05B38]);
      v30 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v49);
      objc_msgSend(v54, "setObject:forKeyedSubscript:", v30, *MEMORY[0x1E0D05B48]);
      v31 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v50);
      objc_msgSend(v54, "setObject:forKeyedSubscript:", v31, *MEMORY[0x1E0D05B40]);
    }
    if (-[BWFigCaptureSynchronizedStreamsGroup setProperty:value:](-[BWFigVideoCaptureSynchronizedStreamsGroup syncGroup](v48->_synchronizedStreamsGroup, "syncGroup"), "setProperty:value:", v47, v54))
    {
      FigDebugAssert3();
    }
    else
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      captureStreams = v48->_captureStreams;
      v33 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)v60;
        v36 = *MEMORY[0x1E0D05AD0];
        do
        {
          for (j = 0; j != v34; ++j)
          {
            if (*(_QWORD *)v60 != v35)
              objc_enumerationMutation(captureStreams);
            v38 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * j);
            if (objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v38, "portType")))
              v39 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v38, "portType")), "intValue");
            else
              v39 = 0xFFFFFFFFLL;
            objc_msgSend(v38, "synchronizedStreamsGroupDidUpdateActiveNondisruptiveSwitchingFormatIndex:activeNondisruptiveSwitchingCommandID:maximumAllowedFrameRate:minimumFrameRate:maximumFrameRate:", v39, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v54, "objectForKeyedSubscript:", objc_msgSend(v38, "portType")), "objectForKeyedSubscript:", v36), "intValue"), a4, v49, v50);
          }
          v34 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v59, v68, 16);
        }
        while (v34);
      }
    }
  }
  else
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v40 = self->_captureStreams;
    v41 = -[NSArray countByEnumeratingWithState:objects:count:](v40, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
    if (v41)
    {
      v42 = v41;
      v43 = *(_QWORD *)v56;
      do
      {
        for (k = 0; k != v42; ++k)
        {
          if (*(_QWORD *)v56 != v43)
            objc_enumerationMutation(v40);
          v45 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * k);
          if (objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v45, "portType")))
            v46 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(v45, "portType")), "intValue");
          else
            v46 = 0xFFFFFFFFLL;
          objc_msgSend(v45, "setActiveNondisruptiveSwitchingFormatIndex:maximumAllowedFrameRate:minimumFrameRate:maximumFrameRate:", v46, a4, v7, v6);
        }
        v42 = -[NSArray countByEnumeratingWithState:objects:count:](v40, "countByEnumeratingWithState:objects:count:", &v55, v67, 16);
      }
      while (v42);
    }
  }
}

- (id)preferredMasterPortTypeForZoomFactor:(float)a3
{
  BWFrameStatisticsByPortType *v5;
  double v6;

  v5 = -[BWFigVideoCaptureDevice _copyCurrentFrameStatistics]((uint64_t)self);
  *(float *)&v6 = a3;
  return -[BWBravoStreamSelector preferredMasterPortTypeForFrameStatisticsByPortType:zoomFactor:](self->_bravoStreamSelector, "preferredMasterPortTypeForFrameStatisticsByPortType:zoomFactor:", v5, v6);
}

- (void)zoomCommandHandler:(id)a3 didApplyZoomFactor:(float)a4 zoomFactorWithoutFudge:(float)a5 targetZoomFactor:(float)a6 rampComplete:(BOOL)a7 rampCommandID:(int)a8
{
  uint64_t v10;
  _BOOL8 v11;
  double v13;
  double v14;
  NSObject *focusAndExposureUpdateQueue;
  _QWORD block[5];
  float v17;
  _QWORD v18[4];
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  if (a8)
  {
    v10 = *(_QWORD *)&a8;
    v11 = a7;
    v18[0] = CFSTR("ZoomFactor");
    *(float *)&v13 = a5;
    v19[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3, v13);
    v18[1] = CFSTR("TargetZoomFactor");
    *(float *)&v14 = a6;
    v19[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v14);
    v18[2] = CFSTR("ZoomRampCommandID");
    v19[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v10);
    v18[3] = CFSTR("ZoomRampComplete");
    v19[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v11);
    -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("VideoZoomRampUpdate"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 4));
  }
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __132__BWFigVideoCaptureDevice_zoomCommandHandler_didApplyZoomFactor_zoomFactorWithoutFudge_targetZoomFactor_rampComplete_rampCommandID___block_invoke;
  block[3] = &unk_1E4920568;
  block[4] = self;
  v17 = a4;
  dispatch_async(focusAndExposureUpdateQueue, block);
}

uint64_t __132__BWFigVideoCaptureDevice_zoomCommandHandler_didApplyZoomFactor_zoomFactorWithoutFudge_targetZoomFactor_rampComplete_rampCommandID___block_invoke(uint64_t a1)
{
  -[BWFigVideoCaptureDevice _updateAutoFocusRectIfNeededForZoomFactor:](*(_QWORD *)(a1 + 32), *(float *)(a1 + 40));
  return -[BWFigVideoCaptureDevice _updateExposureRectIfNeededForZoomFactor:](*(CGRect **)(a1 + 32), *(float *)(a1 + 40));
}

- (CGSize)nonDestructiveCropSize
{
  os_unfair_lock_s *p_nonDestructiveCropSizeLock;
  CGFloat width;
  CGFloat height;
  double v6;
  double v7;
  CGSize result;

  p_nonDestructiveCropSizeLock = &self->_nonDestructiveCropSizeLock;
  os_unfair_lock_lock(&self->_nonDestructiveCropSizeLock);
  width = self->_nonDestructiveCropSize.width;
  height = self->_nonDestructiveCropSize.height;
  os_unfair_lock_unlock(p_nonDestructiveCropSizeLock);
  v6 = width;
  v7 = height;
  result.height = v7;
  result.width = v6;
  return result;
}

- (void)setProperty:(id)a3 isObserved:(BOOL)a4
{
  _BOOL8 v4;

  v4 = a4;
  pthread_mutex_lock((pthread_mutex_t *)self->_observedProperties);
  objc_msgSend(*(id *)&self->_currentBiasedExposureCompletedID, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v4), a3);
  pthread_mutex_unlock((pthread_mutex_t *)self->_observedProperties);
}

- (uint64_t)_ltmCurveForStreamingImageIntent:(uint64_t)result
{
  uint64_t v3;
  void *v4;
  os_unfair_lock_s *v5;
  void *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  if (result)
  {
    v3 = result;
    v4 = (void *)objc_msgSend(*(id *)(result + 504), "stream");
    if (objc_msgSend((id)objc_msgSend(v4, "getProperty:error:", *MEMORY[0x1E0D07428], 0), "integerValue") == 5)
    {
      return 0;
    }
    else if ((a2 - 5) >= 4)
    {
      if (a2 == 4)
        v9 = 2;
      else
        v9 = 0;
      if ((a2 - 1) >= 2)
        return v9;
      else
        return 1;
    }
    else
    {
      v5 = (os_unfair_lock_s *)(v3 + 1956);
      os_unfair_lock_lock((os_unfair_lock_t)(v3 + 1956));
      os_unfair_lock_assert_owner((const os_unfair_lock *)(v3 + 1956));
      v6 = *(void **)(v3 + 2144);
      v7 = *(_BYTE *)(v3 + 2140) != 0;
      if (v6)
        v7 = objc_msgSend(v6, "BOOLValue");
      os_unfair_lock_unlock(v5);
      if (a2 == 8)
        v8 = 3;
      else
        v8 = 0;
      if (v7)
        return 2;
      else
        return v8;
    }
  }
  return result;
}

- (float)_minimumFrameRateForStreamingImageIntent:(void *)a3 masterPortType:(double)a4
{
  char v6;
  float v7;

  LODWORD(a4) = 0;
  if (a1)
  {
    switch(a2)
    {
      case 0:
      case 4:
      case 6:
      case 8:
        LODWORD(a4) = *(_DWORD *)(a1 + 2092);
        break;
      case 1:
      case 2:
        if (!*(_BYTE *)(a1 + 2120))
          goto LABEL_7;
        if (!objc_msgSend(a3, "isEqualToString:", *MEMORY[0x1E0D05A30], a4))
          goto LABEL_7;
        v6 = objc_msgSend(*(id *)(a1 + 2168), "containsObject:", a3);
        LODWORD(a4) = 6.0;
        if ((v6 & 1) == 0)
          goto LABEL_7;
        break;
      case 3:
        LODWORD(a4) = 24.0;
        break;
      case 5:
LABEL_7:
        LODWORD(a4) = 8.0;
        break;
      case 7:
        objc_msgSend(*(id *)(a1 + 504), "minimumSupportedFrameRate", a4);
        v7 = *(float *)&a4;
        LODWORD(a4) = 2.0;
        if (v7 >= 2.0)
          objc_msgSend(*(id *)(a1 + 504), "minimumSupportedFrameRate");
        break;
      default:
        return *(float *)&a4;
    }
  }
  return *(float *)&a4;
}

- (void)_updateStreamingImageIntentForChangedMasterStreamWithPortType:(uint64_t)a1
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    if (*(_BYTE *)(a1 + 2120))
    {
      v2 = *(NSObject **)(a1 + 1560);
      v3[0] = MEMORY[0x1E0C809B0];
      v3[1] = 3221225472;
      v3[2] = __89__BWFigVideoCaptureDevice__updateStreamingImageIntentForChangedMasterStreamWithPortType___block_invoke;
      v3[3] = &unk_1E491E748;
      v3[4] = a1;
      v3[5] = a2;
      dispatch_async(v2, v3);
    }
  }
}

void __89__BWFigVideoCaptureDevice__updateStreamingImageIntentForChangedMasterStreamWithPortType___block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int os_unfair_lock_opaque;
  double v4;
  uint64_t v5;
  float v6;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 1956));
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_opaque = v2[521]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 489);
  if ((os_unfair_lock_opaque - 1) <= 1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = -[BWFigVideoCaptureDevice _minimumFrameRateForStreamingImageIntent:masterPortType:](v5, os_unfair_lock_opaque, *(void **)(a1 + 40), v4);
    -[BWFigVideoCaptureDevice _setMinimumFrameRate:](v5, v6);
  }
}

- (BOOL)globalToneMappingEnabled
{
  os_unfair_lock_s *p_frameStatisticsLock;
  int nextStreamingImageIntent;
  BOOL globalToneMappingEnabled;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  nextStreamingImageIntent = self->_nextStreamingImageIntent;
  globalToneMappingEnabled = nextStreamingImageIntent == 4;
  if (nextStreamingImageIntent == 3)
    globalToneMappingEnabled = self->_globalToneMappingEnabled;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return globalToneMappingEnabled;
}

- (NSNumber)globalToneMappingEnabledOverride
{
  os_unfair_lock_s *p_frameStatisticsLock;
  NSNumber *v4;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  v4 = self->_globalToneMappingEnabledOverride;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v4;
}

uint64_t __54__BWFigVideoCaptureDevice__ubSetupMetadataTimeMachine__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;
  unsigned int v14;

  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AB8]), "intValue");
  if (FigCaptureStreamFocusingMethodIsContrastBased())
    return 2;
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v7 + 1464))
  {
    if (*(_BYTE *)(v7 + 1472))
    {
      v8 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]), "objectForKeyedSubscript:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1464), "portType"));
      if (objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B90]), "intValue") != 2)return 2;
    }
  }
  if (objc_msgSend(a3, "count"))
  {
    v9 = objc_msgSend(a3, "count");
    while ((int)v9 >= 1)
    {
      if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", --v9), "objectForKeyedSubscript:", 0x1E492C418), "BOOLValue") & 1) == 0)
      {
        v10 = (void *)objc_msgSend(a3, "objectAtIndexedSubscript:", v9);
        if (v10)
        {
          v11 = *MEMORY[0x1E0D06D20];
          v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue");
          if (v12 != objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v11), "intValue"))
            return 3;
        }
        break;
      }
    }
  }
  v13 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D88]);
  if ((int)objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0D068D0]), "intValue") > 1)
  {
    v14 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]), "intValue");
    FigCaptureVideoDimensionsAreEqual(v14 | (unint64_t)(objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue") << 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 148));
    return 2;
  }
  return 0;
}

- (int)unifiedBracketingMode
{
  return self->_unifiedBracketingMode;
}

- (BOOL)sifrStillImageCaptureEnabledIfAvailable
{
  return self->_sifrStillImageCaptureEnabledIfAvailable;
}

- (BOOL)deepFusionEnabled
{
  return self->_deepFusionEnabled;
}

- (BOOL)depthWithDeepFusionEnabled
{
  return self->_depthWithDeepFusionEnabled;
}

- (unsigned)learnedNRMode
{
  return self->_learnedNRMode;
}

- (BOOL)learnedNRUltraHighResolutionDowngradeSupported
{
  NSUInteger v3;
  _OWORD v5[4];
  _BYTE v6[128];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  v3 = -[NSDictionary countByEnumeratingWithState:objects:count:](self->_ubCaptureParametersByPortType, "countByEnumeratingWithState:objects:count:", v5, v6, 16);
  if (v3)
  {
    objc_msgSend(-[NSDictionary objectForKeyedSubscript:](self->_ubCaptureParametersByPortType, "objectForKeyedSubscript:", **((_QWORD **)&v5[0] + 1)), "learnedNRUltraHighResolutionDowngradeEffectiveIntegrationTimeThreshold");
    LOBYTE(v3) = 1;
  }
  return v3;
}

- (BOOL)learnedNRUltraHighResolutionDowngradeEnabled
{
  return self->_learnedNRUltraHighResolutionDowngradeEnabled;
}

- (BOOL)swfrEnabled
{
  return self->_swfrEnabled;
}

- (BOOL)constantColorEnabled
{
  return self->_constantColorEnabled;
}

- (BOOL)digitalFlashEnabled
{
  return self->_digitalFlashEnabled;
}

- (BOOL)digitalFlashMetadataEnabled
{
  return self->_digitalFlashMetadataEnabled;
}

- (NSArray)digitalFlashDetectedObjectTypes
{
  return self->_digitalFlashDetectedObjectTypes;
}

- (int)streamingDigitalFlashMode
{
  os_unfair_lock_s *p_frameStatisticsLock;
  int nextStreamingImageIntent;
  int streamingDigitalFlashMode;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  nextStreamingImageIntent = self->_nextStreamingImageIntent;
  if (nextStreamingImageIntent == 1)
    streamingDigitalFlashMode = 1;
  else
    streamingDigitalFlashMode = 2 * (nextStreamingImageIntent == 2);
  if (nextStreamingImageIntent == 3)
    streamingDigitalFlashMode = self->_streamingDigitalFlashMode;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return streamingDigitalFlashMode;
}

- (void)_updateCurrentStillSmartCameraState
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 3152))
    {

      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
      *(_QWORD *)(a1 + 3192) = *(id *)(a1 + 3184);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
    }
  }
}

- (uint64_t)_ubResolveStillImageCaptureTypeWithSettings:(unint64_t)a3 sceneFlags:(int)a4 hdrMode:(int)a5 qualityPrioritization:(char)a6 clientBracket:(char)a7 canDefer:(uint64_t)a8 primaryPortType:(char *)a9 speedOverQualityInOut:(char *)a10 speedOverQualityDowngradeOut:
{
  char *v17;
  _BOOL4 v18;
  char *v19;
  char v20;
  char v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  void *v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char IsDemosaicedRaw;
  int v38;
  _BOOL4 v39;
  int v40;
  NSObject *v41;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v43;
  int v45;
  int v46;
  id obj;
  _BOOL4 v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v17 = a9;
  if (a9)
    v18 = *a9 != 0;
  else
    v18 = 0;
  v19 = a10;
  if ((-[BWFigVideoCaptureDevice _ubIsDigitalFlashCaptureForSettings:sceneFlags:](a1, a2, a3) & 1) != 0)
  {
    v20 = 0;
    v21 = 0;
    v22 = 11;
    goto LABEL_97;
  }
  if (objc_msgSend(a2, "flashMode") == 1 && -[BWFigVideoCaptureDevice _ubIsFlashAvailable](a1))
    goto LABEL_21;
  v51 = a8;
  v52 = a7;
  v48 = v18;
  v23 = 1;
  if (a4 == 1)
    v22 = 10;
  else
    v22 = 7;
  if (a4 == 1 || (a6 & 1) != 0)
    goto LABEL_82;
  if (objc_msgSend(a2, "flashMode") == 2)
  {
    v24 = 0;
    if ((a3 & 0x4000) == 0 && *(_BYTE *)(a1 + 2152))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
      v24 = *(_DWORD *)(a1 + 2192);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
    }
  }
  else
  {
    v24 = 0;
  }
  if (objc_msgSend(a2, "flashMode") == 2
    && -[BWFigVideoCaptureDevice _ubIsAutoFlashForSceneFlags:digitalFlashModeForSceneMonitoring:](a1, a3, v24))
  {
LABEL_21:
    v20 = 0;
    v21 = 0;
    v22 = 2;
    goto LABEL_97;
  }
  if (a4 != 2 && a5 < 2)
  {
    v20 = 0;
    v21 = 0;
    v22 = 1;
    goto LABEL_97;
  }
  v50 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](a1, a2, 0, a3);
  v25 = -[BWFigVideoCaptureDevice _ubIsBravoMultiCameraCaptureForSettings:sceneFlags:deliverDepthData:](a1, a2, a3, v50);
  v26 = *(unsigned __int8 *)(a1 + 2074);
  if (*(_BYTE *)(a1 + 2074))
    v26 = objc_msgSend(a2, "constituentPhotoDeliveryEnabled") ^ 1;
  if (!v50)
    v26 = v25 ^ 1;
  if (*(_BYTE *)(a1 + 2073))
    v27 = v26;
  else
    v27 = 0;
  v46 = v25;
  v45 = v27;
  if (objc_msgSend(a2, "resolutionFlavor") != 1
    && objc_msgSend(a2, "resolutionFlavor") != 2)
  {
LABEL_50:
    v22 = 0;
    v39 = 0;
    goto LABEL_54;
  }
  obj = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (objc_msgSend(a2, "resolutionFlavor") == 1)
  {
    v28 = &unk_1E49FB880;
LABEL_39:
    objc_msgSend(obj, "addObject:", v28);
    goto LABEL_40;
  }
  if (objc_msgSend(a2, "resolutionFlavor") == 2 && (*(_BYTE *)(a1 + 2076) & 0xC) != 0)
  {
    v28 = &unk_1E49FB7D8;
    goto LABEL_39;
  }
LABEL_40:
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
  if (!v29)
    goto LABEL_50;
  v30 = v29;
  v49 = *(_QWORD *)v55;
  while (2)
  {
    for (i = 0; i != v30; ++i)
    {
      if (*(_QWORD *)v55 != v49)
        objc_enumerationMutation(obj);
      v32 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
      v58[0] = 0;
      v33 = objc_msgSend(v32, "intValue");
      v34 = objc_msgSend(a2, "resolutionFlavor");
      v35 = objc_msgSend(a2, "constituentPhotoDeliveryEnabled");
      v36 = objc_msgSend(a2, "autoDeferredProcessingEnabled");
      IsDemosaicedRaw = FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a2, "rawOutputFormat"));
      v38 = -[BWFigVideoCaptureDevice _ubIsRequestedHighResolutionFlavorSupportedForCaptureType:portType:qualityPrioritization:requestedHighResolutionFlavor:sceneFlags:deliverDepthData:bravoConstituentPhotoCapture:autoDeferredProcessingEnabled:canDefer:demosaicedRawRequested:isUltraHighResolutionDowngradeOut:](a1, v33, v51, a5, v34, a3, v50, v35, v36, v52, IsDemosaicedRaw, v58);
      if (v58[0])
      {
        v22 = objc_msgSend(v32, "intValue");
        v39 = 0;
LABEL_53:
        v17 = a9;
        goto LABEL_54;
      }
      if (v38)
      {
        v22 = objc_msgSend(v32, "intValue");
        v39 = objc_msgSend(a2, "resolutionFlavor") == 2;
        goto LABEL_53;
      }
    }
    v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
    v22 = 0;
    v39 = 0;
    v17 = a9;
    if (v30)
      continue;
    break;
  }
LABEL_54:
  v40 = v46;
  if ((_DWORD)v22)
    v40 = 1;
  if ((a3 & 0x10) != 0 && !v40)
  {
    v22 = 6;
    v19 = a10;
    goto LABEL_81;
  }
  v19 = a10;
  if (!v45 || (_DWORD)v22 != 12 && ((a3 & 0x1000) == 0 || a5 < 3 || (_DWORD)v22))
  {
    if ((_DWORD)v22 == 1)
      goto LABEL_81;
    if ((_DWORD)v22)
    {
      if ((_DWORD)v22 == 10)
        goto LABEL_81;
    }
    else if ((*(_BYTE *)(a1 + 2080) || (*(_BYTE *)(a1 + 2076) & 3) == 0) && *(_DWORD *)(a1 + 1992))
    {
      goto LABEL_80;
    }
LABEL_79:
    v22 = 1;
    goto LABEL_81;
  }
  v22 = 12;
  if (!objc_msgSend(a2, "autoDeferredProcessingEnabled") || (v52 & 1) != 0)
    goto LABEL_81;
  if (*(_DWORD *)(a1 + 1992) != 1)
  {
    if (dword_1ECFE9470)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v22 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  if (dword_1ECFE9470)
  {
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_80:
  v22 = 10;
LABEL_81:
  v23 = !v39;
LABEL_82:
  if ((_DWORD)v22 == 12)
  {
    if (v48 && v23)
    {
      if (dword_1ECFE9470)
      {
        v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
        v20 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v22 = 10;
      }
      else
      {
        v22 = 10;
        v20 = 1;
      }
      v21 = 1;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = 12;
    }
  }
  else if ((_DWORD)v22 == 10)
  {
    if (v48)
    {
      v21 = 0;
      v20 = *(_DWORD *)(a1 + 1992) == 2 || v23;
    }
    else
    {
      v20 = 0;
      v21 = 0;
    }
    v22 = 10;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
LABEL_97:
  if (v17)
    *v17 = v20;
  if (v19)
    *v19 = v21;
  return v22;
}

- (uint64_t)_ubDeliverDepthDataForSettings:(uint64_t)a3 speedOverQuality:(int)a4 sceneFlags:
{
  int v7;
  int v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v7 = BWCIFilterArrayContainsPortraitFilters((void *)objc_msgSend(a2, "processedImageFilters"));
  if ((objc_msgSend(a2, "depthDataDeliveryEnabled") & 1) != 0 || v7)
  {
    if ((a4 & 0x800000) != 0)
    {
      v8 = objc_msgSend(a2, "digitalFlashMode");
      v9 = 1;
      if ((a4 & 0x4000) == 0 || v8 < 1)
        return v9;
    }
    else if (!dword_1ECFE9470)
    {
      goto LABEL_10;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_10:
  if (!objc_msgSend(a2, "constituentPhotoDeliveryEnabled", v13, v14)
    || !objc_msgSend(a2, "cameraCalibrationDataDeliveryEnabled")
    || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 528), "objectForKeyedSubscript:", CFSTR("ConstituentPhotoCalibrationData")), "BOOLValue") & 1) != 0)
  {
    return 0;
  }
  if (!dword_1ECFE9470)
    return 1;
  v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  v9 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v9;
}

- (uint64_t)_ubIsRequestedHighResolutionFlavorSupportedForCaptureType:(uint64_t)a3 portType:(int)a4 qualityPrioritization:(int)a5 requestedHighResolutionFlavor:(unint64_t)a6 sceneFlags:(char)a7 deliverDepthData:(char)a8 bravoConstituentPhotoCapture:(char)a9 autoDeferredProcessingEnabled:(char)a10 canDefer:(char)a11 demosaicedRawRequested:(_BYTE *)a12 isUltraHighResolutionDowngradeOut:
{
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;

  if (result)
  {
    v15 = result;
    if (a5 != 2)
    {
      if (a5 != 1)
      {
        LOBYTE(v16) = 0;
        result = a5 == 0;
        goto LABEL_30;
      }
      LOBYTE(v16) = 0;
      if (a9 && a10)
      {
        result = 0;
        if ((a8 & 1) != 0)
          goto LABEL_30;
        v18 = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 2448), "objectForKeyedSubscript:"), "containsObject:", &unk_1E49FB7D8);
        LOBYTE(v16) = 0;
        if (v18)
        {
          result = 0;
          if ((a11 & 1) != 0)
            goto LABEL_30;
          LOBYTE(v16) = 0;
          if (a4 >= 3 && a2 == 12)
          {
            result = 0;
            if (*(_BYTE *)(v15 + 2073))
            {
              LOBYTE(v16) = 0;
              result = (a6 >> 20) & 1;
            }
            goto LABEL_30;
          }
        }
      }
      goto LABEL_26;
    }
    LOBYTE(v16) = 0;
    if ((a6 & 0x200000) != 0 && (a7 & 1) == 0)
    {
      result = 0;
      if ((a8 & 1) != 0)
        goto LABEL_30;
      result = objc_msgSend((id)objc_msgSend(*(id *)(v15 + 2448), "objectForKeyedSubscript:"), "containsObject:", &unk_1E49FB7A8);
      LOBYTE(v16) = 0;
      if (!(_DWORD)result)
        goto LABEL_30;
      if (a2 == 1)
      {
        result = 0;
        if (a4 < 2)
          goto LABEL_30;
        v17 = *(_DWORD *)(v15 + 2076);
        if ((v17 & 0xC) == 0)
        {
          LOBYTE(v16) = 0;
          result = 0;
          goto LABEL_30;
        }
        if ((v17 & 4) != 0)
        {
          LOBYTE(v16) = v17 & BYTE3(a6) & 1;
LABEL_29:
          result = (a6 & 0x1000000) == 0;
LABEL_30:
          if (a12)
            *a12 = v16;
          return result;
        }
        LOBYTE(v16) = 0;
        if ((v17 & 8) != 0 && a10)
        {
          result = 0;
          if (!a9)
            goto LABEL_30;
          v16 = (a6 >> 24) & 1 & (v17 >> 1);
          goto LABEL_29;
        }
      }
    }
LABEL_26:
    result = 0;
    goto LABEL_30;
  }
  return result;
}

- (uint64_t)_ubResolveStillImageCaptureFlagsForCaptureType:(unint64_t)a3 sceneFlags:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 hdrMode:(int)a7 speedOverQuality:(int)a8 speedOverQualityDowngrade:(int)a9 qualityPrioritization:(int)a10 highResolutionFlavor:(char)a11 ultraHighResolutionDowngrade:(unsigned __int8)a12 canDefer:(void *)a13 processingSupportProvider:(_DWORD *)a14 zeroShutterLagFailureReasonOut:(void *)a15 metadata:
{
  void *v17;
  uint64_t v21;
  _DWORD *v22;
  void *v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  void *v45;
  int v46;
  int v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v72;
  char v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  char v79;
  void *v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  char v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t k;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  void *v112;
  int v113;
  void *v115;
  void *v116;
  char v117;
  void *v118;
  unint64_t v119;
  void *v120;
  unsigned int v121;
  void *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  int v136;
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];
  _QWORD v140[3];

  v140[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v17 = a5;
    v21 = result;
    v22 = a14;
    v136 = 0;
    v23 = *(void **)(result + 1296);
    if (!v23)
      v23 = *(void **)(result + 504);
    result = objc_msgSend(a5, "objectForKeyedSubscript:", objc_msgSend(v23, "portType"));
    v115 = (void *)result;
    if (result)
    {
      result = objc_msgSend(*(id *)(v21 + 2008), "objectForKeyedSubscript:", objc_msgSend(v23, "portType"));
      v116 = (void *)result;
      if (result)
      {
        v110 = a8;
        v113 = a6;
        v24 = objc_msgSend(v23, "hasSphere");
        LODWORD(v107) = objc_msgSend(v23, "motionDataInvalid");
        v111 = v24;
        if ((v24 & v107) != 0)
          v25 = 0x200000;
        else
          v25 = 0;
        if (a2 == 12
          && objc_msgSend(a4, "autoDeferredProcessingEnabled")
          && a12
          && (((a3 & 0x8080000) == 0x80000) & objc_msgSend(a4, "autoStereoPhotoCaptureEnabled")) != 0)
        {
          v25 |= 0x4000000000uLL;
        }
        v123 = v21;
        v120 = a4;
        if (*(_BYTE *)(v21 + 1472))
        {
          v26 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](v21, a4, 0, a3);
          if (*(_BYTE *)(v21 + 1497) || *(_BYTE *)(v21 + 1499))
          {
            v27 = objc_msgSend((id)v21, "shallowDepthOfFieldEffectStatus", v107);
            if (v27 > 0xE || (v28 = v26, ((1 << v27) & 0x7A02) == 0))
              v28 = 0;
            objc_msgSend(a15, "setShallowDepthOfFieldEffectSceneStatus:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"));
            v26 &= v28;
            v21 = v123;
          }
          if ((v25 & 0x4000000000) != 0 || v26)
          {
            v29 = objc_msgSend((id)objc_msgSend(*(id *)(v21 + 528), "objectForKeyedSubscript:", CFSTR("StillImageDepthDataType"), v107), "intValue") != 8|| *(_BYTE *)(v21 + 2057) == 0;
            v30 = 2048;
            if (!v29)
              v30 = 2052;
            v25 |= v30;
            if (a2 == 11 && *(_QWORD *)(v21 + 2280) || *(_DWORD *)(v21 + 492) == 13)
              v25 |= 0x200uLL;
          }
        }
        v109 = objc_msgSend((id)v21, "isBravoVariant", v107);
        v118 = v23;
        if (v109 && (v25 & 0x4000000800) != 0 && (v25 & 0x200) == 0)
        {
          v31 = -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v21, v23);
          v117 = 1;
        }
        else
        {
          v117 = objc_msgSend(a4, "constituentPhotoDeliveryEnabled");
          if (objc_msgSend(a4, "constituentPhotoDeliveryEnabled"))
          {
            v32 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v21, (void *)objc_msgSend(a4, "bravoConstituentImageDeliveryDeviceTypes"));
          }
          else
          {
            v140[0] = v23;
            v32 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v140, 1);
          }
          v31 = v32;
        }
        v122 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v132 = 0u;
        v133 = 0u;
        v134 = 0u;
        v135 = 0u;
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v132, v139, 16);
        if (v33)
        {
          v34 = v33;
          v35 = *(_QWORD *)v133;
          do
          {
            for (i = 0; i != v34; ++i)
            {
              if (*(_QWORD *)v133 != v35)
                objc_enumerationMutation(v31);
              objc_msgSend(v122, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v132 + 1) + 8 * i), "portType"));
            }
            v34 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v132, v139, 16);
          }
          while (v34);
        }
        v121 = a2;
        v119 = a3;
        v37 = a13;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v38 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v128, v138, 16);
        if (!v38)
        {
          v40 = 0;
          goto LABEL_67;
        }
        v39 = v38;
        v112 = v17;
        LOBYTE(v40) = 0;
        LOBYTE(v41) = 0;
        v42 = *(_QWORD *)v129;
        v43 = *MEMORY[0x1E0D07410];
        while (1)
        {
          for (j = 0; j != v39; ++j)
          {
            if (*(_QWORD *)v129 != v42)
              objc_enumerationMutation(v31);
            v45 = *(void **)(*((_QWORD *)&v128 + 1) + 8 * j);
            if ((v41 & 1) != 0)
            {
              v41 = 1;
              if (v40)
                goto LABEL_55;
            }
            else
            {
              v41 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v128 + 1) + 8 * j), "stream"), "getPropertyIfSupported:error:", v43, 0), "BOOLValue");
              if (v40)
              {
LABEL_55:
                v40 = 1;
                goto LABEL_56;
              }
            }
            v40 = objc_msgSend(v45, "activeQuadraBinningFactor") == 1;
LABEL_56:
            if (FigCaptureVideoDimensionsAreValid(*(_QWORD *)(v123 + 148))
              && FigCaptureVideoDimensionsAreEqual(objc_msgSend(v45, "activeSensorDimensions"), *(_QWORD *)(v123 + 148)))
            {
              v25 |= 0x40uLL;
            }
            if (objc_msgSend((id)objc_msgSend(*(id *)(v123 + 2008), "objectForKeyedSubscript:", objc_msgSend(v45, "portType")), "alwaysUseAFTimeout"))v25 |= 0x80000000uLL;
          }
          v39 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v128, v138, 16);
          if (!v39)
          {
            if (v41)
              v25 |= 0x8000uLL;
            v17 = v112;
            v22 = a14;
            v37 = a13;
LABEL_67:
            v46 = *(unsigned __int8 *)(v123 + 2057);
            if ((v117 & 1) == 0
              && FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(v120, "rawOutputFormat"))
              && objc_msgSend(v37, "demosaicedRawSupportedForCaptureType:", v121))
            {
              v25 |= 0x100uLL;
            }
            v47 = 0;
            v48 = 0;
            switch(v121)
            {
              case 1u:
                if (objc_msgSend(v120, "burstQualityCaptureEnabled"))
                {
                  v25 |= 0x4000uLL;
                  v51 = a12;
                }
                else
                {
                  v51 = a12;
                  if (a10 == 2)
                  {
                    v25 |= 0x100000000uLL;
                    if (objc_msgSend((id)v123, "ultraHighResolutionZeroShutterLagEnabled")
                      && *(_BYTE *)(v123 + 3208))
                    {
                      v136 = 14;
                    }
                  }
                  else
                  {
                    if (*(_BYTE *)(v123 + 3204))
                      v72 = a9 == 1;
                    else
                      v72 = 0;
                    if (v72)
                      v25 |= 0x4000uLL;
                  }
                }
                if (!*(_DWORD *)(v123 + 2076))
                  goto LABEL_248;
                v73 = objc_msgSend(v120, "burstQualityCaptureEnabled");
                if (a9 < 2 || (v73 & 1) != 0)
                  goto LABEL_248;
                if (a10 == 2)
                {
                  if ((*(_BYTE *)(v123 + 2076) & 4) == 0
                    && (!objc_msgSend(v120, "autoDeferredProcessingEnabled")
                     || !v51
                     || (*(_DWORD *)(v123 + 2076) & 8) == 0))
                  {
                    goto LABEL_248;
                  }
                }
                else if (a10
                       || (*(_BYTE *)(v123 + 2076) & 1) == 0
                       && (!objc_msgSend(v120, "autoDeferredProcessingEnabled")
                        || !v51
                        || (*(_DWORD *)(v123 + 2076) & 2) == 0))
                {
                  goto LABEL_248;
                }
                v25 |= 0x80uLL;
LABEL_248:
                if (v46 && (objc_msgSend(v120, "burstQualityCaptureEnabled") & 1) == 0)
                {
                  v89 = v123;
                  if ((v25 & 0x80) != 0)
                    v25 |= 4uLL;
                  else
                    v25 |= (v25 >> 30) & 4;
                }
                else
                {
                  v89 = v123;
                }
                v47 = 0;
                v48 = 0;
                v90 = (v25 >> 2) & 1;
                if (!*(_BYTE *)(v89 + 2058))
                  LOBYTE(v90) = 0;
                if ((v25 & 0x184) != 0 && (v90 & 1) == 0)
                  goto LABEL_255;
                goto LABEL_262;
              case 2u:
                v52 = objc_msgSend(v120, "constantColorEnabled");
                if (v46 && *(_BYTE *)(v123 + 2081))
                {
                  v53 = (v25 >> 8) & 1;
                  if (a9 > 1)
                    LODWORD(v53) = 1;
                  v54 = v119;
                  if ((v53 | (v25 >> 11) & 1 | v52) == 1)
                  {
                    v25 |= 0xCuLL;
                    if (!*(_BYTE *)(v123 + 2058))
                    {
                      v55 = objc_msgSend(v116, "toneCurveBehavior");
                      v56 = 0x800000;
                      if (v55 == 3)
                        v56 = 0x20000000;
                      if (v55 == 4)
                        v56 = 0x40000000;
                      v57 = v56 | v25;
                      if (objc_msgSend(v116, "preserveBlackLevel"))
                        v25 = v57 | 0x2000000;
                      else
                        v25 = v57;
                    }
                    if (*(_BYTE *)(v123 + 1990)
                      && (objc_msgSend(v120, "autoRedEyeReductionEnabled") & ((v25 & 0x100) == 0)) != 0)
                    {
                      v25 |= 0x10000uLL;
                    }
                    goto LABEL_142;
                  }
                  goto LABEL_139;
                }
                v54 = v119;
                if ((v25 & 0x100) == 0)
                {
LABEL_139:
                  if (*(_BYTE *)(v123 + 1990) && objc_msgSend(v120, "autoRedEyeReductionEnabled"))
                    v25 |= 0x10000uLL;
                  goto LABEL_142;
                }
                v68 = objc_msgSend(v116, "toneCurveBehavior");
                v69 = 0x800000;
                if (v68 == 3)
                  v69 = 0x20000000;
                if (v68 == 4)
                  v69 = 0x40000000;
                v70 = v69 | v25;
                if (objc_msgSend(v116, "preserveBlackLevel"))
                  v25 = v70 | 0x2000000;
                else
                  v25 = v70;
LABEL_142:
                if ((v54 & 0x10000000) == 0)
                  goto LABEL_143;
                v47 = objc_msgSend(v116, "macroFlashQSubSwitchingEnabled");
                v48 = 0;
LABEL_262:
                if (v40 | v47 | BYTE4(v25) & 1)
                  v95 = v25 | 0x10;
                else
                  v95 = v25;
                if (!v48)
                  goto LABEL_279;
                v96 = v123;
                v97 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v123, v121, v119, v95, v115);
                v136 = -[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortType:portTypes:frameStatisticsByPortType:deliverDepthData:](v123, v48, v97, (void *)objc_msgSend(v118, "portType"), v122, v17, (v95 >> 11) & 1);
                if (v136)
                {
                  -[BWFigVideoCaptureDevice _resumeTimeMachines](v123);
                }
                else
                {
                  *(_QWORD *)(v123 + 3248) = v48;
                  v124 = 0u;
                  v125 = 0u;
                  v126 = 0u;
                  v127 = 0u;
                  v98 = -[os_unfair_lock_s countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
                  if (v98)
                  {
                    v99 = v98;
                    v100 = v17;
                    v101 = *(_QWORD *)v125;
                    v102 = *MEMORY[0x1E0D06D88];
                    v103 = *MEMORY[0x1E0D06D90];
                    while (2)
                    {
                      for (k = 0; k != v99; ++k)
                      {
                        if (*(_QWORD *)v125 != v101)
                          objc_enumerationMutation(v48);
                        if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v124 + 1) + 8 * k), "objectForKeyedSubscript:", v102), "objectForKeyedSubscript:", v103), "BOOLValue"))
                        {
                          v95 |= 0x2020uLL;
                          goto LABEL_278;
                        }
                      }
                      v99 = -[os_unfair_lock_s countByEnumeratingWithState:objects:count:](v48, "countByEnumeratingWithState:objects:count:", &v124, v137, 16);
                      if (v99)
                        continue;
                      break;
                    }
                    v95 |= 0x2000uLL;
LABEL_278:
                    v17 = v100;
LABEL_279:
                    v96 = v123;
                  }
                  else
                  {
                    v95 |= 0x2000uLL;
                  }
                }
                if (v136 == 3
                  || -[BWFigVideoCaptureDevice _ubCBAFScanInProgressUsingFrameStatisticsByPortType:portTypes:timeMachineFramesMetadata:](v96, v17, v122, 0))
                {
                  v105 = 0x80000;
                  if ((v95 & 8) == 0)
                    v105 = 2148007936;
                  v95 |= v105;
                }
                v106 = v95 | 0x10000000000;
                if (!a11)
                  v106 = v95;
                result = v106 | a12 ^ 1u;
                goto LABEL_288;
              case 7u:
                if ((v25 & 0x100) == 0)
                {
LABEL_143:
                  v48 = 0;
                  goto LABEL_242;
                }
LABEL_255:
                v91 = objc_msgSend(v116, "toneCurveBehavior");
                v92 = 0x800000;
                if (v91 == 3)
                  v92 = 0x20000000;
                if (v91 == 4)
                  v92 = 0x40000000;
                v93 = v92 | v25;
                v94 = objc_msgSend(v116, "preserveBlackLevel");
                v48 = 0;
                v47 = 0;
                if (v94)
                  v25 = v93 | 0x2000000;
                else
                  v25 = v93;
                goto LABEL_262;
              case 0xAu:
              case 0xCu:
                if (a7)
                {
                  v49 = 0x40000;
                  if (v110)
                    v49 = 262146;
                  v25 |= v49;
                  v50 = v119;
                }
                else
                {
                  v50 = v119;
                  if (v121 == 12)
                  {
                    if (a10 == 1)
                    {
                      v25 |= 0x200000000uLL;
                    }
                    else if (a10 == 2)
                    {
                      v25 |= 0x100000000uLL;
                    }
                  }
                  else if (a10 == 2 && v121 == 10)
                  {
                    v25 |= 0x100000000uLL;
                  }
                }
                v74 = 0;
                if (!*(_QWORD *)(v123 + 1464) || (v25 & 0x800) == 0)
                  goto LABEL_165;
                if (*(_BYTE *)(v123 + 1999))
                {
                  v74 = objc_msgSend(v116, "usePreviousSIFR");
LABEL_165:
                  if ((v25 & 0x100000000) == 0)
                    goto LABEL_166;
                }
                else
                {
                  v74 = 0;
                  if ((v25 & 0x100000000) == 0)
                  {
LABEL_166:
                    v75 = v74 | (v25 >> 38) & 1 & (v50 >> 26);
                    goto LABEL_169;
                  }
                }
                LOBYTE(v75) = 1;
LABEL_169:
                v76 = -[BWFigVideoCaptureDevice _ubIsHDRCaptureUsingSceneFlags:]((_BYTE *)v123, v50);
                v77 = v76;
                v48 = 0;
                if (*(_BYTE *)(v123 + 3204))
                {
                  v78 = v113;
                  if ((v75 & 1) == 0)
                  {
                    if (v113 == 2)
                      v79 = v76;
                    else
                      v79 = 1;
                    if (v113 && !*(_BYTE *)(v123 + 1999) && (v79 & 1) != 0)
                      v48 = 0;
                    else
                      v48 = -[BWFigVideoCaptureDevice _ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream:captureStreams:settings:frameStatisticsByPortType:waitForTimeMachineToFill:failureReasonOut:]((os_unfair_lock_s *)v123, v118, v31, v120, v17, *(unsigned __int8 *)(v123 + 2024), &v136);
                  }
                }
                else
                {
                  v78 = v113;
                }
                if (v46)
                  v25 |= 4uLL;
                if (v78 == 2)
                {
                  v80 = v118;
                  if (v77)
                  {
                    v81 = -[BWFigVideoCaptureDevice _ubIsTimeMachineFramesUsableForHDRUsingTimeMachineFramesMetadata:portTypes:](v123, v48);
                    if (v81)
                      v25 |= 0x100000uLL;
                    if ((v25 & 4) == 0)
                      goto LABEL_197;
LABEL_195:
                    if (*(_BYTE *)(v123 + 2058))
                    {
                      v82 = 0;
                      goto LABEL_209;
                    }
LABEL_197:
                    switch(objc_msgSend(v116, "toneCurveBehavior"))
                    {
                      case 1u:
                        if ((v81 & 1) == 0
                          && !-[BWFigVideoCaptureDevice _ubUseSquareRootToneCurveForNonHDRCapturesUsingFrameStatistics:captureParameters:sceneFlags:](v123, v115, v116, v119))
                        {
                          goto LABEL_201;
                        }
                        v25 |= 0x800000uLL;
                        v82 = 1;
                        break;
                      case 2u:
                        v82 = 0;
                        if (v81)
                          v25 |= 0x800000uLL;
                        break;
                      case 3u:
                        v82 = 0;
                        v25 |= 0x20000000uLL;
                        break;
                      case 4u:
                        v82 = 0;
                        v25 |= 0x40000000uLL;
                        break;
                      default:
LABEL_201:
                        v82 = 0;
                        break;
                    }
                    if (objc_msgSend(v116, "preserveBlackLevel"))
                      v25 |= 0x2000000uLL;
LABEL_209:
                    if ((a7 & 1) == 0)
                    {
                      if (v111)
                      {
                        if ((v119 & 0xC) != 0 || !*(_BYTE *)(v123 + 2001))
                        {
                          v83 = *(_DWORD *)(v123 + 1992);
                          v84 = v83 == 2;
                          if (v83 == 2)
                            v85 = v108;
                          else
                            v85 = 1;
                          if (v84)
                            v86 = 0;
                          else
                            v86 = v108 ^ 1;
                          if ((v85 & 1) == 0)
                            v86 = objc_msgSend(v80, "sphereVideoEnabled");
                        }
                        else
                        {
                          v86 = 0;
                        }
                        v87 = 0;
                      }
                      else
                      {
                        v86 = 0;
                        v87 = (v119 >> 9) & 1 | v82;
                        if ((v119 & 0xC) == 0 && v87)
                        {
                          v86 = 0;
                          v87 = *(_BYTE *)(v123 + 2001) == 0;
                        }
                      }
                      v88 = v81 | v87 | v86;
                      if (v121 == 12)
                        v88 = 1;
                      if (v88)
                        v25 |= 0x400000uLL;
                    }
                    if ((v25 & 0x800) == 0)
                      goto LABEL_242;
                    if (*(_BYTE *)(v123 + 1997)
                      && (!*(_BYTE *)(v123 + 3202) && *(_BYTE *)(v123 + 3203)
                       || (v119 & 0xC) == 0
                       || (v25 & 0x800000) != 0))
                    {
                      v25 |= 0x20000uLL;
                      if (!v81)
                      {
LABEL_242:
                        v47 = 0;
                        goto LABEL_262;
                      }
                    }
                    else if (!v81)
                    {
                      goto LABEL_242;
                    }
                    if ((v109 & 1) != 0 || *(_QWORD *)(v123 + 1464))
                    {
                      v47 = 0;
                      v25 |= 0x1000uLL;
                      goto LABEL_262;
                    }
                    goto LABEL_242;
                  }
                }
                else
                {
                  v80 = v118;
                  if (v78 == 1)
                  {
                    v25 |= 0x100000uLL;
                    v81 = 1;
                    if ((v25 & 4) == 0)
                      goto LABEL_197;
                    goto LABEL_195;
                  }
                  if (!v78)
                  {
                    v81 = 0;
                    v25 |= 0x1000000uLL;
                    if ((v25 & 4) == 0)
                      goto LABEL_197;
                    goto LABEL_195;
                  }
                }
                v81 = 0;
                if ((v25 & 4) == 0)
                  goto LABEL_197;
                goto LABEL_195;
              case 0xBu:
                if (v46)
                  v58 = v25 | 4;
                else
                  v58 = v25;
                v59 = objc_msgSend(v37, "rawNightModeSupportedForPortType:", objc_msgSend(v118, "portType"));
                v60 = v58 | 0x800000000;
                if (!v59)
                  v60 = v58;
                if (a10 == 2)
                  v61 = v60 | 0x100000000;
                else
                  v61 = v60;
                v62 = objc_msgSend(v116, "toneCurveBehavior");
                v63 = 0x800000;
                if (v62 == 3)
                  v63 = 0x20000000;
                if (v62 == 4)
                  v63 = 0x40000000;
                v64 = v63 | v61;
                if (objc_msgSend(v116, "preserveBlackLevel"))
                  v64 |= 0x2000000uLL;
                v65 = objc_msgSend(v120, "digitalFlashMode");
                v48 = 0;
                v47 = 0;
                v66 = v65 >= 2;
                v29 = v65 == 2;
                v67 = v64 | 0x8000000;
                if (!v29)
                  v67 = v64;
                if (!v66)
                  v67 = v64 | 0x4000000;
                v25 = v67 | 0x80000000;
                goto LABEL_262;
              default:
                goto LABEL_262;
            }
          }
        }
      }
    }
LABEL_288:
    if (v22)
      *v22 = v136;
  }
  return result;
}

- (uint64_t)_ubIsBravoMultiCameraCaptureForSettings:(int)a3 sceneFlags:(int)a4 deliverDepthData:
{
  uint64_t v7;

  if (result)
  {
    v7 = result;
    result = objc_msgSend((id)result, "isBravoVariant");
    if ((_DWORD)result)
    {
      result = objc_msgSend(a2, "constituentPhotoDeliveryEnabled");
      if ((result & 1) == 0)
      {
        if (a4)
          return -[BWFigVideoCaptureDevice _ubIsDigitalFlashCaptureForSettings:sceneFlags:](v7, a2, a3) ^ 1;
      }
    }
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubStillImageCaptureSettingsWithID:(__int128 *)a3 userInitiatedRequestPTS:(unsigned int)a4 captureType:(uint64_t)a5 captureFlags:(uint64_t)a6 sceneFlags:(void *)a7 frameStatisticsByPortType:(void *)a8 metadata:(unsigned __int8)a9 deliverOriginalImage:(char)a10 deliverSushiRaw:(void *)a11 bravoConstituentImageDeliveryDeviceTypes:
{
  uint64_t v11;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  void *v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char v48;
  int v49;
  void *v51;
  unsigned int v52;
  double v53;
  int v54;
  void *v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  void *v66;
  _BOOL4 v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  unsigned int v76;
  BOOL v77;
  BOOL v78;
  int v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BWStillImageCaptureTimeMachineFrameInfo *v107;
  BWStillImageCaptureTimeMachineFrameInfo *v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t j;
  void *v136;
  unint64_t v137;
  BWStillImageCaptureTimeMachineFrameInfo *v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t k;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  BWStillImageCaptureTimeMachineFrameInfo *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  void *v158;
  int v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t m;
  void *v179;
  void *v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  void *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v202;
  BWStillImageCaptureStreamSettings *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t n;
  void *v208;
  BWStillImageCaptureStreamSettings *v209;
  BWStillImageCaptureSettings *v210;
  BWStillImageCaptureSettings *v211;
  void *v212;
  unint64_t v213;
  uint64_t v214;
  _BOOL4 v215;
  _BOOL4 v216;
  int v217;
  int v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  uint64_t v242;
  _BOOL4 v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t ii;
  int v248;
  void *v249;
  uint64_t v250;
  void *v251;
  void *v252;
  uint64_t v253;
  _BOOL4 v254;
  unsigned int v255;
  uint64_t v256;
  int v257;
  int v258;
  double v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _BOOL4 v265;
  int v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  BWStillImageCaptureBracketFrameInfo *v274;
  _BOOL4 v275;
  void *v276;
  int v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _BOOL4 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  _BOOL4 v301;
  _BOOL4 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unsigned int v308;
  void *v309;
  unint64_t v311;
  unsigned int v312;
  uint64_t v313;
  unsigned int v314;
  unint64_t v315;
  uint64_t v316;
  _BOOL4 v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  unint64_t v340;
  void *v341;
  unsigned int v342;
  id v343;
  uint64_t v344;
  void *v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  int64_t v349;
  void *v350;
  void *v351;
  void *v352;
  void *v353;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  void *v361;
  _BOOL4 v362;
  _BOOL4 v363;
  id v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  id obj;
  id obja;
  unsigned int v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  unint64_t v377;
  void *v378;
  void *v379;
  unsigned int v380;
  uint64_t v381;
  void *v382;
  void *v383;
  uint64_t v384;
  CMTime v385;
  CMTime v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  os_log_type_t type;
  int v392;
  _QWORD v393[4];
  int v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  unint64_t v422;
  uint64_t v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  _BYTE v428[128];
  __int128 v429;
  uint64_t v430;
  _BYTE v431[128];
  _BYTE v432[128];
  _QWORD v433[4];
  _QWORD v434[4];
  _QWORD v435[2];
  _QWORD v436[2];
  uint64_t v437;
  uint64_t v438;
  _BYTE v439[128];
  _BYTE v440[128];
  _BYTE v441[128];
  _BYTE v442[128];
  _QWORD v443[5];
  _QWORD v444[5];
  _BYTE v445[128];
  uint64_t v446;

  v446 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v17 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      v290 = v11;
      LODWORD(v288) = 0;
      FigDebugAssert3();
    }
    v18 = *(void **)(v17 + 1296);
    if (!v18)
      v18 = *(void **)(v17 + 504);
    if (a4 > 0xC || ((1 << a4) & 0x1402) == 0)
    {
LABEL_344:
      -[BWFigVideoCaptureDevice _resumeTimeMachines](v17);
      v211 = 0;
LABEL_345:
      -[BWStillImageCaptureSettings setMasterPortType:](v211, "setMasterPortType:", objc_msgSend(v18, "portType", v288, v290));
      return v211;
    }
    v303 = a5 & 4;
    v341 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v364 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v353 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v352 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v351 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v350 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v294 = a8;
    v295 = a2;
    if (*(_QWORD *)(v17 + 552))
    {
      if ((a5 & 0x4000000800) != 0)
      {
        v19 = a6;
        v20 = -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v17, v18);
        v21 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v424 = 0u;
        v425 = 0u;
        v426 = 0u;
        v427 = 0u;
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v424, v445, 16);
        if (v22)
        {
          v23 = v22;
          v24 = *(_QWORD *)v425;
          do
          {
            for (i = 0; i != v23; ++i)
            {
              if (*(_QWORD *)v425 != v24)
                objc_enumerationMutation(v20);
              if (*(void **)(*((_QWORD *)&v424 + 1) + 8 * i) != v18)
                objc_msgSend(v21, "addObject:");
            }
            v23 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v424, v445, 16);
          }
          while (v23);
        }
        if (objc_msgSend(v21, "count", v288, v290))
          v26 = v21;
        else
          v26 = 0;
        v343 = v26;
        if (a4 == 1)
        {
          v300 = 0;
          v301 = 0;
          a6 = v19;
        }
        else
        {
          a6 = v19;
          if ((a5 & 4) == 0 || *(_QWORD *)(v17 + 1464))
          {
            v300 = 0;
            v301 = 0;
          }
          else
          {
            v300 = 0;
            v301 = objc_msgSend(a11, "count") == 0;
          }
        }
LABEL_27:
        v28 = (void *)objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v18, "portType", v288));
        v29 = (void *)objc_msgSend(*(id *)(v17 + 2008), "objectForKeyedSubscript:", objc_msgSend(v18, "portType"));
        if (objc_msgSend(v28, "ltmCurve"))
          v30 = a5 | 0x10000000;
        else
          v30 = a5;
        v31 = (v30 & 0x2000) != 0 && *(_QWORD *)(v17 + 3248) != 0;
        v309 = v28;
        if ((v30 & 0x800000) != 0)
        {
          v32 = 1;
        }
        else if ((v30 & 0x20000000) != 0)
        {
          v32 = 2;
        }
        else if ((v30 & 0x40000000) != 0)
        {
          v32 = 3;
        }
        else
        {
          v32 = 0;
        }
        v33 = (v30 & 0x100000) == 0;
        v317 = (v30 & 0x1100000) == 0;
        v34 = v30 & 0x100;
        if ((v30 & 0x100) != 0)
          v35 = v32;
        else
          v35 = 0;
        v36 = v35 != 0;
        v340 = v30;
        v370 = v32;
        v293 = v35;
        if ((v30 & 0x100000040) == 0x100000000 || (v30 & 0x200000000) != 0)
          v298 = objc_msgSend((id)objc_msgSend(*(id *)(v17 + 2064), "objectForKeyedSubscript:", objc_msgSend(v18, "portType")), "intValue");
        else
          v298 = -1;
        obj = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v423 = 0;
        v422 = 0;
        v37 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v17, v340, a4, &v423, &v422);
        v38 = v37;
        v339 = v18;
        if (v37)
          v39 = (objc_msgSend(v37, "intValue") >> 1) & 1;
        else
          v39 = 1;
        v342 = v39;
        v383 = v38;
        v40 = a6 & 0xC;
        v307 = v340 & 0x400000;
        v292 = *(_DWORD *)&v36 & (v340 >> 25);
        if ((v340 & 0x8000) != 0)
        {
          v41 = v339;
          v336 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v339, "stream"), "getPropertyIfSupported:error:", *MEMORY[0x1E0D07410], 0), "BOOLValue");
        }
        else
        {
          v336 = 0;
          v41 = v339;
        }
        if (v307 | v40)
          v42 = 0;
        else
          v42 = v33;
        if (a4 != 10)
          v42 = 0;
        v302 = v42;
        objc_msgSend(v309, "gain");
        v337 = objc_msgSend(v41, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v340 >> 4) & 1);
        v372 = v17;
        v299 = a6;
        if (v342)
        {
          if (a4 == 1)
          {
            if ((v340 & 0x80) == 0)
            {
              v43 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v17, 1, a6, v340, v309);
              v44 = v340;
              v45 = v43;
              v304 = 0;
              v318 = 0;
              v296 = 0;
              v297 = v307 >> 22;
              v46 = a4;
              if ((v340 & 0x100000000) == 0)
                goto LABEL_87;
              goto LABEL_67;
            }
            objc_msgSend(v309, "gain");
            v337 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 30);
            v49 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v17, 1, a6, v340, v309);
            v44 = v340;
            v45 = v49;
            v304 = 0;
            v318 = 0;
            v296 = 0;
            v297 = v307 >> 22;
            v46 = a4;
            if ((v340 & 0x100000000) == 0)
              goto LABEL_82;
            goto LABEL_67;
          }
          if (!v302)
          {
            if (a4 == 12)
            {
              objc_msgSend(v309, "gain");
              v318 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 20);
              objc_msgSend(v309, "gain");
              v304 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 21);
              objc_msgSend(v309, "gain");
              v91 = v339;
              v92 = 22;
            }
            else
            {
              objc_msgSend(v309, "gain");
              if (v370)
              {
                v318 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 11);
                objc_msgSend(v309, "gain");
                v304 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 12);
                objc_msgSend(v309, "gain");
                v91 = v339;
                v92 = 13;
              }
              else
              {
                v318 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 14);
                objc_msgSend(v309, "gain");
                v304 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 15);
                objc_msgSend(v309, "gain");
                v91 = v339;
                v92 = 16;
              }
            }
            v296 = objc_msgSend(v91, "noiseReductionAndSharpeningConfigurationForType:gain:", v92);
            goto LABEL_65;
          }
          objc_msgSend(v309, "gain");
          v318 = objc_msgSend(v339, "noiseReductionAndSharpeningConfigurationForType:gain:", 10);
        }
        else
        {
          v318 = 0;
        }
        v304 = 0;
        v296 = 0;
LABEL_65:
        v47 = -[BWFigVideoCaptureDevice _ubEVZeroCountForCaptureType:sceneFlags:captureFlags:frameStatistics:](v17, a4, a6, v340, v309);
        v44 = v340;
        v45 = v47;
        v297 = v307 >> 22;
        if ((v340 & 0x100000000) == 0)
        {
          if ((v340 & 0x80) == 0)
          {
            v46 = a4;
            v48 = a4 == 1 || v31;
            if ((v48 & 1) == 0)
              goto LABEL_349;
LABEL_87:
            v420 = 0u;
            v421 = 0u;
            v419 = 0u;
            v51 = *(void **)(v17 + 3248);
            v429 = *a3;
            v430 = *((_QWORD *)a3 + 2);
            v52 = v46;
            v53 = -[BWFigVideoCaptureDevice _ubZeroShutterLagFrameSelectionForCaptureType:captureFlags:captureParameters:timeMachineFrameMetadata:mainFrameCount:userInitiatedRequestPTS:](v17, v46, v44, v29, v51, v45, (uint64_t)&v429, (uint64_t)&v419);
            v55 = v339;
            v54 = v340;
            v338 = v340;
            if (v303)
            {
              v56 = objc_msgSend(v339, "portType", v53);
              v57 = -[BWFigVideoCaptureDevice _ubAWBReflowEnabledForCaptureType:primaryPortType:frameStatisticsByPortType:previewMetadata:](v17, v52, v56, a7, (void *)objc_msgSend(*(id *)(v17 + 3248), "objectAtIndexedSubscript:", SDWORD2(v421)));
              v54 = v340;
              v58 = v340 | 0x8000000000;
              if (!v57)
                v58 = v340;
              v338 = v58;
            }
            v59 = SDWORD2(v420);
            v60 = SHIDWORD(v420);
            v373 = DWORD2(v420);
            v377 = SDWORD1(v421);
            v380 = v421;
            v61 = (int)v421;
            if (v52 == 1)
            {
              if (SHIDWORD(v420) >= 1)
              {
                v374 = *MEMORY[0x1E0D06D88];
                v365 = *MEMORY[0x1E0D07D28];
                v62 = *MEMORY[0x1E0D07C20];
                v63 = *MEMORY[0x1E0D07B90];
                v321 = *MEMORY[0x1E0D06B10];
                v355 = *MEMORY[0x1E0D07BB8];
                v347 = *MEMORY[0x1E0D07C18];
                v64 = HIDWORD(v420) + DWORD2(v420);
                v65 = -(uint64_t)(int)v421;
                v332 = *MEMORY[0x1E0D07BF0];
                v328 = *MEMORY[0x1E0D07B80];
                v324 = *MEMORY[0x1E0D07BE0];
                do
                {
                  if (objc_msgSend(*(id *)(v17 + 3248), "count", v53) <= v59)
                    v66 = 0;
                  else
                    v66 = (void *)objc_msgSend(*(id *)(v17 + 3248), "objectAtIndexedSubscript:", v59);
                  v68 = v380 <= v59 && v65 + v59 < v377;
                  objc_msgSend(v66, "objectForKeyedSubscript:", v374);
                  v69 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v59), v365);
                  objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), v62);
                  objc_msgSend(v69, "setObject:forKeyedSubscript:", v383, v63);
                  if (v342)
                  {
                    v70 = v299 & 0x80;
                    if (v66)
                      v70 = objc_msgSend((id)objc_msgSend(v66, "objectForKeyedSubscript:", v321), "BOOLValue");
                    objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v70 != 0), v355);
                    objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370), v347);
                    objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 >> 25) & 1), v332);
                    objc_msgSend(v69, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336), v328);
                    objc_msgSend(v69, "setObject:forKeyedSubscript:", v337, v324);
                    -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v372, v69, v338);
                  }
                  objc_msgSend(v341, "addObject:", v69);
                  v71 = (uint64_t *)&v422;
                  if (v68)
                    v71 = &v423;
                  v72 = *v71;
                  v73 = 2;
                  if ((BYTE4(v340) & (v59 == 0)) != 0)
                    v73 = 18;
                  objc_msgSend(obj, "addObject:", +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", v59++, v72 | v73, 0));
                  v17 = v372;
                }
                while ((uint64_t)v59 < v64);
              }
              if (v303)
              {
                v55 = v339;
                v75 = obj;
                if (*(_BYTE *)(v17 + 2058))
                  objc_msgSend(v294, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromMetadata:](v17, (void *)objc_msgSend(*(id *)(v17 + 3248), "objectAtIndexedSubscript:", SDWORD2(v421), v53)));
                v74 = 0;
                v348 = 0;
              }
              else
              {
                v74 = 0;
                v348 = 0;
                v55 = v339;
                v75 = obj;
              }
              v81 = 0x1E0CB3000;
LABEL_196:
              v122 = v300;
LABEL_212:
              v331 = v74;
              v345 = v75;
              if (v122)
              {
                v345 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array", v53);
                v411 = 0u;
                v412 = 0u;
                v413 = 0u;
                v414 = 0u;
                v132 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v411, v441, 16);
                if (v132)
                {
                  v133 = v132;
                  v134 = *(_QWORD *)v412;
                  do
                  {
                    for (j = 0; j != v133; ++j)
                    {
                      if (*(_QWORD *)v412 != v134)
                        objc_enumerationMutation(v75);
                      v136 = *(void **)(*((_QWORD *)&v411 + 1) + 8 * j);
                      v137 = v422;
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) != 0)
                      {
                        v138 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", objc_msgSend(v136, "timeMachineIndex"), v137, v137);
                        -[BWStillImageCaptureTimeMachineFrameInfo setIsNoLongErrorRecoveryFrame:](v138, "setIsNoLongErrorRecoveryFrame:", objc_msgSend(v136, "isNoLongErrorRecoveryFrame"));
                      }
                      else
                      {
                        objc_opt_class();
                        if ((objc_opt_isKindOfClass() & 1) == 0)
                          goto LABEL_223;
                        v138 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", objc_msgSend(v136, "bracketedCaptureSequenceNumber"), v137, v137);
                      }
                      objc_msgSend(v345, "addObject:", v138);
LABEL_223:
                      v75 = obj;
                    }
                    v133 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v411, v441, 16);
                  }
                  while (v133);
                }
              }
              if (!v301)
                goto LABEL_243;
              v139 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array", v53);
              v407 = 0u;
              v408 = 0u;
              v409 = 0u;
              v410 = 0u;
              v140 = objc_msgSend(v75, "countByEnumeratingWithState:objects:count:", &v407, v440, 16);
              if (v140)
              {
                v141 = v140;
                v142 = *(_QWORD *)v408;
                while (1)
                {
                  for (k = 0; k != v141; ++k)
                  {
                    if (*(_QWORD *)v408 != v142)
                      objc_enumerationMutation(obj);
                    v144 = *(void **)(*((_QWORD *)&v407 + 1) + 8 * k);
                    v145 = objc_msgSend(v144, "mainFlags");
                    if ((v145 & 0x10) != 0)
                      v146 = v145;
                    else
                      v146 = v422;
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                    {
                      v147 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", objc_msgSend(v144, "timeMachineIndex"), v146, objc_msgSend(v144, "sifrFlags"));
                      -[BWStillImageCaptureTimeMachineFrameInfo setIsNoLongErrorRecoveryFrame:](v147, "setIsNoLongErrorRecoveryFrame:", objc_msgSend(v144, "isNoLongErrorRecoveryFrame"));
                    }
                    else
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                        continue;
                      v147 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", objc_msgSend(v144, "bracketedCaptureSequenceNumber"), v146, objc_msgSend(v144, "sifrFlags"));
                    }
                    objc_msgSend(v139, "addObject:", v147);
                  }
                  v141 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v407, v440, 16);
                  if (!v141)
                  {
                    v75 = v139;
                    v55 = v339;
                    v81 = 0x1E0CB3000;
                    goto LABEL_243;
                  }
                }
              }
              v75 = v139;
LABEL_243:
              obja = v75;
              v405 = 0u;
              v406 = 0u;
              v403 = 0u;
              v404 = 0u;
              v320 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v403, v439, 16);
              if (v320)
              {
                v148 = HIDWORD(v340) & 1;
                v149 = v338;
                v150 = v338 & 0xFFFFFFFFFFFF7FFFLL;
                if ((v338 & 0x10) == 0)
                  LOBYTE(v148) = 1;
                v326 = v148;
                v323 = *(_QWORD *)v404;
                if (v370)
                  v151 = 11;
                else
                  v151 = 14;
                v316 = *MEMORY[0x1E0D07410];
                v152 = *MEMORY[0x1E0D07BE0];
                v384 = *MEMORY[0x1E0D07B80];
                v375 = *MEMORY[0x1E0D07C20];
                v381 = *MEMORY[0x1E0D07BE8];
                if (v370)
                  v153 = 12;
                else
                  v153 = 15;
                if (v370)
                  v154 = 13;
                else
                  v154 = 16;
                if (a4 == 12)
                  v155 = 20;
                else
                  v155 = v151;
                v314 = v155;
                if (a4 == 12)
                  v153 = 21;
                v312 = v153;
                v357 = *MEMORY[0x1E0D07BD0];
                if (a4 == 12)
                  v156 = 22;
                else
                  v156 = v154;
                v308 = v156;
                do
                {
                  v157 = 0;
                  do
                  {
                    if (*(_QWORD *)v404 != v323)
                      objc_enumerationMutation(v343);
                    v158 = *(void **)(*((_QWORD *)&v403 + 1) + 8 * v157);
                    if ((v149 & 0x8000) != 0)
                    {
                      v159 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v403 + 1) + 8 * v157), "stream"), "getPropertyIfSupported:error:", v316, 0), "BOOLValue");
                      if (v159)
                        v150 = v149;
                    }
                    else
                    {
                      v159 = 0;
                    }
                    if ((v326 & 1) == 0 && objc_msgSend(v158, "activeQuadraBinningFactor") != 1)
                      v150 &= ~0x10uLL;
                    if ((v340 & 0x40) != 0)
                    {
                      v160 = v372;
                      if (!FigCaptureVideoDimensionsAreEqual(objc_msgSend(v158, "activeSensorDimensions"), *(_QWORD *)(v372 + 148)))v150 &= ~0x40uLL;
                    }
                    else
                    {
                      v160 = v372;
                    }
                    objc_msgSend(v353, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v81 + 2024), "numberWithUnsignedLongLong:", v150), objc_msgSend(v158, "portType"));
                    v361 = (void *)objc_msgSend(*(id *)(v160 + 2008), "objectForKeyedSubscript:", objc_msgSend(v158, "portType"));
                    if (!v342 || v158 == *(void **)(v160 + 1464))
                    {
                      v168 = 0;
                    }
                    else
                    {
                      v161 = (void *)objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v158, "portType"));
                      objc_msgSend(v161, "gain");
                      v162 = objc_msgSend(v158, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v150 >> 4) & 1);
                      v163 = v162;
                      if (a4 == 1)
                      {
                        v437 = v337;
                        v438 = v162;
                        v164 = (void *)MEMORY[0x1E0C99D80];
                        v165 = &v438;
                        v166 = &v437;
                        v167 = 1;
                      }
                      else if (v302)
                      {
                        objc_msgSend(v161, "gain");
                        v169 = objc_msgSend(v158, "noiseReductionAndSharpeningConfigurationForType:gain:", 10);
                        v435[0] = v337;
                        v435[1] = v318;
                        v436[0] = v163;
                        v436[1] = v169;
                        v164 = (void *)MEMORY[0x1E0C99D80];
                        v165 = v436;
                        v166 = v435;
                        v167 = 2;
                      }
                      else
                      {
                        objc_msgSend(v309, "gain");
                        v170 = objc_msgSend(v158, "noiseReductionAndSharpeningConfigurationForType:gain:", v314);
                        objc_msgSend(v309, "gain");
                        v171 = objc_msgSend(v158, "noiseReductionAndSharpeningConfigurationForType:gain:", v312);
                        objc_msgSend(v309, "gain");
                        v172 = objc_msgSend(v158, "noiseReductionAndSharpeningConfigurationForType:gain:", v308);
                        v433[0] = v337;
                        v433[1] = v318;
                        v434[0] = v163;
                        v434[1] = v170;
                        v433[2] = v304;
                        v433[3] = v296;
                        v434[2] = v171;
                        v434[3] = v172;
                        v164 = (void *)MEMORY[0x1E0C99D80];
                        v165 = v434;
                        v166 = v433;
                        v167 = 4;
                      }
                      v168 = (void *)objc_msgSend(v164, "dictionaryWithObjects:forKeys:count:", v165, v166, v167);
                    }
                    v173 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                    v399 = 0u;
                    v400 = 0u;
                    v401 = 0u;
                    v402 = 0u;
                    v174 = objc_msgSend(v341, "countByEnumeratingWithState:objects:count:", &v399, v432, 16);
                    v334 = v157;
                    v371 = v158;
                    if (v174)
                    {
                      v175 = v174;
                      v176 = *(_QWORD *)v400;
                      if (v159)
                        v177 = MEMORY[0x1E0C9AAB0];
                      else
                        v177 = 0;
                      do
                      {
                        for (m = 0; m != v175; ++m)
                        {
                          if (*(_QWORD *)v400 != v176)
                            objc_enumerationMutation(v341);
                          v179 = *(void **)(*((_QWORD *)&v399 + 1) + 8 * m);
                          v180 = (void *)objc_msgSend(v179, "mutableCopy");
                          v181 = objc_msgSend(v179, "objectForKeyedSubscript:", v152);
                          objc_msgSend(v180, "setObject:forKeyedSubscript:", v177, v384);
                          objc_msgSend(v180, "setObject:forKeyedSubscript:", objc_msgSend(v168, "objectForKeyedSubscript:", v181), v152);
                          objc_msgSend(v173, "addObject:", v180);

                        }
                        v175 = objc_msgSend(v341, "countByEnumeratingWithState:objects:count:", &v399, v432, 16);
                      }
                      while (v175);
                      v158 = v371;
                    }
                    else if (v159)
                    {
                      v177 = MEMORY[0x1E0C9AAB0];
                    }
                    else
                    {
                      v177 = 0;
                    }
                    objc_msgSend(v352, "setObject:forKeyedSubscript:", v173, objc_msgSend(v158, "portType"));
                    v182 = (id)objc_msgSend(v331, "mutableCopy");
                    objc_msgSend(v182, "setObject:forKeyedSubscript:", v177, v384);
                    objc_msgSend(v182, "setObject:forKeyedSubscript:", objc_msgSend(v168, "objectForKeyedSubscript:", v337), v152);
                    objc_msgSend(v351, "setObject:forKeyedSubscript:", v182, objc_msgSend(v158, "portType"));
                    v378 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                    v395 = 0u;
                    v396 = 0u;
                    v397 = 0u;
                    v398 = 0u;
                    v183 = objc_msgSend(v364, "countByEnumeratingWithState:objects:count:", &v395, v431, 16);
                    if (v183)
                    {
                      v184 = v183;
                      v185 = 0;
                      v186 = *(_QWORD *)v396;
                      do
                      {
                        v187 = 0;
                        do
                        {
                          if (*(_QWORD *)v396 != v186)
                            objc_enumerationMutation(v364);
                          v188 = *(void **)(*((_QWORD *)&v395 + 1) + 8 * v187);
                          v189 = (void *)objc_msgSend(v188, "mutableCopy");
                          v190 = objc_msgSend((id)objc_msgSend(v189, "objectForKeyedSubscript:", v375), "intValue");
                          if (!v190)
                            ++v185;
                          v191 = objc_msgSend(v188, "objectForKeyedSubscript:", v152);
                          objc_msgSend(v189, "setObject:forKeyedSubscript:", v177, v384);
                          objc_msgSend(v189, "setObject:forKeyedSubscript:", objc_msgSend(v168, "objectForKeyedSubscript:", v191), v152);
                          if (objc_msgSend(v189, "objectForKeyedSubscript:", v381))
                          {
                            if ((objc_msgSend((id)objc_msgSend(*(id *)(v372 + 2064), "objectForKeyedSubscript:", objc_msgSend(v371, "portType")), "intValue") & 0x80000000) != 0)goto LABEL_314;
                            v393[0] = MEMORY[0x1E0C809B0];
                            v393[1] = 3221225472;
                            v393[2] = __235__BWFigVideoCaptureDevice__ubStillImageCaptureSettingsWithID_userInitiatedRequestPTS_captureType_captureFlags_sceneFlags_frameStatisticsByPortType_metadata_deliverOriginalImage_deliverSushiRaw_bravoConstituentImageDeliveryDeviceTypes___block_invoke;
                            v393[3] = &__block_descriptor_36_e45_B32__0__BWStillImageCaptureFrameInfo_8Q16_B24l;
                            v394 = v185;
                            v192 = objc_msgSend(obja, "indexOfObjectPassingTest:", v393);
                            if (v192 == 0x7FFFFFFFFFFFFFFFLL)
                            {
                              v392 = 0;
                              type = OS_LOG_TYPE_DEFAULT;
                              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                              v17 = v372;
                              v18 = v339;
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                              goto LABEL_344;
                            }
                            v193 = (void *)objc_msgSend(obja, "objectAtIndexedSubscript:", v192);
                            v194 = v190 ? objc_msgSend(v193, "sifrFlags") : objc_msgSend(v193, "mainFlags");
                            if ((v422 & v194) != 0
                              || (v197 = objc_msgSend((id)objc_msgSend(*(id *)(v372 + 2064), "objectForKeyedSubscript:", objc_msgSend(v371, "portType")), "intValue"), (v197 & 0x80000000) != 0))
                            {
LABEL_314:
                              v195 = 0;
                            }
                            else
                            {
                              v195 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v197);
                            }
                            objc_msgSend(v189, "setObject:forKeyedSubscript:", v195, v381);
                            if ((v340 & 0x100000080) == 0x100000080
                              && objc_msgSend(v189, "objectForKeyedSubscript:", v381))
                            {
                              v196 = (void *)MEMORY[0x1E0CB37E8];
                              objc_msgSend(v361, "learnedNRUltraHighResolutionExposureBias");
                              objc_msgSend(v189, "setObject:forKeyedSubscript:", objc_msgSend(v196, "numberWithFloat:"), v357);
                            }
                          }
                          objc_msgSend(v378, "addObject:", v189);

                          ++v187;
                        }
                        while (v184 != v187);
                        v198 = objc_msgSend(v364, "countByEnumeratingWithState:objects:count:", &v395, v431, 16);
                        v184 = v198;
                      }
                      while (v198);
                    }
                    objc_msgSend(v350, "setObject:forKeyedSubscript:", v378, objc_msgSend(v371, "portType"));
                    v157 = v334 + 1;
                    v149 = v338;
                    v55 = v339;
                    v81 = 0x1E0CB3000;
                    v150 = v338 & 0xFFFFFFFFFFFF7FFFLL;
                  }
                  while (v334 + 1 != v320);
                  v320 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v403, v439, 16);
                }
                while (v320);
                v199 = v338;
                v200 = v338 & 0x10;
              }
              else
              {
                v199 = v338;
                v150 = v338 & 0xFFFFFFFFFFFF7FFFLL;
                v200 = v338 & 0x10;
              }
              v202 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              if (v336)
                v150 = v199;
              if ((v340 & 0x100000000) == 0
                && v200
                && objc_msgSend(v55, "activeQuadraBinningFactor") != 1)
              {
                v150 &= ~0x10uLL;
              }
              v203 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", objc_msgSend(v55, "portType"), a4, v150, v348, v341, v331, v364, v345);
              -[BWStillImageCaptureStreamSettings setSensorIDString:](v203, "setSensorIDString:", objc_msgSend(v55, "sensorIDString"));
              objc_msgSend(v202, "addObject:", v203);

              v389 = 0u;
              v390 = 0u;
              v387 = 0u;
              v388 = 0u;
              v204 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v387, v428, 16);
              if (v204)
              {
                v205 = v204;
                v206 = *(_QWORD *)v388;
                do
                {
                  for (n = 0; n != v205; ++n)
                  {
                    if (*(_QWORD *)v388 != v206)
                      objc_enumerationMutation(v343);
                    v208 = *(void **)(*((_QWORD *)&v387 + 1) + 8 * n);
                    v209 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", objc_msgSend(v208, "portType"), a4, objc_msgSend((id)objc_msgSend(v353, "objectForKeyedSubscript:", objc_msgSend(v208, "portType")), "unsignedLongValue"), v348, objc_msgSend(v352, "objectForKeyedSubscript:", objc_msgSend(v208, "portType")), objc_msgSend(v351, "objectForKeyedSubscript:", objc_msgSend(v208, "portType")), objc_msgSend(v350, "objectForKeyedSubscript:", objc_msgSend(v208, "portType")), obja);
                    -[BWStillImageCaptureStreamSettings setSensorIDString:](v209, "setSensorIDString:", objc_msgSend(v208, "sensorIDString"));
                    objc_msgSend(v202, "addObject:", v209);

                  }
                  v205 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v387, v428, 16);
                }
                while (v205);
              }
              LOBYTE(v289) = a10;
              v210 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:]([BWStillImageCaptureSettings alloc], "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v295, a4, v338, v299, a7, a9, v289, v202);
              v211 = v210;
              v17 = v372;
              if ((v338 & 0x2000) != 0)
              {
                -[BWStillImageCaptureSettings setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:](v210, "setTimeMachineReferenceFrameBracketedCaptureSequenceNumber:", v348 + 1);
                v212 = (void *)objc_msgSend(*(id *)(v372 + 3248), "lastObject");
                CMTimeMakeFromDictionary(&v386, (CFDictionaryRef)objc_msgSend(v212, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]));
                v385 = v386;
                -[BWStillImageCaptureSettings setLastTimeMachinePTS:](v211, "setLastTimeMachinePTS:", &v385);
              }
              v18 = v339;
              if (v211)
                goto LABEL_345;
              goto LABEL_344;
            }
            v76 = v52;
            if (v34 | v303 | v307)
              v77 = 1;
            else
              v77 = v370 == 0;
            v78 = !v77 && v52 == 10;
            v79 = v78;
            v356 = v79;
            v80 = (uint64_t *)MEMORY[0x1E0D07D28];
            v81 = 0x1E0CB3000uLL;
            if (v78)
            {
              v82 = SHIDWORD(v420);
              v83 = (v54 & 0x1000000) == 0;
              v443[0] = *MEMORY[0x1E0D07D28];
              v84 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", DWORD2(v421), v53);
              v85 = *MEMORY[0x1E0D07C20];
              v444[0] = v84;
              v444[1] = &unk_1E49FB7C0;
              v86 = *MEMORY[0x1E0D07BB8];
              v443[1] = v85;
              v443[2] = v86;
              v87 = v83;
              v60 = v82;
              v444[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v87);
              v443[3] = *MEMORY[0x1E0D07B80];
              v88 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
              v443[4] = *MEMORY[0x1E0D07BE0];
              v444[3] = v88;
              v444[4] = v337;
              v89 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v444, v443, 5);
              v90 = -1;
            }
            else
            {
              v89 = 0;
              v90 = -1;
              if (!v303 && v76 == 12 && (v54 & 0x100000) != 0 && v45 >= 3)
              {
                v90 = v421 + DWORD1(v421) - 1;
                v89 = 0;
                if (DWORD2(v421) != (_DWORD)v421)
                {
                  if (v90 == DWORD2(v421))
                  {
                    v90 = v421;
                  }
                  else if (v90 - DWORD2(v421) <= DWORD2(v421) - (int)v421)
                  {
                    v90 = v421;
                  }
                }
              }
            }
            v291 = v89;
            v315 = v60;
            if ((int)v60 >= 1)
            {
              v93 = 0;
              v366 = *v80;
              v360 = *MEMORY[0x1E0D07C20];
              v94 = *MEMORY[0x1E0D07B90];
              v313 = *MEMORY[0x1E0D07BB8];
              v333 = *MEMORY[0x1E0D07C18];
              v329 = *MEMORY[0x1E0D07BF0];
              v349 = (int)v60 + (int)v59;
              v325 = *MEMORY[0x1E0D07B80];
              v311 = v90 - v59;
              v344 = v59 - v61;
              v322 = *MEMORY[0x1E0D07BE0];
              v319 = (v340 >> 25) & 1;
              v306 = *MEMORY[0x1E0D07BA8];
              v305 = *MEMORY[0x1E0D07BC8];
              do
              {
                v95 = DWORD2(v421);
                v96 = v373 + v93;
                v97 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                objc_msgSend(v97, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v373 + v93), v366);
                objc_msgSend(v97, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v360);
                objc_msgSend(v97, "setObject:forKeyedSubscript:", v383, v94);
                if (v342)
                {
                  v98 = v311 == v93 || v317;
                  objc_msgSend(v97, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v98), v313);
                  objc_msgSend(v97, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370), v333);
                  objc_msgSend(v97, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v319), v329);
                  objc_msgSend(v97, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336), v325);
                  objc_msgSend(v97, "setObject:forKeyedSubscript:", v318, v322);
                  if ((_DWORD)v96 != v95)
                  {
                    v99 = 0;
                    goto LABEL_160;
                  }
                  if ((v340 & 0x10000000) != 0)
                  {
                    objc_msgSend(v97, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v306);
                    objc_msgSend(v97, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v305);
                  }
                  -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v372, v97, v338);
                }
                v99 = 0;
                if ((v340 & 0x100000) != 0 && (_DWORD)v96 == v95)
                {
                  v99 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  objc_msgSend(v99, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v421)), v366);
                  objc_msgSend(v99, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, v360);
                  objc_msgSend(v99, "setObject:forKeyedSubscript:", v383, v94);
                  if (v342)
                  {
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v306);
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v305);
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370), v333);
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v319), v329);
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336), v325);
                    objc_msgSend(v99, "setObject:forKeyedSubscript:", v304, v322);
                  }
                  -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v372, v99, v338);
                }
LABEL_160:
                v100 = objc_msgSend(v341, "count");
                if ((_DWORD)v96 == v95)
                  v101 = 0;
                else
                  v101 = v100;
                objc_msgSend(v341, "insertObject:atIndex:", v97, v101);
                if (v99)
                  objc_msgSend(v341, "insertObject:atIndex:", v99, v101 + 1);
                if (v344 + v93 >= v377 || v380 > v96)
                  v103 = v422;
                else
                  v103 = v423;
                if ((_DWORD)v96 == v95)
                  v104 = 18;
                else
                  v104 = 2;
                v105 = SHIDWORD(v421);
                if ((_DWORD)v96 == HIDWORD(v421))
                {
                  v106 = v423 | 4;
                  if (v99)
                    goto LABEL_178;
                }
                else
                {
                  objc_msgSend(*(id *)(v372 + 3248), "objectAtIndexedSubscript:", v59 + v93);
                  v106 = 0;
                  if (v99)
                  {
LABEL_178:
                    if (v373 > v105 || v105 - v59 >= v315)
                      objc_msgSend(obj, "addObject:", +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", v105, 0, v423 | 4));
                  }
                }
                v107 = +[BWStillImageCaptureTimeMachineFrameInfo infoWithTimeMachineIndex:mainFlags:sifrFlags:](BWStillImageCaptureTimeMachineFrameInfo, "infoWithTimeMachineIndex:mainFlags:sifrFlags:", v96, v103 | v104, v106);
                v108 = v107;
                if ((_DWORD)v96 == v95)
                  v109 = v356;
                else
                  v109 = 0;
                -[BWStillImageCaptureTimeMachineFrameInfo setIsNoLongErrorRecoveryFrame:](v107, "setIsNoLongErrorRecoveryFrame:", v109);
                objc_msgSend(obj, "addObject:", v108);
                ++v93;
                v55 = v339;
                v81 = 0x1E0CB3000uLL;
              }
              while ((uint64_t)(v59 + v93) < v349);
            }
            v110 = v340;
            if (v303 && ((v340 & 0x200000000) != 0 || *(_BYTE *)(v372 + 2058)))
            {
              objc_msgSend(v294, "setPreviewWhiteBalanceMetadataByPortType:", -[BWFigVideoCaptureDevice _ubWhiteBalanceMetadataByPortTypeFromMetadata:](v372, (void *)objc_msgSend(*(id *)(v372 + 3248), "objectAtIndexedSubscript:", SDWORD2(v421))));
              v110 = v340;
            }
            v111 = v297;
            if ((v110 & 0x200400000) == 0)
            {
              v75 = obj;
              if (v291)
                objc_msgSend(v341, "addObject:");
              v74 = 0;
              v348 = 0;
              goto LABEL_196;
            }
            v112 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v330 = v112;
            if (v303)
            {
              v123 = 1;
              v124 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
              v121 = *MEMORY[0x1E0D07B88];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v124, *MEMORY[0x1E0D07B88]);
              v114 = *MEMORY[0x1E0D07BB8];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07BB8]);
              v125 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
              v118 = *MEMORY[0x1E0D07B80];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v125, *MEMORY[0x1E0D07B80]);
              v119 = *MEMORY[0x1E0D07BE0];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v337, *MEMORY[0x1E0D07BE0]);
              if ((v340 & 0x200000000) != 0)
              {
                objc_msgSend(v112, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07B70]);
                v120 = *MEMORY[0x1E0D07B90];
LABEL_199:
                v126 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                objc_msgSend(v126, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07C20]);
                objc_msgSend(v126, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07E60]);
                objc_msgSend(v126, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, *MEMORY[0x1E0D07BD0]);
                v127 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v298);
                objc_msgSend(v126, "setObject:forKeyedSubscript:", v127, *MEMORY[0x1E0D07BE8]);
                objc_msgSend(v126, "setObject:forKeyedSubscript:", v383, v120);
                objc_msgSend(v126, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v121);
                if (objc_msgSend(v309, "hrEnabled")
                  && !objc_msgSend(v330, "objectForKeyedSubscript:", *MEMORY[0x1E0D07B70]))
                {
                  objc_msgSend(v126, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v114);
                }
                objc_msgSend(v364, "addObject:", v126);
                objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 1, v423 | 2, 0));
                v123 = 2;
                v111 = v297;
              }
            }
            else
            {
              v113 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 & 0x1000000) == 0);
              v114 = *MEMORY[0x1E0D07BB8];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v113, *MEMORY[0x1E0D07BB8]);
              v115 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v293);
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v115, *MEMORY[0x1E0D07C18]);
              v116 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v292);
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v116, *MEMORY[0x1E0D07BF0]);
              v117 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
              v118 = *MEMORY[0x1E0D07B80];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v117, *MEMORY[0x1E0D07B80]);
              v119 = *MEMORY[0x1E0D07BE0];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v337, *MEMORY[0x1E0D07BE0]);
              v120 = *MEMORY[0x1E0D07B90];
              objc_msgSend(v112, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
              objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v423 | 0x20, 0));
              if ((v340 & 0x200000000) != 0)
              {
                v121 = *MEMORY[0x1E0D07B88];
                goto LABEL_199;
              }
              v123 = 1;
            }
            if (v307)
            {
              v128 = v423;
              v129 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              objc_msgSend(v129, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07C20]);
              objc_msgSend(v129, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, *MEMORY[0x1E0D07E60]);
              objc_msgSend(v129, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, *MEMORY[0x1E0D07BD0]);
              objc_msgSend(v129, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
              if (v342)
              {
                v130 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370);
                objc_msgSend(v129, "setObject:forKeyedSubscript:", v130, *MEMORY[0x1E0D07C18]);
                v131 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 >> 25) & 1);
                objc_msgSend(v129, "setObject:forKeyedSubscript:", v131, *MEMORY[0x1E0D07BF0]);
                objc_msgSend(v129, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336), v118);
                objc_msgSend(v129, "setObject:forKeyedSubscript:", v296, v119);
              }
              if (v111)
              {
                objc_msgSend(v364, "addObject:", v129);
                objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v123, v128 | 8, 0));
                v348 = 0;
                v75 = obj;
LABEL_211:
                v122 = v300;
                v74 = v330;
                goto LABEL_212;
              }
            }
            v348 = 0;
LABEL_210:
            v75 = obj;
            goto LABEL_211;
          }
          v46 = a4;
LABEL_82:
          if ((v44 & 0x10000000000) != 0)
            goto LABEL_349;
          if (*(_BYTE *)(v17 + 1472) && !v31)
            goto LABEL_349;
          goto LABEL_87;
        }
        v46 = a4;
LABEL_67:
        if ((v298 & 0x80000000) != 0)
          goto LABEL_87;
LABEL_349:
        objc_msgSend(v341, "removeAllObjects");
        objc_msgSend(v364, "removeAllObjects");
        v213 = v340;
        v214 = v340;
        if (v303)
        {
          v215 = -[BWFigVideoCaptureDevice _ubAWBReflowEnabledForCaptureType:primaryPortType:frameStatisticsByPortType:previewMetadata:](v17, a4, objc_msgSend(v339, "portType"), a7, 0);
          v213 = v340;
          v214 = v340 | 0x8000000000;
          if (!v215)
            v214 = v340;
        }
        v338 = v214;
        v216 = v45 > 1;
        v75 = obj;
        v327 = v45;
        if (a4 == 12 && (v213 & 0x100000000) != 0 && v45 >= 2)
        {
          if (*(_BYTE *)(v17 + 2058))
          {
            v217 = 1;
            v376 = 1;
            goto LABEL_365;
          }
        }
        else if (a4 != 12)
        {
          v218 = 1;
LABEL_360:
          v376 = 0;
          if (v218 <= 1)
            v217 = 1;
          else
            v217 = v218;
          if (v217 >= v45)
            v217 = v45;
LABEL_365:
          v348 = v217;
          v219 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          if (v303)
          {
            v226 = (v338 & 0x800) == 0 || *(_QWORD *)(v17 + 1464) == 0;
            v348 -= v226;
            v227 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v226);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v227, *MEMORY[0x1E0D07B88]);
            v335 = *MEMORY[0x1E0D07BB8];
            objc_msgSend(v219, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0]);
            if ((_DWORD)v226)
            {
              v228 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
              objc_msgSend(v219, "setObject:forKeyedSubscript:", v228, *MEMORY[0x1E0D07B80]);
              objc_msgSend(v219, "setObject:forKeyedSubscript:", v337, *MEMORY[0x1E0D07BE0]);
              v229 = 0;
              goto LABEL_377;
            }
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
            v224 = v422;
          }
          else
          {
            v220 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 & 0x1000000) == 0);
            v335 = *MEMORY[0x1E0D07BB8];
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v220);
            v221 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v293);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v221, *MEMORY[0x1E0D07C18]);
            v222 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v292);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v222, *MEMORY[0x1E0D07BF0]);
            v223 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v223, *MEMORY[0x1E0D07B80]);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v337, *MEMORY[0x1E0D07BE0]);
            objc_msgSend(v219, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
            v224 = v423 | 0x20;
          }
          objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v224, 0));
          v229 = 1;
LABEL_377:
          v330 = v219;
          -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v17, v219, v338);
          if (v327 < 1)
          {
            v237 = 1;
            goto LABEL_462;
          }
          v230 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          v346 = *MEMORY[0x1E0D07C20];
          objc_msgSend(v230, "setObject:forKeyedSubscript:", &unk_1E49FB7C0);
          v358 = *MEMORY[0x1E0D07E60];
          objc_msgSend(v230, "setObject:forKeyedSubscript:", &unk_1E49FB7C0);
          v231 = *MEMORY[0x1E0D07BD0];
          objc_msgSend(v230, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, *MEMORY[0x1E0D07BD0]);
          v232 = *MEMORY[0x1E0D07B90];
          v379 = v230;
          objc_msgSend(v230, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
          v362 = v216;
          if ((v340 & 0x100000000) != 0)
          {
            v233 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v298);
            v234 = v230;
            objc_msgSend(v230, "setObject:forKeyedSubscript:", v233, *MEMORY[0x1E0D07BE8]);
            v235 = v338;
            if ((v340 & 0x80) == 0)
              goto LABEL_393;
            v236 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend(v29, "learnedNRUltraHighResolutionExposureBias");
            objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(v236, "numberWithFloat:"), v231);
            if ((objc_msgSend(v309, "hrEnabled") & 1) == 0)
              goto LABEL_393;
          }
          else if ((v340 & 0x80) != 0 && *(_BYTE *)(v17 + 1472))
          {
            v234 = v230;
            objc_msgSend(v230, "setObject:forKeyedSubscript:", &unk_1E4A02F70, v231);
            v235 = v338;
            if ((objc_msgSend(v309, "hrEnabled") & 1) == 0)
              goto LABEL_393;
          }
          else
          {
            if (v342)
            {
              v238 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370);
              objc_msgSend(v230, "setObject:forKeyedSubscript:", v238, *MEMORY[0x1E0D07C18]);
              v239 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 >> 25) & 1);
              objc_msgSend(v230, "setObject:forKeyedSubscript:", v239, *MEMORY[0x1E0D07BF0]);
              v240 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
              objc_msgSend(v230, "setObject:forKeyedSubscript:", v240, *MEMORY[0x1E0D07B80]);
              objc_msgSend(v230, "setObject:forKeyedSubscript:", v318, *MEMORY[0x1E0D07BE0]);
            }
            v235 = v338;
            v234 = v379;
            if (!v317 || !objc_msgSend(v309, "hrEnabled"))
            {
LABEL_393:
              v367 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v234);
              -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v17, v367, v235);
              if (v342)
              {
                if ((v340 & 0x12100000) == 0x2000000)
                {
                  v243 = -[BWFigVideoCaptureDevice _ubGenerateLTMCurveForCaptureStream:frameStatistics:](v17, v339, (void *)objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(v339, "portType")));
                  if ((v235 & 0x800) == 0 || !*(_BYTE *)(v17 + 3203) || objc_msgSend(a11, "count"))
                  {
                    v417 = 0u;
                    v418 = 0u;
                    v415 = 0u;
                    v416 = 0u;
                    v244 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v415, v442, 16);
                    if (v244)
                    {
                      v245 = v244;
                      v246 = *(_QWORD *)v416;
                      do
                      {
                        for (ii = 0; ii != v245; ++ii)
                        {
                          if (*(_QWORD *)v416 != v246)
                            objc_enumerationMutation(v343);
                          v243 = v243
                              || -[BWFigVideoCaptureDevice _ubGenerateLTMCurveForCaptureStream:frameStatistics:](v17, *(void **)(*((_QWORD *)&v415 + 1) + 8 * ii), (void *)objc_msgSend(a7, "objectForKeyedSubscript:", objc_msgSend(*(id *)(*((_QWORD *)&v415 + 1) + 8 * ii), "portType")));
                        }
                        v245 = objc_msgSend(v343, "countByEnumeratingWithState:objects:count:", &v415, v442, 16);
                      }
                      while (v245);
                    }
                  }
                  if (!v243)
                  {
                    v287 = !*(_BYTE *)(v17 + 1472) || *(float *)(v17 + 4040) != 0.0;
                    if (!*(_QWORD *)(v17 + 552))
                      goto LABEL_484;
                    if (!*(_BYTE *)(v17 + 608))
                      v287 = 0;
                    if (!v40
                      || !v287
                      || (objc_msgSend((id)objc_msgSend(v339, "portType"), "isEqual:", objc_msgSend(*(id *)(v17 + 504), "portType")) & 1) != 0)
                    {
LABEL_484:
                      v248 = v340;
                      v235 = v338;
LABEL_413:
                      v338 = v235;
                      if ((v248 & 0x100000) == 0)
                      {
                        v254 = 0;
                        v382 = 0;
                        v255 = a4;
                        v256 = v303;
                        v257 = v327;
                        v258 = v376;
LABEL_428:
                        v265 = v255 == 12 && v254;
                        if (v256)
                          v265 = 0;
                        v363 = v265;
                        if ((int)(v348 - 1) > (int)(v257 - v348))
                          v266 = 1;
                        else
                          v266 = v257;
                        v359 = v266;
                        v267 = v257 + v229;
                        if (v229)
                          v268 = 3;
                        else
                          v268 = 2;
                        v237 = 1;
                        do
                        {
                          v269 = 50;
                          if (v348 != v229)
                            v269 = 2;
                          if ((v258 & (v229 < v268)) != 0)
                            v270 = 258;
                          else
                            v270 = v269;
                          v271 = v270 | v423;
                          if (v348 == v229)
                          {
                            objc_msgSend(v364, "addObject:", v367);
                            if (v382)
                            {
                              v272 = v423 | 4;
                              objc_msgSend(v364, "addObject:", v382);
                              v273 = (v237 + 1);
                              if (objc_msgSend((id)objc_msgSend(v382, "objectForKeyedSubscript:", v346), "intValue") == 1)
                              {
                                v274 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v271, v272);
                                v237 = (v237 + 1);
                              }
                              else
                              {
                                objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v271, 0));
                                v237 = (v237 + 2);
                                v274 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v273, v272, 0);
                              }
                            }
                            else
                            {
                              v274 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v271, 0);
                              v237 = (v237 + 1);
                            }
                            v258 = v376;
                          }
                          else
                          {
                            v275 = v359 == v229 && v363;
                            v276 = v379;
                            if (v275)
                            {
                              v276 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v379);
                              objc_msgSend(v276, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v335);
                            }
                            objc_msgSend(v364, "addObject:", v276);
                            v274 = +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v271, 0);
                            v237 = (v237 + 1);
                          }
                          objc_msgSend(obj, "addObject:", v274);
                          ++v229;
                        }
                        while (v229 < v267);
                        v277 = v348;
                        if (v258)
                          v277 = -1;
                        v348 = v277;
                        v75 = obj;
LABEL_462:
                        v55 = v339;
                        v81 = 0x1E0CB3000uLL;
                        if ((v340 & 0x200000000) != 0)
                        {
                          v278 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                          objc_msgSend(v278, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07C20]);
                          objc_msgSend(v278, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07E60]);
                          objc_msgSend(v278, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, *MEMORY[0x1E0D07BD0]);
                          v279 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v298);
                          objc_msgSend(v278, "setObject:forKeyedSubscript:", v279, *MEMORY[0x1E0D07BE8]);
                          objc_msgSend(v278, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
                          if (objc_msgSend(v309, "hrEnabled"))
                            objc_msgSend(v278, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v335);
                          objc_msgSend(v364, "addObject:", v278);
                          objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v423 | 2, 0));
                          v237 = (v237 + 1);
                          v75 = obj;
                        }
                        if (!v307)
                          goto LABEL_211;
                        v280 = v423;
                        v281 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                        objc_msgSend(v281, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07C20]);
                        objc_msgSend(v281, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, *MEMORY[0x1E0D07E60]);
                        objc_msgSend(v281, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, *MEMORY[0x1E0D07BD0]);
                        objc_msgSend(v281, "setObject:forKeyedSubscript:", v383, *MEMORY[0x1E0D07B90]);
                        if ((v340 & 0x100000000) != 0)
                        {
                          v282 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v298);
                          v283 = (_QWORD *)MEMORY[0x1E0D07BE8];
                        }
                        else
                        {
                          if (!v342)
                          {
LABEL_472:
                            if ((_DWORD)v297)
                            {
                              objc_msgSend(v364, "addObject:", v281);
                              objc_msgSend(obj, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v237, v280 | 8, 0));
                              v55 = v339;
                              v75 = obj;
                              v81 = 0x1E0CB3000;
                              goto LABEL_211;
                            }
                            v55 = v339;
                            goto LABEL_210;
                          }
                          v284 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370);
                          objc_msgSend(v281, "setObject:forKeyedSubscript:", v284, *MEMORY[0x1E0D07C18]);
                          v285 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 >> 25) & 1);
                          objc_msgSend(v281, "setObject:forKeyedSubscript:", v285, *MEMORY[0x1E0D07BF0]);
                          v286 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
                          objc_msgSend(v281, "setObject:forKeyedSubscript:", v286, *MEMORY[0x1E0D07B80]);
                          v283 = (_QWORD *)MEMORY[0x1E0D07BE0];
                          v282 = v296;
                        }
                        objc_msgSend(v281, "setObject:forKeyedSubscript:", v282, *v283);
                        goto LABEL_472;
                      }
                      v249 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                      v250 = *(_QWORD *)(v17 + 1464);
                      objc_msgSend(v249, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v358);
                      v382 = v249;
                      objc_msgSend(v249, "setObject:forKeyedSubscript:", v383, v232);
                      if (*(_BYTE *)(v17 + 1999) && ((~(_DWORD)v235 & 0x1800) != 0 || !v250))
                      {
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", &unk_1E49FB7D8, v346);
                        LODWORD(v259) = *MEMORY[0x1E0D07B60];
                        v251 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v259);
                        v253 = *MEMORY[0x1E0D07BF8];
                        v252 = v249;
                      }
                      else
                      {
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v346);
                        v251 = &unk_1E49FB808;
                        v252 = v249;
                        v253 = v231;
                      }
                      objc_msgSend(v252, "setObject:forKeyedSubscript:", v251, v253);
                      if ((v340 & 0x100000000) != 0)
                      {
                        v260 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v298);
                        v261 = (_QWORD *)MEMORY[0x1E0D07BE8];
                      }
                      else
                      {
                        if (!v342)
                        {
LABEL_425:
                          if ((v235 & 0x1000) != 0)
                            -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v17, v249, v235);
                          v255 = a4;
                          v256 = v303;
                          v257 = v327;
                          v258 = v376;
                          v254 = v362;
                          goto LABEL_428;
                        }
                        v262 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v370);
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", v262, *MEMORY[0x1E0D07C18]);
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07BA8]);
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07BC8]);
                        v263 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v340 >> 25) & 1);
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", v263, *MEMORY[0x1E0D07BF0]);
                        v264 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v336);
                        objc_msgSend(v249, "setObject:forKeyedSubscript:", v264, *MEMORY[0x1E0D07B80]);
                        v261 = (_QWORD *)MEMORY[0x1E0D07BE0];
                        v260 = v304;
                      }
                      objc_msgSend(v249, "setObject:forKeyedSubscript:", v260, *v261);
                      goto LABEL_425;
                    }
                  }
                  v235 = v338 | 0x10000000;
                }
                else
                {
                  v248 = v340;
                  if ((v340 & 0x10000000) == 0)
                    goto LABEL_413;
                }
                objc_msgSend(v367, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07BA8]);
                objc_msgSend(v367, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, *MEMORY[0x1E0D07BC8]);
              }
              v248 = v340;
              goto LABEL_413;
            }
            LODWORD(v241) = *MEMORY[0x1E0D07B60];
            v242 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v241);
            objc_msgSend(v379, "setObject:forKeyedSubscript:", v242, *MEMORY[0x1E0D07BF8]);
          }
          objc_msgSend(v234, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v335);
          goto LABEL_393;
        }
        v218 = objc_msgSend(v29, "deepFusionBracketedCaptureReferenceFrameIndex");
        goto LABEL_360;
      }
      if (objc_msgSend(a11, "count"))
      {
        v27 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v17, a11);
        v300 = objc_msgSend(v27, "containsObject:", v18) ^ 1;
        v343 = v27;
        objc_msgSend(v27, "removeObject:", v18);
        v301 = 0;
        goto LABEL_27;
      }
    }
    v300 = 0;
    v301 = 0;
    v343 = 0;
    goto LABEL_27;
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubAdaptiveStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(unint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:
{
  uint64_t v6;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  BWStillImageCaptureStreamSettings *v34;
  BWStillImageCaptureSettings *v35;
  BWStillImageCaptureSettings *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v12 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      v39 = v6;
      LODWORD(v37) = 0;
      FigDebugAssert3();
    }
    if (a3 != 11)
    {
      v36 = 0;
      return v36;
    }
    v40 = a2;
    v13 = *(void **)(v12 + 1296);
    if (!v13)
      v13 = *(void **)(v12 + 504);
    v14 = a6;
    v15 = (void *)objc_msgSend(a6, "objectForKeyedSubscript:", objc_msgSend(v13, "portType", v37, v39));
    if ((a4 & 0x8000000) != 0)
      v16 = 2;
    else
      v16 = 1;
    v17 = objc_msgSend(v13, "hasSphere");
    v41 = a5;
    v18 = (a5 >> 13) & 1;
    v19 = a4 | 0x2000000000;
    if (((a4 >> 35) & v18) == 0)
      v19 = a4;
    if (v17)
      v20 = (a4 >> 35) & v18;
    else
      v20 = 0;
    if (v17)
      a4 = v19;
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 1956));
    v21 = (void *)objc_msgSend(*(id *)(v12 + 2256), "objectForKeyedSubscript:", objc_msgSend(v13, "portType"));
    if (v21)
    {
      v22 = (void *)objc_msgSend(v21, "adaptiveBracketingParametersForDigitalFlashMode:sphereOffsetEnabled:", v16, v20 & 1);
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 1956));
      if (v22)
      {
LABEL_28:
        objc_msgSend(v13, "pixelSize");
        v31 = v30;
        if ((int)objc_msgSend(v13, "activeQuadraBinningFactor") < 1)
          v32 = 1.0;
        else
          v32 = (float)(int)objc_msgSend(v13, "activeQuadraBinningFactor");
        if ((v20 & 1) != 0)
          v33 = -[BWFigVideoCaptureDevice _ubSphereOffsetsForAdaptiveBracketingParameters:pixelSize:](v12, v22, v31 * v32);
        else
          v33 = 0;
        v34 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:adaptiveBracketingParameters:sphereOffsets:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:adaptiveBracketingParameters:sphereOffsets:", objc_msgSend(v13, "portType"), 11, a4, v22, v33);
        -[BWStillImageCaptureStreamSettings setSensorIDString:](v34, "setSensorIDString:", objc_msgSend(v13, "sensorIDString"));
        v35 = [BWStillImageCaptureSettings alloc];
        v43[0] = v34;
        LOBYTE(v38) = 0;
        v36 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:](v35, "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v40, 11, a4, v41, v14, 0, v38, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v43, 1));
        -[BWStillImageCaptureSettings setMasterPortType:](v36, "setMasterPortType:", objc_msgSend(v13, "portType"));
        -[BWFigVideoCaptureDevice _ubUpdateCurrentAdaptiveBracketedCaptureParamsForCaptureStreamSettings:frameStatistics:](v12, v34, v15);

        return v36;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 1956));
    }
    if (objc_msgSend(*(id *)(v12 + 2160), "count"))
    {
      v23 = (void *)objc_msgSend(v13, "objectDetector");
      if (v15)
        objc_msgSend(v15, "pts");
      else
        memset(v42, 0, sizeof(v42));
      v25 = (void *)objc_msgSend(v23, "objectsForPTS:", v42);
      objc_msgSend(v15, "finalCropRect");
      v24 = -[BWFigVideoCaptureDevice _ubDetectedObjectsForDigitalFlashFromDetectedObjects:finalCropRect:](v12, v25, v26, v27, v28, v29);
    }
    else
    {
      v24 = 0;
    }
    v22 = (void *)objc_msgSend(*(id *)(v12 + 2184), "adaptiveBracketingParametersForDigitalFlashMode:frameStatistics:stationary:sphereOffsetEnabled:detectedObjects:", v16, v15, v18, v20 & 1, v24);
    goto LABEL_28;
  }
  return result;
}

- (id)_ubClientBracketStillImageCaptureSettings:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(void *)a6 frameStatisticsByPortType:
{
  uint64_t v6;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  id v16;
  id v17;
  int v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  void *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  BWStillImageCaptureStreamSettings *v52;
  char v53;
  uint64_t v54;
  BWStillImageCaptureSettings *v55;
  uint64_t v56;
  BWStillImageCaptureSettings *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  id obj;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  void *v69;
  char v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  unsigned int v99;
  void *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  unint64_t v113;
  uint64_t v114;
  _BYTE v115[128];
  _BYTE v116[128];
  _BYTE v117[128];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v10 = (uint64_t)result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      v60 = v6;
      LODWORD(v58) = 0;
      FigDebugAssert3();
    }
    if (a3 != 7)
    {
      v16 = 0;
      return v16;
    }
    v11 = *(void **)(v10 + 1296);
    if (!v11)
      v11 = *(void **)(v10 + 504);
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array", v58, v60);
    obj = v12;
    if (*(_QWORD *)(v10 + 552))
    {
      if ((a4 & 0x800) != 0)
      {
        objc_msgSend(v12, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:](v10, v11));
        goto LABEL_15;
      }
      if (objc_msgSend(a2, "constituentPhotoDeliveryEnabled"))
      {
        objc_msgSend(obj, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:](v10, (void *)objc_msgSend(a2, "bravoConstituentImageDeliveryDeviceTypes")));
        if ((objc_msgSend(obj, "containsObject:", v11) & 1) == 0)
        {
          objc_msgSend(obj, "addObject:", v11);
          objc_msgSend(v11, "portType");
          v13 = (void *)objc_msgSend(obj, "firstObject");
          v70 = 1;
          goto LABEL_16;
        }
LABEL_15:
        v70 = 0;
        v13 = v11;
LABEL_16:
        v14 = objc_msgSend(v13, "portType");
        v15 = objc_msgSend(a2, "bracketType");
        v16 = 0;
        if (v15)
        {
          if (v15 == 1)
          {
            v18 = FigCapturePlatformIdentifier();
            v19 = v14;
            if (v18 <= 8)
              v19 = objc_msgSend(*(id *)(v10 + 504), "portType", v14);
            v16 = -[BWFigVideoCaptureDevice _manualExposureBracketParametersForSettings:frameStatistics:use8dot8FixedPointGain:]((id)v10, a2, (void *)objc_msgSend(a6, "objectForKeyedSubscript:", v19), 0);
            v17 = 0;
          }
          else
          {
            v17 = 0;
            if (v15 == 2)
            {
              v17 = -[BWFigVideoCaptureDevice _autoExposureBracketValuesForSettings:frameStatistics:]((id)v10, a2, (void *)objc_msgSend(a6, "objectForKeyedSubscript:", v14));
              v16 = 0;
            }
          }
          v76 = v16;
          v114 = 0;
          v113 = 0;
          v20 = (void *)-[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:](v10, a4, 7, &v114, &v113);
          v97 = v20;
          if (v20)
            v21 = (objc_msgSend(v20, "intValue") >> 1) & 1;
          else
            v21 = 1;
          v99 = v21;
          v61 = v14;
          v71 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v109 = 0u;
          v110 = 0u;
          v111 = 0u;
          v112 = 0u;
          v72 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v117, 16);
          if (v72)
          {
            v66 = *(_QWORD *)v110;
            if ((a4 & 0x40000000) != 0)
              v22 = 3;
            else
              v22 = 0;
            v63 = *MEMORY[0x1E0D07410];
            v68 = a4 & 0xFFFFFFFFFFFF7FFFLL;
            v96 = *MEMORY[0x1E0D07C20];
            v95 = *MEMORY[0x1E0D07E60];
            v92 = *MEMORY[0x1E0D07BD0];
            v94 = *MEMORY[0x1E0D07B90];
            v98 = *MEMORY[0x1E0D07BB8];
            v88 = *MEMORY[0x1E0D07BA8];
            v87 = *MEMORY[0x1E0D07C18];
            v86 = *MEMORY[0x1E0D07BF0];
            v85 = *MEMORY[0x1E0D07BE0];
            v84 = *MEMORY[0x1E0D07B80];
            if ((a4 & 0x20000000) != 0)
              v22 = 2;
            if ((a4 & 0x800000) != 0)
              v22 = 1;
            v89 = v22;
            v83 = *MEMORY[0x1E0D071B8];
            v82 = *MEMORY[0x1E0D07BC0];
            v81 = *MEMORY[0x1E0D071A0];
            v79 = v17;
            v80 = *MEMORY[0x1E0D07BA0];
            v93 = a4;
            v69 = a2;
            v67 = v11;
            do
            {
              v23 = 0;
              do
              {
                if (*(_QWORD *)v110 != v66)
                  objc_enumerationMutation(obj);
                v24 = *(void **)(*((_QWORD *)&v109 + 1) + 8 * v23);
                if ((a4 & 0x8000) != 0)
                {
                  v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v109 + 1) + 8 * v23), "stream"), "getPropertyIfSupported:error:", v63, 0), "BOOLValue");
                  if (v25)
                    v26 = a4;
                  else
                    v26 = v68;
                }
                else
                {
                  v25 = 0;
                  v26 = v68;
                }
                if ((v26 & 0x100000010) == 0x10 && objc_msgSend(v24, "activeQuadraBinningFactor") != 1)
                  v26 &= ~0x10uLL;
                v75 = v23;
                v73 = v26;
                if (v24 == *(void **)(v10 + 1464))
                {
                  v91 = 0;
                }
                else
                {
                  objc_msgSend((id)objc_msgSend(a6, "objectForKeyedSubscript:", objc_msgSend(v24, "portType")), "gain");
                  v91 = objc_msgSend(v24, "noiseReductionAndSharpeningConfigurationForType:gain:qSub:", 1, (v26 >> 4) & 1);
                }
                v27 = v10;
                v100 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v28 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v74 = v24;
                v29 = &v114;
                if ((v70 & (v24 == v11)) != 0)
                  v29 = (uint64_t *)&v113;
                v30 = *v29;
                v90 = (a4 >> 25) & 1;
                if (v17)
                {
                  v107 = 0uLL;
                  v108 = 0uLL;
                  v105 = 0uLL;
                  v106 = 0uLL;
                  v31 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v105, v116, 16);
                  if (v31)
                  {
                    v32 = v31;
                    v33 = v30 | 0x80;
                    v34 = *(_QWORD *)v106;
                    v35 = MEMORY[0x1E0C9AAB0];
                    if (!v25)
                      v35 = 0;
                    v77 = v35;
                    v36 = 1;
                    do
                    {
                      for (i = 0; i != v32; ++i)
                      {
                        if (*(_QWORD *)v106 != v34)
                          objc_enumerationMutation(v79);
                        v38 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * i);
                        v39 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                        objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v96);
                        objc_msgSend(v39, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v95);
                        objc_msgSend(v39, "setObject:forKeyedSubscript:", v38, v92);
                        objc_msgSend(v39, "setObject:forKeyedSubscript:", v97, v94);
                        objc_msgSend(v39, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v98);
                        if (v99)
                        {
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v88);
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v89), v87);
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v90), v86);
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", v91, v85);
                          objc_msgSend(v39, "setObject:forKeyedSubscript:", v77, v84);
                        }
                        -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v39, v93);
                        objc_msgSend(v100, "addObject:", v39);
                        objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v36 + i, v33, 0));
                      }
                      v32 = objc_msgSend(v79, "countByEnumeratingWithState:objects:count:", &v105, v116, 16);
                      v36 = (v36 + i);
                    }
                    while (v32);
                  }
                }
                else
                {
                  v103 = 0uLL;
                  v104 = 0uLL;
                  v101 = 0uLL;
                  v102 = 0uLL;
                  v40 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v101, v115, 16);
                  if (v40)
                  {
                    v41 = v40;
                    v42 = v30 | 0x40;
                    v43 = *(_QWORD *)v102;
                    v44 = MEMORY[0x1E0C9AAB0];
                    if (!v25)
                      v44 = 0;
                    v78 = v44;
                    v45 = 1;
                    do
                    {
                      for (j = 0; j != v41; ++j)
                      {
                        if (*(_QWORD *)v102 != v43)
                          objc_enumerationMutation(v76);
                        v47 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * j);
                        v48 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v96);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", &unk_1E49FB7A8, v95);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(v47, "objectForKeyedSubscript:", v83), v82);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(v47, "objectForKeyedSubscript:", v81), v80);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", v97, v94);
                        objc_msgSend(v48, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v98);
                        if (v99)
                        {
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v88);
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v89), v87);
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v90), v86);
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", v91, v85);
                          objc_msgSend(v48, "setObject:forKeyedSubscript:", v78, v84);
                        }
                        -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v48, v93);
                        objc_msgSend(v100, "addObject:", v48);
                        objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v45 + j, v42, 0));
                      }
                      v41 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v101, v115, 16);
                      v45 = (v45 + j);
                    }
                    while (v41);
                  }
                }
                v49 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                v10 = v27;
                a4 = v93;
                -[BWFigVideoCaptureDevice _ubAddFrameParametersForDepthIfNeeded:captureFlags:](v27, v49, v93);
                if ((int)FigCapturePlatformIdentifier() > 6)
                {
                  a2 = v69;
                  v51 = v74;
                  v50 = v75;
                  if (v99)
                    objc_msgSend(v49, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v98);
LABEL_79:
                  objc_msgSend(v28, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 0, v113, 0));
                  goto LABEL_80;
                }
                a2 = v69;
                v51 = v74;
                v50 = v75;
                if (objc_msgSend(v49, "count"))
                  goto LABEL_79;
                v53 = objc_msgSend(v69, "constituentPhotoDeliveryEnabled");
                if (v89 || (v53 & 1) != 0)
                  goto LABEL_79;
                v49 = 0;
LABEL_80:
                v52 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", objc_msgSend(v51, "portType"), 7, v73, 0xFFFFFFFFLL, 0, v49, v100, v28);
                -[BWStillImageCaptureStreamSettings setLensStabilizationEnabledForClientBracket:](v52, "setLensStabilizationEnabledForClientBracket:", objc_msgSend(a2, "lensStabilizationDuringBracketEnabled"));
                objc_msgSend(v71, "addObject:", v52);

                v23 = v50 + 1;
                v11 = v67;
                v17 = v79;
              }
              while (v23 != v72);
              v54 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v109, v117, 16);
              v72 = v54;
            }
            while (v54);
          }
          v55 = [BWStillImageCaptureSettings alloc];
          v56 = objc_msgSend(a2, "settingsID");
          LOBYTE(v59) = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a2, "rawOutputFormat"));
          v57 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:](v55, "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v56, 7, a4, a5, a6, 0, v59, v71);
          -[BWStillImageCaptureSettings setMasterPortType:](v57, "setMasterPortType:", v61);
          v16 = v57;
        }
        return v16;
      }
      v12 = obj;
    }
    objc_msgSend(v12, "addObject:", v11);
    goto LABEL_15;
  }
  return result;
}

- (BWStillImageCaptureSettings)_ubFlashStillImageCaptureSettingsWithID:(int)a3 captureType:(unint64_t)a4 captureFlags:(uint64_t)a5 sceneFlags:(uint64_t)a6 frameStatisticsByPortType:(char)a7 deliverSushiRaw:(void *)a8 bravoConstituentImageDeliveryDeviceTypes:
{
  uint64_t v8;
  BWStillImageCaptureSettings *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void **p_vtable;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  BWStillImageCaptureStreamSettings *v44;
  BWStillImageCaptureSettings *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id obj;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BWStillImageCaptureSettings *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *settingsID;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v15 = result;
    if (!_FigIsNotCurrentDispatchQueue())
    {
      v48 = v8;
      LODWORD(v46) = 0;
      FigDebugAssert3();
    }
    if (a3 != 2)
      goto LABEL_50;
    settingsID = (void *)v15[7]._settingsID;
    if (!settingsID)
      settingsID = (void *)v15[2]._stillImageRequestTime;
    v16 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array", v46, v48);
    if (v15[3].super.isa)
    {
      if ((a4 & 0x800) != 0)
      {
        objc_msgSend(v16, "addObjectsFromArray:", -[BWFigVideoCaptureDevice _captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:]((uint64_t)v15, settingsID));
        goto LABEL_15;
      }
      if (objc_msgSend(a8, "count"))
      {
        v17 = -[BWFigVideoCaptureDevice _captureStreamsForBravoConstituentImageDeliveryDeviceTypes:]((uint64_t)v15, a8);
        objc_msgSend(v16, "addObjectsFromArray:", v17);
        if ((objc_msgSend(v17, "containsObject:", settingsID) & 1) == 0)
        {
          objc_msgSend(v16, "addObject:", settingsID);
          v63 = 1;
          if ((a4 & 8) != 0)
            goto LABEL_18;
LABEL_16:
          if (objc_msgSend(v16, "count") == 1 || *(_QWORD *)&v15[7]._cmioMaxPhotoDimensions.height)
            goto LABEL_18;
LABEL_50:
          v45 = 0;
          return v45;
        }
LABEL_15:
        v63 = 0;
        if ((a4 & 8) != 0)
        {
LABEL_18:
          v51 = a6;
          v52 = a8;
          v49 = a2;
          v50 = a7;
          v77 = 0;
          v78 = 0;
          v61 = -[BWFigVideoCaptureDevice _ubEnabledOutputsForCaptureFlags:captureType:baseCaptureFrameFlagsOut:discardCaptureFrameFlagsOut:]((uint64_t)v15, a4, 2, &v78, &v77);
          v62 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v73 = 0u;
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          obj = v16;
          v18 = settingsID;
          v65 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
          if (v65)
          {
            v58 = *(_QWORD *)v74;
            v53 = *MEMORY[0x1E0D07410];
            v67 = a4 & 0xFFFFFFFFFFFF7FFFLL;
            v57 = *MEMORY[0x1E0D07C20];
            v19 = *MEMORY[0x1E0D07E60];
            v20 = *MEMORY[0x1E0D07BD0];
            v59 = v15;
            v60 = a4;
            v66 = *MEMORY[0x1E0D07B90];
            v55 = *MEMORY[0x1E0D07BD0];
            v56 = *MEMORY[0x1E0D07E60];
            do
            {
              v21 = 0;
              do
              {
                if (*(_QWORD *)v74 != v58)
                  objc_enumerationMutation(obj);
                v22 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * v21);
                v23 = (void *)v61;
                if (v22 == *(void **)&v15[7]._cmioMaxPhotoDimensions.height)
                  v23 = &unk_1E49FB7D8;
                v69 = v23;
                v24 = &v78;
                if ((v63 & (v22 == v18)) != 0)
                  v24 = (uint64_t *)&v77;
                v70 = *v24;
                v25 = v67;
                if ((a4 & 0x8000) != 0)
                {
                  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v22, "stream"), "getPropertyIfSupported:error:", v53, 0), "BOOLValue"))v25 = a4;
                  else
                    v25 = v67;
                }
                if ((a5 & 0x10000000) != 0)
                {
                  v27 = v25;
                  v28 = *(void **)&v15[10]._cmioQualityPrioritization;
                  v29 = objc_msgSend(v18, "portType");
                  v30 = v28;
                  v25 = v27;
                  v26 = objc_msgSend((id)objc_msgSend(v30, "objectForKeyedSubscript:", v29), "macroFlashQSubSwitchingEnabled");
                }
                else
                {
                  v26 = 0;
                }
                if ((v25 & 0x100000010) == 0x10
                  && (v26 & 1) == 0
                  && objc_msgSend(v22, "activeQuadraBinningFactor") != 1)
                {
                  v25 &= ~0x10uLL;
                }
                v71 = v25;
                v31 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v32 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v72 = v22;
                if ((a4 & 8) != 0)
                {
                  v40 = (void *)v32;
                  v41 = v19;
                  if (v22 != settingsID)
                    objc_msgSend(v52, "count");
                  v35 = 0x1E0C99000uLL;
                  v42 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                  v34 = v57;
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v57);
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", &unk_1E49FB898, v41);
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, v20);
                  v39 = v69;
                  objc_msgSend(v42, "setObject:forKeyedSubscript:", v69, v66);
                  objc_msgSend(v31, "addObject:", v42);
                  p_vtable = BWVisionInferenceStorage.vtable;
                  v37 = v31;
                  v38 = v70;
                  objc_msgSend(v40, "addObject:", +[BWStillImageCaptureBracketFrameInfo infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:](BWStillImageCaptureBracketFrameInfo, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", 1, v70, 0));
                  v33 = 2;
                }
                else
                {
                  v33 = 1;
                  v34 = v57;
                  v35 = 0x1E0C99000;
                  p_vtable = (void **)(BWVisionInferenceStorage + 24);
                  v37 = v31;
                  v39 = v69;
                  v38 = v70;
                  v40 = (void *)v32;
                }
                v43 = (void *)objc_msgSend(*(id *)(v35 + 3592), "dictionary");
                objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7C0, v34);
                objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB8B0, v56);
                v20 = v55;
                objc_msgSend(v43, "setObject:forKeyedSubscript:", &unk_1E49FB7F0, v55);
                objc_msgSend(v43, "setObject:forKeyedSubscript:", v39, v66);
                objc_msgSend(v37, "addObject:", v43);
                objc_msgSend(v40, "addObject:", objc_msgSend(p_vtable + 77, "infoWithBracketedCaptureSequenceNumber:mainFlags:sifrFlags:", v33, v38, 0));
                v44 = -[BWStillImageCaptureStreamSettings initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:]([BWStillImageCaptureStreamSettings alloc], "initWithPortType:captureType:captureFlags:referenceFrameIndex:timeMachineBracketedCaptureParams:preBracketFrameCaptureParams:unifiedBracketedCaptureParams:frameInfos:", objc_msgSend(v72, "portType"), 2, v71, 0xFFFFFFFFLL, 0, 0, v37, v40);
                objc_msgSend(v62, "addObject:", v44);

                ++v21;
                v15 = v59;
                a4 = v60;
                v18 = settingsID;
                v19 = v56;
              }
              while (v65 != v21);
              v65 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v73, v79, 16);
            }
            while (v65);
          }
          LOBYTE(v47) = v50;
          v45 = -[BWStillImageCaptureSettings initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:]([BWStillImageCaptureSettings alloc], "initWithSettingsID:captureType:captureFlags:sceneFlags:frameStatisticsByPortType:deliverOriginalImage:deliverSushiRaw:captureStreamSettings:", v49, 2, a4, a5, v51, 0, v47, v62);
          if (v63)
            v18 = (void *)objc_msgSend(obj, "firstObject");
          -[BWStillImageCaptureSettings setMasterPortType:](v45, "setMasterPortType:", objc_msgSend(v18, "portType"));
          return v45;
        }
        goto LABEL_16;
      }
    }
    objc_msgSend(v16, "addObject:", settingsID);
    goto LABEL_15;
  }
  return result;
}

- (void)_ubWhiteBalanceMetadataByPortTypeFromFrameStatistics:(uint64_t)a3 masterPortType:
{
  void *v3;
  void *v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[2];
  void *(*v22)(uint64_t, void *);
  void *v23;
  char v24;
  char v25;
  _BYTE v26[128];
  uint64_t v27;

  v3 = 0;
  v27 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v6 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", a3);
      if (v6)
      {
        v7 = v6;
        v8 = objc_msgSend(v6, "awbStable");
        v9 = objc_msgSend(v7, "awbLocked");
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v22 = __95__BWFigVideoCaptureDevice__ubWhiteBalanceMetadataByPortTypeFromFrameStatistics_masterPortType___block_invoke;
        v23 = &__block_descriptor_34_e41___NSDictionary_16__0__BWFrameStatistics_8l;
        v24 = v8;
        v25 = v9;
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v18;
          do
          {
            for (i = 0; i != v11; ++i)
            {
              if (*(_QWORD *)v18 != v12)
                objc_enumerationMutation(a2);
              v14 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
              v15 = objc_msgSend(a2, "objectForKeyedSubscript:", v14);
              objc_msgSend(v3, "setObject:forKeyedSubscript:", v22((uint64_t)v21, (void *)v15), v14);
            }
            v11 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v26, 16);
          }
          while (v11);
        }
      }
    }
  }
  return v3;
}

- (uint64_t)_ubIsSuperWidePreferredOrCurrentPrimaryCaptureStreamInWideZoomRange
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v1 = a1;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 1450) && *(_QWORD *)(a1 + 584))
    {
      objc_msgSend(*(id *)(a1 + 2744), "requestedZoomFactor");
      v3 = -[BWFigVideoCaptureDevice _captureStreamBasedSolelyOnZoomFactor:](v1, v2);
      v4 = (os_unfair_lock_s *)(v1 + 1312);
      os_unfair_lock_lock((os_unfair_lock_t)(v1 + 1312));
      v5 = *(_QWORD *)(v1 + 584);
      if (v3 == v5)
        v1 = 0;
      else
        v1 = *(_QWORD *)(v1 + 1304) == v5 || *(_QWORD *)(v1 + 1296) == v5;
      os_unfair_lock_unlock(v4);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

float __151__BWFigVideoCaptureDevice__ubStillImageSceneFlagsForCaptureStream_frameStatisticsByPortType_fusionEnabled_metadata_sceneMonitoring_zoomFactorOverride___block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  float v5;
  double v6;
  float v7;
  double v8;

  v4 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 224), "objectForKeyedSubscript:", a2);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", a2), "normalizedSNR");
  objc_msgSend(v4, "addDataPoint:", v5);
  objc_msgSend(v4, "average");
  v7 = v6;
  objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "objectForKeyedSubscript:", a2), "floatValue");
  if (*(float *)&v8 != 0.0 && fabsf((float)(*(float *)&v8 - v7) / (float)((float)(*(float *)&v8 + v7) * 0.5)) < 0.1)
    v7 = *(float *)&v8;
  *(float *)&v8 = v7;
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 232), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8), a2);
  return v7;
}

- (uint64_t)_ubIsDigitalFlashCaptureForSettings:(int)a3 sceneFlags:
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;

  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(a2, "digitalFlashMode");
    v7 = -[BWFigVideoCaptureDevice _ubDeliverDepthDataForSettings:speedOverQuality:sceneFlags:](v5, a2, 0, a3);
    result = 0;
    if ((a3 & 0x4000) == 0 && v6 >= 1)
    {
      v8 = objc_msgSend(a2, "constituentPhotoDeliveryEnabled");
      v9 = v8;
      result = v8 ^ 1u;
      if ((v9 & 1) == 0 && ((v7 ^ 1) & 1) == 0)
        return *(_QWORD *)(v5 + 2280) != 0;
    }
  }
  return result;
}

- (BOOL)_ubIsFlashAvailable
{
  _BOOL8 v2;

  if (!a1 || !*(_BYTE *)(a1 + 1988))
    return 0;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 2376));
  v2 = *(float *)(a1 + 2420) > 0.0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 2376));
  return v2;
}

- (void)_captureStreamsForDepthDataDeliveryOrStereoPhotoCaptureWithPrimaryCaptureStream:(uint64_t)a1
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 560), "count") > 2)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v5 = *(void **)(a1 + 560);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (!v6)
      return v4;
    v7 = v6;
    v8 = *(_QWORD *)v16;
    v9 = *MEMORY[0x1E0D05A30];
    v10 = *MEMORY[0x1E0D05A18];
    v11 = *MEMORY[0x1E0D05A28];
LABEL_6:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v8)
        objc_enumerationMutation(v5);
      v13 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v12);
      if (objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v9))
      {
        if ((objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v9) & 1) == 0
          && (objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v10) & 1) == 0)
        {
          goto LABEL_17;
        }
      }
      else if (!objc_msgSend((id)objc_msgSend(a2, "portType"), "isEqualToString:", v10)
             || (objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v10) & 1) == 0
             && !objc_msgSend((id)objc_msgSend(v13, "portType"), "isEqualToString:", v11))
      {
        goto LABEL_17;
      }
      objc_msgSend(v4, "addObject:", v13);
LABEL_17:
      if (v7 == ++v12)
      {
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (!v7)
          return v4;
        goto LABEL_6;
      }
    }
  }
  objc_msgSend(v4, "addObjectsFromArray:", *(_QWORD *)(a1 + 560));
  return v4;
}

- (os_unfair_lock_s)_ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream:(void *)a3 captureStreams:(void *)a4 settings:(void *)a5 frameStatisticsByPortType:(int)a6 waitForTimeMachineToFill:(int *)a7 failureReasonOut:
{
  uint64_t v7;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  float v14;
  float v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v19;
  void *v20;
  int v21;
  void *v22;
  const __CFDictionary *v23;
  NSObject *v24;
  unsigned int value;
  unsigned int v26;
  Float64 Seconds;
  CMTimeValue v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  void *v34;
  const __CFDictionary *v35;
  void *v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  Float64 v43;
  Float64 v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  void *v57;
  void *v58;
  NSObject *v59;
  unsigned int v60;
  unsigned int v61;
  Float64 v62;
  int v63;
  void *v64;
  CMTimeRange *v65;
  uint64_t v66;
  uint64_t v67;
  os_unfair_lock_t lock;
  os_unfair_lock_s *v70;
  uint64_t v71;
  id obja;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  CMTime v80;
  CMTime v81;
  CMTime v82;
  CMTime v83;
  CMTime v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  CMTime time;
  CMTimeRange v90;
  os_log_type_t type;
  os_log_type_t v92[4];
  __int128 v93;
  CMTimeEpoch epoch;
  CMTime rhs;
  int v96;
  _BYTE v97[128];
  CMTime start;
  Float64 v99;
  __int16 v100;
  Float64 v101;
  CMTimeRange v102;
  _BYTE v103[128];
  CMTimeRange lhs[2];
  CMTimeValue v105;
  CMTimeScale os_unfair_lock_opaque;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v12 = result;
  v96 = 0;
  v13 = result + 626;
  os_unfair_lock_lock(result + 626);
  *(_QWORD *)&v12[510]._os_unfair_lock_opaque = objc_msgSend(a4, "settingsID");
  os_unfair_lock_unlock(v13);
  if (a6)
  {
    if ((-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v12) & 1) != 0)
    {
LABEL_72:
      v46 = 0;
      v63 = 15;
      goto LABEL_63;
    }
    objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", objc_msgSend(a2, "portType")), "currentFrameRate");
    if (v14 == 0.0)
    {
      v46 = 0;
      v63 = 7;
      goto LABEL_63;
    }
    v15 = v14;
    os_unfair_lock_lock(v13);
    v105 = *(_QWORD *)&v12[644]._os_unfair_lock_opaque;
    os_unfair_lock_opaque = v12[646]._os_unfair_lock_opaque;
    v16 = v12[647]._os_unfair_lock_opaque;
    v17 = *(_QWORD *)&v12[648]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    if ((v16 & 1) != 0)
    {
      memset(&v102, 0, 24);
      CMTimeMake(&rhs, 1, 1000);
      lhs[0].start.value = v105;
      lhs[0].start.timescale = os_unfair_lock_opaque;
      lhs[0].start.flags = v16;
      lhs[0].start.epoch = v17;
      CMTimeAdd(&v102.start, &lhs[0].start, &rhs);
      v93 = *(_OWORD *)&v102.start.value;
      epoch = v102.start.epoch;
      -[os_unfair_lock_s setZeroShutterLagEarliestAllowedPTS:](v12, "setZeroShutterLagEarliestAllowedPTS:", &v93);
      if (dword_1ECFE9470)
      {
        *(_DWORD *)v92 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureDelegate", v65, v67), "captureStreamWillWaitForTimeMachineToFill:", a2);
    *(float *)&v19 = (float)((float)(int)v12[495]._os_unfair_lock_opaque / v15) + 0.1;
    if (*(float *)&v19 < 1.0)
      *(float *)&v19 = 1.0;
    objc_msgSend(*(id *)&v12[504]._os_unfair_lock_opaque, "waitUntilCapacity:timeout:", v12[803]._os_unfair_lock_opaque, v19);
  }
  if ((-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v12) & 1) != 0)
    goto LABEL_72;
  v20 = (void *)objc_msgSend(*(id *)&v12[126]._os_unfair_lock_opaque, "stream");
  v21 = objc_msgSend(v20, "sendCommandProperty:", *MEMORY[0x1E0D07818]);
  v96 = v21;
  if (v21)
  {
    v67 = v7;
    LODWORD(v65) = v21;
    FigDebugAssert3();
    v46 = 0;
    v63 = 1;
    goto LABEL_63;
  }
  v22 = (void *)objc_msgSend(a2, "stream");
  v74 = *MEMORY[0x1E0D07808];
  v23 = (const __CFDictionary *)objc_msgSend(v22, "getProperty:error:");
  if (v96)
  {
    v67 = v7;
    LODWORD(v65) = v96;
    FigDebugAssert3();
    v46 = 0;
    v63 = 2;
    goto LABEL_63;
  }
  v70 = v12;
  memset(&v90, 0, sizeof(v90));
  CMTimeRangeMakeFromDictionary(&v90, v23);
  if (dword_1ECFE9470)
  {
    LODWORD(start.value) = 0;
    LOBYTE(v105) = 0;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = start.value;
    if (os_log_type_enabled(v24, (os_log_type_t)v105))
      v26 = value;
    else
      v26 = value & 0xFFFFFFFE;
    if (v26)
    {
      *(_OWORD *)&lhs[0].start.value = *(_OWORD *)&v90.start.value;
      lhs[0].start.epoch = v90.start.epoch;
      Seconds = CMTimeGetSeconds(&lhs[0].start);
      lhs[0] = v90;
      CMTimeRangeGetEnd(&time, lhs);
      *(double *)&v28 = CMTimeGetSeconds(&time);
      LODWORD(v102.start.value) = 136315650;
      *(CMTimeValue *)((char *)&v102.start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachinesAnd"
                                                                     "GetTimeMachineFramesMetadataWithPrimaryCaptureStrea"
                                                                     "m:captureStreams:settings:frameStatisticsByPortType"
                                                                     ":waitForTimeMachineToFill:failureReasonOut:]";
      LOWORD(v102.start.flags) = 2048;
      *(Float64 *)((char *)&v102.start.flags + 2) = Seconds;
      HIWORD(v102.start.epoch) = 2048;
      v102.duration.value = v28;
      LODWORD(v67) = 32;
      v65 = &v102;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  lock = v13;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v29 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v85, v103, 16, v65, v67);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)v86;
    v32 = &unk_1ECFE9000;
    while (2)
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v86 != v31)
          objc_enumerationMutation(a3);
        v34 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
        if (v34 != a2)
        {
          v35 = (const __CFDictionary *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v85 + 1) + 8 * i), "stream"), "getProperty:error:", v74, &v96);
          if (v96)
          {
            v67 = v7;
            LODWORD(v65) = v96;
            FigDebugAssert3();
            v46 = 0;
            v63 = 2;
            goto LABEL_60;
          }
          memset(&v102, 0, sizeof(v102));
          CMTimeRangeMakeFromDictionary(&v102, v35);
          if (dword_1ECFE9470)
          {
            LODWORD(v105) = 0;
            v92[0] = OS_LOG_TYPE_DEFAULT;
            v36 = v32;
            v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v38 = v105;
            if (os_log_type_enabled(v37, v92[0]))
              v39 = v38;
            else
              v39 = v38 & 0xFFFFFFFE;
            if (v39)
            {
              v40 = (void *)objc_msgSend(v34, "portType");
              v42 = BWPortTypeToDisplayString(v40, v41);
              *(_OWORD *)&lhs[0].start.value = *(_OWORD *)&v102.start.value;
              lhs[0].start.epoch = v102.start.epoch;
              v43 = CMTimeGetSeconds(&lhs[0].start);
              lhs[0] = v102;
              CMTimeRangeGetEnd(&v84, lhs);
              v44 = CMTimeGetSeconds(&v84);
              LODWORD(start.value) = 136315906;
              *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachines"
                                                                        "AndGetTimeMachineFramesMetadataWithPrimaryCaptur"
                                                                        "eStream:captureStreams:settings:frameStatisticsB"
                                                                        "yPortType:waitForTimeMachineToFill:failureReasonOut:]";
              LOWORD(start.flags) = 2112;
              *(_QWORD *)((char *)&start.flags + 2) = v42;
              HIWORD(start.epoch) = 2048;
              v99 = v43;
              v100 = 2048;
              v101 = v44;
              LODWORD(v67) = 42;
              v65 = (CMTimeRange *)&start;
              _os_log_send_and_compose_impl();
            }
            v32 = v36;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)&lhs[0].start.value = *(_OWORD *)&v90.start.value;
          lhs[0].start.epoch = v90.start.epoch;
          start = v102.start;
          CMTimeSubtract(&v83, &lhs[0].start, &start);
          if (fabs(CMTimeGetSeconds(&v83)) > 0.004
            || (lhs[0] = v90,
                CMTimeRangeGetEnd(&v81, lhs),
                lhs[0] = v102,
                CMTimeRangeGetEnd(&v80, lhs),
                CMTimeSubtract(&v82, &v81, &v80),
                fabs(CMTimeGetSeconds(&v82)) > 0.004))
          {
            v46 = 0;
            v63 = 12;
            goto LABEL_60;
          }
        }
      }
      v30 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v85, v103, 16);
      if (v30)
        continue;
      break;
    }
  }
  v12 = v70;
  if ((-[BWFigVideoCaptureDevice _ubZeroShutterLagCancelWaitingForTimeMachines](v70) & 1) != 0)
  {
    v46 = 0;
    v63 = 15;
  }
  else
  {
    v45 = *(void **)&v70[504]._os_unfair_lock_opaque;
    lhs[0] = v90;
    v46 = (void *)objc_msgSend(v45, "metadataForPTSRange:timeout:", lhs, COERCE_DOUBLE(__PAIR64__(v90.duration.flags, 1.0)));
    v13 = lock;
    if (!objc_msgSend(v46, "count") || !objc_msgSend(v46, "count"))
    {
      v63 = 0;
      goto LABEL_63;
    }
    v47 = 0;
    obja = (id)*MEMORY[0x1E0D06D00];
    v75 = *MEMORY[0x1E0D06EC8];
    v71 = *MEMORY[0x1E0D05D00];
    do
    {
      v48 = (void *)objc_msgSend(v46, "objectAtIndexedSubscript:", v47, v65, v67);
      v49 = (void *)objc_msgSend(v48, "objectForKeyedSubscript:", v75);
      v50 = (void *)MEMORY[0x1E0CB37A0];
      v51 = (void *)objc_msgSend(v48, "objectForKeyedSubscript:", obja);
      v66 = __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke((uint64_t)v51, v51, v48);
      v52 = (void *)objc_msgSend(v50, "stringWithFormat:", CFSTR("[%@]"));
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v53 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v76, v97, 16);
      if (v53)
      {
        v54 = v53;
        v55 = *(_QWORD *)v77;
        do
        {
          for (j = 0; j != v54; ++j)
          {
            if (*(_QWORD *)v77 != v55)
              objc_enumerationMutation(v49);
            v57 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * j);
            v58 = (void *)objc_msgSend(v49, "objectForKeyedSubscript:", v57);
            v66 = __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke((uint64_t)v58, v57, v58);
            objc_msgSend(v52, "appendFormat:", CFSTR(", [%@]"));
          }
          v54 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v76, v97, 16);
        }
        while (v54);
      }
      memset(&start, 0, sizeof(start));
      CMTimeMakeFromDictionary(&start, (CFDictionaryRef)objc_msgSend(v48, "objectForKeyedSubscript:", v71));
      if (dword_1ECFE9470)
      {
        LODWORD(v105) = 0;
        v92[0] = OS_LOG_TYPE_DEFAULT;
        v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v60 = v105;
        if (os_log_type_enabled(v59, v92[0]))
          v61 = v60;
        else
          v61 = v60 & 0xFFFFFFFE;
        if (v61)
        {
          lhs[0].start = start;
          v62 = CMTimeGetSeconds(&lhs[0].start);
          LODWORD(v102.start.value) = 136315906;
          *(CMTimeValue *)((char *)&v102.start.value + 4) = (CMTimeValue)"-[BWFigVideoCaptureDevice _ubSuspendTimeMachine"
                                                                         "sAndGetTimeMachineFramesMetadataWithPrimaryCapt"
                                                                         "ureStream:captureStreams:settings:frameStatisti"
                                                                         "csByPortType:waitForTimeMachineToFill:failureReasonOut:]";
          LOWORD(v102.start.flags) = 1026;
          *(CMTimeFlags *)((char *)&v102.start.flags + 2) = v47;
          WORD1(v102.start.epoch) = 2050;
          *(Float64 *)((char *)&v102.start.epoch + 4) = v62;
          WORD2(v102.duration.value) = 2114;
          *(CMTimeValue *)((char *)&v102.duration.value + 6) = (CMTimeValue)v52;
          LODWORD(v67) = 38;
          v66 = (uint64_t)&v102;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++v47;
    }
    while (objc_msgSend(v46, "count", v66) > v47);
    v63 = 0;
LABEL_60:
    v12 = v70;
  }
  v13 = lock;
LABEL_63:
  os_unfair_lock_lock(v13);
  *(_QWORD *)&v12[510]._os_unfair_lock_opaque = 0;
  os_unfair_lock_unlock(v13);
  if (a7)
    *a7 = v63;
  if (objc_msgSend(v46, "count", v65, v67))
    return (os_unfair_lock_s *)v46;
  if (LOBYTE(v12[801]._os_unfair_lock_opaque))
  {
    objc_msgSend(*(id *)&v12[780]._os_unfair_lock_opaque, "resume");
    v64 = (void *)objc_msgSend(*(id *)&v12[126]._os_unfair_lock_opaque, "stream");
    objc_msgSend(v64, "sendCommandProperty:", *MEMORY[0x1E0D07810]);
  }
  return 0;
}

- (uint64_t)_ubIsTimeMachineFramesUsableForHDRUsingTimeMachineFramesMetadata:(uint64_t)result portTypes:(void *)a2
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;

  if (!result)
    return result;
  if (!a2)
    return 1;
  v3 = result;
  v4 = *(void **)(result + 1296);
  if (!v4)
    v4 = *(void **)(v3 + 504);
  result = objc_msgSend(*(id *)(v3 + 2008), "objectForKeyedSubscript:", objc_msgSend(v4, "portType"));
  if (!result)
    return result;
  v5 = (void *)result;
  if (!objc_msgSend(a2, "count"))
    return 1;
  v6 = 0;
  v7 = *MEMORY[0x1E0D06A10];
  v8 = *MEMORY[0x1E0D06D88];
  v9 = *MEMORY[0x1E0D06A20];
  while (1)
  {
    v10 = (void *)objc_msgSend(a2, "objectAtIndexedSubscript:", v6);
    if ((objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", 0x1E492C418), "BOOLValue") & 1) == 0)
    {
      if (!*(_BYTE *)(v3 + 2000))
      {
        objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v7), "doubleValue");
        result = 0;
        if (v11 < 0.0 || v11 > 0.0)
          return result;
      }
      result = objc_msgSend(v10, "objectForKeyedSubscript:", v8);
      if (!result)
        return result;
      FigCaptureComputeImageGainFromMetadata();
      FigCaptureComputeImageGainFromMetadata();
      objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v9), "doubleValue");
      v13 = v12 * 0.0;
      objc_msgSend(v5, "sifrMainEffectiveIntegrationTimeThreshold");
      if (v13 > v14)
      {
        objc_msgSend(v5, "sifrGainThreshold");
        if (v15 < 0.0)
          break;
      }
    }
    if (objc_msgSend(a2, "count") <= (unint64_t)++v6)
      return 1;
  }
  return 0;
}

- (BOOL)_ubUseSquareRootToneCurveForNonHDRCapturesUsingFrameStatistics:(void *)a3 captureParameters:(unint64_t)a4 sceneFlags:
{
  _BOOL8 result;
  double v9;
  double v10;
  float v11;
  double v12;
  double v13;

  result = 0;
  if (a1 && (a4 & 0xC) != 0)
  {
    if (objc_msgSend(a3, "toneCurveBehavior") == 2)
    {
      return 0;
    }
    else if (*(_BYTE *)(a1 + 1999))
    {
      return (a4 >> 1) & 1;
    }
    else
    {
      objc_msgSend(a2, "integrationTime");
      v10 = v9;
      objc_msgSend(a2, "gain");
      v12 = v10 * v11;
      objc_msgSend(a3, "sifrMainEffectiveIntegrationTimeThreshold");
      return v12 <= v13;
    }
  }
  return result;
}

- (uint64_t)_ubEVZeroCountForCaptureType:(char)a3 sceneFlags:(int)a4 captureFlags:(void *)a5 frameStatistics:
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void *v10;

  if (result)
  {
    v6 = *(_QWORD *)&a4 & 0x100000;
    if (a2 == 12)
    {
      if (v6)
      {
        v10 = (void *)objc_msgSend(*(id *)(result + 2008), "objectForKeyedSubscript:", objc_msgSend(a5, "portType"));
        objc_msgSend(a5, "eit");
        LODWORD(result) = objc_msgSend(v10, "deepFusionHDREVZeroCountForEffectiveIntegrationTime:");
      }
      else
      {
        LODWORD(result) = 3;
      }
      if ((*(_QWORD *)&a4 & 0x400000) != 0)
        return result;
      else
        return (result + 1);
    }
    else
    {
      if (a2 != 10)
        return a2 == 1;
      if (v6)
        v7 = 2;
      else
        v7 = 3;
      if (!(v6 | a3 & 0xC))
      {
        if (*(_BYTE *)(result + 2001))
        {
          if ((a4 & 0x400000) != 0)
            return 3;
          else
            return 2;
        }
        v7 = 3;
      }
      if ((a4 & 0x40000) != 0)
        v8 = v7;
      else
        v8 = v7 + 1;
      if ((a4 & 0x400000) != 0)
        return v7;
      else
        return v8;
    }
  }
  return result;
}

- (uint64_t)_ubValidateTimeMachineFramesMetadata:(int)a3 minimumValidCount:(void *)a4 primaryPortType:(void *)a5 portTypes:(void *)a6 frameStatisticsByPortType:(int)a7 deliverDepthData:
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t m;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t n;
  void *v57;
  int v58;
  uint64_t v59;
  NSObject *v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ii;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t jj;
  int v72;
  NSObject *v73;
  unsigned int v74;
  unsigned int v75;
  NSObject *v76;
  NSObject *v77;
  unsigned int v78;
  unsigned int v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id obj;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  os_log_type_t v92;
  os_log_type_t type[4];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  CMTime time1;
  CMTime v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[128];
  _BYTE v122[128];
  _BYTE v123[128];
  _BYTE v124[128];
  _BYTE v125[128];
  int v126;
  const char *v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  _BYTE v132[128];
  _BYTE v133[128];
  CMTime time2;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v13 = result;
  if (objc_msgSend(a2, "count") == *(_DWORD *)(result + 3212))
  {
    v84 = a6;
    obj = a2;
    v82 = a3;
    if (*(_QWORD *)(v13 + 1464))
    {
      if (a7)
      {
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v14 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v117, v133, 16);
        if (v14)
        {
          v15 = v14;
          v16 = *(_QWORD *)v118;
          v17 = *MEMORY[0x1E0D06ED8];
          v18 = *MEMORY[0x1E0D06B90];
          while (2)
          {
            for (i = 0; i != v15; ++i)
            {
              if (*(_QWORD *)v118 != v16)
                objc_enumerationMutation(obj);
              if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v117 + 1) + 8 * i), "objectForKeyedSubscript:", v17), "objectForKeyedSubscript:", objc_msgSend(*(id *)(v13 + 1464), "portType")), "objectForKeyedSubscript:", v18), "intValue") != 2)
              {
                if (dword_1ECFE9470)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                return 13;
              }
            }
            v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v117, v133, 16);
            if (v15)
              continue;
            break;
          }
        }
      }
    }
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v20 = obj;
    v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v132, 16);
    v86 = v13;
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v114;
      v24 = *MEMORY[0x1E0D06D00];
      v83 = *MEMORY[0x1E0D06ED8];
      v81 = *MEMORY[0x1E0D06D00];
      while (2)
      {
        for (j = 0; j != v22; ++j)
        {
          if (*(_QWORD *)v114 != v23)
            objc_enumerationMutation(obj);
          v26 = *(void **)(*((_QWORD *)&v113 + 1) + 8 * j);
          if ((objc_msgSend(a4, "isEqualToString:", objc_msgSend(v26, "objectForKeyedSubscript:", v24)) & 1) == 0)
          {
            if (dword_1ECFE9470)
            {
              v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            return 4;
          }
          v27 = (void *)objc_msgSend(v26, "objectForKeyedSubscript:", v83);
          v109 = 0u;
          v110 = 0u;
          v111 = 0u;
          v112 = 0u;
          v28 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v109, v125, 16);
          if (v28)
          {
            v29 = v28;
            v30 = *(_QWORD *)v110;
            while (2)
            {
              for (k = 0; k != v29; ++k)
              {
                if (*(_QWORD *)v110 != v30)
                  objc_enumerationMutation(a5);
                v32 = *(_QWORD *)(*((_QWORD *)&v109 + 1) + 8 * k);
                if ((objc_msgSend(a4, "isEqualToString:", v32) & 1) == 0
                  && !objc_msgSend(v27, "objectForKeyedSubscript:", v32))
                {
                  if (dword_1ECFE9470)
                  {
                    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  return 11;
                }
              }
              v29 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v109, v125, 16);
              if (v29)
                continue;
              break;
            }
          }
          v13 = v86;
          v24 = v81;
        }
        v20 = obj;
        v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v132, 16);
        if (v22)
          continue;
        break;
      }
    }
    v33 = (void *)objc_msgSend(v84, "objectForKeyedSubscript:", a4);
    memset(&v108, 0, sizeof(v108));
    v34 = (void *)objc_msgSend(v20, "lastObject");
    v35 = *MEMORY[0x1E0D05D00];
    CMTimeMakeFromDictionary(&v108, (CFDictionaryRef)objc_msgSend(v34, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]));
    if ((v108.flags & 1) == 0)
      goto LABEL_44;
    if (v33)
      objc_msgSend(v33, "pts");
    else
      memset(&time1, 0, sizeof(time1));
    time2 = v108;
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      v39 = v13;
      v40 = 0;
      v41 = 0;
    }
    else
    {
LABEL_44:
      v39 = v13;
      v40 = v84;
      v41 = a5;
    }
    if ((-[BWFigVideoCaptureDevice _ubCBAFScanInProgressUsingFrameStatisticsByPortType:portTypes:timeMachineFramesMetadata:](v39, v40, v41, v20) & 1) != 0)return 3;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v42 = *(void **)(v13 + 560);
    v43 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v103, v124, 16);
    if (v43)
    {
      v44 = v43;
      v45 = 0;
      v46 = *(_QWORD *)v104;
      do
      {
        for (m = 0; m != v44; ++m)
        {
          if (*(_QWORD *)v104 != v46)
            objc_enumerationMutation(v42);
          v48 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * m);
          v49 = objc_msgSend(v48, "activeQuadraBinningFactor");
          if ((int)v49 >= 1)
          {
            v50 = v49;
            if (!v45)
              v45 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            objc_msgSend(v45, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v50), objc_msgSend(v48, "portType"));
          }
        }
        v44 = objc_msgSend(v42, "countByEnumeratingWithState:objects:count:", &v103, v124, 16);
      }
      while (v44);
    }
    else
    {
      v45 = 0;
    }
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v51 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v123, 16);
    if (v51)
    {
      v52 = v51;
      v53 = 0;
      v54 = *(_QWORD *)v100;
      v55 = *MEMORY[0x1E0D06D20];
      v85 = *MEMORY[0x1E0D06D00];
      while (2)
      {
        for (n = 0; n != v52; ++n)
        {
          if (*(_QWORD *)v100 != v54)
            objc_enumerationMutation(obj);
          v57 = *(void **)(*((_QWORD *)&v99 + 1) + 8 * n);
          if ((objc_msgSend((id)objc_msgSend(v57, "objectForKeyedSubscript:", 0x1E492C418), "BOOLValue") & 1) == 0)
          {
            ++v53;
            v58 = objc_msgSend((id)objc_msgSend(v57, "objectForKeyedSubscript:", v55), "intValue");
            if (v58 >= 1
              && v58 != objc_msgSend((id)objc_msgSend(v45, "objectForKeyedSubscript:", objc_msgSend(v57, "objectForKeyedSubscript:", v85)), "intValue"))
            {
              if (dword_1ECFE9470)
              {
                v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              return 8;
            }
          }
          v59 = v86;
        }
        v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v99, v123, 16);
        if (v52)
          continue;
        break;
      }
    }
    else
    {
      v53 = 0;
      v59 = v86;
    }
    if (!*(_QWORD *)(v59 + 1608))
      goto LABEL_93;
    v61 = v53;
    v62 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v98 = 0;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v122, 16);
    if (v63)
    {
      v64 = v63;
      v65 = *(_QWORD *)v95;
      do
      {
        for (ii = 0; ii != v64; ++ii)
        {
          if (*(_QWORD *)v95 != v65)
            objc_enumerationMutation(obj);
          objc_msgSend(v62, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v94 + 1) + 8 * ii), "objectForKeyedSubscript:", v35));
        }
        v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v94, v122, 16);
      }
      while (v64);
    }
    if (!FigSampleBufferAutofocusProcessorCopyTimestampedExposureModes(*(_QWORD *)(v59 + 1608), (const __CFArray *)v62, &v98))
    {
      v67 = v98;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v91 = 0u;
      v68 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v88, v121, 16);
      if (v68)
      {
        v69 = v68;
        v70 = *(_QWORD *)v89;
        while (2)
        {
          for (jj = 0; jj != v69; ++jj)
          {
            if (*(_QWORD *)v89 != v70)
              objc_enumerationMutation(v67);
            if (objc_msgSend(*(id *)(*((_QWORD *)&v88 + 1) + 8 * jj), "intValue") == 4)
            {
              if (dword_1ECFE9470)
              {
                *(_DWORD *)type = 0;
                v92 = OS_LOG_TYPE_DEFAULT;
                v77 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v78 = *(_DWORD *)type;
                if (os_log_type_enabled(v77, v92))
                  v79 = v78;
                else
                  v79 = v78 & 0xFFFFFFFE;
                if (v79)
                {
                  v126 = 136315138;
                  v127 = "-[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortTyp"
                         "e:portTypes:frameStatisticsByPortType:deliverDepthData:]";
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              return 10;
            }
          }
          v69 = objc_msgSend(v67, "countByEnumeratingWithState:objects:count:", &v88, v121, 16);
          if (v69)
            continue;
          break;
        }
      }
      v53 = v61;
LABEL_93:
      if (v53 >= v82)
        return 0;
      if (dword_1ECFE9470)
      {
        v72 = v53;
        LODWORD(v98) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        v73 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v74 = v98;
        if (os_log_type_enabled(v73, type[0]))
          v75 = v74;
        else
          v75 = v74 & 0xFFFFFFFE;
        if (v75)
        {
          v126 = 136315650;
          v127 = "-[BWFigVideoCaptureDevice _ubValidateTimeMachineFramesMetadata:minimumValidCount:primaryPortType:portTy"
                 "pes:frameStatisticsByPortType:deliverDepthData:]";
          v128 = 1024;
          v129 = v72;
          v130 = 1024;
          v131 = v82;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return 6;
    }
    if (dword_1ECFE9470)
    {
      v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 9;
  }
  else
  {
    if (dword_1ECFE9470)
    {
      LODWORD(v98) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 5;
  }
}

- (uint64_t)_ubCBAFScanInProgressUsingFrameStatisticsByPortType:(void *)a3 portTypes:(void *)a4 timeMachineFramesMetadata:
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v20;
      while (2)
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(a3);
          objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v10)), "focusingMethod");
          if (FigCaptureStreamFocusingMethodIsContrastBased())
            return 1;
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v24, 16);
        if (v8)
          continue;
        break;
      }
    }
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    result = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (result)
    {
      v11 = result;
      v12 = *(_QWORD *)v16;
      v13 = *MEMORY[0x1E0D06AB8];
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v16 != v12)
            objc_enumerationMutation(a4);
          objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v15 + 1) + 8 * i), "objectForKeyedSubscript:", v13), "intValue");
          if (FigCaptureStreamFocusingMethodIsContrastBased())
          {
            -[BWAggdDataReporter reportZeroShutterLagMetadataInitFailureWithReasons:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportZeroShutterLagMetadataInitFailureWithReasons:", 8);
            return 1;
          }
        }
        v11 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
        result = 0;
        if (v11)
          continue;
        break;
      }
    }
  }
  return result;
}

- (uint64_t)_ubResolveDigitalFlashStatusForSceneFlags:(int)a3 flashMode:
{
  uint64_t result;
  BOOL v5;

  result = 0;
  if (a1 && (a2 & 0x4000) == 0)
  {
    if ((*(_QWORD *)&a2 & 0x28000) != 0)
    {
      v5 = 0;
    }
    else if (a3)
    {
      if (*(_BYTE *)(a1 + 2181))
        v5 = (a2 & 0x10000000) == 0;
      else
        v5 = 1;
    }
    else
    {
      v5 = 1;
    }
    if (!a3)
      v5 = 1;
    if ((a2 & 0x800) != 0 && v5 || (a2 & 0x20000000) != 0 && !a3)
      return 2;
    else
      return (a2 >> 10) & 1;
  }
  return result;
}

- (uint64_t)_ubSphereOffsetsForAdaptiveBracketingParameters:(float)a3 pixelSize:
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v27[2];
  uint64_t (*v28)(uint64_t, int, int);
  void *v29;
  _QWORD *v30;
  _QWORD v31[2];
  uint64_t (*v32)(uint64_t, int, int);
  void *v33;
  _QWORD *v34;
  _QWORD v35[6];
  float v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a2 && a3 > 0.0)
  {
    v6 = objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v7 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingFrameParametersForGroup:", 1), "count");
    v8 = 0;
    if (v7)
    {
      v9 = 2;
      do
      {
        v8 += v7;
        v7 = objc_msgSend((id)objc_msgSend(a2, "adaptiveBracketingFrameParametersForGroup:", v9), "count");
        v9 = (v9 + 1);
      }
      while (v7);
    }
    v10 = a3 * 4.0;
    v11 = (int)(float)(25.0 / v10);
    v12 = (2 * v11) | 1;
    if (v8 >= v12)
      v13 = (2 * v11) | 1;
    else
      v13 = v8;
    v14 = v13 + (v13 < 0);
    if ((v11 & 0x80000000) == 0)
    {
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke;
      v35[3] = &unk_1E4926220;
      v36 = v10;
      v35[4] = v5;
      v35[5] = v6;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v32 = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_2;
      v33 = &unk_1E4926248;
      v34 = v35;
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v28 = __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_3;
      v29 = &unk_1E4926248;
      v30 = v35;
      if (v8 >= 1)
      {
        v15 = 0;
        v16 = v14 >> 1;
        v17 = (v16 - 1);
        v18 = (1 - v16);
        v19 = -v16;
        v20 = v8;
        do
        {
          v21 = v12 - (v15 != 0);
          if (v20 >= v21)
            v22 = v21;
          else
            v22 = v20;
          if ((v15 & 1) != 0)
          {
            v28((uint64_t)v27, v17, v22);
          }
          else
          {
            if (v15)
              v23 = v18;
            else
              v23 = v19;
            v32((uint64_t)v31, v23, v22);
          }
          ++v15;
          v24 = __OFSUB__(v20, (_DWORD)v22);
          v20 -= v22;
        }
        while (!((v20 < 0) ^ v24 | (v20 == 0)));
      }
      if (dword_1ECFE9470)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return v5;
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke(uint64_t a1, int a2)
{
  double v3;
  CFDictionaryRef DictionaryRepresentation;
  CGPoint v6;

  v3 = (float)(*(float *)(a1 + 48) * (float)a2);
  v6.y = 0.0;
  v6.x = v3;
  DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v6);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", DictionaryRepresentation);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  return objc_msgSend(*(id *)(a1 + 40), "appendFormat:", CFSTR(" (%.3f, %.3f)"), *(_QWORD *)&v3, 0);
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_2(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a2;
    v4 = result;
    v5 = a3 + a2;
    do
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 32) + 16))();
      ++v3;
    }
    while (v3 < v5);
  }
  return result;
}

uint64_t __85__BWFigVideoCaptureDevice__ubSphereOffsetsForAdaptiveBracketingParameters_pixelSize___block_invoke_3(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;

  if (a3 >= 1)
  {
    v3 = a2;
    v4 = result;
    v5 = a2 - a3;
    do
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 32) + 16))();
      --v3;
    }
    while (v3 > v5);
  }
  return result;
}

- (uint64_t)_ubEnabledOutputsForCaptureFlags:(int)a3 captureType:(uint64_t *)a4 baseCaptureFrameFlagsOut:(unint64_t *)a5 discardCaptureFrameFlagsOut:
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v12;

  if (result)
  {
    if (*(_BYTE *)(result + 2058))
    {
      if ((a2 & 4) != 0)
      {
        v12 = objc_msgSend((id)objc_msgSend(*(id *)(result + 528), "objectForKeyedSubscript:", CFSTR("StillImageDepthDataType")), "intValue");
        if ((a2 & 0x800) != 0 && v12 == 8 && (a3 == 7 || a3 == 1 && (a2 & 0x80) == 0))
        {
          v8 = 3;
          v9 = 0xA000000000000000;
          v10 = 0x5000000000000000;
        }
        else
        {
          v8 = 1;
          v9 = 0x8000000000000000;
          v10 = 0x4000000000000000;
        }
      }
      else
      {
        v8 = 2;
        v9 = 0x2000000000000000;
        v10 = 0x1000000000000000;
      }
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v8);
      if (!a4)
        goto LABEL_16;
    }
    else
    {
      result = 0;
      v9 = 0x2000000000000000;
      v10 = 0x1000000000000000;
      if (!a4)
      {
LABEL_16:
        if (a5)
          *a5 = v9;
        return result;
      }
    }
    *a4 = v10;
    goto LABEL_16;
  }
  return result;
}

- (double)_ubZeroShutterLagFrameSelectionForCaptureType:(uint64_t)a3@<X2> captureFlags:(void *)a4@<X3> captureParameters:(void *)a5@<X4> timeMachineFrameMetadata:(int)a6@<W5> mainFrameCount:(uint64_t)a7@<X6> userInitiatedRequestPTS:(uint64_t)a8@<X8>
{
  CMTime *v9;
  int v10;
  void *v12;
  int v13;
  int v14;
  void *v18;
  void *v19;
  unint64_t v20;
  void *v21;
  int v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  signed int v37;
  signed int v38;
  int v39;
  unint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  int v45;
  _QWORD v46[2];
  uint64_t (*v47)(uint64_t, unsigned int);
  void *v48;
  void *v49;
  CMTime v50;
  uint64_t v51;

  if (!a1)
  {
    *(_QWORD *)&v42 = 0;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return *(double *)&v42;
  }
  v9 = (CMTime *)a7;
  v10 = a6;
  v12 = a4;
  v13 = a3;
  v51 = -1;
  if (a2 != 1)
    goto LABEL_7;
  if (!*(_BYTE *)(a1 + 3204))
    goto LABEL_15;
  if ((a3 & 0x2000) != 0)
  {
LABEL_7:
    v18 = (void *)objc_msgSend(MEMORY[0x1E0CB3788], "indexSetWithIndexesInRange:", 0, objc_msgSend(a5, "count", a3));
    v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (objc_msgSend(a5, "count"))
    {
      v20 = 0;
      do
      {
        v21 = (void *)objc_msgSend(a5, "objectAtIndexedSubscript:", v20);
        if (objc_msgSend((id)objc_msgSend(v21, "objectForKeyedSubscript:", 0x1E492C418), "BOOLValue"))
          objc_msgSend(v18, "removeIndex:", v20);
        else
          objc_msgSend(v19, "addObject:", v21);
        ++v20;
      }
      while (objc_msgSend(a5, "count") > v20);
    }
    v12 = a4;
    v22 = objc_msgSend(a4, "referenceFrameSelectionMethod");
    v9 = (CMTime *)a7;
    switch(v22)
    {
      case 0:
        v23 = &unk_1E4A01A18;
        goto LABEL_18;
      case 1:
        v27 = *(_BYTE *)(a7 + 12);
        v10 = a6;
        if ((v27 & 1) != 0)
        {
          v50 = *v9;
          v24 = FigCapturePTSBasedReferenceFrameSelection(1, (const __CFArray *)v19, &v50, a6, (_DWORD *)&v51 + 1, (int *)&v51);
        }
        else
        {
          v23 = &unk_1E4A01A30;
          v25 = v19;
          v26 = a6;
LABEL_19:
          v24 = BWReferenceFrameSelectionUsingMotionAndFocusScores(v25, v23, v26, (_DWORD *)&v51 + 1, (int *)&v51);
        }
LABEL_24:
        v13 = v45;
        if (v24)
          goto LABEL_32;
        v28 = v51;
        if ((v51 & 0x80000000) != 0 || objc_msgSend(a5, "count") <= v28)
          goto LABEL_32;
        v29 = objc_msgSend(v19, "count");
        if (v29 < objc_msgSend(a5, "count"))
        {
          v30 = objc_msgSend(v18, "firstIndex");
          v31 = v51;
          if ((_DWORD)v51)
          {
            v32 = 0;
            do
            {
              v30 = objc_msgSend(v18, "indexGreaterThanIndex:", v30);
              ++v32;
              v31 = v51;
            }
            while (v32 < (int)v51);
          }
          LODWORD(v51) = v30;
          HIDWORD(v51) += v30 - v31;
        }
        break;
      case 2:
        v10 = a6;
        v24 = BWReferenceFrameSelectionUsingBlurScores(v19, a6, (_DWORD *)&v51 + 1, &v51);
        goto LABEL_24;
      case 3:
        v23 = (void *)objc_msgSend(v12, "motionAndFocusScoreWeights");
LABEL_18:
        v25 = v19;
        v10 = a6;
        v26 = a6;
        goto LABEL_19;
      default:
        v24 = 0;
        v9 = (CMTime *)a7;
        v10 = a6;
        goto LABEL_24;
    }
    goto LABEL_33;
  }
  if ((a3 & 0x40) != 0)
  {
LABEL_15:
    v19 = 0;
LABEL_32:
    v51 = 0;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 3212);
    LODWORD(v51) = v14 - 1;
    HIDWORD(v51) = v14 - 1;
    if (v14 <= 0)
      goto LABEL_7;
    v19 = 0;
  }
LABEL_33:
  v33 = objc_msgSend(v19, "count");
  v34 = -1;
  if ((v13 & 0x100000) != 0 && v33)
  {
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v47 = __168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke;
    v48 = &unk_1E49262B0;
    v49 = a5;
    v35 = objc_msgSend(v12, "usePreviousSIFR");
    if ((int)v51 <= 1)
      v36 = 1;
    else
      v36 = v51;
    v37 = v36 - 1;
    if (v35)
      v38 = v37;
    else
      v38 = v51;
    if ((v13 & 0x20) != 0)
    {
      if (v38 < 1)
      {
        v34 = v38;
      }
      else
      {
        v34 = v38;
        if ((__168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke((uint64_t)v46, v38) & 1) == 0)
        {
          if (!objc_msgSend(v12, "usePreviousSIFR")
            || (v34 = v38 + 1, (v47((uint64_t)v46, v38 + 1) & 1) == 0))
          {
            if ((unint64_t)objc_msgSend(a5, "count") < 2)
            {
LABEL_54:
              v41 = -1;
            }
            else
            {
              v39 = -1;
              v40 = 1;
              while (1)
              {
                if ((v47((uint64_t)v46, v38 + v39) & 1) != 0)
                {
                  v41 = v38 + v39;
                  goto LABEL_58;
                }
                if ((v47((uint64_t)v46, v38 + (int)v40) & 1) != 0)
                  break;
                ++v40;
                --v39;
                if (objc_msgSend(a5, "count") <= v40)
                  goto LABEL_54;
              }
              v41 = v38 + v40;
            }
LABEL_58:
            v34 = v41 & ~(v41 >> 31);
          }
        }
      }
    }
    else if (__168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke((uint64_t)v46, v38))
    {
      v34 = v38;
    }
    else
    {
      v34 = v51;
    }
  }
  v42 = *(_OWORD *)&v9->value;
  *(_OWORD *)a8 = *(_OWORD *)&v9->value;
  *(_QWORD *)(a8 + 16) = v9->epoch;
  v43 = HIDWORD(v51);
  *(_DWORD *)(a8 + 24) = HIDWORD(v51);
  *(_DWORD *)(a8 + 28) = v10;
  *(_DWORD *)(a8 + 32) = v43;
  *(_DWORD *)(a8 + 36) = v10;
  *(_DWORD *)(a8 + 40) = v51;
  *(_DWORD *)(a8 + 44) = v34;
  return *(double *)&v42;
}

- (BOOL)_ubAWBReflowEnabledForCaptureType:(uint64_t)a3 primaryPortType:(void *)a4 frameStatisticsByPortType:(void *)a5 previewMetadata:
{
  int v9;
  unsigned int v10;

  if (result)
  {
    v9 = BWStillImageAutoWhiteBalanceReflowMaximumFrameCount();
    if (v9 < 1)
      return 0;
    v10 = v9;
    result = 0;
    if (a2 <= 0xC && ((1 << a2) & 0x1402) != 0)
    {
      if (a5)
      {
        if ((objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06870]), "BOOLValue") & 1) != 0)
          return 0;
      }
      else if ((objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", a3), "awbStable") & 1) != 0)
      {
        return 0;
      }
      return objc_msgSend(a4, "frameCount") < (unint64_t)v10;
    }
  }
  return result;
}

- (uint64_t)_ubAddFrameParametersForDepthIfNeeded:(__int16)a3 captureFlags:
{
  uint64_t v4;

  if (result && (a3 & 0x800) != 0)
  {
    v4 = result;
    if (*(_BYTE *)(result + 3202))
      result = objc_msgSend(a2, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07B68]);
    if (*(_BYTE *)(v4 + 3203))
      return objc_msgSend(a2, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D07B78]);
  }
  return result;
}

- (void)_ubWhiteBalanceMetadataByPortTypeFromMetadata:(uint64_t)a1
{
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v2 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    BWCopyWhiteBalanceMetadata(a2, v4);
    if (!objc_msgSend(v4, "count"))
      v4 = 0;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
    v5 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06ED8]);
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i);
          v11 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", v10);
          v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          BWCopyWhiteBalanceMetadata(v11, v12);
          if (objc_msgSend(v12, "count"))
            v13 = v12;
          else
            v13 = 0;
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v7);
    }
  }
  return v2;
}

- (BOOL)_ubGenerateLTMCurveForCaptureStream:(void *)a3 frameStatistics:
{
  double v4;
  CMTime v5[2];

  if (result)
  {
    memset(&v5[1], 0, sizeof(CMTime));
    if (a2 && (objc_msgSend(a2, "maxExposureDuration"), (v5[1].flags & 0x1D) == 1))
    {
      objc_msgSend(a3, "integrationTime");
      v5[0] = v5[1];
      return v4 + 0.0082 >= CMTimeGetSeconds(v5);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL __235__BWFigVideoCaptureDevice__ubStillImageCaptureSettingsWithID_userInitiatedRequestPTS_captureType_captureFlags_sceneFlags_frameStatisticsByPortType_metadata_deliverOriginalImage_deliverSushiRaw_bravoConstituentImageDeliveryDeviceTypes___block_invoke(uint64_t a1, void *a2)
{
  objc_opt_class();
  return (objc_opt_isKindOfClass() & 1) != 0
      && objc_msgSend(a2, "bracketedCaptureSequenceNumber") == *(_DWORD *)(a1 + 32);
}

- (id)_autoExposureBracketValuesForSettings:(void *)a3 frameStatistics:
{
  void *v5;
  unint64_t v6;
  double v7;

  if (result)
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (objc_msgSend(a2, "bracketImageCount"))
    {
      v6 = 0;
      do
      {
        LODWORD(v7) = *(_DWORD *)(objc_msgSend(a2, "exposureTargetBiases") + 4 * v6);
        if (*(float *)&v7 == 3.4028e38)
        {
          objc_msgSend(a3, "exposureBias");
          *(float *)&v7 = v7;
        }
        objc_msgSend(v5, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7));
        ++v6;
      }
      while (v6 < objc_msgSend(a2, "bracketImageCount"));
    }
    return (id)objc_msgSend(v5, "copy");
  }
  return result;
}

- (id)_manualExposureBracketParametersForSettings:(void *)a3 frameStatistics:(int)a4 use8dot8FixedPointGain:
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double Seconds;
  double v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  CMTime time2;
  CMTime time1;
  CMTime v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[4];

  v31[2] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    if (objc_msgSend(a2, "bracketImageCount"))
    {
      v8 = 0;
      v9 = 0;
      v10 = *MEMORY[0x1E0D071B8];
      v11 = *MEMORY[0x1E0D071A0];
      do
      {
        v27 = *(CMTime *)(objc_msgSend(a2, "exposureDurations") + v8);
        time1 = v27;
        memset(&time2, 0, sizeof(time2));
        if (CMTimeCompare(&time1, &time2))
        {
          time1 = v27;
          Seconds = CMTimeGetSeconds(&time1);
        }
        else
        {
          objc_msgSend(a3, "integrationTime");
        }
        v13 = Seconds;
        v14 = *(float *)(objc_msgSend(a2, "ISOs") + 4 * v9);
        if (v14 == 3.4028e38)
        {
          objc_msgSend(a3, "gain");
          v16 = v15;
        }
        else
        {
          objc_msgSend(a3, "baseISO");
          v16 = v14 / v17;
        }
        v18 = (int)(v13 * 1000000.0);
        if (a4)
        {
          v30[0] = v10;
          v19 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
          v30[1] = v11;
          v31[0] = v19;
          v31[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", vcvts_n_s32_f32(v16, 8uLL));
          v20 = (void *)MEMORY[0x1E0C99D80];
          v21 = v31;
          v22 = v30;
        }
        else
        {
          v28[0] = v10;
          v23 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
          v28[1] = v11;
          v29[0] = v23;
          *(float *)&v24 = v16;
          v29[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v24);
          v20 = (void *)MEMORY[0x1E0C99D80];
          v21 = v29;
          v22 = v28;
        }
        objc_msgSend(v7, "addObject:", objc_msgSend(v20, "dictionaryWithObjects:forKeys:count:", v21, v22, 2));
        ++v9;
        v8 += 24;
      }
      while (v9 < objc_msgSend(a2, "bracketImageCount"));
    }
    return (id)objc_msgSend(v7, "copy");
  }
  return result;
}

- (uint64_t)_ubAddSensorRawOutputBuffersToUnifiedBracketedCaptureParamsIfNeeded:(_QWORD *)a3 unifiedBracketedCaptureParamsOut:
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __CVBuffer *v14;
  void *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    os_unfair_lock_assert_owner((const os_unfair_lock *)(result + 144));
    if (a3)
    {
      if (*(_BYTE *)(v5 + 156))
      {
        v6 = 0;
        result = 0;
      }
      else
      {
        v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
        if (result)
        {
          v7 = result;
          v17 = a3;
          v8 = *(_QWORD *)v19;
          v9 = *MEMORY[0x1E0D07BE8];
          v10 = *MEMORY[0x1E0D07C00];
          while (2)
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v19 != v8)
                objc_enumerationMutation(a2);
              v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v11);
              if (objc_msgSend(v12, "objectForKeyedSubscript:", v9))
              {
                v13 = objc_msgSend((id)objc_msgSend(*(id *)(v5 + 160), "objectForKeyedSubscript:", &unk_1E49FB7A8), "newPixelBuffer");
                if (!v13)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();

                  v6 = 0;
                  result = 4294954610;
                  goto LABEL_17;
                }
                v14 = (__CVBuffer *)v13;
                v15 = (void *)objc_msgSend(v12, "mutableCopy");
                objc_msgSend(v15, "setObject:forKeyedSubscript:", v14, v10);
                objc_msgSend(v6, "addObject:", v15);

                CVPixelBufferRelease(v14);
              }
              else
              {
                objc_msgSend(v6, "addObject:", v12);
              }
              ++v11;
            }
            while (v7 != v11);
            result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
            v7 = result;
            if (result)
              continue;
            break;
          }
LABEL_17:
          a3 = v17;
        }
      }
      *a3 = v6;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *__95__BWFigVideoCaptureDevice__ubWhiteBalanceMetadataByPortTypeFromFrameStatistics_masterPortType___block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = BWGetWhiteBalanceMetadataFromFrameStatistics(a2);
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 32));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0D06870]);
  v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 33));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0D06840]);
  if (objc_msgSend(v3, "count"))
    return v3;
  else
    return 0;
}

uint64_t __197__BWFigVideoCaptureDevice__ubSuspendTimeMachinesAndGetTimeMachineFramesMetadataWithPrimaryCaptureStream_captureStreams_settings_frameStatisticsByPortType_waitForTimeMachineToFill_failureReasonOut___block_invoke(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  const char *v5;

  v4 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D88]);
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("portType:%@, sifr:%d, sifrSkipped:%d"), BWPortTypeToDisplayString(a2, v5), v4 != 0, objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D90]), "BOOLValue"));
}

uint64_t __168__BWFigVideoCaptureDevice__ubZeroShutterLagFrameSelectionForCaptureType_captureFlags_captureParameters_timeMachineFrameMetadata_mainFrameCount_userInitiatedRequestPTS___block_invoke(uint64_t a1, unsigned int a2)
{
  void *v4;
  uint64_t result;
  unsigned int v6;

  if ((a2 & 0x80000000) != 0)
    return 0;
  if (objc_msgSend(*(id *)(a1 + 32), "count") <= (unint64_t)a2)
    return 0;
  v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a2);
  result = objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D88]);
  if (result)
  {
    v6 = objc_msgSend((id)objc_msgSend((id)result, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D90]), "BOOLValue") ^ 1;
    if (a2)
      return v6;
    else
      return 1;
  }
  return result;
}

- (BOOL)_isLowLightSceneUsingFrameStatisticsByPortType:(uint64_t)a1
{
  _BOOL8 result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  double v16;
  double v17;

  result = 0;
  if (a1 && a2)
  {
    v5 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 504), "portType"));
    if (objc_msgSend((id)a1, "isBravoVariant")
      && (os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1312)),
          v6 = *(_QWORD *)(a1 + 1296),
          v7 = *(_QWORD *)(a1 + 576),
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1312)),
          v6 == v7))
    {
      v8 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(*(id *)(a1 + 576), "portType"));
      v9 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (*(_BYTE *)(a1 + 3204))
    {
      v10 = *(float *)(a1 + 3240);
      objc_msgSend(v5, "gain");
      v12 = v11;
      v13 = *(double *)(a1 + 2344);
      objc_msgSend(v5, "integrationTime");
      if (v9)
      {
        v10 = *(float *)(a1 + 3244);
        objc_msgSend(v8, "gain");
        v12 = v15;
        v13 = *(double *)(a1 + 2352);
        objc_msgSend(v8, "integrationTime");
      }
      return v12 >= v10 || v14 >= v13 + 0.0000999999975;
    }
    else
    {
      v16 = *(double *)(a1 + 2344);
      objc_msgSend(v5, "integrationTime");
      if (v9)
      {
        v16 = *(double *)(a1 + 2352);
        objc_msgSend(v8, "integrationTime");
      }
      return v17 >= v16 + -0.0000999999975;
    }
  }
  return result;
}

- (uint64_t)_currentSceneAllowsMotionFreezing:(uint64_t)result
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    if (*(_BYTE *)(result + 3153))
    {
      v3 = -[BWFigVideoCaptureDevice _evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:resultOut:](result, 1, 0);
      v4 = v3;
      if (a2)
      {
        v7[0] = CFSTR("IsPeopleAndMotionScene");
        v5 = v3 & 1;
        v8[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v5);
        v7[1] = CFSTR("IsFaceScene");
        v8[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v4 >> 8) & 1);
        v7[2] = CFSTR("SecondsSinceLastFaceDetected");
        LODWORD(v6) = HIDWORD(v4);
        v8[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v6);
        objc_msgSend(a2, "addPAMDecisionPreliminary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 3));
      }
      else
      {
        v5 = v3 & 1;
      }
      return v5 != 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

intptr_t __301__BWFigVideoCaptureDevice__resolveStillImageCaptureTypeFromStatisticsByPortType_masterCaptureStream_flashMode_hdrMode_qualityPrioritization_stereoFusionMode_depthDataDeliveryEnabled_bravoConstituentImageDeliveryDeviceTypes_burstQualityCaptureEnabled_clientBracketMode_forSceneMonitoring_captureFlags___block_invoke(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfiguration
{
  os_unfair_lock_s *p_switchOverLock;
  int64_t selectionBehavior;
  unint64_t restrictedSelectionConditions;
  int64_t v6;
  unint64_t v7;
  $06E035DAA80D7DA92D7AC3530BEA5F2A result;

  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  selectionBehavior = self->_bravoStreamSelectionConfiguration.selectionBehavior;
  restrictedSelectionConditions = self->_bravoStreamSelectionConfiguration.restrictedSelectionConditions;
  os_unfair_lock_unlock(p_switchOverLock);
  v6 = selectionBehavior;
  v7 = restrictedSelectionConditions;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

- ($06E035DAA80D7DA92D7AC3530BEA5F2A)bravoStreamSelectionConfigurationForRecording
{
  os_unfair_lock_s *p_switchOverLock;
  int64_t selectionBehavior;
  unint64_t restrictedSelectionConditions;
  int64_t v6;
  unint64_t v7;
  $06E035DAA80D7DA92D7AC3530BEA5F2A result;

  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  selectionBehavior = self->_bravoStreamSelectionConfigurationForRecording.selectionBehavior;
  restrictedSelectionConditions = self->_bravoStreamSelectionConfigurationForRecording.restrictedSelectionConditions;
  os_unfair_lock_unlock(p_switchOverLock);
  v6 = selectionBehavior;
  v7 = restrictedSelectionConditions;
  result.var1 = v7;
  result.var0 = v6;
  return result;
}

- (void)setBravoStreamSelectionConfigurationForRecording:(id)a3
{
  unint64_t var1;
  int64_t var0;
  os_unfair_lock_s *p_switchOverLock;

  var1 = a3.var1;
  var0 = a3.var0;
  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfigurationForRecording.selectionBehavior = var0;
  self->_bravoStreamSelectionConfigurationForRecording.restrictedSelectionConditions = var1;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (BOOL)bravoStreamSelectionConfigurationForRecordingEnabled
{
  BWFigVideoCaptureDevice *v2;
  os_unfair_lock_s *p_switchOverLock;

  v2 = self;
  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  LOBYTE(v2) = v2->_bravoStreamSelectionConfigurationForRecordingEnabled;
  os_unfair_lock_unlock(p_switchOverLock);
  return (char)v2;
}

- (void)setBravoStreamSelectionConfigurationForRecordingEnabled:(BOOL)a3
{
  os_unfair_lock_s *p_switchOverLock;

  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  self->_bravoStreamSelectionConfigurationForRecordingEnabled = a3;
  os_unfair_lock_unlock(p_switchOverLock);
}

- (NSArray)bravoStreamSelectionEligibleFallbackPortTypes
{
  os_unfair_lock_s *p_switchOverLock;
  NSArray *v4;

  p_switchOverLock = &self->_switchOverLock;
  os_unfair_lock_lock(&self->_switchOverLock);
  v4 = -[BWBravoStreamSelector eligibleFallbackPortTypes](self->_bravoStreamSelector, "eligibleFallbackPortTypes");
  os_unfair_lock_unlock(p_switchOverLock);
  return v4;
}

- (float)parallaxMitigationStrengthAndTargetCaptureStream:(id *)a3
{
  os_unfair_lock_s *p_parallaxMitigationStrengthLock;
  float parallaxMitigationStrength;
  BWFigVideoCaptureStream *parallaxMitigationTargetCaptureStream;

  p_parallaxMitigationStrengthLock = &self->_parallaxMitigationStrengthLock;
  os_unfair_lock_lock(&self->_parallaxMitigationStrengthLock);
  parallaxMitigationStrength = self->_parallaxMitigationStrength;
  parallaxMitigationTargetCaptureStream = self->_parallaxMitigationTargetCaptureStream;
  os_unfair_lock_unlock(p_parallaxMitigationStrengthLock);
  if (a3)
    *a3 = parallaxMitigationTargetCaptureStream;
  return parallaxMitigationStrength;
}

- (void)updateSphereShiftStateWithSampleBuffer:(opaqueCMSampleBuffer *)a3
{
  void *v4;
  int v5;

  v4 = (void *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v5 = objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB0]), "intValue");
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB8]), "BOOLValue"))
  {
    os_unfair_lock_lock(&self->_sphereShiftStateLock);
    if (v5 > self->_sphereShiftStateLastUpdateCaptureID)
    {
      FigMotionSphereShiftStateUpdateWithMetadata((uint64_t)&self->_sphereShiftState, (CFDictionaryRef)v4);
      self->_sphereShiftStateLastUpdateCaptureID = v5;
    }
    os_unfair_lock_unlock(&self->_sphereShiftStateLock);
  }
}

- ($BE0244895FCA7DC4D67BA796258C3D47)sphereShiftState
{
  os_unfair_lock_s *p_sphereShiftStateLock;
  $BE0244895FCA7DC4D67BA796258C3D47 *result;

  p_sphereShiftStateLock = &self->_sphereShiftStateLock;
  os_unfair_lock_lock(&self->_sphereShiftStateLock);
  memcpy(retstr, &self->_sphereShiftState, sizeof($BE0244895FCA7DC4D67BA796258C3D47));
  os_unfair_lock_unlock(p_sphereShiftStateLock);
  return result;
}

- (BOOL)_depthDataDeliveryOrStereoPhotoCaptureUseSecondaryStream:(_BOOL8)result primaryStream:(uint64_t)a2
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 1472) || *(_BYTE *)(result + 217))
    {
      v4 = objc_msgSend(*(id *)(result + 568), "indexOfObject:");
      if (v4 >= 1)
        v5 = objc_msgSend(*(id *)(v3 + 568), "objectAtIndexedSubscript:", (v4 - 1));
      else
        v5 = 0;
      return v5 == a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (uint64_t)_depthDataDeliveryOrStereoPhotoCaptureConfigureActiveSlaveStreamForPrimaryStream:(uint64_t)result
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(*(id *)(result + 568), "indexOfObject:", a2);
    v4 = v3 >= 1 ? objc_msgSend(*(id *)(v2 + 568), "objectAtIndexedSubscript:", (v3 - 1)) : 0;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v5 = *(void **)(v2 + 560);
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v12;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v8);
          if (v9 == (void *)v4)
          {
            if (*(_BYTE *)(v2 + 1472))
              v10 = 1;
            else
              v10 = *(_BYTE *)(v2 + 217) != 0;
          }
          else
          {
            v10 = 0;
          }
          objc_msgSend(v9, "setFirmwareTimeMachineEnabledWhenConfiguredAsSlave:", v10);
          ++v8;
        }
        while (v6 != v8);
        result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

- (int)timeOfFlightProjectorMode
{
  NSString *v3;
  BWFigCaptureStream *v4;
  id v5;

  v3 = -[BWFigVideoCaptureStream portType](self->_captureStream, "portType");
  if (-[NSString isEqualToString:](v3, "isEqualToString:", *MEMORY[0x1E0D05A20])
    && (v4 = -[BWFigVideoCaptureStream stream](self->_captureStream, "stream"),
        (v5 = -[BWFigCaptureStream getProperty:error:](v4, "getProperty:error:", *MEMORY[0x1E0D07830], 0)) != 0))
  {
    return objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D08260]), "intValue");
  }
  else
  {
    return 0;
  }
}

- (void)pointCloudCaptureDevice:(id)a3 willEmitPointCloudSampleBuffer:(opaqueCMSampleBuffer *)a4
{
  float v5;
  float v6;

  objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D06978]), "floatValue");
  v6 = v5;
  os_unfair_lock_lock(&self->_supplementalPointCloudCaptureDeviceLock);
  self->_supplementalPointCloudCaptureDeviceCurrentFrameRate = v6;
  os_unfair_lock_unlock(&self->_supplementalPointCloudCaptureDeviceLock);
}

- (void)setSupplementalPointCloudCaptureDeviceDelegate:(id)a3
{
  FigWeakReference *v5;

  if (a3)
    v5 = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
  else
    v5 = 0;
  self->_supplementalPointCloudCaptureDeviceDelegate = v5;
}

- (BWSupplementalPointCloudCaptureDeviceDelegate)supplementalPointCloudCaptureDeviceDelegate
{
  return (BWSupplementalPointCloudCaptureDeviceDelegate *)-[FigWeakReference referencedObject](self->_supplementalPointCloudCaptureDeviceDelegate, "referencedObject");
}

- (void)stopPointCloudCaptureForStillImageCaptureWithSettingsID:(int64_t)a3
{
  NSObject *v3;
  _QWORD v4[6];

  v3 = *(NSObject **)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __83__BWFigVideoCaptureDevice_stopPointCloudCaptureForStillImageCaptureWithSettingsID___block_invoke;
  v4[3] = &unk_1E491F158;
  v4[4] = self;
  v4[5] = a3;
  dispatch_async(v3, v4);
}

void __83__BWFigVideoCaptureDevice_stopPointCloudCaptureForStillImageCaptureWithSettingsID___block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  int v8;
  void *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 2504));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 2512), "settingsID");
  v4 = *(_QWORD *)(a1 + 32);
  if (v2 == v3)
  {
    v5 = objc_msgSend(*(id *)(v4 + 2512), "captureFlags");
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 2504));
    if ((v5 & 0x200) != 0)
    {
      if (dword_1ECFE9470)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(_DWORD *)(v7 + 2288);
      v9 = (void *)objc_msgSend(*(id *)(v7 + 2280), "referencedObject", v11, v12);
      LODWORD(v10) = v8;
      objc_msgSend(v9, "setMinimumFrameRate:", v10);
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 2504));
  }
}

- (float)depthMaxFrameRate
{
  return self->_depthMaxFrameRate;
}

- (int)shallowDepthOfFieldStagePreviewStatus
{
  BWFigVideoCaptureDevice *v2;
  os_unfair_lock_s *p_sdofLock;

  v2 = self;
  p_sdofLock = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  LODWORD(v2) = v2->_sdofStagePreviewStatus;
  os_unfair_lock_unlock(p_sdofLock);
  return (int)v2;
}

- (void)updateSDOFBackgroundShiftSum:(float)a3 invalidShiftRatio:(float)a4 closeCanonicalDisparityAverage:(float)a5 faceCanonicalDisparityAverages:(id)a6 erodedForegroundRatio:(float)a7 foregroundRatio:(float)a8 occluded:(BOOL)a9 faces:(id)a10 personSegmentationRatio:(float)a11
{
  _BOOL8 v13;
  os_unfair_lock_s *p_sdofLock;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v13 = a9;
  p_sdofLock = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  *(float *)&v22 = a3;
  *(float *)&v23 = a4;
  *(float *)&v24 = a5;
  *(float *)&v25 = a7;
  *(float *)&v26 = a8;
  *(float *)&v27 = a11;
  -[BWPortraitSceneMonitor setSDOFBackgroundShiftSum:invalidShiftRatio:closeCanonicalDisparityAverage:faceCanonicalDisparityAverages:erodedForegroundRatio:foregroundRatio:occluded:faces:personSegmentationRatio:](self->_portraitSceneMonitor, "setSDOFBackgroundShiftSum:invalidShiftRatio:closeCanonicalDisparityAverage:faceCanonicalDisparityAverages:erodedForegroundRatio:foregroundRatio:occluded:faces:personSegmentationRatio:", a6, v13, a10, v22, v23, v24, v25, v26, v27);
  os_unfair_lock_unlock(p_sdofLock);
}

- (void)updatePortraitSceneMonitoringRequiresStageThresholds:(BOOL)a3
{
  _BOOL8 v3;
  os_unfair_lock_s *p_sdofLock;
  int v6;

  v3 = a3;
  p_sdofLock = &self->_sdofLock;
  os_unfair_lock_lock(&self->_sdofLock);
  v6 = -[BWPortraitSceneMonitor portraitSceneMonitoringRequiresStageThresholds](self->_portraitSceneMonitor, "portraitSceneMonitoringRequiresStageThresholds");
  -[BWPortraitSceneMonitor setPortraitSceneMonitoringRequiresStageThresholds:](self->_portraitSceneMonitor, "setPortraitSceneMonitoringRequiresStageThresholds:", v3);
  os_unfair_lock_unlock(p_sdofLock);
  if (v6 != v3)
  {
    -[BWFigVideoCaptureDevice _postSDOFEffectStatus:SDOFStagePreviewStatus:]((uint64_t)self, self->_sdofEffectStatus, self->_sdofStagePreviewStatus);
    -[BWFigVideoCaptureDevice _updateStreamingForegroundSegmentationNetworkUsingStage:](self, v3);
  }
}

- (void)updateSmartCameraStreamPropertiesWithInferenceResult:(id)a3
{
  uint64_t v5;
  NSDictionary *v6;
  uint64_t v7;
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a3, "inferenceType") == 101)
  {
    v5 = objc_msgSend(a3, "inferences");
    os_unfair_lock_lock(&self->_frameStatisticsLock);

    *(_QWORD *)&self->_currentExifOrientation = a3;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
    if (-[BWFigVideoCaptureDevice isPropertyObserved:](self, "isPropertyObserved:", CFSTR("SceneClassificationConfidences")))
    {
      v8 = CFSTR("NewPropertyValue");
      v9[0] = v5;
      -[BWFigVideoCaptureDevice _postNotificationWithPayload:notificationPayload:](self, "_postNotificationWithPayload:notificationPayload:", CFSTR("SceneClassificationConfidencesChanged"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1));
    }
    v6 = -[BWFigCaptureStream supportedProperties](-[BWFigVideoCaptureStream stream](self->_captureStream, "stream"), "supportedProperties");
    v7 = *MEMORY[0x1E0D07730];
    if (-[NSDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D07730]))
      -[BWFigCaptureStream setProperty:value:](-[BWFigVideoCaptureStream stream](self->_captureStream, "stream"), "setProperty:value:", v7, v5);
  }
  else
  {
    FigDebugAssert3();
  }
}

- (id)sceneClassificationConfidences
{
  os_unfair_lock_s *p_frameStatisticsLock;
  id v4;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  if (LOBYTE(self->_zoomFactorChangedDelegate))
    v4 = (id)objc_msgSend(*(id *)&self->_currentExifOrientation, "inferences");
  else
    v4 = 0;
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return v4;
}

- (NSString)smartCameraStatus
{
  __int16 v2;
  void *v3;
  NSString *result;

  v2 = -[BWFigVideoCaptureDevice _evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:resultOut:]((uint64_t)self, 0, 0);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  result = 0;
  if ((v2 & 1) != 0)
  {
    objc_msgSend(v3, "appendFormat:", CFSTR("PAM: "));
    if ((v2 & 0x100) != 0)
      objc_msgSend(v3, "appendString:", CFSTR("Face"));
    return (NSString *)v3;
  }
  return result;
}

- (unint64_t)_evaluateSceneForMotionFreezingWithMasterStreamSwitchoverSuspended:(_QWORD *)a3 resultOut:
{
  float v3;
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v3 = 0.0;
  if (a1)
  {
    v5 = *(unsigned __int8 *)(a1 + 3153);
    if (*(_BYTE *)(a1 + 3153))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1956));
      if (a3)
        *a3 = *(id *)(a1 + 3184);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1956));
      v5 = *(unsigned __int8 *)(a1 + 3154);
      if (*(_BYTE *)(a1 + 3154))
      {
        v8 = -[BWFigVideoCaptureDevice _captureStreamForFaceDetectionWithMasterStreamSwitchoverSuspended:](a1, a2);
        v9 = *(_QWORD *)(a1 + 1296);
        if (v9)
          v10 = *(void **)(a1 + 1296);
        else
          v10 = (void *)v8;
        if (v9 && (a2 & 1) == 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1312));
          v10 = *(void **)(a1 + 1296);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1312));
        }
        objc_msgSend((id)objc_msgSend(v10, "faceDetector"), "secondsSinceLastFaceDetected");
        v5 = v3 >= 0.0 && v3 < *(float *)(a1 + 3156);
      }
      else
      {
        v3 = 0.0;
      }
      v11 = v5;
    }
    else
    {
      v11 = 0;
    }
  }
  else
  {
    v5 = 0;
    v11 = 0;
  }
  return ((unint64_t)v5 << 8) | ((unint64_t)LODWORD(v3) << 32) | v11;
}

- (NSString)lastStillCaptureStatus
{
  return (NSString *)&stru_1E4928818;
}

- (NSString)lastStillScene
{
  return (NSString *)CFSTR("None");
}

- (NSString)lastScene
{
  return (NSString *)CFSTR("None");
}

- (NSString)orientation
{
  float *p_smartCameraFaceSceneRecentlyDetectedThreshold;
  int v4;
  int v5;
  unsigned int v6;
  const __CFString *v7;

  p_smartCameraFaceSceneRecentlyDetectedThreshold = &self->_smartCameraFaceSceneRecentlyDetectedThreshold;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_smartCameraFaceSceneRecentlyDetectedThreshold);
  v4 = *(_DWORD *)&self->_smartCameraEnabled;
  if (v4)
  {
    v5 = FigCaptureRotationDegreesAndMirroringFromExifOrientation(v4, 0);
    v6 = FigCaptureOrientationFromRotationDegrees(v5, self->_position == 2, -[BWFigVideoCaptureDevice isExternalVariant](self, "isExternalVariant"), 0);
    v7 = FigCaptureVideoOrientationToString(v6);
  }
  else
  {
    v7 = CFSTR("Unknown");
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_smartCameraFaceSceneRecentlyDetectedThreshold);
  return &v7->isa;
}

- (void)semanticStyleSceneTypeDidChange:(int)a3
{
  os_unfair_lock_s *p_frameStatisticsLock;

  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  LODWORD(self->_zoomFactorChangedDelegatePortType) = a3;
  os_unfair_lock_unlock(p_frameStatisticsLock);
}

- (uint64_t)_captureStreamForFaceDetectionWithMasterStreamSwitchoverSuspended:(uint64_t)a1
{
  uint64_t v3;
  uint64_t v4;

  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 1296);
  if (v3)
    v4 = *(_QWORD *)(a1 + 1296);
  else
    v4 = *(_QWORD *)(a1 + 504);
  if (v3 && (a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1312));
    v4 = *(_QWORD *)(a1 + 1296);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1312));
  }
  return v4;
}

- (void)setUltraHighResolutionZeroShutterLagSupportEnabled:(BOOL)a3
{
  if (a3)
  {
    if (self->_multipleSensorRawBufferPoolsEnabled)
    {
      BYTE5(self->_mostRecentSmartCameraResult) = a3;
      HIBYTE(self->_mostRecentSmartCameraResult) = a3;
      LOBYTE(self->_currentStillSmartCameraResult) = 0;
    }
  }
  else
  {
    BYTE5(self->_mostRecentSmartCameraResult) = 0;
    HIBYTE(self->_mostRecentSmartCameraResult) = 0;
    LOBYTE(self->_currentStillSmartCameraResult) = 0;
    -[BWFigVideoCaptureDevice setUltraHighResolutionZeroShutterLagEnabled:](self, "setUltraHighResolutionZeroShutterLagEnabled:");
  }
}

- (BOOL)ultraHighResolutionZeroShutterLagSupportEnabled
{
  return BYTE5(self->_mostRecentSmartCameraResult);
}

- (void)setUltraHighResolutionZeroShutterLagEnabled:(BOOL)a3
{
  int v3;

  v3 = a3;
  if (!a3 || BYTE5(self->_mostRecentSmartCameraResult))
  {
    os_unfair_lock_lock(&self->_frameStatisticsLock);
    if (BYTE6(self->_mostRecentSmartCameraResult) != v3)
      BYTE6(self->_mostRecentSmartCameraResult) = v3;
    os_unfair_lock_unlock(&self->_frameStatisticsLock);
  }
}

- (BOOL)ultraHighResolutionZeroShutterLagEnabled
{
  BWFigVideoCaptureDevice *v2;
  os_unfair_lock_s *p_frameStatisticsLock;

  v2 = self;
  p_frameStatisticsLock = &self->_frameStatisticsLock;
  os_unfair_lock_lock(&self->_frameStatisticsLock);
  LOBYTE(v2) = BYTE6(v2->_mostRecentSmartCameraResult);
  os_unfair_lock_unlock(p_frameStatisticsLock);
  return (char)v2;
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)zeroShutterLagEarliestAllowedPTS
{
  *retstr = self[134];
  return self;
}

- (void)zeroShutterLagCancelWaitingForTimeMachinesForSettingsID:(int64_t)a3
{
  os_unfair_lock_s *p_skippedFramesCountForStillImageCaptureRetry;

  if (self->_ubZeroShutterLagMetadataTimeMachine)
  {
    p_skippedFramesCountForStillImageCaptureRetry = (os_unfair_lock_s *)&self->_skippedFramesCountForStillImageCaptureRetry;
    os_unfair_lock_lock((os_unfair_lock_t)&self->_skippedFramesCountForStillImageCaptureRetry);
    self->_ubZeroShutterLagWaitingForTimeMachinesLastCancelledSettingsID = a3;
    os_unfair_lock_unlock(p_skippedFramesCountForStillImageCaptureRetry);
    -[BWMetadataTimeMachine reset](self->_ubZeroShutterLagMetadataTimeMachine, "reset");
  }
}

- (float)timeLapseCaptureRate
{
  NSObject *focusAndExposureUpdateQueue;
  float v3;
  _QWORD v5[6];
  uint64_t v6;
  float *v7;
  uint64_t v8;
  int v9;

  v6 = 0;
  v7 = (float *)&v6;
  v8 = 0x2020000000;
  v9 = 0;
  focusAndExposureUpdateQueue = self->_focusAndExposureUpdateQueue;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __47__BWFigVideoCaptureDevice_timeLapseCaptureRate__block_invoke;
  v5[3] = &unk_1E491E9A8;
  v5[4] = self;
  v5[5] = &v6;
  dispatch_sync(focusAndExposureUpdateQueue, v5);
  v3 = v7[6];
  _Block_object_dispose(&v6, 8);
  return v3;
}

float __47__BWFigVideoCaptureDevice_timeLapseCaptureRate__block_invoke(uint64_t a1)
{
  float result;

  result = *(float *)(*(_QWORD *)(a1 + 32) + 2124);
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

- (BOOL)momentCaptureVideoRecordingSupported
{
  return BYTE2(self->_previewShiftInSensorSpace.x);
}

- (uint64_t)_resetAnalyticsData
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    result = mach_absolute_time();
    *(_QWORD *)(v1 + 296) = result;
    *(_QWORD *)(v1 + 304) = 0;
    *(_QWORD *)(v1 + 264) = result;
    *(_QWORD *)(v1 + 272) = 0;
    *(_QWORD *)(v1 + 368) = result;
    *(_QWORD *)(v1 + 376) = 0;
    *(_QWORD *)(v1 + 200) = result;
    *(_QWORD *)(v1 + 208) = 0;
    *(_QWORD *)(v1 + 3328) = result;
    *(_DWORD *)(v1 + 312) = -1082130432;
    *(_BYTE *)(v1 + 316) = 0;
    *(_DWORD *)(v1 + 280) = -1082130432;
    *(_BYTE *)(v1 + 284) = 0;
    *(_BYTE *)(v1 + 384) = 0;
  }
  return result;
}

- (int)systemPressureLevel
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = *(_DWORD *)(&v2->_adaptiveOverscanEnabled + 3);
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (unsigned)systemPressureFactors
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = v2->_systemPressureLevel;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return v2;
}

- (int)thermalSystemPressureLevel
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = v2->_flickerAvoidanceMonitor;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (int)peakPowerSystemPressureLevel
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LODWORD(v2) = HIDWORD(v2->_flickerAvoidanceMonitor);
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (int)v2;
}

- (BOOL)needsToRelieveSystemPressure
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LOBYTE(v2) = v2->_systemPressureStatusLock._os_unfair_lock_opaque;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (char)v2;
}

- (void)setRestorationOfForcedOffOverCaptureActiveSlaveStreamEnabled:(BOOL)a3
{
  _BOOL4 v3;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;
  BOOL v6;

  v3 = a3;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  if (self->_needsToRelieveSystemPressure != v3)
  {
    self->_needsToRelieveSystemPressure = v3;
    if (BYTE1(self->_thermalSystemPressureLevel))
      v6 = !v3;
    else
      v6 = 1;
    if (!v6 && !LOBYTE(self->_systemPressureStatusLock._os_unfair_lock_opaque))
      BYTE1(self->_thermalSystemPressureLevel) = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
}

- (BOOL)restorationOfForcedOffOverCaptureActiveSlaveStreamEnabled
{
  BWFigVideoCaptureDevice *v2;
  BOOL *p_videoStabilizationModeUsesReducedOverscan;

  v2 = self;
  p_videoStabilizationModeUsesReducedOverscan = &self->_videoStabilizationModeUsesReducedOverscan;
  os_unfair_lock_lock((os_unfair_lock_t)&self->_videoStabilizationModeUsesReducedOverscan);
  LOBYTE(v2) = v2->_needsToRelieveSystemPressure;
  os_unfair_lock_unlock((os_unfair_lock_t)p_videoStabilizationModeUsesReducedOverscan);
  return (char)v2;
}

- (void)setMaxDepthFrameRateChangedDelegate:(id)a3
{

  *(_QWORD *)&self->_temporalNoiseReductionEnabled = 0;
  if (a3)
    *(_QWORD *)&self->_temporalNoiseReductionEnabled = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
}

- (int)overheadCameraMode
{
  return self->_temporalNoiseReductionBand0StrengthModulation;
}

- (void)setOverheadCameraMode:(int)a3
{
  self->_temporalNoiseReductionBand0StrengthModulation = a3;
  objc_msgSend(-[FigWeakReference referencedObject](self->_maxDepthFrameRateChangedDelegate, "referencedObject"), "didChangeOverheadCameraMode:", *(_QWORD *)&a3);
}

- (void)setOverheadCameraModeChangeDelegate:(id)a3
{

  self->_maxDepthFrameRateChangedDelegate = 0;
  if (a3)
    self->_maxDepthFrameRateChangedDelegate = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
}

- (BOOL)isDeskCamActive
{
  return self->_deskCamActive;
}

- (void)setDeskCamActive:(BOOL)a3
{
  _BOOL4 v3;
  uint64_t v5;
  int64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;

  if (self->_deskCamActive != a3)
  {
    v3 = a3;
    v5 = mach_absolute_time();
    if (v3)
    {
      if (!self->_deskCamActive)
      {
        v6 = v5;
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        self->_deskCamStartTime = v6;
      }
    }
    else if (self->_deskCamActive)
    {
      if (dword_1ECFE9470)
      {
        v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[BWFigVideoCaptureDevice _reportDeskViewStreamingSessionCoreAnalyticsData]((uint64_t)self);
    }
    self->_deskCamActive = v3;
    -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
  }
}

- (void)setUltraWideActive:(BOOL)a3
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;

  if (self->_ultraWideActive != a3)
  {
    if (self->_ultraWideActive || !a3)
    {
      if (self->_ultraWideActive && !a3)
      {
        if (dword_1ECFE9470)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        -[BWFigVideoCaptureDevice _reportStreamingSessionCoreAnalyticsData]((uint64_t)self);
      }
    }
    else
    {
      if (dword_1ECFE9470)
      {
        v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      -[BWFigVideoCaptureDevice _resetAnalyticsData]((uint64_t)self);
    }
    self->_ultraWideActive = a3;
  }
}

- (BWFigVideoCaptureDeviceSubjectSelectionDelegate)subjectSelectionDelegate
{
  return (BWFigVideoCaptureDeviceSubjectSelectionDelegate *)objc_msgSend(*(id *)&self->_overheadCameraMode, "referencedObject");
}

- (void)setSubjectSelectionDelegate:(id)a3
{

  *(_QWORD *)&self->_overheadCameraMode = 0;
  if (a3)
    *(_QWORD *)&self->_overheadCameraMode = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
}

- (CGRect)centerStageRectOfInterest
{
  FigWeakReference *overheadCameraModeChangedDelegate;
  FigWeakReference *subjectSelectionDelegate;
  double x;
  double y;
  CGRect result;

  overheadCameraModeChangedDelegate = self->_overheadCameraModeChangedDelegate;
  subjectSelectionDelegate = self->_subjectSelectionDelegate;
  x = self->_centerStageRectOfInterest.origin.x;
  y = self->_centerStageRectOfInterest.origin.y;
  result.size.height = y;
  result.size.width = x;
  result.origin.y = *(double *)&subjectSelectionDelegate;
  result.origin.x = *(double *)&overheadCameraModeChangedDelegate;
  return result;
}

- (void)setCenterStageRectOfInterest:(CGRect)a3
{
  double height;
  double width;
  double y;
  double x;
  NSArray *captureStreams;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  height = a3.size.height;
  width = a3.size.width;
  y = a3.origin.y;
  x = a3.origin.x;
  v18 = *MEMORY[0x1E0C80C00];
  *(CGRect *)&self->_overheadCameraModeChangedDelegate = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "didChangeCenterStageRectOfInterest:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  captureStreams = self->_captureStreams;
  v9 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v12++), "setCenterStageRectOfInterest:", x, y, width, height);
      }
      while (v10 != v12);
      v10 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v10);
  }
}

- (int)centerStageFramingMode
{
  return HIDWORD(self->_centerStageRectOfInterest.size.height);
}

- (void)setCenterStageFramingMode:(int)a3
{
  uint64_t v3;
  NSArray *captureStreams;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v3 = *(_QWORD *)&a3;
  v15 = *MEMORY[0x1E0C80C00];
  HIDWORD(self->_centerStageRectOfInterest.size.height) = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_overheadCameraMode, "referencedObject"), "didChangeCenterStageFramingMode:", *(_QWORD *)&a3);
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "didChangeCenterStageFramingMode:", v3);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  captureStreams = self->_captureStreams;
  v6 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(captureStreams);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v9++), "setCenterStageFramingMode:", v3);
      }
      while (v7 != v9);
      v7 = -[NSArray countByEnumeratingWithState:objects:count:](captureStreams, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v7);
  }
}

- (BOOL)centerStageMetadataDeliveryEnabled
{
  return (BOOL)self->_centerStageDelegate;
}

- (void)setCenterStageMetadataDeliveryEnabled:(BOOL)a3
{
  LOBYTE(self->_centerStageDelegate) = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "didChangeCenterStageMetadataDeliveryEnabled:", a3);
}

- (BWFigVideoCaptureDeviceCenterStageDelegate)centerStageDelegate
{
  return (BWFigVideoCaptureDeviceCenterStageDelegate *)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject");
}

- (void)setCenterStageDelegate:(id)a3
{
  FigWeakReference *v5;
  uint64_t v6;
  _QWORD v7[5];

  self->_centerStageRectOfInterest.size.width = 0.0;
  if (a3)
  {
    v5 = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
    v6 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&self->_centerStageRectOfInterest.size.width = v5;
    v7[0] = v6;
    v7[1] = 3221225472;
    v7[2] = __50__BWFigVideoCaptureDevice_setCenterStageDelegate___block_invoke;
    v7[3] = &unk_1E491E720;
    v7[4] = self;
    objc_msgSend(-[FigWeakReference referencedObject](v5, "referencedObject"), "setRegionOfInterestForCameraControlsChangedHandler:", v7);
  }
}

uint64_t __50__BWFigVideoCaptureDevice_setCenterStageDelegate___block_invoke(uint64_t a1)
{
  return fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(*(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 3992), "referencedObject"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 4080), "referencedObject"));
}

- (void)setCenterStageFieldOfViewRestrictedToWide:(BOOL)a3
{
  LOBYTE(self->_centerStageRectOfInterest.size.height) = a3;
  objc_msgSend((id)objc_msgSend(*(id *)&self->_centerStageRectOfInterest.size.width, "referencedObject"), "restrictCenterStageFieldOfViewToWide:", a3);
}

- (BOOL)centerStageFieldOfViewRestrictedToWide
{
  return LOBYTE(self->_centerStageRectOfInterest.size.height);
}

- (BOOL)isCenterStageActive
{
  return BYTE1(self->_centerStageDelegate);
}

- (void)setCenterStageActive:(BOOL)a3
{
  BYTE1(self->_centerStageDelegate) = a3;
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
}

- (BWFigVideoCaptureDeviceManualCinematicFramingDelegate)manualCinematicFramingDelegate
{
  return (BWFigVideoCaptureDeviceManualCinematicFramingDelegate *)-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject");
}

- (void)setManualCinematicFramingDelegate:(id)a3
{
  FigWeakReference *v5;
  uint64_t v6;
  _QWORD v7[5];

  self->_portraitEffectPropertiesDelegate = 0;
  if (a3)
  {
    v5 = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
    v6 = MEMORY[0x1E0C809B0];
    self->_portraitEffectPropertiesDelegate = v5;
    v7[0] = v6;
    v7[1] = 3221225472;
    v7[2] = __61__BWFigVideoCaptureDevice_setManualCinematicFramingDelegate___block_invoke;
    v7[3] = &unk_1E491E720;
    v7[4] = self;
    objc_msgSend(-[FigWeakReference referencedObject](v5, "referencedObject"), "setRegionOfInterestForCameraControlsChangedHandler:", v7);
  }
}

uint64_t __61__BWFigVideoCaptureDevice_setManualCinematicFramingDelegate___block_invoke(uint64_t a1)
{
  return fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(*(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 3992), "referencedObject"), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 4080), "referencedObject"));
}

- (void)startPanningAtPoint:(CGPoint)a3
{
  objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "startPanningAtPoint:", a3.x, a3.y);
}

- (void)panWithTranslation:(CGPoint)a3
{
  objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "panWithTranslation:", a3.x, a3.y);
}

- (void)performOneShotFraming
{
  objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "performOneShotFraming");
}

- (void)resetFraming
{
  objc_msgSend(-[FigWeakReference referencedObject](self->_portraitEffectPropertiesDelegate, "referencedObject"), "resetFraming");
}

- (BOOL)isManualCinematicFramingActive
{
  return self->_manualCinematicFramingEnabled;
}

- (void)setManualCinematicFramingActive:(BOOL)a3
{
  self->_manualCinematicFramingEnabled = a3;
  -[BWFigVideoCaptureDevice _updateSensorRegionOfInterestForActiveFraming]((uint64_t)self);
}

- (void)setSmartStyleAttachedMediaTimeMachineDelegate:(id)a3
{
  FigWeakReference *v5;

  if (a3)
    v5 = -[FigWeakReference initWithReferencedObject:]([FigWeakReference alloc], "initWithReferencedObject:", a3);
  else
    v5 = 0;
  *(_QWORD *)&self->_minimumTimeBetweenStationaryChecks = v5;
}

- (BWAttachedMediaTimeMachineDelegate)smartStyleAttachedMediaTimeMachineDelegate
{
  return (BWAttachedMediaTimeMachineDelegate *)objc_msgSend(*(id *)&self->_minimumTimeBetweenStationaryChecks, "referencedObject");
}

void __80__BWFigVideoCaptureDevice__sendInitialValuesToPortraitEffectPropertiesDelegate___block_invoke(uint64_t a1, uint64_t a2)
{
  -[BWFigVideoCaptureDevice _postNotificationWithName:payloadNewPropertyValue:]((void *)objc_msgSend(*(id *)(a1 + 32), "referencedObject"), (uint64_t)CFSTR("BWFigVideoCaptureDeviceReactionsInProgressChangedNotification"), a2);
}

- (float)backgroundBlurAperture
{
  return self->_backgroundBlurAperture;
}

- (float)studioLightingIntensity
{
  return self->_studioLightingIntensity;
}

- (BOOL)gesturesEnabled
{
  return self->_gesturesEnabled;
}

- (void)performReactionEffect:(id)a3
{
  BWFigVideoCaptureDevice **v4;
  void *v5;

  if (self)
  {
    v4 = (BWFigVideoCaptureDevice **)self;
    v5 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
    if (v5)
    {
      self = (BWFigVideoCaptureDevice *)objc_msgSend(v5, "referencedObject");
    }
    else if (objc_msgSend(v4, "isBravoVariant"))
    {
      self = (BWFigVideoCaptureDevice *)objc_msgSend(v4, "masterCaptureStream");
    }
    else
    {
      self = v4[63];
    }
  }
  -[BWFigVideoCaptureDevice performReactionEffect:](self, "performReactionEffect:", a3);
}

- (void)setBackgroundReplacementPixelBuffer:(__CVBuffer *)a3
{
  __CVBuffer *backgroundReplacementPixelBuffer;
  void *v8;
  BWFigVideoCaptureStream *captureStream;

  backgroundReplacementPixelBuffer = self->_backgroundReplacementPixelBuffer;
  if (!self->_backgroundReplacementEnabled || a3 == 0 || backgroundReplacementPixelBuffer == 0)
  {
    self->_backgroundReplacementPixelBuffer = a3;
    if (!a3)
    {
      if (!backgroundReplacementPixelBuffer)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    self->_backgroundReplacementPixelBufferChanged = 1;
    self->_backgroundReplacementPixelBuffer = a3;
  }
  CFRetain(a3);
  if (backgroundReplacementPixelBuffer)
LABEL_11:
    CFRelease(backgroundReplacementPixelBuffer);
LABEL_12:
  v8 = *(void **)&self->_depthDataDeliveryZoomLock._os_unfair_lock_opaque;
  if (v8)
  {
    captureStream = (BWFigVideoCaptureStream *)objc_msgSend(v8, "referencedObject");
  }
  else if (-[BWFigVideoCaptureDevice isBravoVariant](self, "isBravoVariant"))
  {
    captureStream = -[BWFigVideoCaptureDevice masterCaptureStream](self, "masterCaptureStream");
  }
  else
  {
    captureStream = self->_captureStream;
  }
  -[BWFigVideoCaptureStream didChangeBackgroundReplacementPixelBuffer:](captureStream, "didChangeBackgroundReplacementPixelBuffer:", a3);
}

- (__CVBuffer)backgroundReplacementPixelBuffer
{
  return self->_backgroundReplacementPixelBuffer;
}

- (BOOL)frameSkippingWhenNotRecordingEnabled
{
  return self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch;
}

- (void)setFrameSkippingWhenNotRecordingEnabled:(BOOL)a3
{
  LOBYTE(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch) = a3;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (int)targetFrameRateWhenNotRecording
{
  return HIDWORD(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch);
}

- (void)setTargetFrameRateWhenNotRecording:(int)a3
{
  HIDWORD(self->_lastPTSOfActiveToStillPreviewActiveTransition.epoch) = a3;
  -[BWFigVideoCaptureDevice _updateFrameSkippingRatio]((uint64_t)self);
}

- (OpaqueFigSampleBufferProcessor)_autofocusProcessor
{
  return self->_autofocusProcessor;
}

- (id)_stillImageDispatchQueue
{
  return *(id *)&self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayCounter;
}

- (id)_stillImageCaptureStateMachine
{
  return *(id *)&self->_retryCaptureStillImageNow;
}

- (int)deviceType
{
  return self->_deviceType;
}

- (NSDictionary)moduleInfoByPortType
{
  return self->_moduleInfoByPortType;
}

- (BOOL)cinematicFramingSupported
{
  return self->_cinematicFramingSupported;
}

- (unsigned)cinematicFramingControlMode
{
  return self->_cinematicFramingControlMode;
}

- (BOOL)backgroundBlurSupported
{
  return self->_backgroundBlurSupported;
}

- (BOOL)studioLightingSupported
{
  return self->_studioLightingSupported;
}

- (BOOL)reactionEffectsSupported
{
  return self->_reactionEffectsSupported;
}

- (BOOL)backgroundReplacementSupported
{
  return self->_backgroundReplacementSupported;
}

- (void)setBackgroundReplacementSupported:(BOOL)a3
{
  self->_backgroundReplacementSupported = a3;
}

- (BOOL)faceDrivenAEAFEnabledByDefault
{
  return self->_faceDrivenAEAFEnabledByDefault;
}

- (BOOL)isPhotoFormat
{
  return self->_photoFormat;
}

- (float)cinematicVideoAverageRenderingTime
{
  return *(float *)&self->_defaultContinuousAutoFocusWindowSize.width;
}

- (void)setCinematicVideoAverageRenderingTime:(float)a3
{
  *(float *)&self->_defaultContinuousAutoFocusWindowSize.width = a3;
}

- (float)cinematicVideoWorstCaseRenderingTime
{
  return *((float *)&self->_defaultContinuousAutoFocusWindowSize.width + 1);
}

- (void)setCinematicVideoWorstCaseRenderingTime:(float)a3
{
  *((float *)&self->_defaultContinuousAutoFocusWindowSize.width + 1) = a3;
}

- (OS_dispatch_queue)streamSetPropertyAsyncQueue
{
  return self->_streamSetPropertyAsyncQueue;
}

- (BOOL)temporalNoiseReductionEnabled
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.timescale;
}

- (BOOL)temporalNoiseReductionBand0Disabled
{
  return BYTE1(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (BOOL)temporalNoiseReductionRawEnabled
{
  return BYTE2(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (BOOL)temporalNoiseReductionStrengthHighEnabled
{
  return HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale);
}

- (void)setTemporalNoiseReductionStrengthHighEnabled:(BOOL)a3
{
  HIBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.timescale) = a3;
}

- (BOOL)disableTemporalNoiseReductionWhenStopping
{
  return self->_ptsOfLastTimeOfFlightFrameRateChange.flags;
}

- (void)setDisableTemporalNoiseReductionWhenStopping:(BOOL)a3
{
  LOBYTE(self->_ptsOfLastTimeOfFlightFrameRateChange.flags) = a3;
}

- (BOOL)captureInitiatedOnce
{
  return (BOOL)self->_thermalMonitorQueue;
}

- (void)setCaptureInitiatedOnce:(BOOL)a3
{
  LOBYTE(self->_thermalMonitorQueue) = a3;
}

- (int)stillImageFusionScheme
{
  return *(_DWORD *)&self->_stillImageCaptureEnabled;
}

- (NSDictionary)stillImageSupportedHighResolutionFlavorsByPortType
{
  return *(NSDictionary **)&self->_stillImageFusionScheme;
}

- (void)setStillImageSupportedHighResolutionFlavorsByPortType:(id)a3
{
  objc_setProperty_nonatomic(self, a2, a3, 2448);
}

- (BOOL)isStillImageISPChromaNoiseReductionEnabled
{
  return BYTE4(self->_stillImageDispatchQueue);
}

- (void)setStillImageISPChromaNoiseReductionEnabled:(BOOL)a3
{
  BYTE4(self->_stillImageDispatchQueue) = a3;
}

- (BOOL)quadraHighResStillImageCaptureEnabled
{
  return (BOOL)self->_stillImageSupportedHighResolutionFlavorsByPortType;
}

- (void)setQuadraHighResStillImageCaptureEnabled:(BOOL)a3
{
  LOBYTE(self->_stillImageSupportedHighResolutionFlavorsByPortType) = a3;
}

- (BOOL)stillImageGNRHDREnabled
{
  return self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount;
}

- (void)setStillImageGNRHDREnabled:(BOOL)a3
{
  LOBYTE(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount) = a3;
}

- (BOOL)irisFrameHarvestingEnabled
{
  return BYTE1(self->_eagerSwitchingTeleToWideNonDisruptiveSwitchingDelayInFrameCount);
}

- (BOOL)isStillImageISPMultiBandNoiseReductionEnabled
{
  return (BOOL)self->_mostRecentSmartCameraResult;
}

- (BOOL)stillImageFocusPixelDataCaptureWithDepthEnabled
{
  return BYTE2(self->_mostRecentSmartCameraResult);
}

- (BOOL)stillImageSashimiRawCaptureWithDepthEnabled
{
  return BYTE3(self->_mostRecentSmartCameraResult);
}

- (int)numberOfActiveTimeMachines
{
  return HIDWORD(self->_lastSphereMode);
}

- (BOOL)lumaHistogramsEnabled
{
  return BYTE1(self->_regionOfInterestForCameraControlsNormalizedInSensorSpace.size.height);
}

- (BOOL)focusPixelsEnabled
{
  return BYTE1(self->_mostRecentSmartCameraResult);
}

- (CGSize)defaultAutoFocusTapWindowSize
{
  double v2;
  NSMutableDictionary *cinematicVideoFocusRequest;
  CGSize result;

  v2 = *(double *)&self->_cinematicVideoEnabled;
  cinematicVideoFocusRequest = self->_cinematicVideoFocusRequest;
  result.height = *(double *)&cinematicVideoFocusRequest;
  result.width = v2;
  return result;
}

- (void)setDefaultAutoFocusTapWindowSize:(CGSize)a3
{
  *(CGSize *)&self->_cinematicVideoEnabled = a3;
}

- (CGSize)defaultContinuousAutoFocusWindowSize
{
  double width;
  double height;
  CGSize result;

  width = self->_defaultAutoFocusTapWindowSize.width;
  height = self->_defaultAutoFocusTapWindowSize.height;
  result.height = height;
  result.width = width;
  return result;
}

- (void)setDefaultContinuousAutoFocusWindowSize:(CGSize)a3
{
  self->_defaultAutoFocusTapWindowSize = a3;
}

- (int)maxOverscanVideoStabilizationMethod
{
  return LODWORD(self->_defaultContinuousAutoFocusWindowSize.height);
}

- (void)setMaxOverscanVideoStabilizationMethod:(int)a3
{
  LODWORD(self->_defaultContinuousAutoFocusWindowSize.height) = a3;
}

- (BOOL)videoStabilizationModeUsesReducedOverscan
{
  return LOBYTE(self->_cinematicVideoAverageRenderingTime);
}

- (void)setVideoStabilizationModeUsesReducedOverscan:(BOOL)a3
{
  LOBYTE(self->_cinematicVideoAverageRenderingTime) = a3;
}

- (BOOL)adaptiveOverscanEnabled
{
  return BYTE1(self->_cinematicVideoAverageRenderingTime);
}

- (void)setAdaptiveOverscanEnabled:(BOOL)a3
{
  BYTE1(self->_cinematicVideoAverageRenderingTime) = a3;
}

- (float)zoomPIPMinimumUIZoomFactor
{
  return *(float *)&self->_depthFormatDimensions.width;
}

- (float)uiBaseZoomFactor
{
  return *(float *)&self->_depthFormatDimensions.height;
}

- (BOOL)zoomPIPSuspended
{
  return self->_depthPixelFormat;
}

- (BOOL)previewVideoDepthNodeUnprepared
{
  return LOBYTE(self->_zoomPIPMinimumUIZoomFactor);
}

- (void)setPreviewVideoDepthNodeUnprepared:(BOOL)a3
{
  LOBYTE(self->_zoomPIPMinimumUIZoomFactor) = a3;
}

- (NSDictionary)exifFocalLengthsByZoomFactor
{
  return (NSDictionary *)self->_deviceOrientationMonitor;
}

- (void)setExifFocalLengthsByZoomFactor:(id)a3
{
  objc_setProperty_nonatomic(self, a2, a3, 4168);
}

- (BWAdaptiveBracketingController)adaptiveUnifiedBracketingController
{
  return self->_ubAdaptiveBracketingController;
}

- (BOOL)redSaturationMitigationEnabled
{
  return self->_redSaturationMitigationEnabled;
}

- (BOOL)disparityGenerationFromReferenceFramesSupported
{
  return self->_disparityGenerationFromReferenceFramesSupported;
}

- (BWFigVideoCaptureSynchronizedStreamsGroup)synchronizedStreamsGroup
{
  return self->_synchronizedStreamsGroup;
}

- (BOOL)wideCaptureStreamAsStatsMasterPreferred
{
  return self->_wideCaptureStreamAsStatsMasterPreferred;
}

- (int)timeOfFlightCameraType
{
  return self->_systemPressureFactors;
}

- (BOOL)midFrameSynchronizationEnabled
{
  return self->_midFrameSynchronizationEnabled;
}

- ($2825F4736939C4A6D3AD43837233062D)depthFormatDimensions
{
  return *($2825F4736939C4A6D3AD43837233062D *)((char *)&self->_centerStageDelegate + 4);
}

- (unsigned)depthPixelFormat
{
  return self->_centerStageFramingMode;
}

- (BOOL)depthFilteringEnabled
{
  return self->_centerStageMetadataDeliveryEnabled;
}

- (BOOL)allocateResourcesCompatibleWithDepthDataDelivery
{
  return self->_allocateResourcesCompatibleWithDepthDataDelivery;
}

- (void)setAllocateResourcesCompatibleWithDepthDataDelivery:(BOOL)a3
{
  self->_allocateResourcesCompatibleWithDepthDataDelivery = a3;
}

- (BOOL)wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled
{
  return self->_wideDigitalFlashAvailableShallowDepthOfFieldEffectsEnabled;
}

- (BOOL)portraitAutoSuggestEnabled
{
  return self->_portraitAutoSuggestEnabled;
}

- (BOOL)portraitSceneMonitorUsesDisparityStatistics
{
  return self->_portraitSceneMonitorUsesDisparityStatistics;
}

- (BOOL)stereoFusionEnabled
{
  return self->_stereoFusionEnabled;
}

- (BOOL)bravoConstituentPhotoDeliveryEnabled
{
  return self->_bravoConstituentPhotoDeliveryEnabled;
}

- (void)setPreviewTimeMachineProcessor:(id)a3
{
  self->_ptsOfLastFrameForStationaryCheck.epoch = (int64_t)a3;
}

- (int)zeroShutterLagTimeMachineBufferCapacity
{
  return HIDWORD(self->_currentStillSmartCameraResult);
}

- (float)overCapturePercentage
{
  return *(float *)(&self->_lumaHistogramsEnabled + 3);
}

- (BOOL)allocateResourcesCompatibleWithOverCapture
{
  return (BOOL)self->_memoryPool;
}

- (BOOL)overCaptureSuperWideMacroActive
{
  return LOBYTE(self->_previewShiftInSensorSpace.x);
}

- (void)setOverCaptureSuperWideMacroActive:(BOOL)a3
{
  LOBYTE(self->_previewShiftInSensorSpace.x) = a3;
}

- ($3CC8671D27C23BF42ADDB32F2B5E48AE)mostRecentPTS
{
  *($95D729B680665BEAEFA1D6FCA8238556 *)retstr = *($95D729B680665BEAEFA1D6FCA8238556 *)((char *)self + 1264);
  return self;
}

- (BOOL)fullBinSIFROnSecondaryCameraAllowed
{
  return *(&self->_manualCinematicFramingEnabled + 3);
}

- (unsigned)streamingSessionAnalyticsPixelFormat
{
  return *(_DWORD *)&self->_captureInitiatedOnce;
}

- ($2825F4736939C4A6D3AD43837233062D)streamingSessionAnalyticsVideoDimensions
{
  return *($2825F4736939C4A6D3AD43837233062D *)(&self->_captureInitiatedOnce + 4);
}

- (BOOL)streamingSessionAnalyticsHighlightRecoveryEnabled
{
  return BYTE4(self->_exifFocalLengthsByZoomFactor);
}

- (BOOL)streamingSessionAnalyticsClientIsVOIP
{
  return BYTE5(self->_exifFocalLengthsByZoomFactor);
}

- (void)setStreamingSessionAnalyticsClientIsVOIP:(BOOL)a3
{
  BYTE5(self->_exifFocalLengthsByZoomFactor) = a3;
}

- (BOOL)trueVideoCaptureEnabled
{
  return self->_streamingSessionAnalyticsVideoDimensions.width;
}

- (void)setTrueVideoCaptureEnabled:(BOOL)a3
{
  LOBYTE(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (BOOL)rebuildingGraphForTrueVideoTransition
{
  return BYTE1(self->_streamingSessionAnalyticsVideoDimensions.width);
}

- (void)setRebuildingGraphForTrueVideoTransition:(BOOL)a3
{
  BYTE1(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (BOOL)stoppingForTrueVideoTransition
{
  return BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width);
}

- (void)setStoppingForTrueVideoTransition:(BOOL)a3
{
  BYTE2(self->_streamingSessionAnalyticsVideoDimensions.width) = a3;
}

- (float)durationAlreadyWaitedForRecordingStop
{
  return *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height;
}

- (void)setDurationAlreadyWaitedForRecordingStop:(float)a3
{
  *(float *)&self->_streamingSessionAnalyticsVideoDimensions.height = a3;
}

- (void)setDepthDataBaseRotation:(int)a3
{
  *(_DWORD *)&self->_frameSkippingWhenNotRecordingEnabled = a3;
}

- (BOOL)isUltraWideStreamActive
{
  return self->_ultraWideActive;
}

@end
