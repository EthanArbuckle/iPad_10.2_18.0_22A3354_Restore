uint64_t getkCVAFaceTracking_Extrinsics()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr;
  if (!getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_Extrinsics");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Extrinsics_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DepthMetaData()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr;
  if (!getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_DepthMetaData");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_DepthMetaDataSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_DepthMetaData_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA6F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_StructuredLightOccluded()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr;
  if (!getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary();
    v0 = dlsym(v1, "kCVAFaceTracking_StructuredLightOccluded");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_StructuredLightOccludedSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_StructuredLightOccluded_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EA7034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t AppleCVALibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!AppleCVALibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E491FDD0;
    v3 = 0;
    AppleCVALibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!AppleCVALibraryCore_frameworkLibrary)
    AppleCVALibrary_cold_1(&v1);
  return AppleCVALibraryCore_frameworkLibrary;
}

void *cspc_timeOfFlightFormatWithMaximumPoints(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  v5 = 0;
  v6 = *(_QWORD *)v11;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v11 != v6)
        objc_enumerationMutation(a1);
      v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
      if ((int)objc_msgSend(v8, "maxPoints") > v5)
      {
        v5 = objc_msgSend(v8, "maxPoints");
        v4 = v8;
      }
    }
    v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  }
  while (v3);
  return v4;
}

FigPointCloudDataCaptureConnectionConfiguration *cspc_getPointCloudConnectionConfigurationForLiDARDepth(void *a1, void *a2)
{
  FigPointCloudDataCaptureConnectionConfiguration *v4;
  void *v5;
  objc_class *v6;
  uint64_t v7;
  void (*v8)(uint64_t, const __CFString *, _QWORD, id *);
  id v9;
  void *v10;
  uint64_t v11;
  id v13;

  v4 = objc_alloc_init(FigPointCloudDataCaptureConnectionConfiguration);
  -[FigCaptureConnectionConfiguration setSourceConfiguration:](v4, "setSourceConfiguration:", a2);
  -[FigCaptureConnectionConfiguration setUnderlyingDeviceType:](v4, "setUnderlyingDeviceType:", objc_msgSend(a2, "sourceDeviceType"));
  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = (objc_class *)objc_opt_class();
  -[FigCaptureConnectionConfiguration setConnectionID:](v4, "setConnectionID:", objc_msgSend(v5, "stringWithFormat:", CFSTR("<%@: %p>"), NSStringFromClass(v6), v4));
  -[FigCaptureConnectionConfiguration setMediaType:](v4, "setMediaType:", 1885564004);
  v7 = objc_msgSend(a2, "source");
  v13 = 0;
  v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
  {
    v8(v7, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v13);
    v9 = v13;
  }
  else
  {
    v9 = 0;
  }
  v10 = (void *)objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("SupportedTimeOfFlightProjectorModes"));
  if ((objc_msgSend(v10, "containsObject:", &unk_1E49F8DC0) & 1) != 0)
  {
    v11 = 4;
LABEL_8:
    -[FigPointCloudDataCaptureConnectionConfiguration setProjectorMode:](v4, "setProjectorMode:", v11);
    goto LABEL_9;
  }
  if (objc_msgSend(v10, "containsObject:", &unk_1E49F8DD8))
  {
    v11 = 1;
    goto LABEL_8;
  }
LABEL_9:

  -[FigVideoCaptureConnectionConfiguration setOrientation:](v4, "setOrientation:", objc_msgSend(a1, "orientation"));
  -[FigVideoCaptureConnectionConfiguration setOutputWidth:](v4, "setOutputWidth:", objc_msgSend(a1, "outputWidth"));
  -[FigVideoCaptureConnectionConfiguration setOutputHeight:](v4, "setOutputHeight:", objc_msgSend(a1, "outputHeight"));
  -[FigVideoCaptureConnectionConfiguration setMirroringEnabled:](v4, "setMirroringEnabled:", objc_msgSend(a1, "mirroringEnabled"));
  -[FigCaptureConnectionConfiguration setSinkConfiguration:](v4, "setSinkConfiguration:", objc_msgSend(a1, "sinkConfiguration"));
  return v4;
}

void __adsie_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWJasperColorStillsExecutorController _serviceNextRequest](a2);
  objc_autoreleasePoolPop(v3);
}

void __adsie_createStateMachine_block_invoke_3(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  if (a2)
    objc_msgSend(*(id *)(a2 + 96), "setErr:", -[BWJasperColorStillsExecutorController _setupJasperColorStillsExecutor](a2));
  objc_autoreleasePoolPop(v3);
}

void __adsie_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWJasperColorStillsExecutorController _execute](a2);
  objc_autoreleasePoolPop(v3);
}

void FigCapturePreloadShaders()
{
  FigCapturePreloadShadersInternal(0);
}

void FigCapturePreloadShadersInternal(int a1)
{
  FigCaptureFlatPlist *v1;
  void *v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  char *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  id v35;
  int v36;
  dispatch_qos_class_t v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  int CFPreferenceNumberWithDefault;
  id obj;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD block[5];
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  v1 = FigCaptureCFCreatePropertyList((uint64_t)CFSTR("AVCaptureSession.plist"));
  v2 = (void *)-[FigCaptureFlatPlist objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceCommonSettings"));
  v3 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("BackgroundBlurSupported")), "BOOLValue");
  v4 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("StudioLightingSupported")), "BOOLValue");
  v5 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("ReactionEffectsSupported")), "BOOLValue");
  sDeviceUsesAnyVideoEffect = v3 | v4 | v5 | objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("BackgroundReplacementSupported")), "BOOLValue");
  sDeviceSWFRVersion = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("SWFRVersion")), "intValue");
  smartStyleVersion = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("SmartStyleRenderingVersion")), "intValue");
  constantColorVersion = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("ColorConstancyVersion")), "intValue");
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  obj = (id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v1, "objectForKeyedSubscript:", CFSTR("AVCaptureDevices"));
  v45 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
  if (v45)
  {
    v44 = *(_QWORD *)v55;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v55 != v44)
          objc_enumerationMutation(obj);
        v46 = v6;
        v7 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * v6);
        v8 = (void *)objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceFormats"));
        v9 = (void *)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("stillImageNoiseReductionAndFusionScheme"));
        v10 = objc_msgSend(v9, "intValue");
        v11 = &sDeviceUsesUBProcessor;
        if (v10 == 3 || (v11 = &sDeviceUsesNRFProcessor, v10 > 3))
        {
          *v11 = 1;
          goto LABEL_9;
        }
        if (v9)
        {
          v12 = v10;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v13 = (void *)objc_msgSend(v8, "allValues");
          v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
          if (v14)
          {
            v15 = v14;
            v16 = *(_QWORD *)v51;
            do
            {
              v17 = 0;
              do
              {
                if (*(_QWORD *)v51 != v16)
                  objc_enumerationMutation(v13);
                v18 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v17);
                if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938198), "BOOLValue"))
                {
                  v19 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E49381B8), "BOOLValue");
                  v20 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E49381F8), "BOOLValue");
                  switch(v12)
                  {
                    case 2:
                      sDeviceUsesGNRSampleBufferProcessor = 1;
                      if (((v19 ^ 1 | v20) & 1) == 0)
                        goto LABEL_24;
                      break;
                    case 1:
                      sDeviceUsesTMBNRSampleBufferProcessor = 1;
                      if ((v19 & 1) == 0)
                        break;
LABEL_24:
                      sDeviceUsesHDRSampleBufferProcessor = 1;
                      break;
                    case 0:
                      sDeviceUsesSISSampleBufferProcessor = 1;
                      if ((v19 & 1) != 0)
                        goto LABEL_24;
                      break;
                  }
                }
                if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938218), "BOOLValue"))sDeviceUsesStereoFusionSampleBufferProcessor = 1;
                ++v17;
              }
              while (v15 != v17);
              v21 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
              v15 = v21;
            }
            while (v21);
          }
        }
LABEL_9:
        v6 = v46 + 1;
      }
      while (v46 + 1 != v45);
      v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
      v45 = v22;
    }
    while (v22);
  }
  v23 = (void *)-[FigCaptureFlatPlist objectForKeyedSubscript:](FigCaptureCFCreatePropertyList((uint64_t)CFSTR("AVCaptureSession.plist")), "objectForKeyedSubscript:", CFSTR("AVCaptureDevices"));
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v47 = v23;
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v55 != v26)
          objc_enumerationMutation(v47);
        v28 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i), "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceFormats"));
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v29 = (void *)objc_msgSend(v28, "allValues");
        v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v51;
          while (2)
          {
            for (j = 0; j != v31; ++j)
            {
              if (*(_QWORD *)v51 != v32)
                objc_enumerationMutation(v29);
              if (sPocketDetectionSupported)
              {
                sPocketDetectionSupported = 1;
                goto LABEL_50;
              }
              v34 = objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * j), "objectForKeyedSubscript:", 0x1E4938858);
              sPocketDetectionSupported = v34 != 0;
              if (v34)
                goto LABEL_50;
            }
            v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v50, v58, 16);
            if (v31)
              continue;
            break;
          }
        }
LABEL_50:
        ;
      }
      v25 = objc_msgSend(v47, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
    }
    while (v25);
  }
  if (sDeviceUsesHDRSampleBufferProcessor == 1)
  {
    if (nonThreadSafeVideoProcessorsPreloadOperationQueue)
      FigCaptureWaitForPreloadShadersCompletion();
    v35 = objc_alloc_init(MEMORY[0x1E0CB3828]);
    nonThreadSafeVideoProcessorsPreloadOperationQueue = (uint64_t)v35;
    if (!v35)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return;
    }
    objc_msgSend(v35, "addOperationWithBlock:", &__block_literal_global_33);
    if (a1)
      FigCaptureWaitForPreloadShadersCompletion();
  }
  v36 = DMIsMigrationNeeded();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCapturePreloadShadersInternal_block_invoke_2;
  block[3] = &__block_descriptor_41_e5_v8__0l;
  v49 = v36;
  block[4] = CFPreferenceNumberWithDefault;
  if (v36)
    v37 = QOS_CLASS_DEFAULT;
  else
    v37 = QOS_CLASS_UTILITY;
  v38 = dispatch_queue_attr_make_with_qos_class(0, v37, 0);
  v39 = dispatch_queue_create("com.apple.coremedia.precompilation", v38);
  v40 = v39;
  if (a1)
  {
    dispatch_sync(v39, block);
    if (!v40)
      return;
  }
  else
  {
    dispatch_async(v39, block);
    if (!v40)
      return;
  }
  dispatch_release(v40);
}

void FigCaptureWaitForPreloadShadersCompletion()
{
  id v0;

  os_unfair_lock_lock(&nonThreadSafeVideoProcessorsPreloadOperationQueueLock);
  v0 = (id)nonThreadSafeVideoProcessorsPreloadOperationQueue;
  os_unfair_lock_unlock(&nonThreadSafeVideoProcessorsPreloadOperationQueueLock);
  objc_msgSend(v0, "waitUntilAllOperationsAreFinished");

}

uint64_t FigWaitForDeferredShaderCacheCopyCompletion()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigWaitForDeferredShaderCacheCopyCompletion_block_invoke;
  block[3] = &unk_1E491EC40;
  block[4] = &v3;
  if (FigWaitForDeferredShaderCacheCopyCompletion_onceToken != -1)
    dispatch_once(&FigWaitForDeferredShaderCacheCopyCompletion_onceToken, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t gl_UtilsCreateShader(GLenum a1, GLchar *a2)
{
  uint64_t Shader;
  uint64_t v3;
  GLint params;
  GLchar *string;

  string = a2;
  Shader = glCreateShader(a1);
  v3 = Shader;
  if ((_DWORD)Shader)
  {
    params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

uint64_t BWInferenceTextureStorageEntrySize()
{
  return 1;
}

void BWInferenceTextureStorageEntryRelinquish(id *a1)
{

  free(a1);
}

uint64_t BWCaptureIsRunningInIOSAppOnMacEnvironment()
{
  if (BWCaptureIsRunningInIOSAppOnMacEnvironment_onceToken != -1)
    dispatch_once(&BWCaptureIsRunningInIOSAppOnMacEnvironment_onceToken, &__block_literal_global_34);
  return BWCaptureIsRunningInIOSAppOnMacEnvironment_isIOSAppOnMac;
}

uint64_t BWCaptureIsRunningInMacCatalystEnvironment()
{
  if (BWCaptureIsRunningInMacCatalystEnvironment_once != -1)
    dispatch_once(&BWCaptureIsRunningInMacCatalystEnvironment_once, &__block_literal_global_1);
  return BWCaptureIsRunningInMacCatalystEnvironment_isCatalystApp;
}

uint64_t BWOSTypeForString(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  v2 = objc_msgSend(a1, "length");
  if (v2 >= 4)
    v3 = 4;
  else
    v3 = v2;
  objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", (char *)&v5 - v3 + 4, 0, v3, 0);
  return bswap32(v5);
}

uint64_t BWDeviceModelIsD9x()
{
  return objc_msgSend(&unk_1E4A00668, "containsObject:", FigCaptureGetModelSpecificName());
}

BOOL BWDeviceSupportsDeferredPhotoProcessorPrewarming()
{
  if (BWDeviceIsiPhone_onceToken != -1)
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_39_0);
  if (!BWDeviceIsiPhone_isiPhone)
    return 0;
  if ((objc_msgSend(&unk_1E4A00680, "containsObject:", FigCaptureGetModelSpecificName()) & 1) != 0)
    return 1;
  return (int)FigCapturePlatformIdentifier() > 9;
}

uint64_t BWDeviceSupportsCoreMediaFaceTracking()
{
  if (BWDeviceIsiPhone_onceToken != -1)
    dispatch_once(&BWDeviceIsiPhone_onceToken, &__block_literal_global_39_0);
  if (!BWDeviceIsiPhone_isiPhone)
    return 0;
  if ((int)FigCapturePlatformIdentifier() <= 9)
    return objc_msgSend(&unk_1E4A00698, "containsObject:", FigCaptureGetModelSpecificName());
  return 1;
}

const __CFString *BWStringFromCGRect(double a1, double a2, double a3, double a4)
{
  if (CGRectIsNull(*(CGRect *)&a1))
    return CFSTR("CGRectNull");
  else
    return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{{%g, %g}, {%g, %g}}"), *(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

const __CFString *BWStringFromCGRectDict(const __CFDictionary *a1)
{
  CGSize v1;
  CGRect rect;

  v1 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.size = v1;
  if (!a1)
    return CFSTR("{nil}");
  if (CGRectMakeWithDictionaryRepresentation(a1, &rect))
    return BWStringFromCGRect(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{not a valid CGRect dictionary}:%@"), a1);
}

uint64_t BWStringFromCGRectMidPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double v4;
  uint64_t v5;

  v4 = FigCaptureRectMidPoint(a1, a2, a3, a4);
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%g, %g}"), *(_QWORD *)&v4, v5);
}

uint64_t BWStringFromCGRectDictMidPoint(const __CFDictionary *a1)
{
  CGSize v1;
  double v2;
  uint64_t v3;
  CGRect rect;

  v1 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  rect.size = v1;
  CGRectMakeWithDictionaryRepresentation(a1, &rect);
  v2 = FigCaptureRectMidPoint(rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{%g, %g}"), *(_QWORD *)&v2, v3);
}

const __CFString *BWStringFromPixelBuffer(__CVBuffer *a1)
{
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  const __CFString *v6;
  unsigned int v8;
  signed int v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  if (!a1)
    return CFSTR("<CVPixelBuffer NULL>");
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  extraColumnsOnRight = 0;
  extraColumnsOnLeft = 0;
  extraRowsOnBottom = 0;
  extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  if (extraColumnsOnLeft + Width + extraColumnsOnRight == Width
    && extraRowsOnTop + Height + extraRowsOnBottom == Height)
  {
    v6 = &stru_1E4928818;
  }
  else
  {
    v6 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" (%lux%lu)"), extraColumnsOnLeft + Width + extraColumnsOnRight, extraRowsOnTop + Height + extraRowsOnBottom);
  }
  if (!FigCapturePixelFormatIsVersatileRaw(PixelFormatType))
    return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<CVPixelBuffer %p> %lux%lu%@, '%@'"), a1, Width, Height, v6, BWStringFromCVPixelFormatType(PixelFormatType), v12);
  v8 = objc_msgSend((id)(id)CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA90D8], 0), "intValue");
  v9 = FigCaptureVersatileRawPatternForVersatileBayerPattern(v8);
  v10 = (void *)MEMORY[0x1E0CB3940];
  v11 = BWStringFromCVPixelFormatType(PixelFormatType);
  return (const __CFString *)objc_msgSend(v10, "stringWithFormat:", CFSTR("<CVPixelBuffer %p> %lux%lu%@, versatile RAW format '%@', pattern '%@'"), a1, Width, Height, v6, v11, BWStringFromCVPixelFormatType(v9));
}

const __CFString *BWStringFromSurface(__IOSurface *a1)
{
  size_t Width;
  size_t Height;
  void *v4;
  OSType PixelFormat;
  const __CFString *v6;

  if (!a1)
    return CFSTR("<IOSurface NULL>");
  Width = IOSurfaceGetWidth(a1);
  Height = IOSurfaceGetHeight(a1);
  IOSurfaceGetExtendedPixelsOfPlane();
  v4 = (void *)MEMORY[0x1E0CB3940];
  PixelFormat = IOSurfaceGetPixelFormat(a1);
  v6 = BWStringFromCVPixelFormatType(PixelFormat);
  return (const __CFString *)objc_msgSend(v4, "stringWithFormat:", CFSTR("<IOSurface %p> %lux%lu%@, '%@' ID:%u"), a1, Width, Height, &stru_1E4928818, v6, IOSurfaceGetID(a1));
}

const __CFString *BWStringFromPixelBufferSurface(__CVBuffer *a1)
{
  __IOSurface *IOSurface;

  if (!a1)
    return CFSTR("<CVPixelBuffer/IOSurface NULL>");
  IOSurface = CVPixelBufferGetIOSurface(a1);
  return BWStringFromSurface(IOSurface);
}

BOOL BWAudioCaptureModeIsSpatial(int a1)
{
  return (a1 - 1) < 2;
}

const __CFString *BWStringFromFigCaptureSourceDeviceTypes(void *a1)
{
  void *v2;
  unint64_t v3;

  if (!objc_msgSend(a1, "count"))
    return &stru_1E4928818;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  if (objc_msgSend(a1, "count"))
  {
    v3 = 0;
    do
    {
      if (v3)
        objc_msgSend(v2, "appendString:", CFSTR("+"));
      objc_msgSend(v2, "appendString:", BWStringFromCaptureDeviceType(objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v3++), "intValue")));
    }
    while (objc_msgSend(a1, "count") > v3);
  }
  return (const __CFString *)v2;
}

BOOL BWCIFilterArrayOnlyContainsPortraitFilters(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(a1);
        NSClassFromString(CFSTR("CIDepthEffect"));
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(CFSTR("CIPortraitEffect"));
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(CFSTR("CIPortraitEffectV2"));
            if ((objc_opt_isKindOfClass() & 1) == 0)
              return 0;
          }
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
  return objc_msgSend(a1, "count") != 0;
}

uint64_t BWCIFilterArrayContainsFiltersRequiringSegmentation(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(a1);
        NSClassFromString(CFSTR("CIPortraitEffectStudioV2"));
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(CFSTR("CIPortraitEffectContourV2"));
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            NSClassFromString(CFSTR("CIPortraitEffectStageV2"));
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              NSClassFromString(CFSTR("CIPortraitEffectStageMonoV2"));
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                NSClassFromString(CFSTR("CIPortraitEffectStageWhite"));
                if ((objc_opt_isKindOfClass() & 1) == 0)
                  continue;
              }
            }
          }
        }
        return 1;
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      result = 0;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

uint64_t BWCIFilterArrayContainsPortraitEffectStageFilters(void *a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(a1);
        NSClassFromString(CFSTR("CIPortraitEffectStageMonoV2"));
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(CFSTR("CIPortraitEffectStageWhite"));
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            if ((a2 & 1) != 0)
              continue;
            NSClassFromString(CFSTR("CIPortraitEffectStageV2"));
            if ((objc_opt_isKindOfClass() & 1) == 0)
              continue;
          }
        }
        return 1;
      }
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      result = 0;
      if (v5)
        continue;
      break;
    }
  }
  return result;
}

uint64_t BWCIFilterArrayContainsPortraitEffectFilters(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(a1);
        NSClassFromString(CFSTR("CIPortraitEffect"));
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          NSClassFromString(CFSTR("CIPortraitEffectV2"));
          if ((objc_opt_isKindOfClass() & 1) == 0)
            continue;
        }
        return 1;
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      result = 0;
      if (v3)
        continue;
      break;
    }
  }
  return result;
}

uint64_t BWSemanticSegmentationMatteAttachedMediaKeysSupportedByDemosaicedRaw()
{
  _QWORD v1[4];

  v1[3] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("PersonSemanticsSkin");
  v1[1] = 0x1E495B0B8;
  v1[2] = 0x1E495AF38;
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 3);
}

void *BWAttachedMediaKeysRequiredBySmartStyleRenderingPipelines(int a1, int a2)
{
  void *v4;
  _QWORD v6[4];
  _QWORD v7[4];

  v7[3] = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a1)
  {
    v7[0] = 0x1E495B3B8;
    v7[1] = 0x1E495B358;
    v7[2] = 0x1E494FBD8;
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 3));
  }
  if (a2)
  {
    v6[0] = CFSTR("HumanFullBodiesMask");
    v6[1] = CFSTR("HumanSkinsMask");
    v6[2] = 0x1E495B218;
    v6[3] = 0x1E495B3F8;
    objc_msgSend(v4, "addObjectsFromArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 4));
  }
  return v4;
}

uint64_t BWAttachedMediaKeysAvailableOnSmartStyleLearnedFramesOnly()
{
  _QWORD v1[5];

  v1[4] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("HumanFullBodiesMask");
  v1[1] = CFSTR("HumanSkinsMask");
  v1[2] = 0x1E495B218;
  v1[3] = 0x1E495B358;
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 4);
}

double BWSmartStyleLearningMaxFrameRate()
{
  void *v0;
  void *v1;
  double v2;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0D08AC0], "configurationForVariant:", 0);
  v1 = (void *)objc_msgSend(MEMORY[0x1E0D08AC0], "tuningParametersForVariant:", 0);
  if ((int)objc_msgSend(v1, "learningRate") < 1)
    v2 = 1.0;
  else
    v2 = (double)(int)objc_msgSend(v1, "learningRate");
  return (double)(unint64_t)objc_msgSend(v0, "learningRateMaxFramesPerSecond") / v2;
}

uint64_t BWSmartStyleRenderingShouldBeBypassed(const void *a1)
{
  const void *AttachedMedia;
  void *v2;

  AttachedMedia = (const void *)BWSampleBufferGetAttachedMedia(a1, 0x1E495B358);
  if (AttachedMedia && (v2 = (void *)CMGetAttachment(AttachedMedia, (CFStringRef)*MEMORY[0x1E0D05CB0], 0)) != 0)
    return objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D060C8]), "BOOLValue");
  else
    return 0;
}

BOOL BWSampleBufferContainsDepthAttachedMedia(const void *a1)
{
  return BWSampleBufferGetAttachedMedia(a1, (uint64_t)CFSTR("Depth")) != 0;
}

uint64_t BWSampleBufferContainsSemanticSegmentationMatteAttachedMediaSupportedByDemosaicedRaw(const void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12[0] = CFSTR("PersonSemanticsSkin");
  v12[1] = 0x1E495B0B8;
  v12[2] = 0x1E495AF38;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 3, 0);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        if (BWSampleBufferGetAttachedMedia(a1, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6)))
          return 1;
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

BOOL BWColorSpaceIsHDR(int a1)
{
  return ((a1 - 2) & 0xFFFFFFFD) == 0;
}

uint64_t BWMTLCommandBufferStatusToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu"), a1);
}

uint64_t BWLoadCreateAndSetupMetalImageBufferProcessor(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v30;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if ((_DWORD)a5)
    v16 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@ProcessorV%d"), a3, a4, a5);
  else
    v16 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@Processor"), a3, a4, v30);
  v17 = v16;
  v18 = a4;
  v19 = BWLoadProcessorBundle(a1, a2);
  if (!v19)
  {
    v21 = 0;
    goto LABEL_29;
  }
  v20 = objc_alloc_init((Class)objc_msgSend(v19, "classNamed:", v17));
  v21 = v20;
  if (!v20)
  {
LABEL_29:
    v28 = 4294954510;
    goto LABEL_30;
  }
  if (!objc_msgSend(v20, "conformsToProtocol:", a6))
  {
LABEL_27:
    v28 = 4294954516;
    goto LABEL_30;
  }
  if (a7)
  {
    v22 = BWProcessorTuningParametersWithStandardStructure(v18, a5, a8);
    if (v22)
    {
      objc_msgSend(v21, "setTuningParameters:", v22);
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_10:
  if (objc_msgSend(a8, "count"))
    v23 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  else
    v23 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v24 = objc_msgSend(a8, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v25; ++i)
      {
        if (*(_QWORD *)v35 != v26)
          objc_enumerationMutation(a8);
        objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(a8, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i)), "cameraInfo"), *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i));
      }
      v25 = objc_msgSend(a8, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    }
    while (v25);
  }
  if (objc_msgSend(v23, "count"))
    objc_msgSend(v21, "setCameraInfoByPortType:", (id)objc_msgSend(v23, "copy"));
  objc_msgSend(v21, "setMetalCommandQueue:", a9);
  if (a10 && (*(unsigned int (**)(uint64_t, void *))(a10 + 16))(a10, v21)
    || objc_msgSend(v21, "setup"))
  {
    goto LABEL_27;
  }
  v28 = 0;
  if (!a11)
  {
LABEL_30:

    return v28;
  }
  *a11 = v21;
  return v28;
}

uint64_t BWStandardProcessorNameForBundleBaseName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if ((_DWORD)a3)
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@ProcessorV%d"), a1, a2, a3);
  else
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@Processor"), a1, a2, v4);
}

id BWProcessorTuningParametersWithStandardStructure(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a1 && (_DWORD)a2 && (v5 = a3) != 0)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v20 != v9)
            objc_enumerationMutation(v5);
          v11 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i);
          v12 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", v11);
          v13 = objc_msgSend((id)objc_msgSend(v12, "sensorIDDictionary"), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@Parameters"), a1));
          v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@V%d"), a1, a2);
          v15 = (void *)v13;
          v5 = a3;
          objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(v15, "objectForKeyedSubscript:", v14), v11);
        }
        v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      }
      while (v8);
    }
    if (objc_msgSend(v6, "count"))
      v16 = (id)objc_msgSend(v6, "copy");
    else
      v16 = 0;

  }
  else
  {
    FigDebugAssert3();
    return 0;
  }
  return v16;
}

uint64_t BWLoadCreateSetupAndPrepareMetalImageBufferProcessor(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, _QWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  id v16;

  v16 = 0;
  v13 = BWLoadCreateAndSetupMetalImageBufferProcessor(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v16);
  if ((_DWORD)v13)
  {
    v14 = v13;
    FigDebugAssert3();
    goto LABEL_9;
  }
  if (a11 && (*(unsigned int (**)(uint64_t, id))(a11 + 16))(a11, v16)
    || objc_msgSend(v16, "prepareToProcess:", a12))
  {
    v14 = 4294954516;
    goto LABEL_9;
  }
  v14 = 0;
  if (!a13)
  {
LABEL_9:

    return v14;
  }
  *a13 = v16;
  return v14;
}

uint64_t BWBuildVideoTrackMatrix(int a1, int a2, unsigned int a3, int a4, int a5, char a6, uint64_t a7)
{
  uint64_t result;
  _OWORD *v13;
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat v18;
  CGFloat v19;
  CGFloat tx;
  CGFloat ty;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v39;
  __int128 v40;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v47;
  _QWORD v48[11];

  v48[9] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = 0;
  if ((a2 & a3 & 1) == 0 && (_DWORD)a7 && HIDWORD(a7))
  {
    v13 = (_OWORD *)MEMORY[0x1E0C9BAA8];
    a = *MEMORY[0x1E0C9BAA8];
    b = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
    c = *(double *)(MEMORY[0x1E0C9BAA8] + 16);
    d = *(double *)(MEMORY[0x1E0C9BAA8] + 24);
    v18 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
    v19 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
    if (a2)
    {
      CGAffineTransformMakeScale(&t2, -1.0, 1.0);
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v18;
      t1.ty = v19;
      CGAffineTransformConcat(&v47, &t1, &t2);
      v36 = *(_OWORD *)&v47.c;
      v37 = *(_OWORD *)&v47.a;
      tx = v47.tx;
      ty = v47.ty;
      CGAffineTransformMakeTranslation(&v44, (double)(int)a7, 0.0);
      *(_OWORD *)&t1.a = v37;
      *(_OWORD *)&t1.c = v36;
      t1.tx = tx;
      t1.ty = ty;
      CGAffineTransformConcat(&v47, &t1, &v44);
      a = v47.a;
      b = v47.b;
      c = v47.c;
      d = v47.d;
      v18 = v47.tx;
      v19 = v47.ty;
    }
    v22 = FigCaptureRotationDegreesFromOrientation(a1, a4, a5, a2 | a3);
    v23 = (double)SHIDWORD(a7);
    if (v22 == 90)
      v24 = (double)SHIDWORD(a7);
    else
      v24 = 0.0;
    if (v22 == 180)
      v24 = (double)(int)a7;
    else
      v23 = 0.0;
    if (v22 == 270)
      v25 = 0.0;
    else
      v25 = v24;
    if (v22 == 270)
      v26 = (double)(int)a7;
    else
      v26 = v23;
    CGAffineTransformMakeRotation(&v43, (double)v22 * 3.14159265 / 180.0);
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = v18;
    t1.ty = v19;
    CGAffineTransformConcat(&v47, &t1, &v43);
    v39 = *(_OWORD *)&v47.c;
    v40 = *(_OWORD *)&v47.a;
    v27 = v47.tx;
    v28 = v47.ty;
    CGAffineTransformMakeTranslation(&v42, v25, v26);
    *(_OWORD *)&t1.a = v40;
    *(_OWORD *)&t1.c = v39;
    t1.tx = v27;
    t1.ty = v28;
    CGAffineTransformConcat(&v47, &t1, &v42);
    v30 = v47.a;
    v29 = v47.b;
    v32 = v47.c;
    v31 = v47.d;
    v34 = v47.tx;
    v33 = v47.ty;
    if ((a6 & 1) != 0
      || (v35 = v13[1],
          *(_OWORD *)&t1.a = *v13,
          *(_OWORD *)&t1.c = v35,
          *(_OWORD *)&t1.tx = v13[2],
          !CGAffineTransformEqualToTransform(&v47, &t1)))
    {
      v48[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v30, v36, v37);
      v48[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v29);
      v48[2] = &unk_1E4A02430;
      v48[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v32);
      v48[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v31);
      v48[5] = &unk_1E4A02430;
      v48[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v34);
      v48[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v33);
      v48[8] = &unk_1E4A02440;
      return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BWRowMajorArrayFrom3x3Matrix(__n128 a1, __n128 a2, __n128 a3)
{
  double v3;
  double v4;
  double v5;
  _QWORD v10[10];

  v10[9] = *MEMORY[0x1E0C80C00];
  v10[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
  v10[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2.n128_f64[0]);
  v10[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3.n128_f64[0]);
  HIDWORD(v3) = a1.n128_u32[1];
  LODWORD(v3) = a1.n128_u32[1];
  v10[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v3);
  HIDWORD(v4) = a2.n128_u32[1];
  LODWORD(v4) = a2.n128_u32[1];
  v10[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4);
  HIDWORD(v5) = a3.n128_u32[1];
  LODWORD(v5) = a3.n128_u32[1];
  v10[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v10[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a1.n128_u32[1], a1.n128_u32[2])));
  v10[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a2.n128_u32[1], a2.n128_u32[2])));
  v10[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(a3.n128_u32[1], a3.n128_u32[2])));
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 9);
}

uint64_t BWScalePixelBuffer(__CVBuffer *a1, __CVBuffer *a2, OpaqueVTPixelTransferSession *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  VTPixelTransferSessionRef v11;
  const __CFDictionary *v22;
  const void *v23;
  VTPixelTransferSessionRef v24;
  size_t Width;
  size_t Height;
  uint64_t v27;
  const __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  _QWORD v38[4];
  _QWORD v39[5];
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v11 = a3;
  v39[4] = *MEMORY[0x1E0C80C00];
  pixelTransferSessionOut = a3;
  if (CGRectIsNull(*(CGRect *)&a4))
  {
    v22 = 0;
  }
  else
  {
    v40.origin.x = a4;
    v40.origin.y = a5;
    v40.size.width = a6;
    v40.size.height = a7;
    v22 = CGRectCreateDictionaryRepresentation(v40);
    if (!v22)
    {
      FigDebugAssert3();
      return 4294954516;
    }
  }
  v41.origin.x = a8;
  v41.origin.y = a9;
  v41.size.width = a10;
  v41.size.height = a11;
  if (CGRectIsNull(v41))
  {
    v23 = 0;
    if (v11)
    {
LABEL_6:
      v24 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    Width = CVPixelBufferGetWidth(a2);
    Height = CVPixelBufferGetHeight(a2);
    v42.origin.x = a8;
    v42.origin.y = a9;
    v42.size.width = a10;
    v42.size.height = a11;
    LODWORD(Width) = llround(CGRectGetMidX(v42) - (double)Width * 0.5);
    v43.origin.x = a8;
    v43.origin.y = a9;
    v43.size.width = a10;
    v43.size.height = a11;
    LODWORD(Height) = llround(CGRectGetMidY(v43) - (double)Height * 0.5);
    v38[0] = *MEMORY[0x1E0CA8D48];
    v39[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", Width);
    v38[1] = *MEMORY[0x1E0CA8D58];
    v39[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", Height);
    v38[2] = *MEMORY[0x1E0CA8D60];
    v39[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a10);
    v38[3] = *MEMORY[0x1E0CA8D40];
    v39[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a11);
    v23 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 4);
    if (v11)
      goto LABEL_6;
  }
  v27 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut);
  if ((_DWORD)v27)
  {
    v30 = v27;
    FigDebugAssert3();
    return v30;
  }
  v11 = pixelTransferSessionOut;
  v24 = pixelTransferSessionOut;
LABEL_10:
  v28 = (const __CFString *)*MEMORY[0x1E0CED850];
  if (v22)
  {
    v29 = VTSessionSetProperty(v11, v28, v22);
    if ((_DWORD)v29)
    {
      v30 = v29;
      goto LABEL_31;
    }
  }
  else
  {
    v31 = VTSessionSetProperty(v11, v28, 0);
    if ((_DWORD)v31)
    {
      v30 = v31;
      goto LABEL_31;
    }
  }
  if (v23)
  {
    v32 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED7B8], v23);
    if ((_DWORD)v32)
    {
      v30 = v32;
      goto LABEL_31;
    }
    v33 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]);
    if ((_DWORD)v33)
    {
      v30 = v33;
      goto LABEL_31;
    }
    v34 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED868], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    if ((_DWORD)v34)
    {
      v30 = v34;
      goto LABEL_31;
    }
  }
  else
  {
    v35 = VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB40]);
    if ((_DWORD)v35)
    {
      v30 = v35;
      goto LABEL_31;
    }
  }
  v30 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, a1, a2);
  if ((_DWORD)v30)
  {
LABEL_31:
    FigDebugAssert3();
    if (!v24)
      return v30;
    goto LABEL_22;
  }
  if (v24)
LABEL_22:
    CFRelease(v24);
  return v30;
}

uint64_t BWCreateIOSurfaceBackedCVPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, CVPixelBufferRef *a4, __CFString *a5)
{
  uint64_t IOSurfaceBackedCVPixelBufferWithAttributes;
  __IOSurface *IOSurface;
  const __CFString *v9;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  if (FigCapturePlatformIOSurfaceWiringAssertionEnabled())
  {
    v11 = *MEMORY[0x1E0CA9000];
    v12[0] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  }
  IOSurfaceBackedCVPixelBufferWithAttributes = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
  IOSurface = CVPixelBufferGetIOSurface(*a4);
  if (-[__CFString length](a5, "length"))
    v9 = a5;
  else
    v9 = CFSTR("CMCapture: unnamed");
  IOSurfaceSetValue(IOSurface, (CFStringRef)*MEMORY[0x1E0CBC048], v9);
  return IOSurfaceBackedCVPixelBufferWithAttributes;
}

unint64_t BWPixelBufferDimensionsFromSampleBuffer(opaqueCMSampleBuffer *a1)
{
  __CVBuffer *ImageBuffer;
  __CVBuffer *v2;
  unsigned int Width;

  if (!a1)
    return 0;
  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (!ImageBuffer)
    return 0;
  v2 = ImageBuffer;
  Width = CVPixelBufferGetWidth(ImageBuffer);
  return Width | ((unint64_t)CVPixelBufferGetHeight(v2) << 32);
}

unint64_t BWExtendDimensionsToConformToAlignmentRequirements(unint64_t a1, int a2, int a3)
{
  unint64_t v4;
  unsigned int v5;

  v4 = HIDWORD(a1);
  v5 = FigCaptureCeilFloatToMultipleOf(a2, (float)(int)a1);
  return v5 | (unint64_t)(FigCaptureCeilFloatToMultipleOf(a3, (float)(int)v4) << 32);
}

uint64_t BWStringFromDimensions(unint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%dx%d"), a1, HIDWORD(a1));
}

uint64_t BWUnderlyingDeviceTypesForCompositeDeviceType(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = v2;
  switch((int)a1)
  {
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
      goto LABEL_3;
    case 4:
      v6 = &unk_1E49F8E68;
      goto LABEL_10;
    case 6:
      v7 = &unk_1E49F8E68;
      goto LABEL_12;
    case 8:
      objc_msgSend(v2, "addObject:", &unk_1E49F8E68);
      v4 = &unk_1E49F8E98;
      goto LABEL_3;
    case 9:
      objc_msgSend(v2, "addObject:", &unk_1E49F8E68);
      v6 = &unk_1E49F8E98;
LABEL_10:
      objc_msgSend(v3, "addObject:", v6);
      v4 = &unk_1E49F8E80;
      goto LABEL_3;
    case 12:
      v7 = &unk_1E49F8EC8;
LABEL_12:
      objc_msgSend(v2, "addObject:", v7);
      v4 = &unk_1E49F8EB0;
      goto LABEL_3;
    case 13:
      objc_msgSend(v2, "addObject:", &unk_1E49F8E68);
      v4 = &unk_1E49F8EE0;
LABEL_3:
      objc_msgSend(v3, "addObject:", v4);
      break;
    default:
      break;
  }
  if (!objc_msgSend(v3, "count"))
    objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown composite device type %d.  Does not align with device types"), a1), 0));
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v3);
}

uint64_t BWGetDiskCapacityInGB()
{
  if (BWGetDiskCapacityInGB_onceToken != -1)
    dispatch_once(&BWGetDiskCapacityInGB_onceToken, &__block_literal_global_250);
  return BWGetDiskCapacityInGB_sDiskCapacityInGB;
}

uint64_t BWGetDataCapacityInBytes()
{
  if (BWGetDataCapacityInBytes_onceToken != -1)
    dispatch_once(&BWGetDataCapacityInBytes_onceToken, &__block_literal_global_253);
  return BWGetDataCapacityInBytes_sDataCapacityInBytes;
}

uint64_t BWGetFreeDiskSpaceAtPath(const char *a1)
{
  statfs v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  memset(&v2, 0, 512);
  if (!statfs(a1, &v2))
    return v2.f_bavail * v2.f_bsize;
  __error();
  return 0;
}

uint64_t BWGetCurrentTotalNANDReadAndWriteBytes(uint64_t *a1, uint64_t *a2)
{
  mach_port_t v4;
  const __CFDictionary *v5;
  uint64_t MatchingServices;
  io_object_t v7;
  io_registry_entry_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  io_iterator_t existing;

  existing = 0;
  v4 = *MEMORY[0x1E0CBBAA8];
  v5 = IOServiceMatching("IONVMeController");
  MatchingServices = IOServiceGetMatchingServices(v4, v5, &existing);
  if ((_DWORD)MatchingServices || !existing)
  {
    FigDebugAssert3();
  }
  else
  {
    v16 = a1;
    v17 = a2;
    v18 = MatchingServices;
    v7 = IOIteratorNext(existing);
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v12 = (void *)IORegistryEntrySearchCFProperty(v8, "IOService", CFSTR("Physical Interconnect Location"), v11, 1u);
        if (objc_msgSend(v12, "isEqualToString:", CFSTR("Internal")))
        {
          v13 = (void *)IORegistryEntrySearchCFProperty(v8, "IOService", CFSTR("Statistics"), v11, 1u);
          v14 = v13;
          if (v13)
          {
            v10 = objc_msgSend((id)objc_msgSend(v13, "objectForKey:", CFSTR("Bytes (Read)")), "unsignedLongLongValue");
            v9 = objc_msgSend((id)objc_msgSend(v14, "objectForKey:", CFSTR("Bytes (Write)")), "unsignedLongLongValue");

            LOBYTE(v14) = 1;
          }
        }
        else
        {
          LOBYTE(v14) = 0;
        }

        IOObjectRelease(v8);
        if ((v14 & 1) != 0)
          break;
        v8 = IOIteratorNext(existing);
      }
      while (v8);
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    if (v16)
      *v16 = v10;
    MatchingServices = v18;
    if (v17)
      *v17 = v9;
  }
  if (existing)
    IOObjectRelease(existing);
  return MatchingServices;
}

uint64_t BWGetDisplaySupportsPerseus()
{
  if (BWGetDisplaySupportsPerseus_onceToken != -1)
    dispatch_once(&BWGetDisplaySupportsPerseus_onceToken, &__block_literal_global_281);
  return BWGetDisplaySupportsPerseus_displaySupportsPerseus;
}

uint64_t BWProcessWiderAndNarrowerFOVBuffersForFacePropagation(const void *a1, const void *a2, void *a3)
{
  const __CFString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v5 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v6 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v7 = *MEMORY[0x1E0D069A0];
  v8 = objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  v9 = (void *)CMGetAttachment(a2, v5, 0);
  v10 = objc_msgSend(v9, "objectForKeyedSubscript:", v7);
  if (!(v8 | v10))
    return bwu_propagateDetectedObjects(a1, a2, a3, (void *)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]), (void *)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]), (void *)*MEMORY[0x1E0D06998]);
  v11 = (void *)v10;
  v12 = objc_msgSend((id)v8, "count");
  if (v12 >= objc_msgSend(v11, "count"))
  {
    v29 = 0uLL;
    v30 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    result = objc_msgSend((id)v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (result)
    {
      v18 = result;
      v19 = *(_QWORD *)v28;
      v20 = *MEMORY[0x1E0D064D0];
LABEL_15:
      v21 = 0;
      while (1)
      {
        if (*(_QWORD *)v28 != v19)
          objc_enumerationMutation((id)v8);
        result = bwu_propagateDetectedObjects(a1, a2, a3, (void *)objc_msgSend((id)objc_msgSend((id)v8, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v21)), "objectForKeyedSubscript:", v20), (void *)objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * v21)), "objectForKeyedSubscript:", v20), *(void **)(*((_QWORD *)&v27 + 1) + 8 * v21));
        if (!(_DWORD)result)
          break;
        if (v18 == ++v21)
        {
          result = objc_msgSend((id)v8, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
          v18 = result;
          if (result)
            goto LABEL_15;
          return result;
        }
      }
    }
  }
  else
  {
    v25 = 0uLL;
    v26 = 0uLL;
    v23 = 0uLL;
    v24 = 0uLL;
    result = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (result)
    {
      v14 = result;
      v15 = *(_QWORD *)v24;
      v16 = *MEMORY[0x1E0D064D0];
LABEL_5:
      v17 = 0;
      while (1)
      {
        if (*(_QWORD *)v24 != v15)
          objc_enumerationMutation(v11);
        result = bwu_propagateDetectedObjects(a1, a2, a3, (void *)objc_msgSend((id)objc_msgSend((id)v8, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v17)), "objectForKeyedSubscript:", v16), (void *)objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v17)), "objectForKeyedSubscript:", v16), *(void **)(*((_QWORD *)&v23 + 1) + 8 * v17));
        if (!(_DWORD)result)
          break;
        if (v14 == ++v17)
        {
          result = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          v14 = result;
          if (result)
            goto LABEL_5;
          return result;
        }
      }
    }
  }
  return result;
}

BOOL bwu_propagateDetectedObjects(const void *a1, const void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  void *v30;
  CFDictionaryRef DictionaryRepresentation;
  const __CFString *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v41;
  CGRect rect;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  uint64_t v48;
  CGRect v49;

  v48 = *MEMORY[0x1E0C80C00];
  v12 = objc_msgSend(a3, "count");
  if (v12 != 2)
    return v12 == 2;
  objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", 0), "floatValue");
  v14 = v13;
  objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", 1), "floatValue");
  v16 = v15;
  if (objc_msgSend(a4, "count") && !objc_msgSend(a5, "count"))
  {
    if (v14 > v16)
      v17 = v14 / v16;
    else
      v17 = v16 / v14;
    if (!a2)
      return v12 == 2;
  }
  else
  {
    if (!objc_msgSend(a5, "count") || objc_msgSend(a4, "count"))
      return v12 == 2;
    v17 = v14 > v16 ? v16 / v14 : v14 / v16;
    a4 = a5;
    a2 = a1;
    if (!a1)
      return v12 == 2;
  }
  v41 = a6;
  v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v19 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
  if (v19)
  {
    v20 = v19;
    v21 = v17;
    v22 = *(_QWORD *)v44;
    v23 = *MEMORY[0x1E0D06D58];
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v44 != v22)
          objc_enumerationMutation(a4);
        v25 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * i);
        memset(&rect, 0, sizeof(rect));
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v25, "objectForKeyedSubscript:", v23), &rect))
        {
          v26 = rect.size.width * v21;
          v27 = rect.size.height * v21;
          v28 = (rect.origin.x + -0.5) * v21 + 0.5;
          v29 = (rect.origin.y + -0.5) * v21 + 0.5;
          v30 = (void *)objc_msgSend(v25, "mutableCopy");
          v49.origin.x = v28;
          v49.origin.y = v29;
          v49.size.width = v26;
          v49.size.height = v27;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v49);
          objc_msgSend(v30, "setObject:forKeyedSubscript:", DictionaryRepresentation, v23);
          if (DictionaryRepresentation)
            CFRelease(DictionaryRepresentation);
          objc_msgSend(v18, "addObject:", v30);

        }
      }
      v20 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v43, v47, 16);
    }
    while (v20);
  }
  v32 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v33 = (void *)objc_msgSend((id)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "mutableCopy");
  v34 = *MEMORY[0x1E0D06998];
  if (objc_msgSend(v41, "isEqualToString:", *MEMORY[0x1E0D06998]))
  {
    v35 = v33;
    v36 = v18;
    v37 = v34;
  }
  else
  {
    v38 = *MEMORY[0x1E0D069A0];
    v39 = (void *)objc_msgSend(v33, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
    if (!v39)
    {
      v39 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v39, v38);
    }
    if (!objc_msgSend(v39, "objectForKeyedSubscript:", v41))
      objc_msgSend(v39, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"), v41);
    v35 = (void *)objc_msgSend(v39, "objectForKeyedSubscript:", v41);
    v37 = *MEMORY[0x1E0D064D0];
    v36 = v18;
  }
  objc_msgSend(v35, "setObject:forKeyedSubscript:", v36, v37);
  CMSetAttachment(a2, v32, v33, 1u);

  return v12 == 2;
}

void *BWPreviewRegistrationTypeFromShortString(uint64_t a1)
{
  void *result;

  if (BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeOnceToken != -1)
    dispatch_once(&BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeOnceToken, &__block_literal_global_288);
  result = (void *)objc_msgSend((id)BWPreviewRegistrationTypeFromShortString_sBWShortStringToPreviewRegistrationTypeDictionary, "objectForKeyedSubscript:", a1);
  if (result)
    return (void *)objc_msgSend(result, "intValue");
  return result;
}

uint64_t BWVersionMakeWithObject(uint64_t result, _WORD *a2)
{
  void *v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = 0;
  if (result)
  {
    v3 = (void *)result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v3, "floatValue");
      v5 = (uint64_t)v4;
      v6 = (uint64_t)(float)((float)((float)(v4 - (float)(uint64_t)v4) * 10.0) + 0.5);
      if (vabds_f32(-(float)((float)(10 * (uint64_t)v4) - (float)(v4 * 10.0)), (float)v6) < 0.01)
      {
        v7 = 0;
LABEL_5:
        *a2 = v5;
        a2[1] = v6;
        result = 1;
        a2[2] = v7;
        return result;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      result = objc_msgSend(v3, "length");
      if (!result)
        return result;
      v8 = (void *)objc_msgSend(v3, "componentsSeparatedByString:", CFSTR("."));
      v6 = objc_msgSend(v8, "count");
      if (!v6)
      {
        v7 = 0;
        LOWORD(v5) = 0;
        goto LABEL_5;
      }
      if ((v6 == 1
         || (v6 == 2
          || (bwu_validateLongConversion((void *)objc_msgSend(v8, "objectAtIndexedSubscript:", 2), &v9) & 1) != 0)
         && (bwu_validateLongConversion((void *)objc_msgSend(v8, "objectAtIndexedSubscript:", 1), &v10) & 1) != 0)
        && bwu_validateLongConversion((void *)objc_msgSend(v8, "objectAtIndexedSubscript:", 0), &v11))
      {
        LOWORD(v6) = v10;
        LOWORD(v5) = v11;
        v7 = v9;
        goto LABEL_5;
      }
    }
    FigDebugAssert3();
    return 0;
  }
  return result;
}

uint64_t bwu_validateLongConversion(void *a1, uint64_t *a2)
{
  const char *v3;
  uint64_t v4;
  char *__endptr;

  v3 = (const char *)objc_msgSend(a1, "UTF8String");
  __endptr = 0;
  v4 = strtol(v3, &__endptr, 0);
  if (__endptr == v3 || *__endptr)
    return 0;
  *a2 = v4;
  return 1;
}

uint64_t BWCreateWorkgroupWithName()
{
  os_workgroup_attr_set_interval_type();
  return os_workgroup_interval_create();
}

uint64_t BWGetPixelBufferRotationAndMirroring(const void *a1, _DWORD *a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t result;
  int v9;
  BOOL v10;

  v6 = objc_msgSend((id)CMGetAttachment(a1, CFSTR("RotationDegrees"), 0), "intValue");
  v7 = objc_msgSend((id)CMGetAttachment(a1, CFSTR("MirroredHorizontal"), 0), "BOOLValue");
  result = objc_msgSend((id)CMGetAttachment(a1, CFSTR("MirroredVertical"), 0), "BOOLValue");
  v9 = result;
  if (v7)
    v10 = (_DWORD)result == 0;
  else
    v10 = 1;
  if (v10)
  {
    if ((_DWORD)result)
      goto LABEL_13;
LABEL_7:
    if (!a2)
      goto LABEL_9;
    goto LABEL_8;
  }
  result = FigDebugAssert3();
  if (!v9)
    goto LABEL_7;
LABEL_13:
  result = FigCaptureNormalizeAngle(v6 + 180);
  v6 = result;
  LOBYTE(v7) = 1;
  if (a2)
LABEL_8:
    *a2 = v6;
LABEL_9:
  if (a3)
    *a3 = v7;
  return result;
}

CGAffineTransform *BWGetAffineTransformFromSensorToPreview@<X0>(int a1@<W0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float v18;
  float v19;
  CGAffineTransform *result;
  CGSize v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGRect rect;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGAffineTransform t1;
  CGAffineTransform t2;

  v8 = MEMORY[0x1E0C9BAA8];
  v9 = *MEMORY[0x1E0C9BAA8];
  v10 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a4 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a4 + 16) = v10;
  v11 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(a4 + 32) = v11;
  if (a1 > 0 || a2)
  {
    v29 = v10;
    v30 = v9;
    v28 = v11;
    CGAffineTransformMakeTranslation(&t2, -0.5, -0.5);
    *(_OWORD *)&t1.a = v30;
    *(_OWORD *)&t1.c = v29;
    *(_OWORD *)&t1.tx = v28;
    CGAffineTransformConcat((CGAffineTransform *)a4, &t1, &t2);
    if (a1 >= 1)
    {
      CGAffineTransformMakeRotation(&v38, (double)a1 * 0.0174532925);
      v12 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v37.a = *(_OWORD *)a4;
      *(_OWORD *)&v37.c = v12;
      *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
      CGAffineTransformConcat(&t1, &v37, &v38);
      v13 = *(_OWORD *)&t1.c;
      *(_OWORD *)a4 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a4 + 16) = v13;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    }
    if (a2)
    {
      CGAffineTransformMakeScale(&v36, -1.0, 1.0);
      v14 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v37.a = *(_OWORD *)a4;
      *(_OWORD *)&v37.c = v14;
      *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
      CGAffineTransformConcat(&t1, &v37, &v36);
      v15 = *(_OWORD *)&t1.c;
      *(_OWORD *)a4 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a4 + 16) = v15;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    }
    CGAffineTransformMakeTranslation(&v35, 0.5, 0.5);
    v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.a = *(_OWORD *)a4;
    *(_OWORD *)&v37.c = v16;
    *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v35);
    v17 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F58], v28, v29, v30), "floatValue");
  v19 = v18;
  result = (CGAffineTransform *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E70]);
  v21 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  rect.size = v21;
  if (result)
  {
    result = (CGAffineTransform *)CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)result, &rect);
    if ((_DWORD)result)
      v19 = 2.0 / (rect.size.width + rect.size.height) * v19;
  }
  if (v19 > 1.0)
  {
    CGAffineTransformMakeTranslation(&v33, -0.5, -0.5);
    v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.a = *(_OWORD *)a4;
    *(_OWORD *)&v37.c = v22;
    *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v33);
    v23 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    CGAffineTransformMakeScale(&v32, v19, v19);
    v24 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.a = *(_OWORD *)a4;
    *(_OWORD *)&v37.c = v24;
    *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v37, &v32);
    v25 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
    CGAffineTransformMakeTranslation(&v31, 0.5, 0.5);
    v26 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v37.a = *(_OWORD *)a4;
    *(_OWORD *)&v37.c = v26;
    *(_OWORD *)&v37.tx = *(_OWORD *)(a4 + 32);
    result = CGAffineTransformConcat(&t1, &v37, &v31);
    v27 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v27;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  return result;
}

uint64_t BWUtilitiesGetPortTypeForInputFromInputByPortTypes(uint64_t a1, void *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend((id)objc_msgSend(a2, "allKeys"), "count") == 1)
    return objc_msgSend((id)objc_msgSend(a2, "allKeys"), "objectAtIndexedSubscript:", 0);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)v11;
LABEL_5:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v7)
      objc_enumerationMutation(a2);
    v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8);
    if (objc_msgSend(a2, "objectForKeyedSubscript:", v9) == a1)
      return v9;
    if (v6 == ++v8)
    {
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
        goto LABEL_5;
      return 0;
    }
  }
}

uint64_t BWUtilitiesGetPortTypeForUnderlyingDeviceType(unsigned int a1, void *a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a2, "count") == 1)
    return objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = *(_QWORD *)v11;
LABEL_5:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v7)
      objc_enumerationMutation(a2);
    v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v8);
    if (BWUtilitiesUnderlyingDeviceTypeFromPortType(v9, a1) == a1)
      return (uint64_t)v9;
    if (v6 == ++v8)
    {
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v6)
        goto LABEL_5;
      return 0;
    }
  }
}

void BWUtilitiesApplyAVEStrength(__IOSurface *a1, void *a2)
{
  float v4;

  objc_msgSend(a2, "floatValue");
  if (v4 == 1.0)
    IOSurfaceRemoveValue(a1, CFSTR("AVEStrength"));
  else
    IOSurfaceSetValue(a1, CFSTR("AVEStrength"), a2);
}

void *BWFilterNonDisruptiveSwitchingFormatZoomFactors(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v1 = a1;
  v18 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)objc_msgSend(a1, "count") >= 2)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = (void *)objc_msgSend(v1, "sortedArrayUsingSelector:", sel_compare_, 0);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
          objc_msgSend((id)objc_msgSend(v2, "lastObject"), "floatValue");
          if (v9 == 0.0 || (v10 = v9, objc_msgSend(v8, "floatValue"), (float)(v11 / v10) >= 1.2))
            objc_msgSend(v2, "addObject:", v8);
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }
    return v2;
  }
  return v1;
}

BOOL BWWiderNonDisruptiveSwitchingFormatZoomFactorAndNarrowerBaseZoomFactorShouldBeCombined(float a1, float a2)
{
  return vabds_f32(a1, a2) < flt_1A32B0CF0[a1 > a2];
}

uint64_t TemporalNoiseFilter_Global_420v_to_420v(int8x16_t **a1, uint64_t a2)
{
  int8x16_t *v2;
  uint8x16_t *v3;
  uint8x16_t *v4;
  int8x16_t *v5;
  int8x16_t v6;
  uint32x4_t v7;
  unint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint8x16_t *v19;
  uint32x4_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint8x16_t v31;
  int8x16_t v32;
  uint8x16_t v33;
  int64x2_t v34;

  v2 = *a1;
  v3 = (uint8x16_t *)a1[1];
  v4 = (uint8x16_t *)a1[3];
  v5 = a1[4];
  v6 = *a1[2];
  v7 = 0uLL;
  if (a2)
  {
    v8 = a2 & 0xFFFFFFFFFFFFFFC0;
    do
    {
      v9 = *v2;
      v10 = v2[1];
      v11 = v2[2];
      v12 = v2[3];
      v13 = *v3;
      v14 = v3[1];
      v15 = v3[2];
      v16 = v3[3];
      v2 += 4;
      v3 += 4;
      v17 = (int8x16_t)vhaddq_u8(*v4, vabdq_u8((uint8x16_t)v9, v13));
      v18 = (int8x16_t)vhaddq_u8(v4[1], vabdq_u8((uint8x16_t)v10, v14));
      *v4 = (uint8x16_t)v17;
      v4[1] = (uint8x16_t)v18;
      v19 = v4 + 2;
      v20 = vpadalq_u16(vpadalq_u16(v7, vpaddlq_u8((uint8x16_t)v17)), vpaddlq_u8((uint8x16_t)v18));
      v21 = (uint8x16_t)vqtbl1q_s8(v6, v17);
      v22 = (uint8x16_t)vqtbl1q_s8(v6, v18);
      *v5 = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v13.i8), *(uint8x8_t *)v21.i8, *(uint8x8_t *)v9.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v9)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v21, v13), v21, (uint8x16_t)v9), (int16x8_t)vzip2q_s8((int8x16_t)0, v9));
      v5[1] = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)v14.i8), *(uint8x8_t *)v22.i8, *(uint8x8_t *)v10.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v10)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v22, v14), v22, (uint8x16_t)v10), (int16x8_t)vzip2q_s8((int8x16_t)0, v10));
      v23 = v5 + 2;
      v24 = (int8x16_t)vhaddq_u8(*v19, vabdq_u8((uint8x16_t)v11, v15));
      v25 = (int8x16_t)vhaddq_u8(v19[1], vabdq_u8((uint8x16_t)v12, v16));
      *v19 = (uint8x16_t)v24;
      v19[1] = (uint8x16_t)v25;
      v4 = v19 + 2;
      v7 = vpadalq_u16(vpadalq_u16(v20, vpaddlq_u8((uint8x16_t)v24)), vpaddlq_u8((uint8x16_t)v25));
      v26 = (uint8x16_t)vqtbl1q_s8(v6, v24);
      v27 = (uint8x16_t)vqtbl1q_s8(v6, v25);
      *v23 = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v26.i8, *(uint8x8_t *)v15.i8), *(uint8x8_t *)v26.i8, *(uint8x8_t *)v11.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v11)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v26, v15), v26, (uint8x16_t)v11), (int16x8_t)vzip2q_s8((int8x16_t)0, v11));
      v23[1] = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v27.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v27.i8, *(uint8x8_t *)v12.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v12)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v27, v16), v27, (uint8x16_t)v12), (int16x8_t)vzip2q_s8((int8x16_t)0, v12));
      v5 = v23 + 2;
      v8 -= 64;
    }
    while (v8);
    v28 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      do
      {
        v29 = *v2++;
        v30 = v29;
        v31 = *v3++;
        v32 = (int8x16_t)vhaddq_u8(*v4, vabdq_u8((uint8x16_t)v30, v31));
        *v4++ = (uint8x16_t)v32;
        v7 = vpadalq_u16(v7, vpaddlq_u8((uint8x16_t)v32));
        v33 = (uint8x16_t)vqtbl1q_s8(v6, v32);
        *v5++ = vraddhn_high_s16(vraddhn_s16((int16x8_t)vmlsl_u8(vmull_u8(*(uint8x8_t *)v33.i8, *(uint8x8_t *)v31.i8), *(uint8x8_t *)v33.i8, *(uint8x8_t *)v30.i8), (int16x8_t)vzip1q_s8((int8x16_t)0, v30)), (int16x8_t)vmlsl_high_u8(vmull_high_u8(v33, v31), v33, (uint8x16_t)v30), (int16x8_t)vzip2q_s8((int8x16_t)0, v30));
        v28 -= 16;
      }
      while (v28);
    }
  }
  v34 = (int64x2_t)vpaddlq_u32(v7);
  return vpaddq_s64(v34, v34).u32[0];
}

uint64_t TemporalNoiseFilter_Fixed_420v_to_420v(uint8x16_t *a1, uint8x16_t *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int16x8_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v5 = a3;
  if (a3)
  {
    v6 = (uint8x16_t)vdupq_n_s8(a4);
    v7 = (uint8x16_t)vdupq_n_s8(a5);
    v8.i64[0] = 0x303030303030303;
    v8.i64[1] = 0x303030303030303;
    v9.i64[0] = 0x202020202020202;
    v9.i64[1] = 0x202020202020202;
    v10.i64[0] = 0x55005500550055;
    v10.i64[1] = 0x55005500550055;
    do
    {
      v11 = *a2++;
      v12 = vabdq_u8(*a1, v11);
      v13 = (int8x16_t)vcgtq_u8(v12, v6);
      v14 = (int8x16_t)vcgtq_u8(v12, v7);
      *(int8x16_t *)a1 = vorrq_s8(vorrq_s8(vandq_s8(*(int8x16_t *)a1, v14), vbicq_s8(vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)a1->i8), *(uint8x8_t *)v8.i8, *(uint8x8_t *)v11.i8), 2uLL), (int16x8_t)vmlal_high_u8(vmovl_high_u8(*a1), v8, v11), 2uLL), v13)), vbicq_s8(vandq_s8(vrshrn_high_n_s16(vrshrn_n_s16(vmulq_s16((int16x8_t)vmlal_u8(
                                                  vmovl_u8(*(uint8x8_t *)v11.i8),
                                                  *(uint8x8_t *)a1->i8,
                                                  *(uint8x8_t *)v9.i8),
                                     v10),
                                   8uLL),
                                 vmulq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v11), *a1, v9), v10),
                                 8uLL),
                               v13),
                             v14));
      ++a1;
      v5 -= 16;
    }
    while (v5);
  }
  return 0;
}

void sub_1A2EB7B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void *isn_addVariantToURL(void *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "stringByDeletingPathExtension"), "stringByAppendingString:", CFSTR("_overcapture")), "stringByAppendingPathExtension:", objc_msgSend((id)objc_msgSend(result, "resourceSpecifier"), "pathExtension"));
    return (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v1);
  }
  return result;
}

uint64_t pbp_scanIOSurfacesCallback_0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void sub_1A2EC3D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2EC4030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1A2EC4490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1A2EC4544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DuetActivitySchedulerLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E49204A8;
    v3 = 0;
    DuetActivitySchedulerLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!DuetActivitySchedulerLibraryCore_frameworkLibrary)
    DuetActivitySchedulerLibrary_cold_1(&v1);
  return DuetActivitySchedulerLibraryCore_frameworkLibrary;
}

uint64_t BWAddStillImageProcessingMetadataToMetadata(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  double v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;

  v4 = *MEMORY[0x1E0D06118];
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06118]));
  if (objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputWidth")
    && objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputHeight"))
  {
    v6 = (double)objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputWidth");
    v7 = objc_msgSend((id)objc_msgSend(a1, "requestedSettings"), "outputHeight");
    v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6 / (double)v7);
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, *MEMORY[0x1E0D061D0]);
  if (objc_msgSend((id)objc_msgSend(a1, "processingSettings"), "processIntelligentDistortionCorrection"))
    objc_msgSend(v5, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D061D8]);
  if (objc_msgSend(v5, "count"))
    v9 = v5;
  else
    v9 = 0;
  return objc_msgSend(a2, "setObject:forKeyedSubscript:", v9, v4);
}

uint64_t BWSampleBufferHasDetectedFaces(const void *a1, int a2, int a3, int a4, int a5, int a6)
{
  void *v12;
  CGAffineTransform *v13;
  void *AttachedInference;
  uint64_t v20;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v12 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v13 = (CGAffineTransform *)objc_msgSend((id)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E50]), "intValue");
  v41 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v42 = *MEMORY[0x1E0C9D628];
  v45 = *MEMORY[0x1E0C9D628];
  v46 = v41;
  if (!FigCFDictionaryGetCGRectIfPresent())
  {
    v45 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    v46 = _Q0;
  }
  v43 = v42;
  v44 = v41;
  if (FigCFDictionaryGetCGRectIfPresent())
  {
    if (!a2)
      goto LABEL_15;
  }
  else
  {
    v43 = 0uLL;
    __asm { FMOV            V0.2D, #1.0 }
    v44 = _Q0;
    if (!a2)
      goto LABEL_15;
  }
  AttachedInference = (void *)BWInferenceGetAttachedInference(a1, 802, (uint64_t)CFSTR("VisionFaceDetectionObservations"));
  v20 = objc_msgSend(AttachedInference, "count");
  if (v20)
    _ZF = a6 == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    if (v20)
      return 1;
  }
  else
  {
    v22 = simu_faceObservationsContainFacesWithinNormalizedRect(AttachedInference, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1));
    if ((v22 & 1) != 0)
      return 1;
  }
LABEL_15:
  if (a3)
  {
    v23 = (void *)BWInferenceGetAttachedInference(a1, 802, 0x1E4951058);
    v24 = objc_msgSend(v23, "count");
    if (v24 && a6)
    {
      if ((simu_faceObservationsContainFacesWithinNormalizedRect(v23, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1)) & 1) != 0)return 1;
    }
    else if (v24)
    {
      return 1;
    }
  }
  if (a4)
  {
    v26 = (void *)BWInferenceGetAttachedInference(a1, 801, 0x1E4951058);
    v27 = objc_msgSend(v26, "count");
    result = v27 != 0;
    if (v27 && a6)
    {
      result = simu_faceObservationsContainFacesWithinNormalizedRect(v26, v13, *(CGFloat *)&v45, *((CGFloat *)&v45 + 1), *(CGFloat *)&v46, *((CGFloat *)&v46 + 1));
      if ((result & 1) != 0)
        return result;
    }
    else if (v27)
    {
      return result;
    }
    if (!a5)
      return result;
  }
  else if (!a5)
  {
    return 0;
  }
  v28 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0], v41, v42);
  v29 = (void *)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
  v30 = (void *)objc_msgSend(v29, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "count");
    _ZF = v32 == 0;
    result = v32 != 0;
    if (!_ZF && a6 != 0)
    {
      v35 = *((double *)&v43 + 1);
      v34 = *(double *)&v43;
      v37 = *((double *)&v44 + 1);
      v36 = *(double *)&v44;
      v38 = v31;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v38, v34, v35, v36, v37);
    }
  }
  else
  {
    v39 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
    v40 = objc_msgSend(v39, "count");
    result = v40 != 0;
    if (v40 && a6)
    {
      v35 = *((double *)&v43 + 1);
      v34 = *(double *)&v43;
      v37 = *((double *)&v44 + 1);
      v36 = *(double *)&v44;
      v38 = v39;
      return simu_detectedFacesArrayContainFacesWithinNormalizedRect(v38, v34, v35, v36, v37);
    }
  }
  return result;
}

uint64_t simu_faceObservationsContainFacesWithinNormalizedRect(void *a1, CGAffineTransform *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  CGSize v16;
  CGPoint v17;
  CGRect rect;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CGRect v25;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v10 = BWDetectedFacesInBufferCoordinatesFromVisionFaceObservations(a1, a2);
  result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (result)
  {
    v12 = result;
    v13 = *(_QWORD *)v20;
    v16 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v17 = (CGPoint)*MEMORY[0x1E0C9D628];
    while (2)
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        v15 = *(const __CFDictionary **)(*((_QWORD *)&v19 + 1) + 8 * v14);
        rect.origin = v17;
        rect.size = v16;
        if (CGRectMakeWithDictionaryRepresentation(v15, &rect))
        {
          v25.origin.x = a3;
          v25.origin.y = a4;
          v25.size.width = a5;
          v25.size.height = a6;
          if (CGRectIntersectsRect(rect, v25))
            return 1;
        }
        ++v14;
      }
      while (v12 != v14);
      result = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v12 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t simu_detectedFacesArrayContainFacesWithinNormalizedRect(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  CGSize v16;
  CGPoint v17;
  CGRect rect;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;
  CGRect v25;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (result)
  {
    v11 = result;
    v12 = *(_QWORD *)v20;
    v13 = *MEMORY[0x1E0D06D58];
    v16 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v17 = (CGPoint)*MEMORY[0x1E0C9D628];
    while (2)
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v12)
          objc_enumerationMutation(a1);
        v15 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v14);
        rect.origin = v17;
        rect.size = v16;
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v15, "objectForKeyedSubscript:", v13, v16, v17), &rect))
        {
          v25.origin.x = a2;
          v25.origin.y = a3;
          v25.size.width = a4;
          v25.size.height = a5;
          if (CGRectIntersectsRect(rect, v25))
            return 1;
        }
        ++v14;
      }
      while (v11 != v14);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      v11 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t BWSampleBufferHasDetectedHumanBodies(const void *a1)
{
  uint64_t result;
  void *v2;
  double FinalCropRect;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  CGSize v18;
  CGPoint v19;
  CGRect rect;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;
  CGRect v27;

  v26 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (result)
  {
    v2 = (void *)result;
    FinalCropRect = FigCaptureMetadataUtilitiesGetFinalCropRect();
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v10 = (void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
    v11 = (void *)objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0D06498]);
    v12 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (result)
    {
      v13 = result;
      v14 = *(_QWORD *)v22;
      v15 = *MEMORY[0x1E0D06D58];
      v18 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
      v19 = (CGPoint)*MEMORY[0x1E0C9D628];
      while (2)
      {
        v16 = 0;
        do
        {
          if (*(_QWORD *)v22 != v14)
            objc_enumerationMutation(v12);
          v17 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v16);
          rect.origin = v19;
          rect.size = v18;
          if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v17, "objectForKeyedSubscript:", v15, v18, v19), &rect))
          {
            v27.origin.x = FinalCropRect;
            v27.origin.y = v5;
            v27.size.width = v7;
            v27.size.height = v9;
            if (CGRectIntersectsRect(rect, v27))
              return 1;
          }
          ++v16;
        }
        while (v13 != v16);
        result = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        v13 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  return result;
}

uint64_t BWFaceDetectionObservationsFromISPDetectedFacesMetadata(void *a1)
{
  void *v2;
  CGAffineTransform *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E50]);
  if (!v2)
    return 0;
  v3 = (CGAffineTransform *)objc_msgSend(v2, "intValue");
  v4 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
  v5 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
  v6 = (void *)objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
  if (!v6)
    v6 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
  if (objc_msgSend(v6, "count"))
    return BWVisionFaceObservationsFromISPDetectedFacesInBufferCoordinates(v6, v3);
  else
    return 0;
}

uint64_t BWVisionFaceObservationsFromISPDetectedFacesInBufferCoordinates(void *a1, CGAffineTransform *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  CGAffineTransform v12;
  CGRect rect;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;
  _BYTE v19[128];
  uint64_t v20;
  CGRect v21;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  memset(&v18, 0, sizeof(v18));
  BWISPBufferCoordinatesToVisionCoordinatesTransform(a2, &v18);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v15;
    v8 = *MEMORY[0x1E0D084A0];
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(a1);
        v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v9);
        memset(&rect, 0, sizeof(rect));
        CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v10, "objectForKeyedSubscript:", v8), &rect);
        v12 = v18;
        v21 = CGRectApplyAffineTransform(rect, &v12);
        objc_msgSend(v4, "addObject:", objc_msgSend((id)getVNFaceObservationClass(), "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:", 0, 0, 0, 0, v21.origin.x, v21.origin.y, v21.size.width, v21.size.height));
        ++v9;
      }
      while (v6 != v9);
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v6);
  }
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v4);
}

CGAffineTransform *BWISPBufferCoordinatesToVisionCoordinatesTransform@<X0>(CGAffineTransform *a1@<X0>, CGAffineTransform *a2@<X8>)
{
  CGAffineTransform v4;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v7;
  CGAffineTransform v8;

  memset(&v8, 0, sizeof(v8));
  FigCaptureExifOrientationGetAffineTransform(a1, 0x100000001, (uint64_t)&v8);
  CGAffineTransformMakeTranslation(&t2, 0.0, -1.0);
  t1 = v8;
  CGAffineTransformConcat(&v7, &t1, &t2);
  v8 = v7;
  CGAffineTransformMakeScale(&v4, 1.0, -1.0);
  v7 = v8;
  return CGAffineTransformConcat(a2, &v7, &v4);
}

id BWDetectedFacesInBufferCoordinatesFromVisionFaceObservations(void *a1, CGAffineTransform *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v11;
  CGAffineTransform v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(a1);
        v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v8);
        memset(&v15, 0, sizeof(v15));
        BWISPBufferCoordinatesToVisionCoordinatesTransform(a2, &v14);
        CGAffineTransformInvert(&v15, &v14);
        objc_msgSend(v9, "boundingBox");
        v13 = v15;
        v23 = CGRectApplyAffineTransform(v22, &v13);
        DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v23);
        if (DictionaryRepresentation)
        {
          v11 = DictionaryRepresentation;
          objc_msgSend(v4, "addObject:", DictionaryRepresentation);

        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }
  return (id)objc_msgSend(v4, "copy");
}

void BWUpdateLandmarksForStillImageCrop(const void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  BOOL IsUnityRect;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double x;
  double y;
  double width;
  double height;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  void *VNFaceObservationClass;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  void *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  id v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  double v76;
  void *v77;
  id v78;
  BWInferenceResult *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  CMAttachmentBearerRef target;
  void *v86;
  uint64_t v87;
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  CGFloat v92;
  double v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  double v97;
  CGFloat v98;
  double v99;
  _BYTE v100[32];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  CGAffineTransform v109;
  CGAffineTransform v110;
  CGAffineTransform v111;
  _BYTE v112[128];
  _BYTE v113[128];
  uint64_t v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;

  v114 = *MEMORY[0x1E0C80C00];
  *(double *)v100 = a3;
  *(double *)&v100[8] = a4;
  *(double *)&v100[16] = a5;
  *(double *)&v100[24] = a6;
  IsUnityRect = FigCaptureIsUnityRect(a3, a4, a5, a6);
  if ((a2 - 803) >= 0xFFFFFFFE && !IsUnityRect)
  {
    v9 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v9 && (v10 = (void *)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E50])) != 0)
    {
      memset(&v111, 0, sizeof(v111));
      BWISPBufferCoordinatesToVisionCoordinatesTransform((CGAffineTransform *)objc_msgSend(v10, "intValue"), &v111);
      v109 = v111;
      memset(&v110, 0, sizeof(v110));
      CGAffineTransformInvert(&v110, &v109);
      target = a1;
      v84 = a2;
      v83 = (void *)CMGetAttachment(a1, CFSTR("Inferences"), 0);
      v86 = (void *)objc_msgSend(v83, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
      v11 = (void *)objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:");
      if (!objc_msgSend(v11, "count"))
        v11 = (void *)objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:", CFSTR("VisionFaceDetectionObservations"));
      v89 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v11, "count"));
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v105, v113, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v106;
        v87 = *(_QWORD *)v106;
        v88 = v11;
        do
        {
          v15 = 0;
          v90 = v13;
          do
          {
            if (*(_QWORD *)v106 != v14)
              objc_enumerationMutation(v11);
            v16 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * v15);
            objc_msgSend(v16, "boundingBox");
            v109 = v110;
            v116 = CGRectApplyAffineTransform(v115, &v109);
            x = v116.origin.x;
            y = v116.origin.y;
            width = v116.size.width;
            height = v116.size.height;
            objc_msgSend(v16, "alignedBoundingBoxAsCGRect");
            v109 = v110;
            v118 = CGRectApplyAffineTransform(v117, &v109);
            v21 = v118.origin.x;
            v22 = v118.origin.y;
            v23 = v118.size.width;
            v24 = v118.size.height;
            v126.origin.x = x;
            v126.origin.y = y;
            v126.size.width = width;
            v126.size.height = height;
            if (CGRectContainsRect(*(CGRect *)v100, v126))
            {
              v25 = FigCaptureTransformRectToCoordinateSpaceOfRect(x, y, width, height, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              v96 = v26;
              v98 = v25;
              v92 = v28;
              v94 = v27;
              v29 = FigCaptureTransformRectToCoordinateSpaceOfRect(v21, v22, v23, v24, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              v31 = v30;
              v33 = v32;
              v35 = v34;
              v109 = v111;
              v119.origin.y = v96;
              v119.origin.x = v98;
              v119.size.height = v92;
              v119.size.width = v94;
              v120 = CGRectApplyAffineTransform(v119, &v109);
              v97 = v120.origin.y;
              v99 = v120.origin.x;
              v93 = v120.size.height;
              v95 = v120.size.width;
              v109 = v111;
              v120.origin.x = v29;
              v120.origin.y = v31;
              v120.size.width = v33;
              v120.size.height = v35;
              v121 = CGRectApplyAffineTransform(v120, &v109);
              v36 = v121.origin.x;
              v37 = v121.origin.y;
              v38 = v121.size.width;
              v39 = v121.size.height;
              v40 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "faceAttributes"), "eyesCategory"), "label"), "identifier"), "isEqual:", getVNFaceAttributeEyesClosed());
              v41 = v40;
              v42 = 0;
              if (v40)
              {
                objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "faceAttributes"), "eyesCategory"), "label"), "confidence");
                v42 = v43;
              }
              VNFaceObservationClass = (void *)getVNFaceObservationClass();
              v45 = objc_msgSend(v16, "requestRevision");
              v91 = objc_msgSend(v16, "roll");
              v46 = objc_msgSend(v16, "yaw");
              v47 = objc_msgSend(v16, "pitch");
              v48 = objc_msgSend(v16, "isBoundingBoxAligned");
              v49 = objc_msgSend(v16, "landmarks");
              v50 = objc_msgSend(v16, "landmarks65");
              objc_msgSend(v16, "landmarkScore");
              v52 = v51;
              objc_msgSend(v16, "faceOrientationIndex");
              v54 = v53;
              objc_msgSend(v16, "faceJunkinessIndex");
              LODWORD(v82) = v55;
              BYTE4(v81) = v41;
              LODWORD(v81) = v52;
              objc_msgSend(v89, "addObject:", objc_msgSend(VNFaceObservationClass, "faceObservationWithRequestRevision:boundingBox:roll:yaw:pitch:isBoundingBoxAligned:alignedBoundingBox:landmarks:landmarks65:landmarkScore:isBlinking:blinkScore:faceOrientationIndex:faceJunkinessIndex:", v45, v91, v46, v47, v48, v49, v99, v97, v95, v93, v36, v37, v38,
                  v39,
                  v50,
                  v81,
                  __PAIR64__(v54, v42),
                  v82));
              v14 = v87;
              v11 = v88;
              v13 = v90;
            }
            ++v15;
          }
          while (v13 != v15);
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v105, v113, 16);
        }
        while (v13);
      }
      v56 = (void *)objc_msgSend((id)objc_msgSend(v86, "inferences"), "objectForKeyedSubscript:", 0x1E4951078);
      v57 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v56, "count"));
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v58 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v101, v112, 16);
      if (v58)
      {
        v59 = v58;
        v60 = *(_QWORD *)v102;
        do
        {
          for (i = 0; i != v59; ++i)
          {
            if (*(_QWORD *)v102 != v60)
              objc_enumerationMutation(v56);
            v62 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * i);
            objc_msgSend(v62, "boundingBox");
            v109 = v110;
            v123 = CGRectApplyAffineTransform(v122, &v109);
            v63 = v123.origin.x;
            v64 = v123.origin.y;
            v65 = v123.size.width;
            v66 = v123.size.height;
            if (CGRectContainsRect(*(CGRect *)v100, v123))
            {
              v124.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(v63, v64, v65, v66, *(double *)v100, *(double *)&v100[8], *(double *)&v100[16]);
              v109 = v111;
              v125 = CGRectApplyAffineTransform(v124, &v109);
              v67 = v125.origin.x;
              v68 = v125.origin.y;
              v69 = v125.size.width;
              v70 = v125.size.height;
              v71 = objc_alloc((Class)getVNRecognizedObjectObservationClass());
              v72 = objc_msgSend(v62, "requestRevision");
              objc_msgSend(v62, "confidence");
              v74 = v73;
              v75 = objc_msgSend(v62, "labels");
              LODWORD(v76) = v74;
              v77 = (void *)objc_msgSend(v71, "initWithRequestRevision:boundingBox:confidence:labels:", v72, v75, v67, v68, v69, v70, v76);
              objc_msgSend(v57, "addObject:", v77);

            }
          }
          v59 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v101, v112, 16);
        }
        while (v59);
      }
      v78 = (id)objc_msgSend((id)objc_msgSend(v86, "inferences"), "mutableCopy");
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v89, CFSTR("VisionFaceDetectionObservations"));
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v89, 0x1E4951058);
      objc_msgSend(v78, "setObject:forKeyedSubscript:", v57, 0x1E4951078);
      v79 = -[BWInferenceResult initWithResult:replacementInferences:replacementPreventionReason:]([BWInferenceResult alloc], "initWithResult:replacementInferences:replacementPreventionReason:", v86, v78, 0);
      v80 = (id)objc_msgSend(v83, "mutableCopy");
      objc_msgSend(v80, "setObject:forKeyedSubscript:", v79, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v84));
      CMSetAttachment(target, CFSTR("Inferences"), v80, 1u);
    }
    else
    {
      FigDebugAssert3();
    }
  }
}

uint64_t BWCreateSushiRawDNGDictionary(uint64_t a1, int a2, uint64_t a3, void *a4, void *a5, void *a6, int a7, int a8, void *a9, void *a10, int a11)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  float v21;
  int v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  void *v28;
  void *v29;
  _DWORD *v30;
  _DWORD *v31;
  double Seconds;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  int v40;
  double v41;
  double v42;
  int *v43;
  double v44;
  double v45;
  int *v46;
  int *v47;
  uint64_t v48;
  int v49;
  int v50;
  int64_t v51;
  double v52;
  double v54;
  uint64_t v55;
  double v56;
  CGFloat v57;
  CGFloat v58;
  double v59;
  const __CFDictionary *v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGSize v66;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL v75;
  BOOL v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  _BOOL4 v95;
  BOOL v96;
  NSObject *v97;
  double v98;
  CGFloat v99;
  double v100;
  CGFloat v101;
  CGFloat v102;
  void *v103;
  BOOL IsEmpty;
  _BOOL4 v105;
  _BOOL4 v106;
  void *v107;
  void *v108;
  uint64_t v109;
  float v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  double v114;
  double v115;
  void *v116;
  void *v117;
  CGSize v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  void *v133;
  float v134;
  double v135;
  void *v136;
  float v137;
  float v138;
  double v139;
  void *v140;
  float v141;
  float v142;
  double v143;
  void *v144;
  float v145;
  float v146;
  double v147;
  void *v148;
  float v149;
  float v150;
  double v151;
  uint64_t v152;
  _DWORD *v153;
  _DWORD *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  float v172;
  float v173;
  float v174;
  unsigned int v175;
  float v176;
  float v177;
  float v178;
  float v179;
  double v180;
  double v181;
  double v182;
  double v183;
  void *v184;
  void *v185;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  float v194;
  double v195;
  unsigned int v196;
  double v197;
  unsigned int v198;
  CGFloat v199;
  void *v200;
  CGFloat v201;
  void *v202;
  double v204;
  double v205;
  CGFloat v206;
  double v207;
  CGFloat v208;
  float v209;
  void *v210;
  void *v211;
  int v212;
  double v214;
  double v215;
  double v216;
  CGFloat v217;
  CGRect rect;
  _QWORD v221[16];
  _QWORD v222[16];
  _QWORD v223[7];
  CMTime v224;
  CGRect time[4];
  uint64_t v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;

  v226 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = 0;
  v210 = a6;
  if (!a6)
    return result;
  if (!a5)
    return result;
  if (!a4)
    return result;
  v17 = a1;
  if (!(_DWORD)a1)
    return result;
  v18 = a3;
  if (!HIDWORD(a1))
    return result;
  if (!(_DWORD)a3)
    return result;
  if (!HIDWORD(a3))
    return result;
  v211 = a5;
  if (!a9)
    return result;
  v19 = a4;
  if ((FigCapturePixelFormatIsBayerRaw(a2) & 1) == 0)
    goto LABEL_118;
  v20 = (void *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E00]);
  if (v20)
  {
    objc_msgSend(v20, "floatValue");
    if (v21 != 1.0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
  }
  v22 = objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("SushiRawLensShadingCorrectionType")), "intValue");
  v23 = *MEMORY[0x1E0C9D538];
  v24 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v212 = v22;
  if ((a8 & 1) == 0 && v22 != 1)
  {
    v215 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v216 = *MEMORY[0x1E0C9D538];
    v209 = 0.0;
    goto LABEL_41;
  }
  objc_msgSend((id)objc_msgSend(a10, "objectForKeyedSubscript:", *MEMORY[0x1E0D05968]), "floatValue");
  if (v25 < 0.0)
    goto LABEL_118;
  v26 = (float)a11;
  if (!a11)
    v26 = 1.0;
  v27 = v26 * v25;
  v28 = (void *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B50]);
  if (!v28)
    goto LABEL_40;
  v29 = v28;
  if (!objc_msgSend(v28, "length"))
    goto LABEL_40;
  v30 = (_DWORD *)objc_msgSend(v29, "bytes");
  if ((*v30 - 1) > 1)
    goto LABEL_40;
  v31 = v30;
  CMTimeMakeFromDictionary((CMTime *)time, (CFDictionaryRef)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]));
  Seconds = CMTimeGetSeconds((CMTime *)time);
  objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]), "doubleValue");
  v34 = v33;
  objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AC0]), "doubleValue");
  v36 = v23;
  v37 = v23;
  v38 = v24;
  if ((int)v31[1] < 1)
    goto LABEL_39;
  v39 = 0;
  v40 = 0;
  v41 = Seconds - v34;
  v42 = Seconds + v35 / 1000000.0;
  v43 = v31 + 5;
  v44 = v24;
  v38 = v24;
  v45 = v36;
  v37 = v36;
  do
  {
    if (*v31 == 1)
    {
      v48 = (uint64_t)&v31[6 * v39 + 2];
      v46 = (int *)(v48 + 8);
      v47 = (int *)(v48 + 12);
      goto LABEL_27;
    }
    if (!*v31)
    {
      v46 = v43 - 1;
      v47 = v43;
LABEL_27:
      v49 = *v46;
      v50 = *v47;
      goto LABEL_29;
    }
    v49 = 0;
    v50 = 0;
LABEL_29:
    v51 = FigHostTimeToNanoseconds();
    CMTimeMake(&v224, v51, 1000000000);
    v52 = CMTimeGetSeconds(&v224);
    if (v52 >= v41 && v52 < v42)
    {
      v37 = v37 + (double)v49;
      v38 = v38 + (double)v50;
      ++v40;
    }
    ++v39;
    v43 += 4;
  }
  while (v39 < (int)v31[1]);
  if (v40)
  {
    v54 = (float)((float)(v27 * (float)v40) * 256.0);
    v37 = v37 / v54;
    v38 = v38 / v54;
  }
  v17 = a1;
  v36 = v45;
  v24 = v44;
  v18 = a3;
LABEL_39:
  v23 = v36 + v37;
  v24 = v24 + v38;
LABEL_40:
  v215 = v24;
  v216 = v23;
  v209 = v27;
LABEL_41:
  v55 = MEMORY[0x1E0C9D628];
  v57 = *MEMORY[0x1E0C9D628];
  v56 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v59 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v58 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v60 = (const __CFDictionary *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E70]);
  v61 = v58;
  v62 = v59;
  v63 = v56;
  v64 = v57;
  v199 = v57;
  v201 = v58;
  v65 = v59;
  v197 = v56;
  if (!v60)
    goto LABEL_62;
  v66 = *(CGSize *)(v55 + 16);
  rect.origin = *(CGPoint *)v55;
  rect.size = v66;
  if (CGRectMakeWithDictionaryRepresentation(v60, &rect))
  {
    x = rect.origin.x;
    y = rect.origin.y;
    width = rect.size.width;
    height = rect.size.height;
  }
  else
  {
    rect.origin.x = 0.0;
    rect.origin.y = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    rect.size = _Q0;
    y = 0.0;
    height = 1.0;
    width = 1.0;
    x = 0.0;
  }
  v234.origin.x = 0.0;
  v234.origin.y = 0.0;
  v234.size.width = 1.0;
  v234.size.height = 1.0;
  v75 = CGRectEqualToRect(*(CGRect *)&x, v234);
  v76 = v75;
  v77 = a8;
  if (!a8)
  {
    v98 = v57;
    v61 = v58;
    v207 = v59;
    if (!v75)
      goto LABEL_52;
LABEL_60:
    v100 = v98;
    v63 = v56;
    v65 = v59;
    v56 = v197;
LABEL_61:
    v62 = v207;
    v64 = v100;
LABEL_62:
    v195 = v59;
    v101 = v56;
    v102 = v62;
    v103 = (void *)objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("SushiRawNoiseProfile"), v187, v188);
    v204 = v57;
    v205 = v101;
    v231.origin.x = v57;
    v231.origin.y = v101;
    v206 = v65;
    v208 = v58;
    v231.size.width = v65;
    v231.size.height = v58;
    IsEmpty = CGRectIsEmpty(v231);
    v214 = v64;
    v232.origin.x = v64;
    v232.origin.y = v63;
    v232.size.width = v102;
    v217 = v61;
    v232.size.height = v61;
    v105 = CGRectIsEmpty(v232);
    v106 = v105;
    if (!IsEmpty && v105)
    {
      v107 = 0;
      v109 = (uint64_t)v210;
      v108 = a5;
      v110 = v209;
      v111 = v102;
      v112 = v63;
      v113 = v214;
      v114 = v215;
      v115 = v216;
      goto LABEL_107;
    }
    v109 = (uint64_t)v210;
    v114 = v215;
    v115 = v216;
    if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
    {
      v116 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40]);
      v117 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]);
      v118 = *(CGSize *)(v55 + 16);
      time[0].origin = *(CGPoint *)v55;
      time[0].size = v118;
      v119 = v64;
      v120 = v63;
      v111 = v102;
      v121 = v102;
      v122 = v217;
      if (v106)
      {
        v120 = v197;
        v119 = v199;
        v121 = v195;
        v122 = v201;
        if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F30]), time))
        {
          v119 = time[0].origin.x;
          v120 = time[0].origin.y;
          v121 = time[0].size.width;
          v122 = time[0].size.height;
        }
      }
      v233.origin.x = v119;
      v233.origin.y = v120;
      v233.size.width = v121;
      v233.size.height = v122;
      v108 = a5;
      if (CGRectIsNull(v233))
        return 0;
      if (v212 != 1)
      {
        v123 = v122;
        v114 = v215;
        v115 = v216;
        v112 = v63;
        if (!v212)
        {
          if (objc_msgSend(v210, "count") != 7 || !v116 || !v117)
            goto LABEL_118;
          if (v121 != *MEMORY[0x1E0C9D820] || v123 != *(double *)(MEMORY[0x1E0C9D820] + 8))
          {
            v124 = sqrt(v123 * v123 + v121 * v121) * 0.5;
            objc_msgSend(v116, "floatValue");
            v126 = v125;
            objc_msgSend(v116, "floatValue");
            v128 = v127;
            objc_msgSend(v117, "floatValue");
            v130 = v129;
            objc_msgSend(v117, "floatValue");
            v132 = v124 / (float)(sqrtf((float)(v130 * v131) + (float)(v126 * v128)) * 0.5);
            v133 = (void *)MEMORY[0x1E0CB37E8];
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 0), "floatValue");
            *(float *)&v135 = v134 * (float)(v132 * v132);
            v223[0] = objc_msgSend(v133, "numberWithFloat:", v135);
            v136 = (void *)MEMORY[0x1E0CB37E8];
            v137 = powf(v132, 4.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 1), "floatValue");
            *(float *)&v139 = v137 * v138;
            v223[1] = objc_msgSend(v136, "numberWithFloat:", v139);
            v140 = (void *)MEMORY[0x1E0CB37E8];
            v141 = powf(v132, 6.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 2), "floatValue");
            *(float *)&v143 = v141 * v142;
            v223[2] = objc_msgSend(v140, "numberWithFloat:", v143);
            v144 = (void *)MEMORY[0x1E0CB37E8];
            v145 = powf(v132, 8.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 3), "floatValue");
            *(float *)&v147 = v145 * v146;
            v115 = v216;
            v223[3] = objc_msgSend(v144, "numberWithFloat:", v147);
            v148 = (void *)MEMORY[0x1E0CB37E8];
            v149 = powf(v132, 10.0);
            objc_msgSend((id)objc_msgSend(v210, "objectAtIndexedSubscript:", 4), "floatValue");
            *(float *)&v151 = v149 * v150;
            v114 = v215;
            v223[4] = objc_msgSend(v148, "numberWithFloat:", v151);
            v223[5] = objc_msgSend(v210, "objectAtIndexedSubscript:", 5);
            v223[6] = objc_msgSend(v210, "objectAtIndexedSubscript:", 6);
            v109 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v223, 7);
          }
        }
        v107 = 0;
        goto LABEL_106;
      }
      v107 = (void *)objc_msgSend(a10, "objectForKeyedSubscript:", *MEMORY[0x1E0D05930]);
      v153 = (_DWORD *)objc_msgSend(v107, "bytes");
      v112 = v63;
      if (v107)
      {
        v154 = v153;
        if (*v153 == 2)
        {
          v202 = v103;
          v189 = v153[8];
          v190 = v153[9];
          v191 = v153[10];
          v192 = v153[11];
          v155 = (v119 + (double)(2 * v153[2] + 196) - v216);
          v156 = (v120 + (double)(2 * v153[3] + 196) - v215);
          v157 = 2 * v153[4];
          v158 = 2 * v153[5];
          v159 = v155 / v157;
          v193 = v155;
          v160 = v156 / v158;
          v161 = v153[7];
          if (v153[6] - 1 >= ((v121 + (double)v155 + (double)v157 + -1.0) / (double)v157))
            v162 = ((v121 + (double)v155 + (double)v157 + -1.0) / (double)v157);
          else
            v162 = v153[6] - 1;
          if (v161 - 1 >= ((v122 + (double)v156 + (double)v158 + -1.0) / (double)v158))
            v163 = ((v122 + (double)v156 + (double)v158 + -1.0) / (double)v158);
          else
            v163 = v161 - 1;
          v198 = v162 - v159 + 1;
          v196 = v163 - v160 + 1;
          v200 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 12 * v196 * v198);
          v164 = objc_msgSend(v200, "mutableBytes");
          v110 = v209;
          if (v163 >= v160)
          {
            v165 = 0;
            v166 = (uint64_t)&v154[v190 + 12];
            v167 = v156 / v158;
            v168 = (uint64_t)&v154[v192 + 12];
            do
            {
              if (v162 >= v159)
              {
                v169 = v154[6] * v167;
                v170 = v159;
                do
                {
                  v171 = v169 + v170;
                  v172 = *(float *)&v154[v189 + 12 + v169 + v170];
                  v173 = *(float *)(v166 + 4 * (v169 + v170));
                  v174 = *(float *)&v154[v191 + 12 + v169 + v170];
                  if (v174 <= *(float *)(v168 + 4 * (v169 + v170)))
                    v174 = *(float *)(v168 + 4 * v171);
                  if (v173 <= v174)
                  {
                    if (v172 <= v174)
                      v172 = v174;
                  }
                  else if (v172 <= v173)
                  {
                    v172 = *(float *)(v166 + 4 * v171);
                  }
                  *(float *)(v164 + 4 * v165) = v172;
                  *(float *)(v164 + 4 * (v165 + 1)) = v172;
                  v175 = v165 + 2;
                  v165 += 3;
                  *(float *)(v164 + 4 * v175) = v172;
                  ++v170;
                }
                while (v170 <= v162);
              }
              ++v167;
            }
            while (v167 <= v163);
          }
          v176 = (double)(int)(v159 * v157 - v193) / v121;
          v177 = (double)(int)(v160 * v158 - v156) / v122;
          v194 = v177;
          v222[0] = &unk_1E49F9000;
          v221[0] = CFSTR("top");
          v221[1] = CFSTR("bottom");
          v222[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v122);
          v222[2] = &unk_1E49F9000;
          v221[2] = CFSTR("left");
          v221[3] = CFSTR("right");
          v222[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v121);
          v222[4] = &unk_1E49F9000;
          v221[4] = CFSTR("plane");
          v221[5] = CFSTR("planes");
          v222[5] = &unk_1E49F9018;
          v222[6] = &unk_1E49F9030;
          v221[6] = CFSTR("rowPitch");
          v221[7] = CFSTR("colPitch");
          v222[7] = &unk_1E49F9030;
          v221[8] = CFSTR("mapsPointsV");
          v222[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v196);
          v221[9] = CFSTR("mapsPointsH");
          v222[9] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v198);
          v221[10] = CFSTR("mapsSpacingV");
          v179 = (double)v158 / v122;
          *(float *)&v180 = v179;
          v222[10] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v180);
          v221[11] = CFSTR("mapsSpacingH");
          v178 = (double)v157 / v121;
          *(float *)&v181 = v178;
          v222[11] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v181);
          v221[12] = CFSTR("mapOriginV");
          *(float *)&v182 = v194;
          v222[12] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v182);
          v221[13] = CFSTR("mapOriginH");
          *(float *)&v183 = v176;
          v222[13] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v183);
          v222[14] = &unk_1E49F9018;
          v221[14] = CFSTR("mapPlanes");
          v221[15] = CFSTR("gainData");
          v222[15] = v200;
          v107 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v222, v221, 16);
          v109 = (uint64_t)v210;
          v108 = v211;
          v114 = v215;
          v115 = v216;
          v113 = v214;
          v103 = v202;
          goto LABEL_107;
        }
        v107 = 0;
      }
      v108 = v211;
      v114 = v215;
      v115 = v216;
LABEL_106:
      v113 = v214;
      v110 = v209;
      goto LABEL_107;
    }
    v152 = objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("CroppedSushiRawLensShadingCorrectionCoefficients"));
    v107 = 0;
    if (v152)
      v109 = v152;
    v108 = a5;
    v110 = v209;
    v111 = v102;
    v112 = v63;
    v113 = v214;
LABEL_107:
    if (a8)
      v184 = (void *)objc_msgSend(a10, "objectForKeyedSubscript:", *MEMORY[0x1E0D05928]);
    else
      v184 = 0;
    if (v212)
      v185 = 0;
    else
      v185 = (void *)v109;
    objc_msgSend(a10, "objectForKeyedSubscript:", *MEMORY[0x1E0D058D8]);
    result = simu_createDNGDictionary(1, v19, v108, v185, v103, a1, v184, (uint64_t)v107, v113, v112, v111, v217, v204, v205, v206, v208, v110, v115, v114);
    if (!result)
      goto LABEL_118;
    return result;
  }
  v78 = FigCaptureMetadataUtilitiesNormalizedRectEnforcedWithinValidRegionAfterGDC((uint64_t)a10, a4, v17, 0.0, 0.0, 1.0, 1.0);
  v207 = (double)v18;
  FigCaptureMetadataUtilitiesDenormalizeCropRect(v78, v79, v80, v81);
  v82 = (double)v18 / (double)SHIDWORD(a3);
  v87 = FigCaptureMetadataUtilitiesRectByCroppingRectToAspectRatio(v83, v84, v85, v86, v82);
  FigCaptureMetadataUtilitiesNormalizeCropRect(v87, v88, v89, v90);
  v227.origin.x = FigCaptureMetadataUtilitiesScaleRect(v91, v92, v93, v94, 1.1);
  v235.origin.x = 0.0;
  v235.origin.y = 0.0;
  v235.size.width = 1.0;
  v235.size.height = 1.0;
  v228 = CGRectIntersection(v227, v235);
  v95 = CGRectContainsRect(v228, rect);
  v96 = v95;
  if (!dword_1EE6BE818)
  {
    if (v95)
      goto LABEL_59;
LABEL_51:
    v77 = 0;
    v98 = v57;
    v61 = v58;
    v207 = v59;
    v18 = a3;
    if (v76)
      goto LABEL_60;
    goto LABEL_52;
  }
  v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!v96)
    goto LABEL_51;
LABEL_59:
  v18 = a3;
  v98 = (double)((int)v17 - (int)a3) * 0.5;
  v56 = (double)(HIDWORD(a1) - HIDWORD(a3)) * 0.5;
  v77 = 1;
  v61 = (double)SHIDWORD(a3);
  if (v76)
    goto LABEL_60;
LABEL_52:
  if ((v77 | a7) == 1)
  {
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)v17, v17 >> 32, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, (double)v18 / (double)SHIDWORD(a3));
    v57 = v229.origin.x;
    v99 = v229.origin.y;
    v65 = v229.size.width;
    v58 = v229.size.height;
    if (CGRectIsNull(v229))
    {
      v188 = v11;
      LODWORD(v187) = 0;
      FigDebugAssert3();
    }
    v230.origin.x = v98;
    v230.origin.y = v56;
    v230.size.width = v207;
    v230.size.height = v61;
    if (CGRectIsNull(v230))
    {
      v61 = v58;
      v207 = v65;
      v56 = v99;
      v63 = v99;
      v100 = v57;
    }
    else
    {
      v100 = v98;
      v63 = v56;
      v56 = v99;
    }
    goto LABEL_61;
  }
LABEL_118:
  FigDebugAssert3();
  return 0;
}

uint64_t simu_createDNGDictionary(int a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, CGFloat a15, CGFloat a16, float a17, double a18, double a19)
{
  void *v31;
  id v32;
  const __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  double v44;
  uint64_t v45;
  int v46;
  float v47;
  unint64_t v48;
  float v49;
  double v50;
  double v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  double v60;
  float v61;
  int v62;
  void *v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  __int16 v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  double v81;
  double v82;
  double v83;
  double v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  int32x2_t v91;
  uint64_t v92;
  int v93;
  double v94;
  int v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  float v101;
  long double v102;
  float32x4_t *v103;
  float32x4_t *v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  uint64x2_t v111;
  long double v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t *v115;
  int32x4_t v116;
  uint64_t v117;
  float v118;
  double v119;
  double v121;
  double v122;
  float32x4_t v123;
  long double v124;
  float64x2_t v125;
  CGFloat rect;
  long double recta;
  CGFloat rect_16;
  float64x2_t rect_16a;
  uint64_t v130;
  float64x2_t v131;
  int32x4_t v133;
  float64x2_t __ya;
  _QWORD v136[22];
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  _QWORD v145[2];
  _QWORD v146[4];
  _QWORD v147[5];
  CGRect v148;
  CGRect v149;
  CGRect v150;

  v147[3] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_103;
  if (simu_createDNGDictionary_sMobileGestaltOnceToken != -1)
  {
    v121 = a14;
    v122 = a13;
    dispatch_once(&simu_createDNGDictionary_sMobileGestaltOnceToken, &__block_literal_global_36);
    a13 = v122;
    a14 = v121;
  }
  if (!simu_createDNGDictionary_sProductTypeString)
    goto LABEL_103;
  rect = a13;
  rect_16 = a14;
  v130 = a6;
  v31 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  v32 = v31;
  if (!v31)
    goto LABEL_104;
  if ((objc_msgSend(v31, "isEqualToString:", *MEMORY[0x1E0D05A38]) & 1) != 0)
  {
    v33 = CFSTR("front camera");
    goto LABEL_16;
  }
  if ((objc_msgSend(v32, "isEqualToString:", *MEMORY[0x1E0D05A50]) & 1) != 0)
  {
    v33 = CFSTR("front ultra wide camera");
    goto LABEL_16;
  }
  if ((objc_msgSend(v32, "isEqualToString:", *MEMORY[0x1E0D05A18]) & 1) != 0)
  {
    v33 = CFSTR("back camera");
    goto LABEL_16;
  }
  if ((objc_msgSend(v32, "isEqualToString:", *MEMORY[0x1E0D05A30]) & 1) != 0)
  {
    v33 = CFSTR("back telephoto camera");
    goto LABEL_16;
  }
  if (!objc_msgSend(v32, "isEqualToString:", *MEMORY[0x1E0D05A28]))
  {
LABEL_103:
    v32 = 0;
    goto LABEL_104;
  }
  v33 = CFSTR("back ultra wide camera");
LABEL_16:
  v32 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v34 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), simu_createDNGDictionary_sProductTypeString, v33);
  objc_msgSend(v32, "setObject:forKeyedSubscript:", v34, *MEMORY[0x1E0CBC9D0]);
  if (a1 == 2)
  {
    objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E49F9078, *MEMORY[0x1E0CBC9F0]);
    objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E49F9090, *MEMORY[0x1E0CBC928]);
    v36 = &unk_1E4A02E20;
    v37 = (_QWORD *)MEMORY[0x1E0CBC920];
  }
  else
  {
    if (a1 != 1)
      goto LABEL_22;
    objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E49F9060, *MEMORY[0x1E0CBC9F0]);
    v35 = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EA8]);
    if (!v35)
      goto LABEL_104;
    v36 = (void *)v35;
    v37 = (_QWORD *)MEMORY[0x1E0CBC928];
  }
  objc_msgSend(v32, "setObject:forKeyedSubscript:", v36, *v37);
LABEL_22:
  v38 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06800]);
  if (!v38)
    v38 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06848]);
  v39 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F8]);
  if (!v39)
    v39 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06820]);
  v40 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F0]);
  if (!v40)
    v40 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E8]);
  v41 = objc_msgSend(v38, "intValue");
  v42 = objc_msgSend(v39, "intValue");
  v43 = objc_msgSend(v40, "intValue");
  v45 = 0;
  if (v41 >= 1 && v42 >= 1 && v43 >= 1)
  {
    if (v42 >= v43)
      v46 = v43;
    else
      v46 = v42;
    if (v41 < v46)
      v46 = v41;
    *(float *)&v44 = (float)v46 / (float)v41;
    v47 = (float)v46 / (float)v42;
    v48 = 0x1E0CB3000uLL;
    v49 = (float)v46 / (float)v43;
    v147[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v44);
    *(float *)&v50 = v47;
    v147[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v50);
    *(float *)&v51 = v49;
    v147[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v51);
    v52 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v147, 3);
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v52, *MEMORY[0x1E0CBC8F0]);
    if (objc_msgSend(a3, "count") != 2)
      goto LABEL_104;
    v53 = (void *)objc_msgSend(a3, "objectAtIndexedSubscript:", 0);
    if (!objc_msgSend(v53, "count"))
      goto LABEL_104;
    v54 = objc_msgSend(v53, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v54, *MEMORY[0x1E0CBC930]);
    if ((unint64_t)objc_msgSend(v53, "count") >= 2)
    {
      v55 = objc_msgSend(v53, "objectAtIndexedSubscript:", 1);
      objc_msgSend(v32, "setObject:forKeyedSubscript:", v55, *MEMORY[0x1E0CBC938]);
    }
    v56 = (void *)objc_msgSend(a3, "objectAtIndexedSubscript:", 1);
    if (!objc_msgSend(v56, "count"))
      goto LABEL_104;
    v57 = objc_msgSend(v56, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v57, *MEMORY[0x1E0CBC958]);
    if ((unint64_t)objc_msgSend(v56, "count") >= 2)
    {
      v58 = objc_msgSend(v56, "objectAtIndexedSubscript:", 1);
      objc_msgSend(v32, "setObject:forKeyedSubscript:", v58, *MEMORY[0x1E0CBC960]);
    }
    v59 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F60]), "intValue");
    v61 = 0.0;
    if (v59 >= 1)
    {
      v62 = v59;
      objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F68]), "floatValue");
      if (*(float *)&v60 > 0.0)
        v61 = log2f((float)((float)v62 * 0.0039062) / *(float *)&v60) + 0.0;
    }
    if (a1 != 1)
    {
      if (a1 != 2 || (v63 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FA0])) == 0)
      {
LABEL_51:
        v148.origin.x = a9;
        v148.origin.y = a10;
        v148.size.width = a11;
        v148.size.height = a12;
        if (!CGRectIsEmpty(v148))
        {
          v146[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)a10);
          v146[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)a9);
          v146[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)(a10 + a12));
          v146[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)(a9 + a11));
          v66 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v146, 4);
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v66, *MEMORY[0x1E0CBC8E0]);
          objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E4A006F8, *MEMORY[0x1E0CBC970]);
          v145[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)a11);
          v145[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)a12);
          v67 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v145, 2);
          objc_msgSend(v32, "setObject:forKeyedSubscript:", v67, *MEMORY[0x1E0CBC978]);
        }
        if (a4 && objc_msgSend(a4, "count") == 7)
          objc_msgSend(v32, "setObject:forKeyedSubscript:", a4, *MEMORY[0x1E0CBC988]);
        if (a8)
          objc_msgSend(v32, "setObject:forKeyedSubscript:", a8, CFSTR("GainMap"));
        if (a1 == 2)
        {
          objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E4A02E30, *MEMORY[0x1E0CBC9A0]);
          objc_msgSend(v32, "setObject:forKeyedSubscript:", &unk_1E4A00710, *MEMORY[0x1E0CBC998]);
          if ((simu_addToneCurvesToDNGDictionary(v32, a2, v130, 0) & 1) == 0)
            goto LABEL_104;
          goto LABEL_101;
        }
        if (a1 != 1)
          goto LABEL_101;
        if (!a5)
        {
LABEL_79:
          if (a7)
          {
            v149.origin.x = a9;
            v149.origin.y = a10;
            v149.size.width = a11;
            v149.size.height = a12;
            if (!CGRectIsNull(v149))
            {
              v150.origin.x = rect;
              v150.origin.y = rect_16;
              v150.size.width = a15;
              v150.size.height = a16;
              if (!CGRectIsNull(v150))
              {
                v85 = (void *)objc_msgSend(a7, "objectForKeyedSubscript:", *MEMORY[0x1E0D065A8]);
                if (v85)
                {
                  v86 = v85;
                  if (objc_msgSend(v85, "length") == 64)
                  {
                    v87 = objc_msgSend(v86, "bytes");
                    v88 = (void *)objc_msgSend(a7, "objectForKeyedSubscript:", *MEMORY[0x1E0D065B0]);
                    if (v88)
                    {
                      v89 = v88;
                      if (objc_msgSend(v88, "length") == 64)
                      {
                        v90 = objc_msgSend(v89, "bytes");
                        objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D069D8]), "floatValue");
                        v92 = 0;
                        if ((int)v130 >= 0)
                          v93 = v130;
                        else
                          v93 = v130 + 1;
                        v94 = a18 + (double)(v93 >> 1);
                        if (v130 >= 0)
                          v95 = HIDWORD(v130);
                        else
                          v95 = HIDWORD(v130) + 1;
                        v96 = v95 >> 1;
                        v97 = v94 / (double)(int)v130;
                        v98 = (a19 + (double)v96) / (double)SHIDWORD(v130);
                        v99 = 1.0 - v97;
                        if (v97 > 1.0 - v97)
                          v99 = v94 / (double)(int)v130;
                        v100 = 1.0 - v98;
                        if (v98 > 1.0 - v98)
                          v100 = (a19 + (double)v96) / (double)SHIDWORD(v130);
                        v101 = sqrt(a16 * a16 * (v100 * v100) + v99 * v99 * (a15 * a15));
                        v102 = (float)((float)(a17 / 1000.0) * v101);
                        v123 = (float32x4_t)vdupq_lane_s32(v91, 0);
                        v103 = (float32x4_t *)(v87 + 32);
                        v104 = (float32x4_t *)(v90 + 32);
                        v105 = (int32x4_t)xmmword_1A3161E00;
                        do
                        {
                          v106 = *v103++;
                          v107 = v106;
                          v108 = *v104++;
                          v109 = vmlaq_f32(v107, v123, v108);
                          v131 = vcvt_hight_f64_f32(v109);
                          v133 = v105;
                          rect_16a = vcvtq_f64_f32(*(float32x2_t *)v109.f32);
                          v110 = vaddq_s32(v105, v105);
                          v111.i64[0] = v110.u32[2];
                          v111.i64[1] = v110.u32[3];
                          __ya = vcvtq_f64_u64(v111);
                          v111.i64[0] = v110.u32[0];
                          v111.i64[1] = v110.u32[1];
                          v125 = vcvtq_f64_u64(v111);
                          recta = pow(v102, v125.f64[0]);
                          v125.f64[0] = pow(v102, v125.f64[1]);
                          v124 = pow(v102, __ya.f64[0]);
                          v112 = pow(v102, __ya.f64[1]);
                          v113.f64[0] = v124;
                          v113.f64[1] = v112;
                          v114.f64[0] = recta;
                          v114.f64[1] = v125.f64[0];
                          v115 = (float64x2_t *)((char *)&v137 + v92);
                          *v115 = vmulq_f64(v114, rect_16a);
                          v115[1] = vmulq_f64(v113, v131);
                          v116.i64[0] = 0x400000004;
                          v116.i64[1] = 0x400000004;
                          v105 = vaddq_s32(v133, v116);
                          v92 += 32;
                        }
                        while (v92 != 64);
                        v117 = 0;
                        v137 = 100.0;
                        v118 = a11 / a15;
                        v119 = v118 / 100.0;
                        do
                        {
                          *(float64x2_t *)((char *)&v137 + v117) = vmulq_n_f64(*(float64x2_t *)((char *)&v137 + v117), v119);
                          v117 += 16;
                        }
                        while (v117 != 64);
                        v136[0] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v137);
                        v136[1] = &unk_1E4A02480;
                        v136[2] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v138);
                        v136[3] = &unk_1E4A02480;
                        v136[4] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v139);
                        v136[5] = &unk_1E4A02480;
                        v136[6] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v140);
                        v136[7] = &unk_1E4A02480;
                        v136[8] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v141);
                        v136[9] = &unk_1E4A02480;
                        v136[10] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v142);
                        v136[11] = &unk_1E4A02480;
                        v136[12] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v143);
                        v136[13] = &unk_1E4A02480;
                        v136[14] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v144);
                        v136[15] = &unk_1E4A02480;
                        v136[16] = &unk_1E4A02480;
                        v136[17] = &unk_1E4A02480;
                        v136[18] = &unk_1E4A02490;
                        v136[19] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v97);
                        v136[20] = objc_msgSend(*(id *)(v48 + 2024), "numberWithDouble:", v98);
                        v136[21] = objc_msgSend(*(id *)(v48 + 2024), "numberWithUnsignedInt:", 1);
                        objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v136, 22), CFSTR("WarpRectilinear2"));
                        goto LABEL_101;
                      }
                    }
                  }
                }
              }
            }
LABEL_104:
            v45 = 0;
            goto LABEL_102;
          }
LABEL_101:
          v45 = objc_msgSend(v32, "copy");
          goto LABEL_102;
        }
        v68 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06B48]), "shortValue");
        if (v68)
        {
          v69 = v68;
          v70 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("SushiRawNoiseProfile_ISOArray"));
          v71 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("SushiRawNoiseProfile_SignalComponentArray"));
          v72 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("SushiRawNoiseProfile_DarkComponentArray"));
          v73 = 0;
          if (!v70)
            goto LABEL_78;
          if (!v71)
            goto LABEL_78;
          v74 = (void *)v72;
          if (!v72)
            goto LABEL_78;
          v75 = objc_msgSend(v70, "count", 0);
          if (v75)
          {
            v76 = v75;
            if (v75 == objc_msgSend(v71, "count") && v76 == objc_msgSend(v74, "count"))
            {
              v77 = objc_msgSend((id)objc_msgSend(v70, "objectAtIndexedSubscript:", 0), "shortValue");
              if (v76 < 2)
              {
                v79 = 1;
LABEL_77:
                objc_msgSend((id)objc_msgSend(v71, "objectAtIndexedSubscript:", v79 - 1), "doubleValue");
                v82 = v81;
                objc_msgSend((id)objc_msgSend(v74, "objectAtIndexedSubscript:", v79 - 1), "doubleValue");
                v84 = v83;
                v48 = 0x1E0CB3000uLL;
                *(_QWORD *)&v137 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v82);
                v138 = COERCE_DOUBLE(objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v84));
                v73 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v137, 2);
              }
              else
              {
                v78 = v77;
                v79 = 1;
                while (1)
                {
                  v80 = objc_msgSend((id)objc_msgSend(v70, "objectAtIndexedSubscript:", v79), "shortValue");
                  if (v80 <= v78)
                    break;
                  if (v69 < (v80 + v78) >> 1)
                    goto LABEL_77;
                  ++v79;
                  v78 = v80;
                  if (v76 == v79)
                  {
                    v79 = v76;
                    goto LABEL_77;
                  }
                }
                v73 = 0;
                v48 = 0x1E0CB3000;
              }
              goto LABEL_78;
            }
          }
        }
        v73 = 0;
LABEL_78:
        objc_msgSend(v32, "setObject:forKeyedSubscript:", v73, *MEMORY[0x1E0CBC998]);
        goto LABEL_79;
      }
      objc_msgSend(v63, "floatValue");
      v61 = log2f(1.0 / v64);
    }
    *(float *)&v60 = v61;
    v65 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v60);
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v65, *MEMORY[0x1E0CBC910]);
    goto LABEL_51;
  }
LABEL_102:

  return v45;
}

uint64_t BWCreateDemosaicedRawDNGDictionary(uint64_t a1, _BOOL8 a2, void *a3, void *a4, void *a5, float a6)
{
  uint64_t result;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const __CFDictionary *v17;
  CGSize v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGRect rect;
  CGRect v23;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = 0;
  if (HIDWORD(a1) && (_DWORD)a1 && a6 != 0.0 && a3 && a4)
  {
    if (!FigCapturePixelFormatIsDemosaicedRaw(a2))
      goto LABEL_13;
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v17 = (const __CFDictionary *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E68]);
    if (v17)
    {
      v18 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      rect.size = v18;
      if (CGRectMakeWithDictionaryRepresentation(v17, &rect))
      {
        FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height, a6);
        x = v23.origin.x;
        y = v23.origin.y;
        width = v23.size.width;
        height = v23.size.height;
        if (CGRectIsNull(v23))
        {
          v20 = v21;
          LODWORD(v19) = 0;
          FigDebugAssert3();
        }
      }
    }
    objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E0D058D8], v19, v20);
    result = simu_createDNGDictionary(2, a3, a4, 0, 0, a1, 0, 0, x, y, width, height, x, y, width, height, 0.0, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
    if (!result)
    {
LABEL_13:
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

void *BWDNGColorCalibrations(void *a1)
{
  uint64_t v2;
  unsigned int v3;
  void *v4;
  void *result;
  void *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  void *v23;
  void *v24;
  double v25;
  uint64_t i;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _OWORD v34[4];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1 || objc_msgSend(a1, "count") != 2)
    return 0;
  v30 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  if (objc_msgSend(a1, "count"))
  {
    v2 = 0;
    v3 = 1;
    while (1)
    {
      v4 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v2);
      result = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("Temperature"));
      if (!result)
        break;
      objc_msgSend(result, "floatValue");
      *((_WORD *)&v30 + v2) = CMPhotoDNGGetLightSourceTagFromTemp();
      result = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("DeviceRGBToXYZMatrix"));
      if (!result)
        break;
      v6 = result;
      if (objc_msgSend(result, "length") != 36)
        return 0;
      v7 = (float *)objc_msgSend(v6, "bytes");
      v8 = v7[7];
      v9 = v7[8];
      v10 = v7[4];
      v11 = v7[5];
      v12 = v7[6];
      v13 = (float)(v10 * v9) - (float)(v11 * v8);
      v14 = *v7;
      v15 = v7[1];
      v17 = v7[2];
      v16 = v7[3];
      v18 = (float)(v11 * v12) - (float)(v16 * v9);
      v19 = (float)(v16 * v8) - (float)(v10 * v12);
      v20 = (float)((float)(v15 * v18) + (float)(*v7 * v13)) + (float)(v17 * v19);
      if (v20 == 0.0)
        return 0;
      v21 = (float *)v34 + 9 * v2;
      *v21 = v13 / v20;
      v21[1] = (float)((float)(v17 * v8) - (float)(v15 * v9)) / v20;
      v21[2] = (float)((float)(v15 * v11) - (float)(v17 * v10)) / v20;
      v21[3] = v18 / v20;
      v21[4] = (float)((float)(v14 * v9) - (float)(v17 * v12)) / v20;
      v21[5] = (float)((float)(v17 * v16) - (float)(v14 * v11)) / v20;
      v21[6] = v19 / v20;
      v21[7] = (float)((float)(v15 * v12) - (float)(v14 * v8)) / v20;
      v21[8] = (float)((float)(v14 * v10) - (float)(v15 * v16)) / v20;
      v2 = v3;
      if (objc_msgSend(a1, "count") <= (unint64_t)v3++)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v23 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 9);
    v24 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 9);
    for (i = 0; i != 36; i += 4)
    {
      LODWORD(v25) = *(_DWORD *)((char *)v34 + i);
      objc_msgSend(v23, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v25));
      LODWORD(v27) = *(_DWORD *)((char *)&v34[2] + i + 4);
      objc_msgSend(v24, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v27));
    }
    v33[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)v30);
    v33[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SHIWORD(v30));
    v28 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 2);
    v32[0] = v23;
    v32[1] = v24;
    v29 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
    v31[0] = v28;
    v31[1] = v29;
    return (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 2);
  }
  return result;
}

void *BWCreateDNGDictionaryForZoom(void *a1, double a2, double a3, double a4, double a5)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  float v20;
  double v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float v26;
  double v27;
  float v28;
  float v29;
  double v30;
  float v31;
  double v32;
  float v33;
  float v34;
  float v35;
  double v36;
  float v37;
  float v38;
  double v39;
  float v40;
  unsigned int v41;
  float v42;
  double v43;
  float v44;
  double v45;
  float v46;
  double v47;
  float v48;
  double v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  void *v59;
  int v60;
  unint64_t v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  size_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  float v80;
  unsigned int v81;
  float v82;
  unsigned int v83;
  double v84;
  void *v85;
  unsigned int v86;
  void *v87;
  double v88;
  float v89;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    goto LABEL_3;
  a1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", a1);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC8E0]);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC970]);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC978]);
  if (objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0CBC988]))
    goto LABEL_3;
  v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ProfileGainTableMap"));
  if (!v10)
    return a1;
  v11 = v10;
  v12 = (void *)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("MapPointsH"));
  v13 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapPointsV"));
  v14 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapPointsN"));
  v15 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapSpacingH"));
  v16 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapSpacingV"));
  v17 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapOriginH"));
  v18 = objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapOriginV"));
  if (!v13)
    goto LABEL_30;
  if (!v12)
    goto LABEL_30;
  if (!v14)
    goto LABEL_30;
  if (!v15)
    goto LABEL_30;
  if (!v16)
    goto LABEL_30;
  if (!v17)
    goto LABEL_30;
  v19 = (void *)v18;
  if (!v18)
    goto LABEL_30;
  objc_msgSend(v17, "floatValue");
  v21 = a2 - v20;
  objc_msgSend(v15, "floatValue");
  if (floor(v21 / v22) <= 0.0)
  {
    v86 = 0;
  }
  else
  {
    objc_msgSend(v17, "floatValue");
    v24 = a2 - v23;
    objc_msgSend(v15, "floatValue");
    v86 = vcvtmd_u64_f64(v24 / v25);
  }
  objc_msgSend(v17, "floatValue");
  v27 = a2 + a4 - v26;
  objc_msgSend(v15, "floatValue");
  if (ceil(v27 / v28) >= (double)(int)(objc_msgSend(v12, "intValue") - 1))
  {
    v32 = (double)(int)(objc_msgSend(v12, "intValue") - 1);
  }
  else
  {
    objc_msgSend(v17, "floatValue");
    v30 = a2 + a4 - v29;
    objc_msgSend(v15, "floatValue");
    v32 = ceil(v30 / v31);
  }
  v84 = v32;
  objc_msgSend(v17, "floatValue");
  v82 = v33;
  objc_msgSend(v15, "floatValue");
  v80 = v34;
  objc_msgSend(v19, "floatValue");
  v36 = a3 - v35;
  objc_msgSend(v16, "floatValue");
  if (floor(v36 / v37) <= 0.0)
  {
    v41 = 0;
  }
  else
  {
    objc_msgSend(v19, "floatValue");
    v39 = a3 - v38;
    objc_msgSend(v16, "floatValue");
    v41 = vcvtmd_u64_f64(v39 / v40);
  }
  v88 = a4;
  objc_msgSend(v19, "floatValue");
  v43 = a3 + a5 - v42;
  objc_msgSend(v16, "floatValue");
  v45 = a5;
  if (ceil(v43 / v44) >= (double)(int)(objc_msgSend(v13, "intValue") - 1))
  {
    v49 = (double)(int)(objc_msgSend(v13, "intValue") - 1);
  }
  else
  {
    objc_msgSend(v19, "floatValue");
    v47 = a3 + a5 - v46;
    objc_msgSend(v16, "floatValue");
    v49 = ceil(v47 / v48);
  }
  objc_msgSend(v19, "floatValue");
  v51 = v50;
  objc_msgSend(v16, "floatValue");
  v53 = v52;
  objc_msgSend(v15, "floatValue");
  v55 = v54;
  objc_msgSend(v16, "floatValue");
  v57 = v56;
  v58 = 4 * objc_msgSend(v14, "intValue");
  v87 = v11;
  v59 = (void *)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("GainValues"));
  v60 = objc_msgSend(v13, "intValue") * v58;
  v61 = v60 * objc_msgSend(v12, "intValue");
  if (objc_msgSend(v59, "length") < v61)
  {
LABEL_30:
    FigDebugAssert3();
LABEL_3:

    return 0;
  }
  v62 = 1.0 / v88;
  v63 = 1.0 / v45;
  v64 = ((float)(v82 + (float)((float)v86 * v80)) - a2) * v62;
  v89 = v64;
  v65 = v49;
  v66 = ((float)(v51 + (float)((float)v41 * v53)) - a3) * v63;
  v67 = v55 * v62;
  v68 = v57 * v63;
  v81 = v65 - v41 + 1;
  v83 = v84 - v86 + 1;
  v69 = v58 * v83;
  v85 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v69 * v81);
  v70 = objc_msgSend(v85, "mutableBytes");
  if (v65 >= v41)
  {
    v71 = (char *)v70;
    v72 = v41;
    v73 = v65 + 1;
    do
    {
      memcpy(v71, (const void *)(objc_msgSend(v59, "bytes") + (v86 + v72 * (int)objc_msgSend(v12, "intValue")) * v58), v69);
      v71 += v69;
      ++v72;
    }
    while (v73 != v72);
  }
  v74 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v87);
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v81), CFSTR("MapPointsV"));
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v83), CFSTR("MapPointsH"));
  *(float *)&v75 = v68;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v75), CFSTR("MapSpacingV"));
  *(float *)&v76 = v67;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v76), CFSTR("MapSpacingH"));
  *(float *)&v77 = v66;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v77), CFSTR("MapOriginV"));
  *(float *)&v78 = v89;
  objc_msgSend(v74, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v78), CFSTR("MapOriginH"));
  objc_msgSend(v74, "setObject:forKeyedSubscript:", v85, CFSTR("GainValues"));
  objc_msgSend(a1, "setObject:forKeyedSubscript:", v74, CFSTR("ProfileGainTableMap"));
  return a1;
}

uint64_t BWCreateDNGDictionaryWithZoomedGDCParameters(void *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[9];
  CGRect v23;

  v22[8] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    goto LABEL_11;
  if (objc_msgSend(a2, "count") != 4
    || (v23.origin.x = a4, v23.origin.y = a5, v23.size.width = a6, v23.size.height = a7, CGRectIsEmpty(v23))
    || (a8 == *MEMORY[0x1E0C9D538] ? (v18 = a9 == *(double *)(MEMORY[0x1E0C9D538] + 8)) : (v18 = 0), v18))
  {
    a1 = 0;
LABEL_11:
    v20 = 0;
    goto LABEL_9;
  }
  a1 = (void *)objc_msgSend(a1, "mutableCopy");
  v22[0] = objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
  v22[1] = objc_msgSend(a2, "objectAtIndexedSubscript:", 1);
  v22[2] = objc_msgSend(a2, "objectAtIndexedSubscript:", 2);
  v22[3] = objc_msgSend(a2, "objectAtIndexedSubscript:", 3);
  v22[4] = &unk_1E4A02450;
  v22[5] = &unk_1E4A02450;
  v22[6] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (a8 + (double)(int)a3 * 0.5 - a4) / a6);
  v22[7] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (a9 + (double)SHIDWORD(a3) * 0.5 - a5) / a7);
  v19 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 8);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", v19, *MEMORY[0x1E0CBC9E8]);
  v20 = objc_msgSend(a1, "copy");
LABEL_9:

  return v20;
}

uint64_t BWCreateDNGDictionaryWithUpdatedDimensionsIfNeeded(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    goto LABEL_17;
  v6 = 0;
  if (!(_DWORD)a2)
    goto LABEL_18;
  v7 = 0;
  if (!HIDWORD(a2))
    goto LABEL_16;
  v6 = 0;
  if (!(_DWORD)a3)
  {
LABEL_18:
    v7 = 0;
    goto LABEL_16;
  }
  v7 = 0;
  if (!HIDWORD(a3))
    goto LABEL_16;
  if (a2 == a3
    || (v8 = *MEMORY[0x1E0CBC8E0],
        v9 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0CBC8E0]),
        v45 = *MEMORY[0x1E0CBC970],
        v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:"),
        v11 = *MEMORY[0x1E0CBC978],
        v12 = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0CBC978]),
        v13 = (void *)v12,
        !v9)
    && !v10
    && !v12)
  {
LABEL_17:
    v6 = 0;
    v7 = 0;
    goto LABEL_16;
  }
  v44 = v11;
  v7 = (void *)objc_msgSend(a1, "mutableCopy");
  v14 = 1.0 / ((double)(int)a2 / (double)(int)a3);
  v15 = 1.0 / ((double)SHIDWORD(a2) / (double)SHIDWORD(a3));
  if (v9)
  {
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 1), "doubleValue");
    v17 = v16;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 0), "doubleValue");
    v19 = v18;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 3), "doubleValue");
    v21 = v20;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 1), "doubleValue");
    v23 = v21 - v22;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 2), "doubleValue");
    v25 = v24;
    objc_msgSend((id)objc_msgSend(v9, "objectAtIndexedSubscript:", 0), "doubleValue");
    v27 = v25 - v26;
    v28 = v14 * v17;
    v29 = v15 * v19;
    v30 = v14 * v23;
    v31 = v15 * v27;
    v48[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v29);
    v48[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v28);
    v48[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v31 - v29);
    v48[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v30 - v28);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 4), v8);
  }
  if (v10 && v13)
  {
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 0), "doubleValue");
    v33 = v32;
    objc_msgSend((id)objc_msgSend(v10, "objectAtIndexedSubscript:", 1), "doubleValue");
    v35 = v34;
    objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 0), "doubleValue");
    v37 = v36;
    objc_msgSend((id)objc_msgSend(v13, "objectAtIndexedSubscript:", 1), "doubleValue");
    v38 = v14 * v33;
    v39 = v15 * v35;
    v40 = v14 * v37;
    v42 = v15 * v41;
    v47[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v38);
    v47[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v39);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v47, 2), v45);
    v46[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v40);
    v46[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v42);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v46, 2), v44);
  }
  v6 = objc_msgSend(v7, "copy");
LABEL_16:

  return v6;
}

uint64_t BWCreateDNGDictionaryWithUpdatedToneCurvesIfNeeded(void *a1, unint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  _WORD *v8;
  _WORD *v9;
  void *v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v17;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
    goto LABEL_15;
  v6 = 0;
  if (!a3 || !HIDWORD(a2))
  {
    v7 = 0;
    goto LABEL_14;
  }
  v7 = 0;
  if ((_DWORD)a2)
  {
    FigNote_AllowInternalDefaultLogs();
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    v17 = 0;
    v8 = simu_ltmLUTsFromMetadata(a3, &v17);
    if (v8)
    {
      if (v17 == 4)
      {
        v9 = v8;
        v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ProfileGainTableMap"));
        if (!v10
          || (v11 = v10,
              v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("MapPointsH")), "unsignedIntValue"), v13 = (unsigned __int16)v9[1], v14 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("MapPointsV")), "unsignedIntValue"), v12 != v13)|| v14 != (unsigned __int16)v9[2])
        {
          v6 = (void *)objc_msgSend(a1, "mutableCopy");
          objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D069C0]), "floatValue");
          if (v15 == 0.0)
            v15 = 1.0;
          if (simu_addToneCurvesToDNGDictionary(v6, a3, a2, v15 != 1.0))
          {
            v7 = objc_msgSend(v6, "copy");
            goto LABEL_14;
          }
LABEL_16:
          v7 = 0;
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    v6 = 0;
    goto LABEL_16;
  }
LABEL_14:

  return v7;
}

uint64_t simu_addToneCurvesToDNGDictionary(void *a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  void *v12;
  double v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  double v17;
  void *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  float v24;
  void *v25;
  uint64_t result;
  void *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unint64_t v35;
  float v36;
  unint64_t v37;
  float v38;
  float v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  float v45;
  unint64_t v46;
  unint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  unint64_t v51;
  float v52;
  unsigned int v53;
  float v54;
  float v55;
  float v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  double v64;
  float v65;
  float v66;
  unint64_t v67;
  float v68;
  double v69;
  unint64_t v70;
  float v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned __int16 *v86;
  unsigned int v87;
  float v88;
  float v89;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  double v94;
  float v95;
  float v96;
  double v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v111;
  unsigned __int16 *v113;
  float v114;
  float v115;
  unsigned __int16 *v116;
  float v117;
  float v118;
  uint64_t v119;
  unint64_t v120;
  CGRect v121;
  int v122;
  _QWORD v123[9];
  _QWORD v124[9];
  _QWORD v125[7];

  v125[5] = *MEMORY[0x1E0C80C00];
  v6 = *MEMORY[0x1E0CBC9C8];
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC9C8]);
  v7 = *MEMORY[0x1E0CBC968];
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC968]);
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0, CFSTR("ProfileGainTableMap"));
  v106 = *MEMORY[0x1E0CBC9C0];
  objc_msgSend(a1, "setObject:forKeyedSubscript:", 0);
  v8 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AF0]);
  v111 = a2;
  if (v8)
  {
    v9 = v8;
    v10 = (unsigned __int16 *)objc_msgSend(v8, "bytes");
    v11 = *v10;
    if (2 * v11 + 2 != objc_msgSend(v9, "length"))
      return 0;
    v12 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 2 * v11);
    if ((_DWORD)v11)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        *(float *)&v13 = (float)v15 / (float)((float)v11 + -1.0);
        objc_msgSend(v12, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v13), v14 * 2);
        LOWORD(v17) = v10[v14 + 1];
        LOWORD(v16) = v10[v11];
        *(float *)&v17 = (float)LODWORD(v17) / (float)v16;
        if (*(float *)&v17 >= 0.04045)
          *(float *)&v17 = powf((float)(*(float *)&v17 + 0.055) / 1.055, 2.4);
        else
          *(float *)&v17 = *(float *)&v17 / 12.92;
        objc_msgSend(v12, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v17), v14 * 2 + 1);
        ++v15;
        ++v14;
      }
      while (v11 != v14);
    }
    objc_msgSend(a1, "setObject:forKeyedSubscript:", v12, v6);
    objc_msgSend(a1, "setObject:forKeyedSubscript:", &unk_1E49F9030, v7);
  }
  v18 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05FA0]);
  if (v18)
  {
    objc_msgSend(v18, "floatValue");
    v20 = 1.0 / v19;
  }
  else
  {
    v20 = 1.0;
  }
  v114 = v20;
  v21 = *MEMORY[0x1E0D05F88];
  v22 = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F88]);
  v109 = v6;
  if (v22)
  {
    v23 = (void *)v22;
    objc_msgSend(a1, "setObject:forKeyedSubscript:", v22, v21);
    objc_msgSend(v23, "floatValue");
    v114 = v114 * v24;
  }
  v25 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F20]);
  result = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AD0]);
  if (result)
  {
    v27 = (void *)result;
    if ((unint64_t)objc_msgSend((id)result, "length") >= 2)
    {
      v28 = (unsigned __int16 *)objc_msgSend(v27, "bytes");
      v29 = *v28;
      v113 = v28 + 1;
      v122 = 0;
      v30 = simu_ltmLUTsFromMetadata(a2, &v122);
      result = 0;
      if (v30 && v122 == 4)
      {
        v108 = a1;
        v31 = v30[11];
        v107 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * v29 * v30[1] * (unint64_t)v30[2]);
        v119 = objc_msgSend(v107, "mutableBytes");
        v32 = v30[2];
        v33 = v30[1];
        v116 = v30;
        if (v30[2])
        {
          v120 = 0;
          v34 = v30 + 12;
          v35 = v29 - 1;
          v117 = (float)(unint64_t)(v29 - 1);
          v118 = (float)v29 + -1.0;
          v36 = 1.0 / (double)(unint64_t)(v29 - 1);
          v115 = v36;
          v37 = v31 - 1;
          v38 = (float)(unint64_t)(v31 - 1);
          v39 = 1.0 / (double)(unint64_t)(v31 - 1);
          v40 = v30[1];
          do
          {
            if (v40)
            {
              v41 = 0;
              do
              {
                if ((_DWORD)v29)
                {
                  v42 = 0;
                  v43 = v41 * v30[11] + ((v120 * v30[3]) >> 1);
                  do
                  {
                    v44 = (float)v42 / v118;
                    v45 = 1.0;
                    if (v25)
                    {
                      v46 = vcvtms_u32_f32(v44 * v117);
                      if (v46 + 1 < v35)
                        v47 = v46 + 1;
                      else
                        v47 = v35;
                      if (v46)
                        v48 = (float)v42 / v118;
                      else
                        v48 = v115;
                      if (v46)
                        v49 = v44 * v117;
                      else
                        v49 = (float)v47;
                      v50 = v29;
                      if (v46)
                        v51 = v46;
                      else
                        v51 = v47;
                      v52 = (float)objc_msgSend((id)objc_msgSend(v25, "objectAtIndex:", v51), "unsignedShortValue")/ 65535.0;
                      v53 = objc_msgSend((id)objc_msgSend(v25, "objectAtIndex:", v47), "unsignedShortValue");
                      v54 = (float)v51;
                      v29 = v50;
                      v30 = v116;
                      v44 = (float)((float)(v49 - v54) * (float)((float)v53 / 65535.0))
                          + (1.0 - (float)(v49 - v54)) * v52;
                      v55 = v44 / v48;
                      if (v48 == 0.0)
                        v55 = 1.0;
                    }
                    else
                    {
                      v55 = 1.0;
                    }
                    v56 = v44 * v38;
                    v57 = vcvtms_u32_f32(v44 * v38);
                    if (v57 + 1 < v37)
                      v58 = v57 + 1;
                    else
                      v58 = v37;
                    v59 = (float)v58;
                    if (v57)
                      v60 = v44;
                    else
                      v60 = v39;
                    if (v57)
                      v61 = v44 * v38;
                    else
                      v61 = (float)v58;
                    if (!v57)
                      v57 = v58;
                    LOWORD(v56) = v34[v57 + v43];
                    LOWORD(v59) = v34[v58 + v43];
                    v62 = (float)LODWORD(v59) / 65535.0;
                    v63 = v61 - (float)v57;
                    v64 = 1.0 - v63;
                    v65 = (float)(v63 * v62) + v64 * (float)((float)LODWORD(v56) / 65535.0);
                    if (v60 != 0.0)
                      v45 = v65 / (float)(v114 * v60);
                    v66 = 1.0;
                    if (v65 != 0.0)
                    {
                      v67 = vcvtms_u32_f32(v117 * v65);
                      v68 = (float)(v117 * v65) - (float)v67;
                      LOWORD(v62) = v113[v67];
                      v69 = (float)((float)LODWORD(v62) / 65535.0);
                      if (v67 + 1 < v35)
                        v70 = v67 + 1;
                      else
                        v70 = v35;
                      LOWORD(v64) = v113[v70];
                      v71 = (float)(v68 * (float)((float)LODWORD(v64) / 65535.0)) + (1.0 - v68) * v69;
                      v66 = v71 / v65;
                    }
                    v72 = v30[1];
                    *(float *)(v119 + 4 * (v42 + v29 * (v41 + v120 * v72))) = (float)(v55 * v45) * v66;
                    ++v42;
                  }
                  while (v29 != v42);
                  v33 = v72;
                }
                else
                {
                  v72 = v33;
                }
                ++v41;
              }
              while (v41 < v72);
              v32 = v30[2];
              v40 = v33;
            }
            ++v120;
          }
          while (v120 < v32);
        }
        v73 = v30[9];
        v74 = v30[10];
        v75 = (float)v73;
        v76 = (float)v74;
        v77 = (float)((((int)a3 - (unint64_t)(v73 * v33)) >> 1) + (v73 >> 1)) / (float)(int)a3;
        v78 = (float)((((a3 >> 32) - (unint64_t)(v74 * v32)) >> 1) + (v74 >> 1))
            / (float)SHIDWORD(a3);
        if ((objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F28]), "BOOLValue") & 1) != 0)
        {
          v121.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v121.size = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v79 = v108;
          v80 = v109;
          v81 = 0x1E0CB3000;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            v82 = CGRectGetMidX(v121) + -0.5;
            v83 = CGRectGetMidY(v121) + -0.5;
            v77 = v77 + v82;
            v78 = v78 + v83;
          }
        }
        else
        {
          v79 = v108;
          v80 = v109;
          v81 = 0x1E0CB3000uLL;
        }
        v84 = v75 / (float)(int)a3;
        v85 = v76 / (float)SHIDWORD(a3);
        if (a4)
        {
          objc_msgSend((id)objc_msgSend(v111, "objectForKeyedSubscript:", *MEMORY[0x1E0D069C0]), "floatValue");
          v86 = v116;
          LOWORD(v87) = v116[1];
          v88 = (float)v87;
          v89 = (float)(v84 * v88) * 0.5;
          LOWORD(v90) = v116[2];
          v91 = (float)v90;
          v92 = (float)(v85 * v91) * 0.5;
          v84 = v84 / v93;
          v85 = v85 / v93;
          v77 = v77 + (float)(v89 - (float)((float)(v84 * v88) * 0.5));
          v78 = v78 + (float)(v92 - (float)((float)(v85 * v91) * 0.5));
        }
        else
        {
          v86 = v116;
        }
        v94 = 0.1063 / v114;
        *(float *)&v94 = v94;
        v95 = 0.3576 / v114;
        v96 = 0.0361 / v114;
        v125[0] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v94);
        *(float *)&v97 = v95;
        v125[1] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v97);
        *(float *)&v98 = v96;
        v125[2] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v98);
        *(float *)&v99 = 0.0 / v114;
        v125[3] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v99);
        *(float *)&v100 = 0.5 / v114;
        v125[4] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v100);
        v101 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v125, 5);
        v123[0] = CFSTR("MapPointsV");
        v124[0] = objc_msgSend(*(id *)(v81 + 2024), "numberWithUnsignedShort:", v86[2]);
        v123[1] = CFSTR("MapPointsH");
        v124[1] = objc_msgSend(*(id *)(v81 + 2024), "numberWithUnsignedShort:", v86[1]);
        v123[2] = CFSTR("MapPointsN");
        v124[2] = objc_msgSend(*(id *)(v81 + 2024), "numberWithUnsignedLong:", v29);
        v123[3] = CFSTR("MapSpacingV");
        *(float *)&v102 = v85;
        v124[3] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v102);
        v123[4] = CFSTR("MapSpacingH");
        *(float *)&v103 = v84;
        v124[4] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v103);
        v123[5] = CFSTR("MapOriginV");
        *(float *)&v104 = v78;
        v124[5] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v104);
        v123[6] = CFSTR("MapOriginH");
        *(float *)&v105 = v77;
        v124[6] = objc_msgSend(*(id *)(v81 + 2024), "numberWithFloat:", v105);
        v124[7] = v101;
        v123[7] = CFSTR("MapInputWeights");
        v123[8] = CFSTR("GainValues");
        v124[8] = v107;
        objc_msgSend(v79, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v124, v123, 9), CFSTR("ProfileGainTableMap"));
        if (objc_msgSend(v79, "objectForKeyedSubscript:", CFSTR("ProfileGainTableMap"))
          || objc_msgSend(v79, "objectForKeyedSubscript:", v80))
        {
          objc_msgSend(v79, "setObject:forKeyedSubscript:", CFSTR("Apple Embedded Color Profile"), v106);
        }
        return 1;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t BWCreateDNGDictionaryWithUpdatedVersion(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1)
  {
    v6 = 0;
LABEL_8:
    v7 = 0;
    goto LABEL_6;
  }
  v6 = (void *)objc_msgSend(a1, "mutableCopy");
  v11 = *MEMORY[0x1E0CBC980];
  v12[0] = a1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
  if (a4 == 1786276963)
  {
    v9 = *MEMORY[0x1E0D094D0];
    v10 = &unk_1E49F9048;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1);
  }
  if (CMPhotoDNGVersionFromPropertiesAndOptions())
    goto LABEL_8;
  objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CBC9D8]);
  v7 = objc_msgSend(v6, "copy");
LABEL_6:

  return v7;
}

double BWRawDenormalizedActiveRectFromDNGDictionary(void *a1)
{
  double v2;
  void *v3;
  void *v4;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v2 = *MEMORY[0x1E0C9D628];
  if (a1)
  {
    v3 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0CBC8E0]);
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, "count") == 4)
      {
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "intValue");
        v2 = (double)(int)objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 1), "intValue");
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 2), "intValue");
        objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 3), "intValue");
      }
    }
  }
  return v2;
}

void *BWCreateRawMetadataFromMetadata(void *a1, id a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v29;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v12 = (void *)objc_msgSend(a1, "mutableCopy");
  v13 = (void *)BWCreateDNGDictionaryWithUpdatedVersion(a2, a5, a6, a7);
  if (v13)
    a2 = v13;
  objc_msgSend(v12, "setObject:forKeyedSubscript:", a2, *MEMORY[0x1E0CBC980], a4);
  objc_msgSend(v12, "removeObjectForKey:", *MEMORY[0x1E0CBC770]);
  v14 = *MEMORY[0x1E0CBCB50];
  v15 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCB50]));
  objc_msgSend(v15, "removeObjectForKey:", *MEMORY[0x1E0CBCB10]);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    v16 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0CBC978]);
    if (v16)
    {
      v17 = v16;
      if (objc_msgSend(v16, "count") == 2)
      {
        v18 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue");
        v19 = objc_msgSend((id)objc_msgSend(v17, "objectAtIndexedSubscript:", 1), "intValue");
        if ((_DWORD)v19)
        {
          if ((_DWORD)v18)
          {
            v20 = v19;
            v21 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18);
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0CBCC28]);
            v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20);
            objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, *MEMORY[0x1E0CBCC30]);
          }
        }
      }
    }
  }
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, v14);
  v23 = *MEMORY[0x1E0CBCF70];
  v24 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCF70]));
  v25 = *MEMORY[0x1E0D05778];
  v26 = objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", *MEMORY[0x1E0D05778]), "unsignedIntValue");
  objc_msgSend(v24, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v26 | a3), v25);
  if (a3 == 0x10000)
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v29, *MEMORY[0x1E0D05570]);
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v24, v23);
  return v12;
}

uint64_t __simu_createDNGDictionary_block_invoke()
{
  uint64_t result;

  result = MGCopyAnswer();
  simu_createDNGDictionary_sProductTypeString = result;
  return result;
}

_WORD *simu_ltmLUTsFromMetadata(void *a1, _DWORD *a2)
{
  void *v3;
  void *v4;
  _WORD *v5;
  _WORD *v6;
  unint64_t v7;

  v3 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BE8]);
  if (!v3)
    return 0;
  v4 = v3;
  if ((unint64_t)objc_msgSend(v3, "length") < 0x16)
    return 0;
  v5 = (_WORD *)objc_msgSend(v4, "bytes");
  if (*v5 != 4)
    return 0;
  v6 = v5;
  v7 = (unsigned __int16)v5[3] * (unint64_t)(unsigned __int16)v5[2] + 24;
  if (objc_msgSend(v4, "length") < v7)
    return 0;
  if (a2)
    *a2 = 4;
  return v6;
}

uint64_t fcdpe_demosaicedRawEnabled(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = (void *)objc_msgSend((id)objc_msgSend(a1, "photoManifest", 0), "photoDescriptors");
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5), "processingFlags") & 0x10000) != 0)
          return 1;
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t ReportMemoryException()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  task_name_t *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  host_t v7;
  NSObject *v8;
  mach_msg_type_number_t v10;
  mach_msg_type_number_t v11;
  integer_t task_info_out[2];
  uint64_t v13;
  mach_msg_type_number_t task_info_outCnt;
  os_log_type_t type[16];
  __int128 v16;
  uint64_t v17;
  integer_t host_info_out[4];
  __int128 v19;
  _BYTE v20[28];
  vm_size_t v21;
  mach_msg_type_number_t host_info_outCnt[29];
  _OWORD v23[23];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)host_info_out = 0u;
  host_info_outCnt[0] = 0;
  host_info_outCnt[1] = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v17 = 0;
  *(_OWORD *)type = 0u;
  v16 = 0u;
  task_info_outCnt = 10;
  *(_QWORD *)task_info_out = 0;
  v13 = 0;
  v11 = 4;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v10 = 93;
  v1 = (task_name_t *)MEMORY[0x1E0C83DA0];
  task_info(*MEMORY[0x1E0C83DA0], 0x12u, (task_info_t)type, &task_info_outCnt);
  v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  task_info(*v1, 3u, task_info_out, &v11);
  v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!task_info(*v1, 0x16u, (task_info_t)v23, &v10))
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  v6 = fig_log_call_emit_and_clean_up_after_send_and_compose();
  v7 = MEMORY[0x1A858DB90](v6);
  host_info_outCnt[0] = 15;
  host_page_size(v7, &v21);
  host_statistics(v7, 2, host_info_out, host_info_outCnt);
  v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t SoundAnalysisLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = SoundAnalysisLibraryCore_frameworkLibrary;
  v6 = SoundAnalysisLibraryCore_frameworkLibrary;
  if (!SoundAnalysisLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E4920690;
    v8 = *(_OWORD *)&off_1E49206A0;
    v1 = _sl_dlopen();
    v4[3] = v1;
    SoundAnalysisLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2ED5860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t SoundAnalysisLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = SoundAnalysisLibraryCore();
  if (!result)
    SoundAnalysisLibrary_cold_1(&v1);
  return result;
}

uint64_t getSNMovieRemixClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__15;
  v7 = __Block_byref_object_dispose__15;
  v0 = getSNMovieRemixClass_softClass;
  v8 = getSNMovieRemixClass_softClass;
  if (!getSNMovieRemixClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSNMovieRemixClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSNMovieRemixClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2ED5974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSNMovieRemixClass_block_invoke(uint64_t a1)
{
  Class result;

  SoundAnalysisLibrary();
  result = objc_getClass("SNMovieRemix");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSNMovieRemixClass_block_invoke_cold_1();
  getSNMovieRemixClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getSNMovieRemixRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__15;
  v7 = __Block_byref_object_dispose__15;
  v0 = getSNMovieRemixRequestClass_softClass;
  v8 = getSNMovieRemixRequestClass_softClass;
  if (!getSNMovieRemixRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSNMovieRemixRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSNMovieRemixRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2ED5A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSNMovieRemixRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  SoundAnalysisLibrary();
  result = objc_getClass("SNMovieRemixRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSNMovieRemixRequestClass_block_invoke_cold_1();
  getSNMovieRemixRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

double FigCaptureUpdateRectSizeAndMaintainCenter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double MidX;
  CGRect v12;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetMidY(v12);
  return MidX - a5 * 0.5;
}

CGAffineTransform *FigCaptureExifOrientationGetAffineTransform@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  CGFloat v7;
  char v8;
  char v9;
  uint64_t v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGAffineTransform v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGAffineTransform v26;
  CGAffineTransform t1;
  CGAffineTransform t2;

  if (((_DWORD)result - 9) > 0xFFFFFFF8)
  {
    v7 = 0.0;
    switch((int)result)
    {
      case 2:
        v8 = 0;
        v9 = 1;
        break;
      case 3:
        v9 = 0;
        v8 = 1;
        goto LABEL_8;
      case 4:
        v9 = 0;
        v8 = 0;
LABEL_8:
        v7 = 3.14159265;
        break;
      case 5:
        v9 = 0;
        v8 = 0;
        goto LABEL_14;
      case 6:
        v9 = 0;
        v8 = 1;
        goto LABEL_12;
      case 7:
        v9 = 0;
        v8 = 0;
LABEL_12:
        v7 = 1.57079633;
        break;
      case 8:
        v9 = 0;
        v8 = 1;
LABEL_14:
        v7 = 4.71238898;
        break;
      default:
        v9 = 1;
        v8 = 1;
        break;
    }
    v10 = MEMORY[0x1E0C9BAA8];
    v21 = *MEMORY[0x1E0C9BAA8];
    v22 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a3 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a3 + 16) = v22;
    v20 = *(_OWORD *)(v10 + 32);
    v11 = (double)(int)a2;
    *(_OWORD *)(a3 + 32) = v20;
    v12 = (double)SHIDWORD(a2);
    CGAffineTransformMakeTranslation(&t2, -((double)(int)a2 * 0.5), -((double)SHIDWORD(a2) * 0.5));
    *(_OWORD *)&t1.a = v21;
    *(_OWORD *)&t1.c = v22;
    *(_OWORD *)&t1.tx = v20;
    CGAffineTransformConcat((CGAffineTransform *)a3, &t1, &t2);
    if ((v8 & 1) == 0)
    {
      CGAffineTransformMakeScale(&v26, -1.0, 1.0);
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a3;
      *(_OWORD *)&v25.c = v13;
      *(_OWORD *)&v25.tx = *(_OWORD *)(a3 + 32);
      CGAffineTransformConcat(&t1, &v25, &v26);
      v14 = *(_OWORD *)&t1.c;
      *(_OWORD *)a3 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a3 + 16) = v14;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&t1.tx;
    }
    v15 = v11 * 0.5;
    if ((v9 & 1) == 0)
    {
      CGAffineTransformMakeRotation(&v24, v7);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v25.a = *(_OWORD *)a3;
      *(_OWORD *)&v25.c = v16;
      *(_OWORD *)&v25.tx = *(_OWORD *)(a3 + 32);
      CGAffineTransformConcat(&t1, &v25, &v24);
      v17 = *(_OWORD *)&t1.c;
      *(_OWORD *)a3 = *(_OWORD *)&t1.a;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&t1.tx;
    }
    CGAffineTransformMakeTranslation(&v23, v15, v12 * 0.5);
    v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v25.a = *(_OWORD *)a3;
    *(_OWORD *)&v25.c = v18;
    *(_OWORD *)&v25.tx = *(_OWORD *)(a3 + 32);
    result = CGAffineTransformConcat(&t1, &v25, &v23);
    v19 = *(_OWORD *)&t1.c;
    *(_OWORD *)a3 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a3 + 16) = v19;
    v6 = *(_OWORD *)&t1.tx;
  }
  else
  {
    v4 = MEMORY[0x1E0C9BAA8];
    v5 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)a3 = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)(a3 + 16) = v5;
    v6 = *(_OWORD *)(v4 + 32);
  }
  *(_OWORD *)(a3 + 32) = v6;
  return result;
}

CGFloat FigCaptureComputeAffineTransformFromSourceAndDestRects@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  CGFloat v18;
  CGFloat v19;
  CGFloat MidY;
  CGFloat result;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v23 = a8 / a4;
  v24 = a9 / a5;
  v22 = a8 * CGRectGetMidX(*(CGRect *)&a2) / a4;
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  v18 = a9 * CGRectGetMidY(v25) / a5;
  v26.origin.x = a6;
  v26.origin.y = a7;
  v26.size.width = a8;
  v26.size.height = a9;
  v19 = CGRectGetMidX(v26) - v22;
  v27.origin.x = a6;
  v27.origin.y = a7;
  v27.size.width = a8;
  v27.size.height = a9;
  MidY = CGRectGetMidY(v27);
  *(CGFloat *)a1 = v23;
  result = MidY - v18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(CGFloat *)(a1 + 24) = v24;
  *(CGFloat *)(a1 + 32) = v19;
  *(CGFloat *)(a1 + 40) = result;
  return result;
}

double FigCaptureUnityRect()
{
  return 0.0;
}

BOOL FigCaptureIsUnityRect(double a1, double a2, double a3, double a4)
{
  CGRect v5;

  v5.origin.x = 0.0;
  v5.origin.y = 0.0;
  v5.size.width = 1.0;
  v5.size.height = 1.0;
  return CGRectEqualToRect(*(CGRect *)&a1, v5);
}

double FigCaptureTransformRectToCoordinateSpaceOfRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return (a1 - a5) / a7;
}

double FigCaptureTransformPointToCoordinateSpaceOfRect(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double FigCaptureTransformNormalizedPointFromCoordinateSpaceOfNormalizedRect(double a1, double a2, double a3, double a4, double a5)
{
  return a3 + a1 * a5;
}

double FigCaptureRectMidPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

double FigCaptureTransformNormalizedRectFromCoordinateSpaceOfNormalizedRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + a1 * a7;
}

CGFloat FigCaptureGetTransformFromCurrentSpaceRectToTargetSpaceRect@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  uint64_t v17;
  CGFloat v18;
  CGFloat MidY;
  __int128 v20;
  __int128 v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat MidX;
  CGFloat v26;
  __int128 v27;
  __int128 v28;
  CGFloat result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGRect v39;
  CGRect v40;

  v17 = MEMORY[0x1E0C9BAA8];
  v31 = *MEMORY[0x1E0C9BAA8];
  v32 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v32;
  v30 = *(_OWORD *)(v17 + 32);
  *(_OWORD *)(a1 + 32) = v30;
  v18 = -CGRectGetMidX(*(CGRect *)&a2);
  v39.origin.x = a2;
  v39.origin.y = a3;
  v39.size.width = a4;
  v39.size.height = a5;
  MidY = CGRectGetMidY(v39);
  CGAffineTransformMakeTranslation(&t2, v18, -MidY);
  *(_OWORD *)&t1.a = v31;
  *(_OWORD *)&t1.c = v32;
  *(_OWORD *)&t1.tx = v30;
  CGAffineTransformConcat((CGAffineTransform *)a1, &t1, &t2);
  CGAffineTransformMakeScale(&v36, a4 / a8, a5 / a9);
  v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.a = *(_OWORD *)a1;
  *(_OWORD *)&v35.c = v20;
  *(_OWORD *)&v35.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformConcat(&t1, &v35, &v36);
  v21 = *(_OWORD *)&t1.c;
  *(_OWORD *)a1 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a1 + 16) = v21;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&t1.tx;
  v22 = a6;
  *(CGFloat *)&v21 = a7;
  v23 = a8;
  v24 = a9;
  MidX = CGRectGetMidX(*(CGRect *)((char *)&v21 - 8));
  v40.origin.x = a6;
  v40.origin.y = a7;
  v40.size.width = a8;
  v40.size.height = a9;
  v26 = CGRectGetMidY(v40);
  CGAffineTransformMakeTranslation(&v34, MidX, v26);
  v27 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v35.a = *(_OWORD *)a1;
  *(_OWORD *)&v35.c = v27;
  *(_OWORD *)&v35.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformConcat(&t1, &v35, &v34);
  v28 = *(_OWORD *)&t1.c;
  *(_OWORD *)a1 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a1 + 16) = v28;
  result = t1.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&t1.tx;
  return result;
}

CGAffineTransform *FigCaptureGetTransformForMirroringRotationAndCrop@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>, CGFloat a7@<D2>, CGFloat a8@<D3>)
{
  uint64_t v16;
  __int128 v17;
  CGAffineTransform *v18;
  __int128 v19;
  __int128 v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGAffineTransform *result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGAffineTransform v39;
  CGAffineTransform v40;
  CGAffineTransform v41;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGRect v44;
  CGRect v45;

  v16 = MEMORY[0x1E0C9BAA8];
  v33 = *MEMORY[0x1E0C9BAA8];
  v34 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a4 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a4 + 16) = v34;
  v32 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a4 + 32) = v32;
  CGAffineTransformMakeTranslation(&t2, -0.5, -0.5);
  *(_OWORD *)&t1.a = v33;
  *(_OWORD *)&t1.c = v34;
  *(_OWORD *)&t1.tx = v32;
  CGAffineTransformConcat((CGAffineTransform *)a4, &t1, &t2);
  if (a1)
  {
    CGAffineTransformMakeScale(&v41, -1.0, 1.0);
    v17 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.a = *(_OWORD *)a4;
    *(_OWORD *)&v40.c = v17;
    *(_OWORD *)&v40.tx = *(_OWORD *)(a4 + 32);
    v18 = &v41;
  }
  else
  {
    if (!a2)
      goto LABEL_6;
    CGAffineTransformMakeScale(&v39, 1.0, -1.0);
    v19 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.a = *(_OWORD *)a4;
    *(_OWORD *)&v40.c = v19;
    *(_OWORD *)&v40.tx = *(_OWORD *)(a4 + 32);
    v18 = &v39;
  }
  CGAffineTransformConcat(&t1, &v40, v18);
  v20 = *(_OWORD *)&t1.c;
  *(_OWORD *)a4 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a4 + 16) = v20;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
LABEL_6:
  if (a3)
  {
    v21 = (double)-a3 * 3.14159265 / 180.0;
    CGAffineTransformMakeRotation(&v38, v21);
    v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)&v40.a = *(_OWORD *)a4;
    *(_OWORD *)&v40.c = v22;
    *(_OWORD *)&v40.tx = *(_OWORD *)(a4 + 32);
    CGAffineTransformConcat(&t1, &v40, &v38);
    v23 = *(_OWORD *)&t1.c;
    *(_OWORD *)a4 = *(_OWORD *)&t1.a;
    *(_OWORD *)(a4 + 16) = v23;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  }
  CGAffineTransformMakeTranslation(&v37, 0.5, 0.5);
  v24 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)&v40.a = *(_OWORD *)a4;
  *(_OWORD *)&v40.c = v24;
  *(_OWORD *)&v40.tx = *(_OWORD *)(a4 + 32);
  CGAffineTransformConcat(&t1, &v40, &v37);
  v25 = *(_OWORD *)&t1.c;
  *(_OWORD *)a4 = *(_OWORD *)&t1.a;
  *(_OWORD *)(a4 + 16) = v25;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&t1.tx;
  v26 = a5;
  *(CGFloat *)&v25 = a6;
  v27 = a7;
  v28 = a8;
  result = (CGAffineTransform *)CGRectIsNull(*(CGRect *)((char *)&v25 - 8));
  if ((result & 1) == 0)
  {
    v45.origin.x = 0.0;
    v45.origin.y = 0.0;
    v45.size.width = 1.0;
    v45.size.height = 1.0;
    v44.origin.x = a5;
    v44.origin.y = a6;
    v44.size.width = a7;
    v44.size.height = a8;
    result = (CGAffineTransform *)CGRectEqualToRect(v44, v45);
    if ((result & 1) == 0)
    {
      memset(&t1, 0, sizeof(t1));
      FigCaptureGetTransformFromCurrentSpaceRectToTargetSpaceRect((uint64_t)&t1, 0.0, 0.0, 1.0, 1.0, a5, a6, a7, a8);
      v30 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v36.a = *(_OWORD *)a4;
      *(_OWORD *)&v36.c = v30;
      *(_OWORD *)&v36.tx = *(_OWORD *)(a4 + 32);
      v35 = t1;
      result = CGAffineTransformConcat(&v40, &v36, &v35);
      v31 = *(_OWORD *)&v40.c;
      *(_OWORD *)a4 = *(_OWORD *)&v40.a;
      *(_OWORD *)(a4 + 16) = v31;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)&v40.tx;
    }
  }
  return result;
}

uint64_t FigCaptureOptimalVideoPreviewDimensionsForSourceDimensions(unint64_t a1, uint64_t *a2)
{
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = MGGetSInt32Answer();
  v6 = MGGetSInt32Answer();
  if ((int)v6 >= (int)v5)
    v7 = v5;
  else
    v7 = v6;
  if ((int)v6 <= (int)v5)
    v8 = v5;
  else
    v8 = v6;
  v9 = v8 | (v7 << 32);
  FigCaptureMakeRectWithAspectRatioInsideDimensions(v9, 1, (float)v3 / (float)(int)v4);
  v12 = (double)v3;
  v13 = v10 > (double)v3;
  v14 = (double)(int)v4;
  if (v11 > (double)(int)v4)
    v13 = 1;
  if (!v13)
  {
    v14 = v11;
    v12 = v10;
  }
  v15 = (int)v12;
  if (a2)
    *a2 = v9;
  v16 = (int)v14;
  if ((_DWORD)v15 == 2048 && (_DWORD)v16 == 1528)
  {
    v17 = 0x60000000000;
    v15 = 2048;
  }
  else if ((_DWORD)v15 == 856 && (_DWORD)v16 == 640)
  {
    v17 = 0x28000000000;
    v15 = 852;
  }
  else if ((_DWORD)v15 == 998 && (_DWORD)v16 == 750)
  {
    v17 = 0x2EE00000000;
    v15 = 1000;
  }
  else
  {
    v18 = (_DWORD)v16 == 1080;
    v17 = v16 << 32;
    if ((_DWORD)v15 == 1436 && v18)
    {
      v17 = 0x43800000000;
      v15 = 1440;
    }
  }
  return v15 | v17;
}

uint64_t acn_sampleBufferProcessorOutputCallback(void *a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;

  v5 = (void *)objc_msgSend(a1, "output");
  if (a2)
    v6 = 0;
  else
    v6 = a3;
  return objc_msgSend(v5, "emitSampleBuffer:", v6);
}

uint64_t MetalPerformanceShadersLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = MetalPerformanceShadersLibraryCore_frameworkLibrary;
  v6 = MetalPerformanceShadersLibraryCore_frameworkLibrary;
  if (!MetalPerformanceShadersLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E49206D0;
    v8 = *(_OWORD *)&off_1E49206E0;
    v1 = _sl_dlopen();
    v4[3] = v1;
    MetalPerformanceShadersLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2ED8184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t MetalPerformanceShadersLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = MetalPerformanceShadersLibraryCore();
  if (!result)
    MetalPerformanceShadersLibrary_cold_1(&v1);
  return result;
}

uint64_t getMPSImageStatisticsMeanClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__16;
  v7 = __Block_byref_object_dispose__16;
  v0 = getMPSImageStatisticsMeanClass_softClass;
  v8 = getMPSImageStatisticsMeanClass_softClass;
  if (!getMPSImageStatisticsMeanClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getMPSImageStatisticsMeanClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getMPSImageStatisticsMeanClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2ED8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMPSImageStatisticsMeanClass_block_invoke(uint64_t a1)
{
  Class result;

  MetalPerformanceShadersLibrary();
  result = objc_getClass("MPSImageStatisticsMean");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getMPSImageStatisticsMeanClass_block_invoke_cold_1();
  getMPSImageStatisticsMeanClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t targetRectForSampleBuffer(const void *a1)
{
  CGSize v2;
  const __CFDictionary *v3;
  void *v5;
  CGRect v6;

  v2 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v6.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  v6.size = v2;
  v3 = (const __CFDictionary *)CMGetAttachment(a1, CFSTR("BWInferenceAttachmentKey_FusionTrackerTargetRect"), 0);
  if (v3)
    return CGRectMakeWithDictionaryRepresentation(v3, &v6);
  v5 = (void *)CMGetAttachment(a1, CFSTR("FusionTrackerInput"), 0);
  if (v5)
    v5 = (void *)objc_msgSend(v5, "highPriorityTrackerState");
  return objc_msgSend(v5, "targetRect", *(_OWORD *)&v6.origin, *(_OWORD *)&v6.size);
}

const __CFString *preventionReasonWithSampleBuffer(const void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  BOOL v6;

  v3 = (void *)CMGetAttachment(a1, CFSTR("FusionTrackerInput"), 0);
  if (!v3)
    return CFSTR("MissingFusionTrackerState");
  v4 = (void *)objc_msgSend(v3, "highPriorityTrackerState");
  if (!v4)
    return CFSTR("MissingFusionTrackerState");
  v5 = objc_msgSend(v4, "op");
  if (a2 == 1)
    v6 = v5 == 3;
  else
    v6 = v5 == a2;
  if (v6)
    return 0;
  else
    return CFSTR("FusionTrackerNoOp");
}

void fvcs_handleStillImageCaptureFailureNotification(int a1, uint64_t a2, CFTypeRef cf, int a4, CFTypeRef a5)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD block[7];

  if (cf)
    CFRetain(cf);
  if (a5)
    CFRetain(a5);
  v8 = *(NSObject **)(a2 + 640);
  v9 = *(NSObject **)(a2 + 624);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fvcs_handleStillImageCaptureFailureNotification_block_invoke;
  block[3] = &unk_1E4920768;
  block[4] = a2;
  block[5] = a5;
  block[6] = cf;
  dispatch_group_async(v8, v9, block);
}

void fvcs_handleFlashNotification(int a1, uint64_t a2, CFTypeRef cf)
{
  NSObject *v5;
  NSObject *v6;
  _QWORD v7[6];

  if (cf)
    CFRetain(cf);
  v5 = *(NSObject **)(a2 + 640);
  v6 = *(NSObject **)(a2 + 624);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __fvcs_handleFlashNotification_block_invoke;
  v7[3] = &unk_1E491F158;
  v7[4] = a2;
  v7[5] = cf;
  dispatch_group_async(v5, v6, v7);
}

void __fvcs_handleFlashNotification_block_invoke(uint64_t a1)
{
  OpaqueCMClock *HostTimeClock;
  uint64_t v3;
  void *v4;
  const void *v5;
  CMTime v6;
  CMTime v7;

  if (FigCFEqual())
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 632), "captureStreamWillBeginStillImageCapture:");
  }
  else if (FigCFEqual())
  {
    memset(&v7, 0, sizeof(v7));
    HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&v7, HostTimeClock);
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 632);
    v6 = v7;
    objc_msgSend(v4, "captureStream:didCaptureReferenceFrameWithPTS:referenceFrameBracketedCaptureSequenceNumber:", v3, &v6, 0);
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void __fvcs_handleStillImageCaptureFailureNotification_block_invoke(uint64_t *a1)
{
  os_unfair_lock_s *v2;
  uint32_t os_unfair_lock_opaque;
  void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 480));
  v2 = (os_unfair_lock_s *)a1[4];
  os_unfair_lock_opaque = v2[149]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 120);
  v4 = (void *)a1[5];
  if (v4)
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("with payload %@"), objc_msgSend(v4, "description"));
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (os_unfair_lock_opaque)
  {
    objc_msgSend(*(id *)(a1[4] + 632), "captureStream:stillImageCaptureError:", a1[4], 4294950494);
    v6 = a1[4];
    v7 = *(void **)(v6 + 176);
    v11 = *MEMORY[0x1E0CA2E18];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    objc_msgSend(v7, "captureStream:didCompleteStillImageCaptureWithPTS:error:", v6, &v11, 4294950494);
    -[BWFigVideoCaptureStream _resetStillImageCaptureState](a1[4]);
  }
  else
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = (const void *)a1[6];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[5];
  if (v10)
    CFRelease(v10);
}

void TimestampedAudioBufferListDispose(const __CFAllocator **ptr)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (ptr)
  {
    v2 = *ptr;
    v3 = ptr[6];
    if (v3)
    {
      v4 = *(unsigned int *)v3;
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 16;
        do
        {
          if (*(_QWORD *)((char *)v3 + v6))
          {
            CFAllocatorDeallocate(v2, *(void **)((char *)v3 + v6));
            v3 = ptr[6];
            v4 = *(unsigned int *)v3;
          }
          ++v5;
          v6 += 16;
        }
        while (v5 < v4);
      }
      CFAllocatorDeallocate(v2, v3);
    }
    CFAllocatorDeallocate(v2, ptr);
    if (v2)
      CFRelease(v2);
  }
}

void sub_1A2EE0C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t bbn_StringForPTEffectReactionType(uint64_t a1)
{
  if (bbn_StringForPTEffectReactionType_onceToken != -1)
    dispatch_once(&bbn_StringForPTEffectReactionType_onceToken, &__block_literal_global_228);
  return objc_msgSend((id)bbn_StringForPTEffectReactionType_sMapReactionTypeToName, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1));
}

double FigCaptureFirmwareToNVMExtrinsicMatrixTransform()
{
  return *(double *)&_PromotedConst_0;
}

double FigCaptureTransformExtrinsicMatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, double a4, simd_float3 a5, simd_float3 a6, simd_float3 a7)
{
  uint64_t v7;
  uint64_t v8;
  simd_float3 v16;
  simd_float3 v17;
  simd_float3 v18;
  simd_float3 v19;
  simd_float3 v20;
  simd_float3 v21;
  simd_float3x3 v22;
  simd_float3x3 v23;

  v22.columns[0] = a5;
  v22.columns[1] = a6;
  v22.columns[2] = a7;
  v23 = __invert_f3(v22);
  v7 = 0;
  v16 = a5;
  v17 = a6;
  v18 = a7;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v19 + v7 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(*(_OWORD *)((char *)&v16 + v7 * 4))), a2, *(float32x2_t *)&v16.f32[v7], 1), a3, *(float32x4_t *)((char *)&v16 + v7 * 4), 2);
    v7 += 4;
  }
  while (v7 != 12);
  v8 = 0;
  v16 = v19;
  v17 = v20;
  v18 = v21;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v19 + v8 * 4) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v23.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v16 + v8 * 4))), (float32x4_t)v23.columns[1], *(float32x2_t *)&v16.f32[v8], 1), (float32x4_t)v23.columns[2], *(float32x4_t *)((char *)&v16 + v8 * 4), 2);
    v8 += 4;
  }
  while (v8 != 12);
  return *(double *)v19.i64;
}

uint64_t FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadata(void *a1, uint64_t a2, void *a3, int a4, int a5, void *a6, const __CFDictionary *a7, int a8, unsigned __int8 a9, char a10)
{
  void *v18;
  void *v19;
  float v20;
  float v21;
  void *v22;
  void *v23;
  void *v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  _OWORD *v31;
  void *v32;
  __int128 *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  float32x4_t v37;
  int v38;
  double v39;
  int32x2_t v41;
  CGPoint v42;
  CGSize size;
  float32x4_t v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  float32x4_t v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE time[32];
  __int128 v55;
  __int128 v56;
  _BYTE v57[32];
  _BYTE v58[32];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v18 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v19 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
  objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D05968]), "floatValue");
  v21 = v20;
  memset(v49, 0, sizeof(v49));
  objc_msgSend(a6, "getBytes:length:", v49, 48);
  v22 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D058E0]);
  v48 = 0u;
  v44 = (float32x4_t)0x3F800000uLL;
  v45 = 0x3F80000000000000uLL;
  v47 = 1065353216;
  v46 = 0;
  if (v22)
  {
    v23 = v22;
    if (objc_msgSend(v22, "length") != 48)
    {
      fig_log_get_emitter();
      goto LABEL_25;
    }
    objc_msgSend(v23, "getBytes:length:", time, 48);
    v44.i32[2] = v55;
    v44.i64[0] = vzip1q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
    LODWORD(v47) = DWORD2(v55);
    DWORD2(v45) = DWORD1(v55);
    *(_QWORD *)&v45 = vtrn2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]).u64[0];
    v46 = vzip1q_s32(vdupq_laneq_s32(*(int32x4_t *)time, 2), vdupq_laneq_s32(*(int32x4_t *)&time[16], 2)).u64[0];
    DWORD2(v48) = HIDWORD(v55);
    *(_QWORD *)&v48 = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)time, *(int32x4_t *)&time[16]), *(int32x4_t *)time).u64[0];
  }
  size = (CGSize)*MEMORY[0x1E0C9D820];
  if (!CGSizeMakeWithDictionaryRepresentation(a7, &size))
  {
    fig_log_get_emitter();
LABEL_25:
    FigDebugAssert3();
    return 0;
  }
  v42 = (CGPoint)*MEMORY[0x1E0C9D538];
  *(_OWORD *)time = *(_OWORD *)a2;
  *(_QWORD *)&time[16] = *(_QWORD *)(a2 + 16);
  CMTimeGetSeconds((CMTime *)time);
  if (FigMotionComputeDistortionCenter((const __CFDictionary *)a1, (int)size.width, (int)size.height, a4, a5, (float64x2_t *)&v42, 1.0 / v21, 1.0))
  {
    fig_log_get_emitter();
    goto LABEL_25;
  }
  if (!a10)
  {
LABEL_10:
    v26 = 0;
    v27 = 0;
    goto LABEL_19;
  }
  v24 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D069D8]);
  if (v24)
  {
    objc_msgSend(v24, "floatValue");
    if (*(float *)v25.i32 == 0.0)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      goto LABEL_10;
    }
  }
  else
  {
    v25.i32[0] = 1.0;
  }
  v41 = v25;
  v55 = 0u;
  v56 = 0u;
  memset(time, 0, sizeof(time));
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v28 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D05928]);
  if (v28)
  {
    v29 = v28;
    v30 = (void *)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0D065A8]);
    if (objc_msgSend(v30, "length") == 64)
    {
      v31 = (_OWORD *)objc_msgSend(v30, "bytes");
      *(_OWORD *)time = *v31;
      *(_OWORD *)&time[16] = v31[1];
      v55 = v31[2];
      v56 = v31[3];
      v32 = (void *)objc_msgSend(v29, "objectForKeyedSubscript:", *MEMORY[0x1E0D065B0]);
      if (objc_msgSend(v32, "length") == 64)
      {
        v33 = (__int128 *)objc_msgSend(v32, "bytes");
        v34 = v33[1];
        v50 = *v33;
        v51 = v34;
        v35 = v33[3];
        v52 = v33[2];
        v53 = v35;
        goto LABEL_16;
      }
    }
    goto LABEL_23;
  }
  if (FigSignalErrorAt())
  {
LABEL_23:
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    goto LABEL_25;
  }
LABEL_16:
  v36 = 0;
  v37 = (float32x4_t)vdupq_lane_s32(v41, 0);
  do
  {
    *(float32x4_t *)&v58[v36] = vmlaq_f32(*(float32x4_t *)((char *)&v55 + v36), v37, *(float32x4_t *)((char *)&v52 + v36));
    *(float32x4_t *)&v57[v36] = vmlaq_f32(*(float32x4_t *)&time[v36], v37, *(float32x4_t *)((char *)&v50 + v36));
    v36 += 16;
  }
  while (v36 != 32);
  v26 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v58, 32);
  v27 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v57, 32);
LABEL_19:
  v38 = FigDepthConvertRotationAndMirroringToExifOrientation(a8, a9);
  if (!FigDepthRotateCalibrationData(&size.width, v49, &v42.x, &v44, v38))
  {
    *(float *)&v39 = v21 * 0.001;
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v39), CFSTR("PixelSize"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v49, 48), CFSTR("IntrinsicMatrix"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v44, 64), CFSTR("ExtrinsicMatrix"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v42), CFSTR("LensDistortionCenter"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", CGSizeCreateDictionaryRepresentation(size), CFSTR("IntrinsicMatrixReferenceDimensions"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v26, CFSTR("LensDistortionCoefficients"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v27, CFSTR("InverseLensDistortionCoefficients"));
    return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v18);
  }
  return 0;
}

uint64_t FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadataIncludeMaxRadius(void *a1, __int128 *a2, void *a3, int a4, int a5, void *a6, const __CFDictionary *a7, int a8, unsigned __int8 a9, char a10, char a11)
{
  uint64_t CalibrationDataDictionaryFromSampleBufferMetadata;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;

  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  CalibrationDataDictionaryFromSampleBufferMetadata = FigCaptureCreateCalibrationDataDictionaryFromSampleBufferMetadata(a1, (uint64_t)&v19, a3, a4, a5, a6, a7, a8, a9, a10);
  if (!CalibrationDataDictionaryFromSampleBufferMetadata)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  v14 = (void *)CalibrationDataDictionaryFromSampleBufferMetadata;
  v15 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v15, "addEntriesFromDictionary:", v14);

  v16 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
  v18 = 0;
  if (a11)
  {
    if (!FigCaptureGetDistortionCalibrationValidMaxRadiusInPixels(v16, (int *)&v18))
    {
      objc_msgSend(v15, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v18), CFSTR("DistortionCalibrationValidMaxRadiusInPixels"));
      return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v15);
    }
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return 0;
  }
  return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v15);
}

uint64_t FigCaptureGetDistortionCalibrationValidMaxRadiusInPixels(void *a1, int *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  int v11;

  result = 4294954516;
  if (a1 && a2)
  {
    v5 = BWDeviceIsiPad();
    v6 = *MEMORY[0x1E0D058D0];
    if (v5 && !objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D058D0]))
    {
      v11 = 1837;
    }
    else
    {
      objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v6), "floatValue");
      if (v7 <= 0.0)
        return 4294954516;
      v8 = v7;
      v9 = *MEMORY[0x1E0D05968];
      if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05968]))
        return 4294954516;
      objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v9), "floatValue");
      if (v10 <= 0.0)
        return 4294954516;
      v11 = (int)(float)((float)(v8 * 1000.0) / v10);
    }
    result = 0;
    *a2 = v11;
  }
  return result;
}

uint64_t FigCaptureSensorIDFromSampleBufferMetadata(void *a1, void *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
  v3 = (void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05948]);
  return objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D05B78]), "intValue");
}

uint64_t FigCaptureCreateColorCameraCalibrationForColorSampleBuffer(void *a1, void *a2, int a3, int a4, _QWORD *a5)
{
  const __CFString *v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  void *v13;
  __int128 *v14;
  void *v15;
  void *v16;
  void *v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  double v29;
  double v30;
  float v31;
  const __CFDictionary *v32;
  float v33;
  uint64_t result;
  void *v35;
  float v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  double v43;
  uint64_t v44;
  uint64_t i;
  float *v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  __CVBuffer *ImageBuffer;
  size_t Width;
  double Height;
  id v56;
  double v57;
  double v58;
  double v59;
  double v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  CGSize v64[4];
  CGSize size;
  float64x2_t v66;
  CMTime time;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v66 = *(float64x2_t *)MEMORY[0x1E0C9D538];
  if (a5)
  {
    v10 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v11 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    size = (CGSize)*MEMORY[0x1E0C9D820];
    v12 = (const __CFDictionary *)CMGetAttachment(a1, CFSTR("OriginalCameraIntrinsicMatrixReferenceDimensions"), 0);
    if (v12)
    {
      if (CGSizeMakeWithDictionaryRepresentation(v12, &size))
      {
        v13 = (void *)CMGetAttachment(a1, CFSTR("OriginalCameraIntrinsicMatrix"), 0);
        if (v13)
        {
          v14 = (__int128 *)objc_msgSend(v13, "bytes");
          v62 = v14[1];
          v63 = *v14;
          v61 = v14[2];
          v15 = (void *)objc_msgSend(a2, "cameraInfo");
          v16 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D058E0]);
          if (v16)
          {
            v17 = v16;
            if (objc_msgSend(v16, "length") == 48)
            {
              objc_msgSend(v17, "getBytes:length:", &v68, 48);
              v18 = vzip1q_s32(v68, v70);
              v19 = vzip2q_s32(v68, v70);
              v20 = vzip2q_s32(v69, (int32x4_t)0);
              v21 = (float32x4_t)vzip1q_s32(v18, v69);
              v21.i32[3] = 0;
              v22 = (float32x4_t)vzip2q_s32(v18, vdupq_lane_s32(*(int32x2_t *)v69.i8, 1));
              v22.i32[3] = 0;
              v23 = (float32x4_t)vzip1q_s32(v19, v20);
              v23.i32[3] = 0;
              v24 = FigCaptureTransformExtrinsicMatrix(v21, v22, v23, *(double *)vzip2q_s32(v19, v20).i64, (simd_float3)_PromotedConst_40, unk_1A32B0EC0, (simd_float3)xmmword_1A32B0ED0);
              v59 = v25;
              v60 = v24;
              v57 = v27;
              v58 = v26;
              v28 = (void *)objc_msgSend(a2, "cameraInfo");
              objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", *MEMORY[0x1E0D05968]), "doubleValue");
              if (v29 > 0.0)
              {
                v30 = v29;
                v31 = 1.0 / v29;
                if (a1)
                {
                  v32 = (const __CFDictionary *)objc_msgSend((id)CMGetAttachment(a1, v10, 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]);
                  CMTimeMakeFromDictionary(&time, v32);
                  CMTimeGetSeconds(&time);
                }
                v33 = 1.0;
                result = FigMotionComputeDistortionCenter(v11, (int)size.width, (int)size.height, a3, a4, &v66, v31, 1.0);
                if ((_DWORD)result)
                {
                  v51 = 0;
                  goto LABEL_27;
                }
                v35 = (void *)-[__CFDictionary objectForKeyedSubscript:](v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D069D8]);
                if (!v35 || (objc_msgSend(v35, "floatValue"), v33 = v36, v36 != 0.0))
                {
                  v37 = (void *)objc_msgSend(a2, "cameraInfo");
                  v38 = (void *)objc_msgSend(v37, "objectForKeyedSubscript:", *MEMORY[0x1E0D05928]);
                  if (v38)
                  {
                    v39 = v38;
                    v40 = (void *)objc_msgSend(v38, "objectForKeyedSubscript:", *MEMORY[0x1E0D065A8]);
                    if (objc_msgSend(v40, "length") == 64)
                    {
                      v41 = objc_msgSend(v40, "bytes");
                      v42 = (void *)objc_msgSend(v39, "objectForKeyedSubscript:", *MEMORY[0x1E0D065B0]);
                      if (objc_msgSend(v42, "length") == 64)
                      {
                        v43 = v30 * 0.001;
                        v44 = objc_msgSend(v42, "bytes");
                        memset(v64, 0, sizeof(v64));
                        for (i = 32; i != 64; i += 4)
                        {
                          v46 = (float *)((char *)v64 + i);
                          *(v46 - 8) = *(float *)(v41 + i - 32) + (float)(*(float *)(v44 + i - 32) * v33);
                          *v46 = *(float *)(v41 + i) + (float)(*(float *)(v44 + i) * v33);
                        }
                        v47 = objc_alloc((Class)getADPolynomialsLensDistortionModelClass());
                        v48 = objc_msgSend(v47, "initWithDistortionCenter:andPolynomials:", v64, *(_OWORD *)&v66);
                        if (v48)
                        {
                          v49 = (void *)v48;
                          v50 = objc_alloc((Class)getADCameraCalibrationClass());
                          v51 = (void *)objc_msgSend(v50, "initWithIntrinsics:cameraToPlatformTransform:pixelSize:forReferenceDimensions:withDistortionModel:", v49, *(double *)&v63, *(double *)&v62, *(double *)&v61, v60, v59, v58, v57, v43, *(_QWORD *)&size.width, *(_QWORD *)&size.height);

                          if (v51)
                          {
                            ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
                            Width = CVPixelBufferGetWidth(ImageBuffer);
                            Height = (double)CVPixelBufferGetHeight(ImageBuffer);
                            if (size.width != (double)Width || size.height != Height)
                            {
                              v56 = (id)objc_msgSend(v51, "mutableCopy", size.width, size.height);
                              if (!objc_msgSend(v56, "scale:", (double)Width, Height))
                              {
                                result = 4294954513;
                                goto LABEL_27;
                              }

                              v51 = (void *)objc_msgSend(v56, "copy");
                            }
                            result = 0;
LABEL_27:
                            *a5 = v51;
                            return result;
                          }
                        }
                        else
                        {
                          v51 = 0;
                        }
                        result = 4294954510;
                        goto LABEL_27;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    v51 = 0;
    result = 4294954516;
    goto LABEL_27;
  }
  return 4294954516;
}

uint64_t FigCaptureCreateDepthMetadataForColorCameraCalibration(void *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFDictionaryRef DictionaryRepresentation;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGSize v32;
  CGPoint v33;

  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0x3F800000uLL;
  DWORD1(v29) = 1065353216;
  DWORD2(v30) = 1065353216;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  objc_msgSend(a1, "intrinsicMatrix");
  DWORD2(v25) = v6;
  DWORD2(v26) = v7;
  *(_QWORD *)&v25 = v8;
  *(_QWORD *)&v26 = v9;
  DWORD2(v27) = v10;
  *(_QWORD *)&v27 = v11;
  v12 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v25, 48);
  if (!a3)
    return 4294954516;
  v13 = v12;
  objc_msgSend(a1, "referenceDimensions");
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v32);
  v15 = (void *)objc_msgSend(a1, "distortionModel");
  v16 = objc_msgSend(v15, "distortionPolynomials");
  v17 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E49F93D8, *MEMORY[0x1E0D08470]);
  v18 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D08438]);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E49F93D8, *MEMORY[0x1E0D08428]);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D08448]);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0D08440]);
  v19 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v28, 64);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, *MEMORY[0x1E0D08430]);
  v20 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(a1, "pixelSize");
  v21 = objc_msgSend(v20, "numberWithFloat:");
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, *MEMORY[0x1E0D08468]);
  objc_msgSend(v15, "distortionCenter");
  objc_msgSend(v17, "setObject:forKeyedSubscript:", CGPointCreateDictionaryRepresentation(v33), *MEMORY[0x1E0D08458]);
  v22 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v16, 32);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, *MEMORY[0x1E0D08460]);
  v23 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v16 + 32, 32);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, *MEMORY[0x1E0D08450]);
  objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (FigDepthDataGetCurrentMajorVersion() << 16) | 0xEA61), *MEMORY[0x1E0D08478]);
  CFRelease(DictionaryRepresentation);
  result = 0;
  *a3 = v17;
  return result;
}

uint64_t FigCaptureCreateJasperToColorCameraTransformForJasperSensorConfiguration(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  double v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294954516;
  v3 = (void *)objc_msgSend(a1, "cameraInfo");
  v4 = (void *)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D058E0]);
  if (!v4)
    return 4294954516;
  v5 = v4;
  if (objc_msgSend(v4, "length") != 48)
    return 4294954516;
  objc_msgSend(v5, "getBytes:length:", &v21, 48);
  v6 = vzip1q_s32(v21, v23);
  v7 = vzip2q_s32(v21, v23);
  v8 = vzip2q_s32(v22, (int32x4_t)0);
  v9 = (float32x4_t)vzip1q_s32(v6, v22);
  v9.i32[3] = 0;
  v10 = (float32x4_t)vzip2q_s32(v6, vdupq_lane_s32(*(int32x2_t *)v22.i8, 1));
  v10.i32[3] = 0;
  v11 = (float32x4_t)vzip1q_s32(v7, v8);
  v11.i32[3] = 0;
  v12 = FigCaptureTransformExtrinsicMatrix(v9, v10, v11, *(double *)vzip2q_s32(v7, v8).i64, (simd_float3)_PromotedConst_40, unk_1A32B0EC0, (simd_float3)xmmword_1A32B0ED0);
  result = 0;
  *(_DWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 24) = v15;
  *(_DWORD *)(a2 + 40) = v16;
  *(_DWORD *)(a2 + 56) = v17;
  *(double *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 48) = v20;
  return result;
}

uint64_t BWSampleBufferCreateFromPixelBufferWithTimingInfo(CVImageBufferRef imageBuffer, CMSampleTimingInfo *sampleTiming, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  CFTypeRef v8;
  const __CFAllocator *v9;
  char v10;
  const opaqueCMFormatDescription *v11;
  const opaqueCMFormatDescription *v12;
  uint64_t v13;
  BOOL v14;
  _BOOL4 v15;
  char v16;
  uint64_t v17;
  CMVideoFormatDescriptionRef v18;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CMSampleBufferRef sampleBufferOut;

  formatDescriptionOut = 0;
  sampleBufferOut = 0;
  if (imageBuffer && a3 && a4)
  {
    v8 = *a3;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = 1;
    v11 = (const opaqueCMFormatDescription *)*a3;
    while (1)
    {
      v12 = v11;
      if (!v11)
      {
        v13 = CMVideoFormatDescriptionCreateForImageBuffer(v9, imageBuffer, &formatDescriptionOut);
        if ((_DWORD)v13)
          break;
        v12 = formatDescriptionOut;
      }
      v13 = CMSampleBufferCreateForImageBuffer(v9, imageBuffer, 1u, 0, 0, v12, sampleTiming, &sampleBufferOut);
      v14 = (_DWORD)v13 == -12743 && formatDescriptionOut == 0;
      v15 = v14;
      if ((_DWORD)v13 && !v15)
        break;
      if (v15)
        v11 = 0;
      if (!sampleBufferOut)
      {
        v16 = (v8 != 0) & v10;
        v10 = 0;
        if ((v16 & 1) != 0)
          continue;
      }
      v17 = 0;
      *a4 = sampleBufferOut;
      goto LABEL_21;
    }
    v17 = v13;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v17 = 4294954516;
  }
LABEL_21:
  v18 = formatDescriptionOut;
  if (formatDescriptionOut)
  {
    if (*a3)
    {
      CFRelease(*a3);
      v18 = formatDescriptionOut;
    }
    *a3 = v18;
  }
  return v17;
}

uint64_t BWCMSampleBufferCreateCopyWithNewTimingIncludingMetadata(opaqueCMSampleBuffer *a1, CMTime *a2, __int128 *a3, CMSampleBufferRef *a4)
{
  uint64_t SampleTimingInfoArray;
  CMSampleTimingInfo *v9;
  uint64_t v10;
  CMItemCount v11;
  CMItemCount v12;
  CMTime *p_decodeTimeStamp;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CMTime *v18;
  __int128 v19;
  const __CFAllocator *v20;
  uint64_t CopyWithNewTiming;
  const __CFString *v22;
  const __CFDictionary *v23;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v25;
  CMTime v27;
  CMTime v28;
  CMTime rhs;
  CMTime lhs;
  CMTime v31;
  CMItemCount timingArrayEntriesNeededOut;

  timingArrayEntriesNeededOut = 0;
  memset(&v31, 0, sizeof(v31));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  rhs = *a2;
  CMTimeSubtract(&v31, &lhs, &rhs);
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a1, 0, 0, &timingArrayEntriesNeededOut);
  if ((_DWORD)SampleTimingInfoArray)
  {
    v25 = SampleTimingInfoArray;
    fig_log_get_emitter();
    FigDebugAssert3();
    v9 = 0;
    goto LABEL_19;
  }
  if (timingArrayEntriesNeededOut)
  {
    v9 = (CMSampleTimingInfo *)malloc_type_calloc(0x48uLL, timingArrayEntriesNeededOut, 0x71A99004uLL);
    v10 = CMSampleBufferGetSampleTimingInfoArray(a1, timingArrayEntriesNeededOut, v9, &timingArrayEntriesNeededOut);
    if ((_DWORD)v10)
    {
      v25 = v10;
      fig_log_get_emitter();
      goto LABEL_23;
    }
    v11 = timingArrayEntriesNeededOut;
    if (timingArrayEntriesNeededOut >= 1)
    {
      v12 = 0;
      p_decodeTimeStamp = &v9->decodeTimeStamp;
      do
      {
        v14 = *(_OWORD *)&p_decodeTimeStamp[-1].value;
        v28.epoch = p_decodeTimeStamp[-1].epoch;
        *(_OWORD *)&v28.value = v14;
        v27 = v31;
        CMTimeSubtract(&rhs, &v28, &v27);
        v15 = *(_OWORD *)&rhs.value;
        p_decodeTimeStamp[-1].epoch = rhs.epoch;
        *(_OWORD *)&p_decodeTimeStamp[-1].value = v15;
        if ((p_decodeTimeStamp->flags & 1) != 0)
        {
          v16 = *(_OWORD *)&p_decodeTimeStamp->value;
          v28.epoch = p_decodeTimeStamp->epoch;
          *(_OWORD *)&v28.value = v16;
          v27 = v31;
          CMTimeSubtract(&rhs, &v28, &v27);
          v17 = *(_OWORD *)&rhs.value;
          p_decodeTimeStamp->epoch = rhs.epoch;
          *(_OWORD *)&p_decodeTimeStamp->value = v17;
        }
        if ((*((_BYTE *)a3 + 12) & 1) != 0 && (p_decodeTimeStamp[-2].flags & 1) != 0)
        {
          v18 = p_decodeTimeStamp - 2;
          v19 = *a3;
          v18->epoch = *((_QWORD *)a3 + 2);
          *(_OWORD *)&v18->value = v19;
        }
        p_decodeTimeStamp += 3;
        ++v12;
        v11 = timingArrayEntriesNeededOut;
      }
      while (timingArrayEntriesNeededOut > v12);
    }
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CopyWithNewTiming = CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v11, v9, a4);
  if ((_DWORD)CopyWithNewTiming)
  {
    v25 = CopyWithNewTiming;
    fig_log_get_emitter();
LABEL_23:
    FigDebugAssert3();
    goto LABEL_19;
  }
  v22 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v23 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v23)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, v23);
    CMSetAttachment(*a4, v22, MutableCopy, 1u);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  sbu_replaceAttachedMediaWithDeepCopy(*a4);
  v25 = 0;
LABEL_19:
  free(v9);
  return v25;
}

id BWCMSampleBufferCopyReattachAndReturnMutableMetadata(const void *a1)
{
  const __CFString *v2;
  void *v3;
  id v4;
  void *v5;

  if (a1)
  {
    v2 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v3 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v3)
      v4 = (id)objc_msgSend(v3, "mutableCopy");
    else
      v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = v4;
    CMSetAttachment(a1, v2, v4, 1u);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = 0;
  }
  return v5;
}

uint64_t BWCMSampleBufferCopyMetadataToSampleBuffer(const void *a1, const void *a2)
{
  const __CFString *v3;
  const __CFDictionary *v4;
  CFMutableDictionaryRef MutableCopy;

  if (a1 && a2)
  {
    v3 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v4 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    if (v4)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v4);
      CMSetAttachment(a2, v3, MutableCopy, 1u);
      if (MutableCopy)
        CFRelease(MutableCopy);
    }
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t BWSampleBufferCreateFromEncodedImageSurface(__IOSurface *a1, size_t a2, CMVideoCodecType codecType, unint64_t width, CMTime *a5, CMVideoFormatDescriptionRef *formatDescriptionOut, CMSampleBufferRef *a7)
{
  int32_t v10;
  unint64_t v14;
  CFAllocatorRef *v15;
  CMVideoDimensions Dimensions;
  FourCharCode MediaSubType;
  CMVideoFormatDescriptionRef v18;
  uint64_t v19;
  void *BaseAddress;
  const __CFAllocator *v21;
  uint64_t v22;
  uint64_t v23;
  CMBlockBufferCustomBlockSource customBlockSource;
  CMSampleTimingInfo sampleTimingArray;
  CMBlockBufferRef blockBufferOut;
  size_t sampleSizeArray[2];

  blockBufferOut = 0;
  sampleSizeArray[0] = a2;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  if (!a1 || !a7 || !formatDescriptionOut)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v23 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v10 = width;
  v14 = HIDWORD(width);
  v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*formatDescriptionOut)
  {
    Dimensions = CMVideoFormatDescriptionGetDimensions(*formatDescriptionOut);
    MediaSubType = CMFormatDescriptionGetMediaSubType(*formatDescriptionOut);
    v18 = *formatDescriptionOut;
    if (MediaSubType == codecType && Dimensions.width == v10 && Dimensions.height == (_DWORD)v14)
    {
      if (v18)
        goto LABEL_13;
    }
    else if (v18)
    {
      CFRelease(v18);
      *formatDescriptionOut = 0;
    }
  }
  v19 = CMVideoFormatDescriptionCreate(*v15, codecType, v10, v14, 0, formatDescriptionOut);
  if ((_DWORD)v19)
  {
LABEL_23:
    v23 = v19;
    fig_log_get_emitter();
    goto LABEL_24;
  }
LABEL_13:
  v19 = IOSurfaceLock(a1, 1u, 0);
  if ((_DWORD)v19)
    goto LABEL_23;
  BaseAddress = IOSurfaceGetBaseAddress(a1);
  *(_QWORD *)&customBlockSource.version = 0;
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))sbu_unlockAndReleaseIOSurface;
  customBlockSource.refCon = (void *)CFRetain(a1);
  v21 = *v15;
  v22 = CMBlockBufferCreateWithMemoryBlock(*v15, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], &customBlockSource, 0, a2, 0, &blockBufferOut);
  if ((_DWORD)v22)
  {
    v23 = v22;
    fig_log_get_emitter();
    FigDebugAssert3();
    CFRelease(a1);
    goto LABEL_16;
  }
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTimingArray.presentationTimeStamp = *a5;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
  v23 = CMSampleBufferCreate(v21, blockBufferOut, 1u, 0, 0, *formatDescriptionOut, 1, 1, &sampleTimingArray, 1, sampleSizeArray, a7);
  if (!(_DWORD)v23)
    goto LABEL_16;
  fig_log_get_emitter();
LABEL_24:
  FigDebugAssert3();
LABEL_16:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v23;
}

void sbu_unlockAndReleaseIOSurface(__IOSurface *a1)
{
  if (a1)
  {
    IOSurfaceUnlock(a1, 1u, 0);
    CFRelease(a1);
  }
}

uint64_t BWSampleBufferCreateForDroppedFrame(CMTime *a1, CMFormatDescriptionRef formatDescription, void *a3, CMAttachmentBearerRef *a4)
{
  uint64_t v6;
  const void *v7;
  CFTypeRef *v8;
  int v9;
  uint64_t v10;
  CMAttachmentBearerRef target;
  CMSampleTimingInfo sampleTimingArray;

  target = 0;
  if (formatDescription && a4)
  {
    sampleTimingArray.presentationTimeStamp = *a1;
    *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
    sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
    v6 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, formatDescription, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&target);
    if ((_DWORD)v6)
    {
      v10 = v6;
      fig_log_get_emitter();
      FigDebugAssert3();
      return v10;
    }
    if (objc_msgSend(a3, "isEqualToString:", CFSTR("HighFrameRateAutoFocusDiscontinuity")))
    {
      v7 = (const void *)*MEMORY[0x1E0CA2780];
    }
    else
    {
      if ((objc_msgSend(a3, "isEqualToString:", CFSTR("VideoDeviceDiscontinuity")) & 1) == 0)
      {
        v9 = objc_msgSend(a3, "isEqualToString:", 0x1E494EF58);
        v7 = 0;
        v8 = (CFTypeRef *)MEMORY[0x1E0CA2798];
        if (v9)
          v8 = (CFTypeRef *)MEMORY[0x1E0CA2790];
        goto LABEL_11;
      }
      v7 = 0;
    }
    v8 = (CFTypeRef *)MEMORY[0x1E0CA2788];
LABEL_11:
    if (*v8)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2660], *v8, 1u);
      if (v7)
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2668], v7, 1u);
    }
    v10 = 0;
    *a4 = target;
    return v10;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

float BWSampleBufferComputeIOSurfaceCompressionRatio(opaqueCMSampleBuffer *a1, unint64_t *a2, unint64_t *a3)
{
  __CVBuffer *ImageBuffer;
  __CVBuffer *v6;
  int CompressionTypeOfPlane;
  float v8;
  int v9;
  size_t PlaneCount;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  size_t Width;
  size_t v16;
  size_t Height;
  size_t v18;
  uint64_t PixelFormatType;
  unint64_t v20;
  size_t extraRowsOnBottom;
  size_t extraRowsOnTop;
  size_t extraColumnsOnRight;
  size_t extraColumnsOnLeft;

  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (ImageBuffer && (v6 = ImageBuffer, CVPixelBufferGetIOSurface(ImageBuffer)))
  {
    CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
    v8 = 0.0;
    if (CompressionTypeOfPlane && (v9 = CompressionTypeOfPlane, (PlaneCount = CVPixelBufferGetPlaneCount(v6)) != 0))
    {
      v11 = PlaneCount;
      v12 = 0;
      v13 = 0;
      v14 = v9 - 3;
      do
      {
        if (v14 >= 2)
          v12 += IOSurfaceGetCompressedTileDataRegionMemoryUsedOfPlane();
        ++v13;
      }
      while (v11 != v13);
      if (v12)
      {
        extraColumnsOnRight = 0;
        extraColumnsOnLeft = 0;
        extraRowsOnBottom = 0;
        extraRowsOnTop = 0;
        CVPixelBufferGetExtendedPixels(v6, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
        Width = CVPixelBufferGetWidth(v6);
        v16 = extraColumnsOnLeft + Width + extraColumnsOnRight;
        Height = CVPixelBufferGetHeight(v6);
        v18 = extraRowsOnTop + Height + extraRowsOnBottom;
        PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
        v20 = (unint64_t)(float)(FigCapturePixelFormatBytesPerPixel(PixelFormatType) * (float)(v18 * v16));
        v8 = (float)v12 / (float)v20;
      }
      else
      {
        v20 = 0;
      }
    }
    else
    {
      v20 = 0;
      v12 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v20 = 0;
    v12 = 0;
    v8 = 0.0;
  }
  *a2 = v12;
  *a3 = v20;
  return v8;
}

uint64_t BWSampleBufferComputeIOSurfaceCompressionHistogram(opaqueCMSampleBuffer *a1)
{
  __CVBuffer *ImageBuffer;
  __CVBuffer *v2;
  uint64_t result;

  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  if (!ImageBuffer)
    return 4294954516;
  v2 = ImageBuffer;
  if (!CVPixelBufferGetIOSurface(ImageBuffer)
    || IOSurfaceGetCompressionTypeOfPlane() != 3
    || CVPixelBufferGetPlaneCount(v2) != 2)
  {
    return 4294954516;
  }
  result = CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane();
  if (!(_DWORD)result)
    return CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane();
  return result;
}

uint64_t BWUpdateTrackedFacesMetadataOnSampleBuffer(void *a1, double a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7, double a8, double a9, uint64_t a10, int a11, int a12)
{
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  float v25;
  const __CFString *v26;
  uint64_t result;
  void *v28;
  void *v29;
  void *v30;
  float v31;
  int32x4_t v32;
  int32x2_t v33;
  __float2 v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t i;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  __int32 v47;
  __int32 v48;
  __int32 v49;
  __int32 v50;
  __int32 v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int32 v55;
  float32x4_t v56;
  double v57;
  double v58;
  double v59;
  void *v60;
  void *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  double v73;
  double v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  double v78;
  void *v79;
  void *v80;
  void *v81;
  unint64_t v82;
  float32x2_t *v83;
  unint64_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  const __CFDictionary *v92;
  __CVBuffer *ImageBuffer;
  __CVBuffer *v94;
  const __CFDictionary *v95;
  id obj;
  int32x4_t v98;
  int32x4_t v99;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  __int32 v106;
  __int32 v107;
  __int32 v108;
  __int32 v109;
  __int32 v110;
  CGAffineTransform v111;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  CGAffineTransform v117;
  CGAffineTransform v118;
  CGAffineTransform t2;
  CGAffineTransform v120;
  CGAffineTransform t1;
  CGAffineTransform v122;
  _QWORD v123[3];
  _QWORD v124[3];
  _QWORD v125[3];
  _QWORD v126[3];
  _QWORD v127[3];
  _QWORD v128[3];
  _QWORD v129[3];
  _BYTE v130[128];
  uint64_t v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;

  v131 = *MEMORY[0x1E0C80C00];
  v17 = a11 == 90 || a11 == 270;
  if (v17)
    v18 = a9;
  else
    v18 = a8;
  v19 = v18 / a4;
  if (v17)
    v20 = a8;
  else
    v20 = a9;
  v21 = v20 / a5;
  if (!a11)
  {
    v22 = v19 == 1.0 && v21 == 1.0;
    if (v22 && a12 == 0)
      return 0;
  }
  if (a12)
    v25 = -1.0;
  else
    v25 = 1.0;
  v26 = (const __CFString *)*MEMORY[0x1E0D05DD0];
  result = (uint64_t)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05DD0], 0);
  if (result)
  {
    v28 = (void *)result;
    v29 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", result);
    v30 = (void *)objc_msgSend(v28, "objectForKeyedSubscript:", getkCVAFaceTracking_TrackedFacesArray());
    result = objc_msgSend(v30, "count");
    if (result)
    {
      v104 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v104, getkCVAFaceTracking_TrackedFacesArray());
      memset(&v120, 0, sizeof(v120));
      CGAffineTransformMakeTranslation(&v120, -a2, -a3);
      CGAffineTransformMakeScale(&t2, v19, v21);
      t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &t2);
      v120 = v122;
      FigCaptureMakeMirrorAndRotateVideoTransform((int)(v19 * a4 + -1.0), (int)(v21 * a5 + -1.0), a12, a11, (uint64_t)&v118);
      t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &v118);
      v120 = v122;
      CGAffineTransformMakeTranslation(&v117, a6, a7);
      t1 = v120;
      CGAffineTransformConcat(&v122, &t1, &v117);
      v120 = v122;
      v113 = 0u;
      v114 = 0u;
      v115 = 0u;
      v116 = 0u;
      v105 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v113, v130, 16);
      if (v105)
      {
        v103 = *(_QWORD *)v114;
        v31 = (float)(v25 * (float)a11) * 0.0174532925;
        v34 = __sincosf_stret(v31);
        *(float *)v33.i32 = v34.__cosval;
        *(float *)v32.i32 = v34.__sinval;
        v35.i32[3] = 0;
        v35.i64[0] = LODWORD(v34.__cosval);
        *(float *)&v35.i32[2] = -v34.__sinval;
        v36 = vzip1q_s32(v35, v32);
        v36.i32[3] = 0;
        v99 = v36;
        v37 = vzip2q_s32(v35, vdupq_lane_s32(v33, 0));
        v37.i32[3] = 0;
        v98 = v37;
        v101 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        v102 = *MEMORY[0x1E0C9D628];
        obj = v30;
        while (2)
        {
          for (i = 0; i != v105; ++i)
          {
            if (*(_QWORD *)v114 != v103)
              objc_enumerationMutation(obj);
            v39 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", *(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * i));
            objc_msgSend(v104, "addObject:", v39);
            v40 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v39, "objectForKeyedSubscript:", getkCVAFaceTracking_CameraColor()));
            objc_msgSend(v39, "setObject:forKeyedSubscript:", v40, getkCVAFaceTracking_CameraColor());
            v41 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v40, "objectForKeyedSubscript:", getkCVAFaceTracking_Extrinsics_0()));
            objc_msgSend(v40, "setObject:forKeyedSubscript:", v41, getkCVAFaceTracking_Extrinsics_0());
            v42 = (void *)objc_msgSend(v41, "objectForKeyedSubscript:", getkCVAFaceTracking_Rotation_0());
            if (v42)
            {
              v43 = v42;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v42, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 0), "floatValue");
              v111.tx = v44;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 1), "floatValue");
              v111.c = v45;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 2), "floatValue");
              v111.a = v46;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 0), "floatValue");
              v110 = v47;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 1), "floatValue");
              v109 = v48;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 2), "floatValue");
              v108 = v49;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 0), "floatValue");
              v107 = v50;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 1), "floatValue");
              v106 = v51;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectAtIndexedSubscript:", 2), "objectAtIndexedSubscript:", 2), "floatValue");
              v56 = *(float32x4_t *)&v111.a;
              v54 = *(float32x4_t *)&v111.c;
              v53 = *(float32x4_t *)&v111.tx;
              v52 = 0;
              v53.i32[1] = v110;
              v53.i32[2] = v107;
              v54.i32[1] = v109;
              v54.i32[2] = v106;
              v56.i32[1] = v108;
              v56.i32[2] = v55;
              *(int32x4_t *)&t1.a = v99;
              *(int32x4_t *)&t1.c = v98;
              *(_OWORD *)&t1.tx = xmmword_1A3161F30;
              memset(&v122, 0, sizeof(v122));
              do
              {
                *(float32x4_t *)((char *)&v122.a + v52) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(_OWORD *)((char *)&t1.a + v52))), v54, *(float32x2_t *)((char *)&t1.a + v52), 1), v56, *(float32x4_t *)((char *)&t1.a + v52), 2);
                v52 += 16;
              }
              while (v52 != 48);
              v111 = v122;
              v128[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v122.tx), LODWORD(v122.a))));
              v128[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v111.c);
              v128[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v111.tx);
              v129[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v128, 3);
              HIDWORD(v57) = HIDWORD(v111.a);
              LODWORD(v57) = HIDWORD(v111.a);
              v127[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v57);
              HIDWORD(v58) = HIDWORD(v111.c);
              LODWORD(v58) = HIDWORD(v111.c);
              v127[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v58);
              HIDWORD(v59) = HIDWORD(v111.tx);
              LODWORD(v59) = HIDWORD(v111.tx);
              v127[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v59);
              v129[1] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v127, 3);
              v126[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.a), LODWORD(v111.b))));
              v126[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.c), LODWORD(v111.d))));
              v126[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", COERCE_DOUBLE(__PAIR64__(HIDWORD(v111.tx), LODWORD(v111.ty))));
              v129[2] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v126, 3);
              objc_msgSend(v41, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v129, 3), getkCVAFaceTracking_Rotation_0());
            }
            v60 = (void *)objc_msgSend(v40, "objectForKeyedSubscript:", getkCVAFaceTracking_Intrinsics_0());
            if (v60)
            {
              v61 = v60;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v60, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 0), "floatValue");
              v63 = v62;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 1), "floatValue");
              v65 = v64;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 0), "objectAtIndexedSubscript:", 2), "floatValue");
              v67 = v66;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v61, "objectAtIndexedSubscript:", 1), "objectAtIndexedSubscript:", 2), "floatValue");
              v69 = v19 * v63;
              v70 = v21 * v65;
              v71 = v25 * v70;
              if (a11 == 270 || a11 == 90)
              {
                v72 = v25 * v70;
              }
              else
              {
                v72 = v69;
                v69 = v71;
              }
              v73 = v67;
              v74 = v68;
              v75 = v120.tx + v120.c * v74 + v120.a * v67;
              v76 = v120.d * v74 + v120.b * v73;
              v77 = v120.ty + v76;
              *(float *)&v76 = v72;
              v124[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v76);
              v124[1] = &unk_1E49F93F0;
              v124[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v75);
              v125[0] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v124, 3);
              v123[0] = &unk_1E49F93F0;
              *(float *)&v78 = v69;
              v123[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v78);
              v123[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v77);
              v125[1] = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v123, 3);
              v125[2] = &unk_1E4A00788;
              objc_msgSend(v40, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v125, 3), getkCVAFaceTracking_Intrinsics_0());
            }
            v79 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v39, "objectForKeyedSubscript:", getkCVAFaceTracking_SmoothData()));
            objc_msgSend(v39, "setObject:forKeyedSubscript:", v79, getkCVAFaceTracking_SmoothData());
            v80 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v79, "objectForKeyedSubscript:", getkCVAFaceTracking_Geometry()));
            objc_msgSend(v79, "setObject:forKeyedSubscript:", v80, getkCVAFaceTracking_Geometry());
            if (objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryLandmarks()))
            {
              v81 = (void *)objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryLandmarks()), "mutableCopy");
              v82 = objc_msgSend(v81, "length");
              v83 = (float32x2_t *)objc_msgSend(v81, "mutableBytes");
              if (v82 >= 4)
              {
                v84 = 0;
                v85 = *(float64x2_t *)&v120.a;
                v86 = *(float64x2_t *)&v120.c;
                v87 = *(float64x2_t *)&v120.tx;
                do
                {
                  *v83 = vcvt_f32_f64(vaddq_f64(v87, vmlaq_n_f64(vmulq_n_f64(v86, v83->f32[1]), v85, v83->f32[0])));
                  ++v83;
                  v84 += 2;
                }
                while (v82 >> 2 > v84);
              }
              objc_msgSend(v80, "setObject:forKeyedSubscript:", v81, getkCVAFaceTracking_GeometryLandmarks());

            }
            if (objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryVertices()) && a12)
            {
              v88 = (void *)objc_msgSend((id)objc_msgSend(v80, "objectForKeyedSubscript:", getkCVAFaceTracking_GeometryVertices()), "mutableCopy");
              v89 = objc_msgSend(v88, "length");
              v90 = objc_msgSend(v88, "mutableBytes");
              if (v89 >= 4)
              {
                v91 = 0;
                do
                {
                  *(float *)(v90 + 4 * v91) = v25 * *(float *)(v90 + 4 * v91);
                  v91 += 3;
                }
                while (v89 >> 2 > v91);
              }
              objc_msgSend(v80, "setObject:forKeyedSubscript:", v88, getkCVAFaceTracking_GeometryVertices());

            }
            *(_OWORD *)&t1.a = v102;
            *(_OWORD *)&t1.c = v101;
            v92 = (const __CFDictionary *)objc_msgSend(v39, "objectForKeyedSubscript:", getkCVAFaceTracking_DetectedFaceRect());
            if (CGRectMakeWithDictionaryRepresentation(v92, (CGRect *)&t1))
            {
              FigCaptureMetadataUtilitiesDenormalizeCropRect(t1.a, t1.b, t1.c, t1.d);
              t1.a = v132.origin.x;
              t1.b = v132.origin.y;
              t1.c = v132.size.width;
              t1.d = v132.size.height;
              v122 = v120;
              v133 = CGRectApplyAffineTransform(v132, &v122);
              t1.a = v133.origin.x;
              t1.b = v133.origin.y;
              t1.c = v133.size.width;
              t1.d = v133.size.height;
              ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
              if (!ImageBuffer)
                return 4294954516;
              v94 = ImageBuffer;
              CVPixelBufferGetWidth(ImageBuffer);
              CVPixelBufferGetHeight(v94);
              FigCaptureMetadataUtilitiesNormalizeCropRect(t1.a, t1.b, t1.c, t1.d);
              t1.a = v134.origin.x;
              t1.b = v134.origin.y;
              t1.c = v134.size.width;
              t1.d = v134.size.height;
              v95 = CGRectCreateDictionaryRepresentation(v134);
              objc_msgSend(v39, "setObject:forKeyedSubscript:", v95, getkCVAFaceTracking_DetectedFaceRect());
            }
          }
          v105 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v113, v130, 16);
          if (v105)
            continue;
          break;
        }
      }
      CMSetAttachment(a1, v26, v29, 1u);
      return 0;
    }
  }
  return result;
}

uint64_t getkCVAFaceTracking_TrackedFacesArray()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr;
  v6 = getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr;
  if (!getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_TrackedFacesArray");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_TrackedFacesArraySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_TrackedFacesArray_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_CameraColor()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0;
  v6 = getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_CameraColor");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_CameraColorSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_CameraColor_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Extrinsics_0()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0;
  v6 = getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_Extrinsics");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_ExtrinsicsSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Extrinsics_cold_1_0();
  return *(_QWORD *)v0;
}

void sub_1A2EE99C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Rotation_0()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_RotationSymbolLoc_ptr_0;
  v6 = getkCVAFaceTracking_RotationSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_RotationSymbolLoc_ptr_0)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_Rotation");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_RotationSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Rotation_cold_1_0();
  return *(_QWORD *)v0;
}

void sub_1A2EE9A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Intrinsics_0()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0;
  v6 = getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_Intrinsics");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_IntrinsicsSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Intrinsics_cold_1_0();
  return *(_QWORD *)v0;
}

void sub_1A2EE9AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_SmoothData()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_SmoothDataSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_SmoothDataSymbolLoc_ptr;
  if (!getkCVAFaceTracking_SmoothDataSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_SmoothData");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_SmoothDataSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_SmoothData_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_Geometry()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_GeometrySymbolLoc_ptr;
  v6 = getkCVAFaceTracking_GeometrySymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometrySymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_Geometry");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_GeometrySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_Geometry_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_GeometryLandmarks()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_GeometryLandmarks");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_GeometryLandmarksSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_GeometryLandmarks_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_GeometryVertices()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr;
  v6 = getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr;
  if (!getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_GeometryVertices");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_GeometryVerticesSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_GeometryVertices_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getkCVAFaceTracking_DetectedFaceRect()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0;
  v6 = getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0;
  if (!getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0)
  {
    v1 = (void *)AppleCVALibrary_0();
    v0 = dlsym(v1, "kCVAFaceTracking_DetectedFaceRect");
    v4[3] = (uint64_t)v0;
    getkCVAFaceTracking_DetectedFaceRectSymbolLoc_ptr_0 = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  if (!v0)
    getkCVAFaceTracking_DetectedFaceRect_cold_1();
  return *(_QWORD *)v0;
}

void sub_1A2EE9DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t BWSampleBufferCreateFromDataBuffer(__CVBuffer *a1, __int128 *a2, CMMediaType a3, CFTypeRef *a4, CMAttachmentBearerRef *a5)
{
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  return BWSampleBufferCreateFromDataBufferWithNumberOfPoints(a1, (uint64_t)&v6, a3, a4, a5, 0xFFFFFFFF);
}

uint64_t BWSampleBufferCreateFromDataBufferWithNumberOfPoints(__CVBuffer *a1, uint64_t a2, CMMediaType a3, CFTypeRef *a4, CMAttachmentBearerRef *a5, unsigned int a6)
{
  CFTypeRef *v6;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  char v13;
  CFTypeRef v14;
  uint64_t v15;
  const __CFDictionary *v16;
  FourCharCode DataFormatType;
  uint64_t ReadyForCVDataBuffer;
  BOOL v19;
  _BOOL4 v20;
  char v21;
  const __CFString *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  uint64_t v25;
  CMFormatDescriptionRef v26;
  CMFormatDescriptionRef formatDescriptionOut;
  __int128 v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;
  CMAttachmentBearerRef target;
  _QWORD v37[2];
  _QWORD v38[4];

  v6 = a4;
  v38[2] = *MEMORY[0x1E0C80C00];
  v35 = 0;
  target = 0;
  v34 = 0u;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  formatDescriptionOut = 0;
  if (a1 && a4 && a5)
  {
    v9 = *a4;
    v32 = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)&v33[0] = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    *(_OWORD *)((char *)v33 + 8) = *(_OWORD *)a2;
    *((_QWORD *)&v33[1] + 1) = *(_QWORD *)(a2 + 16);
    v34 = v32;
    v35 = *(_QWORD *)&v33[0];
    v10 = *MEMORY[0x1E0CA4A58];
    v11 = *MEMORY[0x1E0CA2240];
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = 1;
    v14 = v9;
    do
    {
      if (!v14)
      {
        if (a3 == 1885564004)
        {
          v37[0] = v10;
          v15 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a6);
          v37[1] = v11;
          v38[0] = v15;
          v38[1] = MEMORY[0x1E0C9AA70];
          v16 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
        }
        else
        {
          v16 = 0;
        }
        DataFormatType = CVDataBufferGetDataFormatType();
        ReadyForCVDataBuffer = CMFormatDescriptionCreate(v12, a3, DataFormatType, v16, &formatDescriptionOut);
        if ((_DWORD)ReadyForCVDataBuffer)
          goto LABEL_32;
      }
      ReadyForCVDataBuffer = CMSampleBufferCreateReadyForCVDataBuffer();
      v19 = (_DWORD)ReadyForCVDataBuffer == -12743 && formatDescriptionOut == 0;
      v20 = v19;
      if ((_DWORD)ReadyForCVDataBuffer && !v20)
      {
LABEL_32:
        v25 = ReadyForCVDataBuffer;
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_26;
      }
      if (v20)
        v14 = 0;
      if (target)
        break;
      v21 = (v9 != 0) & v13;
      v13 = 0;
    }
    while ((v21 & 1) != 0);
    v22 = (const __CFString *)*MEMORY[0x1E0D05D20];
    v23 = CVBufferCopyAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D20], 0);
    if (v23)
    {
      v24 = CFAutorelease(v23);
      if (v24)
        CMSetAttachment(target, v22, v24, 1u);
    }
    v25 = 0;
    *a5 = target;
LABEL_26:
    v6 = a4;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v25 = 4294954516;
  }
  v26 = formatDescriptionOut;
  if (formatDescriptionOut)
  {
    if (*v6)
    {
      CFRelease(*v6);
      v26 = formatDescriptionOut;
    }
    *v6 = v26;
  }
  return v25;
}

CFTypeRef BWSampleBufferGetCVDataBuffer(opaqueCMSampleBuffer *a1)
{
  CMBlockBufferRef DataBuffer;

  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  return CMGetAttachment(DataBuffer, (CFStringRef)*MEMORY[0x1E0CA2058], 0);
}

uint64_t BWSampleBufferCreateAttachedMediaFromPixelBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CVBuffer *a3, CFTypeRef *a4, uint64_t a5, void *a6, int a7, CMAttachmentBearerRef *a8)
{
  uint64_t SampleTimingInfoArray;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  CFTypeRef v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CMSampleTimingInfo sampleTiming;
  CMAttachmentBearerRef target;
  CMSampleTimingInfo timingArrayOut;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  target = 0;
  if (!a1 || !a2 || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v26 = 4294954516;
    goto LABEL_20;
  }
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a1, 1, &timingArrayOut, 0);
  if ((_DWORD)SampleTimingInfoArray)
  {
    v26 = SampleTimingInfoArray;
    fig_log_get_emitter();
LABEL_28:
    FigDebugAssert3();
    goto LABEL_20;
  }
  sampleTiming = timingArrayOut;
  v16 = BWSampleBufferCreateFromPixelBufferWithTimingInfo(a3, &sampleTiming, a4, (CMSampleBufferRef *)&target);
  if ((_DWORD)v16)
  {
    v26 = v16;
    fig_log_get_emitter();
    goto LABEL_28;
  }
  v17 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a5);
  v18 = *MEMORY[0x1E0D06D00];
  v19 = objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  v20 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  if (!v19)
    objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", v18), v18);
  CMSetAttachment(target, v20, v17, 1u);
  if (a7)
    BWPropagateZoomInformationToAttachedMediaSampleBuffer(a1, target);
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v21 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
  if (v21)
  {
    v22 = v21;
    v23 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v22; ++i)
      {
        if (*(_QWORD *)v29 != v23)
          objc_enumerationMutation(a6);
        CMSetAttachment(target, *(CFStringRef *)(*((_QWORD *)&v28 + 1) + 8 * i), (CFTypeRef)objc_msgSend(a6, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i)), 1u);
      }
      v22 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v28, v35, 16);
    }
    while (v22);
  }
  if (!CMGetAttachment(target, CFSTR("StillSettings"), 0))
  {
    v25 = CMGetAttachment(a1, CFSTR("StillSettings"), 0);
    CMSetAttachment(target, CFSTR("StillSettings"), v25, 1u);
  }
  v26 = 0;
LABEL_20:
  if (a8)
  {
    *a8 = target;
  }
  else if (target)
  {
    CFRelease(target);
  }
  return v26;
}

void BWPropagateZoomInformationToAttachedMediaSampleBuffer(const void *a1, const void *a2)
{
  const __CFString *v3;
  CFTypeRef v4;
  void *v5;
  void *v6;
  const void *v7;

  if (a1)
  {
    if (a2)
    {
      v3 = (const __CFString *)*MEMORY[0x1E0D05CB0];
      v4 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      if (v4)
      {
        v5 = (void *)v4;
        v6 = (void *)CMGetAttachment(a2, v3, 0);
        if (v6)
        {
          v7 = v6;
          FigCaptureMetadataUtilitiesCopyZoomRelatedMetadata(v5, v6);
          CMSetAttachment(a2, v3, v7, 1u);
        }
      }
    }
  }
}

uint64_t BWSampleBufferSetAttachedMediaFromPixelBuffer(opaqueCMSampleBuffer *a1, uint64_t a2, __CVBuffer *a3, CFTypeRef *a4, uint64_t a5, void *a6, int a7)
{
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v9 = BWSampleBufferCreateAttachedMediaFromPixelBuffer(a1, a2, a3, a4, a5, a6, a7, &cf);
  if ((_DWORD)v9)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    BWSampleBufferSetAttachedMedia(a1, a2, (uint64_t)cf);
    if (cf)
      CFRelease(cf);
  }
  return v9;
}

uint64_t BWSampleBufferAttachmentsGetAttachedMedia(void *a1, uint64_t a2)
{
  return objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("AttachedMedia")), "objectForKeyedSubscript:", a2);
}

uint64_t BWSampleBufferFilterWithAllowedAttachedMedia(const void *a1, void *a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "allKeys", 0);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if ((objc_msgSend(a2, "containsObject:", v9) & 1) == 0)
          BWSampleBufferSetAttachedMedia(a1, v9, 0);
        ++v8;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t BWSampleBufferFilterWithDisallowedAttachedMedia(const void *a1, void *a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "allKeys", 0);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8);
        if (objc_msgSend(a2, "containsObject:", v9))
          BWSampleBufferSetAttachedMedia(a1, v9, 0);
        ++v8;
      }
      while (v6 != v8);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

CFTypeRef BWSampleBufferCreateWithSwappingPrimaryAndAttachedMedia(const void *a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  CFTypeRef v7;

  v6 = (const void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", a3);
  if (!v6)
    return 0;
  v7 = CFRetain(v6);
  if (v7)
  {
    BWSampleBufferSetAttachedMedia(a1, a3, 0);
    BWSampleBufferPropagateAttachedMedia(a1, v7);
    CMRemoveAttachment(a1, CFSTR("AttachedMedia"));
    BWSampleBufferSetAttachedMedia(v7, a2, (uint64_t)a1);
  }
  return v7;
}

uint64_t BWMetadataAttachmentKeyForAttachedMediaKey(void *a1)
{
  uint64_t v2;

  if (objc_msgSend(a1, "isEqualToString:", CFSTR("Depth")))
  {
    v2 = MEMORY[0x1E0D086F0];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", 0x1E495AF38))
  {
    v2 = MEMORY[0x1E0D08730];
    return *(_QWORD *)v2;
  }
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsHair")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsSkin")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsTeeth")) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", CFSTR("PersonSemanticsGlasses")) & 1) != 0
    || objc_msgSend(a1, "isEqualToString:", 0x1E495B0B8))
  {
    v2 = MEMORY[0x1E0D08738];
    return *(_QWORD *)v2;
  }
  return 0;
}

uint64_t BWSynchronizeSmartStyleAttachedMediaPTS(opaqueCMSampleBuffer *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  const __CFString *v7;
  uint64_t v8;
  uint64_t v9;
  opaqueCMSampleBuffer *v10;
  opaqueCMSampleBuffer *v11;
  int v12;
  CMAttachmentBearerRef v13;
  CFDictionaryRef v14;
  CMAttachmentBearerRef target;
  CMTime time2;
  CMTime time1;
  CMTime v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CMTime v23;
  CMTime v24;
  _BYTE v25[128];
  _QWORD v26[8];

  v26[5] = *MEMORY[0x1E0C80C00];
  v26[0] = CFSTR("HumanFullBodiesMask");
  v26[1] = CFSTR("HumanSkinsMask");
  v26[2] = 0x1E495B218;
  v26[3] = 0x1E495B3F8;
  v26[4] = 0x1E495B358;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 5);
  memset(&v24, 0, sizeof(v24));
  CMSampleBufferGetPresentationTimeStamp(&v24, a1);
  memset(&v23, 0, sizeof(v23));
  CMSampleBufferGetDuration(&v23, a1);
  v22 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v20;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = (const __CFString *)*MEMORY[0x1E0D05D00];
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v20 != v5)
          objc_enumerationMutation(v2);
        v9 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v8);
        v10 = (opaqueCMSampleBuffer *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("AttachedMedia"), 0), "objectForKeyedSubscript:", v9);
        if (v10)
        {
          v11 = v10;
          memset(&v18, 0, sizeof(v18));
          CMSampleBufferGetPresentationTimeStamp(&v18, v10);
          time1 = v24;
          time2 = v18;
          if (CMTimeCompare(&time1, &time2))
          {
            target = 0;
            time1 = v24;
            time2 = v23;
            v12 = BWCMSampleBufferCreateCopyWithNewTimingIncludingMetadata(v11, &time1, (__int128 *)&time2.value, (CMSampleBufferRef *)&target);
            v13 = target;
            if (!v12 && target)
            {
              time1 = v18;
              v14 = CMTimeCopyAsDictionary(&time1, v6);
              CMSetAttachment(target, v7, v14, 1u);

              BWSampleBufferSetAttachedMedia(a1, v9, (uint64_t)target);
              v13 = target;
            }
            if (v13)
              CFRelease(v13);
          }
        }
        ++v8;
      }
      while (v4 != v8);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t BWSampleBufferGetPortType(const void *a1)
{
  return objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
}

const __CFString *BWVideoSampleBufferToDisplayString()
{
  return &stru_1E4928818;
}

uint64_t BWStillImageSampleBufferToShortDisplayString(const void *a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  const __CFString *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v2 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v3 = (void *)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  v25 = BWPortTypeToDisplayString(v3, v4);
  v24 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D10]), "BOOLValue");
  v5 = *MEMORY[0x1E0D06F00];
  if (objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F00]))
    v23 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", v5), "intValue");
  else
    v23 = 0xFFFFFFFFLL;
  v6 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06910]), "intValue");
  v7 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D05DF8]), "intValue");
  v8 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D80]), "BOOLValue");
  v9 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A60]), "BOOLValue");
  v10 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06878]), "BOOLValue");
  v11 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D60]), "BOOLValue");
  v12 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06EB0]), "longValue");
  if (v10)
    v13 = CFSTR("AmbientFL");
  else
    v13 = CFSTR("Aux");
  if ((v10 & 1) != 0)
  {
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((v11 & 1) != 0)
    goto LABEL_23;
  if (!v9)
  {
    if ((v24 & 1) != 0)
    {
      v13 = CFSTR("PB");
      if (!v8)
        goto LABEL_25;
      goto LABEL_24;
    }
    if ((v23 & 0x80000000) != 0)
    {
      if ((int)v6 < 1)
      {
        v13 = CFSTR("SF");
        if (!v8)
          goto LABEL_25;
LABEL_24:
        v13 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@, SIFR"), v13);
        goto LABEL_25;
      }
      if ((int)v7 < 1)
        v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("B%i"), v6, v21);
      else
        v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("G%iB%i"), v7, v6);
    }
    else
    {
      v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("TM%i"), v23, v21);
    }
    v13 = (const __CFString *)v14;
LABEL_23:
    if (!v8)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AE8]), "BOOLValue"))
    v13 = CFSTR("FL");
  else
    v13 = CFSTR("PF");
  if (v8)
    goto LABEL_24;
LABEL_25:
  v15 = (unint64_t)CMGetAttachment(a1, CFSTR("StillImageCaptureFrameFlags"), 0);
  v16 = (unint64_t)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0);
  if (v15 | v16)
  {
    v17 = (void *)v16;
    v18 = (void *)MEMORY[0x1E0CB3940];
    v19 = BWStillImageCaptureFrameFlagsToShortString(objc_msgSend((id)v15, "unsignedLongLongValue"));
    v13 = (const __CFString *)objc_msgSend(v18, "stringWithFormat:", CFSTR("%@ (%@ - %@)"), v13, v19, FigAppleMakerNoteStillImageProcessingFlagsToShortString(objc_msgSend(v17, "unsignedIntValue")));
  }
  if (v25)
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@): CID:%ld"), v13, v25, v12);
  else
    return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: CID:%ld"), v13, v12, v22);
}

uint64_t AppleCVALibrary_0()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!AppleCVALibraryCore_frameworkLibrary_0)
  {
    v2 = xmmword_1E49210F0;
    v3 = 0;
    AppleCVALibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!AppleCVALibraryCore_frameworkLibrary_0)
    AppleCVALibrary_cold_1_0(&v1);
  return AppleCVALibraryCore_frameworkLibrary_0;
}

uint64_t FigExternalStorageDeviceManagerServerStart()
{
  __CFDictionary *Mutable;
  uint64_t v1;
  _OWORD v3[3];

  v3[0] = xmmword_1E4921158;
  v3[1] = *(_OWORD *)&off_1E4921168;
  v3[2] = xmmword_1E4921178;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54E0], (const void *)*MEMORY[0x1E0C9AE50]);
  v1 = FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.externalstoragedevicemanager.xpc", (uint64_t)v3, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v1;
}

uint64_t FigExternalStorageDeviceManagerServerReplyingMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v6 = OpCode;
    fig_log_get_emitter();
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    value = 0;
    v4 = FigXPCServerLookupAndRetainAssociatedObject();
    if ((_DWORD)v4)
    {
      v6 = v4;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v6 = 4294954513;
    }
    fig_log_get_emitter();
  }
  FigDebugAssert3();
  return v6;
}

uint64_t FigExternalStorageDeviceManagerServerNoReplyMessageHandler(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v4 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    return 4294951138;
  }
  return v4;
}

uint64_t HandleExternalStorageDeviceManagerBeginMonitoring(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v4;
  uint64_t (*v5)(uint64_t, _QWORD, pthread_mutex_t **, uint64_t (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v6;

  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    v4 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    v5 = *(uint64_t (**)(uint64_t, _QWORD, pthread_mutex_t **, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v5)
    {
      v6 = v5(a2, 0, v4, externalStorageDeviceManagerCallback);
      if (!(_DWORD)v6)
      {
LABEL_7:
        pthread_mutex_unlock(*v4);
        return v6;
      }
    }
    else
    {
      v6 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_7;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceNextAvailableURLArray(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (!ConnectionRefcon)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v4 = ConnectionRefcon;
  pthread_mutex_lock(*ConnectionRefcon);
  if (*((_DWORD *)v4 + 7) == 2)
  {
    v5 = FigXPCMessageCopyCFArray();
    if ((_DWORD)v5 || (v5 = FigXPCMessageCopyCFString(), (_DWORD)v5))
    {
      v8 = v5;
      fig_log_get_emitter();
    }
    else
    {
      v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 16);
      if (v6)
      {
        v7 = v6(a2, 0, 0, cf, &v10);
        if ((_DWORD)v7)
        {
          v8 = v7;
        }
        else
        {
          v8 = FigXPCMessageSetCFArray();
          if (!(_DWORD)v8)
            goto LABEL_12;
        }
      }
      else
      {
        v8 = 4294954514;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
  }
LABEL_12:
  pthread_mutex_unlock(*v4);
  if (cf)
    CFRelease(cf);
LABEL_14:
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef, CFTypeRef *);
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (!ConnectionRefcon)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v4 = ConnectionRefcon;
  pthread_mutex_lock(*ConnectionRefcon);
  if (*((_DWORD *)v4 + 7) == 2)
  {
    v5 = FigXPCMessageCopyCFArray();
    if ((_DWORD)v5 || (v5 = FigXPCMessageCopyCFString(), (_DWORD)v5))
    {
      v8 = v5;
      fig_log_get_emitter();
    }
    else
    {
      v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 24);
      if (v6)
      {
        v7 = v6(a2, 0, 0, cf, &v10);
        if ((_DWORD)v7)
        {
          v8 = v7;
        }
        else
        {
          v8 = FigXPCMessageSetCFArray();
          if (!(_DWORD)v8)
            goto LABEL_12;
        }
      }
      else
      {
        v8 = 4294954514;
      }
      fig_log_get_emitter();
    }
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
  }
LABEL_12:
  pthread_mutex_unlock(*v4);
  if (cf)
    CFRelease(cf);
LABEL_14:
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t HandleExternalStorageDeviceManagerCopyStorageDeviceProperty()
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v1;
  uint64_t v2;
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  v6 = 0;
  cf = 0;
  v5 = 0;
  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    v1 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    v2 = FigXPCMessageCopyCFString();
    if ((_DWORD)v2)
    {
      v4 = v2;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v4 = FigSignalErrorAt();
    }
    pthread_mutex_unlock(*v1);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v4 = FigSignalErrorAt();
  }
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  return v4;
}

uint64_t HandleExternalStorageDeviceManagerCheckAuthorizationStatus(uint64_t a1, int a2, uint64_t a3)
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v7;
  __CFString *v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD v12[4];

  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (!ConnectionRefcon)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v7 = ConnectionRefcon;
  pthread_mutex_lock(*ConnectionRefcon);
  if (*((_DWORD *)v7 + 7))
  {
    v8 = 0;
LABEL_6:
    v10 = 0;
    if (!a2)
    {
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
        v10 = FigXPCMessageSetCFNumber();
        if ((_DWORD)v10)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
    }
    goto LABEL_11;
  }
  xpc_connection_get_audit_token();
  memset(v12, 0, sizeof(v12));
  v8 = (__CFString *)FigCaptureCopyClientCodeSigningIdentifier(v12);
  v9 = objc_msgSend((id)objc_msgSend((id)getICAccessManagerClass(), "connection:stateForAccessType:", a1, &unk_1E49F9480), "integerValue");
  if (v9 <= 2)
  {
    *((_DWORD *)v7 + 7) = v9;
    goto LABEL_6;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  v10 = FigSignalErrorAt();
LABEL_11:
  pthread_mutex_unlock(*v7);
  if (v8)

  return v10;
}

uint64_t HandleExternalStorageDeviceManagerRequestAuthorization(uint64_t a1)
{
  pthread_mutex_t **ConnectionRefcon;
  pthread_mutex_t **v3;
  NSObject *global_queue;
  _QWORD block[6];

  ConnectionRefcon = (pthread_mutex_t **)FigXPCServerGetConnectionRefcon();
  if (ConnectionRefcon)
  {
    v3 = ConnectionRefcon;
    pthread_mutex_lock(*ConnectionRefcon);
    global_queue = dispatch_get_global_queue(2, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __HandleExternalStorageDeviceManagerRequestAuthorization_block_invoke;
    block[3] = &unk_1E491F158;
    block[4] = a1;
    block[5] = v3;
    dispatch_async(global_queue, block);
    pthread_mutex_unlock(*v3);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

void figExternalStorageDeviceManager_servedObjectRefconDestructor(uint64_t a1)
{
  if (a1)
    _disposeExternalStorageDeviceManagerServerStorage(a1);
}

void _disposeExternalStorageDeviceManagerServerStorage(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
    *(_BYTE *)(a1 + 24) = 1;
    v2 = *(const void **)(a1 + 32);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 32) = 0;
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    FigSimpleMutexDestroy();
    free((void *)a1);
  }
}

uint64_t externalStorageDeviceManagerCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)a3);
    if (!*(_BYTE *)(a3 + 24))
    {
      if (FigXPCCreateBasicMessage()
        || FigXPCMessageSetCFArray()
        || FigXPCMessageSetCFError())
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      else
      {
        xpc_connection_send_message(*(xpc_connection_t *)(a3 + 8), 0);
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)a3);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
  }
  return FigXPCRelease();
}

uint64_t getICAccessManagerClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__17;
  v7 = __Block_byref_object_dispose__17;
  v0 = getICAccessManagerClass_softClass;
  v8 = getICAccessManagerClass_softClass;
  if (!getICAccessManagerClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getICAccessManagerClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getICAccessManagerClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2EF7434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getICAccessManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4921188;
    v5 = 0;
    ImageCaptureCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary)
    __getICAccessManagerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("ICAccessManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getICAccessManagerClass_block_invoke_cold_2();
  getICAccessManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigCaptureDeferredContainerManagerRemoteIsConnectionValid(uint64_t a1)
{
  if (a1 && !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 9))
    return 1;
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t containerManager_deadConnectionCallback(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result;
  if (!a1)
  {
    fig_log_get_emitter();
    result = FigDebugAssert3();
  }
  *(_BYTE *)(v3 + 9) = 1;
  return result;
}

void containerManager_deadServerCallback()
{
  dispatch_async((dispatch_queue_t)sDeadServerNotificationQueue_0, &__block_literal_global_44);
}

void __containerManager_deadServerCallback_block_invoke()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("ServerConnectionDied"), 0, 0, 0);
}

uint64_t captureDeferredContainerManagerRemote_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (!*(_BYTE *)(DerivedStorage + 9))
    {
      v3 = FigXPCCreateBasicMessage();
      if ((_DWORD)v3)
      {
        v1 = v3;
        fig_log_get_emitter();
      }
      else
      {
        v1 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v1)
        {
LABEL_7:
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          return v1;
        }
        fig_log_get_emitter();
      }
      FigDebugAssert3();
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t captureDeferredContainerManagerRemote_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureDeferredContainerManagerRemote_Invalidate();
  result = sCaptureDeferredContainerManagerRemoteClient;
  if (sCaptureDeferredContainerManagerRemoteClient)
    result = FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 9))
  {
    if (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigXPCRelease();
    return FigXPCRemoteClientKillServerOnTimeout();
  }
  return result;
}

__CFString *captureDeferredContainerManagerRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureDeferredContainerManagerRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>"), a1, v5, v6, v7, *(_QWORD *)DerivedStorage);
  return Mutable;
}

uint64_t captureDeferredContainerManagerRemote_CopyProperty()
{
  return 4294954512;
}

uint64_t captureDeferredContainerManagerRemote_SetProperty()
{
  return 4294954512;
}

uint64_t captureDeferredContainerManagerRemote_CopyContainerIdentifiers(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = 0;
  if (captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235113, a2, 0, &v3)
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || FigXPCMessageCopyCFObject())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t captureDeferredContainerManagerRemote_QueryContainerStatus(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v6 = 4294951162;
    goto LABEL_5;
  }
  v5 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684238691, a2, a3, &v8);
  if ((_DWORD)v5)
  {
    v6 = v5;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v6)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a4 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36B0]);
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

xpc_object_t captureDeferredContainerManagerRemote_CopyRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t value;
  xpc_object_t v4;
  uint64_t v6;

  v6 = 0;
  if (captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235107, a2, a3, &v6)
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v4 = 0;
  }
  else
  {
    value = xpc_dictionary_get_value(0, (const char *)*MEMORY[0x1E0CA36B0]);
    v4 = value;
    if (value)
    {
      xpc_retain(value);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_ReleaseRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684238947, a2, a3, &v6);
  if ((_DWORD)v3)
  {
    v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_DeleteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684235363, a2, a3, &v6);
  if ((_DWORD)v3)
  {
    v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredContainerManagerRemote_WaitForShaderCompilation(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = captureDeferredContainerManagerRemote_createContainerManagerMessage(a1, 1684239223, 0, 0, &v4);
  if ((_DWORD)v1)
  {
    v2 = v1;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v2 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t captureDeferredContainerManagerRemote_createContainerManagerMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;

  if (a5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if ((*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
      && (fig_log_get_emitter(), FigDebugAssert3(), v9 = FigSignalErrorAt(), (_DWORD)v9)
      || (v9 = FigXPCCreateBasicMessage(), (_DWORD)v9)
      || a3 && (v9 = FigXPCMessageSetCFString(), (_DWORD)v9)
      || a4 && (v9 = FigXPCMessageSetCFString(), (_DWORD)v9))
    {
      v10 = v9;
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      v10 = 0;
      *a5 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v10;
}

id udp_createUBStatisticsFromFrameStatistics(objc_class *a1, void *a2, uint64_t a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;

  v5 = objc_alloc_init(a1);
  *(float *)&v6 = (float)objc_msgSend(a2, "conversionGain") * 0.000015259;
  objc_msgSend(v5, "setConversionGain:", v6);
  *(float *)&v7 = (float)objc_msgSend(a2, "readNoise_1x") * 0.000015259;
  objc_msgSend(v5, "setReadNoise_1x:", v7);
  *(float *)&v8 = (float)objc_msgSend(a2, "readNoise_8x") * 0.000015259;
  objc_msgSend(v5, "setReadNoise_8x:", v8);
  objc_msgSend(a2, "integrationTime");
  objc_msgSend(v5, "setIntegrationTime:");
  *(float *)&v9 = (float)objc_msgSend(a2, "agc") * 0.0039062;
  objc_msgSend(v5, "setAgc:", v9);
  *(float *)&v10 = (float)objc_msgSend(a2, "ispDGain") * 0.0039062;
  objc_msgSend(v5, "setIspDGain:", v10);
  *(float *)&v11 = (float)objc_msgSend(a2, "sensorDGain") * 0.0039062;
  objc_msgSend(v5, "setSensorDGain:", v11);
  objc_msgSend(a2, "ispDGainRangeExpansionFactor");
  objc_msgSend(v5, "setIspDGainRangeExpansionFactor:");
  objc_msgSend(a2, "gain");
  objc_msgSend(v5, "setGain:");
  objc_msgSend(v5, "setAeLimitsReached:", objc_msgSend(a2, "aeLimitsReached"));
  *(float *)&v12 = (float)objc_msgSend(a2, "aeAverage");
  objc_msgSend(v5, "setAeAverage:", v12);
  *(float *)&v13 = (float)objc_msgSend(a2, "aeTarget");
  objc_msgSend(v5, "setAeTarget:", v13);
  objc_msgSend(v5, "setMotionFromAEMatrix:", objc_msgSend(a2, "motionFromAEMatrix"));
  objc_msgSend(v5, "setStationary:", a3);
  objc_msgSend(a2, "motionDataBiasErrorEstimate");
  objc_msgSend(v5, "setMotionDataBiasErrorEstimate:");
  if (objc_msgSend(a2, "aeStatistics"))
  {
    v14 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v5, "setAeThumbnail:", objc_msgSend(v14, "objectForKeyedSubscript:", *MEMORY[0x1E0D061F8]));
    v15 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v5, "setAeThumbnailWidth:", objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D06208]), "intValue"));
    v16 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v5, "setAeThumbnailHeight:", objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0D06200]), "intValue"));
  }
  return v5;
}

unint64_t ubp_addFrame(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  unint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  double v29;
  double v30;
  double v31;
  NSObject *v32;
  int v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  result = -[BWUBProcessorRequest processingType](a2);
  if (!(_DWORD)result)
    return result;
  if (objc_msgSend((id)a2, "err")
    || !-[BWUBProcessorRequest useFrameForMultiFrameProcessing:](a2, a4))
  {
    if (dword_1EE6BE598)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    result = objc_msgSend((id)a2, "err", v40, v42);
    if (a2)
    {
      if ((_DWORD)result)
      {
        result = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters");
        if (result)
        {
          result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame");
          if (!result)
          {
            result = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureStreamSettings"), "isUnifiedBracketingErrorRecoveryFrame:isReferenceFrame:", a4, 0);
            if ((_DWORD)result)
              return (unint64_t)-[BWUBProcessorInput _setErrorRecoveryFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), a4);
          }
        }
      }
    }
    return result;
  }
  if (a5)
  {
    objc_msgSend(a3, "setReferenceFrameIndex:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing"));
    if (!dword_1EE6BE598)
      goto LABEL_17;
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1EE6BE598)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_17:
  if (!objc_msgSend((id)a2, "deepFusionOutput", v40, v42)
    || !+[BWUBProcessorController lazilyAllocatesDeepFusionOutputBuffers](BWUBProcessorController, "lazilyAllocatesDeepFusionOutputBuffers")|| (!objc_msgSend(a3, "referenceFrameHasEVMinus")|| objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") != 1)&& ((objc_msgSend(a3, "referenceFrameHasEVMinus") & 1) != 0 || !a5))
  {
    goto LABEL_38;
  }
  v14 = (void *)objc_msgSend((id)a2, "deepFusionOutput");
  if (!objc_msgSend(v14, "proxyPixelBuffer"))
  {
    if (a2)
      v15 = *(void **)(a2 + 40);
    else
      v15 = 0;
    v16 = objc_msgSend(v15, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 7);
    if (!v16)
    {
      v43 = v5;
      LODWORD(v41) = 0;
      goto LABEL_73;
    }
    v17 = (const void *)v16;
    objc_msgSend(v14, "setProxyPixelBuffer:", v16);
    CFRelease(v17);
  }
  if (!objc_msgSend(v14, "referencePixelBuffer"))
  {
    if (a2)
      v18 = *(void **)(a2 + 40);
    else
      v18 = 0;
    v19 = objc_msgSend(v18, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 8);
    if (!v19)
    {
      v43 = v5;
      LODWORD(v41) = 0;
      goto LABEL_73;
    }
    v20 = (const void *)v19;
    objc_msgSend(v14, "setReferencePixelBuffer:", v19);
    CFRelease(v20);
  }
  if (!objc_msgSend(v14, "referenceNoisePixelBuffer"))
  {
    if (a2)
      v21 = *(void **)(a2 + 40);
    else
      v21 = 0;
    v22 = objc_msgSend(v21, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 9);
    if (v22)
    {
      v23 = (const void *)v22;
      objc_msgSend(v14, "setReferenceNoisePixelBuffer:", v22);
      CFRelease(v23);
      goto LABEL_38;
    }
    v43 = v5;
    LODWORD(v41) = 0;
LABEL_73:
    FigDebugAssert3();
    v25 = 4294954510;
LABEL_42:
    result = objc_msgSend((id)a2, "err", v41, v43);
    if (!(_DWORD)result)
      return objc_msgSend((id)a2, "setErr:", v25);
    return result;
  }
LABEL_38:
  v24 = objc_msgSend(a3, "addFrame:", a4);
  if ((_DWORD)v24)
  {
    v25 = v24;
    if (a2 && objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters"))
    {
      -[BWUBProcessorInput _setErrorRecoveryFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), (_QWORD *)objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
      objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
      objc_msgSend(a3, "resetState");
    }
    goto LABEL_42;
  }
  objc_msgSend((id)a2, "setNumberOfFramesAddedForMultiFrameProcessing:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") + 1);
  objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]), "floatValue");
  v27 = v26;
  objc_msgSend((id)a2, "totalExposureTimesOfFramesAddedForMultiFrameProcessing");
  *(float *)&v29 = v27 + v28;
  objc_msgSend((id)a2, "setTotalExposureTimesOfFramesAddedForMultiFrameProcessing:", v29);
  objc_msgSend((id)a2, "minExposureTimesOfFramesAddedForMultiFrameProcessing");
  if (v27 < *(float *)&v30)
    *(float *)&v30 = v27;
  objc_msgSend((id)a2, "setMinExposureTimesOfFramesAddedForMultiFrameProcessing:", v30);
  objc_msgSend((id)a2, "maxExposureTimesOfFramesAddedForMultiFrameProcessing");
  if (v27 >= *(float *)&v31)
    *(float *)&v31 = v27;
  objc_msgSend((id)a2, "setMaxExposureTimesOfFramesAddedForMultiFrameProcessing:", v31);
  if (dword_1EE6BE598)
  {
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input", v41, v43), "captureStreamSettings"), "referenceFrameIndex");
  if ((result & 0x80000000) != 0)
  {
    result = objc_msgSend(a3, "referenceFrameIndex");
    if ((result & 0x80000000) == 0)
    {
      v33 = result;
      result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "referenceFrame");
      if (!result)
      {
        v34 = 0;
        v35 = 0;
        while (1)
        {
          v36 = (_QWORD *)objc_msgSend((id)a2, "input");
          if (v36)
            v36 = (_QWORD *)v36[7];
          result = objc_msgSend(v36, "count");
          if (result <= v34)
            break;
          v37 = (_QWORD *)objc_msgSend((id)a2, "input");
          if (v37)
            v37 = (_QWORD *)v37[7];
          v38 = (_QWORD *)objc_msgSend(v37, "objectAtIndexedSubscript:", v34);
          result = -[BWUBProcessorRequest useFrameForMultiFrameProcessing:](a2, v38);
          if ((_DWORD)result)
          {
            if (v35 == v33)
            {
              if (v38)
              {
                -[BWUBProcessorInput _setReferenceFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), v38);
                result = (unint64_t)-[BWUBProcessorInput _setErrorRecoveryFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), (_QWORD *)objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
                if (a2)
                {
                  result = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveBracketingParameters");
                  if (result)
                    result = objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
                }
                if (dword_1EE6BE598)
                {
                  v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
                  return fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              return result;
            }
            ++v35;
          }
          ++v34;
        }
      }
    }
  }
  return result;
}

void sub_1A2EFDCE8()
{
  JUMPOUT(0x1A2EFDCA8);
}

void sub_1A2EFDCF0()
{
  JUMPOUT(0x1A2EFDCA8);
}

uint64_t __ubp_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  if (a2)
  {
    objc_msgSend(*(id *)(a2 + 80), "setOutput:", 0);
    objc_msgSend(*(id *)(a2 + 80), "resetState");
  }
  -[BWUBProcessorController _serviceNextRequest]((_QWORD *)a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_3(uint64_t a1, unint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWUBProcessorController _setupProcessor](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWUBProcessorController _processSingleImage](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWUBProcessorController _processUBOriginalImage](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_6(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWUBProcessorController _processUBFusion](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_7(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  if (a2)
    -[BWUBProcessorController _processUBFusion](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_8(uint64_t a1, id *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWUBProcessorController _processDeepFusion](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWUBProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

id nfrp_createNRFStatisticsFromFrameStatistics(objc_class *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  v7 = objc_alloc_init(a1);
  *(float *)&v8 = (float)objc_msgSend(a2, "conversionGain") * 0.000015259;
  objc_msgSend(v7, "setConversionGain:", v8);
  *(float *)&v9 = (float)objc_msgSend(a2, "readNoise_1x") * 0.000015259;
  objc_msgSend(v7, "setReadNoise_1x:", v9);
  *(float *)&v10 = (float)objc_msgSend(a2, "readNoise_8x") * 0.000015259;
  objc_msgSend(v7, "setReadNoise_8x:", v10);
  objc_msgSend(a2, "integrationTime");
  objc_msgSend(v7, "setIntegrationTime:");
  *(float *)&v11 = (float)objc_msgSend(a2, "agc") * 0.0039062;
  objc_msgSend(v7, "setAgc:", v11);
  *(float *)&v12 = (float)objc_msgSend(a2, "ispDGain") * 0.0039062;
  objc_msgSend(v7, "setIspDGain:", v12);
  *(float *)&v13 = (float)objc_msgSend(a2, "sensorDGain") * 0.0039062;
  objc_msgSend(v7, "setSensorDGain:", v13);
  objc_msgSend(a2, "ispDGainRangeExpansionFactor");
  objc_msgSend(v7, "setIspDGainRangeExpansionFactor:");
  objc_msgSend(a2, "gain");
  objc_msgSend(v7, "setGain:");
  objc_msgSend(a2, "exposureBias");
  *(float *)&v14 = v14;
  objc_msgSend(v7, "setBias:", v14);
  objc_msgSend(v7, "setAeLimitsReached:", objc_msgSend(a2, "aeLimitsReached"));
  *(float *)&v15 = (float)objc_msgSend(a2, "aeAverage");
  objc_msgSend(v7, "setAeAverage:", v15);
  *(float *)&v16 = (float)objc_msgSend(a2, "aeTarget");
  objc_msgSend(v7, "setAeTarget:", v16);
  objc_msgSend(v7, "setMotionFromAEMatrix:", objc_msgSend(a2, "motionFromAEMatrix"));
  objc_msgSend(v7, "setStationary:", a3);
  objc_msgSend(a2, "motionDataBiasErrorEstimate");
  objc_msgSend(v7, "setMotionDataBiasErrorEstimate:");
  if (objc_msgSend(a2, "aeStatistics"))
  {
    v17 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v7, "setAeThumbnail:", objc_msgSend(v17, "objectForKeyedSubscript:", *MEMORY[0x1E0D061F8]));
    v18 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v7, "setAeThumbnailWidth:", objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", *MEMORY[0x1E0D06208]), "intValue"));
    v19 = (void *)objc_msgSend(a2, "aeStatistics");
    objc_msgSend(v7, "setAeThumbnailHeight:", objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D06200]), "intValue"));
  }
  v20 = (void *)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D064A0]);
  v21 = *MEMORY[0x1E0D064D0];
  objc_msgSend(v7, "setNumberOfHumanFaces:", objc_msgSend((id)objc_msgSend(v20, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]), "count"));
  objc_msgSend(v7, "setNumberOfHumanBodies:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06498]), "objectForKeyedSubscript:", v21), "count"));
  return v7;
}

_QWORD *nrfp_addFrame(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, int a5)
{
  _QWORD *result;
  void *v11;
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v14;
  void *v15;
  uint64_t v16;
  __CVBuffer *v17;
  void *v18;
  uint64_t v19;
  __CVBuffer *v20;
  void *v21;
  uint64_t v22;
  __CVBuffer *v23;
  void *v24;
  uint64_t v25;
  __CVBuffer *v26;
  void *v27;
  uint64_t v28;
  __CVBuffer *v29;
  void *v30;
  __CVBuffer *v31;
  NSObject *v32;
  __CVBuffer *ImageBuffer;
  const __CFString *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  float v40;
  double v41;
  double v42;
  double v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)-[BWNRFProcessorRequest processingType](a2);
  if (!(_DWORD)result)
    return result;
  result = (_QWORD *)-[BWNRFProcessorRequest processingType](a2);
  if ((_DWORD)result == 6)
    return result;
  result = (_QWORD *)-[BWNRFProcessorRequest processingType](a2);
  if ((_DWORD)result == 7)
    return result;
  v11 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (objc_msgSend((id)a2, "err")
    || !-[BWNRFProcessorRequest useFrameForMultiFrameProcessing:](a2, a4))
  {
    if (dword_1EE6BE778)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    result = (_QWORD *)objc_msgSend((id)a2, "err", v45, v46);
    if (a2)
    {
      if ((_DWORD)result)
      {
        result = (_QWORD *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveUnifiedBracketedCaptureParams"), "count");
        if (result)
        {
          result = (_QWORD *)objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame");
          if (!result)
          {
            result = (_QWORD *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureStreamSettings"), "isUnifiedBracketingErrorRecoveryFrame:isReferenceFrame:", a4, 0);
            if ((_DWORD)result)
              return -[BWNRFProcessorInput _setErrorRecoveryFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), a4);
          }
        }
      }
    }
    return result;
  }
  if (objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06950]), "intValue"))
  {
    v37 = 4294954516;
    goto LABEL_69;
  }
  if (a5)
  {
    objc_msgSend(a3, "setReferenceFrameIndex:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing"));
    if (dword_1EE6BE778)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (!objc_msgSend((id)a2, "deepFusionOutput", v45, v46)
    || (!objc_msgSend(a3, "referenceFrameHasEVMinus")
     || objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") != 1)
    && ((objc_msgSend(a3, "referenceFrameHasEVMinus") & 1) != 0 || !a5))
  {
    goto LABEL_60;
  }
  v14 = (void *)objc_msgSend((id)a2, "deepFusionOutput");
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureSettings"), "produceDeferredPhotoProxyImage")&& !objc_msgSend(v14, "proxyPixelBuffer"))
  {
    if (a2)
      v15 = *(void **)(a2 + 56);
    else
      v15 = 0;
    v16 = objc_msgSend(v15, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 7);
    if (!v16)
      goto LABEL_79;
    v17 = (__CVBuffer *)v16;
    objc_msgSend(v14, "setProxyPixelBuffer:", v16);
    CVPixelBufferRelease(v17);
    objc_msgSend(v14, "setProxyMetadata:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"));
  }
  if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "captureSettings"), "captureFlags") & 4) == 0)
  {
    if (!objc_msgSend(v14, "syntheticReferencePixelBuffer"))
    {
      if (a2)
        v18 = *(void **)(a2 + 56);
      else
        v18 = 0;
      v19 = objc_msgSend(v18, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 8);
      if (!v19)
        goto LABEL_79;
      v20 = (__CVBuffer *)v19;
      objc_msgSend(v14, "setSyntheticReferencePixelBuffer:", v19);
      CVPixelBufferRelease(v20);
    }
    if (!objc_msgSend(v14, "syntheticReferenceFusionMapPixelBuffer"))
    {
      if (a2)
        v21 = *(void **)(a2 + 56);
      else
        v21 = 0;
      v22 = objc_msgSend(v21, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 9);
      if (v22)
      {
        v23 = (__CVBuffer *)v22;
        objc_msgSend(v14, "setSyntheticReferenceFusionMapPixelBuffer:", v22);
        CVPixelBufferRelease(v23);
        goto LABEL_40;
      }
LABEL_79:
      v37 = 4294954510;
LABEL_69:
      result = (_QWORD *)objc_msgSend((id)a2, "err", v45, v46);
      if (!(_DWORD)result)
        return (_QWORD *)objc_msgSend((id)a2, "setErr:", v37);
      return result;
    }
  }
LABEL_40:
  objc_msgSend(v14, "setSyntheticReferenceMetadata:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"));
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)a2, "input"), "processingSettings"), "provideDemosaicedRaw")&& !objc_msgSend(v14, "linearOutputPixelBuffer"))
  {
    if (a2)
      v24 = *(void **)(a2 + 56);
    else
      v24 = 0;
    v25 = objc_msgSend(v24, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 21);
    if (v25)
    {
      v26 = (__CVBuffer *)v25;
      objc_msgSend(v14, "setLinearOutputPixelBuffer:", v25);
      CVPixelBufferRelease(v26);
      objc_msgSend(v14, "setLinearOutputMetadata:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"));
    }
    else
    {
      objc_msgSend((id)a2, "setDemosaicedRawErr:", 4294954510);
    }
  }
  if (!objc_msgSend((id)a2, "processSmartStyleRenderingInput"))
    goto LABEL_52;
  if (a2)
    v27 = *(void **)(a2 + 56);
  else
    v27 = 0;
  v28 = objc_msgSend(v27, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 41);
  if (!v28)
    goto LABEL_79;
  v29 = (__CVBuffer *)v28;
  objc_msgSend(v14, "setLinearOutputMIWBAppliedPixelBuffer:", v28);
  objc_msgSend(v14, "setLinearOutputMIWBAppliedMetadata:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"));
  CVPixelBufferRelease(v29);
LABEL_52:
  if (objc_msgSend((id)a2, "gainMapEnabled") && !objc_msgSend(v14, "gainMapOutputPixelBuffer"))
  {
    if (a2)
      v30 = *(void **)(a2 + 56);
    else
      v30 = 0;
    v31 = (__CVBuffer *)objc_msgSend(v30, "processorController:newOutputPixelBufferForProcessorInput:type:", a1, objc_msgSend((id)a2, "input"), 19);
    if (v31 && (objc_opt_respondsToSelector() & 1) != 0)
      objc_msgSend(v14, "setGainMapOutputMetadata:", objc_msgSend(MEMORY[0x1E0C99E08], "dictionary"));
    objc_msgSend(v14, "setGainMapOutputPixelBuffer:", v31);
    CVPixelBufferRelease(v31);
  }
LABEL_60:
  if (dword_1EE6BE778)
  {
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a4);
  v34 = (const __CFString *)*MEMORY[0x1E0D05A10];
  v35 = (void *)CVBufferCopyAttachment(ImageBuffer, (CFStringRef)*MEMORY[0x1E0D05A10], 0);
  if (v35)
    v36 = objc_msgSend(a3, "addInputResource:", v35);
  else
    v36 = objc_msgSend(a3, "addFrame:", a4);
  v37 = v36;

  CVBufferRemoveAttachment(ImageBuffer, v34);
  if ((_DWORD)v37)
  {
    if (a2
      && objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a2 + 8), "captureStreamSettings"), "adaptiveUnifiedBracketedCaptureParams"), "count"))
    {
      -[BWNRFProcessorInput _setErrorRecoveryFrame:]((_QWORD *)objc_msgSend((id)a2, "input"), (_QWORD *)objc_msgSend((id)objc_msgSend((id)a2, "input"), "errorRecoveryFrame"));
      objc_msgSend((id)objc_msgSend((id)a2, "input"), "setKeepFrames:", 0);
      objc_msgSend(a3, "resetState");
    }
    goto LABEL_69;
  }
  objc_msgSend((id)a2, "setNumberOfFramesAddedForMultiFrameProcessing:", objc_msgSend((id)a2, "numberOfFramesAddedForMultiFrameProcessing") + 1);
  objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A20]), "floatValue");
  v39 = v38;
  objc_msgSend((id)a2, "totalExposureTimesOfFramesAddedForMultiFrameProcessing");
  *(float *)&v41 = v39 + v40;
  objc_msgSend((id)a2, "setTotalExposureTimesOfFramesAddedForMultiFrameProcessing:", v41);
  objc_msgSend((id)a2, "minExposureTimesOfFramesAddedForMultiFrameProcessing");
  if (v39 < *(float *)&v42)
    *(float *)&v42 = v39;
  objc_msgSend((id)a2, "setMinExposureTimesOfFramesAddedForMultiFrameProcessing:", v42, v45, v46);
  objc_msgSend((id)a2, "maxExposureTimesOfFramesAddedForMultiFrameProcessing");
  if (v39 >= *(float *)&v43)
    *(float *)&v43 = v39;
  result = (_QWORD *)objc_msgSend((id)a2, "setMaxExposureTimesOfFramesAddedForMultiFrameProcessing:", v43);
  if (dword_1EE6BE778)
  {
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    return (_QWORD *)fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void sub_1A2F056A0()
{
  JUMPOUT(0x1A2F05660);
}

void sub_1A2F056A8()
{
  JUMPOUT(0x1A2F05660);
}

void sub_1A2F056B0()
{
  JUMPOUT(0x1A2F05660);
}

uint64_t __nrfp_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  if (a2)
  {
    objc_msgSend(*(id *)(a2 + 80), "setOutput:", 0);
    objc_msgSend(*(id *)(a2 + 80), "resetState");
  }
  -[BWNRFProcessorController _serviceNextRequest]((_QWORD *)a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_3(uint64_t a1, unint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _setupProcessor](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processSingleImage](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processOriginalImage](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_6(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processUBFusion](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_7(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processDigitalFlash](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_8(uint64_t a1, id *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processDeepFusion](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

uint64_t __nrfp_createStateMachine_block_invoke_9(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWNRFProcessorController _processDigitalFlash](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWNRFProcessorController _updateStateIfNeeded](a2);
}

void *sicn_cameraCalibrationDataMetadataAttachmentDictionaryFromCalibrationMetadata(void *a1, opaqueCMSampleBuffer *a2, int a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __CVBuffer *ImageBuffer;
  CGFloat Width;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  int v32;
  void *v33;
  void *v34;
  void *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  int v41;
  uint64_t v42;
  CFDictionaryRef v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  _BYTE v62[128];
  uint64_t v63;
  CGSize v64;

  v63 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    if (a3)
      objc_msgSend(a1, "referenceIntrinsicMatrix");
    else
      objc_msgSend(a1, "auxiliaryIntrinsicMatrix");
    DWORD2(v58) = v8;
    DWORD2(v59) = v10;
    *(_QWORD *)&v58 = v7;
    *(_QWORD *)&v59 = v9;
    DWORD2(v60) = v12;
    *(_QWORD *)&v60 = v11;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v58, 48), CFSTR("IntrinsicMatrix"));
    ImageBuffer = CMSampleBufferGetImageBuffer(a2);
    Width = (double)CVPixelBufferGetWidth(ImageBuffer);
    v64.height = (double)CVPixelBufferGetHeight(ImageBuffer);
    v64.width = Width;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v64);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("IntrinsicMatrixReferenceDimensions"));

    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    if (a3)
      objc_msgSend(a1, "referenceExtrinsicMatrix");
    else
      objc_msgSend(a1, "auxiliaryExtrinsicMatrix");
    DWORD2(v54) = v17;
    DWORD2(v55) = v19;
    *(_QWORD *)&v54 = v16;
    *(_QWORD *)&v55 = v18;
    DWORD2(v56) = v21;
    DWORD2(v57) = v23;
    *(_QWORD *)&v56 = v20;
    *(_QWORD *)&v57 = v22;
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v54, 64), CFSTR("ExtrinsicMatrix"));
    if (a3)
      objc_msgSend(a1, "referencePixelSizeInMillimeters");
    else
      objc_msgSend(a1, "auxiliaryPixelSizeInMillimeters");
    objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"), CFSTR("PixelSize"));
    if (a3)
      v24 = (void *)objc_msgSend(a1, "referenceLensDistortionCoefficients");
    else
      v24 = (void *)objc_msgSend(a1, "auxiliaryLensDistortionCoefficients");
    v25 = v24;
    if (v24)
    {
      v26 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v24, "count"));
      v27 = (_DWORD *)objc_msgSend(v26, "mutableBytes");
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v28 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v51;
        do
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v51 != v30)
              objc_enumerationMutation(v25);
            objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * i), "floatValue");
            *v27++ = v32;
          }
          v29 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v62, 16);
        }
        while (v29);
      }
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v26, CFSTR("LensDistortionCoefficients"));
    }
    if (a3)
      v33 = (void *)objc_msgSend(a1, "referenceInverseLensDistortionCoefficients");
    else
      v33 = (void *)objc_msgSend(a1, "auxiliaryInverseLensDistortionCoefficients");
    v34 = v33;
    if (v33)
    {
      v35 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v33, "count"));
      v36 = (_DWORD *)objc_msgSend(v35, "mutableBytes");
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v37 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v46, v61, 16);
      if (v37)
      {
        v38 = v37;
        v39 = *(_QWORD *)v47;
        do
        {
          for (j = 0; j != v38; ++j)
          {
            if (*(_QWORD *)v47 != v39)
              objc_enumerationMutation(v34);
            objc_msgSend(*(id *)(*((_QWORD *)&v46 + 1) + 8 * j), "floatValue");
            *v36++ = v41;
          }
          v38 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v46, v61, 16);
        }
        while (v38);
      }
      objc_msgSend(v6, "setObject:forKeyedSubscript:", v35, CFSTR("InverseLensDistortionCoefficients"));
    }
    if (a3)
      objc_msgSend(a1, "referenceLensDistortionOpticalCenter");
    else
      objc_msgSend(a1, "auxiliaryLensDistortionOpticalCenter");
    v44 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v42);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v44, CFSTR("LensDistortionCenter"));

  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return v6;
}

size_t FigDraw420Color(__CVBuffer *a1, int a2, int a3, char a4, char a5, char a6)
{
  OSType PixelFormatType;
  size_t result;
  size_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v22 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  result = CVPixelBufferGetPlaneCount(a1);
  v13 = result;
  if (result)
  {
    v14 = 0;
    do
    {
      *(&v24 + v14) = (uint64_t)CVPixelBufferGetBaseAddressOfPlane(a1, v14);
      result = CVPixelBufferGetBytesPerRowOfPlane(a1, v14);
      *((_DWORD *)&v22 + v14++) = result;
    }
    while (v13 != v14);
  }
  if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
  {
    if (v13 != 2)
      return result;
    v19 = HIDWORD(v22);
    v17 = v25;
    *(_BYTE *)(v24 + a2 + (int)v22 * (uint64_t)a3) = a4;
    v20 = v19 * (uint64_t)(a3 >> 1);
    *(_BYTE *)(v17 + (a2 & 0xFFFFFFFFFFFFFFFELL) + v20) = a5;
    v18 = v20 + (a2 | 1);
    goto LABEL_11;
  }
  if (PixelFormatType == 2033463856 && v13 == 3)
  {
    v15 = HIDWORD(v22);
    v16 = v25;
    *(_BYTE *)(v24 + a2 + (int)v22 * (uint64_t)a3) = a4;
    *(_BYTE *)(v16 + v15 * (a3 >> 1) + (a2 >> 1)) = a5;
    v17 = v26;
    v18 = v23 * (a3 >> 1) + (a2 >> 1);
LABEL_11:
    *(_BYTE *)(v17 + v18) = a6;
  }
  return result;
}

uint64_t FigDraw420Rectangle(__CVBuffer *a1, int a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  int WidthOfPlane;
  int HeightOfPlane;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v27;
  int v28;
  int v29;

  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  if (!a1 || (a3 | a2) < 0 || WidthOfPlane <= a2 || a5 < 1 || a4 < 1 || HeightOfPlane <= a3)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    v18 = a4 + a2;
    if (WidthOfPlane >= v18)
      v19 = v18;
    else
      v19 = WidthOfPlane;
    v29 = WidthOfPlane;
    if (v19 > a2)
    {
      v28 = HeightOfPlane;
      v27 = v18;
      v21 = a2;
      do
        FigDraw420Color(a1, v21++, a3, a6, a7, a8);
      while (v19 != v21);
      v20 = a5 + a3;
      HeightOfPlane = v28;
      if (a5 + a3 > v28 || v19 <= a2)
      {
        v18 = v27;
      }
      else
      {
        v22 = a2;
        do
          FigDraw420Color(a1, v22++, v20 - 1, a6, a7, a8);
        while (v19 != v22);
        v18 = v27;
        HeightOfPlane = v28;
      }
    }
    else
    {
      v20 = a5 + a3;
    }
    v23 = a3 + 1;
    if (HeightOfPlane >= v20)
      v24 = v20;
    else
      v24 = HeightOfPlane;
    if (v23 < v24)
    {
      v25 = v23;
      do
        FigDraw420Color(a1, a2, v25++, a6, a7, a8);
      while (v24 != v25);
      if (v18 <= v29 && v23 < v24)
      {
        do
          FigDraw420Color(a1, v18 - 1, v23++, a6, a7, a8);
        while (v24 != v23);
      }
    }
    return 0;
  }
}

BOOL FigContinuityCaptureGetUserPreferenceDisabled()
{
  return FigGetCFPreferenceBooleanWithDefault() != 0;
}

uint64_t FigContinuityCaptureSetUserPreferenceDisabled(int a1)
{
  CFPropertyListRef *v2;
  const __CFString *v3;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!a1)
    v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
  CFPreferencesSetValue(CFSTR("ContinuityCaptureDisabled"), *v2, CFSTR("com.apple.cameracapture"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if ((a1 & 1) != 0)
    v4 = 0;
  else
    v4 = (const void *)objc_msgSend(MEMORY[0x1E0C99D68], "now");
  if (dword_1EE6BE9F8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFPreferencesSetValue(CFSTR("ContinuityCaptureLastUsedDate"), v4, CFSTR("com.apple.cameracapture.volatile"), v3, (CFStringRef)*MEMORY[0x1E0C9B250]);
  v6 = getpid();
  return FigCaptureLogContinuityCameraPowerEvent(v6, a1 ^ 1u);
}

id BWUBCreateNRProcessorControllerConfiguration(void *a1, uint64_t *a2)
{
  unsigned int v4;
  id v5;
  __objc2_class **v6;
  uint64_t v7;
  double v8;

  if (!a2)
  {
    FigDebugAssert3();
    return 0;
  }
  v4 = -[BWUBNodeConfiguration stillImageFusionScheme]((uint64_t)a1);
  v5 = 0;
  if (v4 >= 3)
  {
    if (v4 - 4 >= 2)
    {
      if (v4 != 3)
      {
LABEL_8:
        objc_msgSend(v5, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
        objc_msgSend(v5, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
        objc_msgSend(v5, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
        objc_msgSend(v5, "setAlwaysAllowModifyingInputBuffers:", -[BWUBNodeConfiguration alwaysAllowModifyingInputBuffers]((_BOOL8)a1));
        objc_msgSend(v5, "setFusionEnabled:", -[BWUBNodeConfiguration fusionSupportEnabled]((_BOOL8)a1));
        objc_msgSend(v5, "setLowLightFusionEnabled:", -[BWUBNodeConfiguration digitalFlashSupportEnabled]((_BOOL8)a1));
        objc_msgSend(v5, "setDeepFusionEnabled:", -[BWUBNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1));
        objc_msgSend(v5, "setDeepFusionWaitForProcessingToFinish:", -[BWUBNodeConfiguration deepFusionWaitForPreprocessingToFinish]((_BOOL8)a1));
        objc_msgSend(v5, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
        objc_msgSend(v5, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
        *(float *)&v8 = -[BWUBNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1);
        objc_msgSend(v5, "setGainMapMainImageDownscalingFactor:", v8);
        objc_msgSend(v5, "setDepthDataDeliveryEnabled:", -[BWUBNodeConfiguration depthDataDeliveryEnabled]((_BOOL8)a1));
        objc_msgSend(v5, "setGreenGhostMitigationVersion:", -[BWUBNodeConfiguration greenGhostMitigationVersion]((uint64_t)a1));
        objc_msgSend(v5, "setDemosaicedRawPixelFormat:", -[BWUBNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1));
        objc_msgSend(v5, "setDemosaicedRawEnabled:", -[BWUBNodeConfiguration demosaicedRawEnabled]((_BOOL8)a1));
        objc_msgSend(v5, "setRawColorCalibrationsByPortType:", -[BWUBNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
        objc_msgSend(v5, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWUBNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
        return v5;
      }
      v6 = off_1E4915158;
      v7 = 1;
    }
    else
    {
      v6 = off_1E4914D80;
      v7 = 6;
    }
    *a2 = v7;
    v5 = objc_alloc_init(*v6);
    goto LABEL_8;
  }
  return v5;
}

BWDeferredCaptureControllerConfiguration *BWUBCreateDeferredContainerControllerConfiguration(void *a1)
{
  BWDeferredCaptureControllerConfiguration *v2;

  if (!objc_msgSend(a1, "deferredCaptureSupportEnabled"))
    return 0;
  v2 = objc_alloc_init(BWDeferredCaptureControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  return v2;
}

BWDeferredProcessorControllerConfiguration *BWUBCreateDeferredProcessorControllerConfiguration(void *a1)
{
  BWDeferredProcessorControllerConfiguration *v2;

  if (!objc_msgSend(a1, "deferredPhotoProcessorEnabled"))
    return 0;
  v2 = objc_alloc_init(BWDeferredProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v2, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
  -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v2, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v2, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  return v2;
}

BWDeepFusionProcessorControllerConfiguration *BWUBCreateDeepFusionProcessorControllerConfiguration(void *a1)
{
  BWDeepFusionProcessorControllerConfiguration *v2;

  if (!-[BWUBNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1)
    || (objc_msgSend(a1, "deferredCaptureSupportEnabled") & 1) != 0)
  {
    return 0;
  }
  v2 = objc_alloc_init(BWDeepFusionProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  -[BWStillImageProcessorControllerConfiguration setDeferredCaptureSupportEnabled:](v2, "setDeferredCaptureSupportEnabled:", objc_msgSend(a1, "deferredCaptureSupportEnabled"));
  -[BWStillImageProcessorControllerConfiguration setDeferredPhotoProcessorEnabled:](v2, "setDeferredPhotoProcessorEnabled:", objc_msgSend(a1, "deferredPhotoProcessorEnabled"));
  -[BWDeepFusionProcessorControllerConfiguration setStillImageFusionScheme:](v2, "setStillImageFusionScheme:", -[BWUBNodeConfiguration stillImageFusionScheme]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawColorCalibrationsByPortType:](v2, "setRawColorCalibrationsByPortType:", -[BWUBNodeConfiguration rawColorCalibrationsByPortType]((uint64_t)a1));
  -[BWDeepFusionProcessorControllerConfiguration setRawLensShadingCorrectionCoefficientsByPortType:](v2, "setRawLensShadingCorrectionCoefficientsByPortType:", -[BWUBNodeConfiguration rawLensShadingCorrectionCoefficientsByPortType]((uint64_t)a1));
  return v2;
}

BWLearnedNRProcessorControllerConfiguration *BWUBCreateLearnedNRProcessorControllerConfiguration(void *a1)
{
  BWLearnedNRProcessorControllerConfiguration *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((-[BWUBNodeConfiguration learnedNRMode]((uint64_t)a1) & 5) == 0)
    return 0;
  v2 = objc_alloc_init(BWLearnedNRProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v2, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = (void *)-[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E4A02E60, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++), (_QWORD)v10);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  -[BWLearnedNRProcessorControllerConfiguration setFinalCropRectOverscanMultiplierByPortType:](v2, "setFinalCropRectOverscanMultiplierByPortType:", v3, (_QWORD)v10);
  return v2;
}

uint64_t BWUBCreateInferenceControllerConfiguration(void *a1)
{
  BOOL v2;
  uint64_t v3;
  BWInferenceEngineControllerConfiguration *v4;
  void *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v20;
  BWInferenceEngineControllerConfiguration *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(a1, "deferredPhotoProcessorEnabled") & 1) != 0)
    return 0;
  v2 = (-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1)
     || -[BWUBNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
    && (-[BWUBNodeConfiguration fusionSupportEnabled]((_BOOL8)a1)
     || -[BWUBNodeConfiguration learnedNRMode]((uint64_t)a1) != 0);
  v3 = objc_msgSend((id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "count");
  if (-[BWUBNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1)
    || v2
    || -[BWUBNodeConfiguration semanticStyleRenderingEnabled]((_BOOL8)a1)
    || v3)
  {
    v4 = objc_alloc_init(BWInferenceEngineControllerConfiguration);
    -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v4, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
    -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v4, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
    -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v4, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
    -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v4, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
    -[BWInferenceEngineControllerConfiguration setFastMattingEnabled:](v4, "setFastMattingEnabled:", (int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1);
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) < 1)
    {
      v6 = 0;
    }
    else
    {
      objc_msgSend(v5, "addObject:", CFSTR("PersonSemanticsSkin"));
      objc_msgSend(v5, "addObject:", 0x1E49511B8);
      v6 = 2;
    }
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) > 1)
      objc_msgSend(v5, "addObject:", 0x1E495B0B8);
    if ((int)-[BWUBNodeConfiguration semanticRenderingVersion]((uint64_t)a1) >= 3)
    {
      objc_msgSend(v5, "addObjectsFromArray:", BWInferenceLowResPersonInstanceMaskKeys());
      v6 |= 0x10uLL;
    }
    if (-[BWUBNodeConfiguration semanticDevelopmentVersion]((uint64_t)a1))
      v6 |= 8uLL;
    if (-[BWUBNodeConfiguration semanticStyleRenderingEnabled]((_BOOL8)a1))
    {
      objc_msgSend(v5, "addObject:", CFSTR("PersonSemanticsSkin"));
      objc_msgSend(v5, "addObject:", 0x1E495B0B8);
      objc_msgSend(v5, "addObject:", 0x1E49511B8);
      -[BWInferenceEngineControllerConfiguration setSmartCameraClassificationsEnabled:](v4, "setSmartCameraClassificationsEnabled:", 1);
    }
    v21 = v4;
    v7 = -[BWUBNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1);
    v8 = v6 | 6;
    v26 = 0u;
    v27 = 0u;
    if (!v7)
      v8 = v6;
    v20 = v8;
    v28 = 0uLL;
    v29 = 0uLL;
    v9 = (void *)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v27 != v12)
            objc_enumerationMutation(v9);
          v14 = (void *)objc_msgSend((id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * i));
          v22 = 0u;
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
          if (v15)
          {
            v16 = v15;
            v17 = *(_QWORD *)v23;
            do
            {
              for (j = 0; j != v16; ++j)
              {
                if (*(_QWORD *)v23 != v17)
                  objc_enumerationMutation(v14);
                objc_msgSend(v5, "addObject:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * j), v20);
              }
              v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
            }
            while (v16);
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v11);
    }
    v3 = (uint64_t)v21;
    -[BWInferenceEngineControllerConfiguration setMattingOutputValidContentDetectionEnabled:](v21, "setMattingOutputValidContentDetectionEnabled:", objc_msgSend((id)-[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "objectForKeyedSubscript:", &unk_1E49F9750) != 0);
    -[BWInferenceEngineControllerConfiguration setEnabledInferenceMasks:](v21, "setEnabledInferenceMasks:", objc_msgSend(v5, "allObjects"));
    -[BWInferenceEngineControllerConfiguration setEnabledVisionInferences:](v21, "setEnabledVisionInferences:", v20);
    -[BWInferenceEngineControllerConfiguration setPersonSemanticsVersion:](v21, "setPersonSemanticsVersion:", -[BWUBNodeConfiguration personSemanticsVersion]((uint64_t)a1));
  }
  return v3;
}

BWStillImageProcessorControllerConfiguration *BWUBCreateRedEyeProcessorControllerConfiguration(void *a1)
{
  BWStillImageProcessorControllerConfiguration *v2;

  if (!-[BWUBNodeConfiguration redEyeReductionEnabled]((_BOOL8)a1))
    return 0;
  v2 = objc_alloc_init(BWStillImageProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  return v2;
}

BWIntelligentDistortionCorrectionProcessorControllerConfiguration *BWUBCreateIntelligentDistortionCorrectionProcessorControllerConfiguration(void *a1)
{
  BWIntelligentDistortionCorrectionProcessorControllerConfiguration *v2;

  if (!objc_msgSend((id)-[BWUBNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1), "count")&& !objc_msgSend((id)-[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1), "count"))
  {
    return 0;
  }
  v2 = objc_alloc_init(BWIntelligentDistortionCorrectionProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithGeometricDistortionCorrectionEnabled:](v2, "setPortTypesWithGeometricDistortionCorrectionEnabled:", -[BWUBNodeConfiguration portTypesWithGeometricDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setPortTypesWithIntelligentDistortionCorrectionEnabled:](v2, "setPortTypesWithIntelligentDistortionCorrectionEnabled:", -[BWUBNodeConfiguration portTypesWithIntelligentDistortionCorrectionEnabled]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setGeometricDistortionCorrectionExpandedImageDimensions:](v2, "setGeometricDistortionCorrectionExpandedImageDimensions:", -[BWUBNodeConfiguration geometricDistortionCorrectionExpandedImageDimensions]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionVersion:](v2, "setIntelligentDistortionCorrectionVersion:", -[BWUBNodeConfiguration intelligentDistortionCorrectionVersion]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setIntelligentDistortionCorrectionAppliesFinalDimensions:](v2, "setIntelligentDistortionCorrectionAppliesFinalDimensions:", -[BWUBNodeConfiguration intelligentDistortionCorrectionAppliesFinalDimensions]((_BOOL8)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setHorizontalSensorBinningFactor:](v2, "setHorizontalSensorBinningFactor:", -[BWUBNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setVerticalSensorBinningFactor:](v2, "setVerticalSensorBinningFactor:", -[BWUBNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWIntelligentDistortionCorrectionProcessorControllerConfiguration setProvidedInferenceAttachedMediaByMode:](v2, "setProvidedInferenceAttachedMediaByMode:", -[BWUBNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1));
  return v2;
}

BWDeepZoomProcessorControllerConfiguration *BWUBCreateDeepZoomProcessorControllerConfiguration(void *a1)
{
  uint64_t v2;
  BWDeepZoomProcessorControllerConfiguration *v3;

  if ((int)-[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1) < 1)
    return 0;
  if ((objc_msgSend(a1, "deferredPhotoProcessorEnabled") & 1) == 0)
  {
    if ((int)-[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1) >= 2
      && (objc_msgSend(a1, "deferredCaptureSupportEnabled") & 1) == 0)
    {
      v2 = 2;
      goto LABEL_7;
    }
    return 0;
  }
  v2 = 1;
LABEL_7:
  v3 = objc_alloc_init(BWDeepZoomProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v3, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v3, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v3, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v3, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  -[BWDeepZoomProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWUBNodeConfiguration deepZoomVersion]((uint64_t)a1));
  -[BWDeepZoomProcessorControllerConfiguration setType:](v3, "setType:", v2);
  return v3;
}

BWStereoDisparityProcessorControllerConfiguration *BWUBCreateStereoDisparityProcessorControllerConfiguration(void *a1)
{
  uint64_t v2;
  BWStereoDisparityProcessorControllerConfiguration *v3;

  v2 = -[BWUBNodeConfiguration disparityOutputDimensions]((uint64_t)a1);
  if (!FigCaptureVideoDimensionsAreValid(v2) || -[BWUBNodeConfiguration generateLiDARDepth]((_BOOL8)a1))
    return 0;
  v3 = objc_alloc_init(BWStereoDisparityProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v3, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v3, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setInferenceScheduler:](v3, "setInferenceScheduler:", objc_msgSend(a1, "inferenceScheduler"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v3, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  -[BWStereoDisparityProcessorControllerConfiguration setPortTypesWithDepthSegmentationPortraitParameters:](v3, "setPortTypesWithDepthSegmentationPortraitParameters:", -[BWUBNodeConfiguration portTypesWithDepthSegmentationPortraitParameters]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setDisparityOutputDimensions:](v3, "setDisparityOutputDimensions:", -[BWUBNodeConfiguration disparityOutputDimensions]((uint64_t)a1));
  -[BWStereoDisparityProcessorControllerConfiguration setStillImageDepthDataType:](v3, "setStillImageDepthDataType:", objc_msgSend(a1, "depthDataType"));
  -[BWStereoDisparityProcessorControllerConfiguration setShouldComputeDisparityWhenCalibrationFails:](v3, "setShouldComputeDisparityWhenCalibrationFails:", -[BWUBNodeConfiguration shouldComputeDisparityWhenCalibrationFails]((_BOOL8)a1));
  return v3;
}

BWJasperColorStillsExecutorControllerConfiguration *BWUBCreateJasperColorStillsExecutorControllerConfiguration(void *a1)
{
  void *v2;
  uint64_t v3;
  BWJasperColorStillsExecutorControllerConfiguration *v4;

  if (!-[BWUBNodeConfiguration depthDataDeliveryEnabled]((_BOOL8)a1)
    || !-[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1)
    || !-[BWUBNodeConfiguration digitalFlashSupportEnabled]((_BOOL8)a1))
  {
    return 0;
  }
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  v3 = -[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, objc_msgSend((id)-[BWUBNodeConfiguration jasperSensorConfiguration]((uint64_t)a1), "portType"));
  v4 = objc_alloc_init(BWJasperColorStillsExecutorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v4, "setSensorConfigurationsByPortType:", v2);
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v4, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v4, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  -[BWJasperColorStillsExecutorControllerConfiguration setHorizontalSensorBinningFactor:](v4, "setHorizontalSensorBinningFactor:", -[BWUBNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setVerticalSensorBinningFactor:](v4, "setVerticalSensorBinningFactor:", -[BWUBNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  return v4;
}

BWJasperDisparityProcessorControllerConfiguration *BWUBCreateJasperDisparityProcessorControllerConfiguration(void *a1)
{
  BWJasperDisparityProcessorControllerConfiguration *v2;

  if (!-[BWUBNodeConfiguration generateLiDARDepth]((_BOOL8)a1))
    return 0;
  v2 = objc_alloc_init(BWJasperDisparityProcessorControllerConfiguration);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v2, "setSensorConfigurationsByPortType:", -[BWUBNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  -[BWStillImageProcessorControllerConfiguration setMetalCommandQueue:](v2, "setMetalCommandQueue:", objc_msgSend(a1, "metalCommandQueue"));
  -[BWStillImageProcessorControllerConfiguration setFigThreadPriority:](v2, "setFigThreadPriority:", objc_msgSend(a1, "figThreadPriority"));
  return v2;
}

void sub_1A2F15F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F16524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BWStillImageCoordinatorUpdateBeginMomentAttachmentsForSampleBuffer(const void *a1, void *value)
{
  return BWStillImageCoordinatorAddAttachmentsToSampleBuffer(a1, value);
}

uint64_t BWStillImageCoordinatorAddAttachmentsToSampleBuffer(const void *a1, void *value)
{
  int v4;
  int v5;
  unsigned int v6;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 IsExtensionDeviceType;

  v4 = 1;
  CMSetAttachment(a1, CFSTR("StillSettings"), value, 1u);
  CMSetAttachment(a1, CFSTR("StillImageSettings"), (CFTypeRef)objc_msgSend(value, "requestedSettings"), 1u);
  v5 = objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0), "intValue");
  v6 = objc_msgSend((id)objc_msgSend(value, "captureSettings"), "captureFlags");
  CMSetAttachment(a1, CFSTR("StillImageProcessingFlags"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", (v6 >> 5) & 0x200 | v5), 1u);
  CMSetAttachment(a1, CFSTR("PhotoManifest"), (CFTypeRef)objc_msgSend((id)objc_msgSend(value, "processingSettings"), "photoManifest"), 1u);
  v7 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  v8 = objc_msgSend((id)objc_msgSend(value, "requestedSettings"), "outputOrientation");
  v9 = objc_msgSend((id)objc_msgSend(value, "requestedSettings"), "outputMirroring");
  v10 = *MEMORY[0x1E0D06D00];
  v11 = (void *)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  if ((objc_msgSend(v11, "isEqual:", *MEMORY[0x1E0D05A38]) & 1) == 0)
  {
    v12 = (void *)objc_msgSend(v7, "objectForKeyedSubscript:", v10);
    v4 = objc_msgSend(v12, "isEqual:", *MEMORY[0x1E0D05A50]);
  }
  IsExtensionDeviceType = BWDeviceTypeIsExtensionDeviceType(objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0D069B8]), "integerValue"));
  objc_msgSend(v7, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", FigCaptureMetadataUtilitiesExifOrientationFromOrientationAndCameraPosition(v8, v9, v4, IsExtensionDeviceType, 0)), *MEMORY[0x1E0D05E50]);
  return BWAddStillImageProcessingMetadataToMetadata(value, v7);
}

void sub_1A2F17C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F18CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F19494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1A2F20410(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F205EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F20724(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F2079C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F20840(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F20964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F209C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

float stdDeviation(void *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t i;
  void *v9;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, "count");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(a1);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        objc_msgSend(v9, "floatValue");
        v6 = v6 + v10 * v10;
        objc_msgSend(v9, "floatValue");
        v7 = v7 + v11;
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }
  else
  {
    v6 = 0.0;
    v7 = 0.0;
  }
  return sqrt((v6 - (double)v2 * (v7 / (double)v2 * (v7 / (double)v2))) / (double)v2);
}

void sub_1A2F26754(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x310], 8);
  _Block_object_dispose(&STACK[0x330], 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose(&STACK[0x370], 8);
  _Block_object_dispose(&STACK[0x390], 8);
  _Block_object_dispose(&STACK[0x3C0], 8);
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x410], 8);
  _Block_object_dispose(&STACK[0x458], 8);
  _Unwind_Resume(a1);
}

void sub_1A2F26B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F271B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

uint64_t scfr_averageForegroundDisparityForRect(__CVBuffer *a1, _WORD *a2, int a3, int a4, CGFloat x, CGFloat y, CGFloat a7, CGFloat a8)
{
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  unint64_t v19;
  size_t BytesPerRow;
  char *BaseAddress;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  int v39;
  int v40;
  int v41;
  int v43;
  int v44;
  uint64_t result;
  CGAffineTransform v50;
  CGAffineTransform v51[20];
  uint64_t v52;
  CGRect v53;
  CGRect v54;

  v52 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v19 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (a4 || a3)
  {
    memset(v51, 0, 48);
    FigCaptureMakeMirrorAndRotateVideoTransform(1, 1, a3, a4, (uint64_t)v51);
    v50 = v51[0];
    v53.origin.x = x;
    v53.origin.y = y;
    v53.size.width = a7;
    v53.size.height = a8;
    v54 = CGRectApplyAffineTransform(v53, &v50);
    x = v54.origin.x;
    y = v54.origin.y;
    a7 = v54.size.width;
    a8 = v54.size.height;
  }
  v22 = (int)(x * (double)Width);
  if ((int)Width - 1 < v22)
    v22 = Width - 1;
  v23 = v22 & ~(v22 >> 31);
  v24 = Height - 1;
  if ((int)Height - 1 >= (int)(y * (double)Height))
    v24 = (int)(y * (double)Height);
  v25 = v24 & ~(v24 >> 31);
  if ((int)(Width - v23) >= (int)(a7 * (double)Width))
    v26 = (int)(a7 * (double)Width);
  else
    v26 = Width - v23;
  if ((int)Height - (int)v25 >= (int)(a8 * (double)Height))
    v27 = (int)(a8 * (double)Height);
  else
    v27 = Height - v25;
  bzero(v51, 0x3E8uLL);
  if (v27 < 1)
    return 0;
  v28 = 0;
  v29 = 0;
  v30 = &BaseAddress[2 * BytesPerRow / v19 * v25 + 2 * v23];
  do
  {
    v31 = v26 & ~(v26 >> 31);
    if (v26 >= 1)
    {
      do
      {
        _H2 = *(_WORD *)v30;
        __asm { FCVT            S2, H2 }
        if (_S2 >= 0.0 && _S2 <= 5.0)
        {
          ++*((_DWORD *)&v51[0].a + (int)(float)(_S2 / 0.020004));
          ++v29;
        }
        v30 += 2;
        --v31;
      }
      while (v31);
    }
    v30 += 2 * (BytesPerRow / v19 - (v26 & ~(v26 >> 31)));
    ++v28;
  }
  while (v28 != (v27 & ~(v27 >> 31)));
  v39 = v29 >= 0 ? v29 : v29 + 1;
  if (v29 < 2)
    return 0;
  v40 = 0;
  v41 = v39 >> 1;
  _H1 = 0;
  v43 = 249;
  do
  {
    v44 = *((_DWORD *)&v51[0].a + v43);
    if (v44 >= (v41 - v40))
      v44 = v41 - v40;
    __asm { FCVT            S1, H1 }
    _S1 = _S1 + (float)((float)v44 * (float)((float)v43 * 0.020004));
    __asm { FCVT            H1, S1 }
    v40 += v44;
    _CF = v43-- != 0;
  }
  while (_CF && v40 < v41);
  result = 0;
  if (a2)
  {
    if (v40)
    {
      __asm { FCVT            S0, H1 }
      _S0 = _S0 / (float)v40;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
      return 1;
    }
  }
  return result;
}

uint64_t powerBlurNoiseReductionGPUReleaseBuffers(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  WaitForInitializationToFinish(a1);
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *(_QWORD *)(v1 + 16));
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 64));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 76));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, *(_DWORD *)(v1 + 80));
  glTexImage2D(0xDE1u, 0, 6408, 0, 0, 0, 0x1908u, 0x1401u, 0);
  glBindTexture(0xDE1u, 0);
  *(_QWORD *)(v1 + 44) = -1;
  v1 += 36;
  glDeleteTextures(1, (const GLuint *)v1);
  glGenTextures(1, (GLuint *)v1);
  glFinish();
  return objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
}

void WaitForInitializationToFinish(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (*(_DWORD *)a1 != 1)
  {
    v1 = *(NSObject **)(a1 + 8);
    if (v1)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __WaitForInitializationToFinish_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

void powerBlurNoiseReductionGPUContextInit(int a1, _QWORD *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  intptr_t v5;
  int v6;
  NSObject *v7;
  NSObject *global_queue;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)a2 = 0;
  a2[1] = 0;
  v3 = -2;
  if (a1 == 3)
  {
    v4 = 1;
  }
  else
  {
    v3 = 0;
    v4 = a1 == 2;
  }
  if (a1 == 1)
    v5 = 2;
  else
    v5 = v3;
  v6 = a1 == 1 || v4;
  v7 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  global_queue = dispatch_get_global_queue(v5, 0);
  v9 = dispatch_queue_create_with_target_V2("noise-reduction-context-init", v7, global_queue);
  a2[1] = v9;
  if (v6 && v9)
    dispatch_async_f(v9, a2, (dispatch_function_t)powerBlurNoiseReductionGPUContextInit_internal);
  else
    powerBlurNoiseReductionGPUContextInit_internal((uint64_t)a2, v10, v11, v12);
}

uint64_t powerBlurNoiseReductionGPUContextInit_internal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  GLint v11;
  GLint v12;
  char v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  int v18;
  GLuint ProgramFromSources;
  _DWORD *v20;
  GLuint v21;
  uint64_t v22;
  char *v23;
  float *v24;
  __int16 v25;
  uint64_t i;
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t j;
  uint64_t result;
  GLvoid *pixels;
  uint64_t v33;
  GLuint textures[2];
  char __str[16];
  uint64_t v36;
  _BYTE v37[8];
  int v38;
  GLchar __s[4096];
  unint64_t v40;
  GLint params;
  int v42;
  uint64_t v43;

  v5 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v43 = *MEMORY[0x1E0C80C00];
  v40 = 0xFF00FF0000FF00FFLL;
  v6 = *(_DWORD *)(v5 + 52);
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  *(_DWORD *)__s = 1;
  if (!v7
    || (v8 = v7,
        objc_msgSend(v7, "setObject:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD0D20]),
        v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", 2, v8),
        v8,
        !v9))
  {
    fig_log_get_emitter();
    v33 = v4;
    LODWORD(pixels) = 0;
    FigDebugAssert3();
    goto LABEL_5;
  }
  if (objc_msgSend(v9, "setParameter:to:", 608, __s))
  {

LABEL_5:
    *(_QWORD *)(v5 + 16) = 0;
    goto LABEL_48;
  }
  *(_QWORD *)(v5 + 16) = v9;
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", v9);
  if (!*(_DWORD *)(v5 + 60))
  {
    v10 = *(_DWORD *)(v5 + 24);
    if (v10 != 1)
    {
      if (v10)
        v10 = 1;
      else
        v10 = 2;
    }
    *(_DWORD *)__s = v10;
    objc_msgSend(*(id *)(v5 + 16), "setParameter:to:", 608, __s);
  }
  glGetIntegerv(0xD33u, &params);
  v11 = params;
  *(_DWORD *)(v5 + 28) = params;
  *(_DWORD *)(v5 + 32) = v11;
  glGetIntegerv(0x84E8u, &params);
  v12 = params;
  if (*(_DWORD *)(v5 + 28) < params)
    *(_DWORD *)(v5 + 28) = params;
  if (*(_DWORD *)(v5 + 32) < v12)
    *(_DWORD *)(v5 + 32) = v12;
  glGetIntegerv(0xD3Au, &params);
  if (*(_DWORD *)(v5 + 28) < params)
    *(_DWORD *)(v5 + 28) = params;
  if (*(_DWORD *)(v5 + 32) < v42)
    *(_DWORD *)(v5 + 32) = v42;
  v13 = 1;
  glGenFramebuffers(1, (GLuint *)(v5 + 40));
  glGenTextures(1, (GLuint *)(v5 + 36));
  glGenTextures(1, (GLuint *)(v5 + 64));
  glGenTextures(1, (GLuint *)(v5 + 76));
  glGenTextures(1, (GLuint *)(v5 + 80));
  glGenTextures(1, (GLuint *)(v5 + 68));
  glGenTextures(1, (GLuint *)(v5 + 72));
  v14 = 0;
  *(_QWORD *)(v5 + 44) = -1;
  while (1)
  {
    v15 = v13;
    v16 = (v13 & 1) == 0;
    v17 = (v13 & 1) != 0 ? 5 : 8;
    v18 = v16 ? 8 : 5;
    snprintf(__str, 0x200uLL, "attribute vec2 position;\n"
      "attribute vec2 texcoord;\n"
      "uniform vec2 texStep;\n"
      "varying vec2 tex_coord[%d];\n"
      "void main()\n"
      "{\n"
      "  int i;\n"
      "  float scale=1.0;\n"
      "  gl_Position = vec4(position.x, position.y, 0, 1);\n"
      "  tex_coord[0] = texcoord;\n"
      "  for (i=1 ; i<%d ; i++) {\n"
      "    tex_coord[i] = texcoord + vec2(scale) * texStep;\n"
      "    scale = -scale;\n"
      "    if (scale > 0.0) {\n"
      "      scale += 1.0;\n"
      "    }\n"
      "  }\n"
      "}\n",
      v18,
      v18);
    if (strlen(__str) > 0x1FE)
      break;
    if ((v17 & 1) != 0 || !*(_DWORD *)(v5 + 56))
      snprintf(__s, 0x800uLL, "#define TC_COUNT %d\nprecision mediump float;\n"
        "uniform sampler2D sampler;\n"
        "uniform mediump sampler2D samplerRecip;\n"
        "uniform vec2 threshold;\n"
        "varying highp vec2 tex_coord[TC_COUNT];\n"
        "#define weightUV()  uvDelta = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(lessThanEqual(uvDi"
        "st, threshold));  accum += uvN * vec4(uvMask.xxyy);  count += uvMask;\n"
        "#define weightUVWithScale(SCALE)  uvDelta = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(less"
        "ThanEqual(uvDist, threshold));  accum += SCALE * uvN * vec4(uvMask.xxyy);  count += SCALE * uvMask;\n"
        "\n"
        "void main()\n"
        "{\n"
        "  int i;\n"
        "  vec2 recip, uvDist;\n"
        "  vec4 uvDelta, uvN, uv0 = texture2D(sampler, tex_coord[0]);\n"
        "  vec2 uvMask, count = vec2(0.0);\n"
        "  vec4 accum = uv0;\n"
        "  uvN = uv0.zwxy;\n"
        "  weightUV();\n"
        "  for (i=1 ; i<TC_COUNT-%d ; i++) {\n"
        "    uvN = texture2D(sampler, tex_coord[i]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  if (%s) {\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-2]);\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-1]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  recip = texture2D(samplerRecip, count/%d.0).rg;\n"
        "  gl_FragColor = accum * recip.xxyy + vec4(0.4/256.0, 0.0, 0.4/256.0, 0.0);\n"
        "}\n",
        v17,
        0,
        "false",
        32);
    else
      snprintf(__s, 0x800uLL, "#define TC_COUNT %d\nprecision mediump float;\n"
        "uniform sampler2D sampler;\n"
        "uniform mediump sampler2D samplerRecip;\n"
        "uniform vec2 threshold;\n"
        "varying highp vec2 tex_coord[TC_COUNT];\n"
        "#define weightUV()  uvDelta = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(lessThanEqual(uvDi"
        "st, threshold));  accum += uvN * vec4(uvMask.xxyy);  count += uvMask;\n"
        "#define weightUVWithScale(SCALE)  uvDelta = abs(uv0-uvN);  uvDist = uvDelta.xz + uvDelta.yw;  uvMask = vec2(less"
        "ThanEqual(uvDist, threshold));  accum += SCALE * uvN * vec4(uvMask.xxyy);  count += SCALE * uvMask;\n"
        "\n"
        "void main()\n"
        "{\n"
        "  int i;\n"
        "  vec2 recip, uvDist;\n"
        "  vec4 uvDelta, uvN, uv0 = texture2D(sampler, tex_coord[0]);\n"
        "  vec2 uvMask, count = vec2(0.0);\n"
        "  vec4 accum = uv0;\n"
        "  uvN = uv0.zwxy;\n"
        "  weightUV();\n"
        "  for (i=1 ; i<TC_COUNT-%d ; i++) {\n"
        "    uvN = texture2D(sampler, tex_coord[i]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  if (%s) {\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-2]);\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUVWithScale(2.0);\n"
        "    uvN = texture2D(sampler, tex_coord[TC_COUNT-1]);\n"
        "    weightUV();\n"
        "    uvN = uvN.zwxy;\n"
        "    weightUV();\n"
        "  }\n"
        "  recip = texture2D(samplerRecip, count/%d.0).rg;\n"
        "  gl_FragColor = accum * recip.xxyy + vec4(0.4/256.0, 0.0, 0.4/256.0, 0.0);\n"
        "}\n",
        v17,
        2,
        "true",
        32);
    if (strlen(__s) >= 0x7FF)
      break;
    ProgramFromSources = gl_UtilsCreateProgramFromSources(__str, __s);
    v20 = (_DWORD *)(v5 + 28 * v14);
    v20[21] = ProgramFromSources;
    v20[22] = glGetAttribLocation(ProgramFromSources, "position");
    v20[23] = glGetAttribLocation(v20[21], "texcoord");
    v20[25] = glGetUniformLocation(v20[21], "sampler");
    v20[26] = glGetUniformLocation(v20[21], "samplerRecip");
    v20[24] = glGetUniformLocation(v20[21], "texStep");
    v20[27] = glGetUniformLocation(v20[21], "threshold");
    glUseProgram(v20[21]);
    glUniform1i(v20[25], 0);
    glUniform1i(v20[26], 2);
    v13 = 0;
    *(_DWORD *)&v37[4 * v14] = v20[21];
    v14 = 1;
    if ((v15 & 1) == 0)
    {
      v21 = gl_UtilsCreateProgramFromSources("attribute vec2 position;\n"
              "attribute vec2 texcoord;\n"
              "uniform vec2 tex_step;\n"
              "uniform vec2 tex_dim;\n"
              "varying vec2 tex_coord[2];\n"
              "varying vec2 tex_coord_01;\n"
              "void main()\n"
              "{\n"
              "  gl_Position = vec4(position.x, position.y, 1, 1);\n"
              "  tex_coord[0] = texcoord.yx - tex_step * vec2(+0.5, +0.5);\n"
              "  tex_coord[1] = texcoord.yx + tex_step * vec2(+0.25, +0.25);\n"
              "  tex_coord_01 = texcoord * tex_dim;\n"
              "}\n",
              "precision mediump float;\n"
              "uniform sampler2D sampler_uv;\n"
              "uniform sampler2D sampler_01;\n"
              "varying highp vec2 tex_coord[2];\n"
              "varying highp vec2 tex_coord_01;\n"
              "void main()\n"
              "{\n"
              "    vec4 uv0, uv1, mask, d;\n"
              "    uv0 = texture2D(sampler_uv, tex_coord[0]);\n"
              "    uv1 = texture2D(sampler_uv, tex_coord[1]);\n"
              "    mask = texture2D(sampler_01, tex_coord_01);\n"
              "    d.xy = uv0.xy * mask.xx;\n"
              "    d.xy = uv0.zw * mask.yy + d.xy;\n"
              "    d.zw = uv1.xy * mask.zz;\n"
              "    d.zw = uv1.zw * mask.ww + d.zw;\n"
              "    gl_FragColor = d;\n"
              "}\n");
      *(_DWORD *)(v5 + 140) = v21;
      *(_DWORD *)(v5 + 144) = glGetAttribLocation(v21, "position");
      *(_DWORD *)(v5 + 148) = glGetAttribLocation(*(_DWORD *)(v5 + 140), "texcoord");
      *(_DWORD *)(v5 + 152) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "tex_step");
      *(_DWORD *)(v5 + 156) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "tex_dim");
      *(_DWORD *)(v5 + 160) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "sampler_uv");
      *(_DWORD *)(v5 + 164) = glGetUniformLocation(*(_DWORD *)(v5 + 140), "sampler_01");
      glUseProgram(*(_DWORD *)(v5 + 140));
      glUniform1i(*(_DWORD *)(v5 + 160), 0);
      glUniform1i(*(_DWORD *)(v5 + 164), 1);
      glActiveTexture(0x84C1u);
      glBindTexture(0xDE1u, *(_DWORD *)(v5 + 68));
      glTexImage2D(0xDE1u, 0, 6408, 1, 2, 0, 0x1908u, 0x1401u, &v40);
      glTexParameterf(0xDE1u, 0x2802u, 10497.0);
      glTexParameterf(0xDE1u, 0x2803u, 10497.0);
      glTexParameterf(0xDE1u, 0x2800u, 9728.0);
      glTexParameterf(0xDE1u, 0x2801u, 9728.0);
      v22 = 0;
      v23 = __s;
      do
      {
        if (v6)
          v24 = (float *)&neonExactRecipTable;
        else
          v24 = (float *)&neonApproxRecipTable;
        v25 = F32toF16(v24[v22]);
        for (i = 0; i != 128; i += 4)
        {
          if (v6)
            v27 = (char *)&neonExactRecipTable;
          else
            v27 = (char *)&neonApproxRecipTable;
          v28 = F32toF16(*(float *)&v27[i]);
          v29 = &v23[i];
          *(_WORD *)v29 = v28;
          *((_WORD *)v29 + 1) = v25;
        }
        ++v22;
        v23 += 128;
      }
      while (v22 != 32);
      glActiveTexture(0x84C2u);
      glBindTexture(0xDE1u, *(_DWORD *)(v5 + 72));
      glTexImage2D(0xDE1u, 0, 33319, 32, 32, 0, 0x8227u, 0x8D61u, __s);
      glTexParameterf(0xDE1u, 0x2802u, 33071.0);
      glTexParameterf(0xDE1u, 0x2803u, 33071.0);
      glTexParameterf(0xDE1u, 0x2800u, 9728.0);
      glTexParameterf(0xDE1u, 0x2801u, 9728.0);
      v38 = *(_DWORD *)(v5 + 140);
      *(_QWORD *)textures = 0;
      *(_OWORD *)__str = xmmword_1A32B118C;
      v36 = 0x3F80000000000000;
      glEnableVertexAttribArray(0);
      glVertexAttribPointer(0, 2, 0x1406u, 0, 0, __str);
      glGenTextures(1, &textures[1]);
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, textures[1]);
      glTexImage2D(0xDE1u, 0, 6408, 1, 1, 0, 0x1908u, 0x1401u, 0);
      glGenFramebuffers(1, textures);
      glBindFramebuffer(0x8D40u, textures[0]);
      glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, textures[1], 0);
      if (glCheckFramebufferStatus(0x8D40u) == 36053)
      {
        for (j = 0; j != 12; j += 4)
        {
          glUseProgram(*(_DWORD *)&v37[j]);
          glDrawArrays(4u, 0, 3);
          glFlush();
        }
      }
      glBindTexture(0xDE1u, 0);
      glBindFramebuffer(0x8D40u, 0);
      glDeleteFramebuffers(1, textures);
      glDeleteTextures(1, &textures[1]);
      glUseProgram(0);
      return objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
    }
  }
LABEL_48:
  result = objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0, pixels, v33);
  *(_DWORD *)v5 = 2;
  return result;
}

double powerBlurNoiseReductionGPUContextDestroy(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  double result;

  WaitForInitializationToFinish(a1);
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *(_QWORD *)(a1 + 16));
  glUseProgram(0);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, 0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, 0);
  glBindFramebuffer(0x8D40u, 0);
  glDeleteFramebuffers(1, (const GLuint *)(a1 + 40));
  glDeleteTextures(1, (const GLuint *)(a1 + 36));
  glDeleteTextures(1, (const GLuint *)(a1 + 64));
  glDeleteTextures(1, (const GLuint *)(a1 + 76));
  glDeleteTextures(1, (const GLuint *)(a1 + 80));
  glDeleteTextures(1, (const GLuint *)(a1 + 68));
  glDeleteTextures(1, (const GLuint *)(a1 + 72));
  glDeleteProgram(*(_DWORD *)(a1 + 84));
  glDeleteProgram(*(_DWORD *)(a1 + 112));
  glDeleteProgram(*(_DWORD *)(a1 + 140));
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
  v2 = *(void **)(a1 + 16);
  if (v2)

  v3 = *(NSObject **)(a1 + 8);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t powerBlurNoiseReductionGPU(uint64_t a1, __CVBuffer *a2, float64x2_t *a3, int a4, int a5, float a6)
{
  uint64_t v6;
  int v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  IOSurfaceRef IOSurface;
  IOSurfaceRef v19;
  int WidthOfPlane;
  size_t HeightOfPlane;
  size_t v22;
  void *v23;
  float v24;
  float v25;
  GLint v26;
  int v27;
  GLsizei v28;
  int v29;
  int v30;
  int v31;
  double v32;
  GLfloat v33;
  double v34;
  GLfloat v35;
  int v36;
  GLint v37;
  int v38;
  GLfloat v39;
  GLfloat v40;
  GLfloat v41;
  GLfloat v42;
  GLfloat v43;
  GLfloat v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t width;
  GLint v48;
  uint64_t v49;
  GLsizei v50;
  int v51;
  int v52;
  int v53;
  _OWORD ptr[4];
  int32x4_t v55;
  GLint v56;
  GLint v57;
  int v58;
  GLsizei v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v52 = 1;
  v53 = 2;
  ptr[0] = xmmword_1A32B104C;
  ptr[1] = unk_1A32B105C;
  ptr[2] = xmmword_1A32B106C;
  ptr[3] = unk_1A32B107C;
  if (!a1)
    return 0xFFFFFFFFLL;
  WaitForInitializationToFinish(a1);
  if (!*(_QWORD *)(a1 + 16))
    return 0xFFFFFFFFLL;
  v13 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    fig_log_get_emitter();
    v46 = v6;
    LODWORD(v45) = 0;
    FigDebugAssert3();
    v13 = *(_DWORD *)a1;
  }
  if (v13 == 2)
    return 4294967294;
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *(_QWORD *)(a1 + 16));
  if (a4)
    v15 = 84;
  else
    v15 = 112;
  if (a4)
    v16 = a1 + 84;
  else
    v16 = a1 + 112;
  if (a4)
    v17 = 5;
  else
    v17 = 8;
  IOSurface = CVPixelBufferGetIOSurface(a2);
  if (!IOSurface
    || (v19 = IOSurface,
        WidthOfPlane = CVPixelBufferGetWidthOfPlane(a2, 1uLL),
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 1uLL),
        WidthOfPlane < 1)
    || *(_DWORD *)(a1 + 28) < WidthOfPlane
    || (v22 = HeightOfPlane, (int)HeightOfPlane < 1)
    || *(_DWORD *)(a1 + 32) < (int)HeightOfPlane)
  {
    v23 = (void *)MEMORY[0x1E0CD0958];
LABEL_22:
    objc_msgSend(v23, "setCurrentContext:", 0, v45, v46, width);
    return 0xFFFFFFFFLL;
  }
  CreateTextureStorage((_DWORD *)a1, WidthOfPlane, HeightOfPlane);
  v24 = a6 / 255.0;
  if ((float)(a6 / 255.0) < 0.0)
    v24 = 0.0;
  if (v24 <= 1.0)
    v25 = v24;
  else
    v25 = 1.0;
  v55 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(*a3), (int32x4_t)vcvtq_s64_f64(a3[1]));
  ClampAndExpandScissor(v55.i32, WidthOfPlane, v22);
  v27 = v55.i32[0];
  v26 = v55.i32[1];
  v56 = v55.i32[0] - v17;
  v57 = v55.i32[1] - v17;
  v50 = v55.i32[3];
  v51 = v55.i32[2];
  v58 = v55.i32[2] + 2 * v17;
  v59 = v55.i32[3] + 2 * v17;
  ClampAndExpandScissor(&v56, WidthOfPlane, v22);
  HIDWORD(width) = v27;
  if (v27 > 0 || v26 > 0 || v51 < WidthOfPlane || v50 < (int)v22)
    glEnable(0xC11u);
  else
    glDisable(0xC11u);
  v49 = v15;
  if (*(_DWORD *)(a1 + 60) && !*(_DWORD *)(a1 + 24))
    objc_msgSend(*(id *)(a1 + 16), "setParameter:to:", 608, &v53);
  v48 = v56;
  v28 = v58;
  if (v58 >= 0)
    v29 = v58;
  else
    v29 = v58 + 1;
  v30 = v57;
  v31 = v59;
  glScissor(v56 / 2, v57, v29 >> 1, v59);
  glVertexAttribPointer(*(_DWORD *)(v16 + 4), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 4));
  glVertexAttribPointer(*(_DWORD *)(v16 + 8), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 8));
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 36));
  BYTE4(v46) = 0;
  LODWORD(v46) = 1;
  if ((objc_msgSend(*(id *)(a1 + 16), "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v19, 3553, 6408, WidthOfPlane >> 1, v22, 6408, 5121, v46) & 1) == 0)goto LABEL_62;
  glTexParameterf(0xDE1u, 0x2802u, 33071.0);
  glTexParameterf(0xDE1u, 0x2803u, 33071.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 40));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 64), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
    goto LABEL_62;
  LODWORD(width) = WidthOfPlane >> 1;
  glViewport(0, 0, WidthOfPlane >> 1, v22);
  glUseProgram(*(_DWORD *)(a1 + v49));
  glUniform2f(*(_DWORD *)(v16 + 24), v25, v25);
  v32 = (double)WidthOfPlane;
  v33 = 2.0 / (double)WidthOfPlane;
  v34 = (double)(int)v22;
  v35 = 0.0 / (double)(int)v22;
  glUniform2f(*(_DWORD *)(v16 + 12), v33, v35);
  glDrawArrays(5u, 0, 4);
  if (!*(_DWORD *)(a1 + 60))
    goto LABEL_45;
  if (!*(_DWORD *)(a1 + 24))
    objc_msgSend(*(id *)(a1 + 16), "setParameter:to:", 608, &v52);
  else
LABEL_45:
    glFlush();
  v36 = v30 >= 0 ? v30 : v30 + 1;
  v37 = v36 >> 1;
  v38 = v31 >= 0 ? v31 : v31 + 1;
  glScissor(v37, v48, v38 >> 1, v28);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 64));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 76), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
    goto LABEL_62;
  glVertexAttribPointer(*(_DWORD *)(a1 + 144), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 144));
  glVertexAttribPointer(*(_DWORD *)(a1 + 148), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 148));
  glViewport(0, 0, v22 >> 1, WidthOfPlane);
  glUseProgram(*(_DWORD *)(a1 + 140));
  v39 = 0.5 / v34;
  glUniform2f(*(_DWORD *)(a1 + 152), 0.0, v39);
  v40 = v32 * 0.5;
  glUniform2f(*(_DWORD *)(a1 + 156), 1.0, v40);
  glDrawArrays(5u, 0, 4);
  if (!*(_DWORD *)(a1 + 60))
    goto LABEL_56;
  if (!*(_DWORD *)(a1 + 24))
    objc_msgSend(*(id *)(a1 + 16), "setParameter:to:", 608, &v53);
  else
LABEL_56:
    glFlush();
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 76));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 80), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
  {
LABEL_62:
    v23 = (void *)MEMORY[0x1E0CD0958];
    goto LABEL_22;
  }
  glVertexAttribPointer(*(_DWORD *)(v16 + 4), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 4));
  glVertexAttribPointer(*(_DWORD *)(v16 + 8), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(v16 + 8));
  glViewport(0, 0, v22 >> 1, WidthOfPlane);
  glUseProgram(*(_DWORD *)(a1 + v49));
  v41 = 2.0 / v34;
  v42 = 0.0 / v32;
  glUniform2f(*(_DWORD *)(v16 + 12), v41, v42);
  glDrawArrays(5u, 0, 4);
  if (*(_DWORD *)(a1 + 60) && !*(_DWORD *)(a1 + 24))
    objc_msgSend(*(id *)(a1 + 16), "setParameter:to:", 608, &v52);
  else
    glFlush();
  glScissor(SHIDWORD(width) / 2, v26, v51 / 2, v50);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 80));
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(a1 + 36), 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
  {
    v23 = (void *)MEMORY[0x1E0CD0958];
    goto LABEL_22;
  }
  glVertexAttribPointer(*(_DWORD *)(a1 + 144), 2, 0x1406u, 0, 16, ptr);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 144));
  glVertexAttribPointer(*(_DWORD *)(a1 + 148), 2, 0x1406u, 0, 16, (char *)ptr + 8);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 148));
  glViewport(0, 0, width, v22);
  glUseProgram(*(_DWORD *)(a1 + 140));
  v43 = 0.5 / v32;
  glUniform2f(*(_DWORD *)(a1 + 152), 0.0, v43);
  v44 = v34 * 0.5;
  glUniform2f(*(_DWORD *)(a1 + 156), 1.0, v44);
  glDrawArrays(5u, 0, 4);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, 0, 0);
  glBindFramebuffer(0x8D40u, 0);
  glBindTexture(0xDE1u, 0);
  if (a5 == 1)
    glFlush();
  else
    glFinish();
  glGetError();
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
  return 0;
}

void CreateTextureStorage(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  if (a1[11] != a2 || a1[12] != a3)
  {
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, a1[16]);
    glTexImage2D(0xDE1u, 0, 6408, a2 >> 1, a3, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, a1[19]);
    glTexImage2D(0xDE1u, 0, 6408, a3 >> 1, a2, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, a1[20]);
    glTexImage2D(0xDE1u, 0, 6408, a3 >> 1, a2, 0, 0x1908u, 0x1401u, 0);
    glTexParameterf(0xDE1u, 0x2802u, 33071.0);
    glTexParameterf(0xDE1u, 0x2803u, 33071.0);
    glTexParameterf(0xDE1u, 0x2800u, 9728.0);
    glTexParameterf(0xDE1u, 0x2801u, 9728.0);
    glBindTexture(0xDE1u, 0);
    a1[11] = a2;
    a1[12] = a3;
  }
}

int *ClampAndExpandScissor(int *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *result;
  if (*result < 0)
  {
    v3 = 0;
    *result = 0;
  }
  v4 = result[1];
  if (v4 < 0)
  {
    v4 = 0;
    result[1] = 0;
  }
  v5 = result[2];
  if (v5 > a2 - v3)
  {
    result[2] = a2 - v3;
    v5 = a2 - v3;
  }
  v6 = result[3];
  if (v6 > a3 - v4)
  {
    result[3] = a3 - v4;
    v6 = a3 - v4;
    if ((v3 & 1) == 0)
    {
LABEL_9:
      if ((v4 & 1) == 0)
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else if ((v3 & 1) == 0)
  {
    goto LABEL_9;
  }
  *result = v3 - 1;
  result[2] = ++v5;
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_16;
  }
LABEL_15:
  result[1] = v4 - 1;
  result[3] = ++v6;
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0)
      return result;
LABEL_17:
    result[3] = v6 + 1;
    return result;
  }
LABEL_16:
  result[2] = v5 + 1;
  if ((v6 & 1) != 0)
    goto LABEL_17;
  return result;
}

uint64_t gl_UtilsCreateProgramFromSources(GLchar *a1, GLchar *a2)
{
  GLuint Shader_0;
  GLuint v4;
  GLuint v5;
  GLuint v6;
  uint64_t Program;
  uint64_t v8;
  GLint params;

  Shader_0 = gl_UtilsCreateShader_0(0x8B31u, a1);
  if (!Shader_0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  v4 = Shader_0;
  v5 = gl_UtilsCreateShader_0(0x8B30u, a2);
  if (!v5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    glDeleteShader(v4);
    return 0;
  }
  v6 = v5;
  params = 0;
  Program = glCreateProgram();
  v8 = Program;
  if ((_DWORD)Program)
  {
    glAttachShader(Program, v4);
    glAttachShader(v8, v6);
    glLinkProgram(v8);
    glGetProgramiv(v8, 0x8B82u, &params);
    if (!params)
    {
      glDeleteProgram(v8);
      v8 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  glDeleteShader(v4);
  glDeleteShader(v6);
  return v8;
}

uint64_t F32toF16(float a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = HIWORD(LODWORD(a1)) & 0x8000;
  v2 = (LODWORD(a1) >> 23);
  v3 = ((((LODWORD(a1) & 0x7FFFFFu) >> 13) | (v2 << 10)) + 0x4000) | v1;
  if (v2 < 0x71)
    LOWORD(v3) = HIWORD(a1) & 0x8000;
  v4 = v1 | 0x7C00;
  if (v2 >= 0x8F)
    LOWORD(v3) = v4;
  v5 = v4 | LOWORD(a1) & 0x3FF;
  if ((LODWORD(a1) & 0x7FFFFF) == 0)
    v5 = v4;
  if (v2 != 255)
    return (unsigned __int16)v3;
  return v5;
}

uint64_t gl_UtilsCreateShader_0(GLenum a1, GLchar *a2)
{
  uint64_t Shader;
  uint64_t v3;
  GLint params;
  GLchar *string;

  string = a2;
  Shader = glCreateShader(a1);
  v3 = Shader;
  if ((_DWORD)Shader)
  {
    params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

void *csu_secondaryNativeResolutionZoomFactorsForFormatIndex(void *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *result;
  void *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  int v17;
  double v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t i;
  float v23;
  float v24;
  float v25;
  double v26;
  id obj;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", (int)a2);
  v5 = (void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EE0]);
  result = (void *)objc_msgSend(v5, "count");
  if (result)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v5);
    v8 = 0x1E0CB3000uLL;
    objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
    v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    obj = v7;
    v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v30;
      v13 = MEMORY[0x1E0C9D648];
LABEL_4:
      v14 = 0;
      while (1)
      {
        if (*(_QWORD *)v30 != v12)
          objc_enumerationMutation(obj);
        v15 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v14);
        if ((objc_msgSend(v15, "intValue") & 0x80000000) != 0)
          return 0;
        v16 = v8;
        v17 = objc_msgSend(v15, "intValue");
        if (objc_msgSend(a1, "count") <= (unint64_t)v17)
          return 0;
        objc_msgSend(a1, "objectAtIndexedSubscript:", (int)objc_msgSend(v15, "intValue"));
        v28 = *(_OWORD *)(v13 + 16);
        if (!FigCFDictionaryGetCGRectIfPresent())
          return 0;
        HIDWORD(v18) = DWORD1(v28);
        *(float *)&v18 = *(double *)&v28;
        v8 = v16;
        objc_msgSend(v9, "addObject:", objc_msgSend(*(id *)(v16 + 2024), "numberWithFloat:", v18));
        if (v11 == ++v14)
        {
          v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
          if (v11)
            goto LABEL_4;
          break;
        }
      }
    }
    if ((unint64_t)objc_msgSend(v9, "count") < 2)
      return 0;
    v19 = (void *)objc_msgSend((id)objc_msgSend(v9, "allObjects"), "sortedArrayUsingSelector:", sel_compare_);
    v20 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v21 = objc_msgSend(v19, "count");
    if (v21 >= 2)
    {
      for (i = (v21 - 2); i != -1; --i)
      {
        objc_msgSend((id)objc_msgSend(v19, "lastObject"), "floatValue");
        v24 = v23;
        objc_msgSend((id)objc_msgSend(v19, "objectAtIndexedSubscript:", i), "floatValue");
        *(float *)&v26 = v24 / v25;
        objc_msgSend(v20, "addObject:", objc_msgSend(*(id *)(v8 + 2024), "numberWithFloat:", v26));
      }
    }
    return BWFilterNonDisruptiveSwitchingFormatZoomFactors(v20);
  }
  return result;
}

void csu_handleDevicePropertyChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t FigBaseObject;
  unsigned int (*v9)(uint64_t, const __CFString *, _QWORD, id *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v14;
  id *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  const __CFString *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (((objc_msgSend(CFSTR("HiddenStateChanged"), "isEqualToString:") & 1) != 0
     || (objc_msgSend(CFSTR("DeviceTrackingActiveChanged"), "isEqualToString:", a3) & 1) != 0)
    && a4
    && a5
    && (FigBaseObject = FigCaptureDeviceGetFigBaseObject(a4),
        (v9 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48)) != 0)
    && !v9(FigBaseObject, CFSTR("CMIOExtensionDeviceID"), *MEMORY[0x1E0C9AE00], &v17)
    && (v10 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("Value")), v17)
    && (v11 = v10) != 0)
  {
    if (FigCFEqual())
    {
      v24 = CFSTR("Hidden");
      v25[0] = v11;
      v12 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
      v22 = v17;
      v23 = v12;
      v13 = (void *)MEMORY[0x1E0C99D80];
      v14 = &v23;
      v15 = &v22;
LABEL_14:
      csu_postSourceInfoArrayChangedNotificationIfNecessary((void *)objc_msgSend(v13, "dictionaryWithObjects:forKeys:count:", v14, v15, 1));
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      v20 = CFSTR("DockedTrackingActive");
      v21 = v11;
      v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      v18 = v17;
      v19 = v16;
      v13 = (void *)MEMORY[0x1E0C99D80];
      v14 = &v19;
      v15 = &v18;
      goto LABEL_14;
    }
  }
  else
  {
    FigDebugAssert3();
  }
LABEL_15:

}

void FigCaptureCreateSourceInfoArrayFromDeviceAndModelSpecificPlist(void *a1, void *a2, int a3, id *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  void *VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *DeepCopy;
  void *v17;
  id v18;
  void *AllAVCaptureSessionPresets;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  const __CFString *v35;
  const __CFString *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v44;
  void *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _QWORD v57[9];

  v57[7] = *MEMORY[0x1E0C80C00];
  VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist = csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist(a1, a2);
  v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
  v44 = a2;
  v9 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("AVCaptureDevices"));
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v48;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v48 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("mediaType")), "isEqual:", CFSTR("soun")))
        {
          v15 = (void *)objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("uniqueName"));
          if (!v15 || objc_msgSend(v15, "isEqualToString:", CFSTR("Microphone")))
          {
            v39 = VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist;
            DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, 1uLL);
            v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 2);
            objc_msgSend(v38, "setObject:forKeyedSubscript:", CFSTR("soun"), CFSTR("MediaType"));
            v17 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 5);
            objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("Microphone"), CFSTR("NonLocalizedName"));
            objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E49F9828, CFSTR("SourceType"));
            objc_msgSend(v17, "setObject:forKeyedSubscript:", &unk_1E49F9840, CFSTR("DeviceType"));
            objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_audio:0"), CFSTR("ModelID"));
            objc_msgSend(v17, "setObject:forKeyedSubscript:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_audio:0"), CFSTR("UniqueID"));
            v37 = v17;
            objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("prefersDecoupledIO")), CFSTR("PrefersDecoupledIO"));
            v18 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            AllAVCaptureSessionPresets = FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets();
            v57[0] = CFSTR("RequiredNumChannels");
            v57[1] = CFSTR("RequiredSampleRate");
            v57[2] = CFSTR("RequiredBitRatePerChannel");
            v57[3] = CFSTR("PreferredSampleRate");
            v57[4] = CFSTR("BitRatePerChannelForPreferredSampleRate");
            v57[5] = CFSTR("BitRateStrategyForPreferredSampleRate");
            v57[6] = CFSTR("VBRCodecQualityForPreferredSampleRate");
            v20 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v57, 7);
            csu_pruneDictionaryToJustKeys((void *)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("AVCaptureSessionPresetCommon")), v20);
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v21 = objc_msgSend(AllAVCaptureSessionPresets, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
            if (v21)
            {
              v22 = v21;
              v23 = *(_QWORD *)v52;
              do
              {
                for (j = 0; j != v22; ++j)
                {
                  if (*(_QWORD *)v52 != v23)
                    objc_enumerationMutation(AllAVCaptureSessionPresets);
                  v25 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * j);
                  v26 = (void *)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", v25);
                  if (v26)
                  {
                    v27 = v26;
                    csu_pruneDictionaryToJustKeys(v26, v20);
                    FigCFDictionaryAddEntriesToDictionaryWithRecursion();
                    objc_msgSend(v18, "setObject:forKeyedSubscript:", v27, v25);
                  }
                }
                v22 = objc_msgSend(AllAVCaptureSessionPresets, "countByEnumeratingWithState:objects:count:", &v51, v56, 16);
              }
              while (v22);
            }
            if (v18)
            {
              objc_msgSend(v37, "setObject:forKeyedSubscript:", v18, CFSTR("AudioSettingsForPresetsMap"));

            }
            VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist = v39;
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("stereoAudioCaptureSupported")), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("BuiltInMicrophoneStereoAudioCaptureSupported"));
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("cinematicAudioCaptureSupported")), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("CinematicAudioCaptureSupported"));
            if (objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("windNoiseRemovalSupported")), "BOOLValue"))objc_msgSend(v37, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("WindNoiseRemovalSupported"));
            objc_msgSend(v38, "setObject:forKeyedSubscript:", v37, CFSTR("Attributes"));

            objc_msgSend(v46, "addObject:", v38);
            goto LABEL_30;
          }
        }
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
      if (v11)
        continue;
      break;
    }
  }
LABEL_30:
  v28 = (void *)objc_msgSend((id)objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceCommonSettings")), "mutableCopy");
  if (objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("PreviewRegistrationType")))
    objc_msgSend(v28, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", BWPreviewRegistrationTypeFromShortString(objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("PreviewRegistrationType")))), CFSTR("PreviewRegistrationType"));
  if (a5)
    *a5 = v28;
  v29 = (void *)objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("AVHEVCSettings"));
  v30 = v29;
  if (a6)
    *a6 = v29;
  v31 = (void *)objc_msgSend(v44, "objectForKeyedSubscript:", CFSTR("AVH264Settings"));
  v32 = v31;
  if (a7)
    *a7 = v31;
  if (objc_msgSend(VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist, "count") || objc_msgSend(v46, "count"))
  {
    v33 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v33, "addObjectsFromArray:", VideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist);
    objc_msgSend(v33, "addObjectsFromArray:", v46);
    v34 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v34, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 203), CFSTR("Version"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", (id)MGCopyAnswer(), CFSTR("BuildVersion"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D68], "date"), CFSTR("CreationDate"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", FigCaptureGetModelSpecificName(), CFSTR("DeviceModel"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v33, CFSTR("Sources"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", csu_dependentUserDefaultsDictionary(), CFSTR("DependentUserDefaults"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v28, CFSTR("CommonSettings"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v30, CFSTR("HEVCSettings"));
    objc_msgSend(v34, "setObject:forKeyedSubscript:", v32, CFSTR("H264Settings"));
    if (a3)
    {
      v35 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v36 = (const __CFString *)*MEMORY[0x1E0C9B230];
      CFPreferencesSetValue(CFSTR("CaptureSourceInfo"), v34, CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      CFPreferencesSynchronize(CFSTR("com.apple.cameracapture.volatile"), v35, v36);
    }
    if (a4)
      *a4 = csu_createInMemorySourcesArrayFromOnDiskSourcesArray(v33);

  }
}

void *csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist(void *a1, const void *a2)
{
  const __CFAllocator *v3;
  void *DeepCopy;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  int v11;
  int v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  __CFString *v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  __int128 *v47;
  os_log_type_t *v48;
  unsigned int *v49;
  __int128 *v50;
  os_log_type_t *v51;
  os_log_type_t *v52;
  BOOL v53;
  uint64_t *v54;
  os_log_type_t *v55;
  unsigned int *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t j;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t k;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t m;
  const __CFString *v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id *v90;
  id *v91;
  uint64_t v92;
  id v93;
  void *v94;
  unsigned int v95;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  int v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  float v116;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v118;
  float v119;
  CFDictionaryRef v120;
  CFDictionaryRef v121;
  float v122;
  CFDictionaryRef v123;
  CFDictionaryRef v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  int v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t n;
  uint64_t v135;
  void *v136;
  unsigned int v137;
  uint64_t v138;
  float v139;
  CFDictionaryRef v140;
  CFDictionaryRef v141;
  float v142;
  CFDictionaryRef v143;
  CFDictionaryRef v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  unsigned int v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _BOOL4 v160;
  char v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  float v170;
  uint64_t v171;
  void *v172;
  void *v173;
  int v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  id v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  uint64_t v187;
  void *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t ii;
  void *v197;
  char v198;
  char v199;
  uint64_t v200;
  BOOL v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  const __CFString *v205;
  uint64_t v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v210;
  uint64_t jj;
  const __CFString *v212;
  uint64_t v213;
  int v214;
  void *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  uint64_t v227;
  void *v228;
  void *v229;
  BOOL v230;
  uint64_t v231;
  const __CFString *v232;
  NSObject *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  const __CFString *v238;
  NSObject *v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  NSObject *v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  void *v247;
  float v248;
  float v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t kk;
  float v254;
  double v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float v260;
  uint64_t v261;
  float v262;
  uint64_t mm;
  void *v264;
  int v265;
  int v266;
  void *v267;
  float v268;
  float v269;
  uint64_t v270;
  char v271;
  void *v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  BOOL v279;
  uint64_t v280;
  double v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t nn;
  void *v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t i1;
  void *v297;
  double v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t i2;
  uint64_t v304;
  void *v306;
  uint64_t v307;
  const __CFString *v308;
  void *v309;
  uint64_t v310;
  _OWORD *v311;
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v349;
  id obj;
  id v351;
  id v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  uint64_t v360;
  void *v361;
  void *v362;
  uint64_t v363;
  char v364;
  char v365;
  void *v366;
  char v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  char v372;
  void *v373;
  void *v374;
  id v375;
  int v376;
  int v377;
  uint64_t v378;
  void *v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  void *v383;
  void *v384;
  uint64_t v385;
  unsigned int v386;
  _BOOL4 v387;
  id v388;
  uint64_t v389;
  unsigned int v390;
  id v391;
  id v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  id v396;
  id v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  id v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  id v412;
  unsigned int v413;
  int v414;
  id v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  unsigned int v424;
  os_log_type_t v425[8];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  unsigned int v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  __int128 v452;
  __int128 v453;
  __int128 v454;
  _BYTE v455[128];
  _BYTE v456[128];
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  os_log_type_t type[16];
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  _OWORD v481[8];
  _DWORD v482[32];
  _OWORD v483[2];
  __int128 v484;
  __int128 v485;
  uint64_t v486;
  CGSize v487;
  CGSize v488;
  CGSize v489;
  CGSize v490;
  CGSize v491;

  v486 = *MEMORY[0x1E0C80C00];
  v330 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 1uLL);
  v5 = (void *)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("AVCaptureDevices"));
  v313 = DeepCopy;
  v346 = objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceCommonSettings"));
  v398 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 0);
  v344 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  obj = v5;
  csu_preprocessDeviceDicts(v5);
  if ((BWDeviceIsiPad() & 1) == 0)
  {
    memset(v481, 0, 64);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", v481, v482, 16);
    if (v6)
    {
      v7 = v6;
      v8 = **(_QWORD **)&v481[1];
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (**(_QWORD **)&v481[1] != v8)
            objc_enumerationMutation(obj);
          v10 = *(void **)(*((_QWORD *)&v481[0] + 1) + 8 * i);
          v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue");
          v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("position")), "intValue");
          if (v11 == 7 && v12 == 1)
          {
            v14 = (id)CFPropertyListCreateDeepCopy(v3, v10, 1uLL);
            objc_msgSend(v14, "setObject:forKeyedSubscript:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_deskview:1"), CFSTR("uniqueID"));
            objc_msgSend(v14, "setObject:forKeyedSubscript:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_deskview:1"), CFSTR("modelID"));
            objc_msgSend(v14, "setObject:forKeyedSubscript:", &unk_1E49F9960, CFSTR("deviceType"));
            objc_msgSend(v14, "setObject:forKeyedSubscript:", CFSTR("Desk View Camera"), CFSTR("localizedName"));
            objc_msgSend(v14, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("geometricDistortionCorrection"));
            if (v14)
              objc_msgSend(obj, "addObject:", v14);
            goto LABEL_16;
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v481, v482, 16);
        if (v7)
          continue;
        break;
      }
    }
  }
LABEL_16:
  if ((int)FigCapturePlatformIdentifier() >= 4)
  {
    v361 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v469 = 0u;
    v470 = 0u;
    v471 = 0u;
    v472 = 0u;
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v469, v482, 16);
    if (v15)
    {
      v16 = v15;
      v378 = *(_QWORD *)v470;
      v360 = *MEMORY[0x1E0D074C0];
      do
      {
        v17 = 0;
        v369 = v16;
        do
        {
          if (*(_QWORD *)v470 != v378)
            objc_enumerationMutation(obj);
          v382 = v17;
          v18 = *(void **)(*((_QWORD *)&v469 + 1) + 8 * v17);
          if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("position")), "intValue") == 2)
          {
            v19 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue");
            v20 = v19 - 2;
            if ((v19 - 2) <= 9 && ((0x229u >> v20) & 1) != 0)
            {
              v21 = v19;
              v22 = off_1E4921980[v20];
              v23 = **((_QWORD **)&unk_1E49219D0 + v20);
              if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("SecureMetadataCameraSupported")), "BOOLValue"))
              {
                v24 = (void *)objc_msgSend(a1, "copyStreamWithPortType:error:", v23, 0);
                v25 = objc_msgSend((id)objc_msgSend(v24, "supportedProperties"), "objectForKeyedSubscript:", v360) != 0;

              }
              else
              {
                v25 = 0;
              }
              if (v21 != 5 || v25)
              {
                v27 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                objc_msgSend(v27, "setObject:forKeyedSubscript:", CFSTR("vide"), CFSTR("mediaType"));
                objc_msgSend(v27, "setObject:forKeyedSubscript:", v22, CFSTR("uniqueName"));
                v373 = v27;
                objc_msgSend(v27, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("hasAutoFocus")), CFSTR("hasAutoFocus"));
                if (v25)
                  objc_msgSend(v27, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("SecureMetadataCameraSupported"));
                v28 = (id)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("MultiStream")), "mutableCopy");
                v29 = (void *)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceFormats"));
                v374 = v28;
                v30 = objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("FigCaptureStreamFormats"));
                v408 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                *(_QWORD *)&v483[0] = 0;
                LODWORD(v438) = 0;
                LODWORD(v434) = 0;
                *(_QWORD *)&v451 = 0;
                LODWORD(v430) = 0;
                LODWORD(v426) = 0;
                *(_QWORD *)&v447 = 0;
                v442 = 0;
                *(_QWORD *)v425 = 0;
                *(_QWORD *)&v443 = 0;
                v424 = 0;
                v468 = 0u;
                v467 = 0u;
                v466 = 0u;
                v465 = 0u;
                v412 = v29;
                v31 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v465, v481, 16);
                if (v31)
                {
                  v32 = v31;
                  v33 = *(_QWORD *)v466;
                  v406 = *(_QWORD *)v466;
                  do
                  {
                    v34 = 0;
                    v410 = v32;
                    do
                    {
                      if (*(_QWORD *)v466 != v33)
                        objc_enumerationMutation(v29);
                      v35 = *(_QWORD *)(*((_QWORD *)&v465 + 1) + 8 * v34);
                      v36 = (void *)objc_msgSend(v29, "objectForKeyedSubscript:", v35);
                      v37 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("Width")), "intValue");
                      if (v37 <= 0x780)
                      {
                        v38 = v37;
                        v39 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("Height")), "intValue");
                        v40 = objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("CaptureStreamFormat"));
                        v41 = (void *)v30;
                        while (1)
                        {
                          v42 = (void *)objc_msgSend(v41, "objectForKeyedSubscript:", v40);
                          objc_opt_class();
                          if ((objc_opt_isKindOfClass() & 1) == 0)
                            break;
                          v41 = (void *)v30;
                          v40 = (uint64_t)v42;
                        }
                        v43 = objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("Binned")), "BOOLValue");
                        v44 = objc_msgSend((id)objc_msgSend(v42, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), "intValue");
                        if (objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("MaxFrameRateOverride")))
                          v44 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("MaxFrameRateOverride")), "intValue");
                        if (v44 - 31 >= 0xFFFFFFE2)
                          v45 = v44;
                        else
                          v45 = 30;
                        v46 = 9 * v38;
                        v47 = &v443;
                        if (v43)
                          v47 = &v451;
                        v48 = v425;
                        if (v43)
                          v48 = (os_log_type_t *)&v430;
                        v49 = &v424;
                        if (v43)
                          v49 = (unsigned int *)&v426;
                        v50 = &v447;
                        if (v43)
                          v50 = v483;
                        v51 = (os_log_type_t *)&v442;
                        if (v43)
                          v51 = (os_log_type_t *)&v438;
                        v52 = &v425[4];
                        if (v43)
                          v52 = (os_log_type_t *)&v434;
                        v53 = v46 == 16 * v39;
                        if (v46 == 16 * v39)
                          v54 = (uint64_t *)v50;
                        else
                          v54 = (uint64_t *)v47;
                        if (v53)
                          v55 = v51;
                        else
                          v55 = v48;
                        if (v53)
                          v56 = (unsigned int *)v52;
                        else
                          v56 = v49;
                        v33 = v406;
                        v32 = v410;
                        if (v38 > *(_DWORD *)v55 || v38 == *(_DWORD *)v55 && v45 < *v56)
                        {
                          *v54 = v35;
                          *(_DWORD *)v55 = v38;
                          *v56 = v45;
                        }
                      }
                      ++v34;
                    }
                    while (v34 != v32);
                    v32 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v465, v481, 16);
                  }
                  while (v32);
                  v57 = *(_QWORD *)&v483[0];
                  v58 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v59 = v58;
                  if (v57)
                  {
                    objc_msgSend(v58, "addObject:", v57);
                    v365 = 0;
                    goto LABEL_79;
                  }
                }
                else
                {
                  v59 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v57 = 0;
                }
                v365 = 1;
LABEL_79:
                v60 = v451;
                if ((_QWORD)v451)
                  objc_msgSend(v59, "addObject:", (_QWORD)v451);
                v61 = v447;
                if ((_QWORD)v447)
                  objc_msgSend(v59, "addObject:", (_QWORD)v447);
                v389 = v60;
                v62 = v443;
                if ((_QWORD)v443)
                  objc_msgSend(v59, "addObject:", (_QWORD)v443);
                v399 = v62;
                v393 = v57;
                v464 = 0u;
                v463 = 0u;
                v462 = 0u;
                v461 = 0u;
                v404 = v59;
                v411 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v461, &v477, 16);
                if (v411)
                {
                  v407 = *(_QWORD *)v462;
                  v386 = v426;
                  v390 = v434;
                  v395 = v424;
                  v405 = *(_DWORD *)&v425[4];
                  do
                  {
                    for (j = 0; j != v411; ++j)
                    {
                      if (*(_QWORD *)v462 != v407)
                        objc_enumerationMutation(v404);
                      v64 = *(void **)(*((_QWORD *)&v461 + 1) + 8 * j);
                      v65 = (void *)objc_msgSend(v412, "objectForKeyedSubscript:", v64);
                      v66 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                      v457 = 0u;
                      v458 = 0u;
                      v459 = 0u;
                      v460 = 0u;
                      v67 = objc_msgSend(&unk_1E4A00878, "countByEnumeratingWithState:objects:count:", &v457, type, 16);
                      if (v67)
                      {
                        v68 = v67;
                        v69 = *(_QWORD *)v458;
                        do
                        {
                          for (k = 0; k != v68; ++k)
                          {
                            if (*(_QWORD *)v458 != v69)
                              objc_enumerationMutation(&unk_1E4A00878);
                            objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(v65, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v457 + 1) + 8 * k)), *(_QWORD *)(*((_QWORD *)&v457 + 1) + 8 * k));
                          }
                          v68 = objc_msgSend(&unk_1E4A00878, "countByEnumeratingWithState:objects:count:", &v457, type, 16);
                        }
                        while (v68);
                      }
                      v71 = objc_msgSend(v64, "isEqualToString:", v61);
                      v72 = v405;
                      if ((v71 & 1) != 0
                        || (v73 = objc_msgSend(v64, "isEqualToString:", v399), v72 = v395, (v73 & 1) != 0)
                        || (v74 = objc_msgSend(v64, "isEqualToString:", v393), v72 = v390, (v74 & 1) != 0)
                        || (v75 = objc_msgSend(v64, "isEqualToString:", v389), v72 = v386, v75))
                      {
                        objc_msgSend(v66, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v72), CFSTR("MaxFrameRateOverride"));
                      }
                      objc_msgSend(v408, "setObject:forKeyedSubscript:", v66, v64);
                    }
                    v411 = objc_msgSend(v404, "countByEnumeratingWithState:objects:count:", &v461, &v477, 16);
                  }
                  while (v411);
                }
                objc_msgSend(v374, "setObject:forKeyedSubscript:", v408, CFSTR("AVCaptureDeviceFormats"));
                v76 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                v77 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
                if (v61)
                {
                  objc_msgSend(v76, "setObject:forKeyedSubscript:", v61, CFSTR("DeviceFormat"));
                  v78 = *(unsigned int *)&v425[4];
                  v79 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)&v425[4]);
                  v16 = v369;
                  goto LABEL_113;
                }
                v16 = v369;
                if (v399)
                {
                  objc_msgSend(v76, "setObject:forKeyedSubscript:", v399, CFSTR("DeviceFormat"));
                  v80 = (void *)MEMORY[0x1E0CB37E8];
                  v78 = v424;
LABEL_112:
                  v79 = objc_msgSend(v80, "numberWithUnsignedInt:", v78);
LABEL_113:
                  objc_msgSend(v76, "setObject:forKeyedSubscript:", v79, CFSTR("MinFrameRate"));
                  objc_msgSend(v76, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v78), CFSTR("MaxFrameRate"));
                }
                else
                {
                  if ((v365 & 1) == 0)
                  {
                    objc_msgSend(v76, "setObject:forKeyedSubscript:", v393, CFSTR("DeviceFormat"));
                    v80 = (void *)MEMORY[0x1E0CB37E8];
                    v78 = v434;
                    goto LABEL_112;
                  }
                  if (v389)
                  {
                    objc_msgSend(v76, "setObject:forKeyedSubscript:", v389, CFSTR("DeviceFormat"));
                    v80 = (void *)MEMORY[0x1E0CB37E8];
                    v78 = v426;
                    goto LABEL_112;
                  }
                }
                objc_msgSend(v77, "setObject:forKeyedSubscript:", v76, CFSTR("AVCaptureSessionPresetHigh"));
                objc_msgSend(v374, "setObject:forKeyedSubscript:", v77, CFSTR("AVCaptureSessionPresets"));
                objc_msgSend(v373, "setObject:forKeyedSubscript:", v374, CFSTR("MultiStream"));
                objc_msgSend(v361, "addObject:", v373);
              }
            }
          }
          v17 = v382 + 1;
        }
        while (v382 + 1 != v16);
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v469, v482, 16);
      }
      while (v16);
    }
    csu_preprocessDeviceDicts(v361);
    if (v361)
      objc_msgSend(obj, "addObjectsFromArray:", v361);
  }
  v423 = 0u;
  v422 = 0u;
  v421 = 0u;
  v420 = 0u;
  v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v420, v456, 16);
  if (v81)
  {
    v82 = v81;
    v83 = *(_QWORD *)v421;
    while (2)
    {
      for (m = 0; m != v82; ++m)
      {
        if (*(_QWORD *)v421 != v83)
          objc_enumerationMutation(obj);
        if (objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v420 + 1) + 8 * m), "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue") == 5)
        {
          v329 = 1;
          goto LABEL_129;
        }
      }
      v82 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v420, v456, 16);
      if (v82)
        continue;
      break;
    }
  }
  v329 = 0;
LABEL_129:
  v419 = 0u;
  v418 = 0u;
  v417 = 0u;
  v416 = 0u;
  v347 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v416, v455, 16);
  if (v347)
  {
    v345 = *(_QWORD *)v417;
    v333 = (void *)*MEMORY[0x1E0D05A20];
    v316 = *MEMORY[0x1E0D077D8];
    v343 = *MEMORY[0x1E0D07580];
    v342 = *MEMORY[0x1E0D07590];
    v328 = *MEMORY[0x1E0D07800];
    v341 = *MEMORY[0x1E0D073B0];
    v327 = *MEMORY[0x1E0D059E0];
    v314 = *MEMORY[0x1E0D05A40];
    v340 = *MEMORY[0x1E0D07500];
    v339 = *MEMORY[0x1E0D075E8];
    v326 = *MEMORY[0x1E0D078D8];
    v319 = *MEMORY[0x1E0D08140];
    v317 = *MEMORY[0x1E0D08130];
    v318 = *MEMORY[0x1E0D08138];
    v322 = *MEMORY[0x1E0D07EE8];
    v321 = *MEMORY[0x1E0D07FD0];
    v320 = *MEMORY[0x1E0D06758];
    v315 = *MEMORY[0x1E0D07530];
    v338 = *MEMORY[0x1E0D077A0];
    v332 = *MEMORY[0x1E0D07F88];
    v337 = *MEMORY[0x1E0D078C8];
    v325 = *MEMORY[0x1E0D078B8];
    v324 = *MEMORY[0x1E0D07848];
    v323 = *MEMORY[0x1E0D078C0];
    v336 = *MEMORY[0x1E0D076B8];
    v335 = *MEMORY[0x1E0D078D0];
    v331 = *MEMORY[0x1E0D07880];
    v334 = *MEMORY[0x1E0D07560];
    v409 = *MEMORY[0x1E0CA9040];
    v356 = *MEMORY[0x1E0D05A28];
    v85 = CFSTR("VideoMinFrameRate");
    v394 = *MEMORY[0x1E0D08820];
    v358 = *MEMORY[0x1E0D07EA8];
    v86 = 0x1E0CB3000uLL;
    do
    {
      v87 = 0;
      do
      {
        if (*(_QWORD *)v417 != v345)
          objc_enumerationMutation(obj);
        v88 = *(void **)(*((_QWORD *)&v416 + 1) + 8 * v87);
        if ((objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("mediaType"), v311, v312), "isEqualToString:", CFSTR("vide")) & 1) == 0&& !objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("mediaType")), "isEqualToString:", CFSTR("pcld")))
        {
          goto LABEL_573;
        }
        v349 = v87;
        v89 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("modelID"));
        if (objc_msgSend(v344, "containsObject:", v89))
        {
          v309 = (void *)MEMORY[0x1E0C99DA0];
          v310 = *MEMORY[0x1E0C99768];
          v308 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Found duplicated modelID: %@"), v89);
          v306 = v309;
          v307 = v310;
LABEL_581:
          objc_exception_throw((id)objc_msgSend(v306, "exceptionWithName:reason:userInfo:", v307, v308, 0));
        }
        objc_msgSend(v344, "addObject:", v89);
        v90 = (id *)-[FigCaptureSourceStreamsContainer initWithDeviceType:position:stillImageDepthDataType:device:baseZoomFactorOverrides:clientBaseZoomFactorsByPortType:]([FigCaptureSourceStreamsContainer alloc], objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue"), objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("position")), "intValue"), objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageDepthDataType")), "intValue"), a1, objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsBaseZoomFactorOverrides")), objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsClientBaseZoomFactorsByPortType")));
        if (!v90)
        {
          LODWORD(v477) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v98 = v477;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
            v99 = v98;
          else
            v99 = v98 & 0xFFFFFFFE;
          if (v99)
          {
            v100 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("localizedName"));
            LODWORD(v481[0]) = 136315394;
            *(_QWORD *)((char *)v481 + 4) = "csu_createVideoCaptureSourceInfoForCaptureDeviceFromModelSpecificPlist";
            WORD6(v481[0]) = 2114;
            *(_QWORD *)((char *)v481 + 14) = v100;
            LODWORD(v312) = 22;
            v311 = v481;
            _os_log_send_and_compose_impl();
          }
          v87 = v349;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          goto LABEL_573;
        }
        v91 = v90;
        objc_msgSend(v90[4], "portType");
        *(_QWORD *)&v469 = 0;
        *(_QWORD *)&v465 = 0;
        *(_QWORD *)&v461 = 0;
        v370 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("mediaType"));
        v375 = v91[4];
        v92 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v93 = v91[4];
        v94 = (void *)objc_msgSend(v93, "supportedProperties");
        v357 = (uint64_t)v91;
        v95 = *((_DWORD *)v91 + 2);
        v387 = (v95 > 0x14 || ((1 << v95) & 0x100420) == 0) && v95 - 21 < 0xFFFFFFFC;
        v101 = (void *)v346;
        objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("position")), "intValue");
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("uniqueID")), CFSTR("UniqueID"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("modelID")), CFSTR("ModelID"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", CFSTR("Apple Inc."), CFSTR("Manufacturer"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("localizedName")), CFSTR("NonLocalizedName"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", 0x1E492D2B8, CFSTR("CaptureDeviceID"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("position")), CFSTR("Position"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", &unk_1E49F9840, CFSTR("SourceType"));
        v102 = MEMORY[0x1E0C9AAB0];
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("MinFrameRate"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v102, CFSTR("MaxFrameRate"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithInt:", *(unsigned int *)(v357 + 8)), CFSTR("DeviceType"));
        v103 = *(_DWORD *)(v357 + 8);
        if (v103 == 12 || v103 == 6)
        {
          v104 = (void *)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("pearlModuleType"));
          if (v104)
            v105 = objc_msgSend(v104, "intValue");
          else
            v105 = 1;
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithInt:", v105), CFSTR("PearlModuleType"));
          v103 = *(_DWORD *)(v357 + 8);
        }
        if (v103 == 10)
        {
          v482[0] = 0;
          v106 = (void *)objc_msgSend(*(id *)(v357 + 40), "objectForKeyedSubscript:", v333);
          if ((int)FigCapturePlatformIdentifier() < 7)
          {
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", &unk_1E4A00890, CFSTR("SupportedTimeOfFlightProjectorModes"));
            v110 = (void *)v92;
            v111 = &unk_1E49F9840;
          }
          else
          {
            v107 = (void *)objc_msgSend((id)objc_msgSend(v106, "getProperty:error:", v316, v482), "mutableCopy");
            if (objc_msgSend(v107, "containsObject:", &unk_1E49F9978))
              objc_msgSend(v107, "removeObject:", &unk_1E49F9978);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v107, CFSTR("SupportedTimeOfFlightProjectorModes"));

            v108 = (void *)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("TimeOfFlightCameraType"));
            if (v108)
              v109 = objc_msgSend(v108, "intValue");
            else
              v109 = 1;
            v111 = (void *)objc_msgSend(*(id *)(v86 + 2024), "numberWithInt:", v109);
            v110 = (void *)v92;
          }
          objc_msgSend(v110, "setObject:forKeyedSubscript:", v111, CFSTR("TimeOfFlightCameraType"));
        }
        v112 = objc_msgSend(v94, "objectForKeyedSubscript:", v343);
        v113 = MEMORY[0x1E0C9AAB0];
        if (v112)
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("ISPAPSData"));
        if (objc_msgSend(v94, "objectForKeyedSubscript:", v342))
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("ISPMotionData"));
        if (v387 && objc_msgSend(v94, "objectForKeyedSubscript:", v328))
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("TimeLapseSupported"));
        if (objc_msgSend(v94, "objectForKeyedSubscript:", v341))
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("AutoFocusPositionSensorCalibrationSupported"));
        v379 = v94;
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("hasAutoFocus")), "BOOLValue"))
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("Focus"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("FocusPointOfInterest"));
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ContinuousAutoFocusWindowWidthOverride")), "floatValue");
          v115 = v114;
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ContinuousAutoFocusWindowHeightOverride")), "floatValue");
          if (v115 > 0.0 && v116 > 0.0)
          {
            v487.height = v116;
            v487.width = v115;
            DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v487);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", DictionaryRepresentation, CFSTR("DefaultContinuousAutoFocusWindowSize"));
            v118 = DictionaryRepresentation;
            v113 = MEMORY[0x1E0C9AAB0];
            CFRelease(v118);
          }
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("FocusCenterWindowSize")), "floatValue");
          if (v119 > 0.0)
          {
            v488.height = v119;
            v488.width = (float)(v119 * 0.75);
            v120 = CGSizeCreateDictionaryRepresentation(v488);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v120, CFSTR("DefaultAutoFocusCenterWindowSize"));
            v121 = v120;
            v113 = MEMORY[0x1E0C9AAB0];
            CFRelease(v121);
          }
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("FocusPointOfInterestWindowSize")), "floatValue");
          if (v122 > 0.0)
          {
            v489.height = v122;
            v489.width = (float)(v122 * 0.75);
            v123 = CGSizeCreateDictionaryRepresentation(v489);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v123, CFSTR("DefaultAutoFocusTapWindowSize"));
            v124 = v123;
            v113 = MEMORY[0x1E0C9AAB0];
            CFRelease(v124);
          }
          v413 = v95;
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("AutoFocusRangeRestriction"));
          if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("smoothAutoFocusSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v113, CFSTR("SmoothFocus"));
          v125 = v93;
          if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("autoFocusPositionSensorMode")), "intValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("autoFocusPositionSensorMode")), CFSTR("AutoFocusPositionSensorMode"));
          v126 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("manualFocusSupported"));
          if (v126)
            v127 = v126;
          else
            v127 = v113;
          v128 = (void *)v92;
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v127, CFSTR("ManualFocus"));
          if (objc_msgSend((id)objc_msgSend(*(id *)(v357 + 16), "supportedProperties"), "objectForKeyedSubscript:", v327))
          {
            v129 = BWCaptureDevicePositionFromPortType(v333);
            v479 = 0u;
            v480 = 0u;
            v477 = 0u;
            v478 = 0u;
            v130 = (void *)objc_msgSend(*(id *)(v357 + 40), "allKeys");
            v131 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", &v477, v482, 16);
            if (v131)
            {
              v132 = v131;
              v133 = *(_QWORD *)v478;
              while (2)
              {
                for (n = 0; n != v132; ++n)
                {
                  if (*(_QWORD *)v478 != v133)
                    objc_enumerationMutation(v130);
                  if (BWCaptureDevicePositionFromPortType(*(void **)(*((_QWORD *)&v477 + 1) + 8 * n)) == v129)
                  {
                    objc_msgSend(v128, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4952238);
                    goto LABEL_201;
                  }
                }
                v132 = objc_msgSend(v130, "countByEnumeratingWithState:objects:count:", &v477, v482, 16);
                if (v132)
                  continue;
                break;
              }
            }
          }
LABEL_201:
          v101 = (void *)v346;
          v92 = (uint64_t)v128;
          v93 = v125;
          v94 = v379;
          v95 = v413;
          if (v329)
          {
            if (objc_msgSend((id)objc_msgSend((id)v92, "objectForKeyedSubscript:", CFSTR("Position")), "intValue") == 2)
            {
              if (objc_msgSend((id)objc_msgSend((id)v92, "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
              {
                v135 = objc_msgSend(*(id *)(v357 + 16), "copyStreamWithPortType:error:", v314, 0);
                if (v135)
                {
                  v136 = (void *)v135;
                  objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4952258);

                }
              }
            }
          }
        }
        v137 = v95 - 17;
        if (v387)
        {
          v138 = MEMORY[0x1E0C9AAB0];
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Exposure"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, CFSTR("ExposurePointOfInterest"));
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ExposureCenterWindowSize")), "floatValue");
          if (v139 > 0.0)
          {
            v490.width = v139;
            v490.height = v490.width;
            v140 = CGSizeCreateDictionaryRepresentation(v490);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v140, CFSTR("DefaultAutoExposureCenterWindowSize"));
            v141 = v140;
            v138 = MEMORY[0x1E0C9AAB0];
            CFRelease(v141);
          }
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ExposurePointOfInterestWindowSize")), "floatValue");
          if (v142 > 0.0)
          {
            v491.height = (float)(v142 * 1.3333);
            v491.width = v142;
            v143 = CGSizeCreateDictionaryRepresentation(v491);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v143, CFSTR("DefaultAutoExposureTapWindowSize"));
            v144 = v143;
            v138 = MEMORY[0x1E0C9AAB0];
            CFRelease(v144);
          }
          v145 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("manualExposureSupported"));
          if (v145)
            v146 = v145;
          else
            v146 = v138;
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v146, CFSTR("ManualExposure"));
          if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("appliesSessionPresetMaxIntegrationTimeOverrideToActiveFormat")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, CFSTR("AppliesSessionPresetMaxIntegrationTimeOverrideToActiveFormat"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v93, "getProperty:error:", v340, 0), CFSTR("FocalLength"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v93, "getProperty:error:", v339, 0), CFSTR("LensAperture"));
          if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("softISPSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, 0x1E49329B8);
          if ((objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("singleFrameHighlightRecoverySupported")), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("singleFrameHighlightRecoverySupported")), "BOOLValue"))
          {
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, 0x1E4952918);
          }
          if ((objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("lowlightSingleFrameHighlightRecoverySupported")), "BOOLValue") & 1) != 0|| objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("lowlightSingleFrameHighlightRecoverySupported")), "BOOLValue"))
          {
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, 0x1E4952938);
          }
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("quadraQSubProcessingSupported")), 0x1E4952958);
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v138, CFSTR("WhiteBalance"));
          v147 = (void *)objc_msgSend(v93, "getProperty:error:", v326, 0);
          if (v147)
          {
            v148 = v147;
            DWORD2(v481[0]) = 0;
            *(_QWORD *)&v481[0] = 0;
            *(float *)v481 = (float)(int)objc_msgSend((id)objc_msgSend(v147, "objectForKeyedSubscript:", v319), "intValue")* 0.00024414;
            *((float *)v481 + 1) = (float)(int)objc_msgSend((id)objc_msgSend(v148, "objectForKeyedSubscript:", v318), "intValue")* 0.00024414;
            *((float *)v481 + 2) = (float)(int)objc_msgSend((id)objc_msgSend(v148, "objectForKeyedSubscript:", v317), "intValue")* 0.00024414;
            v149 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v481, 12);
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v149, CFSTR("DefaultWhiteBalanceGains"));

          }
          v150 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("manualWhiteBalanceSupported"));
          v151 = MEMORY[0x1E0C9AAB0];
          if (v150)
            v152 = v150;
          else
            v152 = MEMORY[0x1E0C9AAB0];
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v152, CFSTR("ManualWhiteBalance"));
          if ((int)FigCapturePlatformIdentifier() >= 3)
          {
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("HEVC"));
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("HEIF"));
            if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("HEVCPreferred")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("PrefersHEVC"));
          }
          if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("smartCameraSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("SmartCameraSupported"));
          if ((int)FigCapturePlatformIdentifier() >= 5)
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("GlobalToneMapping"));
          if (csu_deviceSupportsWideColor(v357, v101))
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("WideColor"));
          goto LABEL_240;
        }
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v93, "getProperty:error:", v340, 0), CFSTR("FocalLength"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v93, "getProperty:error:", v339, 0), CFSTR("LensAperture"));
        v151 = MEMORY[0x1E0C9AAB0];
        if (v137 <= 3)
        {
          if (v95 != 20)
          {
LABEL_240:
            if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("faceTrackingSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("FaceTracking"));
            if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("objectDetectionSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("ObjectsDetection"));
            if (v137 > 3)
              goto LABEL_249;
          }
          v153 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v93, "getProperty:error:", CFSTR("SupportedFormatsArray"), 0), "firstObject"), "objectForKeyedSubscript:", v322), "objectForKeyedSubscript:", v321);
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SecureMetadataCameraSupported")), 0x1E49525B8);
          if (v95 == 20)
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("AttentionDetectionSupported"));
          v154 = objc_msgSend(v153, "objectForKeyedSubscript:", v320);
          v151 = MEMORY[0x1E0C9AAB0];
          if (v154)
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4952598);
        }
LABEL_249:
        v155 = *(_DWORD *)(v357 + 8);
        if ((v155 > 0xD || ((1 << v155) & 0x3350) == 0)
          && objc_msgSend((id)objc_msgSend(v93, "supportedProperties"), "objectForKeyedSubscript:", v315)
          && objc_msgSend(v93, "getProperty:error:", v315, 0))
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("CameraCalibrationDataDeliverySupported"));
        }
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("hasFlash")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("Flash"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("autoFlashNormalizedSNRThreshold")), 0x1E49528F8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsSwitchOverParameters")), 0x1E49529B8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsStereoFusionZoomFactorRange")), 0x1E49529F8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsSlaveFrameRates")), 0x1E4952A18);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsBaseZoomFactorCalibrations")), 0x1E4952A38);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsBaseZoomFactorOverrides")), 0x1E4952A98);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsClientBaseZoomFactorsByPortType")), 0x1E4952AB8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsOISSISStereoFusionTeleMinIntegrationTimeDenominator")), 0x1E4952AD8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamsOISSISStereoFusionTeleMinGain")), 0x1E4952AF8);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageCaptureNowAfterAutofocusTimeout")), 0x1E4952B38);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageContrastBasedAutofocusTimeout")), 0x1E4952B58);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImagePhaseDetectionAutofocusTimeout")), 0x1E4952B78);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("minimumFocusDistance")), CFSTR("MinimumFocusDistance"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("VideoStabilizationAutoSelectionCinematicExtendedEnhancedDisabled")), CFSTR("VideoStabilizationAutoSelectionCinematicExtendedEnhancedDisabled"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("MainToSIFRSkipRatioFor60FPS")), CFSTR("MainToSIFRSkipRatioFor60FPS"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("MainToSIFRFrameRateRatio")), CFSTR("MainToSIFRFrameRateRatio"));
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("hasTorch")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("Torch"));
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("visionDataDeliverySupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v151, CFSTR("VisionDataDeliverySupported"));
        if ((unint64_t)objc_msgSend(*(id *)(v357 + 40), "count") >= 2)
        {
          v156 = (void *)-[FigCaptureSourceStreamsContainer switchOverZoomFactors](v357);
          if (objc_msgSend(v156, "count"))
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v156, CFSTR("BravoSwitchOverVideoZoomFactors"));
        }
        v157 = (void *)objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceFormats"));
        *(_OWORD *)type = 0u;
        v474 = 0u;
        v475 = 0u;
        v476 = 0u;
        v391 = (id)objc_msgSend(v157, "allValues");
        v158 = objc_msgSend(v391, "countByEnumeratingWithState:objects:count:", type, v481, 16);
        v159 = MEMORY[0x1E0C9AAB0];
        v400 = v158;
        if (!v158)
          goto LABEL_312;
        v362 = v93;
        v383 = (void *)v92;
        v366 = v88;
        LOBYTE(v160) = 0;
        LOBYTE(v88) = 0;
        v161 = 0;
        LOBYTE(v162) = 0;
        LOBYTE(v163) = 0;
        LOBYTE(v92) = 0;
        LOBYTE(v164) = 0;
        LOBYTE(v165) = 0;
        LOBYTE(v414) = 0;
        v396 = *(id *)v474;
        do
        {
          v166 = 0;
          do
          {
            if (*(id *)v474 != v396)
              objc_enumerationMutation(v391);
            v167 = *(void **)(*(_QWORD *)&type[8] + 8 * v166);
            if (v160)
            {
              v160 = 1;
              if ((v88 & 1) == 0)
                goto LABEL_267;
            }
            else
            {
              v160 = (int)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)&type[8] + 8 * v166), "objectForKeyedSubscript:", 0x1E49382F8), "intValue") > 0;
              if ((v88 & 1) == 0)
              {
LABEL_267:
                LODWORD(v88) = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938438), "BOOLValue");
                if ((v161 & 1) == 0)
                  goto LABEL_268;
                goto LABEL_272;
              }
            }
            LODWORD(v88) = 1;
            if ((v161 & 1) == 0)
            {
LABEL_268:
              v161 = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938458), "BOOLValue");
              if ((v162 & 1) != 0)
                goto LABEL_275;
              goto LABEL_273;
            }
LABEL_272:
            v161 = 1;
            if ((v162 & 1) != 0)
              goto LABEL_275;
LABEL_273:
            if ((objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938BD8), "BOOLValue") & 1) != 0
              || objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938CD8), "BOOLValue"))
            {
LABEL_275:
              v162 = 1;
              if ((v163 & 1) != 0)
                goto LABEL_276;
              goto LABEL_281;
            }
            v162 = 0;
            if ((v163 & 1) != 0)
            {
LABEL_276:
              v163 = 1;
              if ((v92 & 1) == 0)
                goto LABEL_277;
              goto LABEL_282;
            }
LABEL_281:
            v163 = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E49384B8), "BOOLValue");
            if ((v92 & 1) == 0)
            {
LABEL_277:
              LODWORD(v92) = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938198), "BOOLValue");
              if ((v164 & 1) == 0)
                goto LABEL_278;
              goto LABEL_283;
            }
LABEL_282:
            LODWORD(v92) = 1;
            if ((v164 & 1) == 0)
            {
LABEL_278:
              v164 = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("NightModeSupported")), "BOOLValue");
              if ((v165 & 1) != 0)
                goto LABEL_287;
              goto LABEL_284;
            }
LABEL_283:
            v164 = 1;
            if ((v165 & 1) != 0)
              goto LABEL_287;
LABEL_284:
            if ((objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E49386D8), "BOOLValue") & 1) != 0
              || (objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E49386F8), "BOOLValue") & 1) != 0
              || objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E4938718), "BOOLValue"))
            {
LABEL_287:
              v165 = 1;
              goto LABEL_288;
            }
            v165 = 0;
LABEL_288:
            if ((v414 & 1) != 0)
              v414 = 1;
            else
              v414 = objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", 0x1E49383B8), "BOOLValue");
            ++v166;
          }
          while (v400 != v166);
          v168 = objc_msgSend(v391, "countByEnumeratingWithState:objects:count:", type, v481, 16);
          v400 = v168;
        }
        while (v168);
        if (v160)
        {
          v159 = MEMORY[0x1E0C9AAB0];
          objc_msgSend(v383, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("RedEyeReduction"));
          v86 = 0x1E0CB3000;
          if ((v88 & 1) == 0)
            goto LABEL_297;
LABEL_305:
          objc_msgSend(v383, "setObject:forKeyedSubscript:", v159, 0x1E4936058);
          v93 = v362;
          v94 = v379;
          if ((v162 & 1) == 0)
            goto LABEL_306;
LABEL_298:
          objc_msgSend(v383, "setObject:forKeyedSubscript:", v159, 0x1E4938BD8);
          v88 = v366;
          if ((v163 & 1) == 0)
            goto LABEL_299;
LABEL_307:
          objc_msgSend(v383, "setObject:forKeyedSubscript:", v159, 0x1E4952538);
          if ((v92 & 1) == 0)
            goto LABEL_308;
LABEL_300:
          v92 = (uint64_t)v383;
          objc_msgSend(v383, "setObject:forKeyedSubscript:", v159, CFSTR("SIS"));
          if ((v164 & 1) == 0)
            goto LABEL_301;
LABEL_309:
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, 0x1E4952978);
          v101 = (void *)v346;
          if ((v165 & 1) == 0)
            goto LABEL_310;
LABEL_302:
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("VideoStabilization"));
          v85 = CFSTR("VideoMinFrameRate");
          if ((v414 & 1) == 0)
            goto LABEL_312;
LABEL_311:
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, 0x1E4952B98);
          goto LABEL_312;
        }
        v86 = 0x1E0CB3000uLL;
        v159 = MEMORY[0x1E0C9AAB0];
        if ((_DWORD)v88)
          goto LABEL_305;
LABEL_297:
        v93 = v362;
        v94 = v379;
        if (v162)
          goto LABEL_298;
LABEL_306:
        v88 = v366;
        if (v163)
          goto LABEL_307;
LABEL_299:
        if ((_DWORD)v92)
          goto LABEL_300;
LABEL_308:
        v92 = (uint64_t)v383;
        if (v164)
          goto LABEL_309;
LABEL_301:
        v101 = (void *)v346;
        if (v165)
          goto LABEL_302;
LABEL_310:
        v85 = CFSTR("VideoMinFrameRate");
        if (v414)
          goto LABEL_311;
LABEL_312:
        if (objc_msgSend(v94, "objectForKeyedSubscript:", v338))
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("Sphere"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("SphereVideo"));
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SphereVideoMaxFrameRate")), CFSTR("SphereVideoMaxFrameRate"));
          if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("sphereModeStillActivePreviewSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("SphereStillActivePreview"));
        }
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageISPChromaNoiseReductionSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, 0x1E4938418);
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageNoiseReductionAndFusionScheme")), 0x1E4952998);
        if (v387)
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("VideoPreviewHistogram"));
          if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("ProResSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("ProResSupported"));
        }
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ispChromaNoiseReductionForPairingDisabled")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, 0x1E4952B18);
        if (-[FigCaptureCameraParameters focalLengthCharacterizationForStream:](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "focalLengthCharacterizationForStream:", v93))
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v159, CFSTR("FocalLengthCharacterization"));
        }
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("multiPassIspMBNRSupported")), CFSTR("MultiPassIspMBNRSupported"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ispMBNRSupported")), CFSTR("IspMBNRSupported"));
        v169 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("stillImageDepthDataType"));
        if (v169)
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v169, CFSTR("StillImageDepthDataType"));
        if (-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](v357))
        {
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", -[FigCaptureSourceStreamsContainer zoomFactorsForDepth](v357), CFSTR("VideoZoomFactorsForDepthDataDelivery"));
          if (objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("SupportedSemanticSegmentationMatteURNs")), "count"))
          {
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("SupportedSemanticSegmentationMatteURNs")), CFSTR("SupportedSemanticSegmentationMatteURNs"));
          }
          objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("PortraitEffectsMatteMainImageDownscalingFactor")), "floatValue");
          if (v170 > 0.0)
            objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("PortraitEffectsMatteMainImageDownscalingFactor")), CFSTR("PortraitEffectsMatteMainImageDownscalingFactor"));
          v171 = objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("DepthDataDeliveryConfigurations"));
          if (v171)
          {
            v172 = (void *)v171;
            v173 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DemosaicedRawConfigurationSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DemosaicedRawConfigurationSupported")), CFSTR("DemosaicedRawConfigurationSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DCProcessingSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DCProcessingSupported")), CFSTR("DCProcessingSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("StillImageGGMSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("StillImageGGMSupported")), CFSTR("StillImageGGMSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("VideoSTFMetadataSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("VideoSTFMetadataSupported")), CFSTR("VideoSTFMetadataSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("FastModeSwitchingSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("FastModeSwitchingSupported")), CFSTR("FastModeSwitchingSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("CapturePipeliningSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("CapturePipeliningSupported")), CFSTR("CapturePipeliningSupported"));
            if (objc_msgSend((id)objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DeepFusionSupported")), "BOOLValue"))objc_msgSend(v173, "setObject:forKeyedSubscript:", objc_msgSend(v172, "objectForKeyedSubscript:", CFSTR("DeepFusionSupported")), CFSTR("DeepFusionSupported"));
            if (objc_msgSend(v173, "count"))
              objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v173, CFSTR("DepthDataDeliveryConfigurations"));
          }
        }
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("previewQualityAdjustedPhotoFilterRenderingSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("PreviewQualityAdjustedPhotoFilterRenderingSupported"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SpherePowerConsumption")), "objectForKeyedSubscript:", CFSTR("Lock")), CFSTR("PowerConsumptionInSphereModeLock"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SpherePowerConsumption")), "objectForKeyedSubscript:", CFSTR("Video")), CFSTR("PowerConsumptionInSphereModeVideo"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SpherePowerConsumption")), "objectForKeyedSubscript:", CFSTR("VideoHighRange")), CFSTR("PowerConsumptionInSphereModeVideoHighRange"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("SensorThermalLevelsByTemperature")), CFSTR("SensorThermalLevelsByTemperature"));
        v174 = objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("geometricDistortionCorrection")), "BOOLValue");
        v175 = MEMORY[0x1E0C9AAB0];
        if (v174)
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("GeometricDistortionCorrection"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrectionExpandsImageDimensions")), CFSTR("GeometricDistortionCorrectionExpandsImageDimensions"));
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("constituentPhotoCalibrationDataSupported")), CFSTR("ConstituentPhotoCalibrationData"));
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("videoZoomSmoothingSupported")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v175, CFSTR("VideoZoomSmoothingSupported"));
        if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("rawBufferCompandingDisabled")), "BOOLValue"))objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v175, CFSTR("RawBufferCompandingDisabled"));
        if (v387)
        {
          v176 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          if (objc_msgSend(v94, "objectForKeyedSubscript:", v332))
          {
            v177 = objc_msgSend(v93, "getProperty:error:", v332, 0);
            if (v177)
              objc_msgSend(v176, "addObjectsFromArray:", v177);
          }
          if (objc_msgSend(v94, "objectForKeyedSubscript:", v337))
            objc_msgSend(v176, "addObject:", v337);
          if (objc_msgSend(v94, "objectForKeyedSubscript:", v325))
            objc_msgSend(v176, "addObject:", v325);
          if (objc_msgSend(v94, "objectForKeyedSubscript:", v324))
            objc_msgSend(v176, "addObject:", v324);
          if (objc_msgSend(v94, "objectForKeyedSubscript:", v323))
            objc_msgSend(v176, "addObject:", v323);
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v176), CFSTR("VisionDataConfigurationAndRuntimeSupportedKeys"));
        }
        v178 = +[FigCaptureCameraParameters cinematicFramingVirtualCameraConfigurationForPortType:sensorIDString:](FigCaptureCameraParameters, "cinematicFramingVirtualCameraConfigurationForPortType:sensorIDString:", objc_msgSend(v93, "portType"), +[FigCaptureCameraParameters sensorIDStringFromModuleInfo:](FigCaptureCameraParameters, "sensorIDStringFromModuleInfo:", objc_msgSend(v93, "getProperty:error:", v336, 0)));
        if (v178)
          objc_msgSend((id)v92, "setObject:forKeyedSubscript:", v178, CFSTR("CinematicFramingVirtualCameraConfiguration"));
        if (BWDeviceIsiPhone())
          v179 = MGGetBoolAnswer();
        else
          v179 = 0;
        objc_msgSend((id)v92, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithBool:", v179), CFSTR("DockedTrackingSupported"));
        v180 = (id)v92;
        csu_createMultiStreamSourceFormatsArrayAndAVCompressionSettingsDict(v357, v88, v101, v180, &v469, &v461, &v465);
        if (objc_msgSend((id)objc_msgSend(v375, "supportedProperties"), "objectForKeyedSubscript:", v335))
          v181 = objc_msgSend(v375, "getProperty:error:", v335, 0);
        else
          v181 = 0;
        v182 = objc_alloc(MEMORY[0x1E0C99E08]);
        v183 = (void *)v469;
        v184 = (void *)v461;
        v185 = (void *)objc_msgSend(v182, "initWithObjectsAndKeys:", v370, CFSTR("MediaType"), v180, CFSTR("Attributes"), (_QWORD)v469, CFSTR("Formats"), (_QWORD)v461, CFSTR("AVCaptureSessionPresetCompressionSettings"), v181, CFSTR("WhiteBalanceCalibrations"), 0);
        objc_msgSend(v185, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("synchronizedStreamUniqueIDs")), CFSTR("SynchronizedStreamUniqueIDs"));
        objc_msgSend(v185, "setObject:forKeyedSubscript:", objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("unsynchronizedStreamUniqueIDs")), CFSTR("UnsynchronizedStreamUniqueIDs"));
        objc_msgSend(v185, "setObject:forKeyedSubscript:", (_QWORD)v465, CFSTR("MissingFormats"));
        if (objc_msgSend(*(id *)(v357 + 40), "count") == 1
          && objc_msgSend((id)objc_msgSend(v375, "supportedProperties"), "objectForKeyedSubscript:", v331))
        {
          objc_msgSend(v185, "setObject:forKeyedSubscript:", objc_msgSend(v375, "getProperty:error:", v331, 0), CFSTR("VibeMitigationInfo"));
        }
        v359 = v185;
        v186 = (void *)objc_msgSend(v375, "getPropertyIfSupported:error:", v334, 0);
        if (objc_msgSend(v186, "BOOLValue"))
          objc_msgSend(v359, "setObject:forKeyedSubscript:", v186, CFSTR("HasAutoFocusPositionSensor"));

        v87 = v349;
        if (v359)
        {
          if ((unint64_t)objc_msgSend(*(id *)(v357 + 40), "count") < 2)
          {
            v203 = objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("uniqueID"));
            objc_msgSend(v398, "objectForKeyedSubscript:", v203);
            v204 = v359;
            objc_msgSend(v398, "setObject:forKeyedSubscript:", v359, v203);
          }
          else
          {
            v351 = (id)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("Formats"));
            v187 = objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("SynchronizedStreamUniqueIDs"));
            v188 = (void *)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("UnsynchronizedStreamUniqueIDs"));
            if (objc_msgSend(v188, "count"))
              v189 = v188;
            else
              v189 = (void *)v187;
            v451 = 0u;
            v452 = 0u;
            v453 = 0u;
            v454 = 0u;
            v388 = v189;
            v190 = objc_msgSend(v189, "countByEnumeratingWithState:objects:count:", &v451, v481, 16);
            if (v190)
            {
              v191 = v190;
              v192 = 0;
              v193 = 0;
              v194 = *(_QWORD *)v452;
              v195 = -1;
              do
              {
                for (ii = 0; ii != v191; ++ii)
                {
                  if (*(_QWORD *)v452 != v194)
                    objc_enumerationMutation(v388);
                  v197 = (void *)objc_msgSend((id)objc_msgSend(v398, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v451 + 1) + 8 * ii)), "objectForKeyedSubscript:", CFSTR("Attributes"));
                  v198 = objc_msgSend((id)objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrection")), "BOOLValue");
                  v199 = objc_msgSend((id)objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("GeometricDistortionCorrectionExpandsImageDimensions")), "BOOLValue");
                  if (objc_msgSend((id)objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
                  {
                    v200 = objc_msgSend((id)objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("MinimumFocusDistance")), "integerValue");
                    v201 = v195 > v200 || v195 == -1;
                    v202 = v201 ? v200 : v195;
                    if (v200 >= 1)
                      v195 = v202;
                  }
                  v193 |= v198;
                  v192 |= v199;
                }
                v191 = objc_msgSend(v388, "countByEnumeratingWithState:objects:count:", &v451, v481, 16);
              }
              while (v191);
              if ((v193 & 1) != 0)
                objc_msgSend((id)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("Attributes")), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithBool:", 1), CFSTR("GeometricDistortionCorrection"));
              v85 = CFSTR("VideoMinFrameRate");
              if ((v192 & 1) != 0)
                objc_msgSend((id)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("Attributes")), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithBool:", 1), CFSTR("GeometricDistortionCorrectionExpandsImageDimensions"));
            }
            else
            {
              v195 = -1;
            }
            v205 = CFSTR("DeviceType");
            objc_msgSend((id)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("Attributes")), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v86 + 2024), "numberWithInteger:", v195), CFSTR("MinimumFocusDistance"));
            v352 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            v447 = 0u;
            v448 = 0u;
            v449 = 0u;
            v450 = 0u;
            v354 = objc_msgSend(v351, "countByEnumeratingWithState:objects:count:", &v447, &v477, 16);
            if (v354)
            {
              v353 = *(_QWORD *)v448;
              do
              {
                v206 = 0;
                do
                {
                  if (*(_QWORD *)v448 != v353)
                    objc_enumerationMutation(v351);
                  v355 = v206;
                  v207 = *(void **)(*((_QWORD *)&v447 + 1) + 8 * v206);
                  v397 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array", v311);
                  v208 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v443 = 0u;
                  v444 = 0u;
                  v445 = 0u;
                  v446 = 0u;
                  v415 = v207;
                  v401 = objc_msgSend(v388, "countByEnumeratingWithState:objects:count:", &v443, type, 16);
                  if (!v401)
                  {
                    v209 = 0;
                    v392 = 0;
                    goto LABEL_485;
                  }
                  v367 = 0;
                  v392 = 0;
                  v209 = 0;
                  v210 = *(_QWORD *)v444;
                  v371 = *(_QWORD *)v444;
                  do
                  {
                    for (jj = 0; jj != v401; ++jj)
                    {
                      v212 = v85;
                      if (*(_QWORD *)v444 != v210)
                        objc_enumerationMutation(v388);
                      v213 = *(_QWORD *)(*((_QWORD *)&v443 + 1) + 8 * jj);
                      v214 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v398, "objectForKeyedSubscript:", v213, v311, v312), "objectForKeyedSubscript:", CFSTR("Attributes")), "objectForKeyedSubscript:", v205), "intValue");
                      v215 = (void *)objc_msgSend((id)objc_msgSend(v398, "objectForKeyedSubscript:", v213), "objectForKeyedSubscript:", CFSTR("Formats"));
                      v216 = v215;
                      switch(v214)
                      {
                        case 20:
LABEL_422:
                          if (objc_msgSend(v215, "count") != 1)
                          {
                            v306 = (void *)MEMORY[0x1E0C99DA0];
                            v307 = *MEMORY[0x1E0C99768];
                            v308 = CFSTR("Only one stream format is currently supported on the IR camera.");
                            goto LABEL_581;
                          }
                          v85 = v212;
                          v217 = objc_msgSend(v216, "firstObject");
                          if (v217)
                          {
                            v209 = (void *)v217;
                            objc_msgSend(v397, "addObject:", v217);
                            v86 = 0x1E0CB3000;
                            continue;
                          }
                          v231 = v213;
                          v232 = v205;
                          v442 = 0;
                          v425[4] = OS_LOG_TYPE_DEFAULT;
                          v233 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          v234 = v442;
                          if (os_log_type_enabled(v233, v425[4]))
                            v235 = v234;
                          else
                            v235 = v234 & 0xFFFFFFFE;
                          if (v235)
                          {
                            v236 = objc_msgSend(v415, "objectForKeyedSubscript:", 0x1E49375B8);
                            LODWORD(v483[0]) = 136315650;
                            *(_QWORD *)((char *)v483 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                            WORD6(v483[0]) = 2114;
                            *(_QWORD *)((char *)v483 + 14) = v236;
                            WORD3(v483[1]) = 2114;
                            *((_QWORD *)&v483[1] + 1) = v231;
                            LODWORD(v312) = 32;
                            v311 = v483;
                            _os_log_send_and_compose_impl();
                          }
                          v86 = 0x1E0CB3000;
                          v205 = v232;
                          v367 = 1;
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          v209 = 0;
                          v207 = v415;
                          goto LABEL_467;
                        case 10:
                          if (v215)
                          {
                            objc_msgSend(v397, "addObjectsFromArray:", v215);
                            v392 = v216;
                            v86 = 0x1E0CB3000;
                          }
                          else
                          {
                            v237 = v213;
                            v238 = v205;
                            v442 = 0;
                            v425[4] = OS_LOG_TYPE_DEFAULT;
                            v239 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            v240 = v442;
                            if (os_log_type_enabled(v239, v425[4]))
                              v241 = v240;
                            else
                              v241 = v240 & 0xFFFFFFFE;
                            if (v241)
                            {
                              v242 = objc_msgSend(v415, "objectForKeyedSubscript:", 0x1E49375B8);
                              LODWORD(v483[0]) = 136315650;
                              *(_QWORD *)((char *)v483 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                              WORD6(v483[0]) = 2114;
                              *(_QWORD *)((char *)v483 + 14) = v242;
                              WORD3(v483[1]) = 2114;
                              *((_QWORD *)&v483[1] + 1) = v237;
                              LODWORD(v312) = 32;
                              v311 = v483;
                              _os_log_send_and_compose_impl();
                            }
                            v86 = 0x1E0CB3000;
                            v205 = v238;
                            v367 = 1;
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            v392 = 0;
                            v207 = v415;
                            v210 = v371;
                          }
LABEL_467:
                          v85 = v212;
                          continue;
                        case 5:
                          goto LABEL_422;
                      }
                      v376 = v214;
                      v363 = v213;
                      v380 = jj;
                      v384 = v209;
                      memset(v483, 0, sizeof(v483));
                      v484 = 0u;
                      v485 = 0u;
                      v218 = objc_msgSend(v215, "countByEnumeratingWithState:objects:count:", v483, v482, 16);
                      if (v218)
                      {
                        v219 = v218;
                        v220 = **(_QWORD **)&v483[1];
LABEL_429:
                        v221 = 0;
                        while (1)
                        {
                          if (**(_QWORD **)&v483[1] != v220)
                            objc_enumerationMutation(v216);
                          v222 = *(void **)(*((_QWORD *)&v483[0] + 1) + 8 * v221);
                          v223 = (void *)objc_msgSend(v222, "objectForKeyedSubscript:", 0x1E4938998);
                          v224 = (void *)objc_msgSend(v222, "objectForKeyedSubscript:", 0x1E4937C78);
                          v225 = v207;
                          v207 = v415;
                          if (objc_msgSend((id)objc_msgSend(v225, "objectForKeyedSubscript:", 0x1E49375B8), "isEqualToString:", objc_msgSend(v223, "objectForKeyedSubscript:", 0x1E49375B8)))
                          {
                            v207 = v415;
                            if ((objc_msgSend((id)objc_msgSend(v415, "objectForKeyedSubscript:", v409), "isEqual:", objc_msgSend(v223, "objectForKeyedSubscript:", v409)) & 1) != 0)break;
                          }
                          v226 = v207;
                          v207 = v415;
                          if (objc_msgSend((id)objc_msgSend(v226, "objectForKeyedSubscript:", 0x1E49375B8), "isEqualToString:", objc_msgSend(v224, "objectForKeyedSubscript:", 0x1E49375B8)))
                          {
                            v207 = v415;
                            v223 = v224;
                            if ((objc_msgSend((id)objc_msgSend(v415, "objectForKeyedSubscript:", v409), "isEqual:", objc_msgSend(v224, "objectForKeyedSubscript:", v409)) & 1) != 0)break;
                          }
                          if (objc_msgSend((id)objc_msgSend(v207, "objectForKeyedSubscript:", 0x1E49375B8), "isEqualToString:", objc_msgSend(v222, "objectForKeyedSubscript:", 0x1E49375B8)))
                          {
                            v223 = v222;
                            if ((objc_msgSend((id)objc_msgSend(v207, "objectForKeyedSubscript:", v409), "isEqual:", objc_msgSend(v222, "objectForKeyedSubscript:", v409)) & 1) != 0)break;
                          }
                          if (v219 == ++v221)
                          {
                            v219 = objc_msgSend(v216, "countByEnumeratingWithState:objects:count:", v483, v482, 16);
                            if (v219)
                              goto LABEL_429;
                            goto LABEL_440;
                          }
                        }
                      }
                      else
                      {
LABEL_440:
                        v223 = 0;
                      }
                      v227 = BWCaptureDevicePositionAndDeviceTypeToPortType(objc_msgSend((id)objc_msgSend((id)objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("Attributes")), "objectForKeyedSubscript:", CFSTR("Position")), "intValue"), v376);
                      if (v223)
                      {
                        v228 = (void *)v227;
                        objc_msgSend(v397, "addObject:", v223);
                        v229 = (void *)objc_msgSend(v223, "objectForKeyedSubscript:", 0x1E4938018);
                        v85 = CFSTR("VideoMinFrameRate");
                        v86 = 0x1E0CB3000uLL;
                        if (objc_msgSend(v228, "isEqual:", v356))
                          v230 = objc_msgSend(*(id *)(v357 + 48), "count") != 0;
                        else
                          v230 = 0;
                        jj = v380;
                        v205 = CFSTR("DeviceType");
                        if (!objc_msgSend(v229, "count") || v230)
                          goto LABEL_478;
                        v247 = *(void **)(v357 + 48);
                        if (v247)
                        {
                          objc_msgSend((id)objc_msgSend(v247, "objectForKeyedSubscript:", v228), "floatValue");
                          v249 = v248;
                          v210 = v371;
                          if (v248 == 0.0)
                          {
LABEL_479:
                            v209 = v384;
                            continue;
                          }
                        }
                        else
                        {
                          v249 = 1.0;
                          v210 = v371;
                        }
                        v441 = 0u;
                        v440 = 0u;
                        v439 = 0u;
                        v438 = 0u;
                        v250 = objc_msgSend(v229, "countByEnumeratingWithState:objects:count:", &v438, &v469, 16);
                        if (v250)
                        {
                          v251 = v250;
                          v252 = *(_QWORD *)v439;
                          do
                          {
                            for (kk = 0; kk != v251; ++kk)
                            {
                              if (*(_QWORD *)v439 != v252)
                                objc_enumerationMutation(v229);
                              objc_msgSend(*(id *)(*((_QWORD *)&v438 + 1) + 8 * kk), "floatValue");
                              *(float *)&v255 = v249 * v254;
                              objc_msgSend(v208, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v255));
                            }
                            v251 = objc_msgSend(v229, "countByEnumeratingWithState:objects:count:", &v438, &v469, 16);
                          }
                          while (v251);
                          v205 = CFSTR("DeviceType");
LABEL_478:
                          v209 = v384;
                          v210 = v371;
                          continue;
                        }
                        goto LABEL_479;
                      }
                      v442 = 0;
                      v425[4] = OS_LOG_TYPE_DEFAULT;
                      v243 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      v244 = v442;
                      if (os_log_type_enabled(v243, v425[4]))
                        v245 = v244;
                      else
                        v245 = v244 & 0xFFFFFFFE;
                      v85 = CFSTR("VideoMinFrameRate");
                      v86 = 0x1E0CB3000;
                      if (v245)
                      {
                        v246 = objc_msgSend(v415, "objectForKeyedSubscript:", 0x1E49375B8);
                        LODWORD(v483[0]) = 136315650;
                        *(_QWORD *)((char *)v483 + 4) = "csu_reconcileDerivedSourceInfoDictionaryAcrossUnderlyingStreams";
                        WORD6(v483[0]) = 2114;
                        *(_QWORD *)((char *)v483 + 14) = v246;
                        WORD3(v483[1]) = 2114;
                        *((_QWORD *)&v483[1] + 1) = v363;
                        LODWORD(v312) = 32;
                        v311 = v483;
                        _os_log_send_and_compose_impl();
                      }
                      v205 = CFSTR("DeviceType");
                      v209 = v384;
                      v210 = v371;
                      jj = v380;
                      v367 = 1;
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      v207 = v415;
                    }
                    v401 = objc_msgSend(v388, "countByEnumeratingWithState:objects:count:", &v443, type, 16);
                  }
                  while (v401);
                  if ((v367 & 1) != 0)
                  {
                    objc_msgSend(v352, "addObject:", v207);
                    goto LABEL_559;
                  }
LABEL_485:
                  v437 = 0u;
                  v436 = 0u;
                  v435 = 0u;
                  v434 = 0u;
                  v256 = objc_msgSend(v397, "countByEnumeratingWithState:objects:count:", &v434, &v465, 16, v311);
                  if (v256)
                  {
                    v257 = v256;
                    v258 = 0;
                    v385 = 0;
                    v259 = 0;
                    v364 = 0;
                    v377 = 0;
                    v381 = 0;
                    v402 = *(_QWORD *)v435;
                    v368 = -1;
                    v372 = 1;
                    v260 = 0.0;
                    v261 = 0x7FFFFFFFLL;
                    v262 = 3.4028e38;
                    do
                    {
                      for (mm = 0; mm != v257; ++mm)
                      {
                        if (*(_QWORD *)v435 != v402)
                          objc_enumerationMutation(v397);
                        v264 = *(void **)(*((_QWORD *)&v434 + 1) + 8 * mm);
                        if (v264 != v209
                          || objc_msgSend((id)objc_msgSend(v415, "objectForKeyedSubscript:", 0x1E4937D98), "count"))
                        {
                          v265 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", v85), "intValue");
                          v266 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
                          v258 = (int)v258 <= v265 ? v265 : v258;
                          v261 = (int)v261 >= v266 ? v266 : v261;
                          if (v264 != v209 && (objc_msgSend(v392, "containsObject:", v264) & 1) == 0)
                          {
                            v267 = v209;
                            objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", v394), "floatValue");
                            v269 = v268;
                            v270 = objc_msgSend(v264, "objectForKeyedSubscript:", 0x1E4937CB8);
                            v271 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", v358), "BOOLValue");
                            v364 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", 0x1E49383B8), "BOOLValue");
                            v272 = (void *)objc_msgSend(v264, "objectForKeyedSubscript:", 0x1E4937D18);
                            if (v272)
                            {
                              v273 = objc_msgSend(v272, "intValue");
                              v274 = v368;
                              if (v368 == -1)
                                v274 = v273;
                              v368 = v274;
                            }
                            v372 &= v271;
                            v275 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", 0x1E49383D8), "intValue");
                            if (v275)
                              v276 = v275;
                            else
                              v276 = v377;
                            v377 = v276;
                            v277 = objc_msgSend((id)objc_msgSend(v264, "objectForKeyedSubscript:", 0x1E49383F8), "intValue");
                            v278 = v381;
                            if (v277)
                              v278 = v277;
                            v381 = v278;
                            v279 = v260 < v269;
                            if (v260 < v269)
                              v260 = v269;
                            v280 = v385;
                            if (v279)
                              v280 = v270;
                            v385 = v280;
                            if (v262 > v269)
                            {
                              v262 = v269;
                              v259 = v270;
                            }
                            v85 = CFSTR("VideoMinFrameRate");
                            v209 = v267;
                          }
                        }
                      }
                      v257 = objc_msgSend(v397, "countByEnumeratingWithState:objects:count:", &v434, &v465, 16);
                    }
                    while (v257);
                  }
                  else
                  {
                    v258 = 0;
                    v385 = 0;
                    v259 = 0;
                    v364 = 0;
                    v377 = 0;
                    v381 = 0;
                    v368 = -1;
                    v372 = 1;
                    v260 = 0.0;
                    v261 = 0x7FFFFFFFLL;
                    v262 = 3.4028e38;
                  }
                  v86 = 0x1E0CB3000uLL;
                  objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v258), v85);
                  objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v261), CFSTR("VideoMaxFrameRate"));
                  *(float *)&v281 = v260;
                  objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v281), v394);
                  v282 = MEMORY[0x1E0C9AAB0];
                  if ((v372 & 1) != 0)
                    v283 = MEMORY[0x1E0C9AAB0];
                  else
                    v283 = 0;
                  objc_msgSend(v415, "setObject:forKeyedSubscript:", v283, v358);
                  if ((v364 & 1) != 0)
                    v284 = v282;
                  else
                    v284 = 0;
                  objc_msgSend(v415, "setObject:forKeyedSubscript:", v284, 0x1E49383B8);
                  if (v368 != -1)
                    objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"), 0x1E4937D18);
                  if (v377 >= 1)
                    objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"), 0x1E49383D8);
                  if (v381 >= 1)
                    objc_msgSend(v415, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"), 0x1E49383F8);
                  if (v385)
                    objc_msgSend(v415, "setObject:forKeyedSubscript:", v385, 0x1E4937CB8);
                  v403 = v259;
                  if (objc_msgSend(v208, "count"))
                    objc_msgSend(v415, "setObject:forKeyedSubscript:", v208, 0x1E4938018);
                  else
                    objc_msgSend(v415, "removeObjectForKey:", 0x1E4938018);
                  v285 = (void *)objc_msgSend(v415, "objectForKeyedSubscript:", 0x1E4937D98);
                  v430 = 0u;
                  v431 = 0u;
                  v432 = 0u;
                  v433 = 0u;
                  v286 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v430, &v461, 16);
                  if (v286)
                  {
                    v287 = v286;
                    v288 = *(_QWORD *)v431;
                    do
                    {
                      for (nn = 0; nn != v287; ++nn)
                      {
                        if (*(_QWORD *)v431 != v288)
                          objc_enumerationMutation(v285);
                        v290 = *(void **)(*((_QWORD *)&v430 + 1) + 8 * nn);
                        v291 = objc_msgSend((id)objc_msgSend(v290, "objectForKeyedSubscript:", v85), "intValue");
                        v292 = objc_msgSend((id)objc_msgSend(v290, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
                        if ((int)v258 <= v291)
                          v258 = v291;
                        else
                          v258 = v258;
                        if ((int)v261 >= v292)
                          v261 = v292;
                        else
                          v261 = v261;
                      }
                      v287 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v430, &v461, 16);
                    }
                    while (v287);
                  }
                  v429 = 0u;
                  v428 = 0u;
                  v427 = 0u;
                  v426 = 0u;
                  v293 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v426, &v457, 16);
                  if (v293)
                  {
                    v294 = v293;
                    v295 = *(_QWORD *)v427;
                    do
                    {
                      for (i1 = 0; i1 != v294; ++i1)
                      {
                        if (*(_QWORD *)v427 != v295)
                          objc_enumerationMutation(v285);
                        v297 = *(void **)(*((_QWORD *)&v426 + 1) + 8 * i1);
                        objc_msgSend(v297, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v258), v85);
                        objc_msgSend(v297, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v261), CFSTR("VideoMaxFrameRate"));
                        *(float *)&v298 = v262;
                        objc_msgSend(v297, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v298), v394);
                        if (v403)
                          objc_msgSend(v297, "setObject:forKeyedSubscript:", v403, 0x1E4937CB8);
                      }
                      v294 = objc_msgSend(v285, "countByEnumeratingWithState:objects:count:", &v426, &v457, 16);
                    }
                    while (v294);
                  }
LABEL_559:
                  v206 = v355 + 1;
                  v205 = CFSTR("DeviceType");
                }
                while (v355 + 1 != v354);
                v354 = objc_msgSend(v351, "countByEnumeratingWithState:objects:count:", &v447, &v477, 16);
              }
              while (v354);
            }
            if (objc_msgSend(v352, "count", v311))
            {
              objc_msgSend(v351, "removeObjectsInArray:", v352);
              v299 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend(v359, "objectForKeyedSubscript:", CFSTR("MissingFormats")));
              memset(v483, 0, sizeof(v483));
              v484 = 0u;
              v485 = 0u;
              v300 = objc_msgSend(v352, "countByEnumeratingWithState:objects:count:", v483, v482, 16);
              if (v300)
              {
                v301 = v300;
                v302 = **(_QWORD **)&v483[1];
                do
                {
                  for (i2 = 0; i2 != v301; ++i2)
                  {
                    if (**(_QWORD **)&v483[1] != v302)
                      objc_enumerationMutation(v352);
                    objc_msgSend(v299, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v483[0] + 1) + 8 * i2), "objectForKeyedSubscript:", 0x1E49375B8));
                  }
                  v301 = objc_msgSend(v352, "countByEnumeratingWithState:objects:count:", v483, v482, 16);
                }
                while (v301);
              }
              objc_msgSend(v359, "setObject:forKeyedSubscript:", v299, CFSTR("MissingFormats"));
            }
            v87 = v349;
            v204 = v359;
          }
          objc_msgSend(v330, "addObject:", v204);

        }
LABEL_573:
        ++v87;
      }
      while (v87 != v347);
      v304 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v416, v455, 16);
      v347 = v304;
    }
    while (v304);
  }

  return v330;
}

uint64_t FigCaptureSourceDeviceTypeToShortString(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d (%d)"), a1, a2);
}

uint64_t FigCaptureSourcePreprocessVideoDeviceDict(void *a1, void *a2)
{
  void *v4;
  __CFString *v5;
  int v6;
  uint64_t result;
  __CFString **v8;
  const __CFString *v9;
  int v10;
  __CFString **v11;
  BOOL v12;
  void *v13;
  const __CFAllocator *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  CFPropertyListRef v19;
  const __CFString *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  unsigned int v25;
  const __CFString *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[3];
  _QWORD v36[2];
  _QWORD v37[4];

  v37[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("baseCaptureDeviceUniqueName"));
  v5 = (__CFString *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("uniqueName"));
  if ((-[__CFString hasPrefix:](v5, "hasPrefix:", CFSTR("Front")) & 1) != 0)
    v6 = 2;
  else
    v6 = -[__CFString hasPrefix:](v5, "hasPrefix:", CFSTR("Back"));
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Camera"));
  v26 = v5;
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v8 = kFigCaptureVideoSourceUniqueID_BackWide;
LABEL_6:
    v9 = *v8;
    v10 = 2;
LABEL_22:
    v21 = v10;
    goto LABEL_23;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Telephoto Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:2");
    v10 = 3;
    goto LABEL_22;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Ultra Wide Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v11 = kFigCaptureVideoSourceUniqueID_BackSuperWide;
LABEL_11:
    v9 = *v11;
    v10 = 7;
    goto LABEL_22;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Time of Flight Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1");
    v6 = 1;
    v10 = 10;
    goto LABEL_22;
  }
  if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Dual Camera")))
  {
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:3");
    v37[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0");
    v37[1] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:2");
    result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v37, 2);
    v22 = result;
    v23 = 0;
    v10 = 4;
    goto LABEL_22;
  }
  if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Dual Wide Camera")))
  {
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:6");
    v36[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0");
    v36[1] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:5");
    result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v36, 2);
    v22 = result;
    v23 = 0;
    v10 = 8;
    goto LABEL_22;
  }
  if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back Triple Camera")))
  {
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:7");
    v35[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0");
    v35[1] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:2");
    v35[2] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:5");
    result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 3);
    v22 = result;
    v23 = 0;
    v10 = 9;
    goto LABEL_22;
  }
  if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Back LiDAR Depth Camera")))
  {
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:9");
    v34[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0");
    v34[1] = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1");
    result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v34, 2);
    v22 = 0;
    v23 = result;
    v10 = 13;
    goto LABEL_22;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v8 = kFigCaptureVideoSourceUniqueID_FrontWide;
    goto LABEL_6;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Ultra Wide Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v11 = kFigCaptureVideoSourceUniqueID_FrontSuperWide;
    goto LABEL_11;
  }
  result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Virtual Camera"));
  if ((_DWORD)result)
  {
    v22 = 0;
    v23 = 0;
    v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:1");
    v21 = 11;
    v20 = CFSTR("Front Camera");
  }
  else
  {
    result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Infrared Camera"));
    if ((_DWORD)result)
    {
      v22 = 0;
      v23 = 0;
      v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:99");
      v10 = 5;
      goto LABEL_22;
    }
    if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front TrueDepth Camera")))
    {
      v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:4");
      v33[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:1");
      v33[1] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:99");
      result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 2);
      v22 = result;
      v23 = 0;
      v10 = 6;
      goto LABEL_22;
    }
    if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Virtual TrueDepth Camera")))
    {
      v9 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:4");
      v32[0] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:1");
      v32[1] = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:99");
      result = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v32, 2);
      v22 = result;
      v23 = 0;
      v21 = 12;
      v20 = CFSTR("Front TrueDepth Camera");
    }
    else
    {
      result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Metadata Camera"));
      if ((_DWORD)result)
      {
        v22 = 0;
        v23 = 0;
        v9 = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1");
        v10 = 17;
        goto LABEL_22;
      }
      result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Virtual Metadata Camera"));
      if (!(_DWORD)result)
      {
        result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Ultra Wide Metadata Camera"));
        if ((_DWORD)result)
        {
          v22 = 0;
          v23 = 0;
          v9 = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:2");
          v10 = 19;
        }
        else
        {
          result = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("Front Infrared Metadata Camera"));
          if (!(_DWORD)result)
            return result;
          v22 = 0;
          v23 = 0;
          v9 = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:3");
          v10 = 20;
        }
        goto LABEL_22;
      }
      v22 = 0;
      v23 = 0;
      v9 = CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1");
      v21 = 18;
      v20 = CFSTR("Front Metadata Camera");
    }
  }
  v26 = v20;
LABEL_23:
  v24 = v9;
  v25 = v6;
  if (v9)
    v12 = v6 == 0;
  else
    v12 = 1;
  if (!v12)
  {
    if (v4)
    {
      v13 = 0;
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
        if (result)
        {
          v15 = result;
          v16 = *(_QWORD *)v28;
          while (2)
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v28 != v16)
                objc_enumerationMutation(a2);
              v18 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v17);
              result = objc_msgSend(v4, "isEqualToString:", objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("uniqueName")));
              if ((result & 1) != 0)
              {
                v13 = v18;
                goto LABEL_39;
              }
              ++v17;
            }
            while (v15 != v17);
            result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
            v15 = result;
            if (result)
              continue;
            break;
          }
        }
LABEL_39:
        if (!v13)
          break;
        v19 = (id)CFPropertyListCreateDeepCopy(v14, v13, 1uLL);
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        objc_msgSend(a1, "removeAllObjects");
        objc_msgSend(a1, "addEntriesFromDictionary:", v19);
        v4 = (void *)objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("baseCaptureDeviceUniqueName"));
        if (!v4)
          goto LABEL_41;
      }
    }
    else
    {
LABEL_41:
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v26, CFSTR("localizedName"));
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v24, CFSTR("uniqueID"));
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v24, CFSTR("modelID"));
      objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v21), CFSTR("deviceType"));
      objc_msgSend(a1, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25), CFSTR("position"));
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v22, CFSTR("synchronizedStreamUniqueIDs"));
      return objc_msgSend(a1, "setObject:forKeyedSubscript:", v23, CFSTR("unsynchronizedStreamUniqueIDs"));
    }
  }
  return result;
}

void FigCaptureSourceCreateSystemStyleEnabledStorage()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  v12[0] = 0x1E493D4D8;
  v12[1] = 0x1E493D4F8;
  v12[2] = 0x1E493D5F8;
  v0 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 3);
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v8;
    v5 = MEMORY[0x1E0C9AAB0];
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v0);
        objc_msgSend(v1, "setObject:forKeyedSubscript:", v5, *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v3 != v6);
      v3 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v3);
  }
  CFPreferencesSetValue(CFSTR("systemstyle-enabled"), v1, CFSTR("com.apple.cameracapture"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

uint64_t csu_postSourceInfoArrayChangedNotificationIfNecessary(void *a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const char *CStringPtr;

  pthread_mutex_lock((pthread_mutex_t *)gCaptureSourceBackingsLock);
  gSourceInfoArrayChanged = 1;
  v2 = gCaptureSourceBackings;
  if (objc_msgSend(a1, "count"))
    -[FigCaptureSourceBackings updateSourceInfoDictionariesWithEntriesByDeviceIDs:](gCaptureSourceBackings, a1);
  result = pthread_mutex_unlock((pthread_mutex_t *)gCaptureSourceBackingsLock);
  if (v2)
  {
    if (dword_1ECFE9B90)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CStringPtr = CFStringGetCStringPtr(CFSTR("SourceInfoArrayChanged"), 0x8000100u);
    return notify_post(CStringPtr);
  }
  return result;
}

void FigCaptureCreateSourceInfoArrayFromDeviceAndGenericPlist(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  FigCaptureFlatPlist *v5;
  char v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  const __CFString *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  id v29;
  const opaqueCMFormatDescription *v30;
  const opaqueCMFormatDescription *v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  float v44;
  int v45;
  void *v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  float v58;
  int v59;
  int v60;
  int v61;
  float v62;
  int IsFullRange;
  int v64;
  unsigned int v66;
  unsigned int v68;
  void *v69;
  void *v70;
  int v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  int v77;
  char v78;
  void *v79;
  int v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t k;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  id obj;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  void *v114;
  id v115;
  char v116;
  void *v117;
  FigCaptureFlatPlist *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  char v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _QWORD v154[4];
  _BYTE v155[128];
  _BYTE v156[128];
  _BYTE v157[128];
  uint64_t v158;
  int v159;
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  v5 = FigCaptureCFCreatePropertyListForModel((uint64_t)CFSTR("AVCaptureSession.plist"), CFSTR("iOS"), 0);
  if (!v5)
  {
    FigDebugAssert3();
    goto LABEL_185;
  }
  v145 = 0;
  v6 = FigCaptureExternalCameraReplacesBuiltIn(&v145);
  v109 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v141 = 0u;
  v142 = 0u;
  v143 = 0u;
  v144 = 0u;
  obj = (id)objc_msgSend(a1, "streams");
  v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v156, 16);
  if (!v111)
    goto LABEL_181;
  v110 = *(_QWORD *)v142;
  v126 = *MEMORY[0x1E0CA9040];
  v106 = *MEMORY[0x1E0D07850];
  v105 = *MEMORY[0x1E0D07448];
  v104 = *MEMORY[0x1E0D07858];
  v103 = *MEMORY[0x1E0D076E8];
  v7 = MEMORY[0x1E0C9AAB0];
  v118 = v5;
  v108 = a1;
  v107 = v6;
  do
  {
    for (i = 0; i != v111; ++i)
    {
      if (*(_QWORD *)v142 != v110)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v141 + 1) + 8 * i);
      v10 = objc_msgSend(v9, "getProperty:error:", CFSTR("UniqueID"), 0);
      if (v10)
      {
        v11 = v10;
        v112 = i;
        v113 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v13 = v12;
        if ((v6 & 1) != 0)
        {
          if (v145)
            v14 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:1");
          else
            v14 = CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0");
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("UniqueID"));
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, CFSTR("ModelID"));
          objc_msgSend(v13, "setObject:forKeyedSubscript:", CFSTR("Apple Inc."), CFSTR("Manufacturer"));
          v15 = &unk_1E49F9828;
        }
        else
        {
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, CFSTR("UniqueID"));
          objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getProperty:error:", CFSTR("Manufacturer"), 0), CFSTR("Manufacturer"));
          objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getProperty:error:", CFSTR("ModelID"), 0), CFSTR("ModelID"));
          v15 = &unk_1E49F9810;
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(v9, "getPropertyIfSupported:error:", CFSTR("CMIOFlashSupported"), 0), CFSTR("Flash"));
        if (objc_msgSend((id)objc_msgSend(a1, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("ContinuityDeviceUniqueID")))
        {
          v16 = &unk_1E49F97F8;
        }
        else
        {
          v16 = v15;
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v16, CFSTR("DeviceType"));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", &unk_1E49F9840, CFSTR("SourceType"));
        if (objc_msgSend((id)objc_msgSend(v9, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("StillImageCaptureNow")))
        {
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v7, CFSTR("HEIF"));
        }
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(a1, "deviceID"), CFSTR("CaptureDeviceID"));
        objc_msgSend(v9, "portType");
        if (FigCFEqual())
          v17 = 1;
        else
          v17 = 2 * (FigCFEqual() != 0);
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17), CFSTR("Position"));
        objc_msgSend(v113, "setObject:forKeyedSubscript:", v13, CFSTR("Attributes"));
        if ((v6 & 1) != 0)
        {
          if (v145)
            v18 = CFSTR("Front Camera");
          else
            v18 = CFSTR("Back Camera");
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v18, CFSTR("LocalizedName"));
LABEL_29:
          v20 = v13;
          v19 = (uint64_t)v18;
        }
        else
        {
          v18 = (const __CFString *)objc_msgSend(v9, "getPropertyIfSupported:error:", CFSTR("LocalizedName"), 0);
          objc_msgSend(v13, "setObject:forKeyedSubscript:", v18, CFSTR("LocalizedName"));
          if (!objc_msgSend((id)objc_msgSend(v9, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("NonLocalizedName")))goto LABEL_29;
          v19 = objc_msgSend(v9, "getProperty:error:", CFSTR("NonLocalizedName"), 0);
          v20 = v13;
        }
        objc_msgSend(v20, "setObject:forKeyedSubscript:", v19, CFSTR("NonLocalizedName"));
        objc_msgSend(v13, "setObject:forKeyedSubscript:", v7, CFSTR("HEVC"));
        v21 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceCommonSettings")), "objectForKeyedSubscript:", CFSTR("HEVCPreferred")), "BOOLValue");
        v114 = v13;
        objc_msgSend(v13, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v21), CFSTR("PrefersHEVC"));
        v117 = v9;
        v22 = (void *)objc_msgSend(v9, "copyProperty:error:", CFSTR("SupportedFormatsArray"), 0);
        v23 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v137 = 0u;
        v138 = 0u;
        v139 = 0u;
        v140 = 0u;
        v115 = v22;
        v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v137, v155, 16);
        v127 = v23;
        if (v24)
        {
          v25 = v24;
          v26 = 0;
          v135 = *(_QWORD *)v138;
          do
          {
            for (j = 0; j != v25; ++j)
            {
              if (*(_QWORD *)v138 != v135)
                objc_enumerationMutation(v115);
              v28 = *(void **)(*((_QWORD *)&v137 + 1) + 8 * j);
              v29 = objc_alloc_init(MEMORY[0x1E0C99E08]);
              v154[0] = CFSTR("SensorWidth");
              v154[1] = CFSTR("SensorHeight");
              v154[2] = CFSTR("VideoMinFrameRate");
              v154[3] = CFSTR("VideoMaxFrameRate");
              BWAddEntriesWithKeysFromDictionaryToDictionary(v28, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v154, 4), v29);
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("SensorWidth")), 0x1E4929418);
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("SensorHeight")), 0x1E4929438);
              if (objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("IsFake4by3PhotoFormat")), "BOOLValue"))objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("IsFake4by3PhotoFormat"));
              v30 = (const opaqueCMFormatDescription *)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("FormatDescription"));
              v31 = (const opaqueCMFormatDescription *)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("NativeFormatDescription"));
              if (objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("NativeFormatRequiresUpscaling")), "BOOLValue"))objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("NativeFormatRequiresUpscaling"));
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", CMFormatDescriptionGetMediaSubType(v30)), v126);
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", CMFormatDescriptionGetMediaSubType(v31)), CFSTR("NativeFormatCodecType"));
              objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v26 + j), 0x1E49375D8);
              if ((objc_msgSend((id)objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("AsyncStillCaptureProvidedByStream")), "BOOLValue") & 1) != 0)
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", 0x1E4938678), 0x1E4938678);
                objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(v28, "objectForKeyedSubscript:", 0x1E4938698), 0x1E4938698);
                v5 = v118;
                v7 = MEMORY[0x1E0C9AAB0];
              }
              else
              {
                v7 = MEMORY[0x1E0C9AAB0];
                objc_msgSend(v29, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4937AD8);
                v5 = v118;
              }
              objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, 0x1E4938878);
              v23 = v127;
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("CMIOCinematicFramingEnabled")))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, 0x1E4938918);
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, 0x1E4938958);
                if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("CMIOCenterStageRectOfInterest")))
                {
                  objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, 0x1E4938978);
                }
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("BackgroundBlurSupported")))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("BackgroundBlurSupported"));
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("StudioLightingSupported")))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("StudioLightingSupported"));
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("ReactionEffectsSupported")))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("ReactionEffectsSupported"));
              }
              if (objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", CFSTR("BackgroundReplacementSupported")))
              {
                objc_msgSend(v29, "setObject:forKeyedSubscript:", v7, CFSTR("BackgroundReplacementSupported"));
              }
              objc_msgSend(v127, "addObject:", v29);

            }
            v25 = objc_msgSend(v115, "countByEnumeratingWithState:objects:count:", &v137, v155, 16);
            v26 = (v26 + j);
          }
          while (v25);
        }
        v32 = objc_msgSend((id)objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue") == 15|| objc_msgSend((id)objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue") == 16;
        v116 = v32;
        v119 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AVCaptureSessionPresetCommon")), "objectForKeyedSubscript:", CFSTR("vide")), "objectForKeyedSubscript:", CFSTR("Device"));
        v136 = 1;
LABEL_59:
        v153 = 0u;
        v152 = 0u;
        v151 = 0u;
        v150 = 0u;
        v121 = -[FigCaptureFlatPlist countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v150, &v158, 16);
        if (!v121)
          goto LABEL_159;
        v120 = *(_QWORD *)v151;
LABEL_61:
        v33 = 0;
LABEL_62:
        if (*(_QWORD *)v151 != v120)
          objc_enumerationMutation(v5);
        v125 = v33;
        v34 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * v33);
        if ((objc_msgSend(v34, "isEqual:", CFSTR("AVCaptureSessionPresetCommon")) & 1) != 0)
          goto LABEL_157;
        v35 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v34), "objectForKeyedSubscript:", CFSTR("vide")), "objectForKeyedSubscript:", CFSTR("Device"));
        if (!v35)
          goto LABEL_157;
        v36 = (void *)v35;
        v122 = v34;
        if (v119)
        {
          v37 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:");
          objc_msgSend(v37, "addEntriesFromDictionary:", v36);
          v36 = v37;
        }
        v38 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("RequiredWidth")), "intValue");
        v132 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("RequiredHeight")), "intValue");
        v133 = v38;
        v39 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("RequiredMaxFrameRate")), "intValue");
        v40 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("RequiredMinFrameRate")), "intValue");
        v134 = v39;
        if ((v136 == 1) != ((v38 | v132 | v39 | v40) != 0))
          goto LABEL_157;
        v41 = v40;
        v131 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("TargetWidth")), "intValue");
        v130 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("TargetHeight")), "intValue");
        v129 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("TargetMaxFrameRate")), "intValue");
        v128 = objc_msgSend((id)objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("TargetMinFrameRate")), "intValue");
        v42 = objc_msgSend(v122, "isEqual:", CFSTR("AVCaptureSessionPresetPhoto")) ? 875704422 : 875704438;
        if (!objc_msgSend(v23, "count"))
          goto LABEL_157;
        v43 = 0;
        v123 = 0;
        v124 = -1;
        v44 = 3.4028e38;
        v45 = v39;
        do
        {
          v46 = (void *)objc_msgSend(v23, "objectAtIndexedSubscript:", v43);
          v47 = v46;
          if (v136 == 1
            || !objc_msgSend((id)objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("NativeFormatRequiresUpscaling")), "BOOLValue")|| objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("IsFake4by3PhotoFormat")), "BOOLValue")&& objc_msgSend(v122, "isEqual:", CFSTR("AVCaptureSessionPresetPhoto")))
          {
            v48 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
            v49 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
            v50 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", v126), "intValue");
            v51 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
            v52 = objc_msgSend((id)objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "intValue");
            v53 = v52;
            v54 = v131;
            if (v133 && (v54 = v133, v48 < (int)v133) || (v55 = v130, v132) && (v55 = v132, v49 < (int)v132))
            {
              v66 = 0;
              v68 = 0;
              v62 = 3.4028e38;
            }
            else
            {
              v56 = v129;
              if (v45 && (v56 = v45, v51 < v45))
              {
                v66 = 0;
                v68 = 0;
                v62 = 3.4028e38;
                v23 = v127;
              }
              else
              {
                v57 = v128;
                if (v41 && (v57 = v41, v52 > v41))
                {
                  v66 = 0;
                  v68 = 0;
                  v62 = 3.4028e38;
                }
                else
                {
                  v58 = 0.0;
                  if (v54 && v55)
                  {
                    v59 = v55 * v54 - v49 * v48;
                    if (v59 < 0)
                      v59 = v49 * v48 - v55 * v54;
                    v58 = (float)((float)(vabds_f32((float)v54 / (float)v55, (float)v48 / (float)v49) * (float)v48)
                                * (float)v49)
                        + (float)v59;
                  }
                  if (v56)
                  {
                    v60 = v51 - v56;
                    if (v51 < v56)
                      v60 = 2 * (v56 - v51);
                    v58 = v58 + (float)v60;
                  }
                  if (v57)
                  {
                    if (v52 <= v57)
                      v61 = v57 - v52;
                    else
                      v61 = 2 * (v52 - v57);
                    v58 = v58 + (float)v61;
                  }
                  if (v50 == v42)
                  {
                    v62 = v58 + -2.0;
                  }
                  else
                  {
                    IsFullRange = FigCapturePixelFormatIsFullRange(v42);
                    v64 = FigCapturePixelFormatIsFullRange(v50);
                    v62 = v58 + -1.0;
                    if (IsFullRange != v64)
                      v62 = v58;
                  }
                  if (v56 < v53 || v51 < v56)
                    v66 = v51;
                  else
                    v66 = v56;
                  if (v57 < v53 || v51 < v57)
                    v68 = v53;
                  else
                    v68 = v57;
                }
                v23 = v127;
                v45 = v134;
              }
            }
            if (v62 < v44)
            {
              v124 = v43;
              v123 = __PAIR64__(v68, v66);
              v44 = v62;
            }
          }
          ++v43;
        }
        while (objc_msgSend(v23, "count") > v43);
        v5 = v118;
        if (v124 == -1)
          goto LABEL_157;
        v69 = (void *)objc_msgSend(v23, "objectAtIndexedSubscript:", v124);
        v70 = v69;
        if (v136 == 1)
        {
          v71 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
          v72 = objc_msgSend((id)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
          if (v133 && v133 != v71)
          {
            if ((v116 & 1) == 0)
            {
              v70 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v70);
              v73 = 0x1E0CB3000;
              v74 = v132;
              v75 = v133;
              goto LABEL_143;
            }
LABEL_157:
            v33 = v125 + 1;
            if (v125 + 1 == v121)
            {
              v121 = -[FigCaptureFlatPlist countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v150, &v158, 16);
              if (!v121)
              {
LABEL_159:
                ++v136;
                v7 = MEMORY[0x1E0C9AAB0];
                if (v136 == 3)
                {
                  v84 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                  v146 = 0u;
                  v147 = 0u;
                  v148 = 0u;
                  v149 = 0u;
                  v85 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v146, v157, 16);
                  if (v85)
                  {
                    v86 = v85;
                    v87 = *(_QWORD *)v147;
                    do
                    {
                      for (k = 0; k != v86; ++k)
                      {
                        if (*(_QWORD *)v147 != v87)
                          objc_enumerationMutation(v127);
                        v89 = *(void **)(*((_QWORD *)&v146 + 1) + 8 * k);
                        v90 = objc_msgSend(v89, "objectForKeyedSubscript:", 0x1E49375B8);
                        if (!v90)
                        {
                          v5 = v118;
                          v90 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%dx%d_%d"), objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", 0x1E4929418), "intValue"), objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", 0x1E4929438), "intValue"), objc_msgSend((id)objc_msgSend(v89, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue"));
                        }
                        if (objc_msgSend(v84, "containsObject:", v90))
                        {
                          v91 = 1;
                          do
                          {
                            v92 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%d"), v90, v91);
                            v91 = (v91 + 1);
                          }
                          while ((objc_msgSend(v84, "containsObject:", v92) & 1) != 0);
                          v90 = v92;
                          v5 = v118;
                          v7 = MEMORY[0x1E0C9AAB0];
                        }
                        objc_msgSend(v89, "setObject:forKeyedSubscript:", v90, 0x1E49375B8);
                        objc_msgSend(v84, "addObject:", v90);
                      }
                      v86 = objc_msgSend(v127, "countByEnumeratingWithState:objects:count:", &v146, v157, 16);
                    }
                    while (v86);
                  }
                  objc_msgSend(v127, "sortUsingFunction:context:", csu_compareSourceFormats, 0);
                  a1 = v108;
                  if (objc_msgSend(v127, "count"))
                  {
                    v93 = 0;
                    do
                    {
                      v94 = (void *)objc_msgSend(v127, "objectAtIndexedSubscript:", v93);
                      if (objc_msgSend((id)objc_msgSend(v94, "objectForKeyedSubscript:", 0x1E4938918), "BOOLValue"))
                      {
                        v95 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v94);
                        objc_msgSend(v95, "setObject:forKeyedSubscript:", 0, 0x1E4938918);
                        v96 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v95);

                        objc_msgSend(v94, "setObject:forKeyedSubscript:", v96, 0x1E4938998);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", 0x1E4929418), 0x1E49389D8);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", 0x1E4929438), 0x1E49389F8);
                        objc_msgSend(v94, "setObject:forKeyedSubscript:", objc_msgSend(v94, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), 0x1E4938A18);
                      }
                      ++v93;
                    }
                    while (objc_msgSend(v127, "count") > v93);
                  }
                  v97 = (void *)objc_msgSend(csu_captureSourceVideoFormatsForFormatDictionaries(v127, 0), "copy");
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", v97, CFSTR("Formats"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", CFSTR("vide"), CFSTR("MediaType"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", -[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AVCaptureSessionPresetCompressionSettings")), CFSTR("AVCaptureSessionPresetCompressionSettings"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", CFSTR("Hidden"), 0), CFSTR("Hidden"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", CFSTR("ReadyToUnhide"), 0), CFSTR("ReadyToUnhide"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", CFSTR("BatteryState"), 0), CFSTR("BatteryState"));
                  objc_msgSend(v113, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", CFSTR("BatteryLevel"), 0), CFSTR("BatteryLevel"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v106) != 0), CFSTR("Exposure"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v105) != 0), CFSTR("Focus"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v114, "objectForKeyedSubscript:", CFSTR("Focus")), CFSTR("ManualFocus"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v104) != 0), CFSTR("WhiteBalance"));
                  v159 = 1065353216;
                  v158 = 0x3F8000003F800000;
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v158, 12), CFSTR("DefaultWhiteBalanceGains"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend(v117, "supportedProperties"), "objectForKeyedSubscript:", v103) != 0), CFSTR("ObjectsDetection"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v117, "getPropertyIfSupported:error:", CFSTR("ObjectsDetectionSupportedConfigurationKeys"), 0), CFSTR("ObjectsDetectionSupportedMetadataKeys"));
                  objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v108, "getPropertyIfSupported:error:", CFSTR("ContinuityDeviceUniqueID"), 0), CFSTR("ContinuityDeviceUniqueID"));
                  v98 = (void *)objc_msgSend(v113, "copy");
                  objc_msgSend(v109, "addObject:", v98);

                  i = v112;
                  v6 = v107;
                  continue;
                }
                goto LABEL_59;
              }
              goto LABEL_61;
            }
            goto LABEL_62;
          }
          v74 = v132;
          if (v132)
            v76 = v132 == v72;
          else
            v76 = 1;
          v77 = v76;
          v78 = v116;
          if (v76)
            v78 = 1;
          if ((v78 & 1) != 0)
          {
            if (!v77)
              goto LABEL_157;
            goto LABEL_146;
          }
          v75 = v133;
          v70 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v70);
          v73 = 0x1E0CB3000uLL;
          if (v133)
          {
LABEL_143:
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 2024), "numberWithInt:", v75), 0x1E4929418);
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 2024), "numberWithInt:", v75), CFSTR("SensorWidth"));
            if ((_DWORD)v74)
              goto LABEL_144;
          }
          else
          {
LABEL_144:
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 2024), "numberWithInt:", v74), 0x1E4929438);
            objc_msgSend(v70, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v73 + 2024), "numberWithInt:", v74), CFSTR("SensorHeight"));
          }
          objc_msgSend(v70, "setObject:forKeyedSubscript:", 0, 0x1E4937AF8);
          objc_msgSend(v70, "setObject:forKeyedSubscript:", 0, 0x1E4937798);
          objc_msgSend(v70, "setObject:forKeyedSubscript:", 0, 0x1E49377B8);
          objc_msgSend(v23, "addObject:", v70);
        }
LABEL_146:
        v79 = (void *)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1E4937AF8);
        if (!v79)
        {
          v79 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v79, 0x1E4937AF8);
        }
        objc_msgSend(v79, "addObject:", v122);
        v80 = objc_msgSend(v122, "isEqual:", CFSTR("AVCaptureSessionPresetHigh"));
        v81 = MEMORY[0x1E0C9AAB0];
        if (v80)
          objc_msgSend(v70, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E49375F8);
        if (objc_msgSend(v122, "isEqual:", CFSTR("AVCaptureSessionPresetPhoto")))
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v81, 0x1E4938D38);
        v82 = (void *)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1E49377B8);
        if (!v82)
        {
          v82 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v82, 0x1E49377B8);
        }
        objc_msgSend(v82, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v123), v122);
        v83 = (void *)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1E4937798);
        if (!v83)
        {
          v83 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
          objc_msgSend(v70, "setObject:forKeyedSubscript:", v83, 0x1E4937798);
        }
        objc_msgSend(v83, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v123)), v122);
        goto LABEL_157;
      }
    }
    v111 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v141, v156, 16);
  }
  while (v111);
LABEL_181:
  *a2 = objc_msgSend(v109, "copy");
  if (a4)
    *a4 = (id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AVH264Settings"));
  if (a3)
    *a3 = (id)-[FigCaptureFlatPlist objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", CFSTR("AVHEVCSettings"));
LABEL_185:

}

uint64_t csu_compareSourceFormats(void *a1, void *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v4 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
  v5 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
  v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
  v7 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
  if (v5 * v4 < v7 * v6)
    return -1;
  if (v7 * v6 < v5 * v4)
    return 1;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "floatValue");
  v10 = v9;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "floatValue");
  v12 = v11;
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "floatValue");
  v14 = v13;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "floatValue");
  v16 = v15;
  if (v14 == v15)
  {
    v19 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
    v20 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
    if ((v19 & 1) == 0 && v20)
      return -1;
    if ((v19 ^ 1 | v20) != 1)
      return 1;
    if ((float)(v14 - v10) >= (float)(v16 - v12))
    {
      if ((float)(v16 - v12) < (float)(v14 - v10))
        return 1;
      goto LABEL_17;
    }
    return -1;
  }
  if ((float)(v14 - v10) < (float)(v15 - v12))
    return -1;
  if ((float)(v15 - v12) < (float)(v14 - v10))
    return 1;
  v17 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
  v18 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
  if ((v17 & 1) == 0 && v18)
    return -1;
  if (((v17 ^ 1 | v18) & 1) == 0)
    return 1;
LABEL_17:
  v21 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", 0x1E49386D8), "BOOLValue");
  v22 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E49386D8), "BOOLValue");
  if (v21 && !v22)
    return -1;
  if ((v21 | v22 ^ 1) != 1)
    return 1;
  v23 = *MEMORY[0x1E0D08820];
  objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08820]), "floatValue");
  v25 = v24;
  objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v23), "floatValue");
  if (v25 > v26)
    return -1;
  if (v25 < v26)
    return 1;
  v27 = objc_msgSend(a1, "objectForKeyedSubscript:", 0x1E4937AF8);
  v28 = objc_msgSend(a2, "objectForKeyedSubscript:", 0x1E4937AF8);
  if (v27 && !v28)
    return -1;
  if (!v27 && v28)
    return 1;
  v29 = *MEMORY[0x1E0CA9040];
  v30 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0CA9040]), "unsignedIntValue");
  v31 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v29), "unsignedIntValue");
  if ((_DWORD)v30 == (_DWORD)v31)
    return 0;
  v32 = v31;
  v33 = objc_msgSend(&unk_1E4A00860, "indexOfObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v30));
  if (v33 < objc_msgSend(&unk_1E4A00860, "indexOfObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v32)))return -1;
  else
    return 1;
}

uint64_t csu_preprocessDeviceDicts(void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v6);
        if ((objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("mediaType")), "isEqualToString:", CFSTR("vide")) & 1) != 0|| objc_msgSend((id)objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("mediaType")), "isEqualToString:", CFSTR("pcld")))
        {
          v8 = objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("uniqueName"));
          if (v8)
          {
            v9 = v8;
            if (objc_msgSend(v2, "containsObject:", v8))
              objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99768], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Found duplicate uniqueName: %@"), v9), 0));
            objc_msgSend(v2, "addObject:", v9);
          }
          FigCaptureSourcePreprocessVideoDeviceDict(v7, a1);
        }
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t csu_createMultiStreamSourceFormatsArrayAndAVCompressionSettingsDict(uint64_t a1, void *a2, void *a3, void *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  void *v8;
  __CFString *v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  __CFString *v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  void *i;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  int v40;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t j;
  void *v49;
  void *v50;
  int v51;
  int v52;
  void *v53;
  __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t k;
  void *v59;
  void *v60;
  void *AllAVCaptureSessionPresets;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t m;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __objc2_class **v84;
  void *v85;
  void *v86;
  void *v87;
  NSObject *v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  __objc2_class **v93;
  uint64_t v94;
  NSObject *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t n;
  void *v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  int v118;
  void *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  void *v155;
  void *v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  void *v196;
  void *v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  void *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  const __CFDictionary *v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  void *v243;
  void *v244;
  void *v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  uint64_t v256;
  void *v257;
  void *v258;
  id v259;
  int v260;
  int v261;
  int v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  void *v268;
  id SourceFormatDictFromDeviceFormat;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  void *v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  void *v283;
  void *v284;
  id v285;
  int v286;
  void *v287;
  __objc2_class **v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  __objc2_class *v294;
  void *v295;
  void *v296;
  uint64_t v297;
  void *v298;
  float v299;
  void *v300;
  float v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  double v306;
  uint64_t v307;
  double v308;
  uint64_t v309;
  void *v310;
  const __CFString *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  void *v316;
  float v317;
  void *v318;
  float v319;
  uint64_t v320;
  int v321;
  id v322;
  id v323;
  uint64_t v324;
  __CFString *v325;
  uint64_t result;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  uint64_t v332;
  void *v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  id v337;
  void *v338;
  uint64_t v339;
  NSObject *v340;
  unsigned int v341;
  unsigned int v342;
  _OWORD *v343;
  _OWORD *v344;
  _OWORD *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __CFString *v366;
  __CFString *v367;
  uint64_t v368;
  id v369;
  void *v370;
  id v371;
  void *v373;
  void *v374;
  void *v375;
  void *context;
  unsigned int v377;
  uint64_t v378;
  id v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void *v385;
  void *v386;
  id v387;
  uint64_t v388;
  int v389;
  void *v390;
  void *v392;
  void *v393;
  void *v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  __CFString *v398;
  id v399;
  uint64_t v400;
  void *v401;
  id obj;
  id obja;
  id objb;
  uint64_t v405;
  void *v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  uint64_t v412;
  id v413;
  id v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v419;
  id v420;
  id v421;
  id v422;
  uint64_t v423;
  uint64_t v424;
  id v425;
  id v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  id v430;
  id v431;
  id v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  __int128 v440;
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  int v450;
  _BYTE v451[128];
  _BYTE v452[128];
  __CFString *v453;
  uint64_t v454;
  __CFString *v455;
  __CFString *v456;
  __CFString *v457;
  __CFString *v458;
  __CFString *v459;
  __CFString *v460;
  __CFString *v461;
  __CFString *v462;
  __CFString *v463;
  __CFString *v464;
  __CFString *v465;
  __CFString *v466;
  __CFString *v467;
  __CFString *v468;
  __CFString *v469;
  const __CFString *v470;
  __CFString *v471;
  __CFString *v472;
  __CFString *v473;
  uint64_t v474;
  __CFString *v475;
  __CFString *v476;
  uint64_t v477;
  uint64_t v478;
  _QWORD v479[4];
  _QWORD v480[4];
  _QWORD v481[10];
  _QWORD v482[10];
  _QWORD v483[10];
  os_log_type_t type[16];
  __int128 v485;
  __int128 v486;
  __int128 v487;
  void *v488;
  void *v489;
  _QWORD v490[4];
  _QWORD v491[4];
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __CFString *v496;
  __CFString *v497;
  __CFString *v498;
  __CFString *v499;
  __CFString *v500;
  __CFString *v501;
  __CFString *v502;
  __CFString *v503;
  __CFString *v504;
  __CFString *v505;
  _OWORD v506[2];
  __int128 v507;
  __int128 v508;
  void *v509;
  void *v510;
  void *v511;
  void *v512;
  void *v513;
  void *v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  void *v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  void *v523;
  _OWORD v524[2];
  __int128 v525;
  __int128 v526;
  uint64_t v527;
  CGRect v528;

  v527 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("AVCaptureDeviceFormats"));
  v9 = (__CFString *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", 0x1E4937AF8);
  v10 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v11 = (__CFString *)MEMORY[0x1E0C809B0];
  v453 = (__CFString *)MEMORY[0x1E0C809B0];
  v454 = 3221225472;
  v455 = (__CFString *)__csu_removeExperimentalDeviceFormats_block_invoke;
  v456 = (__CFString *)&unk_1E4921910;
  v457 = (__CFString *)v10;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", &v453);
  objc_msgSend(v8, "removeObjectsForKeys:", v10);
  v12 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  *(_QWORD *)&v506[0] = v11;
  *((_QWORD *)&v506[0] + 1) = 3221225472;
  *(_QWORD *)&v506[1] = __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke;
  *((_QWORD *)&v506[1] + 1) = &unk_1E4921938;
  *(_QWORD *)&v507 = v12;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v506);
  objc_msgSend(v8, "removeObjectsForKeys:", v12);
  v13 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v453 = v11;
  v454 = 3221225472;
  v455 = (__CFString *)__csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke_2;
  v456 = (__CFString *)&unk_1E4921960;
  v457 = v9;
  v458 = (__CFString *)v12;
  v459 = (__CFString *)v13;
  -[__CFString enumerateKeysAndObjectsUsingBlock:](v9, "enumerateKeysAndObjectsUsingBlock:", &v453);
  -[__CFString removeObjectsForKeys:](v9, "removeObjectsForKeys:", v13);
  v413 = v8;
  csu_mergeInCommonEntries(v8);
  objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("localizedName"));
  v14 = (__CFString *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", 0x1E4937AF8);
  v15 = (__CFString *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v453 = v11;
  v454 = 3221225472;
  v455 = (__CFString *)__csu_resolveSessionPresetAliases_block_invoke;
  v456 = (__CFString *)&unk_1E4920518;
  v457 = v14;
  v458 = v15;
  -[__CFString enumerateKeysAndObjectsUsingBlock:](v14, "enumerateKeysAndObjectsUsingBlock:", &v453);
  -[__CFString addEntriesFromDictionary:](v14, "addEntriesFromDictionary:", v15);

  v398 = v14;
  csu_mergeInCommonEntries(v14);
  v392 = a2;
  v16 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue");
  v17 = v16;
  if (v16 <= 9
    && ((1 << v16) & 0x310) != 0
    && (objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "cameraCalibrationValid") & 1) == 0)
  {
    LODWORD(v492) = 0;
    LOBYTE(v524[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v19 = v492;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v524[0]))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if (v20)
    {
      LODWORD(v506[0]) = 136315138;
      *(_QWORD *)((char *)v506 + 4) = "csu_getDepthDataFormatsDict";
      LODWORD(v346) = 12;
      v343 = v506;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v21 = a1;
  v401 = (void *)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MultiStream"), v343, v346), "objectForKeyedSubscript:", CFSTR("DepthDataFormats"));
  if (v401)
  {
    csu_mergeInCommonEntries(v401);
    if (v17 != 13)
    {
      v407 = a1 ? *(void **)(a1 + 40) : 0;
      v525 = 0u;
      v526 = 0u;
      memset(v524, 0, sizeof(v524));
      obj = (id)-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](a1);
      v410 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v524, &v453, 16);
      if (v410)
      {
        v409 = **(_QWORD **)&v524[1];
        v405 = *MEMORY[0x1E0D07498];
        v22 = *MEMORY[0x1E0D06428];
        v23 = *MEMORY[0x1E0D06420];
        do
        {
          v24 = 0;
          do
          {
            if (**(_QWORD **)&v524[1] != v409)
              objc_enumerationMutation(obj);
            v412 = v24;
            if (!v21
              || ((v25 = *(_DWORD *)(v21 + 12), v128 = v25 > 8, v26 = (1 << v25) & 0x10E, !v128)
                ? (v27 = v26 == 0)
                : (v27 = 1),
                  v27))
            {
              v430 = 0;
            }
            else
            {
              v430 = (id)objc_msgSend((id)objc_msgSend(v407, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v524[0] + 1) + 8 * v24)), "getProperty:error:", v405, 0);
            }
            v522 = 0u;
            v521 = 0u;
            v520 = 0u;
            v519 = 0u;
            v414 = (id)objc_msgSend(v401, "allKeys");
            v425 = (id)objc_msgSend(v414, "countByEnumeratingWithState:objects:count:", &v519, v506, 16);
            if (v425)
            {
              v423 = *(_QWORD *)v520;
              do
              {
                for (i = 0; i != v425; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v520 != v423)
                    objc_enumerationMutation(v414);
                  v427 = *(_QWORD *)(*((_QWORD *)&v519 + 1) + 8 * (_QWORD)i);
                  v29 = (void *)objc_msgSend(v401, "objectForKeyedSubscript:");
                  v30 = (void *)objc_msgSend(v29, "objectForKeyedSubscript:", 0x1E4929418);
                  v31 = (void *)objc_msgSend(v29, "objectForKeyedSubscript:", 0x1E4929438);
                  v32 = objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", 0x1E4937FB8), "intValue");
                  if (!v32)
                    v32 = objc_msgSend(v30, "intValue");
                  v33 = objc_msgSend((id)objc_msgSend(v29, "objectForKeyedSubscript:", 0x1E4937FD8), "intValue");
                  if (!v33)
                    v33 = objc_msgSend(v31, "intValue");
                  if ((int)objc_msgSend(v30, "intValue") >= 1 && (int)objc_msgSend(v31, "intValue") >= 1)
                  {
                    v487 = 0u;
                    v486 = 0u;
                    v485 = 0u;
                    *(_OWORD *)type = 0u;
                    v34 = objc_msgSend(v430, "countByEnumeratingWithState:objects:count:", type, &v492, 16);
                    if (v34)
                    {
                      v35 = v34;
                      v36 = *(_QWORD *)v485;
LABEL_39:
                      v37 = 0;
                      while (1)
                      {
                        if (*(_QWORD *)v485 != v36)
                          objc_enumerationMutation(v430);
                        v38 = *(void **)(*(_QWORD *)&type[8] + 8 * v37);
                        v39 = objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", v22), "intValue");
                        v40 = objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", v23), "intValue");
                        if (v32 == v39 && v33 == v40)
                          break;
                        if (v32 == v40 && v33 == v39)
                          break;
                        if (v35 == ++v37)
                        {
                          v35 = objc_msgSend(v430, "countByEnumeratingWithState:objects:count:", type, &v492, 16);
                          if (v35)
                            goto LABEL_39;
                          goto LABEL_52;
                        }
                      }
                    }
                    else
                    {
LABEL_52:
                      objc_msgSend(v401, "setObject:forKeyedSubscript:", 0, v427);
                    }
                  }
                }
                v425 = (id)objc_msgSend(v414, "countByEnumeratingWithState:objects:count:", &v519, v506, 16);
              }
              while (v425);
            }
            v24 = v412 + 1;
            v21 = a1;
          }
          while (v412 + 1 != v410);
          v410 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v524, &v453, 16);
        }
        while (v410);
      }
    }
  }
  if (v21 && *(_DWORD *)(v21 + 8) == 14)
  {
    v369 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v366 = (__CFString *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v43 = (void *)objc_msgSend((id)objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("FigCaptureStreamFormats"));
    v437 = 0u;
    v438 = 0u;
    v439 = 0u;
    v440 = 0u;
    v44 = objc_msgSend(v413, "countByEnumeratingWithState:objects:count:", &v437, v452, 16);
    if (v44)
    {
      v45 = v44;
      v431 = 0;
      v46 = *(_QWORD *)v438;
      v47 = MEMORY[0x1E0C9AAA0];
      do
      {
        for (j = 0; j != v45; ++j)
        {
          if (*(_QWORD *)v438 != v46)
            objc_enumerationMutation(v413);
          v49 = *(void **)(*((_QWORD *)&v437 + 1) + 8 * j);
          v50 = (void *)objc_msgSend(v413, "objectForKeyedSubscript:", v49);
          v51 = objc_msgSend((id)objc_msgSend(v50, "objectForKeyedSubscript:", CFSTR("Width")), "intValue");
          v52 = objc_msgSend((id)objc_msgSend(v50, "objectForKeyedSubscript:", CFSTR("Height")), "intValue");
          if (!objc_msgSend((id)objc_msgSend((id)objc_msgSend(v43, "objectForKeyedSubscript:", objc_msgSend(v50, "objectForKeyedSubscript:", CFSTR("CaptureStreamFormat"))), "objectForKeyedSubscript:", CFSTR("Binned")), "BOOLValue")&& v51 == 1920&& v52 == 1440)
          {
            v53 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(v413, "objectForKeyedSubscript:", v49));
            objc_msgSend(v53, "setObject:forKeyedSubscript:", v47, 0x1E4938938);
            objc_msgSend(v53, "setObject:forKeyedSubscript:", v47, CFSTR("BackgroundBlurSupportedForContinuityCapture"));
            objc_msgSend(v53, "setObject:forKeyedSubscript:", v47, CFSTR("StudioLightingSupportedForContinuityCapture"));
            objc_msgSend(v53, "setObject:forKeyedSubscript:", v47, CFSTR("ReactionEffectsSupportedForContinuityCapture"));
            objc_msgSend(v53, "setObject:forKeyedSubscript:", v47, CFSTR("BackgroundReplacementSupportedForContinuityCapture"));
            objc_msgSend(v369, "setObject:forKeyedSubscript:", v53, v49);
            v431 = v49;
          }
        }
        v45 = objc_msgSend(v413, "countByEnumeratingWithState:objects:count:", &v437, v452, 16);
      }
      while (v45);
    }
    else
    {
      v431 = 0;
    }
    v435 = 0u;
    v436 = 0u;
    v433 = 0u;
    v434 = 0u;
    v55 = -[__CFString countByEnumeratingWithState:objects:count:](v398, "countByEnumeratingWithState:objects:count:", &v433, v451, 16);
    if (v55)
    {
      v56 = v55;
      v57 = *(_QWORD *)v434;
      v54 = v366;
      while (2)
      {
        for (k = 0; k != v56; ++k)
        {
          if (*(_QWORD *)v434 != v57)
            objc_enumerationMutation(v398);
          v59 = *(void **)(*((_QWORD *)&v433 + 1) + 8 * k);
          if (objc_msgSend(v59, "isEqualToString:", CFSTR("AVCaptureSessionPresetHigh")))
          {
            v60 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", -[__CFString objectForKeyedSubscript:](v398, "objectForKeyedSubscript:", v59));
            objc_msgSend(v60, "setObject:forKeyedSubscript:", v431, CFSTR("DeviceFormat"));
            -[__CFString setObject:forKeyedSubscript:](v366, "setObject:forKeyedSubscript:", v60, v59);
            goto LABEL_84;
          }
        }
        v56 = -[__CFString countByEnumeratingWithState:objects:count:](v398, "countByEnumeratingWithState:objects:count:", &v433, v451, 16);
        if (v56)
          continue;
        break;
      }
    }
    else
    {
      v54 = v366;
    }
  }
  else
  {
    v54 = v398;
    v369 = v413;
  }
LABEL_84:
  AllAVCaptureSessionPresets = FigCaptureStreamUtilitiesGetAllAVCaptureSessionPresets();
  v367 = v54;
  v428 = -[__CFString objectForKeyedSubscript:](v54, "objectForKeyedSubscript:", CFSTR("AVCaptureSessionPresetHigh"));
  v492 = 0u;
  v493 = 0u;
  v494 = 0u;
  v495 = 0u;
  v62 = objc_msgSend(AllAVCaptureSessionPresets, "countByEnumeratingWithState:objects:count:", &v492, &v453, 16);
  if (v62)
  {
    v63 = v62;
    v64 = *(_QWORD *)v493;
    do
    {
      for (m = 0; m != v63; ++m)
      {
        if (*(_QWORD *)v493 != v64)
          objc_enumerationMutation(AllAVCaptureSessionPresets);
        v66 = *(void **)(*((_QWORD *)&v492 + 1) + 8 * m);
        if ((objc_msgSend(v66, "isEqual:", CFSTR("AVCaptureSessionPresetInputPriority"), v344, v347) & 1) == 0)
        {
          v67 = (void *)-[__CFString objectForKeyedSubscript:](v367, "objectForKeyedSubscript:", v66);
          if (v67)
          {
            v68 = v67;
            v69 = objc_msgSend(v67, "objectForKeyedSubscript:", CFSTR("DeviceFormat"));
            v70 = (void *)objc_msgSend(v369, "objectForKeyedSubscript:", v69);
            if (v70)
            {
              v71 = v70;
              v72 = (id)objc_msgSend(v70, "objectForKeyedSubscript:", 0x1E4937AF8);
              if (!v72)
              {
                v72 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
                objc_msgSend(v71, "setObject:forKeyedSubscript:", v72, 0x1E4937AF8);

              }
              objc_msgSend(v72, "addObject:", v66);
              if (v68 == (void *)v428)
                objc_msgSend(v71, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E49375F8);
              objc_msgSend(v71, "setObject:forKeyedSubscript:", objc_msgSend(v68, "objectForKeyedSubscript:", CFSTR("MinFrameRate")), 0x1E49377D8);
              objc_msgSend(v71, "setObject:forKeyedSubscript:", objc_msgSend(v68, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), 0x1E49377F8);
              v73 = objc_msgSend((id)objc_msgSend(v68, "objectForKeyedSubscript:", CFSTR("MaxIntegrationTime")), "intValue");
              if ((_DWORD)v73)
                objc_msgSend(v71, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v73), 0x1E4937A78);
              v74 = objc_msgSend(v68, "objectForKeyedSubscript:", 0x1E4937618);
              if (v74)
                objc_msgSend(v71, "setObject:forKeyedSubscript:", v74, 0x1E4937618);
            }
            else
            {
              LODWORD(v519) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v76 = v519;
              if (os_log_type_enabled(v75, type[0]))
                v77 = v76;
              else
                v77 = v76 & 0xFFFFFFFE;
              if (v77)
              {
                LODWORD(v524[0]) = 136315650;
                *(_QWORD *)((char *)v524 + 4) = "csu_addDeviceFormatDefaultsFromPresets";
                WORD6(v524[0]) = 2114;
                *(_QWORD *)((char *)v524 + 14) = v69;
                WORD3(v524[1]) = 2114;
                *((_QWORD *)&v524[1] + 1) = v66;
                LODWORD(v347) = 32;
                v344 = v524;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      v63 = objc_msgSend(AllAVCaptureSessionPresets, "countByEnumeratingWithState:objects:count:", &v492, &v453, 16);
    }
    while (v63);
  }
  v78 = a1;
  if (a1)
    v79 = *(void **)(a1 + 32);
  else
    v79 = 0;
  v450 = 0;
  v80 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v81 = (void *)objc_msgSend((id)objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("MultiStream")), "objectForKeyedSubscript:", CFSTR("FigCaptureStreamFormats"));
  v370 = (void *)objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("mediaType"));
  v82 = objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("localizedName"));
  v83 = objc_msgSend(v79, "getProperty:error:", CFSTR("SupportedFormatsArray"), 0);
  v84 = off_1E4915000;
  v85 = v80;
  v406 = v80;
  if (!v83)
  {
    LODWORD(v492) = 0;
    LOBYTE(v524[0]) = 0;
    v340 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v341 = v492;
    if (os_log_type_enabled(v340, v524[0]))
      v342 = v341;
    else
      v342 = v341 & 0xFFFFFFFE;
    if (v342)
    {
      LODWORD(v506[0]) = 136315394;
      *(_QWORD *)((char *)v506 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v506[0]) = 2114;
      *(_QWORD *)((char *)v506 + 14) = v82;
      LODWORD(v347) = 22;
      v344 = v506;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_367;
  }
  v86 = (void *)v83;
  v385 = (void *)v83;
  if (dword_1ECFE9B90)
  {
    v87 = v79;
    LODWORD(v492) = 0;
    LOBYTE(v524[0]) = 0;
    v88 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v89 = v492;
    if (os_log_type_enabled(v88, v524[0]))
      v90 = v89;
    else
      v90 = v89 & 0xFFFFFFFE;
    if (v90)
    {
      v91 = objc_msgSend(v385, "count");
      LODWORD(v506[0]) = 136315650;
      *(_QWORD *)((char *)v506 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v506[0]) = 2114;
      *(_QWORD *)((char *)v506 + 14) = v82;
      WORD3(v506[1]) = 1024;
      DWORD2(v506[1]) = v91;
      LODWORD(v347) = 28;
      v344 = v506;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v84 = off_1E4915000;
    v86 = v385;
    v79 = v87;
  }
  v92 = -[__objc2_class sensorIDStringFromModuleInfo:](v84[135], "sensorIDStringFromModuleInfo:", objc_msgSend(v79, "getProperty:error:", *MEMORY[0x1E0D076B8], 0, v344, v347));
  v93 = v84;
  v94 = v92;
  v360 = v79;
  if (!objc_msgSend((id)objc_msgSend((id)-[__objc2_class cameraTuningParameters](-[__objc2_class sharedInstance](v93[135], "sharedInstance"), "cameraTuningParameters"), "objectForKeyedSubscript:", objc_msgSend(v79, "portType")), "objectForKeyedSubscript:", v92))
  {
    LODWORD(v492) = 0;
    LOBYTE(v524[0]) = 0;
    v95 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v96 = v492;
    if (os_log_type_enabled(v95, v524[0]))
      v97 = v96;
    else
      v97 = v96 & 0xFFFFFFFE;
    if (v97)
    {
      v98 = objc_msgSend(v360, "portType");
      LODWORD(v506[0]) = 136315650;
      *(_QWORD *)((char *)v506 + 4) = "csu_createResolvedStreamFormatsDict";
      WORD6(v506[0]) = 2114;
      *(_QWORD *)((char *)v506 + 14) = v94;
      WORD3(v506[1]) = 2114;
      *((_QWORD *)&v506[1] + 1) = v98;
      LODWORD(v348) = 32;
      v345 = v506;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v85 = v80;
    v86 = v385;
  }
  v359 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", 0x1E4952B98, v345, v348), "BOOLValue");
  v446 = 0u;
  v447 = 0u;
  v448 = 0u;
  v449 = 0u;
  v99 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v446, v524, 16);
  if (!v99)
    goto LABEL_367;
  v100 = v99;
  v101 = *(_QWORD *)v447;
  v408 = *MEMORY[0x1E0D07EE8];
  v415 = *MEMORY[0x1E0D07FE0];
  obja = (id)*MEMORY[0x1E0D08088];
  v384 = *MEMORY[0x1E0D08050];
  v383 = *MEMORY[0x1E0D08040];
  v382 = *MEMORY[0x1E0D08058];
  v381 = *MEMORY[0x1E0D08048];
  v358 = *MEMORY[0x1E0D07F90];
  v357 = *MEMORY[0x1E0D07F40];
  v356 = *MEMORY[0x1E0D07F20];
  v355 = *MEMORY[0x1E0D07F38];
  v354 = *MEMORY[0x1E0D07888];
  v353 = *MEMORY[0x1E0D07890];
  v361 = *MEMORY[0x1E0CA9040];
  v374 = v81;
  v362 = *(_QWORD *)v447;
  while (2)
  {
    v102 = 0;
    v364 = v100;
    do
    {
      if (*(_QWORD *)v447 != v101)
        objc_enumerationMutation(v81);
      v380 = v102;
      v429 = *(void **)(*((_QWORD *)&v446 + 1) + 8 * v102);
      v103 = (void *)objc_msgSend(v81, "objectForKeyedSubscript:");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v103 = (void *)objc_msgSend(v81, "objectForKeyedSubscript:", v103);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v347 = v349;
          LODWORD(v344) = 0;
          FigDebugAssert3();
        }
      }
      if ((objc_msgSend((id)objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("Unsupported"), v344, v347), "BOOLValue") & 1) == 0)
      {
        v104 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)&stru_1E4928818, v103, v86, 0);
        if ((v104 & 0x80000000) == 0)
        {
          LODWORD(v105) = v104;
          if (objc_msgSend(v86, "count") > (unint64_t)v104)
          {
            v377 = v105;
            v379 = (id)objc_msgSend((id)objc_msgSend(v86, "objectAtIndexedSubscript:", v105), "mutableCopy");
            objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"), 0x1E49375D8);
            v106 = objc_msgSend(v370, "isEqualToString:", CFSTR("vide"));
            if ((v106 & 1) == 0)
              v106 = objc_msgSend(v379, "setObject:forKeyedSubscript:", v370, 0x1E4937598);
            context = (void *)MEMORY[0x1A858DD40](v106);
            v107 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937718);
            v105 = v105;
            if (!v107)
            {
              if (objc_msgSend((id)objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("HasFESCompanionFormat")), "BOOLValue"))
              {
                v523 = v103;
                v107 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v523, 1);
              }
              else
              {
                v107 = 0;
              }
            }
            v108 = v107;
            v432 = v103;
            if (objc_msgSend(v107, "count"))
            {
              v411 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v442 = 0u;
              v443 = 0u;
              v444 = 0u;
              v445 = 0u;
              v426 = v108;
              v109 = objc_msgSend(v108, "countByEnumeratingWithState:objects:count:", &v442, &v519, 16);
              if (v109)
              {
                v110 = v109;
                v111 = *(_QWORD *)v443;
                do
                {
                  for (n = 0; n != v110; ++n)
                  {
                    if (*(_QWORD *)v443 != v111)
                      objc_enumerationMutation(v426);
                    v113 = *(void **)(*((_QWORD *)&v442 + 1) + 8 * n);
                    v114 = (id)objc_msgSend(v432, "mutableCopy");
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("FES"));
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v113, "objectForKeyedSubscript:", CFSTR("FESWidth")), CFSTR("FESWidth"));
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v113, "objectForKeyedSubscript:", CFSTR("FESHeight")), CFSTR("FESHeight"));
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", objc_msgSend(v113, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), CFSTR("MaxFrameRate"));
                    objc_msgSend(v114, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], 0x1E4937AD8);
                    v441 = 0;
                    v115 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[FESCompanionFormat]"), v114, v86, &v441);
                    if ((v115 & 0x80000000) == 0)
                    {
                      v116 = v115;
                      if (objc_msgSend(v86, "count") > (unint64_t)v115)
                      {
                        v117 = (void *)objc_msgSend(v86, "objectAtIndexedSubscript:", v116);
                        v118 = objc_msgSend((id)objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("geometricDistortionCorrection")), "BOOLValue");
                        v119 = (void *)objc_msgSend((id)objc_msgSend(v117, "objectForKeyedSubscript:", v408), "objectForKeyedSubscript:", v415);
                        v120 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", obja), "BOOLValue");
                        v121 = 0;
                        if (v118)
                        {
                          v122 = 0;
                          if (v120)
                          {
                            v123 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", v384), "intValue");
                            v124 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", v383), "intValue");
                            v125 = v82;
                            v126 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", v382), "intValue");
                            v127 = objc_msgSend((id)objc_msgSend(v119, "objectForKeyedSubscript:", v381), "intValue");
                            v128 = (int)v126 <= v123 && (int)v127 <= v124;
                            v129 = !v128;
                            if (v129)
                              v121 = v126;
                            else
                              v121 = 0;
                            v82 = v125;
                            v86 = v385;
                            if (v129)
                              v122 = v127;
                            else
                              v122 = 0;
                          }
                        }
                        else
                        {
                          v122 = 0;
                        }
                        *(_QWORD *)&v492 = 0x1E4929418;
                        *(_QWORD *)&v506[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v441);
                        *((_QWORD *)&v492 + 1) = 0x1E4929438;
                        *((_QWORD *)&v506[0] + 1) = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v441));
                        *(_QWORD *)&v493 = 0x1E49375D8;
                        *(_QWORD *)&v506[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v116);
                        *((_QWORD *)&v493 + 1) = 0x1E4937738;
                        v130 = objc_msgSend(v432, "objectForKeyedSubscript:", CFSTR("SIFREnabled"));
                        v131 = MEMORY[0x1E0C9AAA0];
                        if (v130)
                          v131 = v130;
                        *((_QWORD *)&v506[1] + 1) = v131;
                        *(_QWORD *)&v494 = 0x1E4937818;
                        v132 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v132)
                          v133 = (void *)v132;
                        else
                          v133 = &unk_1E49F99A8;
                        *(_QWORD *)&v507 = v133;
                        *((_QWORD *)&v494 + 1) = 0x1E4937838;
                        v134 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v134)
                          v135 = (void *)v134;
                        else
                          v135 = &unk_1E49F99A8;
                        *((_QWORD *)&v507 + 1) = v135;
                        *(_QWORD *)&v495 = 0x1E4937958;
                        v136 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v136)
                          v137 = (void *)v136;
                        else
                          v137 = &unk_1E49F99A8;
                        *(_QWORD *)&v508 = v137;
                        *((_QWORD *)&v495 + 1) = 0x1E4937978;
                        v138 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v138)
                          v139 = (void *)v138;
                        else
                          v139 = &unk_1E49F99A8;
                        *((_QWORD *)&v508 + 1) = v139;
                        v496 = CFSTR("SensorCropWidth");
                        v140 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v140)
                          v141 = (void *)v140;
                        else
                          v141 = &unk_1E49F99A8;
                        v509 = v141;
                        v497 = CFSTR("SensorCropHeight");
                        v142 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v142)
                          v143 = (void *)v142;
                        else
                          v143 = &unk_1E49F99A8;
                        v510 = v143;
                        v498 = CFSTR("SensorCenterOffsetX");
                        v144 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v144)
                          v145 = (void *)v144;
                        else
                          v145 = &unk_1E49F99A8;
                        v511 = v145;
                        v499 = CFSTR("SensorCenterOffsetY");
                        v146 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v146)
                          v147 = (void *)v146;
                        else
                          v147 = &unk_1E49F99A8;
                        v512 = v147;
                        v500 = CFSTR("PreGDCSensorCropWidth");
                        v148 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v148)
                          v149 = (void *)v148;
                        else
                          v149 = &unk_1E49F99A8;
                        v513 = v149;
                        v501 = CFSTR("PreGDCSensorCropHeight");
                        v150 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v150)
                          v151 = (void *)v150;
                        else
                          v151 = &unk_1E49F99A8;
                        v514 = v151;
                        v502 = CFSTR("GeometricDistortionCorrectedNativeWidth");
                        v515 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v121);
                        v503 = CFSTR("GeometricDistortionCorrectedNativeHeight");
                        v516 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v122);
                        v504 = CFSTR("PostGDCCropWidth");
                        v152 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v152)
                          v153 = (void *)v152;
                        else
                          v153 = &unk_1E49F99A8;
                        v517 = v153;
                        v505 = CFSTR("PostGDCCropHeight");
                        v154 = objc_msgSend(v113, "objectForKeyedSubscript:");
                        if (v154)
                          v155 = (void *)v154;
                        else
                          v155 = &unk_1E49F99A8;
                        v518 = v155;
                        objc_msgSend(v411, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v506, &v492, 18));
                      }
                    }
                  }
                  v110 = objc_msgSend(v426, "countByEnumeratingWithState:objects:count:", &v442, &v519, 16);
                }
                while (v110);
              }
              objc_msgSend(v379, "setObject:forKeyedSubscript:", v411, 0x1E4937718);
              v78 = a1;
              v85 = v406;
              v81 = v374;
              v103 = v432;
              v105 = v377;
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937658))
            {
              v156 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937658);
              v157 = (id)objc_msgSend(v103, "mutableCopy");
              objc_msgSend(v157, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], 0x1E4937738);
              objc_msgSend(v157, "setObject:forKeyedSubscript:", 0, CFSTR("SIFRBinningFactor"));
              if (objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
              if (objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
              objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("FES")), CFSTR("FES"));
              objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("FESWidth")), CFSTR("FESWidth"));
              objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("FESHeight")), CFSTR("FESHeight"));
              objc_msgSend(v157, "setObject:forKeyedSubscript:", objc_msgSend(v156, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), CFSTR("MaxFrameRate"));
              v158 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[NonSIFRCompanionFormat]"), v157, v385, 0);
              if ((v158 & 0x80000000) == 0)
              {
                v159 = v158;
                if (objc_msgSend(v385, "count") > (unint64_t)v158)
                {
                  v490[0] = 0x1E49375D8;
                  v491[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v159);
                  v491[1] = MEMORY[0x1E0C9AAA0];
                  v490[1] = 0x1E4937738;
                  v490[2] = 0x1E4937858;
                  v160 = objc_msgSend(v156, "objectForKeyedSubscript:");
                  if (v160)
                    v161 = (void *)v160;
                  else
                    v161 = &unk_1E49F99A8;
                  v491[2] = v161;
                  v490[3] = 0x1E4937878;
                  v162 = objc_msgSend(v156, "objectForKeyedSubscript:");
                  if (v162)
                    v163 = (void *)v162;
                  else
                    v163 = &unk_1E49F99A8;
                  v491[3] = v163;
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v491, v490, 4), 0x1E4937658);
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937678))
            {
              v164 = (id)objc_msgSend(v103, "mutableCopy");
              objc_msgSend(v164, "setObject:forKeyedSubscript:", &unk_1E49F99C0, CFSTR("SIFRBinningFactor"));
              v165 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[FullBinSIFRCompanionFormat]"), v164, v385, 0);
              if ((v165 & 0x80000000) == 0)
              {
                v166 = v165;
                if (objc_msgSend(v385, "count") > (unint64_t)v165)
                {
                  objc_msgSend(v164, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v166), 0x1E49375D8);
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", v164, 0x1E4937678);
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937698))
            {
              v167 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937698);
              if ((objc_msgSend((id)objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("Unsupported")), "BOOLValue") & 1) == 0)
              {
                v168 = (id)objc_msgSend(v103, "mutableCopy");
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FES")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FES")), CFSTR("FES"));
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FESWidth")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FESWidth")), CFSTR("FESWidth"));
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FESHeight")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("FESHeight")), CFSTR("FESHeight"));
                if (objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")))
                  objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(v167, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), CFSTR("SIFRBinningFactor"));
                objc_msgSend(v168, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("OptimizedForMidFrameSynchronization"));
                v169 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[MidFrameSynchronizationOptimizedCompanionFormat]"), v168, v385, 0);
                v103 = v432;
                v105 = v377;
                if ((v169 & 0x80000000) == 0)
                {
                  v170 = v169;
                  if (objc_msgSend(v385, "count") > (unint64_t)v169)
                  {
                    objc_msgSend(v168, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v170), 0x1E49375D8);
                    objc_msgSend(v379, "setObject:forKeyedSubscript:", v168, 0x1E4937698);
                  }
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E49376F8))
            {
              v171 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E49376F8);
              v172 = (id)objc_msgSend(v103, "mutableCopy");
              if (objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
              if (objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
              if (objc_msgSend(v171, "objectForKeyedSubscript:", 0x1E4937858))
                objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(v171, "objectForKeyedSubscript:", 0x1E4937858), 0x1E4937858);
              if (objc_msgSend(v171, "objectForKeyedSubscript:", 0x1E4937878))
                objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(v171, "objectForKeyedSubscript:", 0x1E4937878), 0x1E4937878);
              v81 = v374;
              if (objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")))
                objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(v171, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), CFSTR("SIFRBinningFactor"));
              objc_msgSend(v172, "setObject:forKeyedSubscript:", 0, CFSTR("FES"));
              v173 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[ActionCameraCompanionFormat]"), v172, v385, 0);
              if ((v173 & 0x80000000) == 0)
              {
                v174 = v173;
                if (objc_msgSend(v385, "count") > (unint64_t)v173)
                {
                  objc_msgSend(v172, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v174), 0x1E49375D8);
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", v172, 0x1E49376F8);
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937D58))
            {
              v175 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937D58);
              v176 = (id)objc_msgSend(v103, "mutableCopy");
              objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("FESWidth")), CFSTR("FESWidth"));
              objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("FESHeight")), CFSTR("FESHeight"));
              objc_msgSend(v176, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("FES"));
              if (objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
              if (objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
              if (objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")))
                objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), CFSTR("SIFRBinningFactor"));
              if (objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")))
                objc_msgSend(v176, "setObject:forKeyedSubscript:", objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), CFSTR("MaxFrameRate"));
              v177 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[DepthCompanionFormat]"), v176, v385, 0);
              if ((v177 & 0x80000000) == 0)
              {
                v178 = v177;
                if (objc_msgSend(v385, "count") > (unint64_t)v177)
                {
                  v483[0] = 0x1E49375D8;
                  *(_QWORD *)type = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v178);
                  v483[1] = 0x1E4929418;
                  v179 = objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("FESWidth"));
                  if (v179)
                    v180 = (void *)v179;
                  else
                    v180 = &unk_1E49F99A8;
                  *(_QWORD *)&type[8] = v180;
                  v483[2] = 0x1E4929438;
                  v181 = objc_msgSend(v175, "objectForKeyedSubscript:", CFSTR("FESHeight"));
                  if (v181)
                    v182 = (void *)v181;
                  else
                    v182 = &unk_1E49F99A8;
                  *(_QWORD *)&v485 = v182;
                  v483[3] = 0x1E4937738;
                  v183 = objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("SIFREnabled"));
                  v184 = MEMORY[0x1E0C9AAA0];
                  if (v183)
                    v184 = v183;
                  *((_QWORD *)&v485 + 1) = v184;
                  v483[4] = 0x1E4937818;
                  v185 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v185)
                    v186 = (void *)v185;
                  else
                    v186 = &unk_1E49F99A8;
                  *(_QWORD *)&v486 = v186;
                  v483[5] = 0x1E4937838;
                  v187 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v187)
                    v188 = (void *)v187;
                  else
                    v188 = &unk_1E49F99A8;
                  *((_QWORD *)&v486 + 1) = v188;
                  v483[6] = 0x1E4937958;
                  v189 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v189)
                    v190 = (void *)v189;
                  else
                    v190 = &unk_1E49F99A8;
                  *(_QWORD *)&v487 = v190;
                  v483[7] = 0x1E4937978;
                  v191 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v191)
                    v192 = (void *)v191;
                  else
                    v192 = &unk_1E49F99A8;
                  *((_QWORD *)&v487 + 1) = v192;
                  v483[8] = 0x1E4937858;
                  v193 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v193)
                    v194 = (void *)v193;
                  else
                    v194 = &unk_1E49F99A8;
                  v488 = v194;
                  v483[9] = 0x1E4937878;
                  v195 = objc_msgSend(v175, "objectForKeyedSubscript:");
                  if (v195)
                    v196 = (void *)v195;
                  else
                    v196 = &unk_1E49F99A8;
                  v489 = v196;
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", type, v483, 10), 0x1E4937D58);
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937D78))
            {
              v197 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937D78);
              v198 = (id)objc_msgSend(v103, "mutableCopy");
              objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("FESWidth")), CFSTR("FESWidth"));
              objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("FESHeight")), CFSTR("FESHeight"));
              objc_msgSend(v198, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("FES"));
              if (objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
              if (objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
              if (objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")))
                objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), CFSTR("SIFRBinningFactor"));
              if (objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")))
                objc_msgSend(v198, "setObject:forKeyedSubscript:", objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), CFSTR("MaxFrameRate"));
              v199 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[FSDNetCompanionFormat]"), v198, v385, 0);
              if ((v199 & 0x80000000) == 0)
              {
                v200 = v199;
                if (objc_msgSend(v385, "count") > (unint64_t)v199)
                {
                  v481[0] = 0x1E49375D8;
                  v482[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v200);
                  v481[1] = 0x1E4929418;
                  v201 = objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("FESWidth"));
                  if (v201)
                    v202 = (void *)v201;
                  else
                    v202 = &unk_1E49F99A8;
                  v482[1] = v202;
                  v481[2] = 0x1E4929438;
                  v203 = objc_msgSend(v197, "objectForKeyedSubscript:", CFSTR("FESHeight"));
                  if (v203)
                    v204 = (void *)v203;
                  else
                    v204 = &unk_1E49F99A8;
                  v482[2] = v204;
                  v481[3] = 0x1E4937738;
                  v205 = objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("SIFREnabled"));
                  v206 = MEMORY[0x1E0C9AAA0];
                  if (v205)
                    v206 = v205;
                  v482[3] = v206;
                  v481[4] = 0x1E4937818;
                  v207 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v207)
                    v208 = (void *)v207;
                  else
                    v208 = &unk_1E49F99A8;
                  v482[4] = v208;
                  v481[5] = 0x1E4937838;
                  v209 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v209)
                    v210 = (void *)v209;
                  else
                    v210 = &unk_1E49F99A8;
                  v482[5] = v210;
                  v481[6] = 0x1E4937958;
                  v211 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v211)
                    v212 = (void *)v211;
                  else
                    v212 = &unk_1E49F99A8;
                  v482[6] = v212;
                  v481[7] = 0x1E4937978;
                  v213 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v213)
                    v214 = (void *)v213;
                  else
                    v214 = &unk_1E49F99A8;
                  v482[7] = v214;
                  v481[8] = 0x1E4937858;
                  v215 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v215)
                    v216 = (void *)v215;
                  else
                    v216 = &unk_1E49F99A8;
                  v482[8] = v216;
                  v481[9] = 0x1E4937878;
                  v217 = objc_msgSend(v197, "objectForKeyedSubscript:");
                  if (v217)
                    v218 = (void *)v217;
                  else
                    v218 = &unk_1E49F99A8;
                  v482[9] = v218;
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v482, v481, 10), 0x1E4937D78);
                }
              }
            }
            if (objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937E38))
            {
              v219 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937E38);
              v220 = (id)objc_msgSend(v103, "mutableCopy");
              if (objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SensorWidth")))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SensorWidth")), CFSTR("SensorWidth"));
              if (objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SensorHeight")))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SensorHeight")), CFSTR("SensorHeight"));
              if (objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937858))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937858), 0x1E4937858);
              if (objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937878))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937878), 0x1E4937878);
              v105 = v377;
              if (objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), CFSTR("SIFRBinningFactor"));
              v81 = v374;
              if (objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937E58))
                objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(v219, "objectForKeyedSubscript:", 0x1E4937E58), 0x1E4937E58);
              objc_msgSend(v220, "setObject:forKeyedSubscript:", 0, CFSTR("FES"));
              objc_msgSend(v220, "setObject:forKeyedSubscript:", 0, CFSTR("FESWidth"));
              objc_msgSend(v220, "setObject:forKeyedSubscript:", 0, CFSTR("FESHeight"));
              objc_msgSend(v220, "setObject:forKeyedSubscript:", 0, CFSTR("CropWidthForFES"));
              objc_msgSend(v220, "setObject:forKeyedSubscript:", 0, CFSTR("CropHeightForFES"));
              v221 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[StereoVideoCompanionFormat]"), v220, v385, 0);
              if ((v221 & 0x80000000) == 0)
              {
                v222 = v221;
                if (objc_msgSend(v385, "count") > (unint64_t)v221)
                {
                  objc_msgSend(v220, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v222), 0x1E49375D8);
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", v220, 0x1E4937E38);
                }
              }
            }
            objc_autoreleasePoolPop(context);
            if (objc_msgSend((id)objc_msgSend(v103, "objectForKeyedSubscript:", CFSTR("HasSensorHDRCompanionFormat")), "BOOLValue"))
            {
              v223 = (id)objc_msgSend(v103, "mutableCopy");
              objc_msgSend(v223, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("HDR"));
              v224 = csu_resolveFormatIndexForNamedStreamFormat(v82, v429, (uint64_t)CFSTR("[SensorHDRCompanionFormat]"), v223, v385, 0);
              if ((v224 & 0x80000000) == 0)
              {
                v225 = v224;
                if (objc_msgSend(v385, "count") > (unint64_t)v224)
                  objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v225), 0x1E4937638);
              }
            }
            v226 = objc_msgSend((id)objc_msgSend(v392, "objectForKeyedSubscript:", CFSTR("geometricDistortionCorrection")), "BOOLValue");
            v227 = (void *)objc_msgSend((id)objc_msgSend(v379, "objectForKeyedSubscript:", v408), "objectForKeyedSubscript:", v415);
            v228 = objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", obja), "BOOLValue");
            if (v226 && v228)
            {
              v229 = objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v384), "intValue");
              v230 = objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v383), "intValue");
              v528.size.width = (double)(int)v229;
              v528.size.height = (double)(int)v230;
              v528.origin.x = 0.0;
              v528.origin.y = 0.0;
              v231 = CGRectCreateDictionaryRepresentation(v528);
              v232 = BWGetGeometricDistortionCorrectionStrengthFromDimensions(v229 | (unint64_t)(v230 << 32), v359);
              v479[0] = v358;
              v480[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v229);
              v479[1] = v357;
              v480[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v230);
              v480[2] = v231;
              v479[2] = v356;
              v479[3] = v355;
              v480[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v232);
              v233 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v480, v479, 4);
              v477 = v415;
              v478 = v233;
              v234 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v478, &v477, 1);
              v235 = objc_msgSend(v360, "setProperty:value:", CFSTR("FormatIndex"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v105));
              v450 = v235;
              if (v235)
              {
                v347 = v349;
                LODWORD(v344) = v235;
              }
              else
              {
                v236 = objc_msgSend(v360, "setProperty:value:", v354, v234);
                v450 = v236;
                if (v236)
                {
                  v347 = v349;
                  LODWORD(v344) = v236;
                }
                else
                {
                  v237 = (void *)objc_msgSend(v360, "getProperty:error:", v353, &v450);
                  if (!v450)
                  {
                    v238 = objc_msgSend(v237, "objectForKeyedSubscript:", v415);
                    if (!v238)
                    {
                      v347 = v349;
                      LODWORD(v344) = 0;
                      FigDebugAssert3();
                      v450 = FigSignalErrorAt();
                      v243 = v406;
                      if (v450)
                        goto LABEL_368;
                      goto LABEL_369;
                    }
                    objc_msgSend(v379, "setObject:forKeyedSubscript:", v238, 0x1E4937CB8);
                    v239 = objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v382), "intValue");
                    v240 = objc_msgSend((id)objc_msgSend(v227, "objectForKeyedSubscript:", v381), "intValue");
                    v241 = v240;
                    v128 = (int)v239 <= (int)v229;
                    v85 = v406;
                    if (!v128 || (int)v240 > (int)v230)
                    {
                      objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v239), 0x1E4937CD8);
                      objc_msgSend(v379, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v241), 0x1E4937CF8);
                    }
                    goto LABEL_362;
                  }
                  v347 = v349;
                  LODWORD(v344) = v450;
                }
              }
              FigDebugAssert3();
              v85 = v406;
              goto LABEL_367;
            }
LABEL_362:
            v86 = v385;
            v242 = csu_secondaryNativeResolutionZoomFactorsForFormatIndex(v385, v105);
            if (objc_msgSend(v242, "count"))
              objc_msgSend(v379, "setObject:forKeyedSubscript:", v242, 0x1E4938018);
            v453 = CFSTR("SensorCropWidth");
            v454 = 0x1E4937878;
            v455 = CFSTR("SensorCenterOffsetX");
            v456 = CFSTR("SensorCenterOffsetY");
            v457 = CFSTR("PreGDCSensorCropWidth");
            v458 = CFSTR("PreGDCSensorCropHeight");
            v459 = CFSTR("PostGDCCropWidth");
            v460 = CFSTR("PostGDCCropHeight");
            v461 = CFSTR("FESInputCropWidth");
            v462 = CFSTR("FESInputCropHeight");
            v463 = CFSTR("CropWidthForFES");
            v464 = CFSTR("CropHeightForFES");
            v465 = CFSTR("AutoFocusSystem");
            v466 = CFSTR("VideoStabilizationTypeOverrideForStandard");
            v467 = CFSTR("HighQualitySensorWidth");
            v468 = CFSTR("HighQualitySensorHeight");
            v469 = CFSTR("FESBinningFactorHorizontal");
            v470 = CFSTR("FrontHorizontalScaleFactor");
            v471 = CFSTR("SushiRawBlackBorderingEnabled");
            v472 = CFSTR("SIFRBinningFactorOverrideForNondisruptiveSwitching");
            v473 = CFSTR("FullBinSIFROnSecondaryCameraAllowed");
            v474 = v361;
            v475 = CFSTR("SphereAssistedAutoFocusEnabled");
            v476 = CFSTR("FastSwitchingConfiguration");
            BWAddEntriesWithKeysFromDictionaryToDictionary(v103, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v453, 24), v379);
            objc_msgSend(v85, "setObject:forKeyedSubscript:", v379, v429);
            v101 = v362;
            v100 = v364;
          }
        }
      }
      v102 = v380 + 1;
    }
    while (v380 + 1 != v100);
    v100 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", &v446, v524, 16);
    if (v100)
      continue;
    break;
  }
LABEL_367:
  v243 = v85;
  if (v450)
LABEL_368:
    objc_msgSend(v243, "removeAllObjects", v344, v347);
LABEL_369:
  v371 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v375 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v389 = csu_deviceSupportsWideColor(v78, a3);
  if (v78)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(v78 + 16), "supportedProperties"), "objectForKeyedSubscript:", *MEMORY[0x1E0D059D8]);
    v244 = *(void **)(v78 + 32);
  }
  else
  {
    objc_msgSend((id)objc_msgSend(0, "supportedProperties"), "objectForKeyedSubscript:", *MEMORY[0x1E0D059D8]);
    v244 = 0;
  }
  v245 = (void *)objc_msgSend(v244, "supportedProperties", v344);
  v388 = objc_msgSend(v245, "objectForKeyedSubscript:", *MEMORY[0x1E0D07508]);
  v246 = objc_msgSend(v401, "count");
  v390 = 0;
  if (v78)
  {
    if (v246)
    {
      v390 = 0;
      v247 = *(_DWORD *)(v78 + 12);
      if (v247 <= 8 && ((1 << v247) & 0x10E) != 0)
      {
        v248 = objc_msgSend((id)-[FigCaptureSourceStreamsContainer portTypesSupportingDepth](v78), "firstObject");
        if (v248)
        {
          v249 = (void *)objc_msgSend(*(id *)(v78 + 40), "objectForKeyedSubscript:", v248);
          v390 = (void *)objc_msgSend(v249, "getProperty:error:", *MEMORY[0x1E0D07498], 0);
        }
        else
        {
          v390 = 0;
        }
      }
    }
  }
  v525 = 0u;
  v526 = 0u;
  memset(v524, 0, sizeof(v524));
  v365 = objc_msgSend(v369, "countByEnumeratingWithState:objects:count:", v524, &v453, 16);
  if (v365)
  {
    v363 = **(_QWORD **)&v524[1];
    v378 = *MEMORY[0x1E0CA9040];
    v416 = *MEMORY[0x1E0D076B8];
    do
    {
      v250 = 0;
      do
      {
        if (**(_QWORD **)&v524[1] != v363)
        {
          v251 = v250;
          objc_enumerationMutation(v369);
          v250 = v251;
        }
        v368 = v250;
        v252 = *(void **)(*((_QWORD *)&v524[0] + 1) + 8 * v250);
        v373 = (void *)objc_msgSend(v369, "objectForKeyedSubscript:", v252);
        if ((objc_msgSend(v252, "hasSuffix:", CFSTR("CinematicFraming")) & 1) == 0)
          objc_msgSend(v252, "hasSuffix:", CFSTR("GeometricDistortionCorrection"));
        v399 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v386 = v252;
        objc_msgSend(v399, "setObject:forKeyedSubscript:", v373, v252);
        v253 = objc_msgSend(v373, "objectForKeyedSubscript:", CFSTR("Variants"));
        if (v253)
        {
          v254 = v253;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(v399, "addEntriesFromDictionary:", v254);
          objc_msgSend(v373, "setObject:forKeyedSubscript:", 0, CFSTR("Variants"));
        }
        v522 = 0u;
        v521 = 0u;
        v520 = 0u;
        v519 = 0u;
        v387 = (id)objc_msgSend(v399, "allKeys");
        v255 = v386;
        v400 = objc_msgSend(v387, "countByEnumeratingWithState:objects:count:", &v519, v506, 16);
        if (v400)
        {
          v397 = *(_QWORD *)v520;
          do
          {
            v256 = 0;
            do
            {
              if (*(_QWORD *)v520 != v397)
                objc_enumerationMutation(v387);
              v257 = *(void **)(*((_QWORD *)&v519 + 1) + 8 * v256);
              v258 = (void *)objc_msgSend(v399, "objectForKeyedSubscript:", v257);
              if ((objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", CFSTR("Unsupported")), "BOOLValue") & 1) == 0)
              {
                if ((objc_msgSend(v257, "isEqualToString:", v255) & 1) == 0)
                {
                  v259 = (id)objc_msgSend(v373, "mutableCopy");
                  objc_msgSend(v259, "setValuesForKeysWithDictionary:", v258);
                  objc_msgSend(v259, "setObject:forKeyedSubscript:", 0, 0x1E49375F8);
                  v258 = v259;
                }
                v260 = objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4938918), "BOOLValue");
                v261 = objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4938938), "BOOLValue");
                if (v78)
                  v262 = *(_DWORD *)(v78 + 8);
                else
                  v262 = 0;
                v396 = v256;
                if (((v260 | v261) & 1) != 0 || v262 == 14)
                {
                  v263 = v258;
                  v264 = objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E49389B8);
                  v265 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v257, CFSTR("CinematicFraming"));
                  v266 = objc_msgSend(v243, "objectForKeyedSubscript:", v264);
                  v267 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v263);
                  if (v266)
                  {
                    v268 = v267;
                    objc_msgSend(v267, "setObject:forKeyedSubscript:", v264, CFSTR("CaptureStreamFormat"));
                    objc_msgSend(v268, "setObject:forKeyedSubscript:", 0, 0x1E49389B8);
                    if (objc_msgSend((id)objc_msgSend(v263, "objectForKeyedSubscript:", 0x1E4938A18), "intValue"))objc_msgSend(v268, "setObject:forKeyedSubscript:", objc_msgSend(v263, "objectForKeyedSubscript:", 0x1E4938A18), CFSTR("MaxFrameRateOverride"));
                    objc_msgSend(v268, "setObject:forKeyedSubscript:", 0, 0x1E49386D8);
                    v243 = v406;
                    SourceFormatDictFromDeviceFormat = csu_createSourceFormatDictFromDeviceFormat(v265, v268, v406, v392, v390, v401, v389, v388 != 0, a3, 0, 0, 0);
                    if (!SourceFormatDictFromDeviceFormat)
                      objc_msgSend(v375, "addObject:", v265);
                    v270 = MEMORY[0x1E0C9AAB0];
                    objc_msgSend(SourceFormatDictFromDeviceFormat, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4938978);
                    objb = SourceFormatDictFromDeviceFormat;
                    objc_msgSend(SourceFormatDictFromDeviceFormat, "setObject:forKeyedSubscript:", v270, 0x1E4938A38);
                    v258 = v263;
                  }
                  else
                  {
                    objb = 0;
                    v258 = v263;
                    v243 = v406;
                  }
                }
                else
                {
                  objb = 0;
                }
                if (objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4937C98))
                {
                  v271 = objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4937C98);
                  v272 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v257, CFSTR("GeometricDistortionCorrection"));
                  v273 = v243;
                  v274 = objc_msgSend(v243, "objectForKeyedSubscript:", v271);
                  v275 = v258;
                  v276 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v258);
                  if (v274)
                  {
                    v277 = v276;
                    objc_msgSend(v276, "setObject:forKeyedSubscript:", v271, CFSTR("CaptureStreamFormat"));
                    objc_msgSend(v277, "setObject:forKeyedSubscript:", 0, 0x1E4937C98);
                    v278 = csu_createSourceFormatDictFromDeviceFormat(v272, v277, v273, v392, v390, v401, v389, v388 != 0, a3, 0, 0, 0);
                    v258 = v275;
                    if (!v278)
                      objc_msgSend(v375, "addObject:", v272);
                  }
                  else
                  {
                    v278 = 0;
                  }
                }
                else
                {
                  v278 = 0;
                }
                if (objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4938D18))
                {
                  v279 = objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4938D18);
                  v280 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@_%@"), v257, CFSTR("FastSwitchingMain"));
                  v281 = objc_msgSend(v406, "objectForKeyedSubscript:", v279);
                  v282 = v258;
                  v283 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v258);
                  if (v281)
                  {
                    v284 = v283;
                    objc_msgSend(v283, "setObject:forKeyedSubscript:", v279, CFSTR("CaptureStreamFormat"));
                    objc_msgSend(v284, "setObject:forKeyedSubscript:", 0, 0x1E4938D18);
                    v285 = csu_createSourceFormatDictFromDeviceFormat(v280, v284, v406, v392, v390, v401, v389, v388 != 0, a3, 0, 0, 0);
                    v258 = v282;
                    if (!v285)
                      objc_msgSend(v375, "addObject:", v280);
                  }
                  else
                  {
                    v285 = 0;
                  }
                }
                else
                {
                  v285 = 0;
                }
                if (objc_msgSend(v258, "objectForKeyedSubscript:", v378))
                  v286 = FigCapturePixelFormatTypeFromPlistValue((void *)objc_msgSend(v258, "objectForKeyedSubscript:", v378));
                else
                  v286 = 0;
                v395 = v278;
                v394 = v285;
                if ((objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", CFSTR("Experimental")), "BOOLValue") & 1) == 0)
                {
                  if (v286 != 2016686642
                    || (v321 = objc_msgSend((id)objc_msgSend(v258, "objectForKeyedSubscript:", 0x1E4938E78), "intValue"), objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("ProResSupported")), "BOOLValue"))&& (int)BWGetDiskCapacityInGB() >= v321)
                  {
                    v322 = csu_createSourceFormatDictFromDeviceFormat((uint64_t)v257, v258, v406, v392, v390, v401, v389, v388 != 0, a3, objb, (uint64_t)v278, v285);
                    if (v322)
                    {
                      v323 = v322;
                      v287 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                      objc_msgSend(v371, "addObject:", v323);
                      objc_msgSend(v287, "addObject:", v323);
                      if (v278)
                        objc_msgSend(v287, "addObject:", v278);
                      v288 = off_1E4915000;
                      v393 = v323;
                      if (objb)
                        objc_msgSend(v287, "addObject:");
LABEL_426:
                      v487 = 0u;
                      v486 = 0u;
                      v485 = 0u;
                      *(_OWORD *)type = 0u;
                      v289 = objc_msgSend(v287, "countByEnumeratingWithState:objects:count:", type, &v492, 16);
                      if (!v289)
                        goto LABEL_459;
                      v290 = v289;
                      v291 = *(_QWORD *)v485;
                      v420 = v287;
                      while (2)
                      {
                        v292 = 0;
LABEL_429:
                        if (*(_QWORD *)v485 != v291)
                          objc_enumerationMutation(v420);
                        v293 = *(void **)(*(_QWORD *)&type[8] + 8 * v292);
                        if (!objc_msgSend((id)objc_msgSend(v293, "objectForKeyedSubscript:", 0x1E4937D98), "count"))
                        {
                          objc_msgSend(v293, "setObject:forKeyedSubscript:", 0, 0x1E4937E18);
                          objc_msgSend(v293, "setObject:forKeyedSubscript:", 0, 0x1E4937DF8);
                          objc_msgSend(v293, "setObject:forKeyedSubscript:", 0, 0x1E4937E78);
                        }
                        v294 = -[__objc2_class sharedInstance](v288[135], "sharedInstance");
                        v295 = (void *)-[FigCaptureSourceStreamsContainer streamProvidingSDOFRenderingParameters](v78);
                        if (v295)
                          v296 = (void *)-[__objc2_class sensorIDDictionaryForStream:](v294, "sensorIDDictionaryForStream:", v295);
                        else
                          v296 = 0;
                        if (objc_msgSend(v293, "objectForKeyedSubscript:", 0x1E4938E38))
                        {
                          v297 = objc_msgSend(v296, "valueForKeyPath:", CFSTR("CinematicVideoParameters.simulatedVideoAperture"));
                          if (v297)
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", v297, 0x1E4937ED8);
                          v298 = (void *)objc_msgSend(v296, "valueForKeyPath:", CFSTR("CinematicVideoParameters.minimumSimulatedVideoAperture"));
                          objc_msgSend(v298, "floatValue");
                          if (v299 > 0.0)
                          {
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", v298, 0x1E4937EF8);
                            v300 = (void *)objc_msgSend(v296, "valueForKeyPath:", CFSTR("CinematicVideoParameters.maximumSimulatedVideoAperture"));
                            objc_msgSend(v300, "floatValue");
                            if (v301 > 0.0)
                              objc_msgSend(v293, "setObject:forKeyedSubscript:", v300, 0x1E4937F18);
                          }
                        }
                        v302 = objc_msgSend(v293, "objectForKeyedSubscript:", 0x1E4938198);
                        if (v295 && v302)
                        {
                          v303 = objc_msgSend(v295, "getProperty:error:", v416, 0);
                          if (objc_msgSend(v295, "portType")
                            && (v304 = objc_msgSend(v295, "portType"),
                                v305 = -[__objc2_class sensorIDStringFromModuleInfo:](v288[135], "sensorIDStringFromModuleInfo:", v303), LODWORD(v306) = 1.0, v307 = -[__objc2_class sdofRenderingVersionForPortType:sensorIDString:zoomFactor:](v294, "sdofRenderingVersionForPortType:sensorIDString:zoomFactor:", v304, v305, v306), (_DWORD)v307))
                          {
                            v309 = v307;
                            LODWORD(v308) = 1.0;
                            v310 = (void *)-[__objc2_class sdofTuningParametersForSensorIDDictionary:zoomFactor:](v288[135], "sdofTuningParametersForSensorIDDictionary:zoomFactor:", v296, v308);
                            if ((int)v309 >= 5)
                            {
                              v311 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("SLMv%d"), v309);
                              goto LABEL_450;
                            }
                          }
                          else
                          {
                            v310 = 0;
                          }
                          v311 = CFSTR("SLM");
LABEL_450:
                          v312 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.simulatedAperture"), v311);
                          v313 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.minimumSimulatedAperture"), v311);
                          v314 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.maximumSimulatedAperture"), v311);
                          v315 = objc_msgSend(v310, "valueForKeyPath:", v312);
                          if (v315)
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", v315, 0x1E4937ED8);
                          v316 = (void *)objc_msgSend(v310, "valueForKeyPath:", v313);
                          objc_msgSend(v316, "floatValue");
                          v78 = a1;
                          if (v317 > 0.0)
                          {
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", v316, 0x1E4937EF8);
                            v318 = (void *)objc_msgSend(v310, "valueForKeyPath:", v314);
                            objc_msgSend(v318, "floatValue");
                            if (v319 > 0.0)
                              objc_msgSend(v293, "setObject:forKeyedSubscript:", v318, 0x1E4937F18);
                          }
                          v320 = objc_msgSend(v296, "valueForKeyPath:", CFSTR("PortraitLightingParameters.effectStrength"));
                          v288 = off_1E4915000;
                          if (v320)
                          {
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", v320, 0x1E4937F38);
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", objc_msgSend(v296, "valueForKeyPath:", CFSTR("PortraitLightingParameters.minEffectStrength")), 0x1E4937F58);
                            objc_msgSend(v293, "setObject:forKeyedSubscript:", objc_msgSend(v296, "valueForKeyPath:", CFSTR("PortraitLightingParameters.maxEffectStrength")), 0x1E4937F78);
                          }
                        }
                        if (v290 == ++v292)
                        {
                          v290 = objc_msgSend(v420, "countByEnumeratingWithState:objects:count:", type, &v492, 16);
                          if (!v290)
                          {
LABEL_459:

                            v243 = v406;
                            v255 = v386;
                            v256 = v396;
                            goto LABEL_460;
                          }
                          continue;
                        }
                        goto LABEL_429;
                      }
                    }
                    objc_msgSend(v375, "addObject:", v257);
                  }
                }
                v287 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
                v393 = 0;
                v288 = off_1E4915000;
                goto LABEL_426;
              }
LABEL_460:
              ++v256;
            }
            while (v256 != v400);
            v324 = objc_msgSend(v387, "countByEnumeratingWithState:objects:count:", &v519, v506, 16);
            v400 = v324;
          }
          while (v324);
        }
        v250 = v368 + 1;
      }
      while (v368 + 1 != v365);
      v365 = objc_msgSend(v369, "countByEnumeratingWithState:objects:count:", v524, &v453, 16);
    }
    while (v365);
  }
  objc_msgSend(v371, "sortUsingFunction:context:", csu_compareSourceFormats, 0);
  if (objc_msgSend(v375, "count"))
    *a7 = v375;

  v422 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  memset(v506, 0, sizeof(v506));
  v507 = 0u;
  v508 = 0u;
  v325 = v367;
  result = -[__CFString countByEnumeratingWithState:objects:count:](v367, "countByEnumeratingWithState:objects:count:", v506, &v453, 16);
  if (result)
  {
    v327 = result;
    v328 = **(_QWORD **)&v506[1];
    v424 = *MEMORY[0x1E0CECEF0];
    v421 = (id)*MEMORY[0x1E0CECFD0];
    v419 = *MEMORY[0x1E0CED1A0];
    v417 = *MEMORY[0x1E0CED178];
    do
    {
      v329 = 0;
      do
      {
        if (**(_QWORD **)&v506[1] != v328)
          objc_enumerationMutation(v325);
        v330 = *(_QWORD *)(*((_QWORD *)&v506[0] + 1) + 8 * v329);
        v331 = (void *)-[__CFString objectForKeyedSubscript:](v325, "objectForKeyedSubscript:", v330);
        v332 = objc_msgSend(v331, "objectForKeyedSubscript:", CFSTR("VideoCodec"));
        v333 = (void *)objc_msgSend(v369, "objectForKeyedSubscript:", objc_msgSend(v331, "objectForKeyedSubscript:", CFSTR("DeviceFormat")));
        if (v333)
        {
          v334 = v333;
          v335 = objc_msgSend((id)objc_msgSend(v333, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
          v336 = objc_msgSend((id)objc_msgSend(v334, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
          v337 = (id)objc_msgSend((id)objc_msgSend(v331, "objectForKeyedSubscript:", CFSTR("VideoCompressionProperties")), "mutableCopy");
          if (objc_msgSend(v337, "objectForKeyedSubscript:", v424))
          {
            objc_msgSend(v337, "setObject:forKeyedSubscript:", objc_msgSend(v331, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), v421);
            objc_msgSend(v337, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v419);
            objc_msgSend(v337, "setObject:forKeyedSubscript:", &unk_1E49F99D8, v417);
            v338 = (void *)MEMORY[0x1E0C99D80];
            v339 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v335);
            objc_msgSend(v422, "setObject:forKeyedSubscript:", objc_msgSend(v338, "dictionaryWithObjectsAndKeys:", v332, CFSTR("AVVideoCodecKey"), v339, CFSTR("AVVideoWidthKey"), objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v336), CFSTR("AVVideoHeightKey"), v337, CFSTR("AVVideoCompressionPropertiesKey"), 0), v330);
          }
        }
        ++v329;
        v325 = v367;
      }
      while (v327 != v329);
      result = -[__CFString countByEnumeratingWithState:objects:count:](v367, "countByEnumeratingWithState:objects:count:", v506, &v453, 16);
      v327 = result;
    }
    while (result);
  }
  *a5 = v371;
  *a6 = v422;
  return result;
}

uint64_t csu_deviceSupportsWideColor(uint64_t a1, void *a2)
{
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  void *v6;

  if (a1)
  {
    v3 = *(_DWORD *)(a1 + 8);
    v4 = v3 > 0x14 || ((1 << v3) & 0x100420) == 0;
    if (!v4 || v3 - 21 > 0xFFFFFFFB)
      return 0;
  }
  result = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("wideColorSupported")), "BOOLValue");
  if ((_DWORD)result)
  {
    if (a1)
      v6 = *(void **)(a1 + 32);
    else
      v6 = 0;
    return (unint64_t)objc_msgSend((id)objc_msgSend(v6, "getProperty:error:", *MEMORY[0x1E0D077C8], 0), "count") > 1;
  }
  return result;
}

void csu_mergeInCommonEntries(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("Common"));
  objc_msgSend(a1, "removeObjectForKey:", CFSTR("Common"));
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(a1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * v6));
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

uint64_t __csu_removeExperimentalDeviceFormats_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v7;

  if (objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Experimental")), "BOOLValue"))
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  v7 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", 0x1E4938078);
  return objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(v7, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", &__block_literal_global_584)), 0x1E4938078);
}

uint64_t __csu_removeExperimentalDeviceFormats_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Experimental")), "BOOLValue") ^ 1;
}

uint64_t __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("Unsupported")), "BOOLValue");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return result;
}

uint64_t __csu_removeUnsupportedDeviceFormatsAndDependentPresets_block_invoke_2(id *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    a3 = (void *)objc_msgSend(a1[4], "objectForKeyedSubscript:", a3);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = v3;
      LODWORD(v8) = 0;
      FigDebugAssert3();
    }
  }
  result = objc_msgSend(a1[5], "containsObject:", objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("DeviceFormat"), v8, v9));
  if ((_DWORD)result)
    return objc_msgSend(a1[6], "addObject:", a2);
  return result;
}

void __csu_resolveSessionPresetAliases_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = (void *)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a3);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v9 = v3;
      LODWORD(v8) = 0;
      FigDebugAssert3();
    }
    v10 = (id)objc_msgSend(v7, "mutableCopy", v8, v9);
    objc_msgSend(*(id *)(a1 + 40), "setObject:forKeyedSubscript:", v10, a2);

  }
}

uint64_t csu_resolveFormatIndexForNamedStreamFormat(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, _DWORD *a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  BOOL v43;
  int v44;
  BOOL v45;
  int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v52;
  int v53;
  int v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  void *v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _BYTE v89[128];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v74 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SensorWidth")), "intValue");
  v73 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SensorHeight")), "intValue");
  v80 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("FESWidth")), "intValue");
  v78 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("FESHeight")), "intValue");
  v10 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("Binned")), "BOOLValue");
  v71 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("HDR")), "BOOLValue");
  v70 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("FES")), "BOOLValue");
  v54 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("MaxFrameRate")), "intValue");
  v69 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SIFREnabled")), "BOOLValue");
  v11 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("SIFRBinningFactor")), "intValue");
  v72 = v10;
  if (v10)
    v12 = 2;
  else
    v12 = 1;
  if (v11)
    v12 = v11;
  v53 = v12;
  v75 = a4;
  v52 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("OptimizedForMidFrameSynchronization")), "BOOLValue");
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v13 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v85, v89, 16);
  if (!v13)
    goto LABEL_74;
  v14 = v13;
  v15 = 0;
  v16 = *(_QWORD *)v86;
  v64 = *MEMORY[0x1E0D07ED0];
  v63 = *MEMORY[0x1E0D07EC8];
  v62 = *MEMORY[0x1E0D07EC0];
  v61 = *MEMORY[0x1E0D07E80];
  v60 = *MEMORY[0x1E0D07E78];
  v59 = *MEMORY[0x1E0D07E98];
  v79 = -1;
  v57 = *MEMORY[0x1E0D07EA0];
  v58 = *MEMORY[0x1E0D07EA8];
  v56 = *MEMORY[0x1E0D07E90];
  v67 = a1;
  v68 = a2;
  v65 = *(_QWORD *)v86;
  v66 = a5;
  do
  {
    v17 = 0;
    v76 = v14;
    do
    {
      if (*(_QWORD *)v86 != v16)
        objc_enumerationMutation(a5);
      v18 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * v17);
      if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("Experimental")), "BOOLValue"))
      {
        ++v15;
      }
      else
      {
        v19 = objc_msgSend(&unk_1E4A008A8, "containsObject:", FigCaptureGetModelSpecificName());
        v20 = objc_msgSend(&unk_1E4A008C0, "containsObject:", a1);
        v21 = objc_msgSend(a2, "isEqualToString:", CFSTR("Video-4by3-Medium-Resolution"));
        if (v19 && v20 && v21 && v15 == 28)
        {
          v15 = 29;
        }
        else
        {
          v22 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v64), "intValue");
          v23 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v63), "intValue");
          v84 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
          v83 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v62), "intValue");
          v24 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v61), "intValue");
          v25 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v60), "intValue");
          v81 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
          v26 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v59), "intValue");
          v27 = objc_msgSend((id)objc_msgSend(v75, "objectForKeyedSubscript:", v59), "intValue");
          if (v27)
            v28 = v27;
          else
            v28 = 2;
          if (v26)
            v29 = v28;
          else
            v29 = v27;
          v82 = v25;
          v30 = v25 <= 0 || v24 <= 0;
          v31 = !v30;
          v32 = v70 ^ v31 ^ 1;
          if (v30)
            v33 = 0;
          else
            v33 = v70;
          if (v33 == 1 && v80 >= 1)
          {
            v34 = v22;
            if (v78 >= 1)
              v32 = v24 == v80 && v82 == v78;
          }
          else
          {
            v34 = v22;
          }
          v77 = v24;
          v36 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v58), "BOOLValue");
          v37 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v57), "intValue");
          v38 = v69 ^ v36 ^ 1;
          if (v69)
          {
            v39 = v37 <= 1 ? 1 : v37;
            v40 = v53 == v39;
            if (v36)
              v38 = v40;
          }
          v41 = v26 == v29;
          v42 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v56), "BOOLValue");
          v43 = v34 == v74 && v23 == v73;
          v44 = v72 ^ v84;
          if (!v43)
            v44 = 1;
          if ((v41 & ~v44 & (v71 ^ (v83 < 1)) & v32) == 1)
          {
            v45 = v54 <= 0 || v81 == v54;
            v46 = v38 ^ 1;
            if (!v45)
              v46 = 1;
            v47 = v79;
            v48 = v46 | v52 ^ v42;
            if (v79 != -1)
              v48 = 1;
            if (!v48)
              v47 = v15;
            v79 = v47;
            v16 = v65;
            a5 = v66;
            if ((v48 & 1) != 0)
            {
              a2 = v68;
            }
            else
            {
              a2 = v68;
              if (a6)
              {
                *a6 = v77;
                a6[1] = v82;
                v79 = v15;
              }
            }
          }
          else
          {
            a2 = v68;
            v16 = v65;
            a5 = v66;
          }
          ++v15;
          a1 = v67;
          v14 = v76;
        }
      }
      ++v17;
    }
    while (v14 != v17);
    v49 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v85, v89, 16);
    v14 = v49;
  }
  while (v49);
  result = v79;
  if (v79 == -1)
  {
LABEL_74:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0xFFFFFFFFLL;
  }
  return result;
}

id csu_createSourceFormatDictFromDeviceFormat(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  id v18;
  void *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  char v46;
  int v47;
  void *v48;
  int v49;
  _BOOL4 v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  _BOOL4 v57;
  uint64_t v58;
  int v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  BOOL v85;
  BOOL v86;
  unsigned int v87;
  void *v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t j;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t k;
  void *v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t m;
  void *v128;
  int v129;
  _BOOL4 v130;
  uint64_t v131;
  void *v132;
  int v133;
  __CFString *v134;
  __CFString *v135;
  int v136;
  int v137;
  void *v138;
  const __CFString *v139;
  void *v140;
  int v141;
  int v142;
  void *v143;
  int v144;
  uint64_t v145;
  float v146;
  float v147;
  double v148;
  uint64_t v149;
  uint64_t v150;
  double ISPHardwareCharacteristics;
  int v152;
  int v153;
  float v154;
  int v155;
  int v156;
  double v157;
  char v158;
  char v159;
  __CFString **v160;
  void *v161;
  __CFString **v162;
  __CFString **v163;
  uint64_t v164;
  __CFString **v165;
  void *v167;
  __CFString *v168;
  __CFString *v169;
  int v170;
  _BOOL4 v171;
  unsigned int v172;
  void *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  uint64_t v196;
  int obj;
  id obja;
  int v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  void *v203;
  int v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _QWORD v223[126];
  _QWORD v224[38];
  _QWORD v225[17];
  _BYTE v226[128];
  _QWORD v227[10];
  os_log_type_t type[8];
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD v238[32];
  _DWORD v239[3];
  __int128 v240;
  __int128 v241;
  int v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v18 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v19 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CaptureStreamFormat")));
  v20 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue");
  v21 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("position")), "intValue");
  if (v20 > 0x14 || ((1 << v20) & 0x100420) == 0)
  {
    v171 = v20 - 21 < 0xFFFFFFFC;
    if (v19)
      goto LABEL_4;
LABEL_24:
    FigDebugAssert3();
    v238[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_135:

    return 0;
  }
  v171 = 0;
  if (!v19)
    goto LABEL_24;
LABEL_4:
  obj = a8;
  v199 = a7;
  v173 = a4;
  v170 = v21;
  objc_msgSend(v18, "setObject:forKeyedSubscript:", a1);
  v187 = a2;
  v22 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("PixelFormatType"));
  v23 = (uint64_t *)MEMORY[0x1E0D07EE8];
  v172 = v20;
  v24 = v19;
  if (v22)
  {
    v174 = FigCapturePixelFormatTypeFromPlistValue((void *)objc_msgSend(v187, "objectForKeyedSubscript:", CFSTR("PixelFormatType")));
    if (v174)
      goto LABEL_13;
  }
  v174 = 1278226488;
  if (v20 != 5)
  {
    if (v20 == 10)
    {
      v174 = 1785950320;
    }
    else if (v20 != 20)
    {
      if (v20 - 17 >= 4)
        v25 = 875704438;
      else
        v25 = 875704422;
      v174 = v25;
LABEL_13:
      v209 = 0u;
      v210 = 0u;
      v207 = 0u;
      v208 = 0u;
      v26 = *v23;
      v27 = (void *)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v26), "allKeys");
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v207, v226, 16);
      if (v28)
      {
        v29 = v28;
        v30 = *(_QWORD *)v208;
        v31 = *MEMORY[0x1E0D08068];
        while (2)
        {
          for (i = 0; i != v29; ++i)
          {
            if (*(_QWORD *)v208 != v30)
              objc_enumerationMutation(v27);
            v33 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", v26), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v207 + 1) + 8 * i)), "objectForKeyedSubscript:", v31);
            if ((objc_msgSend(v33, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v174)) & 1) != 0)
            {
              v24 = v19;
              goto LABEL_26;
            }
          }
          v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v207, v226, 16);
          if (v29)
            continue;
          break;
        }
      }
      goto LABEL_134;
    }
  }
LABEL_26:
  v35 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v174);
  v179 = *MEMORY[0x1E0CA9040];
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v35);
  v168 = (__CFString *)*MEMORY[0x1E0D07ED0];
  v169 = (__CFString *)*MEMORY[0x1E0D07EC8];
  v225[0] = *MEMORY[0x1E0D07ED0];
  v225[1] = v169;
  v182 = *MEMORY[0x1E0D07E80];
  v184 = *MEMORY[0x1E0D07E78];
  v225[2] = *MEMORY[0x1E0D07E80];
  v225[3] = v184;
  v178 = *MEMORY[0x1E0D08820];
  v225[4] = *MEMORY[0x1E0D08820];
  v225[5] = CFSTR("VideoMinFrameRate");
  v225[6] = CFSTR("VideoMaxFrameRate");
  v225[7] = CFSTR("VideoIsBinned");
  v36 = *MEMORY[0x1E0D08828];
  v225[8] = *MEMORY[0x1E0D08830];
  v225[9] = v36;
  v37 = *MEMORY[0x1E0D07E70];
  v225[10] = *MEMORY[0x1E0D07E88];
  v225[11] = v37;
  v225[12] = CFSTR("VideoBinningFactorHorizontal");
  v225[13] = CFSTR("VideoBinningFactorVertical");
  v38 = *MEMORY[0x1E0D07EA0];
  v188 = *MEMORY[0x1E0D07EA8];
  v225[14] = *MEMORY[0x1E0D07EA8];
  v225[15] = v38;
  v39 = *MEMORY[0x1E0D07E98];
  v225[16] = *MEMORY[0x1E0D07E98];
  BWAddEntriesWithKeysFromDictionaryToDictionary(v24, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v225, 17), v18);
  v190 = *MEMORY[0x1E0D07EE8];
  v40 = (void *)objc_msgSend(v24, "objectForKeyedSubscript:");
  v41 = (void *)objc_msgSend(v40, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FD8]);
  v42 = (void *)objc_msgSend(v41, "objectForKeyedSubscript:", *MEMORY[0x1E0D07F50]);
  if (v42)
  {
    v43 = objc_msgSend(v42, "intValue");
    if (v43 == 144)
      v44 = 288;
    else
      v44 = v43;
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v44), 0x1E4938ED8);
  }
  v45 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoIsBinned")), "BOOLValue");
  v46 = v45;
  if (v45)
    v47 = 2;
  else
    v47 = 1;
  v48 = v187;
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorHorizontal")), "intValue") == v47)objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, CFSTR("VideoBinningFactorHorizontal"));
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorVertical")), "intValue") == v47)objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, CFSTR("VideoBinningFactorVertical"));
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v38), "intValue") == v47)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, v38);
  if ((v46 & 1) == 0)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, CFSTR("VideoIsBinned"));
  v186 = v38;
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v39), "intValue") == 2)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, v39);
  v224[0] = 0x1E49375D8;
  v224[1] = 0x1E4937718;
  v224[2] = 0x1E4937858;
  v224[3] = 0x1E4937878;
  v224[4] = 0x1E4937898;
  v224[5] = 0x1E49378B8;
  v224[6] = 0x1E49378D8;
  v224[7] = 0x1E49378F8;
  v224[8] = 0x1E4937918;
  v224[9] = 0x1E4937938;
  v224[10] = 0x1E4937958;
  v224[11] = 0x1E4937978;
  v224[12] = 0x1E4937818;
  v224[13] = 0x1E4937838;
  v224[14] = 0x1E4937BB8;
  v224[15] = 0x1E4937BD8;
  v224[16] = 0x1E4937638;
  v224[17] = 0x1E4938758;
  v224[18] = 0x1E4937CB8;
  v224[19] = 0x1E4937CD8;
  v224[20] = 0x1E4937CF8;
  v224[21] = 0x1E4937B78;
  v224[22] = 0x1E4937B98;
  v224[23] = 0x1E4937658;
  v224[24] = 0x1E4937678;
  v224[25] = 0x1E4937698;
  v224[26] = 0x1E49376B8;
  v224[27] = 0x1E49376D8;
  v224[28] = 0x1E49376F8;
  v224[29] = 0x1E4937D58;
  v224[30] = 0x1E49386B8;
  v224[31] = 0x1E49379B8;
  v224[32] = 0x1E4938018;
  v224[33] = CFSTR("FrontHorizontalScaleFactor");
  v224[34] = 0x1E4938EF8;
  v224[35] = 0x1E4937D78;
  v224[36] = 0x1E4937E38;
  v224[37] = 0x1E4938CF8;
  BWAddEntriesWithKeysFromDictionaryToDictionary(v19, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v224, 38), v18);
  v223[0] = CFSTR("Experimental");
  v223[1] = CFSTR("Unsupported");
  v223[2] = 0x1E4929418;
  v223[3] = 0x1E4929438;
  v223[4] = 0x1E49379D8;
  v223[5] = 0x1E49379F8;
  v223[6] = 0x1E4937A18;
  v223[7] = 0x1E4937A38;
  v223[8] = 0x1E4938198;
  v223[9] = 0x1E4938BF8;
  v223[10] = 0x1E4938C18;
  v223[11] = 0x1E4938C38;
  v223[12] = 0x1E4938C58;
  v223[13] = 0x1E4938C78;
  v223[14] = 0x1E4938C98;
  v223[15] = 0x1E4938CB8;
  v223[16] = 0x1E4938CD8;
  v223[17] = 0x1E4938D18;
  v223[18] = 0x1E49381B8;
  v223[19] = 0x1E49381F8;
  v223[20] = 0x1E4938418;
  v223[21] = 0x1E49386D8;
  v223[22] = 0x1E49387D8;
  v223[23] = 0x1E49386F8;
  v223[24] = 0x1E4938718;
  v223[25] = 0x1E4938738;
  v223[26] = 0x1E4938758;
  v223[27] = 0x1E4938798;
  v223[28] = 0x1E4938778;
  v223[29] = 0x1E49387B8;
  v223[30] = 0x1E4938818;
  v223[31] = 0x1E4937A58;
  v223[32] = 0x1E4937A78;
  v223[33] = 0x1E4937DF8;
  v223[34] = 0x1E4937E18;
  v223[35] = 0x1E4937E78;
  v223[36] = 0x1E4938B58;
  v223[37] = 0x1E4937AD8;
  v223[38] = 0x1E4938218;
  v223[39] = 0x1E4937B18;
  v223[40] = 0x1E4938238;
  v223[41] = 0x1E4938258;
  v223[42] = 0x1E4938278;
  v223[43] = 0x1E4938298;
  v223[44] = 0x1E49382B8;
  v223[45] = 0x1E49382D8;
  v223[46] = 0x1E4934738;
  v223[47] = 0x1E49382F8;
  v223[48] = 0x1E4938318;
  v223[49] = 0x1E4938338;
  v223[50] = 0x1E4938358;
  v223[51] = 0x1E4938378;
  v223[52] = 0x1E4938398;
  v223[53] = 0x1E49383B8;
  v223[54] = 0x1E49383D8;
  v223[55] = 0x1E49383F8;
  v223[56] = 0x1E4938438;
  v223[57] = 0x1E4938458;
  v223[58] = 0x1E4938478;
  v223[59] = 0x1E4938BD8;
  v223[60] = 0x1E49384B8;
  v223[61] = 0x1E49384F8;
  v223[62] = 0x1E4938518;
  v223[63] = 0x1E4938538;
  v223[64] = 0x1E4938558;
  v223[65] = 0x1E4938578;
  v223[66] = 0x1E4937D98;
  v223[67] = 0x1E4937E98;
  v223[68] = 0x1E4937EB8;
  v223[69] = 0x1E4937AB8;
  v223[70] = 0x1E4937998;
  v223[71] = 0x1E4937758;
  v223[72] = 0x1E4937778;
  v223[73] = 0x1E4938078;
  v223[74] = 0x1E49375F8;
  v223[75] = 0x1E49377D8;
  v223[76] = 0x1E49377F8;
  v223[77] = 0x1E4937AF8;
  v223[78] = 0x1E4937618;
  v223[79] = 0x1E4938D38;
  v223[80] = 0x1E4938D58;
  v223[81] = 0x1E4938BB8;
  v223[82] = 0x1E4937A98;
  v223[83] = 0x1E49385D8;
  v223[84] = 0x1E49385F8;
  v223[85] = 0x1E4938D78;
  v223[86] = 0x1E4938658;
  v223[87] = 0x1E4938878;
  v223[88] = 0x1E4938B78;
  v223[89] = 0x1E4937F98;
  v223[90] = 0x1E4937B38;
  v223[91] = 0x1E4938498;
  v223[92] = 0x1E4938918;
  v223[93] = 0x1E4938938;
  v223[94] = 0x1E49389D8;
  v223[95] = 0x1E49389F8;
  v223[96] = 0x1E4938A18;
  v223[97] = 0x1E4938E38;
  v223[98] = 0x1E4938E58;
  v223[99] = 0x1E4938838;
  v223[100] = 0x1E4938858;
  v223[101] = 0x1E4937C98;
  v223[102] = 0x1E4938038;
  v223[103] = 0x1E4938058;
  v223[104] = 0x1E4938158;
  v223[105] = 0x1E4938178;
  v223[106] = 0x1E4937D18;
  v223[107] = 0x1E4938D98;
  v223[108] = 0x1E4938DD8;
  v223[109] = 0x1E4938DF8;
  v223[110] = 0x1E4938DB8;
  v223[111] = 0x1E4937BF8;
  v223[112] = 0x1E4937C18;
  v223[113] = 0x1E4937C38;
  v223[114] = 0x1E49384D8;
  v223[115] = 0x1E4938F18;
  v223[116] = 0x1E4937E58;
  v223[117] = 0x1E4938F38;
  v223[118] = 0x1E4938E18;
  v223[119] = 0x1E4938838;
  v223[120] = 0x1E4938858;
  v223[121] = 0x1E4938B98;
  v223[122] = 0x1E4938F58;
  v223[123] = 0x1E4937C58;
  v223[124] = 0x1E4938F78;
  v223[125] = 0x1E4938F98;
  BWAddEntriesWithKeysFromDictionaryToDictionary(v187, (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v223, 126), v18);
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
  {
    if ((objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1E49385D8), "BOOLValue") & 1) == 0)
      goto LABEL_73;
  }
  else
  {
    v49 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937AD8), "BOOLValue");
    v180 = objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937718);
    v50 = (int)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1E4937858), "intValue") > 0
       || (int)objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1E4937878), "intValue") > 0;
    v51 = objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("deviceType")), "intValue");
    v52 = v51 - 10;
    v53 = (v51 < 0xA) & (0x310u >> v51);
    v54 = objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("position")), "intValue");
    v55 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
    v56 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
    if (v55 == 2592 && v56 == 1936)
    {
      v57 = 1;
      v58 = v180;
    }
    else
    {
      v58 = v180;
      v57 = v55 == 3264 && v56 == 2448 || v55 == 4032 && v56 == 3024;
    }
    if (v58)
      v60 = 0;
    else
      v60 = v49;
    v48 = v187;
    if ((v60 | v50 | v53) == 1 || v54 != 1 || v52 > 0xFFFFFFFC || !v57)
      goto LABEL_73;
  }
  v61 = (void *)objc_msgSend(v19, "objectForKeyedSubscript:", v190);
  v62 = (void *)objc_msgSend(v61, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF8]);
  v63 = (void *)objc_msgSend(v62, "objectForKeyedSubscript:", *MEMORY[0x1E0D07C98]);
  if (v63)
  {
    v64 = objc_msgSend(v63, "unsignedIntValue");
    v65 = objc_msgSend(v19, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EF0]);
    if ((_DWORD)v64)
    {
      v66 = v65;
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v64), 0x1E4938598);
      if (v66)
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v66, 0x1E49385B8);
    }
  }
LABEL_73:
  v67 = (void *)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1E4938618);
  if (v67)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", FigCapturePixelFormatTypeFromPlistValue(v67)), 0x1E4938618);
  v68 = (void *)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1E4938638);
  if (v68)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", FigCapturePixelFormatTypeFromPlistValue(v68)), 0x1E4938638);
  if ((objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("hasAutoFocus")), "BOOLValue") & 1) == 0
    && objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937BB8), "intValue"))
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", 0, 0x1E4937BB8);
  }
  v69 = v19;
  if (!objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937BB8)
    && objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("hasAutoFocus")), "BOOLValue"))
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &unk_1E49F9840, 0x1E4937BB8);
  }
  if (obj
    && objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937BB8), "intValue") == 2)
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4937BD8);
  }
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E49381B8), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("stillImageNoiseReductionAndFusionScheme")), "intValue") <= 3)
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E49381D8);
  }
  v70 = 0x1E0CB3000;
  if (v199)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4937B58);
  if (objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MaxFrameRateOverride")))
  {
    v71 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MaxFrameRateOverride")), "intValue");
    v72 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "intValue");
    v73 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
    if (v71 >= v72 && v71 <= v73)
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MaxFrameRateOverride")), CFSTR("VideoMaxFrameRate"));
  }
  if (objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MinFrameRateOverride")))
  {
    v74 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MinFrameRateOverride")), "intValue");
    v75 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate")), "intValue");
    v76 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
    if (v74 >= v75 && v74 <= v76)
      objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("MinFrameRateOverride")), CFSTR("VideoMinFrameRate"));
  }
  objc_msgSend(v173, "objectForKeyedSubscript:", CFSTR("localizedName"));
  v77 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
  v78 = objc_msgSend((id)objc_msgSend(v48, "objectForKeyedSubscript:", 0x1E4929438), "intValue");
  v79 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1E4937858), "intValue");
  if (!v79)
    v79 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("SensorWidth")), "intValue");
  v80 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1E4937878), "intValue");
  if (!v80)
    v80 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", CFSTR("SensorHeight")), "intValue");
  v81 = objc_msgSend((id)objc_msgSend(v19, "objectForKeyedSubscript:", 0x1E4937818), "intValue");
  if (!v81)
    v81 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v182), "intValue");
  v82 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", 0x1E4937838), "intValue");
  if (!v82)
    v82 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v184), "intValue");
  if (!v81)
    v81 = v79;
  if (v82)
    v83 = v82;
  else
    v83 = v80;
  v84 = objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", 0x1E49386D8), "BOOLValue");
  v85 = v77 >= v81;
  v86 = v77 > v81;
  if (v84)
  {
    v87 = v172;
    v88 = v187;
    if (v85 || v78 >= v83)
    {
LABEL_134:
      FigDebugAssert3();
      goto LABEL_135;
    }
  }
  else
  {
    v87 = v172;
    v88 = v187;
    if (v86 || v78 > v83)
      goto LABEL_134;
  }
  if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1E4937B38), "BOOLValue"))
  {
    if (!objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v188), "BOOLValue"))
      goto LABEL_134;
    v89 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorHorizontal")), "intValue");
    v90 = v89 <= 1 ? 1 : v89;
    v91 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", CFSTR("VideoBinningFactorVertical")), "intValue");
    v92 = v91 <= 1 ? 1 : v91;
    v93 = objc_msgSend((id)objc_msgSend(v69, "objectForKeyedSubscript:", v186), "intValue");
    v94 = v93 <= 1 ? 1 : v93;
    if (v94 != v92 || v94 != v90)
      goto LABEL_134;
  }
  obja = (id)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1E4937D98);
  v95 = v173;
  if (objc_msgSend(obja, "count"))
  {
    if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", CFSTR("ExperimentalSupportedDepthFormats")), "BOOLValue"))
    {
      objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA60], 0x1E4937D98);
    }
    else
    {
      v176 = objc_msgSend(v18, "objectForKeyedSubscript:", v178);
      v175 = objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMinFrameRate"));
      v167 = v18;
      v183 = objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate"));
      v177 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(obja, "count"));
      v219 = 0u;
      v220 = 0u;
      v221 = 0u;
      v222 = 0u;
      v96 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v219, &v240, 16);
      if (v96)
      {
        v97 = v96;
        v200 = 0;
        v202 = 0;
        v98 = 0;
        v99 = 0;
        v100 = *(_QWORD *)v220;
        do
        {
          for (j = 0; j != v97; ++j)
          {
            if (*(_QWORD *)v220 != v100)
              objc_enumerationMutation(obja);
            v102 = *(_QWORD *)(*((_QWORD *)&v219 + 1) + 8 * j);
            v103 = (void *)objc_msgSend(a6, "objectForKeyedSubscript:", v102);
            v104 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4929418);
            if ((int)objc_msgSend(v104, "intValue") > v98)
            {
              v98 = objc_msgSend(v104, "intValue");
              v202 = v102;
            }
            v105 = (void *)objc_msgSend(v103, "objectForKeyedSubscript:", 0x1E4937DB8);
            if ((int)objc_msgSend(v105, "intValue") > v99)
            {
              v99 = objc_msgSend(v105, "intValue");
              v200 = v102;
            }
          }
          v97 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v219, &v240, 16);
        }
        while (v97);
      }
      else
      {
        v200 = 0;
        v202 = 0;
      }
      v106 = v202;
      if (!v202)
        v106 = v200;
      v181 = v106;
      v217 = 0u;
      v218 = 0u;
      v215 = 0u;
      v216 = 0u;
      v88 = v187;
      v196 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v215, v239, 16);
      if (v196)
      {
        v189 = *(_QWORD *)v216;
        do
        {
          for (k = 0; k != v196; ++k)
          {
            if (*(_QWORD *)v216 != v189)
              objc_enumerationMutation(obja);
            v108 = *(void **)(*((_QWORD *)&v215 + 1) + 8 * k);
            v109 = objc_msgSend(a6, "objectForKeyedSubscript:", v108);
            if (v109)
            {
              v110 = (void *)v109;
              v111 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v112 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4929418);
              v113 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4929438);
              v114 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4937DB8);
              if (v114)
                v115 = v114;
              else
                v115 = v112;
              v194 = v115;
              v116 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4937DD8);
              if (v116)
                v117 = v116;
              else
                v117 = v113;
              v193 = v117;
              v118 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4937FB8);
              v203 = (void *)v112;
              if (v118)
                v119 = v118;
              else
                v119 = v112;
              v120 = objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4937FD8);
              v201 = (void *)v113;
              if (v120)
                v121 = v120;
              else
                v121 = v113;
              v122 = objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("MaxFrameRate"));
              v123 = v183;
              if (v122)
                v123 = v122;
              v192 = v123;
              v195 = (void *)objc_msgSend(v110, "objectForKeyedSubscript:", 0x1E4938398);
              v211 = 0u;
              v212 = 0u;
              v213 = 0u;
              v214 = 0u;
              v124 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v211, v238, 16);
              if (v124)
              {
                v125 = v124;
                v185 = v108;
                v126 = *(_QWORD *)v212;
                while (2)
                {
                  for (m = 0; m != v125; ++m)
                  {
                    if (*(_QWORD *)v212 != v126)
                      objc_enumerationMutation(a5);
                    v128 = *(void **)(*((_QWORD *)&v211 + 1) + 8 * m);
                    if (objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1E4929418), "isEqual:", v119)&& (objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1E4929438), "isEqual:", v121) & 1) != 0|| objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1E4929418), "isEqual:", v121)&& objc_msgSend((id)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1E4929438), "isEqual:", v119))
                    {
                      v191 = (void *)objc_msgSend(v128, "objectForKeyedSubscript:", 0x1E4937FF8);
                      goto LABEL_184;
                    }
                  }
                  v125 = objc_msgSend(a5, "countByEnumeratingWithState:objects:count:", &v211, v238, 16);
                  if (v125)
                    continue;
                  break;
                }
                v191 = 0;
LABEL_184:
                v88 = v187;
                v108 = v185;
              }
              else
              {
                v191 = 0;
              }
              v129 = objc_msgSend(v108, "isEqualToString:", v181);
              v130 = (int)objc_msgSend(v203, "intValue") >= 1 && (int)objc_msgSend(v201, "intValue") > 0;
              if (objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("DisparitySupported")))
              {
                objc_msgSend(v111, "addObject:", &unk_1E49F98B8);
                objc_msgSend(v111, "addObject:", &unk_1E49F98D0);
              }
              if (objc_msgSend(v110, "objectForKeyedSubscript:", CFSTR("DepthSupported")))
              {
                objc_msgSend(v111, "addObject:", &unk_1E49F98E8);
                objc_msgSend(v111, "addObject:", &unk_1E49F9900);
              }
              if (objc_msgSend(v111, "count"))
              {
                v131 = objc_msgSend(v111, "firstObject");
                objc_msgSend(v111, "removeObject:", v131);
                v227[0] = v179;
                v227[1] = 0x1E4937D38;
                *(_QWORD *)type = v131;
                v229 = v111;
                v227[2] = 0x1E49375B8;
                v227[3] = 0x1E4929418;
                v230 = v108;
                v231 = v203;
                v227[4] = 0x1E4929438;
                v227[5] = CFSTR("VideoMinFrameRate");
                v232 = v201;
                v233 = v175;
                v227[6] = CFSTR("VideoMaxFrameRate");
                v227[7] = v178;
                v234 = v192;
                v235 = v176;
                v227[8] = 0x1E4937DB8;
                v227[9] = 0x1E4937DD8;
                v236 = v194;
                v237 = v193;
                v132 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", type, v227, 10));
                if (objc_msgSend(v191, "BOOLValue"))
                  objc_msgSend(v132, "setObject:forKeyedSubscript:", v191, 0x1E4937FF8);
                if (v130)
                {
                  objc_msgSend(v132, "setObject:forKeyedSubscript:", v119, 0x1E4937FB8);
                  objc_msgSend(v132, "setObject:forKeyedSubscript:", v121, 0x1E4937FD8);
                }
                if (objc_msgSend(v195, "BOOLValue"))
                  objc_msgSend(v132, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4938398);
                if (v129)
                  objc_msgSend(v132, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E49375F8);
                v88 = v187;
                if (objc_msgSend((id)objc_msgSend(v187, "objectForKeyedSubscript:", CFSTR("ExperimentalSupportedDepthFormats")), "BOOLValue"))objc_msgSend(v132, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("Experimental"));
                objc_msgSend(v177, "addObject:", v132);
              }
            }
          }
          v196 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v215, v239, 16);
        }
        while (v196);
      }
      v18 = v167;
      objc_msgSend(v167, "setObject:forKeyedSubscript:", v177, 0x1E4937D98);
      v70 = 0x1E0CB3000;
      v87 = v172;
      v95 = v173;
    }
  }
  if (objc_msgSend((id)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1E4938878), "BOOLValue"))
  {
    v133 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "intValue");
    v134 = CFSTR("SensorCropWidth");
    v135 = CFSTR("SensorCropHeight");
    if (!objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937858)
      || !objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937878))
    {
      v134 = v168;
      v135 = v169;
    }
    v136 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v134), "intValue");
    v137 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v135), "intValue");
    if (objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E49379B8))
    {
      v138 = v18;
      v139 = CFSTR("FESBinningFactorHorizontal");
    }
    else
    {
      if (!objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("FrontHorizontalScaleFactor")))
      {
        v140 = v18;
        v141 = 1;
LABEL_217:
        v142 = v137 * v136;
        if (!objc_msgSend(v95, "objectForKeyedSubscript:", CFSTR("synchronizedStreamUniqueIDs"))
          && !objc_msgSend(v95, "objectForKeyedSubscript:", CFSTR("unsynchronizedStreamUniqueIDs")))
        {
          v143 = (void *)objc_msgSend(v95, "objectForKeyedSubscript:", CFSTR("SensorPowerConsumption"));
          v206 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", CFSTR("SensorWidth")), "intValue");
          v144 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", CFSTR("SensorHeight")), "intValue");
          v145 = objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", CFSTR("BasePower")), "intValue");
          objc_msgSend((id)objc_msgSend(v143, "objectForKeyedSubscript:", CFSTR("PowerPerFramePerSecond")), "floatValue");
          if (v206 && v144 && (_DWORD)v145 && v146 != 0.0)
          {
            v147 = (float)((float)v142 / (float)(v144 * v206)) * v146;
            v70 = 0x1E0CB3000uLL;
            objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v145), 0x1E49388B8);
            *(float *)&v148 = v147;
            objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v148), 0x1E49388D8);
          }
          else
          {
            v70 = 0x1E0CB3000uLL;
            if (v143)
              objc_msgSend(v143, "count");
          }
        }
        v149 = v136 / v141 * v137 * (uint64_t)v133;
        v150 = v142 * (uint64_t)v133;
        v242 = 0;
        v240 = 0u;
        v241 = 0u;
        ISPHardwareCharacteristics = FigCapturePlatformGetISPHardwareCharacteristics((uint64_t)&v240);
        v152 = 1000000 * v240 * DWORD2(v240);
        v153 = 1000000 * v241 * DWORD2(v241);
        if ((float)((float)v150 / (float)v152) <= (float)((float)v149 / (float)v153))
          v154 = (float)v149 / (float)v153;
        else
          v154 = (float)v150 / (float)v152;
        *(float *)&ISPHardwareCharacteristics = v154 / (float)v133;
        v18 = v140;
        objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 2024), "numberWithFloat:", ISPHardwareCharacteristics), 0x1E4938898);
        v155 = objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1E4929418), "intValue");
        v156 = objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1E4929438), "intValue") * v155;
        v157 = (double)(int)(((2 * v150) << objc_msgSend((id)objc_msgSend(v140, "objectForKeyedSubscript:", 0x1E4937738), "BOOLValue"))/ 0x100000+ 3 * v133 * (uint64_t)v156 / 0x200000)* 0.1;
        *(float *)&v157 = (float)((float)(int)v157 + (float)(v154 * (float)v242)) / (float)v133;
        objc_msgSend(v140, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 2024), "numberWithFloat:", v157), 0x1E49388F8);
        v87 = v172;
        v88 = v187;
        goto LABEL_231;
      }
      v139 = CFSTR("FrontHorizontalScaleFactor");
      v138 = v18;
    }
    v140 = v18;
    v141 = objc_msgSend((id)objc_msgSend(v138, "objectForKeyedSubscript:", v139), "intValue");
    goto LABEL_217;
  }
LABEL_231:
  v158 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938918), "BOOLValue");
  v159 = objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938938), "BOOLValue");
  if ((v158 & 1) != 0 || (v159 & 1) != 0 || v87 == 14)
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", a10, 0x1E4938998);
    objc_msgSend(a10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929418), 0x1E49389D8);
    objc_msgSend(a10, "setObject:forKeyedSubscript:", objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929438), 0x1E49389F8);
  }
  if (objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4937C98))
    objc_msgSend(v18, "setObject:forKeyedSubscript:", a11, 0x1E4937C78);
  if (objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938D18))
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", a12, 0x1E4938D18);
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(a12, "objectForKeyedSubscript:", 0x1E4938CF8), 0x1E4938CF8);
  }
  if (v171
    && objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("BackgroundBlurSupported"))
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929438), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      v160 = FigCaptureSourceFormatKey_BackgroundBlurSupported;
      goto LABEL_249;
    }
    if (v170 == 1 && v87 <= 8 && ((1 << v87) & 0x184) != 0)
    {
      v160 = FigCaptureSourceFormatKey_BackgroundBlurSupportedForContinuityCapture;
LABEL_249:
      objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *v160);
    }
  }
  v161 = (void *)objc_msgSend(v88, "objectForKeyedSubscript:", 0x1E49387F8);
  if (v161)
    objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 2024), "numberWithInt:", FigCaptureVideoStabilizationStrengthStringToEnum(v161)), 0x1E49387F8);
  if (!v171)
    goto LABEL_283;
  if (objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("StudioLightingSupported"))
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929438), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      v162 = FigCaptureSourceFormatKey_StudioLightingSupported;
      goto LABEL_262;
    }
    if (v170 == 1 && v87 <= 8 && ((1 << v87) & 0x184) != 0)
    {
      v162 = FigCaptureSourceFormatKey_StudioLightingSupportedForContinuityCapture;
LABEL_262:
      objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *v162);
    }
  }
  if (objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("ReactionEffectsSupported"))
    && (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929438), "intValue") <= 1440
    && (FigCapturePixelFormatIsTenBit(v174) & 1) == 0)
  {
    if (v170 == 2)
    {
      v163 = FigCaptureSourceFormatKey_ReactionEffectsSupported;
      goto LABEL_272;
    }
    if (v170 == 1 && v87 - 2 <= 7 && ((0xE1u >> (v87 - 2)) & 1) != 0)
    {
      v163 = FigCaptureSourceFormatKey_ReactionEffectsSupportedForContinuityCapture;
LABEL_272:
      objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *v163);
    }
  }
  if (!objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("BackgroundReplacementSupported"))
    || (int)objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4929438), "intValue") > 1440
    || (FigCapturePixelFormatIsTenBit(v174) & 1) != 0)
  {
    goto LABEL_283;
  }
  if (v170 == 2)
  {
    v164 = MEMORY[0x1E0C9AAA0];
    v165 = FigCaptureSourceFormatKey_BackgroundReplacementSupported;
  }
  else
  {
    if (v170 != 1 || v87 > 8 || ((1 << v87) & 0x184) == 0)
      goto LABEL_283;
    v164 = MEMORY[0x1E0C9AAB0];
    v165 = FigCaptureSourceFormatKey_BackgroundReplacementSupportedForContinuityCapture;
  }
  objc_msgSend(v18, "setObject:forKeyedSubscript:", v164, *v165);
LABEL_283:
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", v179), "unsignedIntValue") == 2016686642)
  {
    if (objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("AppleLogSupportedForProRes")), "BOOLValue"))objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v70 + 2024), "numberWithBool:", 1), 0x1E4938EB8);
    if (objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("10BitVideoHDRSupportedForProRes")), "BOOLValue"))objc_msgSend(v18, "setObject:forKeyedSubscript:", objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("10BitVideoHDRSupportedForProRes")), 0x1E4938E98);
  }
  if (objc_msgSend((id)objc_msgSend(v18, "objectForKeyedSubscript:", 0x1E4938318), "BOOLValue")
    && (int)objc_msgSend((id)objc_msgSend(a9, "objectForKeyedSubscript:", CFSTR("SemanticRenderingVersion")), "intValue") >= 3)
  {
    objc_msgSend(v18, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], 0x1E4938338);
  }
  return v18;
}

void *csu_pruneDictionaryToJustKeys(void *a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", objc_msgSend(a1, "allKeys"));
  objc_msgSend(v4, "minusSet:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a2));
  objc_msgSend(a1, "removeObjectsForKeys:", objc_msgSend(v4, "allObjects"));
  return a1;
}

void man_maProcessorOutputReadyCallback(uint64_t a1, uint64_t a2, void *target)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CMAttachmentBearerRef targeta;
  CMSampleTimingInfo sampleTimingArray;
  CMTime v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
    objc_msgSend(*(id *)(a1 + 128), "logErrorNumber:errorString:", a2, CFSTR("SBP output callback"));
  if (target)
  {
    v5 = *(void **)(a1 + 112);
    if (v5)
      objc_msgSend(v5, "emitSampleBuffer:", target);
    if (*(_QWORD *)(a1 + 120))
    {
      v6 = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      if (v6)
      {
        v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 0);
        v8 = 0;
        v9 = *MEMORY[0x1E0D085D0];
        v20.value = *MEMORY[0x1E0D06D00];
        *(_QWORD *)&v20.timescale = v9;
        v10 = *MEMORY[0x1E0D06AC0];
        v20.epoch = *MEMORY[0x1E0D06A20];
        v21 = v10;
        v11 = *MEMORY[0x1E0D085B8];
        v22 = *MEMORY[0x1E0D08600];
        v23 = v11;
        v12 = *MEMORY[0x1E0D085D8];
        v24 = *MEMORY[0x1E0D085E0];
        v25 = v12;
        v13 = *MEMORY[0x1E0D06B70];
        v26 = *MEMORY[0x1E0D08618];
        v27 = v13;
        v14 = *MEMORY[0x1E0D06970];
        v28 = *MEMORY[0x1E0D06E58];
        v29 = v14;
        v15 = *MEMORY[0x1E0D085E8];
        v30 = *MEMORY[0x1E0D06D70];
        v31 = v15;
        do
        {
          v16 = *(CMTimeValue *)((char *)&v20.value + v8);
          v17 = objc_msgSend(v6, "objectForKeyedSubscript:", v16);
          if (v17)
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v17, v16);
          v8 += 8;
        }
        while (v8 != 112);
        if (objc_msgSend(v7, "count"))
        {
          memset(&sampleTimingArray.presentationTimeStamp, 0, 48);
          *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
          sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          CMSampleBufferGetPresentationTimeStamp(&sampleTimingArray.presentationTimeStamp, (CMSampleBufferRef)target);
          sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
          targeta = 0;
          v6 = (void *)CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, (CMSampleBufferRef *)&targeta);
          if (targeta && !(_DWORD)v6)
          {
            CMSetAttachment(targeta, (CFStringRef)*MEMORY[0x1E0D05CF8], v7, 1u);
            objc_msgSend(*(id *)(a1 + 120), "emitSampleBuffer:", targeta);
            CFRelease(targeta);

            return;
          }

        }
        else
        {

          v6 = 0;
        }
      }
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetPresentationTimeStamp(&v20, (CMSampleBufferRef)target);
      objc_msgSend(*(id *)(a1 + 128), "logErrorNumber:errorString:", v6, CFSTR("SBP output callback create offline sample buffer"));
      sampleTimingArray.duration = v20;
      objc_msgSend(*(id *)(a1 + 120), "emitDroppedSample:", +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", 0x1E494F058, &sampleTimingArray));
    }
  }
}

void dmc_removeAllCacheEntries(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;

  v2 = 0;
  v3 = MEMORY[0x1E0CA2E18];
  do
  {
    v4 = a1 + v2;
    v5 = *(const void **)(a1 + v2 + 24);
    if (v5)
    {
      *(_OWORD *)v4 = *(_OWORD *)v3;
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
      CFRelease(v5);
      *(_QWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 32) = 0;
    }
    v2 += 40;
  }
  while (v2 != 200);
}

void dmc_attachMetadataDictToSampleBufferAndPixelBufferAndCleanupPrivateCaptureStreamAttachments(opaqueCMSampleBuffer *a1, const void *a2)
{
  __CVBuffer *ImageBuffer;
  const __CFString *v5;
  const void *v6;

  ImageBuffer = CMSampleBufferGetImageBuffer(a1);
  v5 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  CMSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], a2, 1u);
  v6 = CVBufferCopyAttachments(ImageBuffer, kCVAttachmentMode_ShouldPropagate);
  if (v6)
    v6 = CFAutorelease(v6);
  CFDictionaryApplyFunction((CFDictionaryRef)v6, (CFDictionaryApplierFunction)dmc_removeAttachmentFromPixelBufferIfPrivate, ImageBuffer);
  CMSetAttachment(ImageBuffer, v5, a2, 1u);
}

uint64_t BWDetectedFacesRemoveFacesFromSampleBuffer(const void *a1)
{
  return objc_msgSend((id)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0), "removeObjectForKey:", *MEMORY[0x1E0D06998]);
}

void *BWCreateCorrectedFacesArray(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  double width;
  double height;
  void *v21;
  _BYTE v23[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;
  CGRect v31;
  CGRect v32;

  *(double *)&v23[16] = a8;
  *(double *)&v23[24] = a9;
  *(double *)v23 = a6;
  *(double *)&v23[8] = a7;
  v30 = *MEMORY[0x1E0C80C00];
  v12 = objc_msgSend(a1, "count");
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v26 != v16)
          objc_enumerationMutation(a1);
        v18 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v31.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          width = v31.size.width;
          height = v31.size.height;
          v32 = CGRectIntersection(v31, *(CGRect *)v23);
          if (v32.size.width * v32.size.height > width * height * 0.5)
          {
            v21 = (void *)objc_msgSend(v18, "mutableCopy");
            FigCFDictionarySetCGRect();
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
              FigCFDictionarySetCGRect();
            }
            objc_msgSend(v13, "addObject:", v21);

          }
        }
      }
      v15 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v15);
  }
  return v13;
}

uint64_t correctRectangleInDictionaryForKey(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t result;
  double width;
  double height;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  result = FigCFDictionaryGetCGRectIfPresent();
  if ((_DWORD)result)
  {
    v18.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a1, a2, a3);
    width = v18.size.width;
    height = v18.size.height;
    v20.origin.x = a5;
    v20.origin.y = a6;
    v20.size.width = a7;
    v20.size.height = a8;
    v19 = CGRectIntersection(v18, v20);
    if (v19.size.width * v19.size.height <= width * height * 0.5)
    {
      return 0;
    }
    else
    {
      FigCFDictionarySetCGRect();
      return 1;
    }
  }
  return result;
}

void *BWCreateTransformedFacesArray(void *a1, _OWORD *a2, int a3, int a4)
{
  CGSize v6;
  unint64_t v7;
  const void *MutableCopy;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;
  int v13;
  void *v16;
  CGAffineTransform v18;
  int v19;
  uint64_t v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v6 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  v23.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  v23.size = v6;
  v22.origin = v23.origin;
  v22.size = v6;
  v21.origin = v23.origin;
  v21.size = v6;
  v20 = 0;
  v19 = 0;
  if (objc_msgSend(a1, "count"))
  {
    v7 = 0;
    do
    {
      objc_msgSend(a1, "objectAtIndexedSubscript:", v7);
      if (FigCFDictionaryGetCGRectIfPresent())
      {
        MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
        v9 = a2[1];
        *(_OWORD *)&v18.a = *a2;
        *(_OWORD *)&v18.c = v9;
        *(_OWORD *)&v18.tx = a2[2];
        CGRectApplyAffineTransform(v23, &v18);
        FigCFDictionarySetCGRect();
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v10 = a2[1];
          *(_OWORD *)&v18.a = *a2;
          *(_OWORD *)&v18.c = v10;
          *(_OWORD *)&v18.tx = a2[2];
          CGRectApplyAffineTransform(v22, &v18);
          FigCFDictionarySetCGRect();
        }
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v11 = a2[1];
          *(_OWORD *)&v18.a = *a2;
          *(_OWORD *)&v18.c = v11;
          *(_OWORD *)&v18.tx = a2[2];
          CGRectApplyAffineTransform(v21, &v18);
          FigCFDictionarySetCGRect();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          v12 = HIDWORD(v20);
          if (a4)
            v12 = -HIDWORD(v20);
          FigCaptureNormalizeAngle(v12 + a3);
          FigCFDictionarySetInt32();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          if (a4)
            v13 = -(int)v20;
          else
            v13 = v20;
          FigCaptureNormalizeAngle(v13);
          FigCFDictionarySetInt32();
        }
        if (FigCFDictionaryGetInt32IfPresent())
        {
          FigCaptureNormalizeAngle(v19);
          FigCFDictionarySetInt32();
        }
        objc_msgSend(v16, "addObject:", MutableCopy);
        CFRelease(MutableCopy);
      }
      ++v7;
    }
    while (objc_msgSend(a1, "count") > v7);
  }
  return v16;
}

void *BWCreateCorrectedDetectedObjectsArray(void *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  double width;
  double height;
  void *v21;
  _BYTE v24[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  uint64_t v30;
  CGRect v31;
  CGRect v32;

  *(double *)&v24[16] = a8;
  *(double *)&v24[24] = a9;
  *(double *)v24 = a6;
  *(double *)&v24[8] = a7;
  v30 = *MEMORY[0x1E0C80C00];
  v12 = objc_msgSend(a1, "count");
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v12);
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v14 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v26 != v16)
          objc_enumerationMutation(a1);
        v18 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if (FigCFDictionaryGetCGRectIfPresent())
        {
          v31.origin.x = FigCaptureTransformRectToCoordinateSpaceOfRect(0.0, 0.0, 0.0, 0.0, a2, a3, a4);
          width = v31.size.width;
          height = v31.size.height;
          v32 = CGRectIntersection(v31, *(CGRect *)v24);
          if (v32.size.width * v32.size.height > width * height * 0.5)
          {
            v21 = (void *)objc_msgSend(v18, "mutableCopy");
            FigCFDictionarySetCGRect();
            objc_msgSend(v13, "addObject:", v21);

          }
        }
      }
      v15 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v15);
  }
  return v13;
}

uint64_t BWCreateSampleBufferFromSemanticMasksDictionary(void *a1, CMTime *a2, const void *a3, _QWORD *a4)
{
  uint64_t v7;
  void *v8;
  CMAttachmentBearerRef v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CVBuffer *v16;
  uint64_t v17;
  CFTypeRef v18;
  const __CFDictionary *v19;
  __CFDictionary *MutableCopy;
  uint64_t v21;
  _QWORD *v23;
  const __CFAllocator *allocator;
  const void *v25;
  CFTypeRef v27;
  CMAttachmentBearerRef cf;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CMTime v33;
  CMAttachmentBearerRef target;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  target = 0;
  *a4 = 0;
  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  v33 = *a2;
  v7 = mscsnu_createSampleBufferWithPTS(&v33, &target);
  if ((_DWORD)v7)
  {
    v21 = v7;
    fig_log_get_emitter();
    FigDebugAssert3();
    v9 = target;
    if (!target)
      return v21;
    goto LABEL_23;
  }
  v23 = a4;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v25 = (const void *)*MEMORY[0x1E0D06D00];
  objc_msgSend(v8, "setObject:forKeyedSubscript:", a3);
  v9 = target;
  v10 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], v8, 1u);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v11 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v30;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
LABEL_5:
    v14 = 0;
    while (1)
    {
      if (*(_QWORD *)v30 != v13)
        objc_enumerationMutation(a1);
      v15 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * v14);
      cf = 0;
      v16 = (__CVBuffer *)objc_msgSend(a1, "objectForKeyedSubscript:", v15);
      v27 = 0;
      v33 = *a2;
      v17 = BWSampleBufferCreateFromPixelBuffer(v16, (uint64_t)&v33, &v27, (CMSampleBufferRef *)&cf);
      if ((_DWORD)v17)
        break;
      v18 = CVBufferCopyAttachment(v16, v10, 0);
      if (v18)
      {
        v19 = (const __CFDictionary *)CFAutorelease(v18);
        if (v19)
        {
          MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, v19);
          CFDictionarySetValue(MutableCopy, v25, a3);
          CMSetAttachment(cf, v10, MutableCopy, 1u);
          if (MutableCopy)
            CFRelease(MutableCopy);
          CMRemoveAttachment(v16, v10);
        }
      }
      BWSampleBufferSetAttachedMedia(v9, v15, (uint64_t)cf);
      if (cf)
        CFRelease(cf);
      if (v27)
        CFRelease(v27);
      if (v12 == ++v14)
      {
        v12 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v29, v35, 16);
        if (v12)
          goto LABEL_5;
        goto LABEL_20;
      }
    }
    v21 = v17;
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!v9)
      return v21;
LABEL_23:
    CFRelease(v9);
    return v21;
  }
LABEL_20:
  v21 = 0;
  *v23 = v9;
  return v21;
}

uint64_t mscsnu_createSampleBufferWithPTS(CMTime *a1, _QWORD *a2)
{
  uint64_t v3;
  CMSampleBufferRef v4;
  CFTypeRef v5;
  CMSampleTimingInfo sampleTimingArray;
  CMSampleBufferRef v8;

  v8 = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *MEMORY[0x1E0CA2E18];
  sampleTimingArray.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  sampleTimingArray.presentationTimeStamp = *a1;
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.duration;
  v3 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 1, &sampleTimingArray, 0, 0, &v8);
  v4 = v8;
  if (!(_DWORD)v3)
  {
    if (v8)
    {
      v5 = CFRetain(v8);
      v4 = v8;
    }
    else
    {
      v5 = 0;
    }
    *a2 = v5;
  }
  if (v4)
    CFRelease(v4);
  return v3;
}

uint64_t BWCreateSampleBufferWithDetectedObjectsInfo(uint64_t a1, CMTime *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  void *v8;
  CMAttachmentBearerRef v9;
  CMTime v11;
  CMAttachmentBearerRef target;

  v11 = *a2;
  target = 0;
  v7 = mscsnu_createSampleBufferWithPTS(&v11, &target);
  if ((_DWORD)v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", a3, *MEMORY[0x1E0D06D00]);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", a1, *MEMORY[0x1E0D069A0]);
    v9 = target;
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], v8, 1u);
    *a4 = v9;
  }
  return v7;
}

uint64_t BWCreateSampleBufferWithEyeReliefResultDictionary(const void *a1, CMTime *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  void *v8;
  CMAttachmentBearerRef v9;
  CMTime v11;
  CMAttachmentBearerRef target;

  v11 = *a2;
  target = 0;
  v7 = mscsnu_createSampleBufferWithPTS(&v11, &target);
  if ((_DWORD)v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", a3, *MEMORY[0x1E0D06D00]);
    v9 = target;
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05C60], a1, 1u);
    CMSetAttachment(v9, (CFStringRef)*MEMORY[0x1E0D05CB0], v8, 1u);
    *a4 = v9;
  }
  return v7;
}

void BWAddMinimumValidBufferRectForGDCIfNeededToSampleBuffer(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  void *v8;
  double ValidBufferRect;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL v20;
  int v21;
  int v22;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  _OWORD v36[7];
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  if (a4)
    v8 = *a4;
  else
    v8 = 0;
  ValidBufferRect = FigCaptureMetadataUtilitiesGetValidBufferRect();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v37.origin.x = FigCaptureMetadataUtilitiesGetFinalCropRect();
  x = v37.origin.x;
  y = v37.origin.y;
  width = v37.size.width;
  height = v37.size.height;
  v41.origin.x = 0.0;
  v41.origin.y = 0.0;
  v41.size.width = 1.0;
  v41.size.height = 1.0;
  v20 = CGRectEqualToRect(v37, v41);
  v21 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F10]), "BOOLValue");
  v22 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F18]), "intValue");
  if (!v20 && v21 && v22 != 1)
  {
    memset(v36, 0, sizeof(v36));
    if (objc_msgSend(MEMORY[0x1E0D08A78], "getGDCParams:cameraInfo:metadata:", v36, a3, a1))
      goto LABEL_21;
    if (v8)
    {
      if (objc_msgSend(v8, "updateGDCParams:", v36))
      {
LABEL_21:
        fig_log_get_emitter();
        FigDebugAssert3();
        if (!a4)
          goto LABEL_22;
        goto LABEL_19;
      }
    }
    else
    {
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D08A78]), "initWithGDCParams:", v36);
      if (!v8)
        goto LABEL_21;
    }
    objc_msgSend(v8, "preGDCCropRectFromRect:", FigCaptureMetadataUtilitiesNormalizedSensorRectFromNormalizedBufferRect(a1, a2, x, y, width, height));
    v28 = FigCaptureMetadataUtilitiesNormalizedBufferRectFromNormalizedSensorRect(a1, a2, v24, v25, v26, v27);
    FigCaptureMetadataUtilitiesDenormalizeCropRect(v28, v29, v30, v31);
    v32 = v38.origin.x;
    v33 = v38.origin.y;
    v34 = v38.size.width;
    v35 = v38.size.height;
    if (!CGRectIsNull(v38))
    {
      v39.origin.x = ValidBufferRect;
      v39.origin.y = v11;
      v39.size.width = v13;
      v39.size.height = v15;
      v42.origin.x = v32;
      v42.origin.y = v33;
      v42.size.width = v34;
      v42.size.height = v35;
      if (!CGRectContainsRect(v39, v42))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      FigCaptureMetadataUtilitiesRoundDenormalizedRectToRawSensorCFABoundary(a1);
      v43.origin.x = ValidBufferRect;
      v43.origin.y = v11;
      v43.size.width = v13;
      v43.size.height = v15;
      CGRectIntersection(v40, v43);
      FigCFDictionarySetCGRect();
    }
  }
  if (!a4)
  {
LABEL_22:

    return;
  }
LABEL_19:
  if (!*a4)
    *a4 = v8;
}

void dmc_removeAttachmentFromPixelBufferIfPrivate(const __CFString *cf2, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v5 = 0;
  v8[4] = *MEMORY[0x1E0C80C00];
  v6 = *MEMORY[0x1E0CA8D68];
  v8[0] = *MEMORY[0x1E0CA8CE8];
  v8[1] = v6;
  v7 = *MEMORY[0x1E0CA8E98];
  v8[2] = *MEMORY[0x1E0CA8EE8];
  v8[3] = v7;
  while (!CFEqual((CFTypeRef)v8[v5], cf2))
  {
    if (++v5 == 4)
    {
      CMRemoveAttachment(a3, cf2);
      return;
    }
  }
}

uint64_t bweis_storageTypeLengthInBytes(int a1)
{
  uint64_t result;

  result = 4;
  if (a1 <= 131079)
  {
    if (a1 == 65552)
      return 2;
    if (a1 != 65568)
      return 0;
  }
  else
  {
    if (a1 == 131080)
      return 1;
    if (a1 != 131104)
      return a1 == 262152;
  }
  return result;
}

uint64_t bweis_storageLengthInBytes(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 160);
  v2 = 4;
  if (v1 <= 131079)
  {
    if (v1 == 65552)
    {
      v2 = 2;
      return *(_QWORD *)(a1 + 104)
           * *(_QWORD *)(a1 + 112)
           * *(_QWORD *)(a1 + 96)
           * *(_QWORD *)(a1 + 88)
           * *(_QWORD *)(a1 + 80)
           * v2;
    }
    if (v1 != 65568)
      goto LABEL_8;
  }
  else
  {
    if (v1 == 131080)
    {
LABEL_5:
      v2 = 1;
      return *(_QWORD *)(a1 + 104)
           * *(_QWORD *)(a1 + 112)
           * *(_QWORD *)(a1 + 96)
           * *(_QWORD *)(a1 + 88)
           * *(_QWORD *)(a1 + 80)
           * v2;
    }
    if (v1 != 131104)
    {
      if (v1 == 262152)
        goto LABEL_5;
LABEL_8:
      v2 = 0;
    }
  }
  return *(_QWORD *)(a1 + 104)
       * *(_QWORD *)(a1 + 112)
       * *(_QWORD *)(a1 + 96)
       * *(_QWORD *)(a1 + 88)
       * *(_QWORD *)(a1 + 80)
       * v2;
}

CFStringRef FigCaptureSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureSession %p]"), a1);
}

void sub_1A2F50E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F50F7C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1A2F510B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F51AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureDeviceCreate(uint64_t a1, void *a2, CFTypeRef *a3)
{
  if (objc_opt_class() && objc_opt_class())
    return CMIOExtensionFigCaptureDeviceCreateInternal(a1, a2, (void *)objc_msgSend(MEMORY[0x1E0CA5548], "sharedInstance"), a3);
  else
    return 4294954514;
}

uint64_t CMIOExtensionFigCaptureDeviceCreateInternal(uint64_t a1, void *a2, void *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  CMClockRef HostTimeClock;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  FigCaptureCMIOExtensionSessionDeviceDelegate *v22;
  CFTypeRef v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CFTypeRef cf;
  objc_super block;
  void (*v33)(uint64_t);
  void *v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[128];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];
  _QWORD v46[2];
  _QWORD v47[3];

  v47[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigCaptureDeviceGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v21 = v7;
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = objc_msgSend(a2, "copy");
    *(_DWORD *)(DerivedStorage + 28) = 0;
    HostTimeClock = CMClockGetHostTimeClock();
    *(_QWORD *)(DerivedStorage + 32) = CFRetain(HostTimeClock);
    v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(_QWORD *)(DerivedStorage + 48) = dispatch_queue_create("com.apple.extension.propertyqueue", v10);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v11 = (void *)objc_msgSend(a3, "devices", 0);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v28;
      while (2)
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v28 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "deviceID"), "UUIDString"), "isEqualToString:", a2))
          {
            *(_QWORD *)(DerivedStorage + 16) = v16;
            goto LABEL_12;
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v27, v37, 16);
        if (v13)
          continue;
        break;
      }
    }
LABEL_12:
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      v17 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v46[0] = CFSTR("PropertyType");
      v46[1] = CFSTR("ReadWriteStatus");
      v47[0] = CFSTR("Collection");
      v47[1] = CFSTR("ReadOnly");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v46, 2), CFSTR("StreamArray"));
      v44[0] = CFSTR("PropertyType");
      v44[1] = CFSTR("ReadWriteStatus");
      v45[0] = CFSTR("Clock");
      v45[1] = CFSTR("ReadOnly");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v45, v44, 2), CFSTR("Clock"));
      v42[0] = CFSTR("PropertyType");
      v42[1] = CFSTR("ReadWriteStatus");
      v43[0] = CFSTR("String");
      v43[1] = CFSTR("ReadOnly");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v43, v42, 2), CFSTR("CMIOExtensionDeviceID"));
      v40[0] = CFSTR("PropertyType");
      v40[1] = CFSTR("ReadWriteStatus");
      v41[0] = CFSTR("Collection");
      v41[1] = CFSTR("ReadOnly");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 2), CFSTR("CMIOExtensionPropertyArray"));
      v38[0] = CFSTR("PropertyType");
      v38[1] = CFSTR("ReadWriteStatus");
      v39[0] = CFSTR("Collection");
      v39[1] = CFSTR("ReadOnly");
      objc_msgSend(v17, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2), CFSTR("SupportedPropertiesDictionary"));
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
      v18 = *(NSObject **)(DerivedStorage + 48);
      block.receiver = (id)MEMORY[0x1E0C809B0];
      block.super_class = (Class)3221225472;
      v33 = __cmioefcd_copySupportedPropertiesDict_block_invoke;
      v34 = &unk_1E491F158;
      v35 = v17;
      v36 = DerivedStorage;
      dispatch_async_and_wait(v18, &block);
      *(_QWORD *)(DerivedStorage + 40) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v17);
      v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 1);
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 28));
      v20 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "firstObject");
      block.receiver = 0;
      v21 = CMIOExtensionFigCaptureStreamCreate(*MEMORY[0x1E0C9AE00], *(void **)(DerivedStorage + 16), v20, (CFTypeRef *)&block.receiver);
      if (!(_DWORD)v21)
      {
        objc_msgSend(v19, "addObject:", block.receiver);
        if (block.receiver)
          CFRelease(block.receiver);
        *(_QWORD *)(DerivedStorage + 8) = v19;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 28));

      if (!(_DWORD)v21)
      {
        v22 = [FigCaptureCMIOExtensionSessionDeviceDelegate alloc];
        if (v22)
        {
          v23 = cf;
          block.receiver = v22;
          block.super_class = (Class)FigCaptureCMIOExtensionSessionDeviceDelegate;
          v24 = objc_msgSendSuper2(&block, sel_init);
          v25 = v24;
          if (v24)
            v24[1] = v23;
        }
        else
        {
          v25 = 0;
        }
        *(_QWORD *)(DerivedStorage + 56) = v25;
        objc_msgSend(*(id *)(DerivedStorage + 16), "setDelegate:");
        v21 = 0;
        *a4 = cf;
        return v21;
      }
    }
    else
    {
      v21 = 4294954516;
    }
  }
  if (cf)
    CFRelease(cf);
  return v21;
}

uint64_t CMIOExtensionFigCaptureDeviceInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void (*v9)(uint64_t);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 24))
  {
    v1 = DerivedStorage;
    v2 = (os_unfair_lock_s *)(DerivedStorage + 28);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 28));
    *(_BYTE *)(v1 + 24) = 1;

    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = *(void **)(v1 + 8);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (v8)
          {
            v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v9)
              v9(v8);
          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }

    os_unfair_lock_unlock(v2);
  }
  return 0;
}

void CMIOExtensionFigCaptureDeviceFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  CMIOExtensionFigCaptureDeviceInvalidate();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
}

uint64_t CMIOExtensionFigCaptureDeviceCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  uint64_t v8;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  NSObject *v16;
  dispatch_time_t v17;
  _QWORD v18[11];
  _QWORD block[6];
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (objc_msgSend(*(id *)(DerivedStorage + 40), "objectForKey:", a2))
  {
    if (FigCFEqual())
    {
      v7 = *(CFTypeRef *)(DerivedStorage + 40);
      if (v7)
LABEL_16:
        v7 = CFRetain(v7);
    }
    else if (FigCFEqual())
    {
      v7 = (CFTypeRef)objc_msgSend(*(id *)(DerivedStorage + 8), "copy");
    }
    else if (FigCFEqual())
    {
      v7 = *(CFTypeRef *)(DerivedStorage + 32);
      if (v7)
        goto LABEL_16;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          v20 = 0;
          v21 = (unsigned __int8 *)&v20;
          v22 = 0x3052000000;
          v23 = __Block_byref_object_copy__21;
          v24 = __Block_byref_object_dispose__21;
          v25 = 0;
          v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
          v10 = *(NSObject **)(DerivedStorage + 48);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke;
          block[3] = &unk_1E49222A0;
          block[4] = &v20;
          block[5] = DerivedStorage;
          dispatch_async_and_wait(v10, block);
          *a4 = *((_QWORD *)v21 + 5);
        }
        else
        {
          v11 = cmioefcd_cmioExtensionPropertyForDevicePropertyKey(a2);
          if (v11)
            v12 = v11;
          else
            v12 = a2;
          dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(DerivedStorage + 48));
          v20 = 0;
          v21 = (unsigned __int8 *)&v20;
          v22 = 0x2020000000;
          LOBYTE(v23) = 1;
          v13 = dispatch_semaphore_create(0);
          v14 = objc_alloc(MEMORY[0x1E0C99E60]);
          v30[0] = v12;
          v15 = (void *)objc_msgSend(v14, "initWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 1));
          v16 = *(NSObject **)(DerivedStorage + 48);
          v18[0] = MEMORY[0x1E0C809B0];
          v18[1] = 3221225472;
          v18[2] = __CMIOExtensionFigCaptureDeviceCopyProperty_block_invoke_4;
          v18[3] = &unk_1E49222F0;
          v18[8] = DerivedStorage;
          v18[9] = v12;
          v18[6] = &v20;
          v18[7] = &v26;
          v18[10] = a4;
          v18[4] = v15;
          v18[5] = v13;
          dispatch_async(v16, v18);
          v17 = dispatch_time(0, 5000000000);
          dispatch_semaphore_wait(v13, v17);
          atomic_store(0, v21 + 24);

        }
        _Block_object_dispose(&v20, 8);
        goto LABEL_9;
      }
      v7 = *(CFTypeRef *)DerivedStorage;
      if (*(_QWORD *)DerivedStorage)
        goto LABEL_16;
    }
    *a4 = v7;
LABEL_9:
    v8 = *((unsigned int *)v27 + 6);
    goto LABEL_10;
  }
  v8 = 4294954509;
LABEL_10:
  _Block_object_dispose(&v26, 8);
  return v8;
}

void sub_1A2F53CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureDeviceSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  dispatch_time_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  dispatch_time_t v17;
  _QWORD v19[7];
  _QWORD v20[7];
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (objc_msgSend(*(id *)(DerivedStorage + 40), "objectForKey:", a2))
  {
    v6 = cmioefcd_cmioExtensionPropertyForDevicePropertyKey(a2);
    if (v6)
      v7 = v6;
    else
      v7 = a2;
    if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "availableProperties"), "containsObject:", v7))
    {
      v31 = v7;
      v32[0] = a3;
      v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
      v21 = 0;
      v22 = (unsigned __int8 *)&v21;
      v23 = 0x2020000000;
      v24 = 1;
      v9 = dispatch_semaphore_create(0);
      v10 = *(void **)(DerivedStorage + 16);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke;
      v20[3] = &unk_1E4922318;
      v20[5] = &v25;
      v20[6] = &v21;
      v20[4] = v9;
      objc_msgSend(v10, "setPropertyValues:reply:", v8, v20);
      v11 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v9, v11);
      atomic_store(0, v22 + 24);

    }
    else
    {
      if (!objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "count"))
      {
LABEL_15:
        v12 = *((unsigned int *)v26 + 6);
        goto LABEL_16;
      }
      v13 = dispatch_semaphore_create(0);
      v21 = 0;
      v22 = (unsigned __int8 *)&v21;
      v23 = 0x2020000000;
      v24 = 1;
      v14 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 16), "streams"), "firstObject");
      if (objc_msgSend((id)objc_msgSend(v14, "availableProperties"), "containsObject:", v7))
      {
        v29 = v7;
        v30 = a3;
        v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = __CMIOExtensionFigCaptureDeviceSetProperty_block_invoke_2;
        v19[3] = &unk_1E4922318;
        v19[5] = &v25;
        v19[6] = &v21;
        v19[4] = v13;
        objc_msgSend(v14, "setPropertyValues:reply:", v15, v19);
      }
      else
      {
        v16 = atomic_load(v22 + 24);
        if ((v16 & 1) != 0)
          dispatch_semaphore_signal(v13);
      }
      v17 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v13, v17);
      atomic_store(0, v22 + 24);

    }
    _Block_object_dispose(&v21, 8);
    goto LABEL_15;
  }
  v12 = 4294954509;
LABEL_16:
  _Block_object_dispose(&v25, 8);
  return v12;
}

void sub_1A2F53F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1A2F54164(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcd_addSupportedPropertiesWithValue(void *a1, void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = (id)objc_msgSend(a1, "allKeys");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v17;
    v14 = CFSTR("CMIOExtensionPropertyAttributeMaxValue");
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v7);
        v9 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v8, v14);
        v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v10, "setObject:forKeyedSubscript:", v8, CFSTR("CMIOExtensionPropertyName"));
        if (objc_msgSend(v9, "value"))
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(v9, "value"), CFSTR("CMIOExtensionPropertyValue"));
        if (!objc_msgSend(v9, "attributes"))
        {
          v12 = v10;
          v11 = MEMORY[0x1E0C9AAB0];
          v13 = CFSTR("CMIOExtensionPropertyAttributeSettable");
          goto LABEL_14;
        }
        objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend((id)objc_msgSend(v9, "attributes"), "isReadOnly")), CFSTR("CMIOExtensionPropertyAttributeSettable"));
        if (objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue"))
          objc_msgSend(v10, "setObject:forKeyedSubscript:", objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue"), CFSTR("CMIOExtensionPropertyAttributeMinValue"));
        if (objc_msgSend((id)objc_msgSend(v9, "attributes"), "maxValue"))
        {
          v11 = objc_msgSend((id)objc_msgSend(v9, "attributes"), "minValue");
          v12 = v10;
          v13 = v14;
LABEL_14:
          objc_msgSend(v12, "setObject:forKeyedSubscript:", v11, v13);
        }
        objc_msgSend(a2, "addObject:", v10);
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

uint64_t cmioefcd_cmioExtensionPropertyForDevicePropertyKey(uint64_t a1)
{
  if (cmioefcd_cmioExtensionPropertyForDevicePropertyKey_onceToken == -1)
  {
    if (a1)
      return objc_msgSend((id)cmioefcd_cmioExtensionPropertyForDevicePropertyKey_sDevicePropertyKeysToCMIOExtensionProperties, "objectForKeyedSubscript:", a1);
  }
  else
  {
    dispatch_once(&cmioefcd_cmioExtensionPropertyForDevicePropertyKey_onceToken, &__block_literal_global_55);
    if (a1)
      return objc_msgSend((id)cmioefcd_cmioExtensionPropertyForDevicePropertyKey_sDevicePropertyKeysToCMIOExtensionProperties, "objectForKeyedSubscript:", a1);
  }
  return 0;
}

uint64_t __cmioefcd_cmioExtensionPropertyForDevicePropertyKey_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  v1 = CMIOExtensionPropertyFromPropertyAddress();
  result = objc_msgSend(v0, "initWithObjectsAndKeys:", CFSTR("CMIOExtensionPropertyDeviceHidden"), CFSTR("Hidden"), CFSTR("CMIOExtensionPropertyDeviceReadyToUnhide"), CFSTR("ReadyToUnhide"), CFSTR("CMIOExtensionPropertyRapportDeviceUniqueID"), CFSTR("ContinuityDeviceUniqueID"), CFSTR("DockedTrackingActive"), CFSTR("DockedTrackingActive"), v1, CFSTR("BatteryState"), CMIOExtensionPropertyFromPropertyAddress(), CFSTR("BatteryLevel"), 0);
  cmioefcd_cmioExtensionPropertyForDevicePropertyKey_sDevicePropertyKeysToCMIOExtensionProperties = result;
  return result;
}

uint64_t CMIOExtensionFigCaptureDeviceRequestControlOfStreams()
{
  return 0;
}

uint64_t CMIOExtensionFigCaptureDeviceRelinquishControlOfStreams()
{
  return 0;
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_time_t v8;
  _QWORD v9[7];
  _QWORD v10[7];
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char v14;

  v2 = dispatch_group_create();
  v11 = 0;
  v12 = (unsigned __int8 *)&v11;
  v13 = 0x2020000000;
  v14 = 1;
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "availableProperties"))
    dispatch_group_enter(v2);
  if (objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "streams"), "count"))
  {
    v3 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "streams"), "firstObject");
    if (objc_msgSend(v3, "availableProperties"))
      dispatch_group_enter(v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(void **)(*(_QWORD *)(a1 + 40) + 16);
  v5 = objc_msgSend(v4, "availableProperties");
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __cmioefcd_copySupportedPropertiesDict_block_invoke_2;
  v10[3] = &unk_1E4922340;
  v10[5] = v2;
  v10[6] = &v11;
  v10[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v4, "propertyStatesForProperties:reply:", v5, v10);
  if (v3)
  {
    v7 = objc_msgSend(v3, "availableProperties");
    v9[0] = v6;
    v9[1] = 3221225472;
    v9[2] = __cmioefcd_copySupportedPropertiesDict_block_invoke_3;
    v9[3] = &unk_1E4922340;
    v9[5] = v2;
    v9[6] = &v11;
    v9[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v3, "propertyStatesForProperties:reply:", v7, v9);
  }
  v8 = dispatch_time(0, 5000000000);
  dispatch_group_wait(v2, v8);
  atomic_store(0, v12 + 24);

  _Block_object_dispose(&v11, 8);
}

void sub_1A2F54A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke_2(uint64_t a1, void *a2)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  if ((v2 & 1) != 0)
  {
    cmioefcd_addSupportedProperty(a2, *(void **)(a1 + 32));
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

uint64_t cmioefcd_addSupportedProperty(void *a1, void *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const __CFString *v9;
  uint64_t v10;
  const __CFString *v11;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  obj = (id)objc_msgSend(a1, "allKeys");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v16;
    v11 = CFSTR("Collection");
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v16 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v5);
        v7 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v6, v11);
        v19[0] = CFSTR("PropertyType");
        if (cmioefcd_devicePropertyTypeForCMIOExtensionProperty_onceToken != -1)
          dispatch_once(&cmioefcd_devicePropertyTypeForCMIOExtensionProperty_onceToken, &__block_literal_global_77);
        if (objc_msgSend((id)cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames, "objectForKeyedSubscript:", v6))
        {
          v8 = objc_msgSend((id)cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames, "objectForKeyedSubscript:", v6);
        }
        else if (v6)
        {
          v8 = (uint64_t)v11;
        }
        else
        {
          v8 = 0;
        }
        v19[1] = CFSTR("ReadWriteStatus");
        v20[0] = v8;
        if (objc_msgSend((id)objc_msgSend(v7, "attributes"), "isReadOnly"))
          v9 = CFSTR("ReadOnly");
        else
          v9 = CFSTR("ReadWrite");
        v20[1] = v9;
        v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
        if (cmioefcd_devicePropertyKeyForCMIOExtensionProperty_onceToken != -1)
          dispatch_once(&cmioefcd_devicePropertyKeyForCMIOExtensionProperty_onceToken, &__block_literal_global_78);
        if (objc_msgSend((id)cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames, "objectForKeyedSubscript:", v6))
        {
          v6 = objc_msgSend((id)cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames, "objectForKeyedSubscript:", v6);
        }
        objc_msgSend(a2, "setObject:forKeyedSubscript:", v10, v6);
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

void __cmioefcd_copySupportedPropertiesDict_block_invoke_3(uint64_t a1, void *a2)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  if ((v2 & 1) != 0)
  {
    cmioefcd_addSupportedProperty(a2, *(void **)(a1 + 32));
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

uint64_t __cmioefcd_devicePropertyTypeForCMIOExtensionProperty_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  result = objc_msgSend(v0, "initWithObjectsAndKeys:", *MEMORY[0x1E0CA54F8], CFSTR("Boolean"), CFSTR("CMIOExtensionPropertyRapportDeviceUniqueID"), 0);
  cmioefcd_devicePropertyTypeForCMIOExtensionProperty_sDevicePropertyTypeByCMIOExtensionPropertyNames = result;
  return result;
}

uint64_t __cmioefcd_devicePropertyKeyForCMIOExtensionProperty_block_invoke()
{
  id v0;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  result = objc_msgSend(v0, "initWithObjectsAndKeys:", CFSTR("DockedTrackingActive"), *MEMORY[0x1E0CA54F8], CFSTR("ContinuityDeviceUniqueID"), CFSTR("CMIOExtensionPropertyRapportDeviceUniqueID"), 0);
  cmioefcd_devicePropertyKeyForCMIOExtensionProperty_sDevicePropertyKeysByCMIOExtensionPropertyNames = result;
  return result;
}

uint64_t __cmioefcd_devicePropertyChangedNotificationForCMIOExtensionProperty_block_invoke()
{
  id v0;
  uint64_t v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0C99D80]);
  v1 = CMIOExtensionPropertyFromPropertyAddress();
  result = objc_msgSend(v0, "initWithObjectsAndKeys:", CFSTR("HiddenStateChanged"), CFSTR("CMIOExtensionPropertyDeviceHidden"), CFSTR("ReadyToUnhideChanged"), CFSTR("CMIOExtensionPropertyDeviceReadyToUnhide"), CFSTR("DeviceTrackingActiveChanged"), CFSTR("DockedTrackingActive"), CFSTR("BatteryStateChanged"), v1, CFSTR("BatteryLevelChanged"), CMIOExtensionPropertyFromPropertyAddress(), 0);
  cmioefcd_devicePropertyChangedNotificationForCMIOExtensionProperty_sCMIOExtensionPropertiesToDevicePropertyChangedNotifications = result;
  return result;
}

uint64_t FigFlashlightGetClassID()
{
  if (FigFlashlightGetClassID_onceToken != -1)
    dispatch_once(&FigFlashlightGetClassID_onceToken, &__block_literal_global_56);
  return FigFlashlightGetClassID_sFigFlashlightClassID;
}

uint64_t FigFlashlightGetTypeID()
{
  if (FigFlashlightGetClassID_onceToken != -1)
    dispatch_once(&FigFlashlightGetClassID_onceToken, &__block_literal_global_56);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigFlashlightCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigFlashlight %p]"), a1);
}

BOOL csp_formatUsesFES(void *a1)
{
  return (int)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E80]), "intValue") >= 1
      && (int)objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D07E78]), "intValue") > 0;
}

uint64_t csp_getCenterStageFramingMode(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  void *v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v2)
  {
    v2(a1, CFSTR("CenterStageFramingMode"), *MEMORY[0x1E0C9AE00], &cf);
    v3 = (void *)cf;
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v3, "intValue");
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t csp_getCinematicFramingFieldOfViewRestrictedToWide(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, id *);
  id v3;
  uint64_t v4;
  id v6;

  v6 = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v2)
  {
    v2(a1, CFSTR("CenterStageFieldOfViewRestrictedToWide"), *MEMORY[0x1E0C9AE00], &v6);
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

BOOL csp_getCenterStageRectOfInterest(uint64_t a1)
{
  void (*v2)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **);
  const __CFDictionary *v3;
  _BOOL8 result;
  const __CFDictionary *v5;
  CGRect rect;

  v5 = 0;
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v2)
  {
    v2(a1, CFSTR("CenterStageRectOfInterest"), *MEMORY[0x1E0C9AE00], &v5);
    v3 = v5;
  }
  else
  {
    v3 = 0;
  }
  memset(&rect, 0, sizeof(rect));
  CGRectMakeWithDictionaryRepresentation(v3, &rect);

  result = CGRectEqualToRect(rect, *MEMORY[0x1E0C9D648]);
  if (!result)
    return CGRectIsNull(rect);
  return result;
}

uint64_t csp_trueVideoCaptureEnabled(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v7;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(a1);
        if ((objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5), "movieFileSinkConfiguration"), "trueVideoCaptureEnabled") & 1) != 0)return 1;
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t csp_portraitPhotoModeEnabled(uint64_t a1)
{
  unsigned int v2;
  void *v3;

  if (a1)
  {
    if (objc_msgSend(*(id *)(a1 + 192), "previewDepthDataDeliveryEnabled"))
      v2 = objc_msgSend(*(id *)(a1 + 192), "previewDepthFilterRenderingEnabled");
    else
      v2 = 0;
    v3 = *(void **)(a1 + 208);
  }
  else
  {
    if (objc_msgSend(0, "previewDepthDataDeliveryEnabled"))
      v2 = objc_msgSend(0, "previewDepthFilterRenderingEnabled");
    else
      v2 = 0;
    v3 = 0;
  }
  if (FigCaptureConnectionConfigurationWithSinkType(v3, 4))
    return 0;
  else
    return v2;
}

uint64_t csp_supportsNondisruptiveSwitchingZoomFactors(int a1, void *a2, void *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CGSize v10;
  CGPoint v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGRect v16;
  _BYTE v17[128];
  uint64_t v18;
  CGRect v19;

  result = 0;
  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
    {
      objc_msgSend(a3, "objectAtIndexedSubscript:", a1);
      v10 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
      v11 = (CGPoint)*MEMORY[0x1E0C9D628];
      v16.origin = (CGPoint)*MEMORY[0x1E0C9D628];
      v16.size = v10;
      FigCFDictionaryGetCGRectIfPresent();
      v12 = 0u;
      v13 = 0u;
      v14 = 0u;
      v15 = 0u;
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
      if (result)
      {
        v7 = result;
        v8 = *(_QWORD *)v13;
        while (2)
        {
          v9 = 0;
          do
          {
            if (*(_QWORD *)v13 != v8)
              objc_enumerationMutation(a2);
            objc_msgSend(a3, "objectAtIndexedSubscript:", (int)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v9), "intValue", v10, v11));
            FigCFDictionaryGetCGRectIfPresent();
            if (!CGRectIsNull(v16))
            {
              v19.origin = v11;
              v19.size = v10;
              if (!CGRectIsNull(v19) && v10.width < v16.size.width)
                return 1;
            }
            ++v9;
          }
          while (v7 != v9);
          result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
          v7 = result;
          if (result)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t csp_shouldEnableLightSourceMask(void *a1, void *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a1, "isVideoGreenGhostMitigationUsesLightSourceMaskAndKeypointDescriptorData");
  if ((_DWORD)result)
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    if (result)
    {
      v4 = result;
      v5 = *(_QWORD *)v9;
      while (2)
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v9 != v5)
            objc_enumerationMutation(a2);
          v7 = *(void **)(*((_QWORD *)&v8 + 1) + 8 * v6);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0
            && (objc_msgSend((id)objc_msgSend(v7, "sinkConfiguration"), "sinkType") & 0xFFFFFFFD) == 4
            && (objc_msgSend(v7, "videoGreenGhostMitigationEnabled") & 1) != 0)
          {
            return 1;
          }
          ++v6;
        }
        while (v4 != v6);
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
        v4 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  return result;
}

uint64_t csp_variableFrameRateVideoGain(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "sensorIDDictionary");
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("VariableFrameRateVideoParameters")), "objectForKeyedSubscript:", CFSTR("AEMaxGainForFrameRate")), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), 60)), "floatValue");
}

void *csp_getVideoDataConfigurationFromConfigurations(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)v10;
LABEL_3:
  v5 = 0;
  while (1)
  {
    if (*(_QWORD *)v10 != v4)
      objc_enumerationMutation(a1);
    v6 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * v5);
    v7 = (void *)objc_msgSend(v6, "sinkConfiguration");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v7, "sinkType") == 6)
      return v6;
    if (v3 == ++v5)
    {
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        goto LABEL_3;
      return 0;
    }
  }
}

uint64_t sfn_createSampleBufferProcessorFunction()
{
  return FigSampleBufferProcessorCreateForCustom();
}

uint64_t captureStreamListener(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, __CFDictionary *Mutable)
{
  uint64_t result;
  uint64_t v8;
  __CFDictionary *v9;
  int v10;
  const __CFString *v11;
  int v12;
  BOOL v13;
  int v14;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 88))
    return result;
  v8 = result;
  result = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E0D06FE0]);
  if (!(_DWORD)result)
    return result;
  if (Mutable)
  {
    v9 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
  }
  v10 = *(_DWORD *)(v8 + 84);
  if (v10 == 1)
  {
    v11 = CFSTR("FixedFocusPoints");
    goto LABEL_11;
  }
  if (v10 == 5)
  {
    v11 = CFSTR("FocusAtPoint");
LABEL_11:
    CFDictionaryAddValue(Mutable, CFSTR("FocusMode"), v11);
  }
  v12 = *(_DWORD *)(v8 + 7656);
  v13 = __OFSUB__(v12, 1);
  v14 = v12 - 1;
  if (v14 < 0 == v13)
  {
    *(_DWORD *)(v8 + 7656) = v14;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (v9)
    CFRelease(v9);
  *(_BYTE *)(v8 + 81) = 0;
  return FigMemoryBarrier();
}

uint64_t FigSampleBufferAutofocusProcessorAddTimestampedMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  opaqueCMSampleBuffer *v6;
  opaqueCMSampleBuffer *v7;
  uint64_t DerivedStorage;
  double Seconds;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t CameraParametersForPortType;
  float *v22;
  float *v23;
  float v24;
  float v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  const __CFDictionary *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  const char *v45;
  const __CFAllocator *v46;
  CFStringRef v47;
  int v48;
  int v49;
  CFStringRef v50;
  const void *v51;
  uint64_t v52;
  size_t v53;
  size_t v54;
  CFStringRef v55;
  const void *v56;
  const __CFAllocator *v57;
  __CFArray *Mutable;
  CFNumberRef v59;
  uint64_t i;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  __CFArray *v67;
  uint64_t j;
  CFNumberRef v69;
  __CFArray *v70;
  uint64_t k;
  CFNumberRef v72;
  __CFArray *v73;
  uint64_t v74;
  uint64_t v75;
  CFNumberRef v76;
  CMTime time;
  char __s[8];
  uint64_t v80;

  MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v5 = v4;
  v7 = v6;
  v80 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetPresentationTimeStamp(&time, v7);
  Seconds = CMTimeGetSeconds(&time);
  v10 = (_DWORD *)(DerivedStorage + 17328);
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  v11 = -320;
  while (*(double *)(DerivedStorage + v11 + 17664) != Seconds)
  {
    v11 += 16;
    if (!v11)
      goto LABEL_6;
  }
  v12 = *(void **)(DerivedStorage + v11 + 17672);
  if (v12)
  {
LABEL_10:
    v14 = *MEMORY[0x1E0D05858];
    v15 = (void *)objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D05858]);
    if (objc_msgSend(v15, "count"))
    {
      v16 = (void *)CMGetAttachment(v7, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
      v17 = *MEMORY[0x1E0D07710];
      v18 = (void *)objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0D07710]);
      v19 = objc_msgSend(v12, "objectForKeyedSubscript:", v17);
      v20 = !v18 || v19 == 0;
      if (!v20 && (objc_msgSend(v18, "isEqualToString:", v19) & 1) == 0)
      {
        CameraParametersForPortType = af_sbp_getCameraParametersForPortType();
        if (CameraParametersForPortType)
        {
          v22 = (float *)CameraParametersForPortType;
          v23 = (float *)af_sbp_getCameraParametersForPortType();
          if (v23)
          {
            v24 = *v22;
            if (*v22 > 0.0)
            {
              v25 = *v23;
              if (*v23 > 0.0)
              {
                v26 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 0), "intValue");
                v27 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 1), "intValue");
                v28 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 2), "intValue");
                v29 = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", 3), "intValue");
                v30 = (1000.0 - 1000.0 / (float)(v24 / v25)) * 0.5;
                v31 = (int)(float)((float)(v24 / v25) * (float)((float)v26 - v30));
                v32 = (int)(float)((float)(v24 / v25) * (float)((float)v27 - v30));
                v33 = (int)(float)((float)(v24 / v25) * (float)v28);
                v34 = (int)(float)((float)(v24 / v25) * (float)v29);
                v35 = (void *)MEMORY[0x1E0C99DE8];
                v36 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", v31);
                v37 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", v32);
                v38 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", v33);
                v39 = objc_msgSend(v35, "arrayWithObjects:", v36, v37, v38, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", v34), 0);
                v40 = (id)objc_msgSend(v12, "mutableCopy");
                objc_msgSend(v40, "setObject:forKeyedSubscript:", v39, v14);
LABEL_21:
                if (v40)
                  v41 = (const __CFDictionary *)v40;
                else
                  v41 = (const __CFDictionary *)v12;
                CFDictionaryApplyFunction(v41, (CFDictionaryApplierFunction)insertKeyAndValue, v5);
                goto LABEL_25;
              }
            }
          }
        }
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    v40 = 0;
    goto LABEL_21;
  }
LABEL_6:
  if (*v10)
    v13 = *v10 - 1;
  else
    v13 = 19;
  v12 = *(void **)(DerivedStorage + 16 * v13 + 17352);
  if (v12)
    goto LABEL_10;
LABEL_25:
  v42 = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(v42 + 652))
  {
    v43 = 0;
    __s[0] = 0;
    do
    {
      v44 = strlen(__s);
      if (v43)
        v45 = ", ";
      else
        v45 = "";
      snprintf(&__s[v44], 0x2000 - v44, "%s(%lld, %lld)", v45, *(_QWORD *)(v42 + v43 + 7704), *(_QWORD *)(v42 + v43 + 7832));
      v43 += 8;
    }
    while (v43 != 128);
    v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v47 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __s, 0x600u);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("MatrixFocusBand"), v47);
    CFRelease(v47);
    v48 = 0;
    v49 = *(_DWORD *)(v42 + 7696);
    do
    {
      if (v49 >= 1)
        --v49;
      else
        v49 = 31;
      snprintf(__s, 0x2000uLL, "MatrixScores%d", v48);
      v50 = CFStringCreateWithCString(v46, __s, 0x600u);
      v51 = *(const void **)(v42 + 8 * v49 + 8024);
      if (v51)
        CFDictionaryAddValue((CFMutableDictionaryRef)v5, v50, v51);
      CFRelease(v50);
      ++v48;
    }
    while (v48 != 8);
    __s[0] = 0;
    v52 = -64;
    do
    {
      v53 = strlen(__s);
      snprintf(&__s[v53], 0x2000 - v53, "(%.3f %.3f %.3f) ", *(float *)(v42 + v52 + 8356), *(float *)(v42 + v52 + 8596), *(float *)(v42 + v52 + 8836));
      v52 += 4;
    }
    while (v52);
    v54 = strlen(__s);
    snprintf(&__s[v54], 0x2000 - v54, "angle=%.3f", *(float *)(v42 + 9012));
    v55 = CFStringCreateWithCString(v46, __s, 0x600u);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("MatrixAccelerometer"), v55);
    CFRelease(v55);
    v56 = *(const void **)(v42 + 8280);
    if (v56)
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("FocusScanHistory"), v56);
  }
  if (*(_BYTE *)(v42 + 9061))
  {
    v57 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 13, MEMORY[0x1E0C9B378]);
    v59 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 9064));
    CFArrayAppendValue(Mutable, v59);
    CFRelease(v59);
    for (i = 0; i != 56; i += 8)
    {
      v61 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 9096 + i));
      CFArrayAppendValue(Mutable, v61);
      CFRelease(v61);
    }
    v62 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 16328));
    CFArrayAppendValue(Mutable, v62);
    CFRelease(v62);
    v63 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 16336));
    CFArrayAppendValue(Mutable, v63);
    CFRelease(v63);
    *(double *)__s = *(float *)(v42 + 1788);
    v64 = CFNumberCreate(v57, kCFNumberDoubleType, __s);
    CFArrayAppendValue(Mutable, v64);
    CFRelease(v64);
    *(double *)__s = *(float *)(v42 + 1792);
    v65 = CFNumberCreate(v57, kCFNumberDoubleType, __s);
    CFArrayAppendValue(Mutable, v65);
    CFRelease(v65);
    v66 = CFNumberCreate(v57, kCFNumberShortType, (const void *)(v42 + 17321));
    CFArrayAppendValue(Mutable, v66);
    CFRelease(v66);
    CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("HDRscene_debug"), Mutable);
    CFRelease(Mutable);
    if (*(_BYTE *)(v42 + 7538))
    {
      v67 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E0C9B378]);
      for (j = 0; j != 2048; j += 8)
      {
        v69 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 10184 + j));
        CFArrayAppendValue(v67, v69);
        CFRelease(v69);
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("HDRscene_histR"), v67);
      CFRelease(v67);
      v70 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E0C9B378]);
      for (k = 0; k != 2048; k += 8)
      {
        v72 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v42 + 12232 + k));
        CFArrayAppendValue(v70, v72);
        CFRelease(v72);
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("HDRscene_histG"), v70);
      CFRelease(v70);
      v73 = CFArrayCreateMutable(v57, 256, MEMORY[0x1E0C9B378]);
      v74 = 0;
      v75 = v42 + 14280;
      do
      {
        v76 = CFNumberCreate(v57, kCFNumberDoubleType, (const void *)(v75 + v74));
        CFArrayAppendValue(v73, v76);
        CFRelease(v76);
        v74 += 8;
      }
      while (v74 != 2048);
      CFDictionaryAddValue((CFMutableDictionaryRef)v5, CFSTR("HDRscene_histB"), v73);
      CFRelease(v73);
    }
  }
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E0D06B30]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E0D06B28]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E0D06B20]);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)v5, (const void *)*MEMORY[0x1E0D06B38]);
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  return 0;
}

void insertKeyAndValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

uint64_t FigSampleBufferAutofocusProcessorCopyTimestampedExposureModes(uint64_t a1, const __CFArray *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v8;
  const void *v9;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  double Seconds;
  uint64_t v13;
  const void *Value;
  CFTypeRef v15;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  Mutable = CFArrayCreateMutable(v5, Count, MEMORY[0x1E0C9B378]);
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  v8 = 0;
  v9 = (const void *)*MEMORY[0x1E0D05E60];
  if (!a2)
    goto LABEL_6;
LABEL_5:
  for (i = CFArrayGetCount(a2); v8 < i; i = 0)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v8);
    CMTimeMakeFromDictionary(&time, ValueAtIndex);
    Seconds = CMTimeGetSeconds(&time);
    v13 = 0;
    Value = 0;
    do
    {
      if (Seconds == *(double *)(DerivedStorage + 17344 + v13))
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16 * v8 + 17352), v9);
      v13 += 16;
    }
    while (v13 != 320);
    if (!Value)
      break;
    CFArrayAppendValue(Mutable, Value);
    CFRelease(Value);
    ++v8;
    if (a2)
      goto LABEL_5;
LABEL_6:
    ;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 17336));
  if (a3 && v8 >= i)
  {
    if (Mutable)
      v15 = CFRetain(Mutable);
    else
      v15 = 0;
    *a3 = v15;
  }
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 32), "supportedProperties"), "objectForKeyedSubscript:", a2);
  v7 = 32;
  if (!v6)
    v7 = 8;
  return objc_msgSend(*(id *)(DerivedStorage + v7), "setProperty:value:", a2, a3);
}

uint64_t invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD);
  pthread_mutex_t *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  const CFDictionaryKeyCallBacks *v16;
  const CFDictionaryValueCallBacks *v17;
  const __CFAllocator *v18;
  __CFDictionary *Mutable;
  __CFDictionary *v20;
  int v21;
  const __CFString *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  const void *v36;
  unsigned int v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88))
    return 0;
  v4 = DerivedStorage;
  v5 = (_BYTE *)(DerivedStorage + 7424);
  *(_BYTE *)(DerivedStorage + 88) = 1;
  v6 = *(void **)(DerivedStorage + 48);
  if (v6)
  {
    FigCoreMotionRelease(v6);
    *(_QWORD *)(v4 + 48) = 0;
  }
  FigImageControl_InvalidateExposure(a1);
  if (*v5)
  {
    v3 = objc_msgSend(*(id *)(v4 + 8), "sendCommandProperty:", *MEMORY[0x1E0D07858]);
    *v5 = 0;
  }
  else
  {
    v3 = 0;
  }
  v7 = *(_QWORD *)(v4 + 64);
  if (v7)
  {
    v8 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v8)
      v8(v7, 0, 0);
    CFRelease(*(CFTypeRef *)(v4 + 64));
    *(_QWORD *)(v4 + 64) = 0;
  }
  v9 = *(pthread_mutex_t **)(v4 + 17336);
  if (v9)
  {
    pthread_mutex_lock(v9);
    v10 = 0;
    v11 = v4 + 17352;
    do
    {
      v12 = *(const void **)(v11 + v10);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(v11 + v10) = 0;
      }
      v10 += 16;
    }
    while (v10 != 320);
    *(_DWORD *)(v4 + 17328) = 0;
    pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 17336));
    FigSimpleMutexDestroy();
    *(_QWORD *)(v4 + 17336) = 0;
  }
  setPropertiesOnStream();
  FigSimpleQueueRelease();
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)v4 = 0;
  v13 = *(void **)(v4 + 8);
  if (v13)
  {
    v38 = v3;
    if (!*(_DWORD *)(v4 + 652))
      objc_msgSend(v13, "unregisterForNotification:listener:", *MEMORY[0x1E0D06FE0], a1);
    v14 = CMBaseObjectGetDerivedStorage();
    if (*(int *)(v14 + 7656) >= 1)
    {
      v15 = 0;
      v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        Mutable = CFDictionaryCreateMutable(v18, 1, v16, v17);
        v20 = Mutable;
        v21 = *(_DWORD *)(v14 + 84);
        if (v21 == 1)
          break;
        if (v21 == 5)
        {
          v22 = CFSTR("FocusAtPoint");
LABEL_27:
          CFDictionaryAddValue(Mutable, CFSTR("FocusMode"), v22);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v20);
        if (++v15 >= *(_DWORD *)(v14 + 7656))
          goto LABEL_29;
      }
      v22 = CFSTR("FixedFocusPoints");
      goto LABEL_27;
    }
LABEL_29:
    *(_DWORD *)(v14 + 7656) = 0;
    v23 = *(const void **)(v4 + 8);
    v3 = v38;
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v24 = *(const void **)(v4 + 16);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(v4 + 16) = 0;
  }
  v25 = *(const void **)(v4 + 24);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(v4 + 24) = 0;
  }
  v26 = *(const void **)(v4 + 32);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(v4 + 32) = 0;
  }
  v27 = *(const void **)(v4 + 680);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(v4 + 680) = 0;
  }
  v28 = *(const void **)(v4 + 9024);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(v4 + 9024) = 0;
  }
  v29 = *(const void **)(v4 + 9032);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(v4 + 9032) = 0;
  }
  v30 = *(const void **)(v4 + 7544);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(v4 + 7544) = 0;
  }
  v31 = *(const void **)(v4 + 8280);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(v4 + 8280) = 0;
  }
  v32 = 0;
  v33 = v4 + 8024;
  do
  {
    v34 = *(const void **)(v33 + v32);
    if (v34)
    {
      CFRelease(v34);
      *(_QWORD *)(v33 + v32) = 0;
    }
    v32 += 8;
  }
  while (v32 != 256);
  v35 = *(const void **)(v4 + 6296);
  if (v35)
  {
    CFRelease(v35);
    *(_QWORD *)(v4 + 6296) = 0;
  }
  v36 = *(const void **)(v4 + 6288);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(v4 + 6288) = 0;
  }
  return v3;
}

__CFString *copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_Autofocus %p>"), a1);
  return Mutable;
}

uint64_t setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 88))
    return 4294954511;
  v7 = (_QWORD *)DerivedStorage;
  result = 0;
  *v7 = a2;
  v7[7] = a3;
  return result;
}

uint64_t finishPendingProcessing()
{
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 88))
    return 4294954511;
  else
    return 0;
}

uint64_t csp_previewTapCallback(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v5;

  v5 = result;
  if ((a2 & 1) != 0)
    result = objc_msgSend(*(id *)(result + 64), "captureSessionPreviewTapDidOpen:", result);
  if (a3)
    result = objc_msgSend(*(id *)(v5 + 64), "captureSession:previewTapDidOutputSampleBuffer:", v5, a3);
  if ((a2 & 2) != 0)
  {
    *(_BYTE *)(v5 + 60) = 0;
    return objc_msgSend(*(id *)(v5 + 64), "captureSessionPreviewTapDidClose:", v5);
  }
  return result;
}

uint64_t __cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  cso_postDeferredmediadImmediateTerminationNotificationIfNecessary_sSupportsDeferredProcessing = result;
  return result;
}

uint64_t FigExternalStorageDeviceManagerCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  if (PerformFigExternalStorageDeviceManagerOneTimeInitialization_initFigExternalStorageDeviceManager == -1)
  {
    if (!a3)
      goto LABEL_16;
  }
  else
  {
    dispatch_once(&PerformFigExternalStorageDeviceManagerOneTimeInitialization_initFigExternalStorageDeviceManager, &__block_literal_global_59);
    if (!a3)
      goto LABEL_16;
  }
  FigExternalStorageDeviceManagerGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v13 = v5;
    FigDebugAssert3();
    return v13;
  }
  if (dword_1EE6BEA38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(0);
  if (!DerivedStorage)
    goto LABEL_16;
  v8 = (_QWORD *)DerivedStorage;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v8[4] = Mutable;
  if (!Mutable
    || (v10 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (v8[5] = v10) == 0)
    || (v11 = FigSimpleMutexCreate(), (*v8 = v11) == 0)
    || (v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]), (v8[6] = v12) == 0))
  {
LABEL_16:
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v13 = 0;
  *a3 = 0;
  return v13;
}

uint64_t FigExternalStorageDeviceManagerGetDerivedStorage(uint64_t a1)
{
  if (!a1)
    FigDebugAssert3();
  return CMBaseObjectGetDerivedStorage();
}

uint64_t FigExternalStorageDeviceManager_Finalize(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  const void *v3;
  const void *v4;

  result = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (result)
  {
    v2 = result;
    if (*(_QWORD *)(result + 24))
    {
      objc_msgSend(MEMORY[0x1E0CAACA8], "endMonitoringProviderDomainChanges:");
      *(_QWORD *)(v2 + 24) = 0;
    }
    v3 = *(const void **)(v2 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 32) = 0;
    }
    v4 = *(const void **)(v2 + 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v2 + 40) = 0;
    }

    *(_QWORD *)(v2 + 48) = 0;
    return FigSimpleMutexDestroy();
  }
  return result;
}

__CFString *FigExternalStorageDeviceManager_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigExternalStorageDeviceManager %p>"), a1);
  return Mutable;
}

uint64_t FigExternalStorageDeviceManager_CopyProperty(int a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  if (cf1 && a4)
  {
    *a4 = 0;
    if (CFEqual(cf1, CFSTR("Supported")))
    {
      *a4 = *MEMORY[0x1E0C9AE40];
      return 0;
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t FigExternalStorageDeviceManager_BeginMonitoring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *global_queue;
  _QWORD block[5];

  DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    *(_QWORD *)(DerivedStorage + 8) = a4;
    *(_QWORD *)(DerivedStorage + 16) = a3;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __FigExternalStorageDeviceManager_BeginMonitoring_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = v7;
    dispatch_async(global_queue, block);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableURLArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t updated;
  objc_class *v23;
  id v24;
  void *v25;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v28;
  uint64_t v30;
  int v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  uint64_t v42;
  _BYTE v43[128];
  _QWORD v44[8];

  v44[5] = *MEMORY[0x1E0C80C00];
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage)
  {
    if (a3)
    {
      if (a5)
      {
        if (a4)
        {
          v10 = DerivedStorage;
          if (CFArrayGetCount((CFArrayRef)a4) > 0)
          {
            pthread_mutex_lock(*(pthread_mutex_t **)v10);
            v11 = (void *)objc_msgSend(*(id *)(v10 + 40), "objectForKey:", a3);
            if (!v11
              || (v12 = (void *)objc_msgSend(v11, "objectForKey:", CFSTR("DeviceInfo_URL"))) == 0
              || (v13 = v12,
                  v14 = objc_msgSend(v12, "startAccessingSecurityScopedResource"),
                  (v15 = (void *)objc_msgSend(v13, "URLByAppendingPathComponent:isDirectory:", CFSTR("DCIM"), 1)) == 0))
            {
              FigDebugAssert3();
              v30 = FigSignalErrorAt();
LABEL_44:
              updated = v30;
              goto LABEL_36;
            }
            v16 = v15;
            v31 = v14;
            if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v15, "path")) & 1) == 0)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, 0);
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v17 = *(void **)(v10 + 48);
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
            if (v18)
            {
              v19 = *(_QWORD *)v34;
LABEL_13:
              v20 = 0;
              while (1)
              {
                if (*(_QWORD *)v34 != v19)
                  objc_enumerationMutation(v17);
                v21 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v20);
                if (objc_msgSend((id)objc_msgSend(v21, "directoryURL"), "isEqual:", v16))
                {
                  updated = fesdm_updateArrayWithNextAvailableURL(v8, a4, v21);
                  if ((_DWORD)updated)
                    goto LABEL_37;
                }
                if (v18 == ++v20)
                {
                  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
                  if (v18)
                    goto LABEL_13;
                  break;
                }
              }
            }
            if (!objc_msgSend(v8, "count"))
            {
              v37 = 0;
              v38 = &v37;
              v39 = 0x3052000000;
              v40 = __Block_byref_object_copy__22;
              v41 = __Block_byref_object_dispose__22;
              v23 = (objc_class *)getPLSimpleDCIMDirectoryClass_softClass;
              v42 = getPLSimpleDCIMDirectoryClass_softClass;
              if (!getPLSimpleDCIMDirectoryClass_softClass)
              {
                v44[0] = MEMORY[0x1E0C809B0];
                v44[1] = 3221225472;
                v44[2] = __getPLSimpleDCIMDirectoryClass_block_invoke;
                v44[3] = &unk_1E491EC40;
                v44[4] = &v37;
                __getPLSimpleDCIMDirectoryClass_block_invoke((uint64_t)v44);
                v23 = (objc_class *)v38[5];
              }
              _Block_object_dispose(&v37, 8);
              v24 = (id)objc_msgSend([v23 alloc], "initWithDirectoryURL:subDirectorySuffix:perDirectoryLimit:userInfoPath:", v16, 0, 9999, 0);
              objc_msgSend(v24, "setRepresentsCameraRoll:", 1);
              objc_msgSend(v24, "setShouldCheckForExistingFiles:", 1);
              if (!v24)
                goto LABEL_43;
              updated = fesdm_updateArrayWithNextAvailableURL(v8, a4, v24);
              if ((_DWORD)updated)
              {
LABEL_37:
                FigDebugAssert3();
LABEL_36:
                pthread_mutex_unlock(*(pthread_mutex_t **)v10);
                return updated;
              }
              v25 = *(void **)(v10 + 48);
              if (!v25)
                goto LABEL_43;
              objc_msgSend(v25, "addObject:", v24);
            }
            if (v31)
              objc_msgSend(v13, "stopAccessingSecurityScopedResource");
            Count = CFArrayGetCount((CFArrayRef)a4);
            if (Count == (int)objc_msgSend(v8, "count"))
            {
              if (dword_1EE6BEA38)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (v8)
                v28 = CFRetain(v8);
              else
                v28 = 0;
              updated = 0;
              *a5 = v28;
              goto LABEL_36;
            }
LABEL_43:
            FigDebugAssert3();
            v30 = FigSignalErrorAt();
            goto LABEL_44;
          }
        }
      }
    }
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

void sub_1A2F727B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  CFDataRef v18;
  const __CFAllocator *v19;
  uint64_t i;
  void *v21;
  const char *v22;
  const UInt8 *v23;
  size_t v24;
  CFDataRef v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  pthread_mutex_t **v29;
  CFIndex Count;
  CFTypeRef v31;
  void *v33;
  int v34;
  const __CFArray *theArray;
  _QWORD *v36;
  pthread_mutex_t **v37;
  id obj;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  id v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  DerivedStorage = FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage && a3 && a5 && a4 && (v11 = DerivedStorage, CFArrayGetCount((CFArrayRef)a4) > 0))
  {
    v13 = FigExternalStorageDeviceManager_CopyStorageDeviceNextAvailableURLArray(a1, v12, a3, a4, &v44);
    if ((_DWORD)v13)
    {
      v28 = v13;
      FigDebugAssert3();
    }
    else
    {
      pthread_mutex_lock(*(pthread_mutex_t **)v11);
      v14 = (void *)objc_msgSend(*(id *)(v11 + 40), "objectForKey:", a3);
      if (v14 && (v15 = (void *)objc_msgSend(v14, "objectForKey:", CFSTR("DeviceInfo_URL"))) != 0)
      {
        theArray = (const __CFArray *)a4;
        v36 = a5;
        v37 = (pthread_mutex_t **)v11;
        v33 = v15;
        v34 = objc_msgSend(v15, "startAccessingSecurityScopedResource");
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        obj = v44;
        v16 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
        if (v16)
        {
          v17 = v16;
          v18 = 0;
          v39 = *(_QWORD *)v41;
          v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          while (2)
          {
            for (i = 0; i != v17; ++i)
            {
              if (*(_QWORD *)v41 != v39)
                objc_enumerationMutation(obj);
              v21 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
              objc_msgSend((id)objc_msgSend(v21, "path"), "fileSystemRepresentation");
              v22 = (const char *)sandbox_extension_issue_file();
              if (!v22)
              {
                FigDebugAssert3();
                v28 = 4294948018;
                v29 = v37;
                goto LABEL_34;
              }
              v23 = (const UInt8 *)v22;
              v24 = strlen(v22);
              if (v18)
                CFRelease(v18);
              v25 = CFDataCreate(v19, v23, v24 + 1);
              if (!v25)
              {
                FigDebugAssert3();
                v28 = 4294948026;
                v11 = (uint64_t)v37;
                goto LABEL_38;
              }
              v18 = v25;
              MEMORY[0x1A858D140](v21, v25);
              v26 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3910]), "initWithURL:readonly:scope:", v21, 0, v18);
              if (!v26
                || (v27 = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v26, 1, &v45)) == 0|| !v9)
              {
                FigDebugAssert3();
                v28 = FigSignalErrorAt();
                pthread_mutex_unlock(*v37);
                goto LABEL_35;
              }
              objc_msgSend(v9, "addObject:", v27);
            }
            v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v46, 16);
            if (v17)
              continue;
            break;
          }
        }
        else
        {
          v18 = 0;
        }
        v29 = v37;
        if (v34)
          objc_msgSend(v33, "stopAccessingSecurityScopedResource");
        Count = CFArrayGetCount(theArray);
        if (Count == (int)objc_msgSend(v9, "count"))
        {
          if (v9)
            v31 = CFRetain(v9);
          else
            v31 = 0;
          v28 = 0;
          *v36 = v31;
        }
        else
        {
          FigDebugAssert3();
          v28 = FigSignalErrorAt();
        }
LABEL_34:
        pthread_mutex_unlock(*v29);
        if (v18)
LABEL_35:
          CFRelease(v18);
      }
      else
      {
        FigDebugAssert3();
        v28 = FigSignalErrorAt();
LABEL_38:
        pthread_mutex_unlock(*(pthread_mutex_t **)v11);
      }
    }
    return v28;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigExternalStorageDeviceManager_CopyStorageDeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v9;
  void *v10;
  void *v11;
  const void *StorageDeviceSizeAttributes;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  CFTypeRef *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  int v28;

  DerivedStorage = (pthread_mutex_t **)FigExternalStorageDeviceManagerGetDerivedStorage(a1);
  if (DerivedStorage && a3 && a5 && a2)
  {
    v9 = DerivedStorage;
    pthread_mutex_lock(*DerivedStorage);
    *a5 = 0;
    if (FigCFEqual())
    {
      if (!FigCFArrayContainsValue())
        goto LABEL_25;
      v10 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
      if (!v10)
        goto LABEL_25;
      v11 = (void *)objc_msgSend(v10, "objectForKey:", CFSTR("DeviceInfo_URL"));
      if (!v11)
        goto LABEL_25;
      StorageDeviceSizeAttributes = (const void *)externalStorageDeviceManager_getStorageDeviceSizeAttributes(v11, *MEMORY[0x1E0CB2B00]);
      if (!StorageDeviceSizeAttributes)
        goto LABEL_25;
      goto LABEL_19;
    }
    if (FigCFEqual())
    {
      if (!FigCFArrayContainsValue())
        goto LABEL_25;
      v13 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
      if (!v13)
        goto LABEL_25;
      v14 = (void *)objc_msgSend(v13, "objectForKey:", CFSTR("DeviceInfo_URL"));
      if (!v14)
        goto LABEL_25;
      v15 = v14;
      v16 = objc_msgSend(v14, "startAccessingSecurityScopedResource");
      v17 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "displayNameAtPath:", objc_msgSend(v15, "path"));
      if (v16)
        objc_msgSend(v15, "stopAccessingSecurityScopedResource");
      if (!v17)
        goto LABEL_25;
      StorageDeviceSizeAttributes = (const void *)v17;
LABEL_19:
      v18 = 0;
      *a5 = CFRetain(StorageDeviceSizeAttributes);
LABEL_27:
      pthread_mutex_unlock(*v9);
      return v18;
    }
    if (FigCFEqual())
    {
      v19 = FigCFArrayContainsValue();
      v18 = 0;
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v19)
        v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (FigCFEqual())
      {
        if (!FigCFArrayContainsValue())
          goto LABEL_25;
        v22 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
        if (!v22)
          goto LABEL_25;
        v23 = (void *)objc_msgSend(v22, "objectForKey:", CFSTR("DeviceInfo_URL"));
        if (!v23)
          goto LABEL_25;
        StorageDeviceSizeAttributes = (const void *)externalStorageDeviceManager_getStorageDeviceSizeAttributes(v23, *MEMORY[0x1E0CB2B10]);
        if (!StorageDeviceSizeAttributes)
          goto LABEL_25;
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        v24 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
        if (!v24)
          goto LABEL_25;
        StorageDeviceSizeAttributes = (const void *)objc_msgSend(v24, "objectForKey:", CFSTR("DeviceInfo_URL"));
        if (!StorageDeviceSizeAttributes)
          goto LABEL_25;
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        v25 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
        if (!v25)
          goto LABEL_25;
        v26 = objc_msgSend(v25, "objectForKey:", CFSTR("DeviceInfo_Identifier"));
        if (!v26)
          goto LABEL_25;
        StorageDeviceSizeAttributes = (const void *)objc_msgSend((id)getICCameraDeviceClass(), "uuidStringFromFileProviderIdentifier:", v26);
        if (!StorageDeviceSizeAttributes)
          goto LABEL_25;
        goto LABEL_19;
      }
      if (!FigCFEqual())
        goto LABEL_26;
      v27 = (void *)-[pthread_mutex_t objectForKey:](v9[5], "objectForKey:", a2);
      if (!v27)
      {
LABEL_25:
        FigDebugAssert3();
LABEL_26:
        v18 = FigSignalErrorAt();
        goto LABEL_27;
      }
      v28 = objc_msgSend((id)objc_msgSend(v27, "objectForKey:", CFSTR("DeviceInfo_IsEncrypted")), "BOOLValue");
      v18 = 0;
      v20 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v28)
        v20 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    *a5 = *v20;
    goto LABEL_27;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t __fedm_startMonitoringForExternalDevices_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t result;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t k;
  void *Value;
  void *v28;
  void *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  __CFDictionary *v42;
  NSObject *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  const __CFArray *v47;
  CFIndex FirstIndexOfValue;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t m;
  void *v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  os_log_type_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *key;
  uint64_t v80;
  _QWORD v81[6];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  os_log_type_t v94;
  unsigned int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  os_log_type_t v108[128];
  os_log_type_t v109[128];
  int v110;
  const char *v111;
  __int16 v112;
  void *v113;
  __int16 v114;
  void *v115;
  __int16 v116;
  void *v117;
  _DWORD v118[32];
  os_log_type_t type[4];
  const char *v120;
  __int16 v121;
  id v122;
  __int16 v123;
  uint64_t v124;
  _DWORD v125[32];
  _DWORD v126[3];
  _BYTE v127[128];
  uint64_t v128;
  CFRange v129;

  v128 = *MEMORY[0x1E0C80C00];
  if (dword_1EE6BEA38)
  {
    v125[0] = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (a3)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v6 + 8))(0, a3, *(_QWORD *)(v6 + 16));
  v77 = a1;
  if (!v6)
    goto LABEL_97;
  v80 = *(_QWORD *)(a1 + 32);
  pthread_mutex_lock(*(pthread_mutex_t **)v6);
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v9 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v104, v127, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v105;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v105 != v11)
          objc_enumerationMutation(a2);
        v13 = *(void **)(*((_QWORD *)&v104 + 1) + 8 * i);
        v14 = (void *)objc_msgSend(a2, "objectForKeyedSubscript:", v13, v70, v71);
        if (objc_msgSend(v13, "containsString:", CFSTR("UserFS")))
        {
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v15 = (void *)objc_msgSend(v14, "storageURLs");
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v100, v126, 16);
          if (v16)
          {
            v17 = v16;
            v18 = *(_QWORD *)v101;
            do
            {
              for (j = 0; j != v17; ++j)
              {
                if (*(_QWORD *)v101 != v18)
                  objc_enumerationMutation(v15);
                v20 = *(void **)(*((_QWORD *)&v100 + 1) + 8 * j);
                if (objc_msgSend(v20, "isFileURL"))
                  objc_msgSend(v8, "addObject:", v20);
              }
              v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v100, v126, 16);
            }
            while (v17);
          }
        }
      }
      v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v104, v127, 16);
    }
    while (v10);
  }
  v6 = v80;
  if (dword_1EE6BEA38)
  {
    v118[0] = 0;
    v109[0] = OS_LOG_TYPE_DEFAULT;
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v22 = v118[0];
    if (os_log_type_enabled(v21, v109[0]))
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFE;
    if (v23)
    {
      v24 = *(_QWORD *)(v80 + 40);
      *(_DWORD *)type = 136315650;
      v120 = "fedm_removeDevicesDisconnected";
      v121 = 2112;
      v122 = v8;
      v123 = 2112;
      v124 = v24;
      LODWORD(v71) = 32;
      v70 = type;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v25 = (void *)objc_msgSend(*(id *)(v80 + 40), "copy", v70, v71);
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v76 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v96, v125, 16);
  if (!v76)
    goto LABEL_95;
  v75 = *(_QWORD *)v97;
  v73 = v25;
  while (2)
  {
    for (k = 0; k != v76; ++k)
    {
      if (*(_QWORD *)v97 != v75)
        objc_enumerationMutation(v25);
      key = *(void **)(*((_QWORD *)&v96 + 1) + 8 * k);
      if (!FigCFDictionaryGetValue())
      {
        v71 = v72;
        LODWORD(v70) = 0;
LABEL_94:
        FigDebugAssert3();
        goto LABEL_95;
      }
      Value = (void *)FigCFDictionaryGetValue();
      if (!Value)
      {
        v71 = v72;
        LODWORD(v70) = 0;
        goto LABEL_94;
      }
      v28 = Value;
      v29 = (void *)objc_msgSend(Value, "lastPathComponent");
      if (dword_1EE6BEA38)
      {
        v95 = 0;
        v94 = OS_LOG_TYPE_DEFAULT;
        v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v31 = v95;
        if (os_log_type_enabled(v30, v94))
          v32 = v31;
        else
          v32 = v31 & 0xFFFFFFFE;
        if (v32)
        {
          v33 = *(void **)(v6 + 40);
          v110 = 136315651;
          v111 = "fedm_removeDevicesDisconnected";
          v112 = 2113;
          v113 = key;
          v114 = 2113;
          v115 = v33;
          LODWORD(v71) = 32;
          v70 = (os_log_type_t *)&v110;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v34 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v90, v118, 16, v70, v71);
      if (v34)
      {
        v35 = v34;
        v36 = *(_QWORD *)v91;
LABEL_46:
        v37 = 0;
        while (1)
        {
          if (*(_QWORD *)v91 != v36)
            objc_enumerationMutation(v8);
          if ((objc_msgSend(v29, "isEqual:", objc_msgSend(*(id *)(*((_QWORD *)&v90 + 1) + 8 * v37), "lastPathComponent")) & 1) != 0)break;
          if (v35 == ++v37)
          {
            v35 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v90, v118, 16);
            if (v35)
              goto LABEL_46;
            goto LABEL_52;
          }
        }
      }
      else
      {
LABEL_52:
        if (dword_1EE6BEA38)
        {
          v95 = 0;
          v94 = OS_LOG_TYPE_DEFAULT;
          v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v39 = v95;
          if (os_log_type_enabled(v38, v94))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if (v40)
          {
            v41 = *(void **)(v6 + 40);
            v110 = 136315907;
            v111 = "fedm_removeDevicesDisconnected";
            v112 = 2112;
            v113 = v28;
            v114 = 2113;
            v115 = key;
            v116 = 2113;
            v117 = v41;
            LODWORD(v71) = 42;
            v70 = (os_log_type_t *)&v110;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v42 = *(__CFDictionary **)(v6 + 40);
        if (!v42)
        {
          v71 = v72;
          LODWORD(v70) = 0;
          goto LABEL_94;
        }
        CFDictionaryRemoveValue(v42, key);
        if (dword_1EE6BEA38)
        {
          v95 = 0;
          v94 = OS_LOG_TYPE_DEFAULT;
          v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v44 = v95;
          if (os_log_type_enabled(v43, v94))
            v45 = v44;
          else
            v45 = v44 & 0xFFFFFFFE;
          if (v45)
          {
            v46 = *(void **)(v6 + 32);
            v110 = 136315651;
            v111 = "fedm_removeDevicesDisconnected";
            v112 = 2113;
            v113 = key;
            v114 = 2113;
            v115 = v46;
            LODWORD(v71) = 32;
            v70 = (os_log_type_t *)&v110;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v47 = *(const __CFArray **)(v6 + 32);
        if (!v47)
        {
          v71 = v72;
          LODWORD(v70) = 0;
          goto LABEL_94;
        }
        v129.length = CFArrayGetCount(*(CFArrayRef *)(v6 + 32));
        v129.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v47, v129, key);
        if (FirstIndexOfValue != -1)
        {
          v74 = k;
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 32), FirstIndexOfValue);
          v49 = (void *)objc_msgSend(*(id *)(v6 + 48), "copy");
          v86 = 0u;
          v87 = 0u;
          v88 = 0u;
          v89 = 0u;
          v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v86, v109, 16);
          if (v50)
          {
            v51 = v50;
            v52 = *(_QWORD *)v87;
            do
            {
              for (m = 0; m != v51; ++m)
              {
                if (*(_QWORD *)v87 != v52)
                  objc_enumerationMutation(v49);
                v54 = *(void **)(*((_QWORD *)&v86 + 1) + 8 * m);
                if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v54, "directoryURL", v70), "URLByDeletingLastPathComponent"), "isEqual:", v28))
                {
                  if (dword_1EE6BEA38)
                  {
                    v95 = 0;
                    v94 = OS_LOG_TYPE_DEFAULT;
                    v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v56 = v95;
                    if (os_log_type_enabled(v55, v94))
                      v57 = v56;
                    else
                      v57 = v56 & 0xFFFFFFFE;
                    if (v57)
                    {
                      v58 = *(void **)(v80 + 48);
                      v110 = 136315907;
                      v111 = "fedm_removeDevicesDisconnected";
                      v112 = 2113;
                      v113 = v54;
                      v114 = 2113;
                      v115 = v58;
                      v116 = 2113;
                      v117 = key;
                      LODWORD(v71) = 42;
                      v70 = (os_log_type_t *)&v110;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v6 = v80;
                  }
                  objc_msgSend(*(id *)(v6 + 48), "removeObject:", v54, v70);
                }
              }
              v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v86, v109, 16);
            }
            while (v51);
          }
          v25 = v73;
          k = v74;
          if (v49)

        }
      }
    }
    v76 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v96, v125, 16);
    if (v76)
      continue;
    break;
  }
LABEL_95:
  if (v25)

LABEL_97:
  pthread_mutex_unlock(*(pthread_mutex_t **)v6);
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v59 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v82, v108, 16);
  if (!v59)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v77 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(v77 + 32) + 32), 0, *(_QWORD *)(*(_QWORD *)(v77 + 32) + 16));
  v60 = v59;
  v61 = 0;
  v62 = *(_QWORD *)v83;
  v63 = MEMORY[0x1E0C809B0];
  do
  {
    v64 = 0;
    do
    {
      if (*(_QWORD *)v83 != v62)
        objc_enumerationMutation(a2);
      v65 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * v64);
      v66 = objc_msgSend(a2, "objectForKeyedSubscript:", v65, v70, v71);
      if (objc_msgSend(v65, "containsString:", CFSTR("UserFS")))
      {
        v67 = objc_msgSend(MEMORY[0x1E0CAAC70], "rootItemIDWithProviderDomainID:", v65);
        v68 = (void *)objc_msgSend(MEMORY[0x1E0CAAC80], "defaultManager");
        v81[0] = v63;
        v81[1] = 3221225472;
        v81[2] = __fedm_startMonitoringForExternalDevices_block_invoke_27;
        v81[3] = &unk_1E4922928;
        v69 = *(_QWORD *)(v77 + 32);
        v81[4] = v66;
        v81[5] = v69;
        objc_msgSend(v68, "fetchURLForItemID:completionHandler:", v67, v81);
        v61 = 1;
      }
      ++v64;
    }
    while (v60 != v64);
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v82, v108, 16);
    v60 = result;
  }
  while (result);
  if ((v61 & 1) == 0)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v77 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(v77 + 32) + 32), 0, *(_QWORD *)(*(_QWORD *)(v77 + 32) + 16));
  return result;
}

void __fedm_startMonitoringForExternalDevices_block_invoke_27(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *Value;
  const void *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  __CFArray *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  os_log_type_t type[4];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (dword_1EE6BEA38)
  {
    LODWORD(v21) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v6)
    goto LABEL_6;
  pthread_mutex_lock(*(pthread_mutex_t **)v6);
  if (a3)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 8))(0, a3, *(_QWORD *)(v6 + 16));
LABEL_6:
    pthread_mutex_unlock(*(pthread_mutex_t **)v6);
    return;
  }
  if (!a2)
  {
LABEL_23:
    v16 = 0;
    goto LABEL_25;
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v8 = *(void **)(v6 + 40);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v22;
LABEL_10:
    v12 = 0;
    while (1)
    {
      if (*(_QWORD *)v22 != v11)
        objc_enumerationMutation(v8);
      if (!FigCFDictionaryGetValue())
        goto LABEL_28;
      Value = (void *)FigCFDictionaryGetValue();
      if (!Value)
        goto LABEL_28;
      if ((objc_msgSend(Value, "isEqual:", a2) & 1) != 0)
        goto LABEL_23;
      if (v10 == ++v12)
      {
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
        if (v10)
          goto LABEL_10;
        break;
      }
    }
  }
  v14 = (const void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3A28], "UUID", v19, v20), "UUIDString");
  objc_msgSend((id)objc_msgSend(v5, "error"), "code");
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
LABEL_28:
    FigDebugAssert3();
    goto LABEL_6;
  }
  v16 = Mutable;
  FigCFDictionarySetValue();
  objc_msgSend(v5, "identifier");
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  v17 = *(__CFArray **)(v6 + 32);
  if (v17)
  {
    CFArrayAppendValue(v17, v14);
    if (*(_QWORD *)(v6 + 40))
    {
      if (dword_1EE6BEA38)
      {
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigCFDictionarySetValue();
LABEL_25:
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v6 + 32), 0, *(_QWORD *)(v6 + 16));
      pthread_mutex_unlock(*(pthread_mutex_t **)v6);
      if (!v16)
        return;
      goto LABEL_26;
    }
  }
  FigDebugAssert3();
  pthread_mutex_unlock(*(pthread_mutex_t **)v6);
LABEL_26:
  CFRelease(v16);
}

uint64_t fesdm_updateArrayWithNextAvailableURL(void *a1, void *a2, void *a3)
{
  void *v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2
    && objc_msgSend(a2, "count")
    && (v6 = (void *)objc_msgSend(a3, "nextAvailableFileURLWithExtension:", objc_msgSend(a2, "objectAtIndexedSubscript:", 0))) != 0)
  {
    v7 = (void *)objc_msgSend(v6, "URLByDeletingPathExtension");
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (result)
    {
      v9 = result;
      v10 = *(_QWORD *)v14;
      while (2)
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v14 != v10)
            objc_enumerationMutation(a2);
          v12 = objc_msgSend(v7, "URLByAppendingPathExtension:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v11));
          if (!v12 || !a1)
          {
            FigDebugAssert3();
            return FigSignalErrorAt();
          }
          objc_msgSend(a1, "addObject:", v12);
          ++v11;
        }
        while (v9 != v11);
        result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        v9 = result;
        if (result)
          continue;
        break;
      }
    }
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

Class __getPLSimpleDCIMDirectoryClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!PhotoLibraryServicesCoreLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4922968;
    v5 = 0;
    PhotoLibraryServicesCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PhotoLibraryServicesCoreLibraryCore_frameworkLibrary)
    __getPLSimpleDCIMDirectoryClass_block_invoke_cold_1(&v3);
  result = objc_getClass("PLSimpleDCIMDirectory");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPLSimpleDCIMDirectoryClass_block_invoke_cold_2();
  getPLSimpleDCIMDirectoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getICCameraDeviceClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__22;
  v7 = __Block_byref_object_dispose__22;
  v0 = getICCameraDeviceClass_softClass;
  v8 = getICCameraDeviceClass_softClass;
  if (!getICCameraDeviceClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getICCameraDeviceClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getICCameraDeviceClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A2F75054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t externalStorageDeviceManager_getStorageDeviceSizeAttributes(void *a1, uint64_t a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;

  v9 = 0;
  v4 = objc_msgSend(a1, "startAccessingSecurityScopedResource");
  v5 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfFileSystemForPath:error:", objc_msgSend(a1, "path"), &v9);
  v6 = 0;
  if (v5)
    v7 = v9 == 0;
  else
    v7 = 0;
  if (v7 && (v6 = objc_msgSend(v5, "objectForKey:", a2), objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    FigDebugAssert3();
    return 0;
  }
  else if (v4)
  {
    objc_msgSend(a1, "stopAccessingSecurityScopedResource");
  }
  return v6;
}

Class __getICCameraDeviceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E4922980;
    v5 = 0;
    ImageCaptureCoreLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!ImageCaptureCoreLibraryCore_frameworkLibrary_0)
    __getICCameraDeviceClass_block_invoke_cold_1(&v3);
  result = objc_getClass("ICCameraDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getICCameraDeviceClass_block_invoke_cold_2();
  getICCameraDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *BWCreateFTCinematicTapRequestFromFocusRequest(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  const __CFDictionary *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  CGPoint point;
  _QWORD v12[2];
  _QWORD v13[3];

  v1 = a1;
  v13[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusIsFixedPlaneFocus"));
    if (v2)
      v3 = objc_msgSend(v2, "BOOLValue");
    else
      v3 = 0;
    point.x = 0.0;
    point.y = 0.0;
    v4 = (const __CFDictionary *)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusPoint"));
    if (v4 && CGPointMakeWithDictionaryRepresentation(v4, &point))
    {
      v5 = getkFTInvalidTrackId();
      v6 = (void *)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusObjectID"));
      if (v6)
        v5 = objc_msgSend(v6, "longLongValue");
      v7 = (void *)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusIsHardFocus"));
      if (v7)
        v8 = objc_msgSend(v7, "BOOLValue");
      else
        v8 = 0;
      v1 = (void *)objc_msgSend(objc_alloc((Class)getFTCinematicTapRequestClass()), "init");
      objc_msgSend(v1, "setTapPoint:", point.x, point.y);
      objc_msgSend(v1, "setTrackId:", v5);
      v12[0] = CFSTR("isHardFocus");
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v8);
      v12[1] = CFSTR("isFixedFocus");
      v13[0] = v9;
      v13[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v3);
      objc_msgSend(v1, "setMetadata:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
      return 0;
    }
  }
  return v1;
}

uint64_t BWIsFocusRequestForFixedPlaneFocus(void *a1)
{
  void *v1;

  if (a1
    && (v1 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusIsFixedPlaneFocus"))) != 0)
  {
    return objc_msgSend(v1, "BOOLValue");
  }
  else
  {
    return 0;
  }
}

uint64_t BWIsFocusRequestForHardFocus(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("CinematicVideoFocusIsHardFocus")), "BOOLValue");
}

uint64_t fcs_handleStreamControlTakenByAnotherClientNotification(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (dword_1ECFE96F0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(a2, "streaming", v5, v6))
    -[BWFigCaptureStream _resetStreamingState]((uint64_t)a2);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_handleStreamControlRelinquishedByAnotherClientNotification()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECFE96F0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_handleFrameReceiveTimeout(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (objc_msgSend(a2, "streaming"))
    -[BWFigCaptureStream _resetStreamingState]((uint64_t)a2);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t fcs_reactionsInProgressChanged(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t result;
  const void *Value;
  uint64_t v9;

  result = objc_msgSend(a2, "reactionsInProgressChangedHandler");
  if (result)
  {
    Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D06FD0]);
    v9 = objc_msgSend(a2, "reactionsInProgressChangedHandler");
    return (*(uint64_t (**)(uint64_t, const void *))(v9 + 16))(v9, Value);
  }
  return result;
}

void sifn_mergeInferenceResults(const void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", CMGetAttachment(a1, CFSTR("Inferences"), 0));
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(a2);
        v9 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        if ((objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", v9), "isValid") & 1) == 0)
          objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", v9), v9);
      }
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }
  if (objc_msgSend(v4, "count"))
    CMSetAttachment(a1, CFSTR("Inferences"), v4, 1u);
}

void *BWPhotonicEngineCreateScalerProcessorControllerConfiguration(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  void *v16;
  double v17;
  void *v18;
  BWScalerProcessorControllerConfiguration *v20;
  void *v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (void *)-[BWPhotonicEngineNodeConfiguration dimensionsByQSubResolutionFlavorByPortType]((uint64_t)a1);
  v3 = (void *)BWDimensionsWithQSubResolutionFlavor(v2, 1);
  v4 = FigCaptureLargestDimensionsFromDimensionsArray(v3);
  if ((int)v4 <= (int)-[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1)
    && SHIDWORD(v4) <= (int)((unint64_t)-[BWPhotonicEngineNodeConfiguration rawSensorDimensions]((uint64_t)a1) >> 32))
  {
    return 0;
  }
  v20 = objc_alloc_init(BWScalerProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v20);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (-[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1) != 0.0)
  {
    v6 = (void *)MEMORY[0x1E0CB37E8];
    *(float *)&v7 = -[BWPhotonicEngineNodeConfiguration gainMapMainImageDownscalingFactor]((uint64_t)a1);
    objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(v6, "numberWithFloat:", v7), 0x1E4936818);
  }
  if (-[BWPhotonicEngineNodeConfiguration demosaicedRawEnabled]((_BOOL8)a1)
    || -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1))
  {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &unk_1E4A024A0, 0x1E495B0F8, v20);
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = (id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1);
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v24; ++i)
      {
        if (*(_QWORD *)v30 != v23)
          objc_enumerationMutation(obj);
        v9 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * i);
        v25 = 0u;
        v26 = 0u;
        v27 = 0u;
        v28 = 0u;
        v10 = (void *)objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration providedInferenceAttachedMediaByMode]((uint64_t)a1), "objectForKeyedSubscript:", v9);
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
        if (v11)
        {
          v12 = v11;
          v13 = *(_QWORD *)v26;
          do
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v26 != v13)
                objc_enumerationMutation(v10);
              v15 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * j);
              if (!objc_msgSend(v5, "objectForKeyedSubscript:", v15, v20))
              {
                v16 = (void *)MEMORY[0x1E0CB37E8];
                *(float *)&v17 = -[BWPhotonicEngineNodeConfiguration inferenceMainImageDownscalingFactor]((uint64_t)a1);
                objc_msgSend(v5, "setObject:forKeyedSubscript:", objc_msgSend(v16, "numberWithFloat:", v17), v15);
              }
            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
          }
          while (v12);
        }
      }
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v24);
  }
  if (!objc_msgSend(v5, "count", v20))
    return v21;
  v18 = v21;
  objc_msgSend(v21, "setMainImageDownscalingFactorByAttachedMediaKey:", (id)objc_msgSend(v5, "copy"));
  return v18;
}

BWJasperColorStillsExecutorControllerConfiguration *BWPhotonicEngineCreateJasperColorStillsExecutorControllerConfiguration(void *a1)
{
  void *v2;
  uint64_t v3;
  BWJasperColorStillsExecutorControllerConfiguration *v4;
  _BOOL8 v5;

  if (!-[BWPhotonicEngineNodeConfiguration depthDataDeliveryEnabled]((_BOOL8)a1)
    || !-[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1)
    || !-[BWPhotonicEngineNodeConfiguration digitalFlashSupportEnabled]((_BOOL8)a1))
  {
    return 0;
  }
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", -[BWPhotonicEngineNodeConfiguration sensorConfigurationsByPortType]((uint64_t)a1));
  v3 = -[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1);
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, objc_msgSend((id)-[BWPhotonicEngineNodeConfiguration jasperSensorConfiguration]((uint64_t)a1), "portType"));
  v4 = objc_alloc_init(BWJasperColorStillsExecutorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v4);
  -[BWStillImageProcessorControllerConfiguration setSensorConfigurationsByPortType:](v4, "setSensorConfigurationsByPortType:", v2);
  -[BWJasperColorStillsExecutorControllerConfiguration setHorizontalSensorBinningFactor:](v4, "setHorizontalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration horizontalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setVerticalSensorBinningFactor:](v4, "setVerticalSensorBinningFactor:", -[BWPhotonicEngineNodeConfiguration verticalSensorBinningFactor]((uint64_t)a1));
  -[BWJasperColorStillsExecutorControllerConfiguration setStandardFormatDimensions:](v4, "setStandardFormatDimensions:", -[BWPhotonicEngineNodeConfiguration standardFormatDimensions]((uint64_t)a1));
  if (-[BWJasperColorStillsExecutorControllerConfiguration postponedProcessorSetupSupported](v4, "postponedProcessorSetupSupported"))
  {
    v5 = (int)FigCapturePlatformIdentifier() > 10;
  }
  else
  {
    v5 = 0;
  }
  -[BWStillImageProcessorControllerConfiguration setPostponeProcessorSetup:](v4, "setPostponeProcessorSetup:", v5);
  return v4;
}

BWSmartStyleRenderingProcessorControllerConfiguration *BWPhotonicEngineCreateSmartStyleRenderingProcessorControllerConfiguration(void *a1)
{
  _BOOL8 v2;
  BWSmartStyleRenderingProcessorControllerConfiguration *v3;

  if ((int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) < 1
    || -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1) != 1751527984
    && -[BWPhotonicEngineNodeConfiguration demosaicedRawPixelFormat]((uint64_t)a1))
  {
    return 0;
  }
  if ((int)-[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1) < 1)
    v2 = 1;
  else
    v2 = !-[BWPhotonicEngineNodeConfiguration fusionSupportEnabled]((_BOOL8)a1)
      && !-[BWPhotonicEngineNodeConfiguration learnedNRMode]((uint64_t)a1)
      && !-[BWPhotonicEngineNodeConfiguration deepFusionSupportEnabled]((_BOOL8)a1);
  v3 = objc_alloc_init(BWSmartStyleRenderingProcessorControllerConfiguration);
  BWPhotonicEngineSetBaseProcessorControllerConfigurationProperties(a1, v3);
  -[BWSmartStyleRenderingProcessorControllerConfiguration setVersion:](v3, "setVersion:", -[BWPhotonicEngineNodeConfiguration smartStyleRenderingVersion]((uint64_t)a1));
  -[BWSmartStyleRenderingProcessorControllerConfiguration setReversibilityEnabled:](v3, "setReversibilityEnabled:", -[BWPhotonicEngineNodeConfiguration smartStyleReversibilityEnabled]((_BOOL8)a1));
  -[BWSmartStyleRenderingProcessorControllerConfiguration setLinearYUVPixelFormat:](v3, "setLinearYUVPixelFormat:", 1751527984);
  -[BWSmartStyleRenderingProcessorControllerConfiguration setInferencesNotAvailableForSmartStyleRendering:](v3, "setInferencesNotAvailableForSmartStyleRendering:", v2);
  return v3;
}

uint64_t FigCaptureBinaryPlistFindIndexForIntInObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t Noffset;
  unint64_t v13;
  uint64_t IntForObjectAtOffset;
  unint64_t v15;
  unsigned int *v17;

  v3 = (char *)(*(_QWORD *)a1 + a2);
  v4 = *v3;
  v17 = (unsigned int *)(v3 + 1);
  if ((v4 & 0xE0 | 0x10) != 0xD0)
    abort();
  v7 = v4 & 0xF;
  if ((v4 & 0xF) == 0xF)
  {
    v17 = (unsigned int *)(v3 + 2);
    v7 = bp_readNinc(&v17, v3[1]);
  }
  if (v7)
  {
    v8 = 0;
    v9 = v7 - 1;
    v10 = v17;
    while (1)
    {
      v11 = (v9 + v8) >> 1;
      Noffset = bp_readNoffset((uint64_t)v10, *(unsigned __int8 *)(a1 + 42), v11 * *(unsigned __int8 *)(a1 + 42));
      v13 = bp_readNoffset(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 41), Noffset * *(unsigned __int8 *)(a1 + 41));
      if ((*(_BYTE *)(*(_QWORD *)a1 + v13) & 0xF0) != 0x10)
        break;
      IntForObjectAtOffset = FigCaptureBinaryPlistGetIntForObjectAtOffset((_QWORD *)a1, v13);
      if (IntForObjectAtOffset == a3)
        return v11;
      if (v8 == v9)
        return -1;
      if (IntForObjectAtOffset < a3)
      {
LABEL_15:
        if (v11 + 1 < v9)
          v8 = v11 + 1;
        else
          v8 = v9;
      }
      else
      {
        if (v11 <= v8 + 1)
          v15 = v8 + 1;
        else
          v15 = (v9 + v8) >> 1;
        v9 = v15 - 1;
      }
    }
    if (v8 == v9)
      return -1;
    goto LABEL_15;
  }
  return -1;
}

uint64_t bp_plistObjCompare1(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return bp_plistObjCompare(a1, *a2, *a3);
}

uint64_t bp_plistObjCompare4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return bp_plistObjCompare(a1, bswap32(*a2), bswap32(*a3));
}

uint64_t bp_plistObjCompare8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  return bp_plistObjCompare(a1, bswap64(*a2), bswap64(*a3));
}

uint64_t CMIOExtensionFigCaptureStreamCreate(uint64_t a1, void *a2, void *a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  uint64_t DerivedStorage;
  id v10;
  int v11;
  CFTypeRef *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  const __CFAllocator *v22;
  const opaqueCMFormatDescription *v23;
  FourCharCode MediaSubType;
  unint64_t Dimensions;
  int32_t v28;
  unint64_t v29;
  const __CFDictionary *Extensions;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const opaqueCMFormatDescription *v35;
  const opaqueCMFormatDescription *v36;
  void *v37;
  void *v38;
  double v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const __CFDictionary *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const __CFString **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  const __CFDictionary *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CMVideoDimensions v57;
  _BOOL8 v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  uint64_t v71;
  void *v72;
  const opaqueCMFormatDescription *v73;
  const opaqueCMFormatDescription *v74;
  FourCharCode v75;
  FourCharCode v76;
  _BOOL4 v77;
  int v78;
  float v79;
  float v80;
  uint64_t j;
  void *v82;
  const opaqueCMFormatDescription *v83;
  int v84;
  int v85;
  CFPropertyListRef v86;
  FourCharCode v87;
  _BOOL4 v88;
  int v90;
  char v91;
  char v92;
  float v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  CFTypeRef v115;
  const void *v116;
  const void *v117;
  CFTypeRef v118;
  uint64_t v119;
  void *v120;
  CFTypeRef v121;
  void *v122;
  FigCaptureCMIOExtensionSessionStreamDelegate *v123;
  CFTypeRef v124;
  _QWORD *v125;
  _QWORD *v126;
  void *v127;
  void *v129;
  CFTypeRef *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const __CFString *v134;
  const __CFString *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const opaqueCMFormatDescription *v141;
  int v142;
  unsigned int v143;
  BOOL v144;
  _BOOL4 v145;
  FourCharCode v146;
  uint64_t v147;
  const __CFString *videoDesc;
  uint64_t v149;
  int v150;
  uint64_t v151;
  void *Extension;
  id v153;
  const __CFString *v154;
  uint64_t v155;
  const __CFString *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  char v160;
  CFTypeRef cf;
  const __CFString *v162;
  const __CFString *v163;
  const __CFString *v164;
  const __CFString *v165;
  const __CFString *v166;
  __CFString *v167;
  __CFString *v168;
  const __CFString *v169;
  const __CFString *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  const __CFString *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const __CFString *v186;
  const __CFString *v187;
  uint64_t v188;
  uint64_t v189;
  const __CFString *v190;
  const __CFString *v191;
  uint64_t v192;
  const __CFDictionary *v193;
  const __CFString *v194;
  const __CFString *v195;
  uint64_t v196;
  uint64_t v197;
  const __CFString *v198;
  const __CFString *v199;
  uint64_t v200;
  const __CFDictionary *v201;
  const __CFString *v202;
  const __CFString *v203;
  uint64_t v204;
  const __CFString *v205;
  const __CFString *v206;
  uint64_t v207;
  const __CFString *v208;
  const __CFString *v209;
  uint64_t v210;
  const __CFString *v211;
  const __CFString *v212;
  uint64_t v213;
  objc_super v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  _QWORD v219[2];
  _QWORD v220[2];
  _QWORD v221[2];
  _QWORD v222[2];
  _QWORD v223[2];
  _QWORD v224[2];
  _QWORD v225[2];
  _QWORD v226[2];
  _QWORD v227[2];
  _QWORD v228[2];
  _QWORD v229[2];
  _QWORD v230[2];
  _QWORD v231[2];
  _QWORD v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD v235[2];
  _QWORD v236[2];
  _QWORD v237[2];
  _QWORD v238[2];
  _QWORD v239[2];
  _QWORD v240[2];
  _QWORD v241[2];
  _QWORD v242[2];
  _QWORD v243[2];
  _QWORD v244[2];
  _QWORD v245[2];
  _QWORD v246[2];
  _QWORD v247[2];
  _QWORD v248[2];
  _QWORD v249[2];
  _QWORD v250[2];
  _QWORD v251[2];
  _QWORD v252[2];
  _QWORD v253[2];
  _QWORD v254[2];
  _QWORD v255[2];
  _QWORD v256[2];
  _QWORD v257[2];
  _QWORD v258[2];
  _QWORD v259[2];
  _QWORD v260[2];
  _QWORD v261[2];
  _QWORD v262[2];
  _QWORD v263[2];
  const __CFString *v264;
  const __CFString *v265;
  const __CFString *v266;
  const __CFString *v267;
  const __CFString *v268;
  const __CFString *v269;
  uint64_t v270;
  CGRect v271;
  CGRect v272;

  v270 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (initializeGlobalsOnce_initializeGlobalsOnceToken != -1)
    dispatch_once(&initializeGlobalsOnce_initializeGlobalsOnceToken, &__block_literal_global_61);
  if (!objc_opt_class())
  {
    v127 = 0;
    v7 = 4294954514;
    goto LABEL_138;
  }
  FigCaptureStreamGetClassID();
  v7 = CMDerivedObjectCreate();
  v8 = cf;
  if ((_DWORD)v7)
    goto LABEL_141;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 20) = 0;
  v10 = a3;
  *(_QWORD *)DerivedStorage = cf;
  *(_QWORD *)(DerivedStorage + 8) = v10;
  v160 = 0;
  v11 = FigCaptureExternalCameraReplacesBuiltIn(&v160);
  v129 = a3;
  v130 = a4;
  v12 = (CFTypeRef *)MEMORY[0x1E0D05A38];
  if (v11 && !v160)
    v12 = (CFTypeRef *)MEMORY[0x1E0D05A18];
  *(_QWORD *)(DerivedStorage + 24) = CFRetain(*v12);
  *(_QWORD *)(DerivedStorage + 32) = (id)objc_msgSend(a2, "manufacturer");
  *(_QWORD *)(DerivedStorage + 40) = (id)objc_msgSend(a2, "modelID");
  *(_QWORD *)(DerivedStorage + 48) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "deviceID"), "UUIDString"), "copy");
  *(_QWORD *)(DerivedStorage + 56) = (id)objc_msgSend(a2, "localizedName");
  v13 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v218 = 0u;
  v14 = (void *)objc_msgSend(*(id *)(DerivedStorage + 8), "formats");
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v215, &v214, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v216;
    do
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v216 != v17)
          objc_enumerationMutation(v14);
        objc_msgSend(v13, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v215 + 1) + 8 * i), "formatDescription"));
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v215, &v214, 16);
    }
    while (v16);
  }
  v147 = DerivedStorage;
  v19 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 8), "formats"), "count") + 1);
  v20 = 0x1E0C99000uLL;
  v137 = v19;
  if (objc_msgSend(v13, "count"))
  {
    v21 = 0;
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v23 = (const opaqueCMFormatDescription *)objc_msgSend(v13, "objectAtIndexedSubscript:", v21);
      MediaSubType = CMFormatDescriptionGetMediaSubType(v23);
      if (MediaSubType == 875704422 || MediaSubType == 1111970369 || MediaSubType == 875704438)
      {
        objc_msgSend(v19, "addObject:", v23);
      }
      else
      {
        Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(v23);
        v28 = Dimensions;
        v29 = HIDWORD(Dimensions);
        formatDescriptionOut = 0;
        Extensions = CMFormatDescriptionGetExtensions(v23);
        if (CMVideoFormatDescriptionCreate(v22, 0x34323076u, v28, v29, Extensions, &formatDescriptionOut))
        {
          v31 = 0;
          v32 = v147;
          goto LABEL_106;
        }
        v19 = v137;
        objc_msgSend(v137, "addObject:", formatDescriptionOut);
        CFRelease(formatDescriptionOut);
      }
      ++v21;
    }
    while (v21 < objc_msgSend(v13, "count"));
  }
  v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v19, "count"));
  v32 = v147;
  v158 = v31;
  if (objc_msgSend(v19, "count"))
  {
    v33 = 0;
    v156 = (const __CFString *)*MEMORY[0x1E0D08068];
    v154 = (const __CFString *)*MEMORY[0x1E0D08050];
    v151 = *MEMORY[0x1E0D08040];
    v149 = *MEMORY[0x1E0D08018];
    v135 = (const __CFString *)*MEMORY[0x1E0D07FE0];
    v136 = *MEMORY[0x1E0CA5510];
    v134 = (const __CFString *)*MEMORY[0x1E0D07FF8];
    v34 = 0x1E0C99000uLL;
    v133 = *MEMORY[0x1E0D07ED0];
    v131 = *MEMORY[0x1E0D07EE8];
    v132 = *MEMORY[0x1E0D07EC8];
    do
    {
      v35 = (const opaqueCMFormatDescription *)objc_msgSend(v13, "objectAtIndexedSubscript:", v33);
      v36 = (const opaqueCMFormatDescription *)objc_msgSend(v19, "objectAtIndexedSubscript:", v33);
      v37 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v32 + 8), "formats"), "objectAtIndexedSubscript:", v33);
      if (v35 && v36)
      {
        v38 = v37;
        if (v37)
        {
          objc_msgSend(v37, "minFrameDuration");
          v39 = (double)(int)v212;
          objc_msgSend(v38, "minFrameDuration");
          v40 = v39 / (double)(uint64_t)v208;
          objc_msgSend(v38, "maxFrameDuration");
          v142 = (int)v206;
          objc_msgSend(v38, "maxFrameDuration");
          v140 = (uint64_t)v202;
        }
        else
        {
          v140 = 0;
          v142 = 0;
          v40 = NAN;
          v212 = 0;
          v213 = 0;
          v210 = 0;
          v211 = 0;
          v208 = 0;
          v209 = 0;
          v206 = 0;
          v207 = 0;
          v204 = 0;
          v205 = 0;
          v202 = 0;
          v203 = 0;
        }
        v41 = (unint64_t)CMVideoFormatDescriptionGetDimensions(v36);
        v42 = CMFormatDescriptionGetMediaSubType(v36);
        v263[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v42);
        v43 = objc_msgSend(*(id *)(v34 + 3360), "arrayWithObjects:count:", v263, 1);
        v271.size.width = (double)(int)v41;
        v271.size.height = (double)SHIDWORD(v41);
        v271.origin.x = 0.0;
        v271.origin.y = 0.0;
        v44 = CGRectCreateDictionaryRepresentation(v271);
        v198 = (const __CFString *)v43;
        v194 = v156;
        v195 = v154;
        v199 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v41);
        v196 = v151;
        v45 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v41));
        v197 = v149;
        v200 = v45;
        v201 = v44;
        v139 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v198, &v194, 4);
        LODWORD(v43) = CMFormatDescriptionGetMediaSubType(v36);
        v46 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v42);
        if ((_DWORD)v43 == 875704438)
        {
          v268 = (const __CFString *)v46;
          v269 = (const __CFString *)&unk_1E49F9F18;
          v47 = (void *)MEMORY[0x1E0C99D20];
          v48 = &v268;
          v49 = 2;
        }
        else
        {
          v262[0] = v46;
          v47 = (void *)MEMORY[0x1E0C99D20];
          v48 = (const __CFString **)v262;
          v49 = 1;
        }
        v50 = objc_msgSend(v47, "arrayWithObjects:count:", v48, v49);
        v143 = ((double)v142 / (double)v140);
        v141 = v36;
        v51 = (unint64_t)CMVideoFormatDescriptionGetDimensions(v36);
        v52 = objc_msgSend((id)objc_msgSend(*(id *)(v147 + 8), "availableProperties"), "containsObject:", v136);
        if ((_DWORD)v52)
        {
          v51 = FigCaptureFitAspectInsideDimensions(0xBD000001080, 0x200000002, (float)(int)v41 / (float)SHIDWORD(v41));
          v138 = 0xBD000001080;
        }
        else
        {
          v138 = 0;
        }
        v272.size.width = (double)(int)v51;
        v272.size.height = (double)SHIDWORD(v51);
        v272.origin.x = 0.0;
        v272.origin.y = 0.0;
        v53 = CGRectCreateDictionaryRepresentation(v272);
        v190 = (const __CFString *)v50;
        v186 = v156;
        v187 = v154;
        v191 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v51);
        v188 = v151;
        v54 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v51));
        v189 = v149;
        v192 = v54;
        v193 = v53;
        v55 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v190, &v186, 4);
        v264 = v135;
        v266 = (const __CFString *)v139;
        v265 = v134;
        v267 = (const __CFString *)v55;
        v56 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v266, &v264, 2);
        v57 = CMVideoFormatDescriptionGetDimensions(v35);
        v59 = v57.width < (int)v41 || v57.height < SHIDWORD(v41);
        v162 = CFSTR("FormatDescription");
        v163 = CFSTR("NativeFormatDescription");
        formatDescriptionOut = v141;
        v175 = (const __CFString *)v35;
        v164 = CFSTR("NativeFormatRequiresUpscaling");
        v176 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v59);
        v165 = CFSTR("NativeFormatIndex");
        v177 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
        v166 = CFSTR("AsyncStillCaptureProvidedByStream");
        v178 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v52);
        v167 = CFSTR("CMIOHighResStillImageDimensionsWidth");
        v179 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v138);
        v168 = CFSTR("CMIOHighResStillImageDimensionsHeight");
        v180 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v138));
        v169 = CFSTR("VideoMinFrameRate");
        v181 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v143);
        v170 = CFSTR("VideoMaxFrameRate");
        v182 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v40);
        v171 = v133;
        v183 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v41);
        v172 = v132;
        v60 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v41));
        v173 = v131;
        v184 = v60;
        v185 = v56;
        v31 = v158;
        objc_msgSend(v158, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &formatDescriptionOut, &v162, 12));
        v32 = v147;
        v19 = v137;
        v34 = 0x1E0C99000;
      }
      ++v33;
    }
    while (objc_msgSend(v19, "count") > v33);
  }
  v61 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  if (objc_msgSend(v31, "count"))
  {
    v62 = 0;
    v63 = *MEMORY[0x1E0D07ED0];
    v64 = *MEMORY[0x1E0D07EC8];
    do
    {
      v65 = (void *)objc_msgSend(v31, "objectAtIndexedSubscript:", v62);
      v66 = (void *)objc_msgSend(v65, "objectForKeyedSubscript:", v63);
      v67 = (void *)objc_msgSend(v65, "objectForKeyedSubscript:", v64);
      if ((objc_msgSend(v66, "integerValue") & 1) != 0 || (objc_msgSend(v67, "integerValue") & 1) != 0)
        objc_msgSend(v61, "addIndex:", v62);
      ++v62;
    }
    while (objc_msgSend(v31, "count") > v62);
  }
  objc_msgSend(v31, "removeObjectsAtIndexes:", v61);

  v68 = objc_msgSend(v31, "count");
  if (v68 >= 2)
  {
    v69 = v68;
    v70 = objc_alloc_init(MEMORY[0x1E0CB3788]);
    v71 = 0;
    v157 = *MEMORY[0x1E0D07ED0];
    v155 = *MEMORY[0x1E0D07EC8];
    videoDesc = (const __CFString *)*MEMORY[0x1E0CA21C8];
    do
    {
      if ((objc_msgSend(v70, "containsIndex:", v71) & 1) == 0)
      {
        v72 = (void *)objc_msgSend(v158, "objectAtIndexedSubscript:", v71);
        v73 = (const opaqueCMFormatDescription *)objc_msgSend(v72, "objectForKeyedSubscript:", CFSTR("NativeFormatDescription"));
        v74 = (const opaqueCMFormatDescription *)objc_msgSend(v72, "objectForKeyedSubscript:", CFSTR("FormatDescription"));
        v75 = CMFormatDescriptionGetMediaSubType(v73);
        v76 = CMFormatDescriptionGetMediaSubType(v74);
        v146 = v75;
        v77 = FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType(v75);
        v144 = v77;
        v145 = v77;
        v78 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", v157), "intValue");
        v150 = objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", v155), "intValue");
        Extension = (void *)CMFormatDescriptionGetExtension(v73, videoDesc);
        objc_msgSend((id)objc_msgSend(v72, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "floatValue");
        v80 = v79;
        for (j = 0; j != v69; ++j)
        {
          if (v71 != j && (objc_msgSend(v70, "containsIndex:", j) & 1) == 0)
          {
            v82 = (void *)objc_msgSend(v158, "objectAtIndexedSubscript:", j);
            v83 = (const opaqueCMFormatDescription *)objc_msgSend(v82, "objectForKeyedSubscript:", CFSTR("FormatDescription"));
            if (v76 == CMFormatDescriptionGetMediaSubType(v83))
            {
              v84 = objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", v157), "intValue");
              v85 = objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", v155), "intValue");
              if (v78 == v84 && v150 == v85)
              {
                v86 = CMFormatDescriptionGetExtension(v83, videoDesc);
                if (Extension == v86 || objc_msgSend(Extension, "isEqualToString:", v86))
                {
                  v87 = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)objc_msgSend(v82, "objectForKeyedSubscript:", CFSTR("NativeFormatDescription")));
                  v88 = FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType(v87);
                  v90 = !v145 || v87 == v76;
                  if (v146 == v76 || !v90 || (v87 == v76 ? (v91 = 1) : (v91 = v144), (v92 = 1, (v91 & 1) == 0) && !v88))
                    v92 = 0;
                  objc_msgSend((id)objc_msgSend(v82, "objectForKeyedSubscript:", CFSTR("VideoMaxFrameRate")), "floatValue");
                  if (v93 > v80)
                    v94 = 1;
                  else
                    v94 = v92;
                  if (v93 < v80 || (v94 & 1) == 0)
                    objc_msgSend(v70, "addIndex:", j);
                }
              }
            }
          }
        }
      }
      ++v71;
    }
    while (v71 != v69);
    v31 = v158;
    objc_msgSend(v158, "removeObjectsAtIndexes:", v70);

    v32 = v147;
  }
  v95 = objc_msgSend(v31, "sortedArrayUsingComparator:", &__block_literal_global_133);
  v20 = 0x1E0C99000;
  if (v95)
  {
    v96 = v95;

    v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", v96);
  }
  *(_DWORD *)(v32 + 204) = -1;
  v97 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v32 + 8), "formats"), "objectAtIndexedSubscript:", objc_msgSend(*(id *)(v32 + 8), "activeFormatIndex")), "formatDescription");
  v98 = objc_msgSend(v31, "count");
  if (v98)
  {
    v99 = 0;
    while (!CFEqual((CFTypeRef)objc_msgSend((id)objc_msgSend(v31, "objectAtIndexedSubscript:", v99), "objectForKeyedSubscript:", CFSTR("FormatDescription")), v97))
    {
      if (v98 == ++v99)
        goto LABEL_96;
    }
    *(_DWORD *)(v32 + 204) = v99;
    goto LABEL_99;
  }
LABEL_96:
  LODWORD(v99) = *(_DWORD *)(v32 + 204);
  if (v98)
  {
LABEL_99:
    if ((_DWORD)v99 == -1)
    {
      v100 = 0;
      while (!CFEqual((CFTypeRef)objc_msgSend((id)objc_msgSend(v31, "objectAtIndexedSubscript:", v100), "objectForKeyedSubscript:", CFSTR("NativeFormatDescription")), v97))
      {
        if (v98 == ++v100)
          goto LABEL_106;
      }
      *(_DWORD *)(v32 + 204) = v100;
    }
  }
LABEL_106:
  *(_QWORD *)(v32 + 64) = v31;
  v101 = objc_msgSend(v31, "count");
  v8 = cf;
  if (v101)
  {
    *(_BYTE *)(v32 + 88) = 0;
    v153 = cmioefcs_copyVideoOutputConfigurations();
    *(_QWORD *)(v32 + 96) = objc_msgSend(v153, "mutableCopy");
    v159 = CMBaseObjectGetDerivedStorage();
    v102 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    formatDescriptionOut = (CMVideoFormatDescriptionRef)CFSTR("PropertyType");
    v175 = CFSTR("ReadWriteStatus");
    v214.receiver = CFSTR("String");
    v214.super_class = (Class)CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v214, &formatDescriptionOut, 2), CFSTR("Manufacturer"));
    *(_QWORD *)&v215 = CFSTR("PropertyType");
    *((_QWORD *)&v215 + 1) = CFSTR("ReadWriteStatus");
    v162 = CFSTR("String");
    v163 = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v162, &v215, 2), CFSTR("ModelID"));
    v194 = CFSTR("PropertyType");
    v195 = CFSTR("ReadWriteStatus");
    v198 = CFSTR("String");
    v199 = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v198, &v194, 2), CFSTR("LocalizedName"));
    v186 = CFSTR("PropertyType");
    v187 = CFSTR("ReadWriteStatus");
    v190 = CFSTR("String");
    v191 = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v190, &v186, 2), CFSTR("UniqueID"));
    v208 = CFSTR("PropertyType");
    v209 = CFSTR("ReadWriteStatus");
    v211 = CFSTR("String");
    v212 = CFSTR("ReadOnly");
    v103 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v211, &v208, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v103, *MEMORY[0x1E0D07710]);
    v202 = CFSTR("PropertyType");
    v203 = CFSTR("ReadWriteStatus");
    v205 = CFSTR("Collection");
    v206 = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v205, &v202, 2), CFSTR("SupportedFormatsArray"));
    v266 = CFSTR("PropertyType");
    v268 = CFSTR("Number");
    v267 = CFSTR("ReadWriteStatus");
    v269 = CFSTR("ReadWrite");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v268, &v266, 2), CFSTR("FormatIndex"));
    v263[0] = CFSTR("PropertyType");
    v264 = CFSTR("Number");
    v263[1] = CFSTR("ReadWriteStatus");
    v265 = CFSTR("ReadWrite");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", &v264, v263, 2), CFSTR("MinimumFrameRate"));
    v261[0] = CFSTR("PropertyType");
    v262[0] = CFSTR("Number");
    v261[1] = CFSTR("ReadWriteStatus");
    v262[1] = CFSTR("ReadWrite");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v262, v261, 2), CFSTR("MaximumFrameRate"));
    v259[0] = CFSTR("PropertyType");
    v260[0] = CFSTR("Collection");
    v259[1] = CFSTR("ReadWriteStatus");
    v260[1] = CFSTR("ReadWrite");
    v104 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v260, v259, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v104, *MEMORY[0x1E0D07888]);
    v257[0] = CFSTR("PropertyType");
    v258[0] = CFSTR("Collection");
    v257[1] = CFSTR("ReadWriteStatus");
    v258[1] = CFSTR("WriteOnly");
    v105 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v258, v257, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v105, *MEMORY[0x1E0D07898]);
    v255[0] = CFSTR("PropertyType");
    v256[0] = CFSTR("Collection");
    v255[1] = CFSTR("ReadWriteStatus");
    v256[1] = CFSTR("ReadWrite");
    v106 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v256, v255, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v106, *MEMORY[0x1E0D078A8]);
    v253[0] = CFSTR("PropertyType");
    v254[0] = CFSTR("Number");
    v253[1] = CFSTR("ReadWriteStatus");
    v254[1] = CFSTR("ReadOnly");
    v107 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v254, v253, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v107, *MEMORY[0x1E0D07708]);
    v251[0] = CFSTR("PropertyType");
    v252[0] = CFSTR("Boolean");
    v251[1] = CFSTR("ReadWriteStatus");
    v252[1] = CFSTR("ReadWrite");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v252, v251, 2), CFSTR("DeferAdditionOfAttachments"));
    v249[0] = CFSTR("PropertyType");
    v250[0] = CFSTR("Collection");
    v249[1] = CFSTR("ReadWriteStatus");
    v250[1] = CFSTR("WriteOnly");
    v108 = objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v250, v249, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v108, *MEMORY[0x1E0D076E8]);
    v247[0] = CFSTR("PropertyType");
    v248[0] = CFSTR("Collection");
    v247[1] = CFSTR("ReadWriteStatus");
    v248[1] = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v248, v247, 2), CFSTR("ObjectsDetectionSupportedConfigurationKeys"));
    if (objc_msgSend((id)objc_msgSend(*(id *)(v159 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()))
    {
      v245[0] = CFSTR("PropertyType");
      v246[0] = CFSTR("Boolean");
      v245[1] = CFSTR("ReadWriteStatus");
      v246[1] = CFSTR("ReadWrite");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v246, v245, 2), CFSTR("CMIOCinematicFramingEnabled"));
      v109 = (void *)objc_msgSend(*(id *)(v159 + 8), "availableProperties");
      if (objc_msgSend(v109, "containsObject:", *MEMORY[0x1E0CA5518]))
      {
        v243[0] = CFSTR("PropertyType");
        v244[0] = CFSTR("Collection");
        v243[1] = CFSTR("ReadWriteStatus");
        v244[1] = CFSTR("ReadWrite");
        objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(v20 + 3456), "dictionaryWithObjects:forKeys:count:", v244, v243, 2), CFSTR("CMIOCenterStageRectOfInterest"));
      }
    }
    if ((int)FigCapturePlatformIdentifier() >= 5)
    {
      v241[0] = CFSTR("PropertyType");
      v242[0] = CFSTR("Boolean");
      v241[1] = CFSTR("ReadWriteStatus");
      v242[1] = CFSTR("ReadOnly");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v242, v241, 2), CFSTR("BackgroundBlurSupported"));
    }
    if ((int)FigCapturePlatformIdentifier() >= 7)
    {
      v239[0] = CFSTR("PropertyType");
      v240[0] = CFSTR("Boolean");
      v239[1] = CFSTR("ReadWriteStatus");
      v240[1] = CFSTR("ReadOnly");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v240, v239, 2), CFSTR("StudioLightingSupported"));
      v237[0] = CFSTR("PropertyType");
      v238[0] = CFSTR("Boolean");
      v237[1] = CFSTR("ReadWriteStatus");
      v238[1] = CFSTR("ReadOnly");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v238, v237, 2), CFSTR("ReactionEffectsSupported"));
      v235[0] = CFSTR("PropertyType");
      v236[0] = CFSTR("Boolean");
      v235[1] = CFSTR("ReadWriteStatus");
      v236[1] = CFSTR("ReadOnly");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v236, v235, 2), CFSTR("BackgroundReplacementSupported"));
    }
    v233[0] = CFSTR("PropertyType");
    v234[0] = CFSTR("Boolean");
    v233[1] = CFSTR("ReadWriteStatus");
    v234[1] = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v234, v233, 2), CFSTR("CompressedStillImageCaptureSupported"));
    v231[0] = CFSTR("PropertyType");
    v232[0] = CFSTR("Boolean");
    v231[1] = CFSTR("ReadWriteStatus");
    v232[1] = CFSTR("ReadOnly");
    objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v232, v231, 2), CFSTR("CMIOFlashSupported"));
    v110 = (void *)objc_msgSend(*(id *)(v159 + 8), "availableProperties");
    if (objc_msgSend(v110, "containsObject:", *MEMORY[0x1E0CA5510]))
    {
      v229[0] = CFSTR("PropertyType");
      v230[0] = CFSTR("Number");
      v229[1] = CFSTR("ReadWriteStatus");
      v230[1] = CFSTR("ReadWrite");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v230, v229, 2), CFSTR("CMIOStillImageMaxQualityPrioritization"));
      v227[0] = CFSTR("PropertyType");
      v228[0] = CFSTR("Collection");
      v227[1] = CFSTR("ReadWriteStatus");
      v228[1] = CFSTR("WriteOnly");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v228, v227, 2), CFSTR("StillImageCaptureNow"));
    }
    v111 = (void *)objc_msgSend(*(id *)(v159 + 8), "availableProperties");
    if (objc_msgSend(v111, "containsObject:", *MEMORY[0x1E0CA5540]))
    {
      v225[0] = CFSTR("PropertyType");
      v226[0] = CFSTR("Number");
      v225[1] = CFSTR("ReadWriteStatus");
      v226[1] = CFSTR("ReadWrite");
      objc_msgSend(v102, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v226, v225, 2), CFSTR("CMIOVideoZoomFactor"));
    }
    v223[0] = CFSTR("PropertyType");
    v224[0] = CFSTR("Number");
    v223[1] = CFSTR("ReadWriteStatus");
    v224[1] = CFSTR("ReadWrite");
    v112 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v224, v223, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v112, *MEMORY[0x1E0D078A0]);
    v221[0] = CFSTR("PropertyType");
    v222[0] = CFSTR("Number");
    v221[1] = CFSTR("ReadWriteStatus");
    v222[1] = CFSTR("WriteOnly");
    v113 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v222, v221, 2);
    objc_msgSend(v102, "setObject:forKeyedSubscript:", v113, *MEMORY[0x1E0D07320]);
    v114 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(v159 + 8), "cachedPropertyStateForProperty:", *MEMORY[0x1E0CA5520]), "value"), "BOOLValue");
    v115 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    v116 = (const void *)*MEMORY[0x1E0C9AE40];
    if (v114)
      v117 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v117 = (const void *)*MEMORY[0x1E0C9AE40];
    v118 = CFRetain(v117);
    if (v118 == v115)
    {
      v219[0] = CFSTR("PropertyType");
      v220[0] = CFSTR("String");
      v219[1] = CFSTR("ReadWriteStatus");
      v220[1] = CFSTR("ReadWrite");
      v119 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v220, v219, 2);
      objc_msgSend(v102, "setObject:forKeyedSubscript:", v119, *MEMORY[0x1E0D074F8]);
    }
    if (v118)
      CFRelease(v118);
    *(_QWORD *)(v147 + 72) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v102);
    if (*(_DWORD *)(v147 + 204) == -1)
      cmioefcs_setFormatIndex(v147, &unk_1E49F9EE8);
    *(_QWORD *)(v147 + 248) = objc_alloc_init(FigObjectDetectionMetadataGenerator);
    v120 = (void *)objc_msgSend(*(id *)(v147 + 8), "cachedPropertyStateForProperty:", CMIOExtensionPropertyFromPropertyAddress());
    objc_msgSend(v120, "value");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend((id)objc_msgSend(v120, "value"), "BOOLValue"))
      v116 = v115;
    v121 = CFRetain(v116);
    *(_BYTE *)(v147 + 216) = v121 == v115;
    if (v121)
      CFRelease(v121);
    *(_DWORD *)(v147 + 232) = 2;
    v122 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObjects:", *MEMORY[0x1E0D07068], *MEMORY[0x1E0D07060], 0);
    if (objc_msgSend((id)objc_msgSend(*(id *)(v147 + 8), "availableProperties"), "containsObject:", CFSTR("HumanFullBodyDetectionEnabled")))objc_msgSend(v122, "addObject:", *MEMORY[0x1E0D07070]);
    *(_QWORD *)(v147 + 80) = objc_msgSend(v122, "copy");
    v123 = [FigCaptureCMIOExtensionSessionStreamDelegate alloc];
    if (v123)
    {
      v124 = cf;
      v214.receiver = v123;
      v214.super_class = (Class)FigCaptureCMIOExtensionSessionStreamDelegate;
      v125 = objc_msgSendSuper2(&v214, sel_init);
      v126 = v125;
      if (v125)
        v125[1] = v124;
    }
    else
    {
      v126 = 0;
    }
    v127 = v153;
    *(_QWORD *)(v147 + 256) = v126;
    objc_msgSend(v129, "setDelegate:");
    v7 = 0;
    *v130 = cf;
    cf = 0;
    goto LABEL_138;
  }
  v7 = 4294954510;
LABEL_141:
  if (v8)
    CFRelease(v8);
  v127 = 0;
LABEL_138:

  return v7;
}

id cmioefcs_copyVideoOutputConfigurations()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  os_unfair_lock_s *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return 0;
  v1 = DerivedStorage;
  v2 = (os_unfair_lock_s *)(DerivedStorage + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
  v3 = (id)objc_msgSend(*(id *)(v1 + 96), "copy");
  os_unfair_lock_unlock(v2);
  if (!v3)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = *MEMORY[0x1E0D07FC8];
    v9[0] = *MEMORY[0x1E0D07FE0];
    v9[1] = v7;
    v10[0] = v4;
    v10[1] = v5;
    v9[2] = *MEMORY[0x1E0D07FF8];
    v10[2] = v6;
    v3 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 3);

  }
  return v3;
}

uint64_t cmioefcs_setFormatIndex(uint64_t a1, void *a2)
{
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  id v6;
  NSObject *v7;
  dispatch_time_t v8;
  uint64_t v9;
  _QWORD v11[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v3 = objc_msgSend(a2, "intValue");
  v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 64), "objectAtIndexedSubscript:", v3), "objectForKeyedSubscript:", CFSTR("NativeFormatIndex")), "intValue");
  if (dword_1EE6BEA58)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  *(_DWORD *)(a1 + 204) = v3;
  v6 = *(id *)(a1 + 8);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
  v7 = dispatch_semaphore_create(0);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __cmioefcs_setFormatIndex_block_invoke;
  v11[3] = &unk_1E4922BE8;
  v11[5] = &v14;
  v11[6] = a1;
  v11[4] = v7;
  objc_msgSend(v6, "setActiveFormatIndex:reply:", v4, v11);
  v8 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v7, v8);
  dispatch_release(v7);

  v9 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v9;
}

void sub_1A2F840F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __initializeGlobalsOnce_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t CMIOExtensionFigCaptureStreamInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    v1 = DerivedStorage;
    CMIOExtensionFigCaptureStreamStop();
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    *(_BYTE *)(v1 + 16) = 1;
    *(_QWORD *)v1 = 0;

    *(_QWORD *)(v1 + 8) = 0;
    v2 = *(const void **)(v1 + 24);
    if (v2)
      CFRelease(v2);
    *(_QWORD *)(v1 + 24) = 0;
    v3 = *(const void **)(v1 + 32);
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(v1 + 32) = 0;
    v4 = *(const void **)(v1 + 40);
    if (v4)
      CFRelease(v4);
    *(_QWORD *)(v1 + 40) = 0;
    v5 = *(const void **)(v1 + 48);
    if (v5)
      CFRelease(v5);
    *(_QWORD *)(v1 + 48) = 0;
    v6 = *(const void **)(v1 + 56);
    if (v6)
      CFRelease(v6);
    *(_QWORD *)(v1 + 56) = 0;

    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;

    *(_QWORD *)(v1 + 96) = 0;
    *(_QWORD *)(v1 + 256) = 0;

    *(_QWORD *)(v1 + 112) = 0;
    *(_QWORD *)(v1 + 120) = 0;

    *(_QWORD *)(v1 + 144) = 0;
    *(_QWORD *)(v1 + 152) = 0;

    *(_QWORD *)(v1 + 176) = 0;
    *(_QWORD *)(v1 + 184) = 0;

    *(_QWORD *)(v1 + 248) = 0;
    *(_QWORD *)(v1 + 80) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  }
  return 0;
}

uint64_t CMIOExtensionFigCaptureStreamCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  id v3;
  const char *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (*(_BYTE *)(DerivedStorage + 88))
    v4 = "[SUSPENDED]";
  else
    v4 = "";
  return objc_msgSend(v3, "initWithFormat:", CFSTR("<CMIOExtensionFigCaptureStream:%p [%@]%s>"), a1, *(_QWORD *)(DerivedStorage + 56), v4);
}

uint64_t CMIOExtensionFigCaptureStreamCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  double v14;
  void *v15;
  os_unfair_lock_s *v16;
  CFTypeRef *v17;
  int v18;
  const __CFString *v19;
  uint64_t v20;
  const void **v21;
  void *v22;
  void *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMIOExtensionFigCaptureStreamCopyProperty_sOnceToken != -1)
    dispatch_once(&CMIOExtensionFigCaptureStreamCopyProperty_sOnceToken, &__block_literal_global_91);
  if (objc_msgSend((id)CMIOExtensionFigCaptureStreamCopyProperty_noOpProperties, "containsObject:", a2))
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 72);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 24);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 32);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 40);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 48);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 56);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 64);
    if (v8)
    {
LABEL_25:
      v9 = (void *)CFRetain(v8);
LABEL_26:
      v10 = v9;
LABEL_37:
      result = 0;
      *a4 = v10;
      return result;
    }
LABEL_36:
    v10 = 0;
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    v11 = cmioefcs_copyVideoOutputConfigurations();
    *a4 = v11;
    if (v11)
      return 0;
    else
      return 4294954511;
  }
  if (FigCFEqual())
  {
    v9 = cmioefcs_copyVideoOutputsEnabled();
    goto LABEL_26;
  }
  if (FigCFEqual())
  {
    v12 = (void *)MEMORY[0x1E0CB37E8];
    v13 = *(unsigned int *)(DerivedStorage + 204);
    goto LABEL_35;
  }
  if (FigCFEqual())
  {
    v8 = &unk_1E49F9F00;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v15 = (void *)MEMORY[0x1E0CB37E8];
    LODWORD(v14) = *(_DWORD *)(DerivedStorage + 212);
    goto LABEL_44;
  }
  if (FigCFEqual())
  {
    v15 = (void *)MEMORY[0x1E0CB37E8];
    LODWORD(v14) = *(_DWORD *)(DerivedStorage + 208);
LABEL_44:
    v8 = (void *)objc_msgSend(v15, "numberWithFloat:", v14);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v16 = (os_unfair_lock_s *)(DerivedStorage + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v18 = *(unsigned __int8 *)(DerivedStorage + 200);
LABEL_50:
    if (!v18)
      v17 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    *a4 = CFRetain(*v17);
    os_unfair_lock_unlock(v16);
    return 0;
  }
  if (FigCFEqual())
  {
    v16 = (os_unfair_lock_s *)(DerivedStorage + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
    v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v18 = *(unsigned __int8 *)(DerivedStorage + 216);
    goto LABEL_50;
  }
  v19 = CFSTR("BackgroundBlurSupported");
  if (FigCFEqual()
    || (v19 = CFSTR("StudioLightingSupported"), FigCFEqual())
    || (v19 = CFSTR("ReactionEffectsSupported"), FigCFEqual())
    || (v19 = CFSTR("BackgroundReplacementSupported"), FigCFEqual()))
  {
    v20 = objc_msgSend(*(id *)(DerivedStorage + 72), "objectForKeyedSubscript:", v19);
    v21 = (const void **)MEMORY[0x1E0C9AE50];
    if (!v20)
      v21 = (const void **)MEMORY[0x1E0C9AE40];
    v8 = (void *)*v21;
    if (!*v21)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    cmioefcs_copyFlashSupportedProperty(DerivedStorage, a4);
    return 0;
  }
  if (FigCFEqual())
  {
    v22 = (void *)MEMORY[0x1E0CB37E8];
    v23 = (void *)objc_msgSend(*(id *)(DerivedStorage + 8), "availableProperties");
    v8 = (void *)objc_msgSend(v22, "numberWithBool:", objc_msgSend(v23, "containsObject:", *MEMORY[0x1E0CA5510]));
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v12 = (void *)MEMORY[0x1E0CB37E8];
    v13 = *(unsigned int *)(DerivedStorage + 232);
LABEL_35:
    v8 = (void *)objc_msgSend(v12, "numberWithInt:", v13);
    if (v8)
      goto LABEL_25;
    goto LABEL_36;
  }
  if (FigCFEqual())
  {
    v8 = *(void **)(DerivedStorage + 80);
    if (!v8)
      goto LABEL_36;
    goto LABEL_25;
  }
  return 4294954509;
}

uint64_t CMIOExtensionFigCaptureStreamSetProperty(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  void *v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  int v13;
  CFDictionaryRef DictionaryRepresentation;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  os_unfair_lock_s *v19;
  uint64_t result;
  void *v21;
  _QWORD *v22;
  CFTypeRef *v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  dispatch_time_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  os_unfair_lock_t lock;
  uint64_t v61;
  uint64_t v62;
  id obj;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[16];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  CGRect v81;

  v80 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CMIOExtensionFigCaptureStreamSetProperty_sOnceToken != -1)
    dispatch_once(&CMIOExtensionFigCaptureStreamSetProperty_sOnceToken, &__block_literal_global_94_0);
  if ((objc_msgSend((id)CMIOExtensionFigCaptureStreamSetProperty_noOpProperties, "containsObject:", a2) & 1) != 0)
    return 0;
  if (FigCFEqual())
  {
    if (DerivedStorage && a3)
    {
      lock = (os_unfair_lock_t)(DerivedStorage + 20);
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      v6 = *(void **)(DerivedStorage + 96);
      v7 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", *MEMORY[0x1E0D07FE0], *MEMORY[0x1E0D07FF0], *MEMORY[0x1E0D07FC8], *MEMORY[0x1E0D07FF8], 0);
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      obj = v7;
      v66 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v76, v75, 16);
      if (v66)
      {
        v65 = *(_QWORD *)v77;
        v64 = *MEMORY[0x1E0D07F20];
        v62 = *MEMORY[0x1E0D07F90];
        v61 = *MEMORY[0x1E0D07F40];
        do
        {
          for (i = 0; i != v66; ++i)
          {
            if (*(_QWORD *)v77 != v65)
              objc_enumerationMutation(obj);
            v9 = *(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * i);
            if (objc_msgSend(a3, "objectForKeyedSubscript:", v9))
            {
              v10 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", v9);
              if (objc_msgSend(v10, "objectForKeyedSubscript:", v64))
              {
                v11 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v62), "intValue");
                v12 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v61), "intValue");
                if (v11)
                {
                  v13 = v12;
                  if (v12)
                  {
                    v10 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v10);
                    v81.size.width = (double)v11;
                    v81.size.height = (double)v13;
                    v81.origin.x = 0.0;
                    v81.origin.y = 0.0;
                    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v81);
                    objc_msgSend(v10, "setObject:forKeyedSubscript:", DictionaryRepresentation, v64);

                  }
                }
              }
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v15 = (void *)objc_msgSend(v10, "allKeys");
              v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v71, &v67, 16);
              if (v16)
              {
                v17 = *(_QWORD *)v72;
                do
                {
                  for (j = 0; j != v16; ++j)
                  {
                    if (*(_QWORD *)v72 != v17)
                      objc_enumerationMutation(v15);
                    objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", v9), "setObject:forKeyedSubscript:", objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v71 + 1) + 8 * j)), *(_QWORD *)(*((_QWORD *)&v71 + 1) + 8 * j));
                  }
                  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v71, &v67, 16);
                }
                while (v16);
              }
            }
          }
          v66 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v76, v75, 16);
        }
        while (v66);
      }
      v19 = lock;
      goto LABEL_27;
    }
    goto LABEL_110;
  }
  if (FigCFEqual())
  {
    if (DerivedStorage && a3)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      v21 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FE0]);
      v22 = (_QWORD *)MEMORY[0x1E0D07FB0];
      v23 = (CFTypeRef *)MEMORY[0x1E0C9B0D0];
      v24 = (_QWORD *)MEMORY[0x1E0D07FB8];
      if (v21)
      {
        v25 = v21;
        v26 = objc_msgSend(v21, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FB0]);
        if (v26)
        {
          v27 = (void *)v26;

          *(_QWORD *)(DerivedStorage + 120) = 0;
          if (!CFEqual(v27, *v23))
            *(_QWORD *)(DerivedStorage + 120) = v27;
        }
        v28 = objc_msgSend(v25, "objectForKeyedSubscript:", *v24);
        if (v28)
        {
          v29 = (void *)v28;

          *(_QWORD *)(DerivedStorage + 112) = 0;
          if (!CFEqual(v29, *v23))
            *(_QWORD *)(DerivedStorage + 112) = v29;
        }
      }
      v30 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FC8]);
      if (v30)
      {
        v31 = v30;
        v32 = objc_msgSend(v30, "objectForKeyedSubscript:", *v22);
        if (v32)
        {
          v33 = (void *)v32;

          *(_QWORD *)(DerivedStorage + 152) = 0;
          if (!CFEqual(v33, *v23))
            *(_QWORD *)(DerivedStorage + 152) = v33;
        }
        v34 = objc_msgSend(v31, "objectForKeyedSubscript:", *v24);
        if (v34)
        {
          v35 = (void *)v34;

          *(_QWORD *)(DerivedStorage + 144) = 0;
          if (!CFEqual(v35, *v23))
            *(_QWORD *)(DerivedStorage + 144) = v35;
        }
      }
      v36 = (void *)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF8]);
      if (v36)
      {
        v37 = v36;
        v38 = objc_msgSend(v36, "objectForKeyedSubscript:", *v22);
        if (v38)
        {
          v39 = (void *)v38;

          *(_QWORD *)(DerivedStorage + 184) = 0;
          if (!CFEqual(v39, *v23))
            *(_QWORD *)(DerivedStorage + 184) = v39;
        }
        v40 = objc_msgSend(v37, "objectForKeyedSubscript:", *v24);
        if (v40)
        {
          v41 = (void *)v40;

          *(_QWORD *)(DerivedStorage + 176) = 0;
          if (!CFEqual(v41, *v23))
            *(_QWORD *)(DerivedStorage + 176) = v41;
        }
        v42 = objc_msgSend(v37, "objectForKeyedSubscript:", *MEMORY[0x1E0D07F98]);
        if (v42)
        {
          v43 = (void *)v42;

          *(_QWORD *)(DerivedStorage + 192) = 0;
          if (!CFEqual(v43, *v23))
            *(_QWORD *)(DerivedStorage + 192) = v43;
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
      if (objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF0])
        || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FE8])
        || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08000])
        || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08008])
        || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08010])
        || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FC0]))
      {
        return 4294954516;
      }
      result = objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FD8]);
      goto LABEL_86;
    }
LABEL_110:
    FigDebugAssert3();
    return 4294954516;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
      return cmioefcs_setFormatIndex(DerivedStorage, a3);
    if (FigCFEqual())
      return cmioefcs_setMinFrameRate(DerivedStorage, a3);
    if (FigCFEqual())
      return cmioefcs_setMaxFrameRate(DerivedStorage, a3);
    if (FigCFEqual())
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      *(_BYTE *)(DerivedStorage + 200) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
      v19 = (os_unfair_lock_s *)(DerivedStorage + 20);
LABEL_27:
      os_unfair_lock_unlock(v19);
      return 0;
    }
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        if (a3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          v57 = objc_msgSend(a3, "BOOLValue");
        else
          v57 = 0;
        return cmioefcs_setCinematicFramingEnabled(DerivedStorage, v57);
      }
      if (FigCFEqual())
        return cmioefcs_setCenterStageRectOfInterest(DerivedStorage, (uint64_t)a3);
      if (FigCFEqual())
      {
        v58 = objc_msgSend(a3, "intValue");
        result = 0;
        *(_DWORD *)(DerivedStorage + 232) = v58;
        return result;
      }
      if (FigCFEqual())
      {
        os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
        v59 = cmioefcs_captureAsyncStillImage(DerivedStorage, a3);
        os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
        return v59;
      }
      if (!FigCFEqual())
      {
        if (FigCFEqual())
          return cmioefcs_setVideoZoomFactor(DerivedStorage, a3);
        else
          return 4294954509;
      }
    }
    return cmioefcs_setObjectDetectionConfiguration(DerivedStorage, a3);
  }
  if (!DerivedStorage || !a3)
    goto LABEL_110;
  v44 = (os_unfair_lock_s *)(DerivedStorage + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
  v45 = *MEMORY[0x1E0D07FE0];
  *(_BYTE *)(DerivedStorage + 104) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FE0]), "BOOLValue");
  v46 = *MEMORY[0x1E0D07FC8];
  *(_BYTE *)(DerivedStorage + 136) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FC8]), "BOOLValue");
  v47 = *MEMORY[0x1E0D07FF8];
  *(_BYTE *)(DerivedStorage + 168) = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF8]), "BOOLValue");
  if (!*(_BYTE *)(DerivedStorage + 104))
    cmioefcs_releaseClientBufferPool(DerivedStorage, v45);
  if (!*(_BYTE *)(DerivedStorage + 136))
    cmioefcs_releaseClientBufferPool(DerivedStorage, v46);
  if (!*(_BYTE *)(DerivedStorage + 168))
    cmioefcs_releaseClientBufferPool(DerivedStorage, v47);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 20));
  v48 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v47), "BOOLValue");
  v67 = 0;
  v68 = &v67;
  v69 = 0x2020000000;
  v70 = 0;
  if (*(_BYTE *)(DerivedStorage + 17))
  {
    FigDebugAssert3();
    v56 = -12782;
  }
  else
  {
    v49 = v48;
    v50 = (void *)objc_msgSend(*(id *)(DerivedStorage + 8), "availableProperties");
    v51 = *MEMORY[0x1E0CA5510];
    if (objc_msgSend(v50, "containsObject:", *MEMORY[0x1E0CA5510]))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
      *(_BYTE *)(DerivedStorage + 217) = v49;
      v52 = *(id *)(DerivedStorage + 8);
      os_unfair_lock_unlock(v44);
      v53 = dispatch_semaphore_create(0);
      *(_QWORD *)&v71 = v51;
      *(_QWORD *)&v76 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v49);
      v54 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v76, &v71, 1);
      v75[0] = MEMORY[0x1E0C809B0];
      v75[1] = 3221225472;
      v75[2] = __cmioefcs_setAsyncStillCaptureEnabled_block_invoke;
      v75[3] = &unk_1E4922B58;
      v75[4] = v53;
      v75[5] = &v67;
      objc_msgSend(v52, "setPropertyValues:reply:", v54, v75);
      v55 = dispatch_time(0, 5000000000);
      dispatch_semaphore_wait(v53, v55);
      dispatch_release(v53);

      goto LABEL_79;
    }
    v56 = -12787;
  }
  *((_DWORD *)v68 + 6) = v56;
LABEL_79:
  _Block_object_dispose(&v67, 8);
  if (objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF0])
    || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FE8])
    || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08000])
    || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08008])
    || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D08010])
    || objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FC0]))
  {
    return 4294954516;
  }
  result = objc_msgSend(a3, "objectForKeyedSubscript:", *MEMORY[0x1E0D07FD8]);
LABEL_86:
  if (result)
    return 4294954516;
  return result;
}

void sub_1A2F85DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureStreamStop()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  id v2;
  NSObject *v3;
  void *v4;
  dispatch_time_t v5;
  uint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 16))
  {
    *((_DWORD *)v20 + 6) = -12785;
  }
  else if (*(_BYTE *)(DerivedStorage + 17))
  {
    objc_msgSend(*(id *)(DerivedStorage + 248), "unprepare");
    cmioefcs_setAsyncStillCaptureConfigurations(v1, MEMORY[0x1E0C9AA70]);
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    v2 = *(id *)(v1 + 8);
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
    v3 = dispatch_semaphore_create(0);
    v4 = *(void **)(v1 + 8);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __CMIOExtensionFigCaptureStreamStop_block_invoke;
    v18[3] = &unk_1E4922B30;
    v18[5] = v3;
    v18[6] = &v19;
    v18[4] = v2;
    objc_msgSend(v4, "stopStream:", v18);
    v5 = dispatch_time(0, 5000000000);
    dispatch_semaphore_wait(v3, v5);
    dispatch_release(v3);

    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    *(_BYTE *)(v1 + 17) = 0;
    v6 = objc_msgSend(*(id *)(v1 + 224), "count");
    if (v6)
    {
      FigCaptureDeviceGetNotificationCenter(v6);
      CMNotificationCenterPostNotification();
    }
    v7 = *(const void **)(v1 + 240);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v1 + 240) = 0;
    }
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = *(void **)(v1 + 96);
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v23, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          cmioefcs_releaseClientBufferPool(v1, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i));
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v23, 16);
      }
      while (v9);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  }
  v12 = *((unsigned int *)v20 + 6);
  _Block_object_dispose(&v19, 8);
  return v12;
}

void sub_1A2F86048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void cmioefcs_setAsyncStillCaptureConfigurations(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  dispatch_time_t v10;
  int v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (!a1 || !a2)
  {
    FigDebugAssert3();
    v11 = -12780;
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    FigDebugAssert3();
    v11 = -12782;
    goto LABEL_7;
  }
  v4 = (void *)objc_msgSend(*(id *)(a1 + 8), "availableProperties");
  v5 = *MEMORY[0x1E0CA5508];
  if (!objc_msgSend(v4, "containsObject:", *MEMORY[0x1E0CA5508]))
  {
    v11 = -12787;
LABEL_7:
    *((_DWORD *)v14 + 6) = v11;
    goto LABEL_8;
  }
  v6 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  v7 = *(id *)(a1 + 8);
  os_unfair_lock_unlock(v6);
  v8 = dispatch_semaphore_create(0);
  v17 = v5;
  v18[0] = a2;
  v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __cmioefcs_setAsyncStillCaptureConfigurations_block_invoke;
  v12[3] = &unk_1E4922B58;
  v12[4] = v8;
  v12[5] = &v13;
  objc_msgSend(v7, "setPropertyValues:reply:", v9, v12);
  v10 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v8, v10);
  dispatch_release(v8);

LABEL_8:
  _Block_object_dispose(&v13, 8);
}

void sub_1A2F8627C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_releaseClientBufferPool(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (!a1 || !a2)
    return FigDebugAssert3();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 20));
  v4 = (void *)objc_msgSend(*(id *)(a1 + 96), "objectForKeyedSubscript:", a2);
  return objc_msgSend(v4, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0D07F00]);
}

intptr_t __cmioefcs_setAsyncStillCaptureConfigurations_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id cmioefcs_copyVideoOutputsEnabled()
{
  uint64_t DerivedStorage;
  unsigned __int8 *v1;
  os_unfair_lock_s *v2;
  id v3;
  _QWORD v5[3];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return 0;
  v1 = (unsigned __int8 *)DerivedStorage;
  v2 = (os_unfair_lock_s *)(DerivedStorage + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 20));
  v5[0] = *MEMORY[0x1E0D07FE0];
  v6[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1[104]);
  v5[1] = *MEMORY[0x1E0D07FC8];
  v6[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1[136]);
  v5[2] = *MEMORY[0x1E0D07FF8];
  v6[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v1[168]);
  v3 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, v5, 3);
  os_unfair_lock_unlock(v2);
  return v3;
}

CFTypeRef cmioefcs_copyFlashSupportedProperty(uint64_t a1, _QWORD *a2)
{
  int v3;
  CFTypeRef *v4;
  CFTypeRef result;

  v3 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "cachedPropertyStateForProperty:", *MEMORY[0x1E0CA5520]), "value"), "BOOLValue");
  v4 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!v3)
    v4 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  result = CFRetain(*v4);
  *a2 = result;
  return result;
}

uint64_t cmioefcs_setMinFrameRate(uint64_t a1, void *a2)
{
  float v3;
  float v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_unfair_lock_s *v6;
  id v7;
  NSObject *v8;
  const __CFAllocator *v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  dispatch_time_t v13;
  uint64_t v14;
  _QWORD v16[7];
  os_log_type_t type;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  CFDictionaryRef v24;
  CMTime time;
  CMTime v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  objc_msgSend(a2, "floatValue");
  v4 = v3;
  if (dword_1EE6BEA58)
  {
    v18 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  *(float *)(a1 + 212) = v4;
  v7 = *(id *)(a1 + 8);
  os_unfair_lock_unlock(v6);
  v8 = dispatch_semaphore_create(0);
  memset(&v26, 0, sizeof(v26));
  CMTimeMake(&v26, 100000, (int)(float)(v4 * 100000.0));
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = v26;
  v10 = CMTimeCopyAsDictionary(&time, v9);
  v11 = v10;
  if (v10)
  {
    v23 = *MEMORY[0x1E0CA5530];
    v24 = v10;
    v12 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
    CFRelease(v11);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __cmioefcs_setMinFrameRate_block_invoke;
    v16[3] = &unk_1E4922B30;
    v16[5] = v8;
    v16[6] = &v19;
    v16[4] = v7;
    objc_msgSend(v7, "setPropertyValues:reply:", v12, v16);
  }
  v13 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v8, v13);
  dispatch_release(v8);

  v14 = *((unsigned int *)v20 + 6);
  _Block_object_dispose(&v19, 8);
  return v14;
}

void sub_1A2F869F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setMaxFrameRate(uint64_t a1, void *a2)
{
  float v3;
  float v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_unfair_lock_s *v6;
  id v7;
  NSObject *v8;
  const __CFAllocator *v9;
  CFDictionaryRef v10;
  CFDictionaryRef v11;
  uint64_t v12;
  dispatch_time_t v13;
  uint64_t v14;
  _QWORD v16[7];
  os_log_type_t type;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  CFDictionaryRef v24;
  CMTime time;
  CMTime v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  objc_msgSend(a2, "floatValue");
  v4 = v3;
  if (dword_1EE6BEA58)
  {
    v18 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  *(float *)(a1 + 208) = v4;
  v7 = *(id *)(a1 + 8);
  os_unfair_lock_unlock(v6);
  v8 = dispatch_semaphore_create(0);
  memset(&v26, 0, sizeof(v26));
  CMTimeMake(&v26, 100000, (int)(float)(v4 * 100000.0));
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = v26;
  v10 = CMTimeCopyAsDictionary(&time, v9);
  v11 = v10;
  if (v10)
  {
    v23 = *MEMORY[0x1E0CA5528];
    v24 = v10;
    v12 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1);
    CFRelease(v11);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __cmioefcs_setMaxFrameRate_block_invoke;
    v16[3] = &unk_1E4922B30;
    v16[5] = v8;
    v16[6] = &v19;
    v16[4] = v7;
    objc_msgSend(v7, "setPropertyValues:reply:", v12, v16);
  }
  v13 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v8, v13);
  dispatch_release(v8);

  v14 = *((unsigned int *)v20 + 6);
  _Block_object_dispose(&v19, 8);
  return v14;
}

void sub_1A2F86CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setObjectDetectionConfiguration(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07068]), "intValue");
    v5 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07060]), "intValue");
    v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07070]), "intValue");
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
    objc_msgSend(*(id *)(a1 + 248), "setMaxHumanFaces:", v4);
    objc_msgSend(*(id *)(a1 + 248), "setHumanFaceEyeDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07030]), "BOOLValue"));
    objc_msgSend(*(id *)(a1 + 248), "setHumanFaceSmileDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07038]), "BOOLValue"));
    objc_msgSend(*(id *)(a1 + 248), "setHumanFaceBlinkDetectionEnabled:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07028]), "BOOLValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxHumanHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07080]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxHumanBodies:", v5);
    objc_msgSend(*(id *)(a1 + 248), "setMaxHumanFullBodies:", v6);
    objc_msgSend(*(id *)(a1 + 248), "setMaxDogBodies:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07050]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxDogHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07058]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxCatBodies:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07040]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxCatHeads:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07048]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxSalientObjects:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07088]), "intValue"));
    objc_msgSend(*(id *)(a1 + 248), "setMaxSportsBalls:", objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07090]), "intValue"));
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t cmioefcs_setCinematicFramingEnabled(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  dispatch_time_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  if (!a1)
  {
    FigDebugAssert3();
    v9 = v13;
    v8 = 4294954516;
    goto LABEL_6;
  }
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()) & 1) == 0)
  {
    v9 = v13;
    v8 = 4294954509;
LABEL_6:
    *((_DWORD *)v9 + 6) = v8;
    goto LABEL_7;
  }
  v4 = dispatch_semaphore_create(0);
  v16 = CMIOExtensionPropertyFromPropertyAddress();
  v17[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v5 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
  v6 = *(void **)(a1 + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __cmioefcs_setCinematicFramingEnabled_block_invoke;
  v11[3] = &unk_1E4922B58;
  v11[4] = v4;
  v11[5] = &v12;
  objc_msgSend(v6, "setPropertyValues:reply:", v5, v11);
  v7 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v4, v7);
  dispatch_release(v4);
  v8 = *((unsigned int *)v13 + 6);
  if (!(_DWORD)v8)
    *(_BYTE *)(a1 + 216) = a2;
LABEL_7:
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1A2F8718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_setCenterStageRectOfInterest(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  dispatch_time_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  if (!a1)
  {
    FigDebugAssert3();
    v6 = v15;
    v7 = 4294954516;
    goto LABEL_8;
  }
  if ((objc_msgSend((id)objc_msgSend(*(id *)(a1 + 8), "availableProperties"), "containsObject:", CMIOExtensionPropertyFromPropertyAddress()) & 1) == 0)
  {
    v6 = v15;
    goto LABEL_7;
  }
  v4 = (void *)objc_msgSend(*(id *)(a1 + 8), "availableProperties");
  v5 = objc_msgSend(v4, "containsObject:", *MEMORY[0x1E0CA5518]);
  v6 = v15;
  if ((v5 & 1) == 0)
  {
LABEL_7:
    v7 = 4294954509;
LABEL_8:
    *((_DWORD *)v6 + 6) = v7;
    goto LABEL_9;
  }
  v7 = *((unsigned int *)v15 + 6);
  if (!(_DWORD)v7)
  {
    v8 = dispatch_semaphore_create(0);
    v18 = CMIOExtensionPropertyFromPropertyAddress();
    v19[0] = a2;
    v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v10 = *(void **)(a1 + 8);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __cmioefcs_setCenterStageRectOfInterest_block_invoke;
    v13[3] = &unk_1E4922B58;
    v13[4] = v8;
    v13[5] = &v14;
    objc_msgSend(v10, "setPropertyValues:reply:", v9, v13);
    v11 = dispatch_time(0, 5000000000);
    dispatch_semaphore_wait(v8, v11);
    dispatch_release(v8);
    v7 = *((unsigned int *)v15 + 6);
  }
LABEL_9:
  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_1A2F87398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cmioefcs_captureAsyncStillImage(uint64_t a1, void *a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v11[28];

  v11[27] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 17) && *(_BYTE *)(a1 + 168))
  {
    do
    {
      v4 = __ldxr(&cmioefcs_captureAsyncStillImage_sStillCaptureUniqueID);
      v5 = v4 + 1;
    }
    while (__stxr(v4 + 1, &cmioefcs_captureAsyncStillImage_sStillCaptureUniqueID));
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if (a2)
    {
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOCompressedFormat")), CFSTR("CompressedFormat"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOHighResolutionPhotoEnabled")), CFSTR("HighResolutionCapture"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOFlashMode")), CFSTR("FlashMode"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOQualityPrioritization")), CFSTR("PhotoQualityPrioritization"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOMaxPhotoDimensionsWidth")), CFSTR("MaxPhotoDimensionsWidth"));
      objc_msgSend(v6, "setObject:forKeyedSubscript:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("CMIOMaxPhotoDimensionsHeight")), CFSTR("MaxPhotoDimensionsHeight"));
      v7 = v6;
      v6 = a2;
    }
    else
    {
      v7 = 0;
    }
    objc_msgSend(*(id *)(a1 + 224), "setObject:forKeyedSubscript:", v6, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v5));
    v8 = *(void **)(a1 + 8);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __cmioefcs_captureAsyncStillImage_block_invoke;
    v11[3] = &__block_descriptor_48_e43_v24__0__opaqueCMSampleBuffer__8__NSError_16l;
    v11[4] = a1;
    v11[5] = v5;
    objc_msgSend(v8, "captureAsyncStillImage:options:reply:", v5, v7, v11);
    if (dword_1EE6BEA58)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t cmioefcs_setVideoZoomFactor(uint64_t a1, void *a2)
{
  int v3;
  int v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_unfair_lock_s *v6;
  id v7;
  NSObject *v8;
  double v9;
  uint64_t v10;
  dispatch_time_t v11;
  uint64_t v12;
  _QWORD v14[7];
  os_log_type_t type;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[21];

  v22[20] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  objc_msgSend(a2, "floatValue");
  v4 = v3;
  if (dword_1EE6BEA58)
  {
    v16 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v6 = (os_unfair_lock_s *)(a1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 20));
  v7 = *(id *)(a1 + 8);
  os_unfair_lock_unlock(v6);
  v8 = dispatch_semaphore_create(0);
  v21 = *MEMORY[0x1E0CA5540];
  LODWORD(v9) = v4;
  v22[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
  v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, &v21, 1);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __cmioefcs_setVideoZoomFactor_block_invoke;
  v14[3] = &unk_1E4922B30;
  v14[5] = v8;
  v14[6] = &v17;
  v14[4] = v7;
  objc_msgSend(v7, "setPropertyValues:reply:", v10, v14);
  v11 = dispatch_time(0, 5000000000);
  dispatch_semaphore_wait(v8, v11);
  dispatch_release(v8);

  v12 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v17, 8);
  return v12;
}

void sub_1A2F879F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t __cmioefcs_setAsyncStillCaptureEnabled_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __cmioefcs_setMinFrameRate_block_invoke(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(a2, "code");
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t __cmioefcs_setMaxFrameRate_block_invoke(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(a2, "code");
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t __cmioefcs_setCinematicFramingEnabled_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t __cmioefcs_setCenterStageRectOfInterest_block_invoke(uint64_t a1, void *a2)
{
  if (a2)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __cmioefcs_captureAsyncStillImage_block_invoke(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  CMBlockBufferRef v8;
  const void *value;
  CMFormatDescriptionRef v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  Float64 v14;
  uint64_t DataBuffer;
  void *v16;
  uint64_t v17;
  CMFormatDescriptionRef FormatDescription;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v20;
  unsigned int v21;
  Float64 Seconds;
  uint64_t v23;
  void (*v24)(uint64_t, const void *, CMTime *);
  CMTime v25;
  CFTypeRef v26;
  _BYTE cf[12];
  __int16 v28;
  const void *v29;
  __int16 v30;
  Float64 v31;
  CMTime time;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  memset(&v25, 0, sizeof(v25));
  CMSampleBufferGetPresentationTimeStamp(&v25, sbuf);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  v7 = (void *)objc_msgSend(*(id *)(v6 + 224), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5));
  objc_msgSend(*(id *)(v6 + 224), "setObject:forKeyedSubscript:", 0, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v5));
  if (!*(_BYTE *)(v6 + 17))
    goto LABEL_21;
  if (!sbuf || a3 || !*(_BYTE *)(v6 + 168) || !*(_QWORD *)(v6 + 176))
  {
    DataBuffer = FigDebugAssert3();
    goto LABEL_20;
  }
  if (!objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("CMIOCompressedFormat")))
  {
    time.value = 0;
    v26 = 0;
    *(_QWORD *)cf = 0;
    DataBuffer = (uint64_t)CMSampleBufferGetDataBuffer(sbuf);
    if (DataBuffer)
    {
      if (!CMPhotoDecompressionSessionCreate())
      {
        CMSampleBufferGetDataBuffer(sbuf);
        if (!CMPhotoDecompressionSessionCreateContainer())
        {
          v16 = (void *)objc_msgSend(*(id *)(v6 + 96), "objectForKeyedSubscript:", *MEMORY[0x1E0D07FF8]);
          v17 = objc_msgSend((id)objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0D07F58]), "intValue");
          if ((_DWORD)v17)
          {
            v33 = *MEMORY[0x1E0D09570];
            v34[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17);
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
          }
          CMPhotoDecompressionContainerCreateImageForIndex();
        }
      }
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
      DataBuffer = (uint64_t)v26;
      if (v26)
        CFRelease(v26);
    }
    value = (const void *)time.value;
    if (time.value)
    {
      if (dword_1EE6BEA58)
      {
        LODWORD(v26) = 0;
        LOBYTE(v34[0]) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v20 = v26;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v34[0]))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if (v21)
        {
          time = v25;
          Seconds = CMTimeGetSeconds(&time);
          *(_DWORD *)cf = 136315650;
          *(_QWORD *)&cf[4] = "cmioefcs_handleCapturedStillImage";
          v28 = 2048;
          v29 = value;
          v30 = 2048;
          v31 = Seconds;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v23 = *(_QWORD *)(v6 + 176);
      goto LABEL_38;
    }
    goto LABEL_20;
  }
  v8 = CMSampleBufferGetDataBuffer(sbuf);
  if (!v8)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    CMSetAttachment(0, CFSTR("CMIOBlockBufferFormatDescription"), FormatDescription, 1u);
LABEL_20:
    FigCaptureDeviceGetNotificationCenter(DataBuffer);
    CMNotificationCenterPostNotification();
LABEL_21:
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
    return;
  }
  value = v8;
  CFRetain(v8);
  v10 = CMSampleBufferGetFormatDescription(sbuf);
  CMSetAttachment(value, CFSTR("CMIOBlockBufferFormatDescription"), v10, 1u);
  if (dword_1EE6BEA58)
  {
    LODWORD(v26) = 0;
    LOBYTE(v34[0]) = 0;
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v12 = v26;
    if (os_log_type_enabled(v11, v34[0]))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if (v13)
    {
      time = v25;
      v14 = CMTimeGetSeconds(&time);
      *(_DWORD *)cf = 136315650;
      *(_QWORD *)&cf[4] = "cmioefcs_handleCapturedStillImage";
      v28 = 2048;
      v29 = value;
      v30 = 2048;
      v31 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v23 = *(_QWORD *)(v6 + 192);
LABEL_38:
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
  if (v23)
  {
    v24 = *(void (**)(uint64_t, const void *, CMTime *))(v23 + 16);
    time = v25;
    v24(v23, value, &time);
  }
  CFRelease(value);
}

intptr_t __cmioefcs_setVideoZoomFactor_block_invoke(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(a2, "code");
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t CMIOExtensionFigCaptureStreamStart()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  id v2;
  NSObject *v3;
  dispatch_time_t v4;
  uint64_t v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  const __CFString *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 16))
  {
    *((_DWORD *)v9 + 6) = -12785;
  }
  else if (!*(_BYTE *)(DerivedStorage + 17))
  {
    objc_msgSend(*(id *)(DerivedStorage + 248), "prepareForVideoFormat:", 0);
    if (*(_BYTE *)(v1 + 217))
    {
      v12 = CFSTR("MaxPhotoQualityPrioritization");
      v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v1 + 232));
      cmioefcs_setAsyncStillCaptureConfigurations(v1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1));
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    v2 = *(id *)(v1 + 8);
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
    v3 = dispatch_semaphore_create(0);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __CMIOExtensionFigCaptureStreamStart_block_invoke;
    v7[3] = &unk_1E4922B30;
    v7[5] = v3;
    v7[6] = &v8;
    v7[4] = v2;
    objc_msgSend(v2, "startStream:", v7);
    v4 = dispatch_time(0, 5000000000);
    dispatch_semaphore_wait(v3, v4);
    dispatch_release(v3);

    os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
    *(_QWORD *)(v1 + 224) = objc_alloc_init(MEMORY[0x1E0C99E08]);
    if (!*((_DWORD *)v9 + 6))
      *(_BYTE *)(v1 + 17) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  }
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A2F88690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMIOExtensionFigCaptureStreamAddAttachmentsToSampleBuffer(uint64_t a1, void *a2)
{
  const __CFString *v3;
  void *v4;
  void *v5;
  id v6;
  __CVBuffer *ImageBuffer;
  __CVBuffer *v8;
  CFTypeRef v9;
  const __CFDictionary *v10;
  CFTypeRef v11;
  const __CFDictionary *v12;
  CFTypeRef v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;

  CMBaseObjectGetDerivedStorage();
  v3 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v4 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (v4)
  {
    v5 = v4;
    v6 = v4;
  }
  else
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
  v8 = ImageBuffer;
  if (ImageBuffer)
  {
    v9 = CVBufferCopyAttachment(ImageBuffer, CFSTR("SampleBufferPropagatableAttachments"), 0);
    if (v9)
    {
      v10 = (const __CFDictionary *)CFAutorelease(v9);
      if (v10)
      {
        CMSetAttachments(a2, v10, 1u);
        CVBufferRemoveAttachment(v8, CFSTR("SampleBufferPropagatableAttachments"));
      }
    }
    v11 = CVBufferCopyAttachment(v8, CFSTR("SampleBufferNonPropagatableAttachments"), 0);
    if (v11)
    {
      v12 = (const __CFDictionary *)CFAutorelease(v11);
      if (v12)
      {
        CMSetAttachments(a2, v12, 0);
        CVBufferRemoveAttachment(v8, CFSTR("SampleBufferNonPropagatableAttachments"));
      }
    }
    v13 = CMGetAttachment(a2, v3, 0);
    if (v13)
      objc_msgSend(v5, "addEntriesFromDictionary:", v13);
    v14 = (void *)CMGetAttachment(v8, v3, 0);
  }
  else
  {
    v14 = 0;
  }
  v15 = *MEMORY[0x1E0D06F58];
  if (!objc_msgSend(v5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F58]))
  {
    v16 = objc_msgSend(v14, "objectForKeyedSubscript:", v15);
    if (v16)
      v17 = (void *)v16;
    else
      v17 = &unk_1E4A024B0;
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v17, v15);
  }
  if (v14)
    v18 = v14;
  else
    v18 = v5;
  CMSetAttachment(v8, v3, (CFTypeRef)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v18), 1u);
  CMSetAttachment(a2, v3, v5, 1u);
  return 0;
}

uint64_t CMIOExtensionFigCaptureStreamEnqueueReactionEffect(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = *(void **)(CMBaseObjectGetDerivedStorage() + 8);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __CMIOExtensionFigCaptureStreamEnqueueReactionEffect_block_invoke;
  v6[3] = &unk_1E4922BA0;
  v6[4] = &v7;
  objc_msgSend(v3, "enqueueReactionEffect:reply:", a2, v6);
  v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1A2F88910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __cmioefcs_sortFigCaptureSourceFormats_block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v5 = *MEMORY[0x1E0D07ED0];
  v6 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07ED0]), "intValue");
  v7 = *MEMORY[0x1E0D07EC8];
  v8 = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D07EC8]), "intValue") * v6;
  v9 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v5), "intValue");
  v10 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", v7), "intValue");
  if (v8 >= v10 * v9)
    v11 = 0;
  else
    v11 = -1;
  if (v8 > v10 * v9)
    return 1;
  else
    return v11;
}

intptr_t __cmioefcs_setFormatIndex_block_invoke(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(a2, "code");
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t FigFlashlightServerStart()
{
  _OWORD v1[3];

  v1[0] = xmmword_1E4922C08;
  v1[1] = *(_OWORD *)&off_1E4922C18;
  v1[2] = xmmword_1E4922C28;
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.flashlight", (uint64_t)v1, 0);
}

uint64_t flashlightServer_handleReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;
  _OWORD v3[2];

  xpc_connection_get_audit_token();
  memset(v3, 0, sizeof(v3));
  FigCaptureClientIsAVConferenced(v3);
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t flashlightServer_handleNoReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t flashlightServer_handleGlobalFlashlightCreationMessage(_xpc_connection_s *a1, void *a2)
{
  uint64_t v3;

  xpc_connection_get_pid(a1);
  if (flashlightServer_handleGlobalFlashlightCreationMessage_onceToken != -1)
    dispatch_once(&flashlightServer_handleGlobalFlashlightCreationMessage_onceToken, &__block_literal_global_62);
  pthread_mutex_lock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
  if (flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlight)
  {
    pthread_mutex_unlock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
  }
  else
  {
    v3 = FigFlashlightCreate(*MEMORY[0x1E0C9AE00], 1, 0, 0, &flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlight);
    pthread_mutex_unlock((pthread_mutex_t *)flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock);
    if ((_DWORD)v3)
      return v3;
  }
  v3 = FigXPCServerAssociateObjectWithConnection();
  if ((_DWORD)v3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    xpc_dictionary_set_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0], 0);
  }
  return v3;
}

uint64_t __flashlightServer_handleGlobalFlashlightCreationMessage_block_invoke()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  flashlightServer_handleGlobalFlashlightCreationMessage_sFlashlightCreationLock = result;
  return result;
}

uint64_t flashlightServer_getAndRetainFlashlightObjectFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  uint64_t v4;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

void sub_1A2F8A07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t captureSession_setRestoreForcedOffOverCaptureActiveSlaveStreamEnabled(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 616), "objectForKeyedSubscript:", a2);
  if (v4)
    v4 = (_QWORD *)v4[2];
  return objc_msgSend(v4, "setRestorationOfForcedOffOverCaptureActiveSlaveStreamEnabled:", a3);
}

unint64_t captureSession_servicePendingIrisRecordings(const void *a1, void *a2, char a3)
{
  _DWORD *v5;
  unint64_t result;
  void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  CMTime *v46;
  CMTime *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t DerivedStorage;
  CMTime rhs;
  CMTime lhs;
  _QWORD v54[3];
  CMTime type;
  CMTime v56;
  CMTime v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  CMTime v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v48 = v49;
    LODWORD(v46) = 0;
    FigDebugAssert3();
  }
  v5 = &unk_1ECFE9000;
  do
  {
    result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings", v46), "count");
    if (!result)
      break;
    v7 = (void *)objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings"), "firstObject");
    if (v5[356])
    {
      LODWORD(v56.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = v56.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
        v10 = value;
      else
        v10 = value & 0xFFFFFFFE;
      if (v10)
      {
        v11 = *(_QWORD *)(DerivedStorage + 72);
        LODWORD(v57.value) = 136315650;
        *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
        LOWORD(v57.flags) = 2114;
        *(_QWORD *)((char *)&v57.flags + 2) = v11;
        HIWORD(v57.epoch) = 2112;
        v58 = (uint64_t)v7;
        LODWORD(v48) = 32;
        v47 = &v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!objc_msgSend(v7, "isEmpty", v47, v48))
    {
      v20 = (void *)objc_msgSend(v7, "irisMovieInfo");
      v56 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      type = v56;
      if (objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2), "valveIsOpen"))
      {
        v21 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)a2);
        if (v20)
          objc_msgSend(v20, "audioOffset");
        else
          memset(v54, 0, sizeof(v54));
        v61 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        result = objc_msgSend(v21, "updateStopPTS:audioOffset:previousStopPTS:previousAudioOffset:", &v61, v54, &v56, &type);
        if (!(_DWORD)result)
          goto LABEL_40;
        v36 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2), "enqueueIrisRequest:", v20);
        if ((_DWORD)v36)
        {
          v37 = v36;
          v38 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)a2);
          v61 = v56;
          v57 = type;
          result = objc_msgSend(v38, "updateStopPTS:audioOffset:previousStopPTS:previousAudioOffset:", &v61, &v57, 0, 0);
          if ((_DWORD)v37 == -16957 || (_DWORD)v37 == -15543)
          {
            memset(&v61, 0, sizeof(v61));
            if (v20)
              objc_msgSend(v20, "stillImageCaptureTime");
            else
              memset(&lhs, 0, sizeof(lhs));
            CMTimeMake(&rhs, 1, 1000);
            CMTimeSubtract(&v61, &lhs, &rhs);
            v40 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2);
            v57 = v61;
            result = objc_msgSend(v40, "prepareToFinishAllEnqueuedIrisRequestsWithEndTime:", &v57);
LABEL_52:
            v35 = 5;
            continue;
          }
          if ((_DWORD)v37 == -16953)
          {
LABEL_40:
            if ((a3 & 1) == 0)
              goto LABEL_52;
            v37 = 4294950340;
          }
          v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
          v5 = (_DWORD *)&unk_1ECFE9000;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          captureSession_postNotificationsForIrisRequestCompletedWithError(a1, objc_msgSend(a2, "sinkID"), v20, v37);
        }
      }
      else
      {
        if (objc_msgSend(v20, "isMomentCaptureMovieRecording"))
        {
          v22 = objc_msgSend((id)objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)a2), "objectAtIndexedSubscript:", 0), "sinkID");
          v23 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(v22, objc_msgSend((id)objc_msgSend(v20, "settings"), "settingsID"), 0));
          v24 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)a2), "torchLevel");
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v24, "numberWithFloat:"), CFSTR("TorchEnabled"));
          v25 = (void *)objc_msgSend((id)objc_msgSend(v20, "settings"), "videoSettings");
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("AVVideoWidthKey")), CFSTR("IrisMovieWidth"));
          objc_msgSend(v23, "setObject:forKeyedSubscript:", objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("AVVideoHeightKey")), CFSTR("IrisMovieHeight"));
          if (objc_msgSend(v20, "spatialOverCaptureExpected"))
            objc_msgSend(v23, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("SpatialOverCaptureMovieEnabled"));
          captureSession_postNotificationWithPayload(a1, CFSTR("DidBeginRecordingMomentCaptureMovie"), v23);
        }
        v26 = (void *)objc_msgSend(a2, "sinkID");
        v27 = (void *)objc_msgSend(v20, "settings");
        captureSession_fileStartRecording(a1, v26, v27, v20, MEMORY[0x1E0CA2E30]);
        v28 = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)a2), "openValveWithIrisRequest:", v20);
        if ((_DWORD)v28)
        {
          v29 = v28;
          v30 = objc_msgSend(a2, "sinkID");
          v31 = CMBaseObjectGetDerivedStorage();
          if (!_FigIsCurrentDispatchQueue())
          {
            v48 = v49;
            LODWORD(v46) = 0;
            FigDebugAssert3();
          }
          v32 = objc_msgSend(*(id *)(v31 + 624), "movieFileSinkPipelineWithSinkID:", v30, v46);
          v33 = (void *)v32;
          if (v32)
            v34 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode](v32);
          else
            v34 = (void *)-[FigCaptureAudioFileSinkPipeline fileCoordinatorNode](objc_msgSend(*(id *)(v31 + 624), "audioFileSinkPipelineWithSinkID:", v30));
          if (v34)
          {
            objc_msgSend(v34, "cancelStartRecordingWithSettings:", objc_msgSend(v20, "settings"));
            objc_msgSend(v33, "setRecording:", 0);
            captureSession_postNotificationsForIrisRequestCompletedWithError(a1, v30, v20, v29);
          }
          else
          {
            v48 = v49;
            LODWORD(v46) = 0;
            FigDebugAssert3();
            FigSignalErrorAt();
          }
          v5 = (_DWORD *)&unk_1ECFE9000;
        }
      }
      result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings", v46), "removeObjectAtIndex:", 0);
      v35 = 0;
      continue;
    }
    mach_absolute_time();
    objc_msgSend(v7, "enqueuedHostTime");
    result = FigHostTimeToNanoseconds();
    v12 = v5[356];
    if (result < 0x28FA6AE00)
    {
      if (v12)
      {
        LODWORD(v56.value) = 0;
        LOBYTE(type.value) = 0;
        v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v42 = v56.value;
        if (os_log_type_enabled(v41, type.value))
          v43 = v42;
        else
          v43 = v42 & 0xFFFFFFFE;
        if (v43)
        {
          v44 = *(_QWORD *)(DerivedStorage + 72);
          v45 = objc_msgSend((id)objc_msgSend(v7, "settings"), "settingsID");
          LODWORD(v57.value) = 136315650;
          *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
          LOWORD(v57.flags) = 2114;
          *(_QWORD *)((char *)&v57.flags + 2) = v44;
          HIWORD(v57.epoch) = 2048;
          v58 = v45;
          _os_log_send_and_compose_impl();
        }
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return result;
    }
    if (v12)
    {
      v13 = result;
      LODWORD(v56.value) = 0;
      LOBYTE(type.value) = 0;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v15 = v56.value;
      if (os_log_type_enabled(v14, type.value))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if (v16)
      {
        v17 = (double)(v13 / 0x3B9ACA00);
        v18 = *(_QWORD *)(DerivedStorage + 72);
        v19 = objc_msgSend((id)objc_msgSend(v7, "settings"), "settingsID");
        LODWORD(v57.value) = 136315906;
        *(CMTimeValue *)((char *)&v57.value + 4) = (CMTimeValue)"captureSession_servicePendingIrisRecordings";
        LOWORD(v57.flags) = 2114;
        *(_QWORD *)((char *)&v57.flags + 2) = v18;
        HIWORD(v57.epoch) = 2048;
        v58 = v19;
        v59 = 2048;
        v60 = v17;
        LODWORD(v48) = 42;
        v46 = &v57;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v5 = (_DWORD *)&unk_1ECFE9000;
    }
    captureSession_postNotificationsForIrisRequestCompletedWithError(a1, objc_msgSend(a2, "sinkID"), +[BWIrisMovieInfo emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:](BWIrisMovieInfo, "emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:", objc_msgSend(v7, "settings", v46)), 4294951756);
    result = objc_msgSend((id)objc_msgSend(a2, "pendingIrisRecordings"), "removeObjectAtIndex:", 0);
    v35 = 4;
  }
  while (v35 != 5);
  return result;
}

void sub_1A2F8ADFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cs_resetImageControlModeAndStreamSelection(uint64_t a1, int a2)
{
  uint64_t result;

  if (objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1), "autoImageControlMode") == 2)
    objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1), "setAutoImageControlMode:", a2 ^ 1u);
  result = objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1), "isBravoVariant");
  if ((_DWORD)result)
    return objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice](a1), "setBravoStreamSelectionConfigurationForRecordingEnabled:", 0);
  return result;
}

void captureSession_postNotificationsForIrisRequestCompletedWithError(const void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  double v8;
  double v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v11;
  const void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[28];

  v18[26] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
    {
      v5 = a4;
      if ((_DWORD)a4)
      {
        if ((_DWORD)a4 == -16418 || (_DWORD)a4 == -15433 || (_DWORD)a4 == -15542)
        {
          objc_msgSend(a3, "processingTimeInMilliseconds");
          if (v8 > 0.0)
          {
            objc_msgSend(a3, "processingTimeInMilliseconds");
            if (v9 < 500.0)
            {
              CMBaseObjectGetDerivedStorage();
              if (dword_1ECFE9590)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v5 = 4294951862;
            }
          }
        }
        v11 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend((id)objc_msgSend(a3, "settings", v15, v16), "settingsID"), v5);
        v18[0] = a2;
        v17[0] = CFSTR("SectionID");
        v17[1] = CFSTR("SettingsID");
        v18[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend((id)objc_msgSend(a3, "settings"), "settingsID"));
        v17[2] = CFSTR("IsOriginalPhotoMovie");
        v18[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a3, "isOriginalPhotoRecording"));
        v17[3] = CFSTR("ErrorStatus");
        v18[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
        v12 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 4);
        if (objc_msgSend(a3, "spatialOverCaptureExpected"))
        {
          v13 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v12);
          objc_msgSend(v13, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("IsSpatialOverCaptureMovie"));
        }
        else
        {
          v13 = 0;
        }
        if ((int)objc_msgSend(a3, "numberOfRequestedVariants") >= 1)
        {
          v14 = 0;
          do
          {
            captureSession_postNotificationWithPayload(a1, CFSTR("IrisDidRecordIrisMovie"), v11);
            captureSession_postNotificationWithPayload(a1, CFSTR("IrisDidFinishRecordingIrisMovie"), v12);
            if (v13)
              captureSession_postNotificationWithPayload(a1, CFSTR("IrisDidFinishRecordingIrisMovie"), v13);
            ++v14;
          }
          while (v14 < (int)objc_msgSend(a3, "numberOfRequestedVariants"));
        }
        cs_reportLivePhotoMovieCoreAnalyticsData((uint64_t)a1, a3, v5, 0);
      }
    }
  }
}

void captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *v6;
  CFUserNotificationRef v7;
  CFUserNotificationRef v8;
  NSObject *global_queue;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[6];
  SInt32 error;
  _QWORD v16[2];
  _QWORD v17[19];

  v17[18] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken != -1)
    dispatch_once(&cs_initializeVideoRecordingWhileMultitaskingStatics_onceToken, &__block_literal_global_323);
  os_unfair_lock_lock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  if (sVideoRecordingWhileMultitaskingDialogDisplayed)
  {
    if (!dword_1ECFE9590)
      goto LABEL_13;
    goto LABEL_11;
  }
  if (sVideoRecordingWhileMultitaskingDialogInFlight == 1)
  {
LABEL_11:
    error = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_12;
  }
  if (dword_1ECFE9590)
  {
    error = 0;
    v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  error = 0;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.CMCapture"), v12, v13);
  v3 = objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("VIDEO_RECORDING_WHILE_MULTITASKING_OK_BUTTON"), &stru_1E4928818, CFSTR("Localizable"));
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("VIDEO_RECORDING_WHILE_MULTITASKING_MESSAGE"), &stru_1E4928818, CFSTR("Localizable"));
  v5 = *MEMORY[0x1E0C9B810];
  v16[0] = *MEMORY[0x1E0C9B838];
  v16[1] = v5;
  v17[0] = v3;
  v17[1] = v4;
  v6 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v7 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0.0, 0, &error, v6);
  if (!v7)
  {
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_12:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_13;
  }
  v8 = v7;
  sVideoRecordingWhileMultitaskingDialogInFlight = 1;
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = v8;
  block[5] = DerivedStorage;
  dispatch_async(global_queue, block);
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
}

void cs_reportLivePhotoMovieCoreAnalyticsData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  BWLivePhotoMovieAnalyticsPayload *v9;
  float v10;
  float v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v8 = *(unsigned int *)(DerivedStorage + 368);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  v9 = objc_alloc_init(BWLivePhotoMovieAnalyticsPayload);
  -[BWLivePhotoMovieAnalyticsPayload setClientIDType:](v9, "setClientIDType:", +[BWCoreAnalyticsReporter clientApplicationIDType:](BWCoreAnalyticsReporter, "clientApplicationIDType:", *(_QWORD *)(DerivedStorage + 56)));
  -[BWLivePhotoMovieAnalyticsPayload setRecordingSucceeded:](v9, "setRecordingSucceeded:", a4);
  -[BWLivePhotoMovieAnalyticsPayload setErrorStatus:](v9, "setErrorStatus:", a3);
  -[BWLivePhotoMovieAnalyticsPayload setSessionStatus:](v9, "setSessionStatus:", v8);
  -[BWLivePhotoMovieAnalyticsPayload setLongPressMovie:](v9, "setLongPressMovie:", objc_msgSend((id)objc_msgSend(a2, "settings"), "isIrisMovieRecording"));
  -[BWLivePhotoMovieAnalyticsPayload setOriginalRecording:](v9, "setOriginalRecording:", objc_msgSend(a2, "isOriginalPhotoRecording"));
  if (a2)
  {
    objc_msgSend(a2, "stillImageCaptureTime");
    -[BWLivePhotoMovieAnalyticsPayload setHasStillImagePTS:](v9, "setHasStillImagePTS:", BYTE4(v31) & 1);
    objc_msgSend(a2, "movieTrimEndTime");
    objc_msgSend(a2, "movieTrimStartTime");
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    -[BWLivePhotoMovieAnalyticsPayload setHasStillImagePTS:](v9, "setHasStillImagePTS:", 0);
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
  }
  CMTimeSubtract(&time, &lhs, &rhs);
  -[BWLivePhotoMovieAnalyticsPayload setMovieDurationInSeconds:](v9, "setMovieDurationInSeconds:", CMTimeGetSeconds(&time));
  if (a2)
  {
    objc_msgSend(a2, "stillImageCaptureTime");
    objc_msgSend(a2, "movieTrimStartTime");
  }
  else
  {
    memset(&v25, 0, sizeof(v25));
    memset(&v24, 0, sizeof(v24));
  }
  CMTimeSubtract(&v26, &v25, &v24);
  -[BWLivePhotoMovieAnalyticsPayload setStillTimeOffsetInSeconds:](v9, "setStillTimeOffsetInSeconds:", CMTimeGetSeconds(&v26));
  if (a2)
    objc_msgSend(a2, "stillTimeOffsetToVideoPrerollStartTime");
  else
    memset(&v23, 0, sizeof(v23));
  -[BWLivePhotoMovieAnalyticsPayload setStillTimeOffsetToVideoPrerollStartInMilliseconds:](v9, "setStillTimeOffsetToVideoPrerollStartInMilliseconds:", CMTimeGetSeconds(&v23) * 1000.0);
  if (a2)
    objc_msgSend(a2, "stillTimeOffsetToVideoPrerollStopTime");
  else
    memset(&v22, 0, sizeof(v22));
  -[BWLivePhotoMovieAnalyticsPayload setStillTimeOffsetToVideoPrerollStopInMilliseconds:](v9, "setStillTimeOffsetToVideoPrerollStopInMilliseconds:", CMTimeGetSeconds(&v22) * 1000.0);
  if (a2)
    objc_msgSend(a2, "stillTimeOffsetToAudioPrerollStartTime");
  else
    memset(&v21, 0, sizeof(v21));
  -[BWLivePhotoMovieAnalyticsPayload setStillTimeOffsetToAudioPrerollStartInMilliseconds:](v9, "setStillTimeOffsetToAudioPrerollStartInMilliseconds:", CMTimeGetSeconds(&v21) * 1000.0);
  if (a2)
    objc_msgSend(a2, "stillTimeOffsetToAudioPrerollStopTime");
  else
    memset(&v20, 0, sizeof(v20));
  -[BWLivePhotoMovieAnalyticsPayload setStillTimeOffsetToAudioPrerollStopInMilliseconds:](v9, "setStillTimeOffsetToAudioPrerollStopInMilliseconds:", CMTimeGetSeconds(&v20) * 1000.0);
  -[BWLivePhotoMovieAnalyticsPayload setOverlappingCapture:](v9, "setOverlappingCapture:", objc_msgSend(a2, "isOverlappingRequest"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureLuxLevel:](v9, "setStillCaptureLuxLevel:", objc_msgSend(a2, "stillImageCaptureLuxLevel"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCapturePortType:](v9, "setStillCapturePortType:", objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureSettings"), "masterPortType"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureType:](v9, "setStillCaptureType:", objc_msgSend((id)objc_msgSend(a2, "stillImageCaptureSettings"), "captureType"));
  -[BWLivePhotoMovieAnalyticsPayload setStillCaptureResolutionFlavor:](v9, "setStillCaptureResolutionFlavor:", objc_msgSend((id)objc_msgSend(a2, "stillImageRequestSettings"), "resolutionFlavor"));
  -[BWLivePhotoMovieAnalyticsPayload setMaxSystemPressureLevel:](v9, "setMaxSystemPressureLevel:", objc_msgSend(a2, "maxSystemPressureLevel"));
  objc_msgSend(a2, "targetFrameRate");
  -[BWLivePhotoMovieAnalyticsPayload setTargetFrameRate:](v9, "setTargetFrameRate:", v10);
  -[BWLivePhotoMovieAnalyticsPayload setNumberOfFramesDropped:](v9, "setNumberOfFramesDropped:", objc_msgSend(a2, "numberOfFramesDropped"));
  -[BWLivePhotoMovieAnalyticsPayload setRetimingRecipeIdentifier:](v9, "setRetimingRecipeIdentifier:", objc_msgSend(a2, "irisSequenceAdjusterRecipeIdentifier"));
  if (objc_msgSend(a2, "isTransitionVitalityScoreValid"))
  {
    objc_msgSend(a2, "transitionVitalityScoreV1");
    -[BWLivePhotoMovieAnalyticsPayload setTransitionVitalityScoreV1:](v9, "setTransitionVitalityScoreV1:", v11);
  }
  -[BWLivePhotoMovieAnalyticsPayload setTransitionVitalityFeatures:](v9, "setTransitionVitalityFeatures:", objc_msgSend(a2, "transitionVitalityFeatures"));
  v12 = (void *)objc_msgSend(a2, "stagingNodeOverallVideoFrameReceptionStats");
  if (v12)
  {
    v13 = v12;
    if (objc_msgSend(v12, "numberOfSamples") >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallNumberOfVideoFramesReceived:](v9, "setStagingNodeOverallNumberOfVideoFramesReceived:", objc_msgSend(v13, "numberOfSamples"));
      objc_msgSend(v13, "average");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallAverageTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallAverageTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v13, "standardDeviation");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v13, "min");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallMinimumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallMinimumTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v13, "max");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeOverallMaximumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeOverallMaximumTimeBetweenVideoFramesInMilliseconds:");
    }
  }
  v14 = (void *)objc_msgSend(a2, "stagingNodeValveActiveVideoFrameReceptionStats");
  if (v14)
  {
    v15 = v14;
    if (objc_msgSend(v14, "numberOfSamples") >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveNumberOfVideoFramesReceived:](v9, "setStagingNodeValveActiveNumberOfVideoFramesReceived:", objc_msgSend(v15, "numberOfSamples"));
      objc_msgSend(v15, "average");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveAverageTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveAverageTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v15, "standardDeviation");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveStandardDeviationOfTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v15, "min");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveMinimumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveMinimumTimeBetweenVideoFramesInMilliseconds:");
      objc_msgSend(v15, "max");
      -[BWLivePhotoMovieAnalyticsPayload setStagingNodeValveActiveMaximumTimeBetweenVideoFramesInMilliseconds:](v9, "setStagingNodeValveActiveMaximumTimeBetweenVideoFramesInMilliseconds:");
    }
  }
  v16 = (void *)objc_msgSend(a2, "fileCoordinatorToWriterMovingWindowLatencyStats");
  if (v16)
  {
    v17 = v16;
    if (objc_msgSend(v16, "numberOfSamples") >= 1)
    {
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyNumberOfSamples:](v9, "setFileCoordinatorToWriterMovingWindowLatencyNumberOfSamples:", objc_msgSend(v17, "numberOfSamples"));
      objc_msgSend(v17, "average");
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyAverageInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyAverageInMilliseconds:");
      objc_msgSend(v17, "standardDeviation");
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyStandardDeviationInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyStandardDeviationInMilliseconds:");
      objc_msgSend(v17, "min");
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyMinimumInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyMinimumInMilliseconds:");
      objc_msgSend(v17, "max");
      -[BWLivePhotoMovieAnalyticsPayload setFileCoordinatorToWriterMovingWindowLatencyMaximumInMilliseconds:](v9, "setFileCoordinatorToWriterMovingWindowLatencyMaximumInMilliseconds:");
    }
  }
  v18 = (void *)objc_msgSend(a2, "videoFrameDurationStats");
  if (v18)
  {
    v19 = v18;
    if (objc_msgSend(v18, "numberOfSamples") >= 1)
    {
      objc_msgSend(v19, "min");
      -[BWLivePhotoMovieAnalyticsPayload setMinVideoFrameDurationInMilliseconds:](v9, "setMinVideoFrameDurationInMilliseconds:");
      objc_msgSend(v19, "max");
      -[BWLivePhotoMovieAnalyticsPayload setMaxVideoFrameDurationInMilliseconds:](v9, "setMaxVideoFrameDurationInMilliseconds:");
      objc_msgSend(v19, "average");
      -[BWLivePhotoMovieAnalyticsPayload setAverageVideoFrameDurationInMilliseconds:](v9, "setAverageVideoFrameDurationInMilliseconds:");
      objc_msgSend(v19, "median");
      -[BWLivePhotoMovieAnalyticsPayload setMedianVideoFrameDurationInMilliseconds:](v9, "setMedianVideoFrameDurationInMilliseconds:");
      objc_msgSend(v19, "standardDeviation");
      -[BWLivePhotoMovieAnalyticsPayload setVideoFrameDurationStandardDeviationInMilliseconds:](v9, "setVideoFrameDurationStandardDeviationInMilliseconds:");
    }
  }
  -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance"), "sendEvent:", v9);

}

uint64_t cs_setSceneClassifierSuspended(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "sourceConfiguration"), "sourceID");
  v7 = objc_msgSend((id)objc_msgSend(a2, "stillImageConnectionConfiguration"), "underlyingDeviceType");
  -[FigCaptureMovieFileSinkPipeline setSceneClassifierSuspended:](objc_msgSend(a1, "movieFileSinkPipelineWithSourceID:sourceDeviceType:", v6, v7), a3);
  objc_msgSend((id)objc_msgSend(a1, "previewSinkPipelineWithSourceID:sourceDeviceType:", v6, v7), "setSceneClassifierSuspended:", a3);
  return FigMemoryBarrier();
}

void captureSession_didCaptureIrisStill(const void *a1, void *a2, void *a3, void *a4, void *a5, CMTime *a6, unsigned int a7, _BYTE *a8)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  NSObject *v23;
  const void *v24;
  id v25;
  CMTime *v26;
  os_unfair_lock_s *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  unsigned int v32;
  BWColorLookupCache *v33;
  void *v34;
  void *v35;
  os_unfair_lock_s *v36;
  BWIrisMovieInfo *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  BWIrisMovieInfo *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t DerivedStorage;
  unsigned int v52;
  uint64_t v53;
  void *v55;
  _QWORD v56[10];
  CMTime v57;
  os_log_type_t type[16];
  CMTimeEpoch epoch;
  CMTime v60;
  os_log_type_t v61;
  CMTime rhs;
  CMTime v63;
  CMClockOrTimebaseRef toClockOrTimebase;
  CMTime lhs;
  CMTime time;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    LODWORD(v63.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v52 = a7;
  v15 = a3;
  v16 = (void *)objc_msgSend(a3, "stillImageSinkPipeline", v45, v47);
  if (a5)
  {
    v17 = a5;
    v18 = objc_msgSend(a5, "captureType");
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  if (objc_msgSend(a4, "movieMode"))
  {
    v49 = v18;
    v19 = objc_msgSend(a2, "movieFileSinkPipelineWithSinkID:", objc_msgSend(v16, "sinkID"));
    v20 = objc_msgSend(v15, "cameraSourcePipeline");
    v21 = (void *)objc_msgSend(a4, "movieRecordingSettings");
    toClockOrTimebase = 0;
    cs_getMasterClockAndType(a2, (uint64_t *)&toClockOrTimebase, 0);
    v63 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (objc_msgSend(a4, "movieMode") == 2)
    {
      if (cs_touchDownMomentStillCaptureEnabled_onceToken != -1)
        dispatch_once(&cs_touchDownMomentStillCaptureEnabled_onceToken, &__block_literal_global_357);
      CMTimeMake(&rhs, a6->timescale / 1000, a6->timescale);
      lhs = *a6;
      CMTimeAdd(&time, &lhs, &rhs);
      *a6 = time;
      v22 = (const void *)-[FigCaptureCameraSourcePipeline clock](v20);
      time = *a6;
      CMSyncConvertTime(&v63, &time, v22, toClockOrTimebase);
      if (dword_1ECFE9590)
      {
        *(_DWORD *)type = 0;
        v61 = OS_LOG_TYPE_DEFAULT;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTimeMake(&v60, 1, 2);
      lhs = *a6;
      CMTimeAdd(&time, &lhs, &v60);
      *a6 = time;
    }
    memset(&time, 0, sizeof(time));
    v24 = (const void *)-[FigCaptureCameraSourcePipeline clock](v20);
    lhs = *a6;
    CMSyncConvertTime(&time, &lhs, v24, toClockOrTimebase);
    if (v52)
    {
      if (!objc_msgSend(a4, "providesOriginalImage") || !objc_msgSend(a4, "movieURLForOriginalImage"))
        return;
      v53 = v20;
      v25 = (id)objc_msgSend(v21, "copy");
      objc_msgSend(v25, "setOutputURL:", objc_msgSend(a4, "movieURLForOriginalImage"));
      if (objc_msgSend(a4, "movieLevelMetadataForOriginalImage"))
        objc_msgSend(v25, "setMovieLevelMetadata:", objc_msgSend(a4, "movieLevelMetadataForOriginalImage"));
      v26 = a6;
      v55 = (void *)v19;
      v27 = (os_unfair_lock_s *)DerivedStorage;
      if (objc_msgSend(v25, "spatialOverCaptureMovieURL", v46, v48))
      {
        objc_msgSend(v25, "setSpatialOverCaptureMovieURL:", objc_msgSend(a4, "spatialOverCaptureMovieURLForOriginalImage"));
        v28 = v25;
        objc_msgSend(v25, "setSpatialOverCaptureMovieLevelMetadata:", objc_msgSend(a4, "spatialOverCaptureMovieLevelMetadataForOriginalImage"));
      }
      else
      {
        v28 = v25;
      }
    }
    else
    {
      v53 = v20;
      v28 = v21;
      v26 = a6;
      v55 = (void *)v19;
      v27 = (os_unfair_lock_s *)DerivedStorage;
    }
    v29 = (void *)objc_msgSend(a4, "semanticStyle", v46);
    if ((objc_msgSend(v29, "isIdentity") & 1) != 0)
    {
      v30 = 0;
    }
    else
    {
      v31 = objc_msgSend(v28, "isIrisMovieRecording");
      v30 = 0;
      if (v29 && (v31 & 1) == 0)
      {
        v32 = objc_msgSend((id)objc_msgSend(v17, "metadata"), "semanticStyleSceneType");
        v33 = objc_alloc_init(BWColorLookupCache);
        v34 = BWSemanticStyleFiltersForSemanticStyleAndFilterToCombine(v29, v32, 1, 0, 0, v33, 0);

        v35 = (void *)objc_msgSend(v34, "firstObject");
        NSClassFromString(CFSTR("CIColorCubesMixedWithMask"));
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v28, "setPersonSegmentationRenderingEnabled:", 1);
          objc_msgSend(v28, "setPersonSegmentationForegroundColorCube:", objc_msgSend(v35, "cube0Data"));
          objc_msgSend(v28, "setPersonSegmentationBackgroundColorCube:", objc_msgSend(v35, "cube1Data"));
        }
        v30 = v29;
      }
    }
    v36 = v27;
    objc_msgSend(a4, "stillImageCaptureAbsoluteStartTime");
    lhs = time;
    *(_OWORD *)type = *(_OWORD *)&v26->value;
    epoch = v26->epoch;
    v37 = +[BWIrisMovieInfo irisMovieInfoWithFigCaptureMovieFileRecordingSettings:stillImageCaptureTime:stillImageCaptureHostTime:stillImageCaptureAbsoluteStartTime:stillImageRequestSettings:stillImageCaptureSettings:originalPhotoRecording:semanticStyle:](BWIrisMovieInfo, "irisMovieInfoWithFigCaptureMovieFileRecordingSettings:stillImageCaptureTime:stillImageCaptureHostTime:stillImageCaptureAbsoluteStartTime:stillImageRequestSettings:stillImageCaptureSettings:originalPhotoRecording:semanticStyle:", v28, &lhs, type, a4, v17, v52, v30);
    if (objc_msgSend(a4, "movieMode") == 2)
      -[BWIrisMovieInfo setMomentCaptureMovieRecording:](v37, "setMomentCaptureMovieRecording:", 1);
    if (v17)
    {
      -[BWIrisMovieInfo setSpatialOverCaptureExpected:](v37, "setSpatialOverCaptureExpected:", 0);
    }
    else
    {
      v38 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v53);
      if (objc_msgSend(v28, "spatialOverCaptureMovieURL"))
        v39 = objc_msgSend(v38, "needsToRelieveSystemPressure") ^ 1;
      else
        v39 = 0;
      -[BWIrisMovieInfo setSpatialOverCaptureExpected:](v37, "setSpatialOverCaptureExpected:", v39);
      if (a8)
        *a8 = -[BWIrisMovieInfo spatialOverCaptureExpected](v37, "spatialOverCaptureExpected");
    }
    objc_msgSend(a4, "nonDestructiveCropSize");
    -[BWIrisMovieInfo setNonDestructiveCropSize:](v37, "setNonDestructiveCropSize:");
    if ((captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings((uint64_t)a1, v28) & 1) == 0)
    {
      v40 = objc_msgSend(v55, "sinkID");
      v41 = a1;
      v42 = v37;
      v43 = 4294951864;
      goto LABEL_42;
    }
    if (objc_msgSend(v55, "checkIfFileAlreadyExistForMFO")
      && captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(v28))
    {
      v40 = objc_msgSend(v55, "sinkID");
      v41 = a1;
      v42 = v37;
      v43 = 4294950886;
LABEL_42:
      captureSession_postNotificationsForIrisRequestCompletedWithError(v41, v40, v42, v43);
      return;
    }
    if (-[FigCaptureMovieFileSinkPipeline sdofCompressorNodes]((uint64_t)v55))
    {
      if (v49 == 3)
      {
        if (v52)
          v44 = 2;
        else
          v44 = 1;
      }
      else if (objc_msgSend(a4, "providesOriginalImage") && objc_msgSend(a4, "movieURLForOriginalImage"))
      {
        -[BWIrisMovieInfo setOutputURLForSDOFOriginalMovie:](v37, "setOutputURLForSDOFOriginalMovie:", objc_msgSend(a4, "movieURLForOriginalImage"));
        -[BWIrisMovieInfo setMovieLevelMetadataForSDOFOriginalMovie:](v37, "setMovieLevelMetadataForSDOFOriginalMovie:", objc_msgSend(a4, "movieLevelMetadataForOriginalImage"));
        v44 = 3;
      }
      else
      {
        v44 = 1;
      }
      -[BWIrisMovieInfo setRequestedSDOFVariants:](v37, "setRequestedSDOFVariants:", v44);
    }
    os_unfair_lock_lock(v36 + 80);
    os_unfair_lock_unlock(v36 + 80);
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = __captureSession_didCaptureIrisStill_block_invoke;
    v56[3] = &unk_1E4922E38;
    v57 = v63;
    v56[4] = a4;
    v56[5] = v37;
    v56[6] = v55;
    v56[7] = v17;
    v56[8] = v36;
    v56[9] = a1;
    captureSession_dispatchGraphCalloutToWorkerQueueAfter(a1, (uint64_t)v56, 0.0);
  }
}

unint64_t cs_removeEmptyPendingIrisRecording(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v18 = v3;
    LODWORD(v16) = 0;
    FigDebugAssert3();
  }
  v7 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelineWithSinkID:", a2, v16, v18);
  v21 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = (void *)objc_msgSend(v7, "pendingIrisRecordings");
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        if (objc_msgSend((id)objc_msgSend(v13, "settings", v17, v19), "settingsID") == a3)
        {
          if (objc_msgSend(v13, "isEmpty"))
          {
            objc_msgSend(v21, "addObject:", v13);
            if (dword_1ECFE9590)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }
  objc_msgSend((id)objc_msgSend(v7, "pendingIrisRecordings", v17), "removeObjectsInArray:", v21);
  return captureSession_servicePendingIrisRecordings(a1, v7, 0);
}

void sub_1A2F8FAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1A2F8FCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t cs_figCaptureColorSpaceFromSourcePipeline(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = -[FigCaptureCameraSourcePipeline colorSpaceProperties](a1);
  if (v1 > 0xB || (v2 = 1, ((1 << v1) & 0x818) == 0))
  {
    if (v1 == 10)
      v3 = 3;
    else
      v3 = 0;
    if (v1 == 6)
      v3 = 2;
    if ((v1 & 0xFFFFFFFD) == 5)
      return 4;
    else
      return v3;
  }
  return v2;
}

void captureSession_abandonCameraAppSessionStartupTelemetry()
{
  _DWORD *v0;
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  BOOL v5;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[2];
  __int16 v10;

  os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
  if (!dword_1ECFE9D84)
    goto LABEL_22;
  v0 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (dword_1ECFE9D84 != 2)
  {
    if (dword_1ECFE9D84 != 1 || *MEMORY[0x1E0CA1FC0] == 0)
      goto LABEL_13;
    v1 = fig_log_handle();
    if (!os_signpost_enabled(v1))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v2 = "CameraLaunchWithoutPrewarm";
    v3 = buf;
    goto LABEL_12;
  }
  if (*MEMORY[0x1E0CA1FC0])
  {
    v1 = fig_log_handle();
    if (os_signpost_enabled(v1))
    {
      v10 = 0;
      v2 = "CameraAppLaunchWithOrigin";
      v3 = (uint8_t *)&v10;
LABEL_12:
      _os_signpost_emit_with_name_impl(&dword_1A2C80000, v1, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v2, (const char *)&unk_1A332D80B, v3, 2u);
    }
  }
LABEL_13:
  if ((_QWORD)xmmword_1ECFE9DB0)
    v5 = *((_QWORD *)&xmmword_1ECFE9DB0 + 1) == 0;
  else
    v5 = 0;
  if (v5 && *v0 != 0)
  {
    v7 = fig_log_handle();
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)v8 = 0;
      _os_signpost_emit_with_name_impl(&dword_1A2C80000, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CaptureDeviceStolenDuringLaunch", (const char *)&unk_1A332D80B, v8, 2u);
    }
  }
LABEL_22:
  os_unfair_lock_assert_owner(&sFigCaptureSessionCameraAppStartupTelemetry);
  dword_1ECFE9D84 = 0;
  byte_1ECFE9D88 = 0;
  xmmword_1ECFE9D90 = 0u;
  *(_OWORD *)&qword_1ECFE9DA0 = 0u;
  xmmword_1ECFE9DB0 = 0u;
  qword_1ECFE9DC8 = 0;
  *(uint64_t *)((char *)&qword_1ECFE9DC8 + 5) = 0;

  qword_1ECFE9DC0 = 0;
}

void captureSession_reportCancelledLockScreenCameraLaunch()
{
  uint64_t v0;
  uint64_t v1;
  BWCameraLockScreenLaunchAnalyticsPayload *v2;

  os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
  v0 = word_1EE6BF328;
  v1 = HIBYTE(word_1EE6BF328);
  -[BWAggdDataReporter reportLockScreenCameraLaunchCancelledWithPrewarming:ispStreamingStarted:](+[BWAggdDataReporter sharedInstance](BWAggdDataReporter, "sharedInstance"), "reportLockScreenCameraLaunchCancelledWithPrewarming:ispStreamingStarted:", word_1EE6BF328, HIBYTE(word_1EE6BF328));
  v2 = objc_alloc_init(BWCameraLockScreenLaunchAnalyticsPayload);
  -[BWCameraLockScreenLaunchAnalyticsPayload setCompleted:](v2, "setCompleted:", 0);
  -[BWCameraLockScreenLaunchAnalyticsPayload setPrewarmed:](v2, "setPrewarmed:", v0);
  -[BWCameraLockScreenLaunchAnalyticsPayload setIspStreamingStarted:](v2, "setIspStreamingStarted:", v1);
  -[BWCameraLockScreenLaunchAnalyticsPayload setLaunchError:](v2, "setLaunchError:", 0);
  -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance"), "sendEvent:", v2);

  os_unfair_lock_assert_owner(&sLockScreenCameraLaunchTelemetry);
  byte_1EE6BF31C = 0;
  word_1EE6BF328 = 0;
  dword_1EE6BF32C = 0;
}

void captureSession_createClientApplicationStateMonitor(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  int PIDFromAuditToken;
  __int128 v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 88))
  {
    v6 = *(_OWORD *)(DerivedStorage + 36);
    v17 = *(_OWORD *)(DerivedStorage + 20);
    v18 = v6;
    PIDFromAuditToken = FigCaptureGetPIDFromAuditToken(&v17);
    v8 = a2[1];
    v17 = *a2;
    v18 = v8;
    if (PIDFromAuditToken == FigCaptureGetPIDFromAuditToken(&v17))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    objc_msgSend(*(id *)(v5 + 88), "invalidate");

  }
  v10 = a2[1];
  v17 = *a2;
  v18 = v10;
  if (FigCaptureClientIsRunningInMediaserverd(&v17))
  {
    v11 = 0;
  }
  else
  {
    v12 = a2[1];
    v17 = *a2;
    v18 = v12;
    v11 = FigCaptureClientIsAVConferenced(&v17) == 0;
  }
  *(_BYTE *)(v5 + 96) = v11;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __captureSession_createClientApplicationStateMonitor_block_invoke;
  v14[3] = &__block_descriptor_80_e5_v8__0l;
  v13 = a2[1];
  v15 = *a2;
  v16 = v13;
  v14[4] = v5;
  v14[5] = a1;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v14);
}

uint64_t FigCaptureSessionGetStatus()
{
  os_unfair_lock_s *DerivedStorage;
  os_unfair_lock_s *v1;
  uint64_t os_unfair_lock_opaque;

  DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage + 80;
  os_unfair_lock_lock(DerivedStorage + 80);
  os_unfair_lock_opaque = DerivedStorage[92]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v1);
  return os_unfair_lock_opaque;
}

uint64_t FigCaptureSessionSetVideoPreviewTapCallback(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = (os_unfair_lock_s *)(DerivedStorage + 176);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 176));
  v9 = *(_QWORD *)(v7 + 184);
  if (a2)
  {
    if (v9)
    {
      os_unfair_lock_unlock(v8);
      return FigSignalErrorAt();
    }
    *(_QWORD *)(v7 + 184) = a2;
    *(_QWORD *)(v7 + 192) = a3;
    *(_BYTE *)(v7 + 200) = 0;
    os_unfair_lock_unlock(v8);
    captureSession_updatePreviewSinkConnectionEnabledState(a1);
  }
  else
  {
    v10 = *(_QWORD *)(v7 + 192);
    *(_QWORD *)(v7 + 184) = 0;
    *(_QWORD *)(v7 + 192) = 0;
    os_unfair_lock_unlock(v8);
    if (!v9)
      return FigSignalErrorAt();
    captureSession_updatePreviewSinkConnectionEnabledState(a1);
    v11 = *(NSObject **)(v7 + 208);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __FigCaptureSessionSetVideoPreviewTapCallback_block_invoke;
    v13[3] = &__block_descriptor_48_e5_v8__0l;
    v13[4] = v9;
    v13[5] = v10;
    dispatch_async(v11, v13);
  }
  return 0;
}

void captureSession_updatePreviewSinkConnectionEnabledState(const void *a1)
{
  uint64_t DerivedStorage;
  _QWORD v3[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __captureSession_updatePreviewSinkConnectionEnabledState_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = DerivedStorage;
  v3[5] = a1;
  captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v3);
}

BOOL FigCaptureSessionSupportsLaunchPrewarmingBundleID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2)
    *a2 = *(id *)(DerivedStorage + 56);
  return *(_BYTE *)(v4 + 364) && *(_BYTE *)(v4 + 365) != 0;
}

uint64_t FigCaptureSessionDetachFromClient(const void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v4;
  _QWORD v5[6];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954511;
  v4 = DerivedStorage;
  captureSession_updateSessionStateWithApplicationAndLayoutState(a1, 1, 0, 0, 0);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigCaptureSessionDetachFromClient_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = v4;
  v5[5] = a1;
  captureSession_performBlockOnWorkerQueueSynchronously((uint64_t)a1, (uint64_t)v5);
  return 0;
}

void captureSession_updateSessionStateWithApplicationAndLayoutState(const void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  os_unfair_lock_s *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 shouldStartDeferredGraphSetup;
  double v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  int v25;
  _QWORD v26[5];
  os_log_type_t type;
  int v28;
  _QWORD v29[5];
  float v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30 = 0.0;
  if (!*(_BYTE *)DerivedStorage)
  {
    v11 = DerivedStorage;
    v12 = (os_unfair_lock_s *)(DerivedStorage + 320);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    if (*(_BYTE *)(v11 + 336))
      v13 = 0;
    else
      v13 = a2;
    if (*(_BYTE *)(v11 + 336))
      v14 = a2 ^ 1;
    else
      v14 = 0;
    *(_BYTE *)(v11 + 336) = a2;
    *(_BYTE *)(v11 + 337) = a3;
    *(_BYTE *)(v11 + 338) = a4;
    *(_BYTE *)(v11 + 339) = a5;
    if (*(_DWORD *)(v11 + 368) == 2)
    {
      objc_msgSend(*(id *)(v11 + 392), "setWindowed:", objc_msgSend(*(id *)(v11 + 392), "windowed") | a4);
      objc_msgSend(*(id *)(v11 + 392), "setPipEnabled:", objc_msgSend(*(id *)(v11 + 392), "pipEnabled") | a5);
    }
    if (*(_BYTE *)(v11 + 335))
      v15 = a3 == 0;
    else
      v15 = 1;
    v16 = MEMORY[0x1E0C809B0];
    if (!v15)
    {
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke;
      v29[3] = &__block_descriptor_40_e5_v8__0l;
      v29[4] = v11;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v29);
      if (*(_QWORD *)(v11 + 552) == 1)
        *(_BYTE *)(v11 + 560) = 1;
    }
    if (((*(_BYTE *)(v11 + 336) == 0) & ~v14) == 0)
    {
      *(_BYTE *)(v11 + 340) = 0;
      *(_BYTE *)(v11 + 342) = 0;
      if (*(_BYTE *)(v11 + 334))
        *(_BYTE *)(v11 + 344) = 0;
    }
    if (v14)
    {
      if (*(_BYTE *)(v11 + 333))
      {
        *(_BYTE *)(v11 + 333) = 0;
        captureSession_cancelPrewarmingTimeoutTimer();
        *(_QWORD *)(v11 + 504) = mach_absolute_time();
        shouldStartDeferredGraphSetup = captureSession_shouldStartDeferredGraphSetup(v11, &v30);
      }
      else
      {
        shouldStartDeferredGraphSetup = 0;
      }
      if (*(double *)(v11 + 512) > 0.0)
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        if (v18 > *(double *)(v11 + 512))
        {
          if (dword_1ECFE9590)
          {
            v28 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v16 = MEMORY[0x1E0C809B0];
          }
          *(_BYTE *)(v11 + 332) = 0;
        }
        *(_QWORD *)(v11 + 512) = 0;
      }
    }
    else
    {
      shouldStartDeferredGraphSetup = 0;
    }
    if (v13)
      *(_QWORD *)(v11 + 504) = 0;
    captureSession_updateRunningCondition(a1, 0, 0);
    os_unfair_lock_unlock(v12);
    if (shouldStartDeferredGraphSetup)
    {
      if (dword_1ECFE9590)
      {
        v28 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      captureSession_startDeferredGraphSetupOnWorkerQueueAfter(a1, v30);
    }
    if (v13)
    {
      if (cs_clientWantsAudioResumptionOnBackground(*(void **)(v11 + 56)))
      {
        v26[0] = v16;
        v26[1] = 3221225472;
        v26[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_626;
        v26[3] = &__block_descriptor_40_e5_v8__0l;
        v26[4] = v11;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v26);
      }
      +[BWAutoFocusPositionSensorMonitor clientHasBeenBackgrounded](BWAutoFocusPositionSensorMonitor, "clientHasBeenBackgrounded", v22, v23);
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 716));
      v21 = *(_DWORD *)(v11 + 712);
      *(_DWORD *)(v11 + 712) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 716));
      v24[0] = v16;
      v24[1] = 3221225472;
      v24[2] = __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_2;
      v24[3] = &__block_descriptor_36_e5_v8__0l;
      v25 = v21;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v24);
    }
  }
}

void captureSession_performBlockOnWorkerQueueSynchronously(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 104);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSession_performBlockOnWorkerQueueSynchronously_block_invoke;
    block[3] = &unk_1E491ECB8;
    block[4] = a2;
    dispatch_sync(v4, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void captureSession_destroyAudioSessionForMicPipeline()
{
  uint64_t DerivedStorage;
  int v1;
  uint64_t v2;
  int IsCurrentDispatchQueue;
  uint64_t v4;
  id *v5;
  _QWORD *v6;
  void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  v1 = FigCaptureAudiomxdSupportEnabled();
  v2 = CMBaseObjectGetDerivedStorage();
  IsCurrentDispatchQueue = _FigIsCurrentDispatchQueue();
  if (v1)
  {
    if (!IsCurrentDispatchQueue)
      FigDebugAssert3();
    v4 = *(_QWORD *)(v2 + 280);
    if (v4)
    {
      v5 = (id *)(v2 + 280);
      objc_msgSend(*(id *)(v2 + 216), "removeObserverForType:observer:name:", 1, v4, *MEMORY[0x1E0CFF008]);
LABEL_14:

      *v5 = 0;
    }
  }
  else
  {
    if (!IsCurrentDispatchQueue)
      FigDebugAssert3();
    if (*(_QWORD *)(v2 + 280))
    {
      v5 = (id *)(v2 + 280);
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *(_QWORD *)(v2 + 280));
      goto LABEL_14;
    }
  }
  if (FigCaptureAudiomxdSupportEnabled())
  {
    v7 = *(void **)(DerivedStorage + 216);
    v6 = (_QWORD *)(DerivedStorage + 216);

  }
  else
  {
    v9 = *(const void **)(DerivedStorage + 224);
    v6 = (_QWORD *)(DerivedStorage + 224);
    v8 = v9;
    if (!v9)
      return;
    CFRelease(v8);
  }
  *v6 = 0;
}

uint64_t captureSession_transitionToSessionLaunchPrewarmStatus(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v4 = result;
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(v4 + 360) = a2;
  return result;
}

void FigCaptureSessionAttachToClient(uint64_t a1, __int128 *a2)
{
  _BYTE *DerivedStorage;
  __int128 v5;
  _QWORD v6[6];
  __int128 v7;
  __int128 v8;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigCaptureSessionAttachToClient_block_invoke;
    v6[3] = &__block_descriptor_80_e5_v8__0l;
    v5 = a2[1];
    v7 = *a2;
    v8 = v5;
    v6[4] = DerivedStorage;
    v6[5] = a1;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v6);
  }
}

uint64_t cs_bundleIdentifierIsSecureCaptureExtension(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  os_unfair_lock_assert_not_owner(&sFigCaptureSessionPrewarming);
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (objc_msgSend((id)qword_1ECFE9DE8, "objectForKey:", a1))
  {
    v2 = objc_msgSend((id)objc_msgSend((id)qword_1ECFE9DE8, "objectForKeyedSubscript:", a1), "BOOLValue");
  }
  else
  {
    if (!qword_1ECFE9DE8)
      qword_1ECFE9DE8 = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v6 = 0;
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", a1, 0, &v6);
    objc_opt_class();
    v2 = 0;
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v3, "extensionPointRecord"), "identifier"), "isEqualToString:", 0x1E493D958);
    v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v2);
    objc_msgSend((id)qword_1ECFE9DE8, "setObject:forKeyedSubscript:", v4, a1);
  }
  os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  return v2;
}

uint64_t cs_isPocketDetectionNeeded(uint64_t a1)
{
  uint64_t v1;

  v1 = a1;
  if (a1
    && (!cs_bundleIdentifierIsSecureCaptureExtension(a1)
     || (v1 = (uint64_t)cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier(v1)) != 0))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
    if (qword_1EE6BEC78)
      v1 = CFEqual((CFTypeRef)v1, (CFTypeRef)qword_1EE6BEC78) != 0;
    else
      v1 = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
  }
  else
  {
    FigDebugAssert3();
  }
  return v1;
}

void FigCaptureSessionCancelPrewarm(void *a1)
{
  const void *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (initializeGlobals_initializeGlobalsOnceToken != -1)
    dispatch_once(&initializeGlobals_initializeGlobalsOnceToken, &__block_literal_global_616);
  os_unfair_lock_lock(&sFigCaptureSessionPrewarming);
  if (a1)
  {
    v2 = (const void *)objc_msgSend((id)objc_msgSend((id)qword_1ECFE9DE0, "objectForKeyedSubscript:", a1), "referencedObject");
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
    if (v2)
    {
      captureSession_cancelPrewarming(v2, 0);
      goto LABEL_14;
    }
  }
  else
  {
    os_unfair_lock_unlock(&sFigCaptureSessionPrewarming);
  }
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E493D4D8, v4, v5) & 1) != 0
    || objc_msgSend(a1, "isEqualToString:", 0x1E493D5F8))
  {
    os_unfair_lock_lock(&sLockScreenCameraLaunchTelemetry);
    if (byte_1EE6BF31C)
      captureSession_reportCancelledLockScreenCameraLaunch();
    os_unfair_lock_unlock(&sLockScreenCameraLaunchTelemetry);
    os_unfair_lock_lock(&sFigCaptureSessionCameraAppStartupTelemetry);
    captureSession_abandonCameraAppSessionStartupTelemetry();
    os_unfair_lock_unlock(&sFigCaptureSessionCameraAppStartupTelemetry);
  }
LABEL_14:
  captureSession_cancelMemoryPoolPrewarming(0, 1);
}

void captureSession_cancelPrewarming(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v5 = DerivedStorage;
    objc_msgSend(*(id *)(DerivedStorage + 88), "updateApplicationState");
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 320));
    if (!a2 || *(_QWORD *)(v5 + 520) == a2)
    {
      if (dword_1ECFE9590)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_BYTE *)(v5 + 333))
      {
        *(_BYTE *)(v5 + 333) = 0;
        *(_BYTE *)(v5 + 499) = 0;
        captureSession_updateRunningCondition(a1, 0, 0);
      }
      captureSession_cancelPrewarmingTimeoutTimer();
    }
    else if (dword_1ECFE9590)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 320));
  }
}

void captureSession_fileStartRecording(const void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, const void *, void (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  const void *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  void *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  void *MovieLevelMetadataWithCinematicVideoGlobalMetadata;
  void *v57;
  uint64_t v58;
  void *MovieLevelMetadataWithActionCameraGlobalMetadata;
  void *CurrentSmartStyle;
  void *MovieLevelMetadataWithSmartStyleMetadata;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  double v67;
  CGFloat v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int v74;
  void *v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  const void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  void *DeepCopy;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  unsigned int v108;
  _DWORD *v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  float v137;
  int v138;
  char v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  _BOOL4 IsHDR;
  uint64_t v149;
  int v150;
  void *v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  void *v155;
  void *v156;
  void *v157;
  int allocator;
  const __CFAllocator *allocatora;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  void *v163;
  void *propertyList;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  CMTime rhs;
  CMTime lhs;
  CMTime v172;
  _QWORD v173[4];
  _QWORD v174[4];
  _BYTE v175[32];
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  os_log_type_t type[8];
  const __CFString *v187;
  const __CFString *v188;
  const __CFString *v189;
  const __CFString *v190;
  _QWORD v191[5];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;

  v6 = v5;
  v200 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v144 = v5;
    LODWORD(v142) = 0;
    FigDebugAssert3();
  }
  objc_msgSend(a3, "outputURL", v142, v144);
  if (FigFileIsFileOnExternalStorageDevice())
  {
    v13 = *(void **)(DerivedStorage + 744);
    if (v13)

    v14 = *(void **)(DerivedStorage + 752);
    if (v14)

    *(_QWORD *)(DerivedStorage + 744) = a3;
    *(_QWORD *)(DerivedStorage + 752) = a2;
    *(_BYTE *)(DerivedStorage + 760) = 0;
    v15 = FigExternalStorageDeviceManagerCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (_QWORD *)(DerivedStorage + 736));
    if ((_DWORD)v15)
    {
      v20 = v15;
      v146 = v5;
      LODWORD(v143) = v15;
    }
    else
    {
      v16 = *(_QWORD *)(DerivedStorage + 736);
      v17 = *(uint64_t (**)(uint64_t, _QWORD, const void *, void (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v17)
      {
        v18 = v17(v16, 0, a1, captureSession_externalStorageDeviceManagerCallback);
        if (!(_DWORD)v18)
          goto LABEL_11;
        v20 = v18;
      }
      else
      {
        v20 = 4294954514;
      }
      v146 = v5;
      LODWORD(v143) = v20;
    }
    FigDebugAssert3();
    v21 = 0;
    goto LABEL_32;
  }
LABEL_11:
  if (((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0
     || objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
    && captureSession_isPrewarming())
  {
    if (dword_1ECFE9590)
    {
      LODWORD(v191[0]) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v5;
    }
    objc_msgSend(*(id *)(DerivedStorage + 88), "updateApplicationState", v143, v145);
  }
  if (captureSession_isPrewarming())
  {
    v146 = v6;
    LODWORD(v143) = 0;
LABEL_81:
    FigDebugAssert3();
    v21 = 0;
    goto LABEL_82;
  }
  if (!*(_BYTE *)(DerivedStorage + 608))
  {
    v146 = v6;
    LODWORD(v143) = 0;
    goto LABEL_81;
  }
  if (!objc_msgSend(*(id *)(DerivedStorage + 592), "resumesConnectionsAsNodesArePrepared")
    || !a4 && !-[FigCaptureCameraSourcePipeline trueVideoCaptureEnabled](0))
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 0);
  }
  v21 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelineWithSinkID:", a2);
  v22 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelineWithSourceID:", -[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v21));
  if ((captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings((uint64_t)a1, a3) & 1) == 0)
  {
    v146 = v6;
    v20 = 4294951864;
    LODWORD(v143) = -15432;
    goto LABEL_31;
  }
  if (objc_msgSend(v21, "checkIfFileAlreadyExistForMFO")
    && captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(a3))
  {
    v146 = v6;
    v20 = 4294950886;
    LODWORD(v143) = -16410;
LABEL_31:
    FigDebugAssert3();
LABEL_32:
    if (a4)
    {
      captureSession_postNotificationsForIrisRequestCompletedWithError(a1, objc_msgSend(v21, "sinkID", v143, v146), a4, v20);
    }
    else
    {
      v28 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)a2, objc_msgSend(a3, "settingsID", v143, v146), v20);
      captureSession_postNotificationWithPayload(a1, CFSTR("DidStopRecording"), v28);
    }
    return;
  }
  v166 = a5;
  v167 = v6;
  if (v21)
  {
    objc_msgSend(*(id *)(DerivedStorage + 696), "setObject:forKeyedSubscript:", 0, a2);
    objc_msgSend(*(id *)(DerivedStorage + 704), "setObject:forKeyedSubscript:", 0, a2);
    v23 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)v21);
    v165 = -[FigCaptureMovieFileSinkPipeline videoCompressorNodes]((uint64_t)v21) != 0;
    v24 = -[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v21);
    captureSession_setRestoreForcedOffOverCaptureActiveSlaveStreamEnabled((uint64_t)a1, v24, 0);
    v25 = (void *)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey"));
    v26 = (void *)objc_msgSend(v25, "objectForKeyedSubscript:", *MEMORY[0x1E0CED218]);
    if (v26)
      v27 = objc_msgSend(v26, "BOOLValue") ^ 1;
    else
      v27 = 0;
    v31 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "hevcSettings"), "objectForKeyedSubscript:", CFSTR("MotionCompensatedTemporalFilteringSupported")), "BOOLValue");
    v30 = 0;
    if (v31 && (v27 & 1) == 0)
    {
      v32 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings"), "hevcSettings"), "objectForKeyedSubscript:", CFSTR("MSTFBand0ModulationOnlyWhenRequired")), "BOOLValue");
      if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoCodecKey")), "isEqualToString:", CFSTR("hvc1")))
      {
        if (!a4 || objc_msgSend(a4, "isMomentCaptureMovieRecording"))
        {
          v160 = (uint64_t)v22;
          v162 = v23;
          v157 = a4;
          v33 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileVideoCaptureConnectionConfiguration]((uint64_t)v21);
          if (!cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration(v33))
          {
            v30 = 0;
            a5 = v166;
            if (v23)
              goto LABEL_88;
            goto LABEL_186;
          }
          v168 = v32;
          v192 = 0u;
          v193 = 0u;
          v194 = 0u;
          v195 = 0u;
          v34 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "videoDataSinkPipelines");
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v192, v175, 16);
          v155 = a2;
          if (v35)
          {
            v36 = v35;
            v37 = *(_QWORD *)v193;
            while (2)
            {
              for (i = 0; i != v36; ++i)
              {
                if (*(_QWORD *)v193 != v37)
                  objc_enumerationMutation(v34);
                v39 = *(_QWORD *)(*((_QWORD *)&v192 + 1) + 8 * i);
                v40 = (void *)-[FigCaptureVideoDataSinkPipeline sourceID](v39);
                if (objc_msgSend(v40, "isEqualToString:", -[FigCaptureMovieFileSinkPipeline videoSourceID]((uint64_t)v21))&& !-[FigCaptureVideoDataSinkPipeline optimizedForPreview](v39))
                {
                  v41 = 1;
                  goto LABEL_58;
                }
              }
              v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v192, v175, 16);
              if (v36)
                continue;
              break;
            }
            v41 = 0;
LABEL_58:
            a2 = v155;
          }
          else
          {
            v41 = 0;
          }
          v42 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoWidthKey")), "intValue");
          LODWORD(v43) = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoHeightKey")), "intValue");
          v44 = -[FigCaptureCameraSourcePipeline maxFrameRateClientOverride](v160);
          v45 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v21);
          if (v42 == 3840 && (_DWORD)v43 == 2160)
          {
            if (v45 < 3)
            {
              LODWORD(v43) = 2160;
              v42 = 3840;
            }
            else
            {
              v46 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v21);
              v47 = cs_actionCamera2p8kOutputDimensions(v46);
              v42 = v47;
              v43 = HIDWORD(v47);
            }
          }
          v48 = v43 * v42;
          if ((int)v43 * v42 * v44 <= 290304000)
          {
            v49 = (v41 | v168) ^ 1u;
            v30 = 1;
            a4 = v157;
            a5 = v166;
            v22 = (void *)v160;
            v23 = v162;
            if (!(_DWORD)v49)
            {
LABEL_87:
              if (v23)
                goto LABEL_88;
              goto LABEL_186;
            }
LABEL_75:
            v51 = v23;
            v52 = v30;
            objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "setTemporalNoiseReductionBand0StrengthModulation:", v49);
            v30 = v52;
            v23 = v51;
            a2 = v155;
            if (!v23)
              goto LABEL_186;
            goto LABEL_88;
          }
          v50 = v41 ^ 1;
          if (v41)
            v49 = 0;
          else
            v49 = 2;
          if (v48 >= 9676801)
            v50 = 0;
          a4 = v157;
          v22 = (void *)v160;
          v23 = v162;
          if (v48 <= 9676800)
          {
            v30 = v50;
            a5 = v166;
            if (!(_DWORD)v49)
              goto LABEL_87;
            goto LABEL_75;
          }
        }
        v30 = 0;
        a5 = v166;
        if (!v23)
          goto LABEL_186;
        goto LABEL_88;
      }
      v30 = 0;
    }
    a5 = v166;
    goto LABEL_87;
  }
  v29 = objc_msgSend(*(id *)(DerivedStorage + 624), "audioFileSinkPipelineWithSinkID:", a2);
  objc_msgSend(*(id *)(DerivedStorage + 696), "setObject:forKeyedSubscript:", 0, a2);
  objc_msgSend(*(id *)(DerivedStorage + 704), "setObject:forKeyedSubscript:", 0, a2);
  v23 = (void *)-[FigCaptureAudioFileSinkPipeline fileCoordinatorNode](v29);
  v165 = 0;
  v30 = 0;
  if (!v23)
  {
LABEL_186:
    v146 = v167;
    LODWORD(v143) = 0;
    FigDebugAssert3();
LABEL_82:
    v20 = FigSignalErrorAt();
    if (!(_DWORD)v20)
      return;
    goto LABEL_32;
  }
LABEL_88:
  allocator = v30;
  v53 = 0;
  if (-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v21)
    && -[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21))
  {
    objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "maximumFrameRate");
    v53 = v54;
  }
  v169 = objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelineWithSourceID:", objc_msgSend(v22, "sourceID"));
  if (v169)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v55 = -[FigCaptureCinematographyPipeline globalMetadata](v169);
      MovieLevelMetadataWithCinematicVideoGlobalMetadata = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithCinematicVideoGlobalMetadata((void *)objc_msgSend(a3, "movieLevelMetadata"), v55);
      objc_msgSend(a3, "setMovieLevelMetadata:", MovieLevelMetadataWithCinematicVideoGlobalMetadata);

    }
  }
  if ((int)-[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v21) >= 3)
  {
    v57 = (void *)objc_msgSend(a3, "movieLevelMetadata");
    v58 = -[FigCaptureMovieFileSinkPipeline videoStabilizationStrength]((uint64_t)v21);
    MovieLevelMetadataWithActionCameraGlobalMetadata = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithActionCameraGlobalMetadata(v57, v58);
    objc_msgSend(a3, "setMovieLevelMetadata:", MovieLevelMetadataWithActionCameraGlobalMetadata);

  }
  CurrentSmartStyle = (void *)cs_getCurrentSmartStyle();
  if (!a4 && CurrentSmartStyle)
  {
    MovieLevelMetadataWithSmartStyleMetadata = (void *)FigCaptureMetadataUtilitiesCreateMovieLevelMetadataWithSmartStyleMetadata((void *)objc_msgSend(a3, "movieLevelMetadata"), CurrentSmartStyle, 0);
    objc_msgSend(a3, "setMovieLevelMetadata:", MovieLevelMetadataWithSmartStyleMetadata);

  }
  v62 = (void *)-[FigCaptureMovieFileSinkPipeline videoCompressorNodes]((uint64_t)v21);
  if (v62)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v62 = 0;
      goto LABEL_163;
    }
    v163 = v23;
    v63 = -[FigCaptureMicSourcePipeline sourceNode](objc_msgSend(*(id *)(DerivedStorage + 624), "micSourcePipeline"));
    if (a3)
    {
      v64 = (void *)v63;
      if (objc_msgSend(a3, "audioSettings"))
      {
        if (!objc_msgSend(v64, "audioCaptureMode")
          && objc_msgSend(v64, "isAudioPlayingToBuiltinSpeaker"))
        {
          v65 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(a3, "audioSettings"));
          *(_OWORD *)v175 = xmmword_1A32B13B4;
          *(_OWORD *)&v175[16] = *(_OWORD *)algn_1A32B13C4;
          objc_msgSend(v65, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v175, 32), 0x1E4930CB8);
          objc_msgSend(v65, "setObject:forKeyedSubscript:", &unk_1E49F9F48, 0x1E4930B78);
          objc_msgSend(a3, "setAudioSettings:", v65);
        }
      }
    }
    v152 = *(_QWORD *)(DerivedStorage + 224);
    v66 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v62, "firstObject"), "input"), "videoFormat"), "colorSpaceProperties");
    v153 = +[BWVideoFormat pixelBufferAttachmentsForColorSpaceProperties:](BWVideoFormat, "pixelBufferAttachmentsForColorSpaceProperties:", v66);
    IsHDR = BWColorSpacePropertiesIsHDR(v66);
    if ((objc_msgSend(a3, "isIrisMovieRecording") & 1) != 0)
    {
      v67 = *MEMORY[0x1E0C9D648];
      v68 = *(double *)(MEMORY[0x1E0C9D648] + 8);
      v70 = *(double *)(MEMORY[0x1E0C9D648] + 16);
      v69 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    }
    else
    {
      v67 = -[FigCaptureMovieFileSinkPipeline irisVISCleanOutputRectForCLAP]((uint64_t)v21);
      v68 = v71;
      v70 = v72;
      v69 = v73;
    }
    v23 = v163;
    if (objc_msgSend(a3, "isIrisRecording"))
      v150 = objc_msgSend(a3, "isIrisMovieRecording") ^ 1;
    else
      v150 = 0;
    if (-[FigCaptureMovieFileSinkPipeline smartStyleReversibilityEnabled]((_BOOL8)v21))
      v74 = objc_msgSend((id)objc_msgSend(a4, "settings"), "smartStyleReversibilitySupported");
    else
      v74 = 0;
    propertyList = (void *)objc_msgSend(a3, "videoSettings");
    if (v152
      || (v74 & 1) != 0
      || v153
      || (v201.origin.x = v67,
          v201.origin.y = v68,
          v201.size.width = v70,
          v201.size.height = v69,
          (v150 | IsHDR | !CGRectIsEmpty(v201)) == 1))
    {
      v147 = v74;
      v161 = (uint64_t)v22;
      v75 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", objc_msgSend(a3, "videoSettings"));
      v76 = v75;
      v77 = (_QWORD *)MEMORY[0x1E0CEDD18];
      if (v152)
      {
        v78 = objc_msgSend(v75, "objectForKeyedSubscript:", CFSTR("AVVideoEncoderSpecificationKey"));
        v79 = a3;
        v80 = a1;
        v81 = a4;
        v82 = a2;
        v83 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v78);
        objc_msgSend(v83, "setObject:forKeyedSubscript:", v152, *v77);
        v84 = v83;
        a2 = v82;
        a4 = v81;
        a1 = v80;
        a3 = v79;
        objc_msgSend(v76, "setObject:forKeyedSubscript:", v84, CFSTR("AVVideoEncoderSpecificationKey"));
      }
      propertyList = v76;
      v23 = v163;
      if (v153
        || (v202.origin.x = v67,
            v202.origin.y = v68,
            v202.size.width = v70,
            v202.size.height = v69,
            (v150 | IsHDR | !CGRectIsEmpty(v202)) == 1))
      {
        v85 = objc_msgSend(v76, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey"));
        v86 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v85);
        if (v153)
        {
          v87 = objc_msgSend(v153, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8EE8]);
          if (v87)
            objc_msgSend(v86, "setObject:forKeyedSubscript:", v87, *MEMORY[0x1E0CED290]);
          v88 = objc_msgSend(v153, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8D68]);
          if (v88)
            objc_msgSend(v86, "setObject:forKeyedSubscript:", v88, *MEMORY[0x1E0CECF48]);
          v89 = objc_msgSend(v153, "objectForKeyedSubscript:", *MEMORY[0x1E0CA8E98]);
          if (v89)
            objc_msgSend(v86, "setObject:forKeyedSubscript:", v89, *MEMORY[0x1E0CED238]);
        }
        if (IsHDR)
          objc_msgSend(v86, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CED698], *MEMORY[0x1E0CED008]);
        v203.origin.x = v67;
        v203.origin.y = v68;
        v203.size.width = v70;
        v203.size.height = v69;
        if (!CGRectIsEmpty(v203))
        {
          v173[0] = *MEMORY[0x1E0CA8D60];
          v174[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)v70);
          v173[1] = *MEMORY[0x1E0CA8D40];
          v90 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)v69);
          v91 = *MEMORY[0x1E0CA8D48];
          v174[1] = v90;
          v174[2] = &unk_1E49F9F30;
          v92 = *MEMORY[0x1E0CA8D58];
          v173[2] = v91;
          v173[3] = v92;
          v174[3] = &unk_1E49F9F30;
          v93 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v174, v173, 4);
          objc_msgSend(v86, "setObject:forKeyedSubscript:", v93, *MEMORY[0x1E0CECF38]);
        }
        if (v150)
          objc_msgSend(v86, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0CECEB8]);
        if (allocator)
        {
          v94 = MEMORY[0x1E0C9AAB0];
          v95 = v86;
        }
        else
        {
          v95 = v86;
          v94 = 0;
        }
        objc_msgSend(v95, "setObject:forKeyedSubscript:", v94, *MEMORY[0x1E0CED218]);
        objc_msgSend(v76, "setObject:forKeyedSubscript:", v86, CFSTR("AVVideoCompressionPropertiesKey"));
      }
      v96 = (_QWORD *)MEMORY[0x1E0CECEB0];
      if (v147)
      {
        allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v151 = (id)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], propertyList, 1uLL);
        v97 = (void *)objc_msgSend(v151, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey"));
        objc_msgSend(v97, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *v96);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(propertyList, 0);
        v156 = a2;
        DeepCopy = (void *)CFPropertyListCreateDeepCopy(allocatora, v151, 1uLL);
        v99 = *MEMORY[0x1E0CED9C0];
        v100 = (void *)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey"));
        v149 = *MEMORY[0x1E0CED180];
        objc_msgSend(v100, "setObject:forKeyedSubscript:", v99);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(DeepCopy, CFSTR("SmartStyleMasksSettings"));
        objc_msgSend(propertyList, "setObject:forKeyedSubscript:", DeepCopy, 0x1E4959D38);

        v101 = (void *)CFPropertyListCreateDeepCopy(allocatora, v151, 1uLL);
        v154 = *MEMORY[0x1E0CED988];
        objc_msgSend((id)objc_msgSend(v101, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey")), "setObject:forKeyedSubscript:", *MEMORY[0x1E0CED988], v149);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(v101, CFSTR("SmartStyleLinearThumbnailSettings"));
        objc_msgSend(propertyList, "setObject:forKeyedSubscript:", v101, 0x1E4959D58);

        v102 = (void *)CFPropertyListCreateDeepCopy(allocatora, v151, 1uLL);
        cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(v102, CFSTR("SmartStyleDeltaMapSettings"));
        a2 = v156;
        objc_msgSend((id)objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey")), "setObject:forKeyedSubscript:", v154, v149);
        v103 = *MEMORY[0x1E0CA8EB8];
        v104 = (void *)objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey"));
        v105 = v103;
        v23 = v163;
        objc_msgSend(v104, "setObject:forKeyedSubscript:", v105, *MEMORY[0x1E0CED238]);
        objc_msgSend(propertyList, "setObject:forKeyedSubscript:", v102, 0x1E4959D78);

        v96 = (_QWORD *)MEMORY[0x1E0CECEB0];
      }
      v22 = (void *)v161;
      if (-[FigCaptureCameraSourcePipeline captureSourceDepthDataFormat](v161))
      {
        v106 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceDepthDataFormat](v161), "dimensions");
        if (v169)
          v106 = -[FigCaptureCinematographyPipeline depthOutputDimensions](v169);
        v107 = HIDWORD(v106) * v106;
        v108 = 4;
        v109 = &unk_1A32B1400;
        while (1)
        {
          v110 = v108;
          v111 = dword_1A32B13D4[2 * v108];
          if (v107 >= v111)
            break;
          v108 = v110 - 1;
          v109 -= 2;
          if (!(_DWORD)v110)
          {
            v112 = 0;
            goto LABEL_151;
          }
        }
        v113 = dword_1A32B13D4[2 * v110 + 1];
        v114 = (float)(*v109 - v113) / (float)(*(v109 - 1) - v111);
        v112 = (int)(float)((float)((float)v113 - (float)(v114 * (float)v111))
                                        + (float)(v114 * (float)v107));
LABEL_151:
        v115 = *v96;
        v116 = MEMORY[0x1E0C9AAB0];
        *(_QWORD *)v175 = MEMORY[0x1E0C9AAB0];
        v117 = *MEMORY[0x1E0CECEF0];
        *(_QWORD *)&v192 = v115;
        *((_QWORD *)&v192 + 1) = v117;
        v118 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v112);
        v119 = *MEMORY[0x1E0CECFD0];
        *(_QWORD *)&v175[8] = v118;
        *(_QWORD *)&v175[16] = &unk_1E49F9F78;
        v120 = *MEMORY[0x1E0CED1A0];
        *(_QWORD *)&v193 = v119;
        *((_QWORD *)&v193 + 1) = v120;
        v121 = *MEMORY[0x1E0CECF08];
        *(_QWORD *)&v175[24] = v116;
        v176 = &unk_1E49F9F78;
        v122 = *MEMORY[0x1E0CECEB8];
        *(_QWORD *)&v194 = v121;
        *((_QWORD *)&v194 + 1) = v122;
        v123 = *MEMORY[0x1E0CED0D8];
        v177 = v116;
        v178 = v116;
        v124 = *MEMORY[0x1E0CED1B0];
        *(_QWORD *)&v195 = v123;
        *((_QWORD *)&v195 + 1) = v124;
        v125 = *MEMORY[0x1E0CED0C0];
        v179 = v116;
        v180 = &unk_1E49F9F90;
        v126 = *MEMORY[0x1E0CED098];
        v196 = v125;
        v197 = v126;
        v127 = *MEMORY[0x1E0CED180];
        v128 = *MEMORY[0x1E0CED9B8];
        v181 = &unk_1E49F9FA8;
        v182 = v128;
        v129 = *MEMORY[0x1E0CED178];
        v198 = v127;
        v199 = v129;
        v183 = &unk_1E49F9FC0;
        v130 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v175, &v192, 12);
        v131 = (void *)MEMORY[0x1E0C99E08];
        *(_QWORD *)type = CFSTR("AVVideoCompressionPropertiesKey");
        v187 = CFSTR("AVVideoCodecKey");
        v191[0] = v130;
        v191[1] = CFSTR("dish");
        v188 = CFSTR("AVVideoWidthKey");
        v191[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v106);
        v189 = CFSTR("AVVideoHeightKey");
        v132 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", HIDWORD(v106));
        v190 = CFSTR("AVVideoScalingModeKey");
        v191[3] = v132;
        v191[4] = CFSTR("AVVideoScalingModeResize");
        v133 = (void *)objc_msgSend(v131, "dictionaryWithDictionary:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v191, type, 5));
        if (v152)
        {
          v184 = *MEMORY[0x1E0CEDD18];
          v185 = v152;
          objc_msgSend(v133, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v185, &v184, 1), CFSTR("AVVideoEncoderSpecificationKey"));
        }
        objc_msgSend(propertyList, "setObject:forKeyedSubscript:", v133, 0x1E4959D18);
        v22 = (void *)v161;
      }
    }
    if (!objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "isBravoVariant"))
    {
      a5 = v166;
LABEL_162:
      v62 = propertyList;
      goto LABEL_163;
    }
    a5 = v166;
    v62 = propertyList;
    if (!objc_msgSend(a3, "isIrisRecording") || objc_msgSend(a3, "isIrisMovieRecording"))
    {
      memset(v175, 0, 20);
      if (a3)
      {
        objc_msgSend(a3, "bravoCameraSelectionConfigurationForRecording");
        v134 = *(_QWORD *)&v175[4];
        v135 = *(_QWORD *)&v175[12];
      }
      else
      {
        v135 = 0;
        v134 = 0;
      }
      objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "setBravoStreamSelectionConfigurationForRecording:", v134, v135);
      objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "setBravoStreamSelectionConfigurationForRecordingEnabled:", v175[0]);
      a5 = v166;
      v23 = v163;
      goto LABEL_162;
    }
  }
LABEL_163:
  v172 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (v169)
  {
    v136 = (void *)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21);
    if (v136)
      objc_msgSend(v136, "mostRecentPTS");
    else
      memset(&lhs, 0, sizeof(lhs));
    objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "minimumFrameRate");
    CMTimeMakeWithSeconds(&rhs, 1.0 / v137, 1000000000);
    CMTimeAdd(&v172, &lhs, &rhs);
  }
  -[FigCaptureCameraSourcePipeline startIncrementalPrefetchingOfSourcePoolsIfNecessary]((uint64_t)v22);
  *(_OWORD *)v175 = *(_OWORD *)a5;
  *(_QWORD *)&v175[16] = *(_QWORD *)(a5 + 16);
  v192 = *(_OWORD *)&v172.value;
  *(_QWORD *)&v193 = v172.epoch;
  v138 = objc_msgSend(v23, "startRecordingWithSettings:videoSettings:maxFrameRate:stopAtPTS:startAfterPTS:", a3, v62, v175, &v192, COERCE_DOUBLE(__PAIR64__(HIDWORD(v172.value), v53)));
  if (v138)
  {
    LODWORD(v20) = v138;
    v146 = v167;
    LODWORD(v143) = v138;
    FigDebugAssert3();
    if ((_DWORD)v20 == -16805)
      v20 = 4294950877;
    else
      v20 = v20;
    goto LABEL_32;
  }
  if ((objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v22), "captureInitiatedOnce") & 1) == 0)
    objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v22), "setCaptureInitiatedOnce:", 1);
  objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice]((uint64_t)v22), "setFrameSkippingWhenNotRecordingEnabled:", 0);
  if (-[FigCaptureMovieFileSinkPipeline overCaptureEnabled]((_BOOL8)v21))
  {
    objc_opt_class();
    v139 = (objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(a3, "spatialOverCaptureMovieURL") != 0;
    -[FigCaptureMovieFileSinkPipeline setOverCaptureTailPipelineRenderingEnabled:]((unint64_t)v21, v139);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v140 = *(unsigned __int8 *)(DerivedStorage + 337);
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  objc_msgSend(v21, "setRecording:", 1);
  objc_msgSend(v21, "setRecordedWhileMultitasking:", v140);
  if (v165
    && objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "autoImageControlMode") == 1)
  {
    v141 = objc_msgSend(a4, "isMomentCaptureMovieRecording");
    if (!a4 && (v141 & 1) == 0)
      objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v21), "setAutoImageControlMode:", 2);
  }
}

void captureSession_externalStorageDeviceManagerCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *global_queue;
  _QWORD block[7];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 760))
    {
      if (dword_1ECFE9590)
      {
        v11 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __captureSession_externalStorageDeviceManagerCallback_block_invoke;
      block[3] = &__block_descriptor_56_e5_v8__0l;
      block[4] = a1;
      block[5] = a3;
      block[6] = v6;
      dispatch_async(global_queue, block);
    }
  }
}

uint64_t captureSession_isPrewarming()
{
  uint64_t DerivedStorage;
  os_unfair_lock_s *v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = (os_unfair_lock_s *)(DerivedStorage + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v2 = *(unsigned __int8 *)(DerivedStorage + 333);
  os_unfair_lock_unlock(v1);
  return v2;
}

NSObject *captureSession_waitForGraphToStart(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  NSObject *result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = _FigIsCurrentDispatchQueue();
  if (!(_DWORD)result)
  {
    v10 = v2;
    LODWORD(v9) = 0;
    result = FigDebugAssert3();
  }
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)(DerivedStorage + 609))
  {
    if (a2)
    {
      if (*(_BYTE *)(DerivedStorage + 611))
      {
        if (dword_1ECFE9590)
        {
          v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        captureSession_startDeferredGraphSetupWork(a1);
      }
      else
      {
        objc_msgSend(*(id *)(DerivedStorage + 592), "cancelDeferredSourceNodeStart");
        objc_msgSend(*(id *)(DerivedStorage + 592), "cancelDeferredNodePrepare");
      }
      objc_msgSend(*(id *)(DerivedStorage + 592), "waitForStartOrCommitToComplete", v9, v10);
      result = *(NSObject **)(DerivedStorage + 136);
      if (result)
        return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      captureSession_startDeferredGraphSetupWork(a1);
      return objc_msgSend(*(id *)(DerivedStorage + 592), "waitForStartOrCommitToComplete");
    }
  }
  return result;
}

uint64_t captureSession_checkClientIsAllowedToWriteToOutputURLsInRecordingSettings(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (objc_msgSend(a2, "outputURL"))
    objc_msgSend(v3, "addObject:", objc_msgSend(a2, "outputURL"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(a2, "spatialOverCaptureMovieURL"))
    objc_msgSend(v3, "addObject:", objc_msgSend(a2, "spatialOverCaptureMovieURL"));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)v12;
LABEL_8:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v12 != v6)
      objc_enumerationMutation(v3);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = *(_OWORD *)(DerivedStorage + 36);
    v15 = *(_OWORD *)(DerivedStorage + 20);
    v16 = v9;
    result = FigServer_IsWritableFileOpeningOrCreationPermittedForAuditToken();
    if (!(_DWORD)result)
      return result;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
      if (v5)
        goto LABEL_8;
      return 1;
    }
  }
}

uint64_t captureSession_checkIfOutputURLsInRecordingSettingsAlreadyExist(void *a1)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (objc_msgSend(a1, "outputURL"))
    objc_msgSend(v2, "addObject:", objc_msgSend(a1, "outputURL"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(a1, "spatialOverCaptureMovieURL"))
    objc_msgSend(v2, "addObject:", objc_msgSend(a1, "spatialOverCaptureMovieURL"));
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        if (FigFileDoesFileExist())
          return 1;
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

uint64_t cs_getCurrentSmartStyle()
{
  uint64_t DerivedStorage;
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelines"), "count"))
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v1 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cinematographyPipelines");
    result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)v17;
      while (2)
      {
        for (i = 0; i != v3; ++i)
        {
          if (*(_QWORD *)v17 != v4)
            objc_enumerationMutation(v1);
          v6 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * i);
          if (-[FigCaptureCinematographyPipeline getSmartStyle](v6))
            return -[FigCaptureCinematographyPipeline getSmartStyle](v6);
        }
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
        result = 0;
        if (v3)
          continue;
        break;
      }
    }
  }
  else
  {
    result = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines"), "count");
    if (result)
    {
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v7 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines", 0);
      result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      if (result)
      {
        v8 = result;
        v9 = *(_QWORD *)v13;
        while (2)
        {
          for (j = 0; j != v8; ++j)
          {
            if (*(_QWORD *)v13 != v9)
              objc_enumerationMutation(v7);
            v11 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * j);
            if (-[FigCaptureCameraSourcePipeline getSmartStyle](v11))
              return -[FigCaptureCameraSourcePipeline getSmartStyle](v11);
          }
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
          result = 0;
          if (v8)
            continue;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t cs_applyCompressionPropertiesOverridesForSmartStyleReversibility(void *a1, void *a2)
{
  void *v4;
  uint64_t result;

  if (cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_onceToken == -1)
  {
    if (!a2)
    {
LABEL_4:
      v4 = (void *)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks;
      goto LABEL_9;
    }
  }
  else
  {
    dispatch_once(&cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_onceToken, &__block_literal_global_302);
    if (!a2)
      goto LABEL_4;
  }
  if (objc_msgSend(a2, "isEqualToString:", 0x1E4959D78))
    goto LABEL_4;
  if ((objc_msgSend(a2, "isEqualToString:", 0x1E4959D38) & 1) != 0
    || objc_msgSend(a2, "isEqualToString:", 0x1E4959D58))
  {
    v4 = (void *)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks;
  }
  else
  {
    v4 = 0;
  }
LABEL_9:
  result = objc_msgSend(v4, "count");
  if (result)
    return objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("AVVideoCompressionPropertiesKey")), "setValuesForKeysWithDictionary:", v4);
  return result;
}

void __captureSession_externalStorageDeviceManagerCallback_block_invoke(uint64_t a1)
{
  const __CFArray *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CFTypeRef cf;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v2 = *(const __CFArray **)(a1 + 32);
  if (v2 && CFArrayGetCount(v2))
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v3 = *(void **)(a1 + 32);
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v13;
      v7 = *MEMORY[0x1E0C9AE00];
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v3);
          v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 736);
          v11 = *(unsigned int (**)(uint64_t, uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (!v11 || v11(v10, v9, CFSTR("Device_BaseURL"), v7, &cf))
          {
            FigDebugAssert3();
            goto LABEL_17;
          }
          if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 744), "outputURL"), "absoluteString"), "containsString:", objc_msgSend((id)cf, "absoluteString")) & 1) != 0)goto LABEL_17;
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
        if (v5)
          continue;
        break;
      }
    }
    captureSession_throwErrorForSSDDisconnected(*(const void **)(a1 + 40));
  }
  else
  {
    captureSession_throwErrorForSSDDisconnected(*(const void **)(a1 + 40));
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 760) = 0;
  }
LABEL_17:
  if (cf)
    CFRelease(cf);
}

void captureSession_throwErrorForSSDDisconnected(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(*(_QWORD *)(DerivedStorage + 752), objc_msgSend(*(id *)(DerivedStorage + 744), "settingsID"), 4294954513);
  captureSession_postNotificationWithPayload(a1, CFSTR("DidStopRecording"), v3);
}

void *cs_motionCompensatedTemporalFilteringEnabledForVideoCaptureConnectionConfiguration(void *result)
{
  void *v1;

  if (result)
  {
    v1 = result;
    result = (void *)FigCapturePixelFormatIs420(objc_msgSend((id)objc_msgSend((id)objc_msgSend(result, "sourceConfiguration"), "requiredFormat"), "format"));
    if ((_DWORD)result)
      return (void *)(objc_msgSend(v1, "stereoVideoCaptureEnabled") ^ 1);
  }
  return result;
}

uint64_t cs_actionCamera2p8kOutputDimensions(int a1)
{
  uint64_t v1;

  v1 = 0x87000000F00;
  if (a1 <= 2)
  {
    FigDebugAssert3();
  }
  else if ((a1 - 3) < 2)
  {
    return 0x63000000B00;
  }
  return v1;
}

uint64_t __cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_block_invoke()
{
  uint64_t v0;

  cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend((id)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForFullResTracks, "setObject:forKeyedSubscript:", &unk_1E49F9F60, *MEMORY[0x1E0CED098]);
  cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v0 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return objc_msgSend((id)cs_applyCompressionPropertiesOverridesForSmartStyleReversibility_compressionPropertiesOverridesForLowResTracks, "setObject:forKeyedSubscript:", v0, *MEMORY[0x1E0CECF38]);
}

void __captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFOptionFlags responseFlags[23];

  responseFlags[22] = *MEMORY[0x1E0C80C00];
  responseFlags[0] = 0;
  CFUserNotificationReceiveResponse(*(CFUserNotificationRef *)(a1 + 32), 0.0, responseFlags);
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  sVideoRecordingWhileMultitaskingDialogInFlight = 0;
  if (!responseFlags[0])
  {
    sVideoRecordingWhileMultitaskingDialogDisplayed = 1;
    CFPreferencesSetValue(CFSTR("VideoRecordingWhileMultitaskingDialogDisplayed"), (CFPropertyListRef)*MEMORY[0x1E0C9AE50], CFSTR("com.apple.cameracapture"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sVideoRecordingWhileMultitaskingDialogLock);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t __cs_initializeVideoRecordingWhileMultitaskingStatics_block_invoke()
{
  uint64_t result;

  sVideoRecordingWhileMultitaskingDialogLock = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("VideoRecordingWhileMultitaskingDialogDisplayed"), CFSTR("com.apple.cameracapture"), 0);
  sVideoRecordingWhileMultitaskingDialogDisplayed = (_DWORD)result != 0;
  return result;
}

uint64_t cs_getMasterClockAndType(void *a1, uint64_t *a2, int *a3)
{
  void *v6;
  uint64_t result;
  int v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend(a1, "cameraSourcePipelines");
  if (objc_msgSend(a1, "micSourcePipeline"))
  {
    result = -[FigCaptureMicSourcePipeline clock](objc_msgSend(a1, "micSourcePipeline"));
    v8 = 2;
    if (!a2)
      goto LABEL_9;
LABEL_8:
    *a2 = result;
    goto LABEL_9;
  }
  result = objc_msgSend(v6, "count");
  if (result)
  {
    v9 = objc_msgSend(a1, "firstColorCameraSourcePipeline");
    if (!v9)
      v9 = objc_msgSend((id)objc_msgSend(a1, "cameraSourcePipelines"), "firstObject");
    result = -[FigCaptureCameraSourcePipeline clock](v9);
    v8 = 1;
    if (a2)
      goto LABEL_8;
  }
  else
  {
    v8 = 0;
    if (a2)
      goto LABEL_8;
  }
LABEL_9:
  if (a3)
    *a3 = v8;
  return result;
}

unint64_t __captureSession_didCaptureIrisStill_block_invoke(unint64_t result, int a2)
{
  unint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  BWPendingIrisRecordingRequest *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  Float64 Seconds;
  NSObject *v19;
  unsigned int value;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BWPendingIrisRecordingRequest *v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  CMTime *p_time2;
  uint64_t v31;
  CMTime v32;
  os_log_type_t v33;
  unsigned int v34;
  CMTime v35;
  CMTime v36;
  CMTime rhs;
  CMTime type[2];
  __int128 v39;
  uint64_t v40;
  CMTime time2;
  uint64_t v42;
  __int16 v43;
  _BYTE v44[14];
  CMTime lhs;
  uint64_t v46;

  v2 = result;
  v46 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (dword_1ECFE9590)
    {
      LODWORD(type[1].value) = 0;
      LOBYTE(type[0].value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return result;
  }
  if ((*(_BYTE *)(result + 92) & 1) != 0)
  {
    v39 = *(_OWORD *)(result + 80);
    v40 = *(_QWORD *)(result + 96);
    objc_msgSend(*(id *)(result + 40), "setBeginTrimMasterPTS:", &v39);
  }
  if (!objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "count"))
  {
LABEL_12:
    if (!objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"))
      objc_msgSend(*(id *)(v2 + 48), "setPendingIrisRecordings:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"));
    v7 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", objc_msgSend(*(id *)(v2 + 40), "settings"));
    -[BWPendingIrisRecordingRequest setIrisMovieInfo:](v7, "setIrisMovieInfo:", *(_QWORD *)(v2 + 40));
    objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "addObject:", v7);
    LODWORD(type[1].value) = 0;
    LOBYTE(type[0].value) = 0;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    goto LABEL_15;
  }
  v4 = 0;
  while (1)
  {
    v5 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "objectAtIndexedSubscript:", v4);
    v6 = objc_msgSend((id)objc_msgSend(v5, "settings"), "settingsID");
    if (v6 == objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "settings"), "settingsID"))
      break;
LABEL_11:
    if (objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "count") <= (unint64_t)++v4)
      goto LABEL_12;
  }
  if ((objc_msgSend(v5, "isEmpty") & 1) == 0)
  {
    objc_msgSend(v5, "isPairedRequestCreated");
    goto LABEL_11;
  }
  v9 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "objectAtIndexedSubscript:", v4);
  objc_msgSend(v9, "setIrisMovieInfo:", *(_QWORD *)(v2 + 40));
  memset(&type[1], 0, sizeof(CMTime));
  if (v9)
    objc_msgSend(v9, "momentCaptureMovieRecordingMasterEndTime");
  if (objc_msgSend(*(id *)(v2 + 40), "isMomentCaptureMovieRecording") && (type[1].flags & 1) != 0)
  {
    memset(type, 0, 24);
    v10 = *(void **)(v2 + 40);
    if (v10)
      objc_msgSend(v10, "stillImageCaptureTime");
    else
      memset(&rhs, 0, sizeof(rhs));
    lhs = type[1];
    CMTimeSubtract(type, &lhs, &rhs);
    memset(&v36, 0, sizeof(v36));
    CMTimeMake(&v36, 500, 1000);
    if ((type[0].flags & 1) == 0 || (lhs = type[0], time2 = v36, CMTimeCompare(&lhs, &time2) < 0))
    {
      v11 = *(void **)(v2 + 40);
      if (v11)
        objc_msgSend(v11, "stillImageCaptureTime");
      else
        memset(&v35, 0, sizeof(v35));
      time2 = v36;
      CMTimeAdd(&lhs, &v35, &time2);
      type[1] = lhs;
      if (dword_1ECFE9590)
      {
        v34 = 0;
        v33 = OS_LOG_TYPE_DEFAULT;
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    v32 = type[1];
    objc_msgSend(*(id *)(v2 + 40), "setMomentCaptureMovieRecordingMasterEndTime:", &v32, p_time2, v31);
    if (dword_1ECFE9590)
    {
      v34 = 0;
      v33 = OS_LOG_TYPE_DEFAULT;
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v14 = v34;
      if (os_log_type_enabled(v13, v33))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 72);
        v17 = objc_msgSend((id)objc_msgSend(v9, "settings"), "settingsID");
        lhs = type[1];
        Seconds = CMTimeGetSeconds(&lhs);
        LODWORD(time2.value) = 136315906;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
        LOWORD(time2.flags) = 2114;
        *(_QWORD *)((char *)&time2.flags + 2) = v16;
        HIWORD(time2.epoch) = 2048;
        v42 = v17;
        v43 = 2048;
        *(Float64 *)v44 = Seconds;
        LODWORD(v31) = 42;
        p_time2 = &time2;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (dword_1ECFE9590)
  {
    LODWORD(type[0].value) = 0;
    LOBYTE(v36.value) = 0;
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = type[0].value;
    if (os_log_type_enabled(v19, v36.value))
      v21 = value;
    else
      v21 = value & 0xFFFFFFFE;
    if (v21)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 72);
      v23 = objc_msgSend((id)objc_msgSend(*(id *)(v2 + 40), "settings"), "settingsID");
      LODWORD(time2.value) = 136316162;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
      LOWORD(time2.flags) = 2114;
      *(_QWORD *)((char *)&time2.flags + 2) = v22;
      HIWORD(time2.epoch) = 2048;
      v42 = v23;
      v43 = 1024;
      *(_DWORD *)v44 = v4;
      *(_WORD *)&v44[4] = 2112;
      *(_QWORD *)&v44[6] = v9;
      LODWORD(v31) = 48;
      p_time2 = &time2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (objc_msgSend(*(id *)(v2 + 56), "deliverOriginalImage", p_time2, v31))
  {
    if ((objc_msgSend(v9, "isPairedRequestCreated") & 1) == 0)
    {
      v24 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", objc_msgSend(v9, "settings"));
      -[BWPendingIrisRecordingRequest setPairedRequestCreated:](v24, "setPairedRequestCreated:", 1);
      objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "pendingIrisRecordings"), "insertObject:atIndex:", v24, v4 + 1);
      -[BWPendingIrisRecordingRequest setEnqueuedHostTime:](v24, "setEnqueuedHostTime:", mach_absolute_time());
      if (dword_1ECFE9590)
      {
        LODWORD(type[0].value) = 0;
        LOBYTE(v36.value) = 0;
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v26 = type[0].value;
        if (os_log_type_enabled(v25, v36.value))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if (v27)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 72);
          v29 = -[FigCaptureRecordingSettings settingsID](-[BWPendingIrisRecordingRequest settings](v24, "settings"), "settingsID");
          LODWORD(time2.value) = 136315650;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"captureSession_didCaptureIrisStill_block_invoke";
          LOWORD(time2.flags) = 2114;
          *(_QWORD *)((char *)&time2.flags + 2) = v28;
          HIWORD(time2.epoch) = 2048;
          v42 = v29;
          _os_log_send_and_compose_impl();
        }
LABEL_15:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return captureSession_servicePendingIrisRecordings(*(const void **)(v2 + 72), *(void **)(v2 + 48), 0);
}

void __captureSession_updateRunningCondition_block_invoke_363(uint64_t a1)
{
  captureSession_stopRunningInternal(*(const void **)(a1 + 32), 0, *(_DWORD *)(a1 + 40));
}

void captureSession_stopRunningInternal(const void *a1, int a2, unsigned int a3)
{
  uint64_t DerivedStorage;
  BOOL v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (*(_BYTE *)DerivedStorage)
    v7 = a2 == 0;
  else
    v7 = 0;
  if (!v7)
  {
    v8 = mach_absolute_time();
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    v9 = *(_DWORD *)(DerivedStorage + 368);
    if (*(_BYTE *)(DerivedStorage + 324))
      v10 = *(_BYTE *)(DerivedStorage + 341) == 0;
    else
      v10 = 0;
    v11 = !v10;
    if (v11 == 1 && v9 != 0 && v9 != 3)
      *(_QWORD *)(DerivedStorage + 384) = v8;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v11 && v9 && v9 != 3)
    {
      captureSession_transitionToSessionStatus(a1, 3, a3);
      captureSession_stopGraph(a1, a3, 0, 0, 0, 100, 0);
      captureSession_transitionToSessionStatus(a1, 0, a3);
    }
    else
    {
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

void __captureSession_updateRunningCondition_block_invoke_2(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = *(const void **)(a1 + 32);
  v2 = (const void *)cs_notificationPayloadWithErrorStatus(*(unsigned int *)(a1 + 40));
  captureSession_postNotificationWithPayload(v1, CFSTR("DidStopRunning"), v2);
}

void __captureSession_updateRunningCondition_block_invoke_3(uint64_t a1)
{
  const void *v1;
  const void *v2;

  v1 = *(const void **)(a1 + 32);
  v2 = (const void *)cs_notificationPayloadWithErrorStatus(*(unsigned int *)(a1 + 40));
  captureSession_postNotificationWithPayload(v1, CFSTR("DidStopRunning"), v2);
}

void captureSession_cancelPrewarmingTimeoutTimer()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 520);
  if (v1)
  {
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v1 = *(NSObject **)(DerivedStorage + 520);
    }
    dispatch_source_cancel(v1);

    *(_QWORD *)(DerivedStorage + 520) = 0;
  }
}

void captureSession_resetSessionRunningStateOnFatalError(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (cs_errorIsFatal(a2))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    *(_WORD *)(DerivedStorage + 332) = 0;
    *(_BYTE *)(DerivedStorage + 499) = 0;
    *(_BYTE *)(DerivedStorage + 324) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  }
  else
  {
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t cs_configurationContainsVideoSource(void *a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = (void *)objc_msgSend(a1, "sourceConfigurations", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        if (objc_msgSend(v6, "sourceType") == 1
          && objc_msgSend(v6, "sourceDeviceType") - 17 > 3)
        {
          return 1;
        }
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void captureSession_teardownGraph(const void *a1, unsigned int a2, int a3, int a4, char a5, int a6)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t k;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t m;
  _QWORD *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t n;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ii;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const __CFAllocator *v57;
  uint64_t jj;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  CFDictionaryRef v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t kk;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t mm;
  void *v75;
  uint64_t v76;
  uint64_t nn;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i1;
  void *v86;
  id v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i2;
  uint64_t v93;
  NSObject *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t i3;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  uint64_t v107;
  uint64_t v109;
  unsigned int v111;
  id obj;
  id obja;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  id *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  CMTime time;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  os_log_type_t type;
  unsigned int v177;
  _BYTE v178[128];
  _BYTE v179[128];
  _BYTE v180[128];
  _BYTE v181[128];
  _BYTE v182[128];
  _BYTE v183[128];
  _BYTE v184[128];
  _BYTE v185[128];
  _BYTE v186[128];
  _BYTE v187[128];
  _BYTE v188[128];
  _BYTE v189[128];
  _BYTE v190[128];
  _OWORD v191[4];
  _BYTE v192[128];
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v107 = v109;
    LODWORD(v105) = 0;
    FigDebugAssert3();
  }
  if (dword_1ECFE9590)
  {
    v177 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!a4 && a3)
  {
    v107 = v109;
    LODWORD(v105) = 0;
    FigDebugAssert3();
  }
  v10 = 0x1E0C99000uLL;
  v122 = (id *)DerivedStorage;
  if (*(_QWORD *)(DerivedStorage + 616))
  {
    v119 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(*(id *)(DerivedStorage + 616), "count"));
    v117 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(*(id *)(DerivedStorage + 616), "count"));
    v111 = objc_msgSend(*(id *)(DerivedStorage + 424), "allCameraSourcesAreMetadataCameras");
    v172 = 0u;
    v173 = 0u;
    v174 = 0u;
    v175 = 0u;
    v11 = *(void **)(DerivedStorage + 616);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v172, v190, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v173;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v173 != v14)
            objc_enumerationMutation(v11);
          v16 = objc_msgSend(*(id *)(DerivedStorage + 616), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v172 + 1) + 8 * i), v105, v107);
          if (v16)
          {
            v17 = v16;
            if (*(_QWORD *)(v16 + 8) && *(_QWORD *)(v16 + 16) != 0)
            {
              objc_msgSend(v119, "addObject:");
              objc_msgSend(v117, "addObject:", *(_QWORD *)(v17 + 16));
              objc_msgSend(*(id *)(v17 + 16), "unregisterForAEMatrixMetadata");
              objc_msgSend(*(id *)(v17 + 16), "setStillImageCaptureEnabled:", 0);
              objc_msgSend(*(id *)(v17 + 16), "setSmartStyleAttachedMediaTimeMachineDelegate:", 0);
            }
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v172, v190, 16);
      }
      while (v13);
    }
    if ((a3 & 1) == 0)
    {
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      obj = *(id *)(DerivedStorage + 616);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v168, v189, 16);
      if (v19)
      {
        v20 = v19;
        v115 = *(_QWORD *)v169;
        do
        {
          v21 = 0;
          do
          {
            if (*(_QWORD *)v169 != v115)
              objc_enumerationMutation(obj);
            v22 = objc_msgSend(v122[77], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v168 + 1) + 8 * v21), v105);
            if (v22)
              v23 = *(void **)(v22 + 16);
            else
              v23 = 0;
            v166 = 0u;
            v167 = 0u;
            v164 = 0u;
            v165 = 0u;
            v24 = (void *)objc_msgSend(v23, "captureStreams");
            v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v164, v188, 16);
            if (v25)
            {
              v26 = v25;
              v27 = 0;
              v28 = *(_QWORD *)v165;
              do
              {
                for (j = 0; j != v26; ++j)
                {
                  if (*(_QWORD *)v165 != v28)
                    objc_enumerationMutation(v24);
                  v30 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * j);
                  if (objc_msgSend((id)objc_msgSend(v30, "stream"), "streaming"))
                  {
                    if ((objc_msgSend(v30, "isSynchronizationMaster") & 1) != 0)
                      v27 = v30;
                    else
                      objc_msgSend(v30, "stop");
                  }
                }
                v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v164, v188, 16);
              }
              while (v26);
              if (v27)
                objc_msgSend(v27, "stop");
            }
            v162 = 0u;
            v163 = 0u;
            v160 = 0u;
            v161 = 0u;
            v31 = (void *)objc_msgSend(v23, "captureStreams");
            v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v160, v187, 16);
            if (v32)
            {
              v33 = v32;
              v34 = *(_QWORD *)v161;
              do
              {
                for (k = 0; k != v33; ++k)
                {
                  if (*(_QWORD *)v161 != v34)
                    objc_enumerationMutation(v31);
                  objc_msgSend(*(id *)(*((_QWORD *)&v160 + 1) + 8 * k), "resignStreamStartStopDelegate");
                }
                v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v160, v187, 16);
              }
              while (v33);
            }
            ++v21;
          }
          while (v21 != v20);
          v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v168, v189, 16);
          v20 = v36;
        }
        while (v36);
      }
      FigVideoCaptureSourcesDeactivateWithDevices((CFArrayRef)v119, (const __CFArray *)v117, a5);
      DerivedStorage = (uint64_t)v122;
      if (a6)
      {
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v37 = v122[77];
        v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v156, v186, 16);
        if (v38)
        {
          v39 = v38;
          v40 = *(_QWORD *)v157;
          do
          {
            for (m = 0; m != v39; ++m)
            {
              if (*(_QWORD *)v157 != v40)
                objc_enumerationMutation(v37);
              v42 = (_QWORD *)objc_msgSend(v122[77], "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v156 + 1) + 8 * m), v105);
              if (v42)
                v42 = (_QWORD *)v42[2];
              objc_msgSend(v42, "invalidateForParallelGraphRebuild");
            }
            v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v156, v186, 16);
          }
          while (v39);
        }
      }

      v122[77] = 0;
    }

    v10 = 0x1E0C99000;
  }
  else
  {
    v111 = 0;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelines", v105), "count")
    || objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 624), "audioFileSinkPipelines"), "count"))
  {
    v43 = objc_alloc_init(*(Class *)(v10 + 3560));
    v152 = 0u;
    v153 = 0u;
    v154 = 0u;
    v155 = 0u;
    v44 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelines");
    v45 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v152, v185, 16);
    if (v45)
    {
      v46 = v45;
      v47 = *(_QWORD *)v153;
      do
      {
        for (n = 0; n != v46; ++n)
        {
          if (*(_QWORD *)v153 != v47)
            objc_enumerationMutation(v44);
          objc_msgSend(v43, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v152 + 1) + 8 * n), "sinkID"));
        }
        v46 = objc_msgSend(v44, "countByEnumeratingWithState:objects:count:", &v152, v185, 16);
      }
      while (v46);
    }
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v49 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "audioFileSinkPipelines");
    v50 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v148, v184, 16);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)v149;
      do
      {
        for (ii = 0; ii != v51; ++ii)
        {
          if (*(_QWORD *)v149 != v52)
            objc_enumerationMutation(v49);
          objc_msgSend(v43, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v148 + 1) + 8 * ii), "sinkID"));
        }
        v51 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v148, v184, 16);
      }
      while (v51);
    }
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v54 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v144, v183, 16);
    if (v54)
    {
      v55 = v54;
      v56 = *(_QWORD *)v145;
      v57 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        for (jj = 0; jj != v55; ++jj)
        {
          if (*(_QWORD *)v145 != v56)
            objc_enumerationMutation(v43);
          v59 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 8 * jj);
          v60 = (void *)objc_msgSend((id)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes](objc_msgSend(v122[78], "movieFileSinkPipelineWithSinkID:", v59)), "objectAtIndexedSubscript:", 0);
          if (!v60)
          {
            v60 = (void *)-[FigCaptureAudioFileSinkPipeline audioFileSinkNode](objc_msgSend(v122[78], "audioFileSinkPipelineWithSinkID:", v59));
            if (!v60)
              continue;
          }
          v61 = objc_msgSend(v60, "lastFileSize");
          if (v61)
          {
            v62 = v61;
            if (!v122[87])
              v122[87] = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
            objc_msgSend(v60, "lastFileDuration");
            v63 = CMTimeCopyAsDictionary(&time, v57);
            objc_msgSend(v122[87], "setObject:forKeyedSubscript:", v63, v59);

            if (!v122[88])
              v122[88] = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
            objc_msgSend(v122[88], "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v62), v59);
          }
        }
        v55 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v144, v183, 16);
      }
      while (v55);
    }

    DerivedStorage = (uint64_t)v122;
  }
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v64 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelines");
  v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v139, v182, 16);
  if (v65)
  {
    v66 = v65;
    v67 = *(_QWORD *)v140;
    do
    {
      for (kk = 0; kk != v66; ++kk)
      {
        if (*(_QWORD *)v140 != v67)
          objc_enumerationMutation(v64);
        v69 = *(void **)(*((_QWORD *)&v139 + 1) + 8 * kk);
        if (objc_msgSend(v69, "sinkID")
          && (!*(_BYTE *)(DerivedStorage + 364) || *(_DWORD *)(DerivedStorage + 360) != 1))
        {
          if (objc_msgSend(v69, "imageQueueSinkNode"))
          {
            if (!*(_QWORD *)(DerivedStorage + 464))
              *(_QWORD *)(DerivedStorage + 464) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
            if (!*(_QWORD *)(DerivedStorage + 472))
              *(_QWORD *)(DerivedStorage + 472) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
            objc_msgSend(*(id *)(DerivedStorage + 472), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v69, "imageQueueUpdatedNotificationSent")), objc_msgSend(v69, "sinkID"));
          }
          objc_msgSend(*(id *)(DerivedStorage + 464), "setObject:forKeyedSubscript:", objc_msgSend(v69, "imageQueueSinkNode"), objc_msgSend(v69, "sinkID"));
          if ((a6 & 1) == 0)
            objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v69, "imageQueueSinkNode"), "input"), "connection"), "detach");
        }
        objc_msgSend(*(id *)(DerivedStorage + 432), "containsObject:", v69);
      }
      v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v139, v182, 16);
    }
    while (v66);
  }
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v70 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "stillImageSinkPipelineSessionStorages");
  v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v135, v181, 16);
  if (v71)
  {
    v72 = v71;
    v73 = *(_QWORD *)v136;
    do
    {
      for (mm = 0; mm != v72; ++mm)
      {
        if (*(_QWORD *)v136 != v73)
          objc_enumerationMutation(v70);
        v75 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * mm);
        v76 = objc_msgSend((id)objc_msgSend(v75, "stillImageSinkPipeline"), "sinkID");
        if (objc_msgSend(v75, "preparedBracket") && !*(_QWORD *)(DerivedStorage + 488))
          *(_QWORD *)(DerivedStorage + 488) = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 1);
        objc_msgSend(*(id *)(DerivedStorage + 488), "setObject:forKeyedSubscript:", objc_msgSend(v75, "preparedBracket"), v76);
        if ((a6 & 1) == 0)
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v75, "stillImageSinkPipeline"), "stillImageCoordinatorNode"), "setStillImageCaptureStatusDelegate:", 0);
      }
      v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v135, v181, 16);
    }
    while (v72);
  }
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  obja = (id)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelines");
  v118 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v131, v180, 16);
  if (v118)
  {
    v116 = *(_QWORD *)v132;
    do
    {
      for (nn = 0; nn != v118; ++nn)
      {
        if (*(_QWORD *)v132 != v116)
          objc_enumerationMutation(obja);
        v78 = *(void **)(*((_QWORD *)&v131 + 1) + 8 * nn);
        v79 = CMBaseObjectGetDerivedStorage();
        if (!_FigIsCurrentDispatchQueue())
        {
          v107 = v109;
          LODWORD(v106) = 0;
          FigDebugAssert3();
        }
        if (objc_msgSend((id)objc_msgSend(v78, "pendingIrisRecordings", v106, v107), "count"))
        {
          v120 = nn;
          os_unfair_lock_lock((os_unfair_lock_t)(v79 + 320));
          v80 = *(_QWORD *)(v79 + 384);
          os_unfair_lock_unlock((os_unfair_lock_t)(v79 + 320));
          if (!v80)
            mach_absolute_time();
          memset(v191, 0, sizeof(v191));
          v81 = (void *)objc_msgSend(v78, "pendingIrisRecordings");
          v82 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", v191, v192, 16);
          if (v82)
          {
            v83 = v82;
            v84 = **(_QWORD **)&v191[1];
            do
            {
              for (i1 = 0; i1 != v83; ++i1)
              {
                if (**(_QWORD **)&v191[1] != v84)
                  objc_enumerationMutation(v81);
                v86 = *(void **)(*((_QWORD *)&v191[0] + 1) + 8 * i1);
                v87 = (id)objc_msgSend(v86, "irisMovieInfo");
                if (!v87)
                  v87 = +[BWIrisMovieInfo emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:](BWIrisMovieInfo, "emptyIrisMovieInfoWithFigCaptureMovieFileRecordingSettings:", objc_msgSend(v86, "settings"));
                objc_msgSend(v86, "enqueuedHostTime");
                objc_msgSend(v87, "setProcessingTimeInMilliseconds:", (double)FigHostTimeToNanoseconds() / 1000000.0);
                captureSession_postNotificationsForIrisRequestCompletedWithError(a1, objc_msgSend(v78, "sinkID"), v87, 4294951863);
              }
              v83 = objc_msgSend(v81, "countByEnumeratingWithState:objects:count:", v191, v192, 16);
            }
            while (v83);
          }
          objc_msgSend((id)objc_msgSend(v78, "pendingIrisRecordings"), "removeAllObjects");
          DerivedStorage = (uint64_t)v122;
          nn = v120;
        }
        if ((a6 & 1) == 0)
        {
          v129 = 0u;
          v130 = 0u;
          v127 = 0u;
          v128 = 0u;
          v88 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v78);
          v89 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v127, v179, 16);
          if (v89)
          {
            v90 = v89;
            v91 = *(_QWORD *)v128;
            do
            {
              for (i2 = 0; i2 != v90; ++i2)
              {
                if (*(_QWORD *)v128 != v91)
                  objc_enumerationMutation(v88);
                objc_msgSend(*(id *)(*((_QWORD *)&v127 + 1) + 8 * i2), "setRecordingStatusDelegate:", 0);
              }
              v90 = objc_msgSend(v88, "countByEnumeratingWithState:objects:count:", &v127, v179, 16);
            }
            while (v90);
          }
        }
      }
      v118 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v131, v180, 16);
    }
    while (v118);
  }
  v93 = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(v93 + 320));
  if (notify_is_valid_token(*(_DWORD *)(v93 + 544)))
  {
    if (dword_1ECFE9590)
    {
      v177 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v95 = v177;
      if (os_log_type_enabled(v94, type))
        v96 = v95;
      else
        v96 = v95 & 0xFFFFFFFE;
      if (v96)
      {
        v97 = *(_QWORD *)(v93 + 72);
        v98 = *(_QWORD *)(v93 + 536);
        LODWORD(v191[0]) = 136315650;
        *(_QWORD *)((char *)v191 + 4) = "captureSession_stopMonitoringForFigAssetWriterWritingVideoNotification";
        WORD6(v191[0]) = 2114;
        *(_QWORD *)((char *)v191 + 14) = v97;
        WORD3(v191[1]) = 2112;
        *((_QWORD *)&v191[1] + 1) = v98;
        LODWORD(v107) = 32;
        v106 = v191;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }

    *(_QWORD *)(v93 + 536) = 0;
    notify_cancel(*(_DWORD *)(v93 + 544));
    *(_DWORD *)(v93 + 544) = -1;
  }
  *(_QWORD *)(v93 + 552) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v93 + 320));
  objc_msgSend(+[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor"), "removeLayoutObserver:", *(_QWORD *)(DerivedStorage + 672));

  *(_QWORD *)(DerivedStorage + 624) = 0;
  *(_QWORD *)(DerivedStorage + 648) = 0;
  *(_BYTE *)(DerivedStorage + 656) = 0;

  *(_QWORD *)(DerivedStorage + 432) = 0;
  *(_QWORD *)(DerivedStorage + 632) = 0;

  *(_QWORD *)(DerivedStorage + 640) = 0;
  *(_QWORD *)(DerivedStorage + 576) = 0;

  *(_QWORD *)(DerivedStorage + 592) = 0;
  captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications();
  if ((a4 & 1) == 0)
  {
    if (objc_msgSend(*(id *)(DerivedStorage + 720), "count"))
    {
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v99 = (void *)objc_msgSend(*(id *)(DerivedStorage + 720), "allKeys");
      v100 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v123, v178, 16);
      if (v100)
      {
        v101 = v100;
        v102 = *(_QWORD *)v124;
        do
        {
          for (i3 = 0; i3 != v101; ++i3)
          {
            if (*(_QWORD *)v124 != v102)
              objc_enumerationMutation(v99);
            v104 = *(_QWORD *)(*((_QWORD *)&v123 + 1) + 8 * i3);
            objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "takeBackDevice:forClient:informClientWhenDeviceAvailableAgain:prefersDeviceInvalidatedImmediately:", objc_msgSend(*(id *)(DerivedStorage + 720), "objectForKeyedSubscript:", v104, v106, v107), *(unsigned int *)(DerivedStorage + 712), a2, v111);
            objc_msgSend(*(id *)(DerivedStorage + 720), "setObject:forKeyedSubscript:", 0, v104);
          }
          v101 = objc_msgSend(v99, "countByEnumeratingWithState:objects:count:", &v123, v178, 16);
        }
        while (v101);
      }
    }
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
}

void cs_updateConfigurationsWithCaptureSource(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  CGSize *v9;
  uint64_t i;
  void *v11;
  void (*v12)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v13)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v14)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v15)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v16)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v17)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v18)(uint64_t, const __CFString *, uint64_t, id *);
  unsigned int v19;
  void (*v20)(uint64_t, const __CFString *, uint64_t, id *);
  void (*v21)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  id v22;
  const __CFString *v23;
  CGSize size;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CFDictionaryRef dict;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  dict = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v38, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v26;
    v8 = *MEMORY[0x1E0C9AE00];
    v23 = CFSTR("ImageControlMode");
    v9 = (CGSize *)MEMORY[0x1E0C9D820];
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v26 != v7)
          objc_enumerationMutation(v3);
        v11 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * i), "sourceConfiguration", v23);
        if (objc_msgSend(v11, "source") == a2)
        {
          if ((v6 & 1) == 0)
          {
            v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v12)
              v12(a2, CFSTR("ActiveMaxFrameRate"), v8, &v37);
            v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v13)
              v13(a2, CFSTR("ActiveMinFrameRate"), v8, &v36);
            v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v14)
              v14(a2, CFSTR("VideoZoomFactor"), v8, &v35);
            v15 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v15)
              v15(a2, CFSTR("FaceDetectionConfiguration"), v8, &v34);
            v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v16)
              v16(a2, CFSTR("AutoAdjustImageControlMode"), v8, &v33);
            if ((objc_msgSend(v33, "BOOLValue") & 1) == 0)
            {
              v17 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
              if (v17)
                v17(a2, v23, v8, &v32);
            }
            v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
            if (v18)
              v18(a2, CFSTR("FaceDrivenAEAFMode"), v8, &v31);
            v19 = objc_msgSend(v11, "sourceDeviceType");
            if (v19 <= 9 && ((1 << v19) & 0x310) != 0)
            {
              v20 = *(void (**)(uint64_t, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
              if (v20)
                v20(a2, CFSTR("EligibleFallbackCaptureSourceDeviceTypes"), v8, &v30);
            }
            v21 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (v21)
              v21(a2, CFSTR("NonDestructiveCropSize"), v8, &dict);
          }
          if (v37)
          {
            objc_msgSend(v37, "floatValue");
            objc_msgSend(v11, "setRequiredMaxFrameRate:");
          }
          if (v36)
          {
            objc_msgSend(v36, "floatValue");
            objc_msgSend(v11, "setRequiredMinFrameRate:");
          }
          if (v35)
          {
            objc_msgSend(v35, "floatValue");
            objc_msgSend(v11, "setVideoZoomFactor:");
          }
          if (v34)
            objc_msgSend(v11, "setFaceDetectionConfiguration:");
          if (v32)
            objc_msgSend(v11, "setImageControlMode:", objc_msgSend(v32, "intValue"));
          if (v31)
            objc_msgSend(v11, "setFaceDrivenAEAFMode:", objc_msgSend(v31, "intValue"));
          if (v30)
            objc_msgSend(v11, "setFallbackPrimaryConstituentDeviceTypes:");
          if (dict)
          {
            size = *v9;
            if (CGSizeMakeWithDictionaryRepresentation(dict, &size))
            {
              objc_msgSend(v11, "setNonDestructiveCropEnabled:", 1);
              objc_msgSend(v11, "setNormalizedNonDestructiveCropSize:", size.width, size.height);
            }
          }
          v6 = 1;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v38, 16);
    }
    while (v5);
    v22 = v36;
  }
  else
  {
    v22 = 0;
  }

}

uint64_t cs_updateConfigurationsWithPreviewSinkProperties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6, float a7, double a8, double a9, double a10)
{
  void *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  double v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v19 = (void *)objc_msgSend(a1, "connectionConfigurations", 0);
  result = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (result)
  {
    v21 = result;
    v22 = *(_QWORD *)v28;
    do
    {
      v23 = 0;
      do
      {
        if (*(_QWORD *)v28 != v22)
          objc_enumerationMutation(v19);
        v24 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * v23), "videoPreviewSinkConfiguration");
        if (objc_msgSend((id)objc_msgSend(v24, "sinkID"), "isEqual:", a2))
        {
          objc_msgSend(v24, "setFilters:", a3);
          *(float *)&v25 = a6;
          objc_msgSend(v24, "setSimulatedAperture:", v25);
          *(float *)&v26 = a7;
          objc_msgSend(v24, "setPortraitLightingEffectStrength:", v26);
          objc_msgSend(v24, "setSemanticStyle:", a4);
          if (objc_msgSend(v24, "primaryCaptureRectModificationEnabled"))
          {
            objc_msgSend(v24, "setPrimaryCaptureRectAspectRatio:", a8);
            objc_msgSend(v24, "setPrimaryCaptureRectCenter:", a9, a10);
            objc_msgSend(v24, "setPrimaryCaptureRectUniqueID:", a5);
          }
        }
        ++v23;
      }
      while (v21 != v23);
      result = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
      v21 = result;
    }
    while (result);
  }
  return result;
}

void captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications()
{
  _BYTE *DerivedStorage;
  _BYTE *v1;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v1 = DerivedStorage, *DerivedStorage))
  {
    FigDebugAssert3();
  }
  else if (FigCaptureAudiomxdSupportEnabled())
  {
    if (!_FigIsCurrentDispatchQueue())
      FigDebugAssert3();
    if (*((_QWORD *)v1 + 36))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)v1 + 36));

      *((_QWORD *)v1 + 36) = 0;
    }
    if (*((_QWORD *)v1 + 37))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter"), "removeObserver:", *((_QWORD *)v1 + 37));

      *((_QWORD *)v1 + 37) = 0;
    }
  }
}

uint64_t __captureSession_startAVConferenceBackgroundRunningTrackingTimerIfNeeded_block_invoke()
{
  uint64_t v0;
  uint64_t DerivedStorage;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v5 = v0;
    LODWORD(v4) = 0;
    FigDebugAssert3();
  }
  result = objc_msgSend(*(id *)(DerivedStorage + 88), "applicationState", v4, v5);
  if ((_DWORD)result == 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t cs_notificationPayloadWithConfigurationIDAndErrorStatus(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (void *)MEMORY[0x1E0C99D80];
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", a1);
  if ((_DWORD)a2)
    v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2);
  else
    v5 = 0;
  return objc_msgSend(v3, "dictionaryWithObjectsAndKeys:", v4, CFSTR("ConfigurationID"), v5, CFSTR("ErrorStatus"), 0);
}

void *cs_configurationUsesCamera(void *result)
{
  void *v1;
  _QWORD v2[4];
  int v3;

  if (result)
  {
    v1 = (void *)objc_msgSend(result, "connectionConfigurations");
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __cs_configurationUsesSourceType_block_invoke;
    v2[3] = &__block_descriptor_36_e50_B32__0__FigCaptureConnectionConfiguration_8Q16_B24l;
    v3 = 1;
    return (void *)(objc_msgSend(v1, "indexOfObjectPassingTest:", v2) != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t captureSession_updateGraphForVideoPreviewSinkConfigurationChanges(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  void *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v20 = v3;
    LODWORD(v19) = 0;
    FigDebugAssert3();
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = (void *)objc_msgSend(a2, "parsedPreviewSinkConfigurations", v19, v20, 0);
  result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11), "videoPreviewSinkConnectionConfiguration"), "videoPreviewSinkConfiguration");
        v13 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelineWithSinkID:", objc_msgSend(v12, "sinkID"));
        if ((a3 & 1) == 0)
        {
          objc_msgSend(v12, "primaryCaptureRectAspectRatio");
          v15 = v14;
          objc_msgSend(v12, "primaryCaptureRectCenter");
          objc_msgSend(v13, "setPrimaryCaptureRectAspectRatio:center:trueVideoTransitionPercentComplete:fencePortSendRight:uniqueID:", 0, objc_msgSend(v12, "primaryCaptureRectUniqueID"), v15, v16, v17, 0.0);
        }
        v18 = objc_msgSend(v12, "semanticStyle");
        if (v18)
          objc_msgSend(v13, "setSemanticStyle:animated:", v18, 0);
        ++v11;
      }
      while (v9 != v11);
      result = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

void captureSession_stopGraph(const void *a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t k;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t m;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  double v60;
  float v61;
  void *v62;
  double v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t n;
  void *v69;
  NSObject *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  char v80;
  id v81;
  NSObject *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t ii;
  void *v96;
  _OWORD *v97;
  uint64_t v98;
  int v99;
  os_unfair_lock_s *lock;
  uint64_t v102;
  id obj;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  const void *v110;
  void *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _QWORD block[7];
  char v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  os_log_type_t type;
  unsigned int v151;
  uint64_t v152;
  _BYTE v153[128];
  _BYTE v154[128];
  _BYTE v155[128];
  _BYTE v156[128];
  _BYTE v157[128];
  _BYTE v158[128];
  _BYTE v159[128];
  _BYTE v160[128];
  _QWORD v161[16];
  _OWORD v162[2];
  __int128 v163;
  __int128 v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v152 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v151 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!*(_BYTE *)(DerivedStorage + 609))
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 1);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    v13 = *(_DWORD *)(DerivedStorage + 368);
    lock = (os_unfair_lock_s *)(DerivedStorage + 320);
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
    v99 = v13;
    if (v13 == 2)
    {
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v14 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines");
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v146, v160, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v147;
        do
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v147 != v17)
              objc_enumerationMutation(v14);
            objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](*(_QWORD *)(*((_QWORD *)&v146 + 1) + 8 * i)), "setStoppingForTrueVideoTransition:", a3);
          }
          v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v146, v160, 16);
        }
        while (v16);
      }
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v19 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelines", v97, v98);
      v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v142, v159, 16);
      if (v20)
      {
        v21 = v20;
        v22 = *(_QWORD *)v143;
        do
        {
          for (j = 0; j != v21; ++j)
          {
            if (*(_QWORD *)v143 != v22)
              objc_enumerationMutation(v19);
            objc_msgSend(*(id *)(*((_QWORD *)&v142 + 1) + 8 * j), "setStoppingForModeSwitch:delayedEndOfDataEnabled:ispFastSwitchEnabled:smartStyleRenderingEnabledInTrueVideoGraph:", 1, a3, a4, a7);
          }
          v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v142, v159, 16);
        }
        while (v21);
      }
    }
    if (a5)
    {
      v140 = 0u;
      v141 = 0u;
      v138 = 0u;
      v139 = 0u;
      v24 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "stillImageSinkPipelineSessionStorages");
      v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v138, v158, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v139;
        do
        {
          for (k = 0; k != v26; ++k)
          {
            if (*(_QWORD *)v139 != v27)
              objc_enumerationMutation(v24);
            v29 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * k);
            if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v29, "stillImageSinkPipeline", v97), "compressedShotBufferNode"), "compressionResourcesAllocated"))objc_msgSend(*(id *)(DerivedStorage + 592), "setGraphStateTransitionTimeoutSeconds:", 30);
            objc_msgSend((id)objc_msgSend((id)objc_msgSend(v29, "stillImageSinkPipeline"), "compressedShotBufferNode"), "flushAndWaitUntilThreshold:", a6);
          }
          v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v138, v158, 16);
        }
        while (v26);
      }
    }
    if (a2 == -16403)
    {
      v136 = 0u;
      v137 = 0u;
      v134 = 0u;
      v135 = 0u;
      v30 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "previewSinkPipelines");
      v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v134, v157, 16);
      if (v31)
      {
        v32 = v31;
        v33 = *(_QWORD *)v135;
        do
        {
          for (m = 0; m != v32; ++m)
          {
            if (*(_QWORD *)v135 != v33)
              objc_enumerationMutation(v30);
            objc_msgSend(*(id *)(*((_QWORD *)&v134 + 1) + 8 * m), "setStoppingForClientBackgrounded:", 1, v97);
          }
          v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v134, v157, 16);
        }
        while (v32);
      }
    }
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    obj = (id)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelines", v97);
    v105 = DerivedStorage;
    v107 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v156, 16);
    if (v107)
    {
      v104 = *(_QWORD *)v131;
      v35 = 0x1E0C99000uLL;
      v110 = a1;
      do
      {
        v36 = 0;
        do
        {
          if (*(_QWORD *)v131 != v104)
            objc_enumerationMutation(obj);
          v108 = v36;
          v37 = *(void **)(*((_QWORD *)&v130 + 1) + 8 * v36);
          v126 = 0u;
          v127 = 0u;
          v128 = 0u;
          v129 = 0u;
          v38 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v37);
          v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v126, v155, 16);
          if (v39)
          {
            v40 = v39;
            v41 = *(_QWORD *)v127;
            v111 = v38;
            do
            {
              v42 = 0;
              v112 = v40;
              do
              {
                if (*(_QWORD *)v127 != v41)
                  objc_enumerationMutation(v38);
                v43 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * v42);
                if (objc_msgSend(v43, "irisMovieProcessingSuspended"))
                {
                  objc_msgSend(v43, "setIrisMovieProcessingSuspended:", 0);
                  v44 = objc_msgSend(v37, "sinkID");
                  *(_QWORD *)&v162[0] = CFSTR("SectionID");
                  v161[0] = v44;
                  captureSession_postNotificationWithPayload(a1, CFSTR("DidResumeIrisMovieProcessing"), (const void *)objc_msgSend(*(id *)(v35 + 3456), "dictionaryWithObjects:forKeys:count:", v161, v162, 1));
                }
                if (-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v37))
                {
                  v45 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v37);
                  if (v45)
                  {
                    objc_msgSend(v45, "endIrisMovieCaptureTime");
                    if ((v124 & 0x100000000) != 0)
                    {
                      v46 = objc_msgSend(v37, "sinkID");
                      v47 = CMBaseObjectGetDerivedStorage();
                      if (!_FigIsCurrentDispatchQueue())
                      {
                        v98 = v102;
                        LODWORD(v97) = 0;
                        FigDebugAssert3();
                      }
                      v48 = (os_unfair_lock_s *)(v47 + 320);
                      os_unfair_lock_lock((os_unfair_lock_t)(v47 + 320));
                      v49 = *(id *)(v47 + 408);
                      os_unfair_lock_unlock(v48);
                      v163 = 0u;
                      v164 = 0u;
                      memset(v162, 0, sizeof(v162));
                      v50 = (void *)objc_msgSend(v49, "connectionConfigurations");
                      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", v162, v161, 16);
                      if (v51)
                      {
                        v52 = v51;
                        v53 = **(_QWORD **)&v162[1];
LABEL_58:
                        v54 = v41;
                        v55 = 0;
                        while (1)
                        {
                          if (**(_QWORD **)&v162[1] != v53)
                            objc_enumerationMutation(v50);
                          v56 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v162[0] + 1) + 8 * v55), "irisSinkConfiguration", v97, v98);
                          if ((objc_msgSend((id)objc_msgSend(v56, "sinkID"), "isEqual:", v46) & 1) != 0)
                            break;
                          if (v52 == ++v55)
                          {
                            v52 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", v162, v161, 16);
                            v41 = v54;
                            if (v52)
                              goto LABEL_58;
                            goto LABEL_64;
                          }
                        }
                        v57 = objc_msgSend(v56, "preservesIrisMovieCaptureSuspendedOnSessionStop");

                        a1 = v110;
                        v35 = 0x1E0C99000uLL;
                        v41 = v54;
                        v38 = v111;
                        v40 = v112;
                        if ((v57 & 1) != 0)
                          goto LABEL_68;
                      }
                      else
                      {
LABEL_64:

                        a1 = v110;
                        v35 = 0x1E0C99000;
                        v38 = v111;
                        v40 = v112;
                      }
                      captureSession_updateInflightConfigurationWithIrisSinkPropertyForKey((uint64_t)a1, objc_msgSend(v37, "sinkID", v97), CFSTR("BeginIrisMovieCaptureHostTime"), 0);
                      v58 = objc_msgSend(v37, "sinkID");
                      *(_QWORD *)&v162[0] = CFSTR("SectionID");
                      v161[0] = v58;
                      captureSession_postNotificationWithPayload(a1, CFSTR("DidResumeIrisMovieCapture"), (const void *)objc_msgSend(*(id *)(v35 + 3456), "dictionaryWithObjects:forKeys:count:", v161, v162, 1));
                    }
                  }
                  else
                  {
                    v123 = 0;
                    v124 = 0;
                    v125 = 0;
                  }
                }
LABEL_68:
                ++v42;
              }
              while (v42 != v40);
              v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v126, v155, 16);
            }
            while (v40);
          }
          if (a3)
          {
            mach_absolute_time();
            v59 = (void *)-[FigCaptureMovieFileSinkPipeline fileCoordinatorNode]((uint64_t)v37);
            LODWORD(v60) = 1036831949;
            objc_msgSend(v59, "waitForRecordingToStopWithTimeout:", v60);
            mach_absolute_time();
            v61 = (float)(FigHostTimeToNanoseconds() / 1000) / 1000000.0;
            v62 = (void *)-[FigCaptureMovieFileSinkPipeline captureDevice]((uint64_t)v37);
            *(float *)&v63 = v61;
            objc_msgSend(v62, "setDurationAlreadyWaitedForRecordingStop:", v63);
          }
          v36 = v108 + 1;
          DerivedStorage = v105;
        }
        while (v108 + 1 != v107);
        v107 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v156, 16);
      }
      while (v107);
    }
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v64 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "stillImageSinkPipelineSessionStorages");
    v65 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v119, v154, 16);
    if (v65)
    {
      v66 = v65;
      v67 = *(_QWORD *)v120;
      do
      {
        for (n = 0; n != v66; ++n)
        {
          if (*(_QWORD *)v120 != v67)
            objc_enumerationMutation(v64);
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v119 + 1) + 8 * n), "stillImageSinkPipeline"), "stillImageCoordinatorNode"), "willStopGraph:", a2 == -16407);
        }
        v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v119, v154, 16);
      }
      while (v66);
    }
    v69 = *(void **)(DerivedStorage + 592);
    if (!a3)
      goto LABEL_101;
    if (a5 && !*(_QWORD *)(DerivedStorage + 688))
      *(_QWORD *)(DerivedStorage + 688) = objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 592), "memoryPool"), "newFlushAssertion:", CFSTR("parallelGraphRebuildFlushAssertion"));
    mach_absolute_time();
    if (dword_1ECFE9590)
    {
      v151 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v71 = v151;
      if (os_log_type_enabled(v70, type))
        v72 = v71;
      else
        v72 = v71 & 0xFFFFFFFE;
      if (v72)
      {
        v73 = *(_QWORD *)(DerivedStorage + 72);
        LODWORD(v162[0]) = 136315394;
        *(_QWORD *)((char *)v162 + 4) = "captureSession_stopGraph";
        WORD6(v162[0]) = 2114;
        *(_QWORD *)((char *)v162 + 14) = v73;
        LODWORD(v98) = 22;
        v97 = v162;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(v69, "stopSources:", &v152, v97, v98);
    mach_absolute_time();
    v74 = FigHostTimeToNanoseconds();
    if (dword_1ECFE9590)
    {
      v75 = v74;
      v151 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v77 = v151;
      if (os_log_type_enabled(v76, type))
        v78 = v77;
      else
        v78 = v77 & 0xFFFFFFFE;
      if (v78)
      {
        v79 = *(_QWORD *)(DerivedStorage + 72);
        LODWORD(v162[0]) = 136315650;
        *(_QWORD *)((char *)v162 + 4) = "captureSession_stopGraph";
        WORD6(v162[0]) = 2114;
        *(_QWORD *)((char *)v162 + 14) = v79;
        WORD3(v162[1]) = 2048;
        *((double *)&v162[1] + 1) = (float)((float)(v75 / 1000) / 1000.0);
        LODWORD(v98) = 32;
        v97 = v162;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v99 == 2)
    {
      v80 = 0;
    }
    else
    {
LABEL_101:
      v80 = a3 ^ 1;
      os_unfair_lock_lock(lock);
      v81 = (id)objc_msgSend(*(id *)(DerivedStorage + 480), "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 480), "allKeys"), "firstObject"));
      objc_msgSend(*(id *)(DerivedStorage + 480), "removeAllObjects");
      os_unfair_lock_unlock(lock);
      if (v81)
      {
        objc_msgSend((id)objc_msgSend(v81, "previewStitcherNode"), "markDelayedEndOfData");

        if (dword_1ECFE9590)
        {
          v151 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v83 = v151;
          if (os_log_type_enabled(v82, type))
            v84 = v83;
          else
            v84 = v83 & 0xFFFFFFFE;
          if (v84)
          {
            v85 = *(_QWORD *)(v105 + 72);
            LODWORD(v162[0]) = 136316162;
            *(_QWORD *)((char *)v162 + 4) = "captureSession_stopGraph";
            WORD6(v162[0]) = 2114;
            *(_QWORD *)((char *)v162 + 14) = v85;
            WORD3(v162[1]) = 2048;
            *((_QWORD *)&v162[1] + 1) = v81;
            LOWORD(v163) = 1024;
            *(_DWORD *)((char *)&v163 + 2) = v99 == 2;
            WORD3(v163) = 1024;
            DWORD2(v163) = a3;
            LODWORD(v98) = 44;
            v97 = v162;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          DerivedStorage = v105;
        }
      }
    }
    if ((v80 & 1) != 0 || !a5)
    {
      v86 = *(_QWORD *)(DerivedStorage + 688);
      *(_QWORD *)(DerivedStorage + 688) = 0;
    }
    else
    {
      v86 = 0;
    }
    v87 = *(_QWORD *)(DerivedStorage + 672);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSession_stopGraph_block_invoke;
    block[3] = &unk_1E4922EE8;
    v118 = a3;
    block[4] = v69;
    block[5] = v87;
    block[6] = v86;
    if (a3)
      dispatch_async(*(dispatch_queue_t *)(DerivedStorage + 112), block);
    else
      __captureSession_stopGraph_block_invoke((uint64_t)block);
  }
  *(_BYTE *)(DerivedStorage + 608) = 0;
  *(_WORD *)(DerivedStorage + 610) = 0;
  if (*(_QWORD *)(DerivedStorage + 664))
  {
    v88 = mach_absolute_time();
    v89 = *(_QWORD *)(DerivedStorage + 664);
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v90 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "cameraSourcePipelines");
    v91 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v113, v153, 16);
    if (v91)
    {
      v92 = v91;
      v93 = v88 - v89;
      v94 = *(_QWORD *)v114;
      do
      {
        for (ii = 0; ii != v92; ++ii)
        {
          if (*(_QWORD *)v114 != v94)
            objc_enumerationMutation(v90);
          -[FigCaptureCameraSourcePipeline logCameraStreamingInformationToAggd:applicationID:](*(_QWORD *)(*((_QWORD *)&v113 + 1) + 8 * ii), v93, objc_msgSend(*(id *)(DerivedStorage + 592), "clientApplicationID", v97, v98));
        }
        v92 = objc_msgSend(v90, "countByEnumeratingWithState:objects:count:", &v113, v153, 16);
      }
      while (v92);
    }
    *(_QWORD *)(DerivedStorage + 664) = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v96 = *(void **)(DerivedStorage + 424);
  *(_QWORD *)(DerivedStorage + 424) = 0;
  *(_BYTE *)(DerivedStorage + 497) = 0;
  *(_BYTE *)(DerivedStorage + 499) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));

}

void __captureSession_updateGraphConfiguration_block_invoke(uint64_t a1, char a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if ((a2 & 1) == 0)
  {
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSession_makeCommittedConfigurationLive(*(const void **)(a1 + 32));
  }
}

uint64_t cs_configurationIsConfiguredForBackgroundBlur(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v1 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "backgroundBlurEnabled"))
          v4 |= objc_msgSend(a1, "suppressVideoEffects") ^ 1;
        v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isBackgroundBlurProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isBackgroundBlurSupported"))
        {
          if (objc_msgSend(v10, "stillImageSinkConfiguration") || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            v6 = 1;
            v7 = 1;
          }
          else
          {
            v6 = 1;
          }
        }
        v5 |= v11;
        if ((v4 & v6 & 1) != 0 && (v7 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      v12 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v3 = v12;
    }
    while (v12);
LABEL_20:
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("backgroundblur"), v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t cs_configurationIsConfiguredForStudioLighting(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v1 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "studioLightingEnabled"))
          v4 |= objc_msgSend(a1, "suppressVideoEffects") ^ 1;
        v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isStudioLightingProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isStudioLightingSupported"))
        {
          if (objc_msgSend(v10, "stillImageSinkConfiguration") || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            v6 = 1;
            v7 = 1;
          }
          else
          {
            v6 = 1;
          }
        }
        v5 |= v11;
        if ((v4 & v6 & 1) != 0 && (v7 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      v12 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v3 = v12;
    }
    while (v12);
LABEL_20:
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("studiolighting"), v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t cs_configurationIsConfiguredForReactionEffects(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v1 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "reactionEffectsEnabled"))
          v4 |= objc_msgSend(a1, "suppressVideoEffects") ^ 1;
        v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "reactionEffectsProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "reactionEffectsSupported"))
        {
          if (objc_msgSend(v10, "stillImageSinkConfiguration") || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            v6 = 1;
            v7 = 1;
          }
          else
          {
            v6 = 1;
          }
        }
        v5 |= v11;
        if ((v4 & v6 & 1) != 0 && (v7 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      v12 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v3 = v12;
    }
    while (v12);
LABEL_20:
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("reactioneffects"), v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

uint64_t cs_configurationIsConfiguredForBackgroundReplacement(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v1 = (void *)objc_msgSend(a1, "connectionConfigurations");
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(v1);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v9);
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "backgroundReplacementEnabled"))
          v4 |= objc_msgSend(a1, "suppressVideoEffects") ^ 1;
        v11 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "requiredFormat"), "isBackgroundReplacementProvidedBySource");
        if (objc_msgSend((id)objc_msgSend(v10, "sourceConfiguration"), "isBackgroundReplacementSupported"))
        {
          if (objc_msgSend(v10, "stillImageSinkConfiguration") || objc_msgSend(v10, "irisSinkConfiguration"))
          {
            v6 = 1;
            v7 = 1;
          }
          else
          {
            v6 = 1;
          }
        }
        v5 |= v11;
        if ((v4 & v6 & 1) != 0 && (v7 & 1) != 0)
        {
          LOBYTE(v6) = 1;
          v7 = 1;
          LOBYTE(v4) = 1;
          goto LABEL_20;
        }
        ++v9;
      }
      while (v3 != v9);
      v12 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v3 = v12;
    }
    while (v12);
LABEL_20:
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v4) = 0;
  }
  return FigCaptureVideoEffectEnabledInGraph((uint64_t)CFSTR("backgroundreplacement"), v4 & 1, v6 & 1, 0, v7 & 1, 0);
}

void *cs_configurationVideoZoomFactorBySourceTypeConfiguredForDepthData(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = (void *)objc_msgSend(a1, "sourceConfigurations", 0);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v8, "depthDataDeliveryEnabled"))
        {
          v9 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v8, "videoZoomFactor");
          v10 = objc_msgSend(v9, "numberWithFloat:");
          objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v8, "sourceDeviceType")));
          return v2;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v5)
        continue;
      break;
    }
  }
  return v2;
}

void captureSession_updateInflightConfigurationWithIrisSinkPropertyForKey(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  os_unfair_lock_s *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v21 = v4;
    LODWORD(v20) = 0;
    FigDebugAssert3();
  }
  v8 = (os_unfair_lock_s *)(DerivedStorage + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
  v9 = *(id *)(DerivedStorage + 408);
  os_unfair_lock_unlock(v8);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v10 = (void *)objc_msgSend(v9, "connectionConfigurations");
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v24 != v13)
          objc_enumerationMutation(v10);
        v15 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * i), "irisSinkConfiguration", v20, v21);
        if (objc_msgSend((id)objc_msgSend(v15, "sinkID"), "isEqual:", a2))
        {
          if (CFEqual(a3, CFSTR("BeginIrisMovieCaptureHostTime")))
          {
            if (dword_1ECFE9590)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v18 = v15;
            v19 = 0;
LABEL_19:
            objc_msgSend(v18, "setIrisMovieCaptureSuspended:", v19, v20);
            continue;
          }
          if (CFEqual(a3, CFSTR("EndIrisMovieCaptureHostTime")))
          {
            if (dword_1ECFE9590)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v18 = v15;
            v19 = 1;
            goto LABEL_19;
          }
          if (CFEqual(a3, CFSTR("PreservesLivePhotoCaptureSuspendedOnSessionStop")))
            objc_msgSend(v15, "setPreservesIrisMovieCaptureSuspendedOnSessionStop:", objc_msgSend(a4, "BOOLValue"));
        }
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v12);
  }

}

void __captureSession_stopGraph_block_invoke(uint64_t a1)
{
  const char *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v4;
  _QWORD v5[21];

  v5[20] = *MEMORY[0x1E0C80C00];
  v5[0] = 0;
  mach_absolute_time();
  objc_msgSend(*(id *)(a1 + 32), "stop:", v5);
  if (*(_BYTE *)(a1 + 56))
  {
    mach_absolute_time();
    FigHostTimeToNanoseconds();
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v4 = *(void **)(a1 + 40);
  if (v4)
    objc_setProperty_nonatomic(v4, v2, 0, 16);

}

BOOL cs_audioIsPlayingToBuiltInSpeaker(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "isOtherAudioPlaying"))
    return 0;
  v2 = (void *)objc_msgSend(a1, "currentRoute");
  if (!v2)
    return 0;
  v3 = (void *)objc_msgSend(v2, "outputs");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v18;
  v7 = *MEMORY[0x1E0CFF138];
LABEL_5:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v18 != v6)
      objc_enumerationMutation(v3);
    if (objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v8), "portType") == v7)
      break;
    if (v5 == ++v8)
    {
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
      v9 = 0;
      if (v5)
        goto LABEL_5;
      return v9;
    }
  }
  v10 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedAVSystemController");
  v11 = (void *)objc_msgSend(v10, "attributeForKey:", *MEMORY[0x1E0D48060]);
  if (!objc_msgSend(v11, "count"))
    return 0;
  v12 = 0;
  v13 = (_QWORD *)MEMORY[0x1E0D48078];
  while (1)
  {
    v14 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", v12), "objectForKey:", *v13), "integerValue");
    v21 = 0;
    v15 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v14), &v21);
    v9 = v21 == 0;
    if (v21
      || (FigCaptureClientApplicationIDIsCameraOrDerivative((void *)objc_msgSend((id)objc_msgSend(v15, "bundle"), "identifier")) & 1) == 0)
    {
      break;
    }
    if (objc_msgSend(v11, "count") <= (unint64_t)++v12)
      return 0;
  }
  return v9;
}

uint64_t captureSession_getSystemStyleFromDefaults()
{
  uint64_t DerivedStorage;
  uint64_t result;
  char v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCaptureSmartStyleSettingsGetSystemStyle(*(_QWORD *)(DerivedStorage + 56));
  if (!result)
  {
    v2 = objc_msgSend(0, "isEqual:", objc_msgSend(MEMORY[0x1E0C99E38], "null"));
    result = 0;
    if ((v2 & 1) == 0)
      return FigCaptureSmartStyleSettingsGetSystemStyle(FigCaptureSmartStyleSettingsSystemStyle);
  }
  return result;
}

uint64_t captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  uint64_t result;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigDebugAssert3();
  v3 = DerivedStorage;
  if (*DerivedStorage)
    return FigDebugAssert3();
  result = FigCaptureAudiomxdSupportEnabled();
  if (!(_DWORD)result)
    return result;
  if (!_FigIsCurrentDispatchQueue())
    FigDebugAssert3();
  if (*((_QWORD *)v3 + 36))
    return FigDebugAssert3();
  if (*((_QWORD *)v3 + 37))
    return FigDebugAssert3();
  v5 = (void *)objc_msgSend(*((id *)v3 + 90), "objectForKeyedSubscript:", 0x1E492D2B8);
  if (!v5)
    return FigDebugAssert3();
  v6 = (void *)objc_msgSend(v5, "supportedProperties");
  result = objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D059B0]);
  if (!result)
    return result;
  v7 = +[FigWeakReference weakReferenceToObject:](FigWeakReference, "weakReferenceToObject:", a1);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedInstance");
  v9 = (uint64_t *)MEMORY[0x1E0D48270];
  v20[0] = *MEMORY[0x1E0D48270];
  v10 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  objc_msgSend(v8, "setAttribute:forKey:error:", v10, *MEMORY[0x1E0D48280], 0);
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v12 = MEMORY[0x1E0C809B0];
  v13 = *v9;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke;
  v19[3] = &unk_1E491EAC8;
  v19[4] = v7;
  v14 = (void *)objc_msgSend(v11, "addObserverForName:object:queue:usingBlock:", v13, v8, 0, v19);
  if (!v14)
    return FigDebugAssert3();
  *((_QWORD *)v3 + 36) = v14;
  v15 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v16 = *MEMORY[0x1E0CFF188];
  v18[0] = v12;
  v18[1] = 3221225472;
  v18[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_3;
  v18[3] = &unk_1E491EAC8;
  v18[4] = v7;
  v17 = (void *)objc_msgSend(v15, "addObserverForName:object:queue:usingBlock:", v16, objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance"), 0, v18);
  if (!v17)
    return FigDebugAssert3();
  *((_QWORD *)v3 + 37) = v17;
  return captureSession_handlePlaybackOrRouteStateChange();
}

void __captureSession_activateCameraCaptureSourcesAndCreateDevices_block_invoke(uint64_t a1, int a2, int a3, int a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  _BYTE *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 712) == a2)
  {
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a4 == 2)
    {
      if ((a3 & 1) != 0)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return;
      }
      v9 = (_BYTE *)(*(_QWORD *)(a1 + 40) + 332);
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v11 = 0;
      v8 = 4294950890;
    }
    else
    {
      if (a4 == 1)
      {
        v8 = 0;
        v9 = (_BYTE *)(*(_QWORD *)(a1 + 40) + 342);
      }
      else
      {
        if (a4)
          return;
        v8 = 0;
        v9 = (_BYTE *)(*(_QWORD *)(a1 + 40) + 340);
      }
      v11 = a3 ^ 1;
    }
    captureSession_updateSessionStateWithNewInputCondition(*(_QWORD *)(a1 + 32), v9, v11, v8, 0);
  }
}

void *cs_createAuxiliaryAVAudioSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v10[23];

  v10[22] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CFF1C8]), "initAuxiliarySession");
  objc_msgSend(v6, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D495D8], a3, v10);
  if (v10[0]
    || (objc_msgSend(v6, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D495E8], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1), v10), v10[0])|| (v7 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a2, 32), objc_msgSend(v6, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D49558], v7, v10), v10[0]))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (v10[0])
    {

      return 0;
    }
  }
  return v6;
}

uint64_t cs_clientWantsAudioResumptionOnBackground(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E493D4D8) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E493D418) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return objc_msgSend(a1, "isEqualToString:", 0x1E493D5F8);
  }
}

uint64_t __captureSession_buildMicSourcePipeline_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 272) = 0;
  v2 = *(void **)(v1 + 216);
  if (v2)
  {
    v4 = 0;
    return objc_msgSend(v2, "setMXSessionProperty:value:error:", *MEMORY[0x1E0D49D20], MEMORY[0x1E0C9AAA0], &v4);
  }
  else
  {
    result = *(_QWORD *)(v1 + 224);
    if (result)
      return CMSessionSetProperty();
  }
  return result;
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[7];

  v2 = (void *)MEMORY[0x1A858DD40]();
  v3 = objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3)
  {
    v5 = DerivedStorage;
    captureSession_stopMonitoringAudioPlaybackAndRouteChangeNotifications();
    if (!*(_BYTE *)v5)
    {
      if (*(_QWORD *)(v5 + 216))
      {
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = __captureSession_startObservingForAudiomxdDeath_block_invoke_2;
        v7[3] = &__block_descriptor_56_e5_v8__0l;
        v6 = *(_QWORD *)(a1 + 40);
        v7[4] = v5;
        v7[5] = v6;
        v7[6] = v3;
        captureSession_performBlockOnWorkerQueueSynchronously(v3, (uint64_t)v7);
      }
    }
  }
  objc_autoreleasePoolPop(v2);
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_2(_QWORD *a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!*(_BYTE *)a1[4])
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    captureSession_updateSessionStateWithNewInputCondition(a1[6], (_BYTE *)(a1[5] + 332), 0, 0, 0);
    objc_msgSend(*(id *)(a1[4] + 216), "removeObserverForType:observer:name:", 1, *(_QWORD *)(a1[4] + 280), *MEMORY[0x1E0CFF008]);

    *(_QWORD *)(a1[4] + 280) = 0;
  }
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_504(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  _QWORD v6[7];

  v2 = (void *)MEMORY[0x1A858DD40]();
  v3 = objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v3 && !*(_BYTE *)DerivedStorage && *(_QWORD *)(DerivedStorage + 216))
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __captureSession_startObservingForAudiomxdDeath_block_invoke_2_505;
    v6[3] = &__block_descriptor_56_e5_v8__0l;
    v5 = *(_QWORD *)(a1 + 40);
    v6[4] = DerivedStorage;
    v6[5] = v5;
    v6[6] = v3;
    captureSession_performBlockOnWorkerQueueSynchronously(v3, (uint64_t)v6);
  }
  objc_autoreleasePoolPop(v2);
}

void __captureSession_startObservingForAudiomxdDeath_block_invoke_2_505(uint64_t a1)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v4;
  const __CFString *v5;
  _QWORD v6[17];

  v6[16] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)v1)
  {
    if (dword_1ECFE9590)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v1 = *(_QWORD *)(a1 + 32);
    }

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216) = 0;
    v4 = *(const void **)(a1 + 48);
    v5 = CFSTR("ErrorStatus");
    v6[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4294951751);
    captureSession_postNotificationWithPayload(v4, CFSTR("DidStopRunning"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1));
  }
}

uint64_t cs_shouldEnablePocketDetection(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  if (a1
    && a2
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(),
        cs_isPocketDetectionNeeded(*(_QWORD *)(DerivedStorage + 56))))
  {
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "sourceConfiguration"), "requiredFormat"), "isPocketDetectionSupported");
  }
  else
  {
    return 0;
  }
}

unint64_t stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(void *a1, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  int v15;
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  int64_t v20;
  unsigned int v21;
  unint64_t v22;
  double width;
  double height;
  _BOOL4 IsNull;
  uint64_t v27;
  unint64_t v28;
  CGRect v29;

  LODWORD(v4) = objc_msgSend(a2, "outputWidth");
  v5 = objc_msgSend(a2, "outputHeight");
  objc_msgSend(a2, "videoStabilizationOverscanCropMultiplier");
  v7 = v6;
  v8 = objc_msgSend(a1, "cameraSourcePipeline");
  v9 = (void *)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "highResStillImageDimensions");
  v10 = +[FigCaptureSourceFormatDimensions identifySourceFormatDimensionsFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifySourceFormatDimensionsFromDimensions:availableHighResStillImageDimensions:", v4 | (unint64_t)(v5 << 32), v9);
  if (v7 != 0.0 && objc_msgSend(v10, "flavor"))
  {
    v11 = objc_msgSend((id)objc_msgSend(v9, "firstObject"), "dimensions");
    v5 = HIDWORD(v11);
    LODWORD(v4) = v11;
  }
  if (!(v4 | v5))
  {
    v4 = -[FigCaptureCameraSourcePipeline firmwareStillImageDimensionsAfterOverscanCropping](v8);
    if (FigCaptureVideoDimensionsAreValid(v4))
    {
      v5 = HIDWORD(v4);
    }
    else
    {
      v5 = -[FigCaptureCameraSourcePipeline stillImageOutputVideoFormat](v8);
      LODWORD(v4) = objc_msgSend((id)v5, "width");
      LODWORD(v5) = objc_msgSend((id)v5, "height");
    }
    if (!FigCaptureVideoDimensionsAreValid(v4 | ((unint64_t)v5 << 32)))
    {
      v12 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "defaultHighResStillImageDimensions");
      LODWORD(v4) = v12;
      v5 = HIDWORD(v12);
    }
    if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stillImageConnectionConfiguration"), "sourceConfiguration"), "cinematicFramingEnabled") & 1) != 0|| objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stillImageConnectionConfiguration"), "sourceConfiguration"), "manualCinematicFramingEnabled"))
    {
      v13 = (void *)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "highResStillImageDimensions"), "firstObject");
      if (v13)
        v14 = objc_msgSend(v13, "dimensions");
      else
        v14 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "cinematicFramingOutputDimensions");
      LODWORD(v4) = v14;
      v5 = HIDWORD(v14);
    }
    else
    {
      v27 = -[FigCaptureCameraSourcePipeline captureSource](v8);
      if (csp_gdcExpandsImageDimensions(v27))
      {
        v28 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v8), "defaultHighResStillImageDimensions");
        v5 = HIDWORD(v28);
        LODWORD(v4) = v28;
      }
    }
  }
  v15 = objc_msgSend(a2, "squareCropEnabled");
  v16 = v4 != v5;
  if ((int)v4 >= (int)v5)
    v17 = v5;
  else
    v17 = v4;
  if ((v15 & v16) != 0)
    v18 = v17;
  else
    v18 = v5;
  if ((v15 & v16) != 0)
    v4 = v17;
  else
    v4 = v4;
  objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v8), "zoomFactor");
  v20 = BWDimensionsConformingToZoomWithoutUpscalingIfRequired(v4 | (v18 << 32), a2, v19);
  v21 = v20;
  v22 = HIDWORD(v20);
  if (v7 != 0.0)
  {
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)v20, v20 >> 32, (1.0 - v7) * 0.5, (1.0 - v7) * 0.5, v7, v7, (double)(int)v20 / (double)SHIDWORD(v20));
    width = v29.size.width;
    height = v29.size.height;
    IsNull = CGRectIsNull(v29);
    if (IsNull)
      v22 = v22;
    else
      v22 = (int)height;
    if (!IsNull)
      v21 = (int)width;
  }
  return v21 | (v22 << 32);
}

uint64_t __captureSession_configureStillImageSinkNode_block_invoke(uint64_t a1, opaqueCMSampleBuffer *a2, void *a3, void *a4)
{
  captureSession_handleCapturedStillImage(*(const void **)(a1 + 56), *(void **)(a1 + 32), *(_QWORD *)(a1 + 40), a2, a3, a4);
  return objc_msgSend(*(id *)(a1 + 48), "clientReceivedPayloadForSettings:status:clientIsMidStillImageGraph:", a4, a3, 0);
}

void captureSession_handleCapturedStillImage(const void *a1, void *a2, uint64_t a3, opaqueCMSampleBuffer *a4, void *a5, void *a6)
{
  uint64_t v6;
  void *v11;
  uint64_t v12;
  int v13;
  const __CFString *v14;
  void *v15;
  void *ClientSpecifiedMetadataForOfflineStillImageVideoStabilization;
  uint64_t ClientSpecifiedMetadataForAggd;
  void *v18;
  opaqueCMSampleBuffer *v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const void *StillImageMetadataInSettingsForSampleBuffer;
  void *IrisAssetIdentifierForSettingsAndSampleBuffer;
  const void *v27;
  __CFDictionary *MetadataAttachments;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  __CFDictionary *v32;
  void *v33;
  __IOSurface *v34;
  void *v35;
  CFTypeRef v36;
  CFTypeRef v37;
  __CFString **v38;
  __CFString **v39;
  __CFString **v40;
  __CFString **v41;
  __IOSurface *v42;
  void *v43;
  const __CFAllocator *v44;
  CFDictionaryRef v45;
  CFDictionaryRef v46;
  int v47;
  opaqueCMSampleBuffer *AttachedMedia;
  __CVBuffer *ImageBuffer;
  IOSurfaceRef IOSurface;
  CFTypeRef v51;
  opaqueCMSampleBuffer *v52;
  opaqueCMSampleBuffer *v53;
  __CVBuffer *v54;
  IOSurfaceRef v55;
  CFTypeRef v56;
  void *v57;
  opaqueCMSampleBuffer *v58;
  opaqueCMSampleBuffer *v59;
  __CVBuffer *v60;
  IOSurfaceRef v61;
  CFTypeRef v62;
  void *v63;
  opaqueCMSampleBuffer *v64;
  opaqueCMSampleBuffer *v65;
  __CVBuffer *v66;
  IOSurfaceRef v67;
  CFTypeRef v68;
  void *v69;
  opaqueCMSampleBuffer *v70;
  opaqueCMSampleBuffer *v71;
  __CVBuffer *v72;
  IOSurfaceRef v73;
  CFTypeRef v74;
  void *v75;
  opaqueCMSampleBuffer *v76;
  opaqueCMSampleBuffer *v77;
  __CVBuffer *v78;
  IOSurfaceRef v79;
  CFTypeRef v80;
  CFTypeRef v81;
  CFTypeRef v82;
  void *v83;
  const __CFString *v84;
  const void *v85;
  void *v86;
  uint64_t v87;
  size_t v88;
  CMVideoCodecType v89;
  CMVideoFormatDescriptionRef *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  CVImageBufferRef v97;
  __CVBuffer *v98;
  __CVBuffer *v99;
  __IOSurface *v100;
  size_t AllocSize;
  const __CFAllocator *v102;
  CFDictionaryRef v103;
  opaqueCMSampleBuffer *v104;
  __CVBuffer *v105;
  IOSurfaceRef v106;
  CFTypeRef v107;
  CFTypeRef v108;
  opaqueCMSampleBuffer *v109;
  opaqueCMSampleBuffer *v110;
  __CVBuffer *v111;
  IOSurfaceRef v112;
  CFTypeRef v113;
  void *v114;
  int v115;
  CFStringRef *v116;
  opaqueCMSampleBuffer *v117;
  opaqueCMSampleBuffer *v118;
  __CVBuffer *v119;
  IOSurfaceRef v120;
  CFTypeRef v121;
  void *v122;
  opaqueCMSampleBuffer *v123;
  opaqueCMSampleBuffer *v124;
  __CVBuffer *v125;
  IOSurfaceRef v126;
  CFTypeRef v127;
  void *v128;
  opaqueCMSampleBuffer *v129;
  opaqueCMSampleBuffer *v130;
  __CVBuffer *v131;
  IOSurfaceRef v132;
  CFTypeRef v133;
  void *v134;
  opaqueCMSampleBuffer *v135;
  opaqueCMSampleBuffer *v136;
  __CVBuffer *v137;
  IOSurfaceRef v138;
  CFTypeRef v139;
  opaqueCMSampleBuffer *v140;
  __CVBuffer *v141;
  IOSurfaceRef v142;
  CFTypeRef v143;
  uint64_t v144;
  const __CFString *v145;
  opaqueCMSampleBuffer *v146;
  opaqueCMSampleBuffer *v147;
  __IOSurface *v148;
  size_t v149;
  void *v150;
  uint64_t v151;
  __CFDictionary *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  void (*v157)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  unsigned int v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  void *v163;
  double width;
  double height;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  void *v170;
  uint64_t v171;
  __CFString **v172;
  CFTypeRef *v173;
  uint64_t v174;
  uint64_t v175;
  CFTypeRef v176;
  const __CFString *v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  const __CFAllocator *v181;
  CFDictionaryRef v182;
  opaqueCMSampleBuffer *v183;
  __CVBuffer *v184;
  CFTypeRef v185;
  CFTypeRef v186;
  void *v187;
  __IOSurface *v188;
  __IOSurface *v189;
  CFTypeRef v190;
  __CFString **v191;
  __CVBuffer *v192;
  __CVBuffer *v193;
  CFTypeRef *v194;
  CFTypeRef v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  int v199;
  int v200;
  char v201;
  const void *v202;
  const void *v203;
  __CFString **v204;
  __CFString *v205;
  void *v206;
  void *v207;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFString **v209;
  __CFString *v210;
  NSObject *v211;
  int *v212;
  int v213;
  double Seconds;
  NSObject *v215;
  Float64 v216;
  int v217;
  Float64 v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t i;
  uint64_t v225;
  uint64_t v226;
  char v227[8];
  char v228[8];
  uint64_t v229;
  uint64_t v230;
  OSType PixelFormatType;
  unint64_t v232;
  size_t v233;
  void *v234;
  __CVBuffer *v235;
  void *v236;
  void *v237;
  uint64_t v238;
  char isKindOfClass;
  void *v240;
  int IsBayerRaw;
  void *v242;
  int v243;
  void *v244;
  unsigned int v245;
  _BOOL4 v246;
  void *v247;
  int v248[2];
  void *v249;
  void *v251;
  void *v252;
  int v253;
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *target;
  int v257;
  __CFString *v258;
  _QWORD v259[7];
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  CMTime v264[2];
  os_log_type_t type;
  int v266;
  CFTypeRef v267;
  CFTypeRef v268;
  CMSampleBufferRef sbuf;
  CFTypeRef cf;
  _BYTE v271[128];
  CMTime time;
  CMTime v273;
  uint64_t v274;
  CGRect v275;

  v274 = *MEMORY[0x1E0C80C00];
  sbuf = 0;
  cf = 0;
  v267 = 0;
  v268 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v244 = a2;
  v11 = (void *)objc_msgSend(a2, "stillImageSinkPipelineSessionStorageWithSinkID:", a3);
  v249 = (void *)objc_msgSend(v11, "stillImageSinkPipeline");
  v12 = objc_msgSend(v11, "cameraSourcePipeline");
  v237 = (void *)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](v12);
  v257 = objc_msgSend(a6, "outputFormat");
  IsBayerRaw = FigCapturePixelFormatIsBayerRaw(objc_msgSend(a6, "rawOutputFormat"));
  v253 = IsBayerRaw | FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a6, "rawOutputFormat"));
  objc_opt_class();
  v251 = a6;
  v252 = v11;
  target = a4;
  isKindOfClass = objc_opt_isKindOfClass();
  if ((_DWORD)a5)
  {
    v229 = v6;
    *(_DWORD *)v227 = (_DWORD)a5;
    FigDebugAssert3();
LABEL_308:
    v245 = 0;
    v243 = 0;
    v85 = 0;
    MetadataAttachments = 0;
    v86 = 0;
    v43 = 0;
LABEL_309:
    v196 = 0;
    goto LABEL_233;
  }
  if (!a4)
  {
    v229 = v6;
    *(_DWORD *)v227 = 0;
LABEL_307:
    FigDebugAssert3();
    a5 = (void *)FigSignalErrorAt();
    goto LABEL_308;
  }
  if (!a6)
  {
    v229 = v6;
    *(_DWORD *)v227 = 0;
    goto LABEL_307;
  }
  v245 = objc_msgSend((id)CMGetAttachment(a4, CFSTR("StillImageProcessingFlags"), 0), "unsignedIntValue");
  v243 = (v245 >> 12) & 1;
  v13 = objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8);
  if ((objc_msgSend(v11, "stillImagesAreOptimizedForOfflineVideoStabilization") & 1) != 0 || v13)
  {
    v14 = (const __CFString *)*MEMORY[0x1E0D05C18];
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05C18], 0));
    if (objc_msgSend(v11, "stillImagesAreOptimizedForOfflineVideoStabilization"))
    {
      ClientSpecifiedMetadataForOfflineStillImageVideoStabilization = (void *)FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForOfflineStillImageVideoStabilization(a4);
      if (ClientSpecifiedMetadataForOfflineStillImageVideoStabilization)
      {
        objc_msgSend(v15, "addEntriesFromDictionary:", ClientSpecifiedMetadataForOfflineStillImageVideoStabilization);

        LODWORD(ClientSpecifiedMetadataForOfflineStillImageVideoStabilization) = 1;
      }
      if (!v13)
        goto LABEL_14;
    }
    else
    {
      LODWORD(ClientSpecifiedMetadataForOfflineStillImageVideoStabilization) = 0;
      if (!v13)
        goto LABEL_14;
    }
    ClientSpecifiedMetadataForAggd = FigCaptureMetadataUtilitiesCreateClientSpecifiedMetadataForAggd(a4);
    if (ClientSpecifiedMetadataForAggd)
    {
      v18 = (void *)ClientSpecifiedMetadataForAggd;
      objc_msgSend(v15, "addEntriesFromDictionary:", ClientSpecifiedMetadataForAggd);

      goto LABEL_15;
    }
LABEL_14:
    if (!(_DWORD)ClientSpecifiedMetadataForOfflineStillImageVideoStabilization)
    {
LABEL_16:

      goto LABEL_17;
    }
LABEL_15:
    CMSetAttachment(a4, v14, v15, 1u);
    goto LABEL_16;
  }
LABEL_17:
  v19 = a4;
  v20 = (void *)objc_msgSend((id)CMGetAttachment(a4, CFSTR("PhotoManifest"), 0), "descriptorForSampleBuffer:", a4);
  v246 = FigCaptureMetadataUtilitiesShouldIncludeDiagnosticMetadata() != 0;
  v21 = objc_msgSend(a6, "outputOrientation");
  v22 = objc_msgSend(a6, "outputMirroring");
  v238 = v12;
  v23 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v12), "hasFlash");
  v24 = objc_msgSend(a6, "flashMode");
  StillImageMetadataInSettingsForSampleBuffer = (const void *)FigCaptureMetadataUtilitiesGetStillImageMetadataInSettingsForSampleBuffer(a6, v19);
  IrisAssetIdentifierForSettingsAndSampleBuffer = (void *)FigCaptureMetadataUtilitiesGetIrisAssetIdentifierForSettingsAndSampleBuffer(a6, v19);
  v27 = (const void *)objc_msgSend(a6, "imageGroupIdentifier");
  v240 = v20;
  v230 = objc_msgSend(v20, "time");
  a4 = target;
  MetadataAttachments = FigCaptureMetadataUtilitiesCreateMetadataAttachments(target, v21, v22, v23, 1, v24, v246, 1, 0, 1, 1, 0, 0, 0, StillImageMetadataInSettingsForSampleBuffer, IrisAssetIdentifierForSettingsAndSampleBuffer, v27, 0, v230,
                          objc_msgSend(*(id *)(DerivedStorage + 592), "clientExpectsCameraMountedInLandscapeOrientation"));
  if (!v257)
  {
    v43 = 0;
    v11 = v252;
    goto LABEL_86;
  }
  v29 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(v29, "setObject:forKeyedSubscript:", a3, CFSTR("SectionID"));
  objc_msgSend(v29, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a6, "settingsID")), CFSTR("SettingsID"));
  v30 = objc_msgSend(a6, "outputWidth");
  v31 = objc_msgSend(a6, "outputHeight");
  if (objc_msgSend(a6, "outputFormat") == 1785750887
    || objc_msgSend(a6, "outputFormat") == 1752589105)
  {
    v32 = MetadataAttachments;
    v33 = v29;
    a4 = target;
    v34 = (__IOSurface *)CMGetAttachment(target, CFSTR("EncodedImageSurface"), 0);
    v35 = (void *)CMGetAttachment(target, CFSTR("EncodedImageSurfaceSize"), 0);
    if (objc_msgSend(a6, "payloadType") == 1)
    {
      v36 = CMGetAttachment(target, CFSTR("EncodedImageCodecType"), 0);
      v37 = CMGetAttachment(target, CFSTR("EncodedImageFileType"), 0);
      v38 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurface;
      if ((v245 & 0x1000) != 0)
      {
        v39 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxySurfaceSize;
      }
      else
      {
        v38 = kFigCaptureSessionNotificationPayloadKey_Surface;
        v39 = kFigCaptureSessionNotificationPayloadKey_SurfaceSize;
      }
      if ((v245 & 0x1000) != 0)
        v40 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyCodec;
      else
        v40 = kFigCaptureSessionNotificationPayloadKey_PhotoCodec;
      if ((v245 & 0x1000) != 0)
        v41 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyFileType;
      else
        v41 = kFigCaptureSessionNotificationPayloadKey_PhotoFileType;
      v42 = v34;
      v43 = v33;
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v42, *v38);
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v35, *v39);
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v36, *v40);
      objc_msgSend(v33, "setObject:forKeyedSubscript:", v37, *v41);
      MetadataAttachments = v32;
      if (v32)
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v32, CFSTR("Metadata"));
      memset(&v273, 0, sizeof(v273));
      CMSampleBufferGetPresentationTimeStamp(&v273, target);
      v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = v273;
      v45 = CMTimeCopyAsDictionary(&time, v44);
      a6 = v251;
      if (v45)
      {
        v46 = v45;
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v45, CFSTR("PresentationTimestamp"));

      }
      objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v251, "captureRequestIdentifier"), CFSTR("CaptureRequestIdentifier"));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", objc_msgSend(v240, "photoIdentifier"), CFSTR("PhotoIdentifier"));
      v11 = v252;
      v47 = v253;
      if (objc_msgSend(v251, "depthDataDeliveryEnabled")
        && (objc_msgSend(v251, "embedsDepthDataInImage") & 1) == 0)
      {
        AttachedMedia = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("Depth"));
        if (AttachedMedia)
        {
          ImageBuffer = CMSampleBufferGetImageBuffer(AttachedMedia);
          if (ImageBuffer)
          {
            IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
            if (IOSurface)
              objc_msgSend(v43, "setObject:forKeyedSubscript:", IOSurface, CFSTR("DepthDataSurface"));
          }
        }
        v51 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D086F0], 0);
        if (v51)
          objc_msgSend(v43, "setObject:forKeyedSubscript:", v51, CFSTR("DepthMetadata"));
      }
      if (objc_msgSend(v251, "portraitEffectsMatteDeliveryEnabled")
        && (objc_msgSend(v251, "embedsPortraitEffectsMatteInImage") & 1) == 0)
      {
        v52 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, 0x1E495AF38);
        v53 = v52;
        if (v52)
        {
          v54 = CMSampleBufferGetImageBuffer(v52);
          if (v54)
          {
            v55 = CVPixelBufferGetIOSurface(v54);
            if (v55)
              objc_msgSend(v43, "setObject:forKeyedSubscript:", v55, CFSTR("PortraitEffectsMatteSurface"));
          }
        }
        v56 = CMGetAttachment(v53, (CFStringRef)*MEMORY[0x1E0D08730], 0);
        if (v56)
          objc_msgSend(v43, "setObject:forKeyedSubscript:", v56, CFSTR("PortraitEffectsMatteMetadata"));
      }
      if (objc_msgSend((id)objc_msgSend(v251, "enabledSemanticSegmentationMatteURNs"), "count")
        && (objc_msgSend(v251, "embedsSemanticSegmentationMattesInImage") & 1) == 0)
      {
        v57 = (void *)objc_msgSend(v251, "enabledSemanticSegmentationMatteURNs");
        if (objc_msgSend(v57, "containsObject:", *MEMORY[0x1E0D09288]))
        {
          v58 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsHair"));
          v59 = v58;
          if (v58)
          {
            v60 = CMSampleBufferGetImageBuffer(v58);
            if (v60)
            {
              v61 = CVPixelBufferGetIOSurface(v60);
              if (v61)
                objc_msgSend(v43, "setObject:forKeyedSubscript:", v61, CFSTR("HairSegmentationMatteSurface"));
            }
          }
          v62 = CMGetAttachment(v59, (CFStringRef)*MEMORY[0x1E0D08738], 0);
          if (v62)
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v62, CFSTR("HairSegmentationMatteMetadata"));
        }
        v63 = (void *)objc_msgSend(v251, "enabledSemanticSegmentationMatteURNs");
        if (objc_msgSend(v63, "containsObject:", *MEMORY[0x1E0D09290]))
        {
          v64 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsSkin"));
          v65 = v64;
          if (v64)
          {
            v66 = CMSampleBufferGetImageBuffer(v64);
            if (v66)
            {
              v67 = CVPixelBufferGetIOSurface(v66);
              if (v67)
                objc_msgSend(v43, "setObject:forKeyedSubscript:", v67, CFSTR("SkinSegmentationMatteSurface"));
            }
          }
          v68 = CMGetAttachment(v65, (CFStringRef)*MEMORY[0x1E0D08738], 0);
          if (v68)
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v68, CFSTR("SkinSegmentationMatteMetadata"));
        }
        v69 = (void *)objc_msgSend(v251, "enabledSemanticSegmentationMatteURNs");
        if (objc_msgSend(v69, "containsObject:", *MEMORY[0x1E0D092A0]))
        {
          v70 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsTeeth"));
          v71 = v70;
          if (v70)
          {
            v72 = CMSampleBufferGetImageBuffer(v70);
            if (v72)
            {
              v73 = CVPixelBufferGetIOSurface(v72);
              if (v73)
                objc_msgSend(v43, "setObject:forKeyedSubscript:", v73, CFSTR("TeethSegmentationMatteSurface"));
            }
          }
          v74 = CMGetAttachment(v71, (CFStringRef)*MEMORY[0x1E0D08738], 0);
          if (v74)
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v74, CFSTR("TeethSegmentationMatteMetadata"));
        }
        v75 = (void *)objc_msgSend(v251, "enabledSemanticSegmentationMatteURNs");
        if (objc_msgSend(v75, "containsObject:", *MEMORY[0x1E0D09280]))
        {
          v76 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsGlasses"));
          v77 = v76;
          if (v76)
          {
            v78 = CMSampleBufferGetImageBuffer(v76);
            if (v78)
            {
              v79 = CVPixelBufferGetIOSurface(v78);
              if (v79)
                objc_msgSend(v43, "setObject:forKeyedSubscript:", v79, CFSTR("GlassesSegmentationMatteSurface"));
            }
          }
          v80 = CMGetAttachment(v77, (CFStringRef)*MEMORY[0x1E0D08738], 0);
          if (v80)
            objc_msgSend(v43, "setObject:forKeyedSubscript:", v80, CFSTR("GlassesSegmentationMatteMetadata"));
        }
      }
      if (objc_msgSend(v251, "cameraCalibrationDataDeliveryEnabled"))
      {
        if (!objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("DepthMetadata")))
        {
          v81 = CMGetAttachment(target, CFSTR("CameraCalibrationDataMetadata"), 0);
          if (v81)
          {
            v82 = v81;
            v83 = v43;
            v84 = CFSTR("DepthMetadata");
LABEL_84:
            objc_msgSend(v83, "setObject:forKeyedSubscript:", v82, v84);
            goto LABEL_164;
          }
        }
      }
      goto LABEL_164;
    }
    v11 = v252;
    if (objc_msgSend(a6, "payloadType"))
    {
      v43 = v33;
      MetadataAttachments = v32;
      if (v253)
        goto LABEL_175;
      goto LABEL_87;
    }
    memset(&v273, 0, sizeof(v273));
    CMSampleBufferGetPresentationTimeStamp(&v273, target);
    v88 = objc_msgSend(v35, "longValue");
    v89 = objc_msgSend(a6, "outputFormat");
    v90 = (CMVideoFormatDescriptionRef *)objc_msgSend(v252, "stillImageFormatDescriptionPtr");
    time = v273;
    v91 = BWSampleBufferCreateFromEncodedImageSurface(v34, v88, v89, v30 | (unint64_t)(v31 << 32), &time, v90, &sbuf);
    if ((_DWORD)v91)
    {
      a5 = (void *)v91;
      v229 = v6;
      *(_DWORD *)v227 = v91;
      FigDebugAssert3();
      v86 = 0;
      v43 = 0;
      v196 = 0;
      MetadataAttachments = v32;
      v85 = 0;
      goto LABEL_233;
    }
    v92 = -[FigCaptureCameraSourcePipeline captureSource](v238);
    captureSession_transferAndSanitizeOutputBufferAttachments(v92, target, sbuf, v32, a6);
    v43 = v33;
    MetadataAttachments = v32;
    objc_msgSend(v43, "setObject:forKeyedSubscript:", sbuf, CFSTR("SampleBuffer"));
LABEL_86:
    if (v253)
      goto LABEL_175;
    goto LABEL_87;
  }
  v247 = v29;
  if (objc_msgSend(a6, "bracketType"))
    v87 = objc_msgSend(a6, "bracketImageCount");
  else
    v87 = 1;
  if (objc_msgSend((id)objc_msgSend(a6, "bravoConstituentImageDeliveryDeviceTypes"), "count"))
    v87 = v87
        * objc_msgSend((id)objc_msgSend(a6, "bravoConstituentImageDeliveryDeviceTypes"), "count");
  if (objc_msgSend(a6, "constantColorEnabled"))
    v87 = v87 + objc_msgSend(a6, "constantColorFallbackPhotoDeliveryEnabled");
  v93 = cs_figCaptureColorSpaceFromSourcePipeline(v238);
  v94 = +[BWVideoFormat colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:](BWVideoFormat, "colorSpacePropertiesForSourceThatSupportsWideColor:sourceColorSpace:sourcePixelFormat:sourceDimensions:requestedPixelFormat:", objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v238), "supportsWideColor"), v93, objc_msgSend(v237, "format"), objc_msgSend(v237, "dimensions"), objc_msgSend(a6, "outputFormat"));
  objc_msgSend(a6, "outputFormat");
  v11 = v252;
  v95 = objc_msgSend((id)objc_msgSend(v252, "pixelConverter"), "updateOutputPixelFormat:dimensions:poolCapacity:colorSpaceProperties:alwaysUseHardwareForConversion:", objc_msgSend(a6, "outputFormat"), v30 | (unint64_t)(v31 << 32), v87, v94, (_DWORD)v94 != 0);
  if ((_DWORD)v95
    || (v96 = (void *)objc_msgSend(v252, "pixelConverter"),
        v95 = objc_msgSend(v96, "convertSampleBuffer:cropRect:outputSampleBuffer:", target, &sbuf, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24)), v43 = v247, (_DWORD)v95))
  {
    a5 = (void *)v95;
    v85 = 0;
    v86 = 0;
    v43 = 0;
    v196 = 0;
    a4 = target;
    goto LABEL_233;
  }
  if (!sbuf)
  {
    a4 = target;
    goto LABEL_86;
  }
  FigCaptureMetadataUtilitiesAddSampleBufferMetadataUsedByVideoEncoderToPixelBuffer(sbuf);
  v97 = CMSampleBufferGetImageBuffer(sbuf);
  if (v97)
  {
    v98 = v97;
    if (objc_msgSend(v252, "colorInfo"))
    {
      if (!(_DWORD)v94)
        CVBufferSetAttachments(v98, (CFDictionaryRef)objc_msgSend(v252, "colorInfo"), kCVAttachmentMode_ShouldPropagate);
    }
  }
  if (!objc_msgSend(a6, "payloadType"))
  {
    v144 = -[FigCaptureCameraSourcePipeline captureSource](v238);
    a4 = target;
    captureSession_transferAndSanitizeOutputBufferAttachments(v144, target, sbuf, MetadataAttachments, a6);
    objc_msgSend(v247, "setObject:forKeyedSubscript:", sbuf, CFSTR("SampleBuffer"));
    v47 = v253;
    goto LABEL_174;
  }
  v47 = v253;
  if (objc_msgSend(a6, "payloadType") != 1)
  {
    a4 = target;
    if (!v253)
      goto LABEL_87;
    goto LABEL_175;
  }
  v99 = CMSampleBufferGetImageBuffer(sbuf);
  v100 = CVPixelBufferGetIOSurface(v99);
  AllocSize = IOSurfaceGetAllocSize(v100);
  memset(&v273, 0, sizeof(v273));
  CMSampleBufferGetPresentationTimeStamp(&v273, sbuf);
  v102 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = v273;
  v103 = CMTimeCopyAsDictionary(&time, v102);
  if (v100)
    objc_msgSend(v247, "setObject:forKeyedSubscript:", v100, CFSTR("Surface"));
  v43 = v247;
  if (AllocSize)
    objc_msgSend(v247, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", AllocSize), CFSTR("SurfaceSize"));
  if (MetadataAttachments)
    objc_msgSend(v247, "setObject:forKeyedSubscript:", MetadataAttachments, CFSTR("Metadata"));
  a4 = target;
  if (v103)
  {
    objc_msgSend(v247, "setObject:forKeyedSubscript:", v103, CFSTR("PresentationTimestamp"));

  }
  if (objc_msgSend(a6, "depthDataDeliveryEnabled"))
  {
    v104 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("Depth"));
    if (v104)
    {
      v105 = CMSampleBufferGetImageBuffer(v104);
      if (v105)
      {
        v106 = CVPixelBufferGetIOSurface(v105);
        if (v106)
          objc_msgSend(v247, "setObject:forKeyedSubscript:", v106, CFSTR("DepthDataSurface"));
      }
    }
    v107 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D086F0], 0);
    if (v107)
      objc_msgSend(v247, "setObject:forKeyedSubscript:", v107, CFSTR("DepthMetadata"));
  }
  if (objc_msgSend(a6, "cameraCalibrationDataDeliveryEnabled"))
  {
    if (!objc_msgSend(v247, "objectForKeyedSubscript:", CFSTR("DepthMetadata")))
    {
      v108 = CMGetAttachment(target, CFSTR("CameraCalibrationDataMetadata"), 0);
      if (v108)
        objc_msgSend(v247, "setObject:forKeyedSubscript:", v108, CFSTR("DepthMetadata"));
    }
  }
  if (objc_msgSend(a6, "portraitEffectsMatteDeliveryEnabled"))
  {
    v109 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, 0x1E495AF38);
    v110 = v109;
    if (v109)
    {
      v111 = CMSampleBufferGetImageBuffer(v109);
      if (v111)
      {
        v112 = CVPixelBufferGetIOSurface(v111);
        if (v112)
          objc_msgSend(v247, "setObject:forKeyedSubscript:", v112, CFSTR("PortraitEffectsMatteSurface"));
      }
    }
    v113 = CMGetAttachment(v110, (CFStringRef)*MEMORY[0x1E0D08730], 0);
    if (v113)
      objc_msgSend(v247, "setObject:forKeyedSubscript:", v113, CFSTR("PortraitEffectsMatteMetadata"));
  }
  if (objc_msgSend((id)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs"), "count"))
  {
    v114 = (void *)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs");
    v115 = objc_msgSend(v114, "containsObject:", *MEMORY[0x1E0D09288]);
    v116 = (CFStringRef *)MEMORY[0x1E0D08738];
    if (v115)
    {
      v117 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsHair"));
      v118 = v117;
      if (v117)
      {
        v119 = CMSampleBufferGetImageBuffer(v117);
        if (v119)
        {
          v120 = CVPixelBufferGetIOSurface(v119);
          if (v120)
            objc_msgSend(v247, "setObject:forKeyedSubscript:", v120, CFSTR("HairSegmentationMatteSurface"));
        }
      }
      v121 = CMGetAttachment(v118, *v116, 0);
      if (v121)
        objc_msgSend(v247, "setObject:forKeyedSubscript:", v121, CFSTR("HairSegmentationMatteMetadata"));
    }
    v122 = (void *)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs");
    if (objc_msgSend(v122, "containsObject:", *MEMORY[0x1E0D09290]))
    {
      v123 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsSkin"));
      v124 = v123;
      if (v123)
      {
        v125 = CMSampleBufferGetImageBuffer(v123);
        if (v125)
        {
          v126 = CVPixelBufferGetIOSurface(v125);
          if (v126)
            objc_msgSend(v247, "setObject:forKeyedSubscript:", v126, CFSTR("SkinSegmentationMatteSurface"));
        }
      }
      v127 = CMGetAttachment(v124, *v116, 0);
      if (v127)
        objc_msgSend(v247, "setObject:forKeyedSubscript:", v127, CFSTR("SkinSegmentationMatteMetadata"));
    }
    v128 = (void *)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs");
    if (objc_msgSend(v128, "containsObject:", *MEMORY[0x1E0D092A0]))
    {
      v129 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsTeeth"));
      v130 = v129;
      if (v129)
      {
        v131 = CMSampleBufferGetImageBuffer(v129);
        if (v131)
        {
          v132 = CVPixelBufferGetIOSurface(v131);
          if (v132)
            objc_msgSend(v247, "setObject:forKeyedSubscript:", v132, CFSTR("TeethSegmentationMatteSurface"));
        }
      }
      v133 = CMGetAttachment(v130, *v116, 0);
      if (v133)
        objc_msgSend(v247, "setObject:forKeyedSubscript:", v133, CFSTR("TeethSegmentationMatteMetadata"));
    }
    v134 = (void *)objc_msgSend(a6, "enabledSemanticSegmentationMatteURNs");
    if (objc_msgSend(v134, "containsObject:", *MEMORY[0x1E0D09280]))
    {
      v135 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("PersonSemanticsGlasses"));
      v136 = v135;
      if (v135)
      {
        v137 = CMSampleBufferGetImageBuffer(v135);
        if (v137)
        {
          v138 = CVPixelBufferGetIOSurface(v137);
          if (v138)
            objc_msgSend(v247, "setObject:forKeyedSubscript:", v138, CFSTR("GlassesSegmentationMatteSurface"));
        }
      }
      v139 = CMGetAttachment(v136, *v116, 0);
      if (v139)
      {
        v82 = v139;
        v84 = CFSTR("GlassesSegmentationMatteMetadata");
        v83 = v247;
        goto LABEL_84;
      }
    }
  }
LABEL_164:
  if (!objc_msgSend(a6, "constantColorEnabled"))
    goto LABEL_174;
  v140 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a4, 0x1E495B438);
  if (v140)
  {
    v141 = CMSampleBufferGetImageBuffer(v140);
    if (v141)
    {
      v142 = CVPixelBufferGetIOSurface(v141);
      if (v142)
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v142, CFSTR("ConstantColorConfidenceMapSurface"));
    }
  }
  v143 = CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D086D8], 0);
  if (!v143)
  {
LABEL_174:
    if (v47)
      goto LABEL_175;
LABEL_87:
    v85 = 0;
    v86 = 0;
    a5 = v43;
    goto LABEL_218;
  }
  objc_msgSend(v43, "setObject:forKeyedSubscript:", v143, CFSTR("ConstantColorMetadata"));
  if (!v47)
    goto LABEL_87;
LABEL_175:
  v145 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  *(_QWORD *)v248 = v43;
  v236 = (void *)CMGetAttachment(a4, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!IsBayerRaw)
  {
    v86 = (void *)CMGetAttachment(a4, CFSTR("RawImageSurface"), 0);
    if (v86)
    {
      v151 = objc_msgSend((id)objc_msgSend((id)CMGetAttachment(a4, CFSTR("RawImageAssetSizes"), 0), "objectForKeyedSubscript:", 0x1E495AC98), "unsignedLongValue");
      if (!v151)
      {
        v85 = 0;
        v86 = 0;
        goto LABEL_318;
      }
      v233 = v151;
      v234 = v86;
      v86 = (id)CMGetAttachment(a4, CFSTR("RawDNGDictionary"), 0);
      if (v86)
      {
        v152 = MetadataAttachments;
        v153 = objc_msgSend((id)CMGetAttachment(a4, CFSTR("RawImageContainsDepthData"), 0), "BOOLValue");
        v154 = objc_msgSend((id)CMGetAttachment(a4, CFSTR("RawImageContainsSemanticSegmentationMattes"), 0), "BOOLValue");
        v235 = 0;
        v155 = 0;
        goto LABEL_197;
      }
    }
    v85 = 0;
LABEL_318:
    a5 = 0;
    v196 = 4294950881;
    goto LABEL_233;
  }
  v146 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a4, 0x1E495AEF8);
  if (!v146)
  {
    v85 = 0;
    v86 = 0;
    a5 = 0;
    v196 = 4294950881;
LABEL_316:
    v43 = *(void **)v248;
    goto LABEL_233;
  }
  v147 = v146;
  v235 = CMSampleBufferGetImageBuffer(v146);
  v148 = CVPixelBufferGetIOSurface(v235);
  v86 = v148;
  if (!v148)
  {
    v85 = 0;
    goto LABEL_315;
  }
  v149 = IOSurfaceGetAllocSize(v148);
  if (!v149)
    goto LABEL_312;
  v233 = v149;
  v234 = v86;
  if (FigCaptureSushiRawDNGDictionaryCreatedInGraph())
  {
    v150 = (id)CMGetAttachment(v147, CFSTR("RawDNGDictionary"), 0);
    goto LABEL_192;
  }
  if (!objc_msgSend(v252, "rawDNGColorCalibrations"))
  {
    v156 = -[FigCaptureCameraSourcePipeline captureSource](v238);
    v157 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v157)
      v157(v156, CFSTR("WhiteBalanceCalibrations"), *MEMORY[0x1E0C9AE00], &cf);
    if (!cf)
      goto LABEL_312;
    objc_msgSend(v252, "setRawDNGColorCalibrations:", BWDNGColorCalibrations((void *)cf));
    if (!objc_msgSend(v252, "rawDNGColorCalibrations"))
      goto LABEL_312;
  }
  v232 = psn_pixelBufferDimensions(v235);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v235);
  v158 = objc_msgSend(a6, "outputWidth");
  v159 = objc_msgSend(a6, "outputHeight");
  v160 = (void *)objc_msgSend(v237, "rawLensShadingCorrection");
  v161 = (void *)CMGetAttachment(v147, v145, 0);
  if (!v161)
  {
    v85 = 0;
    v86 = 0;
    a5 = 0;
    v196 = 4294950881;
    a6 = v251;
    v11 = v252;
    a4 = target;
    goto LABEL_316;
  }
  v162 = v161;
  v163 = (void *)objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v238), "sensorIDDictionaryByPortType"), "objectForKeyedSubscript:", objc_msgSend(v161, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]));
  v150 = (void *)BWCreateSushiRawDNGDictionary(v232, PixelFormatType, v158 | (unint64_t)(v159 << 32), v162, (void *)objc_msgSend(v252, "rawDNGColorCalibrations"), v160, objc_msgSend(v237, "sushiRawBlackBorderingEnabled"), 0, v163, 0, 0);
  a6 = v251;
  a4 = target;
  if (!v150)
  {
LABEL_312:
    v85 = 0;
    v86 = 0;
LABEL_315:
    a5 = 0;
    v196 = 4294950881;
    v11 = v252;
    goto LABEL_316;
  }
LABEL_192:
  v86 = v150;
  v275.origin.x = BWRawDenormalizedActiveRectFromDNGDictionary(v150);
  width = v275.size.width;
  height = v275.size.height;
  if (!CGRectIsNull(v275))
  {
    if (objc_msgSend(a6, "outputWidth") == width
      && objc_msgSend(a6, "outputHeight") == height)
    {
      v166 = VTFillPixelBufferBorderWithBlack();
      if (!(_DWORD)v166)
        goto LABEL_196;
      a5 = (void *)v166;
      v196 = 0;
    }
    else
    {
      a5 = 0;
      v196 = 4294950881;
    }
    v11 = v252;
    v43 = *(void **)v248;
    v85 = v86;
    v86 = 0;
    goto LABEL_233;
  }
LABEL_196:
  v152 = MetadataAttachments;
  v153 = 0;
  v154 = 0;
  v155 = 128;
LABEL_197:
  a5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend(a5, "setObject:forKeyedSubscript:", a3, CFSTR("SectionID"));
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v251, "settingsID")), CFSTR("SettingsID"));
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(v251, "captureRequestIdentifier"), CFSTR("CaptureRequestIdentifier"));
  objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(v240, "photoIdentifier"), CFSTR("PhotoIdentifier"));
  v167 = objc_msgSend(v251, "rawOutputFileCodec");
  v168 = objc_msgSend(v236, "objectForKeyedSubscript:", *MEMORY[0x1E0D06948]);
  v85 = v86;
  v169 = v167;
  a6 = v251;
  v170 = BWCreateRawMetadataFromMetadata(v152, v86, v155, v168, v153, v154, v169);
  if (objc_msgSend(v251, "payloadType") == 1)
  {
    a4 = target;
    MetadataAttachments = v152;
    if (IsBayerRaw)
    {
      objc_msgSend(a5, "setObject:forKeyedSubscript:", v234, CFSTR("Surface"));
      v171 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v233);
      v172 = kFigCaptureSessionNotificationPayloadKey_SurfaceSize;
    }
    else
    {
      v179 = objc_msgSend(v251, "rawOutputFormat");
      v180 = objc_msgSend((id)CMGetAttachment(target, CFSTR("RawImageFileType"), 0), "intValue");
      if ((v245 & 0x1000) != 0)
      {
        objc_msgSend(a5, "setObject:forKeyedSubscript:", v234, CFSTR("DeferredPhotoProxySurface"));
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v233), CFSTR("DeferredPhotoProxySurfaceSize"));
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v179), CFSTR("DeferredPhotoProxyCodec"));
        v171 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v180);
        v172 = kFigCaptureSessionNotificationPayloadKey_DeferredPhotoProxyFileType;
      }
      else
      {
        objc_msgSend(a5, "setObject:forKeyedSubscript:", v234, CFSTR("Surface"));
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v233), CFSTR("SurfaceSize"));
        objc_msgSend(a5, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", v179), CFSTR("PhotoCodec"));
        v171 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v180);
        v172 = kFigCaptureSessionNotificationPayloadKey_PhotoFileType;
      }
    }
    v43 = *(void **)v248;
    objc_msgSend(a5, "setObject:forKeyedSubscript:", v171, *v172);
    memset(&v273, 0, sizeof(v273));
    CMSampleBufferGetPresentationTimeStamp(&v273, target);
    v181 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time = v273;
    v182 = CMTimeCopyAsDictionary(&time, v181);
    objc_msgSend(a5, "setObject:forKeyedSubscript:", v182, CFSTR("PresentationTimestamp"));

    if (objc_msgSend(v251, "depthDataDeliveryEnabled"))
    {
      v183 = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(target, (uint64_t)CFSTR("Depth"));
      if (v183)
      {
        v184 = CMSampleBufferGetImageBuffer(v183);
        if (v184)
          objc_msgSend(a5, "setObject:forKeyedSubscript:", CVPixelBufferGetIOSurface(v184), CFSTR("DepthDataSurface"));
      }
      v185 = CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D086F0], 0);
      if (v185)
        objc_msgSend(a5, "setObject:forKeyedSubscript:", v185, CFSTR("DepthMetadata"));
    }
    if (!objc_msgSend(v251, "cameraCalibrationDataDeliveryEnabled"))
      goto LABEL_217;
    if (objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("DepthMetadata")))
      goto LABEL_217;
    v186 = CMGetAttachment(target, CFSTR("CameraCalibrationDataMetadata"), 0);
    if (!v186)
      goto LABEL_217;
    v176 = v186;
    v178 = a5;
    v177 = CFSTR("DepthMetadata");
    goto LABEL_216;
  }
  a4 = target;
  v43 = *(void **)v248;
  MetadataAttachments = v152;
  if (!objc_msgSend(v251, "payloadType"))
  {
    memset(&v273, 0, sizeof(v273));
    CMSampleBufferGetPresentationTimeStamp(&v273, target);
    v173 = (CFTypeRef *)objc_msgSend(v252, "rawFormatDescriptionPtr");
    time = v273;
    v174 = BWSampleBufferCreateFromPixelBuffer(v235, (uint64_t)&time, v173, (CMSampleBufferRef *)&v268);
    if ((_DWORD)v174)
    {
      v196 = v174;
      v229 = v6;
      *(_DWORD *)v227 = v174;
      FigDebugAssert3();
      v86 = 0;
      a5 = 0;
      v11 = v252;
      goto LABEL_233;
    }
    v175 = -[FigCaptureCameraSourcePipeline captureSource](v238);
    captureSession_transferAndSanitizeOutputBufferAttachments(v175, target, v268, v170, v251);
    v176 = v268;
    v177 = CFSTR("SampleBuffer");
    v178 = a5;
LABEL_216:
    objc_msgSend(v178, "setObject:forKeyedSubscript:", v176, v177);
  }
LABEL_217:
  objc_msgSend(a5, "setObject:forKeyedSubscript:", v170, CFSTR("Metadata"));
  v86 = a5;
  v11 = v252;
LABEL_218:
  if (!objc_msgSend(a6, "previewEnabled"))
    goto LABEL_228;
  if (!a5)
  {
    v229 = v6;
    *(_DWORD *)v227 = 0;
    FigDebugAssert3();
    goto LABEL_309;
  }
  if (objc_msgSend(a6, "payloadType") == 1)
  {
    v187 = v86;
    v188 = (__IOSurface *)CMGetAttachment(a4, CFSTR("PreviewSurface"), 0);
    if (v188)
    {
      v189 = v188;
      objc_msgSend(a5, "setObject:forKeyedSubscript:", v188, CFSTR("PreviewSurface"));
      v190 = (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", IOSurfaceGetAllocSize(v189));
      v191 = kFigCaptureSessionNotificationPayloadKey_PreviewSurfaceSize;
LABEL_227:
      objc_msgSend(a5, "setObject:forKeyedSubscript:", v190, *v191);
      v86 = v187;
      goto LABEL_228;
    }
    v229 = v6;
    *(_DWORD *)v227 = 0;
    goto LABEL_329;
  }
  if (!objc_msgSend(a6, "payloadType"))
  {
    v187 = v86;
    v192 = (__CVBuffer *)CMGetAttachment(a4, CFSTR("PreviewPixelBuffer"), 0);
    if (v192)
    {
      v193 = v192;
      memset(&v273, 0, sizeof(v273));
      CMSampleBufferGetPresentationTimeStamp(&v273, a4);
      v194 = (CFTypeRef *)objc_msgSend(v11, "previewFormatDescriptionPtr");
      time = v273;
      BWSampleBufferCreateFromPixelBuffer(v193, (uint64_t)&time, v194, (CMSampleBufferRef *)&v267);
      v190 = v267;
      if (v267)
      {
        v191 = kFigCaptureSessionNotificationPayloadKey_PreviewSampleBuffer;
        goto LABEL_227;
      }
      v229 = v6;
      *(_DWORD *)v227 = 0;
    }
    else
    {
      v229 = v6;
      *(_DWORD *)v227 = 0;
    }
LABEL_329:
    FigDebugAssert3();
    v196 = 0;
    a5 = 0;
    v86 = v187;
    goto LABEL_233;
  }
LABEL_228:
  if ((objc_msgSend(a6, "thumbnailEnabled") & 1) != 0 || objc_msgSend(a6, "rawThumbnailEnabled"))
  {
    v195 = CMGetAttachment(a4, CFSTR("ThumbnailSurface"), 0);
    if (v195)
      objc_msgSend(a5, "setObject:forKeyedSubscript:", v195, CFSTR("ThumbnailSurface"));
  }
  v196 = 0;
  a5 = 0;
LABEL_233:

  if (cf)
    CFRelease(cf);
  if (v85)
    CFRelease(v85);
  if (sbuf)
    CFRelease(sbuf);
  v197 = v249;
  if (v268)
    CFRelease(v268);
  if (v267)
    CFRelease(v267);
  if ((_DWORD)a5 && !v86 && !(_DWORD)v196 && (v198 = (uint64_t)a5, v253 == 1) || (v198 = v196, (_DWORD)v196))
    v86 = (void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a3, objc_msgSend(a6, "settingsID", *(_QWORD *)v227, v229), v198);
  v242 = v86;
  if ((_DWORD)a5)
  {
    v43 = (void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a3, objc_msgSend(a6, "settingsID"), (uint64_t)a5);
    objc_msgSend((id)objc_msgSend(v249, "portraitHDRStagingNode"), "bufferReceivedWithFlags:error:", 0, a5);
  }
  v199 = objc_msgSend((id)objc_msgSend(v249, "stillImageCoordinatorNode", *(_QWORD *)v227), "responsiveShutterEnabled");
  if (v257)
    v200 = 1;
  else
    v200 = v253;
  if (!v199)
  {
    if (!v200)
      goto LABEL_262;
    goto LABEL_261;
  }
  if (objc_msgSend(a6, "resolutionFlavor") == 2)
    v201 = v200;
  else
    v201 = 0;
  if ((v201 & 1) != 0)
  {
LABEL_261:
    v202 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(objc_msgSend((id)objc_msgSend(v11, "stillImageSinkPipeline"), "sinkID"), objc_msgSend(a6, "settingsID"), 0);
    captureSession_postNotificationWithPayload(a1, CFSTR("ReadyForResponsiveRequest"), v202);
  }
LABEL_262:
  if (v253)
  {
    v203 = v242;
    objc_msgSend(v242, "objectForKeyedSubscript:", CFSTR("CaptureRequestIdentifier"));
    objc_msgSend(v242, "objectForKeyedSubscript:", CFSTR("PhotoIdentifier"));
    v204 = kFigCaptureSessionIrisStillImageSinkNotification_RawStillImageComplete;
    if (v243)
      v204 = kFigCaptureSessionIrisStillImageSinkNotification_DeferredPhotoProxyImageComplete;
    v205 = *v204;
    v206 = (void *)objc_msgSend(v242, "objectForKeyedSubscript:", CFSTR("Metadata"));
    v207 = (void *)objc_msgSend(v206, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCF70]);
    objc_msgSend((id)objc_msgSend(v207, "objectForKeyedSubscript:", *MEMORY[0x1E0D05778]), "unsignedIntValue");
    if (dword_1ECFE9590)
    {
      v266 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v197 = v249;
      a4 = target;
      v203 = v242;
    }
    captureSession_postNotificationWithPayload(a1, v205, v203);
    a6 = v251;
  }
  if (v257)
  {
    objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("CaptureRequestIdentifier"));
    objc_msgSend(v43, "objectForKeyedSubscript:", CFSTR("PhotoIdentifier"));
    v209 = kFigCaptureSessionIrisStillImageSinkNotification_StillImageComplete;
    if (v243)
      v209 = kFigCaptureSessionIrisStillImageSinkNotification_DeferredPhotoProxyImageComplete;
    if ((isKindOfClass & 1) == 0)
      v209 = kFigCaptureSessionStillImageSinkNotification_StillImageComplete;
    v210 = *v209;
    if (dword_1ECFE9590)
    {
      v258 = *v209;
      v266 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v211 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a6 = v251;
      v11 = v252;
      v197 = v249;
      v210 = v258;
    }
    memset(&time, 0, sizeof(time));
    if (a4)
      CMSampleBufferGetPresentationTimeStamp(&time, a4);
    else
      time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v212 = (int *)MEMORY[0x1E0CA1FC0];
    v213 = *MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      objc_msgSend(a6, "settingsID");
      v273 = time;
      Seconds = CMTimeGetSeconds(&v273);
      if (a6)
        objc_msgSend(a6, "stillImageUserInitiatedRequestPTS", Seconds);
      else
        memset(&v264[1], 0, sizeof(CMTime));
      v273 = v264[1];
      CMTimeGetSeconds(&v273);
      kdebug_trace();
      v213 = *v212;
    }
    if (v213)
    {
      v215 = fig_log_handle();
      if (os_signpost_enabled(v215))
      {
        v273 = time;
        v216 = CMTimeGetSeconds(&v273);
        v217 = LODWORD(v216);
        if (a6)
          objc_msgSend(a6, "stillImageUserInitiatedRequestPTS");
        else
          memset(v264, 0, 24);
        v273 = v264[0];
        v218 = CMTimeGetSeconds(&v273);
        LODWORD(v273.value) = 67240448;
        HIDWORD(v273.value) = v217;
        LOWORD(v273.timescale) = 1026;
        *(CMTimeScale *)((char *)&v273.timescale + 2) = LODWORD(v218);
        _os_signpost_emit_with_name_impl(&dword_1A2C80000, v215, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", " enableTelemetry=YES N1=%{public,signpost.telemetry:number1}d N2=%{public,signpost.telemetry:number2}d", (uint8_t *)&v273, 0xEu);
      }
    }
    captureSession_postNotificationWithPayload(a1, v210, v43);
    objc_msgSend((id)objc_msgSend(v197, "portraitHDRStagingNode"), "bufferReceivedWithFlags:error:", v245, 0);
  }
  v262 = 0u;
  v263 = 0u;
  v260 = 0u;
  v261 = 0u;
  v219 = (void *)objc_msgSend(v244, "metadataSinkPipelines", *(_QWORD *)v228, v229);
  v220 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v260, v271, 16);
  if (v220)
  {
    v221 = v220;
    v222 = 0;
    v223 = *(_QWORD *)v261;
    do
    {
      for (i = 0; i != v221; ++i)
      {
        if (*(_QWORD *)v261 != v223)
          objc_enumerationMutation(v219);
        v222 |= -[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](*(_QWORD *)(*((_QWORD *)&v260 + 1) + 8 * i));
      }
      v221 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v260, v271, 16);
    }
    while (v221);
    if ((objc_msgSend(a6, "burstQualityCaptureEnabled") & v222) == 1)
    {
      v225 = objc_msgSend(a6, "settingsID");
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
      v226 = objc_msgSend(v11, "mostRecentBurstSettingsID");
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
      if (v226 <= v225)
      {
        v259[0] = MEMORY[0x1E0C809B0];
        v259[1] = 3221225472;
        v259[2] = __captureSession_handleCapturedStillImage_block_invoke;
        v259[3] = &unk_1E4922C90;
        v259[4] = v11;
        v259[5] = v244;
        v259[6] = v225;
        captureSession_dispatchGraphCalloutToWorkerQueueAfter(a1, (uint64_t)v259, 0.266);
      }
    }
  }
  else
  {
    objc_msgSend(a6, "burstQualityCaptureEnabled");
  }
}

void captureSession_transferAndSanitizeOutputBufferAttachments(uint64_t a1, const void *a2, CMAttachmentBearerRef target, void *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, _QWORD, id *);
  id v13;
  int v14;
  void *v15;
  void *v16;
  CFTypeRef *v17;
  char v18;
  id v19;

  CMRemoveAllAttachments(target);
  v10 = *MEMORY[0x1E0CBCA28];
  v11 = objc_msgSend(a4, "objectForKeyedSubscript:", *MEMORY[0x1E0CBCA28]);
  if (v11)
  {
    objc_msgSend(a4, "setObject:forKeyedSubscript:", v11, CFSTR("FaceRegions"));
    objc_msgSend(a4, "removeObjectForKey:", v10);
  }
  CMSetAttachments(target, (CFDictionaryRef)a4, 1u);
  if (a1)
  {
    v19 = 0;
    v12 = *(void (**)(uint64_t, const __CFString *, _QWORD, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v12)
    {
      v12(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v19);
      v13 = v19;
    }
    else
    {
      v13 = 0;
    }
    v14 = objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", CFSTR("Sphere")), "BOOLValue");

    if (v14)
    {
      if (objc_msgSend(a5, "bracketType"))
      {
        if (objc_msgSend(a5, "lensStabilizationDuringBracketEnabled"))
        {
          v15 = (void *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
          v16 = (void *)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E58]);
          if ((objc_msgSend((id)objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E68]), "unsignedIntValue") & 6) != 0)
          {
            v17 = (CFTypeRef *)MEMORY[0x1E0CA27B0];
          }
          else if ((objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0D07A30]) & 1) != 0
                 || (objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0D07A50]) & 1) != 0)
          {
            v17 = (CFTypeRef *)MEMORY[0x1E0CA27A0];
          }
          else
          {
            v18 = objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0D07A38]);
            v17 = (CFTypeRef *)MEMORY[0x1E0CA27A0];
            if ((v18 & 1) == 0 && !objc_msgSend(v16, "isEqualToString:", *MEMORY[0x1E0D07A40]))
              v17 = (CFTypeRef *)MEMORY[0x1E0CA27B8];
          }
        }
        else
        {
          v17 = (CFTypeRef *)MEMORY[0x1E0CA27A8];
        }
        if (*v17)
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA2710], *v17, 1u);
      }
    }
  }
}

uint64_t __captureSession_handleCapturedStillImage_block_invoke(uint64_t result, char a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    v2 = result;
    result = objc_msgSend(*(id *)(result + 32), "mostRecentBurstSettingsID");
    if (result <= *(_QWORD *)(v2 + 48))
    {
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v3 = (void *)objc_msgSend(*(id *)(v2 + 40), "metadataSinkPipelines", 0);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (result)
      {
        v4 = result;
        v5 = *(_QWORD *)v9;
        do
        {
          v6 = 0;
          do
          {
            if (*(_QWORD *)v9 != v5)
              objc_enumerationMutation(v3);
            v7 = *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6);
            if (-[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](v7))
              -[FigCaptureMetadataSinkPipeline setMrcSuspended:](v7, 0);
            ++v6;
          }
          while (v4 != v6);
          result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
          v4 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void __captureSession_startMonitoringForFigAssetWriterWritingVideoNotificationIfNecessary_block_invoke(uint64_t a1, int token)
{
  uint32_t state;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v9;
  NSObject *v10;
  const void *v11;
  char v12;
  uint64_t state64[25];

  state64[24] = *MEMORY[0x1E0C80C00];
  state64[0] = 0;
  state = notify_get_state(token, state64);
  v4 = state64[0];
  if (state || state64[0] > 1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = state64[0];
    if (*(_QWORD *)(v5 + 552) == state64[0])
    {
      v7 = 0;
      v6 = *(_QWORD *)(v5 + 552);
    }
    else if (state64[0])
    {
      if (state64[0] == 1)
      {
        v9 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](objc_msgSend((id)objc_msgSend(*(id *)(v5 + 624), "cameraSourcePipelines"), "firstObject"));
        if ((objc_msgSend(v9, "captureInitiatedOnce") & 1) == 0)
          objc_msgSend(v9, "setCaptureInitiatedOnce:", 1);
        v7 = 0;
        v5 = *(_QWORD *)(a1 + 32);
        *(_BYTE *)(v5 + 560) = *(_BYTE *)(v5 + 337);
        v6 = state64[0];
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v7 = *(_BYTE *)(v5 + 560) != 0;
      *(_BYTE *)(v5 + 560) = 0;
    }
    *(_QWORD *)(v5 + 552) = v6;
    if (dword_1ECFE9590)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v5 = *(_QWORD *)(a1 + 32);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 320));
    v11 = *(const void **)(a1 + 40);
    if (v4 == 1)
    {
      captureSession_postNotificationWithPayload(v11, CFSTR("DidStartFigAssetWriterRecording"), 0);
    }
    else
    {
      captureSession_postNotificationWithPayload(v11, CFSTR("DidStopFigAssetWriterRecording"), 0);
      v12 = !v7;
      if (v4)
        v12 = 1;
      if ((v12 & 1) == 0)
        captureSession_showRecordingVideoWhileMultitaskingDialogIfNecessary();
    }
  }
}

void __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke(uint64_t a1)
{
  const void *v1;
  _QWORD v2[5];

  v1 = (const void *)objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  if (v1)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_2;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = v1;
    captureSession_performBlockOnWorkerQueue(v1, (uint64_t)v2);
  }
}

uint64_t __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_2()
{
  return captureSession_handlePlaybackOrRouteStateChange();
}

uint64_t captureSession_handlePlaybackOrRouteStateChange()
{
  uint64_t v0;
  id *DerivedStorage;
  id *v2;
  void *v3;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigDebugAssert3();
  v2 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigDebugAssert3();
  if (!_FigIsCurrentDispatchQueue())
  {
    v7 = v0;
    LODWORD(v6) = 0;
    FigDebugAssert3();
  }
  v3 = (void *)objc_msgSend(v2[90], "objectForKeyedSubscript:", 0x1E492D2B8, v6, v7);
  if (!v3)
    return FigDebugAssert3();
  result = objc_msgSend(v3, "setProperty:value:", *MEMORY[0x1E0D059B0], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", cs_audioIsPlayingToBuiltInSpeaker((void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance"))));
  if ((_DWORD)result)
    return FigDebugAssert3();
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_3(uint64_t a1)
{
  const void *v1;
  _QWORD v2[5];

  v1 = (const void *)objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  if (v1)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_4;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = v1;
    captureSession_performBlockOnWorkerQueue(v1, (uint64_t)v2);
  }
}

uint64_t __captureSession_startMonitoringAudioPlaybackAndRouteChangeNotifications_block_invoke_4()
{
  return captureSession_handlePlaybackOrRouteStateChange();
}

void cs_clearPocketDetectionNeeded(uint64_t a1, uint64_t a2)
{
  id v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    v2 = (id)a2;
    if (cs_bundleIdentifierIsSecureCaptureExtension(a2))
    {
      v2 = cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier((uint64_t)v2);
      if (!v2)
      {
        FigDebugAssert3();
        return;
      }
    }
    os_unfair_lock_lock((os_unfair_lock_t)&sPocketDetectionState);
    if (!qword_1EE6BEC78 || !CFEqual(v2, (CFTypeRef)qword_1EE6BEC78))
      goto LABEL_14;
    if (!a1 || qword_1EE6BEC90 == a1)
    {
      qword_1EE6BEC80 = 0;
      if (qword_1EE6BEC78)
      {
        CFRelease((CFTypeRef)qword_1EE6BEC78);
        qword_1EE6BEC78 = 0;
      }
      cs_cancelPocketDetectionTimeoutTimer();
      if (!dword_1ECFE9590)
        goto LABEL_14;
    }
    else if (!dword_1ECFE9590)
    {
LABEL_14:
      os_unfair_lock_unlock((os_unfair_lock_t)&sPocketDetectionState);
      return;
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_14;
  }
}

id cs_containingBundleIdentifierForSecureCaptureExtensionBundleIdentifier(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  v4 = 0;
  v1 = objc_msgSend(MEMORY[0x1E0CA5898], "bundleRecordWithBundleIdentifier:allowPlaceholder:error:", a1, 0, &v4);
  if (v4)
    return 0;
  v2 = (void *)v1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  else
    return (id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v2, "containingBundleRecord"), "bundleIdentifier"), "copy");
}

void cs_cancelPocketDetectionTimeoutTimer()
{
  if (qword_1EE6BEC90)
  {
    dispatch_source_cancel((dispatch_source_t)qword_1EE6BEC90);

    qword_1EE6BEC90 = 0;
  }
}

uint64_t __captureSession_showCinematicFramingAlertIfApplicable_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  int IsCameracaptured;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v10;
  uint64_t v11;
  Class (*v12)(uint64_t);
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  uint64_t v20;

  v15 = 0;
  v16 = &v15;
  v17 = 0x3052000000;
  v18 = __Block_byref_object_copy__23;
  v19 = __Block_byref_object_dispose__23;
  v2 = (void *)getBMStreamsClass_softClass;
  v20 = getBMStreamsClass_softClass;
  if (!getBMStreamsClass_softClass)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __getBMStreamsClass_block_invoke;
    v13 = &unk_1E491EC40;
    v14 = &v15;
    __getBMStreamsClass_block_invoke((uint64_t)&v10);
    v2 = (void *)v16[5];
  }
  _Block_object_dispose(&v15, 8);
  v3 = (void *)objc_msgSend((id)objc_msgSend(v2, "discoverabilitySignal"), "source");
  IsCameracaptured = FigCaptureCurrentProcessIsCameracaptured();
  v5 = &FigCaptureClientApplicationIdentifierCameracaptured;
  if (!IsCameracaptured)
    v5 = &FigCaptureClientApplicationIdentifierMediaserverd;
  v6 = *v5;
  v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.centerstage-discovered"), *v5);
  v15 = 0;
  v16 = &v15;
  v17 = 0x3052000000;
  v18 = __Block_byref_object_copy__23;
  v19 = __Block_byref_object_dispose__23;
  v8 = (objc_class *)getBMDiscoverabilitySignalEventClass_softClass;
  v20 = getBMDiscoverabilitySignalEventClass_softClass;
  if (!getBMDiscoverabilitySignalEventClass_softClass)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __getBMDiscoverabilitySignalEventClass_block_invoke;
    v13 = &unk_1E491EC40;
    v14 = &v15;
    __getBMDiscoverabilitySignalEventClass_block_invoke((uint64_t)&v10);
    v8 = (objc_class *)v16[5];
  }
  _Block_object_dispose(&v15, 8);
  return objc_msgSend(v3, "sendEvent:", (id)objc_msgSend([v8 alloc], "initWithIdentifier:bundleID:context:", v7, v6, *(_QWORD *)(a1 + 32)));
}

void sub_1A2F9FAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMStreamsClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeStreamsLibrary();
  result = objc_getClass("BMStreams");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getBMStreamsClass_block_invoke_cold_1();
  getBMStreamsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void BiomeStreamsLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!BiomeStreamsLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4922FE8;
    v2 = 0;
    BiomeStreamsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!BiomeStreamsLibraryCore_frameworkLibrary)
    BiomeStreamsLibrary_cold_1(&v0);
}

Class __getBMDiscoverabilitySignalEventClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeStreamsLibrary();
  result = objc_getClass("BMDiscoverabilitySignalEvent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getBMDiscoverabilitySignalEventClass_block_invoke_cold_1();
  getBMDiscoverabilitySignalEventClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void __captureSession_startDeferredGraphSetupOnWorkerQueueAfter_block_invoke_2(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];

  if ((a2 & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
    v4 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(v4 + 497) || *(_BYTE *)(v4 + 336))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 320));
      return;
    }
    if (*(_BYTE *)(v4 + 80))
    {
      v5 = *(unsigned __int8 *)(v4 + 498);
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 320));
      if (!v5)
        return;
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 320));
    }
    v6 = *(_QWORD *)(a1 + 40);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v10 = v2;
      LODWORD(v9) = 0;
      FigDebugAssert3();
    }
    v8 = *(void **)(DerivedStorage + 592);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __captureSession_startDeferredGraphSetup_block_invoke;
    v11[3] = &__block_descriptor_40_e5_v8__0l;
    v11[4] = v6;
    objc_msgSend(v8, "notifyWhenNonDeferredSourceNodesHaveStarted:", v11, v9, v10);
  }
}

uint64_t __initializeGlobals_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

void __captureSession_updatePreviewSinkConnectionEnabledState_block_invoke(uint64_t a1)
{
  FigCaptureSessionParsedConfiguration *v2;
  id v3;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
  v3 = *(id *)(*(_QWORD *)(a1 + 32) + 416);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 320));
  if (v3)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 592))
    {
      v2 = -[FigCaptureSessionParsedConfiguration initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:]([FigCaptureSessionParsedConfiguration alloc], "initWithSessionConfiguration:clientSetsUserInitiatedCaptureRequestTime:restrictions:", v3, captureSession_clientSetsUserInitiatedCaptureRequestTime(), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 400));
      if (v2)
        captureSession_updateGraphConnectionEnabledState(*(_QWORD *)(a1 + 40), v2);
    }
  }

}

uint64_t __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v1 = (void *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 624), "movieFileSinkPipelines", 0);
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v1);
        v6 = *(void **)(*((_QWORD *)&v7 + 1) + 8 * v5);
        if (objc_msgSend(v6, "recording"))
          objc_msgSend(v6, "setRecordedWhileMultitasking:", 1);
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

void __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_626(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 224);
  if ((v3 || *(_QWORD *)(v2 + 216)) && *(_BYTE *)(v2 + 273))
  {
    v4 = *(void **)(v2 + 216);
    if (v4)
    {
      v5 = *(unsigned __int8 *)(v2 + 272);
      v7 = 0;
      objc_msgSend(v4, "setActive:withOptions:error:", 0, v5, &v7);
      v2 = *(_QWORD *)(a1 + 32);
      v3 = *(_QWORD *)(v2 + 224);
    }
    if (v3)
    {
      CMSessionEndInterruption();
      v2 = *(_QWORD *)(a1 + 32);
    }
    v6 = *(NSObject **)(v2 + 264);
    if (v6)
    {
      dispatch_source_cancel(v6);

      v2 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(v2 + 264) = 0;
    }
    *(_WORD *)(v2 + 272) = 0;
  }
}

uint64_t __captureSession_updateSessionStateWithApplicationAndLayoutState_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(+[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor"), "unregisterClient:", *(unsigned int *)(a1 + 32));
}

void __captureSession_performBlockOnWorkerQueueSynchronously_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __captureSession_startObservingAVAudioSessionInterruptionNotification_block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *DerivedStorage;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v18;
  NSObject *v19;

  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  if (!v5)
    goto LABEL_20;
  v6 = v5;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v8 = (void *)objc_msgSend(a2, "name");
  if ((objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CFF008]) & 1) == 0)
    goto LABEL_18;
  if (*DerivedStorage)
    goto LABEL_20;
  v9 = (void *)objc_msgSend(a2, "userInfo");
  v10 = objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0CFF038]), "integerValue");
  v11 = (void *)objc_msgSend(a2, "userInfo");
  v12 = objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", *MEMORY[0x1E0CFF028]), "integerValue");
  v13 = (void *)objc_msgSend(a2, "userInfo");
  objc_msgSend((id)objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0CFF018]), "integerValue");
  if (!v10)
  {
LABEL_11:
    v15 = (void *)objc_msgSend(a2, "userInfo");
    objc_msgSend(v15, "objectForKeyedSubscript:", *MEMORY[0x1E0CFF040]);
    v16 = (void *)objc_msgSend(a2, "userInfo");
    objc_msgSend(v16, "objectForKeyedSubscript:", *MEMORY[0x1E0CFF050]);
    if ((_DWORD)v10)
    {
      if (dword_1ECFE9590)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_16:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else if (dword_1ECFE9590)
    {
      v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      goto LABEL_16;
    }
    captureSession_updateSessionStateWithNewInputCondition(v6, DerivedStorage + 344, v10, 0, 0);
    goto LABEL_20;
  }
  if (v10 != 1)
  {
LABEL_18:
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    goto LABEL_19;
  }
  if (!v12)
  {
    LODWORD(v10) = 1;
    goto LABEL_11;
  }
  if (dword_1ECFE9590)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
LABEL_19:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_20:
  objc_autoreleasePoolPop(v4);
}

void __captureSession_startObservingCMSessionInterruptionNotification_block_invoke(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *DerivedStorage;
  void *v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  void *v13;
  NSObject *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = objc_msgSend(*(id *)(a1 + 32), "referencedObject");
  if (!v5)
    goto LABEL_13;
  v6 = v5;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v8 = (void *)objc_msgSend(a2, "name");
  if ((objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D493E0]) & 1) == 0)
  {
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_13;
  }
  if (*DerivedStorage)
    goto LABEL_13;
  v9 = (void *)objc_msgSend(a2, "userInfo");
  v10 = objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", *MEMORY[0x1E0D49260]), "intValue");
  if (!v10)
  {
    v11 = 1;
    goto LABEL_8;
  }
  if (v10 != 1)
  {
    if (!dword_1ECFE9590)
      goto LABEL_13;
    goto LABEL_11;
  }
  v11 = 0;
LABEL_8:
  v12 = (void *)objc_msgSend(a2, "userInfo");
  objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0D49270]);
  v13 = (void *)objc_msgSend(a2, "userInfo");
  objc_msgSend(v13, "objectForKeyedSubscript:", *MEMORY[0x1E0D49278]);
  if (dword_1ECFE9590)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureSession_updateSessionStateWithNewInputCondition(v6, DerivedStorage + 344, v11, 0, 0);
LABEL_13:
  objc_autoreleasePoolPop(v4);
}

void __cs_setPocketDetectionNeeded_block_invoke(uint64_t a1)
{
  cs_clearPocketDetectionNeeded(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

dispatch_group_t __cs_prewarmSystemOverride_block_invoke()
{
  NSObject *v0;
  dispatch_group_t result;

  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  cs_prewarmSystemOverride_overrideQueue = (uint64_t)dispatch_queue_create("capture-session-prewarm-system-override", v0);
  result = dispatch_group_create();
  cs_prewarmSystemOverride_overrideGroup = (uint64_t)result;
  return result;
}

void __captureSession_prewarmMemoryPool_block_invoke(uint64_t a1)
{
  captureSession_cancelMemoryPoolPrewarming(*(_QWORD *)(a1 + 32), 1);
}

void __captureSession_prewarm_block_invoke(uint64_t a1)
{
  captureSession_cancelPrewarming(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t captureSession_Invalidate(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _QWORD v4[6];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    *DerivedStorage = 1;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = __captureSession_Invalidate_block_invoke;
    v4[3] = &__block_descriptor_48_e5_v8__0l;
    v4[4] = DerivedStorage;
    v4[5] = a1;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v4);
  }
  return 0;
}

void captureSession_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSession_Invalidate(a1);
  v3 = *(NSObject **)(DerivedStorage + 104);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 112);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 120);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 208);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 136);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v8 = *(NSObject **)(DerivedStorage + 160);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 152);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }

  *(_QWORD *)(DerivedStorage + 144) = 0;
  v10 = *(const void **)(DerivedStorage + 56);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 64);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 72);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 8);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *captureSession_CopyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureSession %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t captureSession_CopySectionProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *DerivedStorage;
  uint64_t v11;
  _QWORD v13[10];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v11 = FigSignalErrorAt();
  }
  else if (a2 && a3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __captureSession_CopySectionProperty_block_invoke;
    v13[3] = &unk_1E49230D0;
    v13[6] = a2;
    v13[7] = a3;
    v13[8] = a5;
    v13[9] = a4;
    v13[4] = &v14;
    v13[5] = DerivedStorage;
    captureSession_performBlockOnWorkerQueueSynchronously(a1, (uint64_t)v13);
    v11 = *((unsigned int *)v15 + 6);
  }
  else
  {
    FigDebugAssert3();
    v11 = FigSignalErrorAt();
    *((_DWORD *)v15 + 6) = v11;
  }
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1A2FA151C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void captureSession_StopRunning(uint64_t a1)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
    captureSession_updateSessionStateWithNewInputCondition(a1, DerivedStorage + 332, 0, 0, 1);
}

void captureSession_FileSinkStartRecording(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  os_log_type_t type;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v21 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if (objc_msgSend(a3, "settingsID"))
        {
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 3221225472;
          v19[2] = __captureSession_FileSinkStartRecording_block_invoke;
          v19[3] = &unk_1E491EC68;
          v19[5] = a3;
          v19[6] = a1;
          v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          v11 = (void *)MEMORY[0x1A858DD40](v9, v10);
LABEL_8:
          objc_autoreleasePoolPop(v11);
          return;
        }
        v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      v15 = FigSignalErrorAt();
      v11 = (void *)MEMORY[0x1A858DD40](v15, v16);
      if (!(_DWORD)v15)
        goto LABEL_8;
      v14 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v15);
    }
    else
    {
      FigDebugAssert3();
      v12 = FigSignalErrorAt();
      v11 = (void *)MEMORY[0x1A858DD40](v12, v13);
      if (!(_DWORD)v12)
        goto LABEL_8;
      v14 = (const void *)cs_notificationPayloadWithErrorStatus(v12);
    }
    captureSession_postNotificationWithPayload(a1, CFSTR("DidStopRecording"), v14);
    goto LABEL_8;
  }
}

void captureSession_FileSinkStopRecording(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkStopRecording_block_invoke;
      v6[3] = &unk_1E491F158;
      v6[4] = a2;
      v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_FileSinkPauseRecording(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkPauseRecording_block_invoke;
      v6[3] = &unk_1E491F158;
      v6[4] = a2;
      v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_FileSinkResumeRecording(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __captureSession_FileSinkResumeRecording_block_invoke;
      v6[3] = &unk_1E491F158;
      v6[4] = a2;
      v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

void captureSession_StillImageSinkCaptureImage(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  os_log_type_t type;
  int v24;
  uint8_t buf[136];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v24 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    if (!a2)
    {
      FigDebugAssert3();
      v12 = FigSignalErrorAt();
      if (!(_DWORD)v12)
        return;
      v14 = v12;
      v15 = (void *)MEMORY[0x1A858DD40](v12, v13);
      v16 = (const void *)cs_notificationPayloadWithErrorStatus(v14);
      goto LABEL_23;
    }
    if (a3)
    {
      if (objc_msgSend(a3, "settingsID"))
      {
        if (!*(_QWORD *)(DerivedStorage + 304))
        {
          objc_msgSend(a3, "setStillImageRequestTime:", mach_absolute_time());
          v9 = (int *)MEMORY[0x1E0CA1FC0];
          v10 = *MEMORY[0x1E0CA1FC0];
          if (*MEMORY[0x1E0CA1FC0] == 1)
          {
            kdebug_trace();
            v10 = *v9;
          }
          if (v10)
          {
            v11 = fig_log_handle();
            if (os_signpost_enabled(v11))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A2C80000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A332D80B, buf, 2u);
            }
          }
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __captureSession_StillImageSinkCaptureImage_block_invoke;
          v22[3] = &unk_1E491EC68;
          v22[5] = a2;
          v22[6] = a1;
          v22[4] = a3;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v22);
          return;
        }
        v21 = v3;
        LODWORD(v20) = 0;
        FigDebugAssert3();
        goto LABEL_21;
      }
      v21 = v3;
      LODWORD(v20) = 0;
    }
    else
    {
      v21 = v3;
      LODWORD(v20) = 0;
    }
    FigDebugAssert3();
LABEL_21:
    v17 = FigSignalErrorAt();
    if (!(_DWORD)v17)
      return;
    v19 = v17;
    v15 = (void *)MEMORY[0x1A858DD40](v17, v18);
    v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v20, v21), v19);
LABEL_23:
    captureSession_postNotificationWithPayload(a1, CFSTR("StillImageComplete"), v16);
    objc_autoreleasePoolPop(v15);
  }
}

void captureSession_StillImageSinkPrepareToCaptureBracket(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  os_log_type_t type;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v21 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if (objc_msgSend(a3, "settingsID"))
        {
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 3221225472;
          v19[2] = __captureSession_StillImageSinkPrepareToCaptureBracket_block_invoke;
          v19[3] = &unk_1E491EC68;
          v19[5] = a3;
          v19[6] = a1;
          v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          return;
        }
        v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      v14 = FigSignalErrorAt();
      if ((_DWORD)v14)
      {
        v16 = v14;
        v12 = (void *)MEMORY[0x1A858DD40](v14, v15);
        v13 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v16);
        goto LABEL_15;
      }
    }
    else
    {
      FigDebugAssert3();
      v9 = FigSignalErrorAt();
      if ((_DWORD)v9)
      {
        v11 = v9;
        v12 = (void *)MEMORY[0x1A858DD40](v9, v10);
        v13 = (const void *)cs_notificationPayloadWithErrorStatus(v11);
LABEL_15:
        captureSession_postNotificationWithPayload(a1, CFSTR("BracketPreparationComplete"), v13);
        objc_autoreleasePoolPop(v12);
      }
    }
  }
}

void captureSession_IrisStillImageSinkCaptureImage(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];
  os_log_type_t type;
  int v24;
  uint8_t buf[136];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v24 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if (objc_msgSend(a3, "settingsID"))
        {
          objc_msgSend(a3, "setStillImageRequestTime:", mach_absolute_time());
          v9 = (int *)MEMORY[0x1E0CA1FC0];
          v10 = *MEMORY[0x1E0CA1FC0];
          if (*MEMORY[0x1E0CA1FC0] == 1)
          {
            kdebug_trace();
            v10 = *v9;
          }
          if (v10)
          {
            v11 = fig_log_handle();
            if (os_signpost_enabled(v11))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A2C80000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A332D80B, buf, 2u);
            }
          }
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 3221225472;
          v22[2] = __captureSession_IrisStillImageSinkCaptureImage_block_invoke;
          v22[3] = &unk_1E491EC68;
          v22[5] = a3;
          v22[6] = a1;
          v22[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v22);
          return;
        }
        v21 = v3;
        LODWORD(v20) = 0;
      }
      else
      {
        v21 = v3;
        LODWORD(v20) = 0;
      }
      FigDebugAssert3();
      v17 = FigSignalErrorAt();
      if (!(_DWORD)v17)
        return;
      v19 = v17;
      v15 = (void *)MEMORY[0x1A858DD40](v17, v18);
      v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v20, v21), v19);
    }
    else
    {
      FigDebugAssert3();
      v12 = FigSignalErrorAt();
      if (!(_DWORD)v12)
        return;
      v14 = v12;
      v15 = (void *)MEMORY[0x1A858DD40](v12, v13);
      v16 = (const void *)cs_notificationPayloadWithErrorStatus(v14);
    }
    captureSession_postNotificationWithPayload(a1, CFSTR("IrisWillBeginCapture"), v16);
    objc_autoreleasePoolPop(v15);
  }
}

void captureSession_IrisStillImageSinkPrepareToCapture(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];
  os_log_type_t type;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v21 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if (objc_msgSend(a3, "settingsID"))
        {
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 3221225472;
          v19[2] = __captureSession_IrisStillImageSinkPrepareToCapture_block_invoke;
          v19[3] = &unk_1E491EC68;
          v19[5] = a3;
          v19[6] = a1;
          v19[4] = a2;
          captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
          return;
        }
        v18 = v3;
        LODWORD(v17) = 0;
      }
      else
      {
        v18 = v3;
        LODWORD(v17) = 0;
      }
      FigDebugAssert3();
      v14 = FigSignalErrorAt();
      if ((_DWORD)v14)
      {
        v16 = v14;
        v12 = (void *)MEMORY[0x1A858DD40](v14, v15);
        v13 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID", v17, v18), v16);
        goto LABEL_15;
      }
    }
    else
    {
      FigDebugAssert3();
      v9 = FigSignalErrorAt();
      if ((_DWORD)v9)
      {
        v11 = v9;
        v12 = (void *)MEMORY[0x1A858DD40](v9, v10);
        v13 = (const void *)cs_notificationPayloadWithErrorStatus(v11);
LABEL_15:
        captureSession_postNotificationWithPayload(a1, CFSTR("IrisPreparationComplete"), v13);
        objc_autoreleasePoolPop(v12);
      }
    }
  }
}

void captureSession_IrisStillImageSinkBeginMomentCapture(const void *a1, const void *a2, void *a3)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  int v20;
  _QWORD v21[8];
  os_log_type_t type;
  int v23;
  uint8_t buf[136];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    if (a2)
    {
      if (a3)
      {
        if (objc_msgSend(a3, "settingsID"))
        {
          if (!*(_QWORD *)(DerivedStorage + 304))
          {
            *(_QWORD *)(DerivedStorage + 304) = a3;
            v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            if (*MEMORY[0x1E0CA1FC0] == 1)
              kdebug_trace();
            v10 = mach_absolute_time();
            if (*v9)
            {
              v11 = fig_log_handle();
              if (os_signpost_enabled(v11))
              {
                *(_WORD *)buf = 0;
                _os_signpost_emit_with_name_impl(&dword_1A2C80000, v11, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "BeginMomentCapture", (const char *)&unk_1A332D80B, buf, 2u);
              }
            }
            captureSession_SetSectionProperty(a1, a2, CFSTR("UserInitiatedCaptureRequestTime"), (void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a3, "userInitiatedCaptureTime", v16, v17)));
            v21[0] = MEMORY[0x1E0C809B0];
            v21[1] = 3221225472;
            v21[2] = __captureSession_IrisStillImageSinkBeginMomentCapture_block_invoke;
            v21[3] = &unk_1E49223F8;
            v21[4] = a2;
            v21[5] = a3;
            v21[6] = a1;
            v21[7] = v10;
            captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v21);
            v12 = (void *)MEMORY[0x1A858DD40]();
            v13 = 0;
            goto LABEL_14;
          }
          v18 = v3;
          LODWORD(v16) = 0;
          FigDebugAssert3();
          v23 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v13 = 4294950895;
          goto LABEL_24;
        }
        v18 = v3;
        LODWORD(v16) = 0;
      }
      else
      {
        v18 = v3;
        LODWORD(v16) = 0;
      }
      FigDebugAssert3();
    }
    else
    {
      v18 = v3;
      LODWORD(v16) = 0;
      FigDebugAssert3();
    }
    v13 = FigSignalErrorAt();
    if (!(_DWORD)v13)
    {
LABEL_25:
      v12 = (void *)MEMORY[0x1A858DD40]();
      if (!a2)
      {
        v14 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
        goto LABEL_15;
      }
LABEL_14:
      v14 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)a2, objc_msgSend(a3, "settingsID", v16, v18), v13);
LABEL_15:
      captureSession_postNotificationWithPayload(a1, CFSTR("DidBeginMomentCapture"), v14);
      objc_autoreleasePoolPop(v12);
      return;
    }
LABEL_24:
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __captureSession_IrisStillImageSinkBeginMomentCapture_block_invoke_2;
    v19[3] = &__block_descriptor_44_e5_v8__0l;
    v19[4] = a1;
    v20 = v13;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
    goto LABEL_25;
  }
}

void captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture(const void *a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  const void *v9;
  int *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  const void *v17;
  _QWORD v18[5];
  _QWORD v19[9];
  int v20;
  os_log_type_t type;
  int v22;
  uint8_t buf[136];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v22 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    if (a2 && a3 && objc_msgSend(a3, "settingsID"))
    {
      v8 = objc_msgSend(a3, "settingsID");
      if (v8 == objc_msgSend(*(id *)(DerivedStorage + 304), "settingsID"))
      {
        v9 = *(const void **)(DerivedStorage + 304);
        if (v9)
        {
          CFRelease(v9);
          *(_QWORD *)(DerivedStorage + 304) = 0;
        }
        objc_msgSend(a3, "setStillImageRequestTime:", mach_absolute_time());
        v10 = (int *)MEMORY[0x1E0CA1FC0];
        v11 = *MEMORY[0x1E0CA1FC0];
        if (*MEMORY[0x1E0CA1FC0] == 1)
        {
          kdebug_trace();
          v11 = *v10;
        }
        if (v11)
        {
          v12 = fig_log_handle();
          if (os_signpost_enabled(v12))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1A2C80000, v12, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "StillImageCaptureNow", (const char *)&unk_1A332D80B, buf, 2u);
          }
        }
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture_block_invoke;
        v19[3] = &unk_1E4923118;
        v19[6] = a1;
        v19[7] = DerivedStorage;
        v19[4] = a2;
        v19[5] = a3;
        v19[8] = a2;
        v20 = 0;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v19);
        return;
      }
      FigDebugAssert3();
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v13 = 4294950896;
    }
    else
    {
      FigDebugAssert3();
      v13 = FigSignalErrorAt();
      if (!(_DWORD)v13)
        return;
    }
    v22 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToStillImageCapture_block_invoke_700;
    v18[3] = &__block_descriptor_40_e5_v8__0l;
    v18[4] = a1;
    captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v18);
    v16 = (void *)MEMORY[0x1A858DD40]();
    if (a2)
      v17 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID"), v13);
    else
      v17 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
    captureSession_postNotificationWithPayload(a1, CFSTR("IrisWillBeginCapture"), v17);
    objc_autoreleasePoolPop(v16);
  }
}

void captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording(const void *a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  const void *v16;
  _QWORD v17[5];
  _QWORD v18[10];
  int v19;
  os_log_type_t type;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v21 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    if (a2
      && a3
      && objc_msgSend(a3, "settingsID")
      && (v8 = objc_msgSend(a3, "settingsID"), v8 == objc_msgSend(*(id *)(DerivedStorage + 304), "settingsID")))
    {
      v9 = objc_msgSend(*(id *)(DerivedStorage + 304), "userInitiatedCaptureTime");
      v10 = objc_msgSend(*(id *)(DerivedStorage + 304), "torchMode");
      v11 = *(const void **)(DerivedStorage + 304);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(DerivedStorage + 304) = 0;
      }
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording_block_invoke;
      v18[3] = &unk_1E4923140;
      v18[4] = a2;
      v18[5] = a3;
      v18[6] = a1;
      v18[7] = v9;
      v19 = v10;
      v18[8] = DerivedStorage;
      v18[9] = a2;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v18);
    }
    else
    {
      FigDebugAssert3();
      v12 = FigSignalErrorAt();
      if ((_DWORD)v12)
      {
        v13 = v12;
        v21 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __captureSession_IrisStillImageSinkCommitMomentCaptureToMovieRecording_block_invoke_704;
        v17[3] = &__block_descriptor_40_e5_v8__0l;
        v17[4] = a1;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v17);
        v15 = (void *)MEMORY[0x1A858DD40]();
        if (a2)
          v16 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, objc_msgSend(a3, "settingsID"), v13);
        else
          v16 = (const void *)cs_notificationPayloadWithErrorStatus(v13);
        captureSession_postNotificationWithPayload(a1, CFSTR("DidBeginRecordingMomentCaptureMovie"), v16);
        objc_autoreleasePoolPop(v15);
      }
    }
  }
}

void captureSession_IrisStillImageSinkCancelMomentCapture(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[5];
  _QWORD v17[9];
  os_log_type_t type;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v19 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_BYTE *)DerivedStorage)
  {
    if (a2)
    {
      if (objc_msgSend(*(id *)(DerivedStorage + 304), "settingsID") == a3)
      {
        v8 = *(const void **)(DerivedStorage + 304);
        if (v8)
        {
          CFRelease(v8);
          *(_QWORD *)(DerivedStorage + 304) = 0;
        }
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __captureSession_IrisStillImageSinkCancelMomentCapture_block_invoke;
        v17[3] = &unk_1E49225B0;
        v17[4] = a2;
        v17[5] = a1;
        v17[6] = DerivedStorage;
        v17[7] = a3;
        v17[8] = a2;
        captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v17);
        return;
      }
      FigDebugAssert3();
    }
    v9 = FigSignalErrorAt();
    if ((_DWORD)v9)
    {
      v10 = v9;
      v19 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __captureSession_IrisStillImageSinkCancelMomentCapture_block_invoke_706;
      v16[3] = &__block_descriptor_40_e5_v8__0l;
      v16[4] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v16);
      v14 = (void *)MEMORY[0x1A858DD40](v12, v13);
      if (a2)
        v15 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus(a2, a3, v10);
      else
        v15 = (const void *)cs_notificationPayloadWithErrorStatus(v10);
      captureSession_postNotificationWithPayload(a1, CFSTR("DidCancelMomentCapture"), v15);
      objc_autoreleasePoolPop(v14);
    }
  }
}

void captureSession_IrisStillImageSinkEndMomentCapture(const void *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v8[8];
  os_log_type_t type;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = __captureSession_IrisStillImageSinkEndMomentCapture_block_invoke;
      v8[3] = &unk_1E491EED0;
      v8[4] = a2;
      v8[5] = a1;
      v8[6] = DerivedStorage;
      v8[7] = a3;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v8);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void captureSession_VisionDataSinkTriggerBurst(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v6[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9590)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
  {
    if (a2)
    {
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = __captureSession_VisionDataSinkTriggerBurst_block_invoke;
      v6[3] = &unk_1E491F158;
      v6[4] = a2;
      v6[5] = a1;
      captureSession_performBlockOnWorkerQueue(a1, (uint64_t)v6);
    }
    else
    {
      FigDebugAssert3();
      FigSignalErrorAt();
    }
  }
}

uint64_t __cs_shouldCachePreviewSinkSessionPropertyWithKey_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("PreviewFilters"), CFSTR("SimulatedAperture"), CFSTR("PortraitLightingEffectStrength"), CFSTR("SemanticStyles"), CFSTR("PrimaryCaptureRectAspectRatio"), 0);
  cs_shouldCachePreviewSinkSessionPropertyWithKey_cachedPreviewSinkPropertyKeys = result;
  return result;
}

uint64_t __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  void *v4;
  int v5;
  id v6;
  NSObject *v7;
  CFNumberRef v8;
  uint64_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  const void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD block[5];
  _BYTE v29[128];
  const __CFString *valuePtr;
  uint64_t v31[3];

  v31[1] = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 364))
  {
    v3 = result;
    if ((*(_DWORD *)(result + 360) - 1) <= 1)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(result + 320));
      v4 = *(void **)(v3 + 424);
      if (!v4)
        v4 = *(void **)(v3 + 416);
      v5 = *(_DWORD *)(v3 + 368);
      v20 = objc_msgSend(v4, "configurationID");
      v6 = *(id *)(v3 + 416);
      if (v5 == 2)
      {
        v21 = cs_configurationContainsVideoSource(v4);
        v22 = (id)objc_msgSend(*(id *)(v3 + 352), "copy");
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 320));
      v7 = *(NSObject **)(v3 + 120);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke_2;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v3;
      dispatch_async(v7, block);
      v31[0] = 0;
      LODWORD(valuePtr) = 0;
      cs_getMasterClockAndType(*(void **)(v3 + 624), v31, (int *)&valuePtr);
      v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      v9 = objc_msgSend(v6, "configurationID");
      v10 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v9), CFSTR("ConfigurationID"), v31[0], CFSTR("MasterClock"), v8, CFSTR("MasterClockType"), 0);
      if (v8)
        CFRelease(v8);
      captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), CFSTR("ConfigurationCommitted"), v10);
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v23 = v3;
      v11 = (void *)objc_msgSend(*(id *)(v3 + 624), "previewSinkPipelines");
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)v25;
        do
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v25 != v14)
              objc_enumerationMutation(v11);
            v16 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
            if (objc_msgSend(v16, "sinkID"))
            {
              v17 = (const void *)objc_msgSend(v16, "imageQueueUpdatedPayloadToBeSentAfterCommitConfiguration");
              objc_msgSend(v16, "setImageQueueUpdatedNotificationSent:", 1);
              captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), CFSTR("ImageQueueUpdated"), v17);
              if (objc_msgSend(v16, "previewRunning"))
              {
                v18 = objc_msgSend(v16, "sinkID");
                valuePtr = CFSTR("SectionID");
                v31[0] = v18;
                captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), CFSTR("DidStartPreviewing"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &valuePtr, 1));
              }
            }
          }
          v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
        }
        while (v13);
      }
      if (v5 == 2)
      {
        captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), CFSTR("ConfigurationDidBecomeLive"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v20), CFSTR("ConfigurationID"), 0, CFSTR("ErrorStatus"), 0));
        v19 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        objc_msgSend(v19, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v23 + 20, 32), CFSTR("ClientAuditToken"));
        objc_msgSend(v19, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v21), 0x1E493E498);
        if (v22)
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v22, CFSTR("PrewarmReason"));
        captureSession_postNotificationWithPayload(*(const void **)(a1 + 32), CFSTR("DidStartRunning"), v19);
      }
      return captureSession_transitionToSessionLaunchPrewarmStatus(*(_QWORD *)(a1 + 32), 0);
    }
  }
  return result;
}

uint64_t __captureSession_updatePrewarmedLaunchClientForStartRunning_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 128) = 1;
  return result;
}

uint64_t cs_updateSmartStyleSupport(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;
  _BOOL4 v6;
  _BOOL4 v7;

  if (!a2)
  {
    result = cs_getCurrentSmartStyle();
    if (!result)
      return result;
    v6 = 0;
    if (!a3)
      goto LABEL_16;
    goto LABEL_13;
  }
  result = objc_msgSend(a2, "constantColorEnabled");
  if ((result & 1) == 0)
  {
    result = objc_msgSend(a2, "burstQualityCaptureEnabled");
    if ((result & 1) == 0)
    {
      result = FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a2, "rawOutputFormat"));
      if ((result & 1) == 0)
      {
        result = objc_msgSend(a2, "bracketType");
        if (!(_DWORD)result)
        {
          result = cs_getCurrentSmartStyle();
          if (result)
          {
            objc_msgSend(a2, "setSmartStyle:", result);
            result = objc_msgSend(a2, "clientQualityPrioritization");
            if ((_DWORD)result == 1
              || (result = FigCapturePixelFormatIsDemosaicedRaw(objc_msgSend(a2, "rawOutputFormat")), (result & 1) != 0))
            {
              v6 = 1;
              if (!a3)
                goto LABEL_16;
            }
            else
            {
              result = objc_msgSend(a2, "outputFileType");
              v6 = result == 1785096550;
              if (!a3)
                goto LABEL_16;
            }
LABEL_13:
            result = objc_msgSend((id)objc_msgSend(a3, "videoSettings"), "objectForKeyedSubscript:", CFSTR("AVVideoCodecKey"));
            if (result)
            {
              result = BWOSTypeForString((void *)result);
              v7 = result != 1752589105;
              goto LABEL_17;
            }
LABEL_16:
            v7 = 0;
LABEL_17:
            if (!v6 && !v7)
            {
              objc_msgSend(a2, "setSmartStyleReversibilitySupported:", 1);
              return objc_msgSend(a3, "setSmartStyleReversibilitySupported:", 1);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t captureSession_captureStillImageNow(const void *a1, void *a2, void *a3)
{
  uint64_t DerivedStorage;
  void *v7;
  void *v8;
  char isKindOfClass;
  uint64_t v10;
  void *v11;
  void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  float v17;
  void *v18;
  double v19;
  NSObject *v20;
  unint64_t v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t j;
  uint64_t v42;
  const void *v44;
  __CFString **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  os_log_type_t type;
  int v93;
  _BYTE v94[128];
  _BYTE v95[128];
  const __CFString *v96;
  _QWORD v97[19];

  v97[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v54 = a2;
  v7 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "stillImageSinkPipelineSessionStorageWithSinkID:", a2);
  v8 = (void *)objc_msgSend(v7, "stillImageSinkPipeline");
  v56 = (void *)objc_msgSend(v8, "stillImageCoordinatorNode");
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v53 = objc_msgSend(a3, "isBeginMomentCaptureSettings");
  v10 = objc_msgSend(v7, "cameraSourcePipeline");
  if ((isKindOfClass & 1) != 0)
    v11 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelineWithSinkID:", objc_msgSend(v8, "sinkID"));
  else
    v11 = 0;
  v12 = (void *)-[FigCaptureCameraSourcePipeline captureDevice](v10);
  if (_FigIsCurrentDispatchQueue())
  {
    if (v8)
      goto LABEL_6;
LABEL_96:
    v48 = v51;
    LODWORD(v46) = 0;
LABEL_99:
    FigDebugAssert3();
    goto LABEL_103;
  }
  v47 = v51;
  LODWORD(v46) = 0;
  FigDebugAssert3();
  if (!v8)
    goto LABEL_96;
LABEL_6:
  if (!v56)
  {
    v48 = v51;
    LODWORD(v46) = 0;
    FigDebugAssert3();
    goto LABEL_103;
  }
  if ((objc_msgSend(v54, "isEqualToString:", objc_msgSend(v8, "sinkID")) & 1) == 0)
  {
    v48 = v51;
    LODWORD(v46) = 0;
    goto LABEL_99;
  }
  v55 = v7;
  if (((objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D4D8) & 1) != 0
     || objc_msgSend(*(id *)(DerivedStorage + 56), "isEqualToString:", 0x1E493D5F8))
    && captureSession_isPrewarming())
  {
    if (dword_1ECFE9590)
    {
      v93 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    objc_msgSend(*(id *)(DerivedStorage + 88), "updateApplicationState", v46, v47);
  }
  if (captureSession_isPrewarming())
  {
    v48 = v51;
    LODWORD(v46) = 0;
LABEL_102:
    FigDebugAssert3();
LABEL_103:
    v36 = FigSignalErrorAt();
    if (!(_DWORD)v36)
      return v36;
    goto LABEL_106;
  }
  if (!*(_BYTE *)(DerivedStorage + 608))
  {
    v48 = v51;
    LODWORD(v46) = 0;
    goto LABEL_102;
  }
  if (objc_msgSend(*(id *)(DerivedStorage + 592), "resumesConnectionsAsNodesArePrepared"))
  {
    v14 = CMBaseObjectGetDerivedStorage();
    if (!_FigIsCurrentDispatchQueue())
    {
      v47 = v51;
      LODWORD(v46) = 0;
      FigDebugAssert3();
    }
    if (dword_1ECFE9590)
    {
      v93 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(v14 + 609))
    {
      captureSession_startDeferredGraphSetupWork((uint64_t)a1);
      objc_msgSend(*(id *)(v14 + 592), "waitForNonDeferredSourceNodesToStart");
    }
  }
  else
  {
    captureSession_waitForGraphToStart((uint64_t)a1, 0);
  }
  if (captureSession_clientIsCameraOrDerivative((uint64_t)a1)
    && objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](v10), "softISPEnabled")
    && !*(_BYTE *)(DerivedStorage + 611)
    && objc_msgSend(a3, "qualityPrioritization") == 3)
  {
    objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 592), "memoryPool"), "ensureMemoryAsyncWithSize:withMaximizeSystemMemory:", 400, 1);
  }
  *(_BYTE *)(DerivedStorage + 611) = 1;
  v16 = v55;
  if ((isKindOfClass & 1) != 0 && -[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v11))
  {
    v17 = objc_msgSend(*(id *)(DerivedStorage + 592), "resumesConnectionsAsNodesArePrepared") ? 2.0 : 1.0;
    v18 = (void *)-[FigCaptureMovieFileSinkPipeline irisStagingNode]((uint64_t)v11);
    *(float *)&v19 = v17;
    if ((objc_msgSend(v18, "waitUntilReadyToReceiveRequestsWithTimeout:", v19) & 1) == 0)
    {
      v93 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v16 = v55;
    }
  }
  if (objc_msgSend(v16, "videoStabilizationOverscanCropEnabled", v46, v47))
  {
    objc_msgSend(v16, "videoStabilizationOverscanCropMultiplier");
    objc_msgSend(a3, "setVideoStabilizationOverscanCropMultiplier:");
  }
  v21 = stillImageSinkPipelineSessionStorage_stillImageOutputDimensionsForSettings(v16, a3);
  captureSession_updateOutputDimensionsAndResolutionFlavor(v21, v10, a3);
  objc_msgSend(v12, "zoomFactor");
  BWUpdateThumbnailAndPreviewDimensionsForRequestedSettings(a3, v22);
  if ((isKindOfClass & 1) != 0
    && -[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v11)
    && objc_msgSend(a3, "movieMode"))
  {
    v52 = v8;
    v49 = DerivedStorage;
    v50 = a3;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v23 = (void *)-[FigCaptureMovieFileSinkPipeline movieFileSinkNodes]((uint64_t)v11);
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v89;
      do
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v89 != v26)
            objc_enumerationMutation(v23);
          v28 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * i);
          if (objc_msgSend(v28, "irisMovieProcessingSuspended"))
          {
            objc_msgSend(v28, "setIrisMovieProcessingSuspended:", 0);
            v29 = objc_msgSend(v11, "sinkID");
            v96 = CFSTR("SectionID");
            v97[0] = v29;
            captureSession_postNotificationWithPayload(a1, CFSTR("DidResumeIrisMovieProcessing"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v97, &v96, 1));
          }
        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v88, v95, 16);
      }
      while (v25);
    }
    objc_msgSend(v12, "nonDestructiveCropSize");
    a3 = v50;
    objc_msgSend(v50, "setNonDestructiveCropSize:");
    DerivedStorage = v49;
    v8 = v52;
    v16 = v55;
  }
  v30 = objc_msgSend(v16, "previewSinkNode");
  if (!v30)
    goto LABEL_74;
  v31 = (void *)v30;
  v32 = objc_msgSend(a3, "stillImageUserInitiatedRequestTime");
  if (objc_msgSend(v12, "zeroShutterLagEnabled"))
  {
    if (objc_msgSend(v12, "unifiedBracketingMode"))
    {
      if (!v32)
        v32 = mach_absolute_time();
      objc_msgSend(v31, "previewPTSDisplayedAtHostTime:allowingExtrapolation:", v32, 1);
      v71 = v73;
      v72 = v74;
      objc_msgSend(a3, "setStillImageUserInitiatedRequestPTS:", &v71);
      goto LABEL_65;
    }
    if (objc_msgSend(v16, "currentUserInitiatedRequestHostTime"))
    {
      if (v16)
      {
        objc_msgSend(v16, "currentUserInitiatedRequestPTS");
        if ((v86 & 0x100000000) != 0)
        {
          v33 = objc_msgSend(a3, "stillImageUserInitiatedRequestTime");
          if (v33 == objc_msgSend(v16, "currentUserInitiatedRequestHostTime"))
          {
            objc_msgSend(v16, "currentUserInitiatedRequestPTS");
            v81 = v83;
            v82 = v84;
            v34 = &v81;
LABEL_94:
            objc_msgSend(a3, "setStillImageUserInitiatedRequestPTS:", v34);
            goto LABEL_64;
          }
          if (objc_msgSend(a3, "burstQualityCaptureEnabled"))
          {
            objc_msgSend(a3, "setStillImageUserInitiatedRequestTime:", objc_msgSend(v16, "currentUserInitiatedRequestHostTime"));
            objc_msgSend(v16, "currentUserInitiatedRequestPTS");
            v77 = v79;
            v78 = v80;
            v34 = &v77;
            goto LABEL_94;
          }
LABEL_64:
          objc_msgSend(v16, "setCurrentUserInitiatedRequestHostTime:", 0);
          v75 = *MEMORY[0x1E0CA2E18];
          v76 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          objc_msgSend(v16, "setCurrentUserInitiatedRequestPTS:", &v75);
          goto LABEL_65;
        }
      }
      else
      {
        v85 = 0;
        v86 = 0;
        v87 = 0;
      }
    }
    objc_msgSend(a3, "burstQualityCaptureEnabled");
    objc_msgSend(a3, "stillImageUserInitiatedRequestTime");
    goto LABEL_64;
  }
LABEL_65:
  if (objc_msgSend(a3, "stillImageUserInitiatedRequestTime"))
  {
    if (a3)
    {
      objc_msgSend(a3, "stillImageUserInitiatedRequestPTS");
      if ((v69 & 0x100000000) != 0)
        goto LABEL_72;
    }
    else
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
    }
    objc_msgSend(v31, "previewPTSDisplayedAtHostTime:allowingExtrapolation:", objc_msgSend(a3, "stillImageUserInitiatedRequestTime"), 1);
    v64 = v66;
    v65 = v67;
    objc_msgSend(a3, "setStillImageUserInitiatedRequestPTS:", &v64);
  }
  if (!a3)
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    goto LABEL_74;
  }
LABEL_72:
  objc_msgSend(a3, "stillImageUserInitiatedRequestPTS");
LABEL_74:
  if (v53)
  {
    if (cs_touchDownMomentStillCaptureEnabled_onceToken != -1)
      dispatch_once(&cs_touchDownMomentStillCaptureEnabled_onceToken, &__block_literal_global_357);
    v35 = objc_msgSend(v56, "beginStillImageMomentCaptureWithSettings:", a3);
  }
  else
  {
    v35 = objc_msgSend(v56, "captureStillImageNowWithSettings:", a3);
  }
  LODWORD(v36) = v35;
  if (!v35)
  {
    if (objc_msgSend(a3, "burstQualityCaptureEnabled"))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
      objc_msgSend(v16, "setMostRecentBurstSettingsID:", objc_msgSend(a3, "settingsID"));
      os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v37 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "metadataSinkPipelines");
      v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v57, v94, 16);
      if (v38)
      {
        v39 = v38;
        v40 = *(_QWORD *)v58;
        do
        {
          for (j = 0; j != v39; ++j)
          {
            if (*(_QWORD *)v58 != v40)
              objc_enumerationMutation(v37);
            v42 = *(_QWORD *)(*((_QWORD *)&v57 + 1) + 8 * j);
            if (-[FigCaptureMetadataSinkPipeline mrcLowPowerModeEnabled](v42))
              -[FigCaptureMetadataSinkPipeline setMrcSuspended:](v42, 1);
          }
          v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v57, v94, 16);
        }
        while (v39);
      }
    }
    return 0;
  }
  v48 = v51;
  LODWORD(v46) = v35;
  FigDebugAssert3();
LABEL_106:
  if (!v8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 320));
    if (!*(_DWORD *)(DerivedStorage + 368))
      LODWORD(v36) = -16409;
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 320));
  }
  if ((_DWORD)v36 == -12773)
    v36 = 4294951755;
  else
    v36 = v36;
  if ((v53 & 1) == 0)
  {
    v44 = (const void *)cs_notificationPayloadWithSectionIDAndSettingsIDAndErrorStatus((uint64_t)v54, objc_msgSend(a3, "settingsID", v46, v48), v36);
    v45 = kFigCaptureSessionIrisStillImageSinkNotification_WillBeginCapture;
    if ((isKindOfClass & 1) == 0)
      v45 = kFigCaptureSessionStillImageSinkNotification_StillImageComplete;
    captureSession_postNotificationWithPayload(a1, *v45, v44);
  }
  return v36;
}

uint64_t captureSession_updateOutputDimensionsAndResolutionFlavor(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  unint64_t v8;
  void *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureSourceVideoFormat](a2), "highResStillImageDimensions");
  if (objc_msgSend(a3, "resolutionFlavor"))
  {
    v7 = +[FigCaptureSourceFormatDimensions identifyDimensionsFromFlavor:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifyDimensionsFromFlavor:availableHighResStillImageDimensions:", objc_msgSend(a3, "resolutionFlavor"), v6);
    a1 = objc_msgSend(v7, "dimensions");
  }
  else
  {
    v7 = +[FigCaptureSourceFormatDimensions identifySourceFormatDimensionsFromDimensions:availableHighResStillImageDimensions:](FigCaptureSourceFormatDimensions, "identifySourceFormatDimensionsFromDimensions:availableHighResStillImageDimensions:", a1, v6);
  }
  v8 = HIDWORD(a1);
  v9 = (void *)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a2), "baseZoomFactorsByPortType");
  objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", objc_msgSend((id)objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a2), "masterCaptureStream"), "portType")), "floatValue");
  if (v10 == 0.0)
    v11 = 1.0;
  else
    v11 = v10;
  objc_msgSend((id)-[FigCaptureCameraSourcePipeline captureDevice](a2), "zoomFactor");
  v13 = v12 / v11;
  if (v13 >= 1.0 && FigCaptureVideoDimensionsAreValid(objc_msgSend(v7, "maxUpscalingDimensions")))
  {
    v14 = BWCropRectDimensionsForZoomFactor(a1, v13);
    v8 = HIDWORD(v14);
    a1 = v14;
    if ((int)v14 <= (int)objc_msgSend(v7, "maxUpscalingDimensions")
      && (int)v8 <= (int)((unint64_t)objc_msgSend(v7, "maxUpscalingDimensions") >> 32))
    {
      v17 = objc_msgSend(v7, "maxUpscalingDimensions");
      v15 = 0;
      v8 = HIDWORD(v17);
      a1 = v17;
    }
    else
    {
      v15 = 1;
    }
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(a3, "setOutputWidth:", a1);
  objc_msgSend(a3, "setOutputHeight:", v8);
  objc_msgSend(a3, "setResolutionFlavor:", objc_msgSend(v7, "flavor"));
  return objc_msgSend(a3, "setBypassUpscaling:", v15);
}

uint64_t cs_IrisStillImageSinkPrepareMovieRecording(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t DerivedStorage;
  void *v8;
  BWPendingIrisRecordingRequest *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    result = objc_msgSend(a3, "movieMode");
    if ((_DWORD)result)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!_FigIsCurrentDispatchQueue())
      {
        v15 = v3;
        LODWORD(v13) = 0;
        FigDebugAssert3();
      }
      v8 = (void *)objc_msgSend(*(id *)(DerivedStorage + 624), "movieFileSinkPipelineWithSinkID:", a2, v13, v15);
      v9 = +[BWPendingIrisRecordingRequest irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:](BWPendingIrisRecordingRequest, "irisRecordingRequestWithFigCaptureMovieFileRecordingSettings:", (id)objc_msgSend((id)objc_msgSend(a3, "movieRecordingSettings"), "copy"));
      if (!objc_msgSend(v8, "pendingIrisRecordings"))
        objc_msgSend(v8, "setPendingIrisRecordings:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"));
      v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "pendingIrisRecordings"), "lastObject"), "settings"), "settingsID");
      if (v10 >= -[FigCaptureRecordingSettings settingsID](-[BWPendingIrisRecordingRequest settings](v9, "settings"), "settingsID"))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      objc_msgSend((id)objc_msgSend(v8, "pendingIrisRecordings", v14, v16), "addObject:", v9);
      result = -[BWPendingIrisRecordingRequest setEnqueuedHostTime:](v9, "setEnqueuedHostTime:", mach_absolute_time());
      if (dword_1ECFE9590)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        return fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return result;
}

uint64_t FigImageControl_LockFocus()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7612) != 3)
  {
    *(_DWORD *)(DerivedStorage + 7612) = 3;
    *(_BYTE *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

uint64_t FigImageControl_ContinuousAutoFocusWithSmoothFocus(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(DerivedStorage + 7583) != a2)
  {
    *(_BYTE *)(DerivedStorage + 7583) = a2;
    *(_BYTE *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

uint64_t FigImageControl_FocusScan(uint64_t a1, int a2, int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  uint64_t DerivedStorage;
  unsigned int v17;
  unsigned int v18;
  _BOOL4 v19;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v26;
  char v27;
  BOOL v28;
  BOOL v29;
  char v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a7 | a6) >= 0x100)
    return FigSignalErrorAt();
  if (a7 <= a6)
    v17 = a6;
  else
    v17 = a7;
  if (a7 >= a6)
    v18 = a6;
  else
    v18 = a7;
  if (*(_DWORD *)(DerivedStorage + 7612) != 2
    || *(_DWORD *)(DerivedStorage + 7620) != a2
    || *(_DWORD *)(DerivedStorage + 7624) != a3
    || *(_DWORD *)(DerivedStorage + 7628) != a4
    || *(_DWORD *)(DerivedStorage + 7632) != a5
    || *(_DWORD *)(DerivedStorage + 7636) != v18
    || *(_DWORD *)(DerivedStorage + 7640) != v17
    || *(unsigned __int8 *)(DerivedStorage + 7583) != a8
    || *(unsigned __int8 *)(DerivedStorage + 7584) != a9)
  {
    if (*(_BYTE *)(DerivedStorage + 521))
      v19 = *(_BYTE *)(DerivedStorage + 624) != 0;
    else
      v19 = 0;
    v21 = *(_DWORD *)(DerivedStorage + 7596);
    if (*(_BYTE *)(DerivedStorage + 521))
      v22 = v21 == 0;
    else
      v22 = 1;
    v23 = !v22;
    if (v21 == -1)
      v23 = v19;
    v24 = (!*(_BYTE *)(DerivedStorage + 621) || *(int *)(DerivedStorage + 656) >= 120)
       && *(_BYTE *)(DerivedStorage + 622) == 0;
    v25 = 0;
    if (!v24 && ((v23 ^ 1) & 1) == 0)
      v25 = *(_BYTE *)(DerivedStorage + 623) != 0;
    *(_DWORD *)(DerivedStorage + 7612) = 2;
    v26 = *(_DWORD *)(DerivedStorage + 7600);
    if (v26 == -1)
      v24 = 1;
    else
      v25 = 0;
    *(_DWORD *)(DerivedStorage + 7620) = a2;
    if (v26)
      v27 = v23;
    else
      v27 = 0;
    *(_DWORD *)(DerivedStorage + 7624) = a3;
    if (v24)
      v28 = v25;
    else
      v28 = v27;
    *(_DWORD *)(DerivedStorage + 7628) = a4;
    *(_DWORD *)(DerivedStorage + 7632) = a5;
    *(_DWORD *)(DerivedStorage + 7636) = v18;
    *(_DWORD *)(DerivedStorage + 7640) = v17;
    if (v18)
      v29 = 0;
    else
      v29 = v17 == 255;
    v30 = !v29;
    *(_BYTE *)(DerivedStorage + 7582) = v30;
    *(_BYTE *)(DerivedStorage + 7584) = a9;
    *(_BYTE *)(DerivedStorage + 7583) = a8;
    *(_BYTE *)(DerivedStorage + 7586) = v23;
    *(_BYTE *)(DerivedStorage + 7585) = v28;
    *(_BYTE *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

uint64_t FigImageControl_ManualFocus(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 || *(_DWORD *)(DerivedStorage + 7612) != 4 || *(_DWORD *)(DerivedStorage + 7644) != a2)
  {
    *(_DWORD *)(DerivedStorage + 7612) = 4;
    *(_DWORD *)(DerivedStorage + 7644) = a2;
    *(_DWORD *)(DerivedStorage + 7652) = a3;
    *(_BYTE *)(DerivedStorage + 7585) = 0;
    *(_BYTE *)(DerivedStorage + 7580) = 0;
  }
  return 0;
}

CFDictionaryRef FigImageControl_CopyPreFlashAFParameters(uint64_t a1)
{
  uint64_t DerivedStorage;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  __CFArray *v12;
  const __CFAllocator *v13;
  const CFDictionaryKeyCallBacks *v14;
  const CFDictionaryValueCallBacks *v15;
  __CFDictionary *Mutable;
  CFNumberRef v17;
  CFNumberRef v18;
  const void *v19;
  void *v20;
  CFDictionaryRef v21;
  int v22;
  int v24;
  uint64_t v25;
  int v26;
  int valuePtr;
  void *values;
  CFTypeRef cf;
  const void *v30;
  uint64_t v31;
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(DerivedStorage + 648))
    return 0;
  v3 = (os_unfair_lock_s *)DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 7612) != 1)
    return 0;
  keys[3] = 0;
  v31 = 0;
  v4 = *(unsigned int *)(DerivedStorage + 6220);
  if ((int)v4 >= 1)
  {
    v5 = *(_DWORD *)(DerivedStorage + 644);
    if (v5 < 1)
      v5 = 85;
    v6 = *(_DWORD *)(DerivedStorage + 652);
    if (v6)
      LOBYTE(v6) = *(_QWORD *)(DerivedStorage + 7704) > *(_QWORD *)(DerivedStorage + 7832);
    v7 = 0;
    v8 = *(_QWORD *)(DerivedStorage + 5896);
    v9 = DerivedStorage + 5736;
    v10 = -1;
    do
    {
      if (*(_QWORD *)(v9 + 8 * v7 + 160) < v8)
        v8 = *(_QWORD *)(v9 + 8 * v7 + 160);
      if (*(_DWORD *)(DerivedStorage + 6280) == *(_DWORD *)(v9 + 4 * v7))
        v10 = v7;
      ++v7;
    }
    while (v4 != v7);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = 100 * v8 >= *(_QWORD *)(DerivedStorage + 8 * v10 + 5896) * v5 ? 1 : v6;
      if ((v11 & 1) == 0)
      {
        v22 = (int)(float)((float)*(int *)(DerivedStorage + 656) * 3.0);
        os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 7576));
        v3[1902]._os_unfair_lock_opaque = v22;
        os_unfair_lock_unlock(v3 + 1894);
        return 0;
      }
    }
  }
  if (*(int *)(DerivedStorage + 636) < 1)
    return 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  getDefaultFocusScanRange(a1, &v26, (int *)&v25 + 1, &v25, &v24);
  v12 = computeAFSearchPositions(a1, v26, SHIDWORD(v25), v25, v24, v25 == v26);
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 2;
  v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05AB0], v17);
  CFRelease(v17);
  valuePtr = 56;
  v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05AA0], v18);
  CFRelease(v18);
  v19 = (const void *)*MEMORY[0x1E0C9AE50];
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05AA8], (const void *)*MEMORY[0x1E0C9AE50]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D05A98], v19);
  v20 = (void *)*MEMORY[0x1E0D07340];
  keys[0] = *(void **)MEMORY[0x1E0D07350];
  keys[1] = v20;
  values = v12;
  cf = Mutable;
  keys[2] = *(void **)MEMORY[0x1E0D07348];
  v30 = v19;
  v21 = CFDictionaryCreate(v13, (const void **)keys, (const void **)&values, 3, v14, v15);
  CFRelease(values);
  CFRelease(cf);
  sendFocusStartNotification(a1, 0);
  return v21;
}

uint64_t doLockFocusNow(uint64_t a1)
{
  uint64_t result;
  _BYTE *v3;

  result = CMBaseObjectGetDerivedStorage();
  v3 = (_BYTE *)(result + 8289);
  if (!*(_BYTE *)(result + 8289))
  {
    if (*(_BYTE *)(result + 515))
      result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07618], 0);
    *v3 = 1;
  }
  return result;
}

uint64_t FigImageControl_Focus_StartNow(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  _BYTE *v5;
  void **v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(_DWORD *)(DerivedStorage + 7616);
  if (!v4)
    v4 = *(_DWORD *)(DerivedStorage + 7612);
  if (v4 != 1)
    return 0;
  if (!*(_DWORD *)(DerivedStorage + 652))
    return 0;
  v5 = (_BYTE *)(DerivedStorage + 7580);
  if (!*(_BYTE *)(DerivedStorage + 7586) || !*(_BYTE *)(DerivedStorage + 7585))
    return 0;
  setupFocusWindowMatrix(a1, *(_DWORD *)(DerivedStorage + 7620), *(_DWORD *)(DerivedStorage + 7624), *(_DWORD *)(DerivedStorage + 7628), *(_DWORD *)(DerivedStorage + 7632), *(unsigned __int8 *)(DerivedStorage + 560), 5, 3, 0);
  v8 = 0;
  v9 = 0;
  getDefaultFocusScanRange(a1, (_DWORD *)&v9 + 1, (int *)&v9, (_DWORD *)&v8 + 1, (int *)&v8);
  setupSearchPositions(a1, SHIDWORD(v9), v9, SHIDWORD(v8), v8, 1, 0, 1.0);
  v6 = (void **)MEMORY[0x1E0D078F8];
  if (!*(_BYTE *)(v3 + 561))
    v6 = (void **)MEMORY[0x1E0D078F0];
  result = doFocusNow(a1, 0, *v6, 0);
  *(_BYTE *)(v3 + 7587) = 0;
  *(float32x4_t *)(v3 + 540) = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)(v3 + 7620)), (float32x4_t)vdupq_n_s32(0x3A83126Fu));
  *(_BYTE *)(v3 + 7664) = 0;
  *v5 = 1;
  *(_QWORD *)(v3 + 6232) = 1;
  *(_QWORD *)(v3 + 6248) = 0;
  *(_DWORD *)(v3 + 7608) = 0;
  return result;
}

void setupFocusWindows(float a1, float a2, float a3, float a4, uint64_t a5, int a6)
{
  uint64_t DerivedStorage;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  CFIndex v16;
  unint64_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  BOOL v20;
  double v21;
  int v22;
  float v23;
  int v24;
  int v25;
  float v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  CFIndex v35;
  CFNumberRef v36;
  _DWORD *v37;
  CFDictionaryRef v38;
  int v39;
  CFArrayRef v40;
  int v41;
  const void *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  void *v52;
  int v53;
  int v54;
  __int16 v55;
  __int16 valuePtr;
  __int16 v57;
  __int16 v58;
  void *values[2];
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  void *keys[2];
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  void *v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0uLL;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  *(_OWORD *)v67 = 0u;
  v68 = 0u;
  v54 = 0;
  if (*(_BYTE *)(DerivedStorage + 9053))
    return;
  v13 = DerivedStorage;
  v14 = 0;
  v15 = *(_DWORD *)(DerivedStorage + 9040);
  *(_OWORD *)(DerivedStorage + 468) = 0uLL;
  *(_OWORD *)(DerivedStorage + 484) = 0uLL;
  *(_OWORD *)(DerivedStorage + 436) = 0uLL;
  *(_OWORD *)(DerivedStorage + 452) = 0uLL;
  if (a6)
    v16 = 2;
  else
    v16 = 1;
  *(_DWORD *)(DerivedStorage + 176) = v16;
  v17 = (v16 - 1);
  v52 = (void *)*MEMORY[0x1E0D05B88];
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v51 = 1000 - (__int16)v15;
  v50 = (void *)*MEMORY[0x1E0D05BB8];
  v49 = *MEMORY[0x1E0D05BC8];
  v48 = *MEMORY[0x1E0D05B90];
  v19 = *MEMORY[0x1E0D05BC0];
  v47 = *MEMORY[0x1E0D05AE0];
  v46 = *MEMORY[0x1E0D05B80];
  v45 = *MEMORY[0x1E0C9AE50];
  do
  {
    v66 = 0;
    v64 = v12;
    v65 = v12;
    *(_OWORD *)keys = v12;
    v62 = 0;
    v60 = v12;
    v61 = v12;
    *(_OWORD *)values = v12;
    if (v14)
      v20 = v14 >= v17;
    else
      v20 = 0;
    v21 = (double)(5 * (int)v14);
    if (v20)
      v21 = a4 * 1400.0;
    v22 = (int)v21;
    v23 = (float)(int)v21;
    v24 = (int)(float)(v23 + (float)(a4 * 1000.0));
    v57 = v24;
    v25 = (int)(float)(v23 + (float)(a3 * 1000.0));
    v26 = (float)(v22 >> 1);
    v27 = (int)(float)-(float)(v26 - (float)(a1 * 1000.0));
    v58 = v25;
    valuePtr = v27;
    v28 = (int)(float)-(float)(v26 - (float)(a2 * 1000.0));
    v55 = v28;
    if (v27 < 0)
    {
      LOWORD(v25) = v27 + v25;
      v58 = v25;
      valuePtr = 0;
      LOWORD(v27) = 0;
      if ((v28 & 0x80000000) == 0)
        goto LABEL_14;
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    LOWORD(v24) = v28 + v24;
    v57 = v24;
    v55 = 0;
    LOWORD(v28) = 0;
LABEL_14:
    if ((__int16)v25 + (unsigned __int16)v27 >= 1001)
    {
      LOWORD(v25) = 1000 - v27;
      v58 = 1000 - v27;
    }
    if ((__int16)v24 + (unsigned __int16)v28 >= 1001)
    {
      LOWORD(v24) = 1000 - v28;
      v57 = 1000 - v28;
    }
    if (v15 > (__int16)v25)
    {
      v58 = v15;
      v29 = (__int16)(v27 - ((__int16)(v15 - v25 + ((unsigned __int16)((v15 - v25) & 0x8000) >> 15)) >> 1));
      v30 = v29 & ~(v29 >> 31);
      if (v51 < v30)
        LOWORD(v30) = 1000 - v15;
      valuePtr = v30;
    }
    if (v15 > (__int16)v24)
    {
      v57 = v15;
      v31 = (__int16)(v28 - ((__int16)(v15 - v24 + ((unsigned __int16)((v15 - v24) & 0x8000) >> 15)) >> 1));
      v32 = v31 & ~(v31 >> 31);
      if (v51 < v32)
        LOWORD(v32) = 1000 - v15;
      v55 = v32;
    }
    keys[0] = v52;
    values[0] = CFNumberCreate(v18, kCFNumberSInt16Type, &valuePtr);
    keys[1] = v50;
    values[1] = CFNumberCreate(v18, kCFNumberSInt16Type, &v55);
    *(_QWORD *)&v64 = v49;
    *(_QWORD *)&v60 = CFNumberCreate(v18, kCFNumberSInt16Type, &v58);
    *((_QWORD *)&v64 + 1) = v48;
    *((_QWORD *)&v60 + 1) = CFNumberCreate(v18, kCFNumberSInt16Type, &v57);
    v33 = (int)(float)((float)(a4 * 100000.0) / (float)v57);
    v34 = v33 >> 2;
    if (a6)
      v34 = 3;
    if (v14 == v17)
      v33 = v34;
    v54 = v33;
    *(_QWORD *)&v65 = v19;
    *(_QWORD *)&v61 = CFNumberCreate(v18, kCFNumberIntType, &v54);
    v35 = 5;
    if (!v14 && a6)
    {
      v53 = 4096;
      *((_QWORD *)&v65 + 1) = v47;
      v36 = CFNumberCreate(v18, kCFNumberSInt16Type, &v53);
      v66 = v46;
      *((_QWORD *)&v61 + 1) = v36;
      v62 = v45;
      v35 = 7;
    }
    v37 = (_DWORD *)(v13 + 4 * v14);
    v37[45] = valuePtr;
    v37[61] = v55;
    v37[77] = v58;
    v37[93] = v57;
    v37[109] = v54;
    v38 = CFDictionaryCreate(v18, (const void **)keys, (const void **)values, v35, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = 0;
    v67[v14] = v38;
    v54 = 0;
    do
    {
      CFRelease(values[v39]);
      v39 = v54 + 1;
      v54 = v39;
    }
    while (v39 < (int)v35);
    ++v14;
    v12 = 0uLL;
  }
  while (v14 != v16);
  v40 = CFArrayCreate(v18, (const void **)v67, v16, MEMORY[0x1E0C9B378]);
  v41 = 0;
  v54 = 0;
  do
  {
    CFRelease(v67[v41]);
    v41 = v54 + 1;
    v54 = v41;
  }
  while (v41 < (int)v16);
  v42 = *(const void **)(v13 + 9032);
  if (v42)
    CFRelease(v42);
  *(_QWORD *)(v13 + 9032) = v40;
  v43 = (unsigned int *)(v13 + 7604);
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
}

uint64_t doManualFocusNow(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFDictionaryRef v5;
  uint64_t v6;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  keys[0] = CFSTR("FocusMode");
  keys[1] = CFSTR("LensPosition");
  values[0] = CFSTR("FixedFocusPoints");
  values[1] = CFSTR("LensPositionInfinity");
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = af_sbp_setPropertyOnStandaloneOrSynchronizedStreams(a1, *MEMORY[0x1E0D07668], a2);
  *(_BYTE *)(DerivedStorage + 80) = 0;
  if (v5)
    CFRelease(v5);
  return v6;
}

void doPeakTrackingAutofocusNow(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const __CFAllocator *v5;
  __CFDictionary *Mutable;
  CFNumberRef v7;
  int valuePtr;

  valuePtr = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return;
  }
  v4 = DerivedStorage;
  storePreviousFocusState(DerivedStorage);
  *(_DWORD *)(v4 + 6220) = 0;
  *(_DWORD *)(v4 + 5496) = 0;
  *(_WORD *)(v4 + 80) = 256;
  *(_BYTE *)(v4 + 8289) = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0D07250], v7);
  CFRelease(v7);
  sendFocusStartNotification(a1, 0);
  if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07700], Mutable))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (!Mutable)
      return;
  }
  else if (!Mutable)
  {
    return;
  }
  CFRelease(Mutable);
}

uint64_t doAutofocusNow(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 81))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  else
  {
    v3 = DerivedStorage;
    storePreviousFocusState(DerivedStorage);
    *(_DWORD *)(v3 + 6220) = 0;
    *(_DWORD *)(v3 + 5496) = 0;
    *(_WORD *)(v3 + 80) = 256;
    *(_BYTE *)(v3 + 8289) = 0;
    sendFocusStartNotification(a1, 0);
    v4 = captureStreamSetPropertyOnActivityScheduler(a1, CFSTR("AutoFocusNow"), (const void *)*MEMORY[0x1E0C9AE50]);
    result = 0;
    if ((_DWORD)v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return v4;
    }
  }
  return result;
}

uint64_t sisn_createSampleBufferProcessorFunction()
{
  uint64_t v0;

  v0 = FigSampleBufferProcessorCreateForCustom();
  if ((_DWORD)v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

uint64_t BWTrackEditListArrayForRegularTrackInIrisTrimmedMovie(void *a1)
{
  CMTime v3[2];
  __int128 v4;
  uint64_t v5;
  CMTime v6;
  CMTime v7;
  CMTime v8;
  CMTime rhs;
  CMTime lhs;
  CMTime v11;
  CMTime v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  memset(&v11, 0, sizeof(v11));
  if (a1)
  {
    objc_msgSend(a1, "movieTrimStartTime");
    objc_msgSend(a1, "movieStartTime");
    CMTimeSubtract(v3, &lhs, &rhs);
    v12 = v3[0];
    objc_msgSend(a1, "movieTrimEndTime");
    objc_msgSend(a1, "movieTrimStartTime");
  }
  else
  {
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
    CMTimeSubtract(v3, &lhs, &rhs);
    v12 = v3[0];
    memset(&v8, 0, sizeof(v8));
    memset(&v7, 0, sizeof(v7));
  }
  CMTimeSubtract(&v11, &v8, &v7);
  v3[0] = v12;
  v3[1] = v11;
  v4 = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v6 = v11;
  v13[0] = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)v3);
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
}

uint64_t mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping(uint64_t a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CFDictionaryRef v4;
  CFDictionaryRef v5;
  CFDictionaryRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CMTime v11;
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = *(CMTime *)a1;
  v3 = CMTimeCopyAsDictionary(&v11, v2);
  v11 = *(CMTime *)(a1 + 24);
  v4 = CMTimeCopyAsDictionary(&v11, v2);
  v11 = *(CMTime *)(a1 + 48);
  v5 = CMTimeCopyAsDictionary(&v11, v2);
  v11 = *(CMTime *)(a1 + 72);
  v6 = CMTimeCopyAsDictionary(&v11, v2);
  v7 = *MEMORY[0x1E0CC44F8];
  v12[0] = *MEMORY[0x1E0CC4508];
  v12[1] = v7;
  v13[0] = v3;
  v13[1] = v4;
  v8 = *MEMORY[0x1E0CC4518];
  v12[2] = *MEMORY[0x1E0CC4528];
  v12[3] = v8;
  v13[2] = v5;
  v13[3] = v6;
  v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 4);

  return v9;
}

uint64_t BWTrackEditListArrayForStillImageDisplayTimeTrackInIrisTrimmedMovie(void *a1, int32_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  _BYTE v9[32];
  CMTime v10;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  _QWORD v19[2];
  __int128 v20;
  _BYTE v21[32];
  CMTime v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_OWORD *)&v21[8] = v20;
  *(_QWORD *)v21 = v4;
  *(_QWORD *)&v21[24] = v4;
  CMTimeMake(&v22, 0, a2);
  if (a1)
  {
    objc_msgSend(a1, "stillImageCaptureTime");
    objc_msgSend(a1, "movieTrimStartTime");
  }
  else
  {
    memset(&lhs, 0, sizeof(lhs));
    memset(&rhs, 0, sizeof(rhs));
  }
  CMTimeSubtract(&v18, &lhs, &rhs);
  CMTimeMake(&v17, 0, a2);
  CMTimeMake(&v16, 1, a2);
  v15 = v18;
  v14 = v16;
  v10 = v22;
  *(_OWORD *)&v9[16] = *(_OWORD *)&v21[16];
  v8 = v20;
  *(_OWORD *)v9 = *(_OWORD *)v21;
  v11 = v18;
  v5 = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v8);
  v8 = *(_OWORD *)&v17.value;
  *(_QWORD *)v9 = v17.epoch;
  *(CMTime *)&v9[8] = v16;
  v10 = v15;
  v11 = v14;
  v6 = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v8);
  v19[0] = v5;
  v19[1] = v6;
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 2);
}

uint64_t BWTrackEditListArrayForRegularTrackInIrisMovie(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *MEMORY[0x1E0CA2E18];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v10 = v6;
  v9 = v5;
  v11[0] = mfeu_figFormatWriterTrackEditSegmentDictionaryForTimeMapping((uint64_t)&v3);
  return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
}

uint64_t FigCaptureIsDebuggerOrSlowAllocationPathEnabled()
{
  return 0;
}

uint64_t FigCaptureVideoStabilizationStrengthStringToEnum(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("None")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Low")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("Medium")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("High")) & 1) != 0)
    return 3;
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("Ultra")))
    return 4;
  return 0;
}

void *fcc_probeCameraDriverAndLoadCaptureService()
{
  unint64_t v0;
  mach_port_t v1;
  const char **v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  void *v8;
  void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = 0;
  v1 = *MEMORY[0x1E0CBBAA8];
  v2 = (const char **)off_1E49231E8;
  do
  {
    v3 = *(v2 - 2);
    v4 = *(v2 - 1);
    v5 = *v2;
    if (v3)
    {
      v6 = IOServiceMatching(v3);
      MatchingService = IOServiceGetMatchingService(v1, v6);
      if (!MatchingService)
      {
        v8 = 0;
        goto LABEL_11;
      }
    }
    else
    {
      MatchingService = 0;
    }
    v9 = dlopen(v4, 4);
    if (!v9 || (v8 = dlsym(v9, v5)) == 0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = 0;
    }
    if (MatchingService)
      IOObjectRelease(MatchingService);
LABEL_11:
    if (v8)
      break;
    v2 += 3;
  }
  while (v0++ < 4);
  return v8;
}

void FigCaptureTCCAccessRequest()
{
  void *v0;

  tcc_service_singleton_for_CF_name();
  tcc_credential_singleton_for_self();
  v0 = (void *)tcc_message_options_create();
  tcc_message_options_set_request_prompt_policy();
  tcc_server_message_request_authorization();

}

uint64_t FigCaptureSourceFormatHighResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("HighResFlavor:%d"), a1);
}

uint64_t FigCaptureStillImageQSubResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("QSubFlavor:%d"), a1);
}

uint64_t FigCaptureSourceSensorRawHighResolutionFlavorFromDimensions(uint64_t a1)
{
  _BOOL4 v2;

  v2 = (int)a1 > 4224 && SHIDWORD(a1) > 3176;
  if (SHIDWORD(a1) <= 6000 || (int)a1 <= 8000)
    return v2;
  else
    return 2;
}

uint64_t FigCaptureSourceSensorRawHighResolutionFlavorToShortString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SensorRawFlavor:%d"), a1);
}

uint64_t FigCaptureGetExperimentsEnabled()
{
  return 0;
}

uint64_t __fcc_frontCameraOrientation_block_invoke()
{
  uint64_t result;

  result = MGGetSInt32Answer();
  if ((_DWORD)result == 180)
    fcc_frontCameraOrientation_sFrontCameraOrientation = 1;
  return result;
}

void sub_1A2FBB1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ubn_mergeInferenceMetadata(const void *a1, const void *a2, const void *a3)
{
  CFTypeRef v5;
  const void *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  void *v10;

  v5 = CMGetAttachment(a1, CFSTR("Inferences"), 0);
  v6 = (const void *)MEMORY[0x1E0C9AA70];
  if (v5)
    v7 = v5;
  else
    v7 = (CFTypeRef)MEMORY[0x1E0C9AA70];
  v8 = CMGetAttachment(a2, CFSTR("Inferences"), 0);
  if (v8)
    v9 = v8;
  else
    v9 = v6;
  v10 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v9);
  objc_msgSend(v10, "addEntriesFromDictionary:", v7);
  CMSetAttachment(a3, CFSTR("Inferences"), v10, 1u);
}

uint64_t ubn_mergeInferenceAttachedMedia(uint64_t a1, void *a2, const void *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  opaqueCMSampleBuffer *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(a2);
        v10 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v9);
        v11 = +[BWInferenceEngineController inferenceMaskSbufFromSbuf:attachedMediaKey:](BWInferenceEngineController, "inferenceMaskSbufFromSbuf:attachedMediaKey:", a1, v10);
        if (v11)
          BWSampleBufferSetAttachedMedia(a3, v10, (uint64_t)v11);
        ++v9;
      }
      while (v7 != v9);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_1A2FC25BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FC28F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FC4B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FC70B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FC74D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

uint64_t ubn_insertOutputRouterForInputAfterPreviousInputForBufferType(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v8 = objc_msgSend((id)objc_msgSend(a3, "outputSampleBufferRouterForBufferType:", a4), "outputSampleBufferRouter");
  if (!v8)
    return 0;
  v9 = v8;
  v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
  v10 = 1;
  objc_msgSend(a2, "addOutputSampleBufferRouter:forBufferTypes:", v9, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1));
  v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
  objc_msgSend(a3, "addOutputSampleBufferRouter:forBufferTypes:", a1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v12, 1));
  return v10;
}

void sub_1A2FCA6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ubn_dispatch_async_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __ubn_dispatch_group_async_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

uint64_t pgs_iir_TestCorrectionFitsForSmoothParameter(uint64_t a1, double *a2, uint64_t *a3, double *a4, uint64_t a5, float32x2_t *a6, float32x2_t *a7, BOOL *a8, float a9)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  double v27[4];
  double v28[4];
  _BYTE v29[36];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v24 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigMotionInterpolateQuaternionsByAngle((uint64_t)a3, a4, a9);
  v28[0] = v16;
  v28[1] = v17;
  v28[2] = v18;
  v28[3] = v19;
  v27[0] = FigMotionMultiplyByInverseOfQuaternion(v28, a3);
  v27[1] = v20;
  v27[2] = v21;
  v27[3] = v22;
  v23 = pgs_computeTransformFromCameraMotion(v27, a2, a6, a7, (uint64_t)v29, *(float *)(a5 + 4));
  if ((_DWORD)v23)
  {
    v24 = v23;
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 44) = 1065353216;
  v24 = pgs_limitTransformToOverscan(a1, (int *)(a5 + 88), (uint64_t)v29);
  if ((_DWORD)v24)
  {
LABEL_8:
    v25 = 0;
    goto LABEL_5;
  }
  v25 = *(float *)(a1 + 44) >= 1.0;
LABEL_5:
  *a8 = v25;
  return v24;
}

uint64_t cimn_registerLivePhotosMetadata_once()
{
  _QWORD v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = *MEMORY[0x1E0CA2440];
  CMMetadataDataTypeRegistryRegisterDataType(CFSTR("com.apple.quicktime.com.apple.quicktime.live-photo-info"), CFSTR("Live Photos Private Metadata"), (CFArrayRef)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 1));
  return FigLivePhotoMetadataCreateSoftwareVersionSetupDataWithAtomHeader((__CFData **)&sLivePhotoMetadataSoftwareVersionSetupDataWithAtomHeader);
}

id cimn_createCorrectedDetectedObjects(void *a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v11;
  void *v12;
  void *v14;
  void *v15;

  if (!a1)
  {
    v15 = 0;
    *a2 = 0;
    return v15;
  }
  v11 = *MEMORY[0x1E0D064D0];
  v12 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D064D0]);
  *a2 = objc_msgSend(v12, "count");
  if (!objc_msgSend(v12, "count"))
    return 0;
  if (a5 != 1.0 || a6 != 1.0)
  {
    v14 = BWCreateCorrectedDetectedObjectsArray(v12, a3, a4, a5, a6, a3, a4, a5, a6);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", a1);
    *a2 = objc_msgSend(v14, "count");
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v14, v11);

    return v15;
  }
  return a1;
}

uint64_t FigCaptureISPProcessingSessionGetClassID()
{
  if (FigCaptureISPProcessingSessionGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureISPProcessingSessionGetClassID_onceToken, &__block_literal_global_66);
  return FigCaptureISPProcessingSessionGetClassID_sFigCaptureISPProcessingSessionClassID;
}

uint64_t FigCaptureISPProcessingSessionGetTypeID()
{
  if (FigCaptureISPProcessingSessionGetClassID_onceToken != -1)
    dispatch_once(&FigCaptureISPProcessingSessionGetClassID_onceToken, &__block_literal_global_66);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptureISPProcessingSessionCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureISPProcessingSession %p]"), a1);
}

void sub_1A2FD0CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD1E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD30BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fcdv_handleStreamControlTakenByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  -[BWFigCaptureDeviceVendor _handleStreamControlTakenByAnotherClientNotification:](a2, a4);
}

void fcdv_handleStreamControlRelinquishedByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  -[BWFigCaptureDeviceVendor _handleStreamRelinquishedByAnotherClientNotification:](a2, a4);
}

void fcdv_handleStreamFrameReceiveTimeoutNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  -[BWFigCaptureDeviceVendor _handleStreamFrameReceiveTimeoutNotification:](a2, a4);
}

void fcdv_handleDeviceUnrecoverableError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  -[BWFigCaptureDeviceVendor _handleDeviceUnrecoverableError:fromDevice:](a2, objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("ErrorStatus")), "intValue"), a4);
}

void fcdv_handleDeviceNoLongerAvailable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  -[BWFigCaptureDeviceVendor _handleDeviceNoLongerAvailable:](a2, a4);
}

void sub_1A2FD4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD4F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD5088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD5400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD54F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL mv2ip_pixelBufferContainsValidContent(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  OSType PixelFormatType;
  int HasAttachment;
  uint64_t v7;
  __int16 *BaseAddress;
  __int16 *v9;
  uint64_t i;
  size_t v17;
  __int16 *v18;
  __int16 v19;

  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  HasAttachment = CVBufferHasAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50]);
  v7 = 1;
  if (PixelFormatType == 1278226536 && !HasAttachment)
  {
    v7 = 1;
    if (!CVPixelBufferLockBaseAddress(a1, 1uLL))
    {
      BaseAddress = (__int16 *)CVPixelBufferGetBaseAddress(a1);
      if (BaseAddress)
      {
        v9 = BaseAddress;
        if (mv2ip_getFP16MinMaxFromBuffer_onceToken != -1)
          dispatch_once(&mv2ip_getFP16MinMaxFromBuffer_onceToken, &__block_literal_global_230);
        _H0 = *v9;
        __asm { FCVT            S0, H0 }
        if (Height)
        {
          for (i = 0; i != Height; ++i)
          {
            if (Width)
            {
              v17 = Width;
              v18 = v9;
              do
              {
                v19 = *v18++;
                _H1 = v19;
                __asm { FCVT            S1, H1 }
                if (_S0 < _S1)
                  _S0 = _S1;
                --v17;
              }
              while (v17);
              v9 += Width;
            }
            v9 += (BytesPerRow >> 1) - Width;
          }
        }
        return _S0 > 0.49804;
      }
      else
      {
        return 1;
      }
    }
  }
  return v7;
}

__CFString *FigCaptureDisplayTypeName(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E49238D0[a1];
}

id fcdlm_createLayoutMonitorForMainDisplay(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0D230E0], "configurationForDefaultMainDisplayMonitor");
  objc_msgSend(v2, "setNeedsUserInteractivePriority:", 1);
  objc_msgSend(v2, "setTransitionHandler:", a1);
  return (id)objc_msgSend(MEMORY[0x1E0D230D0], "monitorWithConfiguration:", v2);
}

id fcdlm_createLayoutMonitorForExternalDisplay(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  id v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0D23100]);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = (void *)objc_msgSend(v2, "connectedIdentities");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v18 != v6)
        objc_enumerationMutation(v3);
      if ((objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v7), "isExternal") & 1) != 0)
        break;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_13;
      }
    }
    v8 = SBSCreateLayoutServiceEndpointForExternalDisplay();
    if (!v8)
      goto LABEL_13;
    v9 = v8;
    if (dword_1ECFE9550)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v13 = (void *)objc_msgSend(MEMORY[0x1E0D230E0], "configurationWithEndpoint:", v9, v15, v16);
    objc_msgSend(v13, "setNeedsUserInteractivePriority:", 1);
    objc_msgSend(v13, "setTransitionHandler:", a1);
    v12 = (id)objc_msgSend(MEMORY[0x1E0D230D0], "monitorWithConfiguration:", v13);
  }
  else
  {
LABEL_13:
    if (dword_1ECFE9550)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v12 = 0;
  }
  objc_msgSend(v2, "invalidate", v15, v16);

  return v12;
}

id fcdlm_createLayoutMonitorForContinuityDisplay(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0D230E0], "configurationForContinuityDisplay");
  objc_msgSend(v2, "setNeedsUserInteractivePriority:", 1);
  objc_msgSend(v2, "setTransitionHandler:", a1);
  return (id)objc_msgSend(MEMORY[0x1E0D230D0], "monitorWithConfiguration:", v2);
}

void sub_1A2FD91C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1A2FD98C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float *ColorsWheelContext_create(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, float a9)
{
  float *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  float *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int16 *v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  char v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int *v74;
  int v75;
  int v76;
  int v77;
  __int16 *v78;
  int v79;
  int v80;
  __int16 *v81;
  int v82;
  __int16 *v83;
  char v84;
  __int16 v85;
  char v86;
  BOOL v87;
  __int16 *v88;
  __int16 *v89;
  int v90;
  char v91;
  __int16 v92;
  char v93;
  int v94;
  __int16 *v95;
  int v96;
  char v97;
  __int16 v98;
  char v99;
  int v101;
  int v102;
  int v103;
  int v104;
  _DWORD v106[6];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v17 = (float *)malloc_type_malloc(0x18uLL, 0x10200405AF6BDC9uLL);
  if (a2 < 0)
    ColorsWheelContext_create_cold_1();
  if (a3 < 0)
    ColorsWheelContext_create_cold_2();
  if (a4 < 0)
    ColorsWheelContext_create_cold_3();
  if (a5 < 0)
    ColorsWheelContext_create_cold_4();
  if (a6 < 0)
    ColorsWheelContext_create_cold_5();
  if (a7 < 0)
    ColorsWheelContext_create_cold_6();
  v18 = a2 * a1;
  v19 = (a2 * a1 / 100);
  v20 = a3 * a1;
  v21 = a3 * a1 / 100;
  v106[0] = v19;
  v106[1] = v21;
  v22 = a4 * a1;
  v23 = a4 * a1 / 100;
  v24 = a5 * a1;
  v25 = a5 * a1 / 100;
  v106[2] = v23;
  v106[3] = v25;
  v26 = a6 * a1;
  v27 = a6 * a1 / 100;
  v28 = a7 * a1;
  v29 = a7 * a1 / 100;
  v106[4] = v27;
  v106[5] = v29;
  v30 = v21 + v19 + v23 + v25;
  if ((v30 + v27 + v29 < 0) ^ __OFADD__(v30, v27 + v29) | (v30 + v27 + v29 == 0))
    ColorsWheelContext_create_cold_7();
  v31 = v17;
  v103 = v24;
  v104 = v22;
  v101 = v28;
  v102 = v26;
  *((_DWORD *)v17 + 2) = v30 + v27 + v29;
  v32 = (v30 + v27 + v29);
  v33 = malloc_type_malloc(3 * v32, 0x100004033FC2DF1uLL);
  *(_QWORD *)v31 = v33;
  *((_DWORD *)v31 + 3) = a8;
  if (v18 < 100)
  {
    v40 = 0;
    v38 = v32;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = 1;
    v38 = v32;
    do
    {
      if (v36 >= *((int *)v31 + 2))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v32, v34);
      ++v36;
      v39 = (_BYTE *)(*(_QWORD *)v31 + v37);
      *(v39 - 1) = 0;
      *v39 = v35 / (int)v19;
      v39[1] = -1;
      v37 += 3;
      v35 += 255;
    }
    while (v19 != v36);
    v40 = v18 / 100;
  }
  if (v20 >= 100)
  {
    v41 = 0;
    v42 = 0;
    v43 = v40;
    v44 = 3 * v40;
    do
    {
      if (v43 + v42 >= *((int *)v31 + 2))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v38, v34);
      v45 = *(_QWORD *)v31 + v44;
      *(_WORD *)v45 = -256;
      *(_BYTE *)(v45 + 2) = ~(v41 / v21);
      v44 += 3;
      ++v42;
      v41 += 255;
    }
    while (v21 != (_DWORD)v42);
    v40 = v43 + v42;
  }
  if (v104 >= 100)
  {
    v46 = 0;
    v47 = 0;
    v48 = 3 * v40;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v40 + v47))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v38, v34);
      v49 = *(_QWORD *)v31 + v48;
      *(_BYTE *)v49 = v46 / v23;
      *(_WORD *)(v49 + 1) = 255;
      ++v47;
      v48 += 3;
      v46 += 255;
    }
    while (v23 != v47);
    v40 += v47;
  }
  if (v103 >= 100)
  {
    v50 = 0;
    v51 = 0;
    v52 = 3 * v40;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v40 + v51))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v38, v34);
      v53 = *(_QWORD *)v31 + v52;
      *(_BYTE *)v53 = -1;
      *(_WORD *)(v53 + 1) = ~(v50 / v25);
      ++v51;
      v52 += 3;
      v50 += 255;
    }
    while (v25 != v51);
    v40 += v51;
  }
  if (v102 >= 100)
  {
    v54 = 0;
    v55 = 0;
    v56 = 3 * v40;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v40 + v55))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v38, v34);
      v57 = *(_QWORD *)v31 + v56;
      *(_WORD *)v57 = 255;
      *(_BYTE *)(v57 + 2) = v54 / v27;
      ++v55;
      v56 += 3;
      v54 += 255;
    }
    while (v27 != v55);
    v40 += v55;
  }
  if (v101 >= 100)
  {
    v58 = 0;
    v59 = 0;
    v60 = 3 * v40;
    do
    {
      if (*((_DWORD *)v31 + 2) <= (signed int)(v40 + v59))
        ColorsWheelContext_create_cold_8((uint64_t)v33, v38, v34);
      v61 = *(_QWORD *)v31 + v60;
      *(_BYTE *)v61 = ~(v58 / v29);
      *(_WORD *)(v61 + 1) = -256;
      ++v59;
      v60 += 3;
      v58 += 255;
    }
    while (v29 != v59);
  }
  if (a8 < 0 && (int)v38 > 1)
  {
    v62 = 0;
    v63 = v38 >> 1;
    v64 = v19 + v21 + v23 + v25 + v27 + v29 - 1;
    do
    {
      v65 = (__int16 *)(*(_QWORD *)v31 + v62);
      v66 = *(_QWORD *)v31 + 3 * v64;
      v67 = *((_BYTE *)v65 + 2);
      v68 = *v65;
      v69 = *(_BYTE *)(v66 + 2);
      *v65 = *(_WORD *)v66;
      *((_BYTE *)v65 + 2) = v69;
      *(_WORD *)v66 = v68;
      *(_BYTE *)(v66 + 2) = v67;
      --v64;
      v62 += 3;
      --v63;
    }
    while (v63);
  }
  if (a8 >= 0)
    v70 = a8;
  else
    v70 = -a8;
  v71 = v70 - 1;
  LODWORD(v72) = 6 - v70;
  if (a8 >= 0)
    v72 = v71;
  else
    v72 = v72;
  if ((int)v72 >= 1)
  {
    v73 = 0;
    v74 = v106;
    do
    {
      v75 = v73;
      v77 = *v74++;
      v76 = v77;
      v73 += v77;
      --v72;
    }
    while (v72);
    if (v73 > 0)
    {
      v78 = *(__int16 **)v31;
      v79 = v38 - 1;
      if (v73 != 1)
      {
        v80 = 0;
        v81 = (__int16 *)((char *)v78 + 3 * (v73 - 1));
        v82 = v75 + v76 - 2;
        v83 = *(__int16 **)v31;
        do
        {
          v84 = *((_BYTE *)v83 + 2);
          v85 = *v83;
          v86 = *((_BYTE *)v81 + 2);
          *v83 = *v81;
          *((_BYTE *)v83 + 2) = v86;
          *v81 = v85;
          *((_BYTE *)v81 + 2) = v84;
          v83 = (__int16 *)((char *)v83 + 3);
          v81 = (__int16 *)((char *)v81 - 3);
          v87 = ++v80 < v82--;
        }
        while (v87);
      }
      if (v73 < v79)
      {
        v88 = (__int16 *)((char *)v78 + 3 * v79);
        v89 = (__int16 *)((char *)v78 + 3 * v73);
        v90 = v19 + v21 + v23 + v25 + v27 + v29 - 2;
        do
        {
          v91 = *((_BYTE *)v89 + 2);
          v92 = *v89;
          v93 = *((_BYTE *)v88 + 2);
          *v89 = *v88;
          *((_BYTE *)v89 + 2) = v93;
          *v88 = v92;
          *((_BYTE *)v88 + 2) = v91;
          v89 = (__int16 *)((char *)v89 + 3);
          v88 = (__int16 *)((char *)v88 - 3);
          v87 = ++v73 < v90--;
        }
        while (v87);
      }
      if ((int)v38 >= 2)
      {
        v94 = 0;
        v95 = (__int16 *)((char *)v78 + 3 * (v38 - 1));
        v96 = v19 + v21 + v23 + v25 + v27 + v29 - 2;
        do
        {
          v97 = *((_BYTE *)v78 + 2);
          v98 = *v78;
          v99 = *((_BYTE *)v95 + 2);
          *v78 = *v95;
          *((_BYTE *)v78 + 2) = v99;
          *v95 = v98;
          *((_BYTE *)v95 + 2) = v97;
          v78 = (__int16 *)((char *)v78 + 3);
          v95 = (__int16 *)((char *)v95 - 3);
          v87 = ++v94 < v96--;
        }
        while (v87);
      }
    }
  }
  v31[4] = a9;
  return v31;
}

void ColorsWheelContext_destroy(void ***a1)
{
  if (a1)
  {
    free(**a1);
    free(*a1);
    *a1 = 0;
  }
}

uint64_t ColorsWheelContext_computeColorComponent(uint64_t a1, int a2, float a3, double a4, double a5, float a6)
{
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  int v13;
  unsigned int v14;
  float v15;

  if (a3 < 0.0 || a3 > 1.0)
    ColorsWheelContext_computeColorComponent_cold_1();
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(float *)(a1 + 16);
  if (v8 != 0.0)
  {
    v9 = v8 / 6.28318531;
    a3 = v9 + a3;
    v10 = 1.0;
    if (a3 < 0.0)
    {
LABEL_9:
      a3 = a3 + v10;
      goto LABEL_10;
    }
    if (a3 > 1.0)
    {
      v10 = -1.0;
      goto LABEL_9;
    }
  }
LABEL_10:
  v11 = a3 * (float)(v7 - 1);
  v12 = (int)v11;
  v13 = ((int)v11 + 1) % v7;
  *(float *)&v14 = (float)(int)v11;
  v15 = v11 - *(float *)&v14;
  LOBYTE(v14) = *(_BYTE *)(*(_QWORD *)a1 + 3 * v12 + a2);
  LOBYTE(a6) = *(_BYTE *)(*(_QWORD *)a1 + 3 * v13 + a2);
  return (int)(float)((float)((float)(v15 * (float)((float)LODWORD(a6) / 255.0))
                                          + (float)((float)(1.0 - v15) * (float)((float)v14 / 255.0)))
                                  * 255.0);
}

uint64_t ColorsWheelContext_drawMatrix_f32(uint64_t result, int a2, int a3, float *a4, int a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, float a12, int a13)
{
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  float v24;
  _BYTE *v25;
  float *v26;
  _BYTE *v27;
  float v28;
  double v29;
  double v30;
  float v31;
  double v32;
  double v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a3 >= 1)
  {
    v13 = a4;
    v14 = result;
    v15 = 0;
    v16 = a6;
    v17 = 1.1755e-38;
    v18 = 3.4028e38;
    v19 = a4;
    v20 = a2;
    do
    {
      v21 = a2;
      v22 = v19;
      if (a2 >= 1)
      {
        do
        {
          *(float *)&a10 = *v22;
          if (*v22 < v18)
            v18 = *v22;
          if (*(float *)&a10 > v17)
            v17 = *v22;
          v22 = (float *)((char *)v22 + a6);
          --v21;
        }
        while (v21);
      }
      ++v15;
      v19 = (float *)((char *)v19 + a5);
    }
    while (v15 != a3);
    v23 = 0;
    v24 = v17 - v18;
    v35 = a8;
    v25 = (_BYTE *)(a7 + 1);
    v36 = a3;
    v37 = a5;
    do
    {
      v26 = v13;
      v27 = v25;
      if (a2 >= 1)
      {
        do
        {
          v28 = fmaxf(fminf((float)(*v26 - v18) / v24, 1.0), 0.0);
          *(v27 - 1) = ColorsWheelContext_computeColorComponent(v14, 0, v28, a10, a11, a12);
          *v27 = ColorsWheelContext_computeColorComponent(v14, 1, v28, v29, v30, v31);
          result = ColorsWheelContext_computeColorComponent(v14, 2, v28, v32, v33, v34);
          v27[1] = result;
          v27[2] = -1;
          v27 += a13;
          v26 = (float *)((char *)v26 + v16);
          --v20;
        }
        while (v20);
      }
      ++v23;
      v20 = a2;
      v25 += v35;
      v13 = (float *)((char *)v13 + v37);
    }
    while (v23 != v36);
  }
  return result;
}

void OUTLINED_FUNCTION_0_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 75, a4);
}

void *FigCaptureCinematicFramingUpdateSampleBufferMetadata(void *a1, CMAttachmentBearerRef target, int a3)
{
  CMAttachmentBearerRef v3;
  void *result;
  void *v6;
  uint64_t v7;
  const void *v8;
  CFAllocatorRef *v9;
  void *DeepCopy;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  const __CFString *v30;
  void *v31;
  uint64_t v32;
  void *v34;
  CMAttachmentBearerRef v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  CGRect v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  uint64_t v58;
  CGRect v59;
  CGRect v60;

  v3 = target;
  v58 = *MEMORY[0x1E0C80C00];
  result = (void *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (result)
  {
    v6 = result;
    memset(&v54, 0, sizeof(v54));
    v7 = *MEMORY[0x1E0D069A0];
    v8 = (const void *)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E0D069A0]);
    v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    v34 = v6;
    v35 = v3;
    if (v8)
    {
      v32 = v7;
      DeepCopy = (void *)CFPropertyListCreateDeepCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, 1uLL);
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v39 = objc_msgSend(DeepCopy, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
      if (v39)
      {
        v37 = *(_QWORD *)v51;
        v11 = *MEMORY[0x1E0D064D0];
        v38 = DeepCopy;
        v36 = *MEMORY[0x1E0D064D0];
        do
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v51 != v37)
              objc_enumerationMutation(DeepCopy);
            v41 = v12;
            v13 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v12);
            v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v46 = 0u;
            v47 = 0u;
            v48 = 0u;
            v49 = 0u;
            v40 = v13;
            v15 = (void *)objc_msgSend((id)objc_msgSend(DeepCopy, "objectForKeyedSubscript:", v13), "objectForKeyedSubscript:", v11);
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
            if (v16)
            {
              v17 = v16;
              v18 = *(_QWORD *)v47;
              do
              {
                for (i = 0; i != v17; ++i)
                {
                  if (*(_QWORD *)v47 != v18)
                    objc_enumerationMutation(v15);
                  v20 = *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  FigCaptureUpdateToDisplayCoordinates(a1);
                  if (FigCFDictionaryGetCGRectIfPresent())
                  {
                    v59.origin.x = 0.0;
                    v59.origin.y = 0.0;
                    v59.size.width = 1.0;
                    v59.size.height = 1.0;
                    if (CGRectIntersectsRect(v54, v59))
                      objc_msgSend(v14, "addObject:", v20);
                  }
                }
                v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
              }
              while (v17);
            }
            DeepCopy = v38;
            v11 = v36;
            objc_msgSend((id)objc_msgSend(v38, "objectForKeyedSubscript:", v40, v32), "setObject:forKeyedSubscript:", v14, v36);
            v12 = v41 + 1;
          }
          while (v41 + 1 != v39);
          v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v50, v57, 16);
        }
        while (v39);
      }
      v6 = v34;
      objc_msgSend(v34, "setObject:forKeyedSubscript:", DeepCopy, v32, v32);

      v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    }
    v21 = *MEMORY[0x1E0D06998];
    v22 = (const void *)objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D06998]);
    if (v22)
    {
      v23 = (void *)CFPropertyListCreateDeepCopy(*v9, v22, 1uLL);
      v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v42 = 0u;
      v43 = 0u;
      v44 = 0u;
      v45 = 0u;
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
      if (v25)
      {
        v26 = v25;
        v27 = *(_QWORD *)v43;
        do
        {
          for (j = 0; j != v26; ++j)
          {
            if (*(_QWORD *)v43 != v27)
              objc_enumerationMutation(v23);
            v29 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * j);
            FigCaptureUpdateToDisplayCoordinates(a1);
            FigCaptureUpdateToDisplayCoordinates(a1);
            FigCaptureUpdateToDisplayCoordinates(a1);
            if (FigCFDictionaryGetCGRectIfPresent())
            {
              v60.origin.x = 0.0;
              v60.origin.y = 0.0;
              v60.size.width = 1.0;
              v60.size.height = 1.0;
              if (CGRectIntersectsRect(v54, v60))
                objc_msgSend(v24, "addObject:", v29);
            }
          }
          v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v42, v55, 16);
        }
        while (v26);
      }
      v6 = v34;
      objc_msgSend(v34, "setObject:forKeyedSubscript:", v24, v21);

      v3 = v35;
    }
    if (a3)
    {
      v30 = (const __CFString *)*MEMORY[0x1E0D05DD8];
      v31 = (void *)CMGetAttachment(v3, (CFStringRef)*MEMORY[0x1E0D05DD8], 0);
      if (!v31)
        v31 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      objc_msgSend(v31, "setValuesForKeysWithDictionary:", objc_msgSend(a1, "manualFramingStateMetadata"));
      CMSetAttachment(v3, v30, v31, 1u);
    }
    return (void *)objc_msgSend(v6, "removeObjectForKey:", *MEMORY[0x1E0D05E68]);
  }
  return result;
}

uint64_t FigCaptureUpdateToDisplayCoordinates(void *a1)
{
  uint64_t result;

  result = FigCFDictionaryGetCGRectIfPresent();
  if ((_DWORD)result)
  {
    objc_msgSend(a1, "warpCGRect:", 0.0, 0.0, 0.0, 0.0);
    return FigCFDictionarySetCGRect();
  }
  return result;
}

double ss_conformRectForMSR420vfPixelBuffer(__CVBuffer *a1, int a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  int v15;
  double v16;
  float v17;
  CGFloat v18;
  float v19;
  double v20;
  float v21;
  double v22;
  double MaxX;
  double MaxY;
  float v25;
  double v26;
  float v27;
  double v28;
  double v29;
  float v30;
  double v31;
  float v32;
  double MinX;
  double v34;
  double v36;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v7 = psn_pixelBufferRect(a1);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (a2)
    v15 = 2;
  else
    v15 = 1;
  v14 = v7;
  v16 = (double)(int)FigCaptureCeilFloatToMultipleOf(v15, v14);
  v17 = v9;
  v18 = (double)(int)FigCaptureCeilFloatToMultipleOf(v15, v17);
  v19 = v11;
  v20 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v19);
  v21 = v13;
  v22 = (double)(int)FigCaptureFloorFloatToMultipleOf(2, v21);
  v41.origin.x = v16;
  v36 = v18;
  v41.origin.y = v18;
  v41.size.width = v20;
  v41.size.height = v22;
  MaxX = CGRectGetMaxX(v41);
  v42.origin.x = v7;
  v42.origin.y = v9;
  v42.size.width = v11;
  v42.size.height = v13;
  if (MaxX > CGRectGetMaxX(v42))
  {
    v43.origin.x = v7;
    v43.origin.y = v9;
    v43.size.width = v11;
    v43.size.height = v13;
    v20 = CGRectGetMaxX(v43) - v16;
  }
  v44.origin.x = v16;
  v44.origin.y = v36;
  v44.size.width = v20;
  v44.size.height = v22;
  MaxY = CGRectGetMaxY(v44);
  v45.origin.x = v7;
  v45.origin.y = v9;
  v45.size.width = v11;
  v45.size.height = v13;
  if (MaxY > CGRectGetMaxY(v45))
  {
    v46.origin.x = v7;
    v46.origin.y = v9;
    v46.size.width = v11;
    v46.size.height = v13;
    v22 = CGRectGetMaxY(v46) - v36;
  }
  v25 = a5;
  v26 = (double)(int)FigCaptureRoundFloatToMultipleOf(2, v25);
  v27 = a6;
  FigCaptureRoundFloatToMultipleOf(2, v27);
  if (v20 >= v26)
    v28 = v26;
  else
    v28 = v20;
  v29 = fmax(v28, 0.0);
  v30 = a3;
  v31 = (double)(int)FigCaptureRoundFloatToMultipleOf(v15, v30);
  v32 = a4;
  FigCaptureRoundFloatToMultipleOf(v15, v32);
  v47.origin.x = v16;
  v47.origin.y = v36;
  v47.size.width = v20;
  v47.size.height = v22;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = v16;
  v48.origin.y = v36;
  v48.size.width = v20;
  v48.size.height = v22;
  v34 = CGRectGetMaxX(v48) - v29;
  if (v34 >= v31)
    v34 = v31;
  if (MinX < v34)
    MinX = v34;
  v49.origin.x = v16;
  v49.origin.y = v36;
  v49.size.width = v20;
  v49.size.height = v22;
  CGRectGetMinY(v49);
  v50.origin.x = v16;
  v50.origin.y = v36;
  v50.size.width = v20;
  v50.size.height = v22;
  CGRectGetMaxY(v50);
  return MinX;
}

void captureDeferredPhotoProcessorServer_servedObjectRefconDestructor(CFTypeRef *a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef);

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = *(void (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
      CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t captureDeferredPhotoProcessorServer_serializeNotification(int a1, int a2, int a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!theDict)
    return 0;
  if (captureDeferredPhotoProcessor_createSerializedNotification(a3, theDict, a6, (CFMutableDictionaryRef *)&cf)|| FigXPCMessageSetCFDictionary())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v6 = 1;
  }
  else
  {
    v6 = 2;
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t clspm_registerForNotifyName(const char *a1, dispatch_queue_t queue, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[5];
  _QWORD handler[5];
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  if (!a3)
    return 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __clspm_registerForNotifyName_block_invoke;
  v9[3] = &unk_1E4923990;
  v9[4] = a3;
  v9[5] = &v10;
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __clspm_registerForNotifyName_block_invoke_2;
  handler[3] = &unk_1E49239B8;
  handler[4] = v9;
  if (!notify_register_dispatch(a1, &v13, queue, handler))
  {
    v7[0] = v4;
    v7[1] = 3221225472;
    v7[2] = __clspm_registerForNotifyName_block_invoke_3;
    v7[3] = &unk_1E491ECB8;
    v7[4] = v9;
    dispatch_async(queue, v7);
  }
  v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1A2FE339C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __clspm_registerForNotifyName_block_invoke(uint64_t a1)
{
  uint64_t state64;

  state64 = 0;
  notify_get_state(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), &state64);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __clspm_registerForNotifyName_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __clspm_registerForNotifyName_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t PixelSumASM(int8x16_t *a1, int a2, int a3, unsigned int a4, int32x4_t *a5, int32x4_t *a6)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int v19;
  int v20;
  int8x16_t *v21;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int32x4_t *v27;
  int v28;
  int v29;
  int8x16_t *v30;
  int v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t *v34;
  int v35;
  int v36;
  uint16x8_t *v37;
  int8x16_t *v38;
  int v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  uint16x8_t *v62;
  uint32x4_t *v63;
  int v64;
  uint16x8_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  _QWORD v70[8];

  if ((a2 & 0x1F) != 0 || (a3 & 3) != 0 || (a1 & 0xF) != 0 || (a4 & 0xF) != 0)
    return -1;
  v70[6] = v6.i64[0];
  v70[7] = v7.i64[0];
  v70[4] = v8.i64[0];
  v70[5] = v9.i64[0];
  v70[2] = v10;
  v70[3] = v11;
  v70[0] = v12;
  v70[1] = v13;
  v19 = (a3 + 255) >> 8;
  v20 = a3;
  v21 = a1;
  v23 = (int32x4_t)veorq_s8(v6, v6);
  v24 = (int32x4_t)veorq_s8(v7, v7);
  v25 = veorq_s8(v8, v8);
  v26 = veorq_s8(v9, v9);
  v27 = a6;
  v28 = a2;
  do
  {
    *v27 = v23;
    v27[1] = v24;
    v27[2] = (int32x4_t)v25;
    v27[3] = (int32x4_t)v26;
    v27 += 4;
    v28 -= 16;
  }
  while (v28);
  do
  {
    if (v20 > 256)
      v29 = 256;
    else
      v29 = v20;
    v20 -= v29;
    v30 = (int8x16_t *)v70;
    v31 = a2;
    v32 = veorq_s8((int8x16_t)v23, (int8x16_t)v23);
    v33 = veorq_s8((int8x16_t)v24, (int8x16_t)v24);
    do
    {
      *v30 = v32;
      v30[1] = v33;
      v30 += 2;
      v31 -= 16;
    }
    while (v31);
    v34 = v21;
    do
    {
      v35 = (a2 + 2047) >> 11;
      v36 = a2;
      v37 = (uint16x8_t *)v70;
      v14 = (int32x4_t)veorq_s8((int8x16_t)v14, (int8x16_t)v14);
      v38 = v34;
      do
      {
        if (v36 > 2048)
          v39 = 2048;
        else
          v39 = v36;
        v36 -= v39;
        v15 = (int16x8_t)veorq_s8((int8x16_t)v15, (int8x16_t)v15);
        v16 = (int16x8_t)veorq_s8((int8x16_t)v16, (int8x16_t)v16);
        v17 = (int16x8_t)veorq_s8((int8x16_t)v17, (int8x16_t)v17);
        v18 = (int16x8_t)veorq_s8((int8x16_t)v18, (int8x16_t)v18);
        do
        {
          v40 = *v38;
          v41 = v38[1];
          v42 = (int8x16_t *)((char *)v38 + a4);
          v43 = *v42;
          v44 = v42[1];
          v45 = (int8x16_t *)((char *)v42 + a4);
          v46 = *v45;
          v47 = v45[1];
          v48 = (int8x16_t *)((char *)v45 + a4);
          v49 = v48[1];
          v50 = vpadalq_u8((uint16x8_t)v18, *(uint8x16_t *)v48);
          v51 = vpadalq_u8(vpadalq_u8(v37[1], (uint8x16_t)vzip2q_s8(v40, v43)), (uint8x16_t)vzip2q_s8(v46, *v48));
          v52 = vpadalq_u8(vpadalq_u8(v37[2], (uint8x16_t)vzip1q_s8(v41, v44)), (uint8x16_t)vzip1q_s8(v47, v49));
          v53 = vpadalq_u8(vpadalq_u8(v37[3], (uint8x16_t)vzip2q_s8(v41, v44)), (uint8x16_t)vzip2q_s8(v47, v49));
          *v37 = vpadalq_u8(vpadalq_u8(*v37, (uint8x16_t)vzip1q_s8(v40, v43)), (uint8x16_t)vzip1q_s8(v46, *v48));
          v37[1] = v51;
          v37[2] = v52;
          v37[3] = v53;
          v15 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v15, (uint8x16_t)v40), (uint8x16_t)v41);
          v16 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v16, (uint8x16_t)v43), (uint8x16_t)v44);
          v17 = (int16x8_t)vpadalq_u8(vpadalq_u8((uint16x8_t)v17, (uint8x16_t)v46), (uint8x16_t)v47);
          v18 = (int16x8_t)vpadalq_u8(v50, (uint8x16_t)v49);
          v38 = (int8x16_t *)((char *)v48 - 3 * a4 + 32);
          v37 += 4;
          v39 -= 32;
        }
        while (v39);
        v54 = (int32x4_t)vzip1q_s16(v15, v16);
        v55 = (int32x4_t)vzip2q_s16(v15, v16);
        v56 = (int32x4_t)vzip1q_s16(v17, v18);
        v57 = (int32x4_t)vzip2q_s16(v17, v18);
        v58 = (uint16x8_t)vzip1q_s32(v54, v56);
        v59 = (uint16x8_t)vzip2q_s32(v54, v56);
        v60 = (uint16x8_t)vzip1q_s32(v55, v57);
        v61 = (uint16x8_t)vzip2q_s32(v55, v57);
        v24 = vaddq_s32((int32x4_t)vaddl_high_u16(v58, v59), (int32x4_t)vaddl_high_u16(v60, v61));
        v23 = vaddq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v58.i8, *(uint16x4_t *)v59.i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v60.i8, *(uint16x4_t *)v61.i8)), v24);
        v14 = vaddq_s32(v14, v23);
        --v35;
      }
      while (v35);
      *a5++ = v14;
      v34 = (int8x16_t *)((char *)v34 + 4 * a4);
      v29 -= 4;
    }
    while (v29);
    v62 = (uint16x8_t *)v70;
    v63 = (uint32x4_t *)a6;
    v64 = a2;
    do
    {
      v65 = v62[1];
      v66 = vaddw_high_u16(v63[1], *v62);
      v67 = vaddw_u16(v63[2], *(uint16x4_t *)v65.i8);
      v68 = vaddw_high_u16(v63[3], v65);
      *v63 = vaddw_u16(*v63, *(uint16x4_t *)v62->i8);
      v63[1] = v66;
      v63[2] = v67;
      v63[3] = v68;
      v62 += 2;
      v63 += 4;
      v64 -= 16;
    }
    while (v64);
    v21 += 16 * a4;
    --v19;
  }
  while (v19);
  return 0;
}

float MemDiff32(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int32x4_t v3;
  int32x4_t v4;
  int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int64x2_t v10;
  float result;

  v3 = 0uLL;
  v4 = 0uLL;
  v5 = a3 >> 3;
  do
  {
    v6 = *a1;
    v7 = a1[1];
    v8 = *a2;
    v9 = a2[1];
    a1 += 2;
    a2 += 2;
    v3 = vabaq_s32(v3, v6, v8);
    v4 = vabaq_s32(v4, v7, v9);
    --v5;
  }
  while (v5);
  v10 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v3, v4));
  LODWORD(result) = vpaddq_s64(v10, v10).u32[0];
  return result;
}

float MemDiffZeroMean32(int32x4_t *a1, unsigned int a2, int32x4_t *a3, unsigned int a4, int a5)
{
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int64x2_t v14;
  float result;

  v5 = 0uLL;
  v6 = 0uLL;
  v7 = vdupq_n_s32(a2);
  v8 = vdupq_n_s32(a4);
  v9 = a5 >> 3;
  do
  {
    v10 = *a1;
    v11 = a1[1];
    v12 = *a3;
    v13 = a3[1];
    a1 += 2;
    a3 += 2;
    v5 = vabaq_s32(v5, vsubq_s32(v10, v7), vsubq_s32(v12, v8));
    v6 = vabaq_s32(v6, vsubq_s32(v11, v7), vsubq_s32(v13, v8));
    --v9;
  }
  while (v9);
  v14 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v5, v6));
  LODWORD(result) = vpaddq_s64(v14, v14).u32[0];
  return result;
}

float MemSum32(int32x4_t *a1, int a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int v4;
  int32x4_t v5;
  int32x4_t v6;
  int64x2_t v7;
  float result;

  v2 = 0uLL;
  v3 = 0uLL;
  v4 = a2 >> 3;
  do
  {
    v5 = *a1;
    v6 = a1[1];
    a1 += 2;
    v2 = vaddq_s32(v2, v5);
    v3 = vaddq_s32(v3, v6);
    --v4;
  }
  while (v4);
  v7 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v2, v3));
  LODWORD(result) = vpaddq_s64(v7, v7).u32[0];
  return result;
}

id sdpc_depthMetadataAttachmentDictionaryFromStereoDisparityMetadata(void *a1, CMAttachmentBearerRef target, int a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  double v16;
  double v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  CGFloat v24;
  CGFloat v25;
  uint64_t v26;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  int v46;
  void *v47;
  void *v48;
  void *v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t j;
  int v55;
  uint64_t v56;
  CFDictionaryRef v58;
  int v59;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  _BYTE v77[128];
  uint64_t v78;
  CGSize v79;

  v78 = *MEMORY[0x1E0C80C00];
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0))
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v8 = v7;
    if (a4)
      v9 = &unk_1E49FA698;
    else
      v9 = &unk_1E49FA6B0;
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0D08470]);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D08438]);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", &unk_1E49FA698, *MEMORY[0x1E0D08428]);
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    if (a3)
    {
      objc_msgSend(a1, "teleIntrinsicMatrix");
      DWORD2(v73) = v10;
      DWORD2(v74) = v11;
      *(_QWORD *)&v73 = v12;
      *(_QWORD *)&v74 = v13;
      DWORD2(v75) = v14;
      *(_QWORD *)&v75 = v15;
      objc_msgSend(a1, "teleIntrinsicMatrixReferenceDimensions");
    }
    else
    {
      objc_msgSend(a1, "wideIntrinsicMatrix");
      DWORD2(v73) = v18;
      DWORD2(v74) = v19;
      *(_QWORD *)&v73 = v20;
      *(_QWORD *)&v74 = v21;
      DWORD2(v75) = v22;
      *(_QWORD *)&v75 = v23;
      objc_msgSend(a1, "wideIntrinsicMatrixReferenceDimensions");
    }
    v24 = v16;
    v25 = v17;
    v26 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v73, 48);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v26, *MEMORY[0x1E0D08440]);
    v79.width = v24;
    v79.height = v25;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v79);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D08448]);

    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    if (a3)
      objc_msgSend(a1, "teleExtrinsicMatrix");
    else
      objc_msgSend(a1, "wideExtrinsicMatrix");
    DWORD2(v69) = v29;
    DWORD2(v70) = v31;
    *(_QWORD *)&v69 = v28;
    *(_QWORD *)&v70 = v30;
    DWORD2(v71) = v33;
    DWORD2(v72) = v35;
    *(_QWORD *)&v71 = v32;
    *(_QWORD *)&v72 = v34;
    v36 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v69, 64);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v36, *MEMORY[0x1E0D08430]);
    if (a3)
      objc_msgSend(a1, "telePixelSizeInMillimeters");
    else
      objc_msgSend(a1, "widePixelSizeInMillimeters");
    v37 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v37, *MEMORY[0x1E0D08468]);
    if (a3)
      v38 = (void *)objc_msgSend(a1, "teleLensDistortionCoefficients");
    else
      v38 = (void *)objc_msgSend(a1, "wideLensDistortionCoefficients");
    v39 = v38;
    if (v38)
    {
      v40 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v38, "count"));
      v41 = (_DWORD *)objc_msgSend(v40, "mutableBytes");
      v65 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      v42 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
      if (v42)
      {
        v43 = v42;
        v44 = *(_QWORD *)v66;
        do
        {
          for (i = 0; i != v43; ++i)
          {
            if (*(_QWORD *)v66 != v44)
              objc_enumerationMutation(v39);
            objc_msgSend(*(id *)(*((_QWORD *)&v65 + 1) + 8 * i), "floatValue");
            *v41++ = v46;
          }
          v43 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v65, v77, 16);
        }
        while (v43);
      }
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v40, *MEMORY[0x1E0D08460]);
    }
    if (a3)
      v47 = (void *)objc_msgSend(a1, "teleInverseLensDistortionCoefficients");
    else
      v47 = (void *)objc_msgSend(a1, "wideInverseLensDistortionCoefficients");
    v48 = v47;
    if (v47)
    {
      v49 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v47, "count"));
      v50 = (_DWORD *)objc_msgSend(v49, "mutableBytes");
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v51 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v61, v76, 16);
      if (v51)
      {
        v52 = v51;
        v53 = *(_QWORD *)v62;
        do
        {
          for (j = 0; j != v52; ++j)
          {
            if (*(_QWORD *)v62 != v53)
              objc_enumerationMutation(v48);
            objc_msgSend(*(id *)(*((_QWORD *)&v61 + 1) + 8 * j), "floatValue");
            *v50++ = v55;
          }
          v52 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v61, v76, 16);
        }
        while (v52);
      }
      objc_msgSend(v8, "setObject:forKeyedSubscript:", v49, *MEMORY[0x1E0D08450]);
    }
    if (a3)
      objc_msgSend(a1, "teleLensDistortionOpticalCenter");
    else
      objc_msgSend(a1, "wideLensDistortionOpticalCenter");
    v58 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v56);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v58, *MEMORY[0x1E0D08458]);

    v59 = objc_msgSend(a1, "version");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v59 | (FigDepthDataGetCurrentMajorVersion() << 16)), *MEMORY[0x1E0D08478]);
  }
  else
  {
    v8 = 0;
  }
  return v8;
}

uint64_t FigCaptureReferenceFrameSelection(const __CFArray *a1, int *a2)
{
  int Count;
  CFIndex v5;
  const void *v6;
  uint64_t v7;
  _OWORD *v8;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  uint64_t v11;
  int64_t v12;
  int v13;
  int64_t v14;
  BOOL v15;
  _OWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  *a2 = -1;
  if (a1 && (Count = CFArrayGetCount(a1), Count > 0) && Count <= 7)
  {
    v5 = 0;
    v6 = (const void *)*MEMORY[0x1E0D068C0];
    v7 = Count;
    v8 = v17;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
      if (ValueAtIndex)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v6);
        if (Value)
          CFNumberGetValue(Value, kCFNumberSInt64Type, v8);
      }
      ++v5;
      v8 = (_OWORD *)((char *)v8 + 8);
    }
    while (v7 != v5);
    v11 = 0;
    v12 = 0x8000000000000000;
    v13 = -1;
    do
    {
      v14 = *((_QWORD *)v17 + v11);
      v15 = v12 < v14;
      if (v12 <= v14)
        v12 = *((_QWORD *)v17 + v11);
      if (v15)
        v13 = v11;
      ++v11;
    }
    while (v7 != v11);
    *a2 = v13;
    if (v13 == -1)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(CFArrayRef theArray, int *a2)
{
  int v4;
  int v5;
  CFIndex v6;
  const void *v7;
  int v8;
  double v9;
  const void *v10;
  float v11;
  const void *v12;
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  const void *v15;
  const void *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  int v19;
  int v20;
  int *v22;
  void *v23;
  void *v24;
  CFIndex Count;
  void *v26;
  void *v27;
  void *v28;
  void *key;
  double valuePtr;
  int v31;

  if (checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken == -1)
  {
    if (!theArray)
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken, &__block_literal_global_74);
    if (!theArray)
    {
LABEL_40:
      fig_log_get_emitter();
      FigDebugAssert3();
      v20 = 0;
      if (a2)
        goto LABEL_34;
      goto LABEL_35;
    }
  }
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_40;
  v22 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0.0;
  key = (void *)*MEMORY[0x1E0D06E58];
  v24 = (void *)*MEMORY[0x1E0D06E68];
  v28 = (void *)*MEMORY[0x1E0D06D00];
  v27 = (void *)*MEMORY[0x1E0D06A98];
  v26 = (void *)*MEMORY[0x1E0D06AB8];
  v10 = (const void *)*MEMORY[0x1E0D06C30];
  v23 = (void *)*MEMORY[0x1E0D06970];
  v11 = 0.0;
  v12 = (const void *)*MEMORY[0x1E0D06A20];
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v6);
    if (CFDictionaryGetValue(ValueAtIndex, key))
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v24);
      if (Value)
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        if ((LOBYTE(valuePtr) & 0x11) != 1)
        {
          v20 = 2;
          goto LABEL_32;
        }
      }
    }
    v15 = CFDictionaryGetValue(ValueAtIndex, v28);
    if (!v15)
      goto LABEL_38;
    v16 = v15;
    if (v7 && !CFEqual(v7, v15))
    {
      v20 = 4;
LABEL_32:
      a2 = v22;
      goto LABEL_33;
    }
    if (!CFDictionaryGetValue(ValueAtIndex, v27)
      || !CFDictionaryGetValue(ValueAtIndex, v26)
      || (v31 = 0, (v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v10)) == 0)
      && (v17 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v23)) == 0
      || (CFNumberGetValue(v17, kCFNumberSInt32Type, &v31),
          valuePtr = 0.0,
          (v18 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, v12)) == 0)
      || (CFNumberGetValue(v18, kCFNumberDoubleType, &valuePtr), FigCaptureComputeImageGainFromMetadata()))
    {
LABEL_38:
      fig_log_get_emitter();
      FigDebugAssert3();
      v20 = 1;
      goto LABEL_32;
    }
    if (v6)
    {
      v19 = v31 - v8;
      if (v31 - v8 < 0)
        v19 = v8 - v31;
      v4 += v19;
      if (vabdd_f64(valuePtr, v9) > 0.0000999999975)
        ++v5;
      v11 = v11 + vabds_f32(0.0, 0.0);
    }
    ++v6;
    v7 = v16;
    v9 = valuePtr;
    v8 = v31;
  }
  while (Count != v6);
  if (v5 <= 2)
    v20 = 8 * (v4 > 3);
  else
    v20 = (8 * (v4 > 3)) | 0x10;
  a2 = v22;
  if (v11 >= 3.0)
  {
    v20 |= 0x20u;
    if (v22)
      goto LABEL_34;
    goto LABEL_35;
  }
LABEL_33:
  if (!a2)
    goto LABEL_35;
LABEL_34:
  *a2 = v20;
LABEL_35:
  if (v20)
    return 4294954516;
  else
    return 0;
}

uint64_t FigCapturePTSBasedReferenceFrameSelection(int a1, const __CFArray *a2, CMTime *a3, int a4, _DWORD *a5, int *a6)
{
  double Seconds;
  CFIndex Count;
  uint64_t IsUsableForPTSBasedReferenceFrameSelection;
  CFIndex v15;
  const void *v16;
  int v17;
  double v18;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  double v21;
  int v22;
  CFIndex v23;
  const void *v24;
  uint64_t v25;
  int v26;
  float v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  const __CFNumber *v32;
  CFIndex v33;
  uint64_t v34;
  const __CFNumber *v35;
  BOOL v36;
  uint64_t v37;
  const __CFNumber *v38;
  unsigned int v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  int v45;
  int *v46;
  _DWORD *v47;
  void *v48;
  void *key;
  int valuePtr;
  uint64_t v51;
  CMTime time;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken != -1)
    dispatch_once(&checkFigCaptureSampleBufferProcessorCommonTrace_checkFigCaptureSampleBufferProcessorCommonTraceOnceToken, &__block_literal_global_74);
  time = *a3;
  Seconds = CMTimeGetSeconds(&time);
  if (a2)
  {
    Count = CFArrayGetCount(a2);
    if (Count >= 5)
    {
LABEL_70:
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  else
  {
    Count = 0;
  }
  if (a4 <= 0 || Count < a4)
    goto LABEL_70;
  if (!a1)
  {
    IsUsableForPTSBasedReferenceFrameSelection = FigCaptureFrameMetadataIsUsableForPTSBasedReferenceFrameSelection(a2, 0);
    if ((_DWORD)IsUsableForPTSBasedReferenceFrameSelection)
    {
      v42 = IsUsableForPTSBasedReferenceFrameSelection;
      fig_log_get_emitter();
      goto LABEL_74;
    }
  }
  v15 = 0;
  v16 = (const void *)*MEMORY[0x1E0D05D00];
  v17 = -1;
  v18 = 1.79769313e308;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v15);
    if (ValueAtIndex)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, v16);
      if (!Value)
        return 4294954516;
      CMTimeMakeFromDictionary(&time, Value);
      v21 = vabdd_f64(CMTimeGetSeconds(&time), Seconds);
      if (v21 < v18)
      {
        v17 = v15;
        v18 = v21;
      }
    }
    ++v15;
  }
  while (Count != v15);
  if (v17 == -1)
    goto LABEL_70;
  time.value = 0;
  *(_QWORD *)&time.timescale = 0;
  if (!a2 || (v22 = CFArrayGetCount(a2), v22 <= 0))
  {
    fig_log_get_emitter();
LABEL_56:
    FigDebugAssert3();
    goto LABEL_57;
  }
  if (v22 > 0xB)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_57:
    v42 = FigSignalErrorAt();
    if (!(_DWORD)v42)
      return v42;
    fig_log_get_emitter();
LABEL_74:
    FigDebugAssert3();
    return v42;
  }
  v45 = a4;
  v46 = a6;
  v47 = a5;
  v23 = 0;
  key = (void *)*MEMORY[0x1E0D06A98];
  v48 = (void *)*MEMORY[0x1E0D06AA8];
  v24 = (const void *)*MEMORY[0x1E0D06AB8];
  v44 = v22;
  v25 = v22;
  v26 = -1;
  v27 = 1.1755e-38;
  do
  {
    v28 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v23);
    if (v28)
    {
      v29 = v28;
      v51 = 0;
      v30 = (const __CFArray *)CFDictionaryGetValue(v28, key);
      if (!v30)
        goto LABEL_35;
      v31 = v30;
      v32 = (const __CFNumber *)CFDictionaryGetValue(v29, v48);
      valuePtr = 0;
      if (v32)
        CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr);
      if (CFArrayGetCount(v31) >= 1)
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v31, v33);
          CFNumberGetValue(v35, kCFNumberSInt64Type, &v51);
          v36 = valuePtr == 2 && v33 == 0;
          v37 = (uint64_t)(float)((float)v51 * 0.1);
          if (!v36)
            v37 = 0;
          v34 += v51 + v37;
          ++v33;
        }
        while (CFArrayGetCount(v31) > v33);
      }
      else
      {
LABEL_35:
        v34 = 0;
      }
      v38 = (const __CFNumber *)CFDictionaryGetValue(v29, v24);
      if (v38)
      {
        valuePtr = 0;
        CFNumberGetValue(v38, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr)
          v34 >>= 2;
      }
      if (!v34)
        goto LABEL_69;
      v39 = v23 - v17;
      if ((int)v23 - v17 < 0)
        v39 = v17 - v23;
      v40 = findReferenceFrameIndex_kDistanceFromCenterWeights[v39] * (float)v34;
      *((float *)&time.value + v23) = v40;
      if (v40 > v27)
      {
        v26 = v23;
        v27 = v40;
      }
    }
    ++v23;
  }
  while (v23 != v25);
  if (v26 == -1)
  {
LABEL_69:
    fig_log_get_emitter();
    goto LABEL_56;
  }
  LODWORD(v41) = v26;
  if (v45 == 1)
    goto LABEL_61;
  if (v45 != 2)
  {
    if (v26 >= v45)
    {
      LODWORD(v41) = v26 - v45 + 1;
      if (!v46)
        goto LABEL_63;
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  if (!v26)
  {
LABEL_60:
    LODWORD(v41) = 0;
    goto LABEL_61;
  }
  v41 = v26 - 1;
  if (v26 != v44 - 1)
  {
    if (*((float *)&time.value + v41) < *((float *)&time.value + v26 + 1))
      LODWORD(v41) = v26;
    if (!v46)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_61:
  if (v46)
LABEL_62:
    *v46 = v26;
LABEL_63:
  if (v47)
    *v47 = v41;
  return 0;
}

uint64_t hallPositionIndexFromPortType(const void *a1, _DWORD *a2)
{
  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A18]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A30]))
    {
      *a2 = 1;
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

uint64_t bravoTransitionCameraIndexFromPortType(const void *a1, int *a2)
{
  int v4;

  if (a1 && a2)
  {
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A18]))
    {
      *a2 = 0;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A30]))
    {
      v4 = 1;
LABEL_9:
      *a2 = v4;
      return 0;
    }
    if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0D05A28]))
    {
      v4 = 2;
      goto LABEL_9;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return FigSignalErrorAt();
}

float FigMotionAlign3x1Vector(float *a1, double *a2)
{
  return a2[1] * a1[1] + *a1 * *a2 + a1[2] * a2[2];
}

int *FigMotionIncreaseRingIndex(int *result, int a2)
{
  *result = (*result + 1) % a2;
  return result;
}

uint64_t FigMotionCalculateAdjustedFocusPosition(int *a1, float a2, float a3)
{
  float v3;
  int v4;

  v3 = (float)*a1 - (float)(a3 * a2);
  if (v3 >= 0.0)
  {
    if (v3 <= 255.0)
      v4 = (int)(float)(v3 + 0.5);
    else
      v4 = 255;
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return 0;
}

uint64_t FigMotionGetGravityZ(const __CFDictionary *a1, float *a2)
{
  const __CFData *Value;
  uint64_t v4;
  int v5;
  const UInt8 *v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const UInt8 *v12;

  v12 = 0;
  if (a1)
  {
    Value = (const __CFData *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06B68]);
    if (Value)
    {
      v4 = FigMotionISPMotionDataFromCFData(Value, &v12);
      if ((_DWORD)v4)
      {
        v10 = v4;
        fig_log_get_emitter();
        FigDebugAssert3();
        return v10;
      }
      v5 = *((_DWORD *)v12 + 1);
      if (v5 < 1)
      {
        v7 = 0.0;
        if (!v5)
          goto LABEL_8;
      }
      else
      {
        v6 = v12 + 44;
        v7 = 0.0;
        v8 = *((unsigned int *)v12 + 1);
        do
        {
          v9 = *(_DWORD *)v6;
          v6 += 40;
          v7 = v7 + (float)((float)v9 * 0.000015259);
          --v8;
        }
        while (v8);
      }
      v7 = v7 / (float)v5;
LABEL_8:
      v10 = 0;
      *a2 = v7;
      return v10;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionComputeBlurScores(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFArray *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  const __CFArray *v13;
  unsigned int v14;
  CFIndex v15;
  unsigned int v16;
  const __CFDictionary *v17;
  uint64_t MotionDataFromISP;
  uint64_t v19;
  double *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  CFIndex v30;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  double Seconds;
  double v34;
  uint64_t SensorValidCropRect;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  double v40;
  double v41;
  double v42;
  float v43;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  float32x2_t v50;
  uint64_t v51;
  CFIndex Count;
  void *key;
  float v55;
  uint64_t v56;
  unsigned int v57;
  CFIndex v58;
  const __CFArray *theArray;
  CFIndex v60;
  unsigned int v61;
  __int128 v62;
  CMTime time;
  double v64;
  double v65;
  double v66;
  _DWORD v67[4110];
  _QWORD v68[1282];
  char v69[10];
  float v70;
  float32x2_t v71;
  float32x2_t v72;
  double v73[4];
  _OWORD v74[2];
  float64x2_t v75[2];
  _OWORD v76[765];
  float64x2_t v77;
  _OWORD v78[2];
  _BOOL8 v79;
  float32x2_t v80;
  float64x2_t v81;
  float64_t v82;
  uint64_t v83;

  v4 = (const __CFArray *)MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v57 = v8;
  v83 = *MEMORY[0x1E0C80C00];
  v70 = v9;
  if (!v4 || (v10 = v7, v11 = v6, v12 = v5, v13 = v4, Count = CFArrayGetCount(v4), Count <= 0))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v56 = v10;
  bzero(v68, 0x2818uLL);
  bzero(v67, 0x4038uLL);
  theArray = v13;
  v60 = CFArrayGetCount(v13);
  if (v60 <= 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v49 = FigSignalErrorAt();
LABEL_51:
    v29 = v56;
    if (!(_DWORD)v49)
    {
LABEL_14:
      v30 = 0;
      v55 = v70;
      key = (void *)*MEMORY[0x1E0D05D00];
      while (1)
      {
        *(_DWORD *)(v29 + 4 * v30) = 2139095039;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v30);
        v65 = 0.0;
        v66 = 0.0;
        v64 = 0.0;
        if (v55 <= 0.0 && !FigCFDictionaryGetFloatIfPresent()
          || (FigCFDictionaryGetDoubleIfPresent(),
              FigCFDictionaryGetDoubleIfPresent(),
              v65 = v65 / 1000000.0,
              (Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, key)) == 0))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
          return FigSignalErrorAt();
        }
        CMTimeMakeFromDictionary(&time, Value);
        Seconds = CMTimeGetSeconds(&time);
        FigMotionComputeFramePTSOffsetFromISPCrop(ValueAtIndex, &v64);
        v34 = v64;
        v62 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
        SensorValidCropRect = FigMotionGetSensorValidCropRect(ValueAtIndex);
        if ((_DWORD)SensorValidCropRect)
        {
          v49 = SensorValidCropRect;
          fig_log_get_emitter();
          goto LABEL_48;
        }
        v58 = v30;
        v36 = *((double *)&v62 + 1);
        if (v57 < 2)
        {
          v37 = v36 >> 1;
          v61 = *((double *)&v62 + 1);
        }
        else
        {
          v37 = 0;
          v61 = vcvtms_u32_f32((float)(v36 - 1) / (float)(v57 - 1));
        }
        v38 = v11;
        v39 = 0.0;
        if (v37 < v36)
          break;
LABEL_41:
        v29 = v56;
        *(float *)(v56 + 4 * v58) = v39 / (float)v57;
        v30 = v58 + 1;
        if (v58 + 1 == Count)
          return 0;
      }
      v40 = Seconds + v34;
      while (1)
      {
        if (v38)
        {
          v41 = v40 - v66 + v65 * (double)(int)v37 / (double)(int)(v36 - 1);
          memset(v75, 0, sizeof(v75));
          memset(v74, 0, sizeof(v74));
          v77 = 0u;
          memset(v78, 0, sizeof(v78));
          memset(v76, 0, 144);
          v42 = v66 / (double)v11;
          v79 = v12 - 3 < 2;
          *((float *)v76 + 1) = v70;
          v43 = 0.0;
          v44 = v38;
          while (1)
          {
            FigMotionComputeQuaternionForTimeStamp((uint64_t)v68, v75, v69, v41);
            if (!v69[0] || (FigMotionComputeQuaternionForTimeStamp((uint64_t)v68, v74, v69, v42 + v41), !v69[0]))
            {
              fig_log_get_emitter();
              FigDebugAssert3();
              goto LABEL_38;
            }
            v80 = *(float32x2_t *)&v75[0].f64[0];
            v81 = vnegq_f64(*(float64x2_t *)((char *)v75 + 8));
            v82 = -v75[1].f64[1];
            v73[0] = FigMotionMultiplyQuaternions((double *)&v80, (double *)v74);
            v73[1] = v45;
            v73[2] = v46;
            v73[3] = v47;
            v80 = 0;
            FigMotionComputeTranslationFromCameraMotion(v73, (uint64_t)&v77, (uint64_t)v76, (float *)&v80);
            if (v12 - 2 > 2)
            {
              v72 = 0;
              v71 = 0;
              v51 = FigMotionComputeLensMovementAndSagForTimeStamp((uint64_t)v67, &v72, 0, v12, v41, 1.0);
              if ((_DWORD)v51)
              {
                v49 = v51;
                fig_log_get_emitter();
LABEL_46:
                FigDebugAssert3();
                goto LABEL_47;
              }
              v49 = FigMotionComputeLensMovementAndSagForTimeStamp((uint64_t)v67, &v71, 0, v12, v42 + v41, 1.0);
              if ((_DWORD)v49)
              {
                fig_log_get_emitter();
                goto LABEL_46;
              }
              v50 = vsub_f32(v80, vsub_f32(v71, v72));
            }
            else
            {
              v49 = v48;
              v50 = v80;
            }
            v43 = v43 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v50, v50).i32[1]), v50.f32[0], v50.f32[0]));
            v41 = v42 + v41;
            if (!--v44)
            {
              if ((_DWORD)v49)
                goto LABEL_47;
              goto LABEL_35;
            }
          }
        }
        fig_log_get_emitter();
        FigDebugAssert3();
        v43 = 0.0;
LABEL_38:
        v49 = FigSignalErrorAt();
        if ((_DWORD)v49)
          break;
LABEL_35:
        v39 = v39 + v43;
        v37 += v61;
        v38 = v11;
        if (v37 >= v36)
          goto LABEL_41;
      }
LABEL_47:
      fig_log_get_emitter();
      goto LABEL_48;
    }
  }
  else
  {
    bzero(&v77, 0x14A0uLL);
    bzero(v76, 0x2FD0uLL);
    v14 = 0;
    v15 = 0;
    v16 = v68[0];
    while (1)
    {
      v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, v15);
      if (!v17)
      {
        LODWORD(v68[0]) = v16;
        fig_log_get_emitter();
        FigDebugAssert3();
        v49 = FigSignalErrorAt();
        goto LABEL_51;
      }
      v80.i32[0] = 0;
      LODWORD(v75[0].f64[0]) = 0;
      MotionDataFromISP = FigMotionGetMotionDataFromISP(v17, &v77, 0, 110, (int *)&v80, 0, (uint64_t)v76, 510, (int *)v75);
      if ((_DWORD)MotionDataFromISP)
        break;
      v19 = v80.u32[0];
      v20 = (double *)v78;
      if (v80.i32[0] >= 1)
      {
        do
        {
          *(double *)&v68[v14 + 1] = *(v20 - 1) + -0.005;
          v21 = &v68[4 * v14 + 257];
          v22 = *(_OWORD *)v20;
          v23 = *((_OWORD *)v20 + 1);
          v20 += 6;
          *v21 = v22;
          v21[1] = v23;
          v16 = (v16 + 1);
          v14 = v16;
          --v19;
        }
        while (v19);
      }
      v24 = LODWORD(v75[0].f64[0]);
      if (SLODWORD(v75[0].f64[0]) >= 1)
      {
        v25 = v67[v12];
        v26 = (uint64_t *)v76 + 1;
        do
        {
          v27 = &v67[1024 * (unint64_t)v12 + 2 * v25];
          *((_QWORD *)v27 + 1) = *(v26 - 1);
          v28 = *v26;
          v26 += 3;
          *((_QWORD *)v27 + 1025) = v28;
          v25 = ((unsigned __int16)v67[v12] + 1) & 0x1FF;
          v67[v12] = v25;
          --v24;
        }
        while (v24);
      }
      if (++v15 == v60)
      {
        LODWORD(v68[0]) = v16;
        v29 = v56;
        goto LABEL_14;
      }
    }
    v49 = MotionDataFromISP;
    LODWORD(v68[0]) = v16;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  fig_log_get_emitter();
LABEL_48:
  FigDebugAssert3();
  return v49;
}

uint64_t FigMotionComputeQuaternionAndAttitudeFromArray(const __CFArray *a1, double *a2, long double *a3, double a4)
{
  int Count;
  CFIndex v9;
  uint64_t v10;
  float v11;
  int v12;
  const __CFArray *ValueAtIndex;
  const __CFArray *v14;
  const __CFNumber *v15;
  float v16;
  float v17;
  const __CFData *v18;
  const __CFData *v19;
  uint64_t v20;
  __int128 v21;
  double v22;
  double v23;
  double valuePtr;
  UInt8 buffer[16];
  __int128 v27;
  CFRange v28;

  if (!a1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_16:
    v20 = FigSignalErrorAt();
    if ((_DWORD)v20)
      goto LABEL_14;
LABEL_19:
    v22 = a2[2];
    *a3 = -atan2(a2[1] * (a2[3] + a2[3]) - *a2 * (v22 + v22), 1.0 - a2[1] * (a2[1] + a2[1]) - v22 * (v22 + v22));
    a3[1] = asin(*a2 * (a2[1] + a2[1]) + a2[2] * (a2[3] + a2[3]));
    v23 = a2[3];
    v20 = 0;
    a3[2] = -atan2(a2[1] * (a2[2] + a2[2]) - *a2 * (v23 + v23), 1.0 - a2[1] * (a2[1] + a2[1]) - v23 * (v23 + v23));
    return v20;
  }
  Count = CFArrayGetCount(a1);
  *(_OWORD *)buffer = 0u;
  v27 = 0u;
  if (Count < 1)
    goto LABEL_15;
  v9 = 0;
  v10 = Count;
  v11 = 1.0;
  v12 = -1;
  do
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v9);
    if (ValueAtIndex)
    {
      v14 = ValueAtIndex;
      if ((int)CFArrayGetCount(ValueAtIndex) >= 1)
      {
        v15 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, 0);
        if (v15)
        {
          valuePtr = 0.0;
          CFNumberGetValue(v15, kCFNumberDoubleType, &valuePtr);
          v16 = valuePtr - a4;
          v17 = fabsf(v16);
          if (v11 > v17)
          {
            v18 = (const __CFData *)CFArrayGetValueAtIndex(v14, 2);
            if (v18)
            {
              v19 = v18;
              v28.length = CFDataGetLength(v18);
              v28.location = 0;
              CFDataGetBytes(v19, v28, buffer);
              v11 = v17;
              v12 = v9;
            }
          }
        }
      }
    }
    ++v9;
  }
  while (v10 != v9);
  if (v12 < 0)
  {
LABEL_15:
    fig_log_get_emitter();
    FigDebugAssert3();
    goto LABEL_16;
  }
  if (v11 <= 0.011)
  {
    v21 = v27;
    *(_OWORD *)a2 = *(_OWORD *)buffer;
    *((_OWORD *)a2 + 1) = v21;
    goto LABEL_19;
  }
  low_freq_error_logging();
  v20 = 4294954513;
LABEL_14:
  fig_log_get_emitter();
  FigDebugAssert3();
  return v20;
}

uint64_t FigMotionClearFocalLengthData(uint64_t a1)
{
  if (a1)
  {
    memset_pattern16((void *)(a1 + 480), &unk_1A32B1790, 0xCuLL);
    memset_pattern16((void *)(a1 + 492), &unk_1A32B1790, 0xCuLL);
    memset_pattern16((void *)(a1 + 504), &unk_1A32B1790, 0xCuLL);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionStashQuadraBinningFactor(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetInt32IfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionStashFocalLengthData(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetFloatIfPresent();
    FigCFDictionaryGetFloatIfPresent();
    FigCFDictionaryGetFloatIfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionUpdateBaseZoomFactorAdjustment(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    FigCFDictionaryGetFloatIfPresent();
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeBravoTranslation(float a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5, float *a6, float *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  char v20;
  float v21;
  float v22;
  char v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  uint64_t result;
  float v34;
  uint64_t v35;
  _DWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v34 = 0.0;
  if (!FigCFDictionaryGetFloatIfPresent())
  {
    if (!FigCFDictionaryGetFloatIfPresent() && !FigCFDictionaryGetFloatIfPresent())
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    v34 = 0.0 * a2;
  }
  v13 = 0;
  v14 = *(unsigned int *)(a4 + 440);
  v15 = *(_QWORD *)(a4 + 4 + 8 * v14);
  v38 = *(_QWORD *)(a4 + 4 + 8 * a5);
  v39[0] = v15;
  v37 = 0;
  v17 = *a6;
  v16 = a6[1];
  *(float *)v36 = *a6;
  *(float *)&v36[1] = v16;
  v35 = 0;
  v18 = BravoCurrentToReferenceMapping[3 * v14 + a5];
  v19 = (float)(*(float *)(a4 + 4 * v18 + 76) * *(float *)(a4 + 40 + 4 * a5)) / *(float *)(a4 + 40 + 4 * v14);
  v20 = 1;
  v21 = (float)((float)*(int *)(a4 + 64 + 4 * a5) * a1) / (float)*(int *)(a4 + 64 + 4 * v14);
  do
  {
    v22 = *(float *)&v36[v13];
    v23 = v20;
    *((float *)&v37 + v13) = v22 + (float)(a1 * *((float *)&v39[-1] + v13));
    *(float *)&v36[v13 - 2] = v22 + (float)(v19 * (float)(v21 * *((float *)v39 + v13)));
    v13 = 1;
    v20 = 0;
  }
  while ((v23 & 1) != 0);
  v24 = (float *)(a4 + 48 * (int)v18);
  v25 = v17 - *(float *)&v35;
  v26 = v16 - *((float *)&v35 + 1);
  v27 = (float)((float)((float)(v16 - *((float *)&v35 + 1)) * v24[35]) + (float)(v24[34] * (float)(v17 - *(float *)&v35)))
      + (float)(v24[36] * v34);
  v28 = 0.0;
  if (fabsf(v27) <= 0.00000001)
  {
    v29 = 0.0;
  }
  else
  {
    v29 = 0.0;
    if (v34 > 0.00000001)
    {
      v31 = v24[26];
      v32 = v24[27];
      v30 = v24 + 26;
      v29 = (float)(*(float *)&v37
                  + (float)((float)(v34
                                  * (float)((float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v30[2] * v34)))
                          / v27))
          - v17;
      v28 = (float)(*((float *)&v37 + 1)
                  + (float)((float)(v34
                                  * (float)((float)((float)(v26 * v30[5]) + (float)(v30[4] * v25))
                                          + (float)(v30[6] * v34)))
                          / v27))
          - v16;
    }
  }
  result = 0;
  *a7 = v29;
  a7[1] = v28;
  return result;
}

uint64_t FigMotionGetTimeStampAtPositionRatio(const __CFDictionary *a1, double *a2, float a3)
{
  const __CFDictionary *Value;
  double Seconds;
  uint64_t v8;
  double v10;
  CMTime time;
  double v12;
  double v13;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v13 = 0.0;
  if (!FigCFDictionaryGetDoubleIfPresent())
    return FigSignalErrorAt();
  v12 = 0.0;
  if (!FigCFDictionaryGetDoubleIfPresent())
    return FigSignalErrorAt();
  v12 = v12 / 1000000.0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D05D00]);
  if (!Value)
    return FigSignalErrorAt();
  CMTimeMakeFromDictionary(&time, Value);
  Seconds = CMTimeGetSeconds(&time);
  v10 = 0.0;
  v8 = FigMotionComputeFramePTSOffsetFromISPCrop(a1, &v10);
  if ((_DWORD)v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    *a2 = Seconds + v10 + v13 * -0.5 + a3 * v12;
  }
  return v8;
}

uint64_t FigMotionComputeMotionBlur(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int a6, float *a7, unint64_t a8, float32x2_t *a9)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  float v22;
  _BOOL4 v23;
  uint64_t v24;
  float *v25;
  BOOL v26;
  float v27;
  double v28;
  float64_t v29;
  float64_t v30;
  double v31;
  float32x2_t v32;
  long double v33;
  float32x2_t v34;
  float v38;
  float32x2_t v39;
  _OWORD v40[2];
  float64x2_t v41[2];
  char v42;
  char v43;
  float64_t v44;
  float64x2_t v45;
  double v46;
  float32x2_t v47[3];

  v47[1] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  if (a6 < 2)
  {
    v20 = *(double *)(a2 + 72);
    v21 = *(double *)(a2 + 48) * 0.5;
    v18 = v20 - v21;
    v19 = v20 + v21;
    v15 = 0.0;
  }
  else
  {
    v14 = *(double *)(a2 + 64);
    v15 = v14 / ((double)a6 + -1.0);
    v16 = *(double *)(a2 + 72) - v14 * 0.5;
    v17 = *(double *)(a2 + 48) * 0.5;
    v18 = v16 - v17;
    v19 = v16 + v17;
  }
  if (a7)
    *a7 = 0.0;
  if (a8)
    *(_DWORD *)a8 = 0;
  if (a9)
    *a9 = 0;
  if (a6 >= 1)
  {
    v22 = 1.0 / (float)a6;
    v23 = (a8 | (unint64_t)a9) != 0;
    v24 = a6;
    v25 = a5;
    do
    {
      v43 = 1;
      v42 = 1;
      memset(v41, 0, sizeof(v41));
      memset(v40, 0, sizeof(v40));
      FigMotionComputeQuaternionForTimeStamp(a1, v41, &v43, v18);
      FigMotionComputeQuaternionForTimeStamp(a1, v40, &v42, v19);
      if (v43)
        v26 = v42 == 0;
      else
        v26 = 1;
      if (!v26)
      {
        v27 = v22;
        if (a5)
          v27 = *v25;
        v38 = v27;
        v44 = v41[0].f64[0];
        v45 = vnegq_f64(*(float64x2_t *)((char *)v41 + 8));
        v46 = -v41[1].f64[1];
        v28 = FigMotionMultiplyQuaternions(&v44, (double *)v40);
        v44 = v28;
        v45.f64[0] = v29;
        v45.f64[1] = v30;
        v46 = v31;
        v32 = 0;
        if (a4 && *(_BYTE *)(a2 + 12))
        {
          v47[0] = 0;
          v39 = 0;
          FigMotionComputeLensMovementAndSagForTimeStamp(a4, v47, 0, *(_DWORD *)(a2 + 136), v18, *(float *)(a2 + 16));
          FigMotionComputeLensMovementAndSagForTimeStamp(a4, &v39, 0, *(_DWORD *)(a2 + 136), v19, *(float *)(a2 + 16));
          v32 = vsub_f32(v39, v47[0]);
        }
        if (a7)
        {
          v33 = acos(v28);
          *(float *)&v33 = (v33 + v33) * 180.0 / 3.14159265;
          *a7 = *a7 + (float)(*(float *)&v33 * v38);
        }
        if (v23)
        {
          v47[0] = 0;
          FigMotionComputeTranslationFromCameraMotion(&v44, a3, a2, (float *)v47);
          v34 = vsub_f32(v47[0], v32);
          if (a8)
            *(float *)a8 = *(float *)a8
                         + (float)(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v34, v34).i32[1]), v34.f32[0], v34.f32[0]))
                                 * v38);
          if (a9)
            *a9 = vmla_n_f32(*a9, v34, v38);
        }
      }
      v18 = v15 + v18;
      v19 = v15 + v19;
      ++v25;
      --v24;
    }
    while (v24);
  }
  return 0;
}

uint64_t FigMotionComputeLensMovementForTimeStamp(uint64_t a1, float32x2_t *a2, unsigned int a3, double a4, float a5)
{
  return FigMotionComputeLensMovementAndSagForTimeStamp(a1, a2, 0, a3, a4, a5);
}

float FigMotionComputeTranslationFromCameraMotion(double *a1, uint64_t a2, uint64_t a3, float *a4)
{
  float result;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13[8];
  float v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  FigMotionRotationMatrixFromQuaternion(a1, *(unsigned __int8 *)(a2 + 48), v13);
  result = v14;
  if (fabsf(v14) >= 0.00000001)
  {
    v8 = *(float *)(a3 + 4);
    if (v8 == 0.0)
    {
      v9 = (float)*(int *)a3;
      v10 = *(float *)(a2 + 20);
      v11 = 36;
      if (v10 > v9)
        v11 = 28;
      v12 = 32;
      if (v10 > v9)
        v12 = 24;
      v8 = *(float *)(a3 + 8) * (float)(*(float *)(a2 + v12) + (float)(*(float *)(a2 + v11) * v9));
    }
    result = (float)(v8 * v13[5]) / v14;
    *a4 = (float)(v8 * v13[2]) / v14;
    a4[1] = result;
  }
  return result;
}

uint64_t FigMotionComputeAverageQuaternionForTimePeriod(uint64_t a1, _OWORD *a2, _OWORD *a3, double a4, double a5)
{
  uint64_t v6;
  int v7;
  double v8;
  __int128 v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[40];
  uint64_t v29;

  v6 = 0;
  v7 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  v26 = 0x3FF0000000000000uLL;
  v27 = 0uLL;
  do
  {
    v8 = *(double *)(a1 + v6);
    if (v8 > a4 + -0.002 && v8 < a5 + 0.002 && v7 <= 19)
    {
      v11 = a2[1];
      v12 = &v28[2 * v7];
      *v12 = *a2;
      v12[1] = v11;
      ++v7;
    }
    a2 += 2;
    v6 += 8;
  }
  while (v6 != 2048);
  if (v7)
  {
    v13 = 0;
    while (vabdd_f64(*(double *)(a1 + v13), a4) >= 0.003)
    {
      v13 += 8;
      if (v13 == 2048)
      {
        v14 = 4294967293;
        goto LABEL_22;
      }
    }
    v15 = 0;
    while (vabdd_f64(*(double *)(a1 + v15), a5) >= 0.003)
    {
      v15 += 8;
      if (v15 == 2048)
      {
        v14 = 4294967292;
        goto LABEL_22;
      }
    }
    if (v7 >= 1)
    {
      v17 = 0;
      v18 = v7;
      v19 = v28;
      do
      {
        v20 = 1.0 - 1.0 / ((double)(int)v17 + 1.0);
        FigMotionInterpolateQuaternionsByAngle((uint64_t)v19, (double *)&v26, v20);
        *(_QWORD *)&v26 = v21;
        *((_QWORD *)&v26 + 1) = v22;
        *(_QWORD *)&v27 = v23;
        *((_QWORD *)&v27 + 1) = v24;
        ++v17;
        v19 += 2;
      }
      while (v18 != v17);
    }
    v14 = 0;
    v25 = v27;
    *a3 = v26;
    a3[1] = v25;
  }
  else
  {
    v14 = 0xFFFFFFFFLL;
LABEL_22:
    low_freq_error_logging();
  }
  return v14;
}

uint64_t GetFocalLengthParametersFromArrayUsingModuleLensID(CFNumberRef number, CFArrayRef theArray, uint64_t a3)
{
  CFIndex v6;
  const void *ValueAtIndex;
  CFTypeID TypeID;
  const __CFArray *Value;
  const __CFArray *v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  int valuePtr;
  int v19;

  valuePtr = 0;
  if (!number || CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    if (CFArrayGetCount(theArray) < 1)
      return 0;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(ValueAtIndex))
        break;
      if (!number)
        goto LABEL_17;
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("LensID"));
      if (!Value)
        goto LABEL_17;
      v10 = Value;
      v11 = valuePtr;
      if (CFArrayGetCount(Value) >= 1)
      {
        v12 = 0;
        while (1)
        {
          v19 = -1;
          FigCFArrayGetIntAtIndex();
          if (v19 == v11 || v19 == 0)
            break;
          if (CFArrayGetCount(v10) <= ++v12)
            goto LABEL_15;
        }
LABEL_17:
        v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("LensCoefficient"));
        if (v15)
        {
          v16 = v15;
          v17 = CFNumberGetTypeID();
          if (v17 == CFGetTypeID(v16))
          {
            *(_DWORD *)(a3 + 20) = 0;
            *(_DWORD *)(a3 + 28) = 0;
            *(_DWORD *)(a3 + 36) = 0;
            CFNumberGetValue(v16, kCFNumberFloatType, (void *)(a3 + 24));
            result = 0;
            *(_DWORD *)(a3 + 32) = *(_DWORD *)(a3 + 24);
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        break;
      }
LABEL_15:
      if (CFArrayGetCount(theArray) <= ++v6)
        return 0;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionCalculateAdjustedLensPosition(const __CFDictionary *a1, uint64_t a2, float *a3, float a4, float a5)
{
  const __CFNumber *Value;
  float v10;
  int v11;
  uint64_t result;
  float v13;
  BOOL v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  int valuePtr;

  valuePtr = 0;
  if (a1 && (Value = (const __CFNumber *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06970])) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v10 = (float)valuePtr - (float)(*(float *)(a2 + 40) * a4);
    if (v10 >= 0.0)
    {
      if (v10 <= 255.0)
        v11 = (int)(float)(v10 + 0.5);
      else
        v11 = 255;
    }
    else
    {
      v11 = 0;
    }
    valuePtr = v11;
    if (*(_BYTE *)(a2 + 16))
    {
      result = 0;
      v13 = (float)v11;
      v14 = *(float *)(a2 + 20) <= (float)v11;
      v15 = 32;
      if (!v14)
        v15 = 24;
      v16 = *(float *)(a2 + v15);
      v17 = 28;
      if (v14)
        v17 = 36;
      *a3 = (float)(v16 + (float)(*(float *)(a2 + v17) * v13)) * a5;
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

double FigMotionApplyDigitalZoomToTransform(int a1, float *a2, int8x16_t a3, int32x4_t a4, double a5, double a6, int8x16_t a7)
{
  float v7;
  float v8;
  float v9;
  float v10;

  if (*(float *)a3.i32 > 0.0)
  {
    *(float *)a7.i32 = 1.0 / *(float *)a3.i32;
    if (a1)
      v7 = 1.0 / *(float *)a3.i32;
    else
      v7 = *(float *)a3.i32;
    v8 = *(double *)a4.i64;
    *(float *)a4.i32 = (float)(1.0 - v7) * v8;
    v9 = a5;
    v10 = (float)(1.0 - v7) * v9;
    if (a1)
      *(float *)a3.i32 = FigMotionPostMultiplyScalingTranslationToTransform(a2, 1.0 / *(float *)a3.i32, *(float *)a4.i32, *(float *)a7.i32, v10);
    else
      *(double *)a3.i64 = FigMotionPreMultiplyScalingTranslationToTransform((uint64_t)a2, a3, a4, *(float *)a3.i32, v10, a7);
  }
  return *(double *)a3.i64;
}

uint64_t FigMotionComputeTransformFromCameraMotion(double *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5, float *a6)
{
  float64x2_t v8;
  float64x2_t v9;
  unsigned int v10;
  float64x2_t v11;
  float v12;
  float v13;
  float v14;
  float64x2_t v16;
  uint64_t v17;
  float64x2_t v18;
  uint64_t v19;
  float64x2_t v20;
  __int128 v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = 0uLL;
  v9 = 0uLL;
  if (a4)
    v9 = vcvtq_f64_f32(*a4);
  v10 = *(_DWORD *)(a3 + 4);
  v11 = *(float64x2_t *)a2;
  if (a5)
    v8 = vcvtq_f64_f32(*a5);
  v19 = v10;
  v20 = vaddq_f64(v11, v9);
  v17 = v10;
  v18 = vsubq_f64(v11, v8);
  v16 = v11;
  FigMotionRotationMatrixFromQuaternion(a1, *(unsigned __int8 *)(a2 + 48), (float *)v21);
  FigMotionComputeTransformFromRotation((uint64_t)&v19, (uint64_t)&v17, v21, (uint64_t)a6);
  v12 = *(float *)(a3 + 20);
  if (v12 > 0.0)
  {
    v13 = v16.f64[0];
    v14 = v16.f64[1];
    FigMotionPostMultiplyScalingTranslationToTransform(a6, 1.0 / v12, (float)(1.0 - (float)(1.0 / v12)) * v13, 1.0 / v12, (float)(1.0 - (float)(1.0 / v12)) * v14);
  }
  return 0;
}

float FigMotionRotationMatrixFromQuaternion(double *a1, int a2, float *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v3 = a1[1];
  v4 = a1[2];
  v5 = *a1;
  if (a2)
  {
    v3 = -v3;
    v6 = -a1[3];
  }
  else
  {
    v6 = a1[3];
  }
  v7 = v4 + v4;
  v8 = v3 + v3;
  v9 = v6 + v6;
  v10 = v4;
  v11 = v3;
  v12 = v6;
  v13 = v12 * v9;
  v14 = (float)(1.0 - (float)(v11 * v8)) - v13;
  v15 = 1.0 - (float)(v10 * v7);
  v16 = v15 - v13;
  a3[8] = v15 - (float)(v11 * v8);
  v17 = v11 * v9;
  v18 = v5;
  v19 = v18 * v7;
  v20 = v17 - v19;
  a3[4] = v16;
  a3[5] = v19 + v17;
  v21 = (float)(v10 * v8) - (float)(v18 * v9);
  *a3 = v14;
  a3[1] = (float)(v10 * v8) + (float)(v18 * v9);
  v22 = v18 * v8;
  a3[2] = (float)(v10 * v9) - v22;
  a3[3] = v21;
  result = v22 + (float)(v10 * v9);
  a3[6] = result;
  a3[7] = v20;
  return result;
}

double FigMotionInverseOfQuaternion(uint64_t a1)
{
  return *(double *)a1;
}

double FigMotionQuaternionDotProduct(double *a1, double *a2)
{
  return a1[1] * a2[1] + *a1 * *a2 + a1[2] * a2[2] + a1[3] * a2[3];
}

double FigMotionGetQuaternionLength(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1 + a1[2] * a1[2] + a1[3] * a1[3]);
}

void FigMotionAttitudeFromQuaternion(long double *a1, double a2, double a3, double a4, double a5)
{
  double v9;
  double v10;
  double v11;
  double v12;

  v9 = a4 + a4;
  v10 = a5 + a5;
  v11 = a3 + a3;
  v12 = 1.0 - a3 * (a3 + a3);
  a1[2] = -atan2(a3 * (a4 + a4) - a2 * (a5 + a5), v12 - a5 * (a5 + a5));
  *a1 = -atan2(a3 * v10 - a2 * v9, v12 - a4 * v9);
  a1[1] = asin(a2 * v11 + a4 * v10);
}

float FigMotionAdjustParallaxShiftForScalingFactor(float result, double a2, float a3, float a4)
{
  if (a3 > 0.0 && vabds_f32(a3, a4) > 0.001)
    return result * (float)(a4 / a3);
  return result;
}

uint64_t FigMotionComputeDistortionCenter(const __CFDictionary *a1, int a2, int a3, int a4, int a5, float64x2_t *a6, float a7, float a8)
{
  double v14;
  double v15;
  CGPoint v17;
  CGPoint point;
  CGPoint v19;
  float64x2_t v20;
  void *value;

  value = 0;
  point = (CGPoint)*MEMORY[0x1E0C9D538];
  v19 = point;
  v17 = point;
  if (a1 && a6)
  {
    v14 = ((double)a2 + -1.0) * 0.5;
    v15 = ((double)a3 + -1.0) * 0.5;
    v20.f64[0] = v14;
    v20.f64[1] = v15;
    if (FigMotionComputeSensorCroppedReferenceCenter(a1, (float64x2_t *)&v19))
    {
      if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E0D069D0], (const void **)&value)
        && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point))
      {
        v20.f64[0] = v14 + (point.x - v19.x) * a8 * (double)a4;
        v20.f64[1] = v15 + (point.y - v19.y) * a8 * (double)a5;
      }
      else if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E0D06CE0], (const void **)&value)
             && CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &v17))
      {
        v20.f64[0] = v14 + (v17.x - v19.x) * a8 * (double)a4;
        v20.f64[1] = v15 + (v17.y - v19.y) * a8 * (double)a5;
        if (FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v20, a7, a8))
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
      }
    }
    *a6 = v20;
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeOpticalCenterInBuffer(const __CFDictionary *a1, unint64_t a2, uint64_t a3, int a4, uint64_t a5, float64x2_t *a6, float a7)
{
  int v9;
  int v11;
  unint64_t v14;
  uint64_t result;
  float v16;
  CGPoint point;
  float64x2_t v18;
  void *value;

  value = 0;
  point = (CGPoint)*MEMORY[0x1E0C9D538];
  if (a1 && a6)
  {
    v9 = a5;
    v11 = a3;
    v14 = HIDWORD(a2);
    v16 = 1.0;
    if (FigMotionComputeLensPositionScalingFactor(a1, a2, a3, a3, a5, &v16))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v18.f64[0] = ((double)(int)a2 + -1.0) * 0.5;
    v18.f64[1] = ((double)(int)v14 + -1.0) * 0.5;
    if (!CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E0D06CE0], (const void **)&value)
      || !CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point)
      || (result = FigMotionMapPointFromRawToBuffer(a1, a2, v11, a4, &v18, point.x, point.y, v16), !(_DWORD)result))
    {
      if (!v9 || (result = FigMotionAdjustPointForSphereMovement((uint64_t)a1, &v18, a7, v16), !(_DWORD)result))
      {
        result = 0;
        *a6 = v18;
      }
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigMotionMapPointFromRawToBuffer(const __CFDictionary *a1, uint64_t a2, int a3, int a4, float64x2_t *a5, float64_t a6, float64_t a7, float a8)
{
  CGRect *v13;
  uint64_t SensorValidCropRect;
  unint64_t v15;
  int8x16_t v16;
  int64x2_t v17;
  float64x2_t v18;
  float64x2_t v25;
  float64x2_t v26;
  CGSize v28;
  CGPoint v29;
  float64x2_t v32;
  CGRect v33;

  if (a1 && a5)
  {
    v13 = (CGRect *)MEMORY[0x1E0C9D648];
    v28 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
    v29 = (CGPoint)*MEMORY[0x1E0C9D648];
    v32 = *(float64x2_t *)MEMORY[0x1E0C9D648];
    SensorValidCropRect = FigMotionGetSensorValidCropRect(a1);
    if ((_DWORD)SensorValidCropRect)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    else
    {
      FigCFDictionaryGetCGRectIfPresent();
      v33.origin = v29;
      v33.size = v28;
      if (CGRectEqualToRect(v33, *v13))
        v15 = -1;
      else
        v15 = 0;
      v16 = (int8x16_t)vdupq_n_s64(v15);
      v17.i64[0] = (int)a2;
      v17.i64[1] = SHIDWORD(a2);
      v18 = (float64x2_t)vbslq_s8(v16, (int8x16_t)vcvtq_f64_s64(v17), (int8x16_t)v28);
      __asm { FMOV            V1.2D, #-1.0 }
      v17.i64[0] = a3;
      v17.i64[1] = a4;
      __asm { FMOV            V5.2D, #0.5 }
      v25 = vmlaq_f64((float64x2_t)vbicq_s8((int8x16_t)v29, v16), _Q5, vaddq_f64(v18, _Q1));
      v26 = vmlaq_f64(v32, _Q5, vaddq_f64((float64x2_t)v28, _Q1));
      _Q5.f64[0] = a6;
      _Q5.f64[1] = a7;
      *a5 = vmlaq_f64(v25, vcvtq_f64_s64(v17), vmulq_n_f64(vsubq_f64(_Q5, v26), a8));
    }
    return SensorValidCropRect;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeRawSensorCenterInBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 && a5)
  {
    FigCFDictionaryGetIntIfPresent();
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigMotionComputeParallaxShift(float a1, float a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  float v14;
  int FloatIfPresent;
  int v16;
  uint64_t result;
  BOOL v18;
  char v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;

  v27 = NAN;
  if (a5)
    v14 = *(float *)(a5 + 520);
  else
    v14 = 0.0;
  *(_QWORD *)a8 = 0;
  FloatIfPresent = FigCFDictionaryGetFloatIfPresent();
  v16 = FigCFDictionaryGetFloatIfPresent();
  result = FigCFDictionaryGetFloatIfPresent();
  if (FloatIfPresent)
    v18 = v16 == 0;
  else
    v18 = 1;
  v20 = v18 || a7 != 0;
  if (a5 && (v20 & 1) != 0)
  {
    v21 = a5 + 4 * *(unsigned int *)(a5 + 444);
    v22 = *(float *)(v21 + 480);
    v27 = *(float *)(v21 + 492);
    v23 = 1.0;
  }
  else
  {
    v23 = 1.0;
    v22 = NAN;
  }
  v24 = v22 + -10.0;
  v25 = 0.0;
  if (v27 > 0.0 && v24 > v27)
    v25 = (float)((float)(v23 * NAN) * a3) / fmaxf((float)((float)(v24 * v27) / (float)(v24 - v27)) / 1000.0, v14);
  *(float *)a8 = v25 * a1;
  *(float *)(a8 + 4) = v25 * a2;
  return result;
}

uint64_t FigMotionComputeWideToNarrowShift(const __CFDictionary *a1, const __CFDictionary *a2, const void *a3, float64x2_t *a4, float64x2_t *a5, int a6, unsigned int a7, int a8, double a9, double a10, float a11, uint64_t a12, int *a13, uint64_t a14, double *a15, float64x2_t *a16)
{
  int *v22;
  int v23;
  const void *v24;
  const void *Value;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  float v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float32x2_t *v43;
  float32x2_t *v44;
  float v45;
  float v46;
  float v47;
  float32x2_t v48;
  uint64_t v49;
  _QWORD *v50;
  float v51;
  float v52;
  float *v53;
  uint64_t v54;
  float *v55;
  float v56;
  float v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  float v64;
  float v65;
  double v66;
  double v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v76;
  float v77;
  float v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  unsigned int v83;
  unsigned int v84[3];

  if (a1 && a14 && a15)
  {
    v22 = a13;
    if (!a13)
      v22 = (int *)(a14 + 100);
    v23 = *v22;
    v84[0] = 0;
    v24 = (const void *)*MEMORY[0x1E0D06D00];
    Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0D06D00]);
    v26 = bravoTransitionCameraIndexFromPortType(Value, (int *)v84);
    if ((_DWORD)v26)
    {
      v71 = v26;
      fig_log_get_emitter();
      goto LABEL_54;
    }
    v83 = 0;
    if (a2)
      a3 = CFDictionaryGetValue(a2, v24);
    v27 = bravoTransitionCameraIndexFromPortType(a3, (int *)&v83);
    if ((_DWORD)v27)
    {
      v71 = v27;
      fig_log_get_emitter();
      goto LABEL_54;
    }
    v30 = *(float *)(a14 + 152 + 4 * v84[0]);
    if (v30 <= 0.0)
      v31 = 1.0;
    else
      v31 = 1.0 / v30;
    v32 = *(float *)(a14 + 152 + 4 * v83);
    if (v32 <= 0.0)
      v33 = 1.0;
    else
      v33 = 1.0 / v32;
    v82 = 1.0;
    if (FigMotionComputeLensPositionScalingFactor(a1, a6, v28, *(_DWORD *)(a14 + 4 * v84[0] + 164) * a8, v29, &v82))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    v81 = 0;
    v34 = v31 * v82;
    v35 = 0.0;
    v78 = v31 * v82;
    if ((v23 & 1) == 0)
    {
      v76 = 0u;
      v36 = 0.0;
      v37 = 0.0;
      v38 = 0.0;
      goto LABEL_32;
    }
    v39 = FigMotionComputeAverageSpherePosition();
    if (!(_DWORD)v39)
    {
      v41 = v83;
      v40 = v84[0];
      v34 = v78;
      v42 = v78
          * (float)((float)(v33
                          * (float)((float)((float)((float)(*(float *)(a14
                                                                     + 4
                                                                     * BravoCurrentToReferenceMapping[3 * v83 + v84[0]]
                                                                     + 176)
                                                          * *(float *)(a14 + 140 + 4 * v84[0]))
                                                  / *(float *)(a14 + 140 + 4 * v83))
                                          * (float)*(int *)(a14 + 164 + 4 * v84[0]))
                                  / (float)*(int *)(a14 + 164 + 4 * v83)))
                  / v31);
      if (!a2)
      {
        v43 = (float32x2_t *)(a14 + 8 * v84[0]);
        v45 = v43[6].f32[0];
        v44 = v43 + 6;
        v46 = v45;
        if (vabds_f32(v81.f32[0], v45) < (float)(0.8 / v78))
        {
          v47 = *(float *)(a14 + 8 * v84[0] + 52);
          if (vabds_f32(v81.f32[1], v47) < (float)(0.8 / v78))
          {
            v81.f32[0] = (float)(v81.f32[0] * 0.06) + (float)(v46 * 0.94);
            v81.f32[1] = (float)(v81.f32[1] * 0.06) + (float)(v47 * 0.94);
          }
        }
        v48 = v81;
        *v44 = v81;
        v49 = a14 + 8 * v41;
        v51 = *(float *)(v49 + 48);
        v50 = (_QWORD *)(v49 + 48);
        v52 = v51;
        v53 = (float *)v50 + 127;
        v54 = *(v50 - 3);
        *(_QWORD *)((char *)v50 + 508) = v54;
        if (vabds_f32(*(float *)&v54, v51) < (float)(0.8 / v42))
        {
          v55 = (float *)(a14 + 8 * v41 + 560);
          v56 = *v55;
          v57 = *(float *)(a14 + 8 * v41 + 52);
          if (vabds_f32(*v55, v57) < (float)(0.8 / v42))
          {
            *v53 = (float)(*(float *)&v54 * 0.06) + (float)(v52 * 0.94);
            *v55 = (float)(v56 * 0.06) + (float)(v57 * 0.94);
          }
        }
        v58 = *(_QWORD *)v53;
        *v50 = v58;
        v36 = (float)(v42 * COERCE_FLOAT(HIDWORD(v58) ^ 0x80000000)) + (float)(v48.f32[1] * v78);
        v81.f32[0] = (float)(v42 * COERCE_FLOAT(v58 ^ 0x80000000)) + (float)(v48.f32[0] * v78);
        v81.f32[1] = v36;
        goto LABEL_31;
      }
      v77 = v78
          * (float)((float)(v33
                          * (float)((float)((float)((float)(*(float *)(a14
                                                                     + 4
                                                                     * BravoCurrentToReferenceMapping[3 * v83 + v84[0]]
                                                                     + 176)
                                                          * *(float *)(a14 + 140 + 4 * v84[0]))
                                                  / *(float *)(a14 + 140 + 4 * v83))
                                          * (float)*(int *)(a14 + 164 + 4 * v84[0]))
                                  / (float)*(int *)(a14 + 164 + 4 * v83)))
                  / v31);
      v80 = 0;
      v39 = FigMotionComputeAverageSpherePosition();
      if (!(_DWORD)v39)
      {
        v42 = v77;
        v34 = v78;
        v81 = vmla_n_f32(vmul_n_f32(vneg_f32(v80), v77), v81, v78);
        v41 = v83;
        v40 = v84[0];
        v36 = v81.f32[1];
LABEL_31:
        v38 = v81.f32[0];
        v37 = v36;
        v76 = vcvtq_f64_f32(vmla_n_f32(vmul_n_f32(vneg_f32(*(float32x2_t *)(a14 + 72 + 8 * v41)), v42), *(float32x2_t *)(a14 + 72 + 8 * v40), v34));
LABEL_32:
        v59 = 0.0;
        if ((v23 & 4) == 0)
        {
LABEL_39:
          v66 = 0.0;
          v67 = 0.0;
          if ((v23 & 2) == 0)
            goto LABEL_44;
          v80 = 0;
          if (!a5 || !a4)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
            return FigSignalErrorAt();
          }
          v79 = vmul_f32(vcvt_f32_s32(vadd_s32((int32x2_t)__PAIR64__(a7, a6), (int32x2_t)-1)), (float32x2_t)0x3F0000003F000000);
          v69 = v83;
          v68 = v84[0];
          *(float32x2_t *)(a14 + 104 + 8 * v83) = vcvt_f32_f64(*a5);
          *(float32x2_t *)(a14 + 104 + 8 * v68) = vcvt_f32_f64(*a4);
          *(_DWORD *)(a14 + 540) = v69;
          v70 = FigMotionComputeBravoTranslation(v82, v34, (uint64_t)a1, a14 + 100, v68, (float *)&v79, (float *)&v80);
          if (!(_DWORD)v70)
          {
            v81.f32[0] = v80.f32[0] + v81.f32[0];
            v36 = v80.f32[1] + v81.f32[1];
            v66 = v80.f32[0];
            v67 = v80.f32[1];
LABEL_44:
            *a15 = v81.f32[0];
            a15[1] = v36;
            v71 = 0;
            if (a16)
            {
              a16->f64[0] = v38;
              a16->f64[1] = v37;
              a16[1] = v76;
              a16[2].f64[0] = v35;
              a16[2].f64[1] = v59;
              a16[3].f64[0] = v66;
              a16[3].f64[1] = v67;
            }
            return v71;
          }
          v71 = v70;
          fig_log_get_emitter();
LABEL_54:
          FigDebugAssert3();
          return v71;
        }
        v61 = v83;
        v60 = v84[0];
        if (v84[0] == 2)
        {
          *(_DWORD *)(a14 + 544) = v83;
          v62 = 1;
          if (!a2)
            goto LABEL_38;
        }
        else
        {
          v62 = 0;
          if (!a2)
          {
LABEL_38:
            v63 = a14 + 48 * BravoCurrentToReferenceMapping[3 * v61 + v60];
            FigMotionComputeParallaxShift(*(float *)(v63 + 216), *(float *)(v63 + 232), v34, (uint64_t)a1, a14 + 100, v60, v62, a14 + 548);
            v34 = v78;
            v64 = *(float *)(a14 + 548);
            v65 = *(float *)(a14 + 552);
            v36 = v81.f32[1] + (float)(v65 * a11);
            v81.f32[0] = v81.f32[0] + (float)(v64 * a11);
            v81.f32[1] = v36;
            v35 = v64;
            v59 = v65;
            goto LABEL_39;
          }
        }
        FigMotionStashFocalLengthData((uint64_t)a2, a14 + 100);
        FigCFDictionaryGetInt32IfPresent();
        v34 = v78;
        v61 = v83;
        v60 = v84[0];
        goto LABEL_38;
      }
    }
    v71 = v39;
    fig_log_get_emitter();
    goto LABEL_54;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigMotionSphereShiftStateUpdateWithMetadata(uint64_t a1, CFDictionaryRef theDict)
{
  const void *Value;
  float32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const __CFDictionary *v10;
  const void *v11;
  const void *v12;
  float32x2_t v13;
  uint64_t v14;
  unsigned int v16;
  void *key;
  unsigned int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06D00]);
  v16 = bravoTransitionCameraIndexFromPortType(Value, (int *)&v18);
  if (v16)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    FigMotionStashFocalLengthData((uint64_t)theDict, a1 + 100);
    FigMotionStashQuadraBinningFactor((uint64_t)theDict, a1 + 100);
    FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(a1, (uint64_t)theDict, v18, v5);
    FigMotionUpdateBaseZoomFactorAdjustment((uint64_t)theDict, a1 + 100);
    FigMotionUpdateSagPositionUsingOISShift(a1, v18, *(float *)(a1 + 8 * v18 + 24), *(float *)(a1 + 8 * v18 + 28));
    v6 = 0;
    v7 = *MEMORY[0x1E0D05A30];
    v19[0] = *MEMORY[0x1E0D05A18];
    v19[1] = v7;
    v19[2] = *MEMORY[0x1E0D05A28];
    v8 = (const void *)*MEMORY[0x1E0D06ED8];
    key = (void *)*MEMORY[0x1E0D06ED0];
    do
    {
      v9 = (const void *)v19[v6];
      if (!CFEqual(Value, v9) && !bravoTransitionCameraIndexFromPortType(v9, (int *)&v18))
      {
        v10 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v8);
        if (v10)
        {
          v11 = v9;
        }
        else
        {
          v10 = theDict;
          v11 = key;
        }
        v12 = CFDictionaryGetValue(v10, v11);
        v14 = (uint64_t)v12;
        if (v12)
        {
          FigMotionStashFocalLengthData((uint64_t)v12, a1 + 100);
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetFloatIfPresent();
        }
        FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(a1, v14, v18, v13);
        FigMotionUpdateSagPositionUsingOISShift(a1, v18, *(float *)(a1 + 8 * v18 + 24), *(float *)(a1 + 8 * v18 + 28));
      }
      ++v6;
    }
    while (v6 != 3);
  }
  return v16;
}

float32x2_t FigMotionComputeShiftStateAverageSpherePositionWithFrameSkipping(uint64_t a1, uint64_t a2, unsigned int a3, float32x2_t result)
{
  float32x2_t *v6;
  int v7;
  int v8;
  float32x2_t *v9;
  float32x2_t *v10;
  __int32 v11;
  float32x2_t v12;
  float32x2_t v13;

  v6 = (float32x2_t *)(a1 + 8 * a3 + 556);
  *v6 = 0;
  if (a2 && FigCFDictionaryGetInt32IfPresent() && FigCFDictionaryGetInt32IfPresent())
  {
    result = vmul_f32(vcvt_f32_s32(0), (float32x2_t)vdup_n_s32(0x3B800000u));
    *v6 = result;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(unsigned __int8 *)(a1 + 96) | v7;
  *(_BYTE *)(a1 + 96) |= v7;
  if (v8)
  {
    v9 = (float32x2_t *)(a1 + 8 * a3);
    v11 = v9->i32[0];
    v10 = v9 + 3;
    v12.i32[0] = v11;
    if (v7)
    {
      v13 = *v6;
      result = vmul_f32(vadd_f32(*v10, *v6), (float32x2_t)0x3F0000003F000000);
      *v10 = result;
      *(float32x2_t *)(a1 + 8 * a3) = v13;
    }
    else
    {
      v12.i32[1] = *(_DWORD *)(a1 + 8 * a3 + 4);
      result = vmul_f32(vadd_f32(v12, *v10), (float32x2_t)0x3F0000003F000000);
      *v10 = result;
    }
  }
  return result;
}

uint64_t FigMotionUpdateSagPositionUsingOISShift(uint64_t result, unsigned int a2, float a3, float a4)
{
  float *v4;
  float v5;
  double v6;
  float v7;
  float v8;

  v4 = (float *)(result + 8 * a2);
  v5 = v4[18];
  v4 += 18;
  v6 = *(double *)(result + 632);
  v7 = (1.0 - v6) * v5 + v6 * a3;
  v8 = (1.0 - v6) * v4[1] + v6 * a4;
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t FigMotionHardwareAvailable()
{
  size_t v1;
  char __big[16];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)__big = 0u;
  v3 = 0u;
  v1 = 64;
  if ((FigMotionHardwareAvailable_checked & 1) == 0)
  {
    FigMotionHardwareAvailable_available = 1;
    if (!sysctlbyname("hw.model", __big, &v1, 0, 0) && strnstr(__big, "DEV", 0x40uLL))
      FigMotionHardwareAvailable_available = 0;
    FigMotionHardwareAvailable_checked = 1;
  }
  return FigMotionHardwareAvailable_available;
}

uint64_t FigMotionComputeAverageQuaternionFromArray(const __CFArray *a1, _OWORD *a2, double a3, double a4)
{
  int Count;
  CFIndex v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  const __CFArray *ValueAtIndex;
  const __CFArray *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFData *v18;
  const __CFData *v19;
  double v20;
  double *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  __int128 v31;
  UInt8 buffer[16];
  __int128 v33;
  double valuePtr;
  __int128 v35;
  __int128 v36;
  _BYTE v37[16];
  _QWORD v38[120];
  CFRange v39;

  v38[118] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v35 = 0u;
    v36 = 0u;
    if (Count < 1)
      goto LABEL_21;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = Count;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v9);
      if (ValueAtIndex)
      {
        v15 = ValueAtIndex;
        if ((int)CFArrayGetCount(ValueAtIndex) >= 1)
        {
          v16 = (const __CFNumber *)CFArrayGetValueAtIndex(v15, 0);
          if (v16)
          {
            v17 = v16;
            v18 = (const __CFData *)CFArrayGetValueAtIndex(v15, 2);
            if (v18)
            {
              v19 = v18;
              valuePtr = 0.0;
              CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
              v20 = valuePtr;
              if (valuePtr > a3 + -0.0025 && valuePtr < a4 + 0.0025 && v10 <= 19)
              {
                *(_OWORD *)buffer = 0u;
                v33 = 0u;
                v39.length = CFDataGetLength(v19);
                v39.location = 0;
                CFDataGetBytes(v19, v39, buffer);
                v20 = valuePtr;
                v21 = (double *)&v37[48 * v10];
                v21[1] = valuePtr;
                v22 = v33;
                *((_OWORD *)v21 + 1) = *(_OWORD *)buffer;
                *((_OWORD *)v21 + 2) = v22;
                ++v10;
              }
              v11 |= vabdd_f64(v20, a3) < 0.0035;
              v12 |= vabdd_f64(v20, a4) < 0.0035;
            }
          }
        }
      }
      ++v9;
    }
    while (v13 != v9);
    if (v10 && (v11 & 1) != 0 && (v12 & 1) != 0)
    {
      v35 = 0x3FF0000000000000uLL;
      v36 = 0uLL;
      if (v10 >= 1)
      {
        v23 = 0;
        v24 = v38;
        do
        {
          v25 = 1.0 - 1.0 / ((double)(int)v23 + 1.0);
          FigMotionInterpolateQuaternionsByAngle((uint64_t)v24, (double *)&v35, v25);
          *(_QWORD *)&v35 = v26;
          *((_QWORD *)&v35 + 1) = v27;
          *(_QWORD *)&v36 = v28;
          *((_QWORD *)&v36 + 1) = v29;
          ++v23;
          v24 += 6;
        }
        while (v10 != v23);
      }
      result = 0;
      v31 = v36;
      *a2 = v35;
      a2[1] = v31;
    }
    else
    {
LABEL_21:
      fig_log_get_emitter();
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return result;
}

BOOL IDsEqualAboveFirstHexDigit(unsigned int a1, int a2)
{
  return (a2 ^ a1) < 0x10;
}

uint64_t sbp_ma_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  const void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v2 = *(void **)(DerivedStorage + 32);
    if (v2)
    {
      FigCoreMotionRelease(v2);
      *(_QWORD *)(v1 + 32) = 0;
    }
    v3 = *(void **)(v1 + 600);
    if (v3)
    {
      *(_QWORD *)(v1 + 600) = 0;
      free(v3);
    }
    v4 = *(void **)(v1 + 608);
    if (v4)
    {
      *(_QWORD *)(v1 + 608) = 0;
      free(v4);
    }
    v5 = *(void **)(v1 + 616);
    if (v5)
    {
      *(_QWORD *)(v1 + 616) = 0;
      free(v5);
    }
    v6 = *(const void **)(v1 + 584);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(v1 + 584) = 0;
    }
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = v1 + 8 * v7;
      v11 = *(const void **)(v10 + 624);
      if (v11)
      {
        v12 = (_QWORD *)(v10 + 624);
        CFRelease(v11);
        *v12 = 0;
      }
      v8 = 0;
      v7 = 1;
    }
    while ((v9 & 1) != 0);
    v13 = *(void **)(v1 + 640);
    if (v13)
    {
      *(_QWORD *)(v1 + 640) = 0;
      free(v13);
    }
    sbp_ma_releaseBufferedFrames(v1);
    v14 = *(void **)(v1 + 48);
    if (v14)
    {
      *(_QWORD *)(v1 + 48) = 0;
      free(v14);
    }
    *(_BYTE *)(v1 + 24) = 0;
  }
  return 0;
}

__CFString *sbp_ma_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_MotionAttachments %p>"), a1);
  return Mutable;
}

uint64_t sbp_ma_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && a4 && !*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t sbp_ma_setProperty(uint64_t a1)
{
  if (a1 && !*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954512;
  else
    return FigSignalErrorAt();
}

uint64_t sbp_ma_processSampleBuffer(uint64_t a1, void *a2)
{
  _BYTE *DerivedStorage;
  uint64_t v4;
  const __CFString *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const void *v8;
  const __CFArray *Value;
  const __CFArray *v10;
  const void *v11;
  CMFormatDescriptionRef FormatDescription;
  const opaqueCMFormatDescription *v13;
  uint64_t Count;
  CFIndex v15;
  const __CFDictionary *v16;
  const __CFDictionary *ValueAtIndex;
  uint64_t v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  opaqueCMSampleBuffer *v28;
  int v29;
  void (*v30)(_QWORD, uint64_t, opaqueCMSampleBuffer *);
  const void *v32;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v4 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v23 = FigSignalErrorAt();
    goto LABEL_49;
  }
  if (!DerivedStorage[576])
    goto LABEL_28;
  v5 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v6 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!v6)
    goto LABEL_28;
  v7 = v6;
  v8 = (const void *)*MEMORY[0x1E0D082D8];
  Value = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E0D082D8]);
  if (!Value)
  {
    v19 = (const __CFDictionary *)CMGetAttachment(a2, v5, 0);
    v20 = v19;
    if (*(_BYTE *)(v4 + 664))
    {
      v21 = (const __CFDictionary *)CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E0D082D0]);
      if (!v21)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v22 = FigSignalErrorAt();
LABEL_22:
        v23 = v22;
        if ((_DWORD)v22)
        {
LABEL_47:
          fig_log_get_emitter();
          FigDebugAssert3();
LABEL_49:
          v28 = 0;
          goto LABEL_39;
        }
        goto LABEL_28;
      }
      v20 = v21;
      CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E0D082E0]);
      if (FigCFEqual())
        goto LABEL_28;
    }
    v22 = sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(v4, v20);
    goto LABEL_22;
  }
  v10 = Value;
  if (*(_DWORD *)(v4 + 64) != 1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  if (*(_DWORD *)(v4 + 44))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  if (*(_DWORD *)(v4 + 64) == 1)
  {
    v11 = *(const void **)(v4 + 656);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v4 + 656) = 0;
    }
    *(_BYTE *)(v4 + 664) = 1;
    FormatDescription = CMSampleBufferGetFormatDescription((CMSampleBufferRef)a2);
    if (!FormatDescription)
      goto LABEL_50;
    v13 = FormatDescription;
    Count = CFArrayGetCount(v10);
    *(_QWORD *)(v4 + 656) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
    if (Count >= 1)
    {
      v15 = 0;
      v16 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v15);
        v18 = sbp_ma_processInitialCinematicFutureMetadata(v4, v16, ValueAtIndex, v13);
        if ((_DWORD)v18)
          goto LABEL_44;
        ++v15;
        v16 = ValueAtIndex;
        if (Count == v15)
          goto LABEL_25;
      }
    }
    ValueAtIndex = 0;
LABEL_25:
    v24 = (const __CFDictionary *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E0D082D0]);
    if (v24)
    {
      v18 = sbp_ma_processInitialCinematicFutureMetadata(v4, ValueAtIndex, v24, v13);
      if ((_DWORD)v18)
      {
LABEL_44:
        v23 = v18;
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_45;
      }
      CFDictionaryRemoveValue(v7, v8);
    }
    else
    {
LABEL_50:
      fig_log_get_emitter();
      FigDebugAssert3();
      v23 = FigSignalErrorAt();
      if ((_DWORD)v23)
      {
LABEL_45:
        v32 = *(const void **)(v4 + 656);
        if (v32)
        {
          CFRelease(v32);
          *(_QWORD *)(v4 + 656) = 0;
        }
        goto LABEL_47;
      }
    }
  }
LABEL_28:
  v25 = *(_DWORD *)(v4 + 64);
  if (v25)
  {
    if (*(_DWORD *)(v4 + 44) == v25)
    {
      v26 = *(_QWORD *)(v4 + 48);
      v27 = *(int *)(v4 + 56);
      v28 = *(opaqueCMSampleBuffer **)(v26 + 8 * v27);
      *(_QWORD *)(v26 + 8 * v27) = 0;
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * *(int *)(v4 + 60)) = CFRetain(a2);
    FigMotionIncreaseRingIndex((int *)(v4 + 60), *(_DWORD *)(v4 + 64));
    FigMotionIncreaseRingIndex((int *)(v4 + 56), *(_DWORD *)(v4 + 64));
    v29 = *(_DWORD *)(v4 + 44);
    if (v29 < *(_DWORD *)(v4 + 64))
      *(_DWORD *)(v4 + 44) = v29 + 1;
  }
  else
  {
    v28 = (opaqueCMSampleBuffer *)CFRetain(a2);
  }
  if (v28)
  {
    v23 = sbp_ma_attachMotionData(v4, v28);
    if ((_DWORD)v23)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    v23 = 0;
  }
LABEL_39:
  v30 = *(void (**)(_QWORD, uint64_t, opaqueCMSampleBuffer *))(v4 + 8);
  if (v30)
  {
    v30(*(_QWORD *)(v4 + 16), v23, v28);
    v23 = 0;
  }
  if (v28)
    CFRelease(v28);
  return v23;
}

uint64_t sbp_ma_finishPendingProcessing()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  opaqueCMSampleBuffer *i;
  uint64_t v5;
  void (*v6)(_QWORD, uint64_t, opaqueCMSampleBuffer *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v2 = DerivedStorage;
  if (*(int *)(DerivedStorage + 64) >= 1)
  {
    v3 = *(unsigned int *)(DerivedStorage + 56);
    if ((v3 & 0x80000000) == 0)
    {
      for (i = *(opaqueCMSampleBuffer **)(*(_QWORD *)(DerivedStorage + 48) + 8 * v3);
            i;
            i = *(opaqueCMSampleBuffer **)(*(_QWORD *)(v2 + 48) + 8 * *(int *)(v2 + 56)))
      {
        if (*(_QWORD *)(v2 + 640))
          FigMotionIncreaseRingIndex((int *)(v2 + 648), *(_DWORD *)(v2 + 64) + 1);
        v5 = sbp_ma_attachMotionData(v2, i);
        if ((_DWORD)v5)
        {
          fig_log_get_emitter();
          FigDebugAssert3();
        }
        v6 = *(void (**)(_QWORD, uint64_t, opaqueCMSampleBuffer *))(v2 + 8);
        if (v6)
          v6(*(_QWORD *)(v2 + 16), v5, i);
        CFRelease(i);
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * *(int *)(v2 + 56)) = 0;
        FigMotionIncreaseRingIndex((int *)(v2 + 56), *(_DWORD *)(v2 + 64));
      }
    }
  }
  sbp_ma_resetStorage(v2);
  return 0;
}

uint64_t sbp_ma_attachMotionData(uint64_t a1, CMSampleBufferRef sbuf)
{
  CMFormatDescriptionRef FormatDescription;
  const opaqueCMFormatDescription *v5;
  const __CFString *v6;
  __CFDictionary *v7;
  __CFDictionary *Mutable;
  const void *v9;
  const void *v10;
  const void *v11;
  const __CFDictionary *Value;
  const __CFDictionary *v13;
  uint64_t v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  uint64_t v17;
  const __CFDictionary *v18;
  uint64_t v19;
  CMTime v21;
  CMTime v22;

  memset(&v22, 0, sizeof(v22));
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (FormatDescription)
  {
    v5 = FormatDescription;
    v6 = (const __CFString *)*MEMORY[0x1E0D05CB0];
    v7 = (__CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    Mutable = v7;
    if (v7
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
    {
      if (*(_BYTE *)(a1 + 664))
      {
        v9 = *(const void **)(a1 + 656);
        if (v9)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D082D8], v9);
          v10 = *(const void **)(a1 + 656);
          if (v10)
          {
            CFRelease(v10);
            *(_QWORD *)(a1 + 656) = 0;
          }
        }
        v11 = (const void *)*MEMORY[0x1E0D082D0];
        Value = (const __CFDictionary *)CFDictionaryGetValue(Mutable, (const void *)*MEMORY[0x1E0D082D0]);
        if (!Value)
          goto LABEL_25;
        v13 = Value;
        CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0D082E0]);
        if (FigCFEqual())
        {
          CFDictionaryRemoveValue(Mutable, v11);
          v14 = 0;
          if (!v7)
            goto LABEL_20;
          return v14;
        }
        v16 = (const __CFDictionary *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0D05D00]);
        if (!v16)
        {
LABEL_25:
          fig_log_get_emitter();
          FigDebugAssert3();
          v19 = FigSignalErrorAt();
LABEL_19:
          v14 = v19;
          if (!v7)
          {
LABEL_20:
            CMSetAttachment(sbuf, v6, Mutable, 1u);
            CFRelease(Mutable);
          }
          return v14;
        }
        CMTimeMakeFromDictionary(&v22, v16);
        v21 = v22;
        v17 = a1;
        v18 = v13;
      }
      else
      {
        v15 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
        if (v15)
          CMTimeMakeFromDictionary(&v22, v15);
        else
          CMSampleBufferGetPresentationTimeStamp(&v22, sbuf);
        v21 = v22;
        v17 = a1;
        v18 = Mutable;
      }
      v19 = sbp_ma_addMotionDataToMetadataDictionary(v17, v18, &v21, v5);
      goto LABEL_19;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t sbp_ma_processInitialCinematicFutureMetadata(uint64_t a1, const __CFDictionary *a2, CFDictionaryRef theDict, const opaqueCMFormatDescription *a4)
{
  uint64_t v7;
  const __CFDictionary *Value;
  uint64_t v9;
  CMTime v11;
  CMTime v12;

  v7 = sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(a1, theDict);
  if ((_DWORD)v7)
  {
    v9 = v7;
    fig_log_get_emitter();
    goto LABEL_11;
  }
  if (!a2)
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D05D00]);
  if (Value)
  {
    memset(&v12, 0, sizeof(v12));
    CMTimeMakeFromDictionary(&v12, Value);
    v11 = v12;
    v9 = sbp_ma_addMotionDataToMetadataDictionary(a1, a2, &v11, a4);
    if (!(_DWORD)v9)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 656), a2);
      return v9;
    }
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    return v9;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t sbp_ma_extractAndBufferISPMotionDataFromMetadataDictionary(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFDictionary *v2;
  uint64_t v4;
  int v5;
  uint64_t MotionDataFromISP;
  uint64_t v7;
  const __CFData *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  CFNumberRef v13;
  CFDataRef v14;
  CFArrayRef v15;
  CFIndex Count;
  uint64_t v17;
  uint64_t v18;
  const __CFAllocator *v19;
  uint64_t v20;
  CFNumberRef v21;
  CFDataRef v22;
  CFDataRef v23;
  CFArrayRef v24;
  uint64_t v25;
  float32x2_t *v26;
  float32x2_t v27;
  const void *Value;
  uint64_t v29;
  uint64_t v30;
  CFIndex v31;
  uint64_t v33;
  uint64_t v34;
  const __CFAllocator *v35;
  const CFArrayCallBacks *v36;
  CFNumberRef v37;
  CFDataRef v38;
  CFArrayRef v39;
  const __CFDictionary *v41;
  double valuePtr;
  uint64_t v43;
  float32x2_t v44;
  __int32 v45;
  void *values;
  CFDataRef v47;
  CFDataRef v48;
  CFDataRef v49;
  uint64_t v50;

  v2 = theDict;
  v50 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v43 = 0;
  v44 = 0;
  v4 = *(int *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 560);
  MotionDataFromISP = FigMotionGetMotionDataFromISP(theDict, *(float64x2_t **)(a1 + 600), *(_QWORD *)(a1 + 616), 110, (int *)&v43 + 1, &v44, *(_QWORD *)(a1 + 608), 510, (int *)&v43);
  if ((_DWORD)MotionDataFromISP)
  {
    v29 = MotionDataFromISP;
    fig_log_get_emitter();
LABEL_46:
    FigDebugAssert3();
    return v29;
  }
  if (SHIDWORD(v43) >= 1)
  {
    v41 = v2;
    v7 = (v4 << 8) + 256;
    v8 = (const __CFData *)*MEMORY[0x1E0C9AE40];
    if (v5 < 1)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 584));
      if (Count + SHIDWORD(v43) < v7 && SHIDWORD(v43) >= 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v20 = 8;
        do
        {
          valuePtr = 0.0;
          valuePtr = *(double *)(*(_QWORD *)(a1 + 600) + v20) - *(double *)(a1 + 568);
          v21 = CFNumberCreate(v19, kCFNumberDoubleType, &valuePtr);
          v22 = CFDataCreate(v19, (const UInt8 *)(*(_QWORD *)(a1 + 600) + v20 + 8), 32);
          v23 = CFDataCreate(v19, (const UInt8 *)(*(_QWORD *)(a1 + 616) + v17), 12);
          values = v21;
          v47 = v8;
          v48 = v22;
          v49 = v23;
          v24 = CFArrayCreate(v19, (const void **)&values, 4, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 584), v24);
          if (v21)
            CFRelease(v21);
          if (v22)
            CFRelease(v22);
          if (v23)
            CFRelease(v23);
          if (v24)
            CFRelease(v24);
          ++v18;
          v17 += 12;
          v20 += 48;
        }
        while (v18 < SHIDWORD(v43));
      }
    }
    else
    {
      v9 = 0;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v11 = 8;
      v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        valuePtr = 0.0;
        valuePtr = *(double *)(*(_QWORD *)(a1 + 600) + v11) - *(double *)(a1 + 568);
        v13 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
        v14 = CFDataCreate(v10, (const UInt8 *)(*(_QWORD *)(a1 + 600) + v11 + 8), 32);
        values = v13;
        v47 = v8;
        v48 = v14;
        v15 = CFArrayCreate(v10, (const void **)&values, 3, v12);
        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 584), *(int *)(a1 + 592), v15);
        *(_DWORD *)(a1 + 592) = (*(int *)(a1 + 592) + 1) % v7;
        if (v13)
          CFRelease(v13);
        if (v14)
          CFRelease(v14);
        if (v15)
          CFRelease(v15);
        ++v9;
        v11 += 48;
      }
      while (v9 < SHIDWORD(v43));
    }
    v25 = *(_QWORD *)(a1 + 640);
    v2 = v41;
    if (v25)
    {
      v26 = (float32x2_t *)(v25 + 12 * *(int *)(a1 + 652));
      v27 = v44;
      v26[1].i32[0] = v45;
      *v26 = v27;
      FigMotionIncreaseRingIndex((int *)(a1 + 652), *(_DWORD *)(a1 + 64) + 1);
      FigMotionIncreaseRingIndex((int *)(a1 + 648), *(_DWORD *)(a1 + 64) + 1);
    }
  }
  if ((int)v43 < 1)
    return 0;
  LODWORD(valuePtr) = 0;
  Value = CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0D06D00]);
  v29 = hallPositionIndexFromPortType(Value, &valuePtr);
  if ((_DWORD)v29)
  {
    fig_log_get_emitter();
    goto LABEL_46;
  }
  v30 = ((uint64_t)*(int *)(a1 + 64) << 9) + 512;
  v31 = CFArrayGetCount(*(CFArrayRef *)(a1 + 8 * LODWORD(valuePtr) + 624));
  if (v31 + (int)v43 < v30 && (int)v43 >= 1)
  {
    v33 = 0;
    v34 = 0;
    v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v36 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v37 = CFNumberCreate(v35, kCFNumberDoubleType, (const void *)(*(_QWORD *)(a1 + 608) + v33));
      v38 = CFDataCreate(v35, (const UInt8 *)(*(_QWORD *)(a1 + 608) + v33 + 8), 8);
      values = v37;
      v47 = v38;
      v39 = CFArrayCreate(v35, (const void **)&values, 2, v36);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 8 * LODWORD(valuePtr) + 624), v39);
      if (v37)
        CFRelease(v37);
      if (v38)
        CFRelease(v38);
      if (v39)
        CFRelease(v39);
      ++v34;
      v33 += 24;
    }
    while (v34 < (int)v43);
  }
  return v29;
}

uint64_t sbp_ma_addMotionDataToMetadataDictionary(uint64_t a1, const __CFDictionary *a2, CMTime *a3, CMVideoFormatDescriptionRef videoDesc)
{
  int v7;
  unint64_t Dimensions;
  uint64_t i;
  uint64_t v10;
  const void *Value;
  const void *v12;
  double Seconds;
  double v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  void *v18;
  const __CFAllocator *v19;
  CFDataRef v20;
  CFDataRef v21;
  uint64_t v22;
  int Int32IfPresent;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  float v29;
  const __CFArray *v30;
  const __CFArray *v31;
  CFNumberRef v32;
  uint64_t v33;
  CFDictionaryRef v34;
  uint64_t v35;
  CFMutableArrayRef Mutable;
  __CFArray *v37;
  uint64_t v38;
  char v39;
  const CFArrayCallBacks *v40;
  char v41;
  uint64_t v42;
  const __CFArray *v43;
  const __CFArray *v44;
  const __CFArray *v45;
  CFNumberRef v46;
  CFNumberRef v47;
  CFArrayRef v48;
  CFArrayRef v49;
  CFArrayRef Copy;
  CFArrayRef v51;
  void *v52;
  double v53;
  double v54;
  double v55;
  int v56;
  double v57;
  uint64_t v58;
  const __CFArray *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int QuaternionAndAttitude;
  __int128 v63;
  CFNumberRef v64;
  __int128 v65;
  double v66;
  double v67;
  double v68;
  double v69;
  __int128 v70;
  int v71;
  CFDataRef v72;
  unsigned int v73;
  CFDataRef v74;
  CFDataRef v75;
  int32_t v77;
  int v78;
  CFTypeRef cf1;
  unsigned int v80;
  _OWORD v81[9];
  uint64_t bytes;
  uint64_t v83;
  double v84;
  double valuePtr[4];
  long double v86[3];
  unsigned int v87;
  CMTime time;
  __int128 values;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v84 = 0.0;
  v83 = 0;
  bytes = 0;
  if (!*(_BYTE *)(a1 + 24))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  v7 = *(_DWORD *)(a1 + 560);
  memset(v81, 0, sizeof(v81));
  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  for (i = 0; i != 392; i += 56)
  {
    v10 = a1 + i;
    *(double *)(v10 + 72) = ((double)(int)Dimensions + -1.0) * 0.5;
    *(double *)(v10 + 80) = ((double)SHIDWORD(Dimensions) + -1.0) * 0.5;
  }
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0D06D00]);
  if (Value)
  {
    v12 = Value;
    if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0D05A40]))
    {
      time = *a3;
      Seconds = CMTimeGetSeconds(&time);
      time.value = 0;
      if (FigMotionComputeFramePTSOffsetFromISPCrop(a2, (double *)&time.value))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      v14 = Seconds + *(double *)&time.value;
      FigCFDictionarySetDouble();
      if (!FigCFDictionaryGetInt32IfPresent())
        FigCFDictionaryGetInt32IfPresent();
      if (FigCFDictionaryGetDoubleIfPresent() && v84 <= 0.0)
        v84 = 0.0;
      if (*(_BYTE *)(a1 + 576))
      {
        v15 = *(_DWORD *)(a1 + 648);
        if ((v15 & 0x80000000) == 0)
        {
          v16 = *(_QWORD *)(a1 + 640) + 12 * v15;
          v17 = *(_DWORD *)(v16 + 8);
          bytes = *(_QWORD *)v16;
          LODWORD(v83) = v17;
        }
      }
      else
      {
        v18 = *(void **)(a1 + 32);
        if (v18)
          FigCoreMotionGetGravity(v18, (const char *)&bytes, (uint64_t)&bytes + 4, (uint64_t)&v83);
      }
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v20 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&bytes, 12);
      if (v20)
      {
        v21 = v20;
        CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085A8], v20);
        CFRelease(v21);
        LODWORD(valuePtr[0]) = 1065353216;
        LODWORD(values) = 0;
        cf1 = v12;
        v22 = portIndexFromPortType(v12, (int *)&values);
        if (!(_DWORD)v22)
        {
          LODWORD(v86[0]) = 1;
          Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
          v24 = LODWORD(v86[0]);
          if (Int32IfPresent && SLODWORD(v86[0]) <= 0)
          {
            v24 = 1;
            LODWORD(v86[0]) = 1;
          }
          if (FigMotionComputeLensPositionScalingFactor(a2, Dimensions, HIDWORD(Dimensions), *(_DWORD *)(a1 + 464) * v24, (*(_DWORD *)(a1 + 468) * v24), (float *)valuePtr))
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          FigCFDictionarySetFloat();
          v25 = *(float *)(a1 + 56 * values + 116);
          if (v25 <= 0.0)
            v25 = 1.0;
          v26 = *(float *)valuePtr * v25;
          if (FigCFDictionaryGetFloatIfPresent() && *((float *)v81 + 1) > 0.00000011921)
            goto LABEL_41;
          v27 = Dimensions;
          v28 = *(unsigned __int8 *)(a1 + 472);
          if (CFDictionaryContainsKey(a2, (const void *)*MEMORY[0x1E0D06CF0]))
          {
            if (CFEqual(v12, (CFTypeRef)*MEMORY[0x1E0D05A28])
              || (LODWORD(time.value) = 0, FigCFDictionaryGetIntIfPresent()) && LODWORD(time.value)
              || (CFEqual(v12, (CFTypeRef)*MEMORY[0x1E0D05A38]) || CFEqual(v12, (CFTypeRef)*MEMORY[0x1E0D05A50])) && v28)
            {
              LODWORD(time.value) = 0;
              FigCFDictionaryGetFloatIfPresent();
              v29 = v26 * *(float *)&time.value;
              *((float *)v81 + 1) = v26 * *(float *)&time.value;
              if ((float)(v26 * *(float *)&time.value) > 0.00000011921)
              {
LABEL_39:
                LODWORD(Dimensions) = v27;
                if (v29 <= 0.00000011921)
                  *((float *)v81 + 1) = (float)v27 * 0.7;
LABEL_41:
                FigCFDictionarySetFloat();
                FigCFDictionarySetFloat();
                if ((*(_BYTE *)(a1 + 40) & 0x80) != 0 && v7 <= 0)
                {
                  v30 = sbp_ma_copyAndFlushISPData(*(const __CFArray **)(a1 + 584));
                  if (v30)
                  {
                    v31 = v30;
                    valuePtr[0] = -*(double *)(a1 + 568);
                    v32 = CFNumberCreate(v19, kCFNumberDoubleType, valuePtr);
                    v33 = *MEMORY[0x1E0D085C0];
                    time.value = *MEMORY[0x1E0D085C8];
                    *(_QWORD *)&time.timescale = v33;
                    *(_QWORD *)&values = v32;
                    *((_QWORD *)&values + 1) = v31;
                    v34 = CFDictionaryCreate(v19, (const void **)&time, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085E0], v34);
                    CFRelease(v34);
                    CFRelease(v31);
                    CFRelease(v32);
                  }
                }
                if ((*(_BYTE *)(a1 + 41) & 1) == 0)
                {
                  v35 = 0;
                  goto LABEL_64;
                }
                Mutable = CFArrayCreateMutable(v19, 2, MEMORY[0x1E0C9B378]);
                if (!Mutable)
                {
                  fig_log_get_emitter();
                  FigDebugAssert3();
                  return FigSignalErrorAt();
                }
                v37 = Mutable;
                v77 = Dimensions;
                v78 = v7;
                v38 = 0;
                v35 = 0;
                v39 = 1;
                v40 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                while (1)
                {
                  v41 = v39;
                  v42 = a1 + 8 * v38;
                  if (CFArrayGetCount(*(CFArrayRef *)(v42 + 624)) >= 1)
                  {
                    v43 = *(const __CFArray **)(v42 + 624);
                    LODWORD(values) = v38;
                    v44 = sbp_ma_copyAndFlushISPData(v43);
                    if (v44)
                    {
                      v45 = v44;
                      v46 = CFNumberCreate(v19, kCFNumberIntType, &values);
                      if (!v46)
                      {
                        fig_log_get_emitter();
                        FigDebugAssert3();
                        v35 = FigSignalErrorAt();
                        goto LABEL_59;
                      }
                      v47 = v46;
                      time.value = (CMTimeValue)v46;
                      *(_QWORD *)&time.timescale = v45;
                      v48 = CFArrayCreate(v19, (const void **)&time, 2, v40);
                      if (!v48)
                      {
                        fig_log_get_emitter();
                        FigDebugAssert3();
                        v35 = FigSignalErrorAt();
                        CFRelease(v47);
LABEL_59:
                        CFRelease(v45);
                        if ((_DWORD)v35)
                        {
                          fig_log_get_emitter();
                          FigDebugAssert3();
                        }
                        goto LABEL_55;
                      }
                      v49 = v48;
                      CFArrayAppendValue(v37, v48);
                      CFRelease(v47);
                      CFRelease(v49);
                      CFRelease(v45);
                    }
                    v35 = 0;
                  }
LABEL_55:
                  v39 = 0;
                  v38 = 1;
                  if ((v41 & 1) == 0)
                  {
                    Copy = CFArrayCreateCopy(v19, v37);
                    if (Copy)
                    {
                      v51 = Copy;
                      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085D8], Copy);
                      CFRelease(v51);
                    }
                    CFRelease(v37);
                    v7 = v78;
                    LODWORD(Dimensions) = v77;
LABEL_64:
                    v52 = *(void **)(a1 + 32);
                    if (v52)
                    {
                      if (v7 <= 0)
                      {
                        time.value = 0;
                        FigCoreMotionCopyMotionData(v52, &time);
                        if (time.value)
                        {
                          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085E8], (const void *)time.value);
                          CFRelease((CFTypeRef)time.value);
                        }
                      }
                    }
                    if ((*(_BYTE *)(a1 + 40) & 0x56) == 0)
                      return v35;
                    v53 = (double)SHIDWORD(v83);
                    if (*(_QWORD *)(a1 + 32))
                      v54 = v14 + v84 * -0.5 + 0.005;
                    else
                      v54 = v14 + v84 * -0.5;
                    v55 = v54 + v53 / 1000000.0;
                    if (v7 < 1)
                    {
                      v57 = v54;
                    }
                    else
                    {
                      v56 = *(_DWORD *)(a1 + 560);
                      v57 = v54 + (double)((int)Dimensions - v56) / (double)(2 * (int)Dimensions) * (v55 - v54);
                      v55 = v54 + (double)(v56 + (int)Dimensions) / (double)(2 * (int)Dimensions) * (v55 - v54);
                    }
                    v80 = 0;
                    v58 = portIndexFromPortType(cf1, (int *)&v80);
                    if ((_DWORD)v58)
                    {
                      v35 = v58;
                      fig_log_get_emitter();
                      goto LABEL_115;
                    }
                    v87 = 0;
                    values = xmmword_1A32B17A8;
                    v90 = unk_1A32B17B8;
                    memset(v86, 0, sizeof(v86));
                    v59 = *(const __CFArray **)(a1 + 584);
                    v60 = *(_DWORD *)(a1 + 28);
                    if (v59)
                    {
                      if (v60 < 2)
                      {
                        v61 = FigMotionComputeQuaternionAndAttitudeFromArray(v59, (double *)(a1 + 480), v86, v54 + v53 / 2000000.0);
                        goto LABEL_83;
                      }
                      if (v60 == 2)
                      {
                        v61 = FigMotionComputeAverageQuaternionFromArray(v59, (_OWORD *)(a1 + 480), v57, v55);
LABEL_83:
                        v87 = v61;
                      }
LABEL_88:
                      v64 = CFNumberCreate(v19, kCFNumberSInt32Type, &v87);
                      CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085F0], v64);
                      CFRelease(v64);
                      if ((*(_BYTE *)(a1 + 40) & 0x52) != 0)
                      {
                        LODWORD(v81[0]) = 0;
                        FigCFDictionaryGetInt32IfPresent();
                        FigMotionCalculateAdjustedFocusPosition((int *)v81, *(float *)&v83, *(float *)(a1 + 56 * v80 + 112));
                        if (!*(_BYTE *)(a1 + 544))
                        {
                          v65 = *(_OWORD *)(a1 + 496);
                          *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 480);
                          *(_OWORD *)(a1 + 528) = v65;
                          *(_BYTE *)(a1 + 544) = 1;
                        }
                        v66 = FigMotionMultiplyByInverseOfQuaternion((double *)(a1 + 512), (uint64_t *)(a1 + 480));
                        valuePtr[0] = v66;
                        valuePtr[1] = v67;
                        valuePtr[2] = v68;
                        valuePtr[3] = v69;
                        v70 = *(_OWORD *)(a1 + 496);
                        *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 480);
                        *(_OWORD *)(a1 + 528) = v70;
                        v71 = *(_DWORD *)(a1 + 40);
                        if ((v71 & 0x40) != 0)
                        {
                          memset(&time, 0, sizeof(time));
                          FigMotionAttitudeFromQuaternion((long double *)&time.value, v66, v67, v68, v69);
                          v72 = CFDataCreate(v19, (const UInt8 *)&time, 24);
                          CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D085B0], v72);
                          if (v72)
                            CFRelease(v72);
                          v71 = *(_DWORD *)(a1 + 40);
                        }
                        if ((v71 & 2) != 0)
                        {
                          FigMotionComputeTranslationFromCameraMotion(valuePtr, a1 + 56 * v80 + 72, (uint64_t)v81, (float *)&time);
                          v87 = v73;
                          if (!v73)
                          {
                            *(float32x2_t *)(a1 + 552) = vadd_f32((float32x2_t)time.value, *(float32x2_t *)(a1 + 552));
                            v74 = CFDataCreate(v19, (const UInt8 *)(a1 + 552), 8);
                            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D08610], v74);
                            if (v74)
                              CFRelease(v74);
                            v71 = *(_DWORD *)(a1 + 40);
                            goto LABEL_100;
                          }
LABEL_116:
                          fig_log_get_emitter();
                          FigDebugAssert3();
                        }
                        else
                        {
LABEL_100:
                          if ((v71 & 0x10) != 0)
                          {
                            v87 = FigMotionComputeTransformFromCameraMotion(valuePtr, a1 + 56 * v80 + 72, (uint64_t)v81, 0, 0, (float *)&time);
                            if (v87)
                              goto LABEL_116;
                            v75 = CFDataCreate(v19, (const UInt8 *)&time, 36);
                            CFDictionarySetValue(a2, (const void *)*MEMORY[0x1E0D08608], v75);
                            if (v75)
                              CFRelease(v75);
                          }
                        }
                      }
                      v35 = v87;
                      if (!v87)
                        return v35;
                      fig_log_get_emitter();
LABEL_115:
                      FigDebugAssert3();
                      return v35;
                    }
                    if (v60 < 2)
                    {
                      QuaternionAndAttitude = FigCoreMotionGetQuaternionAndAttitude(*(void **)(a1 + 32), (double *)&values, 0, v86, 0);
                      goto LABEL_86;
                    }
                    if (v60 == 2)
                    {
                      QuaternionAndAttitude = FigCoreMotionGetAverageQuaternion(*(void **)(a1 + 32), (uint64_t)&values, 0);
LABEL_86:
                      v87 = QuaternionAndAttitude;
                    }
                    v63 = v90;
                    *(_OWORD *)(a1 + 480) = values;
                    *(_OWORD *)(a1 + 496) = v63;
                    goto LABEL_88;
                  }
                }
              }
            }
          }
          v22 = FigMotionCalculateAdjustedLensPosition(a2, a1 + 56 * values + 72, (float *)v81 + 1, *(float *)&v83, *(float *)valuePtr);
          if (!(_DWORD)v22)
          {
            v29 = *((float *)v81 + 1);
            goto LABEL_39;
          }
        }
        v35 = v22;
        fig_log_get_emitter();
        FigDebugAssert3();
        fig_log_get_emitter();
        goto LABEL_115;
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      FigSignalErrorAt();
      return 0;
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return FigSignalErrorAt();
}

const __CFArray *sbp_ma_copyAndFlushISPData(const __CFArray *theArray)
{
  __CFArray *v1;
  CFArrayRef Copy;

  if (theArray)
  {
    v1 = theArray;
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theArray);
    CFArrayRemoveAllValues(v1);
    return Copy;
  }
  return theArray;
}

uint64_t F32toF16_0(float a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 v4;
  unsigned __int16 v5;

  v1 = HIWORD(LODWORD(a1)) & 0x8000;
  v2 = (LODWORD(a1) >> 23);
  v3 = ((((LODWORD(a1) & 0x7FFFFFu) >> 13) | (LODWORD(a1) >> 23 << 10)) + 0x4000) | v1;
  if (v2 < 0x71)
    LOWORD(v3) = HIWORD(a1) & 0x8000;
  v4 = v1 | 0x7C00;
  if (v2 >= 0x8F)
    LOWORD(v3) = v4;
  v5 = v4 | LOWORD(a1) & 0x3FF;
  if ((LODWORD(a1) & 0x7FFFFF) == 0)
    v5 = v4;
  if (v2 != 255)
    return (unsigned __int16)v3;
  return v5;
}

float F16toF32(unsigned int a1)
{
  unsigned int v1;
  int v2;
  float result;
  float v4;

  v1 = (a1 >> 10) & 0x1F;
  v2 = a1 & 0x3FF;
  if (v1 == 31)
  {
    LODWORD(result) = v2 | 0x7F800000;
  }
  else if (v1)
  {
    if (v1 > 0xE)
      v4 = (float)(1 << (v1 - 15));
    else
      v4 = 1.0 / (float)(1 << (15 - v1));
    result = (float)((float)((float)v2 * 0.00097656) + 1.0) * v4;
  }
  else if ((a1 & 0x3FF) != 0)
  {
    result = (float)v2 * 0.000000059605;
  }
  else
  {
    result = 0.0;
  }
  if ((a1 & 0x8000u) != 0)
    return -result;
  return result;
}

void *BWSmartStyleInfoDictionary(void *a1, void *a2, __CVBuffer *a3, __CVBuffer *a4, __CVBuffer *a5, uint64_t a6, int a7)
{
  void *v14;
  OSType PixelFormatType;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  id DataFromPixelBufferWithoutPadding;
  int v38;
  int v39;

  v38 = 1065353216;
  v39 = 1065353216;
  v14 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  if (a3)
  {
    DataFromPixelBufferWithoutPadding = _getDataFromPixelBufferWithoutPadding(a3, a6 != 0, a7);
    if (!DataFromPixelBufferWithoutPadding)
    {
      v23 = 0;
      v24 = 0;

      goto LABEL_32;
    }
    PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
    if (PixelFormatType != 1278226536 && PixelFormatType != 1278226534)
    {
      fig_log_get_emitter();
LABEL_30:
      FigDebugAssert3();
      v23 = 0;
      v24 = 0;
      goto LABEL_31;
    }
    v16 = PixelFormatType == 1278226536;
    objc_msgSend(v14, "setObject:forKeyedSubscript:", DataFromPixelBufferWithoutPadding, *MEMORY[0x1E0D089C0]);
    v17 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v16);
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D089C8]);
  }
  else
  {
    DataFromPixelBufferWithoutPadding = 0;
  }
  v18 = objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AF0]);
  if (v18)
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D08998]);
  if (objc_msgSend(MEMORY[0x1E0D08AD0], "computeLinearImageExposureWithMetadata:outputBaseGain:outputBaselineExposure:", a2, &v39, &v38))goto LABEL_33;
  objc_msgSend(v14, "setObject:forKeyedSubscript:", &unk_1E49FA740, *MEMORY[0x1E0D089B8]);
  LODWORD(v19) = v38;
  v20 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v19);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, *MEMORY[0x1E0D08988]);
  LODWORD(v21) = v39;
  v22 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v21);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v22, *MEMORY[0x1E0D089A8]);
  v23 = 0;
  v24 = 0;
  if (!a4 || !a5)
    goto LABEL_17;
  if (CVPixelBufferGetPixelFormatType(a4) != 1278226536 || CVPixelBufferGetPixelFormatType(a5) != 1278226536)
  {
LABEL_33:
    fig_log_get_emitter();
    goto LABEL_30;
  }
  v24 = _getDataFromPixelBufferWithoutPadding(a4, 1, a7);
  if (!v24)
  {
    v23 = 0;
    goto LABEL_31;
  }
  v23 = _getDataFromPixelBufferWithoutPadding(a5, 1, a7);
  if (!v23)
    goto LABEL_31;
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v24, *MEMORY[0x1E0D089D8]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v23, *MEMORY[0x1E0D089F8]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", CVPixelBufferGetWidth(a4)), *MEMORY[0x1E0D089F0]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", CVPixelBufferGetHeight(a4)), *MEMORY[0x1E0D089E0]);
  v25 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", 1278226536);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v25, *MEMORY[0x1E0D089E8]);
LABEL_17:
  v26 = *MEMORY[0x1E0D06098];
  if (objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06098]))
  {
    v27 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", v26), "intValue");
    v28 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v27);
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v28, *MEMORY[0x1E0D089D0]);
  }
  if (!a6)
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D060D0]), "BOOLValue"))goto LABEL_31;
    v35 = *MEMORY[0x1E0D060F8];
    if (!objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D060F8]))
      goto LABEL_31;
    v33 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v35);
    v34 = (_QWORD *)MEMORY[0x1E0D08A00];
    goto LABEL_28;
  }
  v29 = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D060C0]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v29, *MEMORY[0x1E0D089A0]);
  v30 = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D060E8]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v30, *MEMORY[0x1E0D089B0]);
  v31 = objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A40]);
  v32 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AE8]), "BOOLValue");
  if (v31)
  {
    if (v32)
      v33 = &unk_1E4A024C0;
    else
      v33 = (void *)v31;
    v34 = (_QWORD *)MEMORY[0x1E0D08990];
LABEL_28:
    objc_msgSend(v14, "setObject:forKeyedSubscript:", v33, *v34);
  }
LABEL_31:

LABEL_32:
  return v14;
}

id _getDataFromPixelBufferWithoutPadding(__CVBuffer *a1, int a2, int a3)
{
  OSType PixelFormatType;
  OSType v7;
  unint64_t v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  char *BaseAddress;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  size_t v19;
  size_t v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  size_t v26;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = PixelFormatType;
  if (PixelFormatType == 1278226536)
  {
    v8 = 2;
  }
  else
  {
    if (PixelFormatType != 1278226534)
      return 0;
    v8 = 4;
  }
  if (CVPixelBufferLockBaseAddress(a1, 1uLL))
    return 0;
  if ((a2 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    if (a3)
      v11 = 3;
    else
      v11 = 2;
    v12 = objc_msgSend(MEMORY[0x1E0D08AE0], "configurationForUseCase:", v11);
    objc_msgSend(MEMORY[0x1E0D08AF0], "coefficientPixelBufferSizeForConfiguration:float16:", v12, v7 == 1278226536);
    v9 = (v13 * v14 * (double)v8);
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v19 = Width * v8;
  v20 = v19 * Height;
  if (!a2)
    v20 = v9;
  v26 = v20;
  v10 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
  if (Height)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      objc_msgSend(v10, "appendBytes:length:", BaseAddress, v19);
      v21 += BytesPerRow;
      v23 = a2 ^ 1;
      if (v9 > v21)
        v23 = 0;
      if ((v23 & 1) != 0)
        break;
      BaseAddress += BytesPerRow;
    }
    while (Height > v22++);
  }
  if (objc_msgSend(v10, "length") != v26)
  {

    v10 = 0;
  }
  if (CVPixelBufferUnlockBaseAddress(a1, 1uLL))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v10;
}

char *BWPreviewSynchronizerCreate(const void *a1)
{
  char *v2;

  v2 = (char *)malloc_type_malloc(0x30uLL, 0x10200403042BB7FuLL);
  *(_QWORD *)v2 = 0;
  if (a1)
  {
    *(_QWORD *)v2 = CFRetain(a1);
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (FigSignalErrorAt())
    {
      BWPreviewSynchronizerDestroy((const void **)v2);
      return 0;
    }
  }
  return v2;
}

double BWPreviewSynchronizerReset(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return 0.0;
}

double BWPreviewSynchronizerGetInsertionTime(double *a1, void *a2)
{
  double v4;
  const __CFDictionary *v5;
  double Seconds;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CMTime time;
  CMTime v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = CACurrentMediaTime();
  if (a2)
  {
    v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v5 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05D00], 0);
    if (v5)
      CMTimeMakeFromDictionary(&v23, v5);
    else
      CMSampleBufferGetPresentationTimeStamp(&v23, (CMSampleBufferRef)a2);
    time = v23;
    Seconds = CMTimeGetSeconds(&time);
    v7 = a1[3];
    if (v7 <= 0.0)
    {
      a1[3] = Seconds;
      v7 = Seconds;
    }
    v8 = Seconds - v7;
    v9 = a1[2];
    if (v8 <= v9 * 1.9 || v9 == 0.0)
      v11 = v8;
    else
      v11 = a1[2];
    if ((unint64_t)CAImageQueueGetTimes() < 2)
    {
      v20 = a1[1];
      if (v20 > 0.0)
        v4 = v20 + a1[4];
    }
    else
    {
      v12 = *(double *)&v23.value;
      v13 = *(double *)&v23.timescale - *(double *)&v23.value;
      v14 = v11 / (*(double *)&v23.timescale - *(double *)&v23.value);
      v15 = round(v14);
      if (v14 >= 1.0)
        v14 = v15;
      if (v14 >= 1.0)
        v16 = v14 + 0.35;
      else
        v16 = v14 * 1.35;
      a1[4] = v13;
      v17 = v12 - v13 + v13 * v16;
      v18 = v13 * 0.5;
      v19 = v17 + v13 * 0.01;
      if (v17 - a1[1] <= v18)
        v4 = v19;
      else
        v4 = v17;
    }
    a1[2] = v11;
    a1[3] = Seconds;
    a1[1] = v4;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v4;
}

void sub_1A30011DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getBMCameraCaptureAutoFocusROIClass_block_invoke(uint64_t a1)
{
  Class result;

  BiomeLibraryLibrary();
  result = objc_getClass("BMCameraCaptureAutoFocusROI");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getBMCameraCaptureAutoFocusROIClass_block_invoke_cold_1();
  getBMCameraCaptureAutoFocusROIClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t BiomeLibraryLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E4923D18;
    v3 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
    BiomeLibraryLibrary_cold_1(&v1);
  return BiomeLibraryLibraryCore_frameworkLibrary;
}

uint64_t FigVirtualDisplaySourceCameraViewfinderStreamCreate(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  uint64_t v6;

  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  FigVirtualDisplaySourceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    v6 = v4;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v6;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = 0;
  v6 = VTPixelTransferSessionCreate(a1, (VTPixelTransferSessionRef *)(DerivedStorage + 56));
  if ((_DWORD)v6)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a2 = 0;
  return v6;
}

uint64_t FigVirtualDisplaySourceCameraViewfinderStreamEnqueueFrame(double a1, double a2, double a3, double a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  CVImageBufferRef ImageBuffer;
  __CVBuffer *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, uint64_t, CVPixelBufferRef *, double, double);
  uint64_t v26;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v28;
  uint64_t v29;
  CVPixelBufferRef v30;
  uint64_t (*v31)(uint64_t, CVPixelBufferRef, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double);
  uint64_t v32;
  uint64_t v33;
  double v35;
  double v36;
  double v37;
  CMTime hostTime;
  CMTime v39;
  CVPixelBufferRef destinationBuffer;
  CGRect v41;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  destinationBuffer = 0;
  v39 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (*(_DWORD *)DerivedStorage == 1 && (v12 = DerivedStorage, *(_QWORD *)(DerivedStorage + 48)))
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(a6);
    if (ImageBuffer)
    {
      v14 = ImageBuffer;
      v15 = (double)(int)((int)(a3 + 0.5) & 0xFFFFFFFE);
      v16 = (double)(int)((int)(a4 + 0.5) & 0xFFFFFFFE);
      v36 = *(double *)(v12 + 8);
      v37 = a2;
      v17 = *(double *)(v12 + 24);
      v35 = *(double *)(v12 + 16);
      v18 = *(double *)(v12 + 32);
      CMSampleBufferGetPresentationTimeStamp(&v39, a6);
      hostTime = v39;
      v19 = CMClockConvertHostTimeToSystemUnits(&hostTime);
      v20 = v18 < v16 || v17 < v15;
      v21 = (double)(int)((int)(a4 + 0.5) & 0xFFFFFFFE);
      v22 = v15;
      if (v20)
      {
        v23 = v18 / v16;
        if (v18 / v16 >= v17 / v15)
          v23 = v17 / v15;
        v22 = (double)(int)((int)(v23 * v15) & 0xFFFFFFFE);
        v21 = (double)(int)((int)(v23 * v16) & 0xFFFFFFFE);
      }
      v24 = *(_QWORD *)(v12 + 48);
      v25 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CVPixelBufferRef *, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
      if (v25)
      {
        v26 = v25(v24, 0, 1, &destinationBuffer, v22, v21);
        if ((_DWORD)v26)
        {
          v33 = v26;
        }
        else
        {
          v41.origin.x = (double)(int)(a1 + 0.5);
          v41.origin.y = (double)(int)(v37 + 0.5);
          v41.size.width = v15;
          v41.size.height = v16;
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v41);
          VTSessionSetProperty(*(VTSessionRef *)(v12 + 56), (CFStringRef)*MEMORY[0x1E0CED850], DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
          v28 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v12 + 56), v14, destinationBuffer);
          if ((_DWORD)v28)
          {
            v33 = v28;
            fig_log_get_emitter();
            goto LABEL_21;
          }
          v29 = *(_QWORD *)(v12 + 48);
          v30 = destinationBuffer;
          v31 = *(uint64_t (**)(uint64_t, CVPixelBufferRef, uint64_t, _QWORD, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
          if (v31)
          {
            v32 = v31(v29, v30, v19, 0, 0, 0.0, 0.0, v22, v21, v36, v35, v17, v18);
            v33 = 0;
            if (!(_DWORD)v32)
              goto LABEL_22;
            v33 = v32;
          }
          else
          {
            v33 = 4294954514;
          }
        }
      }
      else
      {
        v33 = 4294954514;
      }
      fig_log_get_emitter();
LABEL_21:
      FigDebugAssert3();
      goto LABEL_22;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    v33 = FigSignalErrorAt();
  }
  else
  {
    v33 = 0;
  }
LABEL_22:
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  return v33;
}

uint64_t stream_Invalidate()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  return 0;
}

uint64_t stream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const __CFString *v7;
  CFTypeRef v8;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual((CFTypeRef)*MEMORY[0x1E0CC6748], a2))
  {
    v7 = CFSTR("CameraViewfinderStream");
    goto LABEL_3;
  }
  if (CFEqual(CFSTR("Destination"), a2))
  {
    v7 = *(const __CFString **)(DerivedStorage + 40);
    if (!v7)
    {
      v8 = 0;
      goto LABEL_4;
    }
LABEL_3:
    v8 = CFRetain(v7);
LABEL_4:
    result = 0;
    *a4 = v8;
    return result;
  }
  return 4294954512;
}

uint64_t stream_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("Destination"), a2))
    return 4294954512;
  v6 = *(const void **)(DerivedStorage + 40);
  *(_QWORD *)(DerivedStorage + 40) = a3;
  if (a3)
    CFRetain(a3);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t stream_PlugProcessor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    if (*(_DWORD *)DerivedStorage || *(_QWORD *)(DerivedStorage + 48))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294955223;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 48) = a2;
      CFRetain(a2);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
}

uint64_t stream_UnplugProcessor(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (v4 = DerivedStorage, !*(_DWORD *)DerivedStorage) && *(const void **)(DerivedStorage + 48) == a2)
  {
    CFRelease(a2);
    result = 0;
    *(_QWORD *)(v4 + 48) = 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
  return result;
}

uint64_t stream_Start()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t DimensionsFromTimingMode;
  __int128 v12;
  CFTypeRef v13;
  CFTypeRef v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)DerivedStorage || (v1 = DerivedStorage, !*(_QWORD *)(DerivedStorage + 48)))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294955226;
  }
  v2 = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  v12 = *MEMORY[0x1E0C9D648];
  v3 = *(_QWORD *)(v2 + 48);
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v4)
  {
    DimensionsFromTimingMode = 4294954514;
LABEL_12:
    fig_log_get_emitter();
LABEL_13:
    FigDebugAssert3();
    goto LABEL_14;
  }
  v5 = v4(v3, &v14, &v13);
  if ((_DWORD)v5)
  {
    DimensionsFromTimingMode = v5;
    goto LABEL_12;
  }
  v6 = FigDisplayModes_LookupTimingModeIDByIndex();
  if ((_DWORD)v6)
  {
    DimensionsFromTimingMode = v6;
    fig_log_get_emitter();
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v2 + 48);
  v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v8)
  {
    DimensionsFromTimingMode = 4294954514;
    goto LABEL_12;
  }
  v9 = v8(v7, 0, 0);
  if ((_DWORD)v9)
  {
    DimensionsFromTimingMode = v9;
    goto LABEL_12;
  }
  DimensionsFromTimingMode = FigDisplayModes_ExtractDimensionsFromTimingMode();
  if ((_DWORD)DimensionsFromTimingMode)
    goto LABEL_12;
  *(_OWORD *)(v1 + 8) = v12;
  *(_OWORD *)(v1 + 24) = xmmword_1A32B18F0;
LABEL_14:
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if ((_DWORD)DimensionsFromTimingMode)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    *(_DWORD *)v1 = 1;
  }
  return DimensionsFromTimingMode;
}

uint64_t stream_Stop()
{
  *(_DWORD *)CMBaseObjectGetDerivedStorage() = 0;
  return 0;
}

uint64_t stream_Suspend()
{
  return 0;
}

uint64_t stream_Resume()
{
  return 0;
}

uint64_t utlLandmarkToC0(int a1, double *a2, double *a3, float64x2_t *a4, float64x2_t a5)
{
  double v5;

  if (a2 && a3 && a4)
  {
    a5.f64[0] = *a3 + *a2 * a3[2];
    v5 = 1.0 - (a3[1] + a2[1] * a3[3]);
    a4->f64[0] = a5.f64[0];
    a4->f64[1] = v5;
    rotatedC0toSensorOrientation(a1, a4, a5);
    return 1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
}

float64_t rotatedC0toSensorOrientation(int a1, float64x2_t *a2, float64x2_t a3)
{
  double v8;
  float v9;
  float v10;

  switch(a1)
  {
    case 2:
      a3.f64[0] = 1.0 - a2->f64[0];
      a2->f64[0] = a3.f64[0];
      return a3.f64[0];
    case 3:
      __asm { FMOV            V1.2D, #1.0 }
      a3 = vsubq_f64(_Q1, *a2);
      *a2 = a3;
      return a3.f64[0];
    case 4:
      a3.f64[0] = 1.0 - a2->f64[1];
      a2->f64[1] = a3.f64[0];
      return a3.f64[0];
    case 5:
      v8 = a2->f64[1];
      v9 = a2->f64[0];
      goto LABEL_10;
    case 6:
      v8 = a2->f64[1];
      v10 = a2->f64[0];
      goto LABEL_8;
    case 7:
      v10 = a2->f64[0];
      v8 = 1.0 - a2->f64[1];
LABEL_8:
      v9 = 1.0 - v10;
      goto LABEL_10;
    case 8:
      v9 = a2->f64[0];
      v8 = 1.0 - a2->f64[1];
LABEL_10:
      a3.f64[0] = v9;
      a2->f64[0] = v8;
      a2->f64[1] = a3.f64[0];
      break;
    default:
      return a3.f64[0];
  }
  return a3.f64[0];
}

void vcn_encoderCallback(uint64_t a1, void *value, uint64_t a3, int a4, opaqueCMSampleBuffer *target)
{
  _DWORD *v9;
  void *v10;
  const __CFString *v11;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  void *v14;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v16;
  size_t DataLength;
  const void *v19;
  const void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  const __CFString *v26;
  NSObject *v27;
  _QWORD block[6];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CMTime v33;
  CMTime v34;
  CMTime time;
  _BYTE v36[128];
  CMTimeValue v37;
  CMTimeScale timescale;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0])
  {
    LODWORD(v33.value) = 0;
    CMSampleBufferGetPresentationTimeStamp(&time, target);
    CMTimeGetSeconds(&time);
    CMSampleBufferGetDecodeTimeStamp(&v34, target);
    CMTimeGetSeconds(&v34);
    FigCFDictionaryGetIntIfPresent();
    if (*v9 == 1)
    {
      objc_msgSend((id)a1, "pipelineTraceID");
      kdebug_trace();
    }
  }
  if (!(_DWORD)a3)
  {
LABEL_13:
    if (!value)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (target)
  {
    v10 = *(void **)(a1 + 272);
    v11 = CFSTR("encoder callback, but returned sample buffer?!?");
LABEL_12:
    objc_msgSend(v10, "logErrorNumber:errorString:", a3, v11);
    goto LABEL_13;
  }
  v37 = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (value)
  {
    CMTimeMakeFromDictionary(&v33, (CFDictionaryRef)objc_msgSend(value, "objectForKeyedSubscript:", CFSTR("VideoCompressorNodeAttachedPTS")));
    v37 = v33.value;
    flags = v33.flags;
    timescale = v33.timescale;
    epoch = v33.epoch;
    objc_msgSend(value, "setObject:forKeyedSubscript:", 0, CFSTR("VideoCompressorNodeAttachedPTS"));
  }
  else
  {
    flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
    epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v14 = *(void **)(a1 + 272);
  if ((flags & 1) == 0)
  {
    v11 = CFSTR("encoder callback leaking");
    v10 = *(void **)(a1 + 272);
    goto LABEL_12;
  }
  v33.value = v37;
  v33.timescale = timescale;
  v33.flags = flags;
  v33.epoch = epoch;
  objc_msgSend(v14, "logErrorNumber:errorString:", a3, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("encoder callback dropping %.4lf"), CMTimeGetSeconds(&v33)));
  v33.value = v37;
  v33.timescale = timescale;
  v33.flags = flags;
  v33.epoch = epoch;
  objc_msgSend(*(id *)(a1 + 16), "emitDroppedSample:", +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", 0x1E494F0B8, &v33));
  if (value)
  {
LABEL_14:
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], value, 1u);

  }
LABEL_15:
  if (target)
  {
    DataBuffer = CMSampleBufferGetDataBuffer(target);
    if (DataBuffer)
    {
      v16 = DataBuffer;
      DataLength = CMBlockBufferGetDataLength(DataBuffer);
      if (*(_QWORD *)(a1 + 312) && DataLength != 0)
        +[BWBufferometer trackBuffer:trackedSize:tag:bufferType:](BWBufferometer, "trackBuffer:trackedSize:tag:bufferType:", v16, DataLength, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ Compressed Video"), objc_msgSend((id)a1, "name")), CFSTR("CMBlockBuffer"));
    }
    v19 = *(const void **)(a1 + 264);
    if (v19)
    {
      CMSetAttachment(target, CFSTR("FileCompletionScaledThumbnailSourcePixelBuffer"), v19, 1u);
      v20 = *(const void **)(a1 + 264);
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(a1 + 264) = 0;
      }
    }
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v21 = *(void **)(a1 + 328);
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v30;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v30 != v24)
            objc_enumerationMutation(v21);
          v26 = *(const __CFString **)(*((_QWORD *)&v29 + 1) + 8 * i);
          CMSetAttachment(target, v26, (CFTypeRef)objc_msgSend(value, "objectForKeyedSubscript:", v26), 1u);
          objc_msgSend(value, "setObject:forKeyedSubscript:", 0, v26);
        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
      }
      while (v23);
    }
    v27 = *(NSObject **)(a1 + 144);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __vcn_encoderCallback_block_invoke;
    block[3] = &unk_1E491F158;
    block[4] = a1;
    block[5] = target;
    dispatch_sync(v27, block);
  }
}

uint64_t __vcn_encoderCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 194))
  {
    *(_BYTE *)(v2 + 194) = 1;
    if (dword_1ECFE9530)
    {
      v8 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "emitSampleBuffer:", *(_QWORD *)(a1 + 40), v5, v6);
}

uint64_t rl_concreteRendererWithParametersForType(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t a6, int a7)
{
  void *v11;
  BWStreamingCVAFilterRendererParameters *v12;
  uint64_t v15;

  if (a3 && a4)
  {
    switch((int)result)
    {
      case 0:
        v11 = (void *)objc_msgSend(a2, "provideStreamingSDOFFilterRenderer");
        *a3 = (uint64_t)v11;
        objc_opt_class();
        result = objc_opt_isKindOfClass();
        if ((result & 1) != 0)
        {
          if ((unint64_t)objc_msgSend(a5, "count") >= 2)
          {
            v12 = -[BWStreamingCVAFilterRendererParameters initWithColorFilter:colorLookupCache:studioAndContourRenderingEnabled:stageRenderingEnabled:]([BWStreamingCVAFilterRendererParameters alloc], "initWithColorFilter:colorLookupCache:studioAndContourRenderingEnabled:stageRenderingEnabled:", objc_msgSend(a5, "lastObject"), objc_msgSend(a2, "provideColorLookupCache"), objc_msgSend(v11, "studioAndContourRenderingEnabled"), objc_msgSend(v11, "stageRenderingEnabled"));
            goto LABEL_16;
          }
          result = 0;
          goto LABEL_17;
        }
        return result;
      case 1:
        result = objc_msgSend(a2, "provideStillImageMetalBlurMapRenderer");
        goto LABEL_14;
      case 2:
        result = objc_msgSend(a2, "provideStillImageMetalSDOFRenderer");
LABEL_14:
        *a3 = result;
        *a4 = 0;
        return result;
      case 3:
        result = objc_msgSend(a2, "provideStillImageCoreImageBlurMapRenderer");
        goto LABEL_19;
      case 4:
        *a3 = objc_msgSend(a2, "provideCoreImageFilterRenderer");
        if (a7)
          v15 = a6;
        else
          v15 = 0;
        v12 = -[BWCoreImageFilterRendererParameters initWithFilters:originalOutputFilter:]([BWCoreImageFilterRendererParameters alloc], "initWithFilters:originalOutputFilter:", a5, v15);
        goto LABEL_16;
      case 5:
        *a3 = objc_msgSend(a2, "provideMetalFilterRenderer");
        v12 = -[BWMetalColorCubeRendererParameters initWithColorFilter:colorLookupCache:]([BWMetalColorCubeRendererParameters alloc], "initWithColorFilter:colorLookupCache:", objc_msgSend(a5, "lastObject"), objc_msgSend(a2, "provideColorLookupCache"));
LABEL_16:
        result = v12;
LABEL_17:
        *a4 = result;
        break;
      case 6:
        result = objc_msgSend(a2, "provideApplySmartStyleRenderer");
LABEL_19:
        *a3 = result;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t visn_pixelFormatsArrayFromPixelFormatTypeValue(uint64_t a1)
{
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3[0] = a1;
    return objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return a1;
    else
      return 0;
  }
}

const void *visn_setSynchronizedSlaveFrameLivePhotoKeyFrameMetadata(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *result;
  void *v6;

  result = (const void *)BWSampleBufferGetAttachedMedia(a3, (uint64_t)CFSTR("SynchronizedSlaveFrame"));
  if (result)
  {
    v6 = (void *)CMGetAttachment(result, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", a1, *MEMORY[0x1E0D088C0]);
    return (const void *)objc_msgSend(v6, "setObject:forKeyedSubscript:", a2, *MEMORY[0x1E0D05A00]);
  }
  return result;
}

double visn_transformRectangle(uint64_t a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  double v11;
  float *v12;
  double v13;
  float v14;
  const float *v15;
  float32x2_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float32x2_t v26;
  _BYTE v27[72];
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;

  v7 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  v28 = a4 * (double)(int)a2;
  v29 = a5 * (double)SHIDWORD(a2);
  v30 = v28 + a6 * (double)(int)a2;
  v31 = v29;
  v32 = v28;
  v33 = v29 + a7 * (double)SHIDWORD(a2);
  v34 = v30;
  v35 = v33;
  do
  {
    v8 = 0;
    v9 = &v28 + 2 * v7;
    v10 = *v9;
    v11 = v9[1];
    v12 = (float *)(a1 + 8);
    do
    {
      v13 = v11 * *(v12 - 1) + *(v12 - 2) * v10;
      v14 = *v12;
      v12 += 3;
      *(float *)&v13 = v13 + v14;
      v26.i32[v8++] = LODWORD(v13);
    }
    while (v8 != 3);
    v15 = (const float *)v27;
    v16 = vld1_dup_f32(v15);
    *(float64x2_t *)&v27[16 * v7++ + 8] = vcvtq_f64_f32(vdiv_f32(v26, v16));
  }
  while (v7 != 4);
  v17 = 0;
  v18 = 3.4028e38;
  v19 = 1.1755e-38;
  v20 = 1.1755e-38;
  v21 = 3.4028e38;
  do
  {
    v22 = *(double *)&v27[v17 + 8];
    v21 = fminf(v21, v22);
    v23 = *(double *)&v27[v17 + 16];
    v18 = fminf(v18, v23);
    v20 = fmaxf(v20, v22);
    v19 = fmaxf(v19, v23);
    v17 += 16;
  }
  while (v17 != 64);
  v24 = a2 - a3;
  if ((int)a2 < a3)
    ++v24;
  return (float)(fmaxf(fminf((float)a3, v21 - (float)(v24 >> 1)), 0.0) / (float)a3);
}

uint64_t __jdpc_createStateMachine_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_serviceNextRequest");
}

uint64_t __jdpc_createStateMachine_block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_execute");
}

uint64_t cdpr_notificationFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  if (captureDeferredPhotoProcessor_createDeserializedNotification(a2, a3, a4, (uint64_t *)&cf))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    if (cf)
      CFRelease(cf);
    v7 = 0;
    result = 1;
  }
  else
  {
    result = 4;
    v7 = cf;
  }
  *a5 = v7;
  return result;
}

uint64_t cdpr_messageHandler(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t DeserializedNotification;
  uint64_t v6;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  cf = 0;
  v10 = 0;
  FigXPCMessageCopyCFString();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 12));
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v7 = 4294950474;
    goto LABEL_8;
  }
  v4 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v4)
  {
    v7 = v4;
    fig_log_get_emitter();
LABEL_18:
    FigDebugAssert3();
    goto LABEL_8;
  }
  DeserializedNotification = captureDeferredPhotoProcessor_createDeserializedNotification((uint64_t)cf, a2, (uint64_t)v11, (uint64_t *)&v10);
  if ((_DWORD)DeserializedNotification)
  {
    v7 = DeserializedNotification;
    fig_log_get_emitter();
    goto LABEL_18;
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    v7 = v6;
    if (!v6)
      goto LABEL_8;
    (*(void (**)(uint64_t, CFTypeRef, CFTypeRef))(DerivedStorage + 16))(v6, cf, v10);
    CFRelease((CFTypeRef)v7);
  }
  v7 = 0;
LABEL_8:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 12));
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v7;
}

__CFString *captureDeferredPhotoProcessorRemote_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureDeferredPhotoProcessorRemote %p retainCount: %ld%s allocator: %p, objectID: %lld>"), a1, v5, v6, v7, *(_QWORD *)DerivedStorage);
  return Mutable;
}

uint64_t captureDeferredPhotoProcessorRemote_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t ObjectID;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  if (!a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v9 = 0;
    goto LABEL_9;
  }
  v8 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("ServerConnectionDied")))
  {
    ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v13);
    if ((_DWORD)ObjectID)
    {
      v9 = ObjectID;
      fig_log_get_emitter();
    }
    else
    {
      v9 = FigXPCSendStdCopyPropertyMessage();
      if (!(_DWORD)v9)
        goto LABEL_9;
      fig_log_get_emitter();
    }
    FigDebugAssert3();
    goto LABEL_9;
  }
  v9 = 0;
  if (*(_BYTE *)(v8 + 9))
    v10 = (_QWORD *)MEMORY[0x1E0C9AE50];
  else
    v10 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a4 = *v10;
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t captureDeferredPhotoProcessorRemote_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v4);
  if ((_DWORD)ObjectID)
  {
    v2 = ObjectID;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v2 = FigXPCSendStdSetPropertyMessage();
  if ((_DWORD)v2)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t captureDeferredPhotoProcessorRemote_CopyUnfinishedPhotoIdentifiers(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  if (captureDeferredPhotoProcessorRemote_createBasicMessage(a1, 1668311411, &v2)
    || FigXPCRemoteClientSendSyncMessageCreatingReply()
    || FigXPCMessageCopyCFObject())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

uint64_t captureDeferredPhotoProcessorRemote_ProcessPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1885893743, a2, a3, &v6);
  if ((_DWORD)v3 || (v3 = FigXPCMessageSetCFString(), (_DWORD)v3))
  {
    v4 = v3;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v4 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_CancelPhotoProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1668311156, a2, a3, &v6);
  if ((_DWORD)v3)
  {
    v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v4 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_Prewarm()
{
  return 4294954514;
}

uint64_t captureDeferredPhotoProcessorRemote_CancelAllPrewarming(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (!FigCaptureDeferredPhotoProcessorIsAllowedToPrewarm())
  {
    v3 = 0;
    goto LABEL_4;
  }
  v2 = captureDeferredPhotoProcessorRemote_createBasicMessage(a1, 1668313709, &v5);
  if ((_DWORD)v2)
  {
    v3 = v2;
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v3 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v3)
  {
    fig_log_get_emitter();
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  return v3;
}

uint64_t captureDeferredPhotoProcessorRemote_DeletePersistentStorageForPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  v3 = captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(a1, 1685091188, a2, a3, &v6);
  if ((_DWORD)v3)
  {
    v4 = v3;
    fig_log_get_emitter();
LABEL_6:
    FigDebugAssert3();
    goto LABEL_3;
  }
  v4 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v4)
  {
    fig_log_get_emitter();
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  return v4;
}

uint64_t captureDeferredPhotoProcessorRemote_PrettyPrintContainerDescription(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = 0;
  v2[1] = 0;
  if (captureDeferredPhotoProcessorRemote_getObjectID(a1, v2)
    || FigXPCCreateBasicMessage()
    || FigXPCMessageSetCFString())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else if (FigXPCRemoteClientSendSyncMessageCreatingReply() || FigXPCMessageCopyCFString())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

uint64_t captureDeferredPhotoProcessorRemote_createBasicMessage(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (!a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
  *a3 = v8;
  return v5;
}

uint64_t captureDeferredPhotoProcessorRemote_createPhotoIdentifierMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  if (!a5)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  ObjectID = captureDeferredPhotoProcessorRemote_getObjectID(a1, &v9);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
  {
    v7 = ObjectID;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    return v7;
  }
  v7 = FigXPCMessageSetCFString();
  if ((_DWORD)v7)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
  *a5 = v10;
  return v7;
}

uint64_t BWStillImageCaptureIDForSampleBuffer(const void *a1)
{
  void *v2;

  v2 = (void *)CMGetAttachment(a1, CFSTR("StillSettings"), 0);
  if (v2)
    return objc_msgSend(v2, "settingsID");
  v2 = (void *)CMGetAttachment(a1, CFSTR("BWStillImageCaptureSettings"), 0);
  if (v2)
    return objc_msgSend(v2, "settingsID");
  else
    return -1;
}

uint64_t BWStillImageProcessingFlagsForSampleBuffer(const void *a1)
{
  return objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0), "unsignedIntValue");
}

void BWStillImageSetProcessingFlagsForSampleBuffer(const void *a1, int a2)
{
  const void *v3;

  v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0), "unsignedIntValue") | a2);
  CMSetAttachment(a1, CFSTR("StillImageProcessingFlags"), v3, 1u);
}

void BWStillImageUnsetProcessingFlagsForSampleBuffer(const void *a1, int a2)
{
  const void *v3;

  v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)CMGetAttachment(a1, CFSTR("StillImageProcessingFlags"), 0), "unsignedIntValue") & ~a2);
  CMSetAttachment(a1, CFSTR("StillImageProcessingFlags"), v3, 1u);
}

unint64_t BWCropRectDimensionsForZoomFactor(uint64_t a1, float a2)
{
  double width;
  double height;
  CGRect v5;

  FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect((int)a1, a1 >> 32, 0.0, 0.0, 1.0 / a2, 1.0 / a2, (double)(int)a1 / (double)SHIDWORD(a1));
  width = v5.size.width;
  height = v5.size.height;
  if (CGRectIsNull(v5))
    FigDebugAssert3();
  return (int)width | ((unint64_t)(int)height << 32);
}

unint64_t BWDimensionsConformingToZoomWithoutUpscalingIfRequired(unint64_t a1, void *a2, float a3)
{
  unint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v6 = HIDWORD(a1);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v7 = objc_msgSend(a2, "isZoomWithoutUpscalingEnabled");
  if (a3 > 1.0 && v7)
  {
    v8 = BWCropRectDimensionsForZoomFactor(a1, a3);
    v9 = v8;
    v10 = HIDWORD(v8);
    if (dword_1ECFE9770)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    LODWORD(v10) = v6;
    v9 = a1;
  }
  return v9 | ((unint64_t)v10 << 32);
}

uint64_t BWUpdateThumbnailAndPreviewDimensionsForRequestedSettings(void *a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  double width;
  double height;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGRect v23;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v5 = objc_msgSend(a1, "thumbnailWidth");
  v6 = objc_msgSend(a1, "thumbnailHeight");
  if (!FigCaptureVideoDimensionsAreValid(v5 | (unint64_t)(v6 << 32)))
  {
    v22 = 0;
    if (objc_msgSend(a1, "outputFileType") != 1751476579
      && objc_msgSend(a1, "outputFileType") != 1751476582
      || (objc_msgSend(a1, "outputWidth"),
          objc_msgSend(a1, "outputHeight"),
          CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize()))
    {
      v22 = 320;
    }
    FigCaptureMetadataUtilitiesComputeDenormalizedStillImageCropRect(v22, v22, 0.0, 0.0, 1.0, 1.0, (double)objc_msgSend(a1, "outputWidth") / (double)objc_msgSend(a1, "outputHeight"));
    width = v23.size.width;
    height = v23.size.height;
    if (CGRectIsNull(v23))
    {
      v21 = v2;
      LODWORD(v20) = 0;
      FigDebugAssert3();
    }
    else
    {
      v5 = (int)width;
      v6 = (int)height;
      if (objc_msgSend(a1, "outputWidth") <= v5)
        v5 = objc_msgSend(a1, "outputWidth");
      if (objc_msgSend(a1, "outputHeight") <= v6)
        v6 = objc_msgSend(a1, "outputHeight");
    }
  }
  objc_msgSend(a1, "setThumbnailWidth:", v5, v20, v21);
  objc_msgSend(a1, "setThumbnailHeight:", v6);
  if (objc_msgSend(a1, "rawThumbnailEnabled"))
  {
    v9 = BWDimensionsConformingToZoomWithoutUpscalingIfRequired(objc_msgSend(a1, "rawThumbnailWidth") | (unint64_t)(objc_msgSend(a1, "rawThumbnailHeight") << 32), a1, a2);
    v10 = HIDWORD(v9);
    if (objc_msgSend(a1, "outputWidth") <= v9)
      v9 = objc_msgSend(a1, "outputWidth");
    if (objc_msgSend(a1, "outputHeight") <= v10)
      v10 = objc_msgSend(a1, "outputHeight");
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  objc_msgSend(a1, "setRawThumbnailWidth:", v9);
  objc_msgSend(a1, "setRawThumbnailHeight:", v10);
  if (objc_msgSend(a1, "previewEnabled"))
  {
    v11 = objc_msgSend(a1, "previewWidth");
    v12 = objc_msgSend(a1, "previewHeight");
    v13 = MGGetSInt32Answer();
    v14 = MGGetSInt32Answer();
    if ((_DWORD)v11 && (_DWORD)v12)
    {
      v15 = objc_msgSend(a1, "outputWidth");
      v16 = v13;
      if (v15 > v13)
        v16 = objc_msgSend(a1, "outputWidth");
      if (v11 >= v16)
      {
        v11 = v13;
        if (objc_msgSend(a1, "outputWidth") > v13)
          v11 = objc_msgSend(a1, "outputWidth");
      }
      v17 = objc_msgSend(a1, "outputHeight");
      v18 = v14;
      if (v17 > v14)
        v18 = objc_msgSend(a1, "outputHeight");
      if (v12 >= v18)
      {
        if (objc_msgSend(a1, "outputHeight") > v14)
          v14 = objc_msgSend(a1, "outputHeight");
      }
      else
      {
        v14 = v12;
      }
    }
    else
    {
      v11 = v13;
    }
  }
  else
  {
    v14 = 0;
    v11 = 0;
  }
  objc_msgSend(a1, "setPreviewWidth:", v11);
  return objc_msgSend(a1, "setPreviewHeight:", v14);
}

BWStillImageFocusPixelBlurScoreResult *BWFocusPixelBlurScoreForMetadata(void *a1)
{
  void *v2;
  void *v3;
  _BYTE *v4;
  float v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  float v9;
  float v10;
  unsigned int v11;
  BOOL v12;
  float v13;
  uint64_t v14;
  float v15;
  BWStillImageFocusPixelBlurScoreResult *v16;
  double v17;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v2 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06A80]);
  if (!v2)
  {
    v14 = 1;
LABEL_22:
    v15 = NAN;
    goto LABEL_15;
  }
  v3 = v2;
  if (objc_msgSend(v2, "length") != 4136)
  {
    v14 = 2;
    goto LABEL_22;
  }
  v4 = (_BYTE *)objc_msgSend(v3, "bytes");
  if (!*v4)
  {
    v14 = 3;
    goto LABEL_22;
  }
  v6 = v4[27] * v4[26];
  if (!(_DWORD)v6)
  {
    v14 = 4;
    goto LABEL_22;
  }
  v7 = 0;
  v8 = v4 + 44;
  v9 = 0.0;
  v10 = 0.0;
  do
  {
    v11 = *(v8 - 1);
    if (*v8)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      LOBYTE(v5) = *(v8 - 2);
      v5 = (float)LODWORD(v5) / 255.0;
      v13 = (float)((float)v11 * 8.0) * v5;
      ++v7;
      v10 = v10 + v13;
      v9 = v9
         + (float)((float)((float)((float)*((__int16 *)v8 - 2) * 0.0039062)
                         * (float)((float)*((__int16 *)v8 - 2) * 0.0039062))
                 * v13);
    }
    v8 += 8;
    --v6;
  }
  while (v6);
  if (v7 < 0xA)
  {
    v14 = 5;
    goto LABEL_22;
  }
  if (fabsf(v10) < 0.0001)
  {
    v14 = 6;
    goto LABEL_22;
  }
  v14 = 0;
  v15 = sqrtf(v9 / v10);
LABEL_15:
  v16 = [BWStillImageFocusPixelBlurScoreResult alloc];
  *(float *)&v17 = v15;
  return -[BWStillImageFocusPixelBlurScoreResult initWithStatus:score:](v16, "initWithStatus:score:", v14, v17);
}

void *BWGetWhiteBalanceMetadataFromFrameStatistics(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v3 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "awbStable"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, *MEMORY[0x1E0D06870]);
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "awbLocked"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0D06840]);
  v5 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbRGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0D06848]);
  v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbGGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, *MEMORY[0x1E0D06820]);
  v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbBGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0D067E8]);
  v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboRGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, *MEMORY[0x1E0D06800]);
  v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboGGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0D067F8]);
  v10 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbComboBGain"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D067F0]);
  if (objc_msgSend(a1, "awbSkinRGain")
    && objc_msgSend(a1, "awbSkinGGain")
    && objc_msgSend(a1, "awbSkinBGain"))
  {
    v11 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinRGain"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0D06860]);
    v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinGGain"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, *MEMORY[0x1E0D06858]);
    v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", objc_msgSend(a1, "awbSkinBGain"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0D06850]);
  }
  if (objc_msgSend(a1, "awbSpatialCCMMixingFactor"))
  {
    v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "awbSpatialCCMMixingFactor"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, *MEMORY[0x1E0D06868]);
  }
  v15 = objc_msgSend(a1, "colorCorrectionMatrix");
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, *MEMORY[0x1E0D06948]);
  v16 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(a1, "cct"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, *MEMORY[0x1E0D06928]);
  return v2;
}

uint64_t BWCopyWhiteBalanceMetadata(void *a1, void *a2)
{
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06928]), *MEMORY[0x1E0D06928]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06840]), *MEMORY[0x1E0D06840]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06870]), *MEMORY[0x1E0D06870]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06848]), *MEMORY[0x1E0D06848]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06820]), *MEMORY[0x1E0D06820]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D067E8]), *MEMORY[0x1E0D067E8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06800]), *MEMORY[0x1E0D06800]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F8]), *MEMORY[0x1E0D067F8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D067F0]), *MEMORY[0x1E0D067F0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06818]), *MEMORY[0x1E0D06818]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06810]), *MEMORY[0x1E0D06810]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06808]), *MEMORY[0x1E0D06808]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06860]), *MEMORY[0x1E0D06860]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06858]), *MEMORY[0x1E0D06858]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06850]), *MEMORY[0x1E0D06850]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06948]), *MEMORY[0x1E0D06948]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C18]), *MEMORY[0x1E0D06C18]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06868]), *MEMORY[0x1E0D06868]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("AwbOutputMetadata")), CFSTR("AwbOutputMetadata"));
  return objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("MIWBOutputMetadata")), CFSTR("MIWBOutputMetadata"));
}

uint64_t BWCopyLTMMetadata(void *a1, void *a2)
{
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BD8]), *MEMORY[0x1E0D06BD8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BD0]), *MEMORY[0x1E0D06BD0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06F70]), *MEMORY[0x1E0D06F70]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F98]), *MEMORY[0x1E0D05F98]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F38]), *MEMORY[0x1E0D05F38]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F48]), *MEMORY[0x1E0D05F48]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E10]), *MEMORY[0x1E0D05E10]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F90]), *MEMORY[0x1E0D05F90]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F30]), *MEMORY[0x1E0D05F30]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F40]), *MEMORY[0x1E0D05F40]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05E08]), *MEMORY[0x1E0D05E08]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06BE8]), *MEMORY[0x1E0D06BE8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AD0]), *MEMORY[0x1E0D06AD0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06AF0]), *MEMORY[0x1E0D06AF0]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D068C8]), *MEMORY[0x1E0D068C8]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F28]), *MEMORY[0x1E0D05F28]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F20]), *MEMORY[0x1E0D05F20]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D05F70]), *MEMORY[0x1E0D05F70]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C18]), *MEMORY[0x1E0D06C18]);
  objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C28]), *MEMORY[0x1E0D06C28]);
  return objc_msgSend(a2, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06C20]), *MEMORY[0x1E0D06C20]);
}

uint64_t BWInferenceTypeForInferenceAttachmentKey(void *a1)
{
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E4951338) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E4951358) & 1) != 0)
  {
    return 104;
  }
  if ((objc_msgSend(a1, "isEqualToString:", 0x1E4951058) & 1) != 0
    || (objc_msgSend(a1, "isEqualToString:", 0x1E4951158) & 1) != 0)
  {
    return 802;
  }
  if (objc_msgSend(a1, "isEqualToString:", 0x1E4951178))
    return 201;
  return 0;
}

uint64_t BWPropagateInferenceAttachedMedia(void *a1, void *a2, CFTypeRef *a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v8;
  __CVBuffer *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          v8 = objc_msgSend(a1, "inferenceBufferForAttachedMediaKey:", a2);
          if (v8)
          {
            v9 = (__CVBuffer *)v8;
            v10 = objc_msgSend(a1, "metadataForAttachedMediaKey:", a2);
            v11 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v12 = BWMetadataAttachmentKeyForAttachedMediaKey(a2);
            if (!v12)
              return BWSampleBufferSetAttachedMediaFromPixelBuffer(a4, (uint64_t)a2, v9, a3, v10, v11, v10 == 0);
            v13 = v12;
            v14 = objc_msgSend((id)objc_msgSend(a1, "inferenceAttachedMediaMetadata"), "objectForKeyedSubscript:", a2);
            if (v14)
            {
              objc_msgSend(v11, "setObject:forKeyedSubscript:", v14, v13);
              return BWSampleBufferSetAttachedMediaFromPixelBuffer(a4, (uint64_t)a2, v9, a3, v10, v11, v10 == 0);
            }
          }
        }
      }
    }
  }
  return 4294954516;
}

uint64_t BWQSubResolutionFlavorSupported(void *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v11;
    while (2)
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(a1);
        v8 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v7));
        v9 = FigCaptureDimensionsFromDictionaryRepresentation((void *)objc_msgSend(v8, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)));
        if (FigCaptureVideoDimensionsAreValid(v9))
          return 1;
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      v5 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

unint64_t BWCommonDimensionsForQSubResolutionFlavor(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v13;
LABEL_3:
    v8 = 0;
    v9 = v6;
    while (1)
    {
      if (*(_QWORD *)v13 != v7)
        objc_enumerationMutation(a1);
      v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v8));
      v6 = FigCaptureDimensionsFromDictionaryRepresentation((void *)objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)));
      if (FigCaptureVideoDimensionsAreValid(v9) && !FigCaptureVideoDimensionsAreEqual(v9, v6))
        break;
      ++v8;
      v9 = v6;
      if (v5 == v8)
      {
        v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v5)
          goto LABEL_3;
        return v6;
      }
    }
  }
  return 0;
}

id BWPortTypesWithQSubResolutionFlavor(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  id result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(a1);
        v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * i);
        v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v9);
        if (objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)))
          objc_msgSend(v4, "addObject:", v9);
      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }
  result = (id)objc_msgSend(v4, "count");
  if (result)
    return (id)objc_msgSend(v4, "copy");
  return result;
}

uint64_t BWDimensionsWithQSubResolutionFlavor(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(a1);
        v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
        v10 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v9);
        if (objc_msgSend(v10, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)))
        {
          v11 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", v9);
          objc_msgSend(v4, "addObject:", objc_msgSend(v11, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)));
        }
      }
      v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }
  result = objc_msgSend(v4, "count");
  if (result)
    return objc_msgSend(v4, "allObjects");
  return result;
}

uint64_t BWIsDeferredPhotoProxyImage(unsigned int a1)
{
  return (a1 >> 12) & 1;
}

uint64_t dcn_convertU16toFloatForImage_NEON(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, int32x2_t a4)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  OSType PixelFormatType;
  size_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint16x8_t *BaseAddress;
  float16x8_t *v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int8x16_t v23;
  size_t v24;
  float16x8_t *v25;
  uint16x8_t *v26;
  uint16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  int8x16_t v35;
  size_t v36;
  float16x8_t *v37;
  uint16x8_t *v38;
  uint16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  int8x16_t v43;
  size_t v44;
  int8x16_t *v45;
  uint16x8_t *v46;
  uint16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  int8x16_t v56;
  size_t v57;
  int8x16_t *v58;
  uint16x8_t *v59;
  uint16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  uint64_t v63;
  unsigned int v65;
  int32x2_t v66;
  int32x2_t v67;
  __CVBuffer *pixelBuffer;

  a4.i32[0] = *(_DWORD *)(a3 + 8);
  v66 = a4;
  a4.i32[0] = *(_DWORD *)(a3 + 4);
  v67 = a4;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v11 = CVPixelBufferGetBytesPerRow(a2);
  v12 = FigDepthFormatIs16Bit(PixelFormatType);
  if (v12)
    v13 = 16;
  else
    v13 = 32;
  v65 = *(_DWORD *)(a3 + 12);
  pixelBuffer = a1;
  v14 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v14)
  {
    v63 = v14;
    FigDebugAssert3();
  }
  else
  {
    v15 = CVPixelBufferLockBaseAddress(a2, 0);
    if ((_DWORD)v15)
    {
      v63 = v15;
      FigDebugAssert3();
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    }
    else
    {
      v16 = FigDepthFormatIsDepth(PixelFormatType) && *(_BYTE *)(a3 + 16) == 0;
      BaseAddress = (uint16x8_t *)CVPixelBufferGetBaseAddress(a1);
      v18 = (float16x8_t *)CVPixelBufferGetBaseAddress(a2);
      v19 = vdupq_n_s32(v65);
      v20 = (float32x4_t)vdupq_lane_s32(v66, 0);
      v21 = (float32x4_t)vdupq_lane_s32(v67, 0);
      if (v16)
      {
        if (v12)
        {
          if (Height)
          {
            v22 = 0;
            v23 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
            do
            {
              if (Width)
              {
                v24 = 0;
                v25 = v18;
                v26 = BaseAddress;
                do
                {
                  v27 = *v26++;
                  v28 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8);
                  v29 = (int32x4_t)vmovl_high_u16(v27);
                  v30 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v28)), (float32x4_t)0);
                  v31 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v29)), (float32x4_t)0);
                  v32 = vrecpeq_f32(v30);
                  v33 = vrecpeq_f32(v31);
                  *v25 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v28), v23, (int8x16_t)vmulq_f32(v32, vrecpsq_f32(v30, v32)))), (float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v29), v23, (int8x16_t)vmulq_f32(v33, vrecpsq_f32(v31, v33))));
                  v24 += 8;
                  v25 = (float16x8_t *)((char *)v25 + v13);
                }
                while (Width > v24);
              }
              ++v22;
              BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
              v18 = (float16x8_t *)((char *)v18 + v11);
            }
            while (v22 != Height);
          }
        }
        else if (Height)
        {
          v42 = 0;
          v43 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
          do
          {
            if (Width)
            {
              v44 = 0;
              v45 = (int8x16_t *)v18;
              v46 = BaseAddress;
              do
              {
                v47 = *v46++;
                v48 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v47.i8);
                v49 = (int32x4_t)vmovl_high_u16(v47);
                v50 = (int8x16_t)vceqq_s32(v19, v48);
                v51 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v48)), (float32x4_t)0);
                v52 = vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v49)), (float32x4_t)0);
                v53 = vrecpeq_f32(v51);
                v54 = vrecpeq_f32(v52);
                *v45 = vbslq_s8(v50, v43, (int8x16_t)vmulq_f32(v53, vrecpsq_f32(v51, v53)));
                v45[1] = vbslq_s8((int8x16_t)vceqq_s32(v19, v49), v43, (int8x16_t)vmulq_f32(v54, vrecpsq_f32(v52, v54)));
                v45 += 2;
                v44 += 8;
              }
              while (Width > v44);
            }
            ++v42;
            BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
            v18 = (float16x8_t *)((char *)v18 + v11);
          }
          while (v42 != Height);
        }
      }
      else if (v12)
      {
        if (Height)
        {
          v34 = 0;
          v35 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
          do
          {
            if (Width)
            {
              v36 = 0;
              v37 = v18;
              v38 = BaseAddress;
              do
              {
                v39 = *v38++;
                v40 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v39.i8);
                v41 = (int32x4_t)vmovl_high_u16(v39);
                *v37 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v40), v35, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v40)), (float32x4_t)0))), (float32x4_t)vbslq_s8((int8x16_t)vceqq_s32(v19, v41), v35, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v41)), (float32x4_t)0)));
                v36 += 8;
                v37 = (float16x8_t *)((char *)v37 + v13);
              }
              while (Width > v36);
            }
            ++v34;
            BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
            v18 = (float16x8_t *)((char *)v18 + v11);
          }
          while (v34 != Height);
        }
      }
      else if (Height)
      {
        v55 = 0;
        v56 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
        do
        {
          if (Width)
          {
            v57 = 0;
            v58 = (int8x16_t *)v18;
            v59 = BaseAddress;
            do
            {
              v60 = *v59++;
              v61 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v60.i8);
              v62 = (int32x4_t)vmovl_high_u16(v60);
              *v58 = vbslq_s8((int8x16_t)vceqq_s32(v19, v61), v56, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v61)), (float32x4_t)0));
              v58[1] = vbslq_s8((int8x16_t)vceqq_s32(v19, v62), v56, (int8x16_t)vmaxq_f32(vmlaq_f32(v21, v20, vcvtq_f32_u32((uint32x4_t)v62)), (float32x4_t)0));
              v58 += 2;
              v57 += 8;
            }
            while (Width > v57);
          }
          ++v55;
          BaseAddress = (uint16x8_t *)((char *)BaseAddress + BytesPerRow);
          v18 = (float16x8_t *)((char *)v18 + v11);
        }
        while (v55 != Height);
      }
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      return 0;
    }
  }
  return v63;
}

double pixelSumComputeCompatibleROI(int a1, double a2)
{
  int v2;
  int v3;

  v2 = (int)a2;
  if (a1 - 32 < (int)a2)
    v2 = a1 - 32;
  v3 = v2 & 0xF;
  if (v2 <= 0)
    v3 = -(-v2 & 0xF);
  return (double)((v2 - v3) & ~((v2 - v3) >> 31));
}

uint64_t pixelSumForROI(__CVBuffer *a1, int32x4_t *a2, int32x4_t *a3, double a4, double a5, double a6, double a7)
{
  unsigned int Width;
  unsigned int Height;
  signed int BytesPerRowOfPlane;
  uint64_t v17;
  char *BaseAddressOfPlane;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  unsigned int v25;
  signed int v26;
  signed int v27;
  int8x16_t *v28;
  uint64_t v29;
  unint64_t v30;
  int8x16_t *v31;
  unint64_t v32;
  int v33;
  int8x16_t *v34;
  unint64_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint8x16_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  unint64_t v43;
  int v44;
  uint64_t i;
  uint64_t v46;
  __int32 v47;
  uint64_t v48;

  if (!a1 || !a2 || !a3)
  {
    FigDebugAssert3();
    return 0xFFFFFFFFLL;
  }
  if ((CVPixelBufferGetPixelFormatType(a1) & 0xFFFFFFEF) != 0x34323066)
  {
    FigDebugAssert3();
    return 4294967294;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  if ((BytesPerRowOfPlane & 0xF) != 0)
  {
    FigDebugAssert3();
    return 4294967293;
  }
  v17 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v17)
  {
    v19 = v17;
    FigDebugAssert3();
    return v19;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  if (a4 >= 0.0)
  {
    v19 = 0xFFFFFFFFLL;
    if (a4 >= (double)Width || a5 < 0.0)
      goto LABEL_24;
    v20 = a5 >= (double)Height || a6 < 1.0;
    v21 = v20 || a7 < 1.0;
    v22 = !v21 && a4 + a6 <= (double)Width;
    if (!v22 || a5 + a7 > (double)Height)
      goto LABEL_24;
    v25 = BytesPerRowOfPlane * a5;
    if ((((_BYTE)v25 + a4 + (_BYTE)BaseAddressOfPlane) & 0xF) != 0)
    {
      FigDebugAssert3();
      v19 = 4294967294;
      goto LABEL_24;
    }
    v26 = a6;
    if ((a6 & 0x1F) != 0)
    {
      FigDebugAssert3();
      v19 = 4294967292;
      goto LABEL_24;
    }
    v27 = a7;
    if ((a7 & 3) != 0)
    {
      FigDebugAssert3();
      v19 = 4294967291;
      goto LABEL_24;
    }
    v28 = (int8x16_t *)&BaseAddressOfPlane[v25 + a4];
    if (PixelSumASM(v28, a6, a7, BytesPerRowOfPlane, a2, a3))
    {
      if (v27)
      {
        v29 = 0;
        v30 = v26 & 0xFFFFFFFFFFFFFFF0;
        v31 = v28;
        do
        {
          if (v26)
          {
            if (v26 >= 0x10)
            {
              v35 = 0;
              v34 = (int8x16_t *)((char *)v31 + v30);
              v36 = 0uLL;
              v37 = 0uLL;
              v38 = 0uLL;
              v39 = 0uLL;
              do
              {
                v40 = (uint8x16_t)v31[v35 / 0x10];
                v41 = vmovl_u8(*(uint8x8_t *)v40.i8);
                v42 = vmovl_high_u8(v40);
                v39 = (int32x4_t)vaddw_high_u16((uint32x4_t)v39, v42);
                v38 = (int32x4_t)vaddw_u16((uint32x4_t)v38, *(uint16x4_t *)v42.i8);
                v37 = (int32x4_t)vaddw_high_u16((uint32x4_t)v37, v41);
                v36 = (int32x4_t)vaddw_u16((uint32x4_t)v36, *(uint16x4_t *)v41.i8);
                v35 += 16;
              }
              while (v30 != v35);
              v33 = vaddvq_s32(vaddq_s32(vaddq_s32(v36, v38), vaddq_s32(v37, v39)));
              v32 = v26 & 0xFFFFFFFFFFFFFFF0;
              if (v30 == v26)
                goto LABEL_42;
            }
            else
            {
              v32 = 0;
              v33 = 0;
              v34 = v31;
            }
            v43 = v26 - v32;
            do
            {
              v44 = v34->u8[0];
              v34 = (int8x16_t *)((char *)v34 + 1);
              v33 += v44;
              --v43;
            }
            while (v43);
          }
          else
          {
            v33 = 0;
          }
LABEL_42:
          a2->i32[v29] = v33;
          v31 = (int8x16_t *)((char *)v31 + BytesPerRowOfPlane);
          ++v29;
        }
        while (v29 != v27);
      }
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          if (v27)
          {
            v46 = 0;
            v47 = 0;
            v48 = v27;
            do
            {
              v47 += v28->u8[v46];
              v46 += BytesPerRowOfPlane;
              --v48;
            }
            while (v48);
          }
          else
          {
            v47 = 0;
          }
          a3->i32[i] = v47;
          v28 = (int8x16_t *)((char *)v28 + 1);
        }
      }
    }
    v19 = 0;
    goto LABEL_25;
  }
  v19 = 0xFFFFFFFFLL;
LABEL_24:
  FigDebugAssert3();
LABEL_25:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return v19;
}

uint64_t findOffsetFromSums(int32x4_t *a1, int32x4_t *a2, int a3, int a4, int a5, int a6, float *a7, int *a8, float *a9)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  int *v15;
  float *v16;
  float *v17;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  int v27;
  int32x4_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  int32x4_t *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  float v48;
  float v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  __int32 *v56;
  int *v57;
  int v58;
  __int32 v59;
  float v60;
  float v61;
  int v62;
  int v63;
  float v64;
  __int32 v65;
  float v66;
  int v67;
  int v68;
  int *v69;
  int *v70;
  int32x4_t *v71;
  float *v73;
  uint64_t v74;
  uint64_t v75;

  result = 0xFFFFFFFFLL;
  if (!a1 || !a2 || a3 < 0)
    return result;
  v13 = a4;
  LODWORD(v14) = 2 * a4;
  if (a3 < 2 * a4)
    return 4294967294;
  v15 = a8;
  v16 = a7;
  v17 = a9;
  if (!a3 || !a7)
  {
    if (a7)
      *a7 = 0.0;
    if (a9)
      *a9 = 0.0;
    v27 = 0;
    result = 0;
    if (a8)
      goto LABEL_74;
    return result;
  }
  v75 = (a3 - 2 * a4);
  if ((((_BYTE)a3 - 2 * (_BYTE)a4) & 7) != 0)
  {
    FigDebugAssert3();
    v17 = a9;
  }
  v73 = v16;
  if (a5)
  {
    MemSum32(a1, a3);
    v19 = v15;
    v20 = v13;
    v22 = v21;
    MemSum32(a2, a3);
    v17 = a9;
    v23 = v22 / a3;
    v13 = v20;
    v15 = v19;
    v16 = v73;
    LODWORD(v74) = v24 / a3;
    HIDWORD(v74) = v23;
    if (a9)
      goto LABEL_12;
LABEL_21:
    v26 = 0;
    goto LABEL_22;
  }
  v74 = 0;
  if (!v17)
    goto LABEL_21;
LABEL_12:
  v25 = (int *)malloc_type_calloc((int)v14, 4uLL, 0x100004052888210uLL);
  v17 = a9;
  v26 = v25;
  if (!v25)
    return 4294967293;
LABEL_22:
  v71 = a2;
  v28 = (int32x4_t *)((char *)a1 + 4 * v13 - 4);
  if (v13 >= 1)
  {
    v69 = v26;
    v70 = v15;
    v29 = 0;
    v30 = 0;
    v68 = v14;
    if ((int)v14 <= 1)
      v14 = 1;
    else
      v14 = v14;
    v67 = v13;
    v31 = 1 - v13;
    v27 = 0x7FFFFFFF;
    v32 = v71;
    do
    {
      if (a5)
        MemDiffZeroMean32(v28, HIDWORD(v74), v32, v74, v75);
      else
        MemDiff32(v28, v32, v75);
      v17 = a9;
      if (a9)
      {
        *v26 = v33;
        v30 += v33;
      }
      v32 = (int32x4_t *)((char *)v32 + 4);
      if (v33 < v27)
      {
        v27 = v33;
        v29 = v31;
      }
      ++v26;
      ++v31;
      --v14;
    }
    while (v14);
    LODWORD(v14) = v68;
    v26 = v69;
    v34 = (int)llround((double)v30 / (double)v68);
    v15 = v70;
    v16 = v73;
    v13 = v67;
    if (!a9)
      goto LABEL_53;
    goto LABEL_38;
  }
  v29 = 0;
  v34 = 0;
  v27 = 0x7FFFFFFF;
  if (v17)
  {
LABEL_38:
    v35 = v29 + v13;
    v36 = v13 / 5;
    v37 = ((v35 - v36) & ~((v35 - v36) >> 31)) + 1;
    v38 = 0x7FFFFFFF;
    v39 = v26;
    do
    {
      v41 = *v39++;
      v40 = v41;
      if (v41 < v38)
        v38 = v40;
      --v37;
    }
    while (v37);
    v42 = v35 + v36;
    if (v42 >= (int)v14 - 1)
      v43 = v14 - 1;
    else
      v43 = v42;
    v44 = &v26[v43];
    v45 = v14 - v43;
    do
    {
      v47 = *v44++;
      v46 = v47;
      if (v47 < v38)
        v38 = v46;
      --v45;
    }
    while (v45);
    if (v34 < 1)
      v48 = 0.0;
    else
      v48 = (float)(v38 - v27) / (float)v34;
    *v17 = v48;
  }
LABEL_53:
  v49 = (float)v29;
  *v16 = (float)v29;
  if (a6)
  {
    if (v26)
    {
      v50 = v29 + v13;
      v51 = v29 + v13 - 2;
      if (v29 + v13 < 2)
        v52 = 0;
      else
        v52 = v26[v51];
      if (v50 < (int)v14)
      {
        if (v52)
        {
          v53 = v26[v50];
          if (v53)
          {
            v54 = v50 - 1;
            if (v52 >= v53)
              v51 = v54;
            v55 = v75;
            if ((int)v75 < 1)
            {
              v61 = 0.0;
              v60 = 0.0;
            }
            else
            {
              v56 = &v71->i32[v51];
              v59 = *v56;
              v57 = v56 + 1;
              v58 = v59;
              v60 = 0.0;
              v61 = 0.0;
              do
              {
                v63 = *v57++;
                v62 = v63;
                v64 = (float)(v63 - v58);
                v61 = v61 + (float)(v64 * v64);
                v65 = v28->i32[0];
                v28 = (int32x4_t *)((char *)v28 + 4);
                v60 = v60 + (float)((float)(v65 - v58) * v64);
                v58 = v62;
                --v55;
              }
              while (v55);
            }
            if (fabsf(v61) > 1.0e-10)
            {
              v66 = v60 / v61;
              if (v52 >= v53)
                v49 = v66 + v49;
              else
                v49 = v66 + -1.0 + v49;
            }
          }
        }
      }
    }
    else
    {
      FigDebugAssert3();
      v49 = (float)v29;
    }
    *v16 = v49;
  }
  free(v26);
  if (v15)
  {
LABEL_74:
    result = 0;
    *v15 = v27;
    return result;
  }
  return 0;
}

uint64_t PortraitLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = PortraitLibraryCore_frameworkLibrary;
  v6 = PortraitLibraryCore_frameworkLibrary;
  if (!PortraitLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E4924080;
    v8 = *(_OWORD *)&off_1E4924090;
    v1 = _sl_dlopen();
    v4[3] = v1;
    PortraitLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302910C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t PortraitLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = PortraitLibraryCore();
  if (!result)
    PortraitLibrary_cold_1(&v1);
  return result;
}

Class __getPTEffectClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTEffect");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTEffectClass_block_invoke_cold_1();
  getPTEffectClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTEffectDescriptorClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTEffectDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTEffectDescriptorClass_block_invoke_cold_1();
  getPTEffectDescriptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTextureClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTTextureClass_softClass;
  v8 = getPTTextureClass_softClass;
  if (!getPTTextureClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTTextureClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTTextureClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30292C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTextureClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTTexture");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTTextureClass_block_invoke_cold_1();
  getPTTextureClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderPipelineClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTRenderPipelineClass_softClass;
  v8 = getPTRenderPipelineClass_softClass;
  if (!getPTRenderPipelineClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTRenderPipelineClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTRenderPipelineClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30293E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderPipelineClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTRenderPipeline");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTRenderPipelineClass_block_invoke_cold_1();
  getPTRenderPipelineClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderRequestClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTRenderRequestClass_softClass;
  v8 = getPTRenderRequestClass_softClass;
  if (!getPTRenderRequestClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTRenderRequestClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTRenderRequestClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30294F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTRenderRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTRenderRequestClass_block_invoke_cold_1();
  getPTRenderRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTRenderPipelineDescriptorClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTRenderPipelineDescriptorClass_softClass;
  v8 = getPTRenderPipelineDescriptorClass_softClass;
  if (!getPTRenderPipelineDescriptorClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTRenderPipelineDescriptorClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTRenderPipelineDescriptorClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTRenderPipelineDescriptorClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTRenderPipelineDescriptor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTRenderPipelineDescriptorClass_block_invoke_cold_1();
  getPTRenderPipelineDescriptorClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTuningParametersClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTTuningParametersClass_softClass;
  v8 = getPTTuningParametersClass_softClass;
  if (!getPTTuningParametersClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTTuningParametersClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTTuningParametersClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTuningParametersClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTTuningParameters");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTTuningParametersClass_block_invoke_cold_1();
  getPTTuningParametersClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyStreamClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTCinematographyStreamClass_softClass;
  v8 = getPTCinematographyStreamClass_softClass;
  if (!getPTCinematographyStreamClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTCinematographyStreamClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTCinematographyStreamClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyStreamClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTCinematographyStream");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTCinematographyStreamClass_block_invoke_cold_1();
  getPTCinematographyStreamClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyStreamOptionsClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTCinematographyStreamOptionsClass_softClass;
  v8 = getPTCinematographyStreamOptionsClass_softClass;
  if (!getPTCinematographyStreamOptionsClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTCinematographyStreamOptionsClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTCinematographyStreamOptionsClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyStreamOptionsClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTCinematographyStreamOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTCinematographyStreamOptionsClass_block_invoke_cold_1();
  getPTCinematographyStreamOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTCinematographyRefinementClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTCinematographyRefinementClass_softClass;
  v8 = getPTCinematographyRefinementClass_softClass;
  if (!getPTCinematographyRefinementClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTCinematographyRefinementClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTCinematographyRefinementClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTCinematographyRefinementClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTCinematographyRefinement");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTCinematographyRefinementClass_block_invoke_cold_1();
  getPTCinematographyRefinementClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void *getPTCinematographyExcludeAsCinematicChoiceSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr;
  v6 = getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr;
  if (!getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr)
  {
    v1 = (void *)PortraitLibrary();
    v0 = dlsym(v1, "PTCinematographyExcludeAsCinematicChoice");
    v4[3] = (uint64_t)v0;
    getPTCinematographyExcludeAsCinematicChoiceSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t getPTCinematographyExcludeAsCinematicChoice()
{
  void *PTCinematographyExcludeAsCinematicChoiceSymbolLoc;

  PTCinematographyExcludeAsCinematicChoiceSymbolLoc = getPTCinematographyExcludeAsCinematicChoiceSymbolLoc();
  if (!PTCinematographyExcludeAsCinematicChoiceSymbolLoc)
    getPTCinematographyExcludeAsCinematicChoice_cold_1();
  return *(_QWORD *)PTCinematographyExcludeAsCinematicChoiceSymbolLoc;
}

uint64_t getPTGlobalCinematographyMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalCinematographyMetadataVersion1Class_softClass;
  v8 = getPTGlobalCinematographyMetadataVersion1Class_softClass;
  if (!getPTGlobalCinematographyMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalCinematographyMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalCinematographyMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalCinematographyMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalCinematographyMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalCinematographyMetadataVersion1Class_block_invoke_cold_1();
  getPTGlobalCinematographyMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalRenderingMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalRenderingMetadataVersion1Class_softClass;
  v8 = getPTGlobalRenderingMetadataVersion1Class_softClass;
  if (!getPTGlobalRenderingMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalRenderingMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalRenderingMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalRenderingMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalRenderingMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalRenderingMetadataVersion1Class_block_invoke_cold_1();
  getPTGlobalRenderingMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalRenderingMetadataVersion2Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalRenderingMetadataVersion2Class_softClass;
  v8 = getPTGlobalRenderingMetadataVersion2Class_softClass;
  if (!getPTGlobalRenderingMetadataVersion2Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalRenderingMetadataVersion2Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalRenderingMetadataVersion2Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalRenderingMetadataVersion2Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalRenderingMetadataVersion2");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalRenderingMetadataVersion2Class_block_invoke_cold_1();
  getPTGlobalRenderingMetadataVersion2Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalStabilizationMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalStabilizationMetadataVersion1Class_softClass;
  v8 = getPTGlobalStabilizationMetadataVersion1Class_softClass;
  if (!getPTGlobalStabilizationMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalStabilizationMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalStabilizationMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3029F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalStabilizationMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalStabilizationMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalStabilizationMetadataVersion1Class_block_invoke_cold_1();
  getPTGlobalStabilizationMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalVideoHeaderMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalVideoHeaderMetadataVersion1Class_softClass;
  v8 = getPTGlobalVideoHeaderMetadataVersion1Class_softClass;
  if (!getPTGlobalVideoHeaderMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalVideoHeaderMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke_cold_1();
  getPTGlobalVideoHeaderMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTGlobalVideoMetadataClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTGlobalVideoMetadataClass_softClass;
  v8 = getPTGlobalVideoMetadataClass_softClass;
  if (!getPTGlobalVideoMetadataClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTGlobalVideoMetadataClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTGlobalVideoMetadataClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTGlobalVideoMetadataClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTGlobalVideoMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTGlobalVideoMetadataClass_block_invoke_cold_1();
  getPTGlobalVideoMetadataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedRenderingMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTTimedRenderingMetadataVersion1Class_softClass;
  v8 = getPTTimedRenderingMetadataVersion1Class_softClass;
  if (!getPTTimedRenderingMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTTimedRenderingMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTTimedRenderingMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedRenderingMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTTimedRenderingMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTTimedRenderingMetadataVersion1Class_block_invoke_cold_1();
  getPTTimedRenderingMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedRenderingMetadataVersion2Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTTimedRenderingMetadataVersion2Class_softClass;
  v8 = getPTTimedRenderingMetadataVersion2Class_softClass;
  if (!getPTTimedRenderingMetadataVersion2Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTTimedRenderingMetadataVersion2Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTTimedRenderingMetadataVersion2Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedRenderingMetadataVersion2Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTTimedRenderingMetadataVersion2");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTTimedRenderingMetadataVersion2Class_block_invoke_cold_1();
  getPTTimedRenderingMetadataVersion2Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTTimedStabilizationMetadataVersion1Class()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTTimedStabilizationMetadataVersion1Class_softClass;
  v8 = getPTTimedStabilizationMetadataVersion1Class_softClass;
  if (!getPTTimedStabilizationMetadataVersion1Class_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTTimedStabilizationMetadataVersion1Class_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTTimedStabilizationMetadataVersion1Class_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTTimedStabilizationMetadataVersion1Class_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTTimedStabilizationMetadataVersion1");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTTimedStabilizationMetadataVersion1Class_block_invoke_cold_1();
  getPTTimedStabilizationMetadataVersion1Class_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTSerializationClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTSerializationClass_softClass;
  v8 = getPTSerializationClass_softClass;
  if (!getPTSerializationClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTSerializationClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTSerializationClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTSerializationClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTSerialization");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTSerializationClass_block_invoke_cold_1();
  getPTSerializationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTDisparityPostProcessingClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTDisparityPostProcessing");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTDisparityPostProcessingClass_block_invoke_cold_1();
  getPTDisparityPostProcessingClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getPTEffectRenderRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTEffectRenderRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTEffectRenderRequestClass_block_invoke_cold_1();
  getPTEffectRenderRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t getPTEffectReactionClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__28;
  v7 = __Block_byref_object_dispose__28;
  v0 = getPTEffectReactionClass_softClass;
  v8 = getPTEffectReactionClass_softClass;
  if (!getPTEffectReactionClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getPTEffectReactionClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getPTEffectReactionClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A302A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPTEffectReactionClass_block_invoke(uint64_t a1)
{
  Class result;

  PortraitLibrary();
  result = objc_getClass("PTEffectReaction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getPTEffectReactionClass_block_invoke_cold_1();
  getPTEffectReactionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigCameraViewfinderServerStart()
{
  if (FigCameraViewfinderServerStart_once != -1)
    dispatch_once(&FigCameraViewfinderServerStart_once, &__block_literal_global_80);
  return 0;
}

void sub_1A302F3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t FigSerializedDepthImageBufferMetadataComputeSerializationSize(CVPixelBufferRef pixelBuffer, _DWORD *a2, _QWORD *a3)
{
  size_t Height;

  if (a2)
    *a2 = 1;
  Height = CVPixelBufferGetHeight(pixelBuffer);
  *a3 = CVPixelBufferGetBytesPerRow(pixelBuffer) * Height + 16;
  return 0;
}

uint64_t FigSerializedDepthImageBufferMetadataSerializeIntoBuffer(__CVBuffer *a1, uint64_t a2, _DWORD *a3)
{
  size_t Height;
  int Width;
  int v8;
  int BytesPerRow;
  OSType PixelFormatType;
  void *BaseAddress;

  Height = CVPixelBufferGetHeight(a1);
  if (CVPixelBufferGetBytesPerRow(a1) * Height + 16 == a2)
  {
    *a3 = 1;
    Width = CVPixelBufferGetWidth(a1);
    v8 = CVPixelBufferGetHeight(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    a3[1] = Width;
    a3[2] = v8;
    a3[3] = BytesPerRow;
    a3[4] = PixelFormatType;
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    memcpy(a3 + 5, BaseAddress, (BytesPerRow * v8));
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t FigSerializedDepthImageBufferMetadataDeserializeIntoCVPixelBuffer(_DWORD *a1, uint64_t a2, CVPixelBufferRef *a3)
{
  size_t v5;
  size_t v6;
  OSType v7;
  size_t v8;
  __CVBuffer *v9;
  uint64_t v10;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v13;
  size_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (*a1 != 1)
    goto LABEL_24;
  v6 = a1[1];
  v5 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = *a3;
  if (*a3)
  {
    pixelBufferOut = *a3;
    if ((_DWORD)v6 != CVPixelBufferGetWidth(v9)
      || (_DWORD)v5 != CVPixelBufferGetHeight(v9)
      || v7 != CVPixelBufferGetPixelFormatType(v9))
    {
LABEL_24:
      fig_log_get_emitter();
      FigDebugAssert3();
      v17 = FigSignalErrorAt();
      goto LABEL_25;
    }
LABEL_9:
    BytesPerRow = CVPixelBufferGetBytesPerRow(v9);
    CVPixelBufferLockBaseAddress(pixelBufferOut, 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
    v13 = BaseAddress;
    if ((_DWORD)v8 == (_DWORD)BytesPerRow)
    {
      memcpy(BaseAddress, a1 + 5, (v8 * v5));
    }
    else
    {
      if (BytesPerRow >= v8)
        v14 = v8;
      else
        v14 = BytesPerRow;
      if (BytesPerRow >= v8)
        v15 = BytesPerRow - v8;
      else
        v15 = 0;
      if ((_DWORD)v5)
      {
        v16 = (char *)(a1 + 5);
        do
        {
          memcpy(v13, v16, v14);
          if (BytesPerRow > v8)
            bzero(&v13[v14], v15);
          v16 += v8;
          v13 += BytesPerRow;
          LODWORD(v5) = v5 - 1;
        }
        while ((_DWORD)v5);
      }
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 1uLL);
    if (*a3)
      return 0;
LABEL_29:
    v17 = 0;
    *a3 = pixelBufferOut;
    return v17;
  }
  v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, v5, v7, 0, &pixelBufferOut);
  if (!(_DWORD)v10)
  {
    v9 = pixelBufferOut;
    goto LABEL_9;
  }
  v17 = v10;
  fig_log_get_emitter();
  FigDebugAssert3();
  FigSignalErrorAt();
LABEL_25:
  if (*a3)
    return v17;
  if (!(_DWORD)v17)
    goto LABEL_29;
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v17;
}

BOOL bweia_addRequirement(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  BWInferenceVideoFormatRequirements *v15;
  id v16;
  uint64_t v17;
  BWInferenceVideoFormatRequirements *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v10 = objc_msgSend(a1, "name");
  objc_msgSend((id)objc_msgSend(a1, "imageDescriptor"), "sizeForLayout:", 255);
  v12 = v11;
  v14 = v13;
  v15 = objc_alloc_init(BWInferenceVideoFormatRequirements);
  -[BWVideoFormatRequirements setWidth:](v15, "setWidth:", (unint64_t)v12);
  -[BWVideoFormatRequirements setHeight:](v15, "setHeight:", (unint64_t)v14);
  v20[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend((id)objc_msgSend(a1, "imageDescriptor"), "pixelFormat"));
  -[BWVideoFormatRequirements setSupportedPixelFormats:](v15, "setSupportedPixelFormats:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1));
  -[BWVideoFormatRequirements setSupportedColorSpaceProperties:](v15, "setSupportedColorSpaceProperties:", a3);
  -[BWInferenceVideoFormatRequirements setDeviceOriented:](v15, "setDeviceOriented:", 0);
  -[BWVideoFormatRequirements setBytesPerRowAlignment:](v15, "setBytesPerRowAlignment:", 64);
  v19 = v15;
  v16 = +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1));
  if (objc_msgSend(a1, "isInput"))
    v17 = objc_msgSend(a4, "bindEspressoInput:fromAttachedMediaUsingKey:withVideoFormat:count:", v10, a2, v16, a5);
  else
    v17 = objc_msgSend(a4, "bindEspressoOutput:asAttachedMediaUsingKey:withVideoFormat:count:", v10, a2, v16, a5);
  return v17 != 0;
}

void multiStreamCameraSourceNode_intermediateTapServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 2);
}

void multiStreamCameraSourceNode_rawServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 8);
}

void multiStreamCameraSourceNode_stillImageServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 3);
}

void multiStreamCameraSourceNode_stillImageIntermediateTapServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 4);
}

void multiStreamCameraSourceNode_stillImageRawServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 5);
}

void multiStreamCameraSourceNode_depthServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 6);
}

void multiStreamCameraSourceNode_pointCloudServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 7);
}

void multiStreamCameraSourceNode_lightSourceMaskServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 9);
}

void multiStreamCameraSourceNode_keypointDescriptorDataServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 10);
}

void multiStreamCameraSourceNode_semanticMasksServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 11);
}

void multiStreamCameraSourceNode_secureDetectedObjectsServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 12);
}

void multiStreamCameraSourceNode_secureEyeReliefStatusServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 13);
}

void multiStreamCameraSourceNode_preLTMThumbnailServiceQueueCallback(uint64_t a1)
{
  multiStreamCameraSourceNode_serviceQueue(a1, 18);
}

uint64_t mscsn_metadataOutputConfigurationKeyForOutputIndex(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 9:
      v3 = (uint64_t *)MEMORY[0x1E0D066C0];
      goto LABEL_6;
    case 10:
      v3 = (uint64_t *)MEMORY[0x1E0D066B0];
      goto LABEL_6;
    case 12:
      v3 = (uint64_t *)MEMORY[0x1E0D066F8];
      goto LABEL_6;
    case 18:
      v3 = (uint64_t *)MEMORY[0x1E0D066E0];
LABEL_6:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mscsn_metadataOutputKeyForOutputIndex(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 9:
      v3 = (uint64_t *)MEMORY[0x1E0D06738];
      goto LABEL_7;
    case 10:
      v3 = (uint64_t *)MEMORY[0x1E0D06730];
      goto LABEL_7;
    case 12:
      v3 = (uint64_t *)MEMORY[0x1E0D06750];
      goto LABEL_7;
    case 13:
      v3 = (uint64_t *)MEMORY[0x1E0D06758];
      goto LABEL_7;
    case 18:
      v3 = (uint64_t *)MEMORY[0x1E0D06748];
LABEL_7:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t mscsn_semanticMaskOutputConfigurationKeyForSemanticMaskType(void *a1)
{
  uint64_t v2;

  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D06718]))
  {
    v2 = MEMORY[0x1E0D06680];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D06728]))
  {
    v2 = MEMORY[0x1E0D066A0];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D06720]))
  {
    v2 = MEMORY[0x1E0D06690];
    return *(_QWORD *)v2;
  }
  if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0D06760]))
    return *MEMORY[0x1E0D06708];
  else
    return 0;
}

void mscsn_handleStreamDroppedSampleNotification(int a1, uint64_t a2, const __CFString *cf, uint64_t a4, void *a5)
{
  __CFString *v8;
  void *v9;
  __CFString **v10;
  uint64_t v11;
  _BYTE *v12;
  NSObject *v13;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  uint64_t v20;

  if (CFSTR("Discontinuity") == cf)
  {
    v9 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", *MEMORY[0x1E0D06FC8]);
    if ((objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D08150]) & 1) != 0)
    {
      v10 = BWDroppedSampleReasonVideoDeviceDiscontinuity;
    }
    else if ((objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D08148]) & 1) != 0)
    {
      v10 = BWDroppedSampleReasonHighFrameRateAutoFocusDiscontinuity;
    }
    else
    {
      objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D08158]);
      v10 = BWDroppedSampleReasonVideoDeviceDiscontinuity;
    }
    v8 = *v10;
  }
  else
  {
    v8 = 0;
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v15 = 0;
  v16 = &v15;
  v17 = 0x3052000000;
  v18 = __Block_byref_object_copy__30;
  v19 = __Block_byref_object_dispose__30;
  v20 = a2;
  CFRetain(cf);
  v11 = 0;
  v12 = (_BYTE *)(v16[5] + 388);
  while (!v12[5] || (*v12 & 4) == 0)
  {
    ++v11;
    v12 += 504;
    if (v11 == 20)
    {
      v11 = 0;
      break;
    }
  }
  v13 = *(NSObject **)(v16[5] + 384 + 504 * v11 + 32);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __mscsn_handleStreamDroppedSampleNotification_block_invoke;
  v14[3] = &unk_1E4921438;
  v14[6] = &v15;
  v14[7] = cf;
  v14[4] = a5;
  v14[5] = v8;
  dispatch_async(v13, v14);
  _Block_object_dispose(&v15, 8);
}

void sub_1A303D9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void mscsn_handlePoolReadyNotification(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[7];
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  uint64_t v16;

  v11 = 0;
  v12 = &v11;
  v13 = 0x3052000000;
  v14 = __Block_byref_object_copy__30;
  v15 = __Block_byref_object_dispose__30;
  v16 = a2;
  if (theDict)
  {
    Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D070B8]);
    if (CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0D07FC0]))
    {
      v7 = *(NSObject **)(v12[5] + 3440);
      CFRetain(theDict);
      v8 = objc_msgSend((id)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D070C8]), "copy");
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __mscsn_handlePoolReadyNotification_block_invoke;
      v9[3] = &unk_1E4924340;
      v9[4] = &v11;
      v9[5] = theDict;
      v10 = 6;
      v9[6] = v8;
      dispatch_async(v7, v9);
    }
  }
  _Block_object_dispose(&v11, 8);
}

void sub_1A303DB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t mscsn_setStreamOutputBlockBufferHandler(void *a1, uint64_t a2, void *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = (void *)objc_msgSend(a3, "copy");
    v13 = v5;
    v14 = a2;
    v12 = *MEMORY[0x1E0D07F98];
    v15[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1);
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);

  }
  else
  {
    v10 = a2;
    v8 = *MEMORY[0x1E0D07F98];
    v9 = *MEMORY[0x1E0C9B0D0];
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
    v6 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  }
  return objc_msgSend(a1, "setProperty:value:", *MEMORY[0x1E0D07898], v6);
}

CMAttachmentBearerRef mscsn_createScaledAndZoomedSampleBufferFromSampleBuffer(void *a1, __CVBuffer *a2, int a3, void *a4, uint64_t a5, VTPixelTransferSessionRef *a6, CFTypeRef *a7, double a8, double a9, float a10)
{
  uint64_t v10;
  __CVBuffer *v18;
  const __CFString *v19;
  CFTypeRef v20;
  BOOL v21;
  int Width;
  int Height;
  OSType PixelFormatType;
  void *v25;
  float v26;
  float v27;
  double v28;
  int CGRectIfPresent;
  CGFloat x;
  double v34;
  double v35;
  _BOOL4 IsNull;
  _BOOL4 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v44;
  double v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  BOOL v50;
  double v51;
  double v52;
  double v53;
  double v54;
  BOOL v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  CGFloat v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  float v73;
  double RectWithAspectRatioInsideDimensions;
  double v75;
  double v76;
  double v77;
  int v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  CFDictionaryRef DictionaryRepresentation;
  OSStatus v88;
  int v89;
  int v90;
  _BOOL4 v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  __CFDictionary *Mutable;
  OSStatus v98;
  CFStringRef *v99;
  _BOOL4 v100;
  const __CFString *v101;
  CFTypeRef v102;
  const __CFDictionary *v103;
  const __CFNumber *Value;
  const __CFNumber *v105;
  void *v106;
  CFDictionaryRef v107;
  int v108;
  int v109;
  int v111;
  _QWORD *v112;
  double v113;
  double y;
  double v115;
  double v116;
  const void *v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  int v130;
  CMAttachmentBearerRef result;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  double v139;
  double v140;
  const __CFString *key;
  double v142;
  unint64_t v143;
  double v144;
  double v145;
  double v146;
  CFTypeRef v147;
  const __CFString *v148;
  BOOL v150;
  opaqueCMSampleBuffer *v151;
  CGSize v152;
  CFTypeRef *v153;
  __int128 v154;
  double v155;
  double v156;
  double rect1;
  _BOOL4 rect1a;
  uint64_t v160;
  CMAttachmentBearerRef target;
  CFTypeRef cf;
  __int128 v163;
  CGSize v164;
  CGRect valuePtr;
  uint64_t v166;
  int v167[3];
  CGRect v168;
  CGRect v169;
  CGRect v170;
  CGRect v171;
  CGRect v172;
  CGRect v173;
  CGRect v174;
  CGRect v175;

  target = 0;
  cf = 0;
  if (!a1 || !a2 || !a4 || !a6 || !a7)
  {
    FigDebugAssert3();
    v18 = 0;
LABEL_141:
    v130 = 0;
    goto LABEL_142;
  }
  v18 = (__CVBuffer *)objc_msgSend(a4, "newPixelBuffer");
  if (!v18)
  {
    FigDebugAssert3();
    goto LABEL_141;
  }
  v19 = (const __CFString *)*MEMORY[0x1E0D05CB0];
  v20 = CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (!*a6)
    VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a6);
  v148 = v19;
  v153 = a7;
  key = (const __CFString *)*MEMORY[0x1E0CA8EE8];
  v21 = CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E0CA8EE8])
     || CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E0CA8D68])
     || CVBufferHasAttachment(v18, (CFStringRef)*MEMORY[0x1E0CA8E98]) != 0;
  v150 = v21;
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v25 = (void *)CMGetAttachment(a1, CFSTR("TotalZoomFactor"), 0);
  if (v25)
  {
    objc_msgSend(v25, "floatValue");
    v27 = v26;
  }
  else
  {
    v27 = 1.0;
  }
  v28 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v144 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v145 = *MEMORY[0x1E0C9D628];
  v146 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  valuePtr.origin = 0uLL;
  __asm { FMOV            V0.2D, #1.0 }
  valuePtr.size = _Q0;
  v151 = (opaqueCMSampleBuffer *)a1;
  v143 = Width | ((unint64_t)Height << 32);
  if (!v20)
  {
    v134 = v10;
    LODWORD(v133) = 0;
LABEL_158:
    FigDebugAssert3();
LABEL_28:
    v44 = v145;
    v43 = v146;
    v139 = v146;
    v45 = v144;
    v155 = v144;
    v142 = v145;
    v46 = v146;
    v47 = v28;
    v48 = v144;
    v49 = v145;
    goto LABEL_62;
  }
  if (!FigCaptureVideoDimensionsAreValid(Width | ((unint64_t)Height << 32)))
  {
    v134 = v10;
    LODWORD(v133) = 0;
    goto LABEL_158;
  }
  CGRectIfPresent = FigCFDictionaryGetCGRectIfPresent();
  v168.origin.x = mscsn_validPixelBufferRectFromMetadata((uint64_t)v20, Width | ((unint64_t)Height << 32));
  x = v168.origin.x;
  v34 = v168.size.width;
  v35 = v168.size.height;
  rect1 = v168.origin.y;
  IsNull = CGRectIsNull(v168);
  v37 = IsNull;
  if (!CGRectIfPresent && IsNull && (v34 < (double)Width || v35 < (double)Height))
    goto LABEL_28;
  FigCaptureMetadataUtilitiesScaleRect(valuePtr.origin.x, valuePtr.origin.y, valuePtr.size.width, valuePtr.size.height, (float)(v27 / a10));
  v40 = v38;
  v41 = v39;
  if (a8 != *MEMORY[0x1E0C9D820] || a9 != *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    v40 = (a8 + 1.0) * v38;
    v41 = (a9 + 1.0) * v39;
    if (v37 && (v40 >= 1.0 || v41 >= 1.0))
      goto LABEL_28;
  }
  v140 = v28;
  v174.origin.x = (1.0 - v40) * 0.5;
  v174.origin.y = (1.0 - v41) * 0.5;
  v174.size.width = v40;
  v174.size.height = v41;
  v50 = CGRectEqualToRect(valuePtr, v174);
  v51 = (double)Height;
  v52 = round(v40 * (double)Width * 0.5);
  v53 = v52 + v52;
  if (v52 + v52 < (double)(int)a5)
  {
    v54 = rect1;
LABEL_32:
    v55 = 0;
    v57 = (double)SHIDWORD(a5);
    v53 = (double)(int)a5;
    goto LABEL_33;
  }
  v55 = v50;
  v56 = round(v41 * v51 * 0.5);
  v57 = v56 + v56;
  v54 = rect1;
  if (v56 + v56 < (double)SHIDWORD(a5))
    goto LABEL_32;
LABEL_33:
  v58 = ((double)Width - v53) * 0.5;
  v59 = ceil(v58);
  v60 = floor(v58);
  if (v58 >= 0.0)
    v61 = v60;
  else
    v61 = v59;
  v62 = (v51 - v57) * 0.5;
  v63 = ceil(v62);
  v64 = floor(v62);
  if (v62 >= 0.0)
    v65 = v64;
  else
    v65 = v63;
  if (!v37)
  {
    v66 = x;
    v67 = v34;
    v68 = v35;
    v69 = v61;
    v175.origin.x = v61;
    v70 = v65;
    v175.origin.y = v65;
    v175.size.width = v53;
    v175.size.height = v57;
    v71 = v57;
    v156 = x;
    v72 = v53;
    if (CGRectContainsRect(*(CGRect *)(&v54 - 1), v175))
    {
      v65 = v70;
      v61 = v69;
      v57 = v71;
      v53 = v72;
    }
    else
    {
      v73 = v72 / v71;
      RectWithAspectRatioInsideDimensions = FigCaptureMakeRectWithAspectRatioInsideDimensions((int)v34 | ((unint64_t)(int)v35 << 32), 1, v73);
      v53 = v75;
      v57 = v76;
      v55 = 0;
      v61 = v156 + RectWithAspectRatioInsideDimensions;
      v65 = rect1 + v77;
    }
  }
  if (PixelFormatType == 1885745712 || PixelFormatType == 1882468912)
  {
    if ((int)v61 % 6 >= 4)
      v78 = 6 * ((int)v61 / 6) + 6;
    else
      v78 = 6 * ((int)v61 / 6);
    v61 = (double)v78;
  }
  v49 = v61;
  v48 = v65;
  v47 = v53;
  v46 = v57;
  v79 = FigCaptureTransformRectToCoordinateSpaceOfRect(v61, v65, v53, v57, 0.0, 0.0, (double)Width);
  v139 = v82;
  v142 = v79;
  v155 = v80;
  if (v55)
  {
    v28 = v140;
    v44 = v145;
    v43 = v146;
    v45 = v144;
  }
  else
  {
    v83 = FigCaptureTransformRectToCoordinateSpaceOfRect(valuePtr.origin.x, valuePtr.origin.y, valuePtr.size.width, valuePtr.size.height, v79, v80, v81);
    if (v83 >= 0.0)
      v44 = v83;
    else
      v44 = 0.0;
    if (1.0 - v44 < v85)
      v85 = 1.0 - v44;
    if (v84 >= 0.0)
      v45 = v84;
    else
      v45 = 0.0;
    v28 = v85;
    if (1.0 - v45 >= v86)
      v43 = v86;
    else
      v43 = 1.0 - v45;
  }
LABEL_62:
  v169.origin.x = v49;
  v169.origin.y = v48;
  v169.size.width = v47;
  v169.size.height = v46;
  if (CGRectIsNull(v169))
  {
    DictionaryRepresentation = 0;
  }
  else
  {
    v170.origin.x = v49;
    v170.origin.y = v48;
    v170.size.width = v47;
    v170.size.height = v46;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v170);
  }
  v88 = VTSessionSetProperty(*a6, (CFStringRef)*MEMORY[0x1E0CED850], DictionaryRepresentation);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  if (v88)
    goto LABEL_159;
  v89 = CVPixelBufferGetWidth(v18);
  v90 = CVPixelBufferGetHeight(v18);
  v137 = v90;
  v138 = v89;
  v92 = (int)a5 < v89 || SHIDWORD(a5) < v90;
  rect1a = v92;
  if (v92)
  {
    v135 = Width;
    v136 = Height;
    v147 = v20;
    VTSessionSetProperty(*a6, (CFStringRef)*MEMORY[0x1E0CED848], (CFTypeRef)*MEMORY[0x1E0CEDB30]);
    LODWORD(valuePtr.origin.x) = 0;
    v93 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    LODWORD(v163) = 0;
    v94 = CFNumberCreate(0, kCFNumberSInt32Type, &v163);
    v167[0] = a5;
    v95 = CFNumberCreate(0, kCFNumberSInt32Type, v167);
    HIDWORD(v166) = HIDWORD(a5);
    v96 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&v166 + 4);
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D48], v93);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D58], v94);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D60], v95);
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8D40], v96);
    v98 = VTSessionSetProperty(*a6, CFSTR("DestinationCleanAperture"), Mutable);
    if (Mutable)
      CFRelease(Mutable);
    if (v93)
      CFRelease(v93);
    if (v94)
      CFRelease(v94);
    if (v95)
      CFRelease(v95);
    Height = v136;
    if (v96)
      CFRelease(v96);
    v20 = v147;
    if (v98)
      goto LABEL_159;
    Width = v135;
  }
  if (!VTPixelTransferSessionTransferImage(*a6, a2, v18))
  {
    v160 = 0;
    v99 = (CFStringRef *)MEMORY[0x1E0CA8D50];
    v100 = rect1a;
    if (rect1a)
    {
      CVPixelBufferGetWidth(v18);
      CVPixelBufferGetHeight(v18);
      v101 = *v99;
      v102 = CVBufferCopyAttachment(v18, *v99, 0);
      if (v102)
        v103 = (const __CFDictionary *)CFAutorelease(v102);
      else
        v103 = 0;
      Value = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E0CA8D60]);
      CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&v160 + 4);
      v105 = (const __CFNumber *)CFDictionaryGetValue(v103, (const void *)*MEMORY[0x1E0CA8D40]);
      CFNumberGetValue(v105, kCFNumberSInt32Type, &v160);
      CVBufferRemoveAttachment(v18, v101);
    }
    if (!v150)
    {
      CVBufferRemoveAttachment(v18, key);
      CVBufferRemoveAttachment(v18, (CFStringRef)*MEMORY[0x1E0CA8D68]);
      CVBufferRemoveAttachment(v18, (CFStringRef)*MEMORY[0x1E0CA8E98]);
    }
    if (DictionaryRepresentation)
      CVBufferRemoveAttachment(v18, *v99);
    if (!BWCMSampleBufferCreateCopyWithNewPixelBuffer(v151, v18, v153, (CMSampleBufferRef *)&cf)
      && !BWCMSampleBufferCreateCopyIncludingMetadata((CMSampleBufferRef)cf, (CMSampleBufferRef *)&target))
    {
      if (a3)
        CMSetAttachment(target, CFSTR("StillImageCaptureType"), (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:"), 1u);
      v106 = (void *)CMGetAttachment(target, v148, 0);
      objc_msgSend(v106, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0D06F48]);
      if (DictionaryRepresentation)
      {
        if (rect1a)
        {
          v28 = v28 * ((double)SHIDWORD(v160) / (double)v138);
          v43 = v43 * ((double)(int)v160 / (double)v137);
          v44 = (1.0 - v28) * 0.5;
          v45 = (1.0 - v43) * 0.5;
        }
        v171.origin.x = v44;
        v171.origin.y = v45;
        v171.size.width = v28;
        v171.size.height = v43;
        if (CGRectIsNull(v171))
        {
          objc_msgSend(v106, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0D05E68]);
        }
        else
        {
          v172.origin.x = v44;
          v172.origin.y = v45;
          v172.size.width = v28;
          v172.size.height = v43;
          v107 = CGRectCreateDictionaryRepresentation(v172);
          objc_msgSend(v106, "setObject:forKeyedSubscript:", v107, *MEMORY[0x1E0D05E68]);
          if (v107)
            CFRelease(v107);
        }
        v108 = objc_msgSend((id)objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D40], v133, v134), "intValue");
        v109 = objc_msgSend((id)objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D38]), "intValue");
        _ZF = v108 == Width && v109 == Height;
        v111 = !_ZF;
        v112 = (_QWORD *)MEMORY[0x1E0D06AC0];
        if (_ZF)
        {
          FigCFDictionarySetCGRect();
          if (objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E0D06DF0]))
            FigCFDictionarySetCGRect();
          objc_msgSend(v106, "setObject:forKeyedSubscript:", objc_msgSend(v106, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D70]), *v112);
        }
        v173.origin.x = mscsn_validPixelBufferRectFromMetadata((uint64_t)v20, v143);
        v113 = v173.origin.x;
        y = v173.origin.y;
        if (CGRectIsNull(v173))
        {
          v115 = v139;
          v116 = v142;
        }
        else
        {
          v116 = v142 - v113 / (double)Width;
          v155 = v155 - y / (double)Height;
          v115 = v155 * -2.0 + 1.0;
        }
        v167[0] = 0;
        v117 = (const void *)*v112;
        if (FigCFDictionaryGetInt32IfPresent())
          CFDictionarySetValue((CFMutableDictionaryRef)v106, v117, (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (int)(v115 * (double)v167[0])));
        v100 = rect1a;
        if (v111)
        {
          v166 = 0;
          FigCFDictionaryGetInt32IfPresent();
          FigCFDictionaryGetInt32IfPresent();
          v152 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
          v154 = *MEMORY[0x1E0C9D648];
          valuePtr.origin = (CGPoint)*MEMORY[0x1E0C9D648];
          valuePtr.size = v152;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            v118 = ceil(v116 * valuePtr.size.width);
            v119 = floor(v116 * valuePtr.size.width);
            if (v116 * valuePtr.size.width >= 0.0)
              v120 = v119;
            else
              v120 = v118;
            v121 = valuePtr.origin.x + v120;
            v122 = ceil(v155 * valuePtr.size.height);
            v123 = floor(v155 * valuePtr.size.height);
            if (v155 * valuePtr.size.height < 0.0)
              v123 = v122;
            valuePtr.origin.x = v121;
            valuePtr.origin.y = valuePtr.origin.y + v123;
            valuePtr.size.width = (double)SHIDWORD(v166) - v121 * 2.0;
            valuePtr.size.height = (double)(int)v166 - valuePtr.origin.y * 2.0;
            FigCFDictionarySetCGRect();
          }
          v163 = v154;
          v164 = v152;
          if (FigCFDictionaryGetCGRectIfPresent())
          {
            v124 = ceil(v116 * v164.width);
            v125 = floor(v116 * v164.width);
            if (v116 * v164.width >= 0.0)
              v126 = v125;
            else
              v126 = v124;
            v127 = *(double *)&v163 + v126;
            v128 = ceil(v155 * v164.height);
            v129 = floor(v155 * v164.height);
            if (v155 * v164.height < 0.0)
              v129 = v128;
            *(double *)&v163 = v127;
            *((double *)&v163 + 1) = *((double *)&v163 + 1) + v129;
            v164.width = (double)SHIDWORD(v166) - v127 * 2.0;
            v164.height = (double)(int)v166 - *((double *)&v163 + 1) * 2.0;
            FigCFDictionarySetCGRect();
          }
        }
      }
      if (v100)
        FigCFDictionarySetCGRect();
      goto LABEL_141;
    }
  }
LABEL_159:
  FigDebugAssert3();
  v130 = 1;
LABEL_142:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  result = target;
  if (target)
    v132 = v130;
  else
    v132 = 0;
  if (v132 == 1)
  {
    CFRelease(target);
    return 0;
  }
  return result;
}

void mscsn_removeNonpropagatedAttachmentsFromReflectedStreamingFrame(void *a1)
{
  CVImageBufferRef ImageBuffer;

  mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(a1);
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a1);
  if (ImageBuffer)
    mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(ImageBuffer);
}

CGFloat mscsn_applyPreviewShiftToCropRect(double a1, double a2, CGFloat a3, CGFloat a4, double a5, double a6, float a7)
{
  double v7;
  double v8;

  v7 = a1 + a5;
  if (1.0 - a3 < v7)
    v7 = 1.0 - a3;
  if (v7 < 0.0)
    v7 = 0.0;
  v8 = a2 + a6;
  if (1.0 - a4 < v8)
    v8 = 1.0 - a4;
  if (v8 < 0.0)
    v8 = 0.0;
  return FigCaptureMetadataUtilitiesScaleRect(v7, v8, a3, a4, a7);
}

void __mscsn_handleStreamDroppedSampleNotification_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  const __CFDictionary *v10;
  id v11;
  void *v12;
  const __CFDictionary *v13;
  uint64_t v14;
  id v15;
  CMTime v16;
  CMTime v17;

  v2 = 0;
  v3 = (const void *)*MEMORY[0x1E0D06FF0];
  v4 = *MEMORY[0x1E0D06FD8];
  v5 = 20;
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) + 384;
    if (*(_DWORD *)(v6 + v2) == 1)
    {
      v7 = v6 + v2;
      v8 = *(unsigned __int8 *)(v7 + 8);
      v9 = *(void **)(v7 + 16);
      if (CFEqual(*(CFTypeRef *)(a1 + 56), v3))
      {
        v10 = (const __CFDictionary *)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v4);
        memset(&v17, 0, sizeof(v17));
        CMTimeMakeFromDictionary(&v17, v10);
        if (v8)
        {
          v16 = v17;
          v11 = +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", 0x1E494EF78, &v16);
          objc_msgSend(v9, "emitDroppedSample:", v11);

          v12 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) + 104);
          v16 = v17;
          objc_msgSend(v12, "sourceNodeDidDropFrameWithPTS:", &v16);
        }
      }
      else if (CFEqual(*(CFTypeRef *)(a1 + 56), CFSTR("Discontinuity")))
      {
        v13 = (const __CFDictionary *)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("EventTimeStamp"));
        memset(&v17, 0, sizeof(v17));
        CMTimeMakeFromDictionary(&v17, v13);
        if (v8)
        {
          v14 = *(_QWORD *)(a1 + 40);
          v16 = v17;
          v15 = +[BWDroppedSample newDroppedSampleWithReason:pts:](BWDroppedSample, "newDroppedSampleWithReason:pts:", v14, &v16);
          objc_msgSend(v9, "emitDroppedSample:", v15);

        }
      }
    }
    v2 += 504;
    --v5;
  }
  while (v5);
  CFRelease(*(CFTypeRef *)(a1 + 56));
}

void __mscsn_handlePoolReadyNotification_block_invoke(uint64_t a1)
{
  const void *Value;
  const void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  const void *v7;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E0D070C0]);
  if (Value)
  {
    v3 = Value;
    v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 384 + 504 * *(int *)(a1 + 56) + 16);
    v5 = objc_msgSend(v4, "preparedPixelBufferPool");
    if (v5)
    {
      v6 = (void *)v5;
      if ((objc_msgSend(v4, "providesPixelBufferPool") & 1) == 0)
        objc_msgSend(v6, "setCVPixelBufferPool:attributes:", v3, *(_QWORD *)(a1 + 48));
    }
    v7 = *(const void **)(a1 + 48);
    if (v7)
      CFRelease(v7);
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
}

uint64_t mscsn_sphereIsUnstableOrInActiveModeBasedOnMetadata(void *a1)
{
  void *v2;
  unsigned int v3;
  void *v4;

  v2 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D06E68]);
  if (v2)
    v3 = (objc_msgSend(v2, "intValue") >> 4) & 1;
  else
    v3 = 0;
  v4 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D077A0]);
  return objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D07A30]) | v3;
}

void mscsn_removeNonpropagatedAttachmentsFromAttachmentBearer(const void *a1)
{
  CMRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D20]);
  CMRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D40]);
  CMRemoveAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05D30]);
}

double mscsn_validPixelBufferRectFromMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *MEMORY[0x1E0C9D628];
  v5 = *MEMORY[0x1E0C9D628];
  v6 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  if (FigCFDictionaryGetCGRectIfPresent()
    && *(double *)&v6 == (double)(int)a2
    && *((double *)&v6 + 1) == (double)SHIDWORD(a2))
  {
    *(_QWORD *)&v5 = v4;
  }
  return *(double *)&v5;
}

__CFString *BWColorSpacePropertiesToString(unsigned int a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_1E4924360[a1];
}

uint64_t pem_cmPhotoAuxImageTypeForPhotoEncoderNodeAuxImageType(int a1)
{
  if ((a1 - 1) > 0xB)
    return 0;
  else
    return dword_1A32B1A70[a1 - 1];
}

uint64_t pem_cmPhotoAuxImageCustomTypeURNForPhotoEncoderNodeAuxImageType(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 1:
      v3 = (uint64_t *)MEMORY[0x1E0D09260];
      goto LABEL_12;
    case 4:
      v3 = (uint64_t *)MEMORY[0x1E0D09278];
      goto LABEL_12;
    case 5:
      v3 = (uint64_t *)MEMORY[0x1E0D09288];
      goto LABEL_12;
    case 6:
      v3 = (uint64_t *)MEMORY[0x1E0D09290];
      goto LABEL_12;
    case 7:
      v3 = (uint64_t *)MEMORY[0x1E0D092A0];
      goto LABEL_12;
    case 8:
      v3 = (uint64_t *)MEMORY[0x1E0D09280];
      goto LABEL_12;
    case 9:
      v3 = (uint64_t *)MEMORY[0x1E0D09298];
      goto LABEL_12;
    case 10:
      v3 = (uint64_t *)MEMORY[0x1E0D09268];
      goto LABEL_12;
    case 11:
      v3 = (uint64_t *)MEMORY[0x1E0D09250];
      goto LABEL_12;
    case 12:
      v3 = (uint64_t *)MEMORY[0x1E0D092A8];
LABEL_12:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

const __CFString *BWInferenceTypePathComponent(int a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  BOOL v5;

  result = CFSTR("unknown_inference");
  if (a1 > 149)
  {
    if (a1 > 200)
    {
      if (a1 > 2000)
      {
        v3 = CFSTR("motion_analysis");
        v4 = CFSTR("experiments");
        if (a1 != 60000)
          v4 = CFSTR("unknown_inference");
        v5 = a1 == 2001;
LABEL_16:
        if (v5)
          return v3;
        else
          return v4;
      }
      else
      {
        switch(a1)
        {
          case 801:
            result = CFSTR("landmarks");
            break;
          case 802:
            result = CFSTR("face_segments_with_landmarks");
            break;
          case 803:
            result = CFSTR("PhotosCuration");
            break;
          case 804:
            result = CFSTR("vision_faceprint");
            break;
          default:
            if (a1 == 201)
              result = CFSTR("matting");
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 150:
          result = CFSTR("fusiontracker");
          break;
        case 151:
          result = CFSTR("humanpose");
          break;
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
          return result;
        case 159:
          result = CFSTR("deep_stereo_photo_transfer");
          break;
        case 160:
          result = CFSTR("deep_zoom");
          break;
        case 161:
          result = CFSTR("faceprint");
          break;
        default:
          v3 = CFSTR("learnednr");
          v4 = CFSTR("quadralearnednr");
          if (a1 != 171)
            v4 = CFSTR("unknown_inference");
          v5 = a1 == 170;
          goto LABEL_16;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 'e':
        result = CFSTR("smart_camera");
        break;
      case 'f':
        result = CFSTR("person_segmentation");
        break;
      case 'g':
        result = CFSTR("rgb_based_person_segmentation");
        break;
      case 'h':
        result = CFSTR("person_semantics");
        break;
      case 'i':
        result = CFSTR("streaming_person_segmentation");
        break;
      case 'j':
        result = CFSTR("monoculardepth");
        break;
      case 'k':
        result = CFSTR("learned_matting");
        break;
      case 'l':
        result = CFSTR("faststereodisparity");
        break;
      case 'm':
        result = CFSTR("videodepth");
        break;
      case 'n':
        result = CFSTR("disparityfiltering");
        break;
      case 'o':
        result = CFSTR("realtimefsdnet");
        break;
      case 'p':
        result = CFSTR("disparityderectification");
        break;
      case 'q':
        result = CFSTR("stereorectification");
        break;
      case 'r':
        return result;
      case 's':
        result = CFSTR("disparitypostprocessing");
        break;
      case 't':
        result = CFSTR("text_localization");
        break;
      case 'u':
        result = CFSTR("opticalflow");
        break;
      case 'v':
        result = CFSTR("anst_refiner256");
        break;
      default:
        if (!a1)
          result = CFSTR("internal_provider");
        break;
    }
  }
  return result;
}

const __CFString *BWInferenceTypeShortDescription(int a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  BOOL v5;

  result = CFSTR("Unknown Inference");
  if (a1 > 149)
  {
    if (a1 > 200)
    {
      if (a1 > 2000)
      {
        v3 = CFSTR("motion-analysis");
        v4 = CFSTR("experimental");
        if (a1 != 60000)
          v4 = CFSTR("Unknown Inference");
        v5 = a1 == 2001;
LABEL_16:
        if (v5)
          return v3;
        else
          return v4;
      }
      else
      {
        switch(a1)
        {
          case 801:
            result = CFSTR("landmarks");
            break;
          case 802:
            result = CFSTR("face-segments-with-landmarks");
            break;
          case 803:
            result = CFSTR("PhotosCuration");
            break;
          case 804:
            result = CFSTR("vision-faceprint");
            break;
          default:
            if (a1 == 201)
              result = CFSTR("matting");
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 150:
          result = CFSTR("fusion-tracker");
          break;
        case 151:
          result = CFSTR("human-pose");
          break;
        case 152:
        case 153:
        case 154:
        case 155:
        case 156:
        case 157:
        case 158:
          return result;
        case 159:
          result = CFSTR("deep-stereo-photo-transfer");
          break;
        case 160:
          result = CFSTR("deep-zoom");
          break;
        case 161:
          result = CFSTR("faceprint");
          break;
        default:
          v3 = CFSTR("Learned-Noise-Reduction");
          v4 = CFSTR("Learned-Noise-Reduction-For-Quadra");
          if (a1 != 171)
            v4 = CFSTR("Unknown Inference");
          v5 = a1 == 170;
          goto LABEL_16;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 'e':
        result = CFSTR("smartcam");
        break;
      case 'f':
        result = CFSTR("person-segmentation");
        break;
      case 'g':
        result = CFSTR("rgb-segmentation");
        break;
      case 'h':
        result = CFSTR("person-semantics");
        break;
      case 'i':
        result = CFSTR("streaming-person-segmentation");
        break;
      case 'j':
        result = CFSTR("monocular-depth");
        break;
      case 'k':
        result = CFSTR("learned-matting");
        break;
      case 'l':
        result = CFSTR("fast-stereo-disparity");
        break;
      case 'm':
        result = CFSTR("video-depth");
        break;
      case 'n':
        result = CFSTR("disparity-filtering");
        break;
      case 'o':
        result = CFSTR("real-time-fsdnet");
        break;
      case 'p':
        result = CFSTR("disparity-derectification");
        break;
      case 'q':
        result = CFSTR("stereo-rectification");
        break;
      case 'r':
        return result;
      case 's':
        result = CFSTR("disparity-post-processing");
        break;
      case 't':
        result = CFSTR("text-localization");
        break;
      case 'u':
        result = CFSTR("optical-flow");
        break;
      case 'v':
        result = CFSTR("vmrefiner");
        break;
      default:
        if (!a1)
          result = CFSTR("internal-provider");
        break;
    }
  }
  return result;
}

uint64_t BWInferenceVersionMakeMajorMinor(unsigned __int16 a1, unsigned __int16 a2)
{
  return a1 | (a2 << 16);
}

const __CFString *BWInferenceStatusDescription(int a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;

  result = CFSTR("unknown status");
  if (a1 > -31703)
  {
    v3 = CFSTR("success");
    if (a1)
      v3 = CFSTR("unknown status");
    if (a1 == -31701)
      v4 = CFSTR("missing resource");
    else
      v4 = v3;
    if (a1 == -31702)
      return CFSTR("resource allocation failed");
    else
      return v4;
  }
  else
  {
    switch(a1)
    {
      case -31761:
        result = CFSTR("<graph> unsatisfiable node created");
        break;
      case -31760:
        result = CFSTR("<graph> generic graph construction error");
        break;
      case -31759:
      case -31758:
      case -31757:
      case -31756:
      case -31755:
      case -31754:
      case -31753:
      case -31752:
      case -31751:
      case -31750:
      case -31749:
      case -31739:
      case -31738:
      case -31737:
      case -31736:
      case -31735:
      case -31734:
      case -31733:
      case -31732:
      case -31731:
      case -31730:
      case -31729:
      case -31728:
      case -31727:
      case -31726:
      case -31725:
      case -31724:
      case -31723:
      case -31722:
      case -31721:
        return result;
      case -31748:
        result = CFSTR("<scaling> missing output identifier");
        break;
      case -31747:
        result = CFSTR("<scaling> provider allocation error");
        break;
      case -31746:
        result = CFSTR("<scaling> unsatisfied output requirements");
        break;
      case -31745:
        result = CFSTR("<scaling> missing output requirements");
        break;
      case -31744:
        result = CFSTR("<scaling> output video buffer preprocessing error");
        break;
      case -31743:
        result = CFSTR("<scaling> output video buffer allocation error");
        break;
      case -31742:
        result = CFSTR("<scaling> output video format error");
        break;
      case -31741:
        result = CFSTR("<scaling> input video format error");
        break;
      case -31740:
        result = CFSTR("<scaling> generic error");
        break;
      case -31720:
        result = CFSTR("<inference> output metadata allocation failed");
        break;
      case -31719:
        result = CFSTR("<inference> missing output metadata");
        break;
      case -31718:
        result = CFSTR("<inference> output video buffer allocation failed");
        break;
      case -31717:
        result = CFSTR("<inference> missing output video buffer");
        break;
      case -31716:
        result = CFSTR("<inference> output video format error");
        break;
      case -31715:
        result = CFSTR("<inference> input metadata allocation failed");
        break;
      case -31714:
        result = CFSTR("<inference> missing input metadata");
        break;
      case -31713:
        result = CFSTR("<inference> input video buffer allocation failed");
        break;
      case -31712:
        result = CFSTR("<inference> missing input video buffer");
        break;
      case -31711:
        result = CFSTR("<inference> input video format error");
        break;
      case -31710:
        result = CFSTR("<inference> generic error");
        break;
      default:
        v5 = CFSTR("<scheduler> jobs in inconsistent state");
        if (a1 != -31781)
          v5 = CFSTR("unknown status");
        if (a1 == -31782)
          result = CFSTR("<inference> version error");
        else
          result = v5;
        break;
    }
  }
  return result;
}

uint64_t BWInferenceGetAttachedInference(const void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;

  v4 = (void *)objc_msgSend((id)CMGetAttachment(a1, CFSTR("Inferences"), 0), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
  if (objc_msgSend(v4, "isValid"))
    return objc_msgSend((id)objc_msgSend(v4, "inferences"), "objectForKeyedSubscript:", a3);
  else
    return 0;
}

id BWInferenceGetLowResPersonInstanceMasksFromSampleBuffer(const void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = (void *)BWSampleBufferCopyDictionaryOfAttachedMedia(a1);
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v3 = (void *)MEMORY[0x1A858DD40]();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = (void *)objc_msgSend((id)objc_msgSend(v1, "allKeys", 0), "sortedArrayUsingSelector:", sel_compare_);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (objc_msgSend(v9, "hasPrefix:", CFSTR("LowResPersonInstanceMask")))
          objc_msgSend(v2, "addObject:", CMSampleBufferGetImageBuffer((CMSampleBufferRef)objc_msgSend(v1, "objectForKeyedSubscript:", v9)));
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }
  objc_autoreleasePoolPop(v3);

  result = (id)objc_msgSend(v2, "count");
  if (result)
    return (id)objc_msgSend(v2, "copy");
  return result;
}

uint64_t FigDepthRotateBuffer(__CVBuffer *a1, __CVBuffer *a2, int a3)
{
  OSType PixelFormatType;
  uint64_t v7;
  OSType v8;
  unsigned __int8 Width;
  unsigned __int8 Height;
  char BytesPerRow;
  char v12;
  char v13;
  char v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CVBuffer *v22;
  int16x8_t *v23;
  __CVBuffer *v24;
  char *v25;
  size_t jj;
  uint64_t v27;
  size_t kk;
  char *v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 *v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  __int128 *v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  size_t v48;
  size_t v49;
  size_t v50;
  OSType v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  char *BaseAddress;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  int32x4_t *v62;
  int8x16_t *v63;
  size_t k;
  uint64_t v65;
  size_t m;
  char *v67;
  int32x4_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 *v72;
  __int128 v73;
  __int128 v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  char *i8;
  __int128 v88;
  __int128 v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t i;
  size_t v99;
  _DWORD *v100;
  _DWORD *j;
  __CVBuffer *v102;
  CVPixelBufferLockFlags v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  _OWORD *v108;
  int16x8_t *v109;
  int16x8_t v110;
  int16x8_t *v111;
  int16x8_t v112;
  int16x8_t *v113;
  int16x8_t v114;
  int16x8_t *v115;
  int16x8_t v116;
  int16x8_t *v117;
  int16x8_t v118;
  int16x8_t *v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  __int128 v128;
  int8x16_t *v129;
  int8x16_t *v130;
  int8x16_t *v131;
  int8x16_t *v132;
  int8x16_t *v133;
  size_t v134;
  uint64_t v135;
  uint64_t v136;
  size_t v137;
  _OWORD *v138;
  int16x8_t *v139;
  int16x8_t v140;
  int16x8_t *v141;
  int16x8_t v142;
  int16x8_t *v143;
  int16x8_t v144;
  int16x8_t *v145;
  int16x8_t v146;
  int16x8_t *v147;
  int16x8_t v148;
  int16x8_t *v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  __int128 v158;
  int8x16_t *v159;
  int8x16_t *v160;
  int8x16_t *v161;
  int8x16_t *v162;
  int8x16_t *v163;
  size_t v164;
  char *v165;
  uint64_t v166;
  size_t mm;
  __int128 v168;
  char *v169;
  __int128 v170;
  char *v171;
  __int128 v172;
  __int128 *v173;
  __int128 v174;
  __int128 *v175;
  __int128 v176;
  __int128 *v177;
  __int128 v178;
  __int128 *v179;
  __int128 v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  size_t nn;
  size_t v188;
  int64x2_t *v189;
  int16x8_t *v190;
  int16x8_t v191;
  int16x8_t *v192;
  int16x8_t v193;
  int16x8_t *v194;
  int16x8_t v195;
  int16x8_t *v196;
  int16x8_t v197;
  int16x8_t *v198;
  int16x8_t v199;
  int16x8_t *v200;
  int16x8_t v201;
  int16x8_t *v202;
  int16x8_t v203;
  int16x8_t *v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t *v225;
  int64x2_t *v226;
  int64x2_t *v227;
  int64x2_t *v228;
  int64x2_t *v229;
  size_t v230;
  char *v231;
  uint64_t v232;
  size_t v233;
  int64x2_t *v234;
  int16x8_t v235;
  int16x8_t *v236;
  int16x8_t v237;
  int16x8_t *v238;
  int16x8_t v239;
  int16x8_t *v240;
  int16x8_t v241;
  int16x8_t *v242;
  int16x8_t v243;
  int16x8_t *v244;
  int16x8_t v245;
  int16x8_t *v246;
  int16x8_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t *v268;
  int64x2_t *v269;
  int64x2_t *v270;
  int64x2_t *v271;
  int64x2_t *v272;
  size_t v273;
  uint64_t v274;
  uint64_t v275;
  size_t v276;
  int64x2_t *v277;
  int16x8_t v278;
  int16x8_t *v279;
  int16x8_t v280;
  int16x8_t *v281;
  int16x8_t v282;
  int16x8_t *v283;
  int16x8_t v284;
  int16x8_t *v285;
  int16x8_t v286;
  int16x8_t *v287;
  int16x8_t v288;
  int16x8_t *v289;
  int16x8_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int64x2_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  int64x2_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t *v311;
  int64x2_t *v312;
  int64x2_t *v313;
  int64x2_t *v314;
  int64x2_t *v315;
  size_t v316;
  uint64_t v317;
  uint64_t v318;
  size_t v319;
  int64x2_t *v320;
  int16x8_t v321;
  int16x8_t *v322;
  int16x8_t v323;
  int16x8_t *v324;
  int16x8_t v325;
  int16x8_t *v326;
  int16x8_t v327;
  int16x8_t *v328;
  int16x8_t v329;
  int16x8_t *v330;
  int16x8_t v331;
  int16x8_t *v332;
  int16x8_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  int64x2_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t *v354;
  int64x2_t *v355;
  int64x2_t *v356;
  int64x2_t *v357;
  int64x2_t *v358;
  size_t v359;
  uint64_t v360;
  size_t v361;
  int8x16_t *v362;
  int32x4_t *v363;
  int8x16_t v364;
  int32x4_t *v365;
  int32x4_t *v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t *v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t *v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t *v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t *v378;
  int32x4_t v379;
  int32x4_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int8x16_t v387;
  int8x16_t v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t *v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t *v409;
  int8x16_t v410;
  int8x16_t *v411;
  int8x16_t *v412;
  int8x16_t *v413;
  int8x16_t *v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t *v417;
  size_t v418;
  uint64_t v419;
  size_t v420;
  int8x16_t *v421;
  int32x4_t *v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t *v425;
  int32x4_t v426;
  int32x4_t *v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t *v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t *v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t *v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t *v439;
  int32x4_t v440;
  int32x4_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int8x16_t v460;
  int8x16_t *v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t *v464;
  int8x16_t *v465;
  int8x16_t *v466;
  int8x16_t v467;
  int8x16_t v468;
  int8x16_t *v469;
  int8x16_t *v470;
  int8x16_t *v471;
  size_t v472;
  char *v473;
  uint64_t v474;
  size_t n;
  char *v476;
  __int128 v477;
  __int128 v478;
  char *v479;
  __int128 v480;
  __int128 v481;
  __int128 *v482;
  __int128 v483;
  __int128 v484;
  __int128 *v485;
  __int128 v486;
  __int128 v487;
  __int128 *v488;
  __int128 v489;
  __int128 v490;
  __int128 *v491;
  __int128 v492;
  __int128 v493;
  _OWORD *v494;
  __int128 v495;
  __int128 v496;
  char *v497;
  __int128 v498;
  char *v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  size_t ii;
  size_t v507;
  int32x4_t *v508;
  int32x4_t *v509;
  int32x4_t *v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t *v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t *v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t *v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t *v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t *v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t *v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int64x2_t v541;
  int64x2_t v542;
  int64x2_t v543;
  int64x2_t v544;
  int64x2_t v545;
  int64x2_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  __int128 v552;
  __int128 v553;
  int64x2_t v554;
  int64x2_t *v555;
  int64x2_t *v556;
  int64x2_t *v557;
  __int8 *v558;
  int64x2_t *v559;
  int64x2_t *v560;
  int64x2_t *v561;
  size_t v562;
  int32x4_t *v563;
  size_t v564;
  int32x4_t *v565;
  int32x4_t *v566;
  int32x4_t *v567;
  int32x4_t v568;
  int32x4_t v569;
  int32x4_t *v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t *v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t *v576;
  int32x4_t v577;
  int32x4_t v578;
  int32x4_t *v579;
  int32x4_t v580;
  int32x4_t v581;
  int32x4_t *v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t *v585;
  int32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t v594;
  int64x2_t v595;
  int64x2_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int64x2_t v599;
  int64x2_t v600;
  int64x2_t v601;
  int64x2_t v602;
  int64x2_t v603;
  int64x2_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t v607;
  int64x2_t v608;
  __int128 v609;
  int64x2_t v610;
  __int128 v611;
  int64x2_t v612;
  int64x2_t *v613;
  __int8 *v614;
  int64x2_t *v615;
  int64x2_t *v616;
  int64x2_t *v617;
  int64x2_t *v618;
  int64x2_t *v619;
  size_t v620;
  uint64_t v621;
  size_t v622;
  int64x2_t *v623;
  int32x4_t *v624;
  int32x4_t *v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t *v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t *v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t *v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t *v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t *v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t *v643;
  int32x4_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int64x2_t v648;
  int64x2_t v649;
  int64x2_t v650;
  int64x2_t v651;
  int64x2_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t *v671;
  int64x2_t *v672;
  int64x2_t *v673;
  int64x2_t *v674;
  int64x2_t *v675;
  int64x2_t *v676;
  int64x2_t *v677;
  size_t v678;
  uint64_t v679;
  size_t v680;
  int64x2_t *v681;
  int32x4_t *v682;
  int32x4_t *v683;
  int32x4_t v684;
  int32x4_t v685;
  int32x4_t *v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t *v689;
  int32x4_t v690;
  int32x4_t v691;
  int32x4_t *v692;
  int32x4_t v693;
  int32x4_t v694;
  int32x4_t *v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t *v698;
  int32x4_t v699;
  int32x4_t v700;
  int32x4_t *v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int64x2_t v706;
  int64x2_t v707;
  int64x2_t v708;
  int64x2_t v709;
  int64x2_t v710;
  int64x2_t v711;
  int64x2_t v712;
  int64x2_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int64x2_t v717;
  int64x2_t v718;
  int64x2_t v719;
  int64x2_t v720;
  int64x2_t v721;
  int64x2_t v722;
  int64x2_t v723;
  int64x2_t v724;
  int64x2_t v725;
  int64x2_t v726;
  int64x2_t v727;
  int64x2_t v728;
  int64x2_t *v729;
  int64x2_t *v730;
  int64x2_t *v731;
  int64x2_t *v732;
  int64x2_t *v733;
  int64x2_t *v734;
  int64x2_t *v735;
  __CVBuffer *v736;
  CVPixelBufferLockFlags v737;
  size_t v738;
  CVPixelBufferRef v739;
  __CVBuffer *pixelBuffer;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v7 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  v8 = CVPixelBufferGetPixelFormatType(a2);
  if (v7 != FigDepthBytesPerPixelForDepthFormat(v8) || v7 != 2 && v7 != 4)
    return FigSignalErrorAt();
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v12 = CVPixelBufferGetWidth(a2);
  v13 = CVPixelBufferGetHeight(a2);
  v14 = CVPixelBufferGetBytesPerRow(a2);
  pixelBuffer = a1;
  if (((Width | Height) & 7) != 0 || (v12 & 7) != 0 || (v13 & 7) != 0 || (BytesPerRow & 0xF) != 0 || (v14 & 0xF) != 0)
  {
    v48 = CVPixelBufferGetWidth(a1);
    v49 = CVPixelBufferGetHeight(a1);
    v50 = CVPixelBufferGetBytesPerRow(a1);
    v51 = CVPixelBufferGetPixelFormatType(a1);
    v52 = FigDepthBytesPerPixelForDepthFormat(v51);
    if (v52)
    {
      v53 = v52;
      v54 = CVPixelBufferGetWidth(a2);
      v55 = CVPixelBufferGetHeight(a2);
      v56 = CVPixelBufferGetBytesPerRow(a2);
      if (CVPixelBufferLockBaseAddress(a1, 1uLL))
      {
        FigDebugAssert3();
      }
      else
      {
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
        if (CVPixelBufferLockBaseAddress(a2, 0))
        {
          FigDebugAssert3();
          v102 = pixelBuffer;
          v103 = 1;
        }
        else
        {
          v58 = (char *)CVPixelBufferGetBaseAddress(a2);
          LODWORD(v59) = v53;
          switch(a3)
          {
            case 1:
              goto LABEL_46;
            case 2:
              v59 = -v53;
              goto LABEL_55;
            case 3:
              v59 = -v53;
              v97 = &BaseAddress[(v49 - 1) * v50];
              v50 = -(uint64_t)v50;
              goto LABEL_45;
            case 4:
              BaseAddress += (v49 - 1) * v50;
              v50 = -(uint64_t)v50;
              LODWORD(v59) = v53;
              if (!v55)
                break;
              goto LABEL_47;
            case 5:
              LODWORD(v59) = v50;
              goto LABEL_42;
            case 6:
              v59 = -(uint64_t)v50;
              BaseAddress += (v49 - 1) * v50;
LABEL_42:
              LODWORD(v50) = v53;
              if (!v55)
                break;
              goto LABEL_47;
            case 7:
              v59 = -(uint64_t)v50;
              v97 = &BaseAddress[(v49 - 1) * v50];
              v50 = -v53;
LABEL_45:
              BaseAddress = &v97[v53 * (v48 - 1)];
LABEL_46:
              if (v55)
                goto LABEL_47;
              break;
            case 8:
              LODWORD(v59) = v50;
              v50 = -v53;
LABEL_55:
              BaseAddress += v53 * (v48 - 1);
              if (!v55)
                break;
LABEL_47:
              for (i = 0; i != v55; ++i)
              {
                v99 = v54;
                v100 = v58;
                for (j = BaseAddress; v99; --v99)
                {
                  *v100 = *j;
                  v100 = (_DWORD *)((char *)v100 + v53);
                  j = (_DWORD *)((char *)j + (int)v59);
                }
                v58 += v56;
                BaseAddress += (int)v50;
              }
              break;
            default:
              FigSignalErrorAt();
              break;
          }
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          v102 = a2;
          v103 = 0;
        }
        CVPixelBufferUnlockBaseAddress(v102, v103);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    return 0;
  }
  v739 = (CVPixelBufferRef)CVPixelBufferGetWidth(a1);
  v738 = CVPixelBufferGetHeight(a1);
  v15 = CVPixelBufferGetBytesPerRow(a1);
  v16 = CVPixelBufferGetWidth(a2);
  v17 = CVPixelBufferGetHeight(a2);
  v18 = CVPixelBufferGetBytesPerRow(a2);
  v19 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  v20 = v19;
  if (v7 != 2)
  {
    if (!(_DWORD)v19)
    {
      v61 = CVPixelBufferLockBaseAddress(a2, 0);
      if (!(_DWORD)v61)
      {
        v22 = a2;
        v62 = (int32x4_t *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v24 = v22;
        v63 = (int8x16_t *)CVPixelBufferGetBaseAddress(v22);
        switch(a3)
        {
          case 1:
            if (v17)
            {
              for (k = 0; k < v17; k += 8)
              {
                if (v16)
                {
                  v65 = 0;
                  for (m = 0; m < v16; m += 8)
                  {
                    v68 = v62[v65 + 1];
                    v67 = &v62[v65].i8[v15];
                    v70 = *(_OWORD *)v67;
                    v71 = *((_OWORD *)v67 + 1);
                    v69 = &v67[v15];
                    v73 = *(_OWORD *)v69;
                    v74 = *((_OWORD *)v69 + 1);
                    v72 = (__int128 *)&v69[v15];
                    v76 = *v72;
                    v77 = v72[1];
                    v75 = (__int128 *)((char *)v72 + v15);
                    v79 = *v75;
                    v80 = v75[1];
                    v78 = (__int128 *)((char *)v75 + v15);
                    v82 = *v78;
                    v83 = v78[1];
                    v81 = (__int128 *)((char *)v78 + v15);
                    v85 = *v81;
                    v86 = v81[1];
                    v84 = (__int128 *)((char *)v81 + v15);
                    i8 = v63[v65].i8;
                    v88 = *v84;
                    v89 = v84[1];
                    *(int32x4_t *)i8 = v62[v65];
                    *((int32x4_t *)i8 + 1) = v68;
                    v90 = &v63[v65].i8[v18];
                    *(_OWORD *)v90 = v70;
                    *((_OWORD *)v90 + 1) = v71;
                    v91 = &v90[v18];
                    *(_OWORD *)v91 = v73;
                    *((_OWORD *)v91 + 1) = v74;
                    v92 = &v91[v18];
                    *(_OWORD *)v92 = v76;
                    *((_OWORD *)v92 + 1) = v77;
                    v93 = &v92[v18];
                    *(_OWORD *)v93 = v79;
                    *((_OWORD *)v93 + 1) = v80;
                    v94 = &v93[v18];
                    *(_OWORD *)v94 = v82;
                    *((_OWORD *)v94 + 1) = v83;
                    v95 = &v94[v18];
                    *(_OWORD *)v95 = v85;
                    *((_OWORD *)v95 + 1) = v86;
                    v96 = &v95[v18];
                    *(_OWORD *)v96 = v88;
                    *((_OWORD *)v96 + 1) = v89;
                    v65 += 2;
                  }
                }
                v62 = (int32x4_t *)((char *)v62 + 8 * (int)v15);
                v63 = (int8x16_t *)((char *)v63 + 8 * v18);
              }
            }
            goto LABEL_156;
          case 2:
            if (!v17)
              goto LABEL_156;
            v359 = 0;
            v360 = (uint64_t)v62[-2].i64 + 4 * (_QWORD)v739;
            do
            {
              if (v16)
              {
                v361 = 0;
                v362 = v63;
                v363 = (int32x4_t *)v360;
                do
                {
                  v364 = (int8x16_t)vrev64q_s32(v363[1]);
                  v365 = (int32x4_t *)((char *)v363 + v15 + v15);
                  v367 = *v365;
                  v368 = v365[1];
                  v366 = (int32x4_t *)((char *)v365 + v15);
                  v370 = *v366;
                  v371 = v366[1];
                  v369 = (int32x4_t *)((char *)v366 + v15);
                  v373 = *v369;
                  v374 = v369[1];
                  v372 = (int32x4_t *)((char *)v369 + v15);
                  v376 = *v372;
                  v377 = v372[1];
                  v375 = (int32x4_t *)((char *)v372 + v15);
                  v379 = *v375;
                  v380 = v375[1];
                  v378 = (int32x4_t *)((char *)v375 + v15);
                  v381 = vextq_s8(v364, v364, 8uLL);
                  v382 = (int8x16_t)vrev64q_s32(*v363);
                  v383 = vextq_s8(v382, v382, 8uLL);
                  v384 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v363[1] + v15));
                  v385 = *v378;
                  v386 = v378[1];
                  v387 = vextq_s8(v384, v384, 8uLL);
                  v388 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)v363 + v15));
                  v389 = vextq_s8(v388, v388, 8uLL);
                  v390 = (int8x16_t)vrev64q_s32(v368);
                  v391 = (int8x16_t)vrev64q_s32(v367);
                  v392 = vextq_s8(v390, v390, 8uLL);
                  v393 = vextq_s8(v391, v391, 8uLL);
                  v394 = (int8x16_t)vrev64q_s32(v371);
                  v395 = vextq_s8(v394, v394, 8uLL);
                  v396 = (int8x16_t)vrev64q_s32(v370);
                  v397 = vextq_s8(v396, v396, 8uLL);
                  v398 = (int8x16_t)vrev64q_s32(v374);
                  v399 = vextq_s8(v398, v398, 8uLL);
                  v400 = (int8x16_t)vrev64q_s32(v373);
                  v401 = vextq_s8(v400, v400, 8uLL);
                  v402 = (int8x16_t)vrev64q_s32(v377);
                  v403 = (int8x16_t)vrev64q_s32(v376);
                  v404 = vextq_s8(v402, v402, 8uLL);
                  v405 = (int8x16_t)vrev64q_s32(v380);
                  v406 = (int8x16_t *)((char *)v362 + v18);
                  *v362 = v381;
                  v362[1] = v383;
                  v362 += 2;
                  v407 = vextq_s8(v405, v405, 8uLL);
                  v408 = (int8x16_t)vrev64q_s32(v379);
                  *v406 = v387;
                  v406[1] = v389;
                  v409 = (int8x16_t *)((char *)v406 + v18);
                  v410 = vextq_s8(v408, v408, 8uLL);
                  *v409 = v392;
                  v409[1] = v393;
                  v411 = (int8x16_t *)((char *)v409 + v18);
                  *v411 = v395;
                  v411[1] = v397;
                  v412 = (int8x16_t *)((char *)v411 + v18);
                  *v412 = v399;
                  v412[1] = v401;
                  v413 = (int8x16_t *)((char *)v412 + v18);
                  *v413 = v404;
                  v413[1] = vextq_s8(v403, v403, 8uLL);
                  v414 = (int8x16_t *)((char *)v413 + v18);
                  v415 = (int8x16_t)vrev64q_s32(v386);
                  v416 = (int8x16_t)vrev64q_s32(v385);
                  *v414 = v407;
                  v414[1] = v410;
                  v417 = (int8x16_t *)((char *)v414 + v18);
                  *v417 = vextq_s8(v415, v415, 8uLL);
                  v417[1] = vextq_s8(v416, v416, 8uLL);
                  v361 += 8;
                  v363 -= 2;
                }
                while (v16 > v361);
              }
              v359 += 8;
              v360 += 8 * (int)v15;
              v63 = (int8x16_t *)((char *)v63 + 8 * v18);
            }
            while (v17 > v359);
            goto LABEL_155;
          case 3:
            if (!v17)
              goto LABEL_156;
            v418 = 0;
            v419 = (uint64_t)v62[-2].i64 + 4 * (_QWORD)v739 + (v738 - 8) * v15;
            do
            {
              if (v16)
              {
                v420 = 0;
                v421 = v63;
                v422 = (int32x4_t *)v419;
                do
                {
                  v423 = *v422;
                  v424 = v422[1];
                  v426 = *(int32x4_t *)((char *)v422 + v15);
                  v425 = (int32x4_t *)((char *)v422 + v15 + v15);
                  v428 = *v425;
                  v429 = v425[1];
                  v427 = (int32x4_t *)((char *)v425 + v15);
                  v431 = *v427;
                  v432 = v427[1];
                  v430 = (int32x4_t *)((char *)v427 + v15);
                  v434 = *v430;
                  v435 = v430[1];
                  v433 = (int32x4_t *)((char *)v430 + v15);
                  v437 = *v433;
                  v438 = v433[1];
                  v436 = (int32x4_t *)((char *)v433 + v15);
                  v440 = *v436;
                  v441 = v436[1];
                  v439 = (int32x4_t *)((char *)v436 + v15);
                  v442 = (int8x16_t)vrev64q_s32(v439[1]);
                  v443 = (int8x16_t)vrev64q_s32(*v439);
                  v444 = (int8x16_t)vrev64q_s32(v441);
                  v445 = vextq_s8(v444, v444, 8uLL);
                  v446 = vextq_s8(v442, v442, 8uLL);
                  v447 = (int8x16_t)vrev64q_s32(v440);
                  v448 = vextq_s8(v447, v447, 8uLL);
                  v449 = (int8x16_t)vrev64q_s32(v438);
                  v450 = (int8x16_t)vrev64q_s32(v437);
                  v451 = (int8x16_t)vrev64q_s32(v435);
                  v452 = vextq_s8(v443, v443, 8uLL);
                  v453 = (int8x16_t)vrev64q_s32(v434);
                  v454 = vextq_s8(v453, v453, 8uLL);
                  v455 = (int8x16_t)vrev64q_s32(v432);
                  v456 = (int8x16_t)vrev64q_s32(v431);
                  v457 = (int8x16_t)vrev64q_s32(v429);
                  v458 = (int8x16_t)vrev64q_s32(v428);
                  v459 = vextq_s8(v458, v458, 8uLL);
                  v460 = (int8x16_t)vrev64q_s32(*(int32x4_t *)((char *)&v422[1] + v15));
                  v461 = (int8x16_t *)((char *)v421 + v18);
                  *v421 = v446;
                  v421[1] = v452;
                  v421 += 2;
                  v462 = (int8x16_t)vrev64q_s32(v426);
                  v463 = vextq_s8(v462, v462, 8uLL);
                  *v461 = v445;
                  v461[1] = v448;
                  v464 = (int8x16_t *)((char *)v461 + v18);
                  *v464 = vextq_s8(v449, v449, 8uLL);
                  v464[1] = vextq_s8(v450, v450, 8uLL);
                  v465 = (int8x16_t *)((char *)v464 + v18);
                  *v465 = vextq_s8(v451, v451, 8uLL);
                  v465[1] = v454;
                  v466 = (int8x16_t *)((char *)v465 + v18);
                  v467 = (int8x16_t)vrev64q_s32(v424);
                  v468 = (int8x16_t)vrev64q_s32(v423);
                  *v466 = vextq_s8(v455, v455, 8uLL);
                  v466[1] = vextq_s8(v456, v456, 8uLL);
                  v469 = (int8x16_t *)((char *)v466 + v18);
                  *v469 = vextq_s8(v457, v457, 8uLL);
                  v469[1] = v459;
                  v470 = (int8x16_t *)((char *)v469 + v18);
                  *v470 = vextq_s8(v460, v460, 8uLL);
                  v470[1] = v463;
                  v471 = (int8x16_t *)((char *)v470 + v18);
                  *v471 = vextq_s8(v467, v467, 8uLL);
                  v471[1] = vextq_s8(v468, v468, 8uLL);
                  v420 += 8;
                  v422 -= 2;
                }
                while (v16 > v420);
              }
              v418 += 8;
              v419 += -8 * (int)v15;
              v63 = (int8x16_t *)((char *)v63 + 8 * v18);
            }
            while (v17 > v418);
            goto LABEL_155;
          case 4:
            if (!v17)
              goto LABEL_156;
            v472 = 0;
            v473 = &v62->i8[(v738 - 8) * v15];
            do
            {
              if (v16)
              {
                v474 = 0;
                for (n = 0; n < v16; n += 8)
                {
                  v477 = *(_OWORD *)&v473[v474 * 16];
                  v478 = *(_OWORD *)&v473[v474 * 16 + 16];
                  v476 = &v473[v474 * 16 + v15];
                  v480 = *(_OWORD *)v476;
                  v481 = *((_OWORD *)v476 + 1);
                  v479 = &v476[v15];
                  v483 = *(_OWORD *)v479;
                  v484 = *((_OWORD *)v479 + 1);
                  v482 = (__int128 *)&v479[v15];
                  v486 = *v482;
                  v487 = v482[1];
                  v485 = (__int128 *)((char *)v482 + v15);
                  v489 = *v485;
                  v490 = v485[1];
                  v488 = (__int128 *)((char *)v485 + v15);
                  v492 = *v488;
                  v493 = v488[1];
                  v491 = (__int128 *)((char *)v488 + v15);
                  v495 = *v491;
                  v496 = v491[1];
                  v494 = (__int128 *)((char *)v491 + v15);
                  v497 = v63[v474].i8;
                  v498 = v494[1];
                  *(_OWORD *)v497 = *v494;
                  *((_OWORD *)v497 + 1) = v498;
                  v499 = &v63[v474].i8[v18];
                  *(_OWORD *)v499 = v495;
                  *((_OWORD *)v499 + 1) = v496;
                  v500 = &v499[v18];
                  *(_OWORD *)v500 = v492;
                  *((_OWORD *)v500 + 1) = v493;
                  v501 = &v500[v18];
                  *(_OWORD *)v501 = v489;
                  *((_OWORD *)v501 + 1) = v490;
                  v502 = &v501[v18];
                  *(_OWORD *)v502 = v486;
                  *((_OWORD *)v502 + 1) = v487;
                  v503 = &v502[v18];
                  *(_OWORD *)v503 = v483;
                  *((_OWORD *)v503 + 1) = v484;
                  v504 = &v503[v18];
                  *(_OWORD *)v504 = v480;
                  *((_OWORD *)v504 + 1) = v481;
                  v505 = &v504[v18];
                  *(_OWORD *)v505 = v477;
                  *((_OWORD *)v505 + 1) = v478;
                  v474 += 2;
                }
              }
              v472 += 8;
              v473 -= 8 * (int)v15;
              v63 = (int8x16_t *)((char *)v63 + 8 * v18);
            }
            while (v17 > v472);
            goto LABEL_155;
          case 5:
            if (v17)
            {
              for (ii = 0; ii < v17; ii += 8)
              {
                if (v16)
                {
                  v507 = 0;
                  v508 = (int32x4_t *)v63;
                  v509 = v62;
                  do
                  {
                    v511 = *v509;
                    v512 = v509[1];
                    v510 = (int32x4_t *)((char *)v509 + v15);
                    v514 = *v510;
                    v515 = v510[1];
                    v513 = (int32x4_t *)((char *)v510 + v15);
                    v517 = *v513;
                    v518 = v513[1];
                    v516 = (int32x4_t *)((char *)v513 + v15);
                    v520 = *v516;
                    v521 = v516[1];
                    v519 = (int32x4_t *)((char *)v516 + v15);
                    v523 = *v519;
                    v524 = v519[1];
                    v522 = (int32x4_t *)((char *)v519 + v15);
                    v526 = *v522;
                    v527 = v522[1];
                    v525 = (int32x4_t *)((char *)v522 + v15);
                    v529 = *v525;
                    v530 = v525[1];
                    v528 = (int32x4_t *)((char *)v525 + v15);
                    v531 = *v528;
                    v532 = v528[1];
                    v509 = (int32x4_t *)((char *)v528 + 8 * (int)v15 + -7 * v15);
                    v533 = (int64x2_t)vzip1q_s32(v511, v514);
                    v534 = (int64x2_t)vzip2q_s32(v511, v514);
                    v535 = (int64x2_t)vzip1q_s32(v512, v515);
                    v536 = (int64x2_t)vzip2q_s32(v512, v515);
                    v537 = (int64x2_t)vzip1q_s32(v517, v520);
                    v538 = (int64x2_t)vzip2q_s32(v517, v520);
                    v539 = (int64x2_t)vzip1q_s32(v518, v521);
                    v540 = (int64x2_t)vzip2q_s32(v518, v521);
                    v541 = (int64x2_t)vzip1q_s32(v523, v526);
                    v542 = (int64x2_t)vzip2q_s32(v523, v526);
                    v543 = (int64x2_t)vzip1q_s32(v524, v527);
                    v544 = (int64x2_t)vzip2q_s32(v524, v527);
                    v545 = (int64x2_t)vzip1q_s32(v529, v531);
                    v546 = (int64x2_t)vzip2q_s32(v529, v531);
                    v547 = (int64x2_t)vzip1q_s32(v530, v532);
                    v548 = (int64x2_t)vzip2q_s32(v530, v532);
                    v549 = vzip2q_s64(v533, v537);
                    v529.i64[0] = v533.i64[0];
                    v529.i64[1] = v537.i64[0];
                    v530.i64[0] = v541.i64[0];
                    v530.i64[1] = v545.i64[0];
                    v550 = vzip2q_s64(v541, v545);
                    v551 = vzip2q_s64(v534, v538);
                    v533.i64[0] = v534.i64[0];
                    v533.i64[1] = v538.i64[0];
                    *(_QWORD *)&v552 = v535.i64[0];
                    *((_QWORD *)&v552 + 1) = v539.i64[0];
                    v534.i64[0] = v542.i64[0];
                    v534.i64[1] = v546.i64[0];
                    *(_QWORD *)&v553 = v543.i64[0];
                    *((_QWORD *)&v553 + 1) = v547.i64[0];
                    v554 = vzip2q_s64(v542, v546);
                    v541.i64[0] = v536.i64[0];
                    v541.i64[1] = v540.i64[0];
                    v542.i64[0] = v544.i64[0];
                    v542.i64[1] = v548.i64[0];
                    v555 = (int64x2_t *)&v508->i8[v18];
                    *v508 = v529;
                    v508[1] = v530;
                    v508 += 2;
                    *v555 = v549;
                    v555[1] = v550;
                    v556 = (int64x2_t *)((char *)v555 + v18);
                    *v556 = v533;
                    v556[1] = v534;
                    v557 = (int64x2_t *)((char *)v556 + v18);
                    *v557 = v551;
                    v557[1] = v554;
                    v558 = &v557->i8[v18];
                    *(_OWORD *)v558 = v552;
                    *((_OWORD *)v558 + 1) = v553;
                    v559 = (int64x2_t *)&v558[v18];
                    *v559 = vzip2q_s64(v535, v539);
                    v559[1] = vzip2q_s64(v543, v547);
                    v560 = (int64x2_t *)((char *)v559 + v18);
                    *v560 = v541;
                    v560[1] = v542;
                    v561 = (int64x2_t *)((char *)v560 + v18);
                    *v561 = vzip2q_s64(v536, v540);
                    v561[1] = vzip2q_s64(v544, v548);
                    v507 += 8;
                  }
                  while (v16 > v507);
                }
                v62 += 2;
                v63 = (int8x16_t *)((char *)v63 + 8 * v18);
              }
            }
            goto LABEL_156;
          case 6:
            if (!v17)
              goto LABEL_156;
            v562 = 0;
            v563 = (int32x4_t *)((char *)v62 + (v738 - 8) * v15);
            do
            {
              if (v16)
              {
                v564 = 0;
                v565 = (int32x4_t *)v63;
                v566 = v563;
                do
                {
                  v568 = *v566;
                  v569 = v566[1];
                  v567 = (int32x4_t *)((char *)v566 + v15);
                  v571 = *v567;
                  v572 = v567[1];
                  v570 = (int32x4_t *)((char *)v567 + v15);
                  v574 = *v570;
                  v575 = v570[1];
                  v573 = (int32x4_t *)((char *)v570 + v15);
                  v577 = *v573;
                  v578 = v573[1];
                  v576 = (int32x4_t *)((char *)v573 + v15);
                  v580 = *v576;
                  v581 = v576[1];
                  v579 = (int32x4_t *)((char *)v576 + v15);
                  v583 = *v579;
                  v584 = v579[1];
                  v582 = (int32x4_t *)((char *)v579 + v15);
                  v586 = *v582;
                  v587 = v582[1];
                  v585 = (int32x4_t *)((char *)v582 + v15);
                  v588 = *v585;
                  v589 = v585[1];
                  v566 = (int32x4_t *)((char *)v585 - 7 * v15 + -8 * (int)v15);
                  v590 = (int64x2_t)vzip1q_s32(v588, v586);
                  v591 = (int64x2_t)vzip2q_s32(v588, v586);
                  v592 = (int64x2_t)vzip1q_s32(v589, v587);
                  v593 = (int64x2_t)vzip2q_s32(v589, v587);
                  v594 = (int64x2_t)vzip1q_s32(v583, v580);
                  v595 = (int64x2_t)vzip2q_s32(v583, v580);
                  v596 = (int64x2_t)vzip1q_s32(v584, v581);
                  v597 = (int64x2_t)vzip2q_s32(v584, v581);
                  v598 = (int64x2_t)vzip1q_s32(v577, v574);
                  v599 = (int64x2_t)vzip2q_s32(v577, v574);
                  v600 = (int64x2_t)vzip1q_s32(v578, v575);
                  v601 = (int64x2_t)vzip2q_s32(v578, v575);
                  v602 = (int64x2_t)vzip1q_s32(v571, v568);
                  v603 = (int64x2_t)vzip2q_s32(v571, v568);
                  v604 = (int64x2_t)vzip1q_s32(v572, v569);
                  v605 = (int64x2_t)vzip2q_s32(v572, v569);
                  v606 = vzip2q_s64(v590, v594);
                  v572.i64[0] = v590.i64[0];
                  v572.i64[1] = v594.i64[0];
                  v590.i64[0] = v598.i64[0];
                  v590.i64[1] = v602.i64[0];
                  v607 = vzip2q_s64(v598, v602);
                  v608 = vzip2q_s64(v591, v595);
                  *(_QWORD *)&v609 = v591.i64[0];
                  *((_QWORD *)&v609 + 1) = v595.i64[0];
                  v610 = vzip2q_s64(v592, v596);
                  v591.i64[0] = v592.i64[0];
                  v591.i64[1] = v596.i64[0];
                  *(_QWORD *)&v611 = v599.i64[0];
                  *((_QWORD *)&v611 + 1) = v603.i64[0];
                  v592.i64[0] = v600.i64[0];
                  v592.i64[1] = v604.i64[0];
                  v612 = vzip2q_s64(v599, v603);
                  v602.i64[0] = v593.i64[0];
                  v602.i64[1] = v597.i64[0];
                  v603.i64[0] = v601.i64[0];
                  v603.i64[1] = v605.i64[0];
                  v613 = (int64x2_t *)&v565->i8[v18];
                  *v565 = v572;
                  v565[1] = (int32x4_t)v590;
                  v565 += 2;
                  *v613 = v606;
                  v613[1] = v607;
                  v614 = &v613->i8[v18];
                  *(_OWORD *)v614 = v609;
                  *((_OWORD *)v614 + 1) = v611;
                  v615 = (int64x2_t *)&v614[v18];
                  *v615 = v608;
                  v615[1] = v612;
                  v616 = (int64x2_t *)((char *)v615 + v18);
                  *v616 = v591;
                  v616[1] = v592;
                  v617 = (int64x2_t *)((char *)v616 + v18);
                  *v617 = v610;
                  v617[1] = vzip2q_s64(v600, v604);
                  v618 = (int64x2_t *)((char *)v617 + v18);
                  *v618 = v602;
                  v618[1] = v603;
                  v619 = (int64x2_t *)((char *)v618 + v18);
                  *v619 = vzip2q_s64(v593, v597);
                  v619[1] = vzip2q_s64(v601, v605);
                  v564 += 8;
                }
                while (v16 > v564);
              }
              v562 += 8;
              v563 += 2;
              v63 = (int8x16_t *)((char *)v63 + 8 * v18);
            }
            while (v17 > v562);
            goto LABEL_155;
          case 7:
            if (!v17)
              goto LABEL_156;
            v620 = 0;
            v621 = (uint64_t)v62[-2].i64 + 4 * (_QWORD)v739 + (v738 - 8) * v15;
            do
            {
              if (v16)
              {
                v622 = 0;
                v623 = (int64x2_t *)v63;
                v624 = (int32x4_t *)v621;
                do
                {
                  v626 = *v624;
                  v627 = v624[1];
                  v625 = (int32x4_t *)((char *)v624 + v15);
                  v629 = *v625;
                  v630 = v625[1];
                  v628 = (int32x4_t *)((char *)v625 + v15);
                  v632 = *v628;
                  v633 = v628[1];
                  v631 = (int32x4_t *)((char *)v628 + v15);
                  v635 = *v631;
                  v636 = v631[1];
                  v634 = (int32x4_t *)((char *)v631 + v15);
                  v638 = *v634;
                  v639 = v634[1];
                  v637 = (int32x4_t *)((char *)v634 + v15);
                  v641 = *v637;
                  v642 = v637[1];
                  v640 = (int32x4_t *)((char *)v637 + v15);
                  v644 = *v640;
                  v645 = v640[1];
                  v643 = (int32x4_t *)((char *)v640 + v15);
                  v646 = *v643;
                  v647 = v643[1];
                  v624 = (int32x4_t *)((char *)v643 - 7 * v15 + -8 * (int)v15);
                  v648 = (int64x2_t)vzip1q_s32(v646, v644);
                  v649 = (int64x2_t)vzip2q_s32(v646, v644);
                  v650 = (int64x2_t)vzip1q_s32(v647, v645);
                  v651 = (int64x2_t)vzip2q_s32(v647, v645);
                  v652 = (int64x2_t)vzip1q_s32(v641, v638);
                  v653 = (int64x2_t)vzip2q_s32(v641, v638);
                  v654 = (int64x2_t)vzip1q_s32(v642, v639);
                  v655 = (int64x2_t)vzip2q_s32(v642, v639);
                  v656 = (int64x2_t)vzip1q_s32(v635, v632);
                  v657 = (int64x2_t)vzip2q_s32(v635, v632);
                  v658 = (int64x2_t)vzip1q_s32(v636, v633);
                  v659 = (int64x2_t)vzip2q_s32(v636, v633);
                  v660 = (int64x2_t)vzip1q_s32(v629, v626);
                  v661 = (int64x2_t)vzip2q_s32(v629, v626);
                  v662 = (int64x2_t)vzip1q_s32(v630, v627);
                  v663 = (int64x2_t)vzip2q_s32(v630, v627);
                  v664 = vzip2q_s64(v651, v655);
                  v665 = vzip2q_s64(v659, v663);
                  v651.i64[1] = v655.i64[0];
                  v659.i64[1] = v663.i64[0];
                  v666 = vzip2q_s64(v650, v654);
                  v667 = vzip2q_s64(v658, v662);
                  v650.i64[1] = v654.i64[0];
                  v658.i64[1] = v662.i64[0];
                  v668 = vzip2q_s64(v649, v653);
                  v669 = vzip2q_s64(v657, v661);
                  v649.i64[1] = v653.i64[0];
                  v657.i64[1] = v661.i64[0];
                  v670 = vzip2q_s64(v648, v652);
                  v648.i64[1] = v652.i64[0];
                  v671 = (int64x2_t *)((char *)v623 + v18);
                  *v623 = v664;
                  v623[1] = v665;
                  v623 += 2;
                  *v671 = v651;
                  v671[1] = v659;
                  v672 = (int64x2_t *)((char *)v671 + v18);
                  *v672 = v666;
                  v672[1] = v667;
                  v673 = (int64x2_t *)((char *)v672 + v18);
                  *v673 = v650;
                  v673[1] = v658;
                  v674 = (int64x2_t *)((char *)v673 + v18);
                  *v674 = v668;
                  v674[1] = v669;
                  v675 = (int64x2_t *)((char *)v674 + v18);
                  *v675 = v649;
                  v675[1] = v657;
                  v676 = (int64x2_t *)((char *)v675 + v18);
                  *v676 = v670;
                  v676[1] = vzip2q_s64(v656, v660);
                  v677 = (int64x2_t *)((char *)v676 + v18);
                  v656.i64[1] = v660.i64[0];
                  *v677 = v648;
                  v677[1] = v656;
                  v622 += 8;
                }
                while (v16 > v622);
              }
              v620 += 8;
              v621 -= 32;
              v63 = (int8x16_t *)((char *)v63 + 8 * v18);
            }
            while (v17 > v620);
            goto LABEL_155;
          case 8:
            if (v17)
            {
              v678 = 0;
              v679 = (uint64_t)v62[-2].i64 + 4 * (_QWORD)v739;
              do
              {
                if (v16)
                {
                  v680 = 0;
                  v681 = (int64x2_t *)v63;
                  v682 = (int32x4_t *)v679;
                  do
                  {
                    v684 = *v682;
                    v685 = v682[1];
                    v683 = (int32x4_t *)((char *)v682 + v15);
                    v687 = *v683;
                    v688 = v683[1];
                    v686 = (int32x4_t *)((char *)v683 + v15);
                    v690 = *v686;
                    v691 = v686[1];
                    v689 = (int32x4_t *)((char *)v686 + v15);
                    v693 = *v689;
                    v694 = v689[1];
                    v692 = (int32x4_t *)((char *)v689 + v15);
                    v696 = *v692;
                    v697 = v692[1];
                    v695 = (int32x4_t *)((char *)v692 + v15);
                    v699 = *v695;
                    v700 = v695[1];
                    v698 = (int32x4_t *)((char *)v695 + v15);
                    v702 = *v698;
                    v703 = v698[1];
                    v701 = (int32x4_t *)((char *)v698 + v15);
                    v704 = *v701;
                    v705 = v701[1];
                    v682 = (int32x4_t *)((char *)v701 + 8 * (int)v15 + -7 * v15);
                    v706 = (int64x2_t)vzip1q_s32(v684, v687);
                    v707 = (int64x2_t)vzip2q_s32(v684, v687);
                    v708 = (int64x2_t)vzip1q_s32(v685, v688);
                    v709 = (int64x2_t)vzip2q_s32(v685, v688);
                    v710 = (int64x2_t)vzip1q_s32(v690, v693);
                    v711 = (int64x2_t)vzip2q_s32(v690, v693);
                    v712 = (int64x2_t)vzip1q_s32(v691, v694);
                    v713 = (int64x2_t)vzip2q_s32(v691, v694);
                    v714 = (int64x2_t)vzip1q_s32(v696, v699);
                    v715 = (int64x2_t)vzip2q_s32(v696, v699);
                    v716 = (int64x2_t)vzip1q_s32(v697, v700);
                    v717 = (int64x2_t)vzip2q_s32(v697, v700);
                    v718 = (int64x2_t)vzip1q_s32(v702, v704);
                    v719 = (int64x2_t)vzip2q_s32(v702, v704);
                    v720 = (int64x2_t)vzip1q_s32(v703, v705);
                    v721 = (int64x2_t)vzip2q_s32(v703, v705);
                    v722 = vzip2q_s64(v709, v713);
                    v723 = vzip2q_s64(v717, v721);
                    v709.i64[1] = v713.i64[0];
                    v717.i64[1] = v721.i64[0];
                    v724 = vzip2q_s64(v708, v712);
                    v725 = vzip2q_s64(v716, v720);
                    v708.i64[1] = v712.i64[0];
                    v716.i64[1] = v720.i64[0];
                    v726 = vzip2q_s64(v707, v711);
                    v727 = vzip2q_s64(v715, v719);
                    v707.i64[1] = v711.i64[0];
                    v715.i64[1] = v719.i64[0];
                    v728 = vzip2q_s64(v706, v710);
                    v706.i64[1] = v710.i64[0];
                    v729 = (int64x2_t *)((char *)v681 + v18);
                    *v681 = v722;
                    v681[1] = v723;
                    v681 += 2;
                    *v729 = v709;
                    v729[1] = v717;
                    v730 = (int64x2_t *)((char *)v729 + v18);
                    *v730 = v724;
                    v730[1] = v725;
                    v731 = (int64x2_t *)((char *)v730 + v18);
                    *v731 = v708;
                    v731[1] = v716;
                    v732 = (int64x2_t *)((char *)v731 + v18);
                    *v732 = v726;
                    v732[1] = v727;
                    v733 = (int64x2_t *)((char *)v732 + v18);
                    *v733 = v707;
                    v733[1] = v715;
                    v734 = (int64x2_t *)((char *)v733 + v18);
                    *v734 = v728;
                    v734[1] = vzip2q_s64(v714, v718);
                    v735 = (int64x2_t *)((char *)v734 + v18);
                    v714.i64[1] = v718.i64[0];
                    *v735 = v706;
                    v735[1] = v714;
                    v680 += 8;
                  }
                  while (v16 > v680);
                }
                v678 += 8;
                v679 -= 32;
                v63 = (int8x16_t *)((char *)v63 + 8 * v18);
              }
              while (v17 > v678);
              goto LABEL_155;
            }
LABEL_156:
            v20 = 0;
LABEL_157:
            v22 = v24;
            break;
          default:
LABEL_57:
            v20 = FigSignalErrorAt();
            goto LABEL_157;
        }
        goto LABEL_158;
      }
      v20 = v61;
LABEL_168:
      FigDebugAssert3();
      v736 = pixelBuffer;
      v737 = 1;
      goto LABEL_159;
    }
LABEL_166:
    FigDebugAssert3();
    return v20;
  }
  if ((_DWORD)v19)
    goto LABEL_166;
  v21 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v21)
  {
    v20 = v21;
    goto LABEL_168;
  }
  v22 = a2;
  v23 = (int16x8_t *)CVPixelBufferGetBaseAddress(pixelBuffer);
  v24 = v22;
  v25 = (char *)CVPixelBufferGetBaseAddress(v22);
  switch(a3)
  {
    case 1:
      if (v17)
      {
        for (jj = 0; jj < v17; jj += 8)
        {
          if (v16)
          {
            v27 = 0;
            for (kk = 0; kk < v16; kk += 8)
            {
              v29 = &v23[v27].i8[v15];
              v30 = *(_OWORD *)v29;
              v31 = &v29[v15];
              v32 = *(_OWORD *)v31;
              v33 = (__int128 *)&v31[v15];
              v34 = *v33;
              v35 = (__int128 *)((char *)v33 + v15);
              v36 = *v35;
              v37 = (__int128 *)((char *)v35 + v15);
              v38 = *v37;
              v39 = (__int128 *)((char *)v37 + v15);
              v40 = *v39;
              v41 = *(__int128 *)((char *)v39 + v15);
              *(int16x8_t *)&v25[v27 * 16] = v23[v27];
              v42 = &v25[v27 * 16 + v18];
              *(_OWORD *)v42 = v30;
              v43 = &v42[v18];
              *(_OWORD *)v43 = v32;
              v44 = &v43[v18];
              *(_OWORD *)v44 = v34;
              v45 = &v44[v18];
              *(_OWORD *)v45 = v36;
              v46 = &v45[v18];
              *(_OWORD *)v46 = v38;
              v47 = &v46[v18];
              *(_OWORD *)v47 = v40;
              *(_OWORD *)&v47[v18] = v41;
              ++v27;
            }
          }
          v23 = (int16x8_t *)((char *)v23 + 8 * (int)v15);
          v25 += 8 * v18;
        }
      }
      goto LABEL_156;
    case 2:
      if (!v17)
        goto LABEL_156;
      v104 = 0;
      v105 = (uint64_t)v23[-1].i64 + 2 * (_QWORD)v739;
      do
      {
        if (v16)
        {
          v106 = 0;
          v107 = 0;
          v108 = v25;
          do
          {
            v109 = (int16x8_t *)(v105 + v106 + v15);
            v110 = *v109;
            v111 = (int16x8_t *)((char *)v109 + v15);
            v112 = *v111;
            v113 = (int16x8_t *)((char *)v111 + v15);
            v114 = *v113;
            v115 = (int16x8_t *)((char *)v113 + v15);
            v116 = *v115;
            v117 = (int16x8_t *)((char *)v115 + v15);
            v118 = *v117;
            v119 = (int16x8_t *)((char *)v117 + v15);
            v120 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v105 + v106));
            v121 = (int8x16_t)vrev64q_s16(v110);
            v122 = (int8x16_t)vrev64q_s16(v112);
            v123 = (int8x16_t)vrev64q_s16(v114);
            v124 = (int8x16_t)vrev64q_s16(v116);
            v125 = (int8x16_t)vrev64q_s16(v118);
            v126 = (int8x16_t)vrev64q_s16(*v119);
            v127 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)v119 + v15));
            *(_QWORD *)&v128 = vextq_s8(v120, v120, 8uLL).u64[0];
            *((_QWORD *)&v128 + 1) = v120.i64[0];
            v120.i64[0] = vextq_s8(v121, v121, 8uLL).u64[0];
            v120.i64[1] = v121.i64[0];
            v121.i64[0] = vextq_s8(v122, v122, 8uLL).u64[0];
            v121.i64[1] = v122.i64[0];
            v122.i64[0] = vextq_s8(v123, v123, 8uLL).u64[0];
            v122.i64[1] = v123.i64[0];
            v123.i64[0] = vextq_s8(v124, v124, 8uLL).u64[0];
            v123.i64[1] = v124.i64[0];
            v124.i64[0] = vextq_s8(v125, v125, 8uLL).u64[0];
            v124.i64[1] = v125.i64[0];
            v125.i64[0] = vextq_s8(v126, v126, 8uLL).u64[0];
            v125.i64[1] = v126.i64[0];
            v126.i64[0] = vextq_s8(v127, v127, 8uLL).u64[0];
            v126.i64[1] = v127.i64[0];
            *v108 = v128;
            *(int8x16_t *)((char *)v108 + v18) = v120;
            v129 = (int8x16_t *)((char *)v108 + v18 + v18);
            *v129 = v121;
            v130 = (int8x16_t *)((char *)v129 + v18);
            *v130 = v122;
            v131 = (int8x16_t *)((char *)v130 + v18);
            *v131 = v123;
            v132 = (int8x16_t *)((char *)v131 + v18);
            *v132 = v124;
            v133 = (int8x16_t *)((char *)v132 + v18);
            *v133 = v125;
            *(int8x16_t *)((char *)v133 + v18) = v126;
            v107 += 8;
            ++v108;
            v106 -= 16;
          }
          while (v16 > v107);
        }
        v104 += 8;
        v105 += 8 * (int)v15;
        v25 += 8 * v18;
      }
      while (v17 > v104);
      break;
    case 3:
      if (!v17)
        goto LABEL_156;
      v134 = 0;
      v135 = (uint64_t)v23[-1].i64 + 2 * (_QWORD)v739 + (v738 - 8) * v15;
      do
      {
        if (v16)
        {
          v136 = 0;
          v137 = 0;
          v138 = v25;
          do
          {
            v139 = (int16x8_t *)(v135 + v136 + v15);
            v140 = *v139;
            v141 = (int16x8_t *)((char *)v139 + v15);
            v142 = *v141;
            v143 = (int16x8_t *)((char *)v141 + v15);
            v144 = *v143;
            v145 = (int16x8_t *)((char *)v143 + v15);
            v146 = *v145;
            v147 = (int16x8_t *)((char *)v145 + v15);
            v148 = *v147;
            v149 = (int16x8_t *)((char *)v147 + v15);
            v150 = (int8x16_t)vrev64q_s16(*(int16x8_t *)((char *)v149 + v15));
            v151 = (int8x16_t)vrev64q_s16(*v149);
            v152 = (int8x16_t)vrev64q_s16(v148);
            v153 = (int8x16_t)vrev64q_s16(v146);
            v154 = (int8x16_t)vrev64q_s16(v144);
            v155 = (int8x16_t)vrev64q_s16(v142);
            v156 = (int8x16_t)vrev64q_s16(v140);
            v157 = (int8x16_t)vrev64q_s16(*(int16x8_t *)(v135 + v136));
            *(_QWORD *)&v158 = vextq_s8(v150, v150, 8uLL).u64[0];
            *((_QWORD *)&v158 + 1) = v150.i64[0];
            v150.i64[0] = vextq_s8(v151, v151, 8uLL).u64[0];
            v150.i64[1] = v151.i64[0];
            v151.i64[0] = vextq_s8(v152, v152, 8uLL).u64[0];
            v151.i64[1] = v152.i64[0];
            v152.i64[0] = vextq_s8(v153, v153, 8uLL).u64[0];
            v152.i64[1] = v153.i64[0];
            v153.i64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
            v153.i64[1] = v154.i64[0];
            v154.i64[0] = vextq_s8(v155, v155, 8uLL).u64[0];
            v154.i64[1] = v155.i64[0];
            v155.i64[0] = vextq_s8(v156, v156, 8uLL).u64[0];
            v155.i64[1] = v156.i64[0];
            v156.i64[0] = vextq_s8(v157, v157, 8uLL).u64[0];
            v156.i64[1] = v157.i64[0];
            *v138 = v158;
            *(int8x16_t *)((char *)v138 + v18) = v150;
            v159 = (int8x16_t *)((char *)v138 + v18 + v18);
            *v159 = v151;
            v160 = (int8x16_t *)((char *)v159 + v18);
            *v160 = v152;
            v161 = (int8x16_t *)((char *)v160 + v18);
            *v161 = v153;
            v162 = (int8x16_t *)((char *)v161 + v18);
            *v162 = v154;
            v163 = (int8x16_t *)((char *)v162 + v18);
            *v163 = v155;
            *(int8x16_t *)((char *)v163 + v18) = v156;
            v137 += 8;
            ++v138;
            v136 -= 16;
          }
          while (v16 > v137);
        }
        v134 += 8;
        v135 += -8 * (int)v15;
        v25 += 8 * v18;
      }
      while (v17 > v134);
      break;
    case 4:
      if (!v17)
        goto LABEL_156;
      v164 = 0;
      v165 = &v23->i8[(v738 - 8) * v15];
      do
      {
        if (v16)
        {
          v166 = 0;
          for (mm = 0; mm < v16; mm += 8)
          {
            v168 = *(_OWORD *)&v165[v166];
            v169 = &v165[v166 + v15];
            v170 = *(_OWORD *)v169;
            v171 = &v169[v15];
            v172 = *(_OWORD *)v171;
            v173 = (__int128 *)&v171[v15];
            v174 = *v173;
            v175 = (__int128 *)((char *)v173 + v15);
            v176 = *v175;
            v177 = (__int128 *)((char *)v175 + v15);
            v178 = *v177;
            v179 = (__int128 *)((char *)v177 + v15);
            v180 = *v179;
            *(_OWORD *)&v25[v166] = *(__int128 *)((char *)v179 + v15);
            v181 = &v25[v166 + v18];
            *(_OWORD *)v181 = v180;
            v182 = &v181[v18];
            *(_OWORD *)v182 = v178;
            v183 = &v182[v18];
            *(_OWORD *)v183 = v176;
            v184 = &v183[v18];
            *(_OWORD *)v184 = v174;
            v185 = &v184[v18];
            *(_OWORD *)v185 = v172;
            v186 = &v185[v18];
            *(_OWORD *)v186 = v170;
            *(_OWORD *)&v186[v18] = v168;
            v166 += 16;
          }
        }
        v164 += 8;
        v165 -= 8 * (int)v15;
        v25 += 8 * v18;
      }
      while (v17 > v164);
      break;
    case 5:
      if (v17)
      {
        for (nn = 0; nn < v17; nn += 8)
        {
          if (v16)
          {
            v188 = 0;
            v189 = (int64x2_t *)v25;
            v190 = v23;
            do
            {
              v191 = *v190;
              v192 = (int16x8_t *)((char *)v190 + v15);
              v193 = *v192;
              v194 = (int16x8_t *)((char *)v192 + v15);
              v195 = *v194;
              v196 = (int16x8_t *)((char *)v194 + v15);
              v197 = *v196;
              v198 = (int16x8_t *)((char *)v196 + v15);
              v199 = *v198;
              v200 = (int16x8_t *)((char *)v198 + v15);
              v201 = *v200;
              v202 = (int16x8_t *)((char *)v200 + v15);
              v203 = *v202;
              v204 = (int16x8_t *)((char *)v202 + v15);
              v205 = (int32x4_t)vzip1q_s16(v191, v193);
              v206 = (int32x4_t)vzip2q_s16(v191, v193);
              v207 = (int32x4_t)vzip1q_s16(v195, v197);
              v208 = (int32x4_t)vzip2q_s16(v195, v197);
              v209 = (int32x4_t)vzip1q_s16(v199, v201);
              v210 = (int32x4_t)vzip2q_s16(v199, v201);
              v211 = (int32x4_t)vzip1q_s16(v203, *v204);
              v212 = (int32x4_t)vzip2q_s16(v203, *v204);
              v213 = (int64x2_t)vzip1q_s32(v205, v207);
              v214 = (int64x2_t)vzip2q_s32(v205, v207);
              v215 = (int64x2_t)vzip1q_s32(v206, v208);
              v216 = (int64x2_t)vzip2q_s32(v206, v208);
              v217 = (int64x2_t)vzip1q_s32(v209, v211);
              v218 = (int64x2_t)vzip2q_s32(v209, v211);
              v219 = (int64x2_t)vzip1q_s32(v210, v212);
              v220 = vzip2q_s64(v213, v217);
              v213.i64[1] = v217.i64[0];
              v221 = vzip2q_s64(v214, v218);
              v214.i64[1] = v218.i64[0];
              v222 = vzip2q_s64(v215, v219);
              v215.i64[1] = v219.i64[0];
              v223 = (int64x2_t)vzip2q_s32(v210, v212);
              v224 = vzip2q_s64(v216, v223);
              v216.i64[1] = v223.i64[0];
              *v189 = v213;
              *(int64x2_t *)((char *)v189 + v18) = v220;
              v225 = (int64x2_t *)((char *)v189 + v18 + v18);
              *v225 = v214;
              v226 = (int64x2_t *)((char *)v225 + v18);
              *v226 = v221;
              v227 = (int64x2_t *)((char *)v226 + v18);
              *v227 = v215;
              v228 = (int64x2_t *)((char *)v227 + v18);
              *v228 = v222;
              v229 = (int64x2_t *)((char *)v228 + v18);
              *v229 = v216;
              *(int64x2_t *)((char *)v229 + v18) = v224;
              v188 += 8;
              ++v189;
              v190 = (int16x8_t *)((char *)v204 + 8 * (int)v15 + -7 * v15);
            }
            while (v16 > v188);
          }
          ++v23;
          v25 += 8 * v18;
        }
      }
      goto LABEL_156;
    case 6:
      if (!v17)
        goto LABEL_156;
      v230 = 0;
      v231 = &v23->i8[(v738 - 8) * v15];
      do
      {
        if (v16)
        {
          v232 = 0;
          v233 = 0;
          v234 = (int64x2_t *)v25;
          do
          {
            v235 = *(int16x8_t *)&v231[v232];
            v236 = (int16x8_t *)&v231[v232 + v15];
            v237 = *v236;
            v238 = (int16x8_t *)((char *)v236 + v15);
            v239 = *v238;
            v240 = (int16x8_t *)((char *)v238 + v15);
            v241 = *v240;
            v242 = (int16x8_t *)((char *)v240 + v15);
            v243 = *v242;
            v244 = (int16x8_t *)((char *)v242 + v15);
            v245 = *v244;
            v246 = (int16x8_t *)((char *)v244 + v15);
            v247 = *(int16x8_t *)((char *)v246 + v15);
            v248 = (int32x4_t)vzip1q_s16(v247, *v246);
            v249 = (int32x4_t)vzip2q_s16(v247, *v246);
            v250 = (int32x4_t)vzip1q_s16(v245, v243);
            v251 = (int32x4_t)vzip2q_s16(v245, v243);
            v252 = (int32x4_t)vzip1q_s16(v241, v239);
            v253 = (int32x4_t)vzip2q_s16(v241, v239);
            v254 = (int32x4_t)vzip1q_s16(v237, v235);
            v255 = (int32x4_t)vzip2q_s16(v237, v235);
            v256 = (int64x2_t)vzip1q_s32(v248, v250);
            v257 = (int64x2_t)vzip2q_s32(v248, v250);
            v258 = (int64x2_t)vzip1q_s32(v249, v251);
            v259 = (int64x2_t)vzip2q_s32(v249, v251);
            v260 = (int64x2_t)vzip1q_s32(v252, v254);
            v261 = (int64x2_t)vzip2q_s32(v252, v254);
            v262 = (int64x2_t)vzip1q_s32(v253, v255);
            v263 = vzip2q_s64(v256, v260);
            v256.i64[1] = v260.i64[0];
            v264 = vzip2q_s64(v257, v261);
            v257.i64[1] = v261.i64[0];
            v265 = vzip2q_s64(v258, v262);
            v258.i64[1] = v262.i64[0];
            v266 = (int64x2_t)vzip2q_s32(v253, v255);
            v267 = vzip2q_s64(v259, v266);
            v259.i64[1] = v266.i64[0];
            *v234 = v256;
            *(int64x2_t *)((char *)v234 + v18) = v263;
            v268 = (int64x2_t *)((char *)v234 + v18 + v18);
            *v268 = v257;
            v269 = (int64x2_t *)((char *)v268 + v18);
            *v269 = v264;
            v270 = (int64x2_t *)((char *)v269 + v18);
            *v270 = v258;
            v271 = (int64x2_t *)((char *)v270 + v18);
            *v271 = v265;
            v272 = (int64x2_t *)((char *)v271 + v18);
            *v272 = v259;
            *(int64x2_t *)((char *)v272 + v18) = v267;
            v233 += 8;
            ++v234;
            v232 += -8 * (int)v15;
          }
          while (v16 > v233);
        }
        v230 += 8;
        v231 += 16;
        v25 += 8 * v18;
      }
      while (v17 > v230);
      break;
    case 7:
      if (!v17)
        goto LABEL_156;
      v273 = 0;
      v274 = (uint64_t)v23[-1].i64 + 2 * (_QWORD)v739 + (v738 - 8) * v15;
      do
      {
        if (v16)
        {
          v275 = 0;
          v276 = 0;
          v277 = (int64x2_t *)v25;
          do
          {
            v278 = *(int16x8_t *)(v274 + v275);
            v279 = (int16x8_t *)(v274 + v275 + v15);
            v280 = *v279;
            v281 = (int16x8_t *)((char *)v279 + v15);
            v282 = *v281;
            v283 = (int16x8_t *)((char *)v281 + v15);
            v284 = *v283;
            v285 = (int16x8_t *)((char *)v283 + v15);
            v286 = *v285;
            v287 = (int16x8_t *)((char *)v285 + v15);
            v288 = *v287;
            v289 = (int16x8_t *)((char *)v287 + v15);
            v290 = *(int16x8_t *)((char *)v289 + v15);
            v291 = (int32x4_t)vzip1q_s16(v290, *v289);
            v292 = (int32x4_t)vzip2q_s16(v290, *v289);
            v293 = (int32x4_t)vzip1q_s16(v288, v286);
            v294 = (int32x4_t)vzip2q_s16(v288, v286);
            v295 = (int32x4_t)vzip1q_s16(v284, v282);
            v296 = (int32x4_t)vzip2q_s16(v284, v282);
            v297 = (int32x4_t)vzip1q_s16(v280, v278);
            v298 = (int32x4_t)vzip2q_s16(v280, v278);
            v299 = (int64x2_t)vzip1q_s32(v291, v293);
            v300 = (int64x2_t)vzip2q_s32(v291, v293);
            v301 = (int64x2_t)vzip1q_s32(v292, v294);
            v302 = (int64x2_t)vzip2q_s32(v292, v294);
            v303 = (int64x2_t)vzip1q_s32(v295, v297);
            v304 = (int64x2_t)vzip2q_s32(v295, v297);
            v305 = (int64x2_t)vzip1q_s32(v296, v298);
            v306 = (int64x2_t)vzip2q_s32(v296, v298);
            v307 = vzip2q_s64(v302, v306);
            v302.i64[1] = v306.i64[0];
            v308 = vzip2q_s64(v301, v305);
            v301.i64[1] = v305.i64[0];
            v309 = vzip2q_s64(v300, v304);
            v300.i64[1] = v304.i64[0];
            v310 = vzip2q_s64(v299, v303);
            v299.i64[1] = v303.i64[0];
            *v277 = v307;
            *(int64x2_t *)((char *)v277 + v18) = v302;
            v311 = (int64x2_t *)((char *)v277 + v18 + v18);
            *v311 = v308;
            v312 = (int64x2_t *)((char *)v311 + v18);
            *v312 = v301;
            v313 = (int64x2_t *)((char *)v312 + v18);
            *v313 = v309;
            v314 = (int64x2_t *)((char *)v313 + v18);
            *v314 = v300;
            v315 = (int64x2_t *)((char *)v314 + v18);
            *v315 = v310;
            *(int64x2_t *)((char *)v315 + v18) = v299;
            v276 += 8;
            ++v277;
            v275 += -8 * (int)v15;
          }
          while (v16 > v276);
        }
        v273 += 8;
        v274 -= 16;
        v25 += 8 * v18;
      }
      while (v17 > v273);
      break;
    case 8:
      if (!v17)
        goto LABEL_156;
      v316 = 0;
      v317 = (uint64_t)v23[-1].i64 + 2 * (_QWORD)v739;
      do
      {
        if (v16)
        {
          v318 = 0;
          v319 = 0;
          v320 = (int64x2_t *)v25;
          do
          {
            v321 = *(int16x8_t *)(v317 + v318);
            v322 = (int16x8_t *)(v317 + v318 + v15);
            v323 = *v322;
            v324 = (int16x8_t *)((char *)v322 + v15);
            v325 = *v324;
            v326 = (int16x8_t *)((char *)v324 + v15);
            v327 = *v326;
            v328 = (int16x8_t *)((char *)v326 + v15);
            v329 = *v328;
            v330 = (int16x8_t *)((char *)v328 + v15);
            v331 = *v330;
            v332 = (int16x8_t *)((char *)v330 + v15);
            v333 = *(int16x8_t *)((char *)v332 + v15);
            v334 = (int32x4_t)vzip1q_s16(v321, v323);
            v335 = (int32x4_t)vzip2q_s16(v321, v323);
            v336 = (int32x4_t)vzip1q_s16(v325, v327);
            v337 = (int32x4_t)vzip2q_s16(v325, v327);
            v338 = (int32x4_t)vzip1q_s16(v329, v331);
            v339 = (int32x4_t)vzip2q_s16(v329, v331);
            v340 = (int32x4_t)vzip1q_s16(*v332, v333);
            v341 = (int32x4_t)vzip2q_s16(*v332, v333);
            v342 = (int64x2_t)vzip1q_s32(v334, v336);
            v343 = (int64x2_t)vzip2q_s32(v334, v336);
            v344 = (int64x2_t)vzip1q_s32(v335, v337);
            v345 = (int64x2_t)vzip2q_s32(v335, v337);
            v346 = (int64x2_t)vzip1q_s32(v338, v340);
            v347 = (int64x2_t)vzip2q_s32(v338, v340);
            v348 = (int64x2_t)vzip1q_s32(v339, v341);
            v349 = (int64x2_t)vzip2q_s32(v339, v341);
            v350 = vzip2q_s64(v345, v349);
            v345.i64[1] = v349.i64[0];
            v351 = vzip2q_s64(v344, v348);
            v344.i64[1] = v348.i64[0];
            v352 = vzip2q_s64(v343, v347);
            v343.i64[1] = v347.i64[0];
            v353 = vzip2q_s64(v342, v346);
            v342.i64[1] = v346.i64[0];
            *v320 = v350;
            *(int64x2_t *)((char *)v320 + v18) = v345;
            v354 = (int64x2_t *)((char *)v320 + v18 + v18);
            *v354 = v351;
            v355 = (int64x2_t *)((char *)v354 + v18);
            *v355 = v344;
            v356 = (int64x2_t *)((char *)v355 + v18);
            *v356 = v352;
            v357 = (int64x2_t *)((char *)v356 + v18);
            *v357 = v343;
            v358 = (int64x2_t *)((char *)v357 + v18);
            *v358 = v353;
            *(int64x2_t *)((char *)v358 + v18) = v342;
            v319 += 8;
            ++v320;
            v318 += 8 * (int)v15;
          }
          while (v16 > v319);
        }
        v316 += 8;
        v317 -= 16;
        v25 += 8 * v18;
      }
      while (v17 > v316);
      break;
    default:
      goto LABEL_57;
  }
LABEL_155:
  v20 = 0;
LABEL_158:
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  v736 = v22;
  v737 = 0;
LABEL_159:
  CVPixelBufferUnlockBaseAddress(v736, v737);
  return v20;
}

uint64_t FigDepthConvertRotationAndMirroringToExifOrientation(int a1, int a2)
{
  BOOL v2;
  unsigned int v3;
  BOOL v5;
  unsigned int v6;

  if (a1 > 179)
  {
    if (a1 != 180)
    {
      if (a1 == 270)
      {
        v2 = a2 == 0;
        v3 = 7;
LABEL_8:
        if (v2)
          return v3 + 1;
        else
          return v3;
      }
LABEL_11:
      FigSignalErrorAt();
      return 1;
    }
    v5 = a2 == 0;
    v6 = 3;
  }
  else
  {
    if (a1)
    {
      if (a1 == 90)
      {
        v2 = a2 == 0;
        v3 = 5;
        goto LABEL_8;
      }
      goto LABEL_11;
    }
    v5 = a2 == 0;
    v6 = 1;
  }
  if (v5)
    return v6;
  else
    return v6 + 1;
}

uint64_t FigDepthRotateCalibrationData(double *a1, float32x4_t *a2, double *a3, float32x4_t *a4, int a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double v19;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  unint64_t v26;
  float32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  _OWORD v40[3];
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;

  if ((a5 - 9) <= 0xFFFFFFF7)
    return FigSignalErrorAt();
  switch(a5)
  {
    case 2:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32A2B00;
      goto LABEL_6;
    case 3:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32B0D90;
LABEL_6:
      v7 = (float32x4_t)xmmword_1A32B0D80;
      break;
    case 4:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32B0D90;
      v7 = (float32x4_t)xmmword_1A32A2AF0;
      break;
    case 5:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32A2AF0;
      goto LABEL_10;
    case 6:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32B0D80;
LABEL_10:
      v7 = (float32x4_t)xmmword_1A32A2B00;
      break;
    case 7:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32B0D80;
      goto LABEL_13;
    case 8:
      v5 = (float32x4_t)xmmword_1A3161F30;
      v6 = (float32x4_t)xmmword_1A32A2AF0;
LABEL_13:
      v7 = (float32x4_t)xmmword_1A32B0D90;
      break;
    default:
      v7 = *(float32x4_t *)MEMORY[0x1E0C83FE8];
      v6 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
      v5 = *(float32x4_t *)(MEMORY[0x1E0C83FE8] + 32);
      break;
  }
  if (!a1)
    return FigSignalErrorAt();
  v8 = *a1;
  v9 = a1[1];
  v10 = vaddq_f32(v5, vmlaq_n_f32(vmulq_n_f32(v7, v8), v6, v9));
  v11 = vabsq_f32(v10);
  v12 = v11.f32[1];
  *(float64x2_t *)a1 = vcvtq_f64_f32((float32x2_t)(v10.i64[0] & 0x7FFFFFFF7FFFFFFFLL));
  if (a2)
  {
    v13 = a2[2];
    v14 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, v13.f32[0]), v6, *(float32x2_t *)v13.f32, 1), v5, v13, 2);
    v13.i32[0] = 0;
    v15 = (int8x16_t)v14;
    v15.i32[0] = vaddq_f32(v14, v11).u32[0];
    v16 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v13, v14), 0), v15, (int8x16_t)v14);
    v17 = v16;
    v17.i32[3] = v14.i32[3];
    if (*(float *)&v16.i32[1] < 0.0)
    {
      v18.i32[0] = v16.i32[0];
      *(float *)&v18.i32[1] = v11.f32[1] + *(float *)&v16.i32[1];
      v18.i64[1] = __PAIR64__(v14.u32[3], v16.u32[2]);
      v17 = v18;
    }
    a2[2] = (float32x4_t)v17;
  }
  if (a3)
  {
    v19 = a3[1];
    if (*a3 != *MEMORY[0x1E0C9D538] || v19 != *(double *)(MEMORY[0x1E0C9D538] + 8))
    {
      v21 = *a3;
      v22 = v19;
      v23 = vmlaq_n_f32(vmulq_n_f32(v7, v21), v6, v22);
      v24 = vaddq_f32(v5, v23);
      v23.i32[0] = 0;
      v25 = (int8x16_t)v24;
      v25.i32[0] = vaddq_f32(v24, v11).u32[0];
      v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v23, v24), 0), v25, (int8x16_t)v24).u64[0];
      v27 = (float32x2_t)v26;
      if (*((float *)&v26 + 1) < 0.0)
      {
        v28.i32[0] = v26;
        v28.f32[1] = v12 + *((float *)&v26 + 1);
        v27 = v28;
      }
      *(float64x2_t *)a3 = vcvtq_f64_f32(v27);
    }
  }
  if (a4)
  {
    v29 = 0;
    v30 = vzip1q_s32((int32x4_t)v7, (int32x4_t)v5);
    v31 = vzip1q_s32(v30, (int32x4_t)v6);
    v32 = vzip1q_s32(vzip2q_s32((int32x4_t)v7, (int32x4_t)v5), vdupq_laneq_s32((int32x4_t)v6, 2));
    v33 = vzip2q_s32(v30, vdupq_lane_s32(*(int32x2_t *)v6.f32, 1));
    v31.i32[3] = 0;
    v33.i32[3] = 0;
    v32.i32[3] = 0;
    v34 = *a4;
    v35 = a4[1];
    v36 = a4[2];
    v40[0] = v31;
    v40[1] = v33;
    v40[2] = v32;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v29 * 16) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v40[v29])), v35, *(float32x2_t *)&v40[v29], 1), v36, (float32x4_t)v40[v29], 2);
      ++v29;
    }
    while (v29 != 3);
    v37 = v42;
    v38 = v43;
    *a4 = v41;
    a4[1] = v37;
    a4[2] = v38;
  }
  return 0;
}

uint64_t FigDepthRotateMetadataDictionary(void *a1, int a2)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  CGSize *v9;
  uint64_t v10;
  const __CFDictionary *v11;
  CGPoint *p_point;
  uint64_t v13;
  void *v14;
  void *v15;
  CGPoint *v16;
  uint64_t result;
  CFDictionaryRef DictionaryRepresentation;
  void *v19;
  CFDictionaryRef v20;
  void *v21;
  CGPoint v22[4];
  CGPoint point;
  CGSize v24[3];
  CGSize size;

  if (!a1
    || (v4 = *MEMORY[0x1E0D08448],
        (v5 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448])) == 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  size.width = 0.0;
  size.height = 0.0;
  if (!CGSizeMakeWithDictionaryRepresentation(v5, &size))
    return FigSignalErrorAt();
  v6 = *MEMORY[0x1E0D08440];
  v7 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08440]);
  memset(v24, 0, sizeof(v24));
  if (v7)
  {
    v8 = v7;
    if (objc_msgSend(v7, "length") != 48)
      return FigSignalErrorAt();
    v9 = v24;
    objc_msgSend(v8, "getBytes:length:", v24, 48);
  }
  else
  {
    v9 = 0;
  }
  v10 = *MEMORY[0x1E0D08458];
  v11 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08458]);
  point.x = 0.0;
  point.y = 0.0;
  if (v11)
  {
    p_point = &point;
    if (!CGPointMakeWithDictionaryRepresentation(v11, &point))
      goto LABEL_26;
  }
  else
  {
    p_point = 0;
  }
  v13 = *MEMORY[0x1E0D08430];
  v14 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08430]);
  memset(v22, 0, sizeof(v22));
  if (v14)
  {
    v15 = v14;
    if (objc_msgSend(v14, "length") != 64)
    {
LABEL_26:
      FigDebugAssert3();
      return FigSignalErrorAt();
    }
    v16 = v22;
    objc_msgSend(v15, "getBytes:length:", v22, 64);
  }
  else
  {
    v16 = 0;
  }
  result = FigDepthRotateCalibrationData(&size.width, (float32x4_t *)v9, &p_point->x, (float32x4_t *)v16, a2);
  if (!(_DWORD)result)
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(size);
    objc_msgSend(a1, "setObject:forKeyedSubscript:", DictionaryRepresentation, v4);

    if (v9)
    {
      v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v9, 48);
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v19, v6);

    }
    if (p_point)
    {
      v20 = CGPointCreateDictionaryRepresentation(point);
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v20, v10);

    }
    if (v16)
    {
      v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v16, 64);
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v21, v13);

    }
    return 0;
  }
  return result;
}

uint64_t FigDepthConvertBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  OSType PixelFormatType;
  OSType v5;
  OSType v6;
  size_t Width;
  size_t Height;
  int v9;
  int v11;
  BOOL v12;
  size_t v13;
  char BytesPerRow;
  char v15;
  size_t v16;
  OSType v17;
  size_t v18;
  size_t v19;
  size_t v20;
  OSType v21;
  float16x8_t *BaseAddress;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  size_t i;
  float16x8_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  int v34;
  OSType v35;
  __CVBuffer *v36;
  float *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  uint64_t k;
  uint64_t m;
  float v43;
  float v44;
  uint64_t v45;
  float32x4_t v46;
  size_t v47;
  float16x8_t *v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  float32x4_t v57;
  size_t v58;
  float32x4_t *v59;
  float16x8_t *v60;
  float16x8_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  uint64_t v68;
  size_t j;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v5 = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType == v5)
  {
    FigDebugAssert3();
LABEL_102:
    v33 = FigSignalErrorAt();
    goto LABEL_94;
  }
  v6 = v5;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v9 = PixelFormatType == 1717855600;
  if (PixelFormatType == 1751410032)
    v9 = 1;
  v11 = v6 == 1717855600 || v6 == 1751410032;
  v12 = PixelFormatType == 1751411059 || PixelFormatType == 1751410032;
  if (v9 != v11)
  {
    v13 = Height;
    BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
    v15 = CVPixelBufferGetBytesPerRow(a2);
    if ((Width & 7) == 0 && (BytesPerRow & 0xF) == 0 && (v15 & 0xF) == 0)
    {
      v16 = CVPixelBufferGetBytesPerRow(a1);
      v17 = CVPixelBufferGetPixelFormatType(a1);
      v18 = CVPixelBufferGetWidth(a2);
      v19 = CVPixelBufferGetHeight(a2);
      v20 = CVPixelBufferGetBytesPerRow(a2);
      v21 = CVPixelBufferGetPixelFormatType(a2);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      CVPixelBufferLockBaseAddress(a2, 0);
      BaseAddress = (float16x8_t *)CVPixelBufferGetBaseAddress(a1);
      v23 = (float32x4_t *)CVPixelBufferGetBaseAddress(a2);
      if (v17 == 1751411059 || v17 == 1751410032)
      {
        if (v21 == 1751411059 || v21 == 1751410032)
        {
          if (v19)
          {
            v24 = 0;
            v25 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
            do
            {
              if (v18)
              {
                v26 = 0;
                for (i = 0; i < v18; i += 8)
                {
                  v28 = BaseAddress[v26];
                  v29 = vmaxq_f32(vcvtq_f32_f16(*(float16x4_t *)v28.i8), v25);
                  v30 = vmaxq_f32(vcvt_hight_f32_f16(v28), v25);
                  v31 = vrecpeq_f32(v29);
                  v32 = vrecpeq_f32(v30);
                  v23[v26++] = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v31, vrecpsq_f32(v29, v31))), vmulq_f32(v32, vrecpsq_f32(v30, v32)));
                }
              }
              ++v24;
              BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
              v23 = (float32x4_t *)((char *)v23 + v20);
            }
            while (v24 != v19);
          }
        }
        else if (v19)
        {
          v56 = 0;
          v57 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          do
          {
            if (v18)
            {
              v58 = 0;
              v59 = v23;
              v60 = BaseAddress;
              do
              {
                v61 = *v60++;
                v62 = vmaxq_f32(vcvtq_f32_f16(*(float16x4_t *)v61.i8), v57);
                v63 = vmaxq_f32(vcvt_hight_f32_f16(v61), v57);
                v64 = vrecpeq_f32(v62);
                v65 = vrecpeq_f32(v63);
                *v59 = vmulq_f32(v64, vrecpsq_f32(v62, v64));
                v59[1] = vmulq_f32(v65, vrecpsq_f32(v63, v65));
                v59 += 2;
                v58 += 8;
              }
              while (v18 > v58);
            }
            ++v56;
            BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
            v23 = (float32x4_t *)((char *)v23 + v20);
          }
          while (v56 != v19);
        }
      }
      else if (v21 == 1751411059 || v21 == 1751410032)
      {
        if (v19)
        {
          v45 = 0;
          v46 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          do
          {
            if (v18)
            {
              v47 = 0;
              v48 = (float16x8_t *)v23;
              v49 = (float32x4_t *)BaseAddress;
              do
              {
                v50 = *v49;
                v51 = v49[1];
                v49 += 2;
                v52 = vmaxq_f32(v50, v46);
                v53 = vmaxq_f32(v51, v46);
                v54 = vrecpeq_f32(v52);
                v55 = vrecpeq_f32(v53);
                *v48++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v54, vrecpsq_f32(v52, v54))), vmulq_f32(v55, vrecpsq_f32(v53, v55)));
                v47 += 8;
              }
              while (v18 > v47);
            }
            ++v45;
            BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
            v23 = (float32x4_t *)((char *)v23 + v20);
          }
          while (v45 != v19);
        }
      }
      else if (v19)
      {
        v66 = 0;
        v67 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
        do
        {
          if (v18)
          {
            v68 = 0;
            for (j = 0; j < v18; j += 8)
            {
              v70 = &v23[v68];
              v71 = vmaxq_f32((float32x4_t)BaseAddress[v68], v67);
              v72 = vmaxq_f32((float32x4_t)BaseAddress[v68 + 1], v67);
              v73 = vrecpeq_f32(v71);
              v74 = vrecpeq_f32(v72);
              v75 = vmulq_f32(v73, vrecpsq_f32(v71, v73));
              v76 = vmulq_f32(v74, vrecpsq_f32(v72, v74));
              *v70 = vmulq_f32(v75, vrecpsq_f32(v71, v75));
              v70[1] = vmulq_f32(v76, vrecpsq_f32(v72, v76));
              v68 += 2;
            }
          }
          ++v66;
          BaseAddress = (float16x8_t *)((char *)BaseAddress + v16);
          v23 = (float32x4_t *)((char *)v23 + v20);
        }
        while (v66 != v19);
      }
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
      CVPixelBufferUnlockBaseAddress(a2, 0);
      goto LABEL_93;
    }
    if (v12 || v6 == 1751411059 || v6 == 1751410032)
    {
      v35 = ((PixelFormatType - 1717856627) & 0xFDFFFFFF) != 0 ? 1717855600 : 1717856627;
      if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Width, v13, v35, 0, &pixelBufferOut))
        goto LABEL_101;
    }
    if (PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
    {
      if (v6 == 1751411059 || v6 == 1751410032)
      {
        if (figDepthConvertBufferFloat16ToFloat32(a1, pixelBufferOut))
          goto LABEL_101;
        v36 = pixelBufferOut;
        if (CVPixelBufferLockBaseAddress(pixelBufferOut, 0))
          goto LABEL_100;
        v37 = (float *)CVPixelBufferGetBaseAddress(v36);
        v38 = CVPixelBufferGetHeight(v36);
        v39 = CVPixelBufferGetWidth(v36);
        v40 = CVPixelBufferGetBytesPerRow(v36);
        if (v38)
        {
          for (k = 0; k != v38; ++k)
          {
            if (v39)
            {
              for (m = 0; m != v39; ++m)
              {
                v43 = v37[m];
                if (v43 >= 0.0001)
                  v44 = 1.0 / v43;
                else
                  v44 = 10000.0;
                v37[m] = v44;
              }
            }
            v37 = (float *)((char *)v37 + v40);
          }
        }
        if (CVPixelBufferUnlockBaseAddress(v36, 0))
        {
LABEL_100:
          FigDebugAssert3();
LABEL_101:
          FigDebugAssert3();
          goto LABEL_102;
        }
        if (figDepthConvertBufferFloat32ToFloat16(pixelBufferOut, a2))
          goto LABEL_101;
      }
      else if (figDepthConvertBufferFloat16ToFloat32(a1, pixelBufferOut)
             || !figDepthClampAndInvertFloat32_C(pixelBufferOut, a2))
      {
        goto LABEL_101;
      }
    }
    else if (v6 == 1751411059 || v6 == 1751410032)
    {
      if (!figDepthClampAndInvertFloat32_C(a1, pixelBufferOut)
        || figDepthConvertBufferFloat32ToFloat16(pixelBufferOut, a2))
      {
        goto LABEL_101;
      }
    }
    else if (!figDepthClampAndInvertFloat32_C(a1, a2))
    {
      goto LABEL_101;
    }
LABEL_93:
    v33 = 0;
    goto LABEL_94;
  }
  if (!v12)
  {
    if (v6 != 1751411059 && v6 != 1751410032)
      goto LABEL_93;
    v34 = figDepthConvertBufferFloat32ToFloat16(a1, a2);
    goto LABEL_60;
  }
  v33 = 0;
  if (v6 != 1751410032 && v6 != 1751411059)
  {
    v34 = figDepthConvertBufferFloat16ToFloat32(a1, a2);
LABEL_60:
    if (v34)
      goto LABEL_101;
    goto LABEL_93;
  }
LABEL_94:
  CVPixelBufferRelease(pixelBufferOut);
  return v33;
}

BOOL FigDepthFormatIsDepth(int a1)
{
  return a1 == 1717855600 || a1 == 1751410032;
}

BOOL FigDepthFormatIs16Bit(int a1)
{
  return a1 == 1751410032 || a1 == 1751411059;
}

uint64_t figDepthConvertBufferFloat16ToFloat32(__CVBuffer *a1, __CVBuffer *a2)
{
  vImage_Buffer dest;
  vImage_Buffer src;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = CVPixelBufferGetHeight(a1);
  src.width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(a2);
  dest.height = CVPixelBufferGetHeight(a2);
  dest.width = CVPixelBufferGetWidth(a2);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(a2);
  if (vImageConvert_Planar16FtoPlanarF(&src, &dest, 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return 0;
  }
}

uint64_t figDepthConvertBufferFloat32ToFloat16(__CVBuffer *a1, __CVBuffer *a2)
{
  vImage_Buffer dest;
  vImage_Buffer src;

  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  src.data = CVPixelBufferGetBaseAddress(a1);
  src.height = CVPixelBufferGetHeight(a1);
  src.width = CVPixelBufferGetWidth(a1);
  src.rowBytes = CVPixelBufferGetBytesPerRow(a1);
  dest.data = CVPixelBufferGetBaseAddress(a2);
  dest.height = CVPixelBufferGetHeight(a2);
  dest.width = CVPixelBufferGetWidth(a2);
  dest.rowBytes = CVPixelBufferGetBytesPerRow(a2);
  if (vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0))
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  else
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return 0;
  }
}

uint64_t figDepthClampAndInvertFloat32_C(__CVBuffer *a1, __CVBuffer *a2)
{
  float *BaseAddress;
  float *v5;
  size_t Height;
  size_t Width;
  size_t BytesPerRow;
  size_t v9;
  uint64_t i;
  uint64_t j;
  float v12;
  float v13;
  uint64_t v14;

  if (CVPixelBufferLockBaseAddress(a1, 1uLL))
  {
    FigDebugAssert3();
    return 0;
  }
  if (CVPixelBufferLockBaseAddress(a2, 0))
  {
    FigDebugAssert3();
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    return 0;
  }
  BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
  v5 = (float *)CVPixelBufferGetBaseAddress(a2);
  Height = CVPixelBufferGetHeight(a1);
  Width = CVPixelBufferGetWidth(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v9 = CVPixelBufferGetBytesPerRow(a2);
  if (Height)
  {
    for (i = 0; i != Height; ++i)
    {
      if (Width)
      {
        for (j = 0; j != Width; ++j)
        {
          v12 = BaseAddress[j];
          if (v12 >= 0.0001)
            v13 = 1.0 / v12;
          else
            v13 = 10000.0;
          v5[j] = v13;
        }
      }
      BaseAddress = (float *)((char *)BaseAddress + BytesPerRow);
      v5 = (float *)((char *)v5 + v9);
    }
  }
  v14 = 1;
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  return v14;
}

uint64_t FigDepthScaleBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  double Width;
  double Height;

  Width = (double)CVPixelBufferGetWidth(a1);
  Height = (double)CVPixelBufferGetHeight(a1);
  return FigDepthScaleBufferWithCrop(a1, a2, 0.0, 0.0, Width, Height);
}

uint64_t FigDepthScaleBufferWithCrop(__CVBuffer *a1, __CVBuffer *a2, double a3, double a4, double a5, double a6)
{
  __CVBuffer *v11;
  size_t BytesPerRow;
  OSType PixelFormatType;
  size_t Width;
  size_t Height;
  size_t v16;
  OSType v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  float v23;
  __CVBuffer *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int16x4_t *BaseAddress;
  float32x4_t *v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t *v45;
  float32x4_t *v46;
  int32x4_t v47;
  __CVBuffer *v48;
  unint64_t v49;
  _OWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  float v54;
  int v55;
  uint64_t v56;
  char *v57;
  float v58;
  int v59;
  float32x4_t v60;
  int8x8_t v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  uint64_t j;
  size_t v66;
  unsigned __int128 *v67;
  const __int16 *v68;
  unsigned __int128 v69;
  uint64_t m;
  size_t v71;
  unsigned __int128 *v72;
  const __int16 *v73;
  unsigned __int128 v74;
  float32x4_t *v75;
  uint64_t v76;
  float v77;
  int v78;
  uint64_t v79;
  char *v80;
  float v81;
  int v82;
  float32x4_t *v83;
  uint64_t k;
  size_t v85;
  unsigned __int128 *v86;
  const float *v87;
  unsigned __int128 v88;
  uint64_t n;
  size_t v90;
  unsigned __int128 *v91;
  const float *v92;
  unsigned __int128 v93;
  unint64_t v94;
  int8x8_t *v95;
  float32x4_t *v96;
  int8x8_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  int32x2_t *v105;
  unint64_t v106;
  int8x8_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x8_t v110;
  float32x4_t *v111;
  int32x2_t *v112;
  unint64_t v113;
  int16x4_t *v114;
  float32x4_t *v115;
  int16x8_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float16x8_t *v122;
  unint64_t v123;
  unint64_t v124;
  int16x4_t *v125;
  float16x8_t *v126;
  int16x4_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int8x8_t *v132;
  uint64_t v133;
  uint64_t v134;
  float32x4_t *v135;
  float32x4_t *v136;
  float32x4_t *v137;
  float32x4_t *v138;
  unint64_t v139;
  float32x4_t v140;
  int8x8_t v141;
  float32x4_t *v142;
  int8x8_t *v143;
  float32x4_t *v144;
  float32x4_t *v145;
  float32x4_t *v146;
  float32x4_t *v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  BOOL v173;
  float32x4_t *v174;
  uint64_t v175;
  uint64_t v176;
  int8x8_t *v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t *v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t *v183;
  unint64_t v184;
  int8x8_t v185;
  int8x8_t v186;
  float32x4_t *v187;
  int8x8_t *v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  int8x8_t v194;
  float32x4_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x8_t *v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  int16x4_t v205;
  int16x4_t v206;
  int16x4_t v207;
  float16x8_t *v208;
  float16x8_t *v209;
  float16x8_t *v210;
  float16x8_t *v211;
  unint64_t v212;
  float32x4_t *v213;
  int8x8_t *v214;
  float32x4_t v215;
  float32x4_t v216;
  int16x8_t v217;
  int16x8_t v218;
  float16x8_t *v219;
  float16x8_t v220;
  int16x4_t v221;
  int16x4_t v222;
  float16x8_t v223;
  float16x8_t *v224;
  int16x8_t v225;
  float16x8_t v226;
  float16x8_t v227;
  int16x8_t v228;
  float16x8_t v229;
  float16x8_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float16x8_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float16x8_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float16x8_t *v247;
  float32x4_t v248;
  float16x8_t v249;
  float16x8_t *v250;
  int16x4_t v251;
  int16x8_t v252;
  float16x8_t v253;
  float16x8_t v254;
  int16x4_t v255;
  int16x8_t v256;
  float16x8_t v257;
  float16x8_t v258;
  int16x4_t v259;
  int16x8_t v260;
  float16x8_t v261;
  float16x8_t v262;
  int16x4_t v263;
  int16x8_t v264;
  float16x8_t v265;
  float16x8_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float16x8_t v280;
  unint64_t v281;
  unint64_t v282;
  _WORD *v283;
  uint64_t v284;
  uint64_t v285;
  int8x8_t *v286;
  int16x4_t v287;
  int16x4_t v288;
  int16x4_t v289;
  int16x4_t v290;
  float16x8_t *v291;
  float16x8_t *v292;
  unint64_t v293;
  float32x4_t *v294;
  int8x8_t *v295;
  int8x8_t v296;
  int8x8_t v297;
  int16x4_t v298;
  float16x4_t v299;
  float16x4_t v300;
  int16x4_t v301;
  float16x4_t v302;
  float16x4_t v303;
  int16x4_t v304;
  int16x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  int16x4_t v314;
  float16x4_t v315;
  float16x4_t v316;
  int16x4_t v317;
  float16x4_t v318;
  float16x4_t v319;
  int16x4_t v320;
  float16x4_t v321;
  float16x4_t v322;
  int16x4_t v323;
  float16x4_t v324;
  float16x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t i;
  unint64_t v337;
  int8x8_t *v338;
  float32x4_t *v339;
  int8x8_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  unint64_t v345;
  int8x8_t *v346;
  float32x4_t v347;
  float32x4_t v348;
  int8x8_t v349;
  uint64_t v350;
  unint64_t v351;
  _WORD *v352;
  uint64_t v353;
  __CVBuffer *v355;
  unint64_t v356;
  __CVBuffer *v357;
  unint64_t v358;

  v11 = a1;
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v11);
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  v16 = CVPixelBufferGetBytesPerRow(a2);
  v17 = CVPixelBufferGetPixelFormatType(a2);
  v18 = FigDepthBytesPerPixelForDepthFormat(PixelFormatType);
  if (!v18)
    return FigSignalErrorAt();
  v19 = v18;
  if (v18 != FigDepthBytesPerPixelForDepthFormat(v17))
    return FigSignalErrorAt();
  v20 = (unint64_t)a5;
  v21 = (unint64_t)a6;
  v22 = (float)(unint64_t)a5 / (float)Width;
  v23 = (float)v21 / (float)Height;
  v358 = v20;
  if (v22 == v23)
  {
    if (v22 == 2.0)
    {
      v24 = a2;
      v25 = 0x20u / v19;
      v26 = v25 >> 1;
      v27 = 2;
LABEL_6:
      v28 = 1;
LABEL_11:
      if ((v25 - 1) & v20 | v28 & v21 || ((v26 - 1) & Width) != 0)
        v27 = 0;
      if (CVPixelBufferGetWidth(v11) == v20 && CVPixelBufferGetHeight(v11) == v21)
        goto LABEL_17;
      goto LABEL_16;
    }
    if (v22 == 4.0)
    {
      v24 = a2;
      v25 = 0x40u / v19;
      v26 = v25 >> 2;
      v27 = 4;
    }
    else
    {
      v24 = a2;
      if (v22 == 0.5)
      {
        v25 = 8u / v19;
        v26 = 2 * v25;
        v27 = -2;
        goto LABEL_6;
      }
      if (v22 != 0.25)
      {
        v27 = 0;
        v28 = 0;
        v25 = 1;
        v26 = 1;
        goto LABEL_11;
      }
      v25 = 8u / v19;
      v26 = 4 * v25;
      v27 = -4;
    }
    v28 = 3;
    goto LABEL_11;
  }
  v24 = a2;
LABEL_16:
  v27 = 0;
LABEL_17:
  v356 = v21;
  v29 = CVPixelBufferLockBaseAddress(v11, 1uLL);
  if ((_DWORD)v29)
  {
    v353 = v29;
    FigDebugAssert3();
  }
  else
  {
    v30 = CVPixelBufferLockBaseAddress(v24, 0);
    if ((_DWORD)v30)
    {
      v353 = v30;
      FigDebugAssert3();
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
    }
    else
    {
      BaseAddress = (int16x4_t *)CVPixelBufferGetBaseAddress(v11);
      v357 = v24;
      v32 = (float32x4_t *)CVPixelBufferGetBaseAddress(v24);
      v45 = v32;
      switch(v27)
      {
        case -4:
          v46 = (float32x4_t *)((char *)v32 + v16);
          if (v19 != 4)
          {
            v355 = v11;
            FigFloat16ConvertToFloat32();
            if (v358 == 2)
            {
              v75 = v45;
            }
            else
            {
              v113 = 0;
              v114 = BaseAddress;
              v75 = v45;
              do
              {
                v115 = (float32x4_t *)((char *)v75 + v16);
                FigFloat16ConvertToFloat32();
                FigFloat16ConvertToFloat32();
                v114 = (int16x4_t *)((char *)v114 + 4);
                FigFloat16ConvertToFloat32();
                v75->i16[0] = FigFloat32ConvertToFloat16();
                v75->i16[1] = FigFloat32ConvertToFloat16();
                v75->i16[2] = FigFloat32ConvertToFloat16();
                v75->i16[3] = FigFloat32ConvertToFloat16();
                v75->i16[4] = FigFloat32ConvertToFloat16();
                v75->i16[5] = FigFloat32ConvertToFloat16();
                v75->i16[6] = FigFloat32ConvertToFloat16();
                v75->i16[7] = FigFloat32ConvertToFloat16();
                v115->i16[0] = FigFloat32ConvertToFloat16();
                v115->i16[1] = FigFloat32ConvertToFloat16();
                v115->i16[2] = FigFloat32ConvertToFloat16();
                v115->i16[3] = FigFloat32ConvertToFloat16();
                v115->i16[4] = FigFloat32ConvertToFloat16();
                v115->i16[5] = FigFloat32ConvertToFloat16();
                v115->i16[6] = FigFloat32ConvertToFloat16();
                v115->i16[7] = FigFloat32ConvertToFloat16();
                v113 += 2;
                ++v75;
              }
              while (v358 - 2 > v113);
              v46 = (float32x4_t *)((char *)v75 + v16);
            }
            FigFloat16ConvertToFloat32();
            FigFloat16ConvertToFloat32();
            v75->i16[0] = FigFloat32ConvertToFloat16();
            v75->i16[1] = FigFloat32ConvertToFloat16();
            v75->i16[2] = FigFloat32ConvertToFloat16();
            v75->i16[3] = FigFloat32ConvertToFloat16();
            v75->i16[4] = FigFloat32ConvertToFloat16();
            v75->i16[5] = FigFloat32ConvertToFloat16();
            v75->i16[6] = FigFloat32ConvertToFloat16();
            v75->i16[7] = FigFloat32ConvertToFloat16();
            *(__int16 *)((char *)v75->i16 + v16) = FigFloat32ConvertToFloat16();
            v46->i16[1] = FigFloat32ConvertToFloat16();
            v46->i16[2] = FigFloat32ConvertToFloat16();
            v46->i16[3] = FigFloat32ConvertToFloat16();
            v46->i16[4] = FigFloat32ConvertToFloat16();
            v46->i16[5] = FigFloat32ConvertToFloat16();
            v46->i16[6] = FigFloat32ConvertToFloat16();
            v46->i16[7] = FigFloat32ConvertToFloat16();
            v122 = (float16x8_t *)((char *)v45 + 2 * v16);
            if (v356 == 1)
            {
              v123 = v358;
            }
            else
            {
              v196 = 0;
              v197 = 2 * v16;
              v198 = 4 * v16;
              v123 = v358;
              v199 = (float32x4_t)xmmword_1A32B1B80;
              v200 = (float32x4_t)xmmword_1A32B1BA0;
              v201 = (int8x8_t *)&BaseAddress[1];
              v202 = (float32x4_t)xmmword_1A32B1BD0;
              v203 = 3 * v16;
              v204 = 5 * v16;
              do
              {
                v205 = *BaseAddress;
                *(int16x4_t *)v116.i8 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v206 = vdup_lane_s16(*BaseAddress, 0);
                v207 = vdup_lane_s16(*(int16x4_t *)v116.i8, 0);
                if (v358 == 4)
                {
                  v208 = (float16x8_t *)((char *)v122 + v16);
                  v209 = (float16x8_t *)((char *)v122 + v197);
                  v210 = (float16x8_t *)((char *)v122 + v203);
                  v211 = v122;
                }
                else
                {
                  v212 = 0;
                  v213 = v45;
                  v214 = v201;
                  v215 = v200;
                  v216 = v199;
                  do
                  {
                    *(int16x4_t *)v217.i8 = v207;
                    *(int16x4_t *)v218.i8 = v206;
                    v207 = *(int16x4_t *)v116.i8;
                    v206 = v205;
                    v219 = (float16x8_t *)((char *)v213 + v197);
                    *(int8x8_t *)v116.i8 = vext_s8(*(int8x8_t *)v218.i8, (int8x8_t)v205, 6uLL);
                    v218.u64[1] = (unint64_t)vzip2_s16(*(int16x4_t *)v116.i8, v205);
                    *(int16x4_t *)v116.i8 = vzip1_s16(*(int16x4_t *)v116.i8, v205);
                    v220 = (float16x8_t)vzip1q_s16(v116, v116);
                    v221 = (int16x4_t)vext_s8(*(int8x8_t *)v217.i8, (int8x8_t)v207, 6uLL);
                    v217.u64[1] = (unint64_t)vzip2_s16(v221, v207);
                    *(int16x4_t *)v119.f32 = vzip1_s16(v221, v207);
                    v205 = (int16x4_t)*v214;
                    v222 = (int16x4_t)vext_s8((int8x8_t)v206, *v214, 2uLL);
                    *(int8x8_t *)v116.i8 = *(int8x8_t *)((char *)v214 + BytesPerRow);
                    v223 = (float16x8_t)vzip1q_s16((int16x8_t)v119, (int16x8_t)v119);
                    v224 = (float16x8_t *)((char *)v213 + v203);
                    *(int16x4_t *)v121.f32 = vzip1_s16(v206, v222);
                    *(int16x4_t *)v225.i8 = vzip2_s16(v206, v222);
                    v225.i64[1] = v225.i64[0];
                    v226 = (float16x8_t)vzip2q_s16(v218, v218);
                    v227 = (float16x8_t)vzip1q_s16((int16x8_t)v121, (int16x8_t)v121);
                    *(int8x8_t *)v218.i8 = vext_s8((int8x8_t)v207, *(int8x8_t *)v116.i8, 2uLL);
                    *(int16x4_t *)v228.i8 = vzip2_s16(v207, *(int16x4_t *)v218.i8);
                    v228.i64[1] = v228.i64[0];
                    v229 = (float16x8_t)vzip2q_s16(v217, v217);
                    *(int16x4_t *)v217.i8 = vzip1_s16(v207, *(int16x4_t *)v218.i8);
                    v230 = (float16x8_t)vzip1q_s16(v217, v217);
                    v231 = vcvtq_f32_f16(*(float16x4_t *)v220.i8);
                    v232 = vcvt_hight_f32_f16(v220);
                    v233 = vcvtq_f32_f16(*(float16x4_t *)v226.i8);
                    v234 = (float16x8_t)vzip2q_s16(v225, v225);
                    v235 = vcvt_hight_f32_f16(v226);
                    v236 = vcvtq_f32_f16(*(float16x4_t *)v227.i8);
                    v237 = vcvt_hight_f32_f16(v227);
                    v238 = vcvtq_f32_f16(*(float16x4_t *)v223.i8);
                    v239 = vcvt_hight_f32_f16(v223);
                    v240 = (float16x8_t)vzip2q_s16(v228, v228);
                    v241 = vcvtq_f32_f16(*(float16x4_t *)v229.i8);
                    v120 = vcvt_hight_f32_f16(v229);
                    v121 = vcvtq_f32_f16(*(float16x4_t *)v230.i8);
                    v242 = vcvt_hight_f32_f16(v230);
                    v243 = vcvtq_f32_f16(*(float16x4_t *)v234.i8);
                    v244 = vcvt_hight_f32_f16(v234);
                    v245 = vcvtq_f32_f16(*(float16x4_t *)v240.i8);
                    v246 = vcvt_hight_f32_f16(v240);
                    *v219 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v236), v216, v238), (float32x4_t)xmmword_1A32B1B90, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v237), v216, v239),
                                (float32x4_t)xmmword_1A32B1B90,
                                v242));
                    v219[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v243), v216, v241), (float32x4_t)xmmword_1A32B1B90, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v244), v216, v120),
                                  (float32x4_t)xmmword_1A32B1B90,
                                  v246));
                    *v224 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, v215), (float32x4_t)xmmword_1A32B1BB0, v236), (float32x4_t)xmmword_1A32B1BC0, v238), (float32x4_t)xmmword_1A32B1BD0, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, v215), (float32x4_t)xmmword_1A32B1BB0, v237), (float32x4_t)xmmword_1A32B1BC0, v239), (float32x4_t)xmmword_1A32B1BD0, v242));
                    v224[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, v215), (float32x4_t)xmmword_1A32B1BB0, v243), (float32x4_t)xmmword_1A32B1BC0, v241), (float32x4_t)xmmword_1A32B1BD0, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, v215), (float32x4_t)xmmword_1A32B1BB0, v244), (float32x4_t)xmmword_1A32B1BC0, v120), (float32x4_t)xmmword_1A32B1BD0, v246));
                    v247 = (float16x8_t *)((char *)v213 + v198);
                    *v247 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, v236), v215, v238), (float32x4_t)xmmword_1A32B1BB0, v121)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, v237), v215, v239),
                                (float32x4_t)xmmword_1A32B1BB0,
                                v242));
                    v247[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, v243), v215, v241), (float32x4_t)xmmword_1A32B1BB0, v245)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, v244), v215, v120),
                                  (float32x4_t)xmmword_1A32B1BB0,
                                  v246));
                    v248 = vmlaq_f32(vmulq_f32(v232, v216), (float32x4_t)xmmword_1A32B1B90, v237);
                    v118 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, v216), (float32x4_t)xmmword_1A32B1B90, v243), (float32x4_t)xmmword_1A32B1B60, v241), (float32x4_t)xmmword_1A32B1B70, v245);
                    v117 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v235, v216), (float32x4_t)xmmword_1A32B1B90, v244), (float32x4_t)xmmword_1A32B1B60, v120), (float32x4_t)xmmword_1A32B1B70, v246);
                    v249 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, v216), (float32x4_t)xmmword_1A32B1B90, v236), (float32x4_t)xmmword_1A32B1B60, v238), (float32x4_t)xmmword_1A32B1B70, v121)), vmlaq_f32(vmlaq_f32(v248, (float32x4_t)xmmword_1A32B1B60, v239), (float32x4_t)xmmword_1A32B1B70, v242));
                    v119 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v118), v117);
                    v250 = (float16x8_t *)((char *)v213 + v204);
                    *v250 = v249;
                    v250[1] = (float16x8_t)v119;
                    v212 += 4;
                    ++v214;
                    v213 += 2;
                  }
                  while (v358 - 4 > v212);
                  v211 = (float16x8_t *)((char *)v213 + v197);
                  v208 = (float16x8_t *)((char *)v213 + v203);
                  v209 = (float16x8_t *)((char *)v213 + v198);
                  v210 = (float16x8_t *)((char *)v213 + v204);
                  v199 = v216;
                  v200 = v215;
                  v202 = (float32x4_t)xmmword_1A32B1BD0;
                }
                v251 = (int16x4_t)vext_s8((int8x8_t)v206, (int8x8_t)v205, 6uLL);
                *(int16x4_t *)v117.f32 = vzip1_s16(v251, v205);
                *(int16x4_t *)v252.i8 = vzip2_s16(v251, v205);
                v252.i64[1] = v252.i64[0];
                v253 = (float16x8_t)vzip1q_s16((int16x8_t)v117, (int16x8_t)v117);
                v254 = (float16x8_t)vzip2q_s16(v252, v252);
                v255 = (int16x4_t)vext_s8((int8x8_t)v207, *(int8x8_t *)v116.i8, 6uLL);
                *(int16x4_t *)v118.f32 = vzip1_s16(v255, *(int16x4_t *)v116.i8);
                *(int16x4_t *)v256.i8 = vzip2_s16(v255, *(int16x4_t *)v116.i8);
                v256.i64[1] = v256.i64[0];
                v257 = (float16x8_t)vzip1q_s16((int16x8_t)v118, (int16x8_t)v118);
                v258 = (float16x8_t)vzip2q_s16(v256, v256);
                v259 = (int16x4_t)vext_s8((int8x8_t)v205, (int8x8_t)vdup_lane_s16(v205, 3), 2uLL);
                *(int16x4_t *)v119.f32 = vzip1_s16(v205, v259);
                *(int16x4_t *)v260.i8 = vzip2_s16(v205, v259);
                v260.i64[1] = v260.i64[0];
                v261 = (float16x8_t)vzip1q_s16((int16x8_t)v119, (int16x8_t)v119);
                v262 = (float16x8_t)vzip2q_s16(v260, v260);
                v263 = (int16x4_t)vext_s8(*(int8x8_t *)v116.i8, (int8x8_t)vdup_lane_s16(*(int16x4_t *)v116.i8, 3), 2uLL);
                *(int16x4_t *)v120.f32 = vzip1_s16(*(int16x4_t *)v116.i8, v263);
                *(int16x4_t *)v264.i8 = vzip2_s16(*(int16x4_t *)v116.i8, v263);
                v264.i64[1] = v264.i64[0];
                v265 = (float16x8_t)vzip1q_s16((int16x8_t)v120, (int16x8_t)v120);
                v266 = (float16x8_t)vzip2q_s16(v264, v264);
                v267 = vcvtq_f32_f16(*(float16x4_t *)v253.i8);
                v268 = vcvt_hight_f32_f16(v253);
                v269 = vcvtq_f32_f16(*(float16x4_t *)v254.i8);
                v270 = vcvt_hight_f32_f16(v254);
                v271 = vcvtq_f32_f16(*(float16x4_t *)v261.i8);
                v272 = vcvt_hight_f32_f16(v261);
                v273 = vcvtq_f32_f16(*(float16x4_t *)v262.i8);
                v119 = vcvt_hight_f32_f16(v262);
                v120 = vcvtq_f32_f16(*(float16x4_t *)v257.i8);
                v118 = vcvt_hight_f32_f16(v257);
                v274 = vcvtq_f32_f16(*(float16x4_t *)v258.i8);
                v275 = vcvt_hight_f32_f16(v258);
                v117 = vcvtq_f32_f16(*(float16x4_t *)v265.i8);
                v276 = vcvt_hight_f32_f16(v265);
                v277 = vcvtq_f32_f16(*(float16x4_t *)v266.i8);
                v278 = vcvt_hight_f32_f16(v266);
                *v211 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v271), v199, v120), (float32x4_t)xmmword_1A32B1B90, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v272), v199, v118),
                            (float32x4_t)xmmword_1A32B1B90,
                            v276));
                v211[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v273), v199, v274), (float32x4_t)xmmword_1A32B1B90, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v119), v199, v275),
                              (float32x4_t)xmmword_1A32B1B90,
                              v278));
                *v208 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, v200), (float32x4_t)xmmword_1A32B1BB0, v271), (float32x4_t)xmmword_1A32B1BC0, v120), v202, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v200), (float32x4_t)xmmword_1A32B1BB0, v272), (float32x4_t)xmmword_1A32B1BC0, v118), v202, v276));
                v208[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, v200), (float32x4_t)xmmword_1A32B1BB0, v273), (float32x4_t)xmmword_1A32B1BC0, v274), v202, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, v200), (float32x4_t)xmmword_1A32B1BB0, v119), (float32x4_t)xmmword_1A32B1BC0, v275), v202, v278));
                *v209 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, (float32x4_t)xmmword_1A32B1BC0), v202, v271), v200, v120), (float32x4_t)xmmword_1A32B1BB0, v117)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, (float32x4_t)xmmword_1A32B1BC0), v202, v272), v200, v118), (float32x4_t)xmmword_1A32B1BB0, v276));
                v209[1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, (float32x4_t)xmmword_1A32B1BC0), v202, v273), v200, v274), (float32x4_t)xmmword_1A32B1BB0, v277)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, (float32x4_t)xmmword_1A32B1BC0), v202, v119), v200, v275), (float32x4_t)xmmword_1A32B1BB0, v278));
                v121 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v267, v199), (float32x4_t)xmmword_1A32B1B90, v271), (float32x4_t)xmmword_1A32B1B60, v120), (float32x4_t)xmmword_1A32B1B70, v117);
                v279 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v270, v199), (float32x4_t)xmmword_1A32B1B90, v119), (float32x4_t)xmmword_1A32B1B60, v275), (float32x4_t)xmmword_1A32B1B70, v278);
                v280 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v121), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v199), (float32x4_t)xmmword_1A32B1B90, v272), (float32x4_t)xmmword_1A32B1B60, v118), (float32x4_t)xmmword_1A32B1B70, v276));
                v116 = (int16x8_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v269, v199), (float32x4_t)xmmword_1A32B1B90, v273), (float32x4_t)xmmword_1A32B1B60, v274), (float32x4_t)xmmword_1A32B1B70, v277)), v279);
                *v210 = v280;
                v210[1] = (float16x8_t)v116;
                v122 = (float16x8_t *)((char *)v122 + v198);
                v201 = (int8x8_t *)((char *)v201 + BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v198);
                BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v173 = v196++ == v356 - 2;
              }
              while (!v173);
            }
            v281 = v123;
            FigFloat16ConvertToFloat32();
            v282 = v281 - 2;
            if (v281 == 2)
            {
              v283 = (__int16 *)((char *)v122->i16 + v16);
            }
            else
            {
              v350 = 0;
              v351 = 0;
              do
              {
                v352 = (__int16 *)((char *)v122->i16 + v16);
                FigFloat16ConvertToFloat32();
                FigFloat16ConvertToFloat32();
                FigFloat16ConvertToFloat32();
                v122->i16[0] = FigFloat32ConvertToFloat16();
                v122->i16[1] = FigFloat32ConvertToFloat16();
                v122->i16[2] = FigFloat32ConvertToFloat16();
                v122->i16[3] = FigFloat32ConvertToFloat16();
                v122->i16[4] = FigFloat32ConvertToFloat16();
                v122->i16[5] = FigFloat32ConvertToFloat16();
                v122->i16[6] = FigFloat32ConvertToFloat16();
                v122->i16[7] = FigFloat32ConvertToFloat16();
                *v352 = FigFloat32ConvertToFloat16();
                v352[1] = FigFloat32ConvertToFloat16();
                v352[2] = FigFloat32ConvertToFloat16();
                v352[3] = FigFloat32ConvertToFloat16();
                v352[4] = FigFloat32ConvertToFloat16();
                v352[5] = FigFloat32ConvertToFloat16();
                v352[6] = FigFloat32ConvertToFloat16();
                v352[7] = FigFloat32ConvertToFloat16();
                v351 += 2;
                ++v122;
                v350 += 4;
              }
              while (v282 > v351);
              v283 = (__int16 *)((char *)v122->i16 + v16);
            }
            FigFloat16ConvertToFloat32();
            FigFloat16ConvertToFloat32();
            v122->i16[0] = FigFloat32ConvertToFloat16();
            v122->i16[1] = FigFloat32ConvertToFloat16();
            v122->i16[2] = FigFloat32ConvertToFloat16();
            v122->i16[3] = FigFloat32ConvertToFloat16();
            v122->i16[4] = FigFloat32ConvertToFloat16();
            v122->i16[5] = FigFloat32ConvertToFloat16();
            v122->i16[6] = FigFloat32ConvertToFloat16();
            v122->i16[7] = FigFloat32ConvertToFloat16();
            *(__int16 *)((char *)v122->i16 + v16) = FigFloat32ConvertToFloat16();
            v283[1] = FigFloat32ConvertToFloat16();
            v283[2] = FigFloat32ConvertToFloat16();
            v283[3] = FigFloat32ConvertToFloat16();
            v283[4] = FigFloat32ConvertToFloat16();
            v283[5] = FigFloat32ConvertToFloat16();
            v283[6] = FigFloat32ConvertToFloat16();
            v283[7] = FigFloat32ConvertToFloat16();
            goto LABEL_158;
          }
          *(int16x4_t *)v34.i8 = *BaseAddress;
          *(int32x2_t *)v47.i8 = vdup_lane_s32((int32x2_t)*BaseAddress, 0);
          v48 = v357;
          v49 = v358 - 2;
          if (v358 == 2)
          {
            v35.i64[0] = v47.i64[0];
            v50 = v32;
          }
          else
          {
            v94 = 0;
            v95 = (int8x8_t *)&BaseAddress[1];
            v33.i64[0] = 0x3E0000003EC00000;
            v50 = v32;
            do
            {
              v36.i64[0] = v34.i64[0];
              v96 = (float32x4_t *)((char *)v50 + v16);
              *(int8x8_t *)v35.i8 = vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v34.i8, 4uLL);
              v47.i64[1] = v34.i64[0];
              v97 = *v95++;
              *(int8x8_t *)v34.i8 = v97;
              v98 = (float32x4_t)vzip1q_s32(v35, v35);
              *(int8x8_t *)v35.i8 = vext_s8(*(int8x8_t *)v36.i8, v97, 4uLL);
              v37.i64[1] = v35.i64[0];
              v37 = (float32x4_t)vzip2q_s32((int32x4_t)v37, (int32x4_t)v37);
              v99 = vmlaq_f32(vmulq_f32(v98, (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, (float32x4_t)vzip1q_s32(v36, v36));
              v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vzip2q_s32(v47, v47), (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, v37);
              *v50 = v99;
              v50[1] = v38;
              v50 += 2;
              *v96 = v99;
              v96[1] = (float32x4_t)v38;
              v94 += 2;
              v47.i64[0] = v36.i64[0];
            }
            while (v49 > v94);
            v46 = (float32x4_t *)((char *)v50 + v16);
          }
          v33.i64[1] = v34.i64[0];
          v100 = (float32x4_t)vzip1q_s32(v35, v35);
          v101 = (float32x4_t)vzip1q_s32(v34, v34);
          v102 = (int32x4_t)vmlaq_f32(vmulq_f32(v100, (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, v101);
          v103 = vmlaq_lane_f32(vmulq_f32((float32x4_t)vzip2q_s32(v33, v33), (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, *(float32x2_t *)v34.i8, 1);
          *v50 = v102;
          v50[1] = v103;
          *v46 = (float32x4_t)v102;
          v46[1] = v103;
          v104 = (float32x4_t *)((char *)v32 + 2 * v16);
          if (v356 == 1)
          {
            v105 = (int32x2_t *)BaseAddress;
          }
          else
          {
            v129 = 0;
            v130 = 2 * v16;
            v131 = 4 * v16;
            v34.i64[1] = 0x3F0C00003F440000;
            v100.i64[1] = 0x3EA800003DE00000;
            v101.i64[0] = 0x3C8000003D400000;
            v102.i64[1] = 0x3D4000003C800000;
            v132 = (int8x8_t *)&BaseAddress[1];
            v103.i64[0] = 0x3DA000003E700000;
            v37.i64[0] = 0x3F0C00003EC80000;
            v133 = 3 * v16;
            v134 = 5 * v16;
            do
            {
              v105 = (int32x2_t *)((char *)BaseAddress + BytesPerRow);
              *(int16x4_t *)v39.i8 = *BaseAddress;
              *(int16x4_t *)v38.i8 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
              if (v358 == 2)
              {
                v135 = (float32x4_t *)((char *)v104 + v16);
                v136 = (float32x4_t *)((char *)v104 + v130);
                v137 = (float32x4_t *)((char *)v104 + v133);
                *(int32x2_t *)v40.f32 = vdup_lane_s32(*(int32x2_t *)v39.i8, 0);
                *(int32x2_t *)v41.f32 = vdup_lane_s32(*(int32x2_t *)v38.i8, 0);
                v138 = v104;
              }
              else
              {
                v139 = 0;
                *(int32x2_t *)v140.f32 = vdup_lane_s32(*(int32x2_t *)v38.i8, 0);
                v141 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 0);
                v142 = v45;
                v143 = v132;
                do
                {
                  v42.i64[0] = v38.i64[0];
                  v43.i64[0] = v39.i64[0];
                  v144 = (float32x4_t *)((char *)v142 + v130);
                  v145 = (float32x4_t *)((char *)v142 + v133);
                  v146 = (float32x4_t *)((char *)v142 + v131);
                  v147 = (float32x4_t *)((char *)v142 + v134);
                  *(int8x8_t *)v38.i8 = vext_s8(v141, *(int8x8_t *)v39.i8, 4uLL);
                  v40.i64[1] = v39.i64[0];
                  *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v140.f32, *(int8x8_t *)v42.f32, 4uLL);
                  v140.i64[1] = v42.i64[0];
                  v148 = (float32x4_t)vzip1q_s32(v38, v38);
                  *(int8x8_t *)v39.i8 = *v143;
                  v149 = (float32x4_t)vzip2q_s32((int32x4_t)v40, (int32x4_t)v40);
                  *(int8x8_t *)v38.i8 = *(int8x8_t *)((char *)v143 + BytesPerRow);
                  *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)&v40.u32[2], *v143, 4uLL);
                  v44.i64[1] = v40.i64[0];
                  v150 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
                  *(int8x8_t *)v41.f32 = vext_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v38.i8, 4uLL);
                  v151 = vmulq_f32(v148, (float32x4_t)xmmword_1A32B1B60);
                  v152 = vmulq_f32(v149, (float32x4_t)xmmword_1A32B1B60);
                  v153 = vmulq_f32(v148, (float32x4_t)xmmword_1A32B1BA0);
                  v154 = vmulq_f32(v148, (float32x4_t)xmmword_1A32B1BC0);
                  v155 = vmulq_f32(v149, (float32x4_t)xmmword_1A32B1BA0);
                  v156 = vmulq_f32(v149, (float32x4_t)xmmword_1A32B1BC0);
                  v157 = vmulq_f32(v148, (float32x4_t)xmmword_1A32B1B80);
                  v158 = vmulq_f32(v149, (float32x4_t)xmmword_1A32B1B80);
                  v159 = (float32x4_t)vzip1q_s32((int32x4_t)v43, (int32x4_t)v43);
                  v160 = vmlaq_f32(v151, (float32x4_t)xmmword_1A32B1B70, v159);
                  v161 = vmlaq_f32(v153, (float32x4_t)xmmword_1A32B1BB0, v159);
                  v162 = vmlaq_f32(v154, (float32x4_t)xmmword_1A32B1BD0, v159);
                  v163 = vmlaq_f32(v157, (float32x4_t)xmmword_1A32B1B90, v159);
                  v159.i64[1] = v41.i64[0];
                  v164 = (float32x4_t)vzip2q_s32(v44, v44);
                  v140 = (float32x4_t)vzip2q_s32((int32x4_t)v140, (int32x4_t)v140);
                  v165 = vmlaq_f32(v152, (float32x4_t)xmmword_1A32B1B70, v164);
                  v166 = vmlaq_f32(v155, (float32x4_t)xmmword_1A32B1BB0, v164);
                  v167 = vmlaq_f32(v156, (float32x4_t)xmmword_1A32B1BD0, v164);
                  v168 = vmlaq_f32(v158, (float32x4_t)xmmword_1A32B1B90, v164);
                  v169 = (float32x4_t)vzip1q_s32((int32x4_t)v42, (int32x4_t)v42);
                  v170 = (float32x4_t)vzip2q_s32((int32x4_t)v159, (int32x4_t)v159);
                  *v144 = vmlaq_f32(vmlaq_f32(v160, (float32x4_t)xmmword_1A32B1B80, v150), (float32x4_t)xmmword_1A32B1B90, v169);
                  v144[1] = vmlaq_f32(vmlaq_f32(v165, (float32x4_t)xmmword_1A32B1B80, v140), (float32x4_t)xmmword_1A32B1B90, v170);
                  *v145 = vmlaq_f32(vmlaq_f32(v161, (float32x4_t)xmmword_1A32B1BC0, v150), (float32x4_t)xmmword_1A32B1BD0, v169);
                  v145[1] = vmlaq_f32(vmlaq_f32(v166, (float32x4_t)xmmword_1A32B1BC0, v140), (float32x4_t)xmmword_1A32B1BD0, v170);
                  v139 += 2;
                  ++v143;
                  *v146 = vmlaq_f32(vmlaq_f32(v162, (float32x4_t)xmmword_1A32B1BA0, v150), (float32x4_t)xmmword_1A32B1BB0, v169);
                  v146[1] = vmlaq_f32(vmlaq_f32(v167, (float32x4_t)xmmword_1A32B1BA0, v140), (float32x4_t)xmmword_1A32B1BB0, v170);
                  *v147 = vmlaq_f32(vmlaq_f32(v163, (float32x4_t)xmmword_1A32B1B60, v150), (float32x4_t)xmmword_1A32B1B70, v169);
                  v147[1] = vmlaq_f32(vmlaq_f32(v168, (float32x4_t)xmmword_1A32B1B60, v140), (float32x4_t)xmmword_1A32B1B70, v170);
                  v142 += 2;
                  v141 = *(int8x8_t *)v43.f32;
                  v140.i64[0] = v42.i64[0];
                }
                while (v49 > v139);
                v138 = (float32x4_t *)((char *)v142 + v130);
                v135 = (float32x4_t *)((char *)v142 + v133);
                v136 = (float32x4_t *)((char *)v142 + v131);
                v137 = (float32x4_t *)((char *)v142 + v134);
              }
              v42.i64[1] = v39.i64[0];
              v43.i64[1] = v38.i64[0];
              v40 = (float32x4_t)vzip1q_s32((int32x4_t)v40, (int32x4_t)v40);
              v42 = (float32x4_t)vzip2q_s32((int32x4_t)v42, (int32x4_t)v42);
              v41 = (float32x4_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v41);
              v43 = (float32x4_t)vzip2q_s32((int32x4_t)v43, (int32x4_t)v43);
              v171 = (float32x4_t)vzip1q_s32(v39, v39);
              v172 = (float32x4_t)vzip1q_s32(v38, v38);
              *v138 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, v171), (float32x4_t)xmmword_1A32B1B80, v41), (float32x4_t)xmmword_1A32B1B90, v172);
              v138[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A32B1B60), (float32x4_t)xmmword_1A32B1B70, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A32B1B80, v43), (float32x4_t)xmmword_1A32B1B90, *(float32x2_t *)v38.i8, 1);
              *v135 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A32B1BA0), (float32x4_t)xmmword_1A32B1BB0, v171), (float32x4_t)xmmword_1A32B1BC0, v41), (float32x4_t)xmmword_1A32B1BD0, v172);
              v135[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A32B1BA0), (float32x4_t)xmmword_1A32B1BB0, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A32B1BC0, v43), (float32x4_t)xmmword_1A32B1BD0, *(float32x2_t *)v38.i8, 1);
              *v136 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, v171), (float32x4_t)xmmword_1A32B1BA0, v41), (float32x4_t)xmmword_1A32B1BB0, v172);
              v136[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A32B1BC0), (float32x4_t)xmmword_1A32B1BD0, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A32B1BA0, v43), (float32x4_t)xmmword_1A32B1BB0, *(float32x2_t *)v38.i8, 1);
              *v137 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v40, (float32x4_t)xmmword_1A32B1B80), (float32x4_t)xmmword_1A32B1B90, v171), (float32x4_t)xmmword_1A32B1B60, v41), (float32x4_t)xmmword_1A32B1B70, v172);
              v137[1] = vmlaq_lane_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_f32(v42, (float32x4_t)xmmword_1A32B1B80), (float32x4_t)xmmword_1A32B1B90, *(float32x2_t *)v39.i8, 1), (float32x4_t)xmmword_1A32B1B60, v43), (float32x4_t)xmmword_1A32B1B70, *(float32x2_t *)v38.i8, 1);
              v104 = (float32x4_t *)((char *)v104 + v131);
              v132 = (int8x8_t *)((char *)v132 + BytesPerRow);
              v45 = (float32x4_t *)((char *)v45 + v131);
              BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
              v173 = v129++ == v356 - 2;
            }
            while (!v173);
          }
          *(int32x2_t *)v34.i8 = *v105;
          *(int32x2_t *)v100.f32 = vdup_lane_s32(*v105, 0);
          if (v358 == 2)
          {
            v174 = (float32x4_t *)((char *)v104 + v16);
          }
          else
          {
            v337 = 0;
            v338 = (int8x8_t *)&v105[1];
            do
            {
              v102.i64[0] = v34.i64[0];
              v103.i64[1] = v34.i64[0];
              v339 = (float32x4_t *)((char *)v104 + v16);
              v340 = *v338++;
              *(int8x8_t *)v34.i8 = v340;
              *(int8x8_t *)v101.f32 = vext_s8(*(int8x8_t *)&v103.u32[2], v340, 4uLL);
              v37.i64[1] = v101.i64[0];
              *(int8x8_t *)v100.f32 = vext_s8(*(int8x8_t *)v100.f32, *(int8x8_t *)&v103.u32[2], 4uLL);
              v100 = (float32x4_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v100);
              v103 = (float32x4_t)vzip2q_s32((int32x4_t)v103, (int32x4_t)v103);
              v37 = (float32x4_t)vzip2q_s32((int32x4_t)v37, (int32x4_t)v37);
              v341 = vmlaq_f32(vmulq_f32(v100, (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, (float32x4_t)vzip1q_s32(v102, v102));
              v342 = vmlaq_f32(vmulq_f32(v103, (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, v37);
              *v104 = v341;
              v104[1] = v342;
              v104 += 2;
              *v339 = v341;
              v339[1] = v342;
              v337 += 2;
              v100.i64[0] = v102.i64[0];
            }
            while (v358 - 2 > v337);
            v174 = (float32x4_t *)((char *)v104 + v16);
            v100.i64[0] = v101.i64[0];
          }
          v101.i64[1] = v34.i64[0];
          v343 = vmlaq_f32(vmulq_f32((float32x4_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v100), (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, (float32x4_t)vzip1q_s32(v34, v34));
          v344 = vmlaq_lane_f32(vmulq_f32((float32x4_t)vzip2q_s32((int32x4_t)v101, (int32x4_t)v101), (float32x4_t)xmmword_1A32B1BE0), (float32x4_t)xmmword_1A32B1BF0, *(float32x2_t *)v34.i8, 1);
          *v104 = v343;
          v104[1] = v344;
          *v174 = v343;
          v174[1] = v344;
          break;
        case -2:
          if (v19 == 4)
          {
            *(int16x4_t *)v60.f32 = *BaseAddress;
            v61 = (int8x8_t)vdup_lane_s32((int32x2_t)*BaseAddress, 0);
            v48 = v357;
            v62 = v358 - 2;
            if (v358 == 2)
            {
              *(int8x8_t *)v63.f32 = v61;
              v64 = v32;
            }
            else
            {
              v106 = 0;
              v107 = (int8x8_t *)&BaseAddress[1];
              v64 = v32;
              do
              {
                v108.i64[0] = v60.i64[0];
                *(int8x8_t *)v109.f32 = vext_s8(v61, *(int8x8_t *)v60.f32, 4uLL);
                v109.i64[1] = v60.i64[0];
                v110 = *v107++;
                *(int8x8_t *)v60.f32 = v110;
                *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)&v109.u32[2], v110, 4uLL);
                v61 = *(int8x8_t *)&v109.u32[2];
                v108.i64[1] = v63.i64[0];
                *v64++ = vmlaq_f32(vmulq_f32(v109, (float32x4_t)xmmword_1A32B1C40), (float32x4_t)xmmword_1A32B1C50, v108);
                v106 += 2;
              }
              while (v62 > v106);
            }
            v63.i64[1] = v60.i64[0];
            *(int32x2_t *)&v60.u32[2] = vdup_lane_s32(*(int32x2_t *)v60.f32, 1);
            *v64 = vmlaq_f32(vmulq_f32(v63, (float32x4_t)xmmword_1A32B1C40), (float32x4_t)xmmword_1A32B1C50, v60);
            v111 = (float32x4_t *)((char *)v32 + v16);
            if (v356 == 1)
            {
              v112 = (int32x2_t *)BaseAddress;
            }
            else
            {
              v175 = 0;
              v176 = 2 * v16;
              v177 = (int8x8_t *)&BaseAddress[1];
              do
              {
                v112 = (int32x2_t *)((char *)BaseAddress + BytesPerRow);
                *(int16x4_t *)v178.f32 = *BaseAddress;
                *(int16x4_t *)v179.f32 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                if (v358 == 2)
                {
                  v180 = (float32x4_t *)((char *)v111 + v16);
                  *(int32x2_t *)v181.f32 = vdup_lane_s32(*(int32x2_t *)v178.f32, 0);
                  *(int32x2_t *)v182.f32 = vdup_lane_s32(*(int32x2_t *)v179.f32, 0);
                  v183 = v111;
                }
                else
                {
                  v184 = 0;
                  v185 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v179.f32, 0);
                  v186 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v178.f32, 0);
                  v187 = v45;
                  v188 = v177;
                  do
                  {
                    v189.i64[0] = v179.i64[0];
                    *(int8x8_t *)v190.f32 = vext_s8(v186, *(int8x8_t *)v178.f32, 4uLL);
                    v190.i64[1] = v178.i64[0];
                    *(int8x8_t *)v191.f32 = vext_s8(v185, *(int8x8_t *)v179.f32, 4uLL);
                    v191.i64[1] = v179.i64[0];
                    *(int8x8_t *)v178.f32 = *v188;
                    *(int8x8_t *)v179.f32 = *(int8x8_t *)((char *)v188 + BytesPerRow);
                    *(int8x8_t *)v181.f32 = vext_s8(*(int8x8_t *)&v190.u32[2], *v188, 4uLL);
                    v186 = *(int8x8_t *)&v190.u32[2];
                    v192.i64[0] = v190.i64[1];
                    v192.i64[1] = v181.i64[0];
                    *(int8x8_t *)v182.f32 = vext_s8(*(int8x8_t *)&v191.u32[2], *(int8x8_t *)v179.f32, 4uLL);
                    v185 = *(int8x8_t *)&v191.u32[2];
                    v189.i64[1] = v182.i64[0];
                    *(float32x4_t *)((char *)v187 + v16) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v192), (float32x4_t)xmmword_1A32B1C20, v191), (float32x4_t)xmmword_1A32B1C30, v189);
                    *(float32x4_t *)((char *)v187 + 2 * v16) = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v192), (float32x4_t)xmmword_1A32B1C00, v191), (float32x4_t)xmmword_1A32B1C10, v189);
                    v184 += 2;
                    ++v188;
                    ++v187;
                  }
                  while (v62 > v184);
                  v183 = (float32x4_t *)((char *)v187 + v16);
                  v180 = (float32x4_t *)((char *)v187 + v176);
                }
                v181.i64[1] = v178.i64[0];
                v182.i64[1] = v179.i64[0];
                *(int32x2_t *)&v178.u32[2] = vdup_lane_s32(*(int32x2_t *)v178.f32, 1);
                *(int32x2_t *)&v179.u32[2] = vdup_lane_s32(*(int32x2_t *)v179.f32, 1);
                *v183 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v181, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v178), (float32x4_t)xmmword_1A32B1C20, v182), (float32x4_t)xmmword_1A32B1C30, v179);
                *v180 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v181, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v178), (float32x4_t)xmmword_1A32B1C00, v182), (float32x4_t)xmmword_1A32B1C10, v179);
                v111 = (float32x4_t *)((char *)v111 + v176);
                v177 = (int8x8_t *)((char *)v177 + BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v176);
                BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v173 = v175++ == v356 - 2;
              }
              while (!v173);
            }
            *(int32x2_t *)v193.f32 = *v112;
            v194 = (int8x8_t)vdup_lane_s32(*v112, 0);
            if (v358 == 2)
            {
              *(int8x8_t *)v195.f32 = v194;
            }
            else
            {
              v345 = 0;
              v346 = (int8x8_t *)&v112[1];
              do
              {
                v347.i64[0] = v193.i64[0];
                *(int8x8_t *)v348.f32 = vext_s8(v194, *(int8x8_t *)v193.f32, 4uLL);
                v348.i64[1] = v193.i64[0];
                v349 = *v346++;
                *(int8x8_t *)v193.f32 = v349;
                *(int8x8_t *)v195.f32 = vext_s8(*(int8x8_t *)&v348.u32[2], v349, 4uLL);
                v194 = *(int8x8_t *)&v348.u32[2];
                v347.i64[1] = v195.i64[0];
                *v111++ = vmlaq_f32(vmulq_f32(v348, (float32x4_t)xmmword_1A32B1C40), (float32x4_t)xmmword_1A32B1C50, v347);
                v345 += 2;
              }
              while (v358 - 2 > v345);
            }
            v195.i64[1] = v193.i64[0];
            *(int32x2_t *)&v193.u32[2] = vdup_lane_s32(*(int32x2_t *)v193.f32, 1);
            *v111 = vmlaq_f32(vmulq_f32(v195, (float32x4_t)xmmword_1A32B1C40), (float32x4_t)xmmword_1A32B1C50, v193);
          }
          else
          {
            v355 = v11;
            FigFloat16ConvertToFloat32();
            if (v358 == 2)
            {
              v83 = v45;
            }
            else
            {
              v124 = 0;
              v125 = BaseAddress;
              v83 = v45;
              do
              {
                FigFloat16ConvertToFloat32();
                FigFloat16ConvertToFloat32();
                v125 = (int16x4_t *)((char *)v125 + 4);
                FigFloat16ConvertToFloat32();
                v83->i16[0] = FigFloat32ConvertToFloat16();
                v83->i16[1] = FigFloat32ConvertToFloat16();
                v83->i16[2] = FigFloat32ConvertToFloat16();
                v83->i16[3] = FigFloat32ConvertToFloat16();
                v124 += 2;
                v83 = (float32x4_t *)((char *)v83 + 8);
              }
              while (v358 - 2 > v124);
            }
            FigFloat16ConvertToFloat32();
            FigFloat16ConvertToFloat32();
            v83->i16[0] = FigFloat32ConvertToFloat16();
            v83->i16[1] = FigFloat32ConvertToFloat16();
            v83->i16[2] = FigFloat32ConvertToFloat16();
            v83->i16[3] = FigFloat32ConvertToFloat16();
            v126 = (float16x8_t *)((char *)v45 + v16);
            if (v356 == 1)
            {
              v127 = BaseAddress;
              v128 = v358;
            }
            else
            {
              v284 = 0;
              v285 = 2 * v16;
              v128 = v358;
              v286 = (int8x8_t *)&BaseAddress[1];
              do
              {
                v127 = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v287 = *BaseAddress;
                v288 = *(int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v289 = vdup_lane_s16(*BaseAddress, 0);
                v290 = vdup_lane_s16(v288, 0);
                if (v358 == 4)
                {
                  v291 = (float16x8_t *)((char *)v126 + v16);
                  v292 = v126;
                }
                else
                {
                  v293 = 0;
                  v294 = v45;
                  v295 = v286;
                  do
                  {
                    v296 = (int8x8_t)v290;
                    v297 = (int8x8_t)v289;
                    v290 = v288;
                    v289 = v287;
                    v298 = (int16x4_t)vext_s8(v297, (int8x8_t)v287, 6uLL);
                    v299 = (float16x4_t)vzip1_s16(v298, v289);
                    v300 = (float16x4_t)vzip2_s16(v298, v289);
                    v301 = (int16x4_t)vext_s8(v296, (int8x8_t)v288, 6uLL);
                    v302 = (float16x4_t)vzip1_s16(v301, v288);
                    v303 = (float16x4_t)vzip2_s16(v301, v288);
                    v287 = (int16x4_t)*v295;
                    v288 = *(int16x4_t *)((char *)v295 + BytesPerRow);
                    v304 = (int16x4_t)vext_s8((int8x8_t)v289, *v295, 2uLL);
                    v305 = (int16x4_t)vext_s8((int8x8_t)v290, (int8x8_t)v288, 2uLL);
                    v306 = vcvtq_f32_f16(v299);
                    v307 = vcvtq_f32_f16(v300);
                    v308 = vcvtq_f32_f16(v302);
                    v309 = vcvtq_f32_f16(v303);
                    v310 = vcvtq_f32_f16((float16x4_t)vzip1_s16(v289, v304));
                    v311 = vcvtq_f32_f16((float16x4_t)vzip2_s16(v289, v304));
                    v312 = vcvtq_f32_f16((float16x4_t)vzip1_s16(v290, v305));
                    v313 = vcvtq_f32_f16((float16x4_t)vzip2_s16(v290, v305));
                    *(float16x8_t *)((char *)v294 + v16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v310), (float32x4_t)xmmword_1A32B1C20, v308), (float32x4_t)xmmword_1A32B1C30, v312)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v307, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v311),
                                                                 (float32x4_t)xmmword_1A32B1C20,
                                                                 v309),
                                                               (float32x4_t)xmmword_1A32B1C30,
                                                               v313));
                    *(float16x8_t *)((char *)v294 + 2 * v16) = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v310), (float32x4_t)xmmword_1A32B1C00, v308), (float32x4_t)xmmword_1A32B1C10, v312)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v307, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v311),
                                                                     (float32x4_t)xmmword_1A32B1C00,
                                                                     v309),
                                                                   (float32x4_t)xmmword_1A32B1C10,
                                                                   v313));
                    v293 += 4;
                    ++v295;
                    ++v294;
                  }
                  while (v358 - 4 > v293);
                  v292 = (float16x8_t *)((char *)v294 + v16);
                  v291 = (float16x8_t *)((char *)v294 + v285);
                }
                v314 = (int16x4_t)vext_s8((int8x8_t)v289, (int8x8_t)v287, 6uLL);
                v315 = (float16x4_t)vzip1_s16(v314, v287);
                v316 = (float16x4_t)vzip2_s16(v314, v287);
                v317 = (int16x4_t)vext_s8((int8x8_t)v290, (int8x8_t)v288, 6uLL);
                v318 = (float16x4_t)vzip1_s16(v317, v288);
                v319 = (float16x4_t)vzip2_s16(v317, v288);
                v320 = (int16x4_t)vext_s8((int8x8_t)v287, (int8x8_t)vdup_lane_s16(v287, 3), 2uLL);
                v321 = (float16x4_t)vzip1_s16(v287, v320);
                v322 = (float16x4_t)vzip2_s16(v287, v320);
                v323 = (int16x4_t)vext_s8((int8x8_t)v288, (int8x8_t)vdup_lane_s16(v288, 3), 2uLL);
                v324 = (float16x4_t)vzip1_s16(v288, v323);
                v325 = (float16x4_t)vzip2_s16(v288, v323);
                v326 = vcvtq_f32_f16(v315);
                v327 = vcvtq_f32_f16(v316);
                v328 = vcvtq_f32_f16(v318);
                v329 = vcvtq_f32_f16(v319);
                v330 = vcvtq_f32_f16(v321);
                v331 = vcvtq_f32_f16(v322);
                v332 = vcvtq_f32_f16(v324);
                v333 = vcvtq_f32_f16(v325);
                *v292 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v330), (float32x4_t)xmmword_1A32B1C20, v328), (float32x4_t)xmmword_1A32B1C30, v332)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, (float32x4_t)xmmword_1A32B1C00), (float32x4_t)xmmword_1A32B1C10, v331), (float32x4_t)xmmword_1A32B1C20, v329),
                            (float32x4_t)xmmword_1A32B1C30,
                            v333));
                *v291 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v330), (float32x4_t)xmmword_1A32B1C00, v328), (float32x4_t)xmmword_1A32B1C10, v332)), vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, (float32x4_t)xmmword_1A32B1C20), (float32x4_t)xmmword_1A32B1C30, v331), (float32x4_t)xmmword_1A32B1C00, v329),
                            (float32x4_t)xmmword_1A32B1C10,
                            v333));
                v126 = (float16x8_t *)((char *)v126 + v285);
                v286 = (int8x8_t *)((char *)v286 + BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v285);
                BaseAddress = (int16x4_t *)((char *)BaseAddress + BytesPerRow);
                v173 = v284++ == v356 - 2;
              }
              while (!v173);
            }
            v334 = v128;
            FigFloat16ConvertToFloat32();
            v335 = v334 - 2;
            if (v335)
            {
              for (i = 0; i < v335; i += 2)
              {
                FigFloat16ConvertToFloat32();
                FigFloat16ConvertToFloat32();
                v127 = (int16x4_t *)((char *)v127 + 4);
                FigFloat16ConvertToFloat32();
                v126->i16[0] = FigFloat32ConvertToFloat16();
                v126->i16[1] = FigFloat32ConvertToFloat16();
                v126->i16[2] = FigFloat32ConvertToFloat16();
                v126->i16[3] = FigFloat32ConvertToFloat16();
                v126 = (float16x8_t *)((char *)v126 + 8);
              }
            }
            FigFloat16ConvertToFloat32();
            FigFloat16ConvertToFloat32();
            v126->i16[0] = FigFloat32ConvertToFloat16();
            v126->i16[1] = FigFloat32ConvertToFloat16();
            v126->i16[2] = FigFloat32ConvertToFloat16();
            v126->i16[3] = FigFloat32ConvertToFloat16();
LABEL_158:
            v11 = v355;
            v48 = v357;
          }
          break;
        case 2:
          if (v19 == 2)
          {
            v48 = v357;
            if (Height)
            {
              for (j = 0; j != Height; ++j)
              {
                if (Width)
                {
                  v66 = 0;
                  v67 = (unsigned __int128 *)v45;
                  v68 = (const __int16 *)BaseAddress;
                  do
                  {
                    v69 = (unsigned __int128)vld2q_s16(v68);
                    v68 += 16;
                    *v67++ = v69;
                    v66 += 8;
                  }
                  while (Width > v66);
                }
                BaseAddress = (int16x4_t *)((char *)BaseAddress + 2 * BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v16);
              }
            }
          }
          else
          {
            v48 = v357;
            if (Height)
            {
              for (k = 0; k != Height; ++k)
              {
                if (Width)
                {
                  v85 = 0;
                  v86 = (unsigned __int128 *)v45;
                  v87 = (const float *)BaseAddress;
                  do
                  {
                    v88 = (unsigned __int128)vld2q_f32(v87);
                    v87 += 8;
                    *v86++ = v88;
                    v85 += 4;
                  }
                  while (Width > v85);
                }
                BaseAddress = (int16x4_t *)((char *)BaseAddress + 2 * BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v16);
              }
            }
          }
          break;
        case 4:
          if (v19 == 2)
          {
            v48 = v357;
            if (Height)
            {
              for (m = 0; m != Height; ++m)
              {
                if (Width)
                {
                  v71 = 0;
                  v72 = (unsigned __int128 *)v45;
                  v73 = (const __int16 *)BaseAddress;
                  do
                  {
                    v74 = (unsigned __int128)vld4q_s16(v73);
                    v73 += 32;
                    *v72++ = v74;
                    v71 += 8;
                  }
                  while (Width > v71);
                }
                BaseAddress = (int16x4_t *)((char *)BaseAddress + 4 * BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v16);
              }
            }
          }
          else
          {
            v48 = v357;
            if (Height)
            {
              for (n = 0; n != Height; ++n)
              {
                if (Width)
                {
                  v90 = 0;
                  v91 = (unsigned __int128 *)v45;
                  v92 = (const float *)BaseAddress;
                  do
                  {
                    v93 = (unsigned __int128)vld2q_f32(v92);
                    *v91++ = v93;
                    v90 += 4;
                    v92 += 16;
                  }
                  while (Width > v90);
                }
                BaseAddress = (int16x4_t *)((char *)BaseAddress + 4 * BytesPerRow);
                v45 = (float32x4_t *)((char *)v45 + v16);
              }
            }
          }
          break;
        default:
          v51 = (int)(a3 + (double)v358 + -1.0);
          v52 = (int)(a4 + (double)v356 + -1.0);
          if (v19 == 2)
          {
            v48 = v357;
            if (Height)
            {
              v53 = 0;
              v54 = a4;
              do
              {
                if ((int)(float)(v54 + 0.5) >= v52)
                  v55 = (int)(a4 + (double)v356 + -1.0);
                else
                  v55 = (int)(float)(v54 + 0.5);
                if (Width)
                {
                  v56 = 0;
                  v57 = (char *)BaseAddress + BytesPerRow * v55;
                  v58 = a3;
                  do
                  {
                    v59 = (int)(float)(v58 + 0.5);
                    if (v59 >= v51)
                      v59 = (int)(a3 + (double)v358 + -1.0);
                    v45->i16[v56++] = *(_WORD *)&v57[2 * v59];
                    v58 = v22 + v58;
                  }
                  while (Width != v56);
                }
                ++v53;
                v45 = (float32x4_t *)((char *)v45 + v16);
                v54 = v23 + v54;
              }
              while (v53 != Height);
            }
          }
          else
          {
            v48 = v357;
            if (Height)
            {
              v76 = 0;
              v77 = a4;
              do
              {
                if ((int)(float)(v77 + 0.5) >= v52)
                  v78 = (int)(a4 + (double)v356 + -1.0);
                else
                  v78 = (int)(float)(v77 + 0.5);
                if (Width)
                {
                  v79 = 0;
                  v80 = (char *)BaseAddress + BytesPerRow * v78;
                  v81 = a3;
                  do
                  {
                    v82 = (int)(float)(v81 + 0.5);
                    if (v82 >= v51)
                      v82 = (int)(a3 + (double)v358 + -1.0);
                    v45->i32[v79++] = *(_DWORD *)&v80[4 * v82];
                    v81 = v22 + v81;
                  }
                  while (Width != v79);
                }
                ++v76;
                v45 = (float32x4_t *)((char *)v45 + v16);
                v77 = v23 + v77;
              }
              while (v76 != Height);
            }
          }
          break;
      }
      CVPixelBufferUnlockBaseAddress(v11, 1uLL);
      CVPixelBufferUnlockBaseAddress(v48, 0);
      return 0;
    }
  }
  return v353;
}

BOOL FigDepthFormatIs32Bit(int a1)
{
  return a1 == 1717855600 || a1 == 1717856627;
}

uint64_t FigDepthFormatIsFixed16(int a1)
{
  _BOOL4 v1;

  v1 = a1 == 825437747 || a1 == 1932996149;
  return a1 == 825306677 || v1;
}

uint64_t FigDepthDataGetCurrentMajorVersion()
{
  return 1;
}

CVPixelBufferRef FigDepthConvertToRGBA(__CVBuffer *a1, int a2, int a3)
{
  size_t Width;
  size_t Height;
  uint64_t v8;
  signed int PixelFormatType;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __CVBuffer *v15;
  int v16;
  int v17;
  char FixedPointFractionalBits;
  char v19;
  float v20;
  float v21;
  unsigned __int16 *BaseAddress;
  float *v23;
  int BytesPerRow;
  int v25;
  int i;
  uint64_t v27;
  unsigned int v28;
  float v29;
  _BYTE *v30;
  float *v31;
  int v32;
  int v33;
  int v34;
  double v35;
  double v36;
  double v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  int v45;
  int v46;
  float v47;
  int v48;
  float *v49;
  uint64_t v50;
  unsigned int v51;
  float v52;
  int v53;
  char v55;
  char v56;
  int v57;
  int v58;
  void **v59;
  CVPixelBufferRef v60;
  CVPixelBufferRef pixelBuffer;

  v60 = a1;
  pixelBuffer = 0;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (!a1)
    goto LABEL_56;
  v8 = Height;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v10 = PixelFormatType;
  if (PixelFormatType <= 1717856626)
  {
    if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
      goto LABEL_12;
    v11 = 1717855600;
  }
  else if (PixelFormatType > 1751411058)
  {
    if (PixelFormatType == 1751411059)
      goto LABEL_12;
    v11 = 1932996149;
  }
  else
  {
    if (PixelFormatType == 1717856627)
      goto LABEL_12;
    v11 = 1751410032;
  }
  if (PixelFormatType != v11)
  {
LABEL_56:
    FigDebugAssert3();
    return pixelBuffer;
  }
LABEL_12:
  if (BWCreateIOSurfaceBackedCVPixelBuffer(Width, v8, 32, &pixelBuffer, CFSTR("DepthConverter RGBA")))
    goto LABEL_56;
  v12 = 0;
  if (v10 <= 1751410031)
  {
    if (v10 == 825306677)
      goto LABEL_20;
    v13 = 825437747;
  }
  else
  {
    if (v10 == 1751410032 || v10 == 1932996149)
      goto LABEL_20;
    v13 = 1751411059;
  }
  if (v10 != v13)
    goto LABEL_22;
LABEL_20:
  if (BWCreateIOSurfaceBackedCVPixelBuffer(Width, v8, 1278226534, &v60, CFSTR("DepthConverter Float")))
    goto LABEL_56;
  v12 = 1;
LABEL_22:
  if (v10 <= 1751410031)
  {
    if (v10 == 825306677)
      goto LABEL_29;
    v14 = 825437747;
  }
  else
  {
    if (v10 == 1751410032 || v10 == 1751411059)
    {
      if (!figDepthConvertBufferFloat16ToFloat32(a1, v60))
        goto LABEL_45;
LABEL_71:
      FigDebugAssert3();
      if (!v12)
        return pixelBuffer;
      goto LABEL_64;
    }
    v14 = 1932996149;
  }
  if (v10 != v14)
    goto LABEL_45;
LABEL_29:
  v15 = v60;
  if (!v60
    || (v16 = CVPixelBufferGetWidth(a1), v16 != CVPixelBufferGetWidth(v15))
    || (v58 = a3, v17 = CVPixelBufferGetHeight(a1), v17 != CVPixelBufferGetHeight(v15)))
  {
    FigDebugAssert3();
    goto LABEL_71;
  }
  v57 = v12;
  FixedPointFractionalBits = CVPixelBufferGetFixedPointFractionalBits();
  if (a2)
    v19 = FixedPointFractionalBits + 1;
  else
    v19 = FixedPointFractionalBits;
  v55 = v19;
  v56 = a2 != 0;
  objc_msgSend((id)objc_msgSend((id)CVPixelBufferGetAttributes(), "objectForKeyedSubscript:", *MEMORY[0x1E0CA8FD0]), "floatValue");
  v21 = v20;
  CVPixelBufferLockBaseAddress(v15, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
  v23 = (float *)CVPixelBufferGetBaseAddress(v15);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v25 = CVPixelBufferGetBytesPerRow(v15);
  if (v17)
  {
    for (i = 0; i != v17; ++i)
    {
      if (v16)
      {
        v27 = 0;
        do
        {
          v28 = BaseAddress[v27];
          v29 = (float)((float)-v21 / (float)(1 << v56)) + (float)((float)(1.0 / (float)(1 << v55)) * (float)v28);
          if (v28 == 0x1FFF)
            v29 = NAN;
          v23[v27++] = v29;
        }
        while (v16 != (_DWORD)v27);
      }
      BaseAddress = (unsigned __int16 *)((char *)BaseAddress + BytesPerRow);
      v23 = (float *)((char *)v23 + v25);
    }
  }
  CVPixelBufferUnlockBaseAddress(v15, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  v12 = v57;
  a3 = v58;
LABEL_45:
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  CVPixelBufferLockBaseAddress(v60, 1uLL);
  v30 = CVPixelBufferGetBaseAddress(pixelBuffer);
  v31 = (float *)CVPixelBufferGetBaseAddress(v60);
  v32 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  v33 = CVPixelBufferGetBytesPerRow(v60);
  v34 = v33;
  if (a3)
  {
    v59 = (void **)ColorsWheelContext_create(80, 30, 20, 20, 30, 0, 0, 1, 0.0);
    ColorsWheelContext_drawMatrix_f32((uint64_t)v59, Width, v8, v31, v34, 4, (uint64_t)v30, v32, v35, v36, v37, v38, 4);
    ColorsWheelContext_destroy(&v59);
    goto LABEL_63;
  }
  v39 = (v8 * Width);
  if (!(_DWORD)v39)
  {
    v41 = 1.1755e-38;
    v40 = 3.4028e38;
    if (!(_DWORD)v8)
      goto LABEL_63;
    goto LABEL_58;
  }
  v40 = 3.4028e38;
  v41 = 1.1755e-38;
  v42 = v31;
  do
  {
    v43 = *v42++;
    v44 = v43;
    if (v43 > v41)
      v41 = v44;
    if (v44 < v40)
      v40 = v44;
    --v39;
  }
  while (v39);
  if ((_DWORD)v8)
  {
LABEL_58:
    v45 = 0;
    v46 = 0;
    v47 = v41 - v40;
    v48 = 3;
    do
    {
      if ((_DWORD)Width)
      {
        v49 = (float *)((char *)v31 + (v45 & 0xFFFFFFFC));
        v50 = Width;
        v51 = v48;
        do
        {
          v52 = *v49++;
          v53 = (int)(float)((float)((float)(v52 - v40) * 255.0) / v47);
          v30[v51 - 3] = v53;
          v30[v51 - 2] = v53;
          v30[v51 - 1] = v53;
          v30[v51] = -1;
          v51 += 4;
          --v50;
        }
        while (v50);
      }
      ++v46;
      v48 += v32;
      v45 += v33;
    }
    while (v46 != (_DWORD)v8);
  }
LABEL_63:
  CVPixelBufferUnlockBaseAddress(v60, 1uLL);
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  if (v12)
LABEL_64:
    CFRelease(v60);
  return pixelBuffer;
}

CVPixelBufferRef FigCreateRGBAPixelBufferFromSegmentationMask(__CVBuffer *a1)
{
  __CVBuffer *v1;
  size_t Width;
  size_t Height;
  OSType PixelFormatType;
  OSType v5;
  size_t BytesPerRow;
  char *BaseAddress;
  size_t v8;
  char *v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int16x4_t v17;
  CFTypeRef cf;
  CVPixelBufferRef pixelBuffer;

  cf = 0;
  pixelBuffer = 0;
  if (a1)
  {
    v1 = a1;
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(v1);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v1);
    if (PixelFormatType - 1278226488 <= 0x30
      && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
    {
      v5 = PixelFormatType;
      if (!BWCreateIOSurfaceBackedCVPixelBuffer(Width, Height, 32, &pixelBuffer, CFSTR("SegmentationMask RGBA")))
      {
        if (v5 != 1278226536)
        {
LABEL_9:
          CVPixelBufferLockBaseAddress(pixelBuffer, 0);
          CVPixelBufferLockBaseAddress(v1, 1uLL);
          BytesPerRow = CVPixelBufferGetBytesPerRow(v1);
          BaseAddress = (char *)CVPixelBufferGetBaseAddress(v1);
          v8 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v9 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          if (Height << 32)
          {
            v11 = 0;
            v12 = (int)Height;
            v13 = (int)Width;
            if ((unint64_t)(int)Width <= 1)
              v13 = 1;
            if ((unint64_t)(int)Height <= 1)
              v12 = 1;
            do
            {
              if (Width << 32)
              {
                v14 = 0;
                v15 = &BaseAddress[v11 * BytesPerRow];
                do
                {
                  v16 = v14 << (2 * (v5 != 1278226488));
                  if (v5 == 1278226488)
                    LOWORD(v16) = v15[v16];
                  else
                    LODWORD(v16) = (int)(float)(*(float *)&v15[v16] * 255.0);
                  v17 = (int16x4_t)0xFF00FF00FF00FFLL;
                  v17.i16[0] = v16;
                  *(int16x4_t *)v10.i8 = vzip1_s16(v17, v17);
                  v10.i16[2] = v16;
                  *(_DWORD *)&v9[4 * v14++] = vmovn_s16(v10).u32[0];
                }
                while (v13 != v14);
              }
              ++v11;
              v9 += v8;
            }
            while (v11 != v12);
          }
          CVPixelBufferUnlockBaseAddress(v1, 1uLL);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
          if (cf)
            CFRelease(cf);
          return pixelBuffer;
        }
        if (!BWCreateIOSurfaceBackedCVPixelBuffer(Width, Height, 1278226534, (CVPixelBufferRef *)&cf, CFSTR("SegmentationMask Float"))&& !figDepthConvertBufferFloat16ToFloat32(v1, (__CVBuffer *)cf))
        {
          v1 = (__CVBuffer *)cf;
          goto LABEL_9;
        }
      }
    }
    FigDebugAssert3();
    if (cf)
      CFRelease(cf);
  }
  else
  {
    FigDebugAssert3();
  }
  if (pixelBuffer)
    CFRelease(pixelBuffer);
  return 0;
}

CVPixelBufferRef FigDepthCreateRGBAPixelBufferFromInfraredPixelBuffer(__CVBuffer *a1)
{
  size_t Width;
  size_t Height;
  uint64_t v4;
  _BYTE *BaseAddress;
  unsigned __int16 *v6;
  int BytesPerRow;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = 0;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (a1
    && (v4 = Height, CVPixelBufferGetPixelFormatType(a1) == 1278226742)
    && !BWCreateIOSurfaceBackedCVPixelBuffer(Width, v4, 32, &pixelBuffer, CFSTR("DepthFromIR RGBA")))
  {
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
    v6 = (unsigned __int16 *)CVPixelBufferGetBaseAddress(a1);
    BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    v8 = CVPixelBufferGetBytesPerRow(a1);
    if ((_DWORD)v4)
    {
      v9 = 0;
      v10 = 0;
      v11 = 3;
      do
      {
        v12 = Width;
        v13 = v9;
        v14 = v11;
        if ((_DWORD)Width)
        {
          do
          {
            v15 = v6[v13];
            if (v15 >= 0x4000)
              v16 = -1;
            else
              v16 = v15 >> 6;
            BaseAddress[v14 - 3] = v16;
            BaseAddress[v14 - 2] = v16;
            BaseAddress[v14 - 1] = v16;
            BaseAddress[v14] = -1;
            v14 += 4;
            ++v13;
            --v12;
          }
          while (v12);
        }
        ++v10;
        v11 += BytesPerRow;
        v9 += v8 >> 1;
      }
      while (v10 != (_DWORD)v4);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  }
  else
  {
    FigDebugAssert3();
  }
  return pixelBuffer;
}

uint64_t FigDepthComputeNormalizedFocalLength(void *a1, float *a2)
{
  void *v4;
  __int128 v5;
  void *v6;
  const __CFDictionary *v7;
  float v8;
  CGSize v10;
  _OWORD v11[3];

  v4 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08440]);
  v5 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 16);
  v11[0] = *MEMORY[0x1E0C83FE8];
  v11[1] = v5;
  v11[2] = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
  if (v4)
  {
    v6 = v4;
    if (objc_msgSend(v4, "length") != 48)
      return FigSignalErrorAt();
    objc_msgSend(v6, "getBytes:length:", v11, 48);
  }
  v7 = (const __CFDictionary *)objc_msgSend(a1, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448], *MEMORY[0x1E0C9D820], *(_QWORD *)(MEMORY[0x1E0C9D820] + 8));
  if (v7 && CGSizeMakeWithDictionaryRepresentation(v7, &v10))
  {
    v8 = 0.0;
    if (v10.width > 0.0)
      v8 = *(float *)v11 / v10.width;
    if (a2)
      *a2 = v8;
  }
  return 0;
}

uint64_t FigDepthBlurEffectRenderingParametersV1FromCFData(void *a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a1
    && a2
    && (unint64_t)objc_msgSend(a1, "length") > 0x2F
    && (v7 = 0u, v8 = 0u, v6 = 0u, objc_msgSend(a1, "getBytes:length:", &v6, 48), (_DWORD)v6 == 1145980242)
    && *(_QWORD *)((char *)&v6 + 4) == 0x3000000001)
  {
    result = 0;
    v5 = v7;
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v8;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

uint64_t FigDepthBlurEffectRenderingParametersV2FromCFData(void *a1, void *a2)
{
  _OWORD __src[20];

  if (a1
    && a2
    && (unint64_t)objc_msgSend(a1, "length") > 0x13F
    && (memset(__src, 0, sizeof(__src)),
        objc_msgSend(a1, "getBytes:length:", __src, 320),
        LODWORD(__src[0]) == 1145980242)
    && *(_QWORD *)((char *)__src + 4) == 0x14000000002)
  {
    memcpy(a2, __src, 0x140uLL);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t FigDepthBlurEffectRenderingParametersV3FromCFData(void *a1, void *a2)
{
  _OWORD __src[30];

  if (a1
    && a2
    && (unint64_t)objc_msgSend(a1, "length") > 0x1D7
    && (memset(__src, 0, 472), objc_msgSend(a1, "getBytes:length:", __src, 472), LODWORD(__src[0]) == 1145980242)
    && *(_QWORD *)((char *)__src + 4) == 0x1D800000003)
  {
    memcpy(a2, __src, 0x1D8uLL);
    return 0;
  }
  else
  {
    FigDebugAssert3();
    return 4294954516;
  }
}

uint64_t FigDepthBlurEffectRenderingParametersV4FromCFData(void *a1, _QWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1 || !a2 || (unint64_t)objc_msgSend(a1, "length") <= 0xF || (objc_msgSend(a1, "length") & 7) != 0)
  {
    FigDebugAssert3();
    v4 = 0;
    goto LABEL_18;
  }
  v4 = malloc_type_malloc(objc_msgSend(a1, "length"), 0xA867F5B7uLL);
  if (!v4)
  {
    FigDebugAssert3();
    v9 = 4294954510;
    goto LABEL_19;
  }
  objc_msgSend(a1, "getBytes:length:", v4, objc_msgSend(a1, "length"));
  if (*v4 != 1145980242)
  {
LABEL_17:
    FigDebugAssert3();
LABEL_18:
    v9 = 4294954516;
LABEL_19:
    free(v4);
    return v9;
  }
  if ((v4[1] - 8) <= 0xFFFFFFFB)
  {
    FigDebugAssert3();
    goto LABEL_17;
  }
  v5 = v4[2];
  if (objc_msgSend(a1, "length") != v5)
    goto LABEL_17;
  v6 = v4[2] - 16;
  if (v6 >= 8)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = 4;
    while (SLOWORD(v4[v8]) > 0)
    {
      v8 += 2;
      if (!--v7)
        goto LABEL_15;
    }
    goto LABEL_17;
  }
LABEL_15:
  v9 = 0;
  *a2 = v4;
  return v9;
}

uint64_t FigDepthBlurEffectRenderingVersion4_GetParameter(_DWORD *a1, unsigned __int16 a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  signed int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  if (!a1)
    goto LABEL_26;
  if (*a1 != 1145980242)
    goto LABEL_26;
  if ((a1[1] - 8) <= 0xFFFFFFFB)
    goto LABEL_26;
  v4 = a1[2];
  if (v4 <= 0x10)
    goto LABEL_26;
  v5 = (unint64_t)(v4 + 0x7FFFFFFF0) >> 3;
  v6 = v5 >> 1;
  v7 = LOWORD(a1[2 * (v5 >> 1) + 4]);
  if (v7 != a2 && v5 >= 2)
  {
    v9 = 0;
    v10 = v5 - 1;
    do
    {
      if ((__int16)v7 <= (__int16)a2)
      {
        if ((__int16)v7 < (__int16)a2)
        {
          v9 = v6 + 1;
          v11 = v10 + v6 + 1;
          if (v11 + 1 >= 0)
            v12 = v11 + 1;
          else
            v12 = v11 + 2;
          v6 = v12 >> 1;
          if (SLOWORD(a1[2 * v6 + 4]) <= (__int16)v7)
            goto LABEL_26;
          v7 = LOWORD(a1[2 * v6 + 4]);
        }
      }
      else
      {
        if (SLOWORD(a1[2 * ((v6 + v9) / 2) + 4]) >= (__int16)v7)
          goto LABEL_26;
        v10 = v6 - 1;
        v7 = LOWORD(a1[2 * ((v6 + v9) / 2) + 4]);
        v6 = (v6 + v9) / 2;
      }
    }
    while (v7 != a2 && v9 < v10);
  }
  if (v7 != a2)
  {
    FigDebugAssert3();
    return 4294954512;
  }
  if (HIWORD(a1[2 * v6 + 4]) == (unsigned __int16)a3)
  {
    switch(a3)
    {
      case 1:
        v13 = 0;
        *a4 = a1[2 * v6 + 5];
        break;
      case 2:
      case 3:
        v13 = 0;
        *a4 = a1[2 * v6 + 5];
        break;
      case 4:
        v13 = 0;
        *(_BYTE *)a4 = a1[2 * v6 + 5];
        break;
      default:
        goto LABEL_26;
    }
  }
  else
  {
LABEL_26:
    FigDebugAssert3();
    return 4294954516;
  }
  return v13;
}

uint64_t FigDepthBlurEffectRenderingMinimumSimulatedAperture(void *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  uint64_t v8;
  uint64_t Parameter;

  if (!a1)
    goto LABEL_14;
  if (!a2)
    goto LABEL_14;
  *a2 = 0.0;
  if ((unint64_t)objc_msgSend(a1, "length") <= 0xB)
    goto LABEL_14;
  v4 = objc_msgSend(a1, "bytes");
  if (!v4)
    goto LABEL_14;
  v5 = v4;
  if (objc_msgSend(a1, "length") != *(_DWORD *)(v4 + 8) || *(_DWORD *)v5 != 1145980242)
    goto LABEL_14;
  v6 = *(_DWORD *)(v5 + 4);
  if (v6 >= 4)
    v6 = 4;
  if (v6 < 0x10000)
  {
    switch(v6)
    {
      case 2:
      case 3:
        v7 = *(float *)(v5 + 100);
        *a2 = v7;
        if (v7 <= 0.0)
          goto LABEL_14;
        v8 = 0;
        break;
      case 4:
        Parameter = FigDepthBlurEffectRenderingVersion4_GetParameter((_DWORD *)v5, 0x259u, 1, a2);
        if (!(_DWORD)Parameter)
          goto LABEL_14;
        v8 = Parameter;
        FigDebugAssert3();
        break;
      default:
        goto LABEL_14;
    }
  }
  else
  {
LABEL_14:
    FigDebugAssert3();
    return 4294954516;
  }
  return v8;
}

uint64_t FigDepthBlurEffectRenderingMaximumSimulatedAperture(void *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float v7;
  uint64_t v8;
  uint64_t Parameter;

  if (a1
    && a2
    && (*a2 = 0.0, (unint64_t)objc_msgSend(a1, "length") > 0xB)
    && (v4 = objc_msgSend(a1, "bytes")) != 0
    && (v5 = v4, objc_msgSend(a1, "length") == *(_DWORD *)(v4 + 8))
    && *(_DWORD *)v5 == 1145980242)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if (v6 >= 4)
      v6 = 4;
    if (v6 >= 0x10000)
      v6 = 1;
    switch(v6)
    {
      case 2:
      case 3:
        v7 = *(float *)(v5 + 268);
        *a2 = v7;
        if (v7 <= 0.0)
          goto LABEL_15;
        v8 = 0;
        break;
      case 4:
        Parameter = FigDepthBlurEffectRenderingVersion4_GetParameter((_DWORD *)v5, 0x25Au, 1, a2);
        if (!(_DWORD)Parameter)
          goto LABEL_15;
        v8 = Parameter;
        FigDebugAssert3();
        break;
      default:
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    FigDebugAssert3();
    return 4294954516;
  }
  return v8;
}

void sub_1A304DED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *FigCaptureSourceUnderlyingDeviceTypes(int a1)
{
  void *result;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  result = &unk_1E4A015C8;
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 7:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      v3[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
      result = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v3, 1);
      break;
    case 4:
      result = &unk_1E4A015E0;
      break;
    case 6:
      result = &unk_1E4A01610;
      break;
    case 9:
      result = &unk_1E4A015F8;
      break;
    case 12:
      result = &unk_1E4A01628;
      break;
    case 13:
      result = &unk_1E4A01640;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigCaptureSourceDeviceTypeIsSubsetOfDeviceType(int a1, int a2, int a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v8 = FigCaptureSourceUnderlyingDeviceTypes(a1);
  v9 = FigCaptureSourceUnderlyingDeviceTypes(a2);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v24;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v24 != v12)
          objc_enumerationMutation(v8);
        objc_msgSend(v6, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(a3, objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * v13++), "intValue")));
      }
      while (v11 != v13);
      v11 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
    }
    while (v11);
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v14 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v20;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v20 != v16)
          objc_enumerationMutation(v9);
        objc_msgSend(v7, "addObject:", BWCaptureDevicePositionAndDeviceTypeToPortType(a3, objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * v17++), "intValue")));
      }
      while (v15 != v17);
      v15 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v19, v27, 16);
    }
    while (v15);
  }
  return objc_msgSend(v6, "isSubsetOfSet:", v7);
}

uint64_t FigCaptureSourceGetMediaTypeForUniqueID(void *a1)
{
  uint64_t v2;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_audio:0")) & 1) != 0)
    return 1936684398;
  v2 = 1986618469;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:0")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:1")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:2")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:3")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:4")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:5")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:6")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:7")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:8")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:9")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_video:99")) & 1) == 0
    && (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_pointcloud:1")) & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:1")) & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:2")) & 1) == 0&& (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.private.built-in_metadata:3")) & 1) == 0)
  {
    if (objc_msgSend(a1, "isEqualToString:", CFSTR("com.apple.avfoundation.avcapturedevice.built-in_deskview:1")))return 1986618469;
    else
      return 0;
  }
  return v2;
}

CFStringRef FigCaptureSourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureSource %p]"), a1);
}

uint64_t __scheduler_job_invoke_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

uint64_t __scheduler_job_invoke_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

void FigCaptureSessionServerInvokeContinuityCameraMultitaskingDialogIfNeeded()
{
  NSObject *global_queue;

  if (FigCaptureIsWombatEnabled(0) && BWDeviceIsiPad())
  {
    if (captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce != -1)
      dispatch_once(&captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce, &__block_literal_global_24_0);
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, &__block_literal_global_87);
  }
}

void captureSessionServer_continuityCameraMultitaskingDisallowed()
{
  time_t v0;
  int v1;
  BOOL v2;
  BOOL v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  __CFUserNotification *v10;
  __CFUserNotification *v11;
  time_t v12;
  CFOptionFlags responseFlags;
  SInt32 error;
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v0 = time(0);
  os_unfair_lock_lock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  if ((captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert & 1) != 0
    || ((v1 = sContinuityCameraMultitaskingDialogShownCount, sContinuityCameraPreviousMultitaskingDialogEndedTime)
      ? (v2 = sContinuityCameraMultitaskingDialogShownCount < 1)
      : (v2 = 1),
        !v2 ? (v3 = v0 - sContinuityCameraPreviousMultitaskingDialogEndedTime <= 86399) : (v3 = 0),
        v3))
  {
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  }
  else
  {
    captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert = 1;
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.CMCapture"));
    v5 = objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("CONTINUITY_CAMERA_IN_USE_HEADER"), &stru_1E4928818, CFSTR("Localizable"));
    v6 = objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("CONTINUITY_CAMERA_IN_USE_MESSAGE"), &stru_1E4928818, CFSTR("Localizable"));
    v7 = objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("CONTINUITY_CAMERA_IN_USE_OK"), &stru_1E4928818, CFSTR("Localizable"));
    v8 = *MEMORY[0x1E0C9B810];
    v15[0] = *MEMORY[0x1E0C9B800];
    v15[1] = v8;
    v16[0] = v5;
    v16[1] = v6;
    v15[2] = *MEMORY[0x1E0C9B838];
    v16[2] = v7;
    v9 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
    error = 0;
    v10 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0.0, 0, &error, v9);
    if (v10)
    {
      v11 = v10;
      responseFlags = 0;
      CFUserNotificationReceiveResponse(v10, 0.0, &responseFlags);
      CFRelease(v11);
    }
    v12 = time(0);
    CFPreferencesSetAppValue(CFSTR("continuity_camera_in_use.previous_time"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v12), CFSTR("com.apple.cameracapture"));
    CFPreferencesSetAppValue(CFSTR("continuity_camera_in_use.count"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1 + (v1 >= 0)), CFSTR("com.apple.cameracapture"));
    os_unfair_lock_lock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
    sContinuityCameraPreviousMultitaskingDialogEndedTime = v12;
    sContinuityCameraMultitaskingDialogShownCount = v1 + (v1 >= 0);
    captureSessionServer_continuityCameraMultitaskingDisallowed_inAlert = 0;
    os_unfair_lock_unlock(&captureSessionServer_continuityCameraMultitaskingDisallowed_lock);
  }
}

uint64_t FigCaptureSessionServerStart()
{
  void *v0;
  const char *v1;
  NSObject *global_queue;
  uint64_t v4;
  _OWORD v5[3];

  v5[0] = xmmword_1E49254B8;
  v5[1] = *(_OWORD *)&off_1E49254C8;
  v5[2] = xmmword_1E49254D8;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  sPrewarmingResourcesLock = 0;
  sPrewarmingSessionsByBundleID = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  sPrewarmingSessionCountByBundleID = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtURL:error:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", NSTemporaryDirectory(), 1), "URLByAppendingPathComponent:isDirectory:", 0x1E493F418, 1), 0);
  +[FigCaptureLockScreenPrewarmingMonitor start](FigCaptureLockScreenPrewarmingMonitor, "start");
  +[FigCaptureClientApplicationStateMonitor startPrewarmingMonitorWithHandler:](FigCaptureClientApplicationStateMonitor, "startPrewarmingMonitorWithHandler:", &__block_literal_global_11);
  sWombatEnabledPIDArray = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sWombatInUsePIDArray = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sWombatStateLock = FigSimpleMutexCreate();
  if (FigCaptureAudiomxdSupportEnabled())
  {
    v4 = 0;
    v0 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedInstance");
    objc_msgSend(v0, "setAttribute:forKey:error:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0D482F0], &v4);
  }
  else
  {
    sMXSystemController = objc_msgSend(objc_alloc(MEMORY[0x1E0D48568]), "initWithPID:", getpid());
    objc_msgSend((id)sMXSystemController, "setAttributeForKey:andValue:", *MEMORY[0x1E0D4A070], MEMORY[0x1E0C9AAA0]);
  }
  CFPreferencesSetValue(CFSTR("ContinuityCaptureInUse"), (CFPropertyListRef)*MEMORY[0x1E0C9AE40], CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  +[FigCaptureClientApplicationStateMonitor startContinuityCaptureTerminationMonitorWithHandler:](FigCaptureClientApplicationStateMonitor, "startContinuityCaptureTerminationMonitorWithHandler:", &__block_literal_global_16);
  +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
  +[FigCaptureDisplayLayoutMonitor sharedDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedDisplayLayoutMonitor");
  if (MGGetBoolAnswer())
    +[FigCaptureDisplayLayoutMonitor sharedExternalDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedExternalDisplayLayoutMonitor");
  +[FigCaptureDisplayLayoutMonitor sharedContinuityDisplayLayoutMonitor](FigCaptureDisplayLayoutMonitor, "sharedContinuityDisplayLayoutMonitor");
  +[FigCaptureDeviceLockStateMonitor sharedDeviceLockStateMonitor](FigCaptureDeviceLockStateMonitor, "sharedDeviceLockStateMonitor");
  BWGetDisplaySupportsPerseus();
  v1 = (const char *)*MEMORY[0x1E0D08B48];
  global_queue = dispatch_get_global_queue(0, 0);
  notify_register_dispatch(v1, (int *)&sGPUErrorNotificationToken, global_queue, &__block_literal_global_22_0);
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capturesession", (uint64_t)v5, 0);
}

uint64_t captureSessionServer_setWombatEnabledState(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v5;
  BOOL v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)sWombatStateLock);
  if (dword_1ECFE9830)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = objc_msgSend((id)sWombatEnabledPIDArray, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2, v11, v12));
  if (!(_DWORD)a1)
  {
    if (!v5)
      return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
    objc_msgSend((id)sWombatEnabledPIDArray, "removeObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
    if (objc_msgSend((id)sWombatEnabledPIDArray, "count"))
      return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
    goto LABEL_13;
  }
  if ((v5 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = objc_msgSend((id)sWombatEnabledPIDArray, "count") == 0;
    objc_msgSend((id)sWombatEnabledPIDArray, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
  }
  if (captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce != -1)
    dispatch_once(&captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_notifyRegisterOnce, &__block_literal_global_24_0);
  if (v6)
  {
LABEL_13:
    if (dword_1ECFE9830)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (FigCaptureAudiomxdSupportEnabled())
    {
      v13[0] = 0;
      v8 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedInstance");
      v9 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
      objc_msgSend(v8, "setAttribute:forKey:error:", v9, *MEMORY[0x1E0D482F0], v13);
    }
    else
    {
      objc_msgSend((id)sMXSystemController, "setAttributeForKey:andValue:", *MEMORY[0x1E0D4A070], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1));
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
}

uint64_t captureSessionServer_setWombatInUseState(int a1, uint64_t a2)
{
  int v4;

  pthread_mutex_lock((pthread_mutex_t *)sWombatStateLock);
  v4 = objc_msgSend((id)sWombatInUsePIDArray, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
  if (a1)
  {
    if ((v4 & 1) == 0)
    {
      if (!objc_msgSend((id)sWombatInUsePIDArray, "count"))
        CFPreferencesSetValue(CFSTR("ContinuityCaptureInUse"), (CFPropertyListRef)*MEMORY[0x1E0C9AE50], CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
      objc_msgSend((id)sWombatInUsePIDArray, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
    }
  }
  else if (v4)
  {
    objc_msgSend((id)sWombatInUsePIDArray, "removeObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
    if (!objc_msgSend((id)sWombatInUsePIDArray, "count"))
      CFPreferencesSetValue(CFSTR("ContinuityCaptureInUse"), (CFPropertyListRef)*MEMORY[0x1E0C9AE40], CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sWombatStateLock);
}

uint64_t __captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_block_invoke()
{
  uint64_t result;
  NSObject *global_queue;
  uint64_t state64;

  result = BWDeviceIsiPad();
  if ((_DWORD)result)
  {
    sContinuityCameraPreviousMultitaskingDialogEndedTime = CFPreferencesGetAppIntegerValue(CFSTR("continuity_camera_in_use.previous_time"), CFSTR("com.apple.cameracapture"), 0);
    sContinuityCameraMultitaskingDialogShownCount = CFPreferencesGetAppIntegerValue(CFSTR("continuity_camera_in_use.count"), CFSTR("com.apple.cameracapture"), 0);
    global_queue = dispatch_get_global_queue(0, 0);
    result = notify_register_dispatch("com.apple.MediaExperience.DisallowedActivationDueToContinuityCapture", &gFigXPCServerCaptureSession_block_invoke_registeredToken, global_queue, &__block_literal_global_26);
    if (!(_DWORD)result)
    {
      state64 = 0;
      return notify_get_state(gFigXPCServerCaptureSession_block_invoke_registeredToken, &state64);
    }
  }
  return result;
}

void __captureSessionServer_registerForContinuityCameraMultitaskingDisallowed_block_invoke_2(int a1, int token)
{
  uint64_t state64;

  state64 = 0;
  if (gFigXPCServerCaptureSession_block_invoke_registeredToken == token && !notify_get_state(token, &state64))
    captureSessionServer_continuityCameraMultitaskingDisallowed();
}

void captureSessionServer_releaseServerStorage(void *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  char v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[23];

  v18[22] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    v3 = (const void *)*((_QWORD *)a1 + 1);
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)a1 + 2);
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)a1 + 3);
    if (v5)
      CFRelease(v5);

    v6 = *((_QWORD *)a1 + 5);
    if (v6)
    {
      v18[0] = 0;
      if (!FigCaptureSessionSupportsLaunchPrewarmingBundleID(v6, v18) || !v18[0])
        goto LABEL_24;
      v7 = FigCaptureSessionDetachFromClient(*((const void **)a1 + 5));
      os_unfair_lock_lock((os_unfair_lock_t)&sPrewarmingResourcesLock);
      v8 = objc_msgSend((id)objc_msgSend((id)sPrewarmingSessionCountByBundleID, "objectForKeyedSubscript:", v18[0]), "intValue");
      if (v7)
        v9 = 0;
      else
        v9 = v8 == 1;
      v10 = v9;
      if (v9)
      {
        objc_msgSend((id)sPrewarmingSessionsByBundleID, "setObject:forKeyedSubscript:", *((_QWORD *)a1 + 5), v18[0]);
        if (dword_1ECFE9830)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend((id)objc_msgSend((id)sPrewarmingSessionCountByBundleID, "objectForKeyedSubscript:", v18[0], v16, v17), "intValue")- 1);
      objc_msgSend((id)sPrewarmingSessionCountByBundleID, "setObject:forKeyedSubscript:", v12, v18[0]);
      os_unfair_lock_unlock((os_unfair_lock_t)&sPrewarmingResourcesLock);
      if ((v10 & 1) == 0)
      {
LABEL_24:
        if (dword_1ECFE9830)
        {
          v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v14 = *((_QWORD *)a1 + 5);
        if (v14)
        {
          v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v15)
            v15(v14);
        }
      }
      CFRelease(*((CFTypeRef *)a1 + 5));
    }
    free(a1);
  }
}

uint64_t captureSessionServer_handleSessionStopRunningMessage(int a1, void *a2)
{
  uint64_t v2;
  const void *v3;
  void (*v4)(const void *);
  const void *v6;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v6, 0, 0);
  v3 = v6;
  if (v6)
  {
    v4 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v4)
    {
      v4(v3);
    }
    else
    {
      v7 = CFSTR("ErrorStatus");
      v8[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v3);
  }
  return v2;
}

uint64_t captureSessionServer_handleSessionFileSinkStartRecordingMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionFileSinkStartRecording);
}

uint64_t captureSessionServer_handleSessionFileSinkPauseRecordingMessage(int a1, void *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;
  void (*v5)(CFTypeRef, CFTypeRef);
  CFTypeRef v7;
  CFTypeRef cf;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  cf = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v7, &cf, 0);
  v3 = v7;
  if (v7)
  {
    v4 = cf;
    v5 = *(void (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v5)
    {
      v5(v3, v4);
    }
    else
    {
      v9 = CFSTR("ErrorStatus");
      v10[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  return v2;
}

uint64_t captureSessionServer_handleSessionFileSinkResumeRecordingMessage(int a1, void *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;
  void (*v5)(CFTypeRef, CFTypeRef);
  CFTypeRef v7;
  CFTypeRef cf;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  cf = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v7, &cf, 0);
  v3 = v7;
  if (v7)
  {
    v4 = cf;
    v5 = *(void (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v5)
    {
      v5(v3, v4);
    }
    else
    {
      v9 = CFSTR("ErrorStatus");
      v10[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  return v2;
}

uint64_t captureSessionServer_handleSessionFileSinkStopRecordingMessage(int a1, void *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;
  void (*v5)(CFTypeRef, CFTypeRef);
  CFTypeRef v7;
  CFTypeRef cf;
  const __CFString *v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v7 = 0;
  cf = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v7, &cf, 0);
  v3 = v7;
  if (v7)
  {
    v4 = cf;
    v5 = *(void (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v5)
    {
      v5(v3, v4);
    }
    else
    {
      v9 = CFSTR("ErrorStatus");
      v10[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  return v2;
}

uint64_t captureSessionServer_handleSessionStillImageSinkCaptureImageMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionStillImageSinkCaptureImage);
}

uint64_t captureSessionServer_handleSessionStillImageSinkPrepareToCaptureBracketMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionStillImageSinkPrepareToCaptureBracket);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCaptureImageMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCaptureImage);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkPrepareToCaptureMessage(int a1, void *a2)
{
  uint64_t v3;
  const void *v4;
  FigCaptureIrisPreparedSettings *v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef cf;
  const void *v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v10 = 0;
  v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v10, &cf, 0);
  v4 = v10;
  if (v10)
  {
    v5 = -[FigCaptureIrisPreparedSettings initWithXPCEncoding:]([FigCaptureIrisPreparedSettings alloc], "initWithXPCEncoding:", xpc_dictionary_get_value(a2, (const char *)*MEMORY[0x1E0CA36B0]));
    v6 = cf;
    v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (*(_QWORD *)(v7 + 96))
    {
      (*(void (**)(const void *, CFTypeRef, FigCaptureIrisPreparedSettings *))(v7 + 104))(v4, v6, v5);
    }
    else
    {
      v11 = CFSTR("ErrorStatus");
      v12[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
  else
  {
    v5 = 0;
  }

  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
  return v3;
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkBeginMomentCaptureMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkBeginMomentCapture);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCommitMomentCaptureToStillImageCaptureMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToStillImageCapture);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCommitMomentCaptureToMovieRecordingMessage(int a1, void *a2)
{
  uint64_t v4;

  v4 = objc_opt_class();
  return captureSessionServer_handleCommonSectionPayloadMessage(a1, a2, v4, (void (*)(const void *, CFTypeRef, id))FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToMovieRecording);
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkCancelMomentCaptureMessage(int a1, void *a2)
{
  uint64_t v3;
  const void *v4;
  int64_t int64;
  CFTypeRef v6;
  void (*v7)(const void *, CFTypeRef, int64_t);
  CFTypeRef cf;
  const void *v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v10 = 0;
  v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v10, &cf, 0);
  v4 = v10;
  if (v10)
  {
    int64 = xpc_dictionary_get_int64(a2, (const char *)*MEMORY[0x1E0CA36B0]);
    v6 = cf;
    v7 = *(void (**)(const void *, CFTypeRef, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
    if (v7)
    {
      v7(v4, v6, int64);
    }
    else
    {
      v11 = CFSTR("ErrorStatus");
      v12[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v4);
  }
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t captureSessionServer_handleSessionIrisStillImageSinkEndMomentCaptureMessage(int a1, void *a2)
{
  uint64_t v3;
  const void *v4;
  int64_t int64;
  CFTypeRef v6;
  void (*v7)(const void *, CFTypeRef, int64_t);
  CFTypeRef cf;
  const void *v10;
  const __CFString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v10 = 0;
  v3 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v10, &cf, 0);
  v4 = v10;
  if (v10)
  {
    int64 = xpc_dictionary_get_int64(a2, (const char *)*MEMORY[0x1E0CA36B0]);
    v6 = cf;
    v7 = *(void (**)(const void *, CFTypeRef, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
    if (v7)
    {
      v7(v4, v6, int64);
    }
    else
    {
      v11 = CFSTR("ErrorStatus");
      v12[0] = &unk_1E49FB1C0;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, &v11, 1);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v4);
  }
  if (cf)
    CFRelease(cf);
  return v3;
}

void captureSessionServer_handleCancelPrewarm()
{
  FigXPCMessageCopyCFString();
  FigCaptureSessionCancelPrewarm(0);
}

uint64_t captureSessionServer_handleSessionVisionDataSinkTriggerBurstMessage(int a1, void *a2)
{
  uint64_t v2;
  CFTypeRef v3;
  CFTypeRef v4;
  void (*v5)(CFTypeRef, CFTypeRef);
  CFTypeRef cf;
  CFTypeRef v8;

  cf = 0;
  v8 = 0;
  v2 = captureSessionServer_messageUnpackCopy(a1, a2, 0, (uint64_t)&v8, &cf, 0);
  v3 = v8;
  if (v8)
  {
    v4 = cf;
    v5 = *(void (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
    if (v5)
      v5(v3, v4);
  }
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  return v2;
}

uint64_t captureSessionServer_handleCommonSectionPayloadMessage(int a1, void *a2, uint64_t a3, void (*a4)(const void *, CFTypeRef, id))
{
  uint64_t v5;
  const void *v6;
  const void *v8;
  CFTypeRef cf;
  id v10;

  cf = 0;
  v10 = 0;
  v8 = 0;
  v5 = captureSessionServer_messageUnpackCopy(a1, a2, a3, (uint64_t)&v8, &cf, &v10);
  v6 = v8;
  if (v8)
    a4(v8, cf, v10);

  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t FigCaptureSessionFileSinkStartRecording(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionStillImageSinkPrepareToCaptureBracket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionIrisStillImageSinkCaptureImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionIrisStillImageSinkBeginMomentCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToStillImageCapture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigCaptureSessionIrisStillImageSinkCommitMomentCaptureToMovieRecording(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  const __CFString *v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v6)
    return v6(a1, a2, a3);
  v8 = CFSTR("ErrorStatus");
  v9[0] = &unk_1E49FB1C0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t hdrn_createSampleBufferProcessor()
{
  uint64_t v0;

  FigCaptureWaitForPreloadShadersCompletion();
  v0 = FigSampleBufferProcessorCreateForCustom();
  if ((_DWORD)v0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v0;
}

void sub_1A3057B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

Class __getBrightnessSystemClientClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!CoreBrightnessLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4925598;
    v5 = 0;
    CoreBrightnessLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreBrightnessLibraryCore_frameworkLibrary)
    __getBrightnessSystemClientClass_block_invoke_cold_1(&v3);
  result = objc_getClass("BrightnessSystemClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getBrightnessSystemClientClass_block_invoke_cold_2();
  getBrightnessSystemClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_1A3059DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTExecutableIdentityClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__32;
  v7 = __Block_byref_object_dispose__32;
  v0 = getSTExecutableIdentityClass_softClass;
  v8 = getSTExecutableIdentityClass_softClass;
  if (!getSTExecutableIdentityClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTExecutableIdentityClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSTExecutableIdentityClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A305A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSTAttributedEntityClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__32;
  v7 = __Block_byref_object_dispose__32;
  v0 = getSTAttributedEntityClass_softClass;
  v8 = getSTAttributedEntityClass_softClass;
  if (!getSTAttributedEntityClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getSTAttributedEntityClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getSTAttributedEntityClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A305A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTActivityAttributionClass_block_invoke(uint64_t a1)
{
  Class result;

  SystemStatusLibrary();
  result = objc_getClass("STActivityAttribution");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSTActivityAttributionClass_block_invoke_cold_1();
  getSTActivityAttributionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void SystemStatusLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!SystemStatusLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4925670;
    v2 = 0;
    SystemStatusLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SystemStatusLibraryCore_frameworkLibrary)
    SystemStatusLibrary_cold_1(&v0);
}

Class __getSTMediaStatusDomainPublisherClass_block_invoke(uint64_t a1)
{
  Class result;

  SystemStatusLibrary();
  result = objc_getClass("STMediaStatusDomainPublisher");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1();
  getSTMediaStatusDomainPublisherClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTDynamicActivityAttributionPublisherClass_block_invoke(uint64_t a1)
{
  Class result;

  SystemStatusLibrary();
  result = objc_getClass("STDynamicActivityAttributionPublisher");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSTDynamicActivityAttributionPublisherClass_block_invoke_cold_1();
  getSTDynamicActivityAttributionPublisherClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTExecutableIdentityClass_block_invoke(uint64_t a1)
{
  Class result;

  SystemStatusLibrary();
  result = objc_getClass("STExecutableIdentity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSTExecutableIdentityClass_block_invoke_cold_1();
  getSTExecutableIdentityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getSTAttributedEntityClass_block_invoke(uint64_t a1)
{
  Class result;

  SystemStatusLibrary();
  result = objc_getClass("STAttributedEntity");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getSTAttributedEntityClass_block_invoke_cold_1();
  getSTAttributedEntityClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void asn_activeCMSessionAudioRouteDidChangeHandler(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  void *v7;
  const void *Value;
  void *v9;

  v7 = (void *)MEMORY[0x1A858DD40]();
  if (a5)
  {
    Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D485B8]);
    if (Value)
    {
      if (CFEqual(Value, CFSTR("ReceiverAndMicrophone")))
      {
        -[BWAudioSourceNode _setCMSessionPropertyWithKey:value:]((uint64_t)a2);
      }
      else
      {
        v9 = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D485B0]);
        if (v9)
          -[BWAudioSourceNode _selectMicForAudioRoute:](a2, v9);
      }
    }
  }
  objc_autoreleasePoolPop(v7);
}

void sub_1A305DD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A305E118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double FODMGTimeInMilliseconds(unint64_t a1, double a2, double a3, double a4)
{
  if (FODMGTimeInMilliseconds_once != -1)
    dispatch_once(&FODMGTimeInMilliseconds_once, &__block_literal_global_91);
  LODWORD(a3) = FODMGTimeInMilliseconds_info;
  LODWORD(a4) = *(_DWORD *)algn_1EE6BFC24;
  return (double)a1 * (double)*(unint64_t *)&a3 / (double)*(unint64_t *)&a4 / 1000000.0;
}

void sub_1A30605BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t deviceMotionCallback(uint64_t result, void *a2)
{
  double v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v6[5];
  uint64_t v7;

  if (result)
  {
    v2 = *(double *)(result + 88);
    v3 = *(unsigned __int8 *)(result + 96);
    v4 = *(_OWORD *)(result + 48);
    v6[2] = *(_OWORD *)(result + 32);
    v6[3] = v4;
    v6[4] = *(_OWORD *)(result + 64);
    v7 = *(_QWORD *)(result + 80);
    v5 = *(_OWORD *)(result + 16);
    v6[0] = *(_OWORD *)result;
    v6[1] = v5;
    return objc_msgSend(a2, "didUpdateFusedMotionWithDeviceMotion:time:ifsync:", v6, v3, v2);
  }
  return result;
}

long double rollFromQuaternion(double *a1)
{
  double v1;

  v1 = a1[2];
  return -atan2(a1[1] * (a1[3] + a1[3]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

long double yawFromQuaternion(double *a1)
{
  double v1;

  v1 = a1[3];
  return -atan2(a1[1] * (a1[2] + a1[2]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

uint64_t FigCoreMotionAllocWithPriority(int a1, int a2, int a3, uint64_t a4, float a5, float a6)
{
  FigCoreMotionDelegate *v12;
  uint64_t v13;
  double v14;
  double v15;

  v12 = [FigCoreMotionDelegate alloc];
  v13 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a4);
  *(float *)&v14 = a5;
  *(float *)&v15 = a6;
  return (uint64_t)-[FigCoreMotionDelegate initWithAccelerometer:gravityZ:fusedMotion:accelUpdateInterval:fusedMotionUpdateInterval:motionCallbackThreadPriority:](v12, "initWithAccelerometer:gravityZ:fusedMotion:accelUpdateInterval:fusedMotionUpdateInterval:motionCallbackThreadPriority:", a1 != 0, a2 != 0, a3 != 0, v13, v14, v15);
}

uint64_t FigCoreMotionCopyMotionData(void *a1, _QWORD *a2)
{
  id v4;
  uint64_t v5;
  const void *v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  if (objc_msgSend(a1, "isCopyingAllData", 0, 0, 0, 0, 0, 0, 0, 0))
    v5 = objc_msgSend(a1, "copyAllFusedMotionData");
  else
    v5 = objc_msgSend(a1, "copyNewFusedMotionData");
  v6 = (const void *)v5;
  if (v5)
  {
    *(_QWORD *)&v9 = *MEMORY[0x1E0D085C0];
    *(_QWORD *)&v8 = v5;
    *a2 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v8, &v9, 1);
    CFRelease(v6);
  }
  else
  {
    *a2 = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v8, &v9, 0);
  }
  return objc_msgSend(v4, "drain");
}

uint64_t FigCoreMotionGetGravity(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "getGravityX:y:z:forTimeStamp:", a2, a3, a4);
}

uint64_t FigCoreMotionGetAverageQuaternion(void *a1, uint64_t a2, int a3)
{
  uint64_t v6;

  v6 = objc_msgSend(a1, "updateCurrentQuaternionForTimeStamps:withEnd:");
  if (a3)
    objc_msgSend(a1, "getCurrentDeltaQuaternion:", a2);
  else
    objc_msgSend(a1, "getCurrentQuaternion:", a2);
  return v6;
}

uint64_t FigCoreMotionGetQuaternionAndAttitude(void *a1, double *a2, int a3, long double *a4, int a5)
{
  uint64_t v10;

  v10 = objc_msgSend(a1, "updateCurrentQuaternionForTimeStamp:");
  if (!a3)
  {
    objc_msgSend(a1, "getCurrentQuaternion:", a2);
    if (a5)
    {
      objc_msgSend(a1, "getCurrentDeltaAttitudeRoll:pitch:yaw:", a4, a4 + 1, a4 + 2);
      return v10;
    }
LABEL_6:
    objc_msgSend(a1, "getCurrentAttitudeRoll:pitch:yaw:", a4, a4 + 1, a4 + 2);
    return v10;
  }
  objc_msgSend(a1, "getCurrentDeltaQuaternion:", a2);
  if (!a5)
    goto LABEL_6;
  *a4 = rollFromQuaternion(a2);
  a4[1] = asin(*a2 * (a2[1] + a2[1]) + a2[2] * (a2[3] + a2[3]));
  a4[2] = yawFromQuaternion(a2);
  return v10;
}

uint64_t FigCaptureBuildMotionAttachmentsNode(void *a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, unsigned __int8 a11, char a12, char a13, char a14, _DWORD *a15)
{
  NSDictionary *v20;
  int v21;
  BWMotionAttachmentsNode *v22;
  double v23;
  BWMotionAttachmentsNode *v24;
  BWMotionAttachmentsNode *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v37;
  uint64_t v38;

  v38 = 0;
  v37 = 0;
  v20 = -[FigCaptureCameraParameters motionAttachmentsParameters](+[FigCaptureCameraParameters sharedInstance](FigCaptureCameraParameters, "sharedInstance"), "motionAttachmentsParameters");
  if (a12)
    v21 = 2;
  else
    v21 = a11;
  v22 = [BWMotionAttachmentsNode alloc];
  BYTE5(v32) = a14;
  BYTE4(v32) = a13;
  LODWORD(v32) = objc_msgSend(a5, "priority");
  *(float *)&v23 = a9;
  v24 = -[BWMotionAttachmentsNode initWithSensorIDDictionaryByPortType:cameraInfoByPortType:tuningParameters:activePortTypes:horizontalSensorBinningFactor:verticalSensorBinningFactor:maxSupportedFrameRate:motionAttachmentsMode:motionAttachmentsSource:motionCallbackThreadPriority:provideSourceVideoWithMotionAttachmentsOutput:provideOfflineVISMotionDataOutput:errorOut:](v22, "initWithSensorIDDictionaryByPortType:cameraInfoByPortType:tuningParameters:activePortTypes:horizontalSensorBinningFactor:verticalSensorBinningFactor:maxSupportedFrameRate:motionAttachmentsMode:motionAttachmentsSource:motionCallbackThreadPriority:provideSourceVideoWithMotionAttachmentsOutput:provideOfflineVISMotionDataOutput:errorOut:", a7, a8, v20, a10, a3, a4, v23, __PAIR64__(a6, v21), v32, &v37);
  if (v37)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v29 = 0;
  }
  else
  {
    v25 = v24;
    if ((objc_msgSend(a1, "addNode:error:", v24, &v38) & 1) != 0)
    {
      v26 = objc_msgSend(a1, "graph");
      v27 = -[BWNode input](v25, "input");
      v28 = (void *)v26;
      v29 = a2;
      if ((objc_msgSend(v28, "connectOutput:toInput:pipelineStage:", a2, v27, a5) & 1) != 0)
      {
        if (a13)
          v30 = -[BWMotionAttachmentsNode sourceVideoWithMotionAttachmentsOutput](v25, "sourceVideoWithMotionAttachmentsOutput");
        else
          v30 = -[BWMotionAttachmentsNode offlineVISMotionDataOutput](v25, "offlineVISMotionDataOutput");
        v29 = v30;
      }
      else
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v29 = a2;
    }
  }
  *a15 = v37;
  return v29;
}

void *FigCaptureSFHRMode(void *result)
{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, const __CFString *, _QWORD, _QWORD);
  unsigned int v4;
  void (*v5)(uint64_t, const __CFString *, _QWORD, _QWORD);

  if (result)
  {
    v1 = result;
    if (objc_msgSend(result, "sourceDeviceType") == 10)
    {
      return 0;
    }
    else
    {
      v5 = 0;
      v2 = objc_msgSend(v1, "source");
      v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (v3)
      {
        v3(v2, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &v5);
        v3 = v5;
      }

      result = (void *)objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", 0x1E49329B8), "BOOLValue");
      if ((_DWORD)result)
      {
        v4 = objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", 0x1E4952918), "BOOLValue");
        if (objc_msgSend((id)objc_msgSend(v5, "objectForKeyedSubscript:", 0x1E4952938), "BOOLValue"))
          return (void *)(v4 | 2);
        else
          return (void *)v4;
      }
    }
  }
  return result;
}

uint64_t FigMetadataItemConnectionConfigurationRequiresObjectDetection(void *a1)
{
  CFArrayRef Identifiers;

  Identifiers = CMMetadataFormatDescriptionGetIdentifiers((CMMetadataFormatDescriptionRef)objc_msgSend(a1, "formatDescription"));
  if ((-[__CFArray containsObject:](Identifiers, "containsObject:", *MEMORY[0x1E0CA2558]) & 1) != 0
    || (-[__CFArray containsObject:](Identifiers, "containsObject:", *MEMORY[0x1E0CA2560]) & 1) != 0
    || (-[__CFArray containsObject:](Identifiers, "containsObject:", *MEMORY[0x1E0CA2548]) & 1) != 0
    || (-[__CFArray containsObject:](Identifiers, "containsObject:", *MEMORY[0x1E0CA2550]) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return -[__CFArray containsObject:](Identifiers, "containsObject:", *MEMORY[0x1E0CA2568]);
  }
}

void *FigCaptureConnectionConfigurationWithSourceType(void *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v11;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v11 != v6)
      objc_enumerationMutation(a1);
    v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "sourceConfiguration"), "sourceType") == a2)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

void *FigCaptureConnectionConfigurationWithSinkTypeAndMediaType(void *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(_QWORD *)v13;
LABEL_3:
  v9 = 0;
  while (1)
  {
    if (*(_QWORD *)v13 != v8)
      objc_enumerationMutation(a1);
    v10 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * v9);
    if (objc_msgSend((id)objc_msgSend(v10, "sinkConfiguration"), "sinkType") == a2
      && objc_msgSend(v10, "mediaType") == a3)
    {
      return v10;
    }
    if (v7 == ++v9)
    {
      v7 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v7)
        goto LABEL_3;
      return 0;
    }
  }
}

BWInferenceVideoRequirement *lnrpc_inferenceVideoRequirementForVideoFormat(uint64_t a1, void *a2)
{
  BWInferenceVideoRequirement *result;
  BWInferenceVideoFormatRequirements *v4;
  id v5;
  _QWORD v6[2];

  result = 0;
  v6[1] = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v4 = -[BWVideoFormatRequirements initWithPixelBufferAttributes:]([BWInferenceVideoFormatRequirements alloc], "initWithPixelBufferAttributes:", objc_msgSend(a2, "pixelBufferAttributes"));
    if (v4
      && (v6[0] = v4,
          (v5 = +[BWInferenceVideoFormat formatByResolvingRequirements:](BWInferenceVideoFormat, "formatByResolvingRequirements:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1))) != 0))
    {
      return -[BWInferenceVideoRequirement initWithAttachedMediaKey:videoFormat:]([BWInferenceVideoRequirement alloc], "initWithAttachedMediaKey:videoFormat:", a1, v5);
    }
    else
    {
      FigDebugAssert3();
      return 0;
    }
  }
  return result;
}

uint64_t lnrpc_formatFromInputFormatsByQSubResolutionFlavor(void *a1, int a2, int a3, int a4, int a5)
{
  void *v7;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (a4)
    {
      v7 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", &unk_1E49FB358);
      if (objc_msgSend(v7, "count") && objc_msgSend(v7, "count") != 1)
      {
LABEL_28:
        FigDebugAssert3();
        return 0;
      }
      return objc_msgSend(v7, "firstObject");
    }
    if ((a2 & 1) == 0 && !a3)
      return 0;
    v9 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", &unk_1E49FB370);
    if (objc_msgSend(v9, "count") && objc_msgSend(v9, "count") != 1)
      goto LABEL_28;
    v10 = (void *)objc_msgSend(v9, "firstObject");
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v11 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", &unk_1E49FB388);
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v22;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v22 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
          v17 = objc_msgSend(v16, "width");
          v18 = objc_msgSend(v10, "width");
          if (a2)
          {
            if (v17 == v18)
            {
              v19 = objc_msgSend(v16, "height");
              if (v19 == objc_msgSend(v10, "height"))
                return (uint64_t)v16;
            }
          }
          else
          {
            if (v17 != v18)
              return (uint64_t)v16;
            v20 = objc_msgSend(v16, "height");
            if (v20 != objc_msgSend(v10, "height"))
              return (uint64_t)v16;
          }
        }
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
        v16 = 0;
      }
      while (v13);
      return (uint64_t)v16;
    }
  }
  else if (a2)
  {
    v7 = (void *)objc_msgSend(a1, "objectForKeyedSubscript:", &unk_1E49FB370);
    if (objc_msgSend(v7, "count") && objc_msgSend(v7, "count") != 1)
      goto LABEL_28;
    return objc_msgSend(v7, "firstObject");
  }
  return 0;
}

uint64_t __lnrpc_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return -[BWLearnedNRProcessorController _serviceNextRequest](a2);
}

uint64_t __lnrpc_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return -[BWLearnedNRProcessorController _process](a2);
}

void cmmsn_deviceMotionCallback(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD v6[8];
  _QWORD v7[5];
  int v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  _QWORD v12[4];

  if (a1)
  {
    v12[0] = 0;
    v12[1] = v12;
    v2 = *((_QWORD *)a1 + 11);
    v12[2] = 0x2020000000;
    v12[3] = v2;
    v9[0] = 0;
    v9[1] = v9;
    v9[2] = 0x4010000000;
    v9[3] = &unk_1A33536F2;
    v3 = a1[1];
    v10 = *a1;
    v11 = v3;
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3010000000;
    v4 = *((_QWORD *)a1 + 4);
    v7[3] = &unk_1A33536F2;
    v7[4] = v4;
    v8 = *((_DWORD *)a1 + 10);
    v5 = *(NSObject **)(a2 + 152);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __cmmsn_deviceMotionCallback_block_invoke;
    v6[3] = &unk_1E4925898;
    v6[4] = a2;
    v6[5] = v12;
    v6[6] = v9;
    v6[7] = v7;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
    _Block_object_dispose(v9, 8);
    _Block_object_dispose(v12, 8);
  }
}

void __cmmsn_deviceMotionCallback_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1[4];
  if (*(_BYTE *)(v1 + 112))
  {
    v2 = *(_QWORD *)(v1 + 120) + 60 * *(int *)(v1 + 128);
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_QWORD *)(v2 + 16) = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 32);
    *(_QWORD *)(v2 + 24) = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40);
    *(_QWORD *)(v2 + 32) = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 48);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 56);
    *(_DWORD *)(v2 + 48) = *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 32);
    *(_DWORD *)(v2 + 52) = *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 36);
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
    ++*(_DWORD *)(a1[4] + 128);
    v3 = a1[4];
    if (*(_DWORD *)(v3 + 128) >= *(_DWORD *)(v3 + 108))
      -[BWCoreMotionMetadataSourceNode _emitMetadataSampleBuffer](v3);
  }
}

uint64_t captureDeferredPhotoProcessor_createSerializedNotification(int a1, CFDictionaryRef theDict, uint64_t a3, CFMutableDictionaryRef *a4)
{
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  void *v9;
  uint64_t v10;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  if (a4)
  {
    Count = CFDictionaryGetCount(theDict);
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, theDict);
    v9 = (void *)cdpp_surfaceSerializedPayloadKeysByPayloadKey();
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __captureDeferredPhotoProcessor_createSerializedNotification_block_invoke;
    v12[3] = &unk_1E49258E0;
    v12[6] = theDict;
    v12[7] = MutableCopy;
    v12[4] = a3;
    v12[5] = &v13;
    objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v12);
    *a4 = MutableCopy;
    v10 = *((unsigned int *)v14 + 6);
  }
  else
  {
    FigDebugAssert3();
    v10 = 4294954516;
    *((_DWORD *)v14 + 6) = -12780;
  }
  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_1A3068728(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t cdpp_surfaceSerializedPayloadKeysByPayloadKey()
{
  _QWORD v1[9];
  _QWORD v2[10];

  v2[9] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("Surface");
  v2[0] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_Surface_Serialized);
  v1[1] = CFSTR("PreviewSurface");
  v2[1] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_PreviewSurface_Serialized);
  v1[2] = CFSTR("ThumbnailSurface");
  v2[2] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_ThumbnailSurface_Serialized);
  v1[3] = CFSTR("DepthDataSurface");
  v2[3] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_DepthDataSurface_Serialized);
  v1[4] = CFSTR("PortraitEffectsMatteSurface");
  v2[4] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_PortraitEffectsMatteSurface_Serialized);
  v1[5] = CFSTR("HairSegmentationMatteSurface");
  v2[5] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_HairSegmentationMatteSurface_Serialized);
  v1[6] = CFSTR("SkinSegmentationMatteSurface");
  v2[6] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_SkinSegmentationMatteSurface_Serialized);
  v1[7] = CFSTR("TeethSegmentationMatteSurface");
  v2[7] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_TeethSegmentationMatteSurface_Serialized);
  v1[8] = CFSTR("GlassesSegmentationMatteSurface");
  v2[8] = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", kFigCaptureDeferredPhotoProcessorNotificationPayloadKey_GlassesSegmentationMatteSurface_Serialized);
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, v1, 9);
}

void __captureDeferredPhotoProcessor_createSerializedNotification_block_invoke(uint64_t a1, const void *a2, void *a3, _BYTE *a4)
{
  __IOSurface *Value;
  __IOSurface *v9;
  CFTypeID v10;
  xpc_object_t XPCObject;
  void *v12;

  Value = (__IOSurface *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), a2);
  if (Value)
  {
    v9 = Value;
    v10 = CFGetTypeID(Value);
    if (v10 == IOSurfaceGetTypeID())
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 56), a2);
      XPCObject = IOSurfaceCreateXPCObject(v9);
      if (XPCObject)
      {
        v12 = XPCObject;
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), (const char *)objc_msgSend(a3, "UTF8String"), XPCObject);
        xpc_release(v12);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -12786;
        *a4 = 1;
      }
    }
  }
}

uint64_t captureDeferredPhotoProcessor_createDeserializedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t MutableCopy;
  void *v7;
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (a4)
  {
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      v7 = (void *)cdpp_surfaceSerializedPayloadKeysByPayloadKey();
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __captureDeferredPhotoProcessor_createDeserializedNotification_block_invoke;
      v10[3] = &unk_1E4925908;
      v10[4] = a2;
      v10[5] = &v11;
      v10[6] = MutableCopy;
      objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v10);
      v8 = *((unsigned int *)v12 + 6);
    }
    else
    {
      FigDebugAssert3();
      v8 = 4294954510;
      *((_DWORD *)v12 + 6) = -12786;
    }
    *a4 = MutableCopy;
  }
  else
  {
    FigDebugAssert3();
    v8 = 4294954516;
    *((_DWORD *)v12 + 6) = -12780;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1A3068B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void __captureDeferredPhotoProcessor_createDeserializedNotification_block_invoke(uint64_t a1, const void *a2, void *a3, _BYTE *a4)
{
  xpc_object_t value;
  void *v9;
  IOSurfaceRef v10;
  IOSurfaceRef v11;

  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), (const char *)objc_msgSend(a3, "UTF8String"));
  if (value)
  {
    v9 = value;
    if (objc_msgSend(a3, "hasSuffix:", CFSTR("Surface_Serialized")))
    {
      v10 = IOSurfaceLookupFromXPCObject(v9);
      if (v10)
      {
        v11 = v10;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, v10);
        CFRelease(v11);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -12786;
        *a4 = 1;
      }
    }
  }
}

uint64_t captureDeferredPhotoProcessor_sendXPCNotificationWithPayload(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  CFTypeRef cf;
  uint64_t v7;

  cf = 0;
  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      if (FigXPCCreateBasicMessage()
        || FigXPCMessageSetCFString()
        || captureDeferredPhotoProcessor_createSerializedNotification(0, a3, v7, (CFMutableDictionaryRef *)&cf)|| FigXPCMessageSetCFDictionary())
      {
        FigDebugAssert3();
      }
      else
      {
        xpc_connection_send_notification();
      }
    }
    if (cf)
      CFRelease(cf);
  }
  return FigXPCRelease();
}

void captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v6 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync_block_invoke;
    block[3] = &unk_1E4922E60;
    block[4] = a2;
    block[5] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    FigDebugAssert3();
  }
}

void captureDeferredPhotoProcessor_cleanupForCurrentProcessingRequest(const void *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v7 = v1;
    LODWORD(v5) = 0;
    FigDebugAssert3();
  }

  *(_QWORD *)(DerivedStorage + 48) = 0;
  -[BWDeferredTransactionBroker closeTransaction:](+[BWDeferredTransactionBroker sharedInstance](BWDeferredTransactionBroker, "sharedInstance"), "closeTransaction:", 2);
  if (objc_msgSend(*(id *)(DerivedStorage + 40), "count") && *(_BYTE *)DerivedStorage)
  {
    captureDeferredPhotoProcessor_workloop(a1);
  }
  else
  {
    objc_msgSend(+[FigCaptureDeferredProcessingEngine sharedProcessingEngine](FigCaptureDeferredProcessingEngine, "sharedProcessingEngine", v5, v7), "releaseResourcesForClientPID:", *(unsigned int *)(DerivedStorage + 32));
    dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 8), &__block_literal_global_153_0);
    if (dword_1ECFE9390)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    -[BWDeferredTransactionBroker closeTransaction:](+[BWDeferredTransactionBroker sharedInstance](BWDeferredTransactionBroker, "sharedInstance", v6, v8), "closeTransaction:", 2);
  }
}

CFTypeRef fcdpp_copyAttachedMediaSurfaceDataFromSampleBufferIntoNotificationPayload(void *a1, uint64_t a2, const __CFString *a3, int a4, void *a5, uint64_t a6, uint64_t a7)
{
  opaqueCMSampleBuffer *AttachedMedia;
  opaqueCMSampleBuffer *v14;
  __CVBuffer *ImageBuffer;
  IOSurfaceRef IOSurface;
  opaqueCMSampleBuffer *v17;
  CFTypeRef result;

  AttachedMedia = (opaqueCMSampleBuffer *)BWSampleBufferGetAttachedMedia(a1, a2);
  v14 = AttachedMedia;
  if (AttachedMedia)
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(AttachedMedia);
    if (ImageBuffer)
    {
      IOSurface = CVPixelBufferGetIOSurface(ImageBuffer);
      if (IOSurface)
        objc_msgSend(a5, "setObject:forKeyedSubscript:", IOSurface, a6);
    }
  }
  if (a4)
    v17 = v14;
  else
    v17 = (opaqueCMSampleBuffer *)a1;
  result = CMGetAttachment(v17, a3, 0);
  if (result)
    return (CFTypeRef)objc_msgSend(a5, "setObject:forKeyedSubscript:", result, a7);
  return result;
}

void captureDeferredPhotoProcessor_terminateImmediatelyDueToError(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  void *v5;
  int v6;
  const char *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 57))
    {
      if ((_DWORD)a2 != -16823)
      {
        if ((_DWORD)a2 == -16821)
        {
          v5 = (void *)MEMORY[0x1E0CB3940];
          v6 = FigCaptureCameracapturedEnabled();
          v7 = "mediaserverd";
          if (v6)
            v7 = "cameracaptured";
          objc_msgSend(v5, "stringWithFormat:", CFSTR("camera launch in %s"), v7);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("unexpected error: %d"), a2);
        }
      }
      if (dword_1ECFE9390)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_BYTE *)(v4 + 57) = 1;
      objc_msgSend(*(id *)(v4 + 96), "_prepareToTerminateImmediatelyDueToError:", 4294950475, v9, v10);
    }
  }
  if (captureDeferredPhotoProcessor_terminateImmediatelyDueToError_exitImmediatelyToken != -1)
    dispatch_once(&captureDeferredPhotoProcessor_terminateImmediatelyDueToError_exitImmediatelyToken, &__block_literal_global_152);
}

uint64_t captureDeferredPhotoProcessor_Invalidate(const void *a1)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v5[6];
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9390)
  {
    v7 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*DerivedStorage)
  {
    *DerivedStorage = 0;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __captureDeferredPhotoProcessor_Invalidate_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a1;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v5);
  }
  return 0;
}

void captureDeferredPhotoProcessor_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9390)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureDeferredPhotoProcessor_Invalidate(a1);
  v4 = *(NSObject **)(DerivedStorage + 8);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v5 = *(NSObject **)(DerivedStorage + 16);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

id captureDeferredPhotoProcessor_CopyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  id v3;
  CFIndex v4;
  const char *v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v4 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v5 = "";
  else
    v5 = " (never set/invalidated)";
  objc_msgSend(v3, "appendFormat:", CFSTR("<FigCaptureDeferredPhotoProcessor %p retainCount: %ld%s allocator: %p>"), a1, v4, v5, CFGetAllocator(a1));
  return v3;
}

uint64_t captureDeferredPhotoProcessor_CopyProperty(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  CFTypeRef *v12;
  _QWORD v13[5];
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v8 = DerivedStorage;
  if (FigCFEqual())
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __captureDeferredPhotoProcessor_CopyProperty_block_invoke;
    v14[3] = &unk_1E49222A0;
    v14[4] = &v15;
    v14[5] = v8;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v14);
    if (*((_BYTE *)v16 + 24))
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v10 = CFRetain(*v9);
  }
  else
  {
    if (!FigCFEqual())
      return 4294954509;
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __captureDeferredPhotoProcessor_CopyProperty_block_invoke_2;
    v13[3] = &unk_1E491EC40;
    v13[4] = &v15;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v13);
    if (*((_BYTE *)v16 + 24))
      v12 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    else
      v12 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v10 = CFRetain(*v12);
  }
  *a4 = v10;
  _Block_object_dispose(&v15, 8);
  return 0;
}

void sub_1A306AA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t captureDeferredPhotoProcessor_SetProperty(const void *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  _QWORD v9[7];

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v7 = DerivedStorage;
  if (!FigCFEqual())
    return 4294954509;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __captureDeferredPhotoProcessor_SetProperty_block_invoke;
  v9[3] = &__block_descriptor_56_e5_v8__0l;
  v9[4] = a3;
  v9[5] = v7;
  v9[6] = a1;
  captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v9);
  return 0;
}

void captureDeferredPhotoProcessor_workloop(const void *a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  FigCaptureDeferredProcessingJob *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v8;
  FigCaptureDeferredProcessingJob *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  dispatch_qos_class_t v20;
  dispatch_block_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD block[5];
  os_log_type_t v29;
  os_log_type_t type[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!_FigIsCurrentDispatchQueue())
  {
    v25 = v1;
    LODWORD(v23) = 0;
    FigDebugAssert3();
  }
  if (*(_BYTE *)(DerivedStorage + 56)
    || *(_QWORD *)(DerivedStorage + 48)
    || !objc_msgSend(*(id *)(DerivedStorage + 40), "count"))
  {
    v4 = 0;
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 48) = (id)objc_msgSend(*(id *)(DerivedStorage + 40), "firstObject");
    objc_msgSend(*(id *)(DerivedStorage + 40), "removeObjectAtIndex:", 0);
    if (*(_BYTE *)(DerivedStorage + 1) && captureDeferredPhotoProcessor_workloop_waitForShaderCompilationToken != -1)
      dispatch_once(&captureDeferredPhotoProcessor_workloop_waitForShaderCompilationToken, &__block_literal_global_113);
    v5 = objc_msgSend(*(id *)(DerivedStorage + 48), "captureRequestIdentifier", v23, v25);
    v6 = objc_msgSend(*(id *)(DerivedStorage + 48), "photoIdentifier");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v5, v6);
    if (dword_1ECFE9390)
    {
      v35 = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObjects:", v6, 0, v26);
    v35 = 0;
    v9 = -[FigCaptureDeferredProcessingJob initWithProcessorRequest:delegate:error:]([FigCaptureDeferredProcessingJob alloc], "initWithProcessorRequest:delegate:error:", *(_QWORD *)(DerivedStorage + 48), *(_QWORD *)(DerivedStorage + 96), &v35);
    v4 = v9;
    if (v9)
    {
      objc_msgSend(*(id *)(DerivedStorage + 48), "setContainer:", -[FigCaptureDeferredProcessingJob container](v9, "container"));
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v10 = (void *)objc_msgSend(-[FigCaptureDeferredProcessingJob container](v4, "container"), "photoDescriptors");
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v12; ++i)
          {
            if (*(_QWORD *)v32 != v13)
              objc_enumerationMutation(v10);
            v15 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
            if ((objc_msgSend(v8, "containsObject:", objc_msgSend(v15, "photoIdentifier")) & 1) == 0)
              objc_msgSend(v8, "addObject:", objc_msgSend(v15, "photoIdentifier"));
          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v31, v38, 16);
        }
        while (v12);
      }
    }
    v36[0] = CFSTR("CaptureRequestIdentifier");
    v36[1] = CFSTR("PhotoIdentifiers");
    v37[0] = v5;
    v37[1] = v8;
    captureDeferredPhotoProcessor_sendXPCNotificationWithPayload((uint64_t)a1, (uint64_t)CFSTR("WillBeginProcessingPhotoProxy"), (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2));
    if (!*(_BYTE *)(DerivedStorage + 1))
    {
      v17 = *(void **)(DerivedStorage + 96);
      v18 = *(_QWORD *)(DerivedStorage + 48);
      v19 = 4294950476;
      objc_msgSend(v17, "request:failedWithError:", v18, 4294950476);
LABEL_34:
      cdpp_reportAnalytics(v19);
      goto LABEL_6;
    }
    if (v35)
    {
      if (+[FigCaptureDeferredProcessingJob isPotentiallyRecoverableError:](FigCaptureDeferredProcessingJob, "isPotentiallyRecoverableError:"))
      {
        if (dword_1ECFE9390)
        {
          *(_DWORD *)type = 0;
          v29 = OS_LOG_TYPE_DEFAULT;
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v22 = 4294950471;
        v35 = -16825;
      }
      else
      {
        v22 = v35;
      }
      objc_msgSend(*(id *)(DerivedStorage + 96), "request:failedWithError:", *(_QWORD *)(DerivedStorage + 48), v22, v24, v27);
      v19 = v35;
      goto LABEL_34;
    }
    if (v4)
    {
      v20 = -[FigCaptureDeferredPhotoProcessorRequest qosClass](-[FigCaptureDeferredProcessingJob processorRequest](v4, "processorRequest"), "qosClass");
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __captureDeferredPhotoProcessor_workloop_block_invoke_118;
      block[3] = &unk_1E491E720;
      block[4] = v4;
      v21 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v20, 0, block);
      captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync(a1, (uint64_t)v21);

    }
  }
LABEL_6:

}

uint64_t cdpp_reportAnalytics(uint64_t a1)
{
  BWDeferredProcessingAnalyticsPayload *v2;

  v2 = objc_alloc_init(BWDeferredProcessingAnalyticsPayload);
  -[BWDeferredProcessingAnalyticsPayload setError:](v2, "setError:", a1);
  if ((_DWORD)a1 == -16140)
  {
    -[BWDeferredProcessingAnalyticsPayload setProcessingResult:](v2, "setProcessingResult:", 0x1E494BE98);
    -[BWDeferredProcessingAnalyticsPayload setContainerProcessingCount:](v2, "setContainerProcessingCount:", 0xFFFFFFFFLL);
  }
  else if (!+[FigCaptureDeferredProcessingJob isPotentiallyRecoverableError:](FigCaptureDeferredProcessingJob, "isPotentiallyRecoverableError:", a1))
  {
    -[BWDeferredProcessingAnalyticsPayload setProcessingResult:](v2, "setProcessingResult:", 0x1E494BE78);
  }
  return -[BWCoreAnalyticsReporter sendEvent:](+[BWCoreAnalyticsReporter sharedInstance](BWCoreAnalyticsReporter, "sharedInstance"), "sendEvent:", v2);
}

uint64_t __captureDeferredPhotoProcessor_workloop_block_invoke_118(uint64_t a1)
{
  return objc_msgSend(+[FigCaptureDeferredProcessingEngine sharedProcessingEngine](FigCaptureDeferredProcessingEngine, "sharedProcessingEngine"), "executeJob:", *(_QWORD *)(a1 + 32));
}

id captureDeferredPhotoProcessor_CopyUnfinishedPhotoIdentifiers()
{
  uint64_t DerivedStorage;
  id v1;
  int v3;

  v3 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    return 0;
  v1 = -[BWDeferredProcessingContainerManager manifestsForApplicationID:err:](+[BWDeferredProcessingContainerManager sharedInstance](BWDeferredProcessingContainerManager, "sharedInstance"), "manifestsForApplicationID:err:", *(_QWORD *)(DerivedStorage + 24), &v3);
  if (v3)
    FigDebugAssert3();
  return v1;
}

uint64_t captureDeferredPhotoProcessor_ProcessPhoto(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  FigCaptureDeferredPhotoProcessorRequest *v12;
  uint64_t v13;
  _QWORD v15[11];
  os_log_type_t type;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9390)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    v12 = -[FigCaptureDeferredPhotoProcessorRequest initWithApplicationID:captureRequstIdentifier:photoIdentifier:clientPID:message:qosClass:parent:]([FigCaptureDeferredPhotoProcessorRequest alloc], "initWithApplicationID:captureRequstIdentifier:photoIdentifier:clientPID:message:qosClass:parent:", *(_QWORD *)(DerivedStorage + 24), a2, a3, *(unsigned int *)(DerivedStorage + 32), a5, qos_class_self(), 0);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __captureDeferredPhotoProcessor_ProcessPhoto_block_invoke;
    v15[3] = &unk_1E4925958;
    v15[6] = DerivedStorage;
    v15[7] = a1;
    v15[8] = a2;
    v15[9] = a3;
    v15[4] = v12;
    v15[5] = &v18;
    v15[10] = a4;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v15);
    if (*((_DWORD *)v19 + 6) == -16829)
      *((_DWORD *)v19 + 6) = 0;

    v13 = *((unsigned int *)v19 + 6);
  }
  else
  {
    v13 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v18, 8);
  return v13;
}

void sub_1A306B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

uint64_t captureDeferredPhotoProcessor_CancelPhotoProcessing(const void *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  int v7;
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    v7 = cdpp_validateIdentifiersAreUUIDs(a2, a3);
    *((_DWORD *)v12 + 6) = v7;
    if (v7)
    {
      FigDebugAssert3();
    }
    else
    {
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 3221225472;
      v10[2] = __captureDeferredPhotoProcessor_CancelPhotoProcessing_block_invoke;
      v10[3] = &unk_1E49259A0;
      v10[5] = DerivedStorage;
      v10[6] = a3;
      v10[4] = &v11;
      captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v10);
    }
    v8 = *((unsigned int *)v12 + 6);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_1A306B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t captureDeferredPhotoProcessor_PrewarmSerialized()
{
  return 4294954514;
}

uint64_t captureDeferredPhotoProcessor_CancelAllPrewarming(const void *a1)
{
  _BYTE *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v5[6];
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9390)
  {
    v7 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __captureDeferredPhotoProcessor_CancelAllPrewarming_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v5);
  return 0;
}

uint64_t captureDeferredPhotoProcessor_DeletePersistentStorageForPhoto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = cdpp_validateIdentifiersAreUUIDs(a2, a3);
  if (!(_DWORD)v7)
    return -[BWDeferredProcessingContainerManager deleteContainerForApplicationID:captureRequestIdentifier:](+[BWDeferredProcessingContainerManager sharedInstance](BWDeferredProcessingContainerManager, "sharedInstance"), "deleteContainerForApplicationID:captureRequestIdentifier:", *((_QWORD *)v6 + 3), a2);
  v9 = v7;
  FigDebugAssert3();
  return v9;
}

id captureDeferredPhotoProcessor_PrettyPrintContainerDescription(const void *a1, uint64_t a2)
{
  _BYTE *DerivedStorage;
  id v5;
  _QWORD v7[8];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  if (*DerivedStorage)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __captureDeferredPhotoProcessor_PrettyPrintContainerDescription_block_invoke;
    v7[3] = &unk_1E49259C8;
    v7[6] = DerivedStorage;
    v7[7] = a2;
    v7[4] = &v8;
    v7[5] = a1;
    captureDeferredPhotoProcessor_performBlockOnWorkerQueueSync(a1, (uint64_t)v7);
  }
  else
  {
    FigDebugAssert3();
  }
  v5 = (id)v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1A306BD00(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A306C7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

uint64_t cdpp_validateIdentifiersAreUUIDs(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;

  v4 = (void *)MEMORY[0x1A858DD40]();
  v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a1);
  v6 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", a2);
  objc_autoreleasePoolPop(v4);
  if (v5 && v6)
    return 0;
  FigDebugAssert3();
  return 4294950470;
}

uint64_t __captureDeferredPhotoProcessor_terminateImmediatelyDueToError_block_invoke()
{
  objc_msgSend(+[FigCaptureDeferredProcessingEngine sharedProcessingEngine](FigCaptureDeferredProcessingEngine, "sharedProcessingEngine"), "immediateTermination");
  return -[BWDeferredTransactionBroker exitImmediately](+[BWDeferredTransactionBroker sharedInstance](BWDeferredTransactionBroker, "sharedInstance"), "exitImmediately");
}

void __captureDeferredPhotoProcessor_performBlockOnWorkerQueueAsync_block_invoke(uint64_t a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  objc_autoreleasePoolPop(v2);
}

void sub_1A306E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1A306EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A307192C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x3E0], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Block_object_dispose(&STACK[0x440], 8);
  _Block_object_dispose(&STACK[0x468], 8);
  _Block_object_dispose(&STACK[0x488], 8);
  _Block_object_dispose(&STACK[0x4A8], 8);
  _Block_object_dispose(&STACK[0x4C8], 8);
  _Unwind_Resume(a1);
}

void sub_1A30826E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3088998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AppleCVALibrary_1()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!AppleCVALibraryCore_frameworkLibrary_1)
  {
    v2 = xmmword_1E4925B40;
    v3 = 0;
    AppleCVALibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!AppleCVALibraryCore_frameworkLibrary_1)
    AppleCVALibrary_cold_1_1(&v1);
  return AppleCVALibraryCore_frameworkLibrary_1;
}

uint64_t getDKNotificationAgentClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__35;
  v7 = __Block_byref_object_dispose__35;
  v0 = getDKNotificationAgentClass_softClass;
  v8 = getDKNotificationAgentClass_softClass;
  if (!getDKNotificationAgentClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getDKNotificationAgentClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getDKNotificationAgentClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A3089014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDKTrackingAgentClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!DockKitCoreLibraryCore_frameworkLibrary)
    DockKitCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("DKTrackingAgent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  getDKTrackingAgentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class __getDKNotificationAgentClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!DockKitCoreLibraryCore_frameworkLibrary)
    DockKitCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("DKNotificationAgent");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  getDKNotificationAgentClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t FigSetupIOSurfaceAccelerator(uint64_t a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  uint64_t result;
  io_object_t v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;

  v2 = *MEMORY[0x1E0CBBAA8];
  v3 = IOServiceMatching("AppleM2ScalerCSCDriver");
  result = IOServiceGetMatchingService(v2, v3);
  if ((_DWORD)result)
  {
    v5 = result;
    v6 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(result, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
    if (v6)
    {
      v7 = v6;
      Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("IOSurfaceAcceleratorFilterHorizontalTapsCount"));
      CFNumberGetValue(Value, kCFNumberSInt32Type, (void *)a1);
      v9 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceAcceleratorFilterVerticalTapsCount"));
      CFNumberGetValue(v9, kCFNumberSInt32Type, (void *)(a1 + 4));
      v10 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceAcceleratorFilterHorizontalPhasesCount"));
      CFNumberGetValue(v10, kCFNumberSInt32Type, (void *)(a1 + 8));
      v11 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceAcceleratorFilterVerticalPhasesCount"));
      CFNumberGetValue(v11, kCFNumberSInt32Type, (void *)(a1 + 12));
      v12 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPrePointBits"));
      CFNumberGetValue(v12, kCFNumberSInt32Type, (void *)(a1 + 16));
      v13 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("IOSurfaceAcceleratorFilterCoefficientsPostPointBits"));
      CFNumberGetValue(v13, kCFNumberSInt32Type, (void *)(a1 + 20));
      CFRelease(v7);
    }
    return IOObjectRelease(v5);
  }
  return result;
}

uint64_t FigSetupIOSurfaceAcceleratorCustomFilter1to1(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  void *v32;
  uint64_t v33;

  v10 = a2[1];
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[2];
  v14 = *a2;
  v15 = a2[3];
  v16 = malloc_type_calloc(1uLL, 4 * (2 * (v13 * v14 + v15 * v10)), 0x100004052888210uLL);
  if (!v16)
    return 3758097085;
  v17 = v16;
  if ((_DWORD)v10)
  {
    v18 = (float)(unint64_t)(1 << v12);
    v19 = ~(-1 << (v12 + v11));
    v20 = 4 * v15;
    v21 = v10;
    v17 = v16;
    do
    {
      v22 = *a6++;
      *v17 = (int)(float)((float)(v22 * v18) + 0.5) & v19;
      v17 = (_DWORD *)((char *)v17 + v20);
      --v21;
    }
    while (v21);
    v23 = v10;
    do
    {
      v24 = *a4++;
      *v17 = (int)(float)((float)(v24 * v18) + 0.5) & v19;
      v17 = (_DWORD *)((char *)v17 + v20);
      --v23;
    }
    while (v23);
  }
  if ((_DWORD)v14)
  {
    v25 = (float)(unint64_t)(1 << v12);
    v26 = ~(-1 << (v12 + v11));
    v27 = 4 * v13;
    v28 = v14;
    do
    {
      v29 = *a5++;
      *v17 = (int)(float)((float)(v29 * v25) + 0.5) & v26;
      v17 = (_DWORD *)((char *)v17 + v27);
      --v28;
    }
    while (v28);
    v30 = v14;
    do
    {
      v31 = *a3++;
      *v17 = (int)(float)((float)(v31 * v25) + 0.5) & v26;
      v17 = (_DWORD *)((char *)v17 + v27);
      --v30;
    }
    while (v30);
  }
  v32 = v16;
  v33 = IOSurfaceAcceleratorSetCustomFilter();
  free(v32);
  return v33;
}

_DWORD *multiBandNoiseReductionContextCreate(int a1, int a2, const __CFDictionary *a3)
{
  char *v6;
  _DWORD *v7;
  const __CFAllocator *v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *v13;
  CFTypeID v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  CFTypeID v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  char v21;
  intptr_t v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  CFTypeID v25;
  NSObject *v26;
  NSObject *global_queue;
  NSObject *v28;
  char v29;
  int valuePtr;
  _QWORD block[7];
  int v33[2];

  v6 = (char *)malloc_type_malloc(0x210uLL, 0x10E0040BC18C1E7uLL);
  v7 = v6;
  if (!v6)
    goto LABEL_17;
  bzero(v6 + 4, 0x20CuLL);
  *v7 = 1459126783;
  v7[16] = a2;
  *((_BYTE *)v7 + 520) = CFDictionaryGetValue(a3, CFSTR("TMBNR_Fusion")) == (const void *)*MEMORY[0x1E0C9AE50];
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *((_QWORD *)v7 + 58) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Mutable = CFDictionaryCreateMutable(v8, 0, v9, v10);
  *((_QWORD *)v7 + 59) = Mutable;
  if (Mutable)
  {
    if (a3)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05A18]);
      if (Value)
      {
        v13 = Value;
        v14 = CFGetTypeID(Value);
        if (v14 == CFDictionaryGetTypeID())
          CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
      }
      v15 = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05A30]);
      if (v15)
      {
        v16 = v15;
        v17 = CFGetTypeID(v15);
        if (v17 == CFDictionaryGetTypeID())
          CFDictionaryApplyFunction(v16, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
      }
      v18 = (const __CFDictionary *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0D05A38]);
      if (v18)
      {
        v19 = v18;
        v20 = CFGetTypeID(v18);
        if (v20 == CFDictionaryGetTypeID())
          CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)get_noise_models_for_sensor_id, v7);
      }
    }
    valuePtr = 0;
    *((_QWORD *)v7 + 60) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    valuePtr = 3;
    *((_QWORD *)v7 + 61) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    v21 = 1;
    valuePtr = 1;
    *((_QWORD *)v7 + 62) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    v22 = 2;
    valuePtr = 2;
    *((_QWORD *)v7 + 63) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    valuePtr = 4;
    *((_QWORD *)v7 + 64) = CFNumberCreate(v8, kCFNumberSInt32Type, &valuePtr);
    v7[2] = 0;
    *((_QWORD *)v7 + 2) = 0;
    if (a1 != 1)
    {
      if (a1 == 3)
      {
        v22 = -2;
      }
      else
      {
        v22 = 0;
        if (a1 != 2)
          v21 = 0;
      }
    }
    *(_QWORD *)v33 = 0;
    if (a3)
    {
      v23 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("kglContextAddress"));
      if (v23)
      {
        v24 = v23;
        v25 = CFGetTypeID(v23);
        if (v25 == CFNumberGetTypeID())
          CFNumberGetValue(v24, kCFNumberSInt64Type, v33);
      }
    }
    v26 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    global_queue = dispatch_get_global_queue(v22, 0);
    v28 = dispatch_queue_create_with_target_V2("noise-reduction-context-init", v26, global_queue);
    *((_QWORD *)v7 + 2) = v28;
    v29 = v21 ^ 1;
    if (!v28)
      v29 = 1;
    if ((v29 & 1) != 0)
    {
      multiBandNoiseReductionContextInit_internal((uint64_t)(v7 + 2), *(void **)v33, a3);
    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __multiBandNoiseReductionGPUContextInit_block_invoke;
      block[3] = &unk_1E4920768;
      block[4] = *(_QWORD *)v33;
      block[5] = v7 + 2;
      block[6] = a3;
      dispatch_async(v28, block);
    }
  }
  else
  {
LABEL_17:
    multiBandNoiseReductionContextDestroy(v7);
    return 0;
  }
  return v7;
}

void get_noise_models_for_sensor_id(const __CFString *a1, const void *a2, uint64_t a3)
{
  CFTypeID v5;
  CFTypeID v6;
  _OWORD *v7;
  uint64_t v8;
  const void *Value;
  const void *v10;
  CFTypeID v11;
  CFTypeID v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFTypeID v15;
  void *v16;
  void *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeID v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  CFTypeID v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  CFTypeID v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  CFTypeID v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  CFTypeID v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  CFTypeID v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFArrayRef v53;
  CFDataRef v54;
  CFDataRef v55;
  const __CFAllocator *allocator;
  uint64_t v58;
  __int128 valuePtr;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 range;
  void *v67[2];
  _QWORD v68[4];
  _OWORD v69[4];
  uint64_t v70;
  _OWORD v71[7];
  uint64_t v72;
  char buffer[10];
  CFNumberRef context;
  CFNumberRef v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  CFRange v79;
  CFRange v80;

  v78 = *MEMORY[0x1E0C80C00];
  range = 0u;
  *(_OWORD *)v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  valuePtr = 0u;
  v71[4] = xmmword_1E4925BD8;
  v71[5] = *(_OWORD *)&off_1E4925BE8;
  v71[6] = xmmword_1E4925BF8;
  v72 = 1;
  v71[0] = xmmword_1E4925B98;
  v71[1] = *(_OWORD *)algn_1E4925BA8;
  v71[2] = xmmword_1E4925BB8;
  v71[3] = unk_1E4925BC8;
  v69[2] = xmmword_1E4925C30;
  v69[3] = unk_1E4925C40;
  v70 = 1;
  v69[0] = xmmword_1E4925C10;
  v69[1] = unk_1E4925C20;
  v5 = CFGetTypeID(a1);
  if (v5 != CFStringGetTypeID())
    goto LABEL_62;
  v6 = CFGetTypeID(a2);
  if (v6 != CFDictionaryGetTypeID())
    goto LABEL_62;
  if (*(_BYTE *)(a3 + 520))
    v7 = v69;
  else
    v7 = v71;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a3 + 520))
    v8 = 3;
  else
    v8 = 5;
  while (1)
  {
    range = 0u;
    *(_OWORD *)v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    valuePtr = 0u;
    Value = CFDictionaryGetValue((CFDictionaryRef)a2, *((const void **)v7 + 1));
    if (!Value)
    {
      if (!*((_BYTE *)v7 + 16))
        goto LABEL_61;
      goto LABEL_59;
    }
    v10 = Value;
    v11 = CFGetTypeID(Value);
    if (v11 != CFDictionaryGetTypeID() && *((_BYTE *)v7 + 16))
      goto LABEL_59;
    v12 = CFGetTypeID(v10);
    if (v12 != CFDictionaryGetTypeID())
      goto LABEL_61;
    v13 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("Bands"));
    v67[0] = 0;
    v67[1] = 0;
    if (!v13)
      break;
    v14 = v13;
    v15 = CFGetTypeID(v13);
    if (v15 != CFArrayGetTypeID())
      break;
    HIDWORD(range) = CFArrayGetCount(v14);
    v16 = malloc_type_malloc(96 * SHIDWORD(range), 0x1020040D89758F9uLL);
    v67[0] = v16;
    if (!v16)
      break;
    bzero(v16, 96 * SHIDWORD(range));
    context = 0;
    v75 = (CFNumberRef)v67[0];
    v76 = 0;
    v77 = v67[1];
    v79.length = SHIDWORD(range);
    v79.location = 0;
    CFArrayApplyFunction(v14, v79, (CFArrayApplierFunction)band_iterator, &context);
    if ((_DWORD)context)
      break;
    v17 = malloc_type_malloc(8 * (int)v76, 0x100004000313F17uLL);
    v67[1] = v17;
    if (!v17)
      break;
    v68[0] = 0;
    v68[1] = v67[0];
    v68[2] = 0;
    v68[3] = v17;
    v80.length = SHIDWORD(range);
    v80.location = 0;
    CFArrayApplyFunction(v14, v80, (CFArrayApplierFunction)band_iterator, v68);
    if (LODWORD(v68[0]))
      break;
    v18 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("HighGainThreshold"));
    if (v18 && (v19 = v18, v20 = CFGetTypeID(v18), v20 == CFArrayGetTypeID()))
    {
      if (CFArrayGetCount(v19) > 5)
        goto LABEL_61;
      context = (CFNumberRef)((char *)&v61 + 8);
      handle_band_data(v19, (int *)&range + 2, (uint64_t *)&context);
    }
    else
    {
      v21 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("HighGainThreshold"));
      if (!v21 || (v22 = v21, v23 = CFGetTypeID(v21), v23 != CFNumberGetTypeID()))
      {
LABEL_61:
        fig_log_get_emitter();
        FigDebugAssert3();
        goto LABEL_62;
      }
      CFNumberGetValue(v22, kCFNumberFloatType, (char *)&v61 + 8);
      DWORD2(range) = 1;
    }
    v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("GammaY"));
    if (!v24)
      goto LABEL_61;
    v25 = v24;
    v26 = CFGetTypeID(v24);
    if (v26 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v25, kCFNumberFloatType, &valuePtr);
    v27 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("BandFactorY"));
    if (!v27)
      goto LABEL_61;
    v28 = v27;
    v29 = CFGetTypeID(v27);
    if (v29 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v28, kCFNumberFloatType, (char *)&valuePtr + 4);
    v30 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("BiasFactor"));
    if (!v30)
      goto LABEL_61;
    v31 = v30;
    v32 = CFGetTypeID(v30);
    if (v32 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v31, kCFNumberFloatType, (char *)&valuePtr + 8);
    v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("SlopeFactor"));
    if (!v33)
      goto LABEL_61;
    v34 = v33;
    v35 = CFGetTypeID(v33);
    if (v35 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v34, kCFNumberFloatType, (void *)((unint64_t)&valuePtr | 0xC));
    v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("GammaC"));
    if (!v36)
      goto LABEL_61;
    v37 = v36;
    v38 = CFGetTypeID(v36);
    if (v38 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v37, kCFNumberFloatType, &v60);
    v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("BandFactorC"));
    if (!v39)
      goto LABEL_61;
    v40 = v39;
    v41 = CFGetTypeID(v39);
    if (v41 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v40, kCFNumberFloatType, (char *)&v60 + 4);
    v42 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("LensShadingFactorLuma"));
    if (!v42)
      goto LABEL_61;
    v43 = v42;
    v44 = CFGetTypeID(v42);
    if (v44 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v43, kCFNumberFloatType, (char *)&v60 + 8);
    v45 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("LensShadingFactorChroma"));
    if (!v45)
      goto LABEL_61;
    v46 = v45;
    v47 = CFGetTypeID(v45);
    if (v47 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v46, kCFNumberFloatType, (char *)&v60 + 12);
    v48 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("ChromaDemoireStrength"));
    if (!v48)
      goto LABEL_61;
    v49 = v48;
    v50 = CFGetTypeID(v48);
    if (v50 != CFNumberGetTypeID())
      goto LABEL_61;
    CFNumberGetValue(v49, kCFNumberFloatType, &v61);
    if (!CFStringGetCString(a1, buffer, 10, 0))
      goto LABEL_62;
    v58 = v8;
    LODWORD(v68[0]) = 0;
    LODWORD(v68[0]) = strtoul(buffer, 0, 16);
    v51 = CFNumberCreate(allocator, kCFNumberSInt32Type, v68);
    v52 = CFNumberCreate(allocator, kCFNumberSInt32Type, v7);
    context = v51;
    v75 = v52;
    v53 = CFArrayCreate(allocator, (const void **)&context, 2, MEMORY[0x1E0C9B378]);
    v54 = CFDataCreate(allocator, (const UInt8 *)&valuePtr, 144);
    v55 = v54;
    if (v53 && v54)
    {
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 472), v53, v54);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 464), v53, v10);
    }
    if (v51)
      CFRelease(v51);
    if (v52)
      CFRelease(v52);
    if (v53)
      CFRelease(v53);
    if (v55)
      CFRelease(v55);
    v8 = v58;
LABEL_59:
    v7 = (_OWORD *)((char *)v7 + 24);
    if (!--v8)
      return;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  free(v67[0]);
  v67[0] = 0;
  free(v67[1]);
  v67[1] = 0;
LABEL_62:
  free(v67[0]);
  v67[0] = 0;
  free(v67[1]);
}

void multiBandNoiseReductionContextDestroy(_DWORD *a1)
{
  _OWORD *v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (a1 && *a1 == 1459126783)
  {
    v2 = a1 + 2;
    WaitForInitializationToFinish_0((uint64_t)(a1 + 2));
    v3 = (const void *)*((_QWORD *)a1 + 3);
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)a1 + 3) = 0;
    }
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *((_QWORD *)a1 + 7));
    glUseProgram(0);
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, 0);
    glActiveTexture(0x84C1u);
    glBindTexture(0xDE1u, 0);
    glBindFramebuffer(0x8D40u, 0);
    glDeleteFramebuffers(4, a1 + 27);
    glDeleteFramebuffers(4, a1 + 48);
    glDeleteFramebuffers(4, a1 + 56);
    glDeleteFramebuffers(4, a1 + 37);
    glDeleteFramebuffers(1, a1 + 43);
    glDeleteTextures(4, a1 + 23);
    glDeleteTextures(4, a1 + 33);
    glDeleteTextures(4, a1 + 44);
    glDeleteTextures(4, a1 + 52);
    glDeleteTextures(2, a1 + 31);
    glDeleteTextures(2, a1 + 41);
    releasePixelBuffers((uint64_t)(a1 + 2));
    glDeleteProgram(a1[77]);
    glDeleteProgram(a1[80]);
    glDeleteProgram(a1[86]);
    glDeleteProgram(a1[83]);
    glDeleteProgram(a1[89]);
    glDeleteProgram(a1[92]);
    glDeleteProgram(a1[95]);
    glDeleteProgram(a1[98]);
    glDeleteProgram(a1[101]);
    glDeleteProgram(a1[104]);
    glDeleteProgram(a1[107]);
    glDeleteProgram(a1[110]);
    glDeleteProgram(a1[113]);
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
    if (*((_BYTE *)a1 + 306))
    {
      v4 = (void *)*((_QWORD *)a1 + 7);
      if (v4)

    }
    v5 = *((_QWORD *)a1 + 2);
    if (v5)
      dispatch_release(v5);
    *((_QWORD *)a1 + 57) = 0;
    *(_OWORD *)(a1 + 106) = 0u;
    *(_OWORD *)(a1 + 110) = 0u;
    *(_OWORD *)(a1 + 98) = 0u;
    *(_OWORD *)(a1 + 102) = 0u;
    *(_OWORD *)(a1 + 90) = 0u;
    *(_OWORD *)(a1 + 94) = 0u;
    *(_OWORD *)(a1 + 82) = 0u;
    *(_OWORD *)(a1 + 86) = 0u;
    *(_OWORD *)(a1 + 74) = 0u;
    *(_OWORD *)(a1 + 78) = 0u;
    *(_OWORD *)(a1 + 66) = 0u;
    *(_OWORD *)(a1 + 70) = 0u;
    *(_OWORD *)(a1 + 58) = 0u;
    *(_OWORD *)(a1 + 62) = 0u;
    *(_OWORD *)(a1 + 50) = 0u;
    *(_OWORD *)(a1 + 54) = 0u;
    *(_OWORD *)(a1 + 42) = 0u;
    *(_OWORD *)(a1 + 46) = 0u;
    *(_OWORD *)(a1 + 34) = 0u;
    *(_OWORD *)(a1 + 38) = 0u;
    *(_OWORD *)(a1 + 26) = 0u;
    *(_OWORD *)(a1 + 30) = 0u;
    *(_OWORD *)(a1 + 18) = 0u;
    *(_OWORD *)(a1 + 22) = 0u;
    *(_OWORD *)(a1 + 10) = 0u;
    *(_OWORD *)(a1 + 14) = 0u;
    *v2 = 0u;
    *(_OWORD *)(a1 + 6) = 0u;
    v6 = (const __CFDictionary *)*((_QWORD *)a1 + 59);
    if (v6)
    {
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)free_calibration_data_allocations, 0);
      v7 = (const void *)*((_QWORD *)a1 + 59);
      if (v7)
        CFRelease(v7);
    }
    v8 = (const void *)*((_QWORD *)a1 + 58);
    if (v8)
      CFRelease(v8);
    v9 = (const void *)*((_QWORD *)a1 + 60);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)a1 + 60) = 0;
    }
    v10 = (const void *)*((_QWORD *)a1 + 61);
    if (v10)
    {
      CFRelease(v10);
      *((_QWORD *)a1 + 61) = 0;
    }
    v11 = (const void *)*((_QWORD *)a1 + 62);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)a1 + 62) = 0;
    }
    v12 = (const void *)*((_QWORD *)a1 + 63);
    if (v12)
    {
      CFRelease(v12);
      *((_QWORD *)a1 + 63) = 0;
    }
    v13 = (const void *)*((_QWORD *)a1 + 64);
    if (v13)
      CFRelease(v13);
    bzero(a1, 0x210uLL);
    free(a1);
  }
}

void free_calibration_data_allocations(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  free(*((void **)BytePtr + 16));
  free(*((void **)BytePtr + 17));
}

_DWORD *multiBandNoiseReductionReleaseBuffers(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  GLuint *v3;

  if (result)
  {
    v1 = result;
    if (*result == 1459126783)
    {
      v2 = (uint64_t)(result + 2);
      WaitForInitializationToFinish_0((uint64_t)(result + 2));
      objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *((_QWORD *)v1 + 7));
      glActiveTexture(0x84C0u);
      *(_QWORD *)(v1 + 19) = -1;
      v1[22] = -1;
      glDeleteTextures(4, v1 + 44);
      glGenTextures(4, v1 + 44);
      glDeleteTextures(4, v1 + 52);
      glGenTextures(4, v1 + 52);
      glDeleteTextures(4, v1 + 23);
      glGenTextures(4, v1 + 23);
      glDeleteTextures(4, v1 + 33);
      glGenTextures(4, v1 + 33);
      glDeleteTextures(2, v1 + 31);
      glGenTextures(2, v1 + 31);
      v3 = v1 + 41;
      glDeleteTextures(2, v3);
      glGenTextures(2, v3);
      releasePixelBuffers(v2);
      glFinish();
      return (_DWORD *)objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
    }
  }
  return result;
}

uint64_t multiBandNoiseReductionWithTuningOptions(_DWORD *a1, CMSampleBufferRef sbuf, opaqueCMSampleBuffer *a3, const __CFDictionary *a4)
{
  __CVBuffer *ImageBuffer;
  const __CFDictionary *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  CVPixelBufferRef v14;

  if (sbuf != a3 && a1 && *a1 == 1459126783)
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
    v14 = CMSampleBufferGetImageBuffer(a3);
    v9 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
    v10 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08808], 0);
    v11 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08670], 0);
    v12 = multiBandNoiseReductionGPU((uint64_t)a1, ImageBuffer, &v14, 1, v9, a4, v10, v11);
    if ((_DWORD)v12)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v12;
}

uint64_t multiBandNoiseReductionGPU(uint64_t a1, __CVBuffer *a2, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  _DWORD *v15;
  OSType PixelFormatType;
  OSType v17;
  int WidthOfPlane;
  int HeightOfPlane;
  int v20;
  int v21;
  uint64_t v22;
  CVPixelBufferRef *v23;
  IOSurfaceRef v24;
  int v25;
  int v26;
  OSType v27;
  OSType v28;
  uint64_t v29;
  uint64_t v30;
  __CVBuffer *v31;
  uint64_t v32;
  GLuint *v33;
  uint64_t v34;
  int v35;
  __CVBuffer *v36;
  int v37;
  __CVBuffer *YCC420CVPixelBufferRef;
  __IOSurface *v39;
  __IOSurface *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  CVPixelBufferRef *v45;
  int v46;
  int v47;
  __CVBuffer *v48;
  IOSurfaceRef v49;
  __IOSurface *v50;
  __IOSurface *v51;
  __IOSurface *v52;
  __IOSurface *v53;
  uint64_t v54;
  __IOSurface *v55;
  __IOSurface *v56;
  uint64_t v57;
  __IOSurface *v58;
  __IOSurface *v59;
  uint64_t v60;
  IOSurfaceRef v61;
  const UInt8 *device_parameters;
  uint64_t v63;
  uint64_t v64;
  GLfloat *v65;
  float v66;
  GLfloat v67;
  CFRunLoopMode *v68;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  float v71;
  float v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  __CFDictionary *Mutable;
  int v88;
  int v89;
  GLuint *v90;
  CVPixelBufferRef *v91;
  uint64_t i;
  GLuint *v93;
  int v94;
  int v95;
  GLsizei v96;
  GLsizei v97;
  int v98;
  int v99;
  int v100;
  int v101;
  GLint UniformLocation;
  GLuint v103;
  int v104;
  int v105;
  GLsizei v106;
  GLsizei v107;
  int v108;
  int v109;
  int v110;
  int v111;
  GLint v112;
  const __CFString *v113;
  float *v114;
  int v115;
  int v116;
  GLsizei v117;
  GLsizei v118;
  GLint v119;
  GLint v120;
  GLint v121;
  GLint v122;
  GLint v123;
  GLint v124;
  int v125;
  BOOL v126;
  GLsizei v127;
  GLsizei v128;
  int v129;
  int v130;
  GLint v131;
  GLint v132;
  GLfloat v133;
  GLfloat v134;
  GLint v135;
  GLint v136;
  GLint v137;
  GLint v138;
  __CFRunLoop *v139;
  uint64_t v140;
  const __CFDictionary *theDict;
  const void *v143;
  const void *v144;
  unsigned __int8 v145;
  unsigned __int8 v146;
  __IOSurface *buffer;
  IOSurfaceRef buffera;
  int v149;
  __CFRunLoopSource *v150;
  int v152;
  uint64_t v153;
  int v154;
  IOSurfaceRef IOSurface;
  OSType key;
  void *keya;
  CFAllocatorRef allocator;
  const __CFAllocator *allocatora;
  GLuint *allocatorb;
  uint64_t v161;
  float v162;
  int v163;
  GLfloat v164[56];
  IOSurfaceRef v165;
  _QWORD v166[5];

  v166[3] = *MEMORY[0x1E0C80C00];
  v15 = (_DWORD *)(a1 + 8);
  WaitForInitializationToFinish_0(a1 + 8);
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_151;
  if ((*v15 & 0xFFFFFFFD) == 0)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v140 = 4294967294;
    goto LABEL_127;
  }
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:");
  if (!a2 || !a3 || *a3 == a2)
    goto LABEL_151;
  v144 = a7;
  v153 = (uint64_t)v15;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if ((PixelFormatType & 0xFFFFFFEF) != 0x34323066)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v140 = FigSignalErrorAt();
    goto LABEL_127;
  }
  v17 = PixelFormatType;
  theDict = a5;
  v143 = a8;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
  v20 = CVPixelBufferGetWidthOfPlane(a2, 0);
  v21 = CVPixelBufferGetHeightOfPlane(a2, 0);
  if (v17 != CVPixelBufferGetPixelFormatType(*a3)
    || WidthOfPlane != CVPixelBufferGetWidthOfPlane(*a3, 1uLL)
    || HeightOfPlane != CVPixelBufferGetHeightOfPlane(*a3, 1uLL)
    || v20 != CVPixelBufferGetWidthOfPlane(*a3, 0)
    || v21 != CVPixelBufferGetHeightOfPlane(*a3, 0))
  {
LABEL_151:
    fig_log_get_emitter();
    FigDebugAssert3();
    v140 = 4294954516;
    goto LABEL_127;
  }
  IOSurface = CVPixelBufferGetIOSurface(a2);
  if (!IOSurface)
    goto LABEL_152;
  allocator = (CFAllocatorRef)a4;
  if (a4 >= 1)
  {
    v22 = a4;
    v23 = a3;
    while (CVPixelBufferGetIOSurface(*v23))
    {
      ++v23;
      if (!--v22)
        goto LABEL_17;
    }
    goto LABEL_152;
  }
LABEL_17:
  if (WidthOfPlane < 1
    || *(_DWORD *)(a1 + 68) < WidthOfPlane
    || HeightOfPlane < 1
    || *(_DWORD *)(a1 + 72) < HeightOfPlane
    || (v20 & 3) != 0
    || (v21 & 3) != 0)
  {
LABEL_152:
    fig_log_get_emitter();
LABEL_154:
    FigDebugAssert3();
    v140 = 0xFFFFFFFFLL;
    goto LABEL_127;
  }
  v152 = CVPixelBufferGetWidthOfPlane(a2, 0);
  v149 = CVPixelBufferGetHeightOfPlane(a2, 0);
  key = CVPixelBufferGetPixelFormatType(a2);
  glActiveTexture(0x84C0u);
  v24 = CVPixelBufferGetIOSurface(a2);
  if (!v24)
    goto LABEL_153;
  v146 = v20;
  buffer = v24;
  v145 = v21;
  v154 = a4;
  v25 = CVPixelBufferGetWidthOfPlane(a2, 0);
  v26 = CVPixelBufferGetHeightOfPlane(a2, 0);
  v27 = CVPixelBufferGetPixelFormatType(a2);
  v28 = v27;
  if (*(_DWORD *)(a1 + 76) != v25 || *(_DWORD *)(a1 + 80) != v26 || *(_DWORD *)(a1 + 88) != v27)
  {
    v29 = 0;
    v30 = a1 + 248;
    do
    {
      v31 = *(__CVBuffer **)(v30 + v29);
      if (v31)
      {
        CVPixelBufferRelease(v31);
        *(_QWORD *)(v30 + v29) = 0;
      }
      v29 += 8;
    }
    while (v29 != 24);
    v32 = 0;
    v33 = (GLuint *)(a1 + 112);
    v34 = a1 + 248;
    do
    {
      if (v32)
      {
        v35 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v34 + v32 - 8), 1uLL);
        v36 = *(__CVBuffer **)(v34 + v32 - 8);
      }
      else
      {
        v35 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
        v36 = a2;
      }
      v37 = CVPixelBufferGetHeightOfPlane(v36, 1uLL);
      YCC420CVPixelBufferRef = createYCC420CVPixelBufferRef(v35, v37, v28);
      *(_QWORD *)(v34 + v32) = YCC420CVPixelBufferRef;
      v39 = CVPixelBufferGetIOSurface(YCC420CVPixelBufferRef);
      if (!v39)
        goto LABEL_153;
      v40 = v39;
      if (!v32)
      {
        if (BindTextureToFbo(*(void **)(a1 + 56), v39, *(_DWORD *)(a1 + 128), 0, 0x1908u, 0))
          goto LABEL_153;
      }
      if (BindTextureToFbo(*(void **)(a1 + 56), v40, *(v33 - 4), *v33, 0x8227u, 0)
        || BindTextureToFbo(*(void **)(a1 + 56), v40, v33[17], v33[21], 0x1908u, 1uLL))
      {
        goto LABEL_153;
      }
      v32 += 8;
      ++v33;
    }
    while (v32 != 24);
  }
  *(_QWORD *)(a1 + 240) = a2;
  if (BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 124), 0, 0x1908u, 0)
    || BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 192), 0x1908u, 1uLL)|| BindTextureToFbo(*(void **)(a1 + 56), buffer, *(_DWORD *)(a1 + 92), *(_DWORD *)(a1 + 108), 0x8227u, 0))
  {
LABEL_153:
    fig_log_get_emitter();
    FigDebugAssert3();
    fig_log_get_emitter();
    FigDebugAssert3();
    glBindTexture(0xDE1u, 0);
    fig_log_get_emitter();
    goto LABEL_154;
  }
  if (*(_DWORD *)(a1 + 76) != v152 || *(_DWORD *)(a1 + 80) != v149 || *(_DWORD *)(a1 + 84) != v154)
  {
    if (v154 != 1)
      goto LABEL_65;
LABEL_51:
    releaseOutputPixelBuffers(v153);
    v41 = 0;
    v42 = 1;
    v43 = 136;
    while (1)
    {
      v44 = a1 + v41;
      v45 = v41 ? (CVPixelBufferRef *)(a1 + v41 + 272) : a3;
      v46 = CVPixelBufferGetWidthOfPlane(*v45, 1uLL);
      v47 = CVPixelBufferGetHeightOfPlane(*v45, 1uLL);
      v48 = createYCC420CVPixelBufferRef(v46, v47, key);
      *(_QWORD *)(v44 + 280) = v48;
      v49 = CVPixelBufferGetIOSurface(v48);
      if (!v49)
        goto LABEL_153;
      v50 = v49;
      v51 = CVPixelBufferGetIOSurface(*v45);
      if (!v51
        || BindLumaAndChromaTexturesToDualFbo(*(void **)(a1 + 56), v50, *(_DWORD *)(a1 + v43), v51, *(_DWORD *)(a1 + v43 + 72), *(_DWORD *)(a1 + v43 + 16)))
      {
        goto LABEL_153;
      }
      if (v42 == 3)
      {
        v52 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(v44 + 280));
        if (!v52
          || BindTextureToFbo(*(void **)(a1 + 56), v52, *(_DWORD *)(a1 + v43 + 76), *(_DWORD *)(a1 + v43 + 92), 0x1908u, 1uLL))
        {
          goto LABEL_153;
        }
      }
      else if (v42 == 1
             && BindTextureToFbo(*(void **)(a1 + 56), v50, *(_DWORD *)(a1 + v43 + 32), 0, 0x1908u, 0))
      {
        goto LABEL_153;
      }
      v41 += 8;
      ++v42;
      v43 += 4;
      if (v41 == 24)
        goto LABEL_65;
    }
  }
  if (v154 == 1 && *(_DWORD *)(a1 + 88) != key)
    goto LABEL_51;
LABEL_65:
  *(_DWORD *)(a1 + 76) = v152;
  *(_DWORD *)(a1 + 80) = v149;
  *(_DWORD *)(a1 + 84) = v154;
  *(_DWORD *)(a1 + 88) = key;
  v53 = CVPixelBufferGetIOSurface(*a3);
  if (!v53
    || BindTextureToFbo(*(void **)(a1 + 56), v53, *(_DWORD *)(a1 + 164), *(_DWORD *)(a1 + 172), 0x1908u, 0))
  {
    goto LABEL_153;
  }
  if (v154 >= 1)
  {
    v54 = 0;
    do
    {
      v55 = CVPixelBufferGetIOSurface(a3[v54]);
      if (!v55)
        goto LABEL_153;
      v56 = v55;
      if (v54 >= (v154 - 1))
      {
        if (BindTextureToFbo(*(void **)(a1 + 56), v55, *(_DWORD *)(a1 + 4 * v54 + 208), *(_DWORD *)(a1 + 4 * v54 + 224), 0x1908u, 1uLL))goto LABEL_153;
        v57 = v54 + 1;
      }
      else
      {
        v57 = v54 + 1;
        v58 = CVPixelBufferGetIOSurface(a3[v54 + 1]);
        if (!v58)
          goto LABEL_153;
        v59 = v58;
        if (BindLumaAndChromaTexturesToDualFbo(*(void **)(a1 + 56), v58, *(_DWORD *)(a1 + 8 + 4 * v57 + 124), v56, *(_DWORD *)(a1 + 8 + 4 * v54 + 200), *(_DWORD *)(a1 + 8 + 4 * v57 + 140)))goto LABEL_153;
        if (!v54)
        {
          if (BindTextureToFbo(*(void **)(a1 + 56), v59, *(_DWORD *)(a1 + 4 * v57 + 164), 0, 0x1908u, 0))goto LABEL_153;
          v57 = 1;
        }
      }
      *(_QWORD *)(a1 + 8 * v54 + 272) = a3[v54];
      v54 = v57;
    }
    while ((CFAllocatorRef)v57 != allocator);
  }
  glBindTexture(0xDE1u, 0);
  v60 = 0;
  v165 = IOSurface;
  memset(v166, 0, 24);
  do
  {
    CVBufferPropagateAttachments(a2, *(CVBufferRef *)(a1 + v60 * 8 + 248));
    v61 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + v60 * 8 + 248));
    v166[v60] = v61;
    if (!v61)
    {
      fig_log_get_emitter();
      goto LABEL_154;
    }
    ++v60;
  }
  while (v60 != 3);
  v162 = 0.0;
  v161 = 0;
  get_exposure_parameters(theDict, a6, (float *)&v161);
  device_parameters = get_device_parameters(a1, theDict, a6, v144, v143);
  v63 = 0;
  v64 = v161;
  v65 = v164;
  v66 = v162;
  do
  {
    compute_noise_model(v153, (uint64_t)v65, (uint64_t)device_parameters, v63++, 1, *(float *)&v64, *((float *)&v64 + 1), v66);
    v65 += 14;
  }
  while (v63 != 4);
  v67 = *((float *)device_parameters + 8);
  v68 = (CFRunLoopMode *)MEMORY[0x1E0C9B270];
  buffera = (IOSurfaceRef)device_parameters;
  if (*(_QWORD *)(a1 + 24))
  {
    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
    Current = CFRunLoopGetCurrent();
    v150 = RunLoopSource;
    CFRunLoopAddSource(Current, RunLoopSource, *v68);
  }
  else
  {
    v150 = 0;
  }
  if (((v145 | v146) & 0xF) != 0 || !*(_BYTE *)(a1 + 304))
  {
    allocatorb = (GLuint *)(a1 + 344);
    v90 = (GLuint *)(a1 + 196);
    v91 = (CVPixelBufferRef *)(a1 + 248);
    for (i = 10; i != 52; i += 14)
    {
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, *(v90 - 26));
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      glTexParameterf(0xDE1u, 0x2800u, 9729.0);
      glTexParameterf(0xDE1u, 0x2801u, 9729.0);
      glBindFramebuffer(0x8D40u, *(v90 - 21));
      v93 = *(GLuint **)&v164[i];
      bindVertexAttributes((uint64_t)v93);
      v94 = CVPixelBufferGetWidthOfPlane(*v91, 0);
      if (v94 >= 0)
        v95 = v94;
      else
        v95 = v94 + 1;
      v96 = v95 >> 1;
      v97 = CVPixelBufferGetHeightOfPlane(*v91, 0);
      v98 = CVPixelBufferGetWidthOfPlane(*(v91 - 1), 0);
      if (v98 >= 0)
        v99 = v98;
      else
        v99 = v98 + 1;
      v100 = v99 >> 1;
      v101 = CVPixelBufferGetHeightOfPlane(*(v91 - 1), 0);
      glViewport(0, 0, v96, v97);
      glUseProgram(*v93);
      UniformLocation = glGetUniformLocation(*v93, "pixel_pitch");
      glUniform2f(UniformLocation, 1.0 / (float)(v100 - 1), 1.0 / (float)(v101 - 1));
      glDrawArrays(5u, 0, 4);
      glFlush();
      glActiveTexture(0x84C0u);
      glBindTexture(0xDE1u, *(v90 - 5));
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      glTexParameterf(0xDE1u, 0x2800u, 9729.0);
      glTexParameterf(0xDE1u, 0x2801u, 9729.0);
      bindVertexAttributes((uint64_t)allocatorb);
      v103 = *v90++;
      glBindFramebuffer(0x8D40u, v103);
      v104 = CVPixelBufferGetWidthOfPlane(*v91, 1uLL);
      if (v104 >= 0)
        v105 = v104;
      else
        v105 = v104 + 1;
      v106 = v105 >> 1;
      v107 = CVPixelBufferGetHeightOfPlane(*v91, 1uLL);
      v108 = CVPixelBufferGetWidthOfPlane(*(v91 - 1), 1uLL);
      if (v108 >= 0)
        v109 = v108;
      else
        v109 = v108 + 1;
      v110 = v109 >> 1;
      v111 = CVPixelBufferGetHeightOfPlane(*(v91 - 1), 1uLL);
      glViewport(0, 0, v106, v107);
      glUseProgram(*allocatorb);
      v112 = glGetUniformLocation(*allocatorb, "pixel_pitch");
      glUniform2f(v112, 1.0 / (float)(v110 - 1), 1.0 / (float)(v111 - 1));
      glDrawArrays(5u, 0, 4);
      glFlush();
      ++v91;
    }
  }
  else
  {
    v163 = 0;
    v71 = v164[12];
    v72 = v164[13];
    v73 = *(_DWORD *)(a1 + 32);
    v74 = *(_DWORD *)(a1 + 36);
    v75 = *(_DWORD *)(a1 + 40);
    v76 = *(_DWORD *)(a1 + 44);
    v77 = *(_DWORD *)(a1 + 48);
    v78 = *(_DWORD *)(a1 + 52);
    v79 = v76 * v74;
    v80 = (unsigned int *)malloc_type_calloc(1uLL, 4 * (2 * (v76 * v74 + v75 * v73)), 0x100004052888210uLL);
    if (v80)
    {
      v81 = v80;
      m2m_filter_coefficients(v74, v76, v77, v78, v80, v72);
      m2m_filter_coefficients(v74, v76, v77, v78, &v81[v79], v71);
      m2m_filter_coefficients(v73, v75, v77, v78, &v81[v79 + v79], v72);
      m2m_filter_coefficients(v73, v75, v77, v78, &v81[v79 + v79 + v75 * v73], v71);
      IOSurfaceAcceleratorSetCustomFilter();
      free(v81);
    }
    v82 = 0;
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v83 = (const void *)*MEMORY[0x1E0D3A340];
    v84 = (const void *)*MEMORY[0x1E0C9AE50];
    v85 = (const void *)*MEMORY[0x1E0D3A280];
    v86 = (const void *)*MEMORY[0x1E0D3A248];
    keya = (void *)*MEMORY[0x1E0D3A328];
    while (v82 != 24)
    {
      Mutable = CFDictionaryCreateMutable(allocatora, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(Mutable, v83, v84);
      CFDictionarySetValue(Mutable, v85, v84);
      CFDictionarySetValue(Mutable, v86, v84);
      if (v82 != 16)
        CFDictionarySetValue(Mutable, keya, v84);
      v88 = IOSurfaceAcceleratorTransferSurface();
      CFRelease(Mutable);
      v82 += 8;
      if (v88)
      {
        v89 = 0;
        goto LABEL_121;
      }
    }
    if (v163 <= 0)
    {
      v113 = (const __CFString *)*MEMORY[0x1E0C9B280];
      do
        CFRunLoopRunInMode(v113, 1.0, 1u);
      while (v163 < 1);
    }
  }
  v114 = (float *)((char *)buffera + 24);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 188));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 104));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 236));
  bindVertexAttributes(a1 + 356);
  v115 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 296), 1uLL);
  if (v115 >= 0)
    v116 = v115;
  else
    v116 = v115 + 1;
  v117 = v116 >> 1;
  v118 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 296), 1uLL);
  glViewport(0, 0, v117, v118);
  glUseProgram(*(_DWORD *)(a1 + 356));
  v119 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "luma_sigma_constant");
  glUniform1f(v119, v164[44]);
  v120 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_sigma_r");
  glUniform1f(v120, v164[46]);
  v121 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_sigma_b");
  glUniform1f(v121, v164[47]);
  v122 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "lens_shading_factors");
  glUniform2f(v122, *((float *)buffera + 6) + -1.0, *((float *)buffera + 7) + -1.0);
  v123 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "chroma_demoire_strength");
  glUniform1f(v123, v67);
  v124 = glGetUniformLocation(*(_DWORD *)(a1 + 356), "pixel_pitch");
  glUniform2f(v124, 1.0 / (float)v117, 1.0 / (float)v118);
  glDrawArrays(5u, 0, 4);
  glFlush();
  remix_denoise_luma_chroma_level(v153, (uint64_t)v164, v114, 3, v67);
  v125 = 2;
  do
  {
    remix_denoise_luma_chroma_level(v153, (uint64_t)v164, v114, v125, v67);
    v126 = v125-- != 0;
  }
  while (v125 != 0 && v126);
  v127 = (int)CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 272), 0) / 4;
  v128 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 272), 0);
  v129 = (int)CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 280), 0) / 4;
  v130 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(a1 + 280), 0);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 124));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 128));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glActiveTexture(0x84C2u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 172));
  bindVertexAttributes(a1 + 368);
  glViewport(0, 0, v127, v128);
  glUseProgram(*(_DWORD *)(a1 + 368));
  v131 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "diff_remix");
  glUniform1f(v131, v164[6]);
  v132 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "pixel_pitch");
  v133 = 1.0 / (double)(v129 - 1);
  v134 = 1.0 / (double)(v130 - 1);
  glUniform2f(v132, v133, v134);
  v135 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_intercept");
  glUniform1f(v135, v164[0]);
  v136 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_max");
  glUniform1f(v136, v164[2]);
  v137 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "luma_sigma_slope");
  glUniform1f(v137, v164[1]);
  v138 = glGetUniformLocation(*(_DWORD *)(a1 + 368), "flatness_threshold");
  glUniform1f(v138, v164[9]);
  glDrawArrays(5u, 0, 4);
  glFlush();
  v89 = 1;
LABEL_121:
  if (v150)
  {
    v139 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v139, v150, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  if (!v89)
  {
    fig_log_get_emitter();
    goto LABEL_154;
  }
  if (v154 >= 2)
    bzero((void *)(a1 + 280), 8 * (v154 - 1));
  multibandNoiseReductionFinalize(a6);
  v140 = 0;
LABEL_127:
  glGetError();
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
  return v140;
}

uint64_t multiBandNoiseReductionPyramidLayers(_DWORD *a1)
{
  if (a1 && *a1 == 1459126783)
    return 4;
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t multiBandNoiseReductionWithPyramid(_DWORD *a1, CMSampleBufferRef sbuf, CVPixelBufferRef *a3, int a4, const __CFDictionary *a5)
{
  __CVBuffer *ImageBuffer;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  CFTypeRef v13;
  uint64_t v14;

  ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  v11 = (const __CFDictionary *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D05CB0], 0);
  if (ImageBuffer != *a3 && a1 && *a1 == 1459126783 && ((v12 = v11, a4 == 1) || a4 == 4))
  {
    v13 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E0D08808], 0);
    v14 = multiBandNoiseReductionGPU((uint64_t)a1, ImageBuffer, a3, a4, v12, a5, v13, 0);
    if ((_DWORD)v14)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return v14;
}

uint64_t multiBandNoiseReductionPyramidFusionMaxBuffers(_DWORD *a1)
{
  if (a1 && *a1 == 1459126783)
    return 4;
  fig_log_get_emitter();
  FigDebugAssert3();
  return 4294954516;
}

uint64_t multiBandPyramidFusion(const __CFNumber *Value, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, CFDictionaryRef theDict)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  GLuint *v28;
  GLuint *v29;
  uint64_t v30;
  GLuint *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  float32x2_t v37;
  __CVBuffer *v38;
  int WidthOfPlane;
  int HeightOfPlane;
  int BytesPerRowOfPlane;
  unsigned __int8 *BaseAddressOfPlane;
  uint64_t v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  int32x2_t v55;
  uint64_t v56;
  int32x2_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  const __CFDictionary *v62;
  const __CFDictionary *v63;
  const UInt8 *device_parameters;
  uint64_t v65;
  uint64_t v66;
  float v67;
  _QWORD *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  int v72;
  size_t v73;
  OSType PixelFormatType;
  __CVBuffer *YCC420CVPixelBufferRef;
  IOSurfaceRef IOSurface;
  IOSurfaceRef v77;
  int v78;
  const __CFData *v79;
  const UInt8 *BytePtr;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  GLuint *v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  GLuint *v92;
  GLuint *v93;
  GLuint *v94;
  GLuint *v95;
  uint64_t v96;
  GLuint *v97;
  __CVBuffer *v98;
  int v99;
  int v100;
  OSType v101;
  __CVBuffer *v102;
  __CVBuffer *v103;
  __IOSurface *v104;
  uint64_t v106;
  _QWORD v107[3];
  const __CFDictionary *v108;
  uint64_t v109;
  char *v110;
  CFDictionaryRef v111;
  uint64_t v112;
  const __CFNumber *v113;
  float v114;
  uint64_t v115;
  float v116;
  id v117;
  GLuint *v118;
  GLuint *v119;
  GLuint *v120;
  GLuint *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _QWORD v125[4];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _QWORD v129[47];
  _QWORD v130[30];

  v113 = Value;
  v130[28] = *MEMORY[0x1E0C80C00];
  if ((int)a4 > 4)
    return 4294954516;
  v11 = a4;
  v107[1] = v7;
  LODWORD(v117) = 0;
  v111 = a6;
  if (theDict && (Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("TNRFusionAlgorithm"))) != 0)
  {
    Value = (const __CFNumber *)CFNumberGetValue(Value, kCFNumberIntType, &v117);
    v14 = (int)v117;
  }
  else
  {
    v14 = 0;
  }
  v107[2] = v107;
  v108 = theDict;
  v15 = v11;
  v16 = MEMORY[0x1E0C80A78](Value, a2, a3, a4);
  v20 = MEMORY[0x1E0C80A78](v16, v17, v18, v19);
  v24 = MEMORY[0x1E0C80A78](v20, v21, v22, v23);
  MEMORY[0x1E0C80A78](v24, v25, v26, v27);
  memset(v129, 0, sizeof(v129));
  v128 = 0u;
  v127 = 0u;
  v126 = 0u;
  memset(v125, 0, sizeof(v125));
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v119 = v28;
  v120 = v29;
  v121 = (GLuint *)((char *)v107 - v30);
  v112 = (uint64_t)v113 + 8;
  DWORD2(v128) = v11;
  v117 = (id)*((_QWORD *)v113 + 7);
  v118 = v31;
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:");
  if ((int)v11 >= 1)
    memcpy(v125, a2, 8 * v11);
  v32 = 0;
  BYTE12(v128) = v14 == 1;
  v129[6] = a3;
  v33 = (char *)v113 + 240;
  do
  {
    v34 = a5;
    if (v32)
      v34 = *(_QWORD *)&v33[v32];
    if (!v34)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v8 = 4294954514;
      goto LABEL_83;
    }
    *(_QWORD *)((char *)&v126 + v32) = v34;
    v32 += 8;
  }
  while (v32 != 32);
  v109 = v11;
  if ((int)v11 >= 1)
  {
    v35 = 0;
    v36 = 1;
    v37 = (float32x2_t)vdup_n_s32(0x437F0000u);
    while (1)
    {
      v38 = *(__CVBuffer **)(v125[v35] + 24);
      WidthOfPlane = CVPixelBufferGetWidthOfPlane(v38, 0);
      HeightOfPlane = CVPixelBufferGetHeightOfPlane(v38, 0);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v38, 0);
      if (CVPixelBufferLockBaseAddress(v38, 1uLL))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        fig_log_get_emitter();
        v8 = 0xFFFFFFFFLL;
LABEL_96:
        FigDebugAssert3();
        goto LABEL_82;
      }
      BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v38, 0);
      if (HeightOfPlane < 1)
      {
        v45 = 0;
        v44 = 0;
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = BaseAddressOfPlane;
          v47 = WidthOfPlane;
          if (WidthOfPlane >= 1)
          {
            do
            {
              v49 = *v46++;
              v48 = v49;
              v50 = v49 >= 0x81;
              if (v49 >= 0x81)
                v48 = 0;
              v45 += v48;
              if (!v50)
                ++v44;
              --v47;
            }
            while (v47);
          }
          ++v43;
          BaseAddressOfPlane += BytesPerRowOfPlane;
        }
        while (v43 != HeightOfPlane);
      }
      if ((double)WidthOfPlane * 0.05 * (double)HeightOfPlane >= (double)v44)
        break;
      *((float *)v129 + 3 * v35) = (float)((float)v45 / (float)v44) / 255.0;
      v51 = CVPixelBufferGetWidthOfPlane(v38, 1uLL);
      v52 = CVPixelBufferGetHeightOfPlane(v38, 1uLL);
      v53 = CVPixelBufferGetBytesPerRowOfPlane(v38, 1uLL);
      v54 = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v38, 1uLL);
      if (v52 < 1)
      {
        v60 = 0;
        v57 = 0;
      }
      else
      {
        v56 = 0;
        v57 = 0;
        do
        {
          v58 = v54;
          v59 = v51;
          if (v51 >= 1)
          {
            do
            {
              v55.i32[0] = *v58;
              v55.i32[1] = v58[1];
              v57 = vadd_s32(v57, v55);
              v58 += 2;
              --v59;
            }
            while (v59);
          }
          ++v56;
          v54 += v53;
        }
        while (v56 != v52);
        v60 = (v51 & ~(v51 >> 31)) * v52;
      }
      *(float *)v55.i32 = (float)v60;
      *(float32x2_t *)((char *)v129 + 12 * v35 + 4) = vdiv_f32(vdiv_f32(vcvt_f32_s32(v57), (float32x2_t)vdup_lane_s32(v55, 0)), v37);
      CVPixelBufferUnlockBaseAddress(v38, 1uLL);
      v36 = ++v35 < v15;
      if (v35 == v15)
        goto LABEL_41;
    }
    if (v36)
    {
      v61 = &v129[1];
      do
      {
        *((_QWORD *)v61 - 1) = 0x3F00000000000000;
        *v61 = 1056964608;
        v61 += 3;
        --v15;
      }
      while (v15);
    }
  }
LABEL_41:
  v116 = 0.0;
  v115 = 0;
  v62 = v111;
  v63 = v108;
  get_exposure_parameters(v111, v108, (float *)&v115);
  device_parameters = get_device_parameters((uint64_t)v113, v62, v63, 0, 0);
  v65 = 0;
  v66 = v115;
  v67 = v116;
  v68 = &v129[7];
  v69 = v112;
  do
  {
    compute_noise_model(v69, (uint64_t)v68, (uint64_t)device_parameters, v65++, 0, *(float *)&v66, *((float *)&v66 + 1), v67);
    v68 += 7;
  }
  while (v65 != 4);
  LODWORD(v11) = v109;
  glGenTextures(v109, v118);
  glGenTextures(v11, v119);
  glGenTextures(v11, v120);
  glGenTextures(v11, v121);
  glGenTextures(4, (GLuint *)&v122 + 1);
  glGenTextures(4, (GLuint *)&v123 + 1);
  glGenFramebuffers(1, (GLuint *)&v124 + 1);
  glGenFramebuffers(1, (GLuint *)&v124 + 3);
  glGenFramebuffers(1, (GLuint *)&v124 + 2);
  if (BYTE12(v128))
  {
    v71 = (uint64_t)v113;
    v72 = CVPixelBufferGetWidthOfPlane(*((CVPixelBufferRef *)v113 + 33), 0);
    v73 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v71 + 264), 0);
    PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v71 + 240));
    YCC420CVPixelBufferRef = createYCC420CVPixelBufferRef(v72, v73, PixelFormatType);
    *(_QWORD *)&v128 = YCC420CVPixelBufferRef;
    if (!YCC420CVPixelBufferRef)
    {
LABEL_98:
      fig_log_get_emitter();
      FigDebugAssert3();
LABEL_100:
      v8 = 0xFFFFFFFFLL;
      goto LABEL_83;
    }
    IOSurface = CVPixelBufferGetIOSurface(YCC420CVPixelBufferRef);
    if (!IOSurface)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      CVPixelBufferRelease((CVPixelBufferRef)v128);
      *(_QWORD *)&v128 = 0;
      goto LABEL_100;
    }
    v77 = IOSurface;
    v8 = 1;
    glGenTextures(1, (GLuint *)&v122);
    glActiveTexture(0x84C0u);
    glBindTexture(0xDE1u, v122);
    if (v72 >= 0)
      v78 = v72;
    else
      v78 = v72 + 1;
    BYTE4(v106) = 0;
    LODWORD(v106) = 0;
    if ((objc_msgSend(v117, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v77, 3553, 33323, (v78 >> 1), v73, 33319, 5121, v106) & 1) == 0)
    {
      fig_log_get_emitter();
      goto LABEL_102;
    }
    if (!v63)
      goto LABEL_56;
  }
  else
  {
    *(_QWORD *)&v128 = 0;
    LODWORD(v122) = 0;
    if (!v63)
      goto LABEL_56;
  }
  v79 = (const __CFData *)CFDictionaryGetValue(v63, CFSTR("kTMBNRTuningParameters"));
  if (v79)
  {
    BytePtr = CFDataGetBytePtr(v79);
    if (BytePtr)
    {
      v81 = *((_OWORD *)BytePtr + 1);
      *(_OWORD *)&v129[35] = *(_OWORD *)BytePtr;
      *(_OWORD *)&v129[37] = v81;
      v82 = *((_OWORD *)BytePtr + 2);
      v83 = *((_OWORD *)BytePtr + 3);
      v84 = *((_OWORD *)BytePtr + 5);
      *(_OWORD *)&v129[43] = *((_OWORD *)BytePtr + 4);
      *(_OWORD *)&v129[45] = v84;
      *(_OWORD *)&v129[39] = v82;
      *(_OWORD *)&v129[41] = v83;
      goto LABEL_57;
    }
  }
LABEL_56:
  LODWORD(v70) = v66;
  initialize_fusion_parameters((uint64_t)&v129[35], BYTE12(v128), v70);
LABEL_57:
  v114 = 0.0;
  v85 = (GLuint *)((char *)v113 + 416);
  v86 = fuse_remix_level((uint64_t)&v117, (GLuint *)v113 + 104, 3u, 0, 1, 0.0);
  if ((_DWORD)v86)
  {
    v8 = v86;
    fig_log_get_emitter();
LABEL_102:
    FigDebugAssert3();
    goto LABEL_83;
  }
  if (compute_mismatch_coefficient((uint64_t)&v117, &v114, *(float *)&v66))
    goto LABEL_98;
  v87 = v114;
  v88 = v112;
  if (BYTE12(v128) && v114 > 0.0)
  {
    v89 = 0;
    v90 = v130;
    do
    {
      compute_noise_model(v88, (uint64_t)v90, (uint64_t)device_parameters, v89++, 1, *(float *)&v66, *((float *)&v66 + 1), v67);
      v90 += 7;
    }
    while (v89 != 4);
  }
  v91 = 0;
  v92 = (GLuint *)((char *)v113 + 452);
  v93 = (GLuint *)((char *)v113 + 440);
  v94 = (GLuint *)((char *)v113 + 428);
  v110 = (char *)v113 + 144;
  v111 = (CFDictionaryRef)((char *)&v127 + 8);
  while (1)
  {
    if (v91 < 0xFFFFFFFFFFFFFFFDLL)
      v95 = v93;
    else
      v95 = v92;
    v96 = fuse_remix_level((uint64_t)&v117, v95, (int)v91 + 3, 1, 0, v87);
    if ((_DWORD)v96
      || (v91 + 3 >= 3 ? (v97 = v85) : (v97 = v94),
          v96 = fuse_remix_level((uint64_t)&v117, v97, (int)v91 + 3, 0, 0, v87),
          (_DWORD)v96))
    {
LABEL_92:
      v8 = v96;
      fig_log_get_emitter();
      goto LABEL_96;
    }
    if (v91 != -3 && BYTE12(v128) && v87 > 0.0)
      break;
LABEL_80:
    if (--v91 == -4)
    {
      multibandNoiseReductionFinalize(v108);
      v8 = 0;
      goto LABEL_82;
    }
  }
  v98 = (__CVBuffer *)*((_QWORD *)v111 + v91);
  v99 = CVPixelBufferGetWidthOfPlane(v98, 0);
  v100 = CVPixelBufferGetHeightOfPlane(v98, 0);
  v101 = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v126);
  v102 = createYCC420CVPixelBufferRef(v99, v100, v101);
  if (!v102)
    goto LABEL_93;
  v103 = v102;
  v104 = CVPixelBufferGetIOSurface(v102);
  if (!v104)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    CVPixelBufferRelease(v103);
    goto LABEL_94;
  }
  v96 = BindTextureToFbo(*((void **)v113 + 7), v104, *(_DWORD *)&v110[4 * v91], DWORD2(v124), 0x8227u, 0);
  if ((_DWORD)v96)
    goto LABEL_92;
  denoise_luma_level(v112, DWORD2(v124), (uint64_t)v130, v122, v91 + 3);
  if (!CVPixelBufferCopyPlane(v98, v103))
  {
    CVPixelBufferRelease(v103);
    goto LABEL_80;
  }
LABEL_93:
  fig_log_get_emitter();
  FigDebugAssert3();
LABEL_94:
  v8 = 0xFFFFFFFFLL;
LABEL_82:
  LODWORD(v11) = v109;
LABEL_83:
  glGetError();
  if ((_QWORD)v128)
  {
    CVPixelBufferRelease((CVPixelBufferRef)v128);
    *(_QWORD *)&v128 = 0;
  }
  glDeleteTextures(v11, v118);
  glDeleteTextures(v11, v119);
  glDeleteTextures(v11, v120);
  glDeleteTextures(v11, v121);
  glDeleteTextures(1, (const GLuint *)&v122);
  glDeleteTextures(4, (const GLuint *)&v122 + 1);
  glDeleteTextures(4, (const GLuint *)&v123 + 1);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 1);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 3);
  glDeleteFramebuffers(1, (const GLuint *)&v124 + 2);
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
  return v8;
}

float get_exposure_parameters(CFDictionaryRef theDict, CFDictionaryRef a2, float *a3)
{
  const __CFDictionary *Value;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float result;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  int valuePtr;

  if (a2)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("ClientSpecifiedMetadata"));
    if (Value)
      theDict = Value;
  }
  valuePtr = 1017370378;
  v22 = 256;
  v23 = 256;
  v21 = 256;
  v20 = 4096;
  v19 = 4096;
  v18 = 4096;
  if (!theDict)
    goto LABEL_19;
  v6 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06A20]);
  if (v6)
    CFNumberGetValue(v6, kCFNumberFloatType, &valuePtr);
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D067E0]);
  if (v7)
    CFNumberGetValue(v7, kCFNumberIntType, &v23);
  v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06F78]);
  if (v8)
    CFNumberGetValue(v8, kCFNumberIntType, &v22);
  v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06F60]);
  if (v9)
    CFNumberGetValue(v9, kCFNumberIntType, &v21);
  v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06820]);
  if (v10)
    CFNumberGetValue(v10, kCFNumberShortType, &v20);
  v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06848]);
  if (v11)
    CFNumberGetValue(v11, kCFNumberShortType, &v19);
  v12 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D067E8]);
  if (v12)
  {
    CFNumberGetValue(v12, kCFNumberShortType, &v18);
    v13 = (float)v18;
  }
  else
  {
LABEL_19:
    v13 = 4096.0;
  }
  v14 = (float)v20;
  v15 = (double)v23 * 0.00390625 * ((double)v22 * 0.00390625) * ((double)v21 * 0.00390625);
  v16 = (float)v19 / v14;
  *a3 = v15;
  a3[1] = v16;
  result = v13 / v14;
  a3[2] = result;
  return result;
}

const UInt8 *get_device_parameters(uint64_t a1, CFDictionaryRef theDict, const __CFDictionary *a3, const void *a4, const void *a5)
{
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  CFTypeID v11;
  CFTypeID v12;
  CFTypeID v13;
  void **v14;
  void *v15;
  const UInt8 *result;
  uint64_t valuePtr;

  if (theDict)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D06DE8]);
    if (!a3)
      goto LABEL_10;
  }
  else
  {
    Value = 0;
    if (!a3)
      goto LABEL_10;
  }
  if (!Value)
  {
    v10 = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("ClientSpecifiedMetadata"));
    Value = v10;
    if (v10)
    {
      v11 = CFGetTypeID(v10);
      if (v11 == CFDictionaryGetTypeID())
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0D06DE8]);
      else
        Value = 0;
    }
  }
LABEL_10:
  valuePtr = 0;
  if (a4)
  {
    v12 = CFGetTypeID(a4);
    if (v12 == CFNumberGetTypeID())
      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  }
  if (!a5
    || (v13 = CFGetTypeID(a5), v13 != CFNumberGetTypeID())
    || (CFNumberGetValue((CFNumberRef)a5, kCFNumberSInt32Type, &valuePtr), (_DWORD)valuePtr != 1))
  {
    switch(HIDWORD(valuePtr))
    {
      case 0:
        v14 = (void **)(a1 + 480);
        if (!Value)
          goto LABEL_29;
        goto LABEL_26;
      case 1:
        v14 = (void **)(a1 + 488);
        if (!Value)
          goto LABEL_29;
        goto LABEL_26;
      case 2:
        v14 = (void **)(a1 + 496);
        if (!Value)
          goto LABEL_29;
        goto LABEL_26;
      case 3:
        v14 = (void **)(a1 + 504);
        if (Value)
          goto LABEL_26;
        goto LABEL_29;
      default:
        goto LABEL_29;
    }
  }
  v14 = (void **)(a1 + 512);
  if (Value)
  {
LABEL_26:
    v15 = *v14;
    if (*v14)
    {
      result = get_device_parameters_for_fusion_type(a1, Value, *v14);
      if (result)
        return result;
      if (v15 == *(void **)(a1 + 488))
      {
        result = get_device_parameters_for_fusion_type(a1, Value, *(void **)(a1 + 480));
        if (result)
          return result;
      }
    }
  }
LABEL_29:
  if (get_device_parameters_spamCountDown >= 1)
    --get_device_parameters_spamCountDown;
  return (const UInt8 *)&N53_RFC;
}

void compute_noise_model(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, float a6, float a7, float a8)
{
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;

  v15 = 0.0;
  v16 = 1.0;
  v17 = 1.0;
  v18 = 1.0;
  v19 = 0.0;
  v20 = 0.0;
  if (*(_DWORD *)(a3 + 124) > a4)
  {
    v21 = *(_QWORD *)(a3 + 128);
    v23 = v21 + 96 * a4;
    v16 = scan_entries(*(float **)(v23 + 24), *(_DWORD *)(v23 + 16), a6);
    v17 = scan_entries(*(float **)(v23 + 8), *(_DWORD *)v23, a6);
    v18 = scan_entries(*(float **)(v23 + 40), *(_DWORD *)(v23 + 32), a6);
    v24 = *(_DWORD *)(v23 + 48);
    if (v24 >= 1)
      v15 = scan_entries(*(float **)(v21 + 96 * a4 + 56), v24, a6);
    v25 = *(_DWORD *)(v21 + 96 * a4 + 64);
    if (v25 >= 1)
      v19 = scan_entries(*(float **)(v21 + 96 * a4 + 72), v25, a6);
    v26 = *(_DWORD *)(v21 + 96 * a4 + 80);
    if (v26 < 1)
      v20 = 0.0;
    else
      v20 = scan_entries(*(float **)(v21 + 96 * a4 + 88), v26, a6);
  }
  *(float *)(a2 + 24) = v18;
  *(float *)(a2 + 28) = v15;
  *(float *)(a2 + 32) = v19;
  *(float *)(a2 + 36) = v20;
  if (a5)
    v27 = v16;
  else
    v27 = 1.0;
  if (!a5)
    v17 = 1.0;
  v28 = ldexpf(1.0, -a4);
  v29 = (double)-a4 / pow(a6, (float)(v28 / *(float *)(a3 + 4)));
  v30 = exp2f(v29);
  v31 = (float)(v17 * powf(a6, *(float *)a3)) * v30;
  v32 = (float)(1.0 / sqrtf((float)(1 << a4))) * 0.0039216;
  v33 = v32 * v31;
  *(float *)a2 = (float)(v32 * v31) / *(float *)(a3 + 8);
  if (a6 <= 8.0)
    v34 = v31 / *(float *)(a3 + 12);
  else
    v34 = v31 / (*(float *)(a3 + 12) + *(float *)(a3 + 12));
  *(float *)(a2 + 4) = v34;
  *(float *)(a2 + 8) = v33;
  v35 = (double)~a4 / 1.9;
  v36 = (float)((float)(a4 + 1) * (float)(a4 + 1)) * powf(*(float *)(a3 + 20), v35);
  v37 = v32 * v27;
  v38 = a6 * a7;
  v39 = *(float *)(a3 + 16);
  *(float *)(a2 + 16) = v36 * (float)(v37 * powf(v38, v39));
  *(float *)(a2 + 20) = v36 * (float)(v37 * powf(a6 * a8, v39));
  if (!a4)
  {
    v41 = scan_entries((float *)(a3 + 40), *(_DWORD *)(a3 + 120), a6);
    if (v41 < 4.0)
    {
      *(_QWORD *)(a2 + 40) = a1 + 300;
      v40 = 1061997773;
      goto LABEL_23;
    }
    if (v41 >= 6.0)
    {
      *(_QWORD *)(a2 + 40) = a1 + 324;
      v40 = 1053609165;
      goto LABEL_23;
    }
  }
  *(_QWORD *)(a2 + 40) = a1 + 312;
  v40 = 1056964608;
LABEL_23:
  *(_DWORD *)(a2 + 48) = v40;
  *(_DWORD *)(a2 + 52) = 1056964608;
}

CVPixelBufferRef createYCC420CVPixelBufferRef(int a1, int a2, OSType a3)
{
  const __CFAllocator *v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v10;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA91A8], (const void *)*MEMORY[0x1E0C9AE50]);
  v10 = CFDictionaryCreateMutable(v6, 0, v7, v8);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v10);
  CFRelease(v10);
  CVPixelBufferCreate(v6, a1, a2, a3, Mutable, &pixelBufferOut);
  CFRelease(Mutable);
  return pixelBufferOut;
}

uint64_t initialize_fusion_parameters(uint64_t result, int a2, double a3)
{
  float v3;
  double v4;
  unint64_t v5;
  float v6;
  double v7;
  float v8;
  double v9;
  unsigned int v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  double v15;
  float64x2_t v16;
  float32x2_t v17;
  int8x8_t v18;
  int8x8_t v19;
  int64x2_t v20;
  int8x8_t v30;
  int64x2_t v32;
  float32x2_t *v33;
  int64x2_t v34;
  int8x8_t v35;
  float32x2_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x8_t v41;
  int32x2_t v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;
  int v47;
  float v48;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = 1.0;
  v4 = 1.0;
  if (*(float *)&a3 > 1.0)
  {
    v4 = 0.0;
    if (*(float *)&a3 <= 10.0)
      v4 = (float)((float)(10.0 - *(float *)&a3) / 9.0);
  }
  v5 = 0;
  v6 = v4 * 0.5 + 0.5;
  v7 = v6;
  v8 = 1.0 - v7 + v7 * 1.4;
  v48 = v8;
  v49 = 0x3F8CCCCD3F99999ALL;
  v50 = 1065353216;
  *(float *)&v7 = 1.0 - v7 + v7 * 1.3;
  v45 = LODWORD(v7);
  v46 = 0x3F8666663F8CCCCDLL;
  v47 = 1065353216;
  v9 = 0.0;
  if (*(float *)&a3 <= 10.0)
    v9 = (float)((float)(10.0 - *(float *)&a3) / 9.0);
  if (*(float *)&a3 > 1.0)
  {
    v10 = 1;
  }
  else
  {
    v9 = 1.0;
    v10 = 0;
  }
  v42 = vdup_n_s32(0x3ECCCCCDu);
  v11 = 0.2;
  v12 = 0.3;
  if (!a2)
  {
    v12 = 0.2;
    v11 = 0.1;
  }
  v43 = v12;
  v44 = v11;
  v13 = (float *)&v45;
  if (a2)
    v13 = &v48;
  v14 = 0.0;
  if (*(float *)&a3 <= 10.0)
    v14 = (float)(10.0 - *(float *)&a3) / 5.0;
  if (*(float *)&a3 > 5.0)
    v3 = v14;
  v15 = (v9 * 0.3 + 1.0) * 1.3;
  v16 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v3 * -0.299000012 + 0.300000012), 0);
  v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
  v18 = (int8x8_t)vdup_n_s32(v10);
  v19 = (int8x8_t)vcvt_f32_f64(v16);
  v20 = (int64x2_t)xmmword_1A32B1EB0;
  __asm
  {
    FMOV            V5.2S, #10.0
    FMOV            V7.2D, #2.5
    FMOV            V16.2D, #3.0
    FMOV            V17.2D, #1.0
    FMOV            V18.2D, #0.5
  }
  v30 = (int8x8_t)vdup_n_s32(0x3A83126Fu);
  __asm { FMOV            V20.2S, #-1.0 }
  v32 = vdupq_n_s64(2uLL);
  do
  {
    v33 = (float32x2_t *)(result + 48 + v5);
    v33[-4] = *(float32x2_t *)&v13[v5 / 4];
    v34 = vceqzq_s64(v20);
    v35 = (int8x8_t)vmovn_s64(v34);
    v36 = (float32x2_t)vbsl_s8(v35, (int8x8_t)0x4000000040000000, _D5);
    v33[-6] = (float32x2_t)vbsl_s8(v35, v19, v30);
    v33[-2] = (float32x2_t)qword_1A32B1EE0[v5 / 8];
    v37 = (int8x8_t)vcge_f32(v36, v17);
    v38 = vand_s8(v18, v37);
    v39.i64[0] = v38.u32[0];
    v39.i64[1] = v38.u32[1];
    v40 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v39, 0x3FuLL));
    v41 = vbic_s8(v18, v37);
    v39.i64[0] = v41.u32[0];
    v39.i64[1] = v41.u32[1];
    *v33 = vcvt_f32_f64(vmlaq_f64((float64x2_t)vbslq_s8((int8x16_t)v34, _Q18, _Q17), (float64x2_t)vandq_s8(vbslq_s8(v40, (int8x16_t)vcvtq_f64_f32(vdiv_f32(vsub_f32(v36, v17), vadd_f32(v36, _D20))), _Q17), (int8x16_t)vcgezq_s64(vshlq_n_s64(v39, 0x3FuLL))), (float64x2_t)vbslq_s8((int8x16_t)v34, _Q16, _Q7)));
    v33[2] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32((float32x2_t)qword_1A32B1EF0[v5 / 8]), v15));
    v33[4] = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)&v42 + v5)), v15));
    v20 = vaddq_s64(v20, v32);
    v5 += 8;
  }
  while (v5 != 16);
  return result;
}

uint64_t fuse_remix_level(uint64_t a1, GLuint *a2, unsigned int a3, int a4, GLint a5, GLfloat a6)
{
  void *v12;
  size_t v13;
  size_t v14;
  IOSurfaceRef IOSurface;
  IOSurfaceRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  GLuint v21;
  uint64_t v22;
  GLuint *v23;
  GLuint *v24;
  GLuint *v25;
  uint64_t v26;
  GLenum v27;
  IOSurfaceRef v28;
  IOSurfaceRef v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  GLenum v40;
  uint64_t v41;
  IOSurfaceRef v42;
  IOSurfaceRef v43;
  uint64_t v44;
  int v45;
  GLint UniformLocation;
  GLint v47;
  GLfloat *v48;
  GLint v49;
  GLint v50;
  GLint v51;
  GLint v52;
  GLint v53;
  GLint v54;
  GLint v55;
  GLfloat v56;
  GLfloat v57;
  GLint v58;
  GLint v59;
  GLint v60;
  GLint v61;
  GLint v62;
  GLfloat *v63;
  GLint v64;
  GLint v65;
  GLint v66;
  GLint v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  GLsizei height[2];
  size_t HeightOfPlane;
  size_t WidthOfPlane;
  uint64_t v82;

  v12 = *(void **)a1;
  v82 = *(unsigned int *)(a1 + 160);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88) + 8 * a3), 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88) + 8 * a3), 0);
  v13 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88) + 8 * a3), 1uLL);
  v14 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88) + 8 * a3), 1uLL);
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 8 * a3 + 120));
  if (!IOSurface)
  {
    v19 = 0xFFFFFFFFLL;
    goto LABEL_6;
  }
  v16 = IOSurface;
  *(_QWORD *)height = v14;
  v17 = a3;
  glActiveTexture(0x84C0u);
  v18 = a1 + 4 * a3;
  if (!a4)
  {
    glBindTexture(0xDE1u, *(_DWORD *)(v18 + 44));
    BYTE4(v70) = 0;
    LODWORD(v70) = 0;
    if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v16, 3553, 33321, WidthOfPlane, HeightOfPlane, 6403, 5121, v70) & 1) != 0)goto LABEL_8;
    v19 = 1;
LABEL_6:
    fig_log_get_emitter();
LABEL_54:
    FigDebugAssert3();
    return v19;
  }
  glBindTexture(0xDE1u, *(_DWORD *)(v18 + 60));
  BYTE4(v70) = 0;
  v19 = 1;
  LODWORD(v70) = 1;
  if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v16, 3553, 33323, v13, *(_QWORD *)height, 33319, 5121, v70) & 1) == 0)goto LABEL_6;
LABEL_8:
  v20 = 76;
  if (a4)
    v20 = 84;
  v21 = *(_DWORD *)(a1 + v20);
  v22 = a1 + 4 * a3;
  v23 = (GLuint *)(v22 + 60);
  v24 = (GLuint *)(v22 + 44);
  if (a4)
    v25 = v23;
  else
    v25 = v24;
  glBindFramebuffer(0x8D40u, v21);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *v25, 0);
  if (glCheckFramebufferStatus(0x8D40u) != 36053)
    return 0xFFFFFFFFLL;
  if ((int)v82 >= 1)
  {
    v77 = v13;
    v78 = a3;
    v26 = 0;
    v27 = 33992;
    while (1)
    {
      v28 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88 + 8 * v26) + 8 * a3));
      if (!v28)
        goto LABEL_53;
      v29 = v28;
      glActiveTexture(v27 - 8);
      glBindTexture(0xDE1u, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v26));
      BYTE4(v71) = 0;
      LODWORD(v71) = 0;
      if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v29, 3553, 33321, WidthOfPlane, HeightOfPlane, 6403, 5121, v71) & 1) == 0)break;
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      v30 = ((v26 == 0) & (a4 ^ 1)) != 0 ? 9728.0 : 9729.0;
      glTexParameterf(0xDE1u, 0x2800u, v30);
      glTexParameterf(0xDE1u, 0x2801u, v30);
      glActiveTexture(v27);
      glBindTexture(0xDE1u, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v26));
      BYTE4(v72) = 0;
      LODWORD(v72) = 1;
      if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v29, 3553, 33323, v13, *(_QWORD *)height, 33319, 5121, v72) & 1) == 0)break;
      glTexParameterf(0xDE1u, 0x2802u, 33648.0);
      glTexParameterf(0xDE1u, 0x2803u, 33648.0);
      if (((v26 == 0) & a4) != 0)
        v31 = 9728.0;
      else
        v31 = 9729.0;
      glTexParameterf(0xDE1u, 0x2800u, v31);
      glTexParameterf(0xDE1u, 0x2801u, v31);
      ++v26;
      ++v27;
      if (v82 == v26)
      {
        v17 = a3;
        if ((int)a3 >= 3)
          goto LABEL_51;
        v32 = 0;
        v33 = a3 + 1;
        if ((WidthOfPlane & 0x80000000) == 0)
          v34 = WidthOfPlane;
        else
          v34 = WidthOfPlane + 1;
        v35 = v34 >> 1;
        if ((HeightOfPlane & 0x80000000) == 0)
          v36 = HeightOfPlane;
        else
          v36 = HeightOfPlane + 1;
        v75 = v36 >> 1;
        v76 = v35;
        if ((v13 & 0x80000000) == 0)
          v37 = v13;
        else
          v37 = v13 + 1;
        v74 = v37 >> 1;
        if (height[0] >= 0)
          v38 = height[0];
        else
          v38 = height[0] + 1;
        v39 = (v38 >> 1);
        v40 = 33996;
        while (1)
        {
          v41 = v33;
          v42 = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(*(_QWORD *)(a1 + 88 + 8 * v32) + 8 * v33));
          if (!v42)
            break;
          v43 = v42;
          glActiveTexture(v40 - 8);
          glBindTexture(0xDE1u, *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v32));
          BYTE4(v71) = 0;
          LODWORD(v71) = 0;
          if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v43, 3553, 33321, v76, v75, 6403, 5121, v71) & 1) == 0)goto LABEL_61;
          glTexParameterf(0xDE1u, 0x2802u, 33648.0);
          glTexParameterf(0xDE1u, 0x2803u, 33648.0);
          glTexParameterf(0xDE1u, 0x2800u, 9729.0);
          glTexParameterf(0xDE1u, 0x2801u, 9729.0);
          glActiveTexture(v40);
          glBindTexture(0xDE1u, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v32));
          BYTE4(v73) = 0;
          LODWORD(v73) = 1;
          if ((objc_msgSend(v12, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", v43, 3553, 33323, v74, v39, 33319, 5121, v73) & 1) == 0)goto LABEL_61;
          glTexParameterf(0xDE1u, 0x2802u, 33648.0);
          glTexParameterf(0xDE1u, 0x2803u, 33648.0);
          glTexParameterf(0xDE1u, 0x2800u, 9729.0);
          glTexParameterf(0xDE1u, 0x2801u, 9729.0);
          ++v32;
          ++v40;
          v33 = v41;
          if (v82 == v32)
          {
            LODWORD(v13) = v77;
            v17 = v78;
            goto LABEL_48;
          }
        }
LABEL_53:
        fig_log_get_emitter();
        v19 = 0xFFFFFFFFLL;
        goto LABEL_54;
      }
    }
LABEL_61:
    fig_log_get_emitter();
    v19 = 1;
    goto LABEL_54;
  }
  if ((int)a3 <= 2)
  {
    v33 = a3 + 1;
LABEL_48:
    glActiveTexture(0x84D0u);
    v44 = 44;
    if (a4)
      v44 = 60;
    glBindTexture(0xDE1u, *(_DWORD *)(a1 + v44 + 4 * v33));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
LABEL_51:
  bindVertexAttributes((uint64_t)a2);
  if (a4)
  {
    v45 = height[0];
    glViewport(0, 0, v13, height[0]);
  }
  else
  {
    v45 = HeightOfPlane;
    LODWORD(v13) = WidthOfPlane;
    glViewport(0, 0, WidthOfPlane, HeightOfPlane);
  }
  glUseProgram(*a2);
  UniformLocation = glGetUniformLocation(*a2, "transform");
  glUniformMatrix3fv(UniformLocation, v82 - 1, 0, *(const GLfloat **)(a1 + 216));
  v47 = glGetUniformLocation(*a2, "luma_sigma_intercept");
  v48 = (GLfloat *)(a1 + 56 * v17);
  glUniform1f(v47, v48[56]);
  v49 = glGetUniformLocation(*a2, "luma_sigma_slope");
  glUniform1f(v49, v48[57]);
  v50 = glGetUniformLocation(*a2, "luma_sigma_max");
  glUniform1f(v50, v48[58]);
  v51 = glGetUniformLocation(*a2, "luma_sigma_constant");
  glUniform1f(v51, v48[58]);
  v52 = glGetUniformLocation(*a2, "chroma_sigma_r");
  glUniform1f(v52, v48[60]);
  v53 = glGetUniformLocation(*a2, "chroma_sigma_b");
  glUniform1f(v53, v48[61]);
  v54 = glGetUniformLocation(*a2, "long_short_fusion");
  glUniform1i(v54, *(unsigned __int8 *)(a1 + 164));
  v55 = glGetUniformLocation(*a2, "pixel_pitch");
  v56 = 1.0 / (double)(int)v13;
  v57 = 1.0 / (double)v45;
  glUniform2f(v55, v56, v57);
  v58 = glGetUniformLocation(*a2, "compute_similarity_map");
  glUniform1i(v58, a5);
  v59 = glGetUniformLocation(*a2, "mismatch_coefficient");
  glUniform1f(v59, a6);
  v60 = glGetUniformLocation(*a2, "num_buffers");
  glUniform1i(v60, v82);
  v61 = glGetUniformLocation(*a2, "dc_value");
  glUniform3fv(v61, v82, (const GLfloat *)(a1 + 168));
  v62 = glGetUniformLocation(*a2, "black_threshold");
  v63 = (GLfloat *)(a1 + 4 * v17);
  glUniform2f(v62, 0.0, v63[112]);
  v64 = glGetUniformLocation(*a2, "sharpening");
  glUniform1f(v64, v63[116]);
  v65 = glGetUniformLocation(*a2, "adaptive_blur");
  glUniform1f(v65, v63[120]);
  v66 = glGetUniformLocation(*a2, "diff_weight");
  glUniform1f(v66, v63[124]);
  v67 = glGetUniformLocation(*a2, "strength");
  v68 = 16;
  if (a4)
    v68 = 20;
  glUniform1f(v67, v63[v68 + 112]);
  glDrawArrays(5u, 0, 4);
  glFlush();
  glGetError();
  return 0;
}

uint64_t compute_mismatch_coefficient(uint64_t a1, float *a2, float a3)
{
  __CVBuffer *v6;
  unsigned int WidthOfPlane;
  unsigned int HeightOfPlane;
  unsigned int BytesPerRowOfPlane;
  __CVBuffer *v10;
  unsigned __int8 *BaseAddressOfPlane;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  int32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  double v35;
  double v36;
  float v37;
  vImage_Buffer dest;
  vImage_Buffer src;

  *a2 = 0.0;
  v6 = *(__CVBuffer **)(a1 + 144);
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(v6, 0);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(v6, 0);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v6, 0);
  if (CVPixelBufferLockBaseAddress(v6, 1uLL)
    || (v10 = *(__CVBuffer **)(a1 + 152)) != 0 && CVPixelBufferCopyPlane(v10, v6))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0xFFFFFFFFLL;
  }
  BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(v6, 0);
  if (*(_BYTE *)(a1 + 164))
  {
    v12 = malloc_type_malloc((int)(WidthOfPlane * HeightOfPlane), 0x858D5BBCuLL);
    src.data = BaseAddressOfPlane;
    src.height = HeightOfPlane;
    src.width = WidthOfPlane;
    src.rowBytes = BytesPerRowOfPlane;
    dest.data = v12;
    dest.height = HeightOfPlane;
    dest.width = WidthOfPlane;
    dest.rowBytes = WidthOfPlane;
    vImageMax_Planar8(&src, &dest, 0, 0, 0, 3uLL, 3uLL, 0);
    src.data = v12;
    src.height = HeightOfPlane;
    src.width = WidthOfPlane;
    src.rowBytes = WidthOfPlane;
    dest.data = BaseAddressOfPlane;
    dest.height = HeightOfPlane;
    dest.width = WidthOfPlane;
    dest.rowBytes = BytesPerRowOfPlane;
    vImageMin_Planar8(&src, &dest, 0, 0, 0, 3uLL, 3uLL, 0);
  }
  else
  {
    v12 = 0;
  }
  if ((int)HeightOfPlane < 1)
  {
    v14 = 0;
    if (!v12)
      goto LABEL_14;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = WidthOfPlane;
      v16 = BaseAddressOfPlane;
      if ((int)WidthOfPlane >= 1)
      {
        do
        {
          v17 = *v16++;
          v14 += v17;
          --v15;
        }
        while (v15);
      }
      ++v13;
      BaseAddressOfPlane += (int)BytesPerRowOfPlane;
    }
    while (v13 != HeightOfPlane);
    if (!v12)
      goto LABEL_14;
  }
  free(v12);
LABEL_14:
  if (*(_BYTE *)(a1 + 164))
  {
    v19 = (float)(a3 + -10.0) / 10.0;
    v20 = 1.0;
    if (v19 <= 1.0)
      v20 = (float)(a3 + -10.0) / 10.0;
    _NF = v19 < 0.0;
    v22 = 0.0;
    if (!_NF)
      v22 = v20;
    v23 = (v22 * -2.0 + 3.0) * (float)(v22 * v22);
    __asm { FMOV            V2.2D, #1.0 }
    _Q1 = vcvtq_f64_f32(vcvt_f32_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_1A32B1EC0, v23), _Q2)));
  }
  else
  {
    __asm { FMOV            V1.2D, #1.0 }
  }
  v29 = (int32x2_t)vcvt_f32_f64(vdivq_f64((float64x2_t)xmmword_1A32B1ED0, _Q1));
  v18 = (double)v14 / ((double)(int)HeightOfPlane * 255.0 * (double)(int)WidthOfPlane);
  v30 = (float)(v18 - *(float *)v29.i32) / vsub_f32((float32x2_t)vdup_lane_s32(v29, 1), (float32x2_t)v29).f32[0];
  v31 = 1.0;
  if (v30 <= 1.0)
    v31 = v30;
  _NF = v30 < 0.0;
  v32 = 0.0;
  if (!_NF)
    v32 = v31;
  v33 = (v32 * -2.0 + 3.0) * (float)(v32 * v32);
  v34 = 1.0 - v33;
  v35 = 0.0;
  if (a3 <= 20.0)
    v35 = (float)((float)(20.0 - a3) / 10.0);
  if (a3 > 10.0)
    v36 = v35;
  else
    v36 = 1.0;
  v37 = v34 * (1.0 - v36);
  *a2 = v37;
  CVPixelBufferUnlockBaseAddress(v6, 1uLL);
  return 0;
}

uint64_t BindTextureToFbo(void *a1, IOSurfaceRef buffer, GLuint a3, GLuint a4, unsigned int a5, size_t planeIndex)
{
  int v6;
  int v13;
  uint64_t v14;
  size_t v15;
  int WidthOfPlane;
  size_t HeightOfPlane;
  int v18;
  uint64_t v19;
  uint64_t v21;

  v6 = planeIndex;
  if ((_DWORD)planeIndex == 1 || a5 == 33319)
    v13 = 2;
  else
    v13 = 4;
  if (a5 == 33319)
    v14 = 33323;
  else
    v14 = 6408;
  v15 = planeIndex;
  WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, planeIndex);
  HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, v15);
  glBindTexture(0xDE1u, a3);
  BYTE4(v21) = 0;
  LODWORD(v21) = v6;
  v18 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, 3553, v14, (WidthOfPlane / v13), HeightOfPlane, a5, 5121, v21);
  v19 = v18 ^ 1u;
  if ((v18 & 1) != 0)
  {
    if (a4)
    {
      glBindFramebuffer(0x8D40u, a4);
      glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, a3, 0);
      if (glCheckFramebufferStatus(0x8D40u) == 36053)
        return v19;
      else
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v19;
}

void denoise_luma_level(uint64_t a1, GLuint a2, uint64_t a3, GLuint a4, unsigned int a5)
{
  unsigned int v10;
  GLint v11;
  uint64_t v12;
  int WidthOfPlane;
  int v14;
  GLsizei v15;
  GLsizei HeightOfPlane;
  GLint UniformLocation;
  GLfloat *v18;
  GLint v19;
  GLint v20;
  GLint v21;
  GLint v22;
  GLint v23;

  glActiveTexture(0x84C0u);
  v10 = a5;
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 4 * a5 + 84));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  if (a4)
  {
    glActiveTexture(0x84C1u);
    glBindTexture(0xDE1u, a4);
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
  v11 = a4 != 0;
  glBindFramebuffer(0x8D40u, a2);
  bindVertexAttributes(a1 + 396);
  v12 = a1 + 8 * a5;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v12 + 232), 0);
  if (WidthOfPlane >= 0)
    v14 = WidthOfPlane;
  else
    v14 = WidthOfPlane + 1;
  v15 = v14 >> 1;
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v12 + 232), 0);
  glViewport(0, 0, v15, HeightOfPlane);
  glUseProgram(*(_DWORD *)(a1 + 396));
  UniformLocation = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_intercept");
  v18 = (GLfloat *)(a3 + 56 * v10);
  glUniform1f(UniformLocation, *v18);
  v19 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_slope");
  glUniform1f(v19, v18[1]);
  v20 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "luma_sigma_max");
  glUniform1f(v20, v18[2]);
  v21 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "lens_shading_factor");
  glUniform1f(v21, 0.0);
  v22 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "pixel_pitch");
  glUniform2f(v22, 1.0 / (float)v15, 1.0 / (float)HeightOfPlane);
  v23 = glGetUniformLocation(*(_DWORD *)(a1 + 396), "use_alpha");
  glUniform1i(v23, v11);
  glDrawArrays(5u, 0, 4);
  glFlush();
}

uint64_t CVPixelBufferCopyPlane(__CVBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  uint64_t v4;
  int WidthOfPlane;
  uint64_t v6;
  int BytesPerRowOfPlane;
  int v8;
  char *BaseAddressOfPlane;
  char *v10;
  char *v11;

  if (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL))
    return 0xFFFFFFFFLL;
  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    v4 = 0xFFFFFFFFLL;
  }
  else
  {
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    LODWORD(v6) = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v10 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
    if ((int)v6 >= 1)
    {
      v11 = v10;
      v6 = v6;
      do
      {
        memcpy(v11, BaseAddressOfPlane, WidthOfPlane);
        BaseAddressOfPlane += BytesPerRowOfPlane;
        v11 += v8;
        --v6;
      }
      while (v6);
    }
    CVPixelBufferUnlockBaseAddress(a1, 0);
    v4 = 0;
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  return v4;
}

void multibandNoiseReductionFinalize(const __CFDictionary *a1)
{
  const __CFNumber *Value;
  int valuePtr;

  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, 0, 0);
  glBindFramebuffer(0x8D40u, 0);
  glBindTexture(0xDE1u, 0);
  valuePtr = 1;
  if (a1
    && (Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Synchronization"))) != 0
    && (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), valuePtr != 1))
  {
    glFinish();
  }
  else
  {
    glFlush();
  }
}

uint64_t handle_band_data(const void *a1, int *a2, uint64_t *a3)
{
  CFTypeID v6;
  int Count;
  int v8;
  uint64_t v9;
  uint64_t v10;
  CFIndex v11;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v13;
  CFTypeID v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  CFTypeID v17;
  uint64_t result;

  v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    Count = CFArrayGetCount((CFArrayRef)a1);
    if ((Count & 1) == 0)
    {
      if (Count >= 0)
        v8 = Count;
      else
        v8 = Count + 1;
      *a2 = v8 >> 1;
      v9 = *a3;
      if (!*a3)
        return 0;
      if (Count < 2)
      {
LABEL_14:
        result = 0;
        *a3 = v9;
        return result;
      }
      v10 = 0;
      v11 = 1;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v11 - 1);
        if (!ValueAtIndex)
          break;
        v13 = ValueAtIndex;
        v14 = CFGetTypeID(ValueAtIndex);
        if (v14 != CFNumberGetTypeID())
          break;
        CFNumberGetValue(v13, kCFNumberFloatType, (void *)v9);
        v15 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, v11);
        if (!v15)
          break;
        v16 = v15;
        v17 = CFGetTypeID(v15);
        if (v17 != CFNumberGetTypeID())
          break;
        CFNumberGetValue(v16, kCFNumberFloatType, (void *)(v9 + 4));
        ++v10;
        v9 += 8;
        v11 += 2;
        if (v10 >= *a2)
          goto LABEL_14;
      }
    }
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0xFFFFFFFFLL;
}

const __CFDictionary *band_iterator(const __CFDictionary *cf, uint64_t a2)
{
  uint64_t v3;
  const __CFDictionary *v4;
  uint64_t v5;
  CFTypeID v6;
  const void *Value;
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  int *v12;
  const void *v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 24);
  v19 = v3;
  if (*(_DWORD *)a2)
    goto LABEL_2;
  v4 = cf;
  if (!cf || (v5 = *(_QWORD *)(a2 + 8), v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    fig_log_get_emitter();
LABEL_26:
    cf = (const __CFDictionary *)FigDebugAssert3();
LABEL_2:
    *(_DWORD *)a2 = -1;
    return cf;
  }
  Value = CFDictionaryGetValue(v4, CFSTR("LumaDenoiseStrength"));
  *(_QWORD *)(v5 + 8) = v3;
  if (handle_band_data(Value, (int *)v5, &v19))
    goto LABEL_25;
  *(_QWORD *)(v5 + 24) = v19;
  v8 = CFDictionaryGetValue(v4, CFSTR("ChromaDenoiseStrength"));
  if (handle_band_data(v8, (int *)(v5 + 16), &v19))
    goto LABEL_25;
  *(_QWORD *)(v5 + 40) = v19;
  v9 = CFDictionaryGetValue(v4, CFSTR("LumaRemixWeight"));
  if (handle_band_data(v9, (int *)(v5 + 32), &v19))
    goto LABEL_25;
  v10 = v19;
  *(_QWORD *)(v5 + 56) = v19;
  v11 = CFDictionaryGetValue(v4, CFSTR("BlueBoost"));
  v12 = (int *)(v5 + 48);
  if (v11)
  {
    if (handle_band_data(v11, v12, &v19))
      goto LABEL_25;
    v10 = v19;
  }
  else
  {
    *v12 = 0;
  }
  *(_QWORD *)(v5 + 72) = v10;
  v13 = CFDictionaryGetValue(v4, CFSTR("FlatnessBoost"));
  v14 = (int *)(v5 + 64);
  if (v13)
  {
    if (handle_band_data(v13, v14, &v19))
      goto LABEL_25;
    v10 = v19;
  }
  else
  {
    *v14 = 0;
  }
  *(_QWORD *)(v5 + 88) = v10;
  cf = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("FlatnessThreshold"));
  v15 = (int *)(v5 + 80);
  if (cf)
  {
    cf = (const __CFDictionary *)handle_band_data(cf, (int *)(v5 + 80), &v19);
    if (!(_DWORD)cf)
    {
      v16 = *v15;
      goto LABEL_20;
    }
LABEL_25:
    fig_log_get_emitter();
    goto LABEL_26;
  }
  v16 = 0;
  *v15 = 0;
LABEL_20:
  v17 = *(_DWORD *)(v5 + 16) + *(_DWORD *)v5 + *(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 64) + v16;
  v18 = *(_QWORD *)(a2 + 24);
  if (v18)
  {
    if (v17 == (v19 - v18) >> 3)
    {
      *(_QWORD *)(a2 + 24) = v19;
      goto LABEL_23;
    }
    goto LABEL_25;
  }
LABEL_23:
  *(_DWORD *)(a2 + 16) += v17;
  *(_QWORD *)(a2 + 8) += 96;
  return cf;
}

uint64_t __multiBandNoiseReductionGPUContextInit_block_invoke(uint64_t a1)
{
  return multiBandNoiseReductionContextInit_internal(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(CFDictionaryRef *)(a1 + 48));
}

uint64_t multiBandNoiseReductionContextInit_internal(uint64_t a1, void *a2, CFDictionaryRef theDict)
{
  uint64_t v3;
  int AlgorithmFromTuningOptions;
  CFTypeRef *v7;
  uint64_t v8;
  int v9;
  id v10;
  void *v11;
  uint64_t result;
  GLint v13;
  GLint v14;
  char **v15;
  char **v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  GLint params;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  AlgorithmFromTuningOptions = noiseReductionGetAlgorithmFromTuningOptions(theDict);
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (CFTypeRef *)(a1 + 16);
  if (IOSurfaceAcceleratorCreate())
  {
    if (*v7)
      CFRelease(*v7);
    LOBYTE(v8) = 0;
    *v7 = 0;
  }
  else
  {
    FigSetupIOSurfaceAccelerator(a1 + 24);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      LOBYTE(v8) = *(_DWORD *)(a1 + 28) >= 7u && *(_DWORD *)(a1 + 24) > 6u;
  }
  v20 = 0;
  *(_BYTE *)(a1 + 296) = v8;
  *(_BYTE *)(a1 + 297) = 1;
  *(_BYTE *)(a1 + 298) = a2 == 0;
  if (a2)
    goto LABEL_6;
  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  params = 1;
  if (!v10
    || (v11 = v10,
        objc_msgSend(v10, "setObject:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD0D20]),
        a2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", 3, v11),
        v11,
        !a2))
  {
    fig_log_get_emitter();
    v19 = v3;
    LODWORD(v18) = 0;
    FigDebugAssert3();
    goto LABEL_16;
  }
  if (objc_msgSend(a2, "setParameter:to:", 608, &params))
  {

LABEL_16:
    *(_QWORD *)(a1 + 48) = 0;
    result = objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0, v18, v19);
    *(_DWORD *)a1 = 2;
    return result;
  }
LABEL_6:
  *(_QWORD *)(a1 + 48) = a2;
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", a2);
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 != 1)
  {
    if (v9)
      v9 = 1;
    else
      v9 = 2;
  }
  v20 = v9;
  objc_msgSend(*(id *)(a1 + 48), "setParameter:to:", 608, &v20);
  glGetIntegerv(0xD33u, &params);
  v13 = params;
  *(_DWORD *)(a1 + 60) = params;
  *(_DWORD *)(a1 + 64) = v13;
  glGetIntegerv(0x84E8u, &params);
  v14 = params;
  if (*(_DWORD *)(a1 + 60) < params)
    *(_DWORD *)(a1 + 60) = params;
  if (*(_DWORD *)(a1 + 64) < v14)
    *(_DWORD *)(a1 + 64) = v14;
  glGetIntegerv(0xD3Au, &params);
  if (*(_DWORD *)(a1 + 60) < params)
    *(_DWORD *)(a1 + 60) = params;
  if (*(_DWORD *)(a1 + 64) < v22)
    *(_DWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  glGenTextures(4, (GLuint *)(a1 + 84));
  glGenTextures(4, (GLuint *)(a1 + 124));
  glGenTextures(4, (GLuint *)(a1 + 168));
  glGenTextures(4, (GLuint *)(a1 + 200));
  glGenTextures(2, (GLuint *)(a1 + 116));
  glGenTextures(2, (GLuint *)(a1 + 156));
  glGenFramebuffers(4, (GLuint *)(a1 + 100));
  glGenFramebuffers(4, (GLuint *)(a1 + 184));
  glGenFramebuffers(4, (GLuint *)(a1 + 216));
  glGenFramebuffers(4, (GLuint *)(a1 + 140));
  glGenFramebuffers(1, (GLuint *)(a1 + 164));
  compile_shader((GLuint *)(a1 + 300), (uint64_t *)NoiseReductionBoxBlur334_prog);
  compile_shader((GLuint *)(a1 + 312), (uint64_t *)NoiseReductionBoxBlur554_prog);
  compile_shader((GLuint *)(a1 + 324), (uint64_t *)NoiseReductionBoxBlur774_prog);
  compile_shader((GLuint *)(a1 + 336), (uint64_t *)NoiseReductionBoxBlur2_554_prog);
  compile_shader((GLuint *)(a1 + 348), (uint64_t *)NoiseReductionChromaDenoiseX2_prog);
  if (AlgorithmFromTuningOptions == 3)
    v15 = NoiseReductionLumaRemix4Advanced_prog;
  else
    v15 = NoiseReductionLumaRemix4_prog;
  if (AlgorithmFromTuningOptions == 3)
    v16 = NoiseReductionLumaDenoiseChromaRemixX2Advanced_prog;
  else
    v16 = NoiseReductionLumaDenoiseChromaRemixX2_prog;
  if (AlgorithmFromTuningOptions == 3)
    v17 = NoiseReductionLumaChromaRemixDenoiseX2Advanced_prog;
  else
    v17 = NoiseReductionLumaChromaRemixDenoiseX2_prog;
  compile_shader((GLuint *)(a1 + 360), (uint64_t *)v15);
  compile_shader((GLuint *)(a1 + 372), (uint64_t *)v16);
  compile_shader((GLuint *)(a1 + 384), (uint64_t *)v17);
  compile_shader((GLuint *)(a1 + 396), (uint64_t *)NoiseReductionLumaDenoiseX2_prog);
  compile_shader((GLuint *)(a1 + 408), (uint64_t *)NoiseReductionLumaFusion_prog);
  compile_shader((GLuint *)(a1 + 420), (uint64_t *)NoiseReductionLumaRemixFusion_prog);
  compile_shader((GLuint *)(a1 + 432), (uint64_t *)NoiseReductionChromaFusion_prog);
  compile_shader((GLuint *)(a1 + 444), (uint64_t *)NoiseReductionChromaRemixFusion_prog);
  glUseProgram(0);
  return objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", 0);
}

void compile_shader(GLuint *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  GLchar *v5;
  GLuint Shader_1;
  GLuint v7;
  GLuint v8;
  GLuint v9;
  GLuint Program;
  GLuint v11;
  const GLchar **v12;
  const GLchar *v13;
  _QWORD *v14;
  const GLchar *v15;
  const GLchar **v16;
  const GLchar *v17;
  int v18;
  const GLchar **v19;
  int AttribLocation;
  int *v21;
  const GLchar *v22;
  const GLchar **v23;
  const GLchar *v24;
  _QWORD *v25;
  GLint UniformLocation;
  const GLchar *v27;
  GLint params;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v29[0] = a1 + 1;
  v29[1] = a1 + 2;
  if (!a2 || (v2 = *a2) == 0 || (v3 = a2[1]) == 0)
  {
    fig_log_get_emitter();
LABEL_27:
    FigDebugAssert3();
    return;
  }
  v5 = *(GLchar **)v3;
  Shader_1 = gl_UtilsCreateShader_1(0x8B31u, *(GLchar **)v2);
  if (!Shader_1)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
LABEL_26:
    fig_log_get_emitter();
    goto LABEL_27;
  }
  v7 = Shader_1;
  v8 = gl_UtilsCreateShader_1(0x8B30u, v5);
  if (!v8)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    glDeleteShader(v7);
    goto LABEL_26;
  }
  v9 = v8;
  params = 0;
  Program = glCreateProgram();
  v11 = Program;
  if (Program)
  {
    glAttachShader(Program, v7);
    glAttachShader(v11, v9);
    glLinkProgram(v11);
    glGetProgramiv(v11, 0x8B82u, &params);
    if (!params)
    {
      glDeleteProgram(v11);
      v11 = 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  glDeleteShader(v7);
  glDeleteShader(v9);
  if (!v11)
    goto LABEL_26;
  glUseProgram(v11);
  *a1 = v11;
  v12 = *(const GLchar ***)(v2 + 16);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12 + 2;
    do
    {
      glBindAttribLocation(v11, *((_DWORD *)v14 - 2), v13);
      v15 = (const GLchar *)*v14;
      v14 += 2;
      v13 = v15;
    }
    while (v15);
    glLinkProgram(v11);
  }
  v16 = *(const GLchar ***)(v2 + 8);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = v16 + 2;
    do
    {
      AttribLocation = glGetAttribLocation(v11, v17);
      v21 = (int *)v29[v18];
      if (v21)
      {
        *v21 = AttribLocation;
        ++v18;
      }
      v22 = *v19;
      v19 += 2;
      v17 = v22;
    }
    while (v22);
  }
  v23 = *(const GLchar ***)(v3 + 8);
  v24 = *v23;
  if (*v23)
  {
    v25 = v23 + 2;
    do
    {
      UniformLocation = glGetUniformLocation(v11, v24);
      glUniform1i(UniformLocation, *((_DWORD *)v25 - 2));
      v27 = (const GLchar *)*v25;
      v25 += 2;
      v24 = v27;
    }
    while (v27);
  }
}

uint64_t gl_UtilsCreateShader_1(GLenum a1, GLchar *a2)
{
  uint64_t Shader;
  uint64_t v3;
  GLint params;
  GLchar *string;

  string = a2;
  Shader = glCreateShader(a1);
  v3 = Shader;
  if ((_DWORD)Shader)
  {
    params = 0;
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v3);
    glGetShaderiv(v3, 0x8B81u, &params);
    if (!params)
    {
      glDeleteShader(v3);
      return 0;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v3;
}

void WaitForInitializationToFinish_0(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  if (*(_DWORD *)a1 != 1)
  {
    v1 = *(NSObject **)(a1 + 8);
    if (v1)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __WaitForInitializationToFinish_block_invoke_0;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

void releasePixelBuffers(uint64_t a1)
{
  uint64_t i;
  __CVBuffer *v3;

  for (i = 240; i != 264; i += 8)
  {
    v3 = *(__CVBuffer **)(a1 + i);
    if (v3)
    {
      CVPixelBufferRelease(v3);
      *(_QWORD *)(a1 + i) = 0;
    }
  }
  releaseOutputPixelBuffers(a1);
}

void releaseOutputPixelBuffers(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __CVBuffer *v3;

  if (*(_DWORD *)(a1 + 76) == 1)
  {
    v1 = 0;
    v2 = a1 + 272;
    do
    {
      v3 = *(__CVBuffer **)(v2 + v1);
      if (v3)
      {
        CVPixelBufferRelease(v3);
        *(_QWORD *)(v2 + v1) = 0;
      }
      v1 += 8;
    }
    while (v1 != 24);
  }
}

uint64_t BindLumaAndChromaTexturesToDualFbo(void *a1, IOSurfaceRef buffer, GLuint a3, __IOSurface *a4, GLuint a5, GLuint a6)
{
  int WidthOfPlane;
  size_t HeightOfPlane;
  int v14;
  int v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  GLenum bufs[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, 0);
  HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, 0);
  glBindTexture(0xDE1u, a3);
  if (WidthOfPlane >= 0)
    v14 = WidthOfPlane;
  else
    v14 = WidthOfPlane + 1;
  BYTE4(v21) = 0;
  LODWORD(v21) = 0;
  if ((objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", buffer, 3553, 33323, (v14 >> 1), HeightOfPlane, 33319, 5121, v21) & 1) == 0)
  {
    fig_log_get_emitter();
    v19 = 1;
LABEL_15:
    FigDebugAssert3();
    return v19;
  }
  v15 = IOSurfaceGetWidthOfPlane(a4, 1uLL);
  v16 = IOSurfaceGetHeightOfPlane(a4, 1uLL);
  glBindTexture(0xDE1u, a5);
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = v15 + 1;
  BYTE4(v22) = 0;
  LODWORD(v22) = 1;
  v18 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a4, 3553, 6408, (v17 >> 1), v16, 6408, 5121, v22);
  v19 = v18 ^ 1u;
  if ((v18 & 1) == 0)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
  glBindFramebuffer(0x8D40u, a6);
  *(_QWORD *)bufs = 0x8CE100008CE0;
  glDrawBuffers(2, bufs);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, a3, 0);
  glFramebufferTexture2D(0x8D40u, 0x8CE1u, 0xDE1u, a5, 0);
  if (glCheckFramebufferStatus(0x8D40u) == 36053)
    return v19;
  else
    return 0xFFFFFFFFLL;
}

unsigned int *accelCompletionCallback(unsigned int *result, int a2)
{
  unsigned int v2;

  if (!a2)
  {
    do
      v2 = __ldxr(result);
    while (__stxr(v2 + 1, result));
  }
  return result;
}

void m2m_filter_coefficients(int a1, int a2, char a3, int a4, unsigned int *a5, float a6)
{
  float v6;
  float v7;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  float v25;
  _DWORD *v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  _BYTE v36[60];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = sqrt(a6) * a6;
  if (a6 <= 1.0)
    v7 = v6;
  else
    v7 = 1.0;
  if (a2 >= 1)
  {
    v10 = 0;
    if (a1 >= 15)
      v11 = 15;
    else
      v11 = a1;
    v12 = a1 - 1;
    if (a1 < 1)
      v12 = a1;
    v13 = v12 >> 1;
    v14 = (float)a2;
    v15 = (float)v13;
    v16 = ~(-1 << (a4 + a3));
    v17 = 1 << a4;
    v18 = v13 * a2;
    if (v11 <= 1)
      v19 = 1;
    else
      v19 = v11;
    v20 = a2;
    v21 = v18;
    v22 = 4 * a2;
    v23 = a5;
    do
    {
      if (a1 < 1)
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        v25 = -(float)((float)((float)((float)((float)(int)v10 / v14) + 1.0) + v15) * v7);
        v26 = v36;
        v27 = v19;
        do
        {
          v28 = fabsf(v25);
          *v26++ = v28 <= 1.0;
          if (v28 <= 1.0)
            ++v24;
          v25 = v7 + v25;
          --v27;
        }
        while (v27);
      }
      v29 = (float)(ldexpf(1.0 / (float)v24, a4) + 0.5) & v16;
      v30 = v29 + v17;
      if (a1 >= 1)
      {
        v31 = v36;
        v32 = v19;
        v33 = v23;
        do
        {
          if (*v31++)
          {
            *v33 = v29;
            v30 -= v29;
          }
          else
          {
            *v33 = 0;
          }
          v33 = (unsigned int *)((char *)v33 + v22);
          --v32;
        }
        while (v32);
      }
      a5[v10 + v21] = v30;
      ++v10;
      ++v23;
    }
    while (v10 != v20);
  }
}

void bindVertexAttributes(uint64_t a1)
{
  glVertexAttribPointer(*(_DWORD *)(a1 + 4), 2, 0x1406u, 0, 16, &bindVertexAttributes_verts);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 4));
  glVertexAttribPointer(*(_DWORD *)(a1 + 8), 2, 0x1406u, 0, 16, &unk_1A32B1DE4);
  glEnableVertexAttribArray(*(_DWORD *)(a1 + 8));
}

void remix_denoise_luma_chroma_level(uint64_t a1, uint64_t a2, float *a3, int a4, GLfloat a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int WidthOfPlane;
  GLsizei HeightOfPlane;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  GLsizei v20;
  GLint UniformLocation;
  GLfloat *v22;
  GLint v23;
  GLint v24;
  GLint v25;
  GLint v26;
  GLint v27;
  GLint v28;
  GLint v29;
  uint64_t v30;
  GLint v31;
  GLint v32;
  GLint v33;
  GLint v34;
  GLint v35;
  GLint v36;
  GLint v37;
  int v38;

  if (a4 >= 3)
    v8 = 372;
  else
    v8 = 384;
  if (a4 >= 3)
    v9 = a1 + 372;
  else
    v9 = a1 + 384;
  v10 = a4 - 1;
  v11 = a1 + 264;
  WidthOfPlane = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(a1 + 264 + 8 * (a4 - 1)), 1uLL);
  HeightOfPlane = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v11 + 8 * v10), 1uLL);
  v14 = CVPixelBufferGetWidthOfPlane(*(CVPixelBufferRef *)(v11 + 8 * a4), 1uLL);
  v38 = CVPixelBufferGetHeightOfPlane(*(CVPixelBufferRef *)(v11 + 8 * a4), 1uLL);
  bindVertexAttributes(v9);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168 + 4 * v10));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C1u);
  v15 = a1 + 4 * a4;
  glBindTexture(0xDE1u, *(_DWORD *)(v15 + 84));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9728.0);
  glTexParameterf(0xDE1u, 0x2801u, 9728.0);
  glActiveTexture(0x84C2u);
  glBindTexture(0xDE1u, *(_DWORD *)(a1 + 168 + 4 * a4));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glActiveTexture(0x84C3u);
  glBindTexture(0xDE1u, *(_DWORD *)(v15 + 200));
  glTexParameterf(0xDE1u, 0x2802u, 33648.0);
  glTexParameterf(0xDE1u, 0x2803u, 33648.0);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  if (a4 <= 2)
  {
    glActiveTexture(0x84C4u);
    v16 = a1 + 4 * (a4 + 1);
    glBindTexture(0xDE1u, *(_DWORD *)(v16 + 84));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
    glActiveTexture(0x84C5u);
    glBindTexture(0xDE1u, *(_DWORD *)(v16 + 124));
    glTexParameterf(0xDE1u, 0x2802u, 33648.0);
    glTexParameterf(0xDE1u, 0x2803u, 33648.0);
    glTexParameterf(0xDE1u, 0x2800u, 9729.0);
    glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  }
  if (v14 >= 0)
    v17 = v14;
  else
    v17 = v14 + 1;
  v18 = v17 >> 1;
  if (WidthOfPlane >= 0)
    v19 = WidthOfPlane;
  else
    v19 = WidthOfPlane + 1;
  v20 = v19 >> 1;
  glBindFramebuffer(0x8D40u, *(_DWORD *)(a1 + 4 * a4 + 140));
  glViewport(0, 0, v20, HeightOfPlane);
  glUseProgram(*(_DWORD *)(a1 + v8));
  UniformLocation = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_diff_remix");
  v22 = (GLfloat *)(a2 + 56 * a4);
  glUniform1f(UniformLocation, v22[6]);
  v23 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_diff_remix");
  glUniform1f(v23, 1.0);
  v24 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "pixel_pitch");
  glUniform2f(v24, 1.0 / (float)(v18 - 1), 1.0 / (float)(v38 - 1));
  v25 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_intercept");
  glUniform1f(v25, *v22);
  v26 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_max");
  glUniform1f(v26, v22[2]);
  v27 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_slope");
  glUniform1f(v27, v22[1]);
  v28 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "luma_sigma_constant");
  glUniform1f(v28, v22[2]);
  v29 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_sigma_r");
  v30 = a2 + 56 * v10;
  glUniform1f(v29, *(GLfloat *)(v30 + 16));
  v31 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_sigma_b");
  glUniform1f(v31, *(GLfloat *)(v30 + 20));
  v32 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "lens_shading_factors");
  glUniform2f(v32, *a3 + -1.0, a3[1] + -1.0);
  v33 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "chroma_demoire_strength");
  glUniform1f(v33, a5);
  v34 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "denoise_pixel_pitch");
  glUniform2f(v34, 1.0 / (float)v20, 1.0 / (float)HeightOfPlane);
  v35 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "blue_boost_factor");
  glUniform1f(v35, v22[7]);
  v36 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "flatness_boost_factor");
  glUniform1f(v36, v22[8]);
  v37 = glGetUniformLocation(*(_DWORD *)(a1 + v8), "flatness_threshold");
  glUniform1f(v37, v22[9]);
  glDrawArrays(5u, 0, 4);
  glFlush();
}

const UInt8 *get_device_parameters_for_fusion_type(uint64_t a1, void *a2, void *a3)
{
  const UInt8 *result;
  const UInt8 *v5;
  const __CFData *Value;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = a2;
  values[1] = a3;
  result = (const UInt8 *)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
  if (result)
  {
    v5 = result;
    Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 472), result);
    CFRelease(v5);
    if (Value)
      return CFDataGetBytePtr(Value);
    else
      return 0;
  }
  return result;
}

float scan_entries(float *a1, int a2, float a3)
{
  float result;
  uint64_t v5;
  float *i;
  float v7;

  result = 1.0;
  v5 = (a2 - 1);
  if (a2 >= 1)
  {
    if (*a1 >= a3)
    {
      return a1[1];
    }
    else if (a1[2 * (a2 - 1)] <= a3)
    {
      return a1[2 * v5 + 1];
    }
    else if (a2 >= 2)
    {
      for (i = a1 + 2; ; i += 2)
      {
        v7 = *(i - 2);
        if (v7 <= a3 && *i > a3)
          break;
        if (!--v5)
          return result;
      }
      return *(i - 1) + (float)((float)((float)(a3 - v7) * (float)(i[1] - *(i - 1))) / (float)(*i - v7));
    }
  }
  return result;
}

void *nrasp_interpolateArrayOfValuesForGain(void *a1, float a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];
  uint64_t v24;

  v3 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v3);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v14 = 0u;
          v15 = 0u;
          v16 = 0u;
          v17 = 0u;
          v9 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
          if (v9)
          {
            v10 = v9;
            v11 = *(_QWORD *)v15;
            do
            {
              for (j = 0; j != v10; ++j)
              {
                if (*(_QWORD *)v15 != v11)
                  objc_enumerationMutation(v3);
                objc_msgSend(v8, "addObject:", nrasp_interpolateValueForGain(*(void **)(*((_QWORD *)&v14 + 1) + 8 * j), a2));
              }
              v10 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
            }
            while (v10);
          }
          return v8;
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      if (v5)
        continue;
      break;
    }
  }
  return v3;
}

uint64_t nrasp_interpolateValueForGain(void *a1, float a2)
{
  uint64_t v2;
  int v5;
  int v6;
  float v7;
  int v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return (uint64_t)a1;
  v5 = objc_msgSend(a1, "count");
  v6 = v5;
  if (v5 < 1 || (v5 & 1) != 0)
  {
    fig_log_get_emitter();
    v26 = v2;
    LODWORD(v25) = 0;
    FigDebugAssert3();
  }
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", 0, v25, v26), "floatValue");
  if (v7 >= a2)
  {
    v23 = a1;
    v24 = 1;
  }
  else
  {
    v8 = v6 - 2;
    objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v6 - 2), "floatValue");
    if (v9 > a2)
    {
      if (v6 < 3)
        goto LABEL_15;
      v10 = 0;
      v11 = 0;
      do
      {
        objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10), "floatValue");
        v13 = v12;
        v14 = v10 + 2;
        objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 2), "floatValue");
        if (v13 <= a2 && v15 > a2)
        {
          v17 = v15;
          objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 1), "floatValue");
          v19 = v18;
          objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v10 + 3), "floatValue");
          LODWORD(v21) = llroundf(v19 + (float)((float)((float)(a2 - v13) * (float)(v20 - v19)) / (float)(v17 - v13)));
          v11 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v21);
        }
        v10 += 2;
      }
      while (v8 > v14);
      if (!v11)
      {
LABEL_15:
        fig_log_get_emitter();
        FigDebugAssert3();
        return 0;
      }
      return v11;
    }
    v24 = v6 - 1;
    v23 = a1;
  }
  return objc_msgSend(v23, "objectAtIndexedSubscript:", v24);
}

const char *gr_sprintNode(const char *a1, void *a2)
{
  const char *result;

  result = gr_sprintString(a1, (CFStringRef)objc_msgSend(a2, "name"));
  if (!*a1)
  {
    result = gr_sprintString(a1, (CFStringRef)objc_msgSend(a2, "nodeSubType"));
    if (!*a1)
      return gr_sprintString(a1, (CFStringRef)objc_msgSend(a2, "nodeType"));
  }
  return result;
}

uint64_t BWSignalErrorAt()
{
  FigSignalErrorAt();
  return objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2F90], -50, 0);
}

uint64_t gr_countOfBuffersRetainedOutsideEmitCallbackOfOutput(void *a1, uint64_t a2, unsigned int a3)
{
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(a1, "mediaType");
  v7 = (void *)objc_msgSend((id)objc_msgSend(a1, "connection"), "input");
  if ((gr_outputAndInputShareAPipelineStage(a1, a2, v7) & 1) == 0)
    a3 += gr_outputOrInputIsStillImagePipelineStage(a1, a2, v7) ^ 1;
  v8 = objc_msgSend((id)objc_msgSend(v7, "mediaConfigurationForAttachedMediaKey:", a2), "retainedBufferCount")+ a3;
  if (objc_msgSend(v7, "_passthroughModeForAttachedMediaKey:", a2) == 1)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v9 = (void *)objc_msgSend((id)objc_msgSend(v7, "node"), "outputs");
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v10)
    {
      v11 = v10;
      v19 = a3;
      v12 = *(_QWORD *)v21;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v21 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v13);
          v15 = objc_msgSend(v14, "attachedMediaKeyDrivenByInputAttachedMediaKey:inputIndex:", a2, objc_msgSend(v7, "index"));
          if (v15)
          {
            v16 = v15;
            if (objc_msgSend(v14, "mediaType") == v6
              && objc_msgSend(v14, "_passthroughModeForAttachedMediaKey:", v16) == 1)
            {
              v17 = gr_countOfBuffersRetainedOutsideEmitCallbackOfOutput(v14, v16, v19);
              if (v17 <= (int)v8)
                v8 = v8;
              else
                v8 = v17;
            }
          }
          ++v13;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v11);
    }
  }
  return v8;
}

uint64_t gr_logStringForInput(void *a1)
{
  const __CFString *v2;

  if (objc_msgSend(a1, "name"))
    v2 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", '%@'"), objc_msgSend(a1, "name"));
  else
    v2 = &stru_1E4928818;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%p, %d, '%@'%@>"), a1, objc_msgSend(a1, "index"), BWStringForOSType(objc_msgSend(a1, "mediaType")), v2);
}

uint64_t gr_logStringForOutput(void *a1, uint64_t a2)
{
  const __CFString *v4;

  if (objc_msgSend(a1, "name"))
    v4 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(", '%@'"), objc_msgSend(a1, "name"));
  else
    v4 = &stru_1E4928818;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%p, %d, '%@'%@>"), a1, a2, BWStringForOSType(objc_msgSend(a1, "mediaType")), v4);
}

const char *gr_sprintString(const char *result, CFStringRef theString)
{
  char *v2;

  *(_OWORD *)result = 0u;
  *((_OWORD *)result + 1) = 0u;
  if (theString)
  {
    v2 = (char *)result;
    result = CFStringGetCStringPtr(theString, 0x8000100u);
    if (result)
      return (const char *)snprintf(v2, 0x20uLL, "%.*s", 31, result);
  }
  return result;
}

uint64_t BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame(const void *a1, char *a2)
{
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  os_log_type_t type;
  unsigned int v23;
  float v24;
  void *v25;
  int v26;
  const char *v27;
  __int16 v28;
  const void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = NAN;
  if (!a1
    || !a2
    || (v3 = (void *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0D05CB0], 0)) == 0
    || (v4 = v3,
        objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D20]), "intValue") != 1))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D08]), "floatValue");
  v5 = (const void *)objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0D06D00]);
  if (!v5)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_24;
  }
  v6 = v5;
  v21 = -1;
  v7 = portIndexFromPortType(v5, (int *)&v21);
  if ((_DWORD)v7)
  {
    v11 = v7;
    FigDebugAssert3();
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v16 = v23;
    if (os_log_type_enabled(v15, type))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if (v17)
    {
      v26 = 136315394;
      v27 = "BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame";
      v28 = 2112;
      v29 = v6;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_25;
  }
  v25 = v4;
  v8 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v25, 1);
  v9 = FigMotionComputeBlurScores(v8, v21, 4, 5);
  if ((_DWORD)v9)
  {
    v11 = v9;
    FigDebugAssert3();
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v19 = v23;
    if (os_log_type_enabled(v18, type))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if (v20)
    {
      v26 = 136315138;
      v27 = "BWDeepFusionEnhancedResolutionCanProcessUsingQuadraFrame";
      _os_log_send_and_compose_impl();
    }
LABEL_25:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v11;
  }
  if (v24 > 127.0)
  {
LABEL_24:
    v10 = 0;
    goto LABEL_10;
  }
  v10 = 1;
LABEL_10:
  v11 = 0;
  *a2 = v10;
  return v11;
}

double fvcd_applyZoomAndPreviewShiftToSensorSpaceRect(double a1, double a2, double a3, double a4, float a5, double a6)
{
  float v6;
  float v7;
  double v8;
  double result;

  if (a5 > 1.0)
  {
    v6 = 1.0 / a5;
    v7 = (float)(1.0 - v6) * 0.5;
    v8 = v6;
    a1 = v7 + a1 * v8;
    a3 = a3 * v8;
  }
  result = a6 + a1;
  if (1.0 - a3 < result)
    result = 1.0 - a3;
  if (result < 0.0)
    return 0.0;
  return result;
}

uint64_t fvcd_handleAutofocusProcessorNotification(int a1, uint64_t a2, CFTypeRef cf2, uint64_t a4, uint64_t a5)
{
  const __CFString *v8;
  uint64_t result;

  if (!a2 || !cf2)
    return FigDebugAssert3();
  if (CFEqual(CFSTR("SubjectAreaChanged"), cf2))
  {
    v8 = CFSTR("SubjectAreaChanged");
  }
  else if (CFEqual(CFSTR("DidStartFocusOperation"), cf2))
  {
    v8 = CFSTR("DidStartFocusOperation");
  }
  else if (CFEqual(CFSTR("DidCompleteFocusOperation"), cf2))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 1500));
    objc_msgSend(*(id *)(a2 + 1520), "focusScanDidComplete");
    objc_msgSend(*(id *)(a2 + 1536), "focusScanDidComplete");
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 1500));
    if (*(_QWORD *)(a2 + 1320) && (objc_msgSend((id)a2, "depthDataDeliveryEnabled") & 1) == 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a2 + 1288));
      if (*(_BYTE *)(a2 + 1332))
      {
        objc_msgSend(*(id *)(a2 + 1320), "focusModeDidChange");
        *(_BYTE *)(a2 + 1332) = 0;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 1288));
    }
    v8 = CFSTR("DidCompleteFocusOperation");
  }
  else
  {
    result = CFEqual(CFSTR("DidCancelFocusOperation"), cf2);
    if (!(_DWORD)result)
      return result;
    v8 = CFSTR("DidCancelFocusOperation");
  }
  return objc_msgSend((id)a2, "_postNotificationWithPayload:notificationPayload:", v8, a5);
}

void sub_1A30A1DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A30A504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1A30A9BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1A30AEE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fvcd_handleRegionOfInterestChangedForCameraControlsFromFramingDelegates(uint64_t result, unint64_t a2, unint64_t a3)
{
  BOOL v3;
  CGRect *v4;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double x;
  double y;
  double width;
  double height;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (*(_BYTE *)(result + 3548))
    v3 = (a2 | a3) == 0;
  else
    v3 = 1;
  if (v3)
    return result;
  v4 = (CGRect *)result;
  if (*(_BYTE *)(result + 240) || !*(_BYTE *)(result + 3624) && *(_BYTE *)(result + 4088))
    return result;
  if (!a2)
  {
    v7 = *MEMORY[0x1E0C9D628];
    v9 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v11 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v13 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    if (a3)
      goto LABEL_10;
LABEL_12:
    v15 = *MEMORY[0x1E0C9D628];
    v17 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
    v19 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
    v21 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
    goto LABEL_13;
  }
  objc_msgSend((id)a2, "regionOfInterestForCameraControls");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  if (!a3)
    goto LABEL_12;
LABEL_10:
  objc_msgSend((id)a3, "regionOfInterestForCameraControls");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
LABEL_13:
  v26.origin.x = v7;
  v26.origin.y = v9;
  v26.size.width = v11;
  v26.size.height = v13;
  v27 = CGRectUnion(v26, *(CGRect *)&v15);
  x = v27.origin.x;
  y = v27.origin.y;
  width = v27.size.width;
  height = v27.size.height;
  result = CGRectIsInfinite(v27);
  if ((result & 1) == 0)
  {
    v28.origin.x = x;
    v28.origin.y = y;
    v28.size.width = width;
    v28.size.height = height;
    result = CGRectIsEmpty(v28);
    if ((result & 1) == 0)
    {
      v29.origin.x = x;
      v29.origin.y = y;
      v29.size.width = width;
      v29.size.height = height;
      result = CGRectContainsRect(v4[111], v29);
      if ((_DWORD)result)
        return -[BWFigVideoCaptureDevice _updateSensorRegionOfInterest:forZoomFactor:previewShiftInSensorSpace:streamProperty:]((uint64_t)v4, *MEMORY[0x1E0D07728], x, y, width, height, 1.0, *MEMORY[0x1E0C9D538]);
    }
  }
  return result;
}

char *__fvcd_serviceRetryStillImageCapture_block_invoke(uint64_t a1)
{
  char *result;

  result = (char *)-[BWFigVideoCaptureDevice _captureStillImageNowOnStreamWithOptions:captureStreamProperties:](*(_QWORD *)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 32) + 2520), *(void **)(*(_QWORD *)(a1 + 32) + 2528));
  if ((_DWORD)result)
    return -[BWFigVideoCaptureDevice _terminateCaptureAndEmitStillImageCaptureError:stillImageCaptureNowOptions:stillImageCaptureStreamProperties:](*(char **)(a1 + 32), (uint64_t)result);
  return result;
}

void sub_1A30C7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureMemoryReporterStart()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  -[FigCaptureMemoryReporter _startReporting]((uint64_t)+[FigCaptureMemoryReporter sharedInstance](FigCaptureMemoryReporter, "sharedInstance"));
  if ((dword_1ECFE9630 & 1) != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

void *__getReportMemoryExceptionFromTaskSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = (void *)libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  v8 = libMemoryResourceExceptionLibraryCore_frameworkLibrary;
  if (!libMemoryResourceExceptionLibraryCore_frameworkLibrary)
  {
    v9 = xmmword_1E49267E8;
    v10 = 0;
    v2 = (void *)_sl_dlopen();
    v6[3] = (uint64_t)v2;
    libMemoryResourceExceptionLibraryCore_frameworkLibrary = (uint64_t)v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
    __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke_cold_1(&v4);
  if (v4)
    free(v4);
  result = dlsym(v2, "ReportMemoryExceptionFromTask");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getReportMemoryExceptionFromTaskSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1A30C75D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigRemoteQueueSenderGetTypeID()
{
  MEMORY[0x1A858C99C](&FigRemoteQueueSenderGetTypeID_registerOnce, rqSenderRegister);
  return sRemoteQueueSenderID;
}

uint64_t rqSenderRegister()
{
  uint64_t result;

  sRemoteQueueSenderClass = 0;
  unk_1ECFE9F00 = "FigRemoteQueueSender";
  qword_1ECFE9F08 = (uint64_t)rqSenderInit;
  unk_1ECFE9F10 = 0;
  qword_1ECFE9F18 = (uint64_t)rqSenderFinalize;
  unk_1ECFE9F20 = 0;
  qword_1ECFE9F28 = 0;
  unk_1ECFE9F30 = 0;
  qword_1ECFE9F38 = (uint64_t)rqSenderCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sRemoteQueueSenderID = result;
  return result;
}

intptr_t rqSenderCancelDequeues(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 104));
}

uint64_t FigRemoteQueueSenderSetMaximumBufferAge(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 216) = a2;
  return 0;
}

uint64_t FigRemoteQueueSenderEnqueue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v4 = rqSenderEnqueue(a1, a2, 1uLL);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t FigRemoteQueueSenderResetWithApplier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v4 = rqSenderReset(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t rqSenderReset(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  __IOSurface *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  IOSurfaceRef buffer;
  int v39;
  _QWORD block[5];
  _WORD __buf[256];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4))
  {
    v4 = 0;
    goto LABEL_6;
  }
  if (a2)
  {
    v4 = malloc_type_calloc(*(unsigned int *)(a1 + 40), 0x20uLL, 0x1000040E0EAB150uLL);
    if (!v4)
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      v5 = 4294950630;
      goto LABEL_25;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = read(*(_DWORD *)(a1 + 52), __buf, 0x200uLL);
  v7 = (v6 >> 1) & ~(v6 >> 31);
  if (*(_DWORD *)(a1 + 40) < v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v8 + 4) < (int)v7)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = *(_QWORD *)(a1 + 32);
  }
  v9 = (unsigned int *)(v8 + 4);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 - v7, v9));
  v11 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __rqSenderReset_block_invoke;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = a1;
  dispatch_sync(v11, block);
  if (*(_BYTE *)(a1 + 114))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 96), 0xFFFFFFFFFFFFFFFFLL);
    *(_BYTE *)(a1 + 114) = 0;
  }
  if (*(_BYTE *)(a1 + 113))
  {
    v12 = *(_QWORD *)(a1 + 144);
    if (v12)
      (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, a1);
    if (*(_DWORD *)(a1 + 40))
    {
      v13 = 0;
      v14 = 32;
      do
      {
        rqSenderCleanupQueueElement(*(_QWORD *)(a1 + 32) + v14);
        ++v13;
        v14 += 32;
      }
      while (v13 < *(unsigned int *)(a1 + 40));
    }
    if (a2)
      v5 = 4294950631;
    else
      v5 = 0;
    goto LABEL_25;
  }
  if ((_DWORD)v7)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = v18 + 32 * (unsigned __int16)__buf[v16];
      v39 = 0;
      v37 = 0;
      buffer = 0;
      v21 = *(_QWORD *)(v19 + 32);
      v20 = v19 + 32;
      v37 = v21;
      buffer = *(IOSurfaceRef *)(v20 + 16);
      v39 = *(_DWORD *)(v20 + 28);
      v22 = v39;
      if (*(int *)(v18 + 4 * v39 + 20) <= 0)
      {
        fig_log_get_emitter();
        FigDebugAssert3();
        v18 = *(_QWORD *)(a1 + 32);
        v22 = v39;
      }
      v23 = (unsigned int *)(v18 + 4 * v22 + 20);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 - 1, v23));
      if (a2 && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(a2 + 16))(a2, v7, v16, &v37))
      {
        v25 = (char *)&v4[8 * v17];
        v26 = v37;
        *(_QWORD *)v25 = v37;
        v27 = buffer;
        *((_QWORD *)v25 + 2) = buffer;
        *((_DWORD *)v25 + 7) = v39;
        if (v26)
        {
          *((_QWORD *)v25 + 1) = FigSharedMemBlockGetRemoteAddress(v26);
          v27 = buffer;
        }
        if (v27)
          v4[8 * v17 + 6] = IOSurfaceGetID(v27);
        v28 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v39 + 20);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        __buf[v17] = v17;
        ++v17;
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 144);
        if (v30)
          (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v30, a1);
        rqSenderCleanupQueueElement(v20);
      }
      ++v16;
    }
    while (v16 != v7);
  }
  else
  {
    v17 = 0;
  }
  v31 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v31 + 4) = v17;
  v32 = *(unsigned int *)(a1 + 40);
  if (v17 >= v32)
    v33 = 0;
  else
    v33 = v17;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 48) = v33;
  if (v17 < 1
    || (memcpy((void *)(v31 + 32), v4, 32 * v32), __dmb(0xBu), write(*(_DWORD *)(a1 + 56), __buf, 2 * v17) == 2 * v17))
  {
LABEL_6:
    v5 = 0;
    goto LABEL_25;
  }
  v34 = *(_QWORD *)(a1 + 144);
  if (v34)
    (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v34, a1);
  if (*(_DWORD *)(a1 + 40))
  {
    v35 = 0;
    v36 = 32;
    do
    {
      rqSenderCleanupQueueElement(*(_QWORD *)(a1 + 32) + v36);
      ++v35;
      v36 += 32;
    }
    while (v35 < *(unsigned int *)(a1 + 40));
  }
  *(_BYTE *)(a1 + 113) = 1;
  v5 = 4294950631;
LABEL_25:
  free(v4);
  return v5;
}

uint64_t FigRemoteQueueSenderReset(uint64_t a1)
{
  return FigRemoteQueueSenderResetWithApplier(a1, 0);
}

uint64_t FigRemoteQueueSenderResetIfFullAndEnqueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigRemoteQueueSenderResetIfFullAndEnqueueSequence(a1, a2, 1uLL, a3);
}

uint64_t FigRemoteQueueSenderResetIfFullAndEnqueueSequence(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v8 = rqSenderEnqueue(a1, a2, a3);
  if ((_DWORD)v8 == -16669)
  {
    v8 = rqSenderReset(a1, a4);
    if (!(_DWORD)v8)
      v8 = rqSenderEnqueue(a1, a2, a3);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v8;
}

uint64_t FigRemoteQueueSenderRegisterIOSurface(uint64_t a1, __IOSurface *a2)
{
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 72));
  v4 = rqSenderRegisterIOSurface(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 72));
  return v4;
}

uint64_t FigRemoteQueueSenderReleaseIOSurfaces(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  _QWORD v6[6];

  if (a1)
  {
    if (*(_DWORD *)(a1 + 156) && *(int *)(a1 + 152) > 0)
    {
      result = *(_QWORD *)(a1 + 168);
      if (result)
      {
        if (CFDictionaryGetCount((CFDictionaryRef)result) >= 1)
        {
          CFRetain((CFTypeRef)a1);
          v5 = *(_DWORD *)(a1 + 152);
          v6[0] = MEMORY[0x1E0C809B0];
          v6[1] = 0x40000000;
          v6[2] = __FigRemoteQueueSenderReleaseIOSurfaces_block_invoke;
          v6[3] = &unk_1E4926808;
          v6[4] = a2;
          v6[5] = a1;
          FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(v5, (uint64_t)v6);
        }
        return 0;
      }
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      return 4294950633;
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294950629;
  }
  return result;
}

void rqSurfacesRemoveAll(uint64_t a1)
{
  __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *(__CFDictionary **)a1;
  if (v2)
  {
    CFDictionaryRemoveAllValues(v2);
    v3 = *(_QWORD *)(a1 + 16);
    if (v3 >= 1)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 8);
        v7 = (_QWORD *)(v6 + v4);
        v8 = *(const void **)(v6 + v4);
        if (v8 && *(_DWORD *)(a1 + 48))
        {
          v9 = v6 + v4;
          v10 = *(_QWORD *)(v6 + v4 + 24);
          if (v10 != -1)
            *(_QWORD *)(v6 + 32 * v10 + 16) = *(_QWORD *)(v9 + 16);
          v11 = *(_QWORD *)(v9 + 16);
          if (v11 != -1)
            *(_QWORD *)(v6 + 32 * v11 + 24) = v10;
          if (i == *(_QWORD *)(a1 + 24))
            *(_QWORD *)(a1 + 24) = v11;
          if (i == *(_QWORD *)(a1 + 32))
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 24);
          CFRelease(v8);
          *v7 = 0;
          v7[1] = 0;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(v9 + 24) = -1;
          *(_QWORD *)(a1 + 40) = i;
          v3 = *(_QWORD *)(a1 + 16);
        }
        v4 += 32;
      }
    }
    v12 = *(void **)(a1 + 8);
    if (v12)
    {
      *(_QWORD *)(a1 + 8) = 0;
      free(v12);
    }
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = -1;
    *(_QWORD *)(a1 + 32) = -1;
    *(_QWORD *)(a1 + 40) = -1;
  }
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurface(unsigned int a1, mach_port_t port)
{
  IOSurfaceRef v3;
  IOSurfaceRef v4;
  const __CFArray *Value;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  CFRange v9;

  if (port)
  {
    v3 = IOSurfaceLookupFromMachPort(port);
    if (v3)
    {
      v4 = v3;
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)rqSharedSurfaces, (const void *)a1);
      if (Value)
      {
        v6 = Value;
        v9.length = CFArrayGetCount(Value);
        v9.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v9, v4);
        if (FirstIndexOfValue != -1)
          CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
      }
      CFRelease(v4);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    FigMachPortReleaseSendRight_();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return 0;
}

uint64_t FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurfaces(void *key)
{
  CFDictionaryRemoveValue((CFMutableDictionaryRef)rqSharedSurfaces, (const void *)key);
  return 0;
}

uint64_t FigRemoteQueueReceiverGetTypeID()
{
  MEMORY[0x1A858C99C](&FigRemoteQueueReceiverGetTypeID_registerOnce, rqReceiverRegister);
  return sRemoteQueueReceiverID;
}

uint64_t rqReceiverRegister()
{
  uint64_t result;

  sRemoteQueueReceiverClass = 0;
  *(_QWORD *)algn_1ECFEA3F8 = "FigRemoteQueueReceiver";
  qword_1ECFEA400 = (uint64_t)rqReceiverInit;
  unk_1ECFEA408 = 0;
  qword_1ECFEA410 = (uint64_t)rqReceiverFinalize;
  unk_1ECFEA418 = 0;
  qword_1ECFEA420 = 0;
  unk_1ECFEA428 = 0;
  qword_1ECFEA430 = (uint64_t)rqReceiverCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sRemoteQueueReceiverID = result;
  return result;
}

uint64_t FigRemoteQueueReceiverDequeue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 40));
  v4 = rqReceiverDequeue(a1, a2);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 40));
  return v4;
}

uint64_t FigRemoteQueueReceiverUnsetHandler(uint64_t a1)
{
  return FigRemoteQueueReceiverSetHandler(a1, 0, 0);
}

void rqSenderFinalize(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const void *v11;
  const void *v12;
  void *v13;
  const __CFDictionary *v14;
  const void *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  int v19;
  _QWORD block[5];

  if (*(_QWORD *)(a1 + 32))
    rqSenderReset(a1, 0);
  v2 = *(NSObject **)(a1 + 80);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __rqSenderFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_47_0;
    block[4] = a1;
    dispatch_sync(v3, block);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 104), 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(*(dispatch_object_t *)(a1 + 80));
  }
  v4 = *(NSObject **)(a1 + 104);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 96);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(a1 + 88);
  if (v6)
    dispatch_release(v6);
  v7 = *(_DWORD *)(a1 + 52);
  if ((v7 & 0x80000000) == 0)
    close(v7);
  v8 = *(_DWORD *)(a1 + 56);
  if ((v8 & 0x80000000) == 0)
    close(v8);
  v9 = *(_DWORD *)(a1 + 60);
  if ((v9 & 0x80000000) == 0)
    close(v9);
  v10 = *(_DWORD *)(a1 + 64);
  if ((v10 & 0x80000000) == 0)
    close(v10);
  FigRemoteQueueSenderSetContext((_QWORD *)a1, 0, 0, 0);
  FigSimpleMutexDestroy();
  FigSharedMemBlockRelease(*(_QWORD *)(a1 + 32));
  v11 = *(const void **)(a1 + 24);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 16);
  if (v12)
    CFRelease(v12);
  v13 = *(void **)(a1 + 120);
  if (v13)
  {
    os_release(v13);
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(_DWORD *)(a1 + 156))
  {
    v14 = *(const __CFDictionary **)(a1 + 168);
    if (v14 && CFDictionaryGetCount(v14) && !*(_BYTE *)(a1 + 113))
    {
      if (*(_BYTE *)(a1 + 160))
        FigMachPortReleaseReceiveRight_();
      v16 = *(_DWORD *)(a1 + 152);
      v17 = *(_DWORD *)(a1 + 156);
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = __rqSenderFinalize_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_48;
      v19 = v17;
      FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(v16, (uint64_t)v18);
    }
    else
    {
      if (*(_BYTE *)(a1 + 160))
        FigMachPortReleaseReceiveRight_();
      FigMachPortReleaseSendRight_();
    }
  }
  rqSurfacesRemoveAll(a1 + 168);
  v15 = *(const void **)(a1 + 168);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 168) = 0;
  }
}

CFStringRef rqSenderCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigRemoteQueueSender %p> {\n}"), a1);
}

void __rqSenderFinalize_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 112))
  {
    dispatch_resume(*(dispatch_object_t *)(v1 + 80));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 112) = 0;
  }
}

uint64_t __rqSenderFinalize_block_invoke_2(uint64_t a1)
{
  FigRemoteQueueIOSurfaceSender_ReleaseIOSurfaces(*(_DWORD *)(a1 + 32));
  return FigMachPortReleaseSendRight_();
}

uint64_t __rqSurfacesReleaseAgedOut_block_invoke(uint64_t a1)
{
  FigRemoteQueueIOSurfaceSender_ReleaseIOSurface(*(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
  return FigMachPortReleaseSendRight_();
}

uint64_t __rqSenderReset_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(int *)(*(_QWORD *)(v1 + 32) + 4) >= 1 && !*(_BYTE *)(v1 + 113))
    *(_BYTE *)(v1 + 114) = 1;
  return result;
}

void rqReceiverFinalize(uint64_t a1)
{
  int v2;
  int v3;
  const void *v4;
  void *v5;

  if (*(_DWORD *)(a1 + 96))
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 104));
  if (*(_QWORD *)(a1 + 56))
    rqReceiverFinalize_cold_2();
  if (*(_QWORD *)(a1 + 48))
    rqReceiverFinalize_cold_1();
  v2 = *(_DWORD *)(a1 + 36);
  if ((v2 & 0x80000000) == 0)
    close(v2);
  v3 = *(_DWORD *)(a1 + 32);
  if ((v3 & 0x80000000) == 0)
    close(v3);
  FigRemoteQueueReceiverSetContext((_QWORD *)a1, 0, 0);
  FigSimpleMutexDestroy();
  FigSharedMemBlockRelease(*(_QWORD *)(a1 + 24));
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    os_release(v5);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

CFStringRef rqReceiverCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigRemoteQueueReceiver %p> {\n}"), a1);
}

CFMutableDictionaryRef __rqReceiverCreate_block_invoke()
{
  CFMutableDictionaryRef result;

  rqSurfaceRegistrationQueue = (uint64_t)dispatch_queue_create("FigRemoteQueueSurfaceOperations", 0);
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  rqSharedSurfaces = (uint64_t)result;
  return result;
}

void __rqReceiverCreate_block_invoke_2(uint64_t a1)
{
  FigMachPortReleaseReceiveRight_();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  CFDictionaryRemoveValue((CFMutableDictionaryRef)rqSharedSurfaces, (const void *)*(unsigned int *)(a1 + 40));
}

void __rqReceiverSetSource_block_invoke_2(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_1A30C9270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A30C99F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getACCConnectionInfoClass_block_invoke(uint64_t a1)
{
  Class result;

  CoreAccessoriesLibrary();
  result = objc_getClass("ACCConnectionInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getACCConnectionInfoClass_block_invoke_cold_1();
  getACCConnectionInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t CoreAccessoriesLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!CoreAccessoriesLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E4926988;
    v3 = 0;
    CoreAccessoriesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreAccessoriesLibraryCore_frameworkLibrary)
    CoreAccessoriesLibrary_cold_1(&v1);
  return CoreAccessoriesLibraryCore_frameworkLibrary;
}

uint64_t __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  int v11;

  v6 = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
  v7 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v6);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke_2;
  v10[3] = &unk_1E49269C8;
  v8 = *(_QWORD *)(a1 + 40);
  v10[4] = v6;
  v10[5] = v8;
  v11 = *(_DWORD *)(a1 + 56);
  v10[6] = v7;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v10);
  return objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v7), a2);
}

uint64_t __fccp_fineTuneSDOFTuningParametersForContinuousZoom_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  float v6;
  float v7;
  double v8;
  float v9;

  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2), "floatValue");
  v7 = v6;
  objc_msgSend(a3, "floatValue");
  v9 = *(float *)&v8;
  if (*(_QWORD *)(a1 + 40) && objc_msgSend(a2, "hasPrefix:"))
    v9 = 0.0;
  *(float *)&v8 = (float)(v9 * (float)(1.0 - *(float *)(a1 + 56))) + (float)(v7 * *(float *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v8), a2);
}

void sub_1A30CE504(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v3 - 136), 8);
  objc_destroyWeak((id *)(v3 - 104));
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

BOOL __msp_configureTextLocalizationNode_block_invoke(uint64_t a1, opaqueCMSampleBuffer *a2, const void *a3)
{
  const void *v3;
  void *AttachedInference;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  id Weak;
  id v15;
  uint64_t v16;
  CVImageBufferRef ImageBuffer;
  int v18;
  int v19;
  int v20;
  const __CFDictionary *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t j;
  void *v30;
  void *v31;
  void *v32;
  CFDictionaryRef DictionaryRepresentation;
  float v34;
  double v35;
  CFDictionaryRef v36;
  uint64_t v38;
  const void *v39;
  int v40;
  uint64_t v41;
  CGSize v42;
  CGPoint v43;
  CGRect v44;
  CGRect v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  CGAffineTransform v50;
  CGAffineTransform v51;
  CGRect rect;
  CMTime v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;
  CGRect v61;
  CGRect v62;

  v3 = a3;
  v60 = *MEMORY[0x1E0C80C00];
  AttachedInference = (void *)BWInferenceGetAttachedInference(a3, 116, 0x1E4951198);
  if (objc_msgSend(objc_loadWeak((id *)(a1 + 40)), "logger"))
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(AttachedInference, "count"));
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v8 = objc_msgSend(AttachedInference, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v55;
      v11 = *MEMORY[0x1E0D08250];
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v55 != v10)
            objc_enumerationMutation(AttachedInference);
          objc_msgSend(v7, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i), "objectForKeyedSubscript:", v11));
        }
        v9 = objc_msgSend(AttachedInference, "countByEnumeratingWithState:objects:count:", &v54, v59, 16);
      }
      while (v9);
    }
  }
  else
  {
    v7 = 0;
  }
  v13 = objc_msgSend(AttachedInference, "count");
  if (!objc_msgSend(AttachedInference, "count"))
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend(AttachedInference, "count");
  memset(&v53, 0, sizeof(v53));
  CMSampleBufferGetPresentationTimeStamp(&v53, a2);
  Weak = objc_loadWeak((id *)(a1 + 40));
  v15 = objc_loadWeak((id *)(a1 + 48));
  v16 = objc_msgSend(AttachedInference, "count");
  *(_OWORD *)&v51.a = *(_OWORD *)&v53.value;
  *(_QWORD *)&v51.c = v53.epoch;
  objc_msgSend(Weak, "node:didEmitCodesCount:emittedIdentifiers:originalPTS:", v15, v16, v7, &v51);
  if (objc_msgSend(AttachedInference, "count"))
  {
    ImageBuffer = CMSampleBufferGetImageBuffer(a2);
    v18 = objc_msgSend((id)CMGetAttachment(ImageBuffer, CFSTR("RotationDegrees"), 0), "intValue");
    v19 = objc_msgSend((id)CMGetAttachment(ImageBuffer, CFSTR("MirroredHorizontal"), 0), "BOOLValue");
    v20 = objc_msgSend((id)CMGetAttachment(ImageBuffer, CFSTR("MirroredVertical"), 0), "BOOLValue");
    v42 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v43 = (CGPoint)*MEMORY[0x1E0C9D628];
    rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    rect.size = v42;
    v21 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0D05D18], 0);
    CGRectMakeWithDictionaryRepresentation(v21, &rect);
    memset(&v51, 0, sizeof(v51));
    FigCaptureGetTransformForMirroringRotationAndCrop(v19, v20, v18, (uint64_t)&v51, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
    v50 = v51;
    if (!CGAffineTransformIsIdentity(&v50))
    {
      v22 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(AttachedInference, "count"));
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v23 = objc_msgSend(AttachedInference, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
      if (!v23)
      {
        AttachedInference = v22;
        if (!v13)
          return v13 != 0;
        goto LABEL_30;
      }
      v24 = v23;
      v38 = v13;
      v39 = v3;
      v41 = *(_QWORD *)v47;
      v25 = *MEMORY[0x1E0D08240];
      v40 = v19 ^ v20;
      v26 = *MEMORY[0x1E0D08230];
      v27 = *MEMORY[0x1E0D08238];
      v28 = v22;
      do
      {
        for (j = 0; j != v24; ++j)
        {
          if (*(_QWORD *)v47 != v41)
            objc_enumerationMutation(AttachedInference);
          v30 = AttachedInference;
          v31 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * j);
          v32 = (void *)objc_msgSend(v31, "mutableCopy", v38, v39);
          v45.origin = v43;
          v45.size = v42;
          if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v31, "objectForKeyedSubscript:", v25), &v45))
          {
            v50 = v51;
            v61 = CGRectApplyAffineTransform(v45, &v50);
            DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v61);
            objc_msgSend(v32, "setObject:forKeyedSubscript:", DictionaryRepresentation, v25);

            v22 = v28;
          }
          if (v40)
          {
            objc_msgSend((id)objc_msgSend(v31, "objectForKeyedSubscript:", v26), "floatValue");
            *(float *)&v35 = -v34;
            objc_msgSend(v32, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v35), v26);
          }
          v44.origin = v43;
          v44.size = v42;
          if (CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(v31, "objectForKeyedSubscript:", v27), &v44))
          {
            v50 = v51;
            v62 = CGRectApplyAffineTransform(v44, &v50);
            v36 = CGRectCreateDictionaryRepresentation(v62);
            objc_msgSend(v32, "setObject:forKeyedSubscript:", v36, v27);

            v22 = v28;
          }
          objc_msgSend(v22, "addObject:", v32);

          AttachedInference = v30;
        }
        v24 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
      }
      while (v24);
      AttachedInference = v22;
      v13 = v38;
      v3 = v39;
    }
  }
  if (v13)
  {
LABEL_30:
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E0D05DC0], AttachedInference, 1u);
    CMSetAttachment(v3, (CFStringRef)*MEMORY[0x1E0D05DC8], (CFTypeRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(AttachedInference, "count")), 1u);
    CMRemoveAttachment(v3, CFSTR("Inferences"));
  }
  return v13 != 0;
}

uint64_t FigCaptureSourceServerStart()
{
  int AppBooleanValue;
  int v1;
  BOOL v2;
  int v3;
  const __CFString *v4;
  const __CFString *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  os_log_type_t type;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = xmmword_1E4926A38;
  v11 = *(_OWORD *)&off_1E4926A48;
  v12 = xmmword_1E4926A58;
  if (captureSourceServer_initializeStatics_onceToken != -1)
    dispatch_once(&captureSourceServer_initializeStatics_onceToken, &__block_literal_global_43);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("CelestialToCameraCaptureMigrationCompleted"), CFSTR("com.apple.cameracapture"), 0);
  v1 = CFPreferencesGetAppBooleanValue(CFSTR("VolatileDomainMigrationCompleted"), CFSTR("com.apple.cameracapture.volatile"), 0);
  if (AppBooleanValue)
    v2 = v1 == 0;
  else
    v2 = 1;
  if (v2)
  {
    v3 = v1;
    v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
    if (AppBooleanValue)
    {
      if (v1)
        goto LABEL_10;
    }
    else
    {
      CFPreferencesSetMultiple(0, (CFArrayRef)&unk_1E4A01AA8, CFSTR("com.apple.celestial"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      CFPreferencesSetValue(CFSTR("CelestialToCameraCaptureMigrationCompleted"), (CFPropertyListRef)*MEMORY[0x1E0C9AE50], CFSTR("com.apple.cameracapture"), v4, v5);
      if (v3)
        goto LABEL_10;
    }
    CFPreferencesSetMultiple(0, (CFArrayRef)&unk_1E4A01AC0, CFSTR("com.apple.cameracapture"), v4, v5);
    CFPreferencesSetValue(CFSTR("VolatileDomainMigrationCompleted"), (CFPropertyListRef)*MEMORY[0x1E0C9AE50], CFSTR("com.apple.cameracapture.volatile"), v4, v5);
LABEL_10:
    CFPreferencesSynchronize(CFSTR("com.apple.cameracapture"), v4, v5);
    CFPreferencesSynchronize(CFSTR("com.apple.cameracapture.volatile"), v4, v5);
    CFPreferencesSynchronize(CFSTR("com.apple.celestial"), v4, v5);
    if (dword_1ECFE9650)
      goto LABEL_15;
    goto LABEL_16;
  }
  if (dword_1ECFE9650)
  {
LABEL_15:
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_16:
  FigCaptureSourceInitialize((uint64_t)+[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings", v8, v9, v10, v11, v12), 1);
  if (FigCaptureAudiomxdSupportEnabled()
    && (FigCaptureCurrentProcessIsCameracaptured()
     || FigCaptureCurrentProcessIsMediaserverd()))
  {
    FigCaptureSpeakerSetInterferenceMitigationIsRequired(0, 1);
  }
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capturesource", (uint64_t)&v10, 0);
}

uint64_t captureSourceServer_handleNoReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    FigDebugAssert3();
  }
  else
  {
    v1 = 4294966630;
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
  }
  return v1;
}

uint64_t captureSourceServer_handleSourceCopyPropertyMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  CFTypeRef cf;
  CFTypeRef cf1;
  CFTypeRef v8;

  cf1 = 0;
  v8 = 0;
  cf = 0;
  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v5 = v2;
  }
  else
  {
    v3 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v3)
    {
      FigDebugAssert3();
      v5 = FigSignalErrorAt();
      goto LABEL_5;
    }
    v5 = v3;
  }
  FigDebugAssert3();
LABEL_5:
  if (cf1)
    CFRelease(cf1);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  return v5;
}

uint64_t captureSourceServer_handleSourceSetPropertyMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v3 = v2;
    FigDebugAssert3();
  }
  else
  {
    v3 = FigXPCHandleStdSetPropertyMessage();
    if ((_DWORD)v3)
      FigDebugAssert3();
  }
  return v3;
}

uint64_t captureSourceServer_handleSourceDestructionMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerDisassociateObjectWithConnection();
  if ((_DWORD)v2)
    FigDebugAssert3();
  return v2;
}

uint64_t captureSourceServer_handleSourceInvalidateMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
    v3 = v2;
  else
    v3 = 4294954516;
  FigDebugAssert3();
  return v3;
}

uint64_t captureSourceServer_handleCopySourcesMessage(_xpc_connection_s *a1, xpc_object_t xdict, void *a3)
{
  xpc_object_t v5;
  void *v6;
  void *v7;
  __CFString *v8;
  void *SupportedPrewarmingBundleIdentifiers;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, xpc_object_t *);
  int v17;
  void (*v18)(uint64_t, __CFString *, uint64_t, id *);
  BOOL v19;
  BOOL v20;
  BOOL v21;
  const __CFArray *v22;
  int v23;
  __CFArray *v24;
  CFIndex v25;
  const __CFArray *v26;
  const void *ValueAtIndex;
  void (*v28)(const void *);
  void (*v29)(const void *, __CFString *, _QWORD);
  void (*v30)(const void *);
  uint64_t v31;
  uint64_t SerializedSource;
  xpc_object_t v33;
  uint64_t v34;
  void *v36;
  xpc_object_t xdicta;
  id v38;
  id obj;
  int int64;
  _QWORD block[5];
  __int128 v42;
  __int128 v43;
  xpc_object_t value[2];
  __int128 v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;
  CFRange v55;

  v54 = *MEMORY[0x1E0C80C00];
  int64 = xpc_dictionary_get_int64(xdict, (const char *)*MEMORY[0x1E0CA36B0]);
  v5 = xpc_array_create(0, 0);
  if (!v5)
  {
    FigDebugAssert3();
    return 4294954510;
  }
  v6 = v5;
  v51 = 0u;
  v52 = 0u;
  xpc_connection_get_audit_token();
  xdicta = a3;
  if ((FigCaptureSessionIsLaunchPrewarmingEnabled() & 1) == 0
    || (value[0] = 0,
        (v7 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", xpc_connection_get_pid(a1)), value)) == 0)|| value[0])
  {
    FigCaptureGetSupportedPrewarmingBundleIdentifiers();
    v8 = 0;
LABEL_36:
    v23 = 0;
    goto LABEL_37;
  }
  v8 = (__CFString *)objc_msgSend((id)objc_msgSend(v7, "bundle"), "identifier");
  SupportedPrewarmingBundleIdentifiers = (void *)FigCaptureGetSupportedPrewarmingBundleIdentifiers();
  if (!v8 || !objc_msgSend(SupportedPrewarmingBundleIdentifiers, "containsObject:", v8))
    goto LABEL_36;
  pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
  if (objc_msgSend((id)sPrewarmingSourceList, "count"))
  {
    v36 = v6;
    v38 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    obj = (id)sPrewarmingSourceList;
    v10 = objc_msgSend((id)sPrewarmingSourceList, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v48;
      v13 = *MEMORY[0x1E0C9AE00];
      do
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v48 != v12)
            objc_enumerationMutation(obj);
          v15 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * i);
          value[0] = 0;
          v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, xpc_object_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v16)
            v16(v15, CFSTR("AttributesDictionary"), v13, value);
          v17 = objc_msgSend((id)objc_msgSend(value[0], "objectForKeyedSubscript:", CFSTR("SourceType")), "intValue");

          v46 = 0;
          v18 = *(void (**)(uint64_t, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
          if (v18)
            v18(v15, CFSTR("ClientBundleIdentifier"), v13, &v46);
          if (-[__CFString isEqualToString:](v8, "isEqualToString:", v46))
          {
            v19 = (int64 & 2) != 0 && v17 == 2;
            v20 = !v19;
            v21 = (int64 & 1) != 0 && v17 == 1;
            if (v21 || !v20)
              objc_msgSend(v38, "addObject:", v15);
          }

        }
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v53, 16);
      }
      while (v11);
    }
    v22 = (const __CFArray *)v38;
    if (objc_msgSend(v38, "count"))
    {
      objc_msgSend((id)sPrewarmingSourceList, "removeObjectsInArray:", v38);
      pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
      v23 = 1;
      v6 = v36;
      if (v38)
        goto LABEL_38;
      goto LABEL_37;
    }

    v6 = v36;
  }
  pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  v23 = 1;
LABEL_37:
  *(_OWORD *)value = v51;
  v45 = v52;
  v22 = FigCaptureSourceCopySourcesForClientAuditToken(int64, (__int128 *)value, 0, 1);
  if (!v22)
  {
    FigDebugAssert3();
    v34 = 4294954513;
    goto LABEL_60;
  }
LABEL_38:
  if (!pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
  {
    v24 = (__CFArray *)sSourceList;
    v55.length = CFArrayGetCount(v22);
    v55.location = 0;
    CFArrayAppendArray(v24, v22, v55);
    pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  }
  if (CFArrayGetCount(v22) < 1)
  {
LABEL_56:
    xpc_dictionary_set_value(xdicta, (const char *)*MEMORY[0x1E0CA36C8], v6);
    if ((int64 & 1) != 0)
    {
      CFRetain(v22);
      block[1] = 3221225472;
      v42 = v51;
      block[0] = MEMORY[0x1E0C809B0];
      block[2] = __captureSourceServer_handleCopySourcesMessage_block_invoke;
      block[3] = &__block_descriptor_72_e5_v8__0l;
      v43 = v52;
      block[4] = v22;
      dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, block);
    }
    v34 = 0;
    if (!v22)
      goto LABEL_60;
  }
  else
  {
    v25 = 0;
    while (1)
    {
      v46 = 0;
      v26 = v22;
      ValueAtIndex = CFArrayGetValueAtIndex(v22, v25);
      if (v23)
      {
        if (!v8)
          v8 = &stru_1E4928818;
        v28 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v28)
          v28(ValueAtIndex);
        *(_OWORD *)value = v51;
        v45 = v52;
        FigCaptureSourceAttachToClient((uint64_t)ValueAtIndex, value, v8);
        v29 = *(void (**)(const void *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v29)
          v29(ValueAtIndex, CFSTR("PrewarmingEnabled"), MEMORY[0x1E0C9AAB0]);
        v30 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v30)
          v30(ValueAtIndex);
      }
      v31 = FigXPCServerAssociateObjectWithConnection();
      if ((_DWORD)v31)
      {
        v34 = v31;
        goto LABEL_66;
      }
      value[0] = 0;
      SerializedSource = captureSourceServer_createSerializedSource((uint64_t)ValueAtIndex, (uint64_t)v46, value);
      if ((_DWORD)SerializedSource)
        break;
      v33 = value[0];
      xpc_array_append_value(v6, value[0]);
      v22 = v26;
      if (v33)
        CFRelease(v33);
      if (CFArrayGetCount(v26) <= ++v25)
        goto LABEL_56;
    }
    v34 = SerializedSource;
LABEL_66:
    FigDebugAssert3();
    v22 = v26;
    if (!v26)
      goto LABEL_60;
  }
  CFRelease(v22);
LABEL_60:
  CFRelease(v6);
  return v34;
}

uint64_t captureSourceServer_handleCopyProxySourceMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  pthread_mutex_t **v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  uint64_t (*v10)(const void *, __CFString *, uint64_t, id *);
  uint64_t v11;
  int v12;
  uint64_t (*v13)(const void *, const __CFString *, uint64_t, id *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, __CFString *, uint64_t, id *);
  uint64_t SerializedSource;
  uint64_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t xdict;
  xpc_object_t value[2];
  __int128 v24;
  __int128 v25[2];
  id v26;
  id v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  id v34;
  __int128 v35;
  __int128 v36;
  const void *v37;

  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0;
  v34 = 0;
  v31 = 0u;
  v32 = 0u;
  xpc_connection_get_audit_token();
  v29 = 0u;
  v30 = 0u;
  if ((FigCaptureClientHasEntitlement(&v29, CFSTR("com.apple.private.avfoundation.capture.proxy-devices.allow")) & 1) == 0)
  {
    FigDebugAssert3();
    SerializedSource = FigSignalErrorAt();
    goto LABEL_30;
  }
  v4 = FigXPCMessageCopyCFString();
  if ((_DWORD)v4)
  {
    SerializedSource = v4;
LABEL_35:
    FigDebugAssert3();
    goto LABEL_30;
  }
  v5 = FigXPCMessageCopyCFData();
  if ((_DWORD)v5)
  {
    SerializedSource = v5;
    goto LABEL_35;
  }
  objc_msgSend(v33, "getBytes:length:", &v31, 32);
  v6 = (pthread_mutex_t **)&unk_1ECFE9000;
  pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
  if (CFArrayGetCount((CFArrayRef)sSourceList) < 1)
  {
    SerializedSource = 0;
    goto LABEL_28;
  }
  xdict = a3;
  v7 = 0;
  v8 = *MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v7);
    v28 = 0;
    v10 = *(uint64_t (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (!v10)
    {
      SerializedSource = 4294954514;
LABEL_19:
      v6 = (pthread_mutex_t **)&unk_1ECFE9000;
      goto LABEL_22;
    }
    v11 = v10(ValueAtIndex, CFSTR("HasProxy"), v8, &v28);
    if ((_DWORD)v11)
    {
      SerializedSource = v11;
      goto LABEL_19;
    }
    v12 = objc_msgSend(v28, "BOOLValue");

    v28 = 0;
    if (v12)
    {
      SerializedSource = FigSignalErrorAt();
      goto LABEL_27;
    }
    v27 = 0;
    v13 = *(uint64_t (**)(const void *, const __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (!v13)
    {
      SerializedSource = 4294954514;
      goto LABEL_21;
    }
    v14 = v13(ValueAtIndex, CFSTR("AttributesDictionary"), v8, &v27);
    if ((_DWORD)v14)
    {
      SerializedSource = v14;
LABEL_21:
      v6 = (pthread_mutex_t **)&unk_1ECFE9000;
LABEL_22:
      FigDebugAssert3();
      goto LABEL_28;
    }
    v15 = objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("UniqueID"));

    v27 = 0;
    if ((objc_msgSend(v34, "isEqualToString:", v15) & 1) != 0)
    {
      v26 = 0;
      v16 = *(void (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v16)
        v16(ValueAtIndex, CFSTR("ClientAuditToken"), v8, &v26);
      v29 = 0u;
      v30 = 0u;
      objc_msgSend(v26, "getBytes:length:", &v29, 32);

      v26 = 0;
      v25[0] = v31;
      v25[1] = v32;
      *(_OWORD *)value = v29;
      v24 = v30;
      if ((FigCaptureAuditTokenProcessesAreEqual(v25, (__int128 *)value) & 1) != 0)
        break;
    }
    if (CFArrayGetCount((CFArrayRef)sSourceList) <= ++v7)
    {
      SerializedSource = 0;
      goto LABEL_27;
    }
  }
  *(_QWORD *)&v25[0] = 0;
  v18 = FigCaptureSourceProxyCreate(v8, ValueAtIndex, &v37);
  if ((_DWORD)v18)
  {
    SerializedSource = v18;
  }
  else
  {
    CFArrayAppendValue((CFMutableArrayRef)sProxySourceList, v37);
    v19 = FigXPCServerAssociateObjectWithConnection();
    if ((_DWORD)v19)
    {
      SerializedSource = v19;
    }
    else
    {
      value[0] = 0;
      SerializedSource = captureSourceServer_createSerializedSource((uint64_t)ValueAtIndex, *(uint64_t *)&v25[0], value);
      if (!(_DWORD)SerializedSource)
      {
        v20 = value[0];
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CA36C8], value[0]);
        xpc_release(v20);
        goto LABEL_27;
      }
    }
  }
  FigDebugAssert3();
LABEL_27:
  v6 = (pthread_mutex_t **)&unk_1ECFE9000;
LABEL_28:
  pthread_mutex_unlock(v6[506]);
  if (v37)
    CFRelease(v37);
LABEL_30:

  return SerializedSource;
}

uint64_t captureSourceServer_handleCheckTCCAccessMessage(int a1, void *a2)
{
  uint64_t v2;
  _QWORD block[4];
  __int128 v5;
  __int128 v6;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    FigDebugAssert3();
  }
  else
  {
    xpc_connection_get_audit_token();
    v5 = 0u;
    v6 = 0u;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSourceServer_checkCameraAccessForClientAsync_block_invoke;
    block[3] = &__block_descriptor_64_e5_v8__0l;
    dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, block);
  }
  return v2;
}

void captureSourceServer_handleMaxStillImageJPEGDataSizeMessage(xpc_object_t xdict)
{
  if (captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_onceToken != -1)
    dispatch_once(&captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_onceToken, &__block_literal_global_25_1);
  xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E0CA36C8], captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_maxDataSize);
}

uint64_t captureSourceServer_handleCopyClockMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t WrapperForClockWithManualCommandPortSendRightInsertion;
  const char *v15;
  int64_t ServerTimeoutToken;
  uint64_t v17;
  CFTypeRef cf;
  uint64_t v20;
  CFTypeRef v21;

  v20 = 0;
  v21 = 0;
  cf = 0;
  v6 = captureSourceServer_getAndRetainSourceObjectFromMessage((int)a1, a2);
  if ((_DWORD)v6)
  {
    v17 = v6;
    FigDebugAssert3();
    goto LABEL_14;
  }
  v7 = v20;
  v8 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v8)
  {
    v17 = 4294954514;
LABEL_13:
    FigDebugAssert3();
    goto LABEL_14;
  }
  v9 = *MEMORY[0x1E0C9AE00];
  v10 = v8(v20, CFSTR("ClockType"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v10)
  {
    v17 = v10;
    goto LABEL_13;
  }
  v11 = objc_msgSend((id)cf, "intValue");
  if (v11 != 2)
  {
LABEL_10:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockObjectToken, 0);
    v15 = (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockTimeoutToken;
    ServerTimeoutToken = FigRemote_GetServerTimeoutToken();
    xpc_dictionary_set_int64(a3, v15, ServerTimeoutToken);
    xpc_dictionary_set_mach_send();
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerCopyClockMessagePayload_ClockType, v11);
    v17 = 0;
    goto LABEL_14;
  }
  if ((FigCaptureAudiomxdSupportEnabled() & 1) == 0)
  {
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (v12)
    {
      v13 = v12(v7, CFSTR("Clock"), v9, &v21);
      if ((_DWORD)v13)
      {
        v17 = v13;
      }
      else
      {
        if (!v21)
          goto LABEL_10;
        xpc_dictionary_copy_mach_send();
        xpc_dictionary_get_int64(a2, (const char *)kFigCaptureSourceRemoteCopyClockMessagePayload_ClientClockToken);
        xpc_connection_get_pid(a1);
        WrapperForClockWithManualCommandPortSendRightInsertion = FigAudioDeviceClockServer_MakeWrapperForClockWithManualCommandPortSendRightInsertion();
        if (!(_DWORD)WrapperForClockWithManualCommandPortSendRightInsertion)
          goto LABEL_10;
        v17 = WrapperForClockWithManualCommandPortSendRightInsertion;
      }
    }
    else
    {
      v17 = 4294954514;
    }
    goto LABEL_13;
  }
  v17 = 4294954509;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  return v17;
}

uint64_t captureSourceServer_handleShowSystemUserInterfaceMessage(void *a1)
{
  int int64;
  const char *string;
  const char *v4;
  BOOL v5;
  const char *v7;
  const __CFAllocator *v8;
  CFStringRef v9;
  CFStringRef v10;

  int64 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_SystemUserInterface);
  string = xpc_dictionary_get_string(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_BundleID);
  v4 = xpc_dictionary_get_string(a1, (const char *)kFigCaptureSourceRemoteShowSystemUserInterfaceMessagePayload_AppName);
  if (int64)
    v5 = string == 0;
  else
    v5 = 1;
  if (v5 || v4 == 0)
  {
    FigDebugAssert3();
    return 4294954516;
  }
  else
  {
    v7 = v4;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], string, 0x8000100u);
    v10 = CFStringCreateWithCString(v8, v7, 0x8000100u);
    FigCaptureSourceShowSystemUserInterface(int64, v9, v10);
    if (v9)
      CFRelease(v9);
    if (v10)
      CFRelease(v10);
    return 0;
  }
}

uint64_t captureSourceServer_handleCopyProprietaryDefaultMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  v7 = 0;
  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v5 = v2;
    goto LABEL_10;
  }
  v3 = FigXPCMessageCopyCFString();
  if ((_DWORD)v3)
  {
    v5 = v3;
    goto LABEL_10;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x20])
  {
    v5 = 4294954514;
LABEL_10:
    FigDebugAssert3();
    goto LABEL_11;
  }
  v4 = MEMORY[0x20](0, v8, &v7);
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_10;
  }
  if (!v7)
    v7 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
  FigXPCMessageSetCFObject();
  v5 = 0;
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  return v5;
}

uint64_t captureSourceServer_handleSetProprietaryDefaultMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v5 = v2;
    goto LABEL_9;
  }
  v3 = FigXPCMessageCopyCFString();
  if ((_DWORD)v3)
  {
    v5 = v3;
    goto LABEL_9;
  }
  v4 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v4)
  {
    v5 = v4;
    goto LABEL_9;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x28])
  {
    v5 = 4294954514;
LABEL_9:
    FigDebugAssert3();
    return v5;
  }
  v5 = MEMORY[0x28](0, 0, 0);
  if ((_DWORD)v5)
    goto LABEL_9;
  return v5;
}

uint64_t captureSourceServer_handleCopyWildcardProprietaryDefaultMessage(int a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef cf;

  v12 = 0;
  cf = 0;
  v11 = 0;
  v4 = xpc_connection_copy_entitlement_value();
  v5 = (void *)v4;
  if (!v4 || MEMORY[0x1A858E754](v4) != MEMORY[0x1E0C812D0] || !xpc_BOOL_get_value(v5))
  {
    v6 = 4294954513;
    goto LABEL_4;
  }
  v8 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v8)
  {
    v6 = v8;
    goto LABEL_23;
  }
  v9 = FigXPCMessageCopyCFString();
  if ((_DWORD)v9)
  {
    v6 = v9;
    goto LABEL_23;
  }
  if (MEMORY[0] < 7uLL || !MEMORY[0x70])
  {
    v6 = 4294954514;
LABEL_23:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v10 = MEMORY[0x70](0, v12, &v11);
  if ((_DWORD)v10)
  {
    v6 = v10;
    goto LABEL_23;
  }
  if (!v11)
    v11 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
  FigXPCMessageSetCFObject();
  v6 = 0;
LABEL_4:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (v5)
    xpc_release(v5);
  return v6;
}

uint64_t captureSourceServer_handleSetWildcardProprietaryDefaultMessage(int a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef cf1;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  cf1 = 0;
  v4 = xpc_connection_copy_entitlement_value();
  v5 = (void *)v4;
  if (!v4 || MEMORY[0x1A858E754](v4) != MEMORY[0x1E0C812D0] || !xpc_BOOL_get_value(v5))
  {
    v6 = 4294954513;
    goto LABEL_4;
  }
  v8 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v8)
  {
    v6 = v8;
    goto LABEL_24;
  }
  v9 = FigXPCMessageCopyCFString();
  if ((_DWORD)v9)
  {
    v6 = v9;
    goto LABEL_24;
  }
  v10 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v10)
  {
    v6 = v10;
    goto LABEL_24;
  }
  v12 = 0;
  if (MEMORY[0] < 7uLL || !MEMORY[0x78])
  {
    v6 = 4294954514;
LABEL_24:
    FigDebugAssert3();
    goto LABEL_4;
  }
  v11 = MEMORY[0x78](0, v14, 0, &v12);
  if ((_DWORD)v11)
  {
    v6 = v11;
    goto LABEL_24;
  }
  if (v12)
  {
    FigXPCMessageSetCFObject();
    CFRelease(v12);
  }
  v6 = 0;
LABEL_4:
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (cf1)
    CFRelease(cf1);
  if (v5)
    xpc_release(v5);
  return v6;
}

uint64_t captureSourceServer_handleRegisterNotificationForProprietaryDefaultChangesMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v4 = v2;
    goto LABEL_8;
  }
  v3 = FigXPCMessageCopyCFString();
  if ((_DWORD)v3)
  {
    v4 = v3;
    goto LABEL_8;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x30])
  {
    v4 = 4294954514;
LABEL_8:
    FigDebugAssert3();
    return v4;
  }
  v4 = MEMORY[0x30](0, 0);
  if ((_DWORD)v4)
    goto LABEL_8;
  return v4;
}

uint64_t captureSourceServer_handleUnregisterNotificationForProprietaryDefaultChangesMessage(int a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v2)
  {
    v4 = v2;
    goto LABEL_8;
  }
  v3 = FigXPCMessageCopyCFString();
  if ((_DWORD)v3)
  {
    v4 = v3;
    goto LABEL_8;
  }
  if (MEMORY[0] < 2uLL || !MEMORY[0x38])
  {
    v4 = 4294954514;
LABEL_8:
    FigDebugAssert3();
    return v4;
  }
  v4 = MEMORY[0x38](0, 0);
  if ((_DWORD)v4)
    goto LABEL_8;
  return v4;
}

uint64_t captureSourceServer_handlePublishFrameSenderEndpointMessage(void *a1)
{
  xpc_object_t value;
  xpc_object_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t int64;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;

  value = xpc_dictionary_get_value(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_Endpoint);
  if (!value)
    goto LABEL_16;
  v3 = value;
  v4 = FigXPCMessageCopyCFString();
  if ((_DWORD)v4)
  {
    v9 = v4;
LABEL_15:
    FigDebugAssert3();
    return v9;
  }
  v5 = FigXPCMessageCopyCFString();
  if ((_DWORD)v5)
  {
    v9 = v5;
    goto LABEL_15;
  }
  int64 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointPID);
  if (!(_DWORD)int64)
    goto LABEL_16;
  v7 = xpc_dictionary_get_int64(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointProxyPID);
  v8 = FigXPCMessageCopyCFData();
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_15;
  }
  FigXPCMessageCopyCFData();
  FigXPCMessageCopyCFString();
  if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton addEndpoint:endpointUniqueID:endpointType:endpointPID:endpointProxyPID:endpointAuditToken:endpointProxyAuditToken:endpointCameraUniqueID:](CMCaptureFrameSenderEndpointsServerSideSingleton, "addEndpoint:endpointUniqueID:endpointType:endpointPID:endpointProxyPID:endpointAuditToken:endpointProxyAuditToken:endpointCameraUniqueID:", v3, 0, 0, int64, v7, 0, 0, CFSTR("unknown")))
  {
LABEL_16:
    FigDebugAssert3();
    return 0;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter"), "postNotificationName:object:", CFSTR("FrameServerEndpointsChanged"), 0);
  return 0;
}

uint64_t captureSourceServer_handleSuppressFrameSenderEndpointMessage(_xpc_connection_s *a1)
{
  uint64_t v2;
  uint64_t pid;

  v2 = FigXPCMessageCopyCFString();
  if ((_DWORD)v2)
    goto LABEL_8;
  pid = xpc_connection_get_pid(a1);
  if (objc_msgSend(0, "isEqualToString:", CFSTR("all-endpoint-uids")))
  {
    if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton removeAllEndpointsWithPID:](CMCaptureFrameSenderEndpointsServerSideSingleton, "removeAllEndpointsWithPID:", pid))
    {
LABEL_8:
      FigDebugAssert3();
      return v2;
    }
  }
  else if (!+[CMCaptureFrameSenderEndpointsServerSideSingleton removeEndpointWithUniqueID:](CMCaptureFrameSenderEndpointsServerSideSingleton, "removeEndpointWithUniqueID:", 0))
  {
    goto LABEL_8;
  }
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB35B0], "defaultCenter"), "postNotificationName:object:", CFSTR("FrameServerEndpointsChanged"), 0);
  return v2;
}

uint64_t captureSourceServer_handleCopyFrameSenderEndpointsMessage(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = +[CMCaptureFrameSenderEndpointsServerSideSingleton createXPCArrayOfFrameSenderEndpoints](CMCaptureFrameSenderEndpointsServerSideSingleton, "createXPCArrayOfFrameSenderEndpoints");
  if (v2)
  {
    xpc_dictionary_set_value(a1, (const char *)kFigCaptureSourceRemoteFrameSenderEndpointMessagePayload_EndpointArray, v2);
    v3 = 0;
  }
  else
  {
    FigDebugAssert3();
    v3 = 4294954516;
  }
  FigXPCRelease();
  return v3;
}

uint64_t captureSourceServer_handleUpdateCameraHistoryMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5;
  uint64_t pid;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  _BOOL8 v12;
  uint64_t updated;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v16;
  unsigned int valuePtr;
  CFNumberRef number;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;
  uint64_t v22;

  v5 = (int)a1;
  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  cf = 0;
  number = 0;
  v19 = 0;
  valuePtr = 0;
  v16 = 0;
  pid = xpc_connection_get_pid(a1);
  v7 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if ((_DWORD)v7)
  {
    updated = v7;
LABEL_31:
    FigDebugAssert3();
LABEL_10:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)updated);
    goto LABEL_16;
  }
  v8 = FigXPCMessageCopyCFString();
  if ((_DWORD)v8)
  {
    updated = v8;
    goto LABEL_31;
  }
  v9 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v9)
  {
    updated = v9;
    goto LABEL_31;
  }
  v10 = FigXPCMessageCopyCFNumber();
  if ((_DWORD)v10)
  {
    updated = v10;
    goto LABEL_31;
  }
  CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
  if (v20)
  {
    if (css_cameraInfoIsValid((void *)v19))
    {
      if (valuePtr)
      {
        if (valuePtr <= 0x13)
        {
          v11 = xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_UpdateCameraHistoryDownplayOverrideList);
          v12 = xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteUpdateCameraHistoryMessageKey_CameraCanBeInOverrideList);
          updated = FigCaptureSourceUpdateCameraHistory((uint64_t)cf, pid, (uint64_t)v20, (uint64_t)v19, valuePtr, v11, v12, (uint64_t)&v16);
          if ((_DWORD)updated)
            goto LABEL_10;
        }
      }
    }
  }
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (v16)
    FigXPCMessageSetCFArray();
  if (dword_1ECFE9650)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  updated = 0;
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  if (number)
    CFRelease(number);
  if (v16)
    CFRelease(v16);
  return updated;
}

uint64_t captureSourceServer_handleUpdateCameraOverrideHistoryMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;

  v5 = (int)a1;
  v14 = 0;
  cf = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  xpc_connection_get_pid(a1);
  v6 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if ((_DWORD)v6)
  {
    v9 = v6;
LABEL_19:
    FigDebugAssert3();
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v9);
    goto LABEL_7;
  }
  v7 = FigXPCMessageCopyCFString();
  if ((_DWORD)v7)
  {
    v9 = v7;
    goto LABEL_19;
  }
  v8 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v8)
  {
    v9 = v8;
    goto LABEL_19;
  }
  xpc_dictionary_get_BOOL(a2, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryMessageKey_SetOverride);
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  xpc_dictionary_set_BOOL(a3, (const char *)kFigCaptureSourceRemoteCameraOverrideHistoryReplyMessageKey_OverrideChangedValue, v11 != 0);
  if (v11)
    FigXPCMessageSetCFArray();
  v9 = 0;
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t captureSourceServer_handleCameraHistoryDownplayOverrideListMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5;
  uint64_t pid;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[24];

  v5 = (int)a1;
  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  cf[1] = 0;
  pid = xpc_connection_get_pid(a1);
  v7 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if ((_DWORD)v7)
  {
    v9 = v7;
    FigDebugAssert3();
    goto LABEL_7;
  }
  if (MEMORY[0] < 3uLL || !MEMORY[0x40])
  {
    v9 = 4294954514;
    goto LABEL_7;
  }
  v8 = MEMORY[0x50](0, pid, cf);
  if ((_DWORD)v8)
  {
    v9 = v8;
LABEL_7:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v9);
    goto LABEL_8;
  }
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (cf[0])
    FigXPCMessageSetCFArray();
  if (dword_1ECFE9650)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v9 = 0;
LABEL_8:
  if (cf[0])
    CFRelease(cf[0]);
  return v9;
}

uint64_t captureSourceServer_handleProprietaryDefaultsDomainForAuditToken(_xpc_connection_s *a1, void *a2, void *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __SecTask *v11;
  __SecTask *v12;
  CFTypeRef v13;
  BOOL v14;
  const void *v15;
  CFTypeID v16;
  CFTypeRef v17;
  _QWORD *v18;
  uint64_t (*v19)(CFTypeRef, audit_token_t *, CFTypeRef *);
  uint64_t v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  audit_token_t buffer[2];
  CFTypeRef v24;
  CFDataRef theData;
  CFTypeRef cf;
  audit_token_t token;
  audit_token_t v28;
  uint64_t v29;
  CFRange v30;

  v5 = (int)a1;
  v29 = *MEMORY[0x1E0C80C00];
  theData = 0;
  cf = 0;
  v24 = 0;
  xpc_connection_get_pid(a1);
  memset(&buffer[1], 0, sizeof(audit_token_t));
  v6 = captureSourceServer_getAndRetainSourceObjectFromMessage(v5, a2);
  if ((_DWORD)v6)
  {
    v20 = v6;
LABEL_48:
    FigDebugAssert3();
    goto LABEL_37;
  }
  v7 = FigXPCMessageCopyCFData();
  if ((_DWORD)v7)
  {
    v20 = v7;
    goto LABEL_48;
  }
  memset(buffer, 0, 32);
  v30.location = 0;
  v30.length = 32;
  CFDataGetBytes(theData, v30, (UInt8 *)buffer);
  xpc_connection_get_audit_token();
  if (*(_QWORD *)buffer[0].val)
    v8 = 0;
  else
    v8 = *(_QWORD *)&buffer[0].val[2] == 0;
  if (v8 && *(_QWORD *)&buffer[0].val[4] == 0 && *(_QWORD *)&buffer[0].val[6] == 0)
  {
    buffer[0] = buffer[1];
  }
  else
  {
    token = buffer[1];
    v11 = SecTaskCreateWithAuditToken((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &token);
    if (!v11)
      goto LABEL_49;
    v12 = v11;
    *(_QWORD *)token.val = 0;
    v13 = SecTaskCopyValueForEntitlement(v11, CFSTR("com.apple.private.tcc.manager.get-identity-for-credential"), (CFErrorRef *)&token);
    v14 = 0;
    v15 = *(const void **)token.val;
    if (!*(_QWORD *)token.val && v13)
    {
      v16 = CFGetTypeID(v13);
      v14 = v16 == CFBooleanGetTypeID() && CFBooleanGetValue((CFBooleanRef)v13) != 0;
      v15 = *(const void **)token.val;
    }
    if (v15)
      CFRelease(v15);
    if (v13)
      CFRelease(v13);
    CFRelease(v12);
    if (!v14)
    {
LABEL_49:
      FigDebugAssert3();
      goto LABEL_32;
    }
  }
  v17 = cf;
  v28 = buffer[0];
  if (cf)
    v18 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  else
    v18 = 0;
  if (*v18 < 5uLL || (v19 = (uint64_t (*)(CFTypeRef, audit_token_t *, CFTypeRef *))v18[12]) == 0)
  {
    v20 = 4294954514;
    goto LABEL_37;
  }
  token = v28;
  v20 = v19(v17, &token, &v24);
  if ((_DWORD)v20)
  {
LABEL_37:
    xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, (int)v20);
    goto LABEL_38;
  }
LABEL_32:
  xpc_dictionary_set_int64(a3, (const char *)kFigCaptureSourceServerMessagePayload_ErrorStatus, 0);
  if (v24)
    FigXPCMessageSetCFString();
  if (dword_1ECFE9650)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v20 = 0;
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (theData)
    CFRelease(theData);
  if (v24)
    CFRelease(v24);
  return v20;
}

uint64_t captureSourceServer_handleSetPixelBufferPropertyMessage(int a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  xpc_object_t value;
  __IOSurface *v6;
  __IOSurface *v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  _QWORD *v11;
  uint64_t (*v12)(CFTypeRef, CFTypeRef, uint64_t);
  CVPixelBufferRef pixelBufferOut;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  pixelBufferOut = 0;
  v3 = captureSourceServer_getAndRetainSourceObjectFromMessage(a1, a2);
  if ((_DWORD)v3)
  {
    v8 = v3;
LABEL_26:
    FigDebugAssert3();
    goto LABEL_16;
  }
  v4 = FigXPCMessageCopyCFString();
  if ((_DWORD)v4)
  {
    v8 = v4;
    goto LABEL_26;
  }
  value = xpc_dictionary_get_value(a2, (const char *)kFigCaptureSourceRemoteProprietaryDefaultMessagePayload_Value);
  if (value)
  {
    v6 = IOSurfaceLookupFromXPCObject(value);
    if (!v6)
    {
      FigDebugAssert3();
      v8 = 0;
      goto LABEL_16;
    }
    v7 = v6;
    v8 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0, &pixelBufferOut);
    CFRelease(v7);
    if ((_DWORD)v8)
      goto LABEL_26;
    v8 = (uint64_t)pixelBufferOut;
    if (!pixelBufferOut)
      goto LABEL_26;
  }
  else
  {
    v8 = 0;
  }
  v10 = v15;
  v9 = cf;
  if (cf)
    v11 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  else
    v11 = 0;
  if (*v11 >= 6uLL && (v12 = (uint64_t (*)(CFTypeRef, CFTypeRef, uint64_t))v11[13]) != 0)
    v8 = v12(v9, v10, v8);
  else
    v8 = 4294954514;
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v8;
}

void captureSourceServer_serializeActiveFormat(void *a1, void *a2)
{
  void *v3;

  v3 = (void *)objc_msgSend(a1, "copyXPCEncoding");
  xpc_dictionary_set_value(a2, (const char *)*MEMORY[0x1E0CA36C8], v3);
  xpc_release(v3);
}

void captureSourceServer_servedObjectRefconDestructor(const void *a1)
{
  uint64_t v2;
  void (*v3)(const void *, __CFString *, uint64_t, id *);
  id v4;
  char v5;
  void (*v6)(const void *);
  int v7;
  CFIndex v8;
  const void *ValueAtIndex;
  const void *v10;
  CFIndex v11;
  void (*v12)(const void *, __CFString *, uint64_t, id *);
  id v13;
  int v14;
  void (*v15)(const void *, __CFString *, uint64_t, id *);
  id v16;
  id v17;
  id v18;
  id v19;

  if (a1)
  {
    CFRetain(a1);
    v19 = 0;
    v2 = *MEMORY[0x1E0C9AE00];
    v3 = *(void (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v3)
    {
      v3(a1, CFSTR("IsProxy"), v2, &v19);
      v4 = v19;
    }
    else
    {
      v4 = 0;
    }
    v5 = objc_msgSend(v4, "BOOLValue");
    if (pthread_mutex_lock((pthread_mutex_t *)sSourceListLock))
      goto LABEL_6;
    if ((v5 & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      if (CFArrayGetCount((CFArrayRef)sSourceList) < 1)
      {
LABEL_21:
        pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
        goto LABEL_6;
      }
      v11 = 0;
      while (CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v11) != a1)
      {
        if (++v11 >= CFArrayGetCount((CFArrayRef)sSourceList))
          goto LABEL_21;
      }
      v17 = 0;
      v18 = 0;
      v12 = *(void (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v12)
      {
        v12(a1, CFSTR("HasProxy"), v2, &v18);
        v13 = v18;
      }
      else
      {
        v13 = 0;
      }
      v14 = objc_msgSend(v13, "BOOLValue");
      v15 = *(void (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
      if (v15)
      {
        v15(a1, CFSTR("PrewarmingEnabled"), v2, &v17);
        v16 = v17;
      }
      else
      {
        v16 = 0;
      }
      v7 = objc_msgSend(v16, "BOOLValue");
      if (v7)
      {
        objc_msgSend((id)sPrewarmingSourceList, "addObject:", a1);
        FigCaptureSourceDetachFromClient();
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)sSourceList, v11);

      if (!v14)
      {
LABEL_33:
        pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
        if (v7)
        {
LABEL_34:
          CFRelease(a1);

          return;
        }
LABEL_6:
        v6 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v6)
          v6(a1);
        goto LABEL_34;
      }
    }
    if (CFArrayGetCount((CFArrayRef)sProxySourceList) >= 1)
    {
      v8 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sProxySourceList, v8);
        if (ValueAtIndex == a1)
        {
          CFArrayRemoveValueAtIndex((CFMutableArrayRef)sProxySourceList, v8);
          goto LABEL_33;
        }
        if ((v5 & 1) == 0)
        {
          v10 = ValueAtIndex;
          if (FigCaptureSourceProxyRealSourceEqualsSource((uint64_t)ValueAtIndex, (uint64_t)a1))
            break;
        }
        if (++v8 >= CFArrayGetCount((CFArrayRef)sProxySourceList))
          goto LABEL_33;
      }
      FigCaptureSourceProxyDetachFromRealSource(v10);
    }
    goto LABEL_33;
  }
}

uint64_t captureSourceServer_createSerializedSource(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  xpc_object_t empty;
  int SourceType;
  int v8;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v10;
  int UInt64;
  int v12;
  int v13;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  void *v15;
  xpc_object_t v16;
  unint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  unsigned int v26;

  v26 = 0;
  empty = xpc_dictionary_create_empty();
  cf = 0;
  theDict = 0;
  xpc_dictionary_set_uint64(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_ObjectID, a2);
  SourceType = FigCaptureSourceGetSourceType(a1, &v26);
  if (v26)
    goto LABEL_27;
  v8 = SourceType;
  xpc_dictionary_set_uint64(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_SourceType, SourceType);
  if (v8 == 5)
  {
LABEL_28:
    v16 = 0;
    goto LABEL_29;
  }
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v9)
  {
    v26 = -12782;
    goto LABEL_27;
  }
  v10 = *MEMORY[0x1E0C9AE00];
  v26 = v9(a1, CFSTR("AttributesDictionary"), *MEMORY[0x1E0C9AE00], &theDict);
  if (v26)
    goto LABEL_27;
  v26 = FigXPCMessageSetCFDictionary();
  if (v26)
    goto LABEL_27;
  CFDictionaryGetValue(theDict, CFSTR("DeviceType"));
  UInt64 = FigCFNumberGetUInt64();
  v12 = FigCaptureExternalCameraReplacesBuiltIn(0);
  if ((UInt64 - 15) < 2)
    v13 = 1;
  else
    v13 = v12;
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v14)
  {
    v26 = -12782;
    goto LABEL_27;
  }
  v26 = v14(a1, CFSTR("Formats"), v10, &cf);
  if (v26)
  {
LABEL_27:
    FigDebugAssert3();
    goto LABEL_28;
  }
  v15 = (void *)cf;
  v16 = xpc_array_create(0, 0);
  if (objc_msgSend(v15, "count"))
  {
    v17 = 0;
    do
    {
      v18 = (void *)objc_msgSend(v15, "objectAtIndex:", v17);
      if (objc_msgSend(v18, "format") == 875704438)
        v19 = v13;
      else
        v19 = 1;
      if (v19)
        v20 = 1;
      else
        v20 = 2;
      v21 = (void *)objc_msgSend(v18, "copyXPCEncoding");
      xpc_array_append_value(v16, v21);
      xpc_release(v21);
      v17 += v20;
    }
    while (v17 < objc_msgSend(v15, "count"));
  }
  v26 = 0;
  xpc_dictionary_set_value(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_FormatsArray, v16);
  if (v13)
    v22 = (void *)MEMORY[0x1E0C81240];
  else
    v22 = (void *)MEMORY[0x1E0C81238];
  xpc_dictionary_set_value(empty, (const char *)kFigCaptureSourceServerCopySourcesMessagePayload_420fOptimizationDisabled, v22);
LABEL_29:
  if (v26)
  {
    xpc_release(empty);
    empty = 0;
  }
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  *a3 = empty;
  return v26;
}

void __captureSourceServer_handleCopySourcesMessage_block_invoke_2(uint64_t a1, int a2)
{
  CFIndex v2;
  const void *ValueAtIndex;
  void *v4;
  CFIndex v5;
  uint64_t v6;
  const void *v7;
  void (*v8)(const void *, __CFString *, uint64_t, __int128 *);
  uint64_t PIDFromAuditToken;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 block;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
    if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
    {
      v2 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v2);
        FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, 0);
        ++v2;
      }
      while (v2 < CFArrayGetCount((CFArrayRef)sSourceList));
    }
    pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
  }
  else
  {
    v4 = (void *)objc_opt_new();
    pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
    if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
    {
      v5 = 0;
      v6 = *MEMORY[0x1E0C9AE00];
      do
      {
        v7 = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v5);
        *(_QWORD *)&v19 = 0;
        v8 = *(void (**)(const void *, __CFString *, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v8)
          v8(v7, CFSTR("ClientAuditToken"), v6, &v19);
        v27 = 0u;
        v28 = 0u;
        objc_msgSend((id)v19, "getBytes:length:", &v27, 32);
        block = v27;
        v24 = v28;
        PIDFromAuditToken = FigCaptureGetPIDFromAuditToken(&block);
        objc_msgSend(v4, "setObject:forKeyedSubscript:", (_QWORD)v19, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", PIDFromAuditToken));

        ++v5;
      }
      while (v5 < CFArrayGetCount((CFArrayRef)sSourceList));
    }
    pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v10 = (void *)objc_msgSend(v4, "allValues");
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, &v27, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v20;
      v14 = MEMORY[0x1E0C809B0];
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v20 != v13)
            objc_enumerationMutation(v10);
          v16 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
          v17 = 0u;
          v18 = 0u;
          objc_msgSend(v16, "getBytes:length:", &v17, 32);
          v25 = v17;
          v26 = v18;
          *(_QWORD *)&block = v14;
          *((_QWORD *)&block + 1) = 3221225472;
          *(_QWORD *)&v24 = __captureSourceServer_checkCameraAccessForClientAsync_block_invoke;
          *((_QWORD *)&v24 + 1) = &__block_descriptor_64_e5_v8__0l;
          dispatch_async((dispatch_queue_t)sCameraAccessCheckQueue, &block);
        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, &v27, 16);
      }
      while (v12);
    }

  }
}

uint64_t __captureSourceServer_checkCameraAccessForClientAsync_block_invoke(uint64_t a1)
{
  __int128 v2;
  _BOOL8 HasAccessToCamera;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  void (*v7)(const void *, __CFString *, uint64_t, id *);
  __int128 v8;
  __int128 v10[2];
  __int128 v11;
  __int128 v12;
  id v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_OWORD *)(a1 + 48);
  v14 = *(_OWORD *)(a1 + 32);
  v15 = v2;
  HasAccessToCamera = FigCaptureSourceClientHasAccessToCamera(&v14);
  pthread_mutex_lock((pthread_mutex_t *)sSourceListLock);
  if (CFArrayGetCount((CFArrayRef)sSourceList) >= 1)
  {
    v4 = 0;
    v5 = *MEMORY[0x1E0C9AE00];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sSourceList, v4);
      v13 = 0;
      v7 = *(void (**)(const void *, __CFString *, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
      if (v7)
        v7(ValueAtIndex, CFSTR("ClientAuditToken"), v5, &v13);
      v14 = 0u;
      v15 = 0u;
      objc_msgSend(v13, "getBytes:length:", &v14, 32);
      v11 = v14;
      v12 = v15;
      FigCaptureGetPIDFromAuditToken(&v11);
      v8 = *(_OWORD *)(a1 + 48);
      v11 = *(_OWORD *)(a1 + 32);
      v12 = v8;
      v10[0] = v14;
      v10[1] = v15;
      if (FigCaptureAuditTokenProcessesAreEqual(&v11, v10))
        FigVideoCaptureSourceSetClientProcessHasAccessToCamera((uint64_t)ValueAtIndex, HasAccessToCamera);

      ++v4;
    }
    while (v4 < CFArrayGetCount((CFArrayRef)sSourceList));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sSourceListLock);
}

uint64_t __captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_block_invoke()
{
  id v0;
  void *v1;
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = +[FigCaptureSourceBackings sharedCaptureSourceBackings](FigCaptureSourceBackings, "sharedCaptureSourceBackings");
  if (!v0)
  {
    result = FigDebugAssert3();
    goto LABEL_13;
  }
  v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v0, "sourceInfoDictionaries"), "firstObject"), "objectForKeyedSubscript:", 0x1E493B918);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (!result)
  {
LABEL_13:
    v8 = 0;
    goto LABEL_14;
  }
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)v10;
  do
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)v10 != v5)
        objc_enumerationMutation(v1);
      v7 = objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v6), "sensorDimensions");
      if ((int)v7 * HIDWORD(v7) > v4)
        v4 = (int)v7 * HIDWORD(v7);
      ++v6;
    }
    while (v3 != v6);
    result = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    v3 = result;
  }
  while (result);
  v8 = 2 * v4 / 3;
LABEL_14:
  captureSourceServer_handleMaxStillImageJPEGDataSizeMessage_maxDataSize = v8;
  return result;
}

uint64_t __captureSourceServer_initializeStatics_block_invoke()
{
  const __CFAllocator *v0;
  const CFArrayCallBacks *v1;

  sSourceListLock = FigSimpleMutexCreate();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  sSourceList = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  sPrewarmingSourceList = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sProxySourceList = (uint64_t)CFArrayCreateMutable(v0, 0, v1);
  sCameraAccessCheckQueue = FigDispatchQueueCreateWithPriority();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

void FigRemoteQueueProcessAssertion_awakeClientAndRunCallback(int a1, uint64_t a2)
{
  NSObject *global_queue;
  _QWORD v5[5];
  int v6;

  global_queue = dispatch_get_global_queue(0, 0);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __FigRemoteQueueProcessAssertion_awakeClientAndRunCallback_block_invoke;
  v5[3] = &unk_1E4926AB0;
  v6 = a1;
  v5[4] = a2;
  dispatch_async(global_queue, v5);
}

void dfp_addBuffer(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CVBuffer *v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(a2, "err");
  if (!(_DWORD)v6)
  {
    v7 = 0;
    switch(objc_msgSend(a3, "type"))
    {
      case 8:
        goto LABEL_12;
      case 9:
        v7 = 1;
        goto LABEL_12;
      case 10:
        v7 = 2;
        goto LABEL_12;
      case 11:
        v7 = 3;
        goto LABEL_12;
      case 12:
        v7 = 4;
        goto LABEL_12;
      case 19:
        return;
      case 22:
        v7 = 8;
        goto LABEL_12;
      case 23:
        v7 = 5;
        goto LABEL_12;
      case 24:
        v7 = 7;
        goto LABEL_12;
      case 25:
        v7 = 9;
        goto LABEL_12;
      case 27:
        v7 = 6;
LABEL_12:
        v8 = (void *)objc_msgSend(a2, "expectedBufferTypes");
        if ((objc_msgSend(v8, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(a3, "type"))) & 1) == 0)goto LABEL_27;
        if (dword_1EE6BE538)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v10 = (__CVBuffer *)objc_msgSend(a3, "buffer", v17, v18);
        v11 = (const __CFString *)*MEMORY[0x1E0D05A10];
        v12 = (void *)CVBufferCopyAttachment(v10, (CFStringRef)*MEMORY[0x1E0D05A10], 0);
        if (v12)
        {
          v13 = objc_msgSend(a1, "addInputResource:type:", v12, v7);
        }
        else if (objc_msgSend(a3, "lscGainMap") && (objc_opt_respondsToSelector() & 1) != 0)
        {
          v13 = objc_msgSend(a1, "addBuffer:metadata:type:lscGainMap:lscGainMapParameters:", objc_msgSend(a3, "buffer"), objc_msgSend(a3, "metadata"), v7, objc_msgSend(a3, "lscGainMap"), objc_msgSend(a3, "lscGainMapParameters"));
        }
        else
        {
          v13 = objc_msgSend(a1, "addBuffer:metadata:type:", objc_msgSend(a3, "buffer"), objc_msgSend(a3, "metadata"), v7);
        }
        v14 = v13;

        CVBufferRemoveAttachment((CVBufferRef)objc_msgSend(a3, "buffer"), v11);
        if ((_DWORD)v14)
          goto LABEL_22;
        return;
      default:
LABEL_27:
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v14 = 4294954516;
        goto LABEL_22;
    }
  }
  v14 = v6;
  if (dword_1EE6BE538)
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_22:
  if (!objc_msgSend(a2, "err", v17, v18))
    objc_msgSend(a2, "setErr:", v14);
}

void __dfp_createStateMachine_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a4 == 16)
  {
    if (dword_1EE6BE538)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t __dfp_createStateMachine_block_invoke_2(uint64_t a1, id *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWDeepFusionProcessorController _resetProcessor]((uint64_t)a2);
  -[BWDeepFusionProcessorController _serviceNextRequest](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWDeepFusionProcessorController _updateStateIfNeeded]((uint64_t)a2);
}

uint64_t __dfp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  -[BWDeepFusionProcessorController _resetProcessor](a2);
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 176), "input"), "onlyApplyingSemanticStyle"))
    -[BWDeepFusionProcessorController _setupProcessorForOnlyApplyingSemanticStyle](a2);
  else
    -[BWDeepFusionProcessorController _setupProcessor](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWDeepFusionProcessorController _updateStateIfNeeded](a2);
}

uint64_t __dfp_createStateMachine_block_invoke_5(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1A858DD40]();
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 176), "input"), "onlyApplyingSemanticStyle"))
    -[BWDeepFusionProcessorController _processOnlyApplyingSemanticStyle](a2);
  else
    -[BWDeepFusionProcessorController _process](a2);
  objc_autoreleasePoolPop(v3);
  return -[BWDeepFusionProcessorController _updateStateIfNeeded](a2);
}

void btfn_temporalFilterSessionCallback(uint64_t a1, int a2, uint64_t a3, CMTime *a4, __CVBuffer *a5)
{
  void *v9;
  const __CFDictionary *v10;
  const __CFDictionary *Value;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  uint64_t v15;
  CMTime v16;
  CFTypeRef cf;
  CFTypeRef v18;
  CMTime time1;
  CMTime time2;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v18 = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v9 = (void *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 120));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  if (a1 && v9)
  {
    if (!a5
      || a2
      || (v10 = (const __CFDictionary *)CMGetAttachment(v9, (CFStringRef)*MEMORY[0x1E0D05CB0], 0)) == 0
      || (Value = (const __CFDictionary *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0D05D00])) == 0
      || (memset(&v16, 0, sizeof(v16)),
          CMTimeMakeFromDictionary(&v16, Value),
          time1 = *a4,
          time2 = v16,
          CMTimeCompare(&time1, &time2))
      || BWCMSampleBufferCreateCopyWithNewPixelBuffer((opaqueCMSampleBuffer *)v9, a5, &v18, (CMSampleBufferRef *)&cf))
    {
      -[BWTemporalFilterNode _dropInputSampleBuffer:](a1, v9);
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 176);
      if (!v12 && dword_1EE6BEAD8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v12 = *(_QWORD *)(a1 + 176);
      }
      *(_QWORD *)(a1 + 176) = v12 + 1;
      objc_msgSend(*(id *)(a1 + 128), "emitSampleBuffer:", cf, v14, v15);
    }
  }
  else if (!v9)
  {
    goto LABEL_15;
  }
  CFRelease(v9);
  if (cf)
    CFRelease(cf);
LABEL_15:
  if (v18)
    CFRelease(v18);
}

uint64_t BWOverlaidRectangleDrawRectanglesInBitmapContext(void *a1, CGContext *a2, __CVBuffer *a3)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v16;
  void *v17;
  CGFloat x;
  double y;
  double width;
  double height;
  int v22;
  int v23;
  int v24;
  CGColorSpace *DeviceGray;
  double v26;
  CGColor *v27;
  char v28;
  double v29;
  double v30;
  float v31;
  CGColor *v32;
  double v33;
  float v34;
  int32x2_t v35;
  int64x2_t v36;
  CGColor *v37;
  size_t v38;
  size_t v39;
  double v40;
  double v41;
  double v42;
  _BOOL4 v43;
  float *v44;
  double v45;
  float v46;
  float v47;
  float v48;
  double MidX;
  double MidY;
  float64_t v51;
  CGFloat v52;
  double v53;
  double v54;
  float v55;
  double v57;
  double v58;
  double v59;
  CGPathRef v60;
  const CGPath *v61;
  float64x2_t v62;
  double v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CGPathDrawingMode v78;
  float v79;
  int8x16_t v80;
  int8x16_t v81;
  CGFloat v83;
  CGFloat v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  CGAffineTransform v99;
  CGAffineTransform v100;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE v103[128];
  CGAffineTransform v104;
  CGAffineTransform components;
  uint64_t v106;
  CGSize v107;
  CGSize v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;

  v4 = a1;
  v106 = *MEMORY[0x1E0C80C00];
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v96;
    v8 = *MEMORY[0x1E0C9D648];
    v9 = *(double *)(MEMORY[0x1E0C9D648] + 8);
    v10 = *(double *)(MEMORY[0x1E0C9D648] + 16);
    v11 = *(double *)(MEMORY[0x1E0C9D648] + 24);
    v83 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v84 = *MEMORY[0x1E0C9D820];
    __asm { FMOV            V0.2D, #1.0 }
    v81 = _Q0;
    v80 = (int8x16_t)xmmword_1A32B22F0;
    v89 = *(_QWORD *)v96;
    v90 = v4;
    v87 = v9;
    v88 = *MEMORY[0x1E0C9D648];
    v85 = v11;
    v86 = v10;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v96 != v7)
          objc_enumerationMutation(v4);
        v17 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * v16);
        objc_msgSend(v17, "bounds", *(_OWORD *)&v80, *(_OWORD *)&v81);
        x = v109.origin.x;
        y = v109.origin.y;
        width = v109.size.width;
        height = v109.size.height;
        if (!CGRectIsNull(v109))
        {
          v110.origin.x = x;
          v110.origin.y = y;
          v110.size.width = width;
          v110.size.height = height;
          v127.origin.x = v8;
          v127.origin.y = v9;
          v127.size.width = v10;
          v127.size.height = v11;
          if (!CGRectEqualToRect(v110, v127))
          {
            v22 = objc_msgSend(v17, "displayStyle");
            v23 = objc_msgSend(v17, "displayStyle");
            v24 = objc_msgSend(v17, "displayStyle");
            if (v24 == 4)
            {
              DeviceGray = CGColorSpaceCreateDeviceGray();
              components.a = 0.0;
              v26 = 1.0;
              goto LABEL_11;
            }
            y = (double)CGBitmapContextGetHeight(a2) - y - height;
            DeviceGray = CGColorSpaceCreateDeviceGray();
            components.a = 0.0;
            v26 = 1.0;
            if (v23 == 3)
            {
LABEL_11:
              components.b = 0.0;
              v27 = CGColorCreate(DeviceGray, &components.a);
              v107.height = v83;
              v107.width = v84;
              CGContextSetShadowWithColor(a2, v107, 0.0, v27);
              v28 = 1;
              if (v27)
                goto LABEL_12;
            }
            else
            {
              objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
              components.b = v79;
              v27 = CGColorCreate(DeviceGray, &components.a);
              v108.width = 1.0;
              v108.height = -1.0;
              CGContextSetShadowWithColor(a2, v108, 0.0, v27);
              v28 = 0;
              if (v27)
LABEL_12:
                CFRelease(v27);
            }
            components.a = 0.04;
            v29 = 0.0;
            if ((v28 & 1) == 0)
            {
              if (v22 == 2)
                v30 = 0.1;
              else
                v30 = 0.125;
              objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
              v29 = v30 * v31;
            }
            components.b = v29;
            v32 = CGColorCreate(DeviceGray, &components.a);
            v33 = 0.96;
            if (v22 == 2)
              v33 = v26;
            v104.a = v33;
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            v104.b = v34 * 0.94;
            if (v23 == 3 || v24 == 4)
            {
              v35 = vdup_n_s32(v23 == 3);
              v36.i64[0] = v35.u32[0];
              v36.i64[1] = v35.u32[1];
              *(int8x16_t *)&v104.a = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v36, 0x3FuLL)), v80, v81);
            }
            v37 = CGColorCreate(DeviceGray, &v104.a);
            CGContextSetFillColorWithColor(a2, v32);
            CGContextSetStrokeColorWithColor(a2, v37);
            if (v32)
              CFRelease(v32);
            if (v37)
              CFRelease(v37);
            v7 = v89;
            if (DeviceGray)
              CFRelease(DeviceGray);
            v38 = CGBitmapContextGetWidth(a2);
            if (v38 >= CGBitmapContextGetHeight(a2))
              v39 = CGBitmapContextGetHeight(a2);
            else
              v39 = CGBitmapContextGetWidth(a2);
            v40 = 7.0;
            if (v39 < 0x438)
              v40 = 5.0;
            if (v22 != 2)
              v40 = 3.0;
            if (v24 == 4)
              v40 = 4.0;
            if (v23 == 3)
              v41 = 3.0;
            else
              v41 = v40;
            CGContextSetLineWidth(a2, v41);
            if (width >= height)
              v42 = height;
            else
              v42 = width;
            v43 = objc_msgSend(v17, "animationState") == 0;
            v94 = v42;
            if (v22 == 2)
            {
              v43 = objc_msgSend(v17, "animationState") == 0;
              v44 = (float *)&unk_1A32B22D8;
            }
            else
            {
              v44 = (float *)&unk_1A32B22D0;
            }
            v45 = v44[v43];
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            v47 = v45 + (1.0 - v45) * v46;
            if (v23 == 3)
              v48 = 1.0;
            else
              v48 = v47;
            if (v48 != 1.0)
            {
              v111.origin.x = x;
              v111.origin.y = y;
              v111.size.width = width;
              v111.size.height = height;
              MidX = CGRectGetMidX(v111);
              v112.origin.x = x;
              v112.origin.y = y;
              v112.size.width = width;
              v112.size.height = height;
              MidY = CGRectGetMidY(v112);
              v93 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
              *(_OWORD *)&components.a = *MEMORY[0x1E0C9BAA8];
              v92 = *(_OWORD *)&components.a;
              *(_OWORD *)&components.c = v93;
              *(_OWORD *)&components.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
              v91 = *(_OWORD *)&components.tx;
              CGAffineTransformMakeTranslation(&v104, -MidX, -MidY);
              *(_OWORD *)&t1.a = v92;
              *(_OWORD *)&t1.c = v93;
              *(_OWORD *)&t1.tx = v91;
              CGAffineTransformConcat(&components, &t1, &v104);
              CGAffineTransformMakeScale(&t2, v48, v48);
              v100 = components;
              CGAffineTransformConcat(&t1, &v100, &t2);
              components = t1;
              CGAffineTransformMakeTranslation(&v100, MidX, MidY);
              v99 = components;
              CGAffineTransformConcat(&t1, &v99, &v100);
              components = t1;
              v113.origin.x = x;
              v113.origin.y = y;
              v113.size.width = width;
              v113.size.height = height;
              v114 = CGRectApplyAffineTransform(v113, &t1);
              x = v114.origin.x;
              y = v114.origin.y;
              width = v114.size.width;
              height = v114.size.height;
            }
            v115.origin.x = x;
            v115.origin.y = y;
            v115.size.width = width;
            v115.size.height = height;
            v116 = CGRectInset(v115, v41 * -0.5, v41 * -0.5);
            v51 = v116.origin.x;
            v52 = v116.origin.y;
            v53 = v116.size.width;
            v54 = v116.size.height;
            objc_msgSend((id)objc_msgSend(v17, "rampAnimation"), "currentValue");
            if (v55 == 1.0)
            {
              v117.origin.x = v51;
              v117.origin.y = v52;
              v117.size.width = v53;
              v117.size.height = v54;
              v118 = CGRectIntegral(v117);
              v51 = v118.origin.x;
              v52 = v118.origin.y;
              v53 = v118.size.width;
              v54 = v118.size.height;
            }
            _ZF = v23 == 3 || v22 == 2;
            v57 = 7.0;
            if (!_ZF)
              v57 = 24.0;
            if (v23 == 3)
              v57 = 1.6;
            v58 = v57 * v48;
            if (v94 >= v58 + v58)
              v59 = v58;
            else
              v59 = v94 * 0.5;
            v119.origin.x = v51;
            v119.origin.y = v52;
            v119.size.width = v53;
            v119.size.height = v54;
            v60 = CGPathCreateWithRoundedRect(v119, v59, v59, 0);
            v61 = v60;
            if (v24 == 4)
            {
              v11 = v85;
              if (v60)
                CFRelease(v60);
              v120.origin.x = v51;
              v120.origin.y = v52;
              v120.size.width = v53;
              v120.size.height = v54;
              v61 = CGPathCreateWithRect(v120, 0);
            }
            else
            {
              v11 = v85;
            }
            CGContextBeginPath(a2);
            CGContextAddPath(a2, v61);
            if (v24 == 4)
            {
              v62.f64[0] = v52;
              v63 = FigCaptureMetadataUtilitiesRoundRectToEvenCoordinatesPreservingSquareness(1u, v51, v62, v53, v54, 0.0);
              v65 = v64;
              v67 = v66;
              v69 = v68;
              FigDraw420Rectangle(a3, (int)v63, (int)v64, (int)v66, (int)v68, 208, 58, 153);
              v121.origin.x = v63;
              v121.origin.y = v65;
              v121.size.width = v67;
              v121.size.height = v69;
              v122 = CGRectInset(v121, 1.0, 1.0);
              v70 = v122.origin.x;
              v71 = v122.origin.y;
              v72 = v122.size.width;
              v73 = v122.size.height;
              FigDraw420Rectangle(a3, (int)v122.origin.x, (int)v122.origin.y, (int)v122.size.width, (int)v122.size.height, 208, 58, 153);
              v123.origin.x = v70;
              v123.origin.y = v71;
              v123.size.width = v72;
              v123.size.height = v73;
              v124 = CGRectInset(v123, 1.0, 1.0);
              v74 = v124.origin.x;
              v75 = v124.origin.y;
              v76 = v124.size.width;
              v77 = v124.size.height;
              FigDraw420Rectangle(a3, (int)v124.origin.x, (int)v124.origin.y, (int)v124.size.width, (int)v124.size.height, 208, 58, 153);
              v125.origin.x = v74;
              v125.origin.y = v75;
              v125.size.width = v76;
              v125.size.height = v77;
              v126 = CGRectInset(v125, 1.0, 1.0);
              FigDraw420Rectangle(a3, (int)v126.origin.x, (int)v126.origin.y, (int)v126.size.width, (int)v126.size.height, 208, 58, 153);
            }
            else
            {
              if (v23 == 3)
                v78 = kCGPathStroke;
              else
                v78 = kCGPathFillStroke;
              CGContextDrawPath(a2, v78);
            }
            v4 = v90;
            v9 = v87;
            v8 = v88;
            v10 = v86;
            CGContextResetClip(a2);
            if (v61)
              CFRelease(v61);
          }
        }
        ++v16;
      }
      while (v6 != v16);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v95, v103, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

uint64_t fillGDCParametersFromDistortionModels(float64x2_t *a1, double *a2, uint64_t a3, float a4, float a5)
{
  double v5;
  double v6;
  float v7;
  float v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t i;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  uint64_t result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  double v42;

  *(_QWORD *)&v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  if (a1 && a2 && a3)
  {
    *(float32x2_t *)&v31 = vcvt_f32_f64(a1[1]);
    *(_QWORD *)&v32 = __PAIR64__(LODWORD(a5), LODWORD(a4));
    v5 = a1->f64[0];
    v6 = a1->f64[1];
    v7 = a1->f64[0];
    v8 = v6;
    *((float *)&v32 + 2) = v7;
    *((float *)&v40 + 1) = v8;
    *((_QWORD *)&v40 + 1) = 0;
    *(_QWORD *)&v41 = 0;
    *((double *)&v41 + 1) = a4;
    v42 = a5;
    v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(a2[1] * *a2), 0);
    v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v5 * v6), 0);
    v11 = (float64x2_t *)(a2 + 12);
    v12 = a1 + 6;
    for (i = 32; i != 64; i += 8)
    {
      v14 = v11[-4];
      v15 = *v11++;
      v16 = (float32x2_t *)((char *)&v27 + i);
      v16[-4] = vcvt_f32_f64(vmlaq_f64(v14, v15, v9));
      v17 = v12[-4];
      v18 = *v12++;
      *v16 = vcvt_f32_f64(vmlaq_f64(v17, v18, v10));
    }
    result = 0;
    *(double *)(a3 + 240) = v42;
    v20 = v40;
    *(_OWORD *)(a3 + 192) = v39;
    *(_OWORD *)(a3 + 208) = v20;
    *(_OWORD *)(a3 + 224) = v41;
    v21 = v36;
    *(_OWORD *)(a3 + 128) = v35;
    *(_OWORD *)(a3 + 144) = v21;
    v22 = v38;
    *(_OWORD *)(a3 + 160) = v37;
    *(_OWORD *)(a3 + 176) = v22;
    v23 = v32;
    *(_OWORD *)(a3 + 64) = v31;
    *(_OWORD *)(a3 + 80) = v23;
    v24 = v34;
    *(_OWORD *)(a3 + 96) = v33;
    *(_OWORD *)(a3 + 112) = v24;
    v25 = v28;
    *(_OWORD *)a3 = v27;
    *(_OWORD *)(a3 + 16) = v25;
    v26 = v30;
    *(_OWORD *)(a3 + 32) = v29;
    *(_OWORD *)(a3 + 48) = v26;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  return result;
}

id sidn_depthMetadataAttachmentDictionaryFromBravoDisparityMetadata(void *a1, opaqueCMSampleBuffer *target, int a3, int a4)
{
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __CVBuffer *ImageBuffer;
  CGFloat Width;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  int v39;
  void *v40;
  void *v41;
  void *v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  int v48;
  uint64_t v49;
  CFDictionaryRef v51;
  int v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;
  CGSize v72;

  v71 = *MEMORY[0x1E0C80C00];
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E0D05CB0], 0))
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v9 = v8;
    if (a4)
      v10 = &unk_1E49FBBF8;
    else
      v10 = &unk_1E49FBC10;
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D08470]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D08438]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", &unk_1E49FBBF8, *MEMORY[0x1E0D08428]);
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    if (a3)
      objc_msgSend(a1, "teleIntrinsicMatrix");
    else
      objc_msgSend(a1, "wideIntrinsicMatrix");
    DWORD2(v66) = v12;
    DWORD2(v67) = v14;
    *(_QWORD *)&v66 = v11;
    *(_QWORD *)&v67 = v13;
    DWORD2(v68) = v16;
    *(_QWORD *)&v68 = v15;
    v17 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v66, 48);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D08440]);
    ImageBuffer = CMSampleBufferGetImageBuffer(target);
    Width = (double)CVPixelBufferGetWidth(ImageBuffer);
    v72.height = (double)CVPixelBufferGetHeight(ImageBuffer);
    v72.width = Width;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v72);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", DictionaryRepresentation, *MEMORY[0x1E0D08448]);

    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    if (a3)
      objc_msgSend(a1, "teleExtrinsicMatrix");
    else
      objc_msgSend(a1, "wideExtrinsicMatrix");
    DWORD2(v62) = v22;
    DWORD2(v63) = v24;
    *(_QWORD *)&v62 = v21;
    *(_QWORD *)&v63 = v23;
    DWORD2(v64) = v26;
    DWORD2(v65) = v28;
    *(_QWORD *)&v64 = v25;
    *(_QWORD *)&v65 = v27;
    v29 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", &v62, 64);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v29, *MEMORY[0x1E0D08430]);
    if (a3)
      objc_msgSend(a1, "telePixelSizeInMillimeters");
    else
      objc_msgSend(a1, "widePixelSizeInMillimeters");
    v30 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:");
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v30, *MEMORY[0x1E0D08468]);
    if (a3)
      v31 = (void *)objc_msgSend(a1, "teleLensDistortionCoefficients");
    else
      v31 = (void *)objc_msgSend(a1, "wideLensDistortionCoefficients");
    v32 = v31;
    if (v31)
    {
      v33 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v31, "count"));
      v34 = (_DWORD *)objc_msgSend(v33, "mutableBytes");
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v35 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v58, v70, 16);
      if (v35)
      {
        v36 = v35;
        v37 = *(_QWORD *)v59;
        do
        {
          for (i = 0; i != v36; ++i)
          {
            if (*(_QWORD *)v59 != v37)
              objc_enumerationMutation(v32);
            objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * i), "floatValue");
            *v34++ = v39;
          }
          v36 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v58, v70, 16);
        }
        while (v36);
      }
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v33, *MEMORY[0x1E0D08460]);
    }
    if (a3)
      v40 = (void *)objc_msgSend(a1, "teleInverseLensDistortionCoefficients");
    else
      v40 = (void *)objc_msgSend(a1, "wideInverseLensDistortionCoefficients");
    v41 = v40;
    if (v40)
    {
      v42 = (void *)objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 4 * objc_msgSend(v40, "count"));
      v43 = (_DWORD *)objc_msgSend(v42, "mutableBytes");
      v54 = 0u;
      v55 = 0u;
      v56 = 0u;
      v57 = 0u;
      v44 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v54, v69, 16);
      if (v44)
      {
        v45 = v44;
        v46 = *(_QWORD *)v55;
        do
        {
          for (j = 0; j != v45; ++j)
          {
            if (*(_QWORD *)v55 != v46)
              objc_enumerationMutation(v41);
            objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * j), "floatValue");
            *v43++ = v48;
          }
          v45 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v54, v69, 16);
        }
        while (v45);
      }
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v42, *MEMORY[0x1E0D08450]);
    }
    if (a3)
      objc_msgSend(a1, "teleLensDistortionOpticalCenter");
    else
      objc_msgSend(a1, "wideLensDistortionOpticalCenter");
    v51 = CGPointCreateDictionaryRepresentation(*(CGPoint *)&v49);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v51, *MEMORY[0x1E0D08458]);

    v52 = objc_msgSend(a1, "version");
    objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v52 | (FigDepthDataGetCurrentMajorVersion() << 16)), *MEMORY[0x1E0D08478]);
  }
  else
  {
    v9 = 0;
  }
  return v9;
}

uint64_t MediaAnalysisLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = MediaAnalysisLibraryCore_frameworkLibrary;
  v6 = MediaAnalysisLibraryCore_frameworkLibrary;
  if (!MediaAnalysisLibraryCore_frameworkLibrary)
  {
    v7 = xmmword_1E49273D0;
    v8 = *(_OWORD *)&off_1E49273E0;
    v1 = _sl_dlopen();
    v4[3] = v1;
    MediaAnalysisLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30E7898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t MediaAnalysisLibrary()
{
  uint64_t result;
  void *v1;

  v1 = 0;
  result = MediaAnalysisLibraryCore();
  if (!result)
    MediaAnalysisLibrary_cold_1(&v1);
  return result;
}

Class __getVCPCaptureAnalysisSessionClass_block_invoke(uint64_t a1)
{
  Class result;

  MediaAnalysisLibrary();
  result = objc_getClass("VCPCaptureAnalysisSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getVCPCaptureAnalysisSessionClass_block_invoke_cold_1();
  getVCPCaptureAnalysisSessionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t fdek_registerKeySpaceAndPredefinedMetadataKeys()
{
  uint64_t v0;
  uint64_t result;

  v0 = 0;
  sMetadataKeySpace = FigFlatDictionaryKeySpaceRegister(0x58u, 1702391150);
  do
  {
    result = FigFlatDictionaryKeyRegisterExistingKey(sMetadataKeySpace, *(int **)((char *)&FigFlatDictionaryMakerNoteKeys + v0));
    v0 += 8;
  }
  while (v0 != 704);
  return result;
}

uint64_t RegisterFigCaptureDeviceType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptureDeviceGetTypeID()
{
  MEMORY[0x1A858C99C](&FigCaptureDeviceGetClassID_sRegisterFigCaptureDeviceTypeOnce, RegisterFigCaptureDeviceType);
  return CMBaseClassGetCFTypeID();
}

uint64_t RegisterFigCaptureStreamType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptureStreamGetTypeID()
{
  MEMORY[0x1A858C99C](&FigCaptureStreamGetClassID_sRegisterFigCaptureStreamTypeOnce, RegisterFigCaptureStreamType);
  return CMBaseClassGetCFTypeID();
}

uint64_t RegisterFigCaptureSynchronizedStreamsGroupType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptureSynchronizedStreamsGroupGetTypeID()
{
  MEMORY[0x1A858C99C](&FigCaptureSynchronizedStreamsGroupGetClassID_sRegisterFigCaptureSynchronizedStreamsGroupTypeOnce, RegisterFigCaptureSynchronizedStreamsGroupType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptureDeviceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureDevice %p]"), a1);
}

CFStringRef FigCaptureStreamCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureStream %p]"), a1);
}

CFStringRef FigCaptureSynchronizedStreamsGroupCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptureSynchronizedStreamsGroup %p]"), a1);
}

uint64_t FigExternalStorageDeviceManagerRemoteCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *DerivedStorage;
  _QWORD *v6;
  uint64_t v7;

  v4 = remoteExternalStorageDeviceManagerClient_EnsureClientEstablished();
  if ((_DWORD)v4)
    goto LABEL_12;
  FigExternalStorageDeviceManagerGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
    goto LABEL_12;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v7 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v6 = DerivedStorage;
  *DerivedStorage = FigSimpleMutexCreate();
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4 || (v4 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v4))
  {
LABEL_12:
    v7 = v4;
    fig_log_get_emitter();
LABEL_14:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v6[1] = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
  v7 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v7)
  {
    fig_log_get_emitter();
    goto LABEL_14;
  }
  *a3 = 0;
LABEL_8:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t remoteExternalStorageDeviceManagerClient_EnsureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E491EC40;
  block[4] = &v3;
  if (remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_gFigExternalStorageDeviceManagerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteExternalStorageDeviceManagerClient_EnsureClientEstablished_gFigExternalStorageDeviceManagerRemoteClientSetupOnce, block);
  if (gFigExternalStorageDeviceManagerRemoteClient)
  {
    v0 = *((unsigned int *)v4 + 6);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v0 = FigSignalErrorAt();
    *((_DWORD *)v4 + 6) = v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30E8AB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t FigExternalStorageDeviceManagerRemoteSupported()
{
  if (!remoteExternalStorageDeviceManagerClient_EnsureClientEstablished())
    return 1;
  fig_log_get_emitter();
  FigDebugAssert3();
  return 0;
}

uint64_t remoteExternalStorageDeviceManagerClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
    *(_BYTE *)(result + 16) = 1;
  return result;
}

uint64_t remoteExternalStorageDeviceManagerClient_handleServerMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  if (CMBaseObjectGetDerivedStorage())
  {
    OpCode = FigXPCMessageGetOpCode();
    if (!(_DWORD)OpCode)
      return 4294948025;
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
    return v1;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t remoteFigExternalStorageDeviceManager_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    FigXPCRemoteClientDisassociateObject();
    pthread_mutex_lock(*(pthread_mutex_t **)v1);
    if (!*(_BYTE *)(v1 + 16)
      && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendAsyncMessage()))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
      pthread_mutex_unlock(*(pthread_mutex_t **)v1);
    }
    else
    {
      _Block_release(*(const void **)(v1 + 40));
      pthread_mutex_unlock(*(pthread_mutex_t **)v1);
      FigSimpleMutexDestroy();
    }
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return FigXPCRelease();
}

__CFString *remoteFigExternalStorageDeviceManager_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  CFIndex v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = CFGetAllocator(a1);
    Mutable = CFStringCreateMutable(v4, 0);
    v6 = CFGetRetainCount(a1);
    v7 = CFGetAllocator(a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigExternalStorageDeviceManagerRemote %p retainCount: %ld allocator: %p objectID %016llx"), a1, v6, v7, *(_QWORD *)(v3 + 8));
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  return Mutable;
}

uint64_t remoteFigExternalStorageDeviceManager_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2 || !a4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = FigSignalErrorAt();
    goto LABEL_5;
  }
  *a4 = 0;
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_9:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v5 = FigXPCSendStdCopyPropertyMessage();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_9;
  }
LABEL_5:
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteExternalStorageDeviceManagerClient_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a1 && !*(_BYTE *)(DerivedStorage + 16))
  {
    *a2 = *(_QWORD *)(DerivedStorage + 8);
    return 0;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
}

uint64_t remoteFigExternalStorageDeviceManager_beginMonitoring(uint64_t a1, uint64_t a2, pthread_mutex_t *a3, pthread_mutex_t *a4)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v8;
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v10 = FigSignalErrorAt();
    goto LABEL_6;
  }
  v8 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  v8[3] = a4;
  v8[4] = a3;
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
    fig_log_get_emitter();
LABEL_11:
    FigDebugAssert3();
    goto LABEL_5;
  }
  v10 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v10)
  {
    fig_log_get_emitter();
    goto LABEL_11;
  }
LABEL_5:
  pthread_mutex_unlock(*v8);
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  return v10;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceNextAvailableURLArray(uint64_t a1)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v3;
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFArray(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v5 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceNextAvailableSecurityScopeWrappedURLDataArray(uint64_t a1)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v3;
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFArray(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v5 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_copyStorageDeviceProperty(uint64_t a1)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v3;
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v3 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v5 = ObjectID;
    fig_log_get_emitter();
LABEL_15:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v5 = FigXPCMessageCopyCFObject();
  if ((_DWORD)v5)
  {
    fig_log_get_emitter();
    goto LABEL_15;
  }
LABEL_8:
  pthread_mutex_unlock(*v3);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

uint64_t remoteFigExternalStorageDeviceManager_checkAuthorizationStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v6;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v6 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v8 = ObjectID;
    fig_log_get_emitter();
LABEL_13:
    FigDebugAssert3();
    goto LABEL_8;
  }
  v8 = FigXPCMessageCopyCFNumber();
  if ((_DWORD)v8)
  {
    fig_log_get_emitter();
    goto LABEL_13;
  }
  *a3 = FigCFNumberGetSInt32();
LABEL_8:
  pthread_mutex_unlock(*v6);
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t remoteFigExternalStorageDeviceManager_requestAuthorization(uint64_t a1, uint64_t a2, const void *a3)
{
  pthread_mutex_t **DerivedStorage;
  pthread_mutex_t **v6;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  DerivedStorage = (pthread_mutex_t **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v6 = DerivedStorage;
  pthread_mutex_lock(*DerivedStorage);
  v6[5] = (pthread_mutex_t *)_Block_copy(a3);
  ObjectID = remoteExternalStorageDeviceManagerClient_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v8 = ObjectID;
    fig_log_get_emitter();
LABEL_12:
    FigDebugAssert3();
    goto LABEL_6;
  }
  v8 = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)v8)
  {
    fig_log_get_emitter();
    goto LABEL_12;
  }
LABEL_6:
  pthread_mutex_unlock(*v6);
LABEL_7:
  FigXPCRemoteClientKillServerOnTimeout();
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t FigLocalQueueGetTypeID()
{
  MEMORY[0x1A858C99C](&FigLocalQueueGetTypeID_registerOnce, localQueueRegister);
  return sLocalQueueID;
}

uint64_t localQueueRegister()
{
  uint64_t result;

  sLocalQueueClass = 0;
  unk_1EE6BFCA0 = "FigLocalQueue";
  qword_1EE6BFCA8 = (uint64_t)localQueueInit;
  unk_1EE6BFCB0 = 0;
  qword_1EE6BFCB8 = (uint64_t)localQueueFinalize;
  unk_1EE6BFCC0 = 0;
  qword_1EE6BFCC8 = 0;
  unk_1EE6BFCD0 = 0;
  qword_1EE6BFCD8 = (uint64_t)localQueueCopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sLocalQueueID = result;
  return result;
}

uint64_t FigLocalQueueCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (a3)
  {
    MEMORY[0x1A858C99C](&FigLocalQueueGetTypeID_registerOnce, localQueueRegister);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v5 = (_QWORD *)Instance;
      v6 = FigSimpleMutexCreate();
      v5[2] = v6;
      if (v6)
      {
        v7 = FigDispatchQueueCreateWithPriority();
        v5[3] = v7;
        if (v7)
        {
          result = 0;
          *a3 = v5;
          return result;
        }
      }
      fig_log_get_emitter();
      FigDebugAssert3();
      CFRelease(v5);
    }
    else
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    return 4294949966;
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294949967;
  }
}

uint64_t FigLocalQueueEnqueue(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  CFTypeRef *v7;
  CFTypeRef v8;
  NSObject *v9;
  _QWORD v11[7];
  __int128 v12;
  int v13;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_13;
  v6 = *a2;
  if (*a2 == 6)
    goto LABEL_5;
  if (v6 == 5)
  {
    v7 = (CFTypeRef *)(a2 + 3);
LABEL_7:
    v8 = *v7;
    if (*v7)
      CFRetain(*v7);
    goto LABEL_10;
  }
  if (v6 == 3)
  {
LABEL_5:
    v7 = (CFTypeRef *)(a2 + 1);
    goto LABEL_7;
  }
  v8 = 0;
LABEL_10:
  CFRetain((CFTypeRef)a1);
  v9 = *(NSObject **)(a1 + 32);
  if (!v9)
    v9 = *(NSObject **)(a1 + 24);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __FigLocalQueueEnqueue_block_invoke;
  v11[3] = &unk_1E4927D08;
  v11[4] = a3;
  v11[5] = a1;
  v12 = *(_OWORD *)a2;
  v13 = a2[4];
  v11[6] = v8;
  dispatch_async(v9, v11);
LABEL_13:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
  return 0;
}

uint64_t FigLocalQueueSetReceiverHandler(uint64_t a1, NSObject *a2, const void *a3)
{
  NSObject *v6;
  const void *v7;

  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 16));
  v6 = *(NSObject **)(a1 + 32);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v7 = *(const void **)(a1 + 40);
  if (v7)
  {
    _Block_release(v7);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (a3)
    *(_QWORD *)(a1 + 40) = _Block_copy(a3);
  if (a2)
  {
    dispatch_retain(a2);
    *(_QWORD *)(a1 + 32) = a2;
  }
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 16));
}

uint64_t FigLocalQueueUnsetReceiverHandler(uint64_t a1)
{
  return FigLocalQueueSetReceiverHandler(a1, 0, 0);
}

double localQueueInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t localQueueFinalize(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[4];
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
  return FigSimpleMutexDestroy();
}

CFStringRef localQueueCopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigLocalQueue %p> {\n    senderQueue %p\n    receiverQueue %p\n}"), a1, a1[3], a1[4]);
}

uint64_t FigCaptureDeferredContainerManagerServerStart()
{
  _OWORD v1[3];

  v1[0] = xmmword_1E4927D28;
  v1[1] = *(_OWORD *)&off_1E4927D38;
  v1[2] = xmmword_1E4927D48;
  if (captureDeferredContainerManager_initializeStatics_onceToken != -1)
    dispatch_once(&captureDeferredContainerManager_initializeStatics_onceToken, &__block_literal_global_112);
  return FigCaptureXPCServerStart((uint64_t)"com.apple.coremedia.capture.deferred.containermanager.xpc", (uint64_t)v1, 0);
}

uint64_t captureDeferredContainerManager_handleNoReplyMessage()
{
  uint64_t OpCode;
  uint64_t v1;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v1 = OpCode;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    objc_autoreleasePoolPop((void *)MEMORY[0x1A858DD40]());
    return 4294954514;
  }
  return v1;
}

uint64_t captureDeferredContainerManager_getAndRetainContainerObjectFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  uint64_t v4;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v4 = v2;
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954513;
  }
  return v4;
}

uint64_t captureDeferredContainerManager_serializeNotification(int a1, int a2, int a3, CFDictionaryRef theDict)
{
  const __CFAllocator *v5;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v8;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Count = CFDictionaryGetCount(theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(v5, Count, theDict);
  if (FigXPCMessageSetCFDictionary())
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    v8 = 1;
    if (!MutableCopy)
      return v8;
    goto LABEL_3;
  }
  v8 = 2;
  if (MutableCopy)
LABEL_3:
    CFRelease(MutableCopy);
  return v8;
}

float bwvip_boundingBoxArea(void *a1)
{
  char isKindOfClass;
  double v3;
  double v4;
  double v5;
  float v6;

  getVNDetectedObjectObservationClass();
  isKindOfClass = objc_opt_isKindOfClass();
  LODWORD(v3) = 0;
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "boundingBox", v3);
    *(float *)&v3 = v4;
    v6 = v5;
    *(float *)&v3 = *(float *)&v3 * v6;
  }
  return *(float *)&v3;
}

uint64_t FigCaptureVersatileRawPatternForVersatileBayerPattern(unsigned int a1)
{
  if (a1 > 8)
    return 0;
  else
    return *(unsigned int *)&aBggrgbrggrbgrg[4 * a1];
}

BOOL FigCapturePixelFormatIsPackedBayerRaw(int a1)
{
  return a1 == 1650946098;
}

BOOL FigCapturePixelFormatIsDemosaicedRaw(_BOOL8 result)
{
  if (result)
    return FigCaptureUncompressedPixelFormatForPixelFormat(result) == 1751527984;
  return result;
}

uint64_t BWPixelFormatIsFixedPoint(int a1)
{
  _BOOL4 v1;

  v1 = a1 == 825437747 || a1 == 1932996149;
  return a1 == 825306677 || v1;
}

uint64_t FigCapturePixelFormatIsTenBitPacked(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1882468913)
  {
    if (a1 == 1651587122)
      return result;
    v3 = 1882468912;
    goto LABEL_7;
  }
  if (a1 != 1882468914 && a1 != 1885745712)
  {
    v3 = 1885745714;
LABEL_7:
    if (a1 != v3)
      return 0;
  }
  return result;
}

uint64_t FigCaptureUnPackedPixelFormatForPixelFormat(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;

  v1 = a1;
  if (FigCapturePixelFormatIsTenBit(a1))
  {
    if ((_DWORD)v1 == 1885746228)
      v2 = 2019963956;
    else
      v2 = v1;
    if ((_DWORD)v1 == 1885745714)
      v3 = 2019963442;
    else
      v3 = v2;
    if ((_DWORD)v1 == 1885745712)
      v4 = 2019963440;
    else
      v4 = v3;
    if ((_DWORD)v1 == 1882469428)
      v5 = 2016687156;
    else
      v5 = v1;
    if ((_DWORD)v1 == 1882468914)
      v6 = 2016686642;
    else
      v6 = v5;
    if ((_DWORD)v1 == 1882468912)
      v7 = 2016686640;
    else
      v7 = v6;
    if ((int)v1 <= 1885745711)
      return v7;
    else
      return v4;
  }
  return v1;
}

uint64_t FigCapturePixelFormatTypeFromPlistValue(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return BWOSTypeForString(a1);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a1, "intValue");
  else
    return 0;
}

void sub_1A30EFF48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceProxyCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t (*v7)(const void *, __CFString *, _QWORD);
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;

  FigCaptureSourceGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
    v10 = v5;
    fig_log_get_emitter();
    goto LABEL_8;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(uint64_t (**)(const void *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v7)
  {
    v10 = 4294954514;
LABEL_7:
    fig_log_get_emitter();
LABEL_8:
    FigDebugAssert3();
    return v10;
  }
  v8 = v7(a2, CFSTR("HasProxy"), MEMORY[0x1E0C9AAB0]);
  if ((_DWORD)v8)
  {
    v10 = v8;
    goto LABEL_7;
  }
  if (a2)
    v9 = CFRetain(a2);
  else
    v9 = 0;
  *(_QWORD *)(DerivedStorage + 8) = v9;
  *(_QWORD *)(DerivedStorage + 16) = FigDispatchQueueCreateWithPriority();
  *(_BYTE *)(DerivedStorage + 24) = 1;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  v10 = 0;
  *a3 = 0;
  return v10;
}

uint64_t captureSourceProxy_handleRealCaptureSourceNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

BOOL FigCaptureSourceProxyRealSourceEqualsSource(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return !*(_BYTE *)DerivedStorage && *(_QWORD *)(DerivedStorage + 8) == a2;
}

void FigCaptureSourceProxyDetachFromRealSource(const void *a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[7];
  _QWORD v7[2];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 24) = 0;
  v7[0] = CFSTR("OldPropertyValue");
  v7[1] = CFSTR("NewPropertyValue");
  v8[0] = MEMORY[0x1E0C9AAB0];
  v8[1] = MEMORY[0x1E0C9AAA0];
  v2 = (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, v7, 2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && CFSTR("Connected"))
  {
    v4 = DerivedStorage;
    CFRetain(CFSTR("Connected"));
    if (v2)
      CFRetain(v2);
    if (a1)
      CFRetain(a1);
    v5 = *(NSObject **)(v4 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __captureSourceProxy_postNotificationWithPayload_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = CFSTR("Connected");
    block[5] = a1;
    block[6] = v2;
    dispatch_async(v5, block);
  }
  else
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
}

void __captureSourceProxy_postNotificationWithPayload_block_invoke(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (void *)MEMORY[0x1A858DD40]();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  objc_autoreleasePoolPop(v2);
}

uint64_t captureSourceProxy_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, __CFString *, _QWORD);
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    v2 = *(_QWORD *)(DerivedStorage + 8);
    v3 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v3)
      v3(v2, CFSTR("HasProxy"), *MEMORY[0x1E0C9AE40]);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v4 = *(const void **)(v1 + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 8) = 0;
    }
  }
  return 0;
}

void captureSourceProxy_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  captureSourceProxy_Invalidate();
  v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
}

__CFString *captureSourceProxy_CopyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptureSourceProxy %p retainCount: %ld%s allocator: %p, "), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t captureSourceProxy_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, id *);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const void *, uint64_t, _QWORD *);
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _QWORD v29[4];

  v29[2] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("IsProxy")))
  {
    v8 = (const void *)*MEMORY[0x1E0C9AE50];
    *a4 = *MEMORY[0x1E0C9AE50];
    CFRetain(v8);
    return 0;
  }
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("HasProxy")))
    return 4294954516;
  if (CFEqual(a2, CFSTR("CurrentPropertyValues")))
  {
    v22 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v29[0] = CFSTR("VideoZoomFactor");
    v29[1] = CFSTR("ExposureTargetBias");
    v11 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v29, 2);
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (!v12)
      goto LABEL_20;
    v13 = v12;
    v14 = *(_QWORD *)v25;
LABEL_11:
    v15 = 0;
    while (1)
    {
      if (*(_QWORD *)v25 != v14)
        objc_enumerationMutation(v11);
      v16 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v15);
      v23 = 0;
      v17 = *(_QWORD *)(DerivedStorage + 8);
      v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v18)
        break;
      v19 = v18(v17, v16, a3, &v23);
      if ((_DWORD)v19)
      {
        v9 = v19;
        goto LABEL_22;
      }
      if (v23)
      {
        objc_msgSend(v22, "setObject:forKeyedSubscript:", v23, v16);

      }
      if (v13 == ++v15)
      {
        v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
        if (v13)
          goto LABEL_11;
LABEL_20:
        v9 = 0;
        *a4 = v22;
        return v9;
      }
    }
    v9 = 4294954514;
LABEL_22:
    fig_log_get_emitter();
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(DerivedStorage + 8);
  v21 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v21)
  {
    v9 = v21(v20, a2, a3, a4);
    if (!(_DWORD)v9)
      return v9;
  }
  else
  {
    v9 = 4294954514;
  }
  fig_log_get_emitter();
LABEL_28:
  FigDebugAssert3();
  return v9;
}

uint64_t captureSourceProxy_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __CFString *, uint64_t);
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("HasProxy")))
  {
    v12[0] = 0x1E4953F18;
    v12[1] = 0x1E4953F38;
    v13[0] = a2;
    v13[1] = a3;
    v9 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v10 = *((_QWORD *)v7 + 1);
    v11 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
    {
      v8 = v11(v10, CFSTR("PropertySetByProxy"), v9);
      if (!(_DWORD)v8)
        return v8;
    }
    else
    {
      v8 = 4294954514;
    }
    fig_log_get_emitter();
    FigDebugAssert3();
    return v8;
  }
  return 4294954516;
}

uint64_t captureSourceProxy_LockForConfiguration()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v3)
  {
    v4 = 4294954514;
LABEL_7:
    fig_log_get_emitter();
    FigDebugAssert3();
    return v4;
  }
  v4 = v3(v2);
  if ((_DWORD)v4)
    goto LABEL_7;
  return v4;
}

uint64_t captureSourceProxy_UnlockForConfiguration()
{
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(DerivedStorage + 8);
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v3)
  {
    v4 = 4294954514;
LABEL_7:
    fig_log_get_emitter();
    FigDebugAssert3();
    return v4;
  }
  v4 = v3(v2);
  if ((_DWORD)v4)
    goto LABEL_7;
  return v4;
}

uint64_t captureDeferredContainerManager_Invalidate()
{
  _BYTE *DerivedStorage;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
    *DerivedStorage = 1;
  return 0;
}

_BYTE *captureDeferredContainerManager_Finalize()
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
    *result = 1;
  return result;
}

id captureDeferredContainerManager_CopyDebugDescription(const void *a1)
{
  _BYTE *DerivedStorage;
  id v3;
  CFIndex v4;
  const char *v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v4 = CFGetRetainCount(a1);
  if (*DerivedStorage)
    v5 = " (invalidated)";
  else
    v5 = "";
  objc_msgSend(v3, "appendFormat:", CFSTR("<FigCaptureDeferredContainerManager %p retainCount: %ld%s allocator: %p>"), a1, v4, v5, CFGetAllocator(a1));
  return v3;
}

uint64_t captureDeferredContainerManager_CopyProperty(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return 4294954509;
}

uint64_t captureDeferredContainerManager_SetProperty(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return FigSignalErrorAt();
  if (!a2)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  return 4294954509;
}

id captureDeferredContainerManager_CopySharedContainerIdentifiers(uint64_t a1, uint64_t a2)
{
  id v2;
  int v4;

  v4 = 0;
  v2 = -[BWDeferredCaptureContainerManager manifestsForApplicationID:err:](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "manifestsForApplicationID:err:", a2, &v4);
  if (v4)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
  }
  return v2;
}

uint64_t captureDeferredContainerManager_QueryContainerStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return -[BWDeferredCaptureContainerManager queryContainerStatusForApplicationID:captureRequestIdentifier:status:](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "queryContainerStatusForApplicationID:captureRequestIdentifier:status:", a2, a3, a4);
}

id captureDeferredContainerManager_CopyRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return -[BWDeferredCaptureContainerManager copyRemoteContainerForApplicationID:captureRequestIdentifier:err:](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "copyRemoteContainerForApplicationID:captureRequestIdentifier:err:", a2, a3, &v4);
}

uint64_t captureDeferredContainerManager_ReleaseRemoteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[BWDeferredCaptureContainerManager releaseRemoteContainerForApplicationID:captureRequestIdentifier:](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "releaseRemoteContainerForApplicationID:captureRequestIdentifier:", a2, a3);
}

uint64_t captureDeferredContainerManager_DeleteContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[BWDeferredCaptureContainerManager deleteContainerForApplicationID:captureRequestIdentifier:](+[BWDeferredCaptureContainerManager sharedInstance](BWDeferredCaptureContainerManager, "sharedInstance"), "deleteContainerForApplicationID:captureRequestIdentifier:", a2, a3);
}

uint64_t cs_handleThermalPressureOrPowerChange(int a1, unsigned int a2, float a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  BOOL v13;
  int v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  _QWORD v18[4];
  int v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = (void *)sActiveVideoCaptureSources;
  v7 = objc_msgSend((id)sActiveVideoCaptureSources, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v22;
    v10 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v22 != v9)
          objc_enumerationMutation(v6);
        v12 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * i);
        v18[0] = v10;
        v18[1] = 3221225472;
        v18[2] = __cs_handleThermalPressureOrPowerChange_block_invoke;
        v18[3] = &__block_descriptor_40_e154_i16__0__FigCaptureSourceStorage_qiCC____8I____OpaqueFigSimpleMutex__q____CFString__i__________OpaqueFigCaptureSource_f___i__OpaqueFigFlashlight__iBBB_BB_8l;
        v19 = a1;
        v20 = a3;
        captureSource_safelyAccessStorage(v12, (uint64_t)v18);
      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v8);
  }
  if (sTimeOfFlightAFEnabled)
  {
    v13 = a1 > 1 || a2 > 0x1D;
    v14 = v13;
    if (sTimeOfFlightAFSuspended != v14)
    {
      sTimeOfFlightAFSuspended = v14;
      if (dword_1ECFE9450)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      cs_updateTimeOfFlightAFEnabledStatus();
    }
  }
  if (sStructuredLightAFEnabled && sStructuredLightAFSuspended != a1 > 1)
  {
    sStructuredLightAFSuspended = a1 > 1;
    if (dword_1ECFE9450)
    {
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cs_updateStructuredLightAFEnabledStatus();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

void captureSource_handleCMIOExtensionPropertyChangeNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("DeviceType")), "intValue");
  if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("UniqueID")), "isEqualToString:", objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("UniqueID"))))
  {
    if (dword_1ECFE9450)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("SourceCMIOExtensionPropertyChanged"), (uint64_t)a5, 0, 0);
  }
}

void captureSource_handleDevicePropertyChangedNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  __CFString **v7;

  if (objc_msgSend((id)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("UniqueID")), "isEqualToString:", objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 104), "objectForKeyedSubscript:", CFSTR("UniqueID"))))
  {
    if (FigCFEqual())
    {
      v7 = kFigCaptureSourceProperty_Hidden;
    }
    else if (FigCFEqual())
    {
      v7 = kFigCaptureSourceProperty_ReadyToUnhide;
    }
    else if (FigCFEqual())
    {
      v7 = kFigCaptureSourceProperty_DockedTrackingActive;
    }
    else if (FigCFEqual())
    {
      v7 = kFigCaptureSourceProperty_BatteryState;
    }
    else
    {
      if (!FigCFEqual())
        return;
      v7 = kFigCaptureSourceProperty_BatteryLevel;
    }
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, *v7, objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("Value")), 0, 0);
  }
}

void captureSource_handleAttachedAccessoriesNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  __CFString **v8;

  v7 = objc_msgSend(a5, "objectForKeyedSubscript:", 0x1E4954338);
  if ((objc_msgSend(a3, "isEqualToString:", 0x1E4958C38) & 1) != 0)
  {
    v8 = kFigCaptureSourceProperty_WalletAccessoryConnected;
  }
  else
  {
    if (!objc_msgSend(a3, "isEqualToString:", 0x1E4958C58))
      return;
    v8 = kFigCaptureSourceProperty_BatteryPackAccessoryConnected;
  }
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, *v8, v7, 0, 0);
}

uint64_t captureSource_deactivateInternal(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  const void *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v14;
  const __CFAllocator *v15;
  CFDictionaryRef v16;
  void *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  CMTimeScale v21;
  void *v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  const void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _DWORD v41[3];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  os_log_type_t type;
  _BYTE v47[128];
  const __CFString *v48;
  uint64_t v49;
  const __CFString *v50;
  uint64_t v51;
  CMTime time;
  _BYTE v53[256];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (!*(_BYTE *)(DerivedStorage + 12))
  {
    v4 = (void *)result;
    FigSimpleMutexCheckIsLockedOnThisThread();
    pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
    if (*(_BYTE *)(DerivedStorage + 13)
      && (*(_BYTE *)(DerivedStorage + 13) = 0, (v5 = *(void **)(DerivedStorage + 80)) != 0))
    {
      v36 = a1;
      *(_QWORD *)(DerivedStorage + 80) = 0;
      pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
      objc_msgSend(v5, "releaseResources");
      if (objc_msgSend(v5, "pearlInfraredCaptureStream"))
        v35 = (int)objc_msgSend((id)sSystemPressureMonitor, "systemPressureLevelFromPearlProjector") > 0;
      else
        v35 = 0;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v6 = (void *)objc_msgSend(v5, "captureStreams");
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v43;
        do
        {
          for (i = 0; i != v8; ++i)
          {
            if (*(_QWORD *)v43 != v9)
              objc_enumerationMutation(v6);
            v11 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * i);
            if ((int)objc_msgSend((id)sSystemPressureMonitor, "systemPressureLevelFromImageSensorWithPortType:", objc_msgSend(v11, "portType")) >= 1)objc_msgSend(v4, "addObject:", objc_msgSend(v11, "portType"));
          }
          v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
        }
        while (v8);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      v12 = v36;
      CMNotificationCenterRemoveListener();
      objc_msgSend(v5, "drainNotifications");
      if (dword_1ECFE9450)
      {
        v41[0] = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v12 = v36;
      }
      pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))
      {
        v14 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v5, "lensPosition");
        objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v14, "numberWithFloat:"), CFSTR("LensPosition"));
      }
      memset(&v53[128], 0, 24);
      objc_msgSend(v5, "exposureDuration", v33, v34);
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      time = *(CMTime *)&v53[128];
      v16 = CMTimeCopyAsDictionary(&time, v15);
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", v16, CFSTR("ExposureDuration"));
      CFRelease(v16);
      v17 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v5, "ISO");
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v17, "numberWithFloat:"), CFSTR("ISO"));
      v18 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v5, "exposureTargetOffset");
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", objc_msgSend(v18, "numberWithFloat:"), CFSTR("ExposureTargetOffset"));
      objc_msgSend(v5, "deviceWhiteBalanceGains");
      time.value = __PAIR64__(v20, v19);
      time.timescale = v21;
      v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &time, 12);
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", v22, CFSTR("DeviceWhiteBalanceGains"));

      objc_msgSend(v5, "grayWorldDeviceWhiteBalanceGains");
      v41[0] = v23;
      v41[1] = v24;
      v41[2] = v25;
      v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", v41, 12);
      objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", v26, CFSTR("GrayWorldDeviceWhiteBalanceGains"));

      if (objc_msgSend(v5, "smartCameraEnabled"))
      {
        v27 = MEMORY[0x1E0C9AAA0];
        v28 = MEMORY[0x1E0C9AA70];
        objc_msgSend(*(id *)(DerivedStorage + 176), "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AA70], CFSTR("SceneClassificationConfidences"));
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));

        v50 = CFSTR("NewPropertyValue");
        v51 = v27;
        captureSource_postNotificationWithPayload(v12, CFSTR("SceneClassificationActive"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v51, &v50, 1));
        v48 = CFSTR("NewPropertyValue");
        v49 = v28;
        captureSource_postNotificationWithPayload(v12, CFSTR("SceneClassificationConfidences"), (const void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v49, &v48, 1));
      }
      else
      {
        pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));

      }
      captureSource_postNotificationWithPayload(v12, CFSTR("SourceDeactivated"), 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("AdjustingFocus"), MEMORY[0x1E0C9AAA0], 0, 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Exposure")), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("AdjustingExposure"), MEMORY[0x1E0C9AAA0], 0, 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("WhiteBalance")), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("AdjustingWhiteBalance"), MEMORY[0x1E0C9AAA0], 0, 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("FlashActive"), MEMORY[0x1E0C9AAA0], 0, 0);
      if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("SIS")), "BOOLValue"))captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("IsStillImageStabilizationScene"), MEMORY[0x1E0C9AAA0], 0, 0);
      if (objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", CFSTR("Option25")))
      {
        DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*MEMORY[0x1E0C9D628]);
        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("Option25Changed"), (uint64_t)DictionaryRepresentation, 0, 0);

        captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, CFSTR("Option25Changed2"), MEMORY[0x1E0C9AAA0], 0, 0);
      }
      if (v35)
        objc_msgSend((id)sSystemPressureMonitor, "startMonitoringPearlProjectorTemperatureUntilNominal");
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
      if (result)
      {
        v30 = result;
        v31 = *(_QWORD *)v38;
        do
        {
          v32 = 0;
          do
          {
            if (*(_QWORD *)v38 != v31)
              objc_enumerationMutation(v4);
            objc_msgSend((id)sSystemPressureMonitor, "startMonitoringImageSensorTemperatureUntilNominalWithPortType:", *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * v32++));
          }
          while (v30 != v32);
          result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v37, v47, 16);
          v30 = result;
        }
        while (result);
      }
    }
    else
    {
      return pthread_mutex_unlock(*(pthread_mutex_t **)(DerivedStorage + 48));
    }
  }
  return result;
}

uint64_t cs_resetTimeOfFlightAutoFocus(void *a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return 4294954516;
  FigSimpleMutexCheckIsLockedOnThisThread();
  result = objc_msgSend(a1, "setPropertyIfSupported:value:", *MEMORY[0x1E0D059E0], MEMORY[0x1E0C9AAA0]);
  if (!(_DWORD)result)
  {
    sTimeOfFlightAFEnabled = 0;
    sTimeOfFlightAFSuspended = 1;
    if (objc_msgSend(0, "streaming"))
      objc_msgSend(0, "stop");
    if (dword_1ECFE9450)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  return result;
}

uint64_t cs_updateStructuredLightAFTargetStreamResources()
{
  void *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  FigSimpleMutexCheckIsLockedOnThisThread();
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v0 = (void *)sActiveVideoCaptureSources;
  result = objc_msgSend((id)sActiveVideoCaptureSources, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)v10;
    while (2)
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v10 != v3)
          objc_enumerationMutation(v0);
        v5 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v4);
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          v7 = DerivedStorage;
          if (objc_msgSend((id)objc_msgSend(*(id *)(DerivedStorage + 104), "objectForKeyedSubscript:", 0x1E4952258), "BOOLValue"))
          {
            sStructuredLightAFTargetStreamSource = v5;
            v8 = (id)objc_msgSend((id)objc_msgSend(*(id *)(v7 + 80), "captureStream"), "stream");
            sStructuredLightAFTargetStream = (uint64_t)v8;
            sStructuredLightAFTargetStreamStreaming = 0;
            FigSimpleMutexCheckIsLockedOnThisThread();
            objc_msgSend(v8, "registerForNotification:listener:callback:", CFSTR("StreamStarted"), v8, cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStartedNotification);
            return objc_msgSend(v8, "registerForNotification:listener:callback:", CFSTR("StreamStopped"), v8, cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStoppedNotification);
          }
        }
        ++v4;
      }
      while (v2 != v4);
      result = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      v2 = result;
      if (result)
        continue;
      break;
    }
  }
  return result;
}

void FigVideoCaptureSourcesDeactivateWithDevices(CFArrayRef theArray, const __CFArray *a2, char a3)
{
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t DerivedStorage;
  uint64_t v10;
  void *v11;
  id v12;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      v6 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_6:
  v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", Count);
  if (Count != v6)
    FigDebugAssert3();
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(DerivedStorage + 8) == 1)
      {
        v10 = DerivedStorage;
        if (sTimeOfFlightAFEnabled && (a3 & 1) == 0)
        {
          sTimeOfFlightAFEnabled = 0;
          sTimeOfFlightAFSuspended = 1;
          cs_updateTimeOfFlightAFEnabledStatus();
        }
        if (sStructuredLightAFEnabled)
        {
          sStructuredLightAFEnabled = 0;
          sStructuredLightAFSuspended = 1;
          sStructuredLightAFTargetStreamStreaming = 0;
          cs_updateStructuredLightAFEnabledStatus();
        }
        v11 = (void *)sStructuredLightAFTargetStream;
        if (sStructuredLightAFTargetStream)
        {
          FigSimpleMutexCheckIsLockedOnThisThread();
          objc_msgSend(v11, "unregisterForNotification:listener:", CFSTR("StreamStarted"), v11);
          objc_msgSend(v11, "unregisterForNotification:listener:", CFSTR("StreamStopped"), v11);

          sStructuredLightAFTargetStream = 0;
          sStructuredLightAFTargetStreamSource = 0;
        }
        if (!*(_BYTE *)(v10 + 12) && CFArrayGetValueAtIndex(a2, i) == *(const void **)(v10 + 80))
        {
          if (objc_msgSend((id)sActiveVideoCaptureSources, "containsObject:", ValueAtIndex))
          {
            objc_msgSend(v12, "addObject:", ValueAtIndex);
            objc_msgSend((id)sActiveVideoCaptureSources, "removeObject:", ValueAtIndex);
          }
          captureSource_deactivateInternal(ValueAtIndex);
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);

}

void cs_updateStructuredLightAFEnabledStatus()
{
  uint64_t v0;
  BOOL v1;
  char v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  FigSimpleMutexCheckIsLockedOnThisThread();
  v1 = 0;
  v16 = 0;
  if (sStructuredLightAFTargetStreamStreaming == 1 && sStructuredLightAFEnabled != 0)
    v1 = sStructuredLightAFSuspended == 0;
  v3 = objc_msgSend((id)sStructuredLightAFAssistStream, "streaming");
  v4 = cs_copyActiveCaptureDevice();
  v5 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
  v6 = v5;
  if (v1)
  {
    if ((v3 & 1) == 0)
    {
      v7 = (void *)sStructuredLightAFAssistStream;
      if (!sStructuredLightAFAssistStream)
      {
        sStructuredLightAFAssistStream = objc_msgSend(v5, "copyStreamFromDevice:position:deviceType:deviceClientPriority:allowsStreamControlLoss:error:", v4, 2, 5, 1, 1, &v16);
        v8 = v16;
        if (v16 == -12681)
        {
          LODWORD(v18[0]) = 0;
          FigSimpleMutexCheckIsLockedOnThisThread();
          sStructuredLightAFAssistStreamControlledByAnotherClient = objc_msgSend(v6, "copyStreamWithoutControlFromDevice:position:deviceType:error:", v4, 2, 5, v18);
          if (sStructuredLightAFAssistStreamControlledByAnotherClient)
            cs_structuredLightAFAssistRegisterForAssistStreamNotifications();
          v8 = v16;
        }
        if (v8)
        {
          FigDebugAssert3();
          goto LABEL_23;
        }
        cs_structuredLightAFAssistRegisterForAssistStreamNotifications();
        v7 = (void *)sStructuredLightAFAssistStream;
      }
      v9 = *MEMORY[0x1E0D06610];
      v17[0] = *MEMORY[0x1E0D06608];
      v17[1] = v9;
      v18[0] = &unk_1E49FC468;
      v18[1] = &unk_1E49FC4B0;
      v17[2] = *MEMORY[0x1E0D06618];
      v18[2] = &unk_1E49FC4E0;
      v10 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, v17, 3);
      v11 = objc_msgSend(v7, "setProperty:value:", *MEMORY[0x1E0D07598], v10);
      if (v11)
      {
        v15 = v0;
        LODWORD(v14) = v11;
        FigDebugAssert3();
      }
      else
      {
        objc_msgSend(v7, "setPropertyIfSupported:value:", *MEMORY[0x1E0D077C0], MEMORY[0x1E0C9AAB0]);
      }
      objc_msgSend((id)sStructuredLightAFAssistStream, "start", v14, v15);
    }
  }
  else if (sStructuredLightAFAssistStream | sStructuredLightAFAssistStreamControlledByAnotherClient)
  {
    if (sStructuredLightAFAssistStream)
      v12 = sStructuredLightAFAssistStream;
    else
      v12 = sStructuredLightAFAssistStreamControlledByAnotherClient;
    objc_msgSend((id)sStructuredLightAFAssistStream, "stop");
    FigSimpleMutexCheckIsLockedOnThisThread();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigSimpleMutexCheckIsLockedOnThisThread();
    v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v12, 0);
    objc_msgSend(v6, "takeBackStreams:device:totalStreamingDuration:", v13, v4, 0);

    sStructuredLightAFAssistStream = 0;
    sStructuredLightAFAssistStreamControlledByAnotherClient = 0;
  }
LABEL_23:

}

void *FigCaptureSourceShowSystemUserInterface(int a1, const void *a2, const void *a3)
{
  void *v5;
  const void **v6;
  uint64_t v7;
  void *v8;
  void *result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  const __CFString *v16;
  NSObject *v17;
  dispatch_time_t v18;
  _QWORD v20[6];
  _QWORD v21[5];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  const void *v28;
  _QWORD v29[6];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (FigCFEqual())
  {
    v29[0] = 0x1E493D718;
    v29[1] = 0x1E493D5B8;
    v29[2] = CFSTR("com.apple.VideoConference.AVConferenceTestRunneriOS");
    v29[3] = CFSTR("com.apple.AVConferenceTestRunnertvOS");
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = (const void **)v29;
    v7 = 4;
  }
  else
  {
    v28 = a2;
    v5 = (void *)MEMORY[0x1E0C99D20];
    v6 = &v28;
    v7 = 1;
  }
  v8 = (void *)objc_msgSend(v5, "arrayWithObjects:count:", v6, v7);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  result = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (!result)
    return result;
  v10 = result;
  v11 = *(_QWORD *)v24;
  v12 = *MEMORY[0x1E0D22E58];
  while (2)
  {
    v13 = 0;
    do
    {
      if (*(_QWORD *)v24 != v11)
        objc_enumerationMutation(v8);
      v14 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v13);
      v22 = 0;
      result = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForPredicate:error:", objc_msgSend(MEMORY[0x1E0D87DA0], "predicateMatchingBundleIdentifier:", v14), &v22);
      if (v22)
        return result;
      v15 = (void *)objc_msgSend(result, "currentState");
      if (objc_msgSend(v15, "taskState") == 4
        && objc_msgSend((id)objc_msgSend(v15, "endowmentNamespaces"), "containsObject:", v12))
      {
        if (a1 == 1)
        {
          v16 = CFSTR("com.apple.replaykit.VideoConferenceControlCenterModule");
        }
        else
        {
          if (a1 != 2)
            return (void *)FigDebugAssert3();
          v16 = CFSTR("com.apple.replaykit.AudioConferenceControlCenterModule");
        }
        getCCSControlCenterServiceClass();
        if (objc_opt_class())
        {
          getCCSModulePresentationOptionsClass();
          if (objc_opt_class())
          {
            pthread_mutex_lock((pthread_mutex_t *)sShowSystemUserInterfaceLock);
            v17 = dispatch_semaphore_create(0);
            cs_updateShowSystemUserInterfaceDefaults(a2, a3);
            v21[0] = MEMORY[0x1E0C809B0];
            v21[1] = 3221225472;
            v21[2] = __FigCaptureSourceShowSystemUserInterface_block_invoke;
            v21[3] = &unk_1E491E720;
            v21[4] = v17;
            v20[0] = MEMORY[0x1E0C809B0];
            v20[1] = 3221225472;
            v20[2] = __FigCaptureSourceShowSystemUserInterface_block_invoke_2;
            v20[3] = &unk_1E4927E80;
            v20[4] = v21;
            v20[5] = v16;
            objc_msgSend((id)objc_msgSend((id)getCCSControlCenterServiceClass(), "sharedInstance"), "setVisibility:forModuleWithIdentifier:completionHandler:", 1, v16, v20);
            v18 = dispatch_time(0, 5000000000);
            dispatch_semaphore_wait(v17, v18);
            dispatch_release(v17);
            return (void *)pthread_mutex_unlock((pthread_mutex_t *)sShowSystemUserInterfaceLock);
          }
        }
        return (void *)FigDebugAssert3();
      }
      v13 = (char *)v13 + 1;
    }
    while (v10 != v13);
    result = (void *)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    v10 = result;
    if (result)
      continue;
    break;
  }
  return result;
}

uint64_t getCCSControlCenterServiceClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__39;
  v7 = __Block_byref_object_dispose__39;
  v0 = getCCSControlCenterServiceClass_softClass;
  v8 = getCCSControlCenterServiceClass_softClass;
  if (!getCCSControlCenterServiceClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getCCSControlCenterServiceClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getCCSControlCenterServiceClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30FAD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getCCSModulePresentationOptionsClass()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__39;
  v7 = __Block_byref_object_dispose__39;
  v0 = getCCSModulePresentationOptionsClass_softClass;
  v8 = getCCSModulePresentationOptionsClass_softClass;
  if (!getCCSModulePresentationOptionsClass_softClass)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getCCSModulePresentationOptionsClass_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getCCSModulePresentationOptionsClass_block_invoke((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30FAE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t cs_updateShowSystemUserInterfaceDefaults(const void *a1, const void *a2)
{
  const __CFString *v4;
  const __CFString *v5;

  FigSimpleMutexCheckIsLockedOnThisThread();
  v4 = (const __CFString *)*MEMORY[0x1E0C9B260];
  v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
  CFPreferencesSetValue(CFSTR("show-system-ui-bundle-id"), a1, CFSTR("com.apple.cameracapture.volatile"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  CFPreferencesSetValue(CFSTR("show-system-ui-app-name"), a2, CFSTR("com.apple.cameracapture.volatile"), v4, v5);
  return CFPreferencesSynchronize(CFSTR("com.apple.cameracapture.volatile"), v4, v5);
}

uint64_t captureSource_safelyAccessStorage(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294954516;
  v4 = DerivedStorage;
  pthread_mutex_lock(*(pthread_mutex_t **)(DerivedStorage + 48));
  if (*(_BYTE *)(v4 + 12))
    v5 = 4294954511;
  else
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
  pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 48));
  return v5;
}

uint64_t FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  const void *v5;
  int v6;
  uint64_t v7;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  uint64_t v15;
  int v16;

  v16 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3052000000;
  v13 = __Block_byref_object_copy__39;
  v14 = __Block_byref_object_dispose__39;
  v15 = 0;
  v4 = FigVideoCaptureSourceCopyUnderlyingCaptureSourceForPortType(a1, a2, &v16);
  v5 = (const void *)v4;
  v6 = v16;
  if (v16)
  {
    FigDebugAssert3();
    if (v5)
LABEL_5:
      CFRelease(v5);
  }
  else
  {
    if (v4)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __FigVideoCaptureSourceGetUnderlyingFastSwitchingFormatsForFormatAndPortType_block_invoke;
      v9[3] = &unk_1E4927ED0;
      v9[4] = &v10;
      v6 = captureSource_safelyAccessStorage(v4, (uint64_t)v9);
      if (v6)
        FigDebugAssert3();
      goto LABEL_5;
    }
    FigDebugAssert3();
    v6 = 0;
  }
  if (a3)
    *a3 = v6;
  v7 = v11[5];
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_1A30FB474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigVideoCaptureSourceCopySupplementalTimeOfFlightCaptureSource(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigVideoCaptureSourceCopySupplementalTimeOfFlightCaptureSource_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A30FB69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceIsSecureMetadataSource(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigCaptureSourceIsSecureMetadataSource_block_invoke;
  v4[3] = &unk_1E4927ED0;
  v4[4] = &v5;
  *a2 = captureSource_safelyAccessStorage(a1, (uint64_t)v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1A30FB908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FigCaptureSourceAttachToClient(uint64_t a1, _OWORD *a2, const void *a3)
{
  uint64_t DerivedStorage;
  __int128 v6;
  const void *v7;
  void *v8;
  __int128 v9;
  _OWORD v11[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = a2[1];
  *(_OWORD *)(DerivedStorage + 16) = *a2;
  *(_OWORD *)(DerivedStorage + 32) = v6;
  if (!a3)
    goto LABEL_5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = *(const void **)(DerivedStorage + 72);
    *(_QWORD *)(DerivedStorage + 72) = a3;
    CFRetain(a3);
    if (v7)
      CFRelease(v7);
LABEL_5:
    v8 = *(void **)(DerivedStorage + 80);
    v9 = *(_OWORD *)(DerivedStorage + 32);
    v11[0] = *(_OWORD *)(DerivedStorage + 16);
    v11[1] = v9;
    objc_msgSend(v8, "updateClientAuditToken:", v11);
    return 0;
  }
  FigDebugAssert3();
  return FigSignalErrorAt();
}

uint64_t FigCaptureSourceDetachFromClient()
{
  uint64_t DerivedStorage;
  __int128 v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&v1 = -1;
  *((_QWORD *)&v1 + 1) = -1;
  *(_OWORD *)(DerivedStorage + 16) = v1;
  *(_OWORD *)(DerivedStorage + 32) = v1;
  return 0;
}

const __CFArray *FigCaptureSourceCopySources(int a1)
{
  __int128 v3[2];
  __int128 v4;
  __int128 v5;

  if (!FigCaptureCurrentProcessIsCameracaptured()
    && !FigCaptureCurrentProcessIsMediaserverd())
  {
    return (const __CFArray *)objc_alloc_init(MEMORY[0x1E0C99D20]);
  }
  v4 = 0u;
  v5 = 0u;
  FigCaptureGetCurrentProcessAuditToken(&v4);
  v3[0] = v4;
  v3[1] = v5;
  return FigCaptureSourceCopySourcesForClientAuditToken(a1, v3, 0, 1);
}

void __cs_initializeStatics_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigCaptureInitializeSingletons();
  sActiveVideoCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sActiveVideoCaptureSourceLock = FigSimpleMutexCreate();
  sAllVideoCaptureSourcesLock = FigSimpleMutexCreate();
  sAllProprietaryDefaultsCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sAllProprietaryDefaultsCaptureSourcesLock = FigSimpleMutexCreate();
  sShowSystemUserInterfaceLock = FigSimpleMutexCreate();
  sAllVideoCaptureSources = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sNewCaptureSourceToken = FigGetUpTimeNanoseconds() / 0xF4240uLL;
  if (cs_initializeCameraHistoryTemporaryItems_onceToken != -1)
    dispatch_once(&cs_initializeCameraHistoryTemporaryItems_onceToken, &__block_literal_global_83_0);
}

id __cs_initializeCameraHistoryTemporaryItems_block_invoke()
{
  void *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  id result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mach_timebase_info info;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  sServerUserDefaults = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_msgSend((id)sServerUserDefaults, "objectForKey:", CFSTR("boot-time"));
  v1 = mach_continuous_time();
  info = 0;
  if (mach_timebase_info(&info) || info.numer == 1 && info.denom == 1)
    v2 = (double)v1;
  else
    v2 = (double)info.numer / (double)info.denom * (double)v1;
  v3 = v2 / -1000000000.0;
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v5 = v4 + v3;
  if (dword_1ECFE9450)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  objc_msgSend(v0, "doubleValue", v15, v18);
  if (vabdd_f64(v5, v7) <= 1.0)
  {
    if (dword_1ECFE9450)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5), CFSTR("boot-time"));
    objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", 0, CFSTR("tmp"));
  }
  v9 = (void *)objc_msgSend((id)sServerUserDefaults, "objectForKey:", CFSTR("tmp"), v16, v19);
  if (objc_msgSend(v9, "count"))
  {
    sTemporaryCameraHistoryItems = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v9);
    if (dword_1ECFE9450)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    sTemporaryCameraHistoryItems = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  }
  sTemporaryCameraHistoryItemsLock = FigReentrantMutexCreate();
  v11 = (void *)objc_msgSend((id)sTemporaryCameraHistoryItems, "objectForKeyedSubscript:", CFSTR("camera-history-downplay-override-list"));
  if (objc_msgSend(v11, "count"))
    v12 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithArray:", v11);
  else
    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  sCameraHistoryDownplayOverrideList = (uint64_t)v12;
  v13 = (void *)objc_msgSend((id)sTemporaryCameraHistoryItems, "objectForKeyedSubscript:", CFSTR("camera-histories-updated-with-overriding-camera"), v17, v20);
  if (objc_msgSend(v13, "count"))
    result = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v13);
  else
    result = objc_alloc_init(MEMORY[0x1E0C99E08]);
  sCameraHistoriesUpdatedWithOverridingCamera = (uint64_t)result;
  return result;
}

uint64_t __cs_handleThermalPressureOrPowerChange_block_invoke(uint64_t a1, uint64_t a2)
{
  captureSource_setThermalLevelAndMaxTorchLevel(a2, *(unsigned int *)(a1 + 32), *(float *)(a1 + 36));
  return 0;
}

id __cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  _QWORD v13[9];
  _QWORD v14[10];

  v14[9] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0D08550];
  v1 = *MEMORY[0x1E0D07060];
  v13[0] = *MEMORY[0x1E0D07080];
  v13[1] = v1;
  v2 = *MEMORY[0x1E0CA2560];
  v14[0] = v0;
  v14[1] = v2;
  v3 = *MEMORY[0x1E0D08540];
  v4 = *MEMORY[0x1E0D07078];
  v13[2] = *MEMORY[0x1E0D07070];
  v13[3] = v4;
  v5 = *MEMORY[0x1E0D08548];
  v14[2] = v3;
  v14[3] = v5;
  v6 = *MEMORY[0x1E0CA2550];
  v7 = *MEMORY[0x1E0D07058];
  v13[4] = *MEMORY[0x1E0D07050];
  v13[5] = v7;
  v8 = *MEMORY[0x1E0D08538];
  v14[4] = v6;
  v14[5] = v8;
  v9 = *MEMORY[0x1E0CA2548];
  v10 = *MEMORY[0x1E0D07048];
  v13[6] = *MEMORY[0x1E0D07040];
  v13[7] = v10;
  v11 = *MEMORY[0x1E0D08530];
  v14[6] = v9;
  v14[7] = v11;
  v13[8] = *MEMORY[0x1E0D07088];
  v14[8] = *MEMORY[0x1E0CA2568];
  result = (id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, v13, 9);
  cs_metadataIdentifierKeyForObjectsDetectionConfigurationKey_sMetadataKeysByConfigurationKeysDict = (uint64_t)result;
  return result;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke(uint64_t a1, uint64_t a2)
{
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue"))*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", 0x1E4954198);
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("SIS")), "BOOLValue"))*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) = objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", 0x1E49541B8);
  return 0;
}

void captureSource_updateCachedZoomFactorPropertyAndNotify(const void *a1, const void *a2)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __captureSource_updateCachedZoomFactorPropertyAndNotify_block_invoke;
  v4[3] = &unk_1E4927F90;
  v4[4] = a2;
  captureSource_safelyAccessStorage((uint64_t)a1, (uint64_t)v4);
  captureSource_postNotificationWithPayload(a1, CFSTR("VideoZoomRampUpdate"), a2);
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("Flash")), "BOOLValue");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("Torch")), "BOOLValue");
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_3(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 12))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = (id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType"));
  return 0;
}

uint64_t __captureSource_handleDeviceNotification_block_invoke_4(uint64_t a1, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 12))
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = (id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("DeviceType"));
  return 0;
}

uint64_t __captureSource_updateCachedZoomFactorPropertyAndNotify_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a2 + 176), "setObject:forKeyedSubscript:", objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", 0x1E4953818), CFSTR("VideoZoomFactor"));
  return 0;
}

void captureSource_handleFlashlightNotification(uint64_t a1, const void *a2, void *a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  float v10;
  __CFString *v11;
  const void *v12;
  uint64_t v13;
  char v14;

  if (objc_msgSend(a3, "isEqualToString:", CFSTR("FlashlightLevel")))
  {
    v8 = (void *)objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("FlashlightValue"));
    v9 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v8, "floatValue");
    captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(a2, CFSTR("TorchActive"), objc_msgSend(v9, "numberWithInt:", v10 > 0.0), 0, 0);
    v11 = CFSTR("TorchLevel");
    v12 = a2;
    v13 = (uint64_t)v8;
    v14 = 1;
  }
  else
  {
    if (!objc_msgSend(a3, "isEqualToString:", CFSTR("FlashlightOverheated")))
      return;
    v13 = objc_msgSend(a5, "objectForKeyedSubscript:", CFSTR("FlashlightValue"));
    v11 = CFSTR("TorchOverheated");
    v12 = a2;
    v14 = 0;
  }
  captureSource_updateCachedPropertyAndNotifyWithForceBehaviorAndConfigurationMutexLockedState(v12, v11, v13, v14, 0);
}

void captureSource_handleThirdPartyTorchLevelCommand(const void *a1, float a2)
{
  uint64_t DerivedStorage;
  __int128 v5;
  FigCaptureClientApplicationStateMonitor *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t PIDFromAuditToken;
  const __CFString *v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, float);
  _OWORD v15[2];
  _QWORD v16[7];
  _QWORD v17[3];
  char v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexCheckIsLockedOnThisThread();
  if (a2 == 0.0)
  {
    captureSource_turnOffAndTeardownFigFlashlight(a1);
    return;
  }
  if (!*(_QWORD *)(DerivedStorage + 216))
  {
    v5 = *(_OWORD *)(DerivedStorage + 32);
    v19 = *(_OWORD *)(DerivedStorage + 16);
    v20 = v5;
    v17[0] = 0;
    v17[1] = v17;
    v17[2] = 0x2020000000;
    v18 = 1;
    v6 = [FigCaptureClientApplicationStateMonitor alloc];
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __captureSource_handleThirdPartyTorchLevelCommand_block_invoke;
    v16[3] = &unk_1E4927FB8;
    v16[4] = v17;
    v16[5] = DerivedStorage;
    v16[6] = a1;
    v15[0] = v19;
    v15[1] = v20;
    *(_QWORD *)(DerivedStorage + 216) = -[FigCaptureClientApplicationStateMonitor initWithClientAuditToken:mediaEnvironment:forThirdPartyTorch:applicationAndLayoutStateHandler:](v6, "initWithClientAuditToken:mediaEnvironment:forThirdPartyTorch:applicationAndLayoutStateHandler:", v15, 0, 1, v16);
    _Block_object_dispose(v17, 8);
  }
  if (*(_DWORD *)(DerivedStorage + 224) == 1)
  {
    FigDebugAssert3();
    return;
  }
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = v7;
  v9 = (uint64_t *)(v7 + 208);
  if (!*(_QWORD *)(v7 + 208))
  {
    v10 = *(_OWORD *)(v7 + 32);
    v19 = *(_OWORD *)(v7 + 16);
    v20 = v10;
    PIDFromAuditToken = FigCaptureGetPIDFromAuditToken(&v19);
    v12 = (const __CFString *)objc_msgSend(*(id *)(v8 + 216), "applicationID");
    if (FigFlashlightCreate(*MEMORY[0x1E0C9AE00], 0, PIDFromAuditToken, v12, v9)
      || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterAddListener())
      || (CMNotificationCenterGetDefaultLocalCenter(), CMNotificationCenterAddListener()))
    {
      FigDebugAssert3();
LABEL_13:
      FigDebugAssert3();
      return;
    }
  }
  v13 = *(_QWORD *)(DerivedStorage + 208);
  v14 = *(unsigned int (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v14 || v14(v13, a2))
    goto LABEL_13;
}

void sub_1A30FCA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __captureSource_handleThirdPartyTorchLevelCommand_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 40) + 48));
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 224) = a3;
  if (a3 == 1)
    captureSource_turnOffAndTeardownFigFlashlight(*(const void **)(a1 + 48));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_BYTE *)(v5 + 24))
  {
    pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + 40) + 48));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  *(_BYTE *)(v5 + 24) = 0;
}

uint64_t __cs_updateTimeOfFlightAFEnabledStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("Position")), "intValue");
  v5 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 104), "objectForKeyedSubscript:", CFSTR("Focus")), "BOOLValue");
  if (v4 == 1 && v5 != 0)
    objc_msgSend(*(id *)(a2 + 80), "setTimeOfFlightAFEnabled:", *(unsigned __int8 *)(a1 + 32));
  return 0;
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStartedNotification(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStream == a2)
  {
    if ((sStructuredLightAFTargetStreamStreaming & 1) == 0)
    {
      sStructuredLightAFTargetStreamStreaming = 1;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFTargetStreamStoppedNotification(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStream == a2)
  {
    if (sStructuredLightAFTargetStreamStreaming == 1)
    {
      sStructuredLightAFEnabled = 0;
      sStructuredLightAFTargetStreamStreaming = 0;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

uint64_t cs_structuredLightAFAssistRegisterForAssistStreamNotifications()
{
  FigSimpleMutexCheckIsLockedOnThisThread();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterAddListener();
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFAssistStreamControlTakenByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStreamSource == a2 && sStructuredLightAFAssistStream == a4)
  {
    if (!sStructuredLightAFAssistStreamControlledByAnotherClient)
    {
      sStructuredLightAFAssistStreamControlledByAnotherClient = a4;
      sStructuredLightAFAssistStream = 0;
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

uint64_t cs_structuredLightAFAssistHandleStructuredLightAFAssistStreamControlRelinquishedByAnotherClientNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
  if (sStructuredLightAFTargetStreamSource == a2 && sStructuredLightAFAssistStreamControlledByAnotherClient == a4 && a4)
  {
    v6 = cs_copyActiveCaptureDevice();
    v7 = +[BWFigCaptureDeviceVendor sharedCaptureDeviceVendor](BWFigCaptureDeviceVendor, "sharedCaptureDeviceVendor");
    v9[0] = sStructuredLightAFAssistStreamControlledByAnotherClient;
    LODWORD(v7) = objc_msgSend(v7, "requestControlOfStreams:device:deviceClientPriority:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 1), v6, 1);

    if (!(_DWORD)v7)
    {
      sStructuredLightAFAssistStream = sStructuredLightAFAssistStreamControlledByAnotherClient;
      sStructuredLightAFAssistStreamControlledByAnotherClient = 0;
      cs_updateStructuredLightAFEnabledStatus();
    }
  }
  else
  {
    FigDebugAssert3();
  }
  return pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
}

Class __getCCSControlCenterServiceClass_block_invoke(uint64_t a1)
{
  Class result;

  ControlCenterServicesLibrary();
  result = objc_getClass("CCSControlCenterService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getCCSControlCenterServiceClass_block_invoke_cold_1();
  getCCSControlCenterServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void ControlCenterServicesLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!ControlCenterServicesLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E4927FF8;
    v2 = 0;
    ControlCenterServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ControlCenterServicesLibraryCore_frameworkLibrary)
    ControlCenterServicesLibrary_cold_1(&v0);
}

Class __getCCSModulePresentationOptionsClass_block_invoke(uint64_t a1)
{
  Class result;

  ControlCenterServicesLibrary();
  result = objc_getClass("CCSModulePresentationOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getCCSModulePresentationOptionsClass_block_invoke_cold_1();
  getCCSModulePresentationOptionsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t captureSource_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  CFTypeRef v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return 0;
  v3 = DerivedStorage;
  v4 = 0;
  v5 = *(_DWORD *)(DerivedStorage + 8);
  if (v5 == 5)
  {
    v6 = &sAllProprietaryDefaultsCaptureSources;
    v7 = &sAllProprietaryDefaultsCaptureSourcesLock;
LABEL_16:
    pthread_mutex_lock((pthread_mutex_t *)*v7);
    objc_msgSend((id)*v6, "removeObject:", a1);
    DerivedStorage = pthread_mutex_unlock((pthread_mutex_t *)*v7);
    goto LABEL_17;
  }
  if (v5 == 1)
  {
    pthread_mutex_lock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
    if (sTimeOfFlightAFEnabled
      && objc_msgSend(*(id *)(v3 + 80), "device")
      && !cs_resetTimeOfFlightAutoFocus((void *)objc_msgSend(*(id *)(v3 + 80), "device")))
    {
      objc_msgSend(*(id *)(v3 + 80), "setTimeOfFlightAFEnabled:", 0);
    }
    if (objc_msgSend((id)sActiveVideoCaptureSources, "containsObject:", a1))
    {
      if (a1)
        v4 = CFRetain(a1);
      else
        v4 = 0;
      captureSource_deactivateInternal(a1);
      objc_msgSend((id)sActiveVideoCaptureSources, "removeObject:", a1);
    }
    else
    {
      v4 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)sActiveVideoCaptureSourceLock);
    v6 = &sAllVideoCaptureSources;
    v7 = &sAllVideoCaptureSourcesLock;
    goto LABEL_16;
  }
LABEL_17:
  *(_BYTE *)(v3 + 12) = 1;
  FigCaptureDeviceGetNotificationCenter(DerivedStorage);
  v8 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v8);
  v9 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v9);
  v10 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v10);
  v11 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v11);
  v12 = FigNotificationCenterRemoveWeakListener();
  FigCaptureDeviceGetNotificationCenter(v12);
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();

  *(_QWORD *)(v3 + 232) = 0;
  v13 = *(const void **)(v3 + 72);
  if (v13)
    CFRelease(v13);
  pthread_mutex_lock(*(pthread_mutex_t **)(v3 + 48));

  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;

  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;

  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;

  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 152) = 0;

  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 184) = 0;

  *(_QWORD *)(v3 + 192) = 0;
  captureSource_turnOffAndTeardownFigFlashlight(a1);
  v14 = *(void **)(v3 + 216);
  *(_QWORD *)(v3 + 216) = 0;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 48));
  if (v4)
    CFRelease(v4);
  objc_msgSend(v14, "invalidate");

  return 0;
}

void captureSource_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECFE9450)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  captureSource_Invalidate(a1);
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 56);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }

}

uint64_t captureSource_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  id v3;
  CFIndex v4;
  const char *v5;
  CFAllocatorRef v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = objc_alloc(MEMORY[0x1E0CB3940]);
  v4 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 12))
    v5 = " (invalidated)";
  else
    v5 = "";
  v6 = CFGetAllocator(a1);
  v7 = BWPhotoEncoderStringFromEncodingScheme(*(unsigned int *)(DerivedStorage + 8));
  return objc_msgSend(v3, "initWithFormat:", CFSTR("<FigCaptureSource %p> retainCount: %ld%s, allocator: %p, type: %@, position: %@"), a1, v4, v5, v6, v7, BWPhotoEncoderStringFromEncodingScheme(*(unsigned int *)(DerivedStorage + 88)));
}

uint64_t captureSource_UnregisterNotificationForProprietaryDefaultChanges(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  objc_msgSend(*(id *)(DerivedStorage + 232), "stopObservingChangesForKey:", a2);
  return 0;
}

uint64_t captureSource_UpdateCameraOverrideHistory(uint64_t a1, int a2, void *a3, void *a4, int a5, _BYTE *a6, void **a7)
{
  void **v7;
  uint64_t *v15;
  NSObject *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  int v23;
  float *v24;
  NSObject *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  NSObject *v40;
  int v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void **v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  os_log_type_t type[4];
  int v60;
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  void *v65;
  _BYTE v66[128];
  uint64_t v67;

  v7 = a7;
  v67 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  *a7 = 0;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 12))
    return 4294954511;
  v53 = a5;
  v54 = a2;
  v52 = a6;
  v15 = &sharedInstance_sOnceToken_0;
  if (!a5)
  {
    if (dword_1ECFE9450)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v15 = &sharedInstance_sOnceToken_0;
    }
    pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    if (objc_msgSend((id)v15[43], "objectForKeyedSubscript:", a3))
      v28 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend((id)v15[43], "objectForKeyedSubscript:", a3));
    else
      v28 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v29 = (void *)v28;
    pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    if (objc_msgSend(v29, "count"))
    {
      v30 = 0;
      while (!cs_cameraInfosAreEqualExcludingRank(a4, (void *)objc_msgSend(v29, "objectAtIndexedSubscript:", v30, v47, v48)))
      {
        if (++v30 >= (unint64_t)objc_msgSend(v29, "count"))
          goto LABEL_32;
      }
      objc_msgSend(v29, "removeObjectAtIndex:", v30);
      pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
      v31 = 1;
    }
    else
    {
LABEL_32:
      pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
      v31 = 0;
      if (objc_msgSend((id)v15[43], "objectForKeyedSubscript:", a3))
        goto LABEL_42;
    }
    if (dword_1ECFE9450)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v15 = &sharedInstance_sOnceToken_0;
    }
    objc_msgSend((id)v15[43], "setObject:forKeyedSubscript:", v29, a3, v47, v48);
    objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", v15[43], CFSTR("tmp"));
LABEL_42:
    pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
    v33 = (void *)objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "allKeys");
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v55, v66, 16);
    if (v34)
    {
      v35 = v34;
      v49 = v31;
      v50 = v7;
      v51 = a1;
      v36 = 0;
      v37 = *(_QWORD *)v56;
      do
      {
        for (i = 0; i != v35; ++i)
        {
          if (*(_QWORD *)v56 != v37)
            objc_enumerationMutation(v33);
          v39 = *(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * i);
          if (cs_cameraInfosAreEqualExcludingRank(a4, (void *)objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "objectForKeyedSubscript:", v39, v47, v48)))
          {
            objc_msgSend((id)sCameraHistoryDownplayOverrideList, "removeObject:", v39);
            objc_msgSend((id)sCameraHistoriesUpdatedWithOverridingCamera, "setObject:forKeyedSubscript:", 0, v39);
            v36 = 1;
          }
        }
        v35 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v55, v66, 16);
      }
      while (v35);
      v31 = v49;
      if ((v36 & 1) != 0)
      {
        v7 = v50;
        a1 = v51;
        v26 = &sharedInstance_sOnceToken_0;
        if (dword_1ECFE9450)
        {
          v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
        v24 = &ispToneCurve[176];
        objc_msgSend((id)sTemporaryCameraHistoryItems, "setObject:forKeyedSubscript:", sCameraHistoriesUpdatedWithOverridingCamera, CFSTR("camera-histories-updated-with-overriding-camera"));
        objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", sTemporaryCameraHistoryItems, CFSTR("tmp"));
        pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
        v41 = 1;
        goto LABEL_58;
      }
      v41 = 0;
      v7 = v50;
      a1 = v51;
    }
    else
    {
      v41 = 0;
    }
    v24 = ispToneCurve + 704;
    v26 = &sharedInstance_sOnceToken_0;
LABEL_58:
    v27 = v31 | v41;
    goto LABEL_59;
  }
  if (dword_1ECFE9450)
  {
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v15 = &sharedInstance_sOnceToken_0;
  }
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  if (objc_msgSend((id)v15[43], "objectForKeyedSubscript:", a3))
    v18 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend((id)v15[43], "objectForKeyedSubscript:", a3));
  else
    v18 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v19 = (void *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  v20 = objc_msgSend((id)objc_msgSend(a4, "objectForKeyedSubscript:", CFSTR("OverrideRanking")), "intValue");
  if (objc_msgSend(v19, "count"))
  {
    v21 = 0;
    do
    {
      v22 = (void *)objc_msgSend(v19, "objectAtIndexedSubscript:", v21, v47, v48);
      if ((cs_cameraInfosAreEqualExcludingRank(a4, v22) & 1) != 0)
        return 0;
      v23 = objc_msgSend((id)objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("OverrideRanking")), "intValue");
      if (v20)
      {
        if (v20 <= v23)
          goto LABEL_20;
      }
      else if (v23 > 0)
      {
LABEL_20:
        if (v21 == 0x7FFFFFFFFFFFFFFFLL)
          break;
        objc_msgSend(v19, "insertObject:atIndex:", a4, v21);
        v24 = &ispToneCurve[176];
        while (++v21 < (unint64_t)objc_msgSend(v19, "count"))
        {
          if (cs_cameraInfosAreEqualExcludingRank(a4, (void *)objc_msgSend(v19, "objectAtIndexedSubscript:", v21)))
          {
            objc_msgSend(v19, "removeObjectAtIndex:", v21);
            goto LABEL_22;
          }
        }
        goto LABEL_22;
      }
    }
    while (++v21 < (unint64_t)objc_msgSend(v19, "count"));
  }
  objc_msgSend(v19, "addObject:", a4, v47, v48);
  v24 = &ispToneCurve[176];
LABEL_22:
  if (dword_1ECFE9450)
  {
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  v26 = &sharedInstance_sOnceToken_0;
  objc_msgSend((id)sTemporaryCameraHistoryItems, "setObject:forKeyedSubscript:", v19, a3);
  objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", sTemporaryCameraHistoryItems, CFSTR("tmp"));
  pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  v27 = 1;
LABEL_59:
  if (v53 && v27)
  {
    if (dword_1ECFE9450)
    {
      LODWORD(v55) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v43 = v55;
      if (os_log_type_enabled(v42, type[0]))
        v44 = v43;
      else
        v44 = v43 & 0xFFFFFFFE;
      if (v44)
      {
        v60 = 136315651;
        v61 = "captureSource_UpdateCameraOverrideHistory";
        v62 = 1025;
        v63 = v54;
        v64 = 2113;
        v65 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    cs_updateCameraHistoryDownplayOverrideListForPreferenceKey(0);
  }
  if (v27)
  {
    *v52 = 1;
    pthread_mutex_lock(*((pthread_mutex_t **)v24 + 159));
    v45 = objc_msgSend((id)v26[43], "objectForKeyedSubscript:", a3);
    if (v45)
    {
      v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", v45);
      *v7 = v46;
    }
    else
    {
      v46 = *v7;
    }
    cs_sendNotificationOfNewTransientValue(a1, v46, a3);
    pthread_mutex_unlock(*((pthread_mutex_t **)v24 + 159));
  }
  return 0;
}

uint64_t captureSource_PerformReactionEffect(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  objc_msgSend(*(id *)(DerivedStorage + 80), "performReactionEffect:", a2);
  return 0;
}

uint64_t captureSource_SetPixelBufferProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t captureSource_CopyWildcardProprietaryDefault(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2 || !a3)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v7 = (void *)objc_msgSend(*(id *)(DerivedStorage + 232), "objectsForWildcardKey:", a2);
  objc_msgSend(v7, "count");
  *a3 = v7;
  return 0;
}

uint64_t captureSource_SetWildcardProprietaryDefault(uint64_t a1, const __CFString *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 12))
    return FigSignalErrorAt();
  if (!a2 || !a4)
  {
    FigDebugAssert3();
    return FigSignalErrorAt();
  }
  v8 = DerivedStorage;
  if (CFStringHasPrefix(a2, CFSTR("signal/")))
    return FigSignalErrorAt();
  *a4 = (id)objc_msgSend(*(id *)(v8 + 232), "setObject:forWildcardKey:", a3, a2);
  return 0;
}

void cs_sendNotificationOfNewTransientValue(uint64_t a1, void *a2, void *a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  void *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void *);
  int v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  os_log_type_t v39;
  os_log_type_t type[4];
  void *v41;
  _BYTE v42[128];
  int v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
  v6 = objc_alloc(MEMORY[0x1E0C99D20]);
  v7 = (void *)objc_msgSend(v6, "initWithArray:", sAllProprietaryDefaultsCaptureSources);
  pthread_mutex_unlock((pthread_mutex_t *)sAllProprietaryDefaultsCaptureSourcesLock);
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v36 != v10)
          objc_enumerationMutation(v7);
        if (*(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i) != a1)
          objc_msgSend(*(id *)(CMBaseObjectGetDerivedStorage() + 232), "sendNotificationOfNewTransientValue:forKey:", a2, a3);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v35, v42, 16);
    }
    while (v9);
  }

  if (objc_msgSend(a3, "isEqualToString:", CFSTR("signal/request-gestures-default-disabled-notification")))
  {
    if (!ReplayKitLibraryCore_frameworkLibrary)
    {
      v51 = xmmword_1E4928030;
      v52 = 0;
      ReplayKitLibraryCore_frameworkLibrary = _sl_dlopen();
    }
    if (ReplayKitLibraryCore_frameworkLibrary)
    {
      v12 = getshowReactionsTipSymbolLoc();
      if (a2)
      {
        if (v12)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v13 = objc_msgSend(a2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("."), CFSTR("-"));
            v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("videoeffects/%@/did-show-gestures-default-disabled-notification"), v13);
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            v16 = objc_msgSend(*(id *)(DerivedStorage + 232), "objectForKey:", v14);
            if (v16
              && (v17 = (void *)v16, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              && objc_msgSend(v17, "BOOLValue"))
            {
              LODWORD(v41) = 0;
              type[0] = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v19 = v41;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
                v20 = v19;
              else
                v20 = v19 & 0xFFFFFFFE;
              if (v20)
              {
                v43 = 136315394;
                v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                v45 = 2112;
                v46 = v14;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            else
            {
              v41 = 0;
              v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", a2, 1, &v41);
              if (!v21)
              {
                *(_DWORD *)type = 0;
                v39 = OS_LOG_TYPE_DEFAULT;
                v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v23 = *(_DWORD *)type;
                if (os_log_type_enabled(v22, v39))
                  v24 = v23;
                else
                  v24 = v23 & 0xFFFFFFFE;
                if (v24)
                {
                  v43 = 136315650;
                  v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                  v45 = 2112;
                  v46 = (uint64_t)a2;
                  v47 = 2112;
                  v48 = v41;
                  LODWORD(v34) = 32;
                  v33 = &v43;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v25 = objc_msgSend(v21, "localizedName", v33, v34);
              v26 = (uint64_t (*)(uint64_t, void *))getshowReactionsTipSymbolLoc();
              if (!v26)
                cs_sendNotificationOfNewTransientValue_cold_1();
              v27 = v26(v25, a2);
              *(_DWORD *)type = 0;
              v39 = OS_LOG_TYPE_DEFAULT;
              v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v29 = *(_DWORD *)type;
              if (os_log_type_enabled(v28, v39))
                v30 = v29;
              else
                v30 = v29 & 0xFFFFFFFE;
              if (v30)
              {
                if (v27)
                  v31 = "was";
                else
                  v31 = "was not";
                v32 = objc_msgSend(v21, "localizedName");
                v43 = 136315906;
                v44 = "cs_handleRequestGesturesDefaultDisabledNotificationSignal";
                v45 = 2080;
                v46 = (uint64_t)v31;
                v47 = 2112;
                v48 = a2;
                v49 = 2112;
                v50 = v32;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              if (v27)
                objc_msgSend(*(id *)(DerivedStorage + 232), "setObject:forKey:", MEMORY[0x1E0C9AAB0], v14);

            }
          }
        }
      }
    }
  }
}

uint64_t getshowReactionsTipSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = getshowReactionsTipSymbolLoc_ptr;
  v6 = getshowReactionsTipSymbolLoc_ptr;
  if (!getshowReactionsTipSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getshowReactionsTipSymbolLoc_block_invoke;
    v2[3] = &unk_1E491EC40;
    v2[4] = &v3;
    __getshowReactionsTipSymbolLoc_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A30FEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getshowReactionsTipSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ReplayKitLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4928030;
    v5 = 0;
    ReplayKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ReplayKitLibraryCore_frameworkLibrary)
    __getshowReactionsTipSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)ReplayKitLibraryCore_frameworkLibrary, "showReactionsTip");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getshowReactionsTipSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t cs_updateCameraHistoryDownplayOverrideListForPreferenceKey(uint64_t a1)
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    result = objc_msgSend((id)sCameraHistoryDownplayOverrideList, "containsObject:", a1);
    if ((result & 1) != 0)
      return result;
    objc_msgSend((id)sCameraHistoryDownplayOverrideList, "addObject:", a1);
  }
  else
  {
    result = objc_msgSend((id)sCameraHistoryDownplayOverrideList, "count");
    if (!result)
      return result;
    objc_msgSend((id)sCameraHistoryDownplayOverrideList, "removeAllObjects");
  }
  if (dword_1ECFE9450)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  pthread_mutex_lock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
  objc_msgSend((id)sTemporaryCameraHistoryItems, "setObject:forKeyedSubscript:", sCameraHistoryDownplayOverrideList, CFSTR("camera-history-downplay-override-list"));
  objc_msgSend((id)sServerUserDefaults, "setObject:forKey:", sTemporaryCameraHistoryItems, CFSTR("tmp"));
  return pthread_mutex_unlock((pthread_mutex_t *)sTemporaryCameraHistoryItemsLock);
}

Class __getCMIOExtensionProviderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!CoreMediaIOLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E4928048;
    v5 = 0;
    CoreMediaIOLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreMediaIOLibraryCore_frameworkLibrary)
    __getCMIOExtensionProviderClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CMIOExtensionProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    __getCMIOExtensionProviderClass_block_invoke_cold_2();
  getCMIOExtensionProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t flatDictionary_register()
{
  uint64_t result;

  sFigFlatDictionaryClass = 0;
  unk_1ECFE9C90 = "FigFlatDictionary";
  qword_1ECFE9C98 = (uint64_t)flatDictionary_init;
  unk_1ECFE9CA0 = 0;
  qword_1ECFE9CA8 = (uint64_t)flatDictionary_finalize;
  unk_1ECFE9CB0 = 0u;
  unk_1ECFE9CC0 = 0u;
  result = _CFRuntimeRegisterClass();
  sFigFlatDictionaryID = result;
  return result;
}

uint64_t flatDictionaryKeySpec_register()
{
  uint64_t result;

  sFigFlatDictionaryKeySpecClass = 0;
  *(_QWORD *)algn_1ECFE9CF8 = "FigFlatDictionaryKeySpec";
  qword_1ECFE9D00 = (uint64_t)flatDictionaryKeySpec_init;
  unk_1ECFE9D08 = 0;
  qword_1ECFE9D10 = (uint64_t)flatDictionaryKeySpec_finalize;
  unk_1ECFE9D18 = 0u;
  unk_1ECFE9D28 = 0u;
  result = _CFRuntimeRegisterClass();
  sFigFlatDictionaryKeySpecID = result;
  return result;
}

uint64_t FigFlatDictionaryContainsValueForKey(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (!a2)
    return 0;
  if (a3)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      v4 = 0;
      v5 = *(unsigned int *)(a2 + 4);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8);
        if (v5 < *(_DWORD *)(v6 + 32))
          v4 = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 4 * v5) != -1;
      }
    }
    else
    {
      v4 = 0;
    }
    *a3 = v4;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 40) + 4 * *(int *)(a2 + 4));
  if (v8 == -1)
    return 0;
  else
    return (*(unsigned __int8 *)(*(_QWORD *)(v7 + 32) + (v8 >> 3)) >> (v8 & 7)) & 1;
}

uint64_t FigFlatDictionaryGetCountOfKeysWithValues(uint64_t a1, int8x8_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  __int32 v7;
  __int32 v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 36) + 7;
  if (v3 < 8)
    return 0;
  LODWORD(result) = 0;
  v5 = v3 >> 3;
  v6 = (unsigned __int8 *)(*(_QWORD *)(v2 + 24) + 12);
  do
  {
    v8 = *v6++;
    v7 = v8;
    if (v8)
    {
      a2.i32[0] = v7;
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      v7 = a2.i32[0];
    }
    result = (v7 + result);
    --v5;
  }
  while (v5);
  return result;
}

uint64_t FigFlatDictionaryGetKeysWithValues(uint64_t a1, uint64_t a2, unsigned int *a3, int8x8_t a4)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  result = 0;
  if (a2 && a3)
  {
    v8 = *a3;
    if (v8 >= FigFlatDictionaryGetCountOfKeysWithValues(a1, a4))
    {
      *a3 = 0;
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_QWORD *)(v9 + 8);
      if (*(_DWORD *)(v10 + 36))
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + v11);
          if (v15)
          {
            v16 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * *(int *)(v15 + 4));
            if (v16 != -1 && ((*(unsigned __int8 *)(*(_QWORD *)(v9 + 32) + (v16 >> 3)) >> (v16 & 7)) & 1) != 0)
            {
              *(_QWORD *)(a2 + 8 * v14) = v15;
              *a3 = ++v12;
              ++v14;
              v9 = *(_QWORD *)(a1 + 24);
            }
          }
          ++v13;
          v10 = *(_QWORD *)(v9 + 8);
          v11 += 24;
        }
        while (v13 < *(unsigned int *)(v10 + 36));
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void FigFlatDictionaryRemoveValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *v9;
  unsigned int v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  int v17;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      v5 = *(unsigned int *)(a2 + 4);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8);
        if (v5 < *(_DWORD *)(v6 + 32))
        {
          v7 = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 4 * v5);
          if (v7 != -1)
          {
            v8 = *(unsigned int *)(*(_QWORD *)(v6 + 48) + 24 * v7 + 8);
            if (flatDictionary_setterCheck(a1))
            {
              v9 = *(const void **)(a2 + 32);
              v10 = *(_DWORD *)(a2 + 16) - 7;
              if (v9)
              {
                if (v10 > 1)
                {
                  v12 = (void *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + v8);
                  v11 = *(_QWORD *)(a2 + 24);
                }
                else
                {
                  v11 = (*(_DWORD *)(a2 + 24) - 4);
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + v8) = v11;
                  v12 = (void *)(v8 + *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 4);
                  v9 = *(const void **)(a2 + 32);
                }
                memcpy(v12, v9, v11);
              }
              else
              {
                v13 = *(_QWORD *)(a1 + 24);
                if (v10 > 2)
                {
                  v15 = (void *)(*(_QWORD *)(v13 + 40) + v8);
                  v14 = *(_QWORD *)(a2 + 24);
                }
                else
                {
                  v14 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 48)
                                        + 24
                                        * *(int *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 40) + 4 * *(int *)(a2 + 4))
                                        + 12);
                  v15 = (void *)(*(_QWORD *)(v13 + 40) + v8);
                }
                bzero(v15, v14);
              }
              v16 = *(_QWORD *)(a1 + 24);
              v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v16 + 32) + (v17 >> 3)) &= ~(1 << (v17 & 7));
            }
          }
        }
      }
    }
  }
}

uint64_t FigFlatDictionaryGetInt16(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 __dst;

  __dst = 0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    v7 = *(_WORD *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return v7;
}

uint64_t FigFlatDictionaryGetInt32(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned int __dst;

  __dst = 0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    result = *(unsigned int *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

uint64_t FigFlatDictionarySetInt64(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetInt64(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t __dst;

  __dst = 0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    result = *(_QWORD *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

uint64_t FigFlatDictionarySetBool(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetBool(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 __dst;

  __dst = 0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    result = *(unsigned __int8 *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

uint64_t FigFlatDictionarySetFloat32(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(float *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

float FigFlatDictionaryGetFloat32(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  float result;
  float __dst;

  __dst = 0.0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    result = *(float *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

uint64_t FigFlatDictionarySetFloat64(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    if (v4)
    {
      v6 = *(unsigned int *)(a2 + 4);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 8);
        if (v6 < *(_DWORD *)(v7 + 32))
        {
          v8 = *(_DWORD *)(*(_QWORD *)(v7 + 40) + 4 * v6);
          if (v8 != -1)
          {
            v10 = *(unsigned int *)(*(_QWORD *)(v7 + 48) + 24 * v8 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              *(double *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + v10) = a3;
              v11 = *(_QWORD *)(v3 + 24);
              v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v11 + 32) + (v12 >> 3)) |= 1 << (v12 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

double FigFlatDictionaryGetFloat64(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double result;
  double __dst;

  __dst = 0.0;
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, &__dst);
    return __dst;
  }
  else
  {
    result = *(double *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

void FigFlatDictionaryGetCMTime(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 *v9;
  __int128 v10;
  int v11;
  int v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!a2
    || (v4 = *(_QWORD **)(a1 + 24)) == 0
    || (v5 = *(unsigned int *)(a2 + 4), (v5 & 0x80000000) != 0)
    || (v6 = v4[1], v5 >= *(_DWORD *)(v6 + 32))
    || (v7 = *(_QWORD *)(v6 + 40), v8 = *(_DWORD *)(v7 + 4 * v5), v8 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, a4);
  }
  else
  {
    v9 = (__int128 *)(v4[5] + *(unsigned int *)(*(_QWORD *)(v6 + 48) + 24 * v8 + 8));
    v10 = *v9;
    a4[2] = *((_QWORD *)v9 + 2);
    *(_OWORD *)a4 = v10;
    if (a3)
    {
      v11 = *(_DWORD *)(v7 + 4 * v5);
      if (v11 == -1)
        LOBYTE(v12) = 0;
      else
        v12 = (*(unsigned __int8 *)(v4[4] + (v11 >> 3)) >> (v11 & 7)) & 1;
      *a3 = v12;
    }
  }
}

uint64_t FigFlatDictionarySetCGRect(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  int v19;

  if (a2)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 24);
    if (v7)
    {
      v9 = *(unsigned int *)(a2 + 4);
      if ((v9 & 0x80000000) == 0)
      {
        v10 = *(_QWORD *)(v7 + 8);
        if (v9 < *(_DWORD *)(v10 + 32))
        {
          v11 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v9);
          if (v11 != -1)
          {
            v16 = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 24 * v11 + 8);
            result = flatDictionary_setterCheck(result);
            if ((_DWORD)result)
            {
              v17 = (double *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 40) + v16);
              *v17 = a3;
              v17[1] = a4;
              v17[2] = a5;
              v17[3] = a6;
              v18 = *(_QWORD *)(v6 + 24);
              v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 40) + 4 * *(int *)(a2 + 4));
              *(_BYTE *)(*(_QWORD *)(v18 + 32) + (v19 >> 3)) |= 1 << (v19 & 7);
            }
          }
        }
      }
    }
  }
  return result;
}

double FigFlatDictionaryGetCGRect(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double result;
  _QWORD __dst[5];

  __dst[4] = *MEMORY[0x1E0C80C00];
  if (!a2
    || (v3 = *(_QWORD **)(a1 + 24)) == 0
    || (v4 = *(unsigned int *)(a2 + 4), (v4 & 0x80000000) != 0)
    || (v5 = v3[1], v4 >= *(_DWORD *)(v5 + 32))
    || (v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4), v6 == -1))
  {
    FigFlatDictionaryKeyGetDefaultValue(a2, __dst);
    return *(double *)__dst;
  }
  else
  {
    result = *(double *)(v3[5] + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
    if (a3)
      *a3 = (*(unsigned __int8 *)(v3[4] + (v6 >> 3)) >> (v6 & 7)) & 1;
  }
  return result;
}

uint64_t FigFlatDictionarySetString(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = 0;
  if (a2 && a3)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (!v7)
      return 1;
    v9 = *(unsigned int *)(a2 + 4);
    result = 1;
    if ((v9 & 0x80000000) == 0)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (v9 < *(_DWORD *)(v10 + 32))
      {
        v11 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + 4 * v9);
        if (v11 != -1)
        {
          v13 = *(unsigned int *)(*(_QWORD *)(v10 + 48) + 24 * v11 + 8);
          if (flatDictionary_setterCheck(a1))
          {
            v14 = *(_QWORD *)(a1 + 24);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 48)
                           + 24 * *(int *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 40) + 4 * *(int *)(a2 + 4))
                           + 12)
               - 4 < a4)
              return 0;
            memcpy((void *)(*(_QWORD *)(v14 + 40) + v13 + 4), a3, a4);
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + v13) = a4;
            v15 = *(_QWORD *)(a1 + 24);
            v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 40) + 4 * *(int *)(a2 + 4));
            result = 1;
            *(_BYTE *)(*(_QWORD *)(v15 + 32) + (v16 >> 3)) |= 1 << (v16 & 7);
            return result;
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetStringSize(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 && a3 && a4)
  {
    v4 = *(_QWORD *)(result + 24);
    if (!v4
      || (v5 = *(unsigned int *)(a2 + 4), (v5 & 0x80000000) != 0)
      || (v6 = *(_QWORD *)(v4 + 8), v5 >= *(_DWORD *)(v6 + 32))
      || (v7 = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 4 * v5), v7 == -1))
    {
      *a4 = 0;
      *a3 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 48) + 24 * v7;
      v9 = *(unsigned int *)(v8 + 8);
      *a4 = *(_DWORD *)(v8 + 12) - 4;
      *a3 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + v9);
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetString(uint64_t a1, uint64_t a2, _BYTE *a3, void *__dst, unsigned int *a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v16;
  int v17;
  int v18;

  result = 0;
  if (a2 && __dst && a5)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      return 1;
    v10 = *(unsigned int *)(a2 + 4);
    result = 1;
    if ((v10 & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (v10 < *(_DWORD *)(v11 + 32))
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v11 + 40) + 4 * v10);
        if (v12 != -1)
        {
          v13 = (unsigned int *)(*(_QWORD *)(v8 + 40) + *(unsigned int *)(*(_QWORD *)(v11 + 48) + 24 * v12 + 8));
          v14 = *v13;
          if (!*v13 || v14 > *a5)
            return 0;
          memcpy(__dst, v13 + 1, *v13);
          *a5 = v14;
          if (a3)
          {
            v16 = *(_QWORD *)(a1 + 24);
            v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 40) + 4 * *(int *)(a2 + 4));
            if (v17 == -1)
              LOBYTE(v18) = 0;
            else
              v18 = (*(unsigned __int8 *)(*(_QWORD *)(v16 + 32) + (v17 >> 3)) >> (v17 & 7)) & 1;
            *a3 = v18;
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetDataSize(uint64_t result, uint64_t a2, int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a2 && a3)
  {
    v4 = *(_QWORD *)(result + 24);
    if (!v4
      || (v5 = *(unsigned int *)(a2 + 4), (v5 & 0x80000000) != 0)
      || (v6 = *(_QWORD *)(v4 + 8), v5 >= *(_DWORD *)(v6 + 32))
      || (v7 = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 4 * v5), v7 == -1))
    {
      if (a4)
        *a4 = 0;
      *a3 = 0;
    }
    else
    {
      v8 = *(_QWORD *)(v6 + 48);
      v9 = *(unsigned int *)(v8 + 24 * v7 + 8);
      if (a4)
        *a4 = *(_DWORD *)(v8 + 24 * v7 + 12) - 4;
      if (*(_DWORD *)(a2 + 16) == 8)
        v10 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + v9);
      else
        v10 = *(_DWORD *)(v8 + 24 * v7 + 12) - 4;
      *a3 = v10;
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetData(uint64_t a1, uint64_t a2, _BYTE *a3, void *__dst, unsigned int *a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  result = 0;
  if (a2 && __dst && a5)
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
      return 1;
    v10 = *(unsigned int *)(a2 + 4);
    result = 1;
    if ((v10 & 0x80000000) == 0)
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (v10 < *(_DWORD *)(v11 + 32))
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v11 + 40) + 4 * v10);
        if (v12 != -1)
        {
          v14 = *(_QWORD *)(v11 + 48);
          v15 = *(unsigned int *)(v14 + 24 * v12 + 8);
          if (*(_DWORD *)(a2 + 16) == 8)
          {
            v16 = *(_DWORD *)(*(_QWORD *)(v8 + 40) + v15);
            if (!v16)
              return 0;
          }
          else
          {
            v17 = *(_DWORD *)(v14 + 24 * v12 + 12);
            v16 = v17 - 4;
            if (v17 == 4)
              return 0;
          }
          if (v16 > *a5)
            return 0;
          memcpy(__dst, (const void *)(*(_QWORD *)(v8 + 40) + v15 + 4), v16);
          *a5 = v16;
          if (a3)
          {
            v18 = *(_QWORD *)(a1 + 24);
            v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 40) + 4 * *(int *)(a2 + 4));
            if (v19 == -1)
              LOBYTE(v20) = 0;
            else
              v20 = (*(unsigned __int8 *)(*(_QWORD *)(v18 + 32) + (v19 >> 3)) >> (v19 & 7)) & 1;
            *a3 = v20;
          }
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t FigFlatDictionaryGetArrayDataType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    return 0;
  result = 0;
  v4 = *(unsigned int *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if (v4 < *(_DWORD *)(v5 + 32))
    {
      v6 = *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v4);
      if (v6 != -1)
        return *(unsigned int *)(*(_QWORD *)(v2 + 40) + *(unsigned int *)(*(_QWORD *)(v5 + 48) + 24 * v6 + 8));
      return 0;
    }
  }
  return result;
}

uint64_t FigFlatDictionaryCreateMutableWithValues(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4)
{
  return flatDictionary_create(a1, a2, a3, a4, 1);
}

uint64_t FigFlatDictionaryCreate(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4)
{
  return flatDictionary_create(a1, a2, a3, a4, 0);
}

CFTypeRef FigFlatDictionaryCreateCopy(const __CFAllocator *a1, const __CFAllocator *a2, uint64_t *a3, char a4)
{
  return flatDictionary_copy(a1, a2, a3, 0, a4);
}

CFTypeRef flatDictionary_copy(const __CFAllocator *a1, const __CFAllocator *a2, uint64_t *cf, unsigned __int8 a4, char a5)
{
  uint64_t Instance;
  CFAllocatorRef v11;
  const __CFAllocator *v12;
  CFAllocatorRef v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  CFAllocatorRef v18;
  const __CFAllocator *v19;
  CFAllocatorRef Default;
  CFAllocatorRef v21;
  CFAllocatorRef v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  if (!(*((_BYTE *)cf + 16) | a4))
  {
    v18 = CFGetAllocator(cf);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Default = a1;
    if ((const __CFAllocator *)*MEMORY[0x1E0C9AE00] == a1)
      Default = CFAllocatorGetDefault();
    if (v19 == v18)
      v18 = CFAllocatorGetDefault();
    if (CFEqual(Default, v18))
    {
      v21 = *(CFAllocatorRef *)cf[3];
      v22 = a2;
      if (v19 == a2)
        v22 = CFAllocatorGetDefault();
      if (v19 == v21)
        v21 = CFAllocatorGetDefault();
      if (CFEqual(v22, v21))
        return CFRetain(cf);
    }
  }
  MEMORY[0x1A858C99C](&FigFlatDictionaryGetTypeID_sRegisterFigFlatDictionaryOnce, flatDictionary_register);
  Instance = _CFRuntimeCreateInstance();
  *(_BYTE *)(Instance + 16) = a4;
  if ((a5 & 1) != 0)
    goto LABEL_8;
  v11 = *(CFAllocatorRef *)cf[3];
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = a2;
  if ((const __CFAllocator *)*MEMORY[0x1E0C9AE00] == a2)
    v13 = CFAllocatorGetDefault();
  if (v12 == v11)
    v11 = CFAllocatorGetDefault();
  if (CFEqual(v13, v11))
  {
LABEL_8:
    v14 = FigFlatDictionaryContentCopy(a2, cf[3]);
    *(_QWORD *)(Instance + 24) = v14;
    v15 = (unsigned int *)(v14 + 2);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  else
  {
    v23 = cf[3];
    *(_QWORD *)(Instance + 24) = v23;
    v24 = (unsigned int *)(v23 + 16);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  return (CFTypeRef)Instance;
}

CFTypeRef FigFlatDictionaryCreateMutableCopy(const __CFAllocator *a1, const __CFAllocator *a2, uint64_t *a3, char a4)
{
  return flatDictionary_copy(a1, a2, a3, 1u, a4);
}

BOOL FigFlatDictionaryKeySpecContainsKey(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a2 + 4)) != -1;
}

uint64_t FigFlatDictionaryKeySpecGetIdentifier(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 20))
    return *(unsigned int *)(a1 + 16);
  else
    return 0;
}

uint64_t FigFlatDictionaryKeySpecGetKeySpace(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t FigFlatDictionaryKeySpecReconstructFromBinary(const __CFAllocator *a1, int *a2)
{
  uint64_t Instance;
  int KeySpaceWithLabel;
  int v6;
  unsigned int NumberOfRegisteredKeys;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1A858C99C](&FigFlatDictionaryKeySpecGetTypeID_sRegisterFigFlatDictionaryKeySpecOnce, flatDictionaryKeySpec_register);
  Instance = _CFRuntimeCreateInstance();
  KeySpaceWithLabel = FigFlatDictionaryKeySpaceGetKeySpaceWithLabel(*a2);
  *(_DWORD *)(Instance + 28) = KeySpaceWithLabel;
  if (FigFlatDictionaryKeySpaceIsValid(KeySpaceWithLabel))
  {
    v6 = a2[2];
    *(_DWORD *)(Instance + 16) = a2[1];
    *(_DWORD *)(Instance + 36) = v6;
    NumberOfRegisteredKeys = FigFlatDictionaryKeySpaceGetNumberOfRegisteredKeys(*(_DWORD *)(Instance + 28));
    *(_DWORD *)(Instance + 32) = NumberOfRegisteredKeys;
    *(_BYTE *)(Instance + 20) = 1;
    v8 = (char *)CFAllocatorAllocate(a1, 24 * *(unsigned int *)(Instance + 36) + 4 * NumberOfRegisteredKeys, 0);
    v9 = *(unsigned int *)(Instance + 36);
    v10 = &v8[4 * *(unsigned int *)(Instance + 32)];
    *(_QWORD *)(Instance + 40) = v8;
    *(_QWORD *)(Instance + 48) = v10;
    *(_QWORD *)(Instance + 56) = v8;
    v11 = (char *)(a2 + 3);
    memcpy(v10, v11, 24 * v9);
    v12 = *(_DWORD *)(Instance + 36);
    if (!v12)
      return Instance;
    v13 = 0;
    v14 = 0;
    v15 = &v11[24 * v12];
    v16 = *(_QWORD *)(Instance + 48);
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(Instance + 48) + v13) = FigFlatDictionaryKeyLookupFromIdentifier(*(_DWORD *)(Instance + 28), (uint64_t)&v15[*(_QWORD *)(v16 + v13)]);
      v16 = *(_QWORD *)(Instance + 48);
      v17 = *(_QWORD *)(v16 + v13);
      if (!v17)
        break;
      *(_DWORD *)(*(_QWORD *)(Instance + 40) + 4 * *(int *)(v17 + 4)) = v14++;
      v13 += 24;
      if (v14 >= *(unsigned int *)(Instance + 36))
        return Instance;
    }
  }
  if (FigSignalErrorAt())
  {
    CFRelease((CFTypeRef)Instance);
    return 0;
  }
  return Instance;
}

uint64_t FigFlatDictionaryCreateFromBacking(uint64_t a1, const __CFAllocator *a2, uint64_t a3, _DWORD *a4)
{
  return flatDictionary_createFromBacking(a1, a2, a3, a4, 0);
}

uint64_t flatDictionary_createFromBacking(uint64_t a1, const __CFAllocator *a2, uint64_t a3, _DWORD *a4, char a5)
{
  int v6;
  int v10;
  int *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t Instance;
  const __CFAllocator **v16;

  if (a4[2] != *(_DWORD *)(a3 + 16))
    return 0;
  v6 = *(_DWORD *)(a3 + 36);
  if (!v6)
    return 0;
  v10 = 0;
  v11 = (int *)(*(_QWORD *)(a3 + 48) + 12);
  v12 = *(unsigned int *)(a3 + 36);
  do
  {
    v13 = *v11;
    v11 += 6;
    v10 += v13;
    --v12;
  }
  while (v12);
  if (!v10)
    return 0;
  v14 = v10 + ((v6 + 7) >> 3) + 12;
  MEMORY[0x1A858C99C](&FigFlatDictionaryGetTypeID_sRegisterFigFlatDictionaryOnce, flatDictionary_register);
  Instance = _CFRuntimeCreateInstance();
  *(_BYTE *)(Instance + 16) = a5;
  v16 = FigFlatDictionaryContentCreate(a2, (_DWORD *)a3, v14);
  *(_QWORD *)(Instance + 24) = v16;
  *((_DWORD *)v16 + 4) = 1;
  memcpy(v16[3], a4, *((unsigned int *)v16 + 5));
  return Instance;
}

uint64_t FigFlatDictionaryCreateMutableFromBacking(uint64_t a1, const __CFAllocator *a2, uint64_t a3, _DWORD *a4)
{
  return flatDictionary_createFromBacking(a1, a2, a3, a4, 1);
}

void flatDictionaryKeySpec_finalize(void **a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  CFAllocatorDeallocate(v2, a1[7]);
}

_QWORD *FigFlatDictionaryContentCopy(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v4 = CFAllocatorAllocate(a1, 48, 0);
  v5 = CFAllocatorAllocate(a1, *(unsigned int *)(a2 + 20), 0);
  v4[3] = v5;
  memcpy(v5, *(const void **)(a2 + 24), *(unsigned int *)(a2 + 20));
  v6 = v4[3] + 12;
  v7 = *(_DWORD **)(a2 + 8);
  v8 = v6 + ((v7[9] + 7) >> 3);
  v4[4] = v6;
  v4[5] = v8;
  *v4 = a1;
  *((_DWORD *)v4 + 5) = *(_DWORD *)(a2 + 20);
  v4[1] = CFRetain(v7);
  *((_DWORD *)v4 + 4) = 0;
  return v4;
}

id pen_inputFormatsByQSubResolutionFlavorByAddingFormatForFlavor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;

  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", a1);
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", objc_msgSend(v5, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2)));
  objc_msgSend(v6, "addObject:", a3);
  v7 = (id)objc_msgSend(v6, "copy");
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v7, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a2));
  return (id)objc_msgSend(v5, "copy");
}

void sub_1A310BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1A3111ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A3114E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  _Block_object_dispose(&a68, 8);
  _Unwind_Resume(a1);
}

void sub_1A311B0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ubn_insertOutputRouterForInputAfterPreviousInputForBufferType_0(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[2];

  v4 = 0;
  v13[1] = *MEMORY[0x1E0C80C00];
  if (a1 && a3)
  {
    v9 = objc_msgSend((id)objc_msgSend(a3, "outputSampleBufferRouterForBufferType:", a4), "outputSampleBufferRouter");
    if (v9)
    {
      v10 = v9;
      v13[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
      v4 = 1;
      objc_msgSend(a2, "addOutputSampleBufferRouter:forBufferTypes:", v10, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1));
      v12 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a4);
      objc_msgSend(a3, "addOutputSampleBufferRouter:forBufferTypes:", a1, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v12, 1));
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void *pen_validateDepthMetadata(void *result, void *a2)
{
  CMTime v3;
  CMTime time2;
  CMTime v5;

  if (result)
  {
    result = (void *)objc_msgSend(result, "objectForKeyedSubscript:", *MEMORY[0x1E0D05D00]);
    if (result)
    {
      memset(&v5, 0, sizeof(v5));
      CMTimeMakeFromDictionary(&v5, (CFDictionaryRef)result);
      BWGetOriginalPresentationTimeStampFromBuffer(a2, (uint64_t)&time2);
      v3 = v5;
      return (void *)(CMTimeCompare(&v3, &time2) == 0);
    }
  }
  return result;
}

uint64_t pen_setDistortionCorrectionParametersOnDCInputUsingDepthMetadata(void *a1, void *a2)
{
  float64x2_t v10;
  CGSize size;

  objc_msgSend(a1, "setGeometricDistortionCorrectionUsePrecomputedPolynomialsAndOpticalCenterOffset:", 1);
  objc_msgSend(a1, "setGeometricDistortionCorrectionForwardPolynomial:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D08450]));
  objc_msgSend(a1, "setGeometricDistortionCorrectionInversePolynomial:", objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D08460]));
  size.width = 0.0;
  size.height = 0.0;
  CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D08448]), &size);
  v10 = 0uLL;
  CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D08458]), (CGPoint *)&v10);
  __asm { FMOV            V2.2D, #-0.5 }
  return objc_msgSend(a1, "setGeometricDistortionCorrectionOpticalCenterOffset:", vcvtq_f64_f32(vcvt_f32_f64(vaddq_f64(v10, vmulq_f64((float64x2_t)size, _Q2)))));
}

void sub_1A31220F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __ubn_dispatch_async_block_invoke_0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void __ubn_dispatch_group_async_block_invoke_0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1A858DD40]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

uint64_t FigImageControl_LockExposure()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 3)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 3;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_SpotMetering(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 2
    || *(_DWORD *)(DerivedStorage + 7476) != a2
    || *(_DWORD *)(DerivedStorage + 7480) != a3
    || *(_DWORD *)(DerivedStorage + 7484) != a4
    || *(_DWORD *)(DerivedStorage + 7488) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 2;
    *(_DWORD *)(DerivedStorage + 7476) = a2;
    *(_DWORD *)(DerivedStorage + 7480) = a3;
    *(_DWORD *)(DerivedStorage + 7484) = a4;
    *(_DWORD *)(DerivedStorage + 7488) = a5;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_SetSpotMeteringAreaOfInterest(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) == 2)
  {
    if (*(_DWORD *)(DerivedStorage + 7476) != a2
      || *(_DWORD *)(DerivedStorage + 7480) != a3
      || *(_DWORD *)(DerivedStorage + 7484) != a4
      || *(_DWORD *)(DerivedStorage + 7488) != a5)
    {
      *(_DWORD *)(DerivedStorage + 7476) = a2;
      *(_DWORD *)(DerivedStorage + 7480) = a3;
      *(_DWORD *)(DerivedStorage + 7484) = a4;
      *(_DWORD *)(DerivedStorage + 7488) = a5;
      *(_BYTE *)(DerivedStorage + 7457) = 1;
    }
  }
  else
  {
    FigImageControl_SpotMetering(a1, a2, a3, a4, a5);
  }
  return 0;
}

uint64_t FigImageControl_FlashMetering(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 2
    || *(_DWORD *)(DerivedStorage + 7476) != a2
    || *(_DWORD *)(DerivedStorage + 7480) != a3
    || *(_DWORD *)(DerivedStorage + 7484) != a4
    || *(_DWORD *)(DerivedStorage + 7488) != a5)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 5;
    *(_DWORD *)(DerivedStorage + 7476) = a2;
    *(_DWORD *)(DerivedStorage + 7480) = a3;
    *(_DWORD *)(DerivedStorage + 7484) = a4;
    *(_DWORD *)(DerivedStorage + 7488) = a5;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_ManualExposure(float a1, float a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 7464) != 4
    || *(float *)(DerivedStorage + 7496) != a2
    || *(float *)(DerivedStorage + 7492) != a1)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 4;
    *(float *)(DerivedStorage + 7496) = a2;
    *(_QWORD *)(DerivedStorage + 7512) = 0;
    *(_QWORD *)(DerivedStorage + 7504) = 0;
    *(_DWORD *)(DerivedStorage + 7500) = -1082130432;
    *(float *)(DerivedStorage + 7492) = a1;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t FigImageControl_ManualExposureWithISO(float a1, double a2, double a3, float a4, uint64_t a5, int a6)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a6
    || *(_DWORD *)(DerivedStorage + 7464) != 4
    || *(float *)(DerivedStorage + 7500) != a4
    || *(float *)(DerivedStorage + 7492) != a1
    || *(double *)(DerivedStorage + 7504) != a2
    || *(double *)(DerivedStorage + 7512) != a3)
  {
    *(_DWORD *)(DerivedStorage + 7464) = 4;
    *(_DWORD *)(DerivedStorage + 7496) = 0;
    *(float *)(DerivedStorage + 7500) = a4;
    *(float *)(DerivedStorage + 7492) = a1;
    *(double *)(DerivedStorage + 7504) = a2;
    *(double *)(DerivedStorage + 7512) = a3;
    *(_DWORD *)(DerivedStorage + 7520) = a6;
    *(_BYTE *)(DerivedStorage + 7456) = 0;
  }
  return 0;
}

uint64_t unlockAEnow(uint64_t a1)
{
  uint64_t DerivedStorage;
  _BYTE *v3;
  const void **v4;
  CFNumberRef v5;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v7;
  int v8;
  uint64_t result;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_BYTE *)DerivedStorage;
  v4 = (const void **)MEMORY[0x1E0C9AE50];
  if (*(_DWORD *)(DerivedStorage + 40) != 4)
  {
    result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07850], (const void *)*MEMORY[0x1E0C9AE50]);
    if (!(_DWORD)result)
      goto LABEL_18;
    fig_log_get_emitter();
LABEL_26:
    result = FigDebugAssert3();
    goto LABEL_18;
  }
  *(_BYTE *)(DerivedStorage + 17705) = 0;
  if (*(_DWORD *)(DerivedStorage + 1548))
  {
    valuePtr = 0xFFFF;
    v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07200], v5))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    CFRelease(v5);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D075F8], Mutable))
    {
      fig_log_get_emitter();
      FigDebugAssert3();
    }
    CFRelease(Mutable);
    if (!v3[1566])
    {
      v7 = CFNumberCreate(0, kCFNumberIntType, v3 + 616);
      if (captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D072D8], v7))
      {
        fig_log_get_emitter();
        FigDebugAssert3();
      }
      CFRelease(v7);
    }
    v8 = FigCapturePlatformIdentifier();
    result = FigImageControl_SetExposureStabilityZone(a1, 0, flt_1A32B2658[v8 < 10]);
  }
  else
  {
    result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07850], *v4);
    if ((_DWORD)result)
    {
      fig_log_get_emitter();
      result = FigDebugAssert3();
    }
  }
  if (!v3[1564])
  {
    result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07860], *v4);
    if ((_DWORD)result)
    {
      fig_log_get_emitter();
      goto LABEL_26;
    }
  }
LABEL_18:
  if (v3[508])
  {
    result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07868], *v4);
    if ((_DWORD)result)
    {
      fig_log_get_emitter();
      result = FigDebugAssert3();
    }
  }
  if (v3[520])
  {
    result = captureStreamSetPropertyOnActivityScheduler(a1, (const void *)*MEMORY[0x1E0D07870], *v4);
    if ((_DWORD)result)
    {
      fig_log_get_emitter();
      result = FigDebugAssert3();
    }
  }
  v3[7472] = 0;
  return result;
}

void FigImageControl_InvalidateExposure(uint64_t a1)
{
  uint64_t DerivedStorage;
  void **v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigImageControl_RestoreAEValues(a1);
  if (*(_BYTE *)(DerivedStorage + 7472))
    unlockAEnow(a1);
  v3 = *(void ***)(DerivedStorage + 7560);
  if (v3)
  {
    if (*v3)
    {
      free(*v3);
      v3 = *(void ***)(DerivedStorage + 7560);
    }
    free(v3);
    *(_QWORD *)(DerivedStorage + 7560) = 0;
  }
}

void setupExposureWindow(uint64_t a1, __int16 a2, unsigned __int16 a3, __int16 a4, __int16 a5, int a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  void *v19;
  const __CFAllocator *v20;
  CFDictionaryRef v21;
  int v22;
  int v23;
  const void *v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned __int16 v28;
  __int16 valuePtr;
  __int16 v30;
  __int16 v31;
  void *values[2];
  __int128 v33;
  CFNumberRef v34;
  void *keys[2];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 9052))
  {
    v12 = DerivedStorage;
    v13 = *(_DWORD *)(DerivedStorage + 7552);
    v30 = a5;
    v31 = a4;
    valuePtr = a2;
    v28 = a3;
    if (a2 < 0)
    {
      a4 += a2;
      v31 = a4;
      valuePtr = 0;
      a2 = 0;
    }
    if ((a3 & 0x8000) != 0)
    {
      v14 = 0;
      a5 += a3;
      v30 = a5;
      v28 = 0;
    }
    else
    {
      v14 = a3;
    }
    if (a4 + a2 >= 1001)
    {
      a4 = 1000 - a2;
      v31 = 1000 - a2;
    }
    if (a5 + v14 >= 961)
    {
      a5 = 960 - v14;
      v30 = 960 - v14;
    }
    if (v13 > a4)
    {
      v31 = v13;
      v15 = (__int16)(a2 - ((__int16)(v13 - a4 + ((unsigned __int16)((v13 - a4) & 0x8000) >> 15)) >> 1));
      v16 = v15 & ~(v15 >> 31);
      valuePtr = v16;
      if (v16 + (__int16)v13 >= 1001)
        valuePtr = 1000 - v13;
    }
    if (v13 > a5)
    {
      v30 = v13;
      v17 = (__int16)(v13 - a5 + ((unsigned __int16)((v13 - a5) & 0x8000) >> 15));
      v18 = (__int16)(v14 - (v17 >> 1)) & ~((__int16)(v14 - (v17 >> 1)) >> 31);
      v28 = v18;
      if (v18 + (__int16)v13 >= 961)
        v28 = 960 - v13;
    }
    *(_OWORD *)keys = 0u;
    v36 = 0u;
    *(_OWORD *)values = 0u;
    v33 = 0u;
    v34 = 0;
    v19 = (void *)*MEMORY[0x1E0D05B88];
    v37 = 0;
    keys[0] = v19;
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
    keys[1] = *(void **)MEMORY[0x1E0D05BB8];
    values[1] = CFNumberCreate(v20, kCFNumberSInt16Type, &v28);
    *(_QWORD *)&v36 = *MEMORY[0x1E0D05BC8];
    *(_QWORD *)&v33 = CFNumberCreate(v20, kCFNumberSInt16Type, &v31);
    *((_QWORD *)&v36 + 1) = *MEMORY[0x1E0D05B90];
    *((_QWORD *)&v33 + 1) = CFNumberCreate(v20, kCFNumberSInt16Type, &v30);
    v27 = a6 ^ 1;
    v37 = *MEMORY[0x1E0D05BC0];
    v34 = CFNumberCreate(v20, kCFNumberIntType, &v27);
    v21 = CFDictionaryCreate(v20, (const void **)keys, (const void **)values, 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = 0;
    v27 = 0;
    do
    {
      CFRelease(values[v22]);
      v23 = v27;
      v22 = ++v27;
    }
    while (v23 < 4);
    v24 = *(const void **)(v12 + 7544);
    if (v24)
      CFRelease(v24);
    *(_QWORD *)(v12 + 7544) = v21;
    v25 = (unsigned int *)(v12 + 7460);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
}

uint64_t exposure_table_initialize(uint64_t a1, CFDictionaryRef theDict)
{
  double *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFTypeID v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFTypeID v16;
  CFIndex Count;
  void *v18;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v20;
  CFTypeID v21;
  CFIndex v22;
  int v23;
  void *v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  int v38;
  CFIndex v39;
  CFIndex v40;
  uint64_t v41;
  unint64_t v43;
  CFIndex v44;
  double v45;
  double v46;
  double valuePtr;
  _DWORD v48[2];
  double v49;
  double v50;

  if (!a1 || !theDict)
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 4294954516;
  }
  *(_OWORD *)(a1 + 16) = xmmword_1A32B2690;
  v4 = (double *)(a1 + 16);
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ExposureDelta"));
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v6, kCFNumberDoubleType, v4);
      if (*v4 > 1.0)
        *v4 = 1.0 / *v4;
    }
  }
  v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("StabilityZone"));
  if (v8)
  {
    v9 = v8;
    v10 = CFGetTypeID(v8);
    if (v10 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v9, kCFNumberDoubleType, v4 + 1);
      if (v4[1] > 1.0)
        v4[1] = 1.0 / v4[1];
    }
  }
  v11 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("IntegrationTime"));
  if (!v11)
    return 4294954516;
  v12 = v11;
  v13 = CFGetTypeID(v11);
  if (v13 != CFArrayGetTypeID())
    return 4294954516;
  v14 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("MaxGain"));
  if (!v14)
    return 4294954516;
  v15 = v14;
  v16 = CFGetTypeID(v14);
  if (v16 != CFArrayGetTypeID())
    return 4294954516;
  Count = CFArrayGetCount(v12);
  if (Count != CFArrayGetCount(v15))
    return 4294954516;
  v18 = malloc_type_malloc(48 * Count, 0x1000040D315E998uLL);
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, 0);
  if (ValueAtIndex)
  {
    v20 = ValueAtIndex;
    v21 = CFGetTypeID(ValueAtIndex);
    if (v21 != CFNumberGetTypeID())
      goto LABEL_51;
    valuePtr = 0.0;
    CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
    if (valuePtr <= 0.0)
    {
      fig_log_get_emitter();
    }
    else
    {
      if (valuePtr > 1.0)
        valuePtr = 1.0 / valuePtr;
      if (Count >= 1)
      {
        v44 = Count;
        v22 = 0;
        v23 = 0;
        v43 = 2 * Count;
        do
        {
          v24 = v18;
          v45 = 0.0;
          v46 = 0.0;
          v25 = CFArrayGetValueAtIndex(v12, v22);
          if (!v25)
            goto LABEL_49;
          v26 = v25;
          v27 = CFGetTypeID(v25);
          if (v27 != CFNumberGetTypeID())
            goto LABEL_50;
          v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v15, v22);
          if (!v28)
            goto LABEL_49;
          v29 = v28;
          v30 = CFGetTypeID(v26);
          if (v30 != CFNumberGetTypeID())
            goto LABEL_50;
          CFNumberGetValue((CFNumberRef)v26, kCFNumberDoubleType, &v46);
          CFNumberGetValue(v29, kCFNumberDoubleType, &v45);
          v31 = v46;
          if (v46 > 1.0)
          {
            v31 = 1.0 / v46;
            v46 = 1.0 / v46;
          }
          v32 = valuePtr;
          if (valuePtr <= 0.0 || (v33 = v45, v45 < 1.0))
          {
LABEL_49:
            fig_log_get_emitter();
            FigDebugAssert3();
LABEL_50:
            v18 = v24;
            goto LABEL_51;
          }
          v18 = v24;
          v34 = *v4;
          if (*v4 <= 0.0 || v34 >= 1.0)
          {
            fig_log_get_emitter();
            FigDebugAssert3();
          }
          else
          {
            v48[0] = v23;
            v48[1] = 0;
            v49 = v31;
            v50 = v45;
            exposure_table_fill_metric((uint64_t)v48, valuePtr, v34);
            v35 = v50;
            while (1)
            {
              v36 = v48[0]++;
              if (v36 > 4094)
                break;
              v37 = v35;
              exposure_table_fill_metric((uint64_t)v48, v32, v34);
              v35 = v50;
              if (v50 >= v33)
              {
                if (v33 - v37 < v50 - v33)
                  v38 = v48[0] - 1;
                else
                  v38 = v48[0];
                goto LABEL_41;
              }
            }
          }
          v38 = -1;
LABEL_41:
          v39 = (CFIndex)v24 + 48 * v22;
          *(_DWORD *)v39 = v23;
          *(_DWORD *)(v39 + 4) = 0;
          *(double *)(v39 + 8) = v31;
          *(double *)(v39 + 16) = v33;
          v40 = (CFIndex)v24 + 24 * ((2 * v22) | 1);
          *(_DWORD *)v40 = v38;
          *(_DWORD *)(v40 + 4) = 0;
          *(double *)(v40 + 8) = v31;
          *(double *)(v40 + 16) = v33;
          v23 = v38 + 1;
          ++v22;
        }
        while (v22 != v44);
        if ((v38 - 4096) <= 0xFFFFF000)
          goto LABEL_44;
        v41 = 0;
        *(_QWORD *)a1 = exposure_table_create_lookup_table((uint64_t)v18, v43, *(double *)(a1 + 16));
        *(_DWORD *)(a1 + 8) = v38;
        goto LABEL_52;
      }
LABEL_44:
      fig_log_get_emitter();
    }
  }
  else
  {
    fig_log_get_emitter();
  }
  FigDebugAssert3();
LABEL_51:
  v41 = 4294954516;
  if (v18)
LABEL_52:
    free(v18);
  return v41;
}

char *exposure_table_create_lookup_table(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v3;
  int v5;
  double v7;
  char *v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  int v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;

  if (!a1 || (v3 = a2 - 1, a2 <= 1) || (v5 = *(_DWORD *)(a1 + 24 * v3), v5 <= 0))
  {
    fig_log_get_emitter();
    FigDebugAssert3();
    return 0;
  }
  v7 = *(double *)(a1 + 8);
  v8 = (char *)malloc_type_malloc(24 * v5 + 24, 0x1000040D315E998uLL);
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = (__int128 *)(a1 + 24 * v9);
    v17 = *v11;
    v18 = *((_QWORD *)v11 + 2);
    v12 = *((_DWORD *)v11 + 6);
    if (v12 < v10)
      break;
    if (v10 < v12)
    {
      v13 = &v8[24 * v10];
      v14 = v12 - (uint64_t)v10;
      do
      {
        LODWORD(v17) = v10;
        exposure_table_fill_metric((uint64_t)&v17, v7, a3);
        v15 = v17;
        *((_QWORD *)v13 + 2) = v18;
        *(_OWORD *)v13 = v15;
        v13 += 24;
        ++v10;
        --v14;
      }
      while (v14);
    }
    ++v9;
    v10 = v12;
    if (v9 == v3)
      return v8;
  }
  fig_log_get_emitter();
  FigDebugAssert3();
  if (v8)
  {
    free(v8);
    return 0;
  }
  return v8;
}

uint64_t exposure_table_fill_metric(uint64_t result, double a2, double a3)
{
  double v3;
  BOOL v4;
  int v5;
  double v6;

  if (result && a2 > 0.0 && ((v3 = 1.0, a3 > 0.0) ? (v4 = a3 < 1.0) : (v4 = 0), v4))
  {
    v5 = *(_DWORD *)result;
    if (*(int *)result >= 1)
    {
      v6 = a3 + 1.0;
      do
      {
        v3 = v6 * v3;
        --v5;
      }
      while (v5);
    }
    *(double *)(result + 16) = a2 / *(double *)(result + 8) * v3;
  }
  else
  {
    fig_log_get_emitter();
    return FigDebugAssert3();
  }
  return result;
}

const __CFString *FigCaptureQOSClassToString(uint64_t a1)
{
  if ((int)a1 > 20)
  {
    switch((_DWORD)a1)
    {
      case 0x15:
        return CFSTR("QOS_CLASS_DEFAULT");
      case 0x21:
        return CFSTR("QOS_CLASS_USER_INTERACTIVE");
      case 0x19:
        return CFSTR("QOS_CLASS_USER_INITIATED");
    }
  }
  else
  {
    switch((_DWORD)a1)
    {
      case 0:
        return CFSTR("QOS_CLASS_UNSPECIFIED");
      case 9:
        return CFSTR("QOS_CLASS_BACKGROUND");
      case 0x11:
        return CFSTR("QOS_CLASS_UTILITY");
    }
  }
  return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unknown QOS class %d"), a1);
}

__SecTask *FigCaptureClientHasPrivateCaptureEntitlement(__SecTask *result)
{
  if (result)
    return FigCaptureClientHasEntitlementWithSecTask(result, CFSTR("com.apple.private.avfoundation.capture.allow"));
  return result;
}

uint64_t FigCaptureCurrentProcessIsCameracaptured()
{
  __SecTask *v0;
  __SecTask *v1;
  __CFString *v2;
  uint64_t v3;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  v3 = -[__CFString isEqualToString:](v2, "isEqualToString:", 0x1E493D638);

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureCurrentProcessIsDeferredmediad()
{
  __SecTask *v0;
  __SecTask *v1;
  __CFString *v2;
  uint64_t v3;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  v3 = -[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("com.apple.deferredmediad"));

  CFRelease(v1);
  return v3;
}

uint64_t FigCaptureCurrentProcessIsBWCrucible()
{
  __SecTask *v0;
  __SecTask *v1;
  __CFString *v2;
  uint64_t v3;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (__CFString *)SecTaskCopySigningIdentifier(v0, 0);
  v3 = -[__CFString containsString:](v2, "containsString:", CFSTR("bwcrucible"));

  CFRelease(v1);
  return v3;
}

__SecTask *FigCaptureCurrentProcessIsXCTest()
{
  __SecTask *result;
  __SecTask *v1;
  uint64_t IsRunningInXCTestWithSecTask;

  result = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (result)
  {
    v1 = result;
    IsRunningInXCTestWithSecTask = FigCaptureClientIsRunningInXCTestWithSecTask(result);
    CFRelease(v1);
    return (__SecTask *)IsRunningInXCTestWithSecTask;
  }
  return result;
}

uint64_t FigCaptureClientIsInternalCommandLineTool(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  uint64_t IsRunningInInternalCommandLineToolWithSecTask;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  IsRunningInInternalCommandLineToolWithSecTask = FigCaptureClientIsRunningInInternalCommandLineToolWithSecTask(v3);
  CFRelease(v4);
  return IsRunningInInternalCommandLineToolWithSecTask;
}

uint64_t FigCaptureClientIsRunningInInternalCommandLineToolWithSecTask(__SecTask *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (__CFString *)SecTaskCopySigningIdentifier(a1, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", 0x1E493D478);

  return v3;
}

uint64_t FigCaptureClientIsRunningInCameraOrDerivative(_OWORD *a1)
{
  const __CFAllocator *v1;
  __int128 v2;
  __SecTask *v3;
  __SecTask *v4;
  uint64_t IsRunningInCameraOrDerivativeWithSecTask;
  audit_token_t v7;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = a1[1];
  *(_OWORD *)v7.val = *a1;
  *(_OWORD *)&v7.val[4] = v2;
  v3 = SecTaskCreateWithAuditToken(v1, &v7);
  if (!v3)
    return 0;
  v4 = v3;
  IsRunningInCameraOrDerivativeWithSecTask = FigCaptureClientIsRunningInCameraOrDerivativeWithSecTask(v3);
  CFRelease(v4);
  return IsRunningInCameraOrDerivativeWithSecTask;
}

uint64_t FigCaptureClientIsRunningInCameraOrDerivativeWithSecTask(__SecTask *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;

  if (!a1)
    return 0;
  v1 = (__CFString *)SecTaskCopySigningIdentifier(a1, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = FigCaptureClientApplicationIDIsCameraOrDerivative(v1);

  return v3;
}

uint64_t FigCaptureExternalCameraReplacesBuiltIn(_BYTE *a1)
{
  if (FigCaptureExternalCameraReplacesBuiltIn_sOnceToken != -1)
  {
    dispatch_once(&FigCaptureExternalCameraReplacesBuiltIn_sOnceToken, &__block_literal_global_72);
    if (!a1)
      return FigCaptureExternalCameraReplacesBuiltIn_sExternalReplacesBuiltIn;
    goto LABEL_3;
  }
  if (a1)
LABEL_3:
    *a1 = 0;
  return FigCaptureExternalCameraReplacesBuiltIn_sExternalReplacesBuiltIn;
}

uint64_t FigCaptureGetSupportedPrewarmingBundleIdentifiers()
{
  if (FigCaptureGetSupportedPrewarmingBundleIdentifiers_onceToken != -1)
    dispatch_once(&FigCaptureGetSupportedPrewarmingBundleIdentifiers_onceToken, &__block_literal_global_73_1);
  return FigCaptureGetSupportedPrewarmingBundleIdentifiers_bundleIdentifiers;
}

void FigCaptureInitializeSingletons()
{
  if (FigCaptureInitializeSingletons_onceToken != -1)
    dispatch_once(&FigCaptureInitializeSingletons_onceToken, &__block_literal_global_74);
}

uint64_t FigCaptureXPCServerStart(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFAllocator *v4;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v8;
  uint64_t v9;

  if (fcu_initializeTrace_sInitializeTraceOnceToken != -1)
    dispatch_once(&fcu_initializeTrace_sInitializeTraceOnceToken, &__block_literal_global_184);
  if ((FigCaptureIsDebuggerOrSlowAllocationPathEnabled() & 1) == 0)
    return FigXPCServerStart();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
  {
    Count = CFDictionaryGetCount(a3);
    MutableCopy = CFDictionaryCreateMutableCopy(v4, Count, a3);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v8 = MutableCopy;
  FigCFDictionarySetInt32();
  v9 = FigXPCServerStart();
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t FigCaptureGetFrameworkRadarComponentName()
{
  return 0;
}

void FigCapturePromptOpenTapToRadar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTimeInterval a7)
{
  uint64_t v14;
  const __CFDictionary *v15;
  CFUserNotificationRef v16;
  CFUserNotificationRef v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *global_queue;
  _QWORD block[10];
  os_log_type_t type;
  int v22;
  SInt32 error;
  _QWORD v24[3];
  _QWORD v25[5];

  v25[3] = *MEMORY[0x1E0C80C00];
  if (os_variant_has_internal_ui())
  {
    v14 = *MEMORY[0x1E0C9B838];
    v24[0] = *MEMORY[0x1E0C9B800];
    v24[1] = v14;
    error = 0;
    v25[0] = a1;
    v25[1] = CFSTR("File radar");
    v24[2] = *MEMORY[0x1E0C9B830];
    v25[2] = CFSTR("Ignore");
    v15 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 3);
    v16 = CFUserNotificationCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a7, 0, &error, v15);
    if (v16)
    {
      v17 = v16;
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __FigCapturePromptOpenTapToRadar_block_invoke;
      block[3] = &unk_1E49281C8;
      block[4] = a2;
      block[5] = a3;
      block[6] = v17;
      block[7] = a4;
      block[8] = a5;
      block[9] = a6;
      dispatch_async(global_queue, block);
    }
  }
}

uint64_t FigCaptureCameracapturedEnabled()
{
  if (FigCaptureCameracapturedEnabled_sOnceToken != -1)
    dispatch_once(&FigCaptureCameracapturedEnabled_sOnceToken, &__block_literal_global_91_0);
  return FigCaptureCameracapturedEnabled_sCameracapturedEnabled;
}

BOOL FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType(int a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;

  if (a1 == 846624121)
    return 1;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 17)
      break;
    v4 = *(_DWORD *)&FigCaptureVideoCodecTypeSpecifiesCVPixelBufferType_cvPixelFormatTypesThatAreCMVideoCodecTypes[4 * v2++ + 4];
  }
  while (v4 != a1);
  return v3 < 0x11;
}

unint64_t FigCaptureDimensionsFromDictionaryRepresentation(void *a1)
{
  unsigned int v2;

  v2 = objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("width")), "intValue");
  return v2 | (unint64_t)(objc_msgSend((id)objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("height")), "intValue") << 32);
}

uint64_t FigCaptureDictionaryRepresentationForDimensions(unint64_t a1)
{
  unint64_t v1;
  _QWORD v3[2];
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v1 = HIDWORD(a1);
  v3[0] = CFSTR("width");
  v3[1] = CFSTR("height");
  v4[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1);
  v4[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v1);
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 2);
}

uint64_t FigCaptureLargestDimensionsFromDimensionsArray(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (result)
  {
    v3 = result;
    LODWORD(v4) = 0;
    LODWORD(v5) = 0;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(a1);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        v9 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("width")), "intValue");
        v10 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("height")), "intValue");
        v11 = v5 * v4;
        if ((int)(v10 * v9) <= (int)v5 * (int)v4)
          v4 = v4;
        else
          v4 = v10;
        if ((int)(v10 * v9) <= v11)
          v5 = v5;
        else
          v5 = v9;
      }
      v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v3);
    return v5 | (v4 << 32);
  }
  return result;
}

uint64_t FigCaptureAuditTokenProcessesAreEqual(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  void *v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;

  v3 = a1[1];
  v7 = *a1;
  v8 = v3;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0D016E0], "tokenFromAuditToken:", &v7);
  v5 = a2[1];
  v7 = *a2;
  v8 = v5;
  return objc_msgSend(v4, "hasSameProcessAsAuditToken:", objc_msgSend(MEMORY[0x1E0D016E0], "tokenFromAuditToken:", &v7));
}

BOOL FigCaptureAuditTokensAreEqual(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL FigCaptureAuditTokenIsValid(uint64_t a1)
{
  __int128 v1;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_OWORD *)(a1 + 16);
  return (*(_QWORD *)a1 != v7 || *(_QWORD *)(a1 + 8) != v8 || (_QWORD)v1 != v9 || *((_QWORD *)&v1 + 1) != v10)
      && (*(_QWORD *)a1 & *(_QWORD *)(a1 + 8) & *(_QWORD *)(a1 + 16) & *(_QWORD *)(a1 + 24)) != -1;
}

uint64_t FigCaptureSceneIlluminationValueFromLuxLevel(void *a1, unsigned int a2)
{
  float v4;
  uint64_t result;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0xFFFFFFFFLL;
  objc_msgSend(a1, "floatValue");
  if (v4 < 0.0)
    return 0xFFFFFFFFLL;
  result = ((float)(v4 * 1000.0) + 0.5);
  if (a2 != -1)
    return ((double)result * 0.0980392157 + (double)a2 * 0.901960784 + 0.5);
  return result;
}

uint64_t FigCaptureIsWombatEnabled(_DWORD *a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  void *v6;
  id v7;

  if (FigCaptureAudiomxdSupportEnabled_sOnceToken != -1)
    dispatch_once(&FigCaptureAudiomxdSupportEnabled_sOnceToken, &__block_literal_global_88);
  if (!FigCaptureAudiomxdSupportEnabled_sCaptureAudiomxdSupportEnabled)
  {
    v7 = 0;
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D48568]), "initWithPID:", getpid());
    v4 = objc_msgSend(v6, "copyAttributeForKey:withValueOut:", *MEMORY[0x1E0D4A070], &v7);
    v3 = objc_msgSend(v7, "BOOLValue");

    if (!a1)
      return v3;
    goto LABEL_5;
  }
  v2 = (void *)objc_msgSend(MEMORY[0x1E0D48560], "sharedInstance");
  v3 = objc_msgSend((id)objc_msgSend(v2, "attributeForKey:", *MEMORY[0x1E0D482F0]), "BOOLValue");
  v4 = 0;
  if (a1)
LABEL_5:
    *a1 = v4;
  return v3;
}

uint64_t __fcu_initializeTrace_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t __ubp_createStateMachine_block_invoke_2_0(uint64_t a1, uint64_t a2)
{
  -[BWIntelligentDistortionCorrectionProcessorController _resetProcessor](a2);
  return -[BWIntelligentDistortionCorrectionProcessorController _serviceNextRequest](a2);
}

uint64_t __ubp_createStateMachine_block_invoke_4_0(uint64_t a1, uint64_t a2)
{
  return -[BWIntelligentDistortionCorrectionProcessorController _process](a2);
}

uint64_t __dzpc_initializeTrace_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t __dzp_createStateMachine_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return -[BWDeepZoomProcessorController _serviceNextRequest](a2);
}

uint64_t __dzp_createStateMachine_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return -[BWDeepZoomProcessorController _updateStateIfNeeded](a2);
  return result;
}

uint64_t __dzp_createStateMachine_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return -[BWDeepZoomProcessorController _process](a2);
}

uint64_t FigRemoteQueueIOSurfaceSender_ReleaseIOSurface(int a1, int a2)
{
  mach_port_name_t reply_port;
  uint64_t v4;
  uint64_t v5;
  _BYTE msg[36];
  uint64_t v8;

  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  *(_DWORD *)&msg[24] = 1;
  *(_DWORD *)&msg[28] = a2;
  v8 = 1245184;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = -2147478253;
  *(_QWORD *)&msg[16] = 0x481300000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 275, 0x28u, 0x2Cu, reply_port, 0x1F4u, 0);
  v5 = v4;
  if ((v4 - 268435458) <= 0xE && ((1 << (v4 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18551)
      {
        v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v5;
        }
      }
      else
      {
        v5 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_20;
  }
  return v5;
}

uint64_t FigRemoteQueueIOSurfaceSender_ReleaseIOSurfaces(int a1)
{
  mach_port_name_t reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v7;

  v7 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  reply_port = mig_get_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x481400000000;
  if (MEMORY[0x1E0C85B60])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3, 0x18u, 0x2Cu, reply_port, 0, 0);
  v4 = v3;
  if ((v3 - 268435458) <= 0xE && ((1 << (v3 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(*(mach_port_t *)&msg[12]);
  }
  else
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 18552)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_20:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_reply_port(*(mach_port_t *)&msg[12]);
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_20;
  }
  return v4;
}

uint64_t (*figremotequeue_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 18453) >= 0xFFFFFFFD)
    return FigRemoteQueueIOSurfaceReceiver_figremotequeue_subsystem[5 * (v1 - 18450) + 5];
  else
    return 0;
}

uint64_t _XReleaseIOSurface(uint64_t result, uint64_t a2)
{
  int v3;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 40)
  {
    v3 = -304;
LABEL_7:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_8;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_7;
  }
  result = FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurface(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28));
  *(_DWORD *)(a2 + 32) = result;
LABEL_8:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XReleaseIOSurfaces(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)FigRemoteQueueIOSurfaceReceiver_ReleaseIOSurfaces((void *)result[3]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

void FigDisplayedVitalityClassify_cold_1()
{
  __assert_rtn("fdvc_computeForestScore", "FigDisplayedVitalityClassifier.m", 167, "nFeatures == forest->nFeatures");
}

void FigDisplayedVitalityClassify_cold_2()
{
  __assert_rtn("FigDisplayedVitalityClassify", "FigDisplayedVitalityClassifier.m", 634, "[value length] >= 9 * sizeof( float)");
}

void FusionTrackerLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *FusionTrackerLibrary(void)"), CFSTR("BWFusionTrackerSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getFTCinematicTrackerClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTCinematicTrackerClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 16, CFSTR("Unable to find class %s"), "FTCinematicTracker");
  __break(1u);
}

void __getFTCinematicTapRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTCinematicTapRequestClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 17, CFSTR("Unable to find class %s"), "FTCinematicTapRequest");
  __break(1u);
}

void __getFTCinematicTapResponseClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTCinematicTapResponseClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 18, CFSTR("Unable to find class %s"), "FTCinematicTapResponse");
  __break(1u);
}

void __getFTCinematicConfigClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTCinematicConfigClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 20, CFSTR("Unable to find class %s"), "FTCinematicConfig");
  __break(1u);
}

void __getFTCinematicInputClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTCinematicInputClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 21, CFSTR("Unable to find class %s"), "FTCinematicInput");
  __break(1u);
}

void __getFTTapToBoxClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTTapToBoxClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 22, CFSTR("Unable to find class %s"), "FTTapToBox");
  __break(1u);
}

void __getFTEspressoBufferClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTEspressoBufferClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 23, CFSTR("Unable to find class %s"), "FTEspressoBuffer");
  __break(1u);
}

void __getFTMSRScalerClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTMSRScalerClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 25, CFSTR("Unable to find class %s"), "FTMSRScaler");
  __break(1u);
}

void FTCinematicHighPriorityTrackerOpDescription_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull FTCinematicHighPriorityTrackerOpDescription(FTCinematicHighPriorityTrackerOp)"), CFSTR("BWFusionTrackerSoftLinking.m"), 29, CFSTR("%s"), dlerror());
  __break(1u);
}

void getkFTInvalidTrackId_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (kFTInvalidTrackId) (*)(void))0)()) getkFTInvalidTrackId(void)"), CFSTR("BWFusionTrackerSoftLinking.m"), 31, CFSTR("%s"), dlerror());
  __break(1u);
}

void __getFTBipartiteMatcherClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getFTBipartiteMatcherClass(void)_block_invoke"), CFSTR("BWFusionTrackerSoftLinking.m"), 33, CFSTR("Unable to find class %s"), "FTBipartiteMatcher");
  __break(1u);
}

void AppleDepthLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppleDepthLibrary(void)"), CFSTR("BWAppleDepthSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getADMonocularPipelineParametersClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADMonocularPipelineParametersClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 15, CFSTR("Unable to find class %s"), "ADMonocularPipelineParameters");
  __break(1u);
}

void __getADMonocularPipelineClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADMonocularPipelineClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 16, CFSTR("Unable to find class %s"), "ADMonocularPipeline");
  __break(1u);
}

void __getADMutableJasperPointCloudClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADMutableJasperPointCloudClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 18, CFSTR("Unable to find class %s"), "ADMutableJasperPointCloud");
  __break(1u);
}

void __getADJasperPointCloudClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADJasperPointCloudClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 19, CFSTR("Unable to find class %s"), "ADJasperPointCloud");
  __break(1u);
}

void __getADCameraCalibrationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADCameraCalibrationClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 20, CFSTR("Unable to find class %s"), "ADCameraCalibration");
  __break(1u);
}

void __getADPolynomialsLensDistortionModelClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADPolynomialsLensDistortionModelClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 22, CFSTR("Unable to find class %s"), "ADPolynomialsLensDistortionModel");
  __break(1u);
}

void __getADJasperColorStillsExecutorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADJasperColorStillsExecutorClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 23, CFSTR("Unable to find class %s"), "ADJasperColorStillsExecutor");
  __break(1u);
}

void __getADJasperColorV2ExecutorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADJasperColorV2ExecutorClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 24, CFSTR("Unable to find class %s"), "ADJasperColorV2Executor");
  __break(1u);
}

void __getADStereoPipelineClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADStereoPipelineClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 27, CFSTR("Unable to find class %s"), "ADStereoPipeline");
  __break(1u);
}

void __getADStereoV2PipelineClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADStereoV2PipelineClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 28, CFSTR("Unable to find class %s"), "ADStereoV2Pipeline");
  __break(1u);
}

void __getADStereoV2PipelineParametersClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADStereoV2PipelineParametersClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 29, CFSTR("Unable to find class %s"), "ADStereoV2PipelineParameters");
  __break(1u);
}

void __getADPCEDisparityColorPipelineClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getADPCEDisparityColorPipelineClass(void)_block_invoke"), CFSTR("BWAppleDepthSoftLinking.m"), 31, CFSTR("Unable to find class %s"), "ADPCEDisparityColorPipeline");
  __break(1u);
}

void __getHDRProcessorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getHDRProcessorClass(void)_block_invoke"), CFSTR("BWPixelTransferNode.m"), 63, CFSTR("Unable to find class %s"), "HDRProcessor");
  __break(1u);
}

void HDRProcessingLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HDRProcessingLibrary(void)"), CFSTR("BWPixelTransferNode.m"), 62, CFSTR("%s"), *a1);
  __break(1u);
}

void PrivacyAccountingLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PrivacyAccountingLibrary(void)"), CFSTR("BWPrivacyAccountingSoftLinking.m"), 15, CFSTR("%s"), *a1);
  __break(1u);
}

void __getPAAccessLoggerClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPAAccessLoggerClass(void)_block_invoke"), CFSTR("BWPrivacyAccountingSoftLinking.m"), 16, CFSTR("Unable to find class %s"), "PAAccessLogger");
  __break(1u);
}

void __getPATCCAccessClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPATCCAccessClass(void)_block_invoke"), CFSTR("BWPrivacyAccountingSoftLinking.m"), 17, CFSTR("Unable to find class %s"), "PATCCAccess");
  __break(1u);
}

void __getPAApplicationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPAApplicationClass(void)_block_invoke"), CFSTR("BWPrivacyAccountingSoftLinking.m"), 19, CFSTR("Unable to find class %s"), "PAApplication");
  __break(1u);
}

void soft_PAAuthenticatedClientIdentity_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "tcc_identity_t soft_PAAuthenticatedClientIdentity(audit_token_t, tcc_identity_t)"), CFSTR("BWPrivacyAccountingSoftLinking.m"), 20, CFSTR("%s"), dlerror());
  __break(1u);
}

void DiskArbitrationLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DiskArbitrationLibrary(void)"), CFSTR("BWQuickTimeMovieFileSinkNode.m"), 102, CFSTR("%s"), *a1);
  __break(1u);
}

void VisionLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *VisionLibrary(void)"), CFSTR("BWVisionSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getVNImageRequestHandlerClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNImageRequestHandlerClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 14, CFSTR("Unable to find class %s"), "VNImageRequestHandler");
  __break(1u);
}

void __getVNSequenceRequestHandlerClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNSequenceRequestHandlerClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 15, CFSTR("Unable to find class %s"), "VNSequenceRequestHandler");
  __break(1u);
}

void __getVNProcessingDeviceClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNProcessingDeviceClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 16, CFSTR("Unable to find class %s"), "VNProcessingDevice");
  __break(1u);
}

void __getVNFaceObservationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNFaceObservationClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 17, CFSTR("Unable to find class %s"), "VNFaceObservation");
  __break(1u);
}

void __getVNDetectedObjectObservationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNDetectedObjectObservationClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 19, CFSTR("Unable to find class %s"), "VNDetectedObjectObservation");
  __break(1u);
}

void __getVNDetectFaceLandmarksRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNDetectFaceLandmarksRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 24, CFSTR("Unable to find class %s"), "VNDetectFaceLandmarksRequest");
  __break(1u);
}

void __getVNDetectFaceRectanglesRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNDetectFaceRectanglesRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 25, CFSTR("Unable to find class %s"), "VNDetectFaceRectanglesRequest");
  __break(1u);
}

void __getVNTranslationalImageRegistrationRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNTranslationalImageRegistrationRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 28, CFSTR("Unable to find class %s"), "VNTranslationalImageRegistrationRequest");
  __break(1u);
}

void __getVNClassifyImageAestheticsRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNClassifyImageAestheticsRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 30, CFSTR("Unable to find class %s"), "VNClassifyImageAestheticsRequest");
  __break(1u);
}

void __getVNGenerateAttentionBasedSaliencyImageRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNGenerateAttentionBasedSaliencyImageRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 31, CFSTR("Unable to find class %s"), "VNGenerateAttentionBasedSaliencyImageRequest");
  __break(1u);
}

void __getVNGenerateFaceSegmentsRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNGenerateFaceSegmentsRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 32, CFSTR("Unable to find class %s"), "VNGenerateFaceSegmentsRequest");
  __break(1u);
}

void __getVNClassifyJunkImageRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNClassifyJunkImageRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 33, CFSTR("Unable to find class %s"), "VNClassifyJunkImageRequest");
  __break(1u);
}

void __getVNCreateSceneprintRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNCreateSceneprintRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 34, CFSTR("Unable to find class %s"), "VNCreateSceneprintRequest");
  __break(1u);
}

void __getVN5kJNH3eYuyaLxNpZr5Z7ziClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVN5kJNH3eYuyaLxNpZr5Z7ziClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 35, CFSTR("Unable to find class %s"), "VN5kJNH3eYuyaLxNpZr5Z7zi");
  __break(1u);
}

void __getVNClassifyFaceAttributesRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNClassifyFaceAttributesRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 36, CFSTR("Unable to find class %s"), "VNClassifyFaceAttributesRequest");
  __break(1u);
}

void __getVNRecognizeFoodAndDrinkRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNRecognizeFoodAndDrinkRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 37, CFSTR("Unable to find class %s"), "VNRecognizeFoodAndDrinkRequest");
  __break(1u);
}

void __getVNTrackObjectRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNTrackObjectRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 38, CFSTR("Unable to find class %s"), "VNTrackObjectRequest");
  __break(1u);
}

void __getVNSessionClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNSessionClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 39, CFSTR("Unable to find class %s"), "VNSession");
  __break(1u);
}

void __getVNRecognizedObjectObservationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNRecognizedObjectObservationClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 41, CFSTR("Unable to find class %s"), "VNRecognizedObjectObservation");
  __break(1u);
}

void __getVNProcessingDescriptorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNProcessingDescriptorClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 42, CFSTR("Unable to find class %s"), "VNProcessingDescriptor");
  __break(1u);
}

void __getVNResourceVersionClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNResourceVersionClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 43, CFSTR("Unable to find class %s"), "VNResourceVersion");
  __break(1u);
}

void __getVNDetectHumanRectanglesRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVNDetectHumanRectanglesRequestClass(void)_block_invoke"), CFSTR("BWVisionSoftLinking.m"), 44, CFSTR("Unable to find class %s"), "VNDetectHumanRectanglesRequest");
  __break(1u);
}

void getVNInferenceNetworkIdentifierFaceprint_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VNInferenceNetworkIdentifierFaceprint) (*)(void))0)()) getVNInferenceNetworkIdentifierFaceprint(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWVisionSoftLinking.m"), 51, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getVNFaceAttributeEyesClosed_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VNFaceAttributeEyesClosed) (*)(void))0)()) getVNFaceAttributeEyesClosed(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWVisionSoftLinking.m"), 52, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void BWVNSetRequestConcurrentTasksProcessingTimeout_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void BWVNSetRequestConcurrentTasksProcessingTimeout(int64_t)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWVisionSoftLinking.m"), 53, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getVNErrorDomain_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VNErrorDomain) (*)(void))0)()) getVNErrorDomain(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWVisionSoftLinking.m"), 55, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Timestamp_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Timestamp(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 106, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Rotation_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Rotation(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 148, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Translation_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Translation(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 146, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Intrinsics_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Intrinsics(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 150, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Extrinsics_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Extrinsics(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 152, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_DepthMetaData_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_DepthMetaData(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 116, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_StructuredLightOccluded_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_StructuredLightOccluded(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 118, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_DepthSource_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_DepthSource(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWFaceTrackingNode.m"), 64, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void AppleCVALibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppleCVALibrary(void)"), CFSTR("BWFaceTrackingNode.m"), 57, CFSTR("%s"), *a1);
  __break(1u);
}

void DuetActivitySchedulerLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *DuetActivitySchedulerLibrary(void)"), CFSTR("FigCaptureCalibrationMonitor.m"), 48, CFSTR("%s"), *a1);
  __break(1u);
}

void SoundAnalysisLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SoundAnalysisLibrary(void)"), CFSTR("BWSoundAnalysisSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getSNMovieRemixClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSNMovieRemixClass(void)_block_invoke"), CFSTR("BWSoundAnalysisSoftLinking.m"), 17, CFSTR("Unable to find class %s"), "SNMovieRemix");
  __break(1u);
}

void __getSNMovieRemixRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSNMovieRemixRequestClass(void)_block_invoke"), CFSTR("BWSoundAnalysisSoftLinking.m"), 18, CFSTR("Unable to find class %s"), "SNMovieRemixRequest");
  __break(1u);
}

void MetalPerformanceShadersLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MetalPerformanceShadersLibrary(void)"), CFSTR("BWFusionTrackerInferenceAdapter.m"), 50, CFSTR("%s"), *a1);
  __break(1u);
}

void __getMPSImageStatisticsMeanClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getMPSImageStatisticsMeanClass(void)_block_invoke"), CFSTR("BWFusionTrackerInferenceAdapter.m"), 51, CFSTR("Unable to find class %s"), "MPSImageStatisticsMean");
  __break(1u);
}

void getkCVAFaceTracking_TrackedFacesArray_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_TrackedFacesArray(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 63, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_CameraColor_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_CameraColor(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 53, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Extrinsics_cold_1_0()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Extrinsics(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 55, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Rotation_cold_1_0()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Rotation(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 59, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Intrinsics_cold_1_0()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Intrinsics(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 57, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_SmoothData_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_SmoothData(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 65, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_Geometry_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_Geometry(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 67, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_GeometryLandmarks_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_GeometryLandmarks(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 69, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_GeometryVertices_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_GeometryVertices(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 71, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getkCVAFaceTracking_DetectedFaceRect_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef getkCVAFaceTracking_DetectedFaceRect(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWSampleBufferUtilities.m"), 73, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void AppleCVALibrary_cold_1_0(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppleCVALibrary(void)"), CFSTR("BWSampleBufferUtilities.m"), 50, CFSTR("%s"), *a1);
  __break(1u);
}

void __getICAccessManagerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ImageCaptureCoreLibrary(void)"), CFSTR("FigExternalStorageDeviceManagerServer.m"), 28, CFSTR("%s"), *a1);
  __break(1u);
}

void __getICAccessManagerClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICAccessManagerClass(void)_block_invoke"), CFSTR("FigExternalStorageDeviceManagerServer.m"), 29, CFSTR("Unable to find class %s"), "ICAccessManager");
  __break(1u);
}

void __getPLSimpleDCIMDirectoryClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PhotoLibraryServicesCoreLibrary(void)"), CFSTR("FigExternalStorageDeviceManager.m"), 33, CFSTR("%s"), *a1);
  __break(1u);
}

void __getPLSimpleDCIMDirectoryClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPLSimpleDCIMDirectoryClass(void)_block_invoke"), CFSTR("FigExternalStorageDeviceManager.m"), 34, CFSTR("Unable to find class %s"), "PLSimpleDCIMDirectory");
  __break(1u);
}

void __getICCameraDeviceClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ImageCaptureCoreLibrary(void)"), CFSTR("FigExternalStorageDeviceManager.m"), 38, CFSTR("%s"), *a1);
  __break(1u);
}

void __getICCameraDeviceClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getICCameraDeviceClass(void)_block_invoke"), CFSTR("FigExternalStorageDeviceManager.m"), 39, CFSTR("Unable to find class %s"), "ICCameraDevice");
  __break(1u);
}

void FigCaptureBinaryPlistInitialize_cold_1()
{
  __assert_rtn("FigCaptureBinaryPlistInitialize", "FigCaptureBinaryPlist.c", 371, "strncmp( data, \"bplist00\", 8) == 0");
}

void FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject_cold_1()
{
  __assert_rtn("FigCaptureBinaryPlistGetOffsetForObjectAtIndexInObject", "FigCaptureBinaryPlist.c", 518, "subObjIndex < objCount");
}

void FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_1()
{
  __assert_rtn("FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject", "FigCaptureBinaryPlist.c", 534, "subObjIndex < objCount");
}

void FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject_cold_2()
{
  __assert_rtn("FigCaptureBinaryPlistGetOffsetForValueAtIndexInObject", "FigCaptureBinaryPlist.c", 527, "( objHeader & 0xF0) == PlistObjectType_Dict");
}

void __getBMStreamsClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMStreamsClass(void)_block_invoke"), CFSTR("FigCaptureSession.m"), 177, CFSTR("Unable to find class %s"), "BMStreams");
  __break(1u);
}

void BiomeStreamsLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeStreamsLibrary(void)"), CFSTR("FigCaptureSession.m"), 175, CFSTR("%s"), *a1);
  __break(1u);
}

void __getBMDiscoverabilitySignalEventClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMDiscoverabilitySignalEventClass(void)_block_invoke"), CFSTR("FigCaptureSession.m"), 176, CFSTR("Unable to find class %s"), "BMDiscoverabilitySignalEvent");
  __break(1u);
}

void setupFocusWindowMatrix_cold_1()
{
  __assert_rtn("setupFocusWindowMatrix", "FigSampleBufferProcessor_ImageControl_Focus.m", 465, "n <= FOCUS_RECT_COUNT");
}

void FigImageControl_Focus_cold_1()
{
  __assert_rtn("updateMatrixFocusState", "FigSampleBufferProcessor_ImageControl_Focus.m", 1281, "!(err && scanHistory)");
}

void ColorsWheelContext_create_cold_1()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 83, "rangeBC >= 0");
}

void ColorsWheelContext_create_cold_2()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 84, "rangeCG >= 0");
}

void ColorsWheelContext_create_cold_3()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 85, "rangeGY >= 0");
}

void ColorsWheelContext_create_cold_4()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 86, "rangeYR >= 0");
}

void ColorsWheelContext_create_cold_5()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 87, "rangeRM >= 0");
}

void ColorsWheelContext_create_cold_6()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 88, "rangeMB >= 0");
}

void ColorsWheelContext_create_cold_7()
{
  __assert_rtn("createColorsWheel_", "FigColorsWheel.c", 100, "count > 0");
}

void ColorsWheelContext_create_cold_8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_0("setColorsWheelComponent_", "FigColorsWheel.c", a3, "(k >= 0) && (k < ColorsWheelContext_countColorsTransitions(ctx))");
}

void ColorsWheelContext_computeColorComponent_cold_1()
{
  __assert_rtn("ColorsWheelContext_computeColorComponent", "FigColorsWheel.c", 159, "(v >= 0.f) && (v <= 1.f)");
}

void __getBMCameraCaptureAutoFocusROIClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBMCameraCaptureAutoFocusROIClass(void)_block_invoke"), CFSTR("BWCoreAnalyticsReporter.m"), 28, CFSTR("Unable to find class %s"), "BMCameraCaptureAutoFocusROI");
  __break(1u);
}

void BiomeLibraryLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiomeLibraryLibrary(void)"), CFSTR("BWCoreAnalyticsReporter.m"), 27, CFSTR("%s"), *a1);
  __break(1u);
}

void PortraitLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PortraitLibrary(void)"), CFSTR("BWPortraitSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getPTEffectClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTEffectClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 15, CFSTR("Unable to find class %s"), "PTEffect");
  __break(1u);
}

void __getPTEffectDescriptorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTEffectDescriptorClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 16, CFSTR("Unable to find class %s"), "PTEffectDescriptor");
  __break(1u);
}

void __getPTTextureClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTTextureClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 18, CFSTR("Unable to find class %s"), "PTTexture");
  __break(1u);
}

void __getPTRenderPipelineClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTRenderPipelineClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 19, CFSTR("Unable to find class %s"), "PTRenderPipeline");
  __break(1u);
}

void __getPTRenderRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTRenderRequestClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 20, CFSTR("Unable to find class %s"), "PTRenderRequest");
  __break(1u);
}

void __getPTRenderPipelineDescriptorClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTRenderPipelineDescriptorClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 21, CFSTR("Unable to find class %s"), "PTRenderPipelineDescriptor");
  __break(1u);
}

void __getPTTuningParametersClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTTuningParametersClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 22, CFSTR("Unable to find class %s"), "PTTuningParameters");
  __break(1u);
}

void __getPTCinematographyStreamClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTCinematographyStreamClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 26, CFSTR("Unable to find class %s"), "PTCinematographyStream");
  __break(1u);
}

void __getPTCinematographyStreamOptionsClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTCinematographyStreamOptionsClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 27, CFSTR("Unable to find class %s"), "PTCinematographyStreamOptions");
  __break(1u);
}

void __getPTCinematographyRefinementClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTCinematographyRefinementClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 28, CFSTR("Unable to find class %s"), "PTCinematographyRefinement");
  __break(1u);
}

void getPTCinematographyExcludeAsCinematicChoice_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (PTCinematographyExcludeAsCinematicChoice) (*)(void))0)()) getPTCinematographyExcludeAsCinematicChoice(void)"), CFSTR("BWPortraitSoftLinking.m"), 29, CFSTR("%s"), dlerror());
  __break(1u);
}

void __getPTGlobalCinematographyMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalCinematographyMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 32, CFSTR("Unable to find class %s"), "PTGlobalCinematographyMetadataVersion1");
  __break(1u);
}

void __getPTGlobalRenderingMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalRenderingMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 33, CFSTR("Unable to find class %s"), "PTGlobalRenderingMetadataVersion1");
  __break(1u);
}

void __getPTGlobalRenderingMetadataVersion2Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalRenderingMetadataVersion2Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 34, CFSTR("Unable to find class %s"), "PTGlobalRenderingMetadataVersion2");
  __break(1u);
}

void __getPTGlobalStabilizationMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalStabilizationMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 35, CFSTR("Unable to find class %s"), "PTGlobalStabilizationMetadataVersion1");
  __break(1u);
}

void __getPTGlobalVideoHeaderMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalVideoHeaderMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 36, CFSTR("Unable to find class %s"), "PTGlobalVideoHeaderMetadataVersion1");
  __break(1u);
}

void __getPTGlobalVideoMetadataClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTGlobalVideoMetadataClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 37, CFSTR("Unable to find class %s"), "PTGlobalVideoMetadata");
  __break(1u);
}

void __getPTTimedRenderingMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTTimedRenderingMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 38, CFSTR("Unable to find class %s"), "PTTimedRenderingMetadataVersion1");
  __break(1u);
}

void __getPTTimedRenderingMetadataVersion2Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTTimedRenderingMetadataVersion2Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 39, CFSTR("Unable to find class %s"), "PTTimedRenderingMetadataVersion2");
  __break(1u);
}

void __getPTTimedStabilizationMetadataVersion1Class_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTTimedStabilizationMetadataVersion1Class(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 40, CFSTR("Unable to find class %s"), "PTTimedStabilizationMetadataVersion1");
  __break(1u);
}

void __getPTSerializationClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTSerializationClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 41, CFSTR("Unable to find class %s"), "PTSerialization");
  __break(1u);
}

void __getPTDisparityPostProcessingClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTDisparityPostProcessingClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 43, CFSTR("Unable to find class %s"), "PTDisparityPostProcessing");
  __break(1u);
}

void __getPTEffectRenderRequestClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTEffectRenderRequestClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 46, CFSTR("Unable to find class %s"), "PTEffectRenderRequest");
  __break(1u);
}

void __getPTEffectReactionClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPTEffectReactionClass(void)_block_invoke"), CFSTR("BWPortraitSoftLinking.m"), 47, CFSTR("Unable to find class %s"), "PTEffectReaction");
  __break(1u);
}

void __getBrightnessSystemClientClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreBrightnessLibrary(void)"), CFSTR("BWAmbientLightSensor.m"), 17, CFSTR("%s"), *a1);
  __break(1u);
}

void __getBrightnessSystemClientClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBrightnessSystemClientClass(void)_block_invoke"), CFSTR("BWAmbientLightSensor.m"), 18, CFSTR("Unable to find class %s"), "BrightnessSystemClient");
  __break(1u);
}

void __getSTActivityAttributionClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTActivityAttributionClass(void)_block_invoke"), CFSTR("BWCameraStreamingMonitor.m"), 51, CFSTR("Unable to find class %s"), "STActivityAttribution");
  __break(1u);
}

void SystemStatusLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SystemStatusLibrary(void)"), CFSTR("BWCameraStreamingMonitor.m"), 48, CFSTR("%s"), *a1);
  __break(1u);
}

void __getSTMediaStatusDomainPublisherClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTMediaStatusDomainPublisherClass(void)_block_invoke"), CFSTR("BWCameraStreamingMonitor.m"), 49, CFSTR("Unable to find class %s"), "STMediaStatusDomainPublisher");
  __break(1u);
}

void __getSTDynamicActivityAttributionPublisherClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTDynamicActivityAttributionPublisherClass(void)_block_invoke"), CFSTR("BWCameraStreamingMonitor.m"), 55, CFSTR("Unable to find class %s"), "STDynamicActivityAttributionPublisher");
  __break(1u);
}

void __getSTExecutableIdentityClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTExecutableIdentityClass(void)_block_invoke"), CFSTR("BWCameraStreamingMonitor.m"), 57, CFSTR("Unable to find class %s"), "STExecutableIdentity");
  __break(1u);
}

void __getSTAttributedEntityClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSTAttributedEntityClass(void)_block_invoke"), CFSTR("BWCameraStreamingMonitor.m"), 53, CFSTR("Unable to find class %s"), "STAttributedEntity");
  __break(1u);
}

void AppleCVALibrary_cold_1_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *AppleCVALibrary(void)"), CFSTR("BWSingleCameraPortraitSceneMonitor.m"), 24, CFSTR("%s"), *a1);
  __break(1u);
}

void gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs_cold_1()
{
  __assert_rtn("gr_addRetainCountsOfOutputsWithSharedPoolsForAttachedMediaToParentNodeOutputs", "BWGraph.m", 2172, "parentOutputWithPool");
}

void gr_findParentOutputOfOutputWithSharedPool_cold_1()
{
  __assert_rtn("gr_findParentOutputOfOutputWithSharedPool", "BWGraph.m", 2242, "currentOutput");
}

void gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_1()
{
  __assert_rtn("gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia", "BWGraph.m", 2198, "parentOutputWithPool");
}

void gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_2()
{
  __assert_rtn("gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia", "BWGraph.m", 2200, "parentOutputWithPoolMediaProperties");
}

void gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia_cold_3()
{
  __assert_rtn("gr_propagatePreparedPoolsToSharedPoolOutputsForAttachedMedia", "BWGraph.m", 2208, "outputWithSharedPoolMediaProperties");
}

void __getReportMemoryExceptionFromTaskSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *libMemoryResourceExceptionLibrary(void)"), CFSTR("FigCaptureMemoryReporter.m"), 34, CFSTR("%s"), *a1);
  __break(1u);
}

void rqReceiverFinalize_cold_1()
{
  __assert_rtn("rqReceiverFinalize", "FigRemoteQueue.c", 1297, "recver->source == NULL");
}

void rqReceiverFinalize_cold_2()
{
  __assert_rtn("rqReceiverFinalize", "FigRemoteQueue.c", 1296, "recver->handler == NULL");
}

void __getACCConnectionInfoClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getACCConnectionInfoClass(void)_block_invoke"), CFSTR("BWFigCaptureAttachedAccessoriesMonitor.m"), 28, CFSTR("Unable to find class %s"), "ACCConnectionInfo");
  __break(1u);
}

void CoreAccessoriesLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreAccessoriesLibrary(void)"), CFSTR("BWFigCaptureAttachedAccessoriesMonitor.m"), 26, CFSTR("%s"), *a1);
  __break(1u);
}

void MediaAnalysisLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *MediaAnalysisLibrary(void)"), CFSTR("BWMediaAnalysisSoftLinking.m"), 13, CFSTR("%s"), *a1);
  __break(1u);
}

void __getVCPCaptureAnalysisSessionClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getVCPCaptureAnalysisSessionClass(void)_block_invoke"), CFSTR("BWMediaAnalysisSoftLinking.m"), 15, CFSTR("Unable to find class %s"), "VCPCaptureAnalysisSession");
  __break(1u);
}

void getVCPCaptureAnalysisDispatchQueuePropertyKey_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VCPCaptureAnalysisDispatchQueuePropertyKey) (*)(void))0)()) getVCPCaptureAnalysisDispatchQueuePropertyKey(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWMediaAnalysisSoftLinking.m"), 17, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getVCPCaptureAnalysisSubjectMotionScoreKey_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VCPCaptureAnalysisSubjectMotionScoreKey) (*)(void))0)()) getVCPCaptureAnalysisSubjectMotionScoreKey(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWMediaAnalysisSoftLinking.m"), 18, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void getVCPCaptureAnalysisMotionDivScoreKey_cold_1()
{
  uint64_t v0;
  void *v1;

  v1 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "typeof (((typeof (VCPCaptureAnalysisMotionDivScoreKey) (*)(void))0)()) getVCPCaptureAnalysisMotionDivScoreKey(void)");
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("BWMediaAnalysisSoftLinking.m"), 19, CFSTR("%s"), OUTLINED_FUNCTION_0());
  __break(1u);
}

void __getCCSControlCenterServiceClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCCSControlCenterServiceClass(void)_block_invoke"), CFSTR("FigCaptureSource.m"), 85, CFSTR("Unable to find class %s"), "CCSControlCenterService");
  __break(1u);
}

void ControlCenterServicesLibrary_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ControlCenterServicesLibrary(void)"), CFSTR("FigCaptureSource.m"), 84, CFSTR("%s"), *a1);
  __break(1u);
}

void __getCCSModulePresentationOptionsClass_block_invoke_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCCSModulePresentationOptionsClass(void)_block_invoke"), CFSTR("FigCaptureSource.m"), 87, CFSTR("Unable to find class %s"), "CCSModulePresentationOptions");
  __break(1u);
}

void cs_sendNotificationOfNewTransientValue_cold_1()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL soft_showReactionsTip(NSString *, NSString *)"), CFSTR("FigCaptureSource.m"), 102, CFSTR("%s"), dlerror());
  __break(1u);
}

void __getshowReactionsTipSymbolLoc_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *ReplayKitLibrary(void)"), CFSTR("FigCaptureSource.m"), 101, CFSTR("%s"), *a1);
  __break(1u);
}

void __getCMIOExtensionProviderClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreMediaIOLibrary(void)"), CFSTR("FigCaptureSource.m"), 109, CFSTR("%s"), *a1);
  __break(1u);
}

void __getCMIOExtensionProviderClass_block_invoke_cold_2()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getCMIOExtensionProviderClass(void)_block_invoke"), CFSTR("FigCaptureSource.m"), 110, CFSTR("Unable to find class %s"), "CMIOExtensionProvider");
  __break(1u);
  ADClientAddValueForScalarKey();
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1E0CF63A0]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1E0CF63C0]();
}

uint64_t ADClientSetValueForScalarKey()
{
  return MEMORY[0x1E0CF63D8]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AppC3DConfigCreate()
{
  return MEMORY[0x1E0CF8760]();
}

uint64_t AppC3DConfigRelease()
{
  return MEMORY[0x1E0CF8768]();
}

uint64_t AppC3DConfigSetMaxNumberCodesToTrack()
{
  return MEMORY[0x1E0CF8778]();
}

uint64_t AppC3DConfigSetTrackingMode()
{
  return MEMORY[0x1E0CF8788]();
}

uint64_t AppC3DCreate()
{
  return MEMORY[0x1E0CF8790]();
}

uint64_t AppC3DFlush()
{
  return MEMORY[0x1E0CF8798]();
}

uint64_t AppC3DProcessCameraFrameData()
{
  return MEMORY[0x1E0CF87A8]();
}

uint64_t AppC3DRelease()
{
  return MEMORY[0x1E0CF87B0]();
}

uint64_t AppC3DSetUpdateCallback()
{
  return MEMORY[0x1E0CF87C0]();
}

uint64_t AppC3DTrackingResultCreateCorners()
{
  return MEMORY[0x1E0CF87D0]();
}

uint64_t AppC3DTrackingResultCreateData()
{
  return MEMORY[0x1E0CF87D8]();
}

uint64_t AppC3DTrackingResultGetDataVersion()
{
  return MEMORY[0x1E0CF87E8]();
}

uint64_t AppC3DTrackingResultGetMetadata()
{
  return MEMORY[0x1E0CF87F8]();
}

uint64_t AppC3DTrackingResultGetNumberOfTrackingData()
{
  return MEMORY[0x1E0CF8800]();
}

AudioComponent AudioComponentFindNext(AudioComponent inComponent, const AudioComponentDescription *inDesc)
{
  return (AudioComponent)MEMORY[0x1E0C91E78](inComponent, inDesc);
}

OSStatus AudioComponentInstanceDispose(AudioComponentInstance inInstance)
{
  return MEMORY[0x1E0C91E88](inInstance);
}

OSStatus AudioComponentInstanceNew(AudioComponent inComponent, AudioComponentInstance *outInstance)
{
  return MEMORY[0x1E0C91E90](inComponent, outInstance);
}

UInt64 AudioConvertHostTimeToNanos(UInt64 inHostTime)
{
  return MEMORY[0x1E0C97550](inHostTime);
}

UInt64 AudioConvertNanosToHostTime(UInt64 inNanos)
{
  return MEMORY[0x1E0C97558](inNanos);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0C91FC8](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

UInt64 AudioGetCurrentHostTime(void)
{
  return MEMORY[0x1E0C975B0]();
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x1E0C975D0](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

OSStatus AudioOutputUnitStart(AudioUnit ci)
{
  return MEMORY[0x1E0C91FE0](ci);
}

OSStatus AudioOutputUnitStop(AudioUnit ci)
{
  return MEMORY[0x1E0C91FE8](ci);
}

uint64_t AudioSessionCopyCMSessionForSessionID()
{
  return MEMORY[0x1E0C92190]();
}

uint64_t AudioSessionGetPrimaryAudioSessionIDForAuditToken()
{
  return MEMORY[0x1E0C921A8]();
}

uint64_t AudioSessionSetCMProperty()
{
  return MEMORY[0x1E0C921C0]();
}

OSStatus AudioUnitGetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, void *outData, UInt32 *ioDataSize)
{
  return MEMORY[0x1E0C921E0](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outData, ioDataSize);
}

OSStatus AudioUnitGetPropertyInfo(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, UInt32 *outDataSize, Boolean *outWritable)
{
  return MEMORY[0x1E0C921E8](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, outDataSize, outWritable);
}

OSStatus AudioUnitInitialize(AudioUnit inUnit)
{
  return MEMORY[0x1E0C921F0](inUnit);
}

OSStatus AudioUnitRender(AudioUnit inUnit, AudioUnitRenderActionFlags *ioActionFlags, const AudioTimeStamp *inTimeStamp, UInt32 inOutputBusNumber, UInt32 inNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1E0C92208](inUnit, ioActionFlags, inTimeStamp, *(_QWORD *)&inOutputBusNumber, *(_QWORD *)&inNumberFrames, ioData);
}

OSStatus AudioUnitSetProperty(AudioUnit inUnit, AudioUnitPropertyID inID, AudioUnitScope inScope, AudioUnitElement inElement, const void *inData, UInt32 inDataSize)
{
  return MEMORY[0x1E0C92220](inUnit, *(_QWORD *)&inID, *(_QWORD *)&inScope, *(_QWORD *)&inElement, inData, *(_QWORD *)&inDataSize);
}

OSStatus AudioUnitUninitialize(AudioUnit inUnit)
{
  return MEMORY[0x1E0C92228](inUnit);
}

uint64_t BSBundleIDForPID()
{
  return MEMORY[0x1E0D01110]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

uint64_t CAImageQueueCollect()
{
  return MEMORY[0x1E0CD23E8]();
}

uint64_t CAImageQueueConsumeUnconsumedInRange()
{
  return MEMORY[0x1E0CD23F0]();
}

uint64_t CAImageQueueGetFlags()
{
  return MEMORY[0x1E0CD2428]();
}

uint64_t CAImageQueueGetReleasedImageInfo()
{
  return MEMORY[0x1E0CD2448]();
}

uint64_t CAImageQueueGetTimes()
{
  return MEMORY[0x1E0CD2450]();
}

uint64_t CAImageQueueInsertImageWithRotation()
{
  return MEMORY[0x1E0CD2480]();
}

uint64_t CAImageQueueRegisterIOSurfaceBuffer()
{
  return MEMORY[0x1E0CD24A0]();
}

uint64_t CAImageQueueSetEnhancementMode()
{
  return MEMORY[0x1E0CD24A8]();
}

uint64_t CAImageQueueSetFlags()
{
  return MEMORY[0x1E0CD24B0]();
}

uint64_t CAImageQueueUnregisterBuffer()
{
  return MEMORY[0x1E0CD24D0]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFAllocatorGetContext(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  MEMORY[0x1E0C97CB8](allocator, context);
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CC0]();
}

void *__cdecl CFAllocatorReallocate(CFAllocatorRef allocator, void *ptr, CFIndex newsize, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97CD8](allocator, ptr, newsize, hint);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0C98180](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983C0](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
  MEMORY[0x1E0C985D8](theDict);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyFailureReason(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98638](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1E0C98720](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98858](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDistributedCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988C8]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98A58](keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A88](keysToSet, keysToRemove, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1E0C995A0](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995E8](userNotification, responseFlags, timeout);
}

SInt32 CFUserNotificationUpdate(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags flags, CFDictionaryRef dictionary)
{
  return MEMORY[0x1E0C995F0](userNotification, flags, dictionary, timeout);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

uint64_t CGBitmapContextSetData()
{
  return MEMORY[0x1E0C9BB88]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  return (CFDataRef)MEMORY[0x1E0C9BD98](space);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateWithColorSyncProfile(ColorSyncProfileRef a1, CFDictionaryRef options)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE38](a1, options);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextResetClip(CGContextRef c)
{
  MEMORY[0x1E0C9C360](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  MEMORY[0x1E0C9C4C0](c, color, (__n128)offset, *(__n128 *)&offset.height, blur);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C0]();
}

BOOL CGImageMetadataRegisterNamespaceForPrefix(CGMutableImageMetadataRef metadata, CFStringRef xmlns, CFStringRef prefix, CFErrorRef *err)
{
  return MEMORY[0x1E0CBC408](metadata, xmlns, prefix, err);
}

BOOL CGImageMetadataSetTagWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CGImageMetadataTagRef tag)
{
  return MEMORY[0x1E0CBC418](metadata, parent, path, tag);
}

CGImageMetadataTagRef CGImageMetadataTagCreate(CFStringRef xmlns, CFStringRef prefix, CFStringRef name, CGImageMetadataType type, CFTypeRef value)
{
  return (CGImageMetadataTagRef)MEMORY[0x1E0CBC450](xmlns, prefix, name, *(_QWORD *)&type, value);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D528]((__n128)point, *(__n128 *)&point.y);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1E0C9D530](dict, point);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D808]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1E0C9D818](dict, size);
}

OSStatus CMAudioClockCreate(CFAllocatorRef allocator, CMClockRef *clockOut)
{
  return MEMORY[0x1E0C9EA50](allocator, clockOut);
}

OSStatus CMAudioDeviceClockCreate(CFAllocatorRef allocator, CFStringRef deviceUID, CMClockRef *clockOut)
{
  return MEMORY[0x1E0C9EA58](allocator, deviceUID, clockOut);
}

OSStatus CMAudioDeviceClockGetAudioDevice(CMClockRef clock, CFStringRef *deviceUIDOut, AudioDeviceID *deviceIDOut, Boolean *trackingDefaultDeviceOut)
{
  return MEMORY[0x1E0C9EA68](clock, deviceUIDOut, deviceIDOut, trackingDefaultDeviceOut);
}

OSStatus CMAudioDeviceClockSetAudioDeviceUID(CMClockRef clock, CFStringRef deviceUID)
{
  return MEMORY[0x1E0C9EA70](clock, deviceUID);
}

OSStatus CMAudioFormatDescriptionCreate(CFAllocatorRef allocator, const AudioStreamBasicDescription *asbd, size_t layoutSize, const AudioChannelLayout *layout, size_t magicCookieSize, const void *magicCookie, CFDictionaryRef extensions, CMAudioFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EA80](allocator, asbd, layoutSize, layout, magicCookieSize, magicCookie, extensions, formatDescriptionOut);
}

const AudioChannelLayout *__cdecl CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioChannelLayout *)MEMORY[0x1E0C9EAA0](desc, sizeOut);
}

const AudioStreamBasicDescription *__cdecl CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef desc)
{
  return (const AudioStreamBasicDescription *)MEMORY[0x1E0C9EAD8](desc);
}

uint64_t CMBaseClassGetCFTypeID()
{
  return MEMORY[0x1E0C9EAF8]();
}

uint64_t CMBaseGetClassID()
{
  return MEMORY[0x1E0C9EB00]();
}

uint64_t CMBaseObjectGetDerivedStorage()
{
  return MEMORY[0x1E0C9EB10]();
}

uint64_t CMBaseObjectGetVTable()
{
  return MEMORY[0x1E0C9EB28]();
}

OSStatus CMBlockBufferCreateContiguous(CFAllocatorRef structureAllocator, CMBlockBufferRef sourceBuffer, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB70](structureAllocator, sourceBuffer, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags, blockBufferOut);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EB98](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFTypeID CMBlockBufferGetTypeID(void)
{
  return MEMORY[0x1E0C9EBB0]();
}

Boolean CMBlockBufferIsRangeContiguous(CMBlockBufferRef theBuffer, size_t offset, size_t length)
{
  return MEMORY[0x1E0C9EBC0](theBuffer, offset, length);
}

uint64_t CMByteStreamCreateForFileURL()
{
  return MEMORY[0x1E0C9ED08]();
}

uint64_t CMClockConvertHostTimeToSystemUnits(CMTime *hostTime)
{
  return MEMORY[0x1E0C9ED30](hostTime);
}

CMClockRef CMClockGetHostTimeClock(void)
{
  return (CMClockRef)MEMORY[0x1E0C9ED40]();
}

CMTime *__cdecl CMClockGetTime(CMTime *__return_ptr retstr, CMClockRef clock)
{
  return (CMTime *)MEMORY[0x1E0C9ED48](retstr, clock);
}

CFDictionaryRef CMCopyDictionaryOfAttachments(CFAllocatorRef allocator, CMAttachmentBearerRef target, CMAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9ED80](allocator, target, *(_QWORD *)&attachmentMode);
}

uint64_t CMDerivedObjectCreate()
{
  return MEMORY[0x1E0C9ED90]();
}

OSStatus CMFormatDescriptionCreate(CFAllocatorRef allocator, CMMediaType mediaType, FourCharCode mediaSubType, CFDictionaryRef extensions, CMFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EDB0](allocator, *(_QWORD *)&mediaType, *(_QWORD *)&mediaSubType, extensions, formatDescriptionOut);
}

Boolean CMFormatDescriptionEqual(CMFormatDescriptionRef formatDescription, CMFormatDescriptionRef otherFormatDescription)
{
  return MEMORY[0x1E0C9EDB8](formatDescription, otherFormatDescription);
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9EDC8](desc, extensionKey);
}

CFDictionaryRef CMFormatDescriptionGetExtensions(CMFormatDescriptionRef desc)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9EDD0](desc);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDD8](desc);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDE0](desc);
}

CFTypeRef CMGetAttachment(CMAttachmentBearerRef target, CFStringRef key, CMAttachmentMode *attachmentModeOut)
{
  return (CFTypeRef)MEMORY[0x1E0C9EE00](target, key, attachmentModeOut);
}

uint64_t CMIGetPixelFormatInfo()
{
  return MEMORY[0x1E0D08900]();
}

uint64_t CMILSCOISAdaptation_convertV2LSCTableToV1LSCTable()
{
  return MEMORY[0x1E0D08908]();
}

uint64_t CMIOExtensionPropertyFromPropertyAddress()
{
  return MEMORY[0x1E0CA5500]();
}

OSStatus CMMetadataDataTypeRegistryRegisterDataType(CFStringRef dataType, CFStringRef description, CFArrayRef conformingDataTypes)
{
  return MEMORY[0x1E0C9EE60](dataType, description, conformingDataTypes);
}

OSStatus CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(CFAllocatorRef allocator, CMMetadataFormatDescriptionRef metadataFormatDescription, CMMetadataDescriptionFlavor flavor, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EE68](allocator, metadataFormatDescription, flavor, blockBufferOut);
}

OSStatus CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(CFAllocatorRef allocator, CMMetadataFormatDescriptionRef sourceDescription, CMMetadataFormatDescriptionRef otherSourceDescription, CMMetadataFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EE70](allocator, sourceDescription, otherSourceDescription, formatDescriptionOut);
}

OSStatus CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(CFAllocatorRef allocator, CMBlockBufferRef metadataDescriptionBlockBuffer, CMMetadataDescriptionFlavor flavor, CMMetadataFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EE78](allocator, metadataDescriptionBlockBuffer, flavor, formatDescriptionOut);
}

OSStatus CMMetadataFormatDescriptionCreateWithMetadataSpecifications(CFAllocatorRef allocator, CMMetadataFormatType metadataType, CFArrayRef metadataSpecifications, CMMetadataFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EE90](allocator, *(_QWORD *)&metadataType, metadataSpecifications, formatDescriptionOut);
}

CFArrayRef CMMetadataFormatDescriptionGetIdentifiers(CMMetadataFormatDescriptionRef desc)
{
  return (CFArrayRef)MEMORY[0x1E0C9EE98](desc);
}

uint64_t CMNotificationCenterAddListener()
{
  return MEMORY[0x1E0C9EEB8]();
}

uint64_t CMNotificationCenterGetDefaultLocalCenter()
{
  return MEMORY[0x1E0C9EEC8]();
}

uint64_t CMNotificationCenterPostNotification()
{
  return MEMORY[0x1E0C9EED0]();
}

uint64_t CMNotificationCenterRemoveListener()
{
  return MEMORY[0x1E0C9EEE8]();
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage()
{
  return MEMORY[0x1E0D08B98]();
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageAsync()
{
  return MEMORY[0x1E0D08BA0]();
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImageMetadata()
{
  return MEMORY[0x1E0D08BB0]();
}

uint64_t CMPhotoCompressionSessionAddCustomMetadata()
{
  return MEMORY[0x1E0D08BC8]();
}

uint64_t CMPhotoCompressionSessionAddGroup()
{
  return MEMORY[0x1E0D08BE0]();
}

uint64_t CMPhotoCompressionSessionAddGroupProperties()
{
  return MEMORY[0x1E0D08BE8]();
}

uint64_t CMPhotoCompressionSessionAddImage()
{
  return MEMORY[0x1E0D08BF0]();
}

uint64_t CMPhotoCompressionSessionAddImageAsync()
{
  return MEMORY[0x1E0D08BF8]();
}

uint64_t CMPhotoCompressionSessionAddImageHandleToGroup()
{
  return MEMORY[0x1E0D08C00]();
}

uint64_t CMPhotoCompressionSessionAddMetadataFromImageProperties()
{
  return MEMORY[0x1E0D08C10]();
}

uint64_t CMPhotoCompressionSessionAddThumbnail()
{
  return MEMORY[0x1E0D08C18]();
}

uint64_t CMPhotoCompressionSessionAddThumbnailAsync()
{
  return MEMORY[0x1E0D08C20]();
}

uint64_t CMPhotoCompressionSessionCloseContainer()
{
  return MEMORY[0x1E0D08C30]();
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x1E0D08C38]();
}

uint64_t CMPhotoCompressionSessionCreate()
{
  return MEMORY[0x1E0D08C40]();
}

uint64_t CMPhotoCompressionSessionFlushCachedBuffers()
{
  return MEMORY[0x1E0D08C58]();
}

uint64_t CMPhotoCompressionSessionInvalidate()
{
  return MEMORY[0x1E0D08C68]();
}

uint64_t CMPhotoCompressionSessionIsContainerOpen()
{
  return MEMORY[0x1E0D08C70]();
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x1E0D08C78]();
}

uint64_t CMPhotoCompressionSessionOpenExistingContainer()
{
  return MEMORY[0x1E0D08C80]();
}

uint64_t CMPhotoCompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1E0D08C98]();
}

uint64_t CMPhotoDNGCompressorAddAuxiliaryImage()
{
  return MEMORY[0x1E0D08CD8]();
}

uint64_t CMPhotoDNGCompressorCreate()
{
  return MEMORY[0x1E0D08CE0]();
}

uint64_t CMPhotoDNGCompressorFinalizeAndCreateData()
{
  return MEMORY[0x1E0D08CF8]();
}

uint64_t CMPhotoDNGCompressorFinalizeAndCreateSurface()
{
  return MEMORY[0x1E0D08D00]();
}

uint64_t CMPhotoDNGCompressorGetFinalizedSize()
{
  return MEMORY[0x1E0D08D08]();
}

uint64_t CMPhotoDNGCompressorSetCompressedPreviewImage()
{
  return MEMORY[0x1E0D08D30]();
}

uint64_t CMPhotoDNGCompressorSetMainImage()
{
  return MEMORY[0x1E0D08D38]();
}

uint64_t CMPhotoDNGCompressorSetPreviewImage()
{
  return MEMORY[0x1E0D08D40]();
}

uint64_t CMPhotoDNGGetLightSourceTagFromTemp()
{
  return MEMORY[0x1E0D08D80]();
}

uint64_t CMPhotoDNGVersionFromPropertiesAndOptions()
{
  return MEMORY[0x1E0D08D90]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1E0D08E58]();
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForImageIndex()
{
  return MEMORY[0x1E0D08E68]();
}

uint64_t CMPhotoDecompressionContainerGetImageCount()
{
  return MEMORY[0x1E0D08F20]();
}

uint64_t CMPhotoDecompressionContainerGetPrimaryItemIndexWithOptions()
{
  return MEMORY[0x1E0D08F48]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1E0D08FE0]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1E0D08FE8]();
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers()
{
  return MEMORY[0x1E0D09000]();
}

uint64_t CMPhotoDecompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1E0D09010]();
}

uint64_t CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize()
{
  return MEMORY[0x1E0D09090]();
}

uint64_t CMPhotoScaleAndRotateSessionCreate()
{
  return MEMORY[0x1E0D091C8]();
}

uint64_t CMPhotoScaleAndRotateSessionTransformForMaxSideLength()
{
  return MEMORY[0x1E0D091E0]();
}

uint64_t CMPhotoSurfacePoolCreate()
{
  return MEMORY[0x1E0D09208]();
}

uint64_t CMPhotoSurfacePoolDiscardCaches()
{
  return MEMORY[0x1E0D09238]();
}

void CMPropagateAttachments(CMAttachmentBearerRef source, CMAttachmentBearerRef destination)
{
  MEMORY[0x1E0C9EF08](source, destination);
}

void CMRemoveAllAttachments(CMAttachmentBearerRef target)
{
  MEMORY[0x1E0C9EF10](target);
}

void CMRemoveAttachment(CMAttachmentBearerRef target, CFStringRef key)
{
  MEMORY[0x1E0C9EF18](target, key);
}

OSStatus CMSampleBufferCopyPCMDataIntoAudioBufferList(CMSampleBufferRef sbuf, int32_t frameOffset, int32_t numFrames, AudioBufferList *bufferList)
{
  return MEMORY[0x1E0C9EF30](sbuf, *(_QWORD *)&frameOffset, *(_QWORD *)&numFrames, bufferList);
}

OSStatus CMSampleBufferCopySampleBufferForRange(CFAllocatorRef allocator, CMSampleBufferRef sbuf, CFRange sampleRange, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF38](allocator, sbuf, sampleRange.location, sampleRange.length, sampleBufferOut);
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF40](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

OSStatus CMSampleBufferCreateCopy(CFAllocatorRef allocator, CMSampleBufferRef sbuf, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF48](allocator, sbuf, sampleBufferOut);
}

OSStatus CMSampleBufferCreateCopyWithNewTiming(CFAllocatorRef allocator, CMSampleBufferRef originalSBuf, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF50](allocator, originalSBuf, numSampleTimingEntries, sampleTimingArray, sampleBufferOut);
}

OSStatus CMSampleBufferCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMVideoFormatDescriptionRef formatDescription, const CMSampleTimingInfo *sampleTiming, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF58](allocator, imageBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, sampleTiming, sampleBufferOut);
}

uint64_t CMSampleBufferCreateReadyForCVDataBuffer()
{
  return MEMORY[0x1E0C9EF78]();
}

OSStatus CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(CMSampleBufferRef sbuf, size_t *bufferListSizeNeededOut, AudioBufferList *bufferListOut, size_t bufferListSize, CFAllocatorRef blockBufferStructureAllocator, CFAllocatorRef blockBufferBlockAllocator, uint32_t flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EF98](sbuf, bufferListSizeNeededOut, bufferListOut, bufferListSize, blockBufferStructureAllocator, blockBufferBlockAllocator, *(_QWORD *)&flags, blockBufferOut);
}

CMBlockBufferRef CMSampleBufferGetDataBuffer(CMSampleBufferRef sbuf)
{
  return (CMBlockBufferRef)MEMORY[0x1E0C9EFB0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetDecodeTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC0](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC8](retstr, sbuf);
}

CMFormatDescriptionRef CMSampleBufferGetFormatDescription(CMSampleBufferRef sbuf)
{
  return (CMFormatDescriptionRef)MEMORY[0x1E0C9EFD0](sbuf);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1E0C9EFD8](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9EFE0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF0](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF8](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9F008](retstr, sbuf);
}

OSStatus CMSampleBufferGetSampleSizeArray(CMSampleBufferRef sbuf, CMItemCount sizeArrayEntries, size_t *sizeArrayOut, CMItemCount *sizeArrayEntriesNeededOut)
{
  return MEMORY[0x1E0C9F020](sbuf, sizeArrayEntries, sizeArrayOut, sizeArrayEntriesNeededOut);
}

OSStatus CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef sbuf, CMItemIndex sampleIndex, CMSampleTimingInfo *timingInfoOut)
{
  return MEMORY[0x1E0C9F028](sbuf, sampleIndex, timingInfoOut);
}

OSStatus CMSampleBufferGetSampleTimingInfoArray(CMSampleBufferRef sbuf, CMItemCount numSampleTimingEntries, CMSampleTimingInfo *timingArrayOut, CMItemCount *timingArrayEntriesNeededOut)
{
  return MEMORY[0x1E0C9F030](sbuf, numSampleTimingEntries, timingArrayOut, timingArrayEntriesNeededOut);
}

CFTypeID CMSampleBufferGetTypeID(void)
{
  return MEMORY[0x1E0C9F048]();
}

uint64_t CMSessionBeginInterruption()
{
  return MEMORY[0x1E0D48318]();
}

uint64_t CMSessionCopyProperty()
{
  return MEMORY[0x1E0D48328]();
}

uint64_t CMSessionCreate()
{
  return MEMORY[0x1E0D48338]();
}

uint64_t CMSessionEndInterruption()
{
  return MEMORY[0x1E0D48348]();
}

uint64_t CMSessionGetNotificationCenter()
{
  return MEMORY[0x1E0D48360]();
}

uint64_t CMSessionSetProperty()
{
  return MEMORY[0x1E0D483B8]();
}

void CMSetAttachment(CMAttachmentBearerRef target, CFStringRef key, CFTypeRef value, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0C8](target, key, value, *(_QWORD *)&attachmentMode);
}

void CMSetAttachments(CMAttachmentBearerRef target, CFDictionaryRef theAttachments, CMAttachmentMode attachmentMode)
{
  MEMORY[0x1E0C9F0D0](target, theAttachments, *(_QWORD *)&attachmentMode);
}

OSStatus CMSimpleQueueCreate(CFAllocatorRef allocator, int32_t capacity, CMSimpleQueueRef *queueOut)
{
  return MEMORY[0x1E0C9F0E0](allocator, *(_QWORD *)&capacity, queueOut);
}

const void *__cdecl CMSimpleQueueDequeue(CMSimpleQueueRef queue)
{
  return (const void *)MEMORY[0x1E0C9F0E8](queue);
}

OSStatus CMSimpleQueueEnqueue(CMSimpleQueueRef queue, const void *element)
{
  return MEMORY[0x1E0C9F0F0](queue, element);
}

int32_t CMSimpleQueueGetCapacity(CMSimpleQueueRef queue)
{
  return MEMORY[0x1E0C9F0F8](queue);
}

int32_t CMSimpleQueueGetCount(CMSimpleQueueRef queue)
{
  return MEMORY[0x1E0C9F100](queue);
}

const void *__cdecl CMSimpleQueueGetHead(CMSimpleQueueRef queue)
{
  return (const void *)MEMORY[0x1E0C9F108](queue);
}

OSStatus CMSimpleQueueReset(CMSimpleQueueRef queue)
{
  return MEMORY[0x1E0C9F118](queue);
}

CMTime *__cdecl CMSyncConvertTime(CMTime *__return_ptr retstr, CMTime *time, CMClockOrTimebaseRef fromClockOrTimebase, CMClockOrTimebaseRef toClockOrTimebase)
{
  return (CMTime *)MEMORY[0x1E0C9F130](retstr, time, fromClockOrTimebase, toClockOrTimebase);
}

Float64 CMSyncGetRelativeRate(CMClockOrTimebaseRef ofClockOrTimebase, CMClockOrTimebaseRef relativeToClockOrTimebase)
{
  Float64 result;

  MEMORY[0x1E0C9F138](ofClockOrTimebase, relativeToClockOrTimebase);
  return result;
}

OSStatus CMTagCollectionCreate(CFAllocatorRef allocator, const CMTag *tags, CMItemCount tagCount, CMTagCollectionRef *newCollectionOut)
{
  return MEMORY[0x1E0C9F178](allocator, tags, tagCount, newCollectionOut);
}

CMTag CMTagMakeWithSInt64Value(CMTagCategory category, int64_t value)
{
  uint64_t v2;
  CMTagValue v3;
  CMTag result;

  v2 = MEMORY[0x1E0C9F210](*(_QWORD *)&category, value);
  result.value = v3;
  result.category = v2;
  result.dataType = HIDWORD(v2);
  return result;
}

OSStatus CMTaggedBufferGroupCreate(CFAllocatorRef allocator, CFArrayRef tagCollections, CFArrayRef buffers, CMTaggedBufferGroupRef *groupOut)
{
  return MEMORY[0x1E0C9F218](allocator, tagCollections, buffers, groupOut);
}

CMTime *__cdecl CMTimeAbsoluteValue(CMTime *__return_ptr retstr, CMTime *time)
{
  return (CMTime *)MEMORY[0x1E0C9F290](retstr, time);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CMTime *__cdecl CMTimeConvertScale(CMTime *__return_ptr retstr, CMTime *time, int32_t newTimescale, CMTimeRoundingMethod method)
{
  return (CMTime *)MEMORY[0x1E0C9F2E0](retstr, time, *(_QWORD *)&newTimescale, *(_QWORD *)&method);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

CFStringRef CMTimeCopyDescription(CFAllocatorRef allocator, CMTime *time)
{
  return (CFStringRef)MEMORY[0x1E0C9F2F8](allocator, time);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMaximum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x1E0C9F370](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMinimum(CMTime *__return_ptr retstr, CMTime *time1, CMTime *time2)
{
  return (CMTime *)MEMORY[0x1E0C9F378](retstr, time1, time2);
}

CMTime *__cdecl CMTimeMultiply(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F380](retstr, time, *(_QWORD *)&multiplier);
}

CMTime *__cdecl CMTimeMultiplyByFloat64(CMTime *__return_ptr retstr, CMTime *time, Float64 multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F388](retstr, time, multiplier);
}

CMTime *__cdecl CMTimeMultiplyByRatio(CMTime *__return_ptr retstr, CMTime *time, int32_t multiplier, int32_t divisor)
{
  return (CMTime *)MEMORY[0x1E0C9F390](retstr, time, *(_QWORD *)&multiplier, *(_QWORD *)&divisor);
}

Boolean CMTimeRangeContainsTime(CMTimeRange *range, CMTime *time)
{
  return MEMORY[0x1E0C9F3A0](range, time);
}

Boolean CMTimeRangeContainsTimeRange(CMTimeRange *range, CMTimeRange *otherRange)
{
  return MEMORY[0x1E0C9F3A8](range, otherRange);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F3B0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3C8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F3D0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3F0](retstr, dictionaryRepresentation);
}

uint64_t CMTimeRemainder()
{
  return MEMORY[0x1E0C9F3F8]();
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

OSStatus CMVideoFormatDescriptionCreate(CFAllocatorRef allocator, CMVideoCodecType codecType, int32_t width, int32_t height, CFDictionaryRef extensions, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F520](allocator, *(_QWORD *)&codecType, *(_QWORD *)&width, *(_QWORD *)&height, extensions, formatDescriptionOut);
}

OSStatus CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef allocator, CVImageBufferRef imageBuffer, CMVideoFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9F528](allocator, imageBuffer, formatDescriptionOut);
}

CMVideoDimensions CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef videoDesc)
{
  return (CMVideoDimensions)MEMORY[0x1E0C9F558](videoDesc);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8908](buffer, *(_QWORD *)&attachmentMode);
}

Boolean CVBufferHasAttachment(CVBufferRef buffer, CFStringRef key)
{
  return MEMORY[0x1E0CA8920](buffer, key);
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  MEMORY[0x1E0CA8928](sourceBuffer, destinationBuffer);
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  MEMORY[0x1E0CA8940](buffer, key);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8958](buffer, theAttachments, *(_QWORD *)&attachmentMode);
}

uint64_t CVDataBufferGetDataFormatType()
{
  return MEMORY[0x1E0CA8980]();
}

uint64_t CVDataBufferGetDataSize()
{
  return MEMORY[0x1E0CA8988]();
}

uint64_t CVDataBufferGetIOSurface()
{
  return MEMORY[0x1E0CA8990]();
}

uint64_t CVDataBufferGetTypeID()
{
  return MEMORY[0x1E0CA89A0]();
}

uint64_t CVDataBufferPoolCreate()
{
  return MEMORY[0x1E0CA89A8]();
}

uint64_t CVDataBufferPoolCreateDataBuffer()
{
  return MEMORY[0x1E0CA89B0]();
}

uint64_t CVDataBufferPoolPrefetchPages()
{
  return MEMORY[0x1E0CA89B8]();
}

uint64_t CVDataBufferPoolScanIOSurfacesWithOptions()
{
  return MEMORY[0x1E0CA89C0]();
}

uint64_t CVDataBufferPoolSetMinBufferCount()
{
  return MEMORY[0x1E0CA89C8]();
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  return (CGColorSpaceRef)MEMORY[0x1E0CA89D0](attachments);
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  double v1;
  double v2;
  CGSize result;

  MEMORY[0x1E0CA89F0](imageBuffer);
  result.height = v2;
  result.width = v1;
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  MEMORY[0x1E0CA8A40](textureCache, options);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

uint64_t CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane()
{
  return MEMORY[0x1E0CA8A88]();
}

CFDictionaryRef CVPixelBufferCopyCreationAttributes(CVPixelBufferRef pixelBuffer)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8A90](pixelBuffer);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AC0](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

uint64_t CVPixelBufferGetAttributes()
{
  return MEMORY[0x1E0CA8AD8]();
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  MEMORY[0x1E0CA8B10](pixelBuffer, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, extraRowsOnBottom);
}

uint64_t CVPixelBufferGetFixedPointFractionalBits()
{
  return MEMORY[0x1E0CA8B18]();
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1E0CA8B48]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x1E0CA8B78](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

CVReturn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CFDictionaryRef auxAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B88](allocator, pixelBufferPool, auxAttributes, pixelBufferOut);
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8BA8](pool);
}

uint64_t CVPixelBufferPoolPreAllocate()
{
  return MEMORY[0x1E0CA8BB8]();
}

uint64_t CVPixelBufferPoolPrefetchPages()
{
  return MEMORY[0x1E0CA8BC0]();
}

uint64_t CVPixelBufferPoolScanIOSurfacesWithOptions()
{
  return MEMORY[0x1E0CA8BD8]();
}

uint64_t CVPixelBufferPoolSetMinBufferCount()
{
  return MEMORY[0x1E0CA8BE8]();
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA8C08](allocator, *(_QWORD *)&pixelFormat);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x1E0CA8C10]();
}

uint64_t CVPixelFormatDescriptionGetPixelFormatTypes()
{
  return MEMORY[0x1E0CA8C18]();
}

uint64_t ColorSyncProfileCreateCopyWithFlexGTC()
{
  return MEMORY[0x1E0C95478]();
}

ColorSyncProfileRef ColorSyncProfileCreateWithName(CFStringRef name)
{
  return (ColorSyncProfileRef)MEMORY[0x1E0C95498](name);
}

uint64_t CopyPixelBuffer()
{
  return MEMORY[0x1E0D08A48]();
}

uint64_t CreatePixelBuffer()
{
  return MEMORY[0x1E0D08A50]();
}

uint64_t CreateSampleBuffer()
{
  return MEMORY[0x1E0D08A58]();
}

uint64_t DMIsMigrationNeeded()
{
  return MEMORY[0x1E0D1CFA0]();
}

uint64_t DMPerformMigrationIfNeeded()
{
  return MEMORY[0x1E0D1CFB8]();
}

uint64_t FPSupport_CopyCAContext()
{
  return MEMORY[0x1E0CC2598]();
}

uint64_t FPSupport_DeleteCASlot()
{
  return MEMORY[0x1E0CC25B0]();
}

uint64_t FPSupport_EnsureCAImageQueue()
{
  return MEMORY[0x1E0CC25B8]();
}

uint64_t FigActivitySchedulerCreateForNewThread()
{
  return MEMORY[0x1E0CC2610]();
}

uint64_t FigAssetReaderCreateWithURLAndFormatReader()
{
  return MEMORY[0x1E0CC2740]();
}

uint64_t FigAssetReaderGetFigBaseObject()
{
  return MEMORY[0x1E0CC2748]();
}

uint64_t FigAssetWriterCreateWithURL()
{
  return MEMORY[0x1E0CC2798]();
}

uint64_t FigAssetWriterGetFigBaseObject()
{
  return MEMORY[0x1E0CC27A0]();
}

uint64_t FigAtomicAdd32()
{
  return MEMORY[0x1E0C9F798]();
}

uint64_t FigAtomicDecrement32()
{
  return MEMORY[0x1E0C9F7C0]();
}

uint64_t FigAtomicIncrement32()
{
  return MEMORY[0x1E0C9F7C8]();
}

uint64_t FigAudioDeviceClockRemoteCreateForServerObject()
{
  return MEMORY[0x1E0C9F7E0]();
}

uint64_t FigAudioDeviceClockServer_MakeWrapperForClockWithManualCommandPortSendRightInsertion()
{
  return MEMORY[0x1E0C9F7F0]();
}

uint64_t FigAudioDeviceClockSetIgnoresBluetoothPresentationTimeSupport()
{
  return MEMORY[0x1E0C9F7F8]();
}

uint64_t FigAudioFileFormatWriterCreateWithByteStream()
{
  return MEMORY[0x1E0CC27C8]();
}

uint64_t FigAudioSessionClockCreateForAVAudioSession()
{
  return MEMORY[0x1E0CC27D0]();
}

uint64_t FigBaseClassRegisterClass()
{
  return MEMORY[0x1E0C9F868]();
}

uint64_t FigBoxedMetadataAppendCFTypedValue()
{
  return MEMORY[0x1E0C9F888]();
}

uint64_t FigBoxedMetadataAppendValue()
{
  return MEMORY[0x1E0C9F8B8]();
}

uint64_t FigBoxedMetadataCreateForConstruction()
{
  return MEMORY[0x1E0C9F8C8]();
}

uint64_t FigBoxedMetadataEndConstruction()
{
  return MEMORY[0x1E0C9F8D8]();
}

uint64_t FigBoxedMetadataGetBlockBuffer()
{
  return MEMORY[0x1E0C9F8E0]();
}

uint64_t FigCFArrayContainsValue()
{
  return MEMORY[0x1E0C9FA58]();
}

uint64_t FigCFArrayGetCGRectAtIndex()
{
  return MEMORY[0x1E0C9FAA0]();
}

uint64_t FigCFArrayGetFloatAtIndex()
{
  return MEMORY[0x1E0C9FAD0]();
}

uint64_t FigCFArrayGetIntAtIndex()
{
  return MEMORY[0x1E0C9FAF0]();
}

uint64_t FigCFDictionaryAddEntriesToDictionaryWithRecursion()
{
  return MEMORY[0x1E0C9FB50]();
}

uint64_t FigCFDictionaryCreateMutableCopy()
{
  return MEMORY[0x1E0C9FB80]();
}

uint64_t FigCFDictionaryGetBooleanIfPresent()
{
  return MEMORY[0x1E0C9FB98]();
}

uint64_t FigCFDictionaryGetBooleanValue()
{
  return MEMORY[0x1E0C9FBA0]();
}

uint64_t FigCFDictionaryGetCGFloatIfPresent()
{
  return MEMORY[0x1E0C9FBB0]();
}

uint64_t FigCFDictionaryGetCGRectIfPresent()
{
  return MEMORY[0x1E0C9FBB8]();
}

uint64_t FigCFDictionaryGetDoubleIfPresent()
{
  return MEMORY[0x1E0C9FBF0]();
}

uint64_t FigCFDictionaryGetFloat32IfPresent()
{
  return MEMORY[0x1E0C9FBF8]();
}

uint64_t FigCFDictionaryGetFloatIfPresent()
{
  return MEMORY[0x1E0C9FC00]();
}

uint64_t FigCFDictionaryGetInt16IfPresent()
{
  return MEMORY[0x1E0C9FC08]();
}

uint64_t FigCFDictionaryGetInt32IfPresent()
{
  return MEMORY[0x1E0C9FC10]();
}

uint64_t FigCFDictionaryGetInt64IfPresent()
{
  return MEMORY[0x1E0C9FC18]();
}

uint64_t FigCFDictionaryGetIntIfPresent()
{
  return MEMORY[0x1E0C9FC20]();
}

uint64_t FigCFDictionaryGetValue()
{
  return MEMORY[0x1E0C9FC48]();
}

uint64_t FigCFDictionaryGetValueIfPresent()
{
  return MEMORY[0x1E0C9FC58]();
}

uint64_t FigCFDictionarySetCGFloat()
{
  return MEMORY[0x1E0C9FC88]();
}

uint64_t FigCFDictionarySetCGRect()
{
  return MEMORY[0x1E0C9FC90]();
}

uint64_t FigCFDictionarySetDouble()
{
  return MEMORY[0x1E0C9FCB0]();
}

uint64_t FigCFDictionarySetFloat()
{
  return MEMORY[0x1E0C9FCB8]();
}

uint64_t FigCFDictionarySetInt32()
{
  return MEMORY[0x1E0C9FCD8]();
}

uint64_t FigCFDictionarySetValue()
{
  return MEMORY[0x1E0C9FD00]();
}

uint64_t FigCFEqual()
{
  return MEMORY[0x1E0C9FD10]();
}

uint64_t FigCFNumberCreateUInt32()
{
  return MEMORY[0x1E0C9FD68]();
}

uint64_t FigCFNumberGetSInt32()
{
  return MEMORY[0x1E0C9FD90]();
}

uint64_t FigCFNumberGetSInt64()
{
  return MEMORY[0x1E0C9FD98]();
}

uint64_t FigCFNumberGetUInt64()
{
  return MEMORY[0x1E0C9FDB0]();
}

uint64_t FigCFWeakReferenceHolderCopyReferencedObject()
{
  return MEMORY[0x1E0C9FEB8]();
}

uint64_t FigCFWeakReferenceHolderCreateWithReferencedObject()
{
  return MEMORY[0x1E0C9FEC0]();
}

uint64_t FigCaptureComputeImageGainFromMetadata()
{
  return MEMORY[0x1E0D05498]();
}

uint64_t FigCaptureStreamFocusingMethodIsContrastBased()
{
  return MEMORY[0x1E0D054A8]();
}

uint64_t FigCaptureStreamFocusingMethodIsPhaseDetectionBased()
{
  return MEMORY[0x1E0D054B0]();
}

uint64_t FigConditionVariableBroadcast()
{
  return MEMORY[0x1E0CA0188]();
}

uint64_t FigConditionVariableCreate()
{
  return MEMORY[0x1E0CA0190]();
}

uint64_t FigConditionVariableDestroy()
{
  return MEMORY[0x1E0CA0198]();
}

uint64_t FigConditionVariableWaitRelative()
{
  return MEMORY[0x1E0CA01A0]();
}

uint64_t FigConsolidateMovieFragments()
{
  return MEMORY[0x1E0CC2918]();
}

uint64_t FigCreateIOSurfaceBackedCVPixelBufferWithAttributes()
{
  return MEMORY[0x1E0CEC8D0]();
}

uint64_t FigCreatePixelBufferAttributesWithIOSurfaceSupport()
{
  return MEMORY[0x1E0CEC8E0]();
}

uint64_t FigDebugAssert3()
{
  return MEMORY[0x1E0CA04E0]();
}

uint64_t FigDebugIsInternalBuild()
{
  return MEMORY[0x1E0CA04F0]();
}

uint64_t FigDispatchQueueCreateStandardDispatchQueue()
{
  return MEMORY[0x1E0CA05A8]();
}

uint64_t FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority()
{
  return MEMORY[0x1E0CA05B0]();
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1E0CA05C0]();
}

uint64_t FigDisplayModes_ExtractDimensionsFromTimingMode()
{
  return MEMORY[0x1E0CC2A10]();
}

uint64_t FigDisplayModes_LookupTimingModeIDByIndex()
{
  return MEMORY[0x1E0CC2A18]();
}

uint64_t FigEndpointGetCMBaseObject()
{
  return MEMORY[0x1E0CA0680]();
}

uint64_t FigEndpointManagerForCameraPreviewGetShared()
{
  return MEMORY[0x1E0CC2A28]();
}

uint64_t FigEndpointManagerGetCMBaseObject()
{
  return MEMORY[0x1E0CA06A8]();
}

uint64_t FigEndpointStreamGetCMBaseObject()
{
  return MEMORY[0x1E0CA0788]();
}

uint64_t FigFileDoesFileExist()
{
  return MEMORY[0x1E0CA0870]();
}

uint64_t FigFileIsFileOnExternalStorageDevice()
{
  return MEMORY[0x1E0CA08C8]();
}

uint64_t FigFloat16ConvertToFloat32()
{
  return MEMORY[0x1E0CA0908]();
}

uint64_t FigFloat32ConvertToFloat16()
{
  return MEMORY[0x1E0CA0910]();
}

uint64_t FigFormatReaderCreateForStream()
{
  return MEMORY[0x1E0CC2A88]();
}

uint64_t FigFormatWriterGetFigBaseObject()
{
  return MEMORY[0x1E0CC2AB0]();
}

uint64_t FigGetAlignmentForIOSurfaceOutput()
{
  return MEMORY[0x1E0CEC8F0]();
}

uint64_t FigGetCFPreferenceBooleanWithDefault()
{
  return MEMORY[0x1E0CA0A58]();
}

uint64_t FigGetCFPreferenceDoubleWithDefault()
{
  return MEMORY[0x1E0CA0A60]();
}

uint64_t FigGetCFPreferenceNumberWithDefault()
{
  return MEMORY[0x1E0CA0A70]();
}

uint64_t FigGetContinuousUpTimeNanoseconds()
{
  return MEMORY[0x1E0CA0A98]();
}

uint64_t FigGetUpTime()
{
  return MEMORY[0x1E0CA0AE0]();
}

uint64_t FigGetUpTimeNanoseconds()
{
  return MEMORY[0x1E0CA0AE8]();
}

uint64_t FigHostTimeToNanoseconds()
{
  return MEMORY[0x1E0CA0CD8]();
}

uint64_t FigIsItOKToLogURLs()
{
  return MEMORY[0x1E0CA0D60]();
}

uint64_t FigLogBacktrace()
{
  return MEMORY[0x1E0CA0D98]();
}

uint64_t FigMachPortReleaseReceiveRight_()
{
  return MEMORY[0x1E0CA0DA0]();
}

uint64_t FigMachPortReleaseSendRight_()
{
  return MEMORY[0x1E0CA0DA8]();
}

uint64_t FigMemoryBarrier()
{
  return MEMORY[0x1E0CA0DD0]();
}

uint64_t FigMetadataCopyTrackQuickTimeMetadata()
{
  return MEMORY[0x1E0CC2B88]();
}

uint64_t FigMetadataCopyTrackQuickTimeUserdata()
{
  return MEMORY[0x1E0CC2B90]();
}

uint64_t FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors()
{
  return MEMORY[0x1E0CA0E88]();
}

uint64_t FigMetadataRewriterDictionaryCreateFromFigMetadataPropertyArray()
{
  return MEMORY[0x1E0CC2BD0]();
}

uint64_t FigMetadataWriterGetFigBaseObject()
{
  return MEMORY[0x1E0CC2BE0]();
}

uint64_t FigMovieFormatWriterCreateWithByteStream()
{
  return MEMORY[0x1E0CC2C00]();
}

uint64_t FigMutableMovieCreateWithURL()
{
  return MEMORY[0x1E0CC2C20]();
}

uint64_t FigMutableMovieGetFigBaseObject()
{
  return MEMORY[0x1E0CC2C28]();
}

uint64_t FigNanosecondsToHostTime()
{
  return MEMORY[0x1E0CA0EF8]();
}

uint64_t FigNote_AllowInternalDefaultLogs()
{
  return MEMORY[0x1E0CA0F80]();
}

uint64_t FigNotificationCenterAddWeakListener()
{
  return MEMORY[0x1E0CA0FC0]();
}

uint64_t FigNotificationCenterRemoveWeakListener()
{
  return MEMORY[0x1E0CA0FD8]();
}

uint64_t FigOSTransactionCopyDescriptions()
{
  return MEMORY[0x1E0CA1020]();
}

uint64_t FigOSTransactionCreate()
{
  return MEMORY[0x1E0CA1028]();
}

uint64_t FigReentrantMutexCreate()
{
  return MEMORY[0x1E0CA11D0]();
}

uint64_t FigReentrantMutexDestroy()
{
  return MEMORY[0x1E0CA11D8]();
}

uint64_t FigReentrantMutexLock()
{
  return MEMORY[0x1E0CA11E0]();
}

uint64_t FigReentrantMutexUnlock()
{
  return MEMORY[0x1E0CA11F0]();
}

uint64_t FigRemote_CreateFormatDescriptionFromSerializedDictionary()
{
  return MEMORY[0x1E0CA1280]();
}

uint64_t FigRemote_CreateSampleBufferFromSerializedAtomBlockBufferAndSurface()
{
  return MEMORY[0x1E0CA12B0]();
}

uint64_t FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer()
{
  return MEMORY[0x1E0CA12C8]();
}

uint64_t FigRemote_CreateSerializableDictionaryForFormatDescription()
{
  return MEMORY[0x1E0CA12D0]();
}

uint64_t FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer()
{
  return MEMORY[0x1E0CA12E0]();
}

uint64_t FigRemote_CreateSerializedAtomDataBlockBufferForSampleBuffer()
{
  return MEMORY[0x1E0CA1308]();
}

uint64_t FigRemote_GetServerTimeoutToken()
{
  return MEMORY[0x1E0CA1350]();
}

uint64_t FigRewriteMetadata()
{
  return MEMORY[0x1E0CC2F98]();
}

uint64_t FigSampleBufferProcessorAcquireHardware()
{
  return MEMORY[0x1E0CC2FD8]();
}

uint64_t FigSampleBufferProcessorCreateForCustom()
{
  return MEMORY[0x1E0CC2FE0]();
}

uint64_t FigSampleBufferProcessorCreateWithAudioCompression()
{
  return MEMORY[0x1E0CC2FE8]();
}

uint64_t FigSampleBufferProcessorGetClassID()
{
  return MEMORY[0x1E0CC2FF0]();
}

uint64_t FigSampleBufferProcessorGetFigBaseObject()
{
  return MEMORY[0x1E0CC2FF8]();
}

uint64_t FigSampleBufferProcessorRelinquishHardware()
{
  return MEMORY[0x1E0CC3000]();
}

uint64_t FigSandboxRegisterURLWithProcess()
{
  return MEMORY[0x1E0CA1488]();
}

uint64_t FigSemaphoreCreate()
{
  return MEMORY[0x1E0CA14C8]();
}

uint64_t FigSemaphoreDestroy()
{
  return MEMORY[0x1E0CA14D0]();
}

uint64_t FigSemaphoreWaitRelative()
{
  return MEMORY[0x1E0CA14E0]();
}

uint64_t FigServer_IsWritableFileOpeningOrCreationPermittedForAuditToken()
{
  return MEMORY[0x1E0CA1540]();
}

uint64_t FigSignalErrorAt()
{
  return MEMORY[0x1E0CA1550]();
}

uint64_t FigSimpleMutexCheckIsLockedOnThisThread()
{
  return MEMORY[0x1E0CA1560]();
}

uint64_t FigSimpleMutexCheckIsNotLockedOnThisThread()
{
  return MEMORY[0x1E0CA1568]();
}

uint64_t FigSimpleMutexCreate()
{
  return MEMORY[0x1E0CA1570]();
}

uint64_t FigSimpleMutexDestroy()
{
  return MEMORY[0x1E0CA1578]();
}

uint64_t FigSimpleMutexLock()
{
  return MEMORY[0x1E0CA1580]();
}

uint64_t FigSimpleMutexUnlock()
{
  return MEMORY[0x1E0CA1590]();
}

uint64_t FigSimpleQueueRelease()
{
  return MEMORY[0x1E0CA1598]();
}

uint64_t FigSimpleQueueSetQueueIsFullErrorLoggingEnabled()
{
  return MEMORY[0x1E0CA15A0]();
}

uint64_t FigThreadGetMachThreadPriorityValue()
{
  return MEMORY[0x1E0CA17E0]();
}

uint64_t FigThreadRunOnce()
{
  return MEMORY[0x1E0CA1810]();
}

uint64_t FigTrackReaderGetFigBaseObject()
{
  return MEMORY[0x1E0CC3100]();
}

uint64_t FigUSleep()
{
  return MEMORY[0x1E0CA19E0]();
}

uint64_t FigVirtualCaptureCardGetCMBaseObject()
{
  return MEMORY[0x1E0CA1A78]();
}

uint64_t FigVirtualCaptureCardGetSingleton()
{
  return MEMORY[0x1E0CA1A80]();
}

uint64_t FigVirtualDisplaySourceGetCMBaseObject()
{
  return MEMORY[0x1E0CC31B8]();
}

uint64_t FigVirtualDisplaySourceGetClassID()
{
  return MEMORY[0x1E0CC31C0]();
}

uint64_t FigXPCCreateBasicMessage()
{
  return MEMORY[0x1E0CA1B58]();
}

uint64_t FigXPCHandleStdCopyPropertyMessage()
{
  return MEMORY[0x1E0CA1B78]();
}

uint64_t FigXPCHandleStdSetPropertyMessage()
{
  return MEMORY[0x1E0CA1B80]();
}

uint64_t FigXPCMessageCopyCFArray()
{
  return MEMORY[0x1E0CA1BB0]();
}

uint64_t FigXPCMessageCopyCFData()
{
  return MEMORY[0x1E0CA1BC0]();
}

uint64_t FigXPCMessageCopyCFDictionary()
{
  return MEMORY[0x1E0CA1BD0]();
}

uint64_t FigXPCMessageCopyCFError()
{
  return MEMORY[0x1E0CA1BD8]();
}

uint64_t FigXPCMessageCopyCFNumber()
{
  return MEMORY[0x1E0CA1BE0]();
}

uint64_t FigXPCMessageCopyCFObject()
{
  return MEMORY[0x1E0CA1BE8]();
}

uint64_t FigXPCMessageCopyCFString()
{
  return MEMORY[0x1E0CA1BF0]();
}

uint64_t FigXPCMessageCreateBlockBufferData()
{
  return MEMORY[0x1E0CA1C60]();
}

uint64_t FigXPCMessageGetCMTime()
{
  return MEMORY[0x1E0CA1C70]();
}

uint64_t FigXPCMessageGetOpCode()
{
  return MEMORY[0x1E0CA1C98]();
}

uint64_t FigXPCMessageSetAndConsumeVMData()
{
  return MEMORY[0x1E0CA1CA8]();
}

uint64_t FigXPCMessageSetCFArray()
{
  return MEMORY[0x1E0CA1CC0]();
}

uint64_t FigXPCMessageSetCFData()
{
  return MEMORY[0x1E0CA1CD0]();
}

uint64_t FigXPCMessageSetCFDictionary()
{
  return MEMORY[0x1E0CA1CE0]();
}

uint64_t FigXPCMessageSetCFError()
{
  return MEMORY[0x1E0CA1CE8]();
}

uint64_t FigXPCMessageSetCFNumber()
{
  return MEMORY[0x1E0CA1CF0]();
}

uint64_t FigXPCMessageSetCFObject()
{
  return MEMORY[0x1E0CA1CF8]();
}

uint64_t FigXPCMessageSetCFString()
{
  return MEMORY[0x1E0CA1D00]();
}

uint64_t FigXPCMessageSetCMTime()
{
  return MEMORY[0x1E0CA1D10]();
}

uint64_t FigXPCRelease()
{
  return MEMORY[0x1E0CA1D80]();
}

uint64_t FigXPCRemoteClientAssociateObject()
{
  return MEMORY[0x1E0CA1D88]();
}

uint64_t FigXPCRemoteClientCreate()
{
  return MEMORY[0x1E0CA1DA8]();
}

uint64_t FigXPCRemoteClientDisassociateObject()
{
  return MEMORY[0x1E0CA1DC0]();
}

uint64_t FigXPCRemoteClientKillServerOnTimeout()
{
  return MEMORY[0x1E0CA1DD8]();
}

uint64_t FigXPCRemoteClientSendAsyncMessage()
{
  return MEMORY[0x1E0CA1DF0]();
}

uint64_t FigXPCRemoteClientSendSyncMessage()
{
  return MEMORY[0x1E0CA1DF8]();
}

uint64_t FigXPCRemoteClientSendSyncMessageCreatingReply()
{
  return MEMORY[0x1E0CA1E00]();
}

uint64_t FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply()
{
  return MEMORY[0x1E0CA1E08]();
}

uint64_t FigXPCRetain()
{
  return MEMORY[0x1E0CA1E10]();
}

uint64_t FigXPCSendStdCopyPropertyMessage()
{
  return MEMORY[0x1E0CA1E18]();
}

uint64_t FigXPCSendStdSetPropertyMessage()
{
  return MEMORY[0x1E0CA1E20]();
}

uint64_t FigXPCServerAssociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E48]();
}

uint64_t FigXPCServerDisassociateObjectWithConnection()
{
  return MEMORY[0x1E0CA1E88]();
}

uint64_t FigXPCServerGetConnectionRefcon()
{
  return MEMORY[0x1E0CA1EA0]();
}

uint64_t FigXPCServerLookupAndRetainAssociatedObject()
{
  return MEMORY[0x1E0CA1EA8]();
}

uint64_t FigXPCServerSetConnectionRefcon()
{
  return MEMORY[0x1E0CA1EC8]();
}

uint64_t FigXPCServerStart()
{
  return MEMORY[0x1E0CA1ED0]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

uint64_t IOHIDEventSystemClientActivate()
{
  return MEMORY[0x1E0CBB1D0]();
}

uint64_t IOHIDEventSystemClientCancel()
{
  return MEMORY[0x1E0CBB1D8]();
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1E0CBB1F8]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1E0CBB220]();
}

uint64_t IOHIDEventSystemClientSetCancelHandler()
{
  return MEMORY[0x1E0CBB258]();
}

uint64_t IOHIDEventSystemClientSetDispatchQueue()
{
  return MEMORY[0x1E0CBB260]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1E0CBB268]();
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB708](AssertionType, *(_QWORD *)&AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntryGetRegistryEntryID(io_registry_entry_t entry, uint64_t *entryID)
{
  return MEMORY[0x1E0CBB988](*(_QWORD *)&entry, entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA08](name);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x1E0D3A1D0]();
}

uint64_t IOSurfaceAcceleratorGetRunLoopSource()
{
  return MEMORY[0x1E0D3A1E0]();
}

uint64_t IOSurfaceAcceleratorSetCustomFilter()
{
  return MEMORY[0x1E0D3A1F0]();
}

uint64_t IOSurfaceAcceleratorTransferSurface()
{
  return MEMORY[0x1E0D3A1F8]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x1E0D3A200]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBBAE8](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

mach_port_t IOSurfaceCreateMachPort(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB00](buffer);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x1E0CBBB10](aSurface);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBB18](buffer);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

uint64_t IOSurfaceGetCompressedTileDataRegionMemoryUsedOfPlane()
{
  return MEMORY[0x1E0CBBBC0]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1E0CBBBD8]();
}

uint64_t IOSurfaceGetExtendedPixelsOfPlane()
{
  return MEMORY[0x1E0CBBC10]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBC38](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

CFTypeID IOSurfaceGetTypeID(void)
{
  return MEMORY[0x1E0CBBCC8]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1E0CBBCF0](buffer, planeIndex);
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  MEMORY[0x1E0CBBD00](buffer);
}

Boolean IOSurfaceIsInUse(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBD18](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD38](*(_QWORD *)&csid);
}

IOSurfaceRef IOSurfaceLookupFromMachPort(mach_port_t port)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD40](*(_QWORD *)&port);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD48](xobj);
}

void IOSurfaceRemoveValue(IOSurfaceRef buffer, CFStringRef key)
{
  MEMORY[0x1E0CBBDE8](buffer, key);
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1E0CBBDF8]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0CBBE40](buffer, key, value);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x1E0DE2B58]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x1E0DE2B68]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1E0DE2B78]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

uint64_t MSNMonitorSetCameraNonStandardCameraClient()
{
  return MEMORY[0x1E0D4CDF0]();
}

uint64_t MSNMonitorSetCameraState()
{
  return MEMORY[0x1E0D4CDF8]();
}

uint64_t MSNMonitorSetLastCameraClient()
{
  return MEMORY[0x1E0D4CE00]();
}

uint64_t MSNMonitorSetXCTestExceptionState()
{
  return MEMORY[0x1E0D4CE08]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1E0CB2DA0](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  MEMORY[0x1E0CB2DA8](table, key, value);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE28]();
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1E0D7FE50]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1E0D7FE68]();
}

uint64_t SBSCreateLayoutServiceEndpointForExternalDisplay()
{
  return MEMORY[0x1E0DAB618]();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1E0CD65E0](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  return MEMORY[0x1E0CEC938](session, completeUntilPresentationTimeStamp);
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x1E0CEC948](allocator, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrame(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  return MEMORY[0x1E0CEC958](session, imageBuffer, presentationTimeStamp, duration, frameProperties, sourceFrameRefcon, infoFlagsOut);
}

OSStatus VTCompressionSessionEncodeMultiImageFrame(VTCompressionSessionRef session, CMTaggedBufferGroupRef taggedBufferGroup, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  return MEMORY[0x1E0CEC968](session, taggedBufferGroup, presentationTimeStamp, duration, frameProperties, sourceFrameRefcon, infoFlagsOut);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
  MEMORY[0x1E0CEC990](session);
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  return MEMORY[0x1E0CEC998](session);
}

uint64_t VTFillPixelBufferBorderWithBlack()
{
  return MEMORY[0x1E0CECAF8]();
}

uint64_t VTFillPixelBufferWithBlack()
{
  return MEMORY[0x1E0CECB00]();
}

uint64_t VTHDRMetadataGenerationSessionCreate()
{
  return MEMORY[0x1E0CECB68]();
}

uint64_t VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary()
{
  return MEMORY[0x1E0CECB78]();
}

uint64_t VTHDRMetadataGenerationSessionSetFramesPerSecond()
{
  return MEMORY[0x1E0CECB80]();
}

Boolean VTIsStereoMVHEVCEncodeSupported(void)
{
  return MEMORY[0x1E0CECBD0]();
}

OSStatus VTPixelRotationSessionCreate(CFAllocatorRef allocator, VTPixelRotationSessionRef *pixelRotationSessionOut)
{
  return MEMORY[0x1E0CECCD8](allocator, pixelRotationSessionOut);
}

void VTPixelRotationSessionInvalidate(VTPixelRotationSessionRef session)
{
  MEMORY[0x1E0CECCE8](session);
}

OSStatus VTPixelRotationSessionRotateImage(VTPixelRotationSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECCF0](session, sourceBuffer, destinationBuffer);
}

uint64_t VTPixelRotationSessionRotateSubImage()
{
  return MEMORY[0x1E0CECCF8]();
}

uint64_t VTPixelRotationSessionSetProperty()
{
  return MEMORY[0x1E0CECD00]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1E0CECD18](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x1E0CECD28](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECD38](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionCopyProperty(VTSessionRef session, CFStringRef propertyKey, CFAllocatorRef allocator, void *propertyValueOut)
{
  return MEMORY[0x1E0CECD68](session, propertyKey, allocator, propertyValueOut);
}

OSStatus VTSessionCopySupportedPropertyDictionary(VTSessionRef session, CFDictionaryRef *supportedPropertyDictionaryOut)
{
  return MEMORY[0x1E0CECD70](session, supportedPropertyDictionaryOut);
}

OSStatus VTSessionSetProperties(VTSessionRef session, CFDictionaryRef propertyDictionary)
{
  return MEMORY[0x1E0CECD78](session, propertyDictionary);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0CECD80](session, propertyKey, propertyValue);
}

uint64_t VTTemporalFilterSessionCompleteFrames()
{
  return MEMORY[0x1E0CECD90]();
}

uint64_t VTTemporalFilterSessionCreate()
{
  return MEMORY[0x1E0CECD98]();
}

uint64_t VTTemporalFilterSessionInvalidate()
{
  return MEMORY[0x1E0CECDA0]();
}

uint64_t VTTemporalFilterSessionProcessFrame()
{
  return MEMORY[0x1E0CECDA8]();
}

uint64_t WriteStackshotReport()
{
  return MEMORY[0x1E0D1BD38]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x1E0C9A5B0]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1E0C9A818]();
}

uint64_t _FigIsCurrentDispatchQueue()
{
  return MEMORY[0x1E0CA1F40]();
}

uint64_t _FigIsNotCurrentDispatchQueue()
{
  return MEMORY[0x1E0CA1F48]();
}

uint64_t _NSIsNSCFConstantString()
{
  return MEMORY[0x1E0C9A870]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

float __exp10f(float a1)
{
  float result;

  MEMORY[0x1E0C80AD0](a1);
  return result;
}

uint64_t __invert_d3()
{
  return MEMORY[0x1E0C80B18]();
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  simd_float2 v1;
  simd_float2 v2;
  simd_float2x2 result;

  MEMORY[0x1E0C80B28]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  simd_float3x3 result;

  MEMORY[0x1E0C80B30]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x1E0C80B38]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1E0C80C58]();
}

double __tanpi(double a1)
{
  double result;

  MEMORY[0x1E0C80C68](a1);
  return result;
}

void _exit(int a1)
{
  MEMORY[0x1E0C80F80](*(_QWORD *)&a1);
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1E0C81068]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x1E0C81648](a1);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F0](atoken);
}

int audit_token_to_pidversion(audit_token_t *atoken)
{
  return MEMORY[0x1E0DE40F8](atoken);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cbrt(long double __x)
{
  long double result;

  MEMORY[0x1E0C81850](__x);
  return result;
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

uint64_t dgesdd_NEWLAPACK()
{
  return MEMORY[0x1E0C8BCE8]();
}

uint64_t dgesvd_NEWLAPACK()
{
  return MEMORY[0x1E0C8BD08]();
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

uint64_t dispatch_mig_server()
{
  return MEMORY[0x1E0C82DF8]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x1E0C82E10](predicate, context, function);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
  MEMORY[0x1E0C82EE0](object, context);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F50](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
  MEMORY[0x1E0C82F60](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F80](source);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  MEMORY[0x1E0C82FF0](workloop, frequency);
}

void dispatch_workloop_set_os_workgroup(dispatch_workloop_t workloop, os_workgroup_t workgroup)
{
  MEMORY[0x1E0C83000](workloop, workgroup);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t e5rt_buffer_object_get_iosurface()
{
  return MEMORY[0x1E0D1F920]();
}

uint64_t e5rt_buffer_object_release()
{
  return MEMORY[0x1E0D1F938]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x1E0D1FA80]();
}

uint64_t e5rt_execution_stream_encode_operation()
{
  return MEMORY[0x1E0D1FA98]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x1E0D1FAA0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x1E0D1FAE0]();
}

uint64_t e5rt_execution_stream_operation_release()
{
  return MEMORY[0x1E0D1FB60]();
}

uint64_t e5rt_execution_stream_operation_retain_input_port()
{
  return MEMORY[0x1E0D1FB98]();
}

uint64_t e5rt_execution_stream_operation_retain_output_port()
{
  return MEMORY[0x1E0D1FBA8]();
}

uint64_t e5rt_execution_stream_release()
{
  return MEMORY[0x1E0D1FBB8]();
}

uint64_t e5rt_execution_stream_reset()
{
  return MEMORY[0x1E0D1FBD0]();
}

uint64_t e5rt_execution_stream_set_ane_execution_priority()
{
  return MEMORY[0x1E0D1FBD8]();
}

uint64_t e5rt_execution_stream_submit_async()
{
  return MEMORY[0x1E0D1FBE8]();
}

uint64_t e5rt_get_last_error_message()
{
  return MEMORY[0x1E0D1FBF8]();
}

uint64_t e5rt_io_port_bind_buffer_object()
{
  return MEMORY[0x1E0D1FC08]();
}

uint64_t e5rt_io_port_bind_surface_object()
{
  return MEMORY[0x1E0D1FC18]();
}

uint64_t e5rt_io_port_release()
{
  return MEMORY[0x1E0D1FC48]();
}

uint64_t e5rt_io_port_retain_buffer_object()
{
  return MEMORY[0x1E0D1FC50]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x1E0D1FC68]();
}

uint64_t e5rt_surface_object_create_from_iosurface()
{
  return MEMORY[0x1E0D1FDB0]();
}

uint64_t e5rt_surface_object_release()
{
  return MEMORY[0x1E0D1FDC0]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x1E0D1FDC8]();
}

uint64_t e5rt_tensor_desc_create()
{
  return MEMORY[0x1E0D1FDE0]();
}

uint64_t e5rt_tensor_desc_dtype_create()
{
  return MEMORY[0x1E0D1FDE8]();
}

uint64_t e5rt_tensor_desc_dtype_release()
{
  return MEMORY[0x1E0D1FE38]();
}

uint64_t e5rt_tensor_desc_get_dimension_length()
{
  return MEMORY[0x1E0D1FE40]();
}

uint64_t e5rt_tensor_desc_get_rank()
{
  return MEMORY[0x1E0D1FE48]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x1E0D1FE50]();
}

uint64_t e5rt_tensor_desc_release()
{
  return MEMORY[0x1E0D1FE70]();
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32()
{
  return MEMORY[0x1E0D1FE98]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x1E0D1FFD0]();
}

uint64_t espresso_network_bind_direct_cvpixelbuffer()
{
  return MEMORY[0x1E0D1FFD8]();
}

uint64_t espresso_network_select_configuration()
{
  return MEMORY[0x1E0D20080]();
}

uint64_t espresso_network_set_memory_pool_id()
{
  return MEMORY[0x1E0D20098]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1E0D20100]();
}

uint64_t espresso_plan_set_execution_queue()
{
  return MEMORY[0x1E0D20128]();
}

uint64_t espresso_plan_set_priority()
{
  return MEMORY[0x1E0D20130]();
}

uint64_t espresso_plan_share_intermediate_buffer()
{
  return MEMORY[0x1E0D20138]();
}

uint64_t espresso_plan_submit()
{
  return MEMORY[0x1E0D20150]();
}

uint64_t espresso_plan_submit_set_multiple_buffering()
{
  return MEMORY[0x1E0D20158]();
}

uint64_t espresso_will_share_intermediate_buffer_with_existing_plan()
{
  return MEMORY[0x1E0D20178]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

uint64_t fig_log_call_emit_and_clean_up_after_send_and_compose()
{
  return MEMORY[0x1E0CA1F60]();
}

uint64_t fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type()
{
  return MEMORY[0x1E0CA1F68]();
}

uint64_t fig_log_get_emitter()
{
  return MEMORY[0x1E0CA1F70]();
}

uint64_t fig_log_handle()
{
  return MEMORY[0x1E0CA1F78]();
}

uint64_t fig_note_initialize_category_with_default_work_cf()
{
  return MEMORY[0x1E0CA1F88]();
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

int fnmatch(const char *a1, const char *a2, int a3)
{
  return MEMORY[0x1E0C83458](a1, a2, *(_QWORD *)&a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83528](a1, a2, a3, *(_QWORD *)&a4);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

void glActiveTexture(GLenum texture)
{
  MEMORY[0x1E0CD0960](*(_QWORD *)&texture);
}

void glAttachShader(GLuint program, GLuint shader)
{
  MEMORY[0x1E0CD0968](*(_QWORD *)&program, *(_QWORD *)&shader);
}

void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)
{
  MEMORY[0x1E0CD0970](*(_QWORD *)&program, *(_QWORD *)&index, name);
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  MEMORY[0x1E0CD0980](*(_QWORD *)&target, *(_QWORD *)&framebuffer);
}

void glBindTexture(GLenum target, GLuint texture)
{
  MEMORY[0x1E0CD0990](*(_QWORD *)&target, *(_QWORD *)&texture);
}

GLenum glCheckFramebufferStatus(GLenum target)
{
  return MEMORY[0x1E0CD09D8](*(_QWORD *)&target);
}

void glCompileShader(GLuint shader)
{
  MEMORY[0x1E0CD0A08](*(_QWORD *)&shader);
}

GLuint glCreateProgram(void)
{
  return MEMORY[0x1E0CD0A18]();
}

GLuint glCreateShader(GLenum type)
{
  return MEMORY[0x1E0CD0A20](*(_QWORD *)&type);
}

void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)
{
  MEMORY[0x1E0CD0A38](*(_QWORD *)&n, framebuffers);
}

void glDeleteProgram(GLuint program)
{
  MEMORY[0x1E0CD0A40](*(_QWORD *)&program);
}

void glDeleteShader(GLuint shader)
{
  MEMORY[0x1E0CD0A50](*(_QWORD *)&shader);
}

void glDeleteTextures(GLsizei n, const GLuint *textures)
{
  MEMORY[0x1E0CD0A60](*(_QWORD *)&n, textures);
}

void glDisable(GLenum cap)
{
  MEMORY[0x1E0CD0A88](*(_QWORD *)&cap);
}

void glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
  MEMORY[0x1E0CD0AA0](*(_QWORD *)&mode, *(_QWORD *)&first, *(_QWORD *)&count);
}

void glDrawBuffers(GLsizei n, const GLenum *bufs)
{
  MEMORY[0x1E0CD0AA8](*(_QWORD *)&n, bufs);
}

void glEnable(GLenum cap)
{
  MEMORY[0x1E0CD0AB8](*(_QWORD *)&cap);
}

void glEnableVertexAttribArray(GLuint index)
{
  MEMORY[0x1E0CD0AC0](*(_QWORD *)&index);
}

void glFinish(void)
{
  MEMORY[0x1E0CD0AD0]();
}

void glFlush(void)
{
  MEMORY[0x1E0CD0AD8]();
}

void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
{
  MEMORY[0x1E0CD0AF0](*(_QWORD *)&target, *(_QWORD *)&attachment, *(_QWORD *)&textarget, *(_QWORD *)&texture, *(_QWORD *)&level);
}

void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
{
  MEMORY[0x1E0CD0B08](*(_QWORD *)&n, framebuffers);
}

void glGenTextures(GLsizei n, GLuint *textures)
{
  MEMORY[0x1E0CD0B18](*(_QWORD *)&n, textures);
}

int glGetAttribLocation(GLuint program, const GLchar *name)
{
  return MEMORY[0x1E0CD0B48](*(_QWORD *)&program, name);
}

GLenum glGetError(void)
{
  return MEMORY[0x1E0CD0B58]();
}

void glGetIntegerv(GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B68](*(_QWORD *)&pname, params);
}

void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B78](*(_QWORD *)&program, *(_QWORD *)&pname, params);
}

void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B98](*(_QWORD *)&shader, *(_QWORD *)&pname, params);
}

int glGetUniformLocation(GLuint program, const GLchar *name)
{
  return MEMORY[0x1E0CD0BA8](*(_QWORD *)&program, name);
}

void glLinkProgram(GLuint program)
{
  MEMORY[0x1E0CD0BD0](*(_QWORD *)&program);
}

void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
{
  MEMORY[0x1E0CD0C20](*(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
}

void glShaderSource(GLuint shader, GLsizei count, const GLchar *const *string, const GLint *length)
{
  MEMORY[0x1E0CD0C28](*(_QWORD *)&shader, *(_QWORD *)&count, string, length);
}

void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
  MEMORY[0x1E0CD0C50](*(_QWORD *)&target, *(_QWORD *)&level, *(_QWORD *)&internalformat, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)&border, *(_QWORD *)&format, *(_QWORD *)&type);
}

void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
{
  MEMORY[0x1E0CD0C58](*(_QWORD *)&target, *(_QWORD *)&pname, param);
}

void glUniform1f(GLint location, GLfloat x)
{
  MEMORY[0x1E0CD0C70](*(_QWORD *)&location, x);
}

void glUniform1i(GLint location, GLint x)
{
  MEMORY[0x1E0CD0C80](*(_QWORD *)&location, *(_QWORD *)&x);
}

void glUniform2f(GLint location, GLfloat x, GLfloat y)
{
  MEMORY[0x1E0CD0C88](*(_QWORD *)&location, x, y);
}

void glUniform3fv(GLint location, GLsizei count, const GLfloat *v)
{
  MEMORY[0x1E0CD0CA8](*(_QWORD *)&location, *(_QWORD *)&count, v);
}

void glUniformMatrix3fv(GLint location, GLsizei count, GLBOOLean transpose, const GLfloat *value)
{
  MEMORY[0x1E0CD0CD0](*(_QWORD *)&location, *(_QWORD *)&count, transpose, value);
}

void glUseProgram(GLuint program)
{
  MEMORY[0x1E0CD0CE8](*(_QWORD *)&program);
}

void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLBOOLean normalized, GLsizei stride, const GLvoid *ptr)
{
  MEMORY[0x1E0CD0D08](*(_QWORD *)&indx, *(_QWORD *)&size, *(_QWORD *)&type, normalized, *(_QWORD *)&stride, ptr);
}

void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  MEMORY[0x1E0CD0D10](*(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
}

int heapsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  return MEMORY[0x1E0C83890](__base, __nel, __width, __compar);
}

kern_return_t host_page_size(host_t a1, vm_size_t *a2)
{
  return MEMORY[0x1E0C838C0](*(_QWORD *)&a1, a2);
}

kern_return_t host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838D8](*(_QWORD *)&host_priv, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

kern_return_t host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt)
{
  return MEMORY[0x1E0C838E0](*(_QWORD *)&host_priv, *(_QWORD *)&flavor, host_info64_out, host_info64_outCnt);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

float ldexpf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C83B48](*(_QWORD *)&a2, a1);
  return result;
}

float log10f(float a1)
{
  float result;

  MEMORY[0x1E0C83BC8](a1);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1E0C83C70]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_get_attributes(ipc_space_read_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return MEMORY[0x1E0C83D20](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1E0C83D78](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&flavor, port_info, *(_QWORD *)&port_infoCnt);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x1E0C840C0](__b, __pattern4, __len);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C840E8](*(_QWORD *)&reply_port);
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1E0C84100]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C84110](*(_QWORD *)&reply_port);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C841D0](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1E0C84218](a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

BOOL notify_is_valid_token(int val)
{
  return MEMORY[0x1E0C843F0](*(_QWORD *)&val);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1E0DE7D00](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1E0C84918](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_factory_content()
{
  return MEMORY[0x1E0C849E8]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

uint64_t os_workgroup_attr_set_interval_type()
{
  return MEMORY[0x1E0C84A28]();
}

uint64_t os_workgroup_interval_create()
{
  return MEMORY[0x1E0C84A70]();
}

int pipe(int a1[2])
{
  return MEMORY[0x1E0C84B10](a1);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1E0C84C28](*(_QWORD *)&pid, *(_QWORD *)&flavor, buffer);
}

uint64_t proc_reset_footprint_interval()
{
  return MEMORY[0x1E0C84C68]();
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1E0C84DB8](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  MEMORY[0x1E0C84F98](__base, __nel, __width, a4, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

uint64_t system_override()
{
  return MEMORY[0x1E0C857E0]();
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

kern_return_t task_generate_corpse(task_read_t task, mach_port_t *corpse_task_port)
{
  return MEMORY[0x1E0C85818](*(_QWORD *)&task, corpse_task_port);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1E0C85838](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

uint64_t tcc_authorization_record_get_authorization_right()
{
  return MEMORY[0x1E0DB1208]();
}

uint64_t tcc_credential_create_for_process_with_audit_token()
{
  return MEMORY[0x1E0DB1240]();
}

uint64_t tcc_credential_singleton_for_self()
{
  return MEMORY[0x1E0DB1268]();
}

uint64_t tcc_identity_copy_external_representation()
{
  return MEMORY[0x1E0DB1288]();
}

uint64_t tcc_identity_create()
{
  return MEMORY[0x1E0DB1290]();
}

uint64_t tcc_identity_create_from_external_representation()
{
  return MEMORY[0x1E0DB1298]();
}

uint64_t tcc_identity_get_identifier()
{
  return MEMORY[0x1E0DB12A0]();
}

uint64_t tcc_identity_get_type()
{
  return MEMORY[0x1E0DB12A8]();
}

uint64_t tcc_message_options_create()
{
  return MEMORY[0x1E0DB12C8]();
}

uint64_t tcc_message_options_set_reply_handler_policy()
{
  return MEMORY[0x1E0DB12F0]();
}

uint64_t tcc_message_options_set_request_prompt_policy()
{
  return MEMORY[0x1E0DB1300]();
}

uint64_t tcc_server_create()
{
  return MEMORY[0x1E0DB1320]();
}

uint64_t tcc_server_message_request_authorization()
{
  return MEMORY[0x1E0DB1348]();
}

uint64_t tcc_service_get_name()
{
  return MEMORY[0x1E0DB1380]();
}

uint64_t tcc_service_singleton_for_CF_name()
{
  return MEMORY[0x1E0DB1390]();
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void vDSP_convD(const double *__A, vDSP_Stride __IA, const double *__F, vDSP_Stride __IF, double *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x1E0C8C058](__A, __IA, __F, __IF, __C, __IC, __N, __P);
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0B0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_normalizeD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, double *__Mean, double *__StandardDeviation, vDSP_Length __N)
{
  MEMORY[0x1E0C8C288](__A, __IA, __C, __IC, __Mean, __StandardDeviation, __N);
}

void vDSP_vflt32D(const int *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C5C0](__A, __IA, __C, __IC, __N);
}

void vDSP_vma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C6A0](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C8E0](__A, __IA, __B, __C, __IC, __N);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CF28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageMax_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D450](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel_height, kernel_width, *(_QWORD *)&flags);
}

vImage_Error vImageMin_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, vImagePixelCount kernel_height, vImagePixelCount kernel_width, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D470](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel_height, kernel_width, *(_QWORD *)&flags);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1E0C85B10]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1E0C85B18]();
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8D9D8](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

xpc_object_t xpc_array_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1E0C85E10]();
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

int64_t xpc_array_get_int64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1E0C85E60](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1E0C85F00](xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1E0C85F78]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1E0C85F90](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FA0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1E0C86048](connection, message);
}

uint64_t xpc_connection_send_notification()
{
  return MEMORY[0x1E0C86058]();
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

uint64_t xpc_dictionary_copy_mach_send()
{
  return MEMORY[0x1E0C86200]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86218]();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86230](xdict, key);
}

uint64_t xpc_dictionary_extract_mach_recv()
{
  return MEMORY[0x1E0C86240]();
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86248](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C86260](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1E0C86278](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C86288](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  double result;

  MEMORY[0x1E0C86298](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
  MEMORY[0x1E0C86330](xdict, key, bytes, length);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
  MEMORY[0x1E0C86358](xdict, key, *(_QWORD *)&fd);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

uint64_t xpc_dictionary_set_mach_recv()
{
  return MEMORY[0x1E0C86370]();
}

uint64_t xpc_dictionary_set_mach_send()
{
  return MEMORY[0x1E0C86378]();
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1E0C863F0](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C866F0](region, length);
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x1E0C86700](xshmem, region);
}

uint64_t xpc_transaction_try_exit_clean()
{
  return MEMORY[0x1E0C86788]();
}

