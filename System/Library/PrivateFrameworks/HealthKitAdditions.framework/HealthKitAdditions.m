uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2426455E8](a1, v6, a5);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  id *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = (id *)(v0 + ((v2 + 32) & ~v2));

  v4 = (char *)v3 + v1[7];
  v5 = sub_23DE350FC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)v3 + v1[8];
  v7 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)v3 + v1[9];
  v9 = sub_23DE34F58();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t HKSharingRecipientAuthorizationStore.getAuthorizationIdentifiers()()
{
  void *v0;
  id v1;

  *(_QWORD *)(swift_allocObject() + 16) = v0;
  sub_23DDE26B4();
  swift_allocObject();
  v1 = v0;
  return sub_23DE354D4();
}

void sub_23DDE25A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23DDE39BC;
  *(_QWORD *)(v7 + 24) = v6;
  v9[4] = sub_23DDE39F4;
  v9[5] = v7;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_23DDE2CE4;
  v9[3] = &block_descriptor;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchSharingAuthorizationsWithCompletion_, v8);
  _Block_release(v8);
}

uint64_t sub_23DDE2688()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_23DDE26AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDE25A4(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDE26B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D06840)
  {
    sub_23DDE3BB0(255, &qword_256D06848, (uint64_t)&type metadata for HKSharingAuthorizationIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D06840);
  }
}

unint64_t sub_23DDE2738()
{
  unint64_t result;

  result = qword_254328AE0;
  if (!qword_254328AE0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_254328AE0);
  }
  return result;
}

void type metadata accessor for HKStatisticsOptions(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068B0, (uint64_t)&unk_250EA2C20, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKRaceRouteClusterWorkoutSelection(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068B8, (uint64_t)&unk_250EA2C48, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068C0, (uint64_t)&unk_250EA2C68, MEMORY[0x24BEE4D40]);
}

uint64_t sub_23DDE27E0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23DDE2800(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068C8, (uint64_t)&unk_250EA2CE8, MEMORY[0x24BEE4D40]);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_23DDE2850(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23DDE2870(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_2543287D8, (uint64_t)&unk_250EA2D68, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKCategoryValueWristEvent(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068D0, (uint64_t)&unk_250EA2D90, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKCategoryValueWheelchairUseChanged(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068D8, (uint64_t)&unk_250EA2DB0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKCategoryValueWatchActivation(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068E0, (uint64_t)&unk_250EA2DD0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKCategoryValueCoachingEvent(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068E8, (uint64_t)&unk_250EA2DF0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for Association(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068F0, (uint64_t)&unk_250EA2E10, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKWheelchairUse(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D068F8, (uint64_t)&unk_250EA2E30, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFitzpatrickSkinType(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06900, (uint64_t)&unk_250EA2E50, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKBloodType(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06908, (uint64_t)&unk_250EA2E70, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKBiologicalSex(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06910, (uint64_t)&unk_250EA2E90, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKMCPregnancyState(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_254327088, (uint64_t)&unk_250EA2EB0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKCategoryTypeIdentifier(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06918, (uint64_t)&unk_250EA2ED0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06920, (uint64_t)&unk_250EA2EF8, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKRegionAvailabilityCategory(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06928, (uint64_t)&unk_250EA2F20, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFeatureAvailabilityOnboardedCountrySupportedState(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06930, (uint64_t)&unk_250EA2F40, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06938, (uint64_t)&unk_250EA2F60, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFeatureAvailabilityContext(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_2543289D0, (uint64_t)&unk_250EA2F88, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKRemoteAllowedCountriesState(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06940, (uint64_t)&unk_250EA2FB0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKAllowedCountriesCategory(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06948, (uint64_t)&unk_250EA2FD0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23DDE3BB0(a1, qword_2543282E0, (uint64_t)&unk_250EA2FF0, MEMORY[0x24BEE4D40]);
}

void sub_23DDE2AC8(unint64_t a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(id, uint64_t);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[3];
  unsigned __int8 v20;

  if (a2)
  {
    v5 = a2;
    a3(a2, 1);

    return;
  }
  if (!a1)
  {
    a3((id)MEMORY[0x24BEE4AF8], 0);
    return;
  }
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v15 = a3;
    if (v7)
      goto LABEL_6;
LABEL_20:
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_21:
    swift_bridgeObjectRelease();
    v15(v9, 0);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v7 = sub_23DE35E70();
  v15 = a3;
  if (!v7)
    goto LABEL_20;
LABEL_6:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x242644E08](v8, a1);
      else
        v11 = *(id *)(a1 + 8 * v8 + 32);
      HKSharingAuthorizationIdentifier.init(_:)(v11, (uint64_t)v19);
      v12 = v20;
      if (v20 != 255)
      {
        v17 = v19[1];
        v18 = v19[0];
        v16 = v19[2];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_23DDF1BD8(0, v9[2] + 1, 1, v9);
        v14 = v9[2];
        v13 = v9[3];
        if (v14 >= v13 >> 1)
          v9 = sub_23DDF1BD8((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
        v9[2] = v14 + 1;
        v10 = &v9[7 * v14];
        *((_OWORD *)v10 + 2) = v18;
        *((_OWORD *)v10 + 3) = v17;
        *((_OWORD *)v10 + 4) = v16;
        *((_BYTE *)v10 + 80) = v12;
      }
      ++v8;
    }
    while (v7 != v8);
    goto LABEL_21;
  }
  __break(1u);
}

uint64_t sub_23DDE2CE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_23DDE39FC();
    v4 = sub_23DE35948();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDE2D60()
{
  sub_23DDE3384(&qword_256D06A80, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE374D4);
  return sub_23DE35FB4();
}

uint64_t sub_23DDE2DA0()
{
  sub_23DDE3384(&qword_256D06A80, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE374D4);
  return sub_23DE35FA8();
}

uint64_t sub_23DDE2DE4()
{
  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  return sub_23DE3500C();
}

id sub_23DDE2E24()
{
  id *v0;

  return *v0;
}

uint64_t sub_23DDE2E2C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_23DDE2E34(uint64_t a1, uint64_t a2)
{
  return sub_23DDE366C(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23DDE2E5C()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDE2EA0()
{
  return sub_23DE36008();
}

uint64_t sub_23DDE2EC8()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDE2F08(uint64_t a1, uint64_t a2)
{
  return sub_23DDE366C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23DDE2F14(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_23DE357E0();
  *a2 = 0;
  return result;
}

uint64_t sub_23DDE2F88(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_23DE357EC();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23DDE3004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_23DE357F8();
  v2 = sub_23DE357D4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DDE3044()
{
  return sub_23DE357F8();
}

uint64_t sub_23DDE3054()
{
  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  return sub_23DE35048();
}

uint64_t sub_23DDE3094()
{
  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  return sub_23DE35024();
}

uint64_t sub_23DDE30D4(void *a1)
{
  id v2;

  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  v2 = a1;
  return sub_23DE35018();
}

uint64_t sub_23DDE3138()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_23DE35C30();

  return v2;
}

uint64_t sub_23DDE316C()
{
  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  return sub_23DE3503C();
}

uint64_t sub_23DDE31BC()
{
  sub_23DE35FFC();
  sub_23DE35750();
  return sub_23DE36014();
}

_QWORD *sub_23DDE3218@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23DDE3228(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23DDE3238()
{
  sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
  return sub_23DE35030();
}

BOOL sub_23DDE3290(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23DDE32A8()
{
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DDE3384(&qword_256D069F8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE36BD4);
  return sub_23DE35EC4();
}

uint64_t sub_23DDE332C()
{
  return sub_23DDE3384(&qword_256D06950, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE36B9C);
}

uint64_t sub_23DDE3358()
{
  return sub_23DDE3384(&qword_256D06958, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE36B74);
}

uint64_t sub_23DDE3384(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242645660](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DDE33C4()
{
  sub_23DDE3384(&qword_256D069E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE372EC);
  sub_23DDE3384(&qword_256D069F0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE36CD4);
  return sub_23DE35EC4();
}

uint64_t sub_23DDE3448()
{
  return sub_23DDE3384(&qword_256D06960, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE36C9C);
}

uint64_t sub_23DDE3474()
{
  return sub_23DDE3384(&qword_256D06968, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE36C74);
}

uint64_t sub_23DDE34A0()
{
  sub_23DDE3384(&qword_256D069D8, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_23DE36E48);
  sub_23DDE3384(&qword_256D069E0, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_23DE36DE8);
  return sub_23DE35EC4();
}

uint64_t sub_23DDE3524()
{
  return sub_23DDE3384(&qword_256D06970, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_23DE36DAC);
}

uint64_t sub_23DDE3550()
{
  return sub_23DDE3384(&qword_256D06978, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_23DE36D80);
}

uint64_t sub_23DDE357C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DE357D4();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DDE35C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DE357F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23DDE35E8()
{
  sub_23DDE3384(&qword_256D069C8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_23DE36FA0);
  sub_23DDE3384(&qword_256D069D0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_23DE36F40);
  return sub_23DE35EC4();
}

uint64_t sub_23DDE366C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23DE357F8();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23DDE36A8()
{
  sub_23DE357F8();
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDE36E8()
{
  uint64_t v0;

  sub_23DE357F8();
  sub_23DE35FFC();
  sub_23DE3584C();
  v0 = sub_23DE36014();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23DDE3758()
{
  return sub_23DDE3384(&qword_256D06980, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_23DE36E1C);
}

uint64_t sub_23DDE3784()
{
  return sub_23DDE3384(&qword_256D06988, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_23DE36F04);
}

uint64_t sub_23DDE37B0()
{
  return sub_23DDE3384(&qword_256D06990, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_23DE36ED8);
}

uint64_t sub_23DDE37DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23DE357F8();
  v2 = v1;
  if (v0 == sub_23DE357F8() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23DE35F54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23DDE3864()
{
  return sub_23DDE3384(&qword_256D06998, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_23DE36F74);
}

uint64_t sub_23DDE3890()
{
  return sub_23DDE3384(&qword_256D069A0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWristEvent, (uint64_t)&unk_23DE370E4);
}

uint64_t sub_23DDE38BC()
{
  return sub_23DDE3384(&qword_256D069A8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWheelchairUseChanged, (uint64_t)&unk_23DE370BC);
}

uint64_t sub_23DDE38E8()
{
  return sub_23DDE3384(&qword_256D069B0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWatchActivation, (uint64_t)&unk_23DE37094);
}

uint64_t sub_23DDE3914()
{
  return sub_23DDE3384(&qword_256D069B8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCoachingEvent, (uint64_t)&unk_23DE3706C);
}

uint64_t sub_23DDE3940()
{
  return sub_23DDE3384(&qword_256D069C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE36D04);
}

uint64_t sub_23DDE396C()
{
  return sub_23DDE3384(&qword_2543289C8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE36C04);
}

uint64_t sub_23DDE3998()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDE39BC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

void sub_23DDE39F4(unint64_t a1, void *a2)
{
  uint64_t v2;

  sub_23DDE2AC8(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

unint64_t sub_23DDE39FC()
{
  unint64_t result;

  result = qword_256D06A60;
  if (!qword_256D06A60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256D06A60);
  }
  return result;
}

void type metadata accessor for Label(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_254327EA8, (uint64_t)&unk_250EA3090, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for __HKStateOfMindDomain(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_254327EB0, (uint64_t)&unk_250EA30B0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKError(uint64_t a1)
{
  sub_23DDE3BB0(a1, &qword_256D06A68, (uint64_t)&unk_250EA30D0, MEMORY[0x24BEE4D40]);
}

uint64_t sub_23DDE3A8C()
{
  return sub_23DDE3384(&qword_256D06A70, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE373EC);
}

uint64_t sub_23DDE3AB8()
{
  return sub_23DDE3384(&qword_256D06A78, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37418);
}

uint64_t sub_23DDE3AE4()
{
  return sub_23DDE3384(&qword_256D06A80, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE374D4);
}

uint64_t sub_23DDE3B10()
{
  return sub_23DDE3384(&qword_256D06A88, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE374A0);
}

uint64_t sub_23DDE3B3C()
{
  return sub_23DDE3384(&qword_256D06A90, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE3745C);
}

uint64_t sub_23DDE3B68()
{
  return sub_23DDE3384(&qword_256D06A98, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_23DE375C0);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_23DDE3BB0(a1, qword_256D06AC0, (uint64_t)&unk_250EA30F8, MEMORY[0x24BEE4D40]);
}

void sub_23DDE3BB0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

uint64_t sub_23DDE3BF4()
{
  return sub_23DDE3384(&qword_256D06AA0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_23DE37584);
}

unint64_t sub_23DDE3C24()
{
  unint64_t result;

  result = qword_256D06AA8;
  if (!qword_256D06AA8)
  {
    result = MEMORY[0x242645660](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256D06AA8);
  }
  return result;
}

uint64_t sub_23DDE3C68()
{
  return sub_23DDE3384(&qword_256D06AB0, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_23DE375FC);
}

uint64_t sub_23DDE3C94()
{
  return sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
}

uint64_t HKQueryPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v30[5];

  v26 = a5;
  v29 = a1;
  v11 = *(_QWORD *)(a2 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v28 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19 = type metadata accessor for HKQueryPublisherInner(0, a3, AssociatedTypeWitness, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a3);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  v20 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v28, v5, a2);
  v21 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = a2;
  *((_QWORD *)v22 + 3) = a3;
  *((_QWORD *)v22 + 4) = a4;
  *((_QWORD *)v22 + 5) = v26;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v22[v21], v20, a2);
  v23 = swift_allocObject();
  sub_23DDE4D28((uint64_t)v17, v27, (uint64_t)sub_23DDE4000, (uint64_t)v22);
  v30[3] = v19;
  v30[4] = MEMORY[0x242645660](&unk_23DE377F0, v19);
  v30[0] = v23;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t type metadata accessor for HKQueryPublisherInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKQueryPublisherInner);
}

uint64_t sub_23DDE3EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a4, a6);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(v13, a1, a2, a4, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

uint64_t sub_23DDE3FA8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_23DDE4000(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2[2];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_23DDE3EC8(a1, a2, (uint64_t)v2 + ((v4 + 48) & ~v4), v3, v2[3], v2[4]);
}

uint64_t sub_23DDE4020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  sub_23DDE4D28(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_23DDE4084()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DDE408C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *sub_23DDE4100(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 2)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 2;
    }
    else if (v9 == 1)
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

void sub_23DDE4244(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 2)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_23DDE428C + 4 * byte_23DE37655[v5]))();
  }
}

_QWORD *sub_23DDE42E8(_QWORD *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    v9 = *a2;
    v10 = *a2;
    *a1 = v9;
    v8 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 16))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_23DDE43E8(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v13 = *a2;
      v14 = v13;
      *a1 = v13;
      v12 = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

_QWORD *sub_23DDE45A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *a1 = *a2;
    v8 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_23DDE4694(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      *a1 = *a2;
      v12 = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_23DDE4848(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DDE490C + 4 * byte_23DE37678[(v4 - 1)]))();
}

void sub_23DDE4958(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_23DDE4B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DDE4B48 + 4 * byte_23DE37686[v3]))();
}

void sub_23DDE4B94(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for HKQueryPublisherResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKQueryPublisherResult);
}

uint64_t dispatch thunk of HKQueryPublisher.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HKQueryPublisher.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static HKQueryPublisher.makeQuery(with:outputHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_23DDE4C84()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE35C3C();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

_QWORD *sub_23DDE4D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v24 = a4;
  v22 = a2;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = sub_23DE35C3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v22 - v10;
  v12 = (char *)v4 + *(_QWORD *)(v6 + 112);
  v13 = *(_QWORD *)(v7 - 8);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(v12, 1, 1, v7);
  v15 = *(_QWORD *)(*v4 + 120);
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v4 + v15) = v16;
  v17 = *(_QWORD *)(*v4 + 136);
  *(_QWORD *)((char *)v4 + v17) = sub_23DE35444();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v11, a1, v7);
  v14(v11, 0, 1, v7);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v12, v11, v8);
  swift_endAccess();
  v18 = v23;
  v4[2] = v22;
  v19 = (char *)v4 + *(_QWORD *)(*v4 + 128);
  v20 = v24;
  *(_QWORD *)v19 = v18;
  *((_QWORD *)v19 + 1) = v20;
  v19[16] = 0;
  return v4;
}

id *sub_23DDE4E80()
{
  id *v0;
  char *v1;
  uint64_t v2;

  MEMORY[0x242645720](*(id *)((char *)v0 + *((_QWORD *)*v0 + 15)), -1, -1);

  v1 = (char *)v0 + *((_QWORD *)*v0 + 14);
  v2 = sub_23DE35C3C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23DDE4F70(*(id *)((char *)v0 + *((_QWORD *)*v0 + 16)), *(id *)((char *)v0 + *((_QWORD *)*v0 + 16) + 8), *((_BYTE *)v0 + *((_QWORD *)*v0 + 16) + 16));
  return v0;
}

uint64_t sub_23DDE4F08()
{
  sub_23DDE4E80();
  return swift_deallocClassInstance();
}

uint64_t sub_23DDE4F2C()
{
  return swift_allocateGenericValueMetadata();
}

id sub_23DDE4F38(id result, id a2, char a3)
{
  if (a3 == 2 || a3 == 1)
    return result;
  if (!a3)
    return (id)swift_retain();
  return result;
}

void sub_23DDE4F60(uint64_t a1)
{
  sub_23DDE4F70(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void sub_23DDE4F70(void *a1, id a2, char a3)
{
  if (a3 == 2 || a3 == 1)
  {

  }
  else if (!a3)
  {
    swift_release();
  }
}

uint64_t sub_23DDE4F98(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23DDE4F38(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_23DDE4FE0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23DDE4F38(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23DDE4F70(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_23DDE5048(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23DDE4F70(v4, v5, v6);
  return a1;
}

uint64_t sub_23DDE508C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_23DDE50D4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23DDE5118(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_23DDE5130(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for HKQueryPublisherInner.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKQueryPublisherInner.State);
}

void sub_23DDE5154(unint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void (*)(uint64_t), uint64_t *);
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v16)(void (*)(uint64_t), uint64_t *);
  void *v17;
  char v18;
  id v19;
  void *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(void (*)(uint64_t), uint64_t *);
  void *v25;
  char v26;
  id v27;

  v2 = v1;
  v4 = sub_23DE35444();
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
  {
    sub_23DE35450();
    if ((sub_23DE35438() & 1) != 0)
    {
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    sub_23DE35450();
    v5 = sub_23DE35438();
    if (v4 >= a1 || (v5 & 1) != 0)
      goto LABEL_24;
  }
  v6 = *(os_unfair_lock_s **)((char *)v1 + *(_QWORD *)(*v1 + 120));
  os_unfair_lock_lock(v6);
  v7 = *v1;
  v8 = (uint64_t)v1 + *(_QWORD *)(*v1 + 128);
  if (*(_BYTE *)(v8 + 16))
  {
    os_unfair_lock_unlock(v6);
    return;
  }
  v10 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
  v9 = *(void **)(v8 + 8);
  v11 = (uint64_t *)((char *)v2 + *(_QWORD *)(v7 + 136));
  swift_beginAccess();
  v12 = *v11;
  swift_retain();
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
    goto LABEL_16;
  sub_23DE35450();
  v13 = sub_23DE35438();
  v14 = sub_23DE35450();
  if ((v13 & 1) != 0)
    goto LABEL_10;
  if ((sub_23DE35438() & 1) == 0)
  {
    if (((v12 | a1) & 0x8000000000000000) != 0)
    {
LABEL_25:
      __break(1u);
      return;
    }
    v14 = v12 + a1;
    if (!__OFADD__(v12, a1))
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
LABEL_10:
        *v11 = v14;
        goto LABEL_16;
      }
      __break(1u);
      goto LABEL_23;
    }
  }
  *v11 = sub_23DE35450();
LABEL_16:
  swift_endAccess();
  swift_retain();
  v15 = (void *)v10(sub_23DDE5F98, v2);
  swift_release();
  v16 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
  v17 = *(void **)(v8 + 8);
  *(_QWORD *)v8 = v15;
  *(_QWORD *)(v8 + 8) = 0;
  v18 = *(_BYTE *)(v8 + 16);
  *(_BYTE *)(v8 + 16) = 1;
  v19 = v15;
  sub_23DDE4F70(v16, v17, v18);
  os_unfair_lock_unlock(v6);
  v20 = (void *)v2[2];
  objc_msgSend(v20, sel_executeQuery_, v19);
  os_unfair_lock_lock(v6);
  v21 = *(unsigned __int8 *)(v8 + 16);
  v22 = *(_QWORD *)v8;
  v23 = *(_QWORD *)(v8 + 8);
  if (v21 != 3 || v22 | v23)
  {
    *(_QWORD *)v8 = v15;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 2;
    v27 = v19;
    v24 = (uint64_t (*)(void (*)(uint64_t), uint64_t *))v22;
    v25 = (void *)v23;
    v26 = v21;
  }
  else
  {
    objc_msgSend(v20, sel_stopQuery_, v19);
    v24 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
    v25 = *(void **)(v8 + 8);
    *(_OWORD *)v8 = xmmword_23DE37830;
    v26 = *(_BYTE *)(v8 + 16);
    *(_BYTE *)(v8 + 16) = 3;
  }
  sub_23DDE4F70(v24, v25, v26);
  os_unfair_lock_unlock(v6);

  sub_23DDE4F70(v10, v9, 0);
}

void sub_23DDE53E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  os_unfair_lock_s *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  id *v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  char v30;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  char *v35;
  os_unfair_lock_s *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  char *v41;
  void *v42;
  void *v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_t v54;

  v2 = v1;
  v52 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = sub_23DE35C3C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v48 - v11;
  v13 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(os_unfair_lock_s **)((char *)v2 + *(_QWORD *)(v3 + 120));
  v53 = v3;
  v54 = v16;
  os_unfair_lock_lock(v16);
  v17 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 136));
  swift_beginAccess();
  v18 = *v17;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (!v18)
    {
LABEL_6:
      os_unfair_lock_unlock(v54);
      return;
    }
  }
  v19 = (char *)v2 + *(_QWORD *)(*v2 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v19, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    goto LABEL_6;
  }
  v20 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v51 = v15;
  v20(v15, v12, v4);
  v21 = (id *)((char *)v2 + *(_QWORD *)(*v2 + 128));
  v22 = *((_BYTE *)v21 + 16);
  if ((v22 - 1) > 1u
    || (v49 = *(id *)(v53 + 88), v23 = *v21, sub_23DDE4F38(*v21, v21[1], v22), (v50 = v23) == 0))
  {
    os_unfair_lock_unlock(v54);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v51, v4);
    return;
  }
  v26 = type metadata accessor for HKQueryPublisherResult(0, (uint64_t)v49, v24, v25);
  v27 = sub_23DDE5BCC(v26);
  v49 = 0;
  if ((v27 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v19, v9, v5);
    swift_endAccess();
    v28 = *v21;
    v29 = v21[1];
    *v21 = 0;
    v21[1] = 0;
    v30 = *((_BYTE *)v21 + 16);
    *((_BYTE *)v21 + 16) = 3;
    v31 = v50;
    v32 = v50;
    sub_23DDE4F70(v28, v29, v30);
    v49 = v31;
  }
  swift_beginAccess();
  v33 = *v17;
  sub_23DE35450();
  v34 = sub_23DE35438();
  v35 = v51;
  v36 = v54;
  v37 = v49;
  if ((v34 & 1) != 0)
    goto LABEL_19;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if ((v33 & 0x8000000000000000) == 0)
    {
      if (v33)
      {
        v38 = v33 - 1;
        goto LABEL_18;
      }
LABEL_27:
      __break(1u);
      return;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v38 = sub_23DE35450();
LABEL_18:
  *v17 = v38;
LABEL_19:
  swift_endAccess();
  os_unfair_lock_unlock(v36);
  if (v37)
  {
    v39 = (void *)v2[2];
    v40 = v37;
    objc_msgSend(v39, sel_stopQuery_, v40);
    os_unfair_lock_lock(v36);
    v41 = (char *)v2 + *(_QWORD *)(*v2 + 128);
    v42 = *(void **)v41;
    v43 = (void *)*((_QWORD *)v41 + 1);
    *(_OWORD *)v41 = xmmword_23DE37830;
    v44 = v41[16];
    v41[16] = 3;
    sub_23DDE4F70(v42, v43, v44);
    os_unfair_lock_unlock(v36);

  }
  v45 = sub_23DDE5C64();
  if ((v46 & 1) == 0)
  {
    v47 = v45;
    os_unfair_lock_lock(v36);
    sub_23DDE5DA4((uint64_t)v2, v47);
    os_unfair_lock_unlock(v36);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v35, v4);
}

void sub_23DDE57A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = sub_23DE35C3C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - v6;
  v8 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(os_unfair_lock_s **)((char *)v0 + *(_QWORD *)(v1 + 120));
  os_unfair_lock_lock(v11);
  v12 = *v0;
  v13 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  v15 = *(void **)v13;
  v14 = *(void **)(v13 + 8);
  v16 = *(unsigned __int8 *)(v13 + 16);
  if (*(_BYTE *)(v13 + 16))
  {
    if (v16 == 2)
    {
      v26 = *(id *)(v13 + 8);
      v17 = (uint64_t)v0 + *(_QWORD *)(v12 + 112);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v17, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
      {
        v18 = *(void (**)(char *, uint64_t))(v4 + 8);
        v19 = v15;
        v18(v7, v3);
        os_unfair_lock_unlock(v11);
      }
      else
      {
        v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v2);
        MEMORY[0x24BDAC7A8](v22);
        *(&v25 - 2) = (uint64_t)v0;
        *(&v25 - 1) = (uint64_t)v15;
        v23 = v15;
        sub_23DDE5B44((uint64_t)v10, (uint64_t)sub_23DDE5F9C, (uint64_t)(&v25 - 4), v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v24);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v2);
      }
      sub_23DDE4F70(v15, v26, 2);
      return;
    }
  }
  else
  {
    *(_OWORD *)v13 = xmmword_23DE37830;
    *(_BYTE *)(v13 + 16) = 3;
    sub_23DDE4F70(v15, v14, 0);
    v16 = *(unsigned __int8 *)(v13 + 16);
  }
  if (v16 == 1)
  {
    v20 = *(void **)v13;
    v21 = *(void **)(v13 + 8);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 3;
    sub_23DDE4F70(v20, v21, 1);
  }
  os_unfair_lock_unlock(v11);
}

void sub_23DDE5A00(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  os_unfair_lock_s *v10;
  char *v11;
  void *v12;
  void *v13;
  char v14;
  uint64_t v15;

  v4 = *((_QWORD *)*a1 + 10);
  v5 = sub_23DE35C3C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))((char *)&v15 - v7, 1, 1, v4);
  v9 = (char *)a1 + *((_QWORD *)*a1 + 14);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  v10 = *(os_unfair_lock_s **)((char *)a1 + *((_QWORD *)*a1 + 15));
  os_unfair_lock_unlock(v10);
  objc_msgSend(a1[2], sel_stopQuery_, a2);
  os_unfair_lock_lock(v10);
  v11 = (char *)a1 + *((_QWORD *)*a1 + 16);
  v12 = *(void **)v11;
  v13 = (void *)*((_QWORD *)v11 + 1);
  *(_OWORD *)v11 = xmmword_23DE37830;
  v14 = v11[16];
  v11[16] = 3;
  sub_23DDE4F70(v12, v13, v14);
  os_unfair_lock_unlock(v10);
}

uint64_t sub_23DDE5B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *);
  uint64_t result;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v14(v13);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  return result;
}

uint64_t sub_23DDE5BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  v5 = (6u >> (swift_getEnumCaseMultiPayload() & 7)) & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_23DDE5C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HKQueryPublisherResult(0, v1, v5, v6);
  sub_23DDE5E68(v7, (uint64_t)v4);
  v8 = sub_23DE353FC();
  if ((sub_23DDE5BCC(v7) & 1) != 0)
  {
    v10 = 0;
    sub_23DE353E4();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v8;
}

uint64_t sub_23DDE5DA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v3 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 136));
  swift_beginAccess();
  v4 = *v3;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
    return swift_endAccess();
  sub_23DE35450();
  v5 = sub_23DE35438();
  v6 = sub_23DE35450();
  if ((v5 & 1) != 0)
  {
LABEL_9:
    *v3 = v6;
    return swift_endAccess();
  }
  result = sub_23DE35438();
  if ((result & 1) != 0)
    goto LABEL_7;
  if ((v4 | a2) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v6 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
LABEL_7:
    v6 = sub_23DE35450();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0)
    goto LABEL_9;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_23DDE5E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() >= 2)
    return swift_willThrow();
  else
    return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a2, v5);
}

void sub_23DDE5F18(unint64_t a1)
{
  sub_23DDE5154(a1);
}

void sub_23DDE5F38()
{
  sub_23DDE57A4();
}

uint64_t sub_23DDE5F58()
{
  return sub_23DE35378();
}

void sub_23DDE5F78()
{
  JUMPOUT(0x242645660);
}

void sub_23DDE5F88()
{
  JUMPOUT(0x242645660);
}

void sub_23DDE5F9C()
{
  uint64_t v0;

  sub_23DDE5A00(*(id **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void *static HKBiologicalSex.allCases.getter()
{
  return &unk_250EA2828;
}

void sub_23DDE5FC4(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EA2868;
}

void *static HKBloodType.allCases.getter()
{
  return &unk_250EA28A8;
}

void sub_23DDE5FE0(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EA28A8;
}

void *static HKFitzpatrickSkinType.allCases.getter()
{
  return &unk_250EA2910;
}

void sub_23DDE5FFC(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EA2910;
}

void *static HKWheelchairUse.allCases.getter()
{
  return &unk_250EA2968;
}

uint64_t sub_23DDE6018()
{
  return sub_23DDE6070(&qword_256D06B48, &qword_256D06B50, type metadata accessor for HKBiologicalSex);
}

uint64_t sub_23DDE6044()
{
  return sub_23DDE6070(&qword_256D06B58, &qword_256D06B60, type metadata accessor for HKBloodType);
}

uint64_t sub_23DDE6070(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DDE6108(255, a2, a3);
    result = MEMORY[0x242645660](MEMORY[0x24BEE12E0], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DDE60B0()
{
  return sub_23DDE6070(&qword_256D06B68, &qword_256D06B70, type metadata accessor for HKFitzpatrickSkinType);
}

uint64_t sub_23DDE60DC()
{
  return sub_23DDE6070(&qword_256D06B78, qword_256D06B80, type metadata accessor for HKWheelchairUse);
}

void sub_23DDE6108(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DE3599C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DDE6154(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EA29A0;
}

id DateComponents.age(withCurrentDate:)()
{
  void *v0;
  void *v1;
  id v2;

  v0 = (void *)sub_23DE34FB8();
  v1 = (void *)sub_23DE350D8();
  v2 = objc_msgSend(v0, sel_hk_ageWithCurrentDate_, v1);

  return v2;
}

id HKHealthStore.makeSampleIteratorPublisher(queryDescriptors:sortDescriptors:batchSize:following:upToAndIncluding:distinctBy:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X7>, id *a9@<X8>)
{
  id v18;
  id v19;
  id v20;
  id v22;

  v18 = objc_allocWithZone(MEMORY[0x24BDD3EF0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = a4;
  v20 = a5;
  *a9 = sub_23DDE72A4(a1, a2, a4, a5, a6);
  a9[1] = a3;
  a9[2] = a7;
  a9[3] = a8;
  a9[4] = v22;
  swift_bridgeObjectRetain();
  return v22;
}

id HKHealthStore.makeSampleIteratorPublisher(cursor:batchSize:debugIdentifier:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v5;
  id v6;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

id HKHealthStore.SampleIteratorPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v4;

  v4 = *(id *)v1;
  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v2;
  swift_bridgeObjectRetain();
  return v4;
}

id HKHealthStore.SampleIteratorPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void HKHealthStore.SampleIteratorPublisher.receive<A>(subscriber:)(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  sub_23DDE2738();
  _s23SampleIteratorPublisherV5InnerCMa();
}

uint64_t sub_23DDE639C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;
  id v12;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v3, v2);
  *(_QWORD *)(v9 - 120) = v8;
  *(_QWORD *)(v9 - 112) = v1;
  *(_QWORD *)(v9 - 104) = v6;
  *(_QWORD *)(v9 - 96) = v5;
  v11 = swift_allocObject();
  v12 = v8;
  swift_bridgeObjectRetain();
  sub_23DDE64A0(v4, v9 - 120, (uint64_t)*(id *)(v9 - 136));
  *(_QWORD *)(v9 - 96) = a1;
  *(_QWORD *)(v9 - 88) = MEMORY[0x242645660](&unk_23DE37A90, a1);
  *(_QWORD *)(v9 - 120) = v11;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1(v9 - 120);
}

uint64_t sub_23DDE644C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  sub_23DDE64A0(a1, a2, a3);
  return v6;
}

uint64_t *sub_23DDE64A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v25 = a3;
  v22 = a1;
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 80);
  v7 = sub_23DE35C3C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - v9;
  v11 = *(void **)a2;
  v24 = *(_OWORD *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 24);
  v12 = (uint64_t)v3 + *(_QWORD *)(v5 + 128);
  v13 = *(_QWORD *)(v6 - 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(v12, 1, 1, v6);
  v15 = *(_QWORD *)(*v3 + 136);
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(uint64_t *)((char *)v3 + v15) = (uint64_t)v16;
  v17 = *(_QWORD *)(*v3 + 144);
  *(uint64_t *)((char *)v3 + v17) = sub_23DE35444();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v10, v22, v6);
  v14((uint64_t)v10, 0, 1, v6);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v12, v10, v7);
  swift_endAccess();
  v3[2] = (uint64_t)v11;
  *(_OWORD *)(v3 + 3) = v24;
  v18 = v25;
  v3[5] = v23;
  v3[6] = v18;
  v19 = (uint64_t)v3 + *(_QWORD *)(*v3 + 152);
  *(_QWORD *)v19 = v11;
  *(_BYTE *)(v19 + 8) = 0;
  v20 = v11;
  return v3;
}

id *sub_23DDE661C()
{
  id *v0;
  char *v1;
  uint64_t v2;

  MEMORY[0x242645720](*(id *)((char *)v0 + *((_QWORD *)*v0 + 17)), -1, -1);

  swift_bridgeObjectRelease();
  v1 = (char *)v0 + *((_QWORD *)*v0 + 16);
  v2 = sub_23DE35C3C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_23DDE78E0(*(id *)((char *)v0 + *((_QWORD *)*v0 + 19)), *((_BYTE *)v0 + *((_QWORD *)*v0 + 19) + 8));
  return v0;
}

uint64_t sub_23DDE66B8()
{
  sub_23DDE661C();
  return swift_deallocClassInstance();
}

void sub_23DDE66DC(unint64_t a1)
{
  unint64_t v2;
  char v3;

  v2 = sub_23DE35444();
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0 && (sub_23DE35450(), (sub_23DE35438() & 1) != 0))
  {
    __break(1u);
  }
  else
  {
    sub_23DE35450();
    if ((sub_23DE35438() & 1) != 0 || (sub_23DE35450(), v3 = sub_23DE35438(), v2 < a1) && (v3 & 1) == 0)
    {
      sub_23DDE675C(a1);
      return;
    }
  }
  __break(1u);
}

void sub_23DDE675C(uint64_t a1)
{
  id *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  id v22;
  uint64_t v23;

  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 10);
  v5 = sub_23DE35C3C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - v7;
  v9 = *(os_unfair_lock_s **)((char *)v1 + v3[17]);
  os_unfair_lock_lock(v9);
  v10 = (uint64_t *)((char *)v1 + *((_QWORD *)*v1 + 18));
  swift_beginAccess();
  v11 = *v10;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    sub_23DE35450();
    v12 = sub_23DE35438();
    v13 = sub_23DE35450();
    if ((v12 & 1) == 0)
    {
      if ((sub_23DE35438() & 1) != 0)
        goto LABEL_7;
      if ((v11 | a1) < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v13 = v11 + a1;
      if (__OFADD__(v11, a1))
      {
LABEL_7:
        v13 = sub_23DE35450();
      }
      else if (v13 < 0)
      {
LABEL_20:
        __break(1u);
        return;
      }
    }
    *v10 = v13;
  }
  swift_endAccess();
  v14 = (char *)v1 + *((_QWORD *)*v1 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v15 == 1)
    goto LABEL_15;
  v16 = *v10;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
    goto LABEL_14;
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_14:
    v17 = (char *)v1 + *((_QWORD *)*v1 + 19);
    if (!v17[8])
    {
      v18 = *(id *)v17;
      v19 = sub_23DDE6C60((uint64_t)*(id *)v17);
      v20 = *(id *)v17;
      *(_QWORD *)v17 = v19;
      v21 = v17[8];
      v17[8] = 1;
      v22 = v19;
      sub_23DDE78E0(v20, v21);
      os_unfair_lock_unlock(v9);
      objc_msgSend(v1[6], sel_executeQuery_, v22);

      sub_23DDE78E0(v18, 0);
      return;
    }
  }
LABEL_15:
  os_unfair_lock_unlock(v9);
}

void sub_23DDE6994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v3 = sub_23DE35C3C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v14 - v6;
  v8 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(os_unfair_lock_s **)(v0 + *(_QWORD *)(v1 + 136));
  os_unfair_lock_lock(v11);
  v12 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v2);
    sub_23DDE5B44((uint64_t)v10, (uint64_t)sub_23DDE7B40, v0, v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v13);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v2);
  }
}

void sub_23DDE6B18(id *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  int v10;
  char *v11;
  uint64_t v12;

  v2 = *a1;
  v3 = *((_QWORD *)*a1 + 10);
  v4 = sub_23DE35C3C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - v6;
  v8 = (char *)a1 + v2[19];
  v9 = *(void **)v8;
  v10 = v8[8];
  *(_QWORD *)v8 = 0;
  v8[8] = 2;
  sub_23DDE78BC(v9, v10);
  sub_23DDE78E0(v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 1, 1, v3);
  v11 = (char *)a1 + *((_QWORD *)*a1 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v11, v7, v4);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a1 + *((_QWORD *)*a1 + 17)));
  if (v10 == 1)
    objc_msgSend(a1[6], sel_stopQuery_, v9);
  sub_23DDE78E0(v9, v10);
}

id sub_23DDE6C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v11[5];
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = objc_allocWithZone(MEMORY[0x24BDD3EE8]);
  v11[4] = sub_23DDE7A7C;
  v12 = v1;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDE7A84;
  v11[3] = &block_descriptor_0;
  v5 = _Block_copy(v11);
  swift_retain();
  v6 = objc_msgSend(v4, sel_initWithQueryCursor_limit_resultsHandler_, a1, v3, v5);
  _Block_release(v5);
  swift_release();
  if (*(_QWORD *)(v1 + 40))
  {
    v7 = v6;
    v8 = (void *)sub_23DE357D4();
  }
  else
  {
    v9 = v6;
    v8 = 0;
  }
  objc_msgSend(v6, sel_setDebugIdentifier_, v8);

  return v6;
}

void sub_23DDE6D70(int a1, unint64_t a2, void *a3, id a4)
{
  id v5;

  if (a2)
  {
    sub_23DDE6DD0(a2, a3, 0);
  }
  else if (a4)
  {
    v5 = a4;
    sub_23DDE6DD0((unint64_t)a4, 0, 1);

  }
}

void sub_23DDE6DD0(unint64_t a1, void *a2, int a3)
{
  id *v3;
  id *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  unint64_t v32[2];
  char *v33;
  int v34;
  id v35;
  char *v36;
  os_unfair_lock_t v37;

  v4 = v3;
  v34 = a3;
  v35 = a2;
  v6 = (unint64_t)*v4;
  v7 = *((_QWORD *)*v4 + 10);
  v8 = sub_23DE35C3C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v33 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v32 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v36 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(os_unfair_lock_t *)((char *)v4 + *(_QWORD *)(v6 + 136));
  os_unfair_lock_lock(v37);
  v17 = (uint64_t *)((char *)v4 + *((_QWORD *)*v4 + 18));
  swift_beginAccess();
  v18 = *v17;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    if (!v18)
    {
LABEL_6:
      os_unfair_lock_unlock(v37);
      return;
    }
  }
  v19 = (char *)v4 + *((_QWORD *)*v4 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v19, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    goto LABEL_6;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v36, v14, v7);
  swift_beginAccess();
  v20 = *v17;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
    goto LABEL_14;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      if (v20)
      {
        v21 = v20 - 1;
        goto LABEL_13;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = sub_23DE35450();
LABEL_13:
  *v17 = v21;
LABEL_14:
  v32[0] = a1;
  v32[1] = v6;
  v22 = v34 & 1;
  swift_endAccess();
  v23 = (char *)v4 + *((_QWORD *)*v4 + 19);
  v24 = *(void **)v23;
  v25 = v23[8];
  v34 = v22;
  if (v22 || (v26 = v35, v27 = v35, !v26))
  {
    *(_QWORD *)v23 = 0;
    v23[8] = 2;
    sub_23DDE78BC(v24, v25);
    sub_23DDE78E0(v24, v25);
    v28 = v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v33, 1, 1, v7);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v19, v28, v8);
    swift_endAccess();
  }
  else
  {
    *(_QWORD *)v23 = v35;
    v23[8] = 0;
    sub_23DDE78BC(v24, v25);
    sub_23DDE78E0(v24, v25);
  }
  v29 = v36;
  os_unfair_lock_unlock(v37);
  if (v25 == 1)
    objc_msgSend(v4[6], sel_stopQuery_, v24);
  v30 = sub_23DDE7140(v32[0], (uint64_t)v35, v34);
  if ((v31 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v7);
    sub_23DDE78E0(v24, v25);
  }
  else
  {
    sub_23DDE675C(v30);
    sub_23DDE78E0(v24, v25);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v7);
  }
}

uint64_t sub_23DDE7140(unint64_t a1, uint64_t a2, char a3)
{
  id v6;
  uint64_t v7;

  if ((a3 & 1) != 0)
  {
    v6 = (id)a1;
    swift_willThrow();
    if (a1)
    {
      sub_23DE353E4();

      return 0;
    }
    goto LABEL_5;
  }
  if (!(a1 >> 62))
  {
LABEL_5:
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  v7 = sub_23DE35E70();
LABEL_6:
  if (v7)
    v7 = sub_23DE353FC();
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0 || !a2)
  {
    sub_23DE353E4();
    return 0;
  }
  return v7;
}

void sub_23DDE7260(unint64_t a1)
{
  sub_23DDE66DC(a1);
}

void sub_23DDE7280()
{
  sub_23DDE6994();
}

id sub_23DDE72A4(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  void *v5;
  void *v6;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v6 = v5;
  sub_23DDE7B5C(0, &qword_254327AE0);
  v11 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  if (!a2)
  {
    v12 = 0;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v13 = 0;
    goto LABEL_6;
  }
  sub_23DDE7B5C(0, &qword_254328848);
  v12 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_5;
LABEL_3:
  v13 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
LABEL_6:
  v14 = objc_msgSend(v6, sel_initWithQueryDescriptors_sortDescriptors_followingAnchor_upToAndIncludingAnchor_distinctByKeyPaths_, v11, v12, a3, a4, v13);

  return v14;
}

void _s23SampleIteratorPublisherV5InnerCMa()
{
  JUMPOUT(0x2426455E8);
}

uint64_t sub_23DDE73CC()
{
  return MEMORY[0x24BEE3F20];
}

void _s23SampleIteratorPublisherVwxx(id *a1)
{

  swift_bridgeObjectRelease();
}

uint64_t _s23SampleIteratorPublisherVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  v6 = v4;
  return a1;
}

uint64_t _s23SampleIteratorPublisherVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 32);
  v8 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v9 = v7;

  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s23SampleIteratorPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t _s23SampleIteratorPublisherVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23SampleIteratorPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleIteratorPublisher()
{
  return &type metadata for HKHealthStore.SampleIteratorPublisher;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwxx(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleIteratorPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SampleIteratorPublisher.Configuration;
}

uint64_t sub_23DDE77C4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE35C3C();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23DDE7870()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DDE7878(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DDE78BC(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

id sub_23DDE78BC(id result, unsigned __int8 a2)
{
  if (a2 <= 1u)
    return result;
  return result;
}

void sub_23DDE78D0(uint64_t a1)
{
  sub_23DDE78E0(*(id *)a1, *(_BYTE *)(a1 + 8));
}

void sub_23DDE78E0(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u)

}

uint64_t sub_23DDE78F4(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DDE78BC(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_23DDE78E0(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_23DDE7958(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_23DDE78E0(v4, v5);
  return a1;
}

uint64_t sub_23DDE7994(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_23DDE79DC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23DDE7A20(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23DDE7A38(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void _s23SampleIteratorPublisherV5InnerC5StateOMa()
{
  JUMPOUT(0x2426455E8);
}

void sub_23DDE7A5C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDE7A6C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDE7A7C(int a1, unint64_t a2, void *a3, id a4)
{
  sub_23DDE6D70(a1, a2, a3, a4);
}

uint64_t sub_23DDE7A84(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, void *, void *);
  id v10;
  id v11;
  id v12;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, &qword_254327B90);
    v7 = sub_23DE35948();
  }
  swift_retain();
  v10 = a2;
  v11 = a4;
  v12 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_23DDE7B40()
{
  id *v0;

  sub_23DDE6B18(v0);
}

uint64_t sub_23DDE7B5C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t DefaultOnlyLoggingCategory.rawString.getter()
{
  return 0x746C7561666564;
}

uint64_t DefaultOnlyLoggingCategory.rawValue.getter()
{
  return 0x746C7561666564;
}

uint64_t DefaultOnlyLoggingCategory.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DE35ED0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static DefaultOnlyLoggingCategory.allCases.getter()
{
  return &unk_250EA2A10;
}

uint64_t sub_23DDE7C3C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DE35ED0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_23DDE7C8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DefaultOnlyLoggingCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23DDE7CB0(_QWORD *a1@<X8>)
{
  *a1 = &unk_250EA2A70;
}

uint64_t sub_23DDE7CC0()
{
  return DefaultOnlyLoggingCategory.rawValue.getter();
}

void SensitiveLogger.init(subsystem:sensitiveLogger:)()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  type metadata accessor for SensitiveLogger();
}

uint64_t sub_23DDE7DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v10 = v1 + *(int *)(a1 + 68);
  v11 = sub_23DE3536C();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v8, v11);
  sub_23DE35D2C();
  swift_getTupleTypeMetadata2();
  sub_23DE35978();
  *(_QWORD *)(v9 - 144) = sub_23DE35714();
  v13 = *(_QWORD *)(v9 - 288);
  *(_QWORD *)(v9 - 224) = v2;
  *(_QWORD *)(v9 - 216) = v13;
  *(_QWORD *)(v9 - 208) = *(_QWORD *)(v9 - 280);
  *(_QWORD *)(v9 - 200) = v3;
  *(_QWORD *)(v9 - 192) = v7;
  *(_QWORD *)(v9 - 184) = v4;
  v14 = *(_QWORD *)(v9 - 264);
  *(_QWORD *)(v9 - 176) = *(_QWORD *)(v9 - 272);
  *(_QWORD *)(v9 - 168) = v14;
  sub_23DE35720();
  swift_getAssociatedConformanceWitness();
  sub_23DE35900();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 248) + 8))(v6, v5);
  result = swift_bridgeObjectRelease();
  **(_QWORD **)(v9 - 256) = *(_QWORD *)(v9 - 136);
  return result;
}

void type metadata accessor for SensitiveLogger()
{
  JUMPOUT(0x2426455E8);
}

uint64_t sub_23DDE7F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;

  sub_23DDE83C8();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a5);
  v16 = *(void (**)(uint64_t, uint64_t))(a7 + 8);
  swift_bridgeObjectRetain();
  v16(a5, a7);
  sub_23DE35360();
  v17 = sub_23DE3536C();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v13, 0, 1, v17);
  sub_23DE35720();
  return sub_23DE35738();
}

uint64_t SensitiveLogger.log(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_23DDE8190(a1, a2, a3, a4, MEMORY[0x24BEE7928]);
}

uint64_t sub_23DDE806C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v5)
  {
    __break(1u);
LABEL_6:
    JUMPOUT(0x2426447FCLL);
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel_showSensitiveLogItems);

  if (!v7)
  {
    sub_23DE3536C();
    goto LABEL_6;
  }
  v8 = v2 + *(int *)(a1 + 68);
  v9 = sub_23DE3536C();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a2, v8, v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
}

uint64_t SensitiveLogger.info(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_23DDE8190(a1, a2, a3, a4, MEMORY[0x24BEE78F0]);
}

uint64_t SensitiveLogger.debug(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_23DDE8190(a1, a2, a3, a4, MEMORY[0x24BEE7908]);
}

uint64_t SensitiveLogger.error(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_23DDE8190(a1, a2, a3, a4, MEMORY[0x24BEE7910]);
}

uint64_t SensitiveLogger.fault(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_23DDE8190(a1, a2, a3, a4, MEMORY[0x24BEE7920]);
}

uint64_t sub_23DDE8190(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  sub_23DDE83C8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDE806C(a4, (uint64_t)v10);
  v11 = sub_23DE3536C();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_23DDE841C((uint64_t)v10);
  swift_retain_n();
  v14 = sub_23DE35354();
  v15 = a5();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = a2;
    v19 = v17;
    v23 = v17;
    *(_DWORD *)v16 = 136315138;
    v22[1] = v16 + 4;
    v20 = v18();
    v22[2] = sub_23DDE8458(v20, v21, &v23);
    sub_23DE35C48();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DDE0000, v14, v15, "%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242645720](v19, -1, -1);
    MEMORY[0x242645720](v16, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
}

uint64_t sub_23DDE8398(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23DDE7F0C(a1, a2, v2[8], v2[9], v2[2], v2[3], v2[4]);
}

void sub_23DDE83C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543272E0)
  {
    sub_23DE3536C();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543272E0);
  }
}

uint64_t sub_23DDE841C(uint64_t a1)
{
  uint64_t v2;

  sub_23DDE83C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DDE8458(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23DDE8528(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23DDE9010((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23DDE9010((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23DDE8528(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23DE35C54();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23DDE86E0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23DE35D8C();
  if (!v8)
  {
    sub_23DE35E40();
    __break(1u);
LABEL_17:
    result = sub_23DE35EB8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23DDE86E0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23DDE8774(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DDE88E8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23DDE88E8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23DDE8774(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23DE26D60(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23DE35D20();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23DE35E40();
      __break(1u);
LABEL_10:
      v2 = sub_23DE3587C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23DE35EB8();
    __break(1u);
LABEL_14:
    result = sub_23DE35E40();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23DDE88E8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDE3BB0(0, qword_256D06C88, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

unint64_t sub_23DDE8A4C()
{
  unint64_t result;

  result = qword_2543272B0;
  if (!qword_2543272B0)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for DefaultOnlyLoggingCategory, &type metadata for DefaultOnlyLoggingCategory);
    atomic_store(result, (unint64_t *)&qword_2543272B0);
  }
  return result;
}

unint64_t sub_23DDE8A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254327388;
  if (!qword_254327388)
  {
    sub_23DDE3BB0(255, &qword_254327380, (uint64_t)&type metadata for DefaultOnlyLoggingCategory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242645660](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_254327388);
  }
  return result;
}

uint64_t dispatch thunk of static Defaultable.default.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RawStringContaining.rawString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t getEnumTagSinglePayload for DefaultOnlyLoggingCategory(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DefaultOnlyLoggingCategory(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DDE8B98 + 4 * byte_23DE37AD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DDE8BB8 + 4 * byte_23DE37AD5[v4]))();
}

_BYTE *sub_23DDE8B98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DDE8BB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DDE8BC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DDE8BC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DDE8BD0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DDE8BD8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23DDE8BE4()
{
  return 0;
}

ValueMetadata *type metadata accessor for DefaultOnlyLoggingCategory()
{
  return &type metadata for DefaultOnlyLoggingCategory;
}

uint64_t sub_23DDE8BFC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23DDE8C04()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE3536C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DDE8C7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 68);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23DE3536C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_23DDE8D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 68);
  v5 = sub_23DE3536C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_23DDE8D5C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 68);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23DE3536C();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *sub_23DDE8DCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 68);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_23DDE8E40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 68);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_23DDE8E9C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 68);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_23DDE8F08()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDE8F14(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DE3536C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 68)], a2, v8);
  }
}

uint64_t sub_23DDE8F90()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DDE8F9C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23DE3536C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 68)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23DDE9010(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BOOL static OSAllocatedUnfairRecursiveLock.Ownership.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t OSAllocatedUnfairRecursiveLock.Ownership.hash(into:)()
{
  return sub_23DE36008();
}

uint64_t OSAllocatedUnfairRecursiveLock.Ownership.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

BOOL sub_23DDE90C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static OSAllocatedUnfairRecursiveLock.Ownership.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_23DDE90D4()
{
  return OSAllocatedUnfairRecursiveLock.Ownership.hashValue.getter();
}

uint64_t sub_23DDE90DC()
{
  return OSAllocatedUnfairRecursiveLock.Ownership.hash(into:)();
}

uint64_t sub_23DDE90E4()
{
  sub_23DE35FFC();
  OSAllocatedUnfairRecursiveLock.Ownership.hash(into:)();
  return sub_23DE36014();
}

void sub_23DDE9120()
{
  JUMPOUT(0x242645660);
}

uint64_t type metadata accessor for OSAllocatedUnfairRecursiveLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OSAllocatedUnfairRecursiveLock);
}

uint64_t sub_23DDE913C()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for FeatureStatus.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23DDE91D4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DDE9220 + 4 * byte_23DE37C65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DDE9254 + 4 * byte_23DE37C60[v4]))();
}

uint64_t sub_23DDE9254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDE925C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDE9264);
  return result;
}

uint64_t sub_23DDE9270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDE9278);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DDE927C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDE9284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDE9290(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23DDE9298(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for OSAllocatedUnfairRecursiveLock.Ownership(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OSAllocatedUnfairRecursiveLock.Ownership);
}

uint64_t sub_23DDE92B0(uint64_t a1)
{
  return sub_23DDE9350(a1, qword_25432A700);
}

uint64_t sub_23DDE92DC(uint64_t a1)
{
  return sub_23DDE9350(a1, qword_254328860);
}

uint64_t static Logger.mentalHealth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DDE93E0(&qword_254328AE8, (uint64_t)qword_254328860, a1);
}

uint64_t sub_23DDE9324(uint64_t a1)
{
  return sub_23DDE9350(a1, qword_2543272B8);
}

uint64_t sub_23DDE9350(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23DE3536C();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_23DE35360();
}

uint64_t static Logger.notifications.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DDE93E0(&qword_2543272D0, (uint64_t)qword_2543272B8, a1);
}

uint64_t sub_23DDE93E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_23DE3536C();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t HKHealthStore.sharedSummaryPublisher(transaction:package:includedIdentifiers:includedObjectTypes:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_23DDE9630();
  v12 = *(_QWORD *)(v11 - 8);
  v23 = v11;
  v24 = v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s27SharedSummaryQueryPublisherCMa();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 104) = a1;
  *(_QWORD *)(v15 + 112) = a2;
  *(_QWORD *)(v15 + 120) = a3;
  *(_QWORD *)(v15 + 128) = a4;
  *(_QWORD *)(v15 + 136) = a5;
  *(_BYTE *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 80) = v5;
  *(_QWORD *)(v15 + 88) = 0;
  v25 = sub_23DDE9EC8(0);
  sub_23DDE96C4(0);
  v22 = v16;
  sub_23DDE9730();
  sub_23DDE3384(&qword_254327038, (uint64_t (*)(uint64_t))sub_23DDE96C4, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
  v17 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v5;
  sub_23DE35504();
  swift_release();
  sub_23DDE3384(&qword_254327058, (uint64_t (*)(uint64_t))sub_23DDE9630, MEMORY[0x24BDB94C8]);
  v19 = v23;
  v20 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v19);
  return v20;
}

void sub_23DDE9630()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327060)
  {
    sub_23DDE96C4(255);
    sub_23DDE9730();
    sub_23DDE3384(&qword_254327038, (uint64_t (*)(uint64_t))sub_23DDE96C4, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
    v0 = sub_23DE35384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327060);
  }
}

void sub_23DDE96C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t PublisherBase;
  uint64_t v6;

  if (!qword_254327040)
  {
    sub_23DDE9730();
    v3 = v2;
    v4 = sub_23DDE2738();
    PublisherBase = type metadata accessor for QueryPublisherBase(a1, v3, v4, MEMORY[0x24BEE3F20]);
    if (!v6)
      atomic_store(PublisherBase, (unint64_t *)&qword_254327040);
  }
}

void sub_23DDE9730()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327390)
  {
    sub_23DDE7B5C(255, &qword_254327A50);
    v0 = sub_23DE3599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327390);
  }
}

uint64_t _s27SharedSummaryQueryPublisherCMa()
{
  uint64_t result;

  result = qword_254327670;
  if (!qword_254327670)
    return swift_getSingletonMetadata();
  return result;
}

id sub_23DDE97D0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v2 = (void *)v0[13];
  v1 = v0[14];
  v3 = v0[15];
  v4 = v0[16];
  v5 = v0[17];
  v6 = swift_allocObject();
  swift_weakInit();
  v7 = objc_allocWithZone(MEMORY[0x24BDD3F38]);
  swift_bridgeObjectRetain();
  v8 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_23DDE9A38(v8, v1, v3, v4, v5, (uint64_t)sub_23DDE9E64, v6);
}

void sub_23DDE9884(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (a4)
    {
      v7 = a4;
      v8 = a4;
      sub_23DE0409C(a4);
      swift_release();

    }
    else
    {
      if (a2)
      {
        v9 = swift_bridgeObjectRetain();
        sub_23DE333CC(v9);
        swift_bridgeObjectRelease();
        if ((a3 & 1) != 0)
          sub_23DE0409C(0);
      }
      swift_release();
    }
  }
}

void sub_23DDE9944()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23DDE9970()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDE99B4()
{
  uint64_t v0;
  id *v1;

  if (*(_QWORD *)(v0 + 88))
    objc_msgSend(*(id *)(v0 + 80), sel_stopQuery_);
  v1 = (id *)sub_23DE33740();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id sub_23DDE9A38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v19[6];

  if (a3)
  {
    v13 = (void *)sub_23DE357D4();
    swift_bridgeObjectRelease();
    if (a4)
      goto LABEL_3;
LABEL_6:
    v14 = 0;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v13 = 0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v14 = (void *)sub_23DE35A08();
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_7;
LABEL_4:
  sub_23DDE7B5C(0, &qword_254327BD8);
  sub_23DDE9E6C();
  v15 = (void *)sub_23DE35A08();
  swift_bridgeObjectRelease();
LABEL_8:
  v19[4] = a6;
  v19[5] = a7;
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 1107296256;
  v19[2] = sub_23DDE9BAC;
  v19[3] = &block_descriptor_1;
  v16 = _Block_copy(v19);
  v17 = objc_msgSend(v7, sel_initWithTransaction_package_includedIdentifiers_includedObjectTypes_resultsHandler_, a1, v13, v14, v15, v16);

  _Block_release(v16);
  swift_release();
  return v17;
}

uint64_t sub_23DDE9BAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, uint64_t, void *);
  id v10;
  id v11;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, &qword_254327A50);
    v7 = sub_23DE35948();
  }
  swift_retain();
  v10 = a2;
  v11 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDE9C5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DDE9C68()
{
  return swift_initClassMetadata2();
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwxx(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s27SharedSummaryQueryPublisherC15QueryParametersVwcp(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(a2 + 32);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s27SharedSummaryQueryPublisherC15QueryParametersVMa()
{
  return &_s27SharedSummaryQueryPublisherC15QueryParametersVN;
}

uint64_t sub_23DDE9E40()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_23DDE9E64(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  sub_23DDE9884(a1, a2, a3, a4);
}

unint64_t sub_23DDE9E6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254327BE0[0];
  if (!qword_254327BE0[0])
  {
    v1 = sub_23DDE7B5C(255, &qword_254327BD8);
    result = MEMORY[0x242645660](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, qword_254327BE0);
  }
  return result;
}

uint64_t sub_23DDE9EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 56) = a1;
  sub_23DDE9F28();
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 32) = xmmword_23DE37830;
  v3 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v1 + 48) = 2;
  *(_QWORD *)(v1 + 64) = v3;
  *(_BYTE *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 24) = 257;
  return v1;
}

void sub_23DDE9F28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328808)
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DE35D80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328808);
  }
}

uint64_t sub_23DDE9F88(uint64_t a1)
{
  sub_23DE3599C();
  return a1;
}

uint64_t HKKeyValueDomain.publisher<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  id v4;

  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  v4 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t HKKeyValueDomain.Publisher.init(keyValueDomain:key:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t HKKeyValueDomain.makePublisherWithCurrentValue<A>(forKey:observingChanges:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = a3;
  v41 = a1;
  v42 = a2;
  v8 = v5;
  ObjectType = swift_getObjectType();
  v39 = sub_23DE35C3C();
  v9 = sub_23DE3599C();
  sub_23DDE2738();
  MEMORY[0x242645660](MEMORY[0x24BEE12C8], v9);
  v10 = sub_23DE353D8();
  v11 = a4;
  v13 = type metadata accessor for HKKeyValueDomain.Publisher(255, a4, a5, v12);
  MEMORY[0x242645660](MEMORY[0x24BDB9970], v10);
  MEMORY[0x242645660](&protocol conformance descriptor for HKKeyValueDomain.Publisher<A>, v13);
  v36 = sub_23DE3539C();
  v33 = sub_23DE36020();
  v32 = MEMORY[0x242645660](MEMORY[0x24BDBA1D0], v33);
  v14 = sub_23DE354EC();
  v35 = MEMORY[0x242645660](MEMORY[0x24BDB9530], v36);
  v34 = MEMORY[0x242645660](MEMORY[0x24BDB9E90], v14);
  v44 = v36;
  v45 = v14;
  v46 = v35;
  v47 = v34;
  v15 = sub_23DE353CC();
  v38 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v32 - v17;
  v37 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v32 - v19;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v11;
  *(_QWORD *)(v21 + 24) = a5;
  v22 = v11;
  v23 = a5;
  v24 = v8;
  *(_QWORD *)(v21 + 32) = v8;
  v26 = v41;
  v25 = v42;
  *(_QWORD *)(v21 + 40) = v41;
  *(_QWORD *)(v21 + 48) = v25;
  *(_BYTE *)(v21 + 56) = v43;
  *(_QWORD *)(v21 + 64) = ObjectType;
  v27 = v24;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = v22;
  v28[3] = v23;
  v28[4] = v27;
  v28[5] = v26;
  v28[6] = v25;
  v29 = v27;
  swift_bridgeObjectRetain();
  sub_23DE35450();
  sub_23DE35540();
  swift_release();
  MEMORY[0x242645660](MEMORY[0x24BDB98F0], v15);
  v30 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v14);
  return v30;
}

uint64_t type metadata accessor for HKKeyValueDomain.Publisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKKeyValueDomain.Publisher);
}

uint64_t sub_23DDEA30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;

  v13[5] = a5;
  sub_23DE35C3C();
  sub_23DDE2738();
  v14 = sub_23DE36044();
  v7 = MEMORY[0x24BDAC7A8](v14);
  v13[7] = (char *)v13 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v13[6] = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  sub_23DDEA738(a6, (uint64_t)v13 - v11);
  return sub_23DE36038();
}

uint64_t sub_23DDEA718()
{
  return objectdestroyTm();
}

uint64_t sub_23DDEA720()
{
  uint64_t v0;

  return sub_23DDEA30C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16));
}

uint64_t sub_23DDEA738@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  int v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_23DDEC46C();
  MEMORY[0x24BDAC7A8](v5);
  if (swift_dynamicCastMetatype())
  {
    result = sub_23DE35B64();
    if (v2)
      return result;
    v7 = (uint64_t *)&unk_2543273B0;
    goto LABEL_7;
  }
  if (swift_dynamicCastMetatype())
  {
    result = sub_23DE35B70();
    if (v2)
      return result;
    v7 = (uint64_t *)&unk_254327BC8;
    goto LABEL_7;
  }
  sub_23DE350FC();
  if (swift_dynamicCastMetatype())
  {
    result = sub_23DE35B7C();
    if (!v2)
    {
      v12 = swift_dynamicCast();
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
      if (v12)
      {
        v11 = a2;
        v10 = 0;
      }
      else
      {
        v11 = a2;
        v10 = 1;
      }
      return v9(v11, v10, 1, a1);
    }
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    result = sub_23DE35BA0();
    if (v2)
      return result;
    v7 = (uint64_t *)&unk_2543273B8;
    goto LABEL_7;
  }
  sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype())
    {
      result = sub_23DE35B94();
      if (v2)
        return result;
      v7 = &qword_254328840;
    }
    else
    {
      result = sub_23DE35B4C();
      if (v2)
        return result;
      v7 = &qword_254327BC0;
    }
LABEL_7:
    sub_23DDEC514(0, (unint64_t *)v7);
LABEL_8:
    v8 = swift_dynamicCast();
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
    v10 = v8 ^ 1u;
    v11 = a2;
    return v9(v11, v10, 1, a1);
  }
  result = sub_23DE35B88();
  if (!v2)
  {
    sub_23DDEC4C0(0, &qword_256D06DF0, (unint64_t *)&qword_254327B98);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_23DDEAA14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = a2;
  swift_bridgeObjectRetain();
  v10 = sub_23DE35C3C();
  sub_23DE35F3C();
  v11 = *(_QWORD *)(v10 - 8);
  swift_allocObject();
  sub_23DE35960();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, a1, v10);
  sub_23DE3599C();
  v14 = type metadata accessor for HKKeyValueDomain.Publisher(0, a5, a6, v13);
  MEMORY[0x242645660](&protocol conformance descriptor for HKKeyValueDomain.Publisher<A>, v14);
  sub_23DE3554C();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDEAB3C()
{
  return objectdestroyTm();
}

uint64_t sub_23DDEAB44(uint64_t a1)
{
  uint64_t v1;

  return sub_23DDEAA14(a1, *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

id HKKeyValueDomain.Publisher.keyValueDomain.getter()
{
  id *v0;

  return *v0;
}

uint64_t HKKeyValueDomain.Publisher.key.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void HKKeyValueDomain.Publisher.receive<A>(subscriber:)()
{
  _s12SubscriptionCMa();
}

uint64_t sub_23DDEABD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  uint64_t *v7;
  _QWORD v9[15];

  swift_allocObject();
  v6 = v4;
  swift_bridgeObjectRetain();
  v7 = sub_23DDEB634(v6, v3, v1, v2);

  v9[3] = a1;
  v9[4] = MEMORY[0x242645660](&unk_23DE37F30, a1);
  v9[0] = v7;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

void _s12SubscriptionCMa()
{
  JUMPOUT(0x2426455E8);
}

void sub_23DDEAC74()
{
  HKKeyValueDomain.Publisher.receive<A>(subscriber:)();
}

void sub_23DDEAC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  os_unfair_lock_s *v8;

  v6 = *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 128));
  _s17SubscriptionStateVMa(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v7 = (uint64_t *)(v6 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v6 + 16));
  v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  sub_23DDEAD3C(v7, a1);
  os_unfair_lock_unlock(v8);
}

uint64_t sub_23DDEAD3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  v4 = *a1;
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) == 0)
  {
    sub_23DE35450();
    v6 = sub_23DE35438();
    result = sub_23DE35450();
    v7 = result;
    if ((v6 & 1) == 0)
    {
      result = sub_23DE35438();
      if ((result & 1) == 0)
      {
        if ((v4 | a2) < 0)
        {
          __break(1u);
          goto LABEL_12;
        }
        v7 = v4 + a2;
        if (!__OFADD__(v4, a2))
        {
          if ((v7 & 0x8000000000000000) == 0)
            goto LABEL_9;
LABEL_12:
          __break(1u);
          return result;
        }
      }
      result = sub_23DE35450();
      v7 = result;
    }
LABEL_9:
    *a1 = v7;
  }
  return result;
}

void sub_23DDEADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  void *v8;
  id v9;

  v5 = *(_QWORD *)(v4 + *(_QWORD *)(*(_QWORD *)v4 + 128));
  _s17SubscriptionStateVMa(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  sub_23DDEC4C0(0, &qword_254327E68, &qword_254327E60);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  v8 = *(void **)(v6 + 8);
  v9 = v8;
  os_unfair_lock_unlock(v7);
  if (v8)
  {
    objc_msgSend(v9, sel_stopObservation_, v4);

  }
}

uint64_t sub_23DDEAEBC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v4 = sub_23DE35C3C();
  v16 = *(_QWORD *)(v4 - 8);
  v17 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - v5;
  v7 = *(_QWORD *)((char *)v0 + *(_QWORD *)(v2 + 128));
  _s17SubscriptionStateVMa(0, v3, v8, v9);
  v10 = (uint64_t *)(v7 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16));
  v11 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_23DDEB0A0(v10, &v18);
  os_unfair_lock_unlock(v11);
  v12 = v18;
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) != 0)
    goto LABEL_4;
  if (v12 < 0)
  {
    __break(1u);
    return result;
  }
  if (v12)
  {
LABEL_4:
    sub_23DDEA738(v3, (uint64_t)v6);
    v14 = (uint64_t *)(v7 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v7 + 16));
    v15 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(_QWORD *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v15);
    sub_23DDEB140(v14, (uint64_t)v6, v1);
    os_unfair_lock_unlock(v15);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v17);
  }
  return result;
}

uint64_t sub_23DDEB0A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) == 0)
  {
    if (v4 < 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (!v4)
      goto LABEL_11;
  }
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) != 0)
  {
LABEL_11:
    *a2 = v4;
    return result;
  }
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) != 0)
  {
    result = sub_23DE35450();
LABEL_10:
    *a1 = result;
    goto LABEL_11;
  }
  if (v4 < 0)
    goto LABEL_13;
  if (v4)
  {
    result = v4 - 1;
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_23DDEB140(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *);
  char *v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;

  v47 = a2;
  v4 = *a3;
  v43 = a3;
  v44 = v4;
  v5 = *(_QWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DE35C3C();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v40 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v38 - v11;
  v13 = *(_QWORD *)(v8 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v46 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v38 - v16;
  v20 = *(int *)(_s17SubscriptionStateVMa(0, v5, v18, v19) + 32);
  v45 = a1;
  v21 = *(void (**)(char *))(v13 + 16);
  v42 = (uint64_t)a1 + v20;
  v21(v17);
  v41 = TupleTypeMetadata2;
  v22 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v21)(v12, v47, v8);
  ((void (*)(char *, char *, uint64_t))v21)(v22, v17, v8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v23(v12, 1, v5) == 1)
  {
    v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v17, v8);
    v25 = v13;
    if (v23(v22, 1, v5) == 1)
      return ((uint64_t (*)(char *, uint64_t))v24)(v12, v8);
    goto LABEL_6;
  }
  v38 = v13;
  ((void (*)(char *, char *, uint64_t))v21)(v46, v12, v8);
  if (v23(v22, 1, v5) == 1)
  {
    v27 = v38;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v8);
    v28 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25 = v27;
    v28(v46, v5);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
    v29 = v45;
    goto LABEL_7;
  }
  v34 = v39;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v39, v22, v5);
  v35 = v46;
  LODWORD(v41) = sub_23DE357C8();
  v36 = *(void (**)(char *, uint64_t))(v6 + 8);
  v36(v34, v5);
  v25 = v38;
  v37 = *(void (**)(char *, uint64_t))(v38 + 8);
  v37(v17, v8);
  v36(v35, v5);
  result = ((uint64_t (*)(char *, uint64_t))v37)(v12, v8);
  v29 = v45;
  if ((v41 & 1) != 0)
    return result;
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24))(v42, v47, v8);
  v30 = sub_23DE353FC();
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) == 0)
  {
    if (v30 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (!v30)
      return result;
  }
  v31 = *v29;
  sub_23DE35450();
  result = sub_23DE35438();
  if ((result & 1) != 0)
    return result;
  sub_23DE35450();
  v32 = sub_23DE35438();
  result = sub_23DE35450();
  v33 = result;
  if ((v32 & 1) == 0)
  {
    result = sub_23DE35438();
    if ((result & 1) != 0)
    {
LABEL_16:
      result = sub_23DE35450();
      v33 = result;
      goto LABEL_20;
    }
    if (((v31 | v30) & 0x8000000000000000) == 0)
    {
      v33 = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        if ((v33 & 0x8000000000000000) == 0)
          goto LABEL_20;
LABEL_24:
        __break(1u);
        return result;
      }
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  *v29 = v33;
  return result;
}

uint64_t sub_23DDEB4D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  swift_retain();
  sub_23DDEAEBC();

  return swift_release();
}

uint64_t sub_23DDEB514()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_23DDEB568()
{
  sub_23DDEB514();
  return swift_deallocClassInstance();
}

void sub_23DDEB588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23DDEAC88(a1, a2, a3, a4);
}

void sub_23DDEB5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23DDEADE4(a1, a2, a3, a4);
}

uint64_t sub_23DDEB5C8()
{
  type metadata accessor for os_unfair_lock_s(255);
  sub_23DE35D80();
  return sub_23DE35D74();
}

uint64_t *sub_23DDEB634(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a4;
  v24 = a2;
  v25 = a3;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = sub_23DE35C3C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - v10;
  v14 = _s17SubscriptionStateVMa(0, v7, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v22 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v11, 1, 1, v7);
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = a1;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v17[*(int *)(v14 + 32)], v11, v8);
  v18 = a1;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = sub_23DDEB5C8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 88) - 8) + 16))((uint64_t)v4 + *(_QWORD *)(*v4 + 112), v23);
  v19 = (uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 120));
  v20 = v25;
  *v19 = v24;
  v19[1] = v20;
  objc_msgSend(v18, sel_startObservation_, v4);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v4;
}

uint64_t sub_23DDEB7B4(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *sub_23DDEB7DC(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DDEB818(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23DDEB878(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17ObserverPublisherV13ConfigurationVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17ObserverPublisherV13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_23DDEB944()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23DDEB9CC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE35C3C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DDEBA50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  id v19;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v14 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = *v14;
    *v13 = *v14;
    v16 = (void *)(((unint64_t)v13 + v7 + 8) & ~v7);
    v17 = (const void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    v19 = v15;
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_23DDEBB78(uint64_t a1, uint64_t a2)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (id *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((unint64_t)v3 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

_QWORD *sub_23DDEBBF8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  id v13;
  size_t v14;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  *v4 = *v5;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)(((unint64_t)v4 + v9 + 8) & ~v9);
  v11 = (const void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  v13 = v6;
  if (v12(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84))
      v14 = *(_QWORD *)(v8 + 64);
    else
      v14 = *(_QWORD *)(v8 + 64) + 1;
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

_QWORD *sub_23DDEBCCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  size_t v17;

  *a1 = *a2;
  v5 = (void **)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = *v6;
  v8 = *v5;
  *v5 = *v6;
  v9 = v7;

  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (void *)(((unint64_t)v5 + v12 + 8) & ~v12);
  v14 = (void *)(((unint64_t)v6 + v12 + 8) & ~v12);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v6) = v15(v13, 1, v10);
  v16 = v15(v14, 1, v10);
  if ((_DWORD)v6)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v17 = *(_QWORD *)(v11 + 64);
  else
    v17 = *(_QWORD *)(v11 + 64) + 1;
  memcpy(v13, v14, v17);
  return a1;
}

_QWORD *sub_23DDEBDF8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  size_t v11;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84))
      v11 = *(_QWORD *)(v7 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64) + 1;
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

_QWORD *sub_23DDEBEC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  size_t v15;

  *a1 = *a2;
  v5 = (void **)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = *v5;
  *v5 = *v6;

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (void *)(((unint64_t)v5 + v10 + 8) & ~v10);
  v12 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v6) = v13(v11, 1, v8);
  v14 = v13(v12, 1, v8);
  if ((_DWORD)v6)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  }
  if (*(_DWORD *)(v9 + 84))
    v15 = *(_QWORD *)(v9 + 64);
  else
    v15 = *(_QWORD *)(v9 + 64) + 1;
  memcpy(v11, v12, v15);
  return a1;
}

uint64_t sub_23DDEBFF0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 16) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = (unint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *v17;
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        if ((v18 + 1) >= 2)
          return v18;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_23DDEC184(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_23DDEC3F4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23DDEC3FC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23DDEC41C()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23DDEC42C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23DDEC434()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t _s17SubscriptionStateVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s17SubscriptionStateVMn);
}

void sub_23DDEC44C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDEC45C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDEC46C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328878)
  {
    sub_23DE350FC();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328878);
  }
}

void sub_23DDEC4C0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_23DDE7B5C(255, a3);
    v4 = sub_23DE35C3C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DDEC514(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DE35C3C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DDEC558@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2, v3);
}

uint64_t HKKeyValueDomain.getBool(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3CF0, (void (*)(_QWORD))sub_23DDEC6F4);
}

void sub_23DDEC5CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23DDEF73C;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_23DDEFA20;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDEC7E8;
  v11[3] = &block_descriptor_192;
  v9 = _Block_copy(v11);
  v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DDEC6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEC5CC(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDEC6F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327330)
  {
    sub_23DDEC514(255, &qword_2543273B0);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327330);
  }
}

void sub_23DDEC770(void *a1, void *a2, void (*a3)(void *, BOOL))
{
  uint64_t v5;
  void *v6;
  id v7;

  if (a1)
    v5 = objc_msgSend(a1, sel_BOOLValue);
  else
    v5 = 2;
  if (a2)
    v6 = a2;
  else
    v6 = (void *)v5;
  v7 = a2;
  a3(v6, a2 != 0);
  sub_23DDEFA2C(v6, a2 != 0);
}

void sub_23DDEC7E8(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t HKKeyValueDomain.getData(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3D18, (void (*)(_QWORD))sub_23DDEC9A0);
}

void sub_23DDEC878(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23DDEF75C;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_23DDEF9C4;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDECA98;
  v11[3] = &block_descriptor_183;
  v9 = _Block_copy(v11);
  v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_dataForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DDEC994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEC878(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDEC9A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BD0)
  {
    sub_23DDEC514(255, &qword_254327BC8);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BD0);
  }
}

void sub_23DDECA1C(uint64_t a1, unint64_t a2, id a3, void (*a4)(id, unint64_t, BOOL))
{
  unint64_t v6;
  id v7;
  id v8;

  if (a3)
  {
    v6 = 0;
    v7 = a3;
  }
  else
  {
    v6 = a2;
    v7 = (id)a1;
    sub_23DDEE164(a1, a2);
  }
  v8 = a3;
  a4(v7, v6, a3 != 0);
  sub_23DDEF9E4(v7, v6, a3 != 0);
}

uint64_t sub_23DDECA98(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)sub_23DE350A8();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_23DDEF9D0((uint64_t)v4, v8);
  return swift_release();
}

uint64_t HKKeyValueDomain.getDate(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3D40, (void (*)(_QWORD))sub_23DDECC44);
}

void sub_23DDECB48(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  _QWORD v10[6];

  v6 = (void *)sub_23DE357D4();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v10[4] = sub_23DDEF8C4;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DDECDA0;
  v10[3] = &block_descriptor_174;
  v8 = _Block_copy(v10);
  swift_retain();
  v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_dateForKey_completion_, v6, v8);
  _Block_release(v8);

}

void sub_23DDECC38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDECB48(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDECC44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327310)
  {
    sub_23DDED2C4(255, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327310);
  }
}

uint64_t sub_23DDECCC0(uint64_t a1, void *a2, void (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  sub_23DDEF90C();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (uint64_t *)((char *)&v12 - v8);
  if (a2)
    *v9 = a2;
  else
    sub_23DDEEC94(a1, (uint64_t)&v12 - v8, (uint64_t)&qword_254328878, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDED2C4);
  swift_storeEnumTagMultiPayload();
  v10 = a2;
  a3(v9);
  return sub_23DDEF790((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DDEF90C);
}

uint64_t sub_23DDECDA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, void *);
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v14;

  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_23DE350F0();
    v10 = sub_23DE350FC();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    v11 = sub_23DE350FC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_23DDEF8D0((uint64_t)v8, (uint64_t)&qword_254328878, (uint64_t)MEMORY[0x24BDCE900], (uint64_t (*)(_QWORD))sub_23DDED2C4);
}

uint64_t HKKeyValueDomain.getInteger(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3D68, (void (*)(_QWORD))sub_23DDECFFC);
}

void sub_23DDECED4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23DDEF868;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_23DDEF8A8;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDEC7E8;
  v11[3] = &block_descriptor_168;
  v9 = _Block_copy(v11);
  v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DDECFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDECED4(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDECFFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327338)
  {
    sub_23DDEC514(255, &qword_2543273B8);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327338);
  }
}

void sub_23DDED078(id a1, unint64_t a2, void (*a3)(id, _QWORD))
{
  unint64_t v5;
  id v6;
  _BOOL8 v7;
  id v8;

  v5 = (unint64_t)a1;
  if (a1)
    a1 = objc_msgSend(a1, sel_integerValue);
  if (a2)
    v6 = (id)a2;
  else
    v6 = a1;
  v7 = (a2 | v5) == 0;
  v8 = (id)a2;
  a3(v6, v7 | ((a2 != 0) << 8));
  sub_23DDEF8B4(v6, v7, a2 != 0);
}

uint64_t HKKeyValueDomain.getNumber(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3D90, (void (*)(_QWORD))sub_23DDED248);
}

void sub_23DDED120(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23DDEF73C;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_23DDEF850;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDEC7E8;
  v11[3] = &block_descriptor_159;
  v9 = _Block_copy(v11);
  v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DDED23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDED120(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDED248()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D06DF8)
  {
    sub_23DDED2C4(255, &qword_256D06DF0, (void (*)(uint64_t))sub_23DDED310);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D06DF8);
  }
}

void sub_23DDED2C4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DE35C3C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DDED310()
{
  unint64_t result;

  result = qword_254327B98;
  if (!qword_254327B98)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254327B98);
  }
  return result;
}

void sub_23DDED34C(void *a1, id a2, void (*a3)(id, BOOL))
{
  id v5;
  id v7;
  id v8;

  v5 = a2;
  if (!a2)
  {
    v7 = a1;
    v5 = a1;
  }
  v8 = a2;
  a3(v5, a2 != 0);
  sub_23DDEF85C(v5);
}

uint64_t HKKeyValueDomain.getPropertyListValue(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3DB8, (void (*)(_QWORD))sub_23DDED4D0);
}

void sub_23DDED3D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  _QWORD v10[6];

  v6 = (void *)sub_23DE357D4();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v10[4] = sub_23DDEF784;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DDED5E0;
  v10[3] = &block_descriptor_150;
  v8 = _Block_copy(v10);
  swift_retain();
  v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_propertyListValueForKey_completion_, v6, v8);
  _Block_release(v8);

}

void sub_23DDED4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDED3D4(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDED4D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327340)
  {
    sub_23DDEC514(255, (unint64_t *)&qword_254327BC0);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327340);
  }
}

uint64_t sub_23DDED550(uint64_t a1, id a2, void (*a3)(_QWORD *))
{
  id v5;
  _QWORD v7[4];
  BOOL v8;

  if (a2)
    v7[0] = a2;
  else
    sub_23DDEEC94(a1, (uint64_t)v7, (uint64_t)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDEC514);
  v8 = a2 != 0;
  v5 = a2;
  a3(v7);
  return sub_23DDEF790((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DDEF7CC);
}

uint64_t sub_23DDED5E0(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(__int128 *, void *);
  id v6;
  __int128 v8;
  __int128 v9;

  v5 = *(void (**)(__int128 *, void *))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v9 + 1) = swift_getObjectType();
    *(_QWORD *)&v8 = a2;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(&v8, a3);
  swift_release();

  return sub_23DDEF8D0((uint64_t)&v8, (uint64_t)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD))sub_23DDEC514);
}

uint64_t HKKeyValueDomain.getString(for:)(uint64_t a1, uint64_t a2)
{
  return sub_23DDED6A4(a1, a2, (uint64_t)&unk_250EA3DE0, (void (*)(_QWORD))sub_23DDED854);
}

uint64_t sub_23DDED6A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  void *v4;
  _QWORD *v8;
  id v9;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v4;
  v8[3] = a1;
  v8[4] = a2;
  a4(0);
  swift_allocObject();
  v9 = v4;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

void sub_23DDED72C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = sub_23DDEF75C;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_23DDEF764;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23DDED950;
  v11[3] = &block_descriptor_144;
  v9 = _Block_copy(v11);
  v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_stringForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DDED848(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDED72C(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDED854()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328838)
  {
    sub_23DDEC514(255, (unint64_t *)&qword_254328840);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328838);
  }
}

void sub_23DDED8D0(void *a1, uint64_t a2, id a3, void (*a4)(id, uint64_t, BOOL))
{
  uint64_t v6;
  id v7;
  id v8;

  if (a3)
  {
    v6 = 0;
    v7 = a3;
  }
  else
  {
    v6 = a2;
    v7 = a1;
    swift_bridgeObjectRetain();
  }
  v8 = a3;
  a4(v7, v6, a3 != 0);
  sub_23DDEF770(v7, v6, a3 != 0);
}

uint64_t sub_23DDED950(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, uint64_t, void *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v5 = sub_23DE357F8();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  swift_retain();
  v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t HKKeyValueDomain.getAllValues()()
{
  void *v0;
  id v1;

  *(_QWORD *)(swift_allocObject() + 16) = v0;
  sub_23DDEDB58();
  swift_allocObject();
  v1 = v0;
  return sub_23DE354D4();
}

void sub_23DDEDA3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  _QWORD v10[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23DDEF73C;
  v7[3] = v6;
  v7[4] = a3;
  v10[4] = sub_23DDEF744;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DDEDC54;
  v10[3] = &block_descriptor_135;
  v8 = _Block_copy(v10);
  swift_retain();
  v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_allValuesWithCompletion_, v8);
  _Block_release(v8);
}

uint64_t sub_23DDEDB2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_23DDEDB50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEDA3C(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDEDB58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327318)
  {
    sub_23DDEF4A8(255, &qword_254327378, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))MEMORY[0x24BEE0460]);
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327318);
  }
}

void sub_23DDEDBD4(uint64_t a1, id a2, void (*a3)(id, BOOL))
{
  id v5;
  id v6;

  if (a1)
  {
    v5 = a2;
    if (!a2)
      v5 = (id)swift_bridgeObjectRetain();
  }
  else if (a2)
  {
    v5 = a2;
  }
  else
  {
    v5 = (id)MEMORY[0x24BEE4B00];
  }
  v6 = a2;
  a3(v5, a2 != 0);
  sub_23DDEF750(v5, a2 != 0);
}

uint64_t sub_23DDEDC54(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
    v5 = sub_23DE35708();
  else
    v5 = 0;
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t HKKeyValueDomain.setBool(_:for:)(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  id v8;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v3;
  *(_BYTE *)(v7 + 24) = a1;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  sub_23DDEDE74();
  swift_allocObject();
  v8 = v3;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

uint64_t sub_23DDEDD78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23DDEFAE4;
  v7[3] = v6;
  v7[4] = a3;
  swift_retain();
  v8 = a3;
  sub_23DE35BAC();
  return swift_release();
}

uint64_t sub_23DDEDE38()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEDE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23DDEDD78(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDEDE74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327350)
  {
    sub_23DDE2738();
    v0 = sub_23DE354C8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327350);
  }
}

uint64_t HKKeyValueDomain.setData(_:for:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v9;
  id v10;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  sub_23DDEDE74();
  swift_allocObject();
  v10 = v4;
  sub_23DDEE164(a1, a2);
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

void sub_23DDEDF7C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD v15[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  if (a5 >> 60 == 15)
    v10 = 0;
  else
    v10 = (void *)sub_23DE3509C();
  v11 = (void *)sub_23DE357D4();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23DDEFAE4;
  v12[3] = v9;
  v12[4] = a3;
  v15[4] = sub_23DDEF6AC;
  v15[5] = v12;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = sub_23DE0C16C;
  v15[3] = &block_descriptor_119;
  v13 = _Block_copy(v15);
  v14 = a3;
  swift_release();
  objc_msgSend(v14, sel_setData_forKey_completion_, v10, v11, v13);
  _Block_release(v13);

}

uint64_t sub_23DDEE0D0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_23DDEE114(*(_QWORD *)(v0 + 24), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEE114(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_23DDEE158(uint64_t a1, uint64_t a2)
{
  return sub_23DDEEFA4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DDEDF7C);
}

uint64_t sub_23DDEE164(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23DDEE178(a1, a2);
  return a1;
}

uint64_t sub_23DDEE178(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t HKKeyValueDomain.setDate(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v18;

  v7 = MEMORY[0x24BDCE900];
  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - v11;
  sub_23DDEEC94(a1, (uint64_t)&v18 - v11, (uint64_t)&qword_254328878, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDED2C4);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v3;
  sub_23DDEED1C((uint64_t)v12, v14 + v13, (uint64_t)&qword_254328878, (uint64_t)v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDED2C4);
  v15 = (_QWORD *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v15 = a2;
  v15[1] = a3;
  sub_23DDEDE74();
  swift_allocObject();
  v16 = v3;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

void sub_23DDEE2FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  _QWORD v23[2];
  _QWORD aBlock[6];

  v23[1] = a6;
  v10 = MEMORY[0x24BDCE900];
  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v23 - v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  sub_23DDEEC94(a4, (uint64_t)v13, (uint64_t)&qword_254328878, (uint64_t)v10, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDED2C4);
  v15 = sub_23DE350FC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
  swift_retain();
  v18 = 0;
  if (v17 != 1)
  {
    v18 = (void *)sub_23DE350D8();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  v19 = (void *)sub_23DE357D4();
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = sub_23DDEFAE4;
  v20[3] = v14;
  v20[4] = a3;
  aBlock[4] = sub_23DDEF6AC;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE0C16C;
  aBlock[3] = &block_descriptor_109;
  v21 = _Block_copy(aBlock);
  v22 = a3;
  swift_release();
  objc_msgSend(v22, sel_setDate_forKey_completion_, v18, v19, v21);
  _Block_release(v21);

}

uint64_t sub_23DDEE4E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);

  v3 = sub_23DE350FC();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DDEE5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;

  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (uint64_t *)(v2 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_23DDEE2FC(a1, a2, *(void **)(v2 + 16), v2 + v7, *v8, v8[1]);
}

uint64_t HKKeyValueDomain.setInteger(_:for:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  id v10;

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = a1;
  *(_BYTE *)(v9 + 32) = a2 & 1;
  *(_QWORD *)(v9 + 40) = a3;
  *(_QWORD *)(v9 + 48) = a4;
  sub_23DDEDE74();
  swift_allocObject();
  v10 = v4;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

uint64_t sub_23DDEE6C4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = sub_23DDEFAE4;
  v7[3] = v6;
  v7[4] = a3;
  swift_retain();
  v8 = a3;
  sub_23DE35B58();
  return swift_release();
}

uint64_t sub_23DDEE78C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEE7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23DDEE6C4(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.setNumber(_:for:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v7;
  id v8;
  id v9;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  sub_23DDEDE74();
  swift_allocObject();
  v8 = a1;
  swift_bridgeObjectRetain();
  v9 = v3;
  return sub_23DE354D4();
}

void sub_23DDEE858(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  _QWORD v13[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain();
  v9 = (void *)sub_23DE357D4();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = sub_23DDEFAE4;
  v10[3] = v8;
  v10[4] = a3;
  v13[4] = sub_23DDEF6AC;
  v13[5] = v10;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_23DE0C16C;
  v13[3] = &block_descriptor_92;
  v11 = _Block_copy(v13);
  v12 = a3;
  swift_release();
  objc_msgSend(v12, sel_setNumber_forKey_completion_, a4, v9, v11);
  _Block_release(v11);

}

uint64_t sub_23DDEE980()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DDEE9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEE858(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t HKKeyValueDomain.setPropertyListValue(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  _BYTE v10[32];

  v6 = MEMORY[0x24BEE4AD8] + 8;
  sub_23DDEEC94(a1, (uint64_t)v10, (uint64_t)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDEC514);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  sub_23DDEED1C((uint64_t)v10, (uint64_t)(v7 + 3), (uint64_t)&qword_254327BC0, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDEC514);
  v7[7] = a2;
  v7[8] = a3;
  sub_23DDEDE74();
  swift_allocObject();
  v8 = v3;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

void sub_23DDEEAA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  _QWORD aBlock[3];
  _QWORD *v20;
  uint64_t (*v21)(int, id);
  _QWORD *v22;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  sub_23DDEEC94(a4, (uint64_t)aBlock, (uint64_t)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DDEC514);
  v9 = v20;
  if (v20)
  {
    v10 = __swift_project_boxed_opaque_existential_0(aBlock, (uint64_t)v20);
    v11 = *(v9 - 1);
    MEMORY[0x24BDAC7A8](v10);
    v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    swift_retain();
    v14 = sub_23DE35F48();
    (*(void (**)(char *, _QWORD *))(v11 + 8))(v13, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    swift_retain();
    v14 = 0;
  }
  v15 = (void *)sub_23DE357D4();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = sub_23DDEFAE4;
  v16[3] = v8;
  v16[4] = a3;
  v21 = sub_23DDEF6AC;
  v22 = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE0C16C;
  v20 = &block_descriptor_82;
  v17 = _Block_copy(aBlock);
  v18 = a3;
  swift_release();
  objc_msgSend(v18, sel_setPropertyListValue_forKey_completion_, v14, v15, v17);
  _Block_release(v17);
  swift_unknownObjectRelease();

}

uint64_t sub_23DDEEC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_23DDEECE0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_23DDEED68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEEAA0(a1, a2, *(void **)(v2 + 16), v2 + 24);
}

uint64_t HKKeyValueDomain.setString(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v9;
  id v10;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  sub_23DDEDE74();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = v4;
  return sub_23DE354D4();
}

void sub_23DDEEE14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  if (a5)
    a5 = (void *)sub_23DE357D4();
  v10 = (void *)sub_23DE357D4();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = sub_23DDEFAE4;
  v11[3] = v9;
  v11[4] = a3;
  v14[4] = sub_23DDEF6AC;
  v14[5] = v11;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = sub_23DE0C16C;
  v14[3] = &block_descriptor_72;
  v12 = _Block_copy(v14);
  v13 = a3;
  swift_release();
  objc_msgSend(v13, sel_setString_forKey_completion_, a5, v10, v12);
  _Block_release(v12);

}

uint64_t sub_23DDEEF64()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEEF98(uint64_t a1, uint64_t a2)
{
  return sub_23DDEEFA4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DDEEE14);
}

uint64_t sub_23DDEEFA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t HKKeyValueDomain.removeValues(for:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = a1;
  sub_23DDEDE74();
  swift_allocObject();
  v4 = v1;
  swift_bridgeObjectRetain();
  return sub_23DE354D4();
}

void sub_23DDEF030(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _QWORD v12[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  sub_23DE24558(v7);
  swift_bridgeObjectRelease();
  v8 = (void *)sub_23DE35A08();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = sub_23DDEF69C;
  v9[3] = v6;
  v9[4] = a3;
  v12[4] = sub_23DDEF6AC;
  v12[5] = v9;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_23DE0C16C;
  v12[3] = &block_descriptor_2;
  v10 = _Block_copy(v12);
  v11 = a3;
  swift_release();
  objc_msgSend(v11, sel_removeValuesForKeys_completion_, v8, v10);
  _Block_release(v10);

}

void sub_23DDEF174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDEF030(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.removeAllValues()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23DDEF404();
  v2 = v1;
  v15 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDEF508();
  v6 = v5;
  v16 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(swift_allocObject() + 16) = v0;
  sub_23DDEDB58();
  swift_allocObject();
  v9 = v0;
  v17 = sub_23DE354D4();
  sub_23DDEF4A8(0, &qword_256D06E08, MEMORY[0x24BEE0300]);
  v10 = MEMORY[0x24BDB9E58];
  sub_23DDE3384(&qword_256D06E10, (uint64_t (*)(uint64_t))sub_23DDEDB58, MEMORY[0x24BDB9E58]);
  sub_23DE35510();
  swift_release();
  *(_QWORD *)(swift_allocObject() + 16) = v9;
  v11 = v9;
  sub_23DE35450();
  sub_23DDEDE74();
  sub_23DDE3384(&qword_256D06E20, (uint64_t (*)(uint64_t))sub_23DDEF404, MEMORY[0x24BDB96C0]);
  sub_23DDE3384(&qword_254327348, (uint64_t (*)(uint64_t))sub_23DDEDE74, v10);
  sub_23DE35540();
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v2);
  sub_23DDE3384(qword_256D06E28, (uint64_t (*)(uint64_t))sub_23DDEF508, MEMORY[0x24BDB98F0]);
  v12 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
  return v12;
}

void sub_23DDEF404()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D06E00)
  {
    sub_23DDEDB58();
    sub_23DDEF4A8(255, &qword_256D06E08, MEMORY[0x24BEE0300]);
    sub_23DDE3384(&qword_256D06E10, (uint64_t (*)(uint64_t))sub_23DDEDB58, MEMORY[0x24BDB9E58]);
    v0 = sub_23DE353A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D06E00);
  }
}

void sub_23DDEF4A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4AD8] + 8, MEMORY[0x24BEE0D10]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DDEF508()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D06E18)
  {
    sub_23DDEDE74();
    sub_23DDEF404();
    sub_23DDE3384(&qword_254327348, (uint64_t (*)(uint64_t))sub_23DDEDE74, MEMORY[0x24BDB9E58]);
    sub_23DDE3384(&qword_256D06E20, (uint64_t (*)(uint64_t))sub_23DDEF404, MEMORY[0x24BDB96C0]);
    v0 = sub_23DE353CC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D06E18);
  }
}

uint64_t sub_23DDEF5D0@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  uint64_t result;

  v4 = swift_bridgeObjectRetain();
  v5 = sub_23DE27980(v4);
  swift_bridgeObjectRelease();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v5;
  sub_23DDEDE74();
  swift_allocObject();
  v7 = a1;
  result = sub_23DE354D4();
  *a2 = result;
  return result;
}

uint64_t sub_23DDEF664@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DDEF5D0(*(void **)(v1 + 16), a1);
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DDEF69C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_23DE29FB0(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_23DDEF6C0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DDEF6F0(int a1, id a2)
{
  uint64_t v2;
  void (*v4)(id, _BOOL8);
  _BOOL8 v5;
  id v6;

  v4 = *(void (**)(id, _BOOL8))(v2 + 16);
  v5 = a2 != 0;
  v6 = a2;
  v4(a2, v5);
  sub_23DDEFA2C(a2, v5);
}

void sub_23DDEF744(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_23DDEDBD4(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

void sub_23DDEF750(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

void sub_23DDEF764(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_23DDED8D0(a1, a2, a3, *(void (**)(id, uint64_t, BOOL))(v3 + 16));
}

void sub_23DDEF770(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_23DDEF784(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_23DDED550(a1, a2, *(void (**)(_QWORD *))(v2 + 16));
}

uint64_t sub_23DDEF790(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23DDEF7CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BB8)
  {
    sub_23DDEC514(255, (unint64_t *)&qword_254327BC0);
    sub_23DDE2738();
    v0 = sub_23DE36044();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BB8);
  }
}

void sub_23DDEF850(void *a1, void *a2)
{
  uint64_t v2;

  sub_23DDED34C(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

void sub_23DDEF85C(id a1)
{

}

uint64_t sub_23DDEF868(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  __int16 v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 0x1FF;
  return v3(&v5);
}

void sub_23DDEF8A8(void *a1, unint64_t a2)
{
  uint64_t v2;

  sub_23DDED078(a1, a2, *(void (**)(id, _QWORD))(v2 + 16));
}

void sub_23DDEF8B4(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

}

uint64_t sub_23DDEF8C4(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_23DDECCC0(a1, a2, *(void (**)(_QWORD *))(v2 + 16));
}

uint64_t sub_23DDEF8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_23DDEF90C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BB0)
  {
    sub_23DDED2C4(255, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    sub_23DDE2738();
    v0 = sub_23DE36044();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BB0);
  }
}

uint64_t sub_23DDEF988(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD *);
  _QWORD v6[2];
  char v7;

  v4 = *(uint64_t (**)(_QWORD *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v7 = a3 & 1;
  return v4(v6);
}

void sub_23DDEF9C4(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  sub_23DDECA1C(a1, a2, a3, *(void (**)(id, unint64_t, BOOL))(v3 + 16));
}

uint64_t sub_23DDEF9D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23DDEE114(a1, a2);
  return a1;
}

void sub_23DDEF9E4(id a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    sub_23DDEF9D0((uint64_t)a1, a2);
}

uint64_t objectdestroy_61Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_23DDEFA20(void *a1, void *a2)
{
  uint64_t v2;

  sub_23DDEC770(a1, a2, *(void (**)(void *, BOOL))(v2 + 16));
}

void sub_23DDEFA2C(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_23DDEFAE8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t sub_23DDEFAF0(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = result;
  return result;
}

uint64_t sub_23DDEFAF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  sub_23DE35414();
  v4 = sub_23DE35C3C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23DDEFB74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess();
  sub_23DE35414();
  v4 = sub_23DE35C3C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_23DDEFBF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_23DDEFC5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

void sub_23DDEFCC8(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  char *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(v1[2] + 16));
  v3 = *v1;
  v4 = (char *)v1 + *(_QWORD *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1[2] + 16));
}

uint64_t sub_23DDEFD44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  sub_23DDF248C(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*sub_23DDEFD80(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  sub_23DDEFCC8((uint64_t)v7);
  return sub_23DDEFE00;
}

void sub_23DDEFE00(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_23DDF248C((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_23DDF248C(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_23DDEFE98(_QWORD *a1)
{
  _QWORD *v1;
  os_unfair_lock_s *v3;
  _QWORD **v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  __int128 v10[2];

  v3 = (os_unfair_lock_s *)(v1[2] + 16);
  os_unfair_lock_lock(v3);
  sub_23DDF252C((uint64_t)a1, (uint64_t)v10);
  v4 = (_QWORD **)((char *)v1 + *(_QWORD *)(*v1 + 152));
  swift_beginAccess();
  v5 = *v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = sub_23DDF1D08(0, v5[2] + 1, 1, v5);
    *v4 = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = sub_23DDF1D08((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    *v4 = v5;
  }
  v5[2] = v8 + 1;
  sub_23DDF2570(v10, (uint64_t)&v5[5 * v8 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v3);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE35450();
  return sub_23DE35468();
}

uint64_t sub_23DDEFFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v4 = v3;
  v23 = a3;
  v24 = a1;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 88);
  v20 = *(_QWORD *)(*v4 + 96);
  v21 = v7;
  v8 = sub_23DE35414();
  v19 = sub_23DE35C3C();
  v9 = *(_QWORD *)(v19 - 8);
  v10 = MEMORY[0x24BDAC7A8](v19);
  v12 = (char *)&v18 - v11;
  v13 = *(_QWORD *)(v8 - 8);
  v14 = MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v18 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v22 = (os_unfair_lock_t)(v4[2] + 16);
  os_unfair_lock_lock(v22);
  if (*((_BYTE *)v4 + 25) == 1)
  {
    v25[0] = *(_QWORD *)(v6 + 80);
    v25[1] = v21;
    v25[2] = a2;
    v25[3] = v23;
    type metadata accessor for StreamPublisher.StreamConduit();
  }
  sub_23DDEFAF8((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v19);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v8);
    os_unfair_lock_unlock(v22);
    sub_23DE35474();
    sub_23DE353F0();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    sub_23DE353E4();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v8);
  }
  return result;
}

void sub_23DDF02FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  if (*(_BYTE *)(v1 + 25) == 1)
  {
    v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
    swift_beginAccess();
    v9 = *(_QWORD *)v8;
    LOBYTE(v8) = *(_BYTE *)(v8 + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    sub_23DDF2594(v9, v8);
    sub_23DDEFC5C((uint64_t)v6);
    os_unfair_lock_unlock(v7);
    MEMORY[0x24BDAC7A8](v10);
    *(&v11 - 2) = a1;
    sub_23DDF6EC0((uint64_t)sub_23DDF25B0, (uint64_t)(&v11 - 4), v9, v8);
    sub_23DDF25E8(v9, v8);
  }
  else
  {
    os_unfair_lock_unlock(v7);
  }
}

void sub_23DDF0460(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];

  v2 = v1;
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 88);
  v6 = *(_QWORD *)(*v1 + 96);
  v7 = sub_23DE35414();
  v8 = sub_23DE35C3C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v17[-v9];
  v11 = (os_unfair_lock_s *)(v2[2] + 16);
  os_unfair_lock_lock(v11);
  if (*((_BYTE *)v2 + 25) == 1)
  {
    *((_BYTE *)v2 + 25) = 0;
    v12 = *(_QWORD *)(v7 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v7);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v7);
    sub_23DDEFB74((uint64_t)v10);
    v13 = (uint64_t)v2 + *(_QWORD *)(*v2 + 136);
    swift_beginAccess();
    v14 = *(_QWORD *)v13;
    LOBYTE(v12) = *(_BYTE *)(v13 + 8);
    swift_beginAccess();
    sub_23DDF2594(v14, v12);
    type metadata accessor for StreamConduitList(0, *(_QWORD *)(v4 + 80), v5, v6);
    v15 = sub_23DDF6FD8();
    (*(void (**)(uint64_t))(*v2 + 400))(v15);
    os_unfair_lock_unlock(v11);
    MEMORY[0x24BDAC7A8](v16);
    *(_QWORD *)&v17[-16] = a1;
    sub_23DDF6EC0((uint64_t)sub_23DDF2604, (uint64_t)&v17[-32], v14, v12);
    sub_23DDF25E8(v14, v12);
  }
  else
  {
    os_unfair_lock_unlock(v11);
  }
}

void sub_23DDF065C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  v6 = *(_QWORD *)(*v2 + 96);
  v7 = sub_23DE35414();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v11 = (os_unfair_lock_s *)(v2[2] + 16);
  os_unfair_lock_lock(v11);
  if (*((_BYTE *)v2 + 25) == 1)
  {
    swift_beginAccess();
    v12 = (uint64_t *)type metadata accessor for StreamConduitList(0, *(_QWORD *)(v4 + 80), v5, v6);
    sub_23DDF7000(a1, v12);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    if (*((_BYTE *)v2 + 24) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v10, 1, 1, v5);
      sub_23DDF0460((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    os_unfair_lock_unlock(v11);
  }
}

BOOL static StreamPublisher.DownstreamDisconnectBehaviour.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t StreamPublisher.DownstreamDisconnectBehaviour.hash(into:)()
{
  return sub_23DE36008();
}

uint64_t StreamPublisher.DownstreamDisconnectBehaviour.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDF0850()
{
  sub_23DE35FFC();
  StreamPublisher.DownstreamDisconnectBehaviour.hash(into:)();
  return sub_23DE36014();
}

uint64_t StreamPublisher.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  StreamPublisher.init(_:)(a1);
  return v2;
}

uint64_t *StreamPublisher.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *v1;
  sub_23DDF2CD0(0, (unint64_t *)&qword_254328808, type metadata accessor for os_unfair_lock_s);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  v1[2] = v4;
  *((_BYTE *)v1 + 25) = 1;
  v5 = (uint64_t)v1 + *(_QWORD *)(v3 + 128);
  v6 = sub_23DE35414();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  v8 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)v7 = sub_23DDF6CE0();
  *(_BYTE *)(v7 + 8) = v9;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 152)) = MEMORY[0x24BEE4AF8];
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 144), a1, v8);
  *((_BYTE *)v1 + 24) = 0;
  return v1;
}

uint64_t *StreamPublisher.__allocating_init(_:onDisconnect:)(uint64_t a1)
{
  swift_allocObject();
  return _s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0(a1);
}

uint64_t *StreamPublisher.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v1 = v0;
  v2 = *v0;
  v3 = (uint64_t)v0 + *(_QWORD *)(*v0 + 152);
  swift_beginAccess();
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_23DDF252C(v5, (uint64_t)v9);
      __swift_project_boxed_opaque_existential_0(v9, v9[3]);
      sub_23DE35408();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  swift_release();
  v6 = (uint64_t)v0 + *(_QWORD *)(*v0 + 128);
  sub_23DE35414();
  v7 = sub_23DE35C3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  sub_23DDF25E8(*(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 136)), *((_BYTE *)v1 + *(_QWORD *)(*v1 + 136) + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))((uint64_t)v1 + *(_QWORD *)(*v1 + 144));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t StreamPublisher.__deallocating_deinit()
{
  StreamPublisher.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23DDF0B74(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return sub_23DDF0BC8(a1, a2);
}

void sub_23DDF0BBC()
{
  uint64_t v0;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(_QWORD *)(v0 + 16) + 16));
}

uint64_t sub_23DDF0BC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 176);
  v6 = sub_23DE35C3C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - v8;
  v2[2] = 0;
  v10 = (char *)v2 + *(_QWORD *)(v4 + 200);
  v11 = *(_QWORD *)(v5 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  v13 = *(_QWORD *)(*v2 + 208);
  swift_retain();
  *(_QWORD *)((char *)v2 + v13) = sub_23DE35444();
  v14 = *(_QWORD *)(*v2 + 216);
  sub_23DDF2CD0(0, (unint64_t *)&qword_254328808, type metadata accessor for os_unfair_lock_s);
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)((char *)v2 + v14) = v15;
  v16 = *(_QWORD *)(*v2 + 224);
  sub_23DDF2CD0(0, (unint64_t *)&unk_254328810, type metadata accessor for os_unfair_recursive_lock_s);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)((char *)v2 + v16) = v17;
  *((_BYTE *)v2 + *(_QWORD *)(*v2 + 232)) = 0;
  v2[2] = a1;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, v19, v5);
  v12(v9, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v10, v9, v6);
  swift_endAccess();
  swift_release();
  return sub_23DDF7188();
}

void sub_23DDF0D74(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD v22[2];
  char *v23;

  v22[1] = a1;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  v4 = sub_23DE35C3C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v22 - v7;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v23 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (os_unfair_lock_s *)(*(uint64_t *)((char *)v1 + *(_QWORD *)(v2 + 216)) + 16);
  os_unfair_lock_lock(v11);
  v12 = (uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 208));
  swift_beginAccess();
  v13 = *v12;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if (v13 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (!v13)
    {
LABEL_6:
      *((_BYTE *)v1 + *(_QWORD *)(*v1 + 232)) = 0;
      os_unfair_lock_unlock(v11);
      return;
    }
  }
  v14 = (uint64_t)v1 + *(_QWORD *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v14, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_6;
  }
  v15 = v23;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v23, v8, v3);
  swift_beginAccess();
  v16 = *v12;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    sub_23DE35450();
    if ((sub_23DE35438() & 1) != 0)
    {
      v17 = sub_23DE35450();
    }
    else
    {
      if (v16 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v16)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v17 = v16 - 1;
    }
    *v12 = v17;
  }
  swift_endAccess();
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 232)) = 1;
  os_unfair_lock_unlock(v11);
  os_unfair_recursive_lock_lock_with_options();
  v18 = sub_23DE353FC();
  os_unfair_recursive_lock_unlock();
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
  {
LABEL_17:
    os_unfair_lock_lock(v11);
    swift_beginAccess();
    v19 = *v12;
    sub_23DE35450();
    if ((sub_23DE35438() & 1) != 0)
    {
LABEL_26:
      swift_endAccess();
      os_unfair_lock_unlock(v11);
      goto LABEL_27;
    }
    sub_23DE35450();
    v20 = sub_23DE35438();
    v21 = sub_23DE35450();
    if ((v20 & 1) != 0)
    {
LABEL_25:
      *v12 = v21;
      goto LABEL_26;
    }
    if ((sub_23DE35438() & 1) != 0)
    {
LABEL_23:
      v21 = sub_23DE35450();
      goto LABEL_25;
    }
    if (((v19 | v18) & 0x8000000000000000) == 0)
    {
      v21 = v19 + v18;
      if (!__OFADD__(v19, v18))
      {
        if ((v21 & 0x8000000000000000) == 0)
          goto LABEL_25;
LABEL_34:
        __break(1u);
        return;
      }
      goto LABEL_23;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v18 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v18)
    goto LABEL_17;
LABEL_27:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v3);
}

void sub_23DDF10A0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[2];
  char *v21;
  uint64_t v22;

  v2 = v1;
  v22 = a1;
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 176);
  v5 = sub_23DE35C3C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v21 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (os_unfair_lock_s *)(*(_QWORD *)((char *)v2 + *(_QWORD *)(v3 + 216)) + 16);
  os_unfair_lock_lock(v15);
  v16 = (char *)v2 + *(_QWORD *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v16, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    os_unfair_lock_unlock(v15);
  }
  else
  {
    v20[1] = v3;
    v17 = v14;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v4);
    v18 = v21;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v21, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v16, v18, v5);
    swift_endAccess();
    v19 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v15);
    if (v19)
    {
      swift_retain();
      sub_23DDF065C((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    sub_23DE353E4();
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v4);
  }
}

void sub_23DDF12E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  os_unfair_lock_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*(_QWORD *)(*v2 + 160) - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v8;
  v69 = sub_23DE35C3C();
  v72 = *(_QWORD *)(v69 - 8);
  v9 = MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v63 - v11;
  v67 = v4;
  v13 = *(_QWORD *)(v4 + 176);
  v14 = sub_23DE35C3C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v63 - v17;
  v73 = v13;
  v19 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_4:
  v71 = v12;
  v66 = v7;
  v22 = v5;
  v23 = (os_unfair_lock_s *)(*(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 216)) + 16);
  os_unfair_lock_lock(v23);
  v24 = *(_QWORD *)(*v2 + 200);
  v74 = v19;
  v25 = (char *)v2 + v24;
  swift_beginAccess();
  v26 = v25;
  v27 = v74;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v26, v14);
  v28 = v73;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v73) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    os_unfair_lock_unlock(v23);
    return;
  }
  v65 = v23;
  v29 = v21;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v21, v18, v28);
  v30 = *(_QWORD *)(*v2 + 232);
  if ((*((_BYTE *)v2 + v30) & 1) != 0)
  {
    v31 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 208));
    swift_beginAccess();
    v32 = *v31;
    sub_23DE35450();
    if ((sub_23DE35438() & 1) != 0)
    {
LABEL_30:
      swift_endAccess();
      os_unfair_lock_unlock(v65);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v28);
      return;
    }
    sub_23DE35450();
    v33 = sub_23DE35438();
    v34 = sub_23DE35450();
    if ((v33 & 1) != 0)
    {
      v27 = v74;
LABEL_29:
      *v31 = v34;
      goto LABEL_30;
    }
    v41 = sub_23DE35438();
    v27 = v74;
    if ((v41 & 1) != 0)
      goto LABEL_22;
    if (((v32 | a1) & 0x8000000000000000) == 0)
    {
      v34 = v32 + a1;
      if (!__OFADD__(v32, a1))
      {
        if ((v34 & 0x8000000000000000) == 0)
          goto LABEL_29;
        goto LABEL_61;
      }
LABEL_22:
      v34 = sub_23DE35450();
      goto LABEL_29;
    }
    goto LABEL_59;
  }
  sub_23DE35450();
  if ((sub_23DE35438() & 1) != 0)
  {
    v35 = sub_23DE35450();
    v36 = v22;
    goto LABEL_15;
  }
  if (a1 < 0)
    goto LABEL_56;
  if (!a1)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v36 = v22;
  v35 = a1 - 1;
LABEL_15:
  v37 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 208));
  swift_beginAccess();
  v38 = *v37;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    sub_23DE35450();
    v39 = sub_23DE35438();
    v40 = sub_23DE35450();
    if ((v39 & 1) != 0)
    {
      v27 = v74;
    }
    else
    {
      v42 = sub_23DE35438();
      v27 = v74;
      if ((v42 & 1) != 0)
        goto LABEL_27;
      if ((v38 | v35) < 0)
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      v40 = v38 + v35;
      if (__OFADD__(v38, v35))
      {
LABEL_27:
        v40 = sub_23DE35450();
      }
      else if (v40 < 0)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
    }
    *v37 = v40;
  }
  v64 = v37;
  v43 = v21;
  swift_endAccess();
  v44 = 1;
  *((_BYTE *)v2 + v30) = 1;
  if (v2[2])
  {
    swift_retain();
    v45 = (uint64_t)v71;
    sub_23DDEFCC8((uint64_t)v71);
    swift_release();
    v44 = 0;
    v47 = v68;
    v46 = v69;
    v48 = v65;
  }
  else
  {
    v47 = v68;
    v46 = v69;
    v48 = v65;
    v45 = (uint64_t)v71;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v45, v44, 1, v47);
  os_unfair_lock_unlock(v48);
  v49 = v36;
  v50 = v72;
  v51 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v70, v45, v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v51, 1, v47) == 1)
  {
    v52 = v51;
    v53 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v53(v45, v46);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v43, v73);
    v53((uint64_t)v52, v46);
    return;
  }
  v54 = v66;
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v66, v51, v47);
  os_unfair_recursive_lock_lock_with_options();
  v55 = v43;
  v56 = sub_23DE353FC();
  v57 = v74;
  os_unfair_recursive_lock_unlock();
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    if ((v56 & 0x8000000000000000) == 0)
    {
      if (!v56)
        goto LABEL_52;
      goto LABEL_41;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_41:
  os_unfair_lock_lock(v48);
  v58 = v64;
  swift_beginAccess();
  v59 = *v58;
  sub_23DE35450();
  if ((sub_23DE35438() & 1) == 0)
  {
    sub_23DE35450();
    v60 = sub_23DE35438();
    v61 = sub_23DE35450();
    if ((v60 & 1) != 0)
    {
      v57 = v74;
    }
    else
    {
      v62 = sub_23DE35438();
      v57 = v74;
      if ((v62 & 1) != 0)
        goto LABEL_48;
      if ((v59 | v56) < 0)
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      v61 = v59 + v56;
      if (__OFADD__(v59, v56))
      {
LABEL_48:
        v61 = sub_23DE35450();
      }
      else if (v61 < 0)
      {
LABEL_64:
        __break(1u);
        return;
      }
    }
    *v64 = v61;
  }
  swift_endAccess();
  os_unfair_lock_unlock(v65);
LABEL_52:
  (*(void (**)(char *, uint64_t))(v49 + 8))(v54, v47);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v46);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v73);
}

void sub_23DDF18F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  os_unfair_lock_s *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE v15[24];

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  v3 = sub_23DE35C3C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v15[-v8];
  v10 = (os_unfair_lock_s *)(*(_QWORD *)((char *)v0 + *(_QWORD *)(v1 + 216)) + 16);
  os_unfair_lock_lock(v10);
  v11 = (char *)v0 + *(_QWORD *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  v12 = *(_QWORD *)(v2 - 8);
  v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, _BYTE *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      sub_23DDF065C((uint64_t)v0);
      swift_release_n();
    }
  }
}

uint64_t sub_23DDF1A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 200);
  v2 = sub_23DE35C3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_release();
}

uint64_t sub_23DDF1B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23DDF7188();
  swift_release();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 200);
  v2 = sub_23DE35C3C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_23DDF1B8C()
{
  sub_23DDF1B08();
  return swift_deallocClassInstance();
}

uint64_t sub_23DDF1BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DDEFFC0(a1, a2, a3);
}

_QWORD *sub_23DDF1BD8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DDF2990(0, &qword_256D06EB0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23DDF219C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DDF1D08(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DDF2D28(0, &qword_256D06EC8, (void (*)(uint64_t))sub_23DDF2D74);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23DDF29D4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DDF1E34(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DDF1E5C(a1, a2, a3, a4, &qword_254327EB8, type metadata accessor for Label);
}

_QWORD *sub_23DDF1E48(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23DDF1E5C(a1, a2, a3, a4, qword_254327EC0, type metadata accessor for __HKStateOfMindDomain);
}

_QWORD *sub_23DDF1E5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, void (*a6)(uint64_t))
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_8;
  }
  v8 = a4[3];
  v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2)
    goto LABEL_8;
  if (v9 + 0x4000000000000000 >= 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v9 = a2;
LABEL_8:
    v10 = a4[2];
    if (v9 <= v10)
      v11 = a4[2];
    else
      v11 = v9;
    if (v11)
    {
      sub_23DDF2D28(0, a5, a6);
      v12 = (_QWORD *)swift_allocObject();
      v13 = _swift_stdlib_malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v7 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4])
          memmove(v15, a4 + 4, 8 * v10);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DDF2290(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DDF1F6C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DDF2D28(0, &qword_256D06EC0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DDF2BCC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DDF2084(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DDF2990(0, &qword_256D06EB8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DDF2ADC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DDF219C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

char *sub_23DDF2290(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t *_s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *v1;
  sub_23DDF2CD0(0, (unint64_t *)&qword_254328808, type metadata accessor for os_unfair_lock_s);
  v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  v1[2] = v4;
  *((_BYTE *)v1 + 25) = 1;
  v5 = (uint64_t)v1 + *(_QWORD *)(v3 + 128);
  v6 = sub_23DE35414();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  v8 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)v7 = sub_23DDF6CE0();
  *(_BYTE *)(v7 + 8) = v9;
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 152)) = MEMORY[0x24BEE4AF8];
  *((_BYTE *)v1 + *(_QWORD *)(*v1 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 144), a1, v8);
  *((_BYTE *)v1 + 24) = 1;
  return v1;
}

void sub_23DDF248C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  os_unfair_lock_s *v7;
  uint64_t v8;

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (os_unfair_lock_s *)(v1[2] + 16);
  os_unfair_lock_lock(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  sub_23DDEFC5C((uint64_t)v6);
  os_unfair_lock_unlock(v7);
  sub_23DDF02FC(a1);
}

uint64_t sub_23DDF252C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23DDF2570(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void type metadata accessor for StreamPublisher.StreamConduit()
{
  JUMPOUT(0x2426455E8);
}

uint64_t sub_23DDF2594(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRetain();
  if (!a2)
    return swift_retain();
  return result;
}

uint64_t sub_23DDF25B0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 104))(*(_QWORD *)(v1 + 16));
}

uint64_t sub_23DDF25E8(uint64_t a1, char a2)
{
  uint64_t result;

  if (a2 == 1)
    return swift_bridgeObjectRelease();
  if (!a2)
    return swift_release();
  return result;
}

uint64_t sub_23DDF2604(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1 + 112))(*(_QWORD *)(v1 + 16));
}

void sub_23DDF263C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDF264C()
{
  JUMPOUT(0x242645660);
}

uint64_t sub_23DDF265C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

void sub_23DDF2664(uint64_t a1@<X8>)
{
  sub_23DDEFCC8(a1);
}

void sub_23DDF2684(uint64_t a1)
{
  sub_23DDF248C(a1);
}

uint64_t sub_23DDF26A4()
{
  return 24;
}

__n128 sub_23DDF26B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_23DDF26C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  sub_23DE35414();
  result = sub_23DE35C3C();
  if (v1 <= 0x3F)
  {
    result = swift_checkMetadataState();
    if (v2 <= 0x3F)
      return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for StreamPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamPublisher);
}

uint64_t method lookup function for StreamPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StreamPublisher.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of StreamPublisher.value.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of StreamPublisher.value.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of StreamPublisher.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of StreamPublisher.__allocating_init(_:onDisconnect:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of StreamPublisher.send(subscription:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of StreamPublisher.receive<A>(subscriber:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of StreamPublisher.send(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of StreamPublisher.send(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of StreamPublisher.locked_didTransitionToDownstreamsConnected()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of StreamPublisher.locked_didTransitionToCompleted()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t sub_23DDF2824(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DDF2870 + 4 * byte_23DE37F75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DDF28A4 + 4 * byte_23DE37F70[v4]))();
}

uint64_t sub_23DDF28A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDF28AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDF28B4);
  return result;
}

uint64_t sub_23DDF28C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDF28C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DDF28CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDF28D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for StreamPublisher.DownstreamDisconnectBehaviour(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamPublisher.DownstreamDisconnectBehaviour);
}

uint64_t sub_23DDF28EC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE35C3C();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_23DDF2990(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DE35F3C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DDF29D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_23DDF2D74();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DDF2ADC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DDF2BCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

void sub_23DDF2CD0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DE35D80();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_23DDF2D28(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DE35F3C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DDF2D74()
{
  unint64_t result;

  result = qword_256D06ED0;
  if (!qword_256D06ED0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D06ED0);
  }
  return result;
}

uint64_t HKHealthStore.makeSamplePublisher(queryDescriptors:limit:sortDescriptors:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  void *v6;
  id v7;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  a6[5] = v6;
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.SamplePublisher.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id HKHealthStore.SamplePublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

void sub_23DDF2E6C(int a1, void *a2, id a3, void (*a4)(id *))
{
  id v6;
  id v7;
  char v8;

  if (a2)
  {
    v7 = a2;
    v8 = 1;
    swift_bridgeObjectRetain();
    a4(&v7);
    swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    v7 = a3;
    v8 = 2;
    v6 = a3;
    a4(&v7);

  }
}

uint64_t sub_23DDF2EF8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[1];
  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id sub_23DDF2F40()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t sub_23DDF2F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DDF3600();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_23DDF2F9C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, &qword_254327B90);
    v5 = sub_23DE35948();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE15SamplePublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0mG6ResultOySaySo8HKSampleCGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD v16[6];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = objc_allocWithZone(MEMORY[0x24BDD3F00]);
  sub_23DDE7B5C(0, &qword_254327AE0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  sub_23DDE7B5C(0, &qword_254328848);
  v10 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  v16[4] = sub_23DDF3668;
  v16[5] = v7;
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1107296256;
  v16[2] = sub_23DDF2F9C;
  v16[3] = &block_descriptor_3;
  v11 = _Block_copy(v16);
  v12 = objc_msgSend(v8, sel_initWithQueryDescriptors_limit_sortDescriptors_resultsHandler_, v9, v5, v10, v11);

  _Block_release(v11);
  swift_release();
  v13 = v12;
  if (v6)
    v14 = (void *)sub_23DE357D4();
  else
    v14 = 0;
  objc_msgSend(v12, sel_setDebugIdentifier_, v14);

  return v12;
}

unint64_t sub_23DDF31FC(uint64_t a1)
{
  unint64_t result;

  result = sub_23DDF3220();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DDF3220()
{
  unint64_t result;

  result = qword_2543273D0;
  if (!qword_2543273D0)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SamplePublisher, &type metadata for HKHealthStore.SamplePublisher);
    atomic_store(result, (unint64_t *)&qword_2543273D0);
  }
  return result;
}

void _s15SamplePublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *_s15SamplePublisherVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

_QWORD *_s15SamplePublisherVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[5];
  v5 = (void *)a1[5];
  a1[5] = v4;
  v6 = v4;

  return a1;
}

uint64_t _s15SamplePublisherVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t _s15SamplePublisherVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s15SamplePublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SamplePublisher()
{
  return &type metadata for HKHealthStore.SamplePublisher;
}

uint64_t _s15SamplePublisherV13ConfigurationVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s15SamplePublisherV13ConfigurationVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s15SamplePublisherV13ConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s15SamplePublisherV13ConfigurationVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.SamplePublisher.Configuration()
{
  return &type metadata for HKHealthStore.SamplePublisher.Configuration;
}

unint64_t sub_23DDF3600()
{
  unint64_t result;

  result = qword_2543273D8;
  if (!qword_2543273D8)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SamplePublisher, &type metadata for HKHealthStore.SamplePublisher);
    atomic_store(result, (unint64_t *)&qword_2543273D8);
  }
  return result;
}

uint64_t sub_23DDF3644()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DDF3668(int a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_23DDF2E6C(a1, a2, a3, *(void (**)(id *))(v3 + 16));
}

uint64_t HKSampleCountQueryDescriptor.samplePredicates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DDF3678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Descriptor;
  uint64_t v5;

  Descriptor = type metadata accessor for HKSampleCountQueryDescriptor(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  v5 = swift_bridgeObjectRetain();
  return HKSampleCountQueryDescriptor.samplePredicates.setter(v5, Descriptor);
}

uint64_t HKSampleCountQueryDescriptor.samplePredicates.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  return sub_23DDF36FC(a2);
}

uint64_t sub_23DDF36FC(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  (*(void (**)(char *))(v3 + 16))(v5);
  v7 = *((_QWORD *)v5 + 1);
  if (v6 == 1)
  {
    v14 = *((_QWORD *)v5 + 1);
    sub_23DE35618();
    v8 = sub_23DE3599C();
    MEMORY[0x242645660](MEMORY[0x24BEE12E0], v8);
    v9 = sub_23DE35AB0();
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a1);
    if ((v9 & 1) != 0)
      return result;
    __break(1u);
  }
  v14 = v7;
  sub_23DE35618();
  v11 = sub_23DE3599C();
  MEMORY[0x242645660](MEMORY[0x24BEE12E0], v11);
  v12 = sub_23DE35AB0();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  if ((v12 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t *(*HKSampleCountQueryDescriptor.samplePredicates.modify(_QWORD *a1, uint64_t a2))(uint64_t *result, char a2)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = v2;
  return sub_23DDF384C;
}

uint64_t *sub_23DDF384C(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0)
    return (uint64_t *)sub_23DDF36FC(*result);
  return result;
}

uint64_t HKSampleCountQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t HKSampleCountQueryDescriptor.queryAttributes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*HKSampleCountQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleCountQueryDescriptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  type metadata accessor for HKSampleCountQueryDescriptor(0, a2, a3, a4);
  result = sub_23DE355D0();
  *(_BYTE *)a5 = 0;
  *(_QWORD *)(a5 + 8) = a1;
  return result;
}

uint64_t type metadata accessor for HKSampleCountQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKSampleCountQueryDescriptor);
}

uint64_t HKSampleCountQueryDescriptor.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;

  type metadata accessor for HKSampleCountQueryDescriptor(0, a1, a2, a3);
  sub_23DE355D0();
  *(_BYTE *)a4 = 1;
  sub_23DE35618();
  result = sub_23DE356F0();
  *(_QWORD *)(a4 + 8) = result;
  return result;
}

uint64_t HKSampleCountQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_23DDF39D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = v0[12];
  v1 = v0[13];
  v3 = (void *)v0[11];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_23DDF3A40;
  v4 = swift_continuation_init();
  sub_23DDF3AB0(v4, v1, v3, *(_QWORD *)(v2 + 16));
  return swift_continuation_await();
}

uint64_t sub_23DDF3A40()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 80));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_23DDF3AB0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t aBlock;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, void *, uint64_t, void *);
  void *v34;
  void *v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a2 + 8);
  aBlock = v7;
  sub_23DE35618();
  v8 = sub_23DE3599C();
  v9 = MEMORY[0x242645660](MEMORY[0x24BEE12E0], v8);
  v10 = sub_23DE35AB0();
  if ((v10 & 1) != 0)
  {
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a1;
    v12 = objc_allocWithZone(MEMORY[0x24BDD3EE0]);
    v35 = sub_23DDF4F60;
    v36 = v11;
    aBlock = MEMORY[0x24BDAC760];
    v32 = 1107296256;
    v33 = sub_23DE21D8C;
    v34 = &block_descriptor_9;
    v13 = _Block_copy(&aBlock);
    v14 = a3;
    v15 = objc_msgSend(v12, sel_initWithResultsHandler_, v13);
  }
  else
  {
    v30 = (uint64_t)&v30;
    aBlock = v7;
    MEMORY[0x24BDAC7A8](v10);
    v29[2] = a4;
    v16 = (char *)sub_23DDE7B5C(0, &qword_254327AE0);
    swift_bridgeObjectRetain();
    v18 = sub_23DE1C9F0((void (*)(char *, char *))sub_23DDF49C8, (uint64_t)v29, v8, v16, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v17);
    swift_bridgeObjectRelease();
    sub_23DE245EC(v18);
    swift_bridgeObjectRelease();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = a3;
    *(_QWORD *)(v19 + 24) = a1;
    v20 = objc_allocWithZone(MEMORY[0x24BDD3EE0]);
    sub_23DDF5048(&qword_256D06F98, &qword_254327AE0);
    v21 = a3;
    v22 = (void *)sub_23DE35A08();
    swift_bridgeObjectRelease();
    v35 = sub_23DDF4F58;
    v36 = v19;
    aBlock = MEMORY[0x24BDAC760];
    v32 = 1107296256;
    v33 = sub_23DDF49E4;
    v34 = &block_descriptor_4;
    v13 = _Block_copy(&aBlock);
    v15 = objc_msgSend(v20, sel_initWithQueryDescriptors_resultsHandler_, v22, v13);

  }
  _Block_release(v13);
  swift_release();
  type metadata accessor for HKSampleCountQueryDescriptor(0, a4, v23, v24);
  v25 = v15;
  sub_23DE355DC();
  if (v26)
  {
    v27 = (void *)sub_23DE357D4();
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
  }
  objc_msgSend(v25, sel_setDebugIdentifier_, v27);

  v28 = v25;
  objc_msgSend(v28, sel_setQualityOfService_, sub_23DE355E8());

  objc_msgSend(a3, sel_executeQuery_, v28);
}

uint64_t sub_23DDF3DF8(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  _QWORD *v11;
  id v12;
  void *v13;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    if ((a2 & 0xC000000000000001) != 0)
      v8 = sub_23DDF4AD8();
    else
      v8 = (uint64_t)sub_23DDF4D40(a2);
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = v8;
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDF4F68();
      sub_23DE35054();
      v9 = v13;
    }
    sub_23DDE2738();
    swift_allocError();
    *v11 = v9;
    v12 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

void sub_23DDF3F18(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;

  sub_23DE35618();
  v2 = (void *)sub_23DE3560C();
  v3 = (void *)sub_23DE35600();
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E98]), sel_initWithSampleType_predicate_, v2, v3);

  *a1 = v4;
}

uint64_t sub_23DDF3FA0(uint64_t a1, unint64_t a2, void *a3, id a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  id v45;
  uint64_t result;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  id v52;
  void *v53;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (!a2)
  {
    if (a3)
    {
      v11 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDF4F68();
      sub_23DE35054();
      v11 = v53;
    }
    sub_23DDE2738();
    swift_allocError();
    *v47 = v11;
    v48 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  v49 = a5;
  if ((a2 & 0xC000000000000001) != 0)
  {
    v51 = 0;
    v8 = 0;
    v9 = 0;
    v10 = sub_23DE35E1C() | 0x8000000000000000;
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a2 + 32);
    v8 = ~v12;
    v51 = a2 + 64;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v9 = v14 & *(_QWORD *)(a2 + 64);
    v10 = a2;
  }
  swift_bridgeObjectRetain();
  v15 = 0;
  v50 = (unint64_t)(v8 + 64) >> 6;
  v16 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      if (!sub_23DE35E34())
        goto LABEL_45;
      sub_23DDE7B5C(0, &qword_254327AE0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v20 = v53;
      swift_unknownObjectRelease();
      sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v52 = v53;
      swift_unknownObjectRelease();
      v19 = v15;
      v17 = v9;
      if (!v53)
        goto LABEL_45;
    }
    else
    {
      if (v9)
      {
        v17 = (v9 - 1) & v9;
        v18 = __clz(__rbit64(v9)) | (v15 << 6);
        v19 = v15;
      }
      else
      {
        v21 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_50;
        if (v21 >= v50)
          goto LABEL_45;
        v22 = *(_QWORD *)(v51 + 8 * v21);
        v19 = v15 + 1;
        if (!v22)
        {
          v19 = v15 + 2;
          if (v15 + 2 >= v50)
            goto LABEL_45;
          v22 = *(_QWORD *)(v51 + 8 * v19);
          if (!v22)
          {
            v19 = v15 + 3;
            if (v15 + 3 >= v50)
              goto LABEL_45;
            v22 = *(_QWORD *)(v51 + 8 * v19);
            if (!v22)
            {
              v19 = v15 + 4;
              if (v15 + 4 >= v50)
                goto LABEL_45;
              v22 = *(_QWORD *)(v51 + 8 * v19);
              if (!v22)
              {
                v23 = v15 + 5;
                while (v50 != v23)
                {
                  v22 = *(_QWORD *)(v51 + 8 * v23++);
                  if (v22)
                  {
                    v19 = v23 - 1;
                    goto LABEL_32;
                  }
                }
LABEL_45:
                sub_23DDF5088();
                **(_QWORD **)(*(_QWORD *)(v49 + 64) + 40) = v16;
                return swift_continuation_throwingResume();
              }
            }
          }
        }
LABEL_32:
        v17 = (v22 - 1) & v22;
        v18 = __clz(__rbit64(v22)) + (v19 << 6);
      }
      v24 = 8 * v18;
      v25 = *(void **)(*(_QWORD *)(v10 + 56) + v24);
      v20 = *(id *)(*(_QWORD *)(v10 + 48) + v24);
      v52 = v25;
      if (!v20)
        goto LABEL_45;
    }
    v26 = v19;
    v27 = v10;
    v28 = v20;
    v29 = objc_msgSend(v20, sel_sampleType);
    v30 = objc_msgSend(v52, sel_integerValue);
    v31 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v53 = v31;
    v34 = sub_23DDFF300((uint64_t)v29);
    v35 = v31[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      break;
    v38 = v33;
    if (v31[3] >= v37)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v16 = v31;
        if ((v33 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        sub_23DE26DD8();
        v16 = v31;
        if ((v38 & 1) != 0)
          goto LABEL_11;
      }
    }
    else
    {
      sub_23DE21E80(v37, isUniquelyReferenced_nonNull_native);
      v39 = sub_23DDFF300((uint64_t)v29);
      if ((v38 & 1) != (v40 & 1))
        goto LABEL_51;
      v34 = v39;
      v16 = v31;
      if ((v38 & 1) != 0)
      {
LABEL_11:
        *(_QWORD *)(v16[7] + 8 * v34) = v30;
        goto LABEL_12;
      }
    }
    v16[(v34 >> 6) + 8] |= 1 << v34;
    v41 = 8 * v34;
    *(_QWORD *)(v16[6] + v41) = v29;
    *(_QWORD *)(v16[7] + v41) = v30;
    v42 = v16[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
      goto LABEL_49;
    v16[2] = v44;
    v45 = v29;
LABEL_12:

    swift_bridgeObjectRelease();
    v15 = v26;
    v9 = v17;
    v10 = v27;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
  result = sub_23DE35F9C();
  __break(1u);
  return result;
}

uint64_t sub_23DDF4490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_23DDF4504;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  return swift_task_switch();
}

uint64_t sub_23DDF4504(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23DDF4560@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DDF4570()
{
  return 8;
}

_QWORD *sub_23DDF457C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23DDF4588()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE355F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23DDF4608(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v5 = *(int *)(a3 + 32);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_23DE355F4();
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_23DDF46AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23DDF46F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DE355F4();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_23DDF476C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_23DDF47E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DDF484C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_23DDF48C0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDF48CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DE355F4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_23DDF4948()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDF4954(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23DE355F4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_23DDF49C8(_QWORD *a1@<X8>)
{
  sub_23DDF3F18(a1);
}

uint64_t sub_23DDF49E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, &qword_254327AE0);
    sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
    sub_23DDF5048(&qword_256D06F98, &qword_254327AE0);
    v5 = sub_23DE35708();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDF4AD8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (sub_23DE35CA8())
  {
    sub_23DDF4FB0();
    v0 = sub_23DE35EA0();
  }
  else
  {
    v0 = MEMORY[0x24BEE4B00];
  }
  v17 = v0;
  sub_23DE35E1C();
  swift_unknownObjectRetain();
  v1 = sub_23DE35E34();
  if (v1)
  {
    v2 = (void *)v1;
    sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
    do
    {
      swift_dynamicCast();
      sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
      swift_dynamicCast();
      v10 = objc_msgSend(v2, sel_integerValue);

      v0 = v17;
      v11 = *(_QWORD *)(v17 + 16);
      if (*(_QWORD *)(v17 + 24) <= v11)
      {
        sub_23DE21E80(v11 + 1, 1);
        v0 = v17;
      }
      result = sub_23DE35C0C();
      v4 = v0 + 64;
      v5 = -1 << *(_BYTE *)(v0 + 32);
      v6 = result & ~v5;
      v7 = v6 >> 6;
      if (((-1 << v6) & ~*(_QWORD *)(v0 + 64 + 8 * (v6 >> 6))) != 0)
      {
        v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v0 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v12 = 0;
        v13 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v13 && (v12 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          v14 = v7 == v13;
          if (v7 == v13)
            v7 = 0;
          v12 |= v14;
          v15 = *(_QWORD *)(v4 + 8 * v7);
        }
        while (v15 == -1);
        v8 = __clz(__rbit64(~v15)) + (v7 << 6);
      }
      *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      v9 = 8 * v8;
      *(_QWORD *)(*(_QWORD *)(v0 + 48) + v9) = v16;
      *(_QWORD *)(*(_QWORD *)(v0 + 56) + v9) = v10;
      ++*(_QWORD *)(v0 + 16);
      v2 = (void *)sub_23DE35E34();
    }
    while (v2);
  }
  swift_release();
  return v0;
}

_QWORD *sub_23DDF4D40(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;

  sub_23DDF4FB0();
  result = (_QWORD *)sub_23DE35E88();
  v3 = result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v20 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v21 = (unint64_t)(v6 + 63) >> 6;
  v9 = (char *)(result + 8);
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    v16 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    result = objc_msgSend(v15, sel_integerValue);
    *(_QWORD *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v16;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v19;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v21)
      return v3;
    v13 = *(_QWORD *)(v20 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v21)
        return v3;
      v13 = *(_QWORD *)(v20 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v21)
          return v3;
        v13 = *(_QWORD *)(v20 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v21)
    return v3;
  v13 = *(_QWORD *)(v20 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v21)
      return v3;
    v13 = *(_QWORD *)(v20 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23DDF4F34()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23DDF4F58(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_23DDF3FA0(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_23DDF4F60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_23DDF3DF8(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

unint64_t sub_23DDF4F68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D06AB8;
  if (!qword_256D06AB8)
  {
    type metadata accessor for HKError(255);
    result = MEMORY[0x242645660](&unk_23DE37518, v1);
    atomic_store(result, (unint64_t *)&qword_256D06AB8);
  }
  return result;
}

void sub_23DDF4FB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BA0)
  {
    sub_23DDE7B5C(255, (unint64_t *)&qword_2543273C0);
    sub_23DDF5048((unint64_t *)&qword_2543273C8, (unint64_t *)&qword_2543273C0);
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BA0);
  }
}

uint64_t sub_23DDF5048(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_23DDE7B5C(255, a2);
    result = MEMORY[0x242645660](MEMORY[0x24BEE5BD8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DDF5088()
{
  return swift_release();
}

uint64_t sub_23DDF509C(void (*a1)(uint64_t *__return_ptr, __int128 *), uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  v6 = *(_QWORD *)(a3 + 16);
  if (!v6)
    return MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v23 = a3;
  v9 = (uint64_t *)(a3 + 56);
  v10 = MEMORY[0x24BEE4AF8];
  do
  {
    v11 = *(v9 - 1);
    v12 = *v9;
    v20 = *(_OWORD *)(v9 - 3);
    v21 = v11;
    v22 = v12;
    swift_bridgeObjectRetain();
    a1(&v18, &v20);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      v13 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = a4(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      v15 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      if (v15 >= v14 >> 1)
        v10 = a4(v14 > 1, v15 + 1, 1, v10);
      *(_QWORD *)(v10 + 16) = v15 + 1;
      *(_QWORD *)(v10 + 8 * v15 + 32) = v13;
    }
    v9 += 4;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23DDF520C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_23DE2F5B8(0, v3, 0);
    v4 = v17;
    v7 = (uint64_t *)(a1 + 32);
    do
    {
      v8 = *v7++;
      v9 = (id)a3(v8);
      v10 = sub_23DE357F8();
      v12 = v11;

      v14 = *(_QWORD *)(v17 + 16);
      v13 = *(_QWORD *)(v17 + 24);
      if (v14 >= v13 >> 1)
        sub_23DE2F5B8(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v17 + 16) = v14 + 1;
      v15 = v17 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v10;
      *(_QWORD *)(v15 + 40) = v12;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_23DDF52F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35D14();
  result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000003ALL;
  a1[1] = 0x800000023DE3B640;
  a1[2] = 0xD000000000000028;
  a1[3] = 0x800000023DE3B610;
  return result;
}

uint64_t sub_23DDF53B8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35D14();
  result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x800000023DE3B5E0;
  a1[2] = 0xD00000000000002ELL;
  a1[3] = 0x800000023DE3B5B0;
  return result;
}

uint64_t sub_23DDF5474@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35D14();
  result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000002DLL;
  a1[1] = 0x800000023DE3B580;
  a1[2] = 0xD00000000000002FLL;
  a1[3] = 0x800000023DE3B550;
  return result;
}

uint64_t sub_23DDF5530()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v38[8];
  uint64_t v39;
  _BYTE v40[8];

  v2 = v0;
  sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23DE382A0;
  sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
  v5 = objc_msgSend(v4, sel_identifier);

  v6 = sub_23DE357F8();
  v8 = v7;

  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = v8;
  objc_msgSend(v2, sel_valence);
  *(_QWORD *)(v3 + 48) = sub_23DE359F0();
  *(_QWORD *)(v3 + 56) = v9;
  objc_msgSend(v2, sel_reflectiveInterval);
  v10 = (id)NSStringFromHKStateOfMindReflectiveInterval();
  v11 = sub_23DE357F8();
  v13 = v12;

  *(_QWORD *)(v3 + 64) = v11;
  *(_QWORD *)(v3 + 72) = v13;
  v14 = sub_23DE35AE0();
  v15 = sub_23DDF520C(v14, (uint64_t)v40, MEMORY[0x24BDD38C8]);
  swift_bridgeObjectRelease();
  v39 = v15;
  if (qword_256D06830 != -1)
    swift_once();
  sub_23DDE3BB0(0, &qword_256D06FA8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DDF6120();
  v16 = sub_23DE35774();
  v18 = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 80) = v16;
  *(_QWORD *)(v3 + 88) = v18;
  v19 = sub_23DE35AEC();
  v20 = sub_23DDF520C(v19, (uint64_t)v38, MEMORY[0x24BDD38C0]);
  swift_bridgeObjectRelease();
  v39 = v20;
  v21 = sub_23DE35774();
  v23 = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 96) = v21;
  *(_QWORD *)(v3 + 104) = v23;
  v24 = objc_msgSend(v2, sel_context);
  if (v24)
  {
    v25 = v24;
    v26 = sub_23DE357F8();
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0xE000000000000000;
  }
  *(_QWORD *)(v3 + 112) = v26;
  *(_QWORD *)(v3 + 120) = v28;
  *(_QWORD *)(v3 + 128) = sub_23DE141A0();
  *(_QWORD *)(v3 + 136) = v29;
  v30 = objc_msgSend(v2, sel_metadata);
  if (v30)
  {
    v31 = v30;
    v32 = sub_23DE35708();

  }
  else
  {
    v32 = 0;
  }
  v33 = sub_23DE24D48(v32);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = 0;
    swift_release();
  }
  else
  {
    v35 = v33;
    v36 = v34;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 144) = v35;
    *(_QWORD *)(v3 + 152) = v36;
    v39 = v3;
    if (qword_256D06828 != -1)
      swift_once();
    v32 = sub_23DE35774();
    swift_bridgeObjectRelease();
  }
  return v32;
}

uint64_t sub_23DDF58FC()
{
  return sub_23DDF5530();
}

uint64_t sub_23DDF591C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[24];
  uint64_t v24;

  v2 = sub_23DE350FC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - v7;
  sub_23DE0ECE8();
  if (v1)
    return v0;
  sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
  v10 = objc_msgSend(v9, sel_identifier);

  sub_23DE357F8();
  sub_23DE0EE98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23DE0EFB8();
  sub_23DDF5C94();
  sub_23DDF5DAC(3, (void (*)(uint64_t *__return_ptr, __int128 *))sub_23DDF628C, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_23DDF1E34);
  sub_23DDF5DAC(4, (void (*)(uint64_t *__return_ptr, __int128 *))sub_23DDF621C, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_23DDF1E48);
  sub_23DE351E0();
  if (v24)
  {
    v12 = swift_dynamicCast();
    if (v12)
      v13 = v21;
    else
      v13 = 0;
    if (v12)
      v14 = v22;
    else
      v14 = 0;
    v19 = v13;
    v20 = v14;
  }
  else
  {
    sub_23DDF6180((uint64_t)v23);
    v19 = 0;
    v20 = 0;
  }
  sub_23DE0F0B4(6, (uint64_t)v8);
  sub_23DE351E0();
  if (!v24)
  {
    sub_23DDF6180((uint64_t)v23);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    v15 = 0;
    v16 = 0xE000000000000000;
    goto LABEL_18;
  }
  v15 = v21;
  v16 = v22;
LABEL_18:
  v18 = (unint64_t)sub_23DE24834(v15, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  if (!v18)
    v18 = sub_23DDF9F38(MEMORY[0x24BEE4AF8]);
  sub_23DDE7B5C(0, &qword_256D06FB8);
  v0 = sub_23DE35AD4();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v0;
}

id sub_23DDF5C94()
{
  void *v0;
  id v1;
  id v2;
  _QWORD *v3;
  _BYTE v5[24];
  uint64_t v6;

  sub_23DE351E0();
  if (!v6)
  {
    sub_23DDF6180((uint64_t)v5);
LABEL_6:
    v2 = (id)sub_23DE18B2C(2);
    sub_23DDF6248();
    swift_allocError();
    sub_23DDF52F8(v3);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return v2;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_6;
  v0 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  v1 = (id)HKStateOfMindReflectiveIntervalFromNSString();

  if (!v1)
    goto LABEL_6;
  v2 = objc_msgSend(v1, sel_integerValue);

  return v2;
}

uint64_t sub_23DDF5DAC(uint64_t a1, void (*a2)(uint64_t *__return_ptr, __int128 *), uint64_t (*a3)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  _QWORD v14[4];

  sub_23DE351E0();
  if (v14[3])
  {
    if (swift_dynamicCast())
    {
      v6 = v13[4];
      v7 = v13[5];
      goto LABEL_6;
    }
  }
  else
  {
    sub_23DDF6180((uint64_t)v14);
  }
  v6 = 0;
  v7 = 0xE000000000000000;
LABEL_6:
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v6 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v14[0] = v6;
    v14[1] = v7;
    if (qword_256D06830 != -1)
      swift_once();
    sub_23DDF61D8();
    v9 = sub_23DE35C78();
    v10 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v10);
    v13[2] = v3;
    v11 = sub_23DDF509C(a2, (uint64_t)v13, v9, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v11;
}

void sub_23DDF5F2C(_QWORD *a1@<X0>, uint64_t (*a2)(void *)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x242644904](*a1, a1[1], a1[2], a1[3]);
  v9 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  v10 = (id)a2(v9);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_integerValue);

    *(_QWORD *)a5 = v11;
    *(_BYTE *)(a5 + 8) = 0;
  }
  else
  {
    v12 = sub_23DE18B2C(a3);
    v14 = v13;
    sub_23DDF6248();
    swift_allocError();
    a4(v12, v14);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t sub_23DDF6030()
{
  sub_23DDF60D8();
  return sub_23DE35924();
}

uint64_t sub_23DDF608C()
{
  sub_23DDF60D8();
  return sub_23DE35918();
}

unint64_t sub_23DDF60D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D06FA0;
  if (!qword_256D06FA0)
  {
    type metadata accessor for Association(255);
    result = MEMORY[0x242645660](&unk_23DE37030, v1);
    atomic_store(result, (unint64_t *)&qword_256D06FA0);
  }
  return result;
}

unint64_t sub_23DDF6120()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D06FB0;
  if (!qword_256D06FB0)
  {
    sub_23DDE3BB0(255, &qword_256D06FA8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242645660](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_256D06FB0);
  }
  return result;
}

uint64_t sub_23DDF6180(uint64_t a1)
{
  uint64_t v2;

  sub_23DDE3BB0(0, (unint64_t *)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23DDF61D8()
{
  unint64_t result;

  result = qword_256D06FC0;
  if (!qword_256D06FC0)
  {
    result = MEMORY[0x242645660](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256D06FC0);
  }
  return result;
}

void sub_23DDF621C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_23DDF5F2C(a1, MEMORY[0x24BDD3780], 4, (void (*)(uint64_t, uint64_t))sub_23DDF5474, a2);
}

unint64_t sub_23DDF6248()
{
  unint64_t result;

  result = qword_256D06FC8;
  if (!qword_256D06FC8)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for SampleDataEncodingError, &type metadata for SampleDataEncodingError);
    atomic_store(result, (unint64_t *)&qword_256D06FC8);
  }
  return result;
}

void sub_23DDF628C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_23DDF5F2C(a1, MEMORY[0x24BDD3790], 3, (void (*)(uint64_t, uint64_t))sub_23DDF53B8, a2);
}

uint64_t *sub_23DDF62B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DE351D4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DE351A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23DE34FE8();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_23DDF63E8();
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

void sub_23DDF63E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D06FD0)
  {
    sub_23DE34FE8();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D06FD0);
  }
}

uint64_t sub_23DDF643C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_23DE34FE8();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_23DDF64F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_23DDF63E8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23DDF65F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  v17 = v16(v13, 1, v14);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_23DDF63E8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_23DDF6744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_23DDF63E8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23DDF6848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  v17 = v16(v13, 1, v14);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_23DDF63E8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_23DDF6998()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDF69A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DE351D4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_23DE351A4();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_23DDF63E8();
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DDF6A3C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DDF6A48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_23DE351D4();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_23DE351A4();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_23DDF63E8();
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for StateOfMindDecoder()
{
  uint64_t result;

  result = qword_256D07030;
  if (!qword_256D07030)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DDF6B24()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DE351D4();
  if (v0 <= 0x3F)
  {
    sub_23DE351A4();
    if (v1 <= 0x3F)
    {
      sub_23DDF63E8();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

BOOL static HKQueryAnchor.< infix(_:_:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_compare_, a2) == (id)-1;
}

BOOL sub_23DDF6BEC(id *a1, _QWORD *a2)
{
  return objc_msgSend(*a1, sel_compare_, *a2) == (id)-1;
}

unint64_t sub_23DDF6C28()
{
  unint64_t result;
  unint64_t v1;

  result = qword_256D070A8;
  if (!qword_256D070A8)
  {
    v1 = sub_23DDF6C70();
    result = MEMORY[0x242645660](MEMORY[0x24BEE5BE0], v1);
    atomic_store(result, (unint64_t *)&qword_256D070A8);
  }
  return result;
}

unint64_t sub_23DDF6C70()
{
  unint64_t result;

  result = qword_256D070B0;
  if (!qword_256D070B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256D070B0);
  }
  return result;
}

uint64_t sub_23DDF6CAC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23DDF6CE0()
{
  return 0;
}

BOOL sub_23DDF6CEC(uint64_t a1, char a2)
{
  return !a1 && a2 == 2;
}

uint64_t sub_23DDF6D00(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  v5 = result;
  v6 = *(_QWORD *)v3;
  if (*(_BYTE *)(v3 + 8))
  {
    if (*(_BYTE *)(v3 + 8) == 1)
    {
      v14 = *(_QWORD *)v3;
      swift_retain();
      sub_23DDF2594(v6, 1);
      v7 = type metadata accessor for StreamConduitBase(255, a2[2], a2[3], a2[4]);
      MEMORY[0x242645660](&unk_23DE384A0, v7);
      sub_23DE35A5C();
      sub_23DE35A38();
      swift_release();
      v8 = *(_QWORD *)v3;
      *(_QWORD *)v3 = v14;
      v9 = *(_BYTE *)(v3 + 8);
      *(_BYTE *)(v3 + 8) = 1;
      swift_bridgeObjectRetain();
      sub_23DDF25E8(v8, v9);
      return swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)v3 = result;
      *(_BYTE *)(v3 + 8) = 0;
      return swift_retain();
    }
  }
  else if (v6 != result)
  {
    v10 = type metadata accessor for StreamConduitBase(0, a2[2], a2[3], a2[4]);
    sub_23DDF7450();
    swift_allocObject();
    v11 = sub_23DE35960();
    *v12 = v6;
    v12[1] = v5;
    sub_23DDE9F88(v11);
    v13 = sub_23DE3599C();
    swift_retain();
    MEMORY[0x242645660](&unk_23DE384A0, v10);
    MEMORY[0x242645660](MEMORY[0x24BEE12C8], v13);
    result = sub_23DE35A68();
    *(_QWORD *)v3 = result;
    *(_BYTE *)(v3 + 8) = 1;
  }
  return result;
}

uint64_t sub_23DDF6EC0(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (void (*)(uint64_t))result;
  if (a4)
  {
    if (a4 == 1)
    {
      MEMORY[0x24BDAC7A8](result);
      v9 = type metadata accessor for StreamConduitBase(255, v6, v7, v8);
      MEMORY[0x242645660](&unk_23DE384A0, v9);
      v10 = sub_23DE35A5C();
      MEMORY[0x242645660](MEMORY[0x24BEE1718], v10);
      return sub_23DE3590C();
    }
  }
  else
  {
    v11 = swift_retain();
    v5(v11);
    return sub_23DDF25E8(a3, 0);
  }
  return result;
}

uint64_t sub_23DDF6FD8()
{
  uint64_t v0;
  uint64_t result;

  result = sub_23DDF25E8(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 2;
  return result;
}

uint64_t sub_23DDF7000(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v2;
  v4 = *(_QWORD *)v2;
  if (!*(_BYTE *)(v2 + 8))
  {
    if (v4 != result)
      return result;
    result = sub_23DDF25E8(*(_QWORD *)v2, 0);
    goto LABEL_11;
  }
  if (*(_BYTE *)(v2 + 8) != 1)
    return result;
  v9 = *(_QWORD *)v2;
  v5 = type metadata accessor for StreamConduitBase(255, a2[2], a2[3], a2[4]);
  swift_bridgeObjectRetain();
  MEMORY[0x242645660](&unk_23DE384A0, v5);
  v6 = sub_23DE35A5C();
  sub_23DE35A44();
  swift_release();
  swift_bridgeObjectRetain();
  v7 = sub_23DE35A2C();
  swift_bridgeObjectRelease();
  if (v7 != 1)
  {
    result = sub_23DDF25E8(v4, 1);
    if (v7)
    {
      *(_QWORD *)v3 = v9;
      *(_BYTE *)(v3 + 8) = 1;
      return result;
    }
    result = swift_bridgeObjectRelease();
LABEL_11:
    *(_QWORD *)v3 = 0;
    *(_BYTE *)(v3 + 8) = 2;
    return result;
  }
  MEMORY[0x242645660](MEMORY[0x24BEE1728], v6);
  result = sub_23DE35AA4();
  if (v8)
  {
    sub_23DDF25E8(v4, 1);
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v3 = v8;
    *(_BYTE *)(v3 + 8) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23DDF7188()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23DDF7190()
{
  return sub_23DE36008();
}

uint64_t sub_23DDF71B8()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

BOOL sub_23DDF71FC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_23DDF7208()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for StreamConduitBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamConduitBase);
}

uint64_t sub_23DDF7224(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DDF2594(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_23DDF7268(uint64_t a1)
{
  return sub_23DDF25E8(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_23DDF7278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DDF2594(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_23DDF25E8(v5, v6);
  return a1;
}

uint64_t sub_23DDF72C8(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_23DDF25E8(v4, v5);
  return a1;
}

uint64_t type metadata accessor for StreamConduitList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StreamConduitList);
}

uint64_t sub_23DDF7310()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_23DDF7338()
{
  return sub_23DDF71B8();
}

uint64_t sub_23DDF7358()
{
  return sub_23DDF7190();
}

uint64_t sub_23DDF7378()
{
  sub_23DE35FFC();
  sub_23DDF7190();
  return sub_23DE36014();
}

uint64_t sub_23DDF73B4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

BOOL sub_23DDF73DC(uint64_t *a1, uint64_t *a2)
{
  return sub_23DDF71FC(*a1, *a2);
}

void sub_23DDF73FC()
{
  JUMPOUT(0x242645660);
}

void sub_23DDF740C()
{
  JUMPOUT(0x242645660);
}

void sub_23DDF741C()
{
  JUMPOUT(0x242645660);
}

uint64_t sub_23DDF742C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 40))(*a1);
}

void sub_23DDF7450()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BA8)
  {
    v0 = sub_23DE35F3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BA8);
  }
}

Swift::Void __swiftcall PostDarwinNotification(name:)(HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName name)
{
  uint64_t v1;

  v1 = sub_23DE35828();
  swift_bridgeObjectRelease();
  notify_post((const char *)(v1 + 32));
  swift_release();
}

unint64_t DarwinNotificationPublisher.DarwinNotificationName.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000031;
  if (*v0 != 1)
    v1 = 0xD000000000000044;
  if (*v0)
    return v1;
  else
    return 0xD000000000000024;
}

HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName_optional __swiftcall DarwinNotificationPublisher.DarwinNotificationName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DE35ED0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_23DDF75FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DE14098(*a1, *a2);
}

uint64_t sub_23DDF7608()
{
  return sub_23DE1AAD8();
}

uint64_t sub_23DDF7610()
{
  return sub_23DE1ADBC();
}

uint64_t sub_23DDF7618()
{
  return sub_23DE1AE3C();
}

HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName_optional sub_23DDF7620(Swift::String *a1)
{
  return DarwinNotificationPublisher.DarwinNotificationName.init(rawValue:)(*a1);
}

unint64_t sub_23DDF762C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = DarwinNotificationPublisher.DarwinNotificationName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t DarwinNotificationPublisher.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id DarwinNotificationPublisher.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t DarwinNotificationPublisher.__allocating_init(name:queue:)(_BYTE *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = 0xD000000000000031;
  v3 = 0x800000023DE3AE40;
  if (*a1 != 1)
  {
    v2 = 0xD000000000000044;
    v3 = 0x800000023DE3AE80;
  }
  if (*a1)
    v4 = v2;
  else
    v4 = 0xD000000000000024;
  if (*a1)
    v5 = v3;
  else
    v5 = 0x800000023DE3AE10;
  v7 = swift_allocObject();
  DarwinNotificationPublisher.init(name:queue:)(v4, v5, a2);
  return v7;
}

uint64_t DarwinNotificationPublisher.__allocating_init(name:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  DarwinNotificationPublisher.init(name:queue:)(a1, a2, a3);
  return v6;
}

_QWORD *DarwinNotificationPublisher.init(name:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  unint64_t v17;

  v4 = v3;
  v8 = sub_23DE35BD0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DE35BC4();
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23DE3557C();
  MEMORY[0x24BDAC7A8](v13);
  v4[2] = a1;
  v4[3] = a2;
  if (!a3)
  {
    v15[1] = sub_23DDF7974();
    v16 = 0x656873696C627570;
    v17 = 0xEA00000000002E72;
    swift_bridgeObjectRetain();
    sub_23DE35870();
    swift_bridgeObjectRelease();
    v15[0] = v16;
    sub_23DE35570();
    v16 = MEMORY[0x24BEE4AF8];
    sub_23DDF79B0();
    sub_23DDF8768(0, &qword_254327DD0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDF79F8();
    sub_23DE35C84();
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BEE5750], v8);
    a3 = sub_23DE35BDC();
  }
  v4[4] = a3;
  return v4;
}

unint64_t sub_23DDF7974()
{
  unint64_t result;

  result = qword_254327E80;
  if (!qword_254327E80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254327E80);
  }
  return result;
}

unint64_t sub_23DDF79B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254327E78;
  if (!qword_254327E78)
  {
    v1 = sub_23DE35BC4();
    result = MEMORY[0x242645660](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_254327E78);
  }
  return result;
}

unint64_t sub_23DDF79F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254327DD8[0];
  if (!qword_254327DD8[0])
  {
    sub_23DDF8768(255, &qword_254327DD0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x242645660](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, qword_254327DD8);
  }
  return result;
}

uint64_t DarwinNotificationPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  _QWORD v12[5];

  v6 = type metadata accessor for DarwinNotificationPublisher.Inner(0, a2, a3, a4);
  v7 = v4[2];
  v8 = v4[3];
  v9 = (void *)v4[4];
  swift_allocObject();
  swift_bridgeObjectRetain();
  v10 = sub_23DDF8388(a1, v7, v8, (uint64_t)v9);
  v12[3] = v6;
  v12[4] = MEMORY[0x242645660](&unk_23DE3875C, v6);
  v12[0] = v10;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t type metadata accessor for DarwinNotificationPublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DarwinNotificationPublisher.Inner);
}

void sub_23DDF7B28(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 112));
  sub_23DDF8768(0, (unint64_t *)&unk_2543287E0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  a1[3] = v4;
  a1[4] = &protocol witness table for <A> UnsafeMutablePointer<A>;
  *a1 = v3;
}

uint64_t *sub_23DDF7B80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  MEMORY[0x242645720](*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 112)), -1, -1);
  swift_bridgeObjectRelease();
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 104);
  v4 = type metadata accessor for DownstreamHandlerSubscriptionState(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);

  swift_release();
  return v0;
}

uint64_t sub_23DDF7C10()
{
  sub_23DDF7B80();
  return swift_deallocClassInstance();
}

uint64_t sub_23DDF7C34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  _UNKNOWN **v20;

  v1 = v0;
  v2 = *v0;
  v3 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 112));
  sub_23DDF8768(0, (unint64_t *)&unk_2543287E0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  v5 = v4;
  v19 = v4;
  v20 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v18[0] = v3;
  __swift_project_boxed_opaque_existential_0(v18, v4);
  sub_23DE06C18();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  v6 = *(_QWORD *)(*v1 + 128);
  v7 = *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112));
  if (*(uint64_t *)((char *)v1 + v6))
  {
    v19 = v5;
    v20 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v18[0] = v7;
    __swift_project_boxed_opaque_existential_0(v18, v5);
    sub_23DE06C20();
  }
  else
  {
    v19 = v5;
    v20 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v18[0] = v7;
    __swift_project_boxed_opaque_existential_0(v18, v5);
    sub_23DE06C20();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    v8 = *(void **)((char *)v1 + *(_QWORD *)(*v1 + 120));
    v9 = swift_allocObject();
    swift_weakInit();
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = *(_QWORD *)(v2 + 80);
    v10[3] = *(_QWORD *)(v2 + 88);
    v10[4] = v9;
    v11 = sub_23DE35828() + 32;
    type metadata accessor for DarwinNotificationObserverToken();
    v12 = (_QWORD *)swift_allocObject();
    sub_23DDF8814();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0xFFFFFFFFLL;
    v12[2] = v11;
    v12[3] = v13;
    v12[4] = v8;
    v14 = v8;
    swift_retain();
    swift_retain();
    DarwinNotificationObserverToken.beginObservation(handler:)((uint64_t)sub_23DDF8808, (uint64_t)v10);
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    v15 = *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112));
    v19 = v5;
    v20 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v18[0] = v15;
    __swift_project_boxed_opaque_existential_0(v18, v5);
    sub_23DE06C18();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *(uint64_t *)((char *)v1 + v6) = (uint64_t)v12;
    swift_retain();
    swift_release();
    v16 = *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 112));
    v19 = v5;
    v20 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v18[0] = v16;
    __swift_project_boxed_opaque_existential_0(v18, v5);
    sub_23DE06C20();
    swift_release();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_23DDF7EFC()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_23DDF7F50(result, v1, v2, v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_23DDF7F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *v4;
  v6 = type metadata accessor for DownstreamHandlerSendFailureReason(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v6);
  v7 = sub_23DE36044();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - v9;
  v11 = MEMORY[0x242645660](&unk_23DE38740, v5);
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(v11, v5, v11, (uint64_t)v10);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_23DDF8018()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v1 = v0;
  v2 = *(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 112));
  sub_23DDF8768(0, (unint64_t *)&unk_2543287E0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  v4 = v3;
  v14 = v3;
  v15 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v13[0] = v2;
  __swift_project_boxed_opaque_existential_0(v13, v3);
  sub_23DE06C18();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  v5 = *v1;
  v6 = *(_QWORD *)(*v1 + 128);
  v7 = *(uint64_t *)((char *)v1 + v6);
  if (v7)
  {
    v8 = *(os_unfair_lock_s **)(v7 + 24);
    v9 = v8 + 4;
    v10 = v8 + 5;
    swift_retain();
    os_unfair_lock_lock(v10);
    sub_23DE03EEC(v9);
    os_unfair_lock_unlock(v10);
    swift_release();
    *(uint64_t *)((char *)v1 + v6) = 0;
    swift_release();
    v5 = *v1;
  }
  v11 = *(uint64_t *)((char *)v1 + *(_QWORD *)(v5 + 112));
  v14 = v4;
  v15 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v13[0] = v11;
  __swift_project_boxed_opaque_existential_0(v13, v4);
  sub_23DE06C20();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t sub_23DDF8154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  swift_beginAccess();
  v7 = type metadata accessor for DownstreamHandlerSubscriptionState(0, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v5, v7);
}

uint64_t sub_23DDF81C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 104);
  swift_beginAccess();
  v7 = type metadata accessor for DownstreamHandlerSubscriptionState(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, a1, v7);
  return swift_endAccess();
}

uint64_t (*sub_23DDF8244())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23DDF8294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x242645660](&unk_23DE38740);
  return DownstreamHandlerSubscription.request(_:)(a1, a2, v4);
}

void sub_23DDF82DC(uint64_t a1)
{
  MEMORY[0x242645660](&unk_23DE38740, a1);
  DownstreamHandlerSubscription.cancel()();
}

uint64_t DarwinNotificationPublisher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t DarwinNotificationPublisher.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_23DDF8368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return DarwinNotificationPublisher.receive<A>(subscriber:)(a1, a2, a3, a4);
}

char *sub_23DDF8388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a4;
  v8 = *(_QWORD *)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v10 = *(_QWORD *)(*(_QWORD *)v4 + 88);
  v11 = type metadata accessor for DownstreamHandlerSubscriptionState(0, v9, v10, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - v13;
  v15 = *(_QWORD *)(v8 + 112);
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)&v4[v15] = v16;
  *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 + 128)] = 0;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v9, v10, (uint64_t)v14);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v4[*(_QWORD *)(*(_QWORD *)v4 + 104)], v14, v11);
  *((_QWORD *)v4 + 2) = a2;
  *((_QWORD *)v4 + 3) = a3;
  *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 + 120)] = v19;
  return v4;
}

unint64_t sub_23DDF848C()
{
  unint64_t result;

  result = qword_256D070B8;
  if (!qword_256D070B8)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for DarwinNotificationPublisher.DarwinNotificationName, &type metadata for DarwinNotificationPublisher.DarwinNotificationName);
    atomic_store(result, (unint64_t *)&qword_256D070B8);
  }
  return result;
}

uint64_t sub_23DDF84D0()
{
  return MEMORY[0x24BEE40A8];
}

uint64_t type metadata accessor for DarwinNotificationPublisher()
{
  return objc_opt_self();
}

uint64_t method lookup function for DarwinNotificationPublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DarwinNotificationPublisher.__allocating_init(name:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for DarwinNotificationPublisher.DarwinNotificationName(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DarwinNotificationPublisher.DarwinNotificationName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DDF85EC + 4 * byte_23DE38525[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DDF8620 + 4 * byte_23DE38520[v4]))();
}

uint64_t sub_23DDF8620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDF8628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DDF8630);
  return result;
}

uint64_t sub_23DDF863C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DDF8644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DDF8648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DDF8650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23DDF865C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for DarwinNotificationPublisher.DarwinNotificationName()
{
  return &type metadata for DarwinNotificationPublisher.DarwinNotificationName;
}

uint64_t sub_23DDF8674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for DownstreamHandlerSubscriptionState(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23DDF8714(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t sub_23DDF871C(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242645660](&unk_23DE3875C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_23DDF8748()
{
  JUMPOUT(0x242645660);
}

void sub_23DDF8758()
{
  JUMPOUT(0x242645660);
}

void sub_23DDF8768(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DDF87C0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DDF87E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDF8808()
{
  return sub_23DDF7EFC();
}

void sub_23DDF8814()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543280A0[0])
  {
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DE35D80();
    if (!v1)
      atomic_store(v0, qword_2543280A0);
  }
}

uint64_t HKProfileStore.createFetchDisplayNamePublisher()()
{
  void *v0;
  id v1;

  *(_QWORD *)(swift_allocObject() + 16) = v0;
  sub_23DDF8CA4(0, &qword_256D07120, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v1 = v0;
  return sub_23DE354D4();
}

void sub_23DDF88EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_23DDF8AD8;
  *(_QWORD *)(v7 + 24) = v6;
  v9[4] = sub_23DDF8B90;
  v9[5] = v7;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_23DDF8B98;
  v9[3] = &block_descriptor_5;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchDisplayName_, v8);
  _Block_release(v8);
}

uint64_t sub_23DDF89D0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_23DDF89F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDF88EC(a1, a2, *(void **)(v2 + 16));
}

void sub_23DDF89FC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07128)
  {
    sub_23DDF8A60();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07128);
  }
}

void sub_23DDF8A60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328840)
  {
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328840);
  }
}

uint64_t sub_23DDF8AB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DDF8AD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_BYTE *);
  _BYTE v4[40];

  v2 = *(uint64_t (**)(_BYTE *))(v1 + 16);
  sub_23DDF8C50(a1, (uint64_t)v4);
  return v2(v4);
}

void sub_23DDF8B0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, void (*a6)(id *))
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a5)
  {
    v9 = a5;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
    v8 = a5;
    a6(&v9);

  }
  else
  {
    v9 = a1;
    v10 = a2;
    v11 = a3;
    v12 = a4;
    v13 = 0;
    a6(&v9);
  }
}

void sub_23DDF8B90(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;

  sub_23DDF8B0C(a1, a2, a3, a4, a5, *(void (**)(id *))(v5 + 16));
}

uint64_t sub_23DDF8B98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v5 = a3;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (!a2)
  {
    v7 = 0;
    v9 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  v7 = sub_23DE357F8();
  v9 = v8;
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v10 = sub_23DE357F8();
  v5 = v11;
LABEL_6:
  swift_retain();
  v12 = a4;
  v6(v7, v9, v10, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DDF8C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDF8CA4(0, &qword_256D07130, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DDF8CA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DDF89FC();
    v7 = v6;
    v8 = sub_23DDE2738();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void HKAllowedCountries.Category.hash(into:)()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  if (*v0 == (void *)3)
  {
    sub_23DE36008();
  }
  else
  {
    sub_23DE36008();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_23DE36008();
        v2 = 1;
      }
      else
      {
        sub_23DE36008();
        if (v1 == (void *)2)
        {
          v2 = 2;
        }
        else
        {
          sub_23DDF90FC(v1);
          sub_23DE35C24();
          v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_23DE36008();
      v2 = 0;
    }
    sub_23DDF910C((id)v2);
  }
}

uint64_t HKAllowedCountries.Category.hashValue.getter()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  sub_23DE35FFC();
  if (v1 == (void *)3)
  {
    sub_23DE36008();
  }
  else
  {
    sub_23DE36008();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_23DE36008();
        v2 = 1;
      }
      else
      {
        sub_23DE36008();
        if (v1 == (void *)2)
        {
          v2 = 2;
        }
        else
        {
          sub_23DDF90FC(v1);
          sub_23DE35C24();
          v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_23DE36008();
      v2 = 0;
    }
    sub_23DDF910C((id)v2);
  }
  return sub_23DE36014();
}

uint64_t sub_23DDF8E98()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  sub_23DE35FFC();
  if (v1 == (void *)3)
  {
    sub_23DE36008();
  }
  else
  {
    sub_23DE36008();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_23DE36008();
        v2 = 1;
      }
      else
      {
        sub_23DE36008();
        if (v1 == (void *)2)
        {
          v2 = 2;
        }
        else
        {
          sub_23DDF90FC(v1);
          sub_23DE35C24();
          v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_23DE36008();
      v2 = 0;
    }
    sub_23DDF910C((id)v2);
  }
  return sub_23DE36014();
}

void HKAllowedCountries.RemoteState.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  if (!*v0 || v1 == (void *)1 || v1 == (void *)2)
  {
    sub_23DE36008();
  }
  else
  {
    sub_23DE36008();
    v2 = v1;
    sub_23DE35C24();
    sub_23DDF911C(v1);
  }
}

uint64_t HKAllowedCountries.RemoteState.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_23DE35FFC();
  sub_23DE36008();
  if ((unint64_t)v1 > 2)
  {
    v2 = v1;
    sub_23DE35C24();
    sub_23DDF911C(v1);
  }
  return sub_23DE36014();
}

void sub_23DDF9074()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  if (!*v0 || v1 == (void *)1 || v1 == (void *)2)
  {
    sub_23DE36008();
  }
  else
  {
    sub_23DE36008();
    v2 = v1;
    sub_23DE35C24();
    sub_23DDF911C(v1);
  }
}

id sub_23DDF90FC(id result)
{
  if ((unint64_t)result >= 3)
    return result;
  return result;
}

void sub_23DDF910C(id a1)
{
  if (a1 != (id)3)
    sub_23DDF911C(a1);
}

void sub_23DDF911C(id a1)
{
  if ((unint64_t)a1 >= 3)

}

uint64_t sub_23DDF912C()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_23DE35FFC();
  sub_23DE36008();
  if ((unint64_t)v1 > 2)
  {
    v2 = v1;
    sub_23DE35C24();
    sub_23DDF911C(v1);
  }
  return sub_23DE36014();
}

void HKAllowedCountries.category.getter(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_getObjectType();
  v3 = objc_msgSend(v1, sel_category);
  if (v3 == (id)1)
    goto LABEL_14;
  if (v3 != (id)2)
  {
    if (qword_2543272D8 != -1)
      swift_once();
    v16 = sub_23DE3536C();
    __swift_project_value_buffer(v16, (uint64_t)qword_25432A700);
    v6 = v1;
    v7 = sub_23DE35354();
    v8 = sub_23DE35B10();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v23 = v10;
      *(_DWORD *)v9 = 136446466;
      v17 = sub_23DE36080();
      v22 = sub_23DDE8458(v17, v18, &v23);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      objc_msgSend(v6, sel_category, v22, v23);
      type metadata accessor for HKAllowedCountriesCategory(0);
      v19 = sub_23DE35804();
      sub_23DDE8458(v19, v20, &v23);
      sub_23DE35C48();

      swift_bridgeObjectRelease();
      v15 = "[%{public}s] Unrecognized category value: %s";
      goto LABEL_12;
    }
LABEL_13:

    goto LABEL_14;
  }
  sub_23DDF955C(&v23);
  v4 = v23;
  if (v23 == 3)
  {
    if (qword_2543272D8 != -1)
      swift_once();
    v5 = sub_23DE3536C();
    __swift_project_value_buffer(v5, (uint64_t)qword_25432A700);
    v6 = v1;
    v7 = sub_23DE35354();
    v8 = sub_23DE35B10();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v23 = v10;
      *(_DWORD *)v9 = 136446466;
      v11 = sub_23DE36080();
      v21 = sub_23DDE8458(v11, v12, &v23);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      objc_msgSend(v6, sel_remoteState, v21);
      type metadata accessor for HKRemoteAllowedCountriesState(0);
      v13 = sub_23DE35804();
      sub_23DDE8458(v13, v14, &v23);
      sub_23DE35C48();

      swift_bridgeObjectRelease();
      v15 = "[%{public}s] Unrecognized remote state: %s";
LABEL_12:
      _os_log_impl(&dword_23DDE0000, v7, v8, v15, (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242645720](v10, -1, -1);
      MEMORY[0x242645720](v9, -1, -1);

LABEL_14:
      v4 = 3;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_15:
  *a1 = v4;
}

id sub_23DDF955C@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  id result;
  uint64_t v4;

  result = objc_msgSend(v1, sel_category);
  if (result == (id)2)
  {
    result = objc_msgSend(v1, sel_remoteState);
    switch((unint64_t)result)
    {
      case 2uLL:
        v4 = 0;
        break;
      case 3uLL:
        v4 = 1;
        break;
      case 4uLL:
        v4 = 2;
        break;
      case 5uLL:
        result = objc_msgSend(v1, sel_remoteCountrySet);
        v4 = 3;
        if (result)
          v4 = (uint64_t)result;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v4 = 3;
  }
  *a1 = v4;
  return result;
}

uint64_t _sSo18HKAllowedCountriesC18HealthKitAdditionsE11RemoteStateO2eeoiySbAE_AEtFZ_0(uint64_t *a1, id *a2)
{
  uint64_t v2;
  id v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      v2 = 0;
      v4 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v2 == 1)
  {
    if (v3 == (id)1)
    {
      v2 = 1;
      v4 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v2 != 2)
  {
    if ((unint64_t)v3 >= 3)
    {
      sub_23DDF9EE4();
      sub_23DDF90FC(v3);
      sub_23DDF90FC((id)v2);
      v4 = sub_23DE35C18();
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3 != (id)2)
  {
LABEL_11:
    sub_23DDF90FC(*a2);
    sub_23DDF90FC((id)v2);
    v4 = 0;
    goto LABEL_12;
  }
  v4 = 1;
  v2 = 2;
LABEL_12:
  sub_23DDF911C((id)v2);
  sub_23DDF911C(v3);
  return v4 & 1;
}

BOOL _sSo18HKAllowedCountriesC18HealthKitAdditionsE8CategoryO2eeoiySbAE_AEtFZ_0(void **a1, id *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v8;

  v2 = *a1;
  v3 = *a2;
  if (*a1 != (void *)3)
  {
    if (v3 != (id)3)
    {
      if (v2)
      {
        if (v2 == (void *)1)
        {
          if (v3 == (id)1)
          {
            v5 = 1;
            sub_23DDF9F20((id)1);
            sub_23DDF90FC((id)1);
            sub_23DDF911C((id)1);
            sub_23DDF911C((id)1);
            sub_23DDF910C((id)1);
            sub_23DDF910C((id)1);
            sub_23DDF910C((id)1);
            sub_23DDF910C((id)1);
            return v5;
          }
        }
        else if (v2 == (void *)2)
        {
          if (v3 == (id)2)
          {
            sub_23DDF9F20((id)2);
            sub_23DDF90FC((id)2);
            sub_23DDF911C((id)2);
            sub_23DDF911C((id)2);
            sub_23DDF910C((id)2);
            sub_23DDF910C((id)2);
            sub_23DDF910C((id)2);
            v4 = 2;
            goto LABEL_4;
          }
        }
        else if ((unint64_t)v3 >= 3)
        {
          sub_23DDF9EE4();
          sub_23DDF9F20(v3);
          sub_23DDF9F20(v2);
          sub_23DDF9F20(v3);
          sub_23DDF9F20(v2);
          sub_23DDF9F20(v3);
          sub_23DDF9F20(v2);
          v8 = sub_23DE35C18();
          sub_23DDF911C(v2);
          sub_23DDF911C(v3);
          sub_23DDF910C(v2);
          sub_23DDF910C(v3);
          sub_23DDF910C(v3);
          sub_23DDF910C(v2);
          return (v8 & 1) != 0;
        }
      }
      else if (!v3)
      {
        sub_23DDF9F20(0);
        sub_23DDF90FC(0);
        sub_23DDF911C(0);
        sub_23DDF911C(0);
        sub_23DDF910C(0);
        sub_23DDF910C(0);
        sub_23DDF910C(0);
        v4 = 0;
        goto LABEL_4;
      }
      sub_23DDF9F20(*a2);
      sub_23DDF9F20(v2);
      sub_23DDF9F20(v3);
      sub_23DDF9F20(v2);
      sub_23DDF9F20(v3);
      sub_23DDF9F20(v2);
      sub_23DDF911C(v2);
      sub_23DDF911C(v3);
      sub_23DDF910C(v2);
      sub_23DDF910C(v3);
      sub_23DDF910C(v3);
      v6 = v2;
LABEL_18:
      sub_23DDF910C(v6);
      return 0;
    }
LABEL_6:
    sub_23DDF9F20(*a2);
    sub_23DDF9F20(v2);
    sub_23DDF910C(v2);
    v6 = v3;
    goto LABEL_18;
  }
  if (v3 != (id)3)
    goto LABEL_6;
  sub_23DDF910C((id)3);
  v4 = 3;
LABEL_4:
  sub_23DDF910C((id)v4);
  return 1;
}

unint64_t sub_23DDF9954()
{
  unint64_t result;

  result = qword_256D07138;
  if (!qword_256D07138)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKAllowedCountries.Category, &type metadata for HKAllowedCountries.Category);
    atomic_store(result, (unint64_t *)&qword_256D07138);
  }
  return result;
}

unint64_t sub_23DDF999C()
{
  unint64_t result;

  result = qword_256D07140;
  if (!qword_256D07140)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKAllowedCountries.RemoteState, &type metadata for HKAllowedCountries.RemoteState);
    atomic_store(result, (unint64_t *)&qword_256D07140);
  }
  return result;
}

_QWORD *_s8CategoryOwCP(_QWORD *a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((int)v4 - 3 < 0 && (unint64_t)v3 >= 3)
    v5 = v3;
  *a1 = v3;
  return a1;
}

void _s8CategoryOwxx(void **a1)
{
  void *v1;
  int v2;

  v1 = *a1;
  v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = (int)v1;
  if (v2 - 3 < 0 && (unint64_t)v1 >= 3)

}

void **_s8CategoryOwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  int v8;
  id v9;
  id v12;
  id v13;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = (_DWORD)v5 - 3;
  v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  v8 = (_DWORD)v4 - 3;
  if ((v6 & 0x80000000) == 0)
  {
    if (v8 < 0 && (unint64_t)v7 >= 3)
      v9 = v7;
LABEL_15:
    *a1 = v7;
    return a1;
  }
  if ((v8 & 0x80000000) == 0)
  {
    if ((unint64_t)v3 >= 3)
    {

      v7 = *a2;
    }
    goto LABEL_15;
  }
  if ((unint64_t)v3 < 3)
  {
    if ((unint64_t)v7 >= 3)
    {
      *a1 = v7;
      v12 = v7;
      return a1;
    }
    goto LABEL_15;
  }
  if ((unint64_t)v7 >= 3)
  {
    *a1 = v7;
    v13 = v7;

  }
  else
  {

    *a1 = *a2;
  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **_s8CategoryOwta(void **a1, unint64_t *a2)
{
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t v7;

  v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    v4 = *a1;
  v5 = *a2;
  if ((int)v4 - 3 >= 0)
    goto LABEL_4;
  LODWORD(v7) = -1;
  if (v5 < 0xFFFFFFFF)
    v7 = *a2;
  if ((int)v7 - 3 < 0)
  {
    if ((unint64_t)v3 >= 3)
    {
      if (v5 >= 3)
      {
        *a1 = (void *)v5;

        return a1;
      }
      goto LABEL_13;
    }
  }
  else if ((unint64_t)v3 >= 3)
  {
LABEL_13:

  }
LABEL_4:
  *a1 = (void *)v5;
  return a1;
}

uint64_t _s8CategoryOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 3;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t _s8CategoryOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 3;
  }
  return result;
}

uint64_t sub_23DDF9C64(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 3;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_23DDF9C88(_QWORD *result, unsigned int a2)
{
  int v2;

  if (a2 > 0x7FFFFFFC)
  {
    v2 = -2147483645;
  }
  else
  {
    if (!a2)
      return result;
    v2 = 2;
  }
  *result = v2 + a2;
  return result;
}

ValueMetadata *type metadata accessor for HKAllowedCountries.Category()
{
  return &type metadata for HKAllowedCountries.Category;
}

_QWORD *_s11RemoteStateOwCP(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void _s11RemoteStateOwxx(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **_s11RemoteStateOwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **_s11RemoteStateOwta(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t _s11RemoteStateOwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t _s11RemoteStateOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_23DDF9E9C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23DDF9EB4(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HKAllowedCountries.RemoteState()
{
  return &type metadata for HKAllowedCountries.RemoteState;
}

unint64_t sub_23DDF9EE4()
{
  unint64_t result;

  result = qword_254327090;
  if (!qword_254327090)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254327090);
  }
  return result;
}

id sub_23DDF9F20(id result)
{
  if (result != (id)3)
    return sub_23DDF90FC(result);
  return result;
}

unint64_t sub_23DDF9F38(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE0325C();
  v2 = sub_23DE35EA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DE00D44(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_23DE032C4);
    v7 = v15;
    v8 = v16;
    result = sub_23DDFF330(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23DE0332C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DDFA068(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE0339C();
  v2 = (_QWORD *)sub_23DE35EA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_23DDFF394((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DDFA16C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE0319C();
  v2 = (_QWORD *)sub_23DE35EA0();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_23DDFF300((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DDFA270(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  sub_23DE03070();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (_QWORD *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE030EC();
  v7 = sub_23DE35EA0();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (char *)v6 + *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DE00D44(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DE03070);
    v15 = *v6;
    result = sub_23DDFF300(*v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v15;
    v19 = v8[7];
    v20 = sub_23DE34F58();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.getter()
{
  sub_23DDFA418();
  return sub_23DE35654();
}

void sub_23DDFA418()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328AC0)
  {
    type metadata accessor for HKFeatureAvailabilityContext(255);
    sub_23DDE7B5C(255, &qword_2543289D8);
    sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
    sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
    sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
    v0 = sub_23DE35678();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328AC0);
  }
}

uint64_t FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.setter()
{
  sub_23DDFA418();
  return sub_23DE35660();
}

uint64_t (*FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_23DDFA418();
  v2[4] = sub_23DE35648();
  return sub_23DDFA588;
}

uint64_t FeatureStatus.PerContextEvaluation.init(requirementsEvaluationByContext:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  return sub_23DE35684();
}

uint64_t FeatureStatus.PerContextEvaluation.init(requirementSatisfactionByContext:)(uint64_t a1)
{
  sub_23DDFF78C(a1);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  return sub_23DE35684();
}

id HKFeatureAvailabilityRequirementsEvaluation.init(satisfactionByRequirementIdentifier:)(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  swift_getKeyPath();
  swift_retain();
  sub_23DE00748(a1, (uint64_t (*)(void))sub_23DDFFAE0);
  swift_release_n();
  v2 = objc_allocWithZone(MEMORY[0x24BDBCF00]);
  v3 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithArray_, v3);

  sub_23DDFFAE8(a1);
  swift_bridgeObjectRelease();
  v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
  sub_23DDE3384(&qword_256D069E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE372EC);
  v6 = (void *)sub_23DE356FC();
  swift_release();
  v7 = objc_msgSend(v5, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v4, v6);

  return v7;
}

id FeatureStatus.PerContextEvaluation.evaluation(for:)(void *a1)
{
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  id v6;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t inited;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;

  sub_23DDFA418();
  v2 = sub_23DE35654();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = a1;
    v4 = sub_23DDFF394((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      v6 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v4);

      swift_bridgeObjectRelease();
      return v6;
    }

  }
  swift_bridgeObjectRelease();
  if (qword_2543272D8 != -1)
    swift_once();
  v8 = sub_23DE3536C();
  __swift_project_value_buffer(v8, (uint64_t)qword_25432A700);
  v9 = a1;
  v10 = sub_23DE35354();
  v11 = sub_23DE35B10();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v24 = v13;
    *(_DWORD *)v12 = 136446466;
    sub_23DDE8458(0xD000000000000014, 0x800000023DE388F0, &v24);
    sub_23DE35C48();
    *(_WORD *)(v12 + 12) = 2082;
    v14 = sub_23DE357F8();
    sub_23DDE8458(v14, v15, &v24);
    sub_23DE35C48();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DDE0000, v10, v11, "[%{public}s] No evaluation present for context '%{public}s'; ensure the context is declared in the feature availab"
      "ility extension's requirements",
      (uint8_t *)v12,
      0x16u);
    swift_arrayDestroy();
    MEMORY[0x242645720](v13, -1, -1);
    MEMORY[0x242645720](v12, -1, -1);

  }
  else
  {

  }
  v16 = (void *)sub_23DE357D4();
  v17 = objc_allocWithZone(MEMORY[0x24BDBCF00]);
  v24 = (uint64_t)v16;
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  v18 = v16;
  v19 = objc_msgSend(v17, sel_initWithObject_, sub_23DE35F6C());

  swift_unknownObjectRelease();
  sub_23DDF8768(0, &qword_256D07148, (uint64_t (*)(uint64_t))sub_23DE00978, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DE388B0;
  *(_QWORD *)(inited + 32) = sub_23DE357D4();
  sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
  *(_QWORD *)(inited + 40) = sub_23DE35C00();
  sub_23DDFA068(inited);
  v21 = objc_allocWithZone(MEMORY[0x24BDD3BD8]);
  sub_23DDE3384(&qword_256D069E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE372EC);
  v22 = (void *)sub_23DE356FC();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v21, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v19, v22);

  return v23;
}

uint64_t FeatureStatus.PerContextEvaluation.hash(into:)()
{
  sub_23DDFA418();
  sub_23DE009F4();
  return sub_23DE35750();
}

uint64_t static FeatureStatus.PerContextEvaluation.== infix(_:_:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
  return sub_23DE3566C();
}

uint64_t sub_23DDFADB4()
{
  return 1;
}

unint64_t sub_23DDFADC4()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_23DDFADE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE02C54(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DDFAE08()
{
  return 0;
}

void sub_23DDFAE14(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23DDFAE20()
{
  sub_23DE00AB4();
  return sub_23DE36068();
}

uint64_t sub_23DDFAE48()
{
  sub_23DE00AB4();
  return sub_23DE36074();
}

uint64_t FeatureStatus.PerContextEvaluation.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DE00F38(0, &qword_256D07168, (uint64_t (*)(void))sub_23DE00AB4, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00AB4();
  sub_23DE3605C();
  sub_23DDFA418();
  sub_23DDE3384(&qword_256D07178, (uint64_t (*)(uint64_t))sub_23DDFA418, MEMORY[0x24BDD21E8]);
  sub_23DE35F18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatus.PerContextEvaluation.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t FeatureStatus.PerContextEvaluation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = a2;
  sub_23DDFA418();
  v20 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00F38(0, &qword_256D07180, (uint64_t (*)(void))sub_23DE00AB4, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x24BEE33E0]);
  v21 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  v10 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00AB4();
  v13 = v22;
  sub_23DE36050();
  if (!v13)
  {
    v14 = (uint64_t)v12;
    sub_23DDE3384(&qword_256D07188, (uint64_t (*)(uint64_t))sub_23DDFA418, MEMORY[0x24BDD21F8]);
    v16 = v19;
    v15 = v20;
    sub_23DE35EF4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v14, v16, v15);
    sub_23DE00DE0(v14, v18, type metadata accessor for FeatureStatus.PerContextEvaluation);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DDFB1EC()
{
  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t sub_23DDFB240()
{
  sub_23DDFA418();
  sub_23DE009F4();
  return sub_23DE35750();
}

uint64_t sub_23DDFB280()
{
  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t sub_23DDFB2D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.PerContextEvaluation.init(from:)(a1, a2);
}

uint64_t sub_23DDFB2E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DE00F38(0, &qword_256D07168, (uint64_t (*)(void))sub_23DE00AB4, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00AB4();
  sub_23DE3605C();
  sub_23DDFA418();
  sub_23DDE3384(&qword_256D07178, (uint64_t (*)(uint64_t))sub_23DDFA418, MEMORY[0x24BDD21E8]);
  sub_23DE35F18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_23DDFB414()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
  return sub_23DE3566C();
}

uint64_t (*FeatureStatus.OnboardingRecord.perContextEvaluation.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.settings.getter()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  return sub_23DE35594();
}

uint64_t sub_23DDFB560(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  v2 = v1;
  return sub_23DE355A0();
}

uint64_t FeatureStatus.OnboardingRecord.settings.setter()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  return sub_23DE355A0();
}

uint64_t (*FeatureStatus.OnboardingRecord.settings.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  v2[4] = sub_23DE35588();
  return sub_23DDFA588;
}

void sub_23DDFB654(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.getter()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  return swift_bridgeObjectRetain();
}

uint64_t FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.modify())()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.dateOnboardingCompleted.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 28);
  v4 = sub_23DE350FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FeatureStatus.OnboardingRecord.dateOnboardingCompleted.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 28);
  v4 = sub_23DE350FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FeatureStatus.OnboardingRecord.dateOnboardingCompleted.modify())()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.init(perContextEvaluation:settings:allOnboardedCountryCodes:dateOnboardingCompleted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_23DE00B64();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00D44(a1, a4, type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_23DDE7B5C(0, &qword_254328AC8);
  sub_23DE355C4();
  sub_23DDEF790(a1, type metadata accessor for FeatureStatus.PerContextEvaluation);
  v13 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4 + v13[5], v12, v9);
  *(_QWORD *)(a4 + v13[6]) = a2;
  v14 = a4 + v13[7];
  v15 = sub_23DE350FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a3, v15);
}

uint64_t FeatureStatus.OnboardingRecord.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  v3 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  sub_23DE00BC8();
  sub_23DE35750();
  v4 = *(_QWORD *)(v1 + *(int *)(v3 + 24));
  swift_bridgeObjectRetain();
  sub_23DE0004C(a1, v4);
  swift_bridgeObjectRelease();
  sub_23DE350FC();
  sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  return sub_23DE35750();
}

uint64_t static FeatureStatus.OnboardingRecord.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
  if ((sub_23DE3566C() & 1) != 0
    && (v4 = type metadata accessor for FeatureStatus.OnboardingRecord(0),
        sub_23DDE7B5C(0, &qword_254328AC8),
        sub_23DE00A74(&qword_254327E70, &qword_254328AC8, 0x24BDD3BE8, MEMORY[0x24BEE5BE0]),
        (sub_23DE355AC() & 1) != 0)
    && (sub_23DDFBB90(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24))) & 1) != 0)
  {
    return sub_23DE350E4();
  }
  else
  {
    return 0;
  }
}

uint64_t sub_23DDFBB90(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_23DE35FFC();
    swift_bridgeObjectRetain();
    sub_23DE3584C();
    v18 = sub_23DE36014();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_23DE35F54() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_23DE35F54() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_23DDFBE14(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23DDFBE4C + 4 * byte_23DE388C0[a1]))(0xD000000000000014, 0x800000023DE3B820);
}

uint64_t sub_23DDFBE4C()
{
  return 0x73676E6974746573;
}

uint64_t sub_23DDFBE64(uint64_t a1)
{
  return a1 + 4;
}

BOOL sub_23DDFBE8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23DDFBEA0()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDFBEE4()
{
  return sub_23DE36008();
}

uint64_t sub_23DDFBF0C()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDFBF4C()
{
  unsigned __int8 *v0;

  return sub_23DDFBE14(*v0);
}

uint64_t sub_23DDFBF54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE02CD8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DDFBF78(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23DDFBF84()
{
  sub_23DE00C48();
  return sub_23DE36068();
}

uint64_t sub_23DDFBFAC()
{
  sub_23DE00C48();
  return sub_23DE36074();
}

uint64_t FeatureStatus.OnboardingRecord.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  sub_23DE00F38(0, &qword_256D071A8, (uint64_t (*)(void))sub_23DE00C48, (uint64_t)&type metadata for FeatureStatus.OnboardingRecord.CodingKeys, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00C48();
  sub_23DE3605C();
  v16 = 0;
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_23DDE3384(&qword_256D071B8, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
  sub_23DE35F18();
  if (!v2)
  {
    v10 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
    v15 = 1;
    sub_23DE00B64();
    sub_23DDE3384(&qword_256D071C0, (uint64_t (*)(uint64_t))sub_23DE00B64, MEMORY[0x24BDD2060]);
    sub_23DE35F18();
    v12[1] = *(_QWORD *)(v3 + *(int *)(v10 + 24));
    v14 = 2;
    sub_23DE00C8C();
    sub_23DE00CE8(&qword_256D071D0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1700]);
    sub_23DE35F18();
    v13 = 3;
    sub_23DE350FC();
    sub_23DDE3384(&qword_256D071D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23DE35F18();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t FeatureStatus.OnboardingRecord.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  v1 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  sub_23DE00BC8();
  sub_23DE35750();
  sub_23DE0004C((uint64_t)v3, *(_QWORD *)(v0 + *(int *)(v1 + 24)));
  sub_23DE350FC();
  sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t FeatureStatus.OnboardingRecord.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v25 = a2;
  v26 = sub_23DE350FC();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00B64();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v28 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x24BDAC7A8](v31);
  v32 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00F38(0, &qword_256D071E0, (uint64_t (*)(void))sub_23DE00C48, (uint64_t)&type metadata for FeatureStatus.OnboardingRecord.CodingKeys, MEMORY[0x24BEE33E0]);
  v34 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - v9;
  v11 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00C48();
  v33 = v10;
  v14 = v35;
  sub_23DE36050();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v28;
  v16 = v29;
  v35 = v8;
  v17 = v11;
  v18 = v30;
  v40 = 0;
  sub_23DDE3384(&qword_256D071E8, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
  v19 = (uint64_t)v32;
  sub_23DE35EF4();
  sub_23DE00DE0(v19, (uint64_t)v13, type metadata accessor for FeatureStatus.PerContextEvaluation);
  v39 = 1;
  sub_23DDE3384(&qword_256D071F0, (uint64_t (*)(uint64_t))sub_23DE00B64, MEMORY[0x24BDD2078]);
  sub_23DE35EF4();
  v20 = v17;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v13[*(int *)(v17 + 20)], v15, v18);
  sub_23DE00C8C();
  v38 = 2;
  sub_23DE00CE8(&qword_256D071F8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
  sub_23DE35EF4();
  *(_QWORD *)&v13[*(int *)(v17 + 24)] = v36;
  v37 = 3;
  sub_23DDE3384(&qword_256D07200, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v21 = v26;
  sub_23DE35EF4();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v13[*(int *)(v20 + 28)], v27, v21);
  sub_23DE00D44((uint64_t)v13, v25, type metadata accessor for FeatureStatus.OnboardingRecord);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23DDEF790((uint64_t)v13, type metadata accessor for FeatureStatus.OnboardingRecord);
}

uint64_t sub_23DDFC790(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[72];

  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  sub_23DE00B64();
  sub_23DE00BC8();
  sub_23DE35750();
  sub_23DE0004C((uint64_t)v4, *(_QWORD *)(v1 + *(int *)(a1 + 24)));
  sub_23DE350FC();
  sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t sub_23DDFC86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  sub_23DE00B64();
  sub_23DE00BC8();
  sub_23DE35750();
  sub_23DE0004C(a1, *(_QWORD *)(v2 + *(int *)(a2 + 24)));
  sub_23DE350FC();
  sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  return sub_23DE35750();
}

uint64_t sub_23DDFC938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[72];

  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  sub_23DE00B64();
  sub_23DE00BC8();
  sub_23DE35750();
  sub_23DE0004C((uint64_t)v5, *(_QWORD *)(v2 + *(int *)(a2 + 24)));
  sub_23DE350FC();
  sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t sub_23DDFCA10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.OnboardingRecord.init(from:)(a1, a2);
}

uint64_t sub_23DDFCA24(_QWORD *a1)
{
  return FeatureStatus.OnboardingRecord.encode(to:)(a1);
}

uint64_t sub_23DDFCA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
  if ((sub_23DE3566C() & 1) != 0
    && (sub_23DDE7B5C(0, &qword_254328AC8),
        sub_23DE00A74(&qword_254327E70, &qword_254328AC8, 0x24BDD3BE8, MEMORY[0x24BEE5BE0]),
        (sub_23DE355AC() & 1) != 0)
    && (sub_23DDFBB90(*(_QWORD *)(a1 + *(int *)(a3 + 24)), *(_QWORD *)(a2 + *(int *)(a3 + 24))) & 1) != 0)
  {
    return sub_23DE350E4();
  }
  else
  {
    return 0;
  }
}

uint64_t FeatureStatus.Eligibility.perContextEvaluation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE00D44(v1, a1, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t FeatureStatus.Eligibility.perContextEvaluation.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DE00B0C(a1, v1);
}

uint64_t (*FeatureStatus.Eligibility.perContextEvaluation.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.Eligibility.init(perContextEvaluation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DE00DE0(a1, a2, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t FeatureStatus.Eligibility.hash(into:)()
{
  sub_23DDFA418();
  sub_23DE009F4();
  return sub_23DE35750();
}

uint64_t static FeatureStatus.Eligibility.== infix(_:_:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
  return sub_23DE3566C();
}

uint64_t sub_23DDFCD94()
{
  return sub_23DE36008();
}

unint64_t sub_23DDFCDB8()
{
  return 0xD000000000000014;
}

uint64_t sub_23DDFCDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE02E74(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DDFCDFC()
{
  sub_23DE00D88();
  return sub_23DE36068();
}

uint64_t sub_23DDFCE24()
{
  sub_23DE00D88();
  return sub_23DE36074();
}

uint64_t FeatureStatus.Eligibility.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DE00F38(0, &qword_256D07208, (uint64_t (*)(void))sub_23DE00D88, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00D88();
  sub_23DE3605C();
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_23DDE3384(&qword_256D071B8, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
  sub_23DE35F18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatus.Eligibility.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DDFA418();
  sub_23DE009F4();
  sub_23DE35750();
  return sub_23DE36014();
}

uint64_t FeatureStatus.Eligibility.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v17 = a2;
  v18 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x24BDAC7A8](v18);
  v19 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00F38(0, &qword_256D07218, (uint64_t (*)(void))sub_23DE00D88, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00D88();
  v12 = v20;
  sub_23DE36050();
  if (!v12)
  {
    v13 = v17;
    sub_23DDE3384(&qword_256D071E8, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
    v14 = (uint64_t)v19;
    sub_23DE35EF4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_23DE00DE0(v14, (uint64_t)v11, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_23DE00DE0((uint64_t)v11, v13, type metadata accessor for FeatureStatus.Eligibility);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DDFD1C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.Eligibility.init(from:)(a1, a2);
}

uint64_t sub_23DDFD1D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DE00F38(0, &qword_256D07208, (uint64_t (*)(void))sub_23DE00D88, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00D88();
  sub_23DE3605C();
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_23DDE3384(&qword_256D071B8, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
  sub_23DE35F18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

BOOL FeatureStatus.isOnboardingRecordPresent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _BOOL8 v4;
  uint64_t v6;

  v1 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00D44(v0, (uint64_t)v3, type metadata accessor for FeatureStatus);
  v4 = swift_getEnumCaseMultiPayload() != 1;
  sub_23DDEF790((uint64_t)v3, type metadata accessor for FeatureStatus);
  return v4;
}

id FeatureStatus.subscript.getter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00D44(v2, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DE00DE0((uint64_t)v12, (uint64_t)v6, type metadata accessor for FeatureStatus.Eligibility);
    v14 = FeatureStatus.PerContextEvaluation.evaluation(for:)(a1);
    v15 = (uint64_t)v6;
    v16 = type metadata accessor for FeatureStatus.Eligibility;
  }
  else
  {
    sub_23DE00DE0((uint64_t)v12, (uint64_t)v9, type metadata accessor for FeatureStatus.OnboardingRecord);
    v14 = FeatureStatus.PerContextEvaluation.evaluation(for:)(a1);
    v15 = (uint64_t)v9;
    v16 = type metadata accessor for FeatureStatus.OnboardingRecord;
  }
  sub_23DDEF790(v15, v16);
  return v14;
}

uint64_t FeatureStatus.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00D44(v2, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DE00DE0((uint64_t)v12, (uint64_t)v6, type metadata accessor for FeatureStatus.Eligibility);
    sub_23DE36008();
    sub_23DDFA418();
    sub_23DE009F4();
    sub_23DE35750();
    v14 = (uint64_t)v6;
    v15 = type metadata accessor for FeatureStatus.Eligibility;
  }
  else
  {
    sub_23DE00DE0((uint64_t)v12, (uint64_t)v9, type metadata accessor for FeatureStatus.OnboardingRecord);
    sub_23DE36008();
    sub_23DDFA418();
    sub_23DE009F4();
    sub_23DE35750();
    sub_23DE00B64();
    sub_23DE00BC8();
    sub_23DE35750();
    sub_23DE0004C(a1, *(_QWORD *)&v9[*(int *)(v7 + 24)]);
    sub_23DE350FC();
    sub_23DDE3384(&qword_256D071A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DE35750();
    v14 = (uint64_t)v9;
    v15 = type metadata accessor for FeatureStatus.OnboardingRecord;
  }
  return sub_23DDEF790(v14, v15);
}

uint64_t sub_23DDFD730(char a1)
{
  if ((a1 & 1) != 0)
    return 0x616F626E4F746F6ELL;
  else
    return 0x656472616F626E6FLL;
}

BOOL sub_23DDFD774(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23DDFD78C()
{
  char *v0;

  return sub_23DDFD730(*v0);
}

uint64_t sub_23DDFD794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE02EF8(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DDFD7B8(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23DDFD7C4()
{
  sub_23DE00EF4();
  return sub_23DE36068();
}

uint64_t sub_23DDFD7EC()
{
  sub_23DE00EF4();
  return sub_23DE36074();
}

uint64_t sub_23DDFD818()
{
  sub_23DE00E6C();
  return sub_23DE36068();
}

uint64_t sub_23DDFD840()
{
  sub_23DE00E6C();
  return sub_23DE36074();
}

uint64_t sub_23DDFD868()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDFD8A8()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t sub_23DDFD8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DE02FF8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DDFD90C()
{
  sub_23DE00EB0();
  return sub_23DE36068();
}

uint64_t sub_23DDFD934()
{
  sub_23DE00EB0();
  return sub_23DE36074();
}

uint64_t FeatureStatus.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DE00F38(0, &qword_256D07220, (uint64_t (*)(void))sub_23DE00E6C, (uint64_t)&type metadata for FeatureStatus.NotOnboardedCodingKeys, MEMORY[0x24BEE3520]);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v25 - v4;
  v29 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x24BDAC7A8](v29);
  v30 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00F38(0, &qword_256D07230, (uint64_t (*)(void))sub_23DE00EB0, (uint64_t)&type metadata for FeatureStatus.OnboardedCodingKeys, v2);
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v26 = (char *)&v25 - v7;
  v25 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x24BDAC7A8](v25);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00F38(0, &qword_256D07240, (uint64_t (*)(void))sub_23DE00EF4, (uint64_t)&type metadata for FeatureStatus.CodingKeys, v2);
  v14 = v13;
  v34 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v25 - v15;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00EF4();
  sub_23DE3605C();
  sub_23DE00D44(v35, (uint64_t)v12, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = v30;
    sub_23DE00DE0((uint64_t)v12, v30, type metadata accessor for FeatureStatus.Eligibility);
    v37 = 1;
    sub_23DE00E6C();
    v18 = v31;
    sub_23DE35F0C();
    sub_23DDE3384(&qword_256D07250, type metadata accessor for FeatureStatus.Eligibility, (uint64_t)&protocol conformance descriptor for FeatureStatus.Eligibility);
    v19 = v33;
    sub_23DE35F18();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v19);
    v20 = type metadata accessor for FeatureStatus.Eligibility;
    v21 = v17;
  }
  else
  {
    sub_23DE00DE0((uint64_t)v12, (uint64_t)v9, type metadata accessor for FeatureStatus.OnboardingRecord);
    v36 = 0;
    sub_23DE00EB0();
    v22 = v26;
    sub_23DE35F0C();
    sub_23DDE3384(&qword_256D07258, type metadata accessor for FeatureStatus.OnboardingRecord, (uint64_t)&protocol conformance descriptor for FeatureStatus.OnboardingRecord);
    v23 = v28;
    sub_23DE35F18();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v23);
    v20 = type metadata accessor for FeatureStatus.OnboardingRecord;
    v21 = (uint64_t)v9;
  }
  sub_23DDEF790(v21, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v14);
}

uint64_t FeatureStatus.hashValue.getter()
{
  _BYTE v1[72];

  sub_23DE35FFC();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_23DE36014();
}

uint64_t FeatureStatus.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  char v50;
  char v51;

  v40 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DE00F38(0, &qword_256D07260, (uint64_t (*)(void))sub_23DE00E6C, (uint64_t)&type metadata for FeatureStatus.NotOnboardedCodingKeys, MEMORY[0x24BEE33E0]);
  v42 = v4;
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v36 - v5;
  sub_23DE00F38(0, &qword_256D07268, (uint64_t (*)(void))sub_23DE00EB0, (uint64_t)&type metadata for FeatureStatus.OnboardedCodingKeys, v3);
  v41 = v6;
  v43 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v36 - v7;
  sub_23DE00F38(0, &qword_256D07270, (uint64_t (*)(void))sub_23DE00EF4, (uint64_t)&type metadata for FeatureStatus.CodingKeys, v3);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - v9;
  v11 = type metadata accessor for FeatureStatus(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_23DE00EF4();
  v20 = v49;
  sub_23DE36050();
  if (v20)
    goto LABEL_7;
  v37 = v14;
  v38 = v17;
  v22 = v47;
  v21 = v48;
  v36 = v19;
  v39 = v11;
  v49 = a1;
  v23 = sub_23DE35F00();
  v24 = v10;
  if (*(_QWORD *)(v23 + 16) != 1)
  {
    v28 = sub_23DE35D68();
    swift_allocError();
    v30 = v29;
    sub_23DE00F94();
    *v30 = v39;
    sub_23DE35EE8();
    sub_23DE35D50();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BEE26D0], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v22);
    a1 = v49;
LABEL_7:
    v31 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v31);
  }
  if ((*(_BYTE *)(v23 + 32) & 1) != 0)
  {
    v51 = 1;
    sub_23DE00E6C();
    v25 = v45;
    sub_23DE35EDC();
    type metadata accessor for FeatureStatus.Eligibility(0);
    sub_23DDE3384(&qword_256D07288, type metadata accessor for FeatureStatus.Eligibility, (uint64_t)&protocol conformance descriptor for FeatureStatus.Eligibility);
    v26 = (uint64_t)v37;
    v27 = v42;
    sub_23DE35EF4();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v22);
  }
  else
  {
    v50 = 0;
    sub_23DE00EB0();
    sub_23DE35EDC();
    type metadata accessor for FeatureStatus.OnboardingRecord(0);
    sub_23DDE3384(&qword_256D07290, type metadata accessor for FeatureStatus.OnboardingRecord, (uint64_t)&protocol conformance descriptor for FeatureStatus.OnboardingRecord);
    v33 = v41;
    sub_23DE35EF4();
    v34 = v46;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v22);
    v26 = (uint64_t)v38;
  }
  swift_storeEnumTagMultiPayload();
  v35 = (uint64_t)v36;
  sub_23DE00DE0(v26, (uint64_t)v36, type metadata accessor for FeatureStatus);
  sub_23DE00DE0(v35, v40, type metadata accessor for FeatureStatus);
  v31 = (uint64_t)v49;
  return __swift_destroy_boxed_opaque_existential_1(v31);
}

uint64_t sub_23DDFE28C()
{
  _BYTE v1[72];

  sub_23DE35FFC();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_23DE36014();
}

uint64_t sub_23DDFE2CC()
{
  _BYTE v1[72];

  sub_23DE35FFC();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_23DE36014();
}

uint64_t sub_23DDFE304@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_23DDFE318(_QWORD *a1)
{
  return FeatureStatus.encode(to:)(a1);
}

uint64_t FeatureStatus.PerContextEvaluation.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23DE0103C();
    v1 = sub_23DE35EA0();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v4 = v1;
  v2 = (_QWORD *)swift_bridgeObjectRetain();
  sub_23DDFFCD4(v2, 1, &v4);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  return sub_23DE35684();
}

uint64_t sub_23DDFE484(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23DE0103C();
    v1 = sub_23DE35EA0();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v4 = v1;
  v2 = (_QWORD *)swift_bridgeObjectRetain();
  sub_23DDFFCD4(v2, 1, &v4);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  return sub_23DE35684();
}

uint64_t HKFeatureAvailabilityRequirementsEvaluation.satisfactionByRequirementIdentifier.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  _BYTE v13[32];
  uint64_t v14;
  _BYTE v15[32];

  v1 = objc_msgSend(v0, sel_requirementIdentifiersOrderedByPriority);
  v2 = objc_msgSend(v1, sel_array);

  v3 = sub_23DE35948();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      sub_23DDE9010(v5, (uint64_t)v15);
      sub_23DDE9010((uint64_t)v15, (uint64_t)v13);
      type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
      if ((swift_dynamicCast() & 1) == 0)
        v14 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      v7 = v14;
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = sub_23DDF1F6C(0, v6[2] + 1, 1, v6);
        v9 = v6[2];
        v8 = v6[3];
        if (v9 >= v8 >> 1)
          v6 = sub_23DDF1F6C((_QWORD *)(v8 > 1), v9 + 1, 1, v6);
        v6[2] = v9 + 1;
        v6[v9 + 4] = v7;
      }
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v10 = v0;
  v11 = sub_23DE010E0((uint64_t)v6, v10);
  swift_bridgeObjectRelease();

  return v11;
}

id HKFeatureAvailabilityRequirementsEvaluation.subscript.getter(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_isRequirementSatisfiedWithIdentifier_, a1);
}

uint64_t sub_23DDFE7C8(void *a1)
{
  id v1;
  uint64_t v3;

  v1 = a1;
  swift_getAtKeyPath();

  return v3;
}

uint64_t FeatureStatus.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  __objc2_prot_list **p_base_prots;
  id v30;
  unint64_t v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  id i;
  id v44;
  id v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  id v66;
  char *v67;
  id v68;
  id v69;
  uint64_t v70;
  void *v71;
  unint64_t v72;
  __objc2_prot_list **v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char v80;
  void (*v81)(char *, uint64_t);
  id v82;
  id v83;
  uint64_t v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  _QWORD *v105;
  id v106;
  uint64_t v107;
  unint64_t v108;

  v96 = a2;
  sub_23DE00B64();
  v94 = *(_QWORD *)(v3 - 8);
  v95 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v93 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDF8768(0, (unint64_t *)&qword_254328878, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v104 = (char *)&v84 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v97 = (char *)&v84 - v11;
  v12 = sub_23DE350FC();
  v105 = *(_QWORD **)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v101 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v103 = (char *)&v84 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v102 = (char *)&v84 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v89 = (char *)&v84 - v19;
  v90 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  v20 = MEMORY[0x24BDAC7A8](v90);
  v91 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v92 = (uint64_t)&v84 - v22;
  v23 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v99 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (uint64_t)&v84 - v26;
  v28 = objc_msgSend(a1, sel_requirementsEvaluationByContext);
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DDE7B5C(0, &qword_2543289D8);
  sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
  sub_23DE35708();

  sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
  sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
  sub_23DE35684();
  p_base_prots = &DarwinNotificationObserverToken.base_prots;
  v30 = objc_msgSend(a1, sel_onboardingRecord);
  v31 = (unint64_t)&DarwinNotificationObserverToken.base_prots;
  v32 = (char *)objc_msgSend(v30, sel_onboardingState);

  if ((unint64_t)(v32 - 2) < 4)
  {
    sub_23DE00D44(v27, v99, type metadata accessor for FeatureStatus.PerContextEvaluation);
    v33 = objc_msgSend(a1, sel_onboardingRecord);
    v34 = objc_msgSend(v33, sel_featureSettings);

    if (!v34)
    {
      sub_23DDF9F38(MEMORY[0x24BEE4AF8]);
      v35 = objc_allocWithZone(MEMORY[0x24BDD3BE8]);
      v36 = (void *)sub_23DE356FC();
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v35, sel_initWithDictionary_, v36);

    }
    v86 = v34;
    v37 = objc_msgSend(a1, sel_onboardingRecord);
    v38 = objc_msgSend(v37, sel_allOnboardedCountryCodesRegardlessOfSupportedState);

    v31 = sub_23DE35A14();
    v39 = objc_msgSend(a1, sel_onboardingRecord);
    v40 = objc_msgSend(v39, sel_allOnboardingCompletionsRegardlessOfSupportedState);

    sub_23DDE7B5C(0, &qword_254328850);
    v41 = sub_23DE35948();

    if (v41 >> 62)
    {
LABEL_37:
      swift_bridgeObjectRetain();
      v42 = sub_23DE35E70();
    }
    else
    {
      v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v88 = a1;
    v87 = v27;
    v85 = v31;
    if (v42)
    {
      v98 = v41 & 0xC000000000000001;
      v100 = (char *)v42;
      if ((v41 & 0xC000000000000001) != 0)
        goto LABEL_39;
      if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        for (i = *(id *)(v41 + 32); ; i = (id)MEMORY[0x242644E08](0, v41))
        {
          v44 = i;
          v45 = objc_msgSend(v44, sel_completionDate);
          v46 = v103;
          sub_23DE350F0();

          v48 = (uint64_t)v104;
          v47 = v105;
          a1 = (void *)v105[4];
          ((void (*)(char *, char *, uint64_t))a1)(v104, v46, v12);

          v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v47[7];
          v49(v48, 0, 1, v12);
          p_base_prots = (__objc2_prot_list **)v47[6];
          v50 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))p_base_prots)(v48, 1, v12);
          v51 = (uint64_t)v97;
          if (v50 == 1)
          {
            v52 = v105;
            goto LABEL_13;
          }
          v59 = v102;
          ((void (*)(char *, uint64_t, uint64_t))a1)(v102, v48, v12);
          if (v100 == (char *)1)
          {
LABEL_15:
            v49((uint64_t)v8, 1, 1, v12);
LABEL_16:
            swift_bridgeObjectRelease();
            sub_23DE011DC((uint64_t)v8);
            v51 = (uint64_t)v97;
            ((void (*)(char *, char *, uint64_t))a1)(v97, v59, v12);
            v49(v51, 0, 1, v12);
            swift_bridgeObjectRelease();
            v53 = v95;
            v57 = v96;
            v55 = v93;
            v54 = v94;
            v56 = v105;
            v58 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))p_base_prots)(v51, 1, v12);
            goto LABEL_17;
          }
          v84 = v41 & 0xFFFFFFFFFFFFFF8;
          v27 = 5;
          while (1)
          {
            v31 = v27 - 4;
            if (v98)
            {
              v66 = (id)MEMORY[0x242644E08](v27 - 4, v41);
              v67 = (char *)(v27 - 3);
              if (__OFADD__(v31, 1))
                goto LABEL_36;
              goto LABEL_33;
            }
            if (v31 >= *(_QWORD *)(v84 + 16))
              break;
            v66 = *(id *)(v41 + 8 * v27);
            v67 = (char *)(v27 - 3);
            if (__OFADD__(v31, 1))
            {
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_33:
            v104 = v67;
            v68 = v66;
            v69 = objc_msgSend(v68, sel_completionDate);
            v70 = v12;
            v71 = a1;
            v72 = v41;
            v73 = p_base_prots;
            v74 = v49;
            v75 = v8;
            v76 = v103;
            sub_23DE350F0();

            v77 = v75;
            v78 = v76;
            v8 = v75;
            v49 = v74;
            p_base_prots = v73;
            v41 = v72;
            a1 = v71;
            v12 = v70;
            ((void (*)(char *, char *, uint64_t))a1)(v77, v78, v70);

            v59 = v102;
            v49((uint64_t)v8, 0, 1, v70);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))p_base_prots)(v8, 1, v70) == 1)
              goto LABEL_16;
            v79 = v101;
            ((void (*)(char *, char *, uint64_t))a1)(v101, v8, v70);
            sub_23DDE3384(&qword_254328828, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
            v80 = sub_23DE35780();
            v81 = (void (*)(char *, uint64_t))v105[1];
            if ((v80 & 1) != 0)
            {
              v81(v59, v70);
              ((void (*)(char *, char *, uint64_t))a1)(v59, v79, v70);
            }
            else
            {
              v81(v79, v70);
            }
            ++v27;
            if (v104 == v100)
              goto LABEL_15;
          }
          __break(1u);
LABEL_39:
          ;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
    v48 = (uint64_t)v104;
    v52 = v105;
    v49 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v105[7];
    v49((uint64_t)v104, 1, 1, v12);
    v51 = (uint64_t)v97;
LABEL_13:
    swift_bridgeObjectRelease();
    sub_23DE011DC(v48);
    v49(v51, 1, 1, v12);
    swift_bridgeObjectRelease();
    v54 = v94;
    v53 = v95;
    v55 = v93;
    v56 = v52;
    v57 = v96;
    v58 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v52[6])(v51, 1, v12);
LABEL_17:
    v60 = v89;
    if (v58 == 1)
    {
      sub_23DE350B4();
      sub_23DE011DC(v51);
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v56[4])(v89, v51, v12);
    }
    v61 = v99;
    v62 = v91;
    sub_23DE00D44(v99, v91, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_23DDE7B5C(0, &qword_254328AC8);
    sub_23DE355C4();
    sub_23DDEF790(v61, type metadata accessor for FeatureStatus.PerContextEvaluation);
    v63 = v90;
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v62 + *(int *)(v90 + 20), v55, v53);
    *(_QWORD *)(v62 + *(int *)(v63 + 24)) = v85;
    ((void (*)(uint64_t, char *, uint64_t))v56[4])(v62 + *(int *)(v63 + 28), v60, v12);
    v64 = v92;
    sub_23DE00DE0(v62, v92, type metadata accessor for FeatureStatus.OnboardingRecord);

    sub_23DDEF790(v87, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_23DE00DE0(v64, v57, type metadata accessor for FeatureStatus.OnboardingRecord);
LABEL_23:
    type metadata accessor for FeatureStatus(0);
    return swift_storeEnumTagMultiPayload();
  }
  if (v32 == (char *)1)
  {

    sub_23DE00DE0(v27, v96, type metadata accessor for FeatureStatus.PerContextEvaluation);
    goto LABEL_23;
  }
LABEL_41:
  v107 = 0;
  v108 = 0xE000000000000000;
  sub_23DE35D14();
  sub_23DE35870();
  v82 = objc_msgSend(a1, (SEL)p_base_prots[345]);
  v83 = objc_msgSend(v82, *(SEL *)(v31 + 2768));

  v106 = v83;
  type metadata accessor for HKFeatureAvailabilityOnboardedCountrySupportedState(0);
  sub_23DE35E04();
  sub_23DE35870();
  result = sub_23DE35E4C();
  __break(1u);
  return result;
}

unint64_t sub_23DDFF300(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DE35C0C();
  return sub_23DDFF420(a1, v2);
}

unint64_t sub_23DDFF330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE35FFC();
  sub_23DE3584C();
  v4 = sub_23DE36014();
  return sub_23DDFF538(a1, a2, v4);
}

unint64_t sub_23DDFF394(uint64_t a1)
{
  uint64_t v2;

  sub_23DE357F8();
  sub_23DE35FFC();
  sub_23DE3584C();
  v2 = sub_23DE36014();
  swift_bridgeObjectRelease();
  return sub_23DDFF618(a1, v2);
}

unint64_t sub_23DDFF420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_23DE35C18();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_23DE35C18();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_23DDFF538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23DE35F54() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23DE35F54() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23DDFF618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_23DE357F8();
    v8 = v7;
    if (v6 == sub_23DE357F8() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_23DE357F8();
          v15 = v14;
          if (v13 == sub_23DE357F8() && v15 == v16)
            break;
          v18 = sub_23DE35F54();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_23DDFF78C(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  BOOL v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  id v30;

  sub_23DE0103C();
  result = sub_23DE35E88();
  v3 = 0;
  v27 = a1;
  v4 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v25 = (unint64_t)(v5 + 63) >> 6;
  v26 = result + 64;
  v28 = (_QWORD *)result;
  if ((v6 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v29 = v3;
  for (i = v8 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    v14 = *(void **)(*(_QWORD *)(v27 + 48) + 8 * i);
    v15 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * i);
    swift_getKeyPath();
    v30 = v14;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23DE00748(v15, (uint64_t (*)(void))sub_23DDFFAE0);
    swift_release_n();
    v16 = objc_allocWithZone(MEMORY[0x24BDBCF00]);
    v17 = (void *)sub_23DE3593C();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v16, sel_initWithArray_, v17);

    sub_23DDFFAE8(v15);
    swift_bridgeObjectRelease();
    v19 = objc_allocWithZone(MEMORY[0x24BDD3BD8]);
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
    sub_23DDE3384(&qword_256D069E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE372EC);
    v20 = (void *)sub_23DE356FC();
    swift_release();
    v21 = objc_msgSend(v19, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v18, v20);

    *(_QWORD *)(v26 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v28;
    *(_QWORD *)(v28[6] + 8 * i) = v30;
    *(_QWORD *)(v28[7] + 8 * i) = v21;
    v22 = v28[2];
    v10 = __OFADD__(v22, 1);
    v23 = v22 + 1;
    if (v10)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v28[2] = v23;
    v3 = v29;
    if (v7)
      goto LABEL_4;
LABEL_5:
    v10 = __OFADD__(v3, 1);
    v11 = v3 + 1;
    if (v10)
      goto LABEL_25;
    if (v11 >= v25)
      return result;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    if (!v12)
      break;
LABEL_15:
    v7 = (v12 - 1) & v12;
    v29 = v11;
  }
  v13 = v11 + 1;
  if (v11 + 1 >= v25)
    return result;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
    goto LABEL_14;
  v13 = v11 + 2;
  if (v11 + 2 >= v25)
    return result;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
    goto LABEL_14;
  v13 = v11 + 3;
  if (v11 + 3 >= v25)
    return result;
  v12 = *(_QWORD *)(v24 + 8 * v13);
  if (v12)
  {
LABEL_14:
    v11 = v13;
    goto LABEL_15;
  }
  while (1)
  {
    v11 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v11 >= v25)
      return result;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    ++v13;
    if (v12)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23DDFFAE0(void *a1)
{
  return sub_23DDFE7C8(a1);
}

uint64_t sub_23DDFFAE8(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;

  sub_23DE0339C();
  result = sub_23DE35E88();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v19 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v20 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    result = sub_23DE359A8();
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v3[6] + 8 * i) = v15;
    *(_QWORD *)(v3[7] + 8 * i) = result;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v18;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v20)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v20)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v19 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v20)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v19 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v20)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v19 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v20)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v19 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_23DDFFCD4(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v43 = v7;
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_23DDFF394((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_23DE26F74();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v43 = *(v28 - 1);
      v30 = (_QWORD *)*a3;
      v31 = v43;
      v11 = v29;
      v32 = sub_23DDFF394((uint64_t)v31);
      v34 = v30[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v30[3] < v36)
      {
        sub_23DE22148(v36, 1);
        v32 = sub_23DDFF394((uint64_t)v31);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = 8 * v32;
      *(_QWORD *)(v39[6] + v40) = v31;
      *(_QWORD *)(v39[7] + v40) = v11;
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_23DE22148(v16, a2 & 1);
  v18 = sub_23DDFF394((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    sub_23DDE2738();
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DE35F9C();
  __break(1u);
LABEL_26:
  sub_23DE35D14();
  sub_23DE35870();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_23DE35E04();
  sub_23DE35870();
  sub_23DE35E4C();
  __break(1u);
}

uint64_t sub_23DE0004C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_23DE36014();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23DE36008();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_23DE35FFC();
    swift_bridgeObjectRetain();
    sub_23DE3584C();
    v11 = sub_23DE36014();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23DE001E0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v3 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FeatureStatus(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v25 - v13;
  sub_23DE0333C();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_23DE00D44(a1, (uint64_t)v18, type metadata accessor for FeatureStatus);
  sub_23DE00D44(v26, v19, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_23DE00D44((uint64_t)v18, (uint64_t)v12, type metadata accessor for FeatureStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_23DE00DE0(v19, (uint64_t)v5, type metadata accessor for FeatureStatus.Eligibility);
      type metadata accessor for HKFeatureAvailabilityContext(0);
      sub_23DDE7B5C(0, &qword_2543289D8);
      sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
      sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
      sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
      sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
      v20 = sub_23DE3566C();
      sub_23DDEF790((uint64_t)v5, type metadata accessor for FeatureStatus.Eligibility);
      sub_23DDEF790((uint64_t)v12, type metadata accessor for FeatureStatus.Eligibility);
LABEL_14:
      v23 = type metadata accessor for FeatureStatus;
      goto LABEL_15;
    }
    v21 = type metadata accessor for FeatureStatus.Eligibility;
    v22 = (uint64_t)v12;
  }
  else
  {
    sub_23DE00D44((uint64_t)v18, (uint64_t)v14, type metadata accessor for FeatureStatus);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_23DE00DE0(v19, (uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
      type metadata accessor for HKFeatureAvailabilityContext(0);
      sub_23DDE7B5C(0, &qword_2543289D8);
      sub_23DDE3384(&qword_254328A38, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26F0]);
      sub_23DDE3384((unint64_t *)&unk_254328AD0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, MEMORY[0x24BDD26E8]);
      sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
      sub_23DE00A74((unint64_t *)&unk_254327E88, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BE0]);
      if ((sub_23DE3566C() & 1) != 0
        && (sub_23DDE7B5C(0, &qword_254328AC8),
            sub_23DE00A74(&qword_254327E70, &qword_254328AC8, 0x24BDD3BE8, MEMORY[0x24BEE5BE0]),
            (sub_23DE355AC() & 1) != 0)
        && (sub_23DDFBB90(*(_QWORD *)&v14[*(int *)(v6 + 24)], *(_QWORD *)&v8[*(int *)(v6 + 24)]) & 1) != 0
        && (sub_23DE350E4() & 1) != 0)
      {
        sub_23DDEF790((uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
        sub_23DDEF790((uint64_t)v14, type metadata accessor for FeatureStatus.OnboardingRecord);
        v20 = 1;
      }
      else
      {
        sub_23DDEF790((uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
        sub_23DDEF790((uint64_t)v14, type metadata accessor for FeatureStatus.OnboardingRecord);
        v20 = 0;
      }
      goto LABEL_14;
    }
    v21 = type metadata accessor for FeatureStatus.OnboardingRecord;
    v22 = (uint64_t)v14;
  }
  sub_23DDEF790(v22, v21);
  v20 = 0;
  v23 = (uint64_t (*)(_QWORD))sub_23DE0333C;
LABEL_15:
  sub_23DDEF790((uint64_t)v18, v23);
  return v20 & 1;
}

uint64_t sub_23DE00748(uint64_t a1, uint64_t (*a2)(void))
{
  int64_t v2;
  uint64_t v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  int v24;
  uint64_t v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v29 = MEMORY[0x24BEE4AF8];
  sub_23DE2F5D4(0, v2, 0);
  v3 = v29;
  result = sub_23DE001E0(a1);
  v7 = result;
  v8 = 0;
  v9 = a1 + 64;
  v23 = v2;
  v24 = v6;
  v25 = a1 + 64;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v7 >> 6;
    if ((*(_QWORD *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v6)
      goto LABEL_24;
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v7);
    v14 = a2();
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    v28 = v15;

    *(_QWORD *)&v27 = v14;
    v29 = v3;
    v17 = *(_QWORD *)(v3 + 16);
    v16 = *(_QWORD *)(v3 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_23DE2F5D4(v16 > 1, v17 + 1, 1);
      v3 = v29;
    }
    *(_QWORD *)(v3 + 16) = v17 + 1;
    result = (uint64_t)sub_23DE0332C(&v27, (_OWORD *)(v3 + 32 * v17 + 32));
    v10 = 1 << *(_BYTE *)(a1 + 32);
    if (v7 >= v10)
      goto LABEL_25;
    v9 = a1 + 64;
    v18 = *(_QWORD *)(v25 + 8 * v12);
    if ((v18 & (1 << v7)) == 0)
      goto LABEL_26;
    v6 = v24;
    if (*(_DWORD *)(a1 + 36) != v24)
      goto LABEL_27;
    v19 = v18 & (-2 << (v7 & 0x3F));
    if (v19)
    {
      v10 = __clz(__rbit64(v19)) | v7 & 0xFFFFFFFFFFFFFFC0;
      v11 = v23;
    }
    else
    {
      v20 = v12 + 1;
      v21 = (unint64_t)(v10 + 63) >> 6;
      v11 = v23;
      if (v12 + 1 < v21)
      {
        v22 = *(_QWORD *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v10 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v12)
          {
            v22 = *(_QWORD *)(a1 + 80 + 8 * v12++);
            if (v22)
            {
              v20 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    v7 = v10;
    if (v8 == v11)
      return v3;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_23DE00978()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07150)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    sub_23DDE7B5C(255, (unint64_t *)&qword_254327B98);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07150);
  }
}

unint64_t sub_23DE009F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256D07158;
  if (!qword_256D07158)
  {
    sub_23DDFA418();
    v2 = v1;
    v3 = sub_23DE00A74(&qword_256D07160, &qword_2543289D8, 0x24BDD3BD8, MEMORY[0x24BEE5BD8]);
    result = MEMORY[0x242645660](MEMORY[0x24BDD21F0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256D07158);
  }
  return result;
}

uint64_t sub_23DE00A74(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_23DDE7B5C(255, a2);
    result = MEMORY[0x242645660](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DE00AB4()
{
  unint64_t result;

  result = qword_256D07170;
  if (!qword_256D07170)
  {
    result = MEMORY[0x242645660](&unk_23DE392E8, &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07170);
  }
  return result;
}

uint64_t type metadata accessor for FeatureStatus.PerContextEvaluation(uint64_t a1)
{
  return sub_23DE00E38(a1, (uint64_t *)&unk_254328A98);
}

uint64_t sub_23DE00B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FeatureStatus.OnboardingRecord(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_254328890);
}

void sub_23DE00B64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328AB8)
  {
    sub_23DDE7B5C(255, &qword_254328AC8);
    v0 = sub_23DE355B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328AB8);
  }
}

unint64_t sub_23DE00BC8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256D07190;
  if (!qword_256D07190)
  {
    sub_23DE00B64();
    v2 = v1;
    v3 = sub_23DE00A74(&qword_256D07198, &qword_254328AC8, 0x24BDD3BE8, MEMORY[0x24BEE5BD8]);
    result = MEMORY[0x242645660](MEMORY[0x24BDD2068], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256D07190);
  }
  return result;
}

unint64_t sub_23DE00C48()
{
  unint64_t result;

  result = qword_256D071B0;
  if (!qword_256D071B0)
  {
    result = MEMORY[0x242645660](&unk_23DE39298, &type metadata for FeatureStatus.OnboardingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D071B0);
  }
  return result;
}

void sub_23DE00C8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D071C8)
  {
    v0 = sub_23DE35A5C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D071C8);
  }
}

uint64_t sub_23DE00CE8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_23DE00C8C();
    v8 = a2;
    result = MEMORY[0x242645660](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DE00D44(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_23DE00D88()
{
  unint64_t result;

  result = qword_256D07210;
  if (!qword_256D07210)
  {
    result = MEMORY[0x242645660](&unk_23DE39248, &type metadata for FeatureStatus.Eligibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07210);
  }
  return result;
}

uint64_t type metadata accessor for FeatureStatus.Eligibility(uint64_t a1)
{
  return sub_23DE00E38(a1, (uint64_t *)&unk_254328AA8);
}

uint64_t sub_23DE00DE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for FeatureStatus(uint64_t a1)
{
  return sub_23DE00E38(a1, (uint64_t *)&unk_254328880);
}

uint64_t sub_23DE00E38(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23DE00E6C()
{
  unint64_t result;

  result = qword_256D07228;
  if (!qword_256D07228)
  {
    result = MEMORY[0x242645660](&unk_23DE391F8, &type metadata for FeatureStatus.NotOnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07228);
  }
  return result;
}

unint64_t sub_23DE00EB0()
{
  unint64_t result;

  result = qword_256D07238;
  if (!qword_256D07238)
  {
    result = MEMORY[0x242645660](&unk_23DE391A8, &type metadata for FeatureStatus.OnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07238);
  }
  return result;
}

unint64_t sub_23DE00EF4()
{
  unint64_t result;

  result = qword_256D07248;
  if (!qword_256D07248)
  {
    result = MEMORY[0x242645660](&unk_23DE39158, &type metadata for FeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07248);
  }
  return result;
}

void sub_23DE00F38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void sub_23DE00F94()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07278)
  {
    sub_23DE01000();
    sub_23DE35D5C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07278);
  }
}

unint64_t sub_23DE01000()
{
  unint64_t result;

  result = qword_256D07280;
  if (!qword_256D07280)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D07280);
  }
  return result;
}

void sub_23DE0103C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07298)
  {
    type metadata accessor for HKFeatureAvailabilityContext(255);
    sub_23DDE7B5C(255, &qword_2543289D8);
    sub_23DDE3384(&qword_2543289C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_23DE3732C);
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07298);
  }
}

uint64_t sub_23DE010E0(uint64_t a1, void *a2)
{
  int64_t v2;
  uint64_t v3;
  id *v6;
  id v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    sub_23DE2F5F0(0, v2, 0);
    v3 = v13;
    v6 = (id *)(a1 + 32);
    do
    {
      v7 = *v6;
      v8 = objc_msgSend(a2, sel_isRequirementSatisfiedWithIdentifier_, v7);
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        sub_23DE2F5F0(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v7;
      *(_BYTE *)(v11 + 40) = v8;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_23DE011DC(uint64_t a1)
{
  uint64_t v2;

  sub_23DDF8768(0, (unint64_t *)&qword_254328878, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DE01230()
{
  return sub_23DDE3384(&qword_256D072A0, type metadata accessor for FeatureStatus.PerContextEvaluation, (uint64_t)&protocol conformance descriptor for FeatureStatus.PerContextEvaluation);
}

uint64_t sub_23DE0125C()
{
  return sub_23DDE3384(&qword_256D072A8, type metadata accessor for FeatureStatus.OnboardingRecord, (uint64_t)&protocol conformance descriptor for FeatureStatus.OnboardingRecord);
}

uint64_t sub_23DE01288()
{
  return sub_23DDE3384(&qword_256D072B0, type metadata accessor for FeatureStatus.Eligibility, (uint64_t)&protocol conformance descriptor for FeatureStatus.Eligibility);
}

uint64_t sub_23DE012B4()
{
  return sub_23DDE3384(qword_256D072B8, type metadata accessor for FeatureStatus, (uint64_t)&protocol conformance descriptor for FeatureStatus);
}

uint64_t sub_23DE012E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_23DDFA418();
  result = sub_23DE35654();
  *a1 = result;
  return result;
}

uint64_t sub_23DE01310()
{
  sub_23DDFA418();
  swift_bridgeObjectRetain();
  return sub_23DE35660();
}

uint64_t sub_23DE01354@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_23DE00B64();
  result = sub_23DE35594();
  *a1 = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_23DDFA418();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      v9 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      v10 = v9[5];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      sub_23DE00B64();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      *(uint64_t *)((char *)a1 + v9[6]) = *(uint64_t *)((char *)a2 + v9[6]);
      v14 = v9[7];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = sub_23DE350FC();
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FeatureStatus(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_23DDFA418();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    v5 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
    v6 = a1 + *(int *)(v5 + 20);
    sub_23DE00B64();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    v8 = a1 + *(int *)(v5 + 28);
    v9 = sub_23DE350FC();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
    v7 = v6[5];
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_23DE00B64();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(_QWORD *)(a1 + v6[6]) = *(_QWORD *)(a2 + v6[6]);
    v11 = v6[7];
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = sub_23DE350FC();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_23DDEF790(a1, type metadata accessor for FeatureStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_23DDFA418();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      v7 = v6[5];
      v8 = a1 + v7;
      v9 = a2 + v7;
      sub_23DE00B64();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      *(_QWORD *)(a1 + v6[6]) = *(_QWORD *)(a2 + v6[6]);
      v11 = v6[7];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = sub_23DE350FC();
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
    v7 = v6[5];
    v8 = a1 + v7;
    v9 = a2 + v7;
    sub_23DE00B64();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    *(_QWORD *)(a1 + v6[6]) = *(_QWORD *)(a2 + v6[6]);
    v11 = v6[7];
    v12 = a1 + v11;
    v13 = a2 + v11;
    v14 = sub_23DE350FC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_23DDEF790(a1, type metadata accessor for FeatureStatus);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_23DDFA418();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      v7 = v6[5];
      v8 = a1 + v7;
      v9 = a2 + v7;
      sub_23DE00B64();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      *(_QWORD *)(a1 + v6[6]) = *(_QWORD *)(a2 + v6[6]);
      v11 = v6[7];
      v12 = a1 + v11;
      v13 = a2 + v11;
      v14 = sub_23DE350FC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23DE019F0()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_23DE01A00()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for FeatureStatus.OnboardingRecord(319);
  if (v0 <= 0x3F)
  {
    sub_23DDFA418();
    if (v1 <= 0x3F)
      swift_initEnumMetadataMultiPayload();
  }
}

uint64_t getEnumTagSinglePayload for FeatureStatus.PerContextEvaluation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE01AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DDFA418);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.PerContextEvaluation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE01ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_23DDFA418);
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureStatus.OnboardingRecord(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23DDFA418();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    sub_23DE00B64();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23DE350FC();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t destroy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  sub_23DE00B64();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  v8 = sub_23DE350FC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_23DE00B64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DE350FC();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_23DE00B64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_23DE00B64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_23DE00B64();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.OnboardingRecord()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE01F68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  sub_23DE00B64();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_23DE350FC();
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[7];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.OnboardingRecord()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DE02040(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DE00B64();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return;
      }
      v10 = sub_23DE350FC();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_23DE02108()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DDFA418();
  if (v0 <= 0x3F)
  {
    sub_23DE00B64();
    if (v1 <= 0x3F)
    {
      sub_23DE350FC();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDFA418();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwxx_0(uint64_t a1)
{
  uint64_t v2;

  sub_23DDFA418();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDFA418();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.Eligibility()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE02340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.Eligibility()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE02394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_23DE023E0()
{
  unint64_t v0;

  sub_23DDFA418();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE02494 + 4 * byte_23DE388C9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE024C8 + 4 * byte_23DE388C4[v4]))();
}

uint64_t sub_23DE024C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE024D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE024D8);
  return result;
}

uint64_t sub_23DE024E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE024ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE024F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE024F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.CodingKeys()
{
  return &type metadata for FeatureStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.OnboardedCodingKeys()
{
  return &type metadata for FeatureStatus.OnboardedCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.NotOnboardedCodingKeys()
{
  return &type metadata for FeatureStatus.NotOnboardedCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.Eligibility.CodingKeys()
{
  return &type metadata for FeatureStatus.Eligibility.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.OnboardingRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.OnboardingRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DE02628 + 4 * byte_23DE388D3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DE0265C + 4 * byte_23DE388CE[v4]))();
}

uint64_t sub_23DE0265C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE02664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE0266CLL);
  return result;
}

uint64_t sub_23DE02678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE02680);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DE02684(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE0268C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.OnboardingRecord.CodingKeys()
{
  return &type metadata for FeatureStatus.OnboardingRecord.CodingKeys;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO19OnboardedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DE026E8 + 4 * byte_23DE388D8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DE02708 + 4 * byte_23DE388DD[v4]))();
}

_BYTE *sub_23DE026E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DE02708(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE02710(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE02718(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE02720(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE02728(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.PerContextEvaluation.CodingKeys()
{
  return &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys;
}

unint64_t sub_23DE02748()
{
  unint64_t result;

  result = qword_256D07310;
  if (!qword_256D07310)
  {
    result = MEMORY[0x242645660](&unk_23DE38D98, &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07310);
  }
  return result;
}

unint64_t sub_23DE02790()
{
  unint64_t result;

  result = qword_256D07318;
  if (!qword_256D07318)
  {
    result = MEMORY[0x242645660](&unk_23DE38E50, &type metadata for FeatureStatus.OnboardingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07318);
  }
  return result;
}

unint64_t sub_23DE027D8()
{
  unint64_t result;

  result = qword_256D07320;
  if (!qword_256D07320)
  {
    result = MEMORY[0x242645660](&unk_23DE38F08, &type metadata for FeatureStatus.Eligibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07320);
  }
  return result;
}

unint64_t sub_23DE02820()
{
  unint64_t result;

  result = qword_256D07328;
  if (!qword_256D07328)
  {
    result = MEMORY[0x242645660](&unk_23DE38FC0, &type metadata for FeatureStatus.NotOnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07328);
  }
  return result;
}

unint64_t sub_23DE02868()
{
  unint64_t result;

  result = qword_256D07330;
  if (!qword_256D07330)
  {
    result = MEMORY[0x242645660](&unk_23DE39078, &type metadata for FeatureStatus.OnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07330);
  }
  return result;
}

unint64_t sub_23DE028B0()
{
  unint64_t result;

  result = qword_256D07338;
  if (!qword_256D07338)
  {
    result = MEMORY[0x242645660](&unk_23DE39130, &type metadata for FeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07338);
  }
  return result;
}

unint64_t sub_23DE028F8()
{
  unint64_t result;

  result = qword_256D07340;
  if (!qword_256D07340)
  {
    result = MEMORY[0x242645660](&unk_23DE390A0, &type metadata for FeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07340);
  }
  return result;
}

unint64_t sub_23DE02940()
{
  unint64_t result;

  result = qword_256D07348;
  if (!qword_256D07348)
  {
    result = MEMORY[0x242645660](&unk_23DE390C8, &type metadata for FeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07348);
  }
  return result;
}

unint64_t sub_23DE02988()
{
  unint64_t result;

  result = qword_256D07350;
  if (!qword_256D07350)
  {
    result = MEMORY[0x242645660](&unk_23DE38FE8, &type metadata for FeatureStatus.OnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07350);
  }
  return result;
}

unint64_t sub_23DE029D0()
{
  unint64_t result;

  result = qword_256D07358;
  if (!qword_256D07358)
  {
    result = MEMORY[0x242645660](&unk_23DE39010, &type metadata for FeatureStatus.OnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07358);
  }
  return result;
}

unint64_t sub_23DE02A18()
{
  unint64_t result;

  result = qword_256D07360;
  if (!qword_256D07360)
  {
    result = MEMORY[0x242645660](&unk_23DE38F30, &type metadata for FeatureStatus.NotOnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07360);
  }
  return result;
}

unint64_t sub_23DE02A60()
{
  unint64_t result;

  result = qword_256D07368;
  if (!qword_256D07368)
  {
    result = MEMORY[0x242645660](&unk_23DE38F58, &type metadata for FeatureStatus.NotOnboardedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07368);
  }
  return result;
}

unint64_t sub_23DE02AA8()
{
  unint64_t result;

  result = qword_256D07370;
  if (!qword_256D07370)
  {
    result = MEMORY[0x242645660](&unk_23DE38E78, &type metadata for FeatureStatus.Eligibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07370);
  }
  return result;
}

unint64_t sub_23DE02AF0()
{
  unint64_t result;

  result = qword_256D07378;
  if (!qword_256D07378)
  {
    result = MEMORY[0x242645660](&unk_23DE38EA0, &type metadata for FeatureStatus.Eligibility.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07378);
  }
  return result;
}

unint64_t sub_23DE02B38()
{
  unint64_t result;

  result = qword_256D07380;
  if (!qword_256D07380)
  {
    result = MEMORY[0x242645660](&unk_23DE38DC0, &type metadata for FeatureStatus.OnboardingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07380);
  }
  return result;
}

unint64_t sub_23DE02B80()
{
  unint64_t result;

  result = qword_256D07388;
  if (!qword_256D07388)
  {
    result = MEMORY[0x242645660](&unk_23DE38DE8, &type metadata for FeatureStatus.OnboardingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07388);
  }
  return result;
}

unint64_t sub_23DE02BC8()
{
  unint64_t result;

  result = qword_256D07390;
  if (!qword_256D07390)
  {
    result = MEMORY[0x242645660](&unk_23DE38D08, &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07390);
  }
  return result;
}

unint64_t sub_23DE02C10()
{
  unint64_t result;

  result = qword_256D07398;
  if (!qword_256D07398)
  {
    result = MEMORY[0x242645660](&unk_23DE38D30, &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256D07398);
  }
  return result;
}

uint64_t sub_23DE02C54(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD00000000000001FLL && a2 == 0x800000023DE3B800)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23DE02CD8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000023DE3B820 || (sub_23DE35F54() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73676E6974746573 && a2 == 0xE800000000000000 || (sub_23DE35F54() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DE3B840 || (sub_23DE35F54() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023DE3B860)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23DE02E74(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x800000023DE3B820)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23DE02EF8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656472616F626E6FLL && a2 == 0xE900000000000064;
  if (v3 || (sub_23DE35F54() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616F626E4F746F6ELL && a2 == 0xEC00000064656472)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DE02FF8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23DE03064()
{
  return 12383;
}

void sub_23DE03070()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D073A0)
  {
    sub_23DDE7B5C(255, (unint64_t *)&qword_2543273C0);
    sub_23DE34F58();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D073A0);
  }
}

void sub_23DE030EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D073A8)
  {
    sub_23DDE7B5C(255, (unint64_t *)&qword_2543273C0);
    sub_23DE34F58();
    sub_23DE00A74((unint64_t *)&qword_2543273C8, (unint64_t *)&qword_2543273C0, 0x24BDD3F08, MEMORY[0x24BEE5BD8]);
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D073A8);
  }
}

void sub_23DE0319C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D073B0)
  {
    sub_23DDE7B5C(255, (unint64_t *)&qword_2543273C0);
    sub_23DDE7B5C(255, &qword_254327AF0);
    sub_23DE00A74((unint64_t *)&qword_2543273C8, (unint64_t *)&qword_2543273C0, 0x24BDD3F08, MEMORY[0x24BEE5BD8]);
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D073B0);
  }
}

void sub_23DE0325C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D073B8)
  {
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D073B8);
  }
}

void sub_23DE032C4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D073C0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D073C0);
  }
}

_OWORD *sub_23DE0332C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_23DE0333C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_254327CF8)
  {
    type metadata accessor for FeatureStatus(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_254327CF8);
  }
}

void sub_23DE0339C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D073C8)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    sub_23DDE7B5C(255, (unint64_t *)&qword_254327B98);
    sub_23DDE3384(&qword_256D069E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DE372EC);
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D073C8);
  }
}

uint64_t HKHealthStore.makeObserverPublisher(queryDescriptors:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v4;
  id v5;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.ObserverPublisher.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id HKHealthStore.ObserverPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

void sub_23DE034C0(int a1, int a2, int a3, int a4, id a5, void (*a6)(id *))
{
  id v8;
  id v9;
  char v10;

  if (a5)
  {
    v9 = a5;
    v10 = 2;
    v8 = a5;
    a6(&v9);

  }
  else
  {
    v9 = 0;
    v10 = 0;
    a6(&v9);
  }
}

uint64_t sub_23DE03530@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id sub_23DE03560()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t sub_23DE0356C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE03AFC();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_23DE035BC(uint64_t a1, void *a2, uint64_t a3, void *aBlock, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, uint64_t (*)(), uint64_t, void *);
  void *v10;
  uint64_t v11;
  id v12;
  id v13;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, uint64_t (*)(), uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
    sub_23DE03B9C();
    v7 = sub_23DE35A14();
  }
  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  swift_retain();
  v12 = a2;
  v13 = a5;
  v9(v12, v7, sub_23DE03B90, v11, a5);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE17ObserverPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0mG6ResultOyytGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v14[6];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = objc_allocWithZone(MEMORY[0x24BDD3DC8]);
  sub_23DDE7B5C(0, &qword_254327AE0);
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  v14[4] = sub_23DE03B64;
  v14[5] = v6;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = sub_23DE035BC;
  v14[3] = &block_descriptor_6;
  v9 = _Block_copy(v14);
  v10 = objc_msgSend(v7, sel_initWithQueryDescriptors_updateHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  v11 = v10;
  if (v5)
    v12 = (void *)sub_23DE357D4();
  else
    v12 = 0;
  objc_msgSend(v10, sel_setDebugIdentifier_, v12);

  return v10;
}

unint64_t sub_23DE03820(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE03844();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE03844()
{
  unint64_t result;

  result = qword_2543273E0;
  if (!qword_2543273E0)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.ObserverPublisher, &type metadata for HKHealthStore.ObserverPublisher);
    atomic_store(result, (unint64_t *)&qword_2543273E0);
  }
  return result;
}

void _s17ObserverPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *_s17ObserverPublisherVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s17ObserverPublisherVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  return a1;
}

uint64_t _s17ObserverPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.ObserverPublisher()
{
  return &type metadata for HKHealthStore.ObserverPublisher;
}

uint64_t _s17ObserverPublisherV13ConfigurationVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s17ObserverPublisherV13ConfigurationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s17ObserverPublisherV13ConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s17ObserverPublisherV13ConfigurationVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.ObserverPublisher.Configuration()
{
  return &type metadata for HKHealthStore.ObserverPublisher.Configuration;
}

unint64_t sub_23DE03AFC()
{
  unint64_t result;

  result = qword_2543273E8;
  if (!qword_2543273E8)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.ObserverPublisher, &type metadata for HKHealthStore.ObserverPublisher);
    atomic_store(result, (unint64_t *)&qword_2543273E8);
  }
  return result;
}

uint64_t sub_23DE03B40()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE03B64(int a1, int a2, int a3, int a4, void *a5)
{
  uint64_t v5;

  sub_23DE034C0(a1, a2, a3, a4, a5, *(void (**)(id *))(v5 + 16));
}

uint64_t sub_23DE03B6C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23DE03B90()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

unint64_t sub_23DE03B9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2543273C8;
  if (!qword_2543273C8)
  {
    v1 = sub_23DDE7B5C(255, (unint64_t *)&qword_2543273C0);
    result = MEMORY[0x242645660](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2543273C8);
  }
  return result;
}

_QWORD *DarwinNotificationObserverToken.__allocating_init(notificationName:queue:handler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  id v10;

  v8 = (_QWORD *)swift_allocObject();
  sub_23DDF8814();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0xFFFFFFFFLL;
  v8[2] = a1;
  v8[3] = v9;
  v8[4] = a2;
  v10 = a2;
  swift_retain();
  DarwinNotificationObserverToken.beginObservation(handler:)(a3, a4);
  swift_release();

  swift_release();
  return v8;
}

Swift::Void __swiftcall DarwinNotificationObserverToken.cancel()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
  {
    notify_cancel(os_unfair_lock_opaque);
    v1[4]._os_unfair_lock_opaque = -1;
  }
  os_unfair_lock_unlock(v1 + 5);
}

void DarwinNotificationObserverToken.beginObservation(handler:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  const char *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  os_unfair_lock_s *v9;
  _QWORD v10[6];
  int out_token;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  out_token = -1;
  v5 = (const char *)v2[2];
  v6 = v2[4];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v10[4] = sub_23DE03F4C;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DE03EB0;
  v10[3] = &block_descriptor_7;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  notify_register_dispatch(v5, &out_token, v6, v8);
  _Block_release(v8);
  LODWORD(v8) = out_token;
  v9 = (os_unfair_lock_s *)v2[3];
  os_unfair_lock_lock(v9 + 5);
  v9[4]._os_unfair_lock_opaque = v8;
  os_unfair_lock_unlock(v9 + 5);
}

_QWORD *DarwinNotificationObserverToken.__allocating_init(notificationName:queue:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)swift_allocObject();
  sub_23DDF8814();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0xFFFFFFFFLL;
  v4[2] = a1;
  v4[3] = v5;
  v4[4] = a2;
  return v4;
}

_QWORD *DarwinNotificationObserverToken.init(notificationName:queue:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;

  sub_23DDF8814();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0xFFFFFFFFLL;
  v2[2] = a1;
  v2[3] = v5;
  v2[4] = a2;
  return v2;
}

uint64_t sub_23DE03EB0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_23DE03EEC(_DWORD *a1)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *a1 = -1;
  }
  return result;
}

uint64_t sub_23DE03F28()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DE03F4C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t DarwinNotificationObserverToken.deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
  {
    notify_cancel(os_unfair_lock_opaque);
    v1[4]._os_unfair_lock_opaque = -1;
  }
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  return v0;
}

uint64_t DarwinNotificationObserverToken.__deallocating_deinit()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  int os_unfair_lock_opaque;

  v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1 + 5);
  os_unfair_lock_opaque = v1[4]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque != -1)
  {
    notify_cancel(os_unfair_lock_opaque);
    v1[4]._os_unfair_lock_opaque = -1;
  }
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall PostDarwinNotification(name:)(Swift::String name)
{
  uint64_t v1;

  v1 = sub_23DE35828();
  notify_post((const char *)(v1 + 32));
  swift_release();
}

uint64_t type metadata accessor for DarwinNotificationObserverToken()
{
  return objc_opt_self();
}

uint64_t method lookup function for DarwinNotificationObserverToken()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DarwinNotificationObserverToken.__allocating_init(notificationName:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_23DE0409C(void *a1)
{
  sub_23DE040B8(a1, (void (*)(uint64_t))sub_23DE04C50, (uint64_t (*)(uint64_t))sub_23DE04D94, &qword_256D07428);
}

void sub_23DE040B8(void *a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  uint64_t v4;
  os_unfair_lock_s *v9;
  void *v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(void **);
  _QWORD v19[5];
  void *v20;
  void *v21;

  v21 = a1;
  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v4 + 16) + 16);
  os_unfair_lock_lock(v9);
  if (*(_BYTE *)(v4 + 25) == 1)
  {
    *(_BYTE *)(v4 + 25) = 0;
    swift_beginAccess();
    v10 = *(void **)(v4 + 32);
    *(_QWORD *)(v4 + 32) = a1;
    v11 = a1;
    sub_23DE04C40(v10);
    swift_beginAccess();
    v12 = *(_QWORD *)(v4 + 40);
    v13 = *(unsigned __int8 *)(v4 + 48);
    *(_QWORD *)(v4 + 40) = 0;
    *(_BYTE *)(v4 + 48) = 2;
    sub_23DDF2594(v12, v13);
    v14 = sub_23DDF25E8(v12, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 400))(v14);
    os_unfair_lock_unlock(v9);
    MEMORY[0x24BDAC7A8](v15);
    v19[2] = &v21;
    if (v13)
    {
      if (v13 != 1)
        return;
      sub_23DE048EC(v12, a2, (uint64_t)v19, a3, a4);
      v16 = v12;
      v17 = 1;
    }
    else
    {
      v20 = a1;
      v18 = *(void (**)(void **))(*(_QWORD *)v12 + 112);
      swift_retain();
      v18(&v20);
      sub_23DDF25E8(v12, 0);
      v16 = v12;
      v17 = 0;
    }
    sub_23DDF25E8(v16, v17);
  }
  else
  {
    os_unfair_lock_unlock(v9);
  }
}

uint64_t HKHealthStore.sharedSummaryTransactionPublisher()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v10[2];

  sub_23DE043D0();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s38SharedSummaryTransactionQueryPublisherCMa();
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 80) = v0;
  *(_QWORD *)(v6 + 88) = 0;
  v10[1] = sub_23DDE9EC4(0);
  sub_23DE0447C(0);
  sub_23DE04E20(0, (unint64_t *)&qword_2543273A0, qword_254327B00);
  sub_23DDE3384(&qword_254327048, (uint64_t (*)(uint64_t))sub_23DE0447C, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
  v7 = v0;
  sub_23DE35504();
  swift_release();
  sub_23DDE3384(&qword_254327068, (uint64_t (*)(uint64_t))sub_23DE043D0, MEMORY[0x24BDB94C8]);
  v8 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

void sub_23DE043D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327070)
  {
    sub_23DE0447C(255);
    sub_23DE04E20(255, (unint64_t *)&qword_2543273A0, qword_254327B00);
    sub_23DDE3384(&qword_254327048, (uint64_t (*)(uint64_t))sub_23DE0447C, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
    v0 = sub_23DE35384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327070);
  }
}

void sub_23DE0447C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t PublisherBase;
  uint64_t v6;

  if (!qword_254327050)
  {
    sub_23DE04E20(255, (unint64_t *)&qword_2543273A0, qword_254327B00);
    v3 = v2;
    v4 = sub_23DDE2738();
    PublisherBase = type metadata accessor for QueryPublisherBase(a1, v3, v4, MEMORY[0x24BEE3F20]);
    if (!v6)
      atomic_store(PublisherBase, (unint64_t *)&qword_254327050);
  }
}

uint64_t sub_23DE04500(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = 0;
  return sub_23DDE9EC4(0);
}

uint64_t _s38SharedSummaryTransactionQueryPublisherCMa()
{
  uint64_t result;

  result = qword_254327A18;
  if (!qword_254327A18)
    return swift_getSingletonMetadata();
  return result;
}

id sub_23DE0457C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, void *, uint64_t, void *);
  void *v11;
  void (*v12)(uint64_t, uint64_t, void *);
  uint64_t v13;

  v0 = swift_allocObject();
  swift_weakInit();
  v1 = objc_allocWithZone(MEMORY[0x24BDD3F48]);
  v12 = sub_23DE04C28;
  v13 = v0;
  v2 = MEMORY[0x24BDAC760];
  v8 = MEMORY[0x24BDAC760];
  v9 = 1107296256;
  v10 = sub_23DE047B0;
  v11 = &block_descriptor_8;
  v3 = _Block_copy(&v8);
  swift_retain();
  v4 = objc_msgSend(v1, sel_initWithHandler_, v3);
  _Block_release(v3);
  swift_release();
  swift_release();
  v5 = swift_allocObject();
  swift_weakInit();
  v12 = sub_23DE04C28;
  v13 = v5;
  v8 = v2;
  v9 = 1107296256;
  v10 = sub_23DE047B0;
  v11 = &block_descriptor_4;
  v6 = _Block_copy(&v8);
  swift_release();
  objc_msgSend(v4, sel_setUpdateHandler_, v6);
  _Block_release(v6);
  return v4;
}

void sub_23DE046E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (a3)
    {
      v5 = a3;
      v6 = a3;
      sub_23DE040B8(a3, (void (*)(uint64_t))sub_23DE04C50, (uint64_t (*)(uint64_t))sub_23DE04C64, &qword_256D07410);
      swift_release();

    }
    else
    {
      if (a2)
      {
        v7 = swift_bridgeObjectRetain();
        sub_23DE333E0(v7);
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
  }
}

uint64_t sub_23DE047B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, qword_254327B00);
    v5 = sub_23DE35948();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE04850()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 88))
    objc_msgSend(*(id *)(v0 + 80), sel_stopQuery_);
  v1 = sub_23DE33740();

  return swift_deallocClassInstance();
}

uint64_t sub_23DE048A4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_23DE048EC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_23DE04D94, &qword_256D07428);
}

uint64_t sub_23DE048C8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_23DE048EC(a1, a2, a3, (uint64_t (*)(uint64_t))sub_23DE04C64, &qword_256D07410);
}

uint64_t sub_23DE048EC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;

  v6 = v5;
  v8 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_23DE35C9C();
    a4(0);
    sub_23DDE3384(a5, a4, (uint64_t)&unk_23DE384A0);
    result = sub_23DE35A50();
    v8 = v28;
    v27 = v29;
    v12 = v30;
    v13 = v31;
    v14 = v32;
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v12 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v13 = 0;
  }
  v26 = (unint64_t)(v12 + 64) >> 6;
  while (1)
  {
    v21 = v13;
    if ((v8 & 0x8000000000000000) == 0)
      break;
    if (!sub_23DE35CC0())
      return sub_23DDF5088();
    a4(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v20 = v33;
    swift_unknownObjectRelease();
    if (!v33)
      return sub_23DDF5088();
LABEL_10:
    a2(v20);
    result = swift_release();
    if (v6)
      return sub_23DDF5088();
  }
  if (v14)
  {
    v18 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v19 = v18 | (v13 << 6);
LABEL_9:
    v20 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
    swift_retain();
    if (!v20)
      return sub_23DDF5088();
    goto LABEL_10;
  }
  ++v13;
  if (!__OFADD__(v21, 1))
  {
    if (v13 >= v26)
      return sub_23DDF5088();
    v22 = *(_QWORD *)(v27 + 8 * v13);
    if (!v22)
    {
      v23 = v21 + 2;
      if (v21 + 2 >= v26)
        return sub_23DDF5088();
      v22 = *(_QWORD *)(v27 + 8 * v23);
      if (v22)
        goto LABEL_22;
      v23 = v21 + 3;
      if (v21 + 3 >= v26)
        return sub_23DDF5088();
      v22 = *(_QWORD *)(v27 + 8 * v23);
      if (v22)
        goto LABEL_22;
      v23 = v21 + 4;
      if (v21 + 4 >= v26)
        return sub_23DDF5088();
      v22 = *(_QWORD *)(v27 + 8 * v23);
      if (v22)
      {
LABEL_22:
        v13 = v23;
      }
      else
      {
        v13 = v21 + 5;
        if (v21 + 5 >= v26)
          return sub_23DDF5088();
        v22 = *(_QWORD *)(v27 + 8 * v13);
        if (!v22)
        {
          v24 = v21 + 6;
          while (v26 != v24)
          {
            v22 = *(_QWORD *)(v27 + 8 * v24++);
            if (v22)
            {
              v13 = v24 - 1;
              goto LABEL_23;
            }
          }
          return sub_23DDF5088();
        }
      }
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DE04BD0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_23DE04C04()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void sub_23DE04C28(uint64_t a1, uint64_t a2, void *a3)
{
  sub_23DE046E8(a1, a2, a3);
}

void sub_23DE04C40(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_23DE04C50(uint64_t a1)
{
  return sub_23DE04D48(a1);
}

void sub_23DE04C64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_256D07400)
  {
    sub_23DE04CF0(255, &qword_256D07408, (unint64_t *)&qword_2543273A0, qword_254327B00);
    v3 = v2;
    v4 = sub_23DDE2738();
    v5 = type metadata accessor for StreamConduitBase(a1, v3, v4, MEMORY[0x24BEE3F20]);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256D07400);
  }
}

void sub_23DE04CF0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t PublisherResult;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DE04E20(255, a3, a4);
    PublisherResult = type metadata accessor for QueryPublisherResult(a1, v6, v7, v8);
    if (!v10)
      atomic_store(PublisherResult, a2);
  }
}

uint64_t sub_23DE04D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = **(_QWORD **)(v1 + 16);
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 112))(&v3);
}

void sub_23DE04D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_256D07418)
  {
    sub_23DE04CF0(255, &qword_256D07420, (unint64_t *)&qword_254327390, &qword_254327A50);
    v3 = v2;
    v4 = sub_23DDE2738();
    v5 = type metadata accessor for StreamConduitBase(a1, v3, v4, MEMORY[0x24BEE3F20]);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_256D07418);
  }
}

void sub_23DE04E20(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_23DDE7B5C(255, a3);
    v4 = sub_23DE3599C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t HKDateRangeQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t HKDateRangeQueryDescriptor.queryAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*HKDateRangeQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKDateRangeQueryDescriptor.init()()
{
  return sub_23DE355D0();
}

uint64_t HKDateRangeQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = v1;
  return swift_task_switch();
}

uint64_t sub_23DE04F24()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;

  v1 = (void *)v0[17];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_23DE05050;
  v2 = swift_continuation_init();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = objc_allocWithZone(MEMORY[0x24BDD41C8]);
  v0[10] = MEMORY[0x24BDAC760];
  v0[14] = sub_23DE05208;
  v0[15] = v3;
  v0[11] = 1107296256;
  v0[12] = sub_23DE05B44;
  v0[13] = &block_descriptor_9;
  v5 = _Block_copy(v0 + 10);
  v6 = v1;
  v7 = objc_msgSend(v4, sel_initWithDateIntervalHandler_, v5);
  _Block_release(v5);
  swift_release();
  sub_23DE35BE8();
  objc_msgSend(v6, sel_executeQuery_, v7);

  return swift_continuation_await();
}

uint64_t sub_23DE05050()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (!*(_QWORD *)(v1 + 48))
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 128));
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23DE050C0(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
      sub_23DE35054();
      v9 = v12;
    }
    sub_23DDE2738();
    swift_allocError();
    *v10 = v9;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_23DE051E4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23DE05208(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_23DE050C0(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_23DE05210(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_23DDF4504;
  v5[17] = a2;
  v5[18] = v2;
  return swift_task_switch();
}

uint64_t HKDateRangeQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  *v1 = v0;
  v1[1] = sub_23DE052EC;
  return sub_23DE359E4();
}

uint64_t sub_23DE052EC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DE05350()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23DE0535C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE05368(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  *v2 = v1;
  v2[1] = sub_23DE053E4;
  return sub_23DE359E4();
}

uint64_t sub_23DE053E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DE05448()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE0545C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE05468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  *v5 = v4;
  v5[1] = sub_23DE054E8;
  return sub_23DE359E4();
}

uint64_t sub_23DE054E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DE0554C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    sub_23DE359B4();
  }
  return swift_task_switch();
}

uint64_t sub_23DE055B4()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE055CC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_23DE359B4();
  }
  return swift_task_switch();
}

uint64_t sub_23DE0562C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 24) = v1;
  sub_23DDE2738();
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HKDateRangeQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_23DE05CE4();
  return sub_23DE35624();
}

uint64_t sub_23DE056B8()
{
  uint64_t v0;

  sub_23DE05CE4();
  sub_23DE35624();
  return sub_23DE06508(v0);
}

uint64_t HKDateRangeQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v1;
  uint64_t Descriptor;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  v4 = *(_QWORD *)(Descriptor - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](Descriptor);
  sub_23DE05D4C(v1, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  sub_23DE05D94((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  sub_23DE05C14();
  v8 = a1;
  return sub_23DE35630();
}

id sub_23DE057B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  _QWORD aBlock[6];

  sub_23DE06618(0, &qword_256D07630, MEMORY[0x24BEE6CD0]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)aBlock - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - v5, a1, v3);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, v6, v3);
  v9 = objc_allocWithZone(MEMORY[0x24BDD41C8]);
  aBlock[4] = sub_23DE065B4;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE05B44;
  aBlock[3] = &block_descriptor_26;
  v10 = _Block_copy(aBlock);
  v11 = objc_msgSend(v9, sel_initWithDateIntervalHandler_, v10);
  _Block_release(v10);
  swift_release();
  sub_23DE35BE8();
  return v11;
}

uint64_t sub_23DE05914(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;

  sub_23DE06618(0, &qword_256D07638, MEMORY[0x24BEE6C80]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  if (a2)
  {
    v14 = a2;
    sub_23DE06618(0, &qword_256D07630, MEMORY[0x24BEE6CD0]);
    swift_bridgeObjectRetain();
    sub_23DE359CC();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    v11 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      v13 = 0;
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDE3384((unint64_t *)&qword_256D06AB8, (uint64_t (*)(uint64_t))type metadata accessor for HKError, (uint64_t)&unk_23DE37518);
      sub_23DE35054();
      v11 = v14;
    }
    v14 = v11;
    v12 = a3;
    sub_23DE06618(0, &qword_256D07630, MEMORY[0x24BEE6CD0]);
    return sub_23DE359D8();
  }
}

uint64_t sub_23DE05A80(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_23DE05D4C(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  sub_23DE05D94((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  sub_23DE05C14();
  v8 = a1;
  return sub_23DE35630();
}

uint64_t sub_23DE05B44(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DE05CA8();
    sub_23DE34F58();
    sub_23DDE3384((unint64_t *)&qword_2543273C8, (uint64_t (*)(uint64_t))sub_23DE05CA8, MEMORY[0x24BEE5BD8]);
    v5 = sub_23DE35708();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_23DE05C14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07448)
  {
    sub_23DE05CA8();
    sub_23DE34F58();
    sub_23DDE3384((unint64_t *)&qword_2543273C8, (uint64_t (*)(uint64_t))sub_23DE05CA8, MEMORY[0x24BEE5BD8]);
    v0 = sub_23DE35720();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07448);
  }
}

unint64_t sub_23DE05CA8()
{
  unint64_t result;

  result = qword_2543273C0;
  if (!qword_2543273C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2543273C0);
  }
  return result;
}

void sub_23DE05CE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07450[0])
  {
    sub_23DE05C14();
    v0 = sub_23DE3563C();
    if (!v1)
      atomic_store(v0, qword_256D07450);
  }
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D074D8);
}

uint64_t sub_23DE05D4C(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Descriptor - 8) + 16))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_23DE05D94(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor;

  Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Descriptor - 8) + 32))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_23DE05DDC()
{
  return sub_23DDE3384(&qword_256D07470, type metadata accessor for HKDateRangeQueryDescriptor.Results.Iterator, (uint64_t)&protocol conformance descriptor for HKDateRangeQueryDescriptor.Results.Iterator);
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D075F8);
}

uint64_t sub_23DE05E1C()
{
  return sub_23DDE3384(&qword_256D07478, type metadata accessor for HKDateRangeQueryDescriptor.Results, (uint64_t)&protocol conformance descriptor for HKDateRangeQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor.Results(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D07568);
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05EEC(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t destroy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_23DE05F34(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05F74(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05FC4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE06014(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE06064(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE05EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE05EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDD20D0]);
}

uint64_t sub_23DE05ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE060E4(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDD20D0]);
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05EEC(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE05EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8))(a1, a2, v6);
}

uint64_t destroy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_23DE05F34(a1, a2, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE05F34(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05F74(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE05F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE05FC4(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE05FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE06014(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE06014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE06064(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE06064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE060B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE060CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_23DE05CE4);
}

uint64_t sub_23DE060D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE060E4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_23DE05CE4);
}

uint64_t sub_23DE060E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1)
{
  uint64_t v2;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results.Iterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE06338(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results.Iterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE06390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE06618(0, &qword_256D07440, MEMORY[0x24BEE6D08]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_23DE063E0()
{
  unint64_t v0;

  sub_23DE06618(319, &qword_256D07440, MEMORY[0x24BEE6D08]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HKDateRangeQueryDescriptor(0) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocObject();
}

id sub_23DE064CC(uint64_t a1)
{
  type metadata accessor for HKDateRangeQueryDescriptor(0);
  return sub_23DE057B4(a1);
}

uint64_t sub_23DE06508(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HKDateRangeQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DE06544()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DE06618(0, &qword_256D07630, MEMORY[0x24BEE6CD0]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_23DE065B4(uint64_t a1, void *a2, void *a3)
{
  sub_23DE06618(0, &qword_256D07630, MEMORY[0x24BEE6CD0]);
  return sub_23DE05914(a1, a2, a3);
}

void sub_23DE06618(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DE05C14();
    v7 = v6;
    v8 = sub_23DDE2738();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

BOOL static RelativeDate.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t RelativeDate.hash(into:)()
{
  return sub_23DE36008();
}

uint64_t RelativeDate.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DE36008();
  return sub_23DE36014();
}

uint64_t RelativeDate.init(day:today:)(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  char v14;
  uint64_t v15;

  v4 = sub_23DE356E4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - v9;
  sub_23DE356B4();
  sub_23DE35690();
  v11 = sub_23DE3569C();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if ((v11 & 1) != 0)
  {
    v12(a2, v4);
    v12(a1, v4);
    v12(v10, v4);
    return 0;
  }
  else
  {
    sub_23DE35690();
    sub_23DE06868();
    v14 = sub_23DE35780();
    v12(a2, v4);
    v12(a1, v4);
    v12(v8, v4);
    v12(v10, v4);
    if ((v14 & 1) != 0)
      return 2;
    else
      return 1;
  }
}

unint64_t sub_23DE06868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D07640;
  if (!qword_256D07640)
  {
    v1 = sub_23DE356E4();
    result = MEMORY[0x242645660](MEMORY[0x24BDD24A8], v1);
    atomic_store(result, (unint64_t *)&qword_256D07640);
  }
  return result;
}

unint64_t sub_23DE068B4()
{
  unint64_t result;

  result = qword_256D07648;
  if (!qword_256D07648)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for RelativeDate, &type metadata for RelativeDate);
    atomic_store(result, (unint64_t *)&qword_256D07648);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RelativeDate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DE06944 + 4 * byte_23DE39585[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DE06978 + 4 * asc_23DE39580[v4]))();
}

uint64_t sub_23DE06978(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE06980(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE06988);
  return result;
}

uint64_t sub_23DE06994(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE0699CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DE069A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE069A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RelativeDate()
{
  return &type metadata for RelativeDate;
}

uint64_t sub_23DE069C4()
{
  return sub_23DDE3384(&qword_256D07650, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCoachingEvent, (uint64_t)&unk_23DE372AC);
}

uint64_t sub_23DE069F0()
{
  return sub_23DDE3384(&qword_256D07658, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueCoachingEvent, (uint64_t)&unk_23DE37274);
}

uint64_t sub_23DE06A1C()
{
  return sub_23DDE3384(&qword_256D07660, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWatchActivation, (uint64_t)&unk_23DE37234);
}

uint64_t sub_23DE06A48()
{
  return sub_23DDE3384(&qword_256D07668, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWatchActivation, (uint64_t)&unk_23DE371FC);
}

uint64_t sub_23DE06A74()
{
  return sub_23DDE3384(&qword_256D07670, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWheelchairUseChanged, (uint64_t)&unk_23DE371BC);
}

uint64_t sub_23DE06AA0()
{
  return sub_23DDE3384(&qword_256D07678, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWheelchairUseChanged, (uint64_t)&unk_23DE37184);
}

uint64_t sub_23DE06ACC()
{
  return sub_23DDE3384(&qword_256D07680, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWristEvent, (uint64_t)&unk_23DE37144);
}

uint64_t sub_23DE06AF8()
{
  return sub_23DDE3384((unint64_t *)&unk_256D07688, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryValueWristEvent, (uint64_t)&unk_23DE3710C);
}

uint64_t LockProviding.synchronized(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  a1(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
}

uint64_t LockProviding.synchronized<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  a1(v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a3, a5);
}

void sub_23DE06BFC()
{
  os_unfair_lock_s **v0;

  os_unfair_lock_lock(*v0 + 4);
}

void sub_23DE06C08()
{
  os_unfair_lock_s **v0;

  os_unfair_lock_unlock(*v0 + 4);
}

void sub_23DE06C18()
{
  os_unfair_lock_t *v0;

  os_unfair_lock_lock(*v0);
}

void sub_23DE06C20()
{
  os_unfair_lock_t *v0;

  os_unfair_lock_unlock(*v0);
}

uint64_t dispatch thunk of LockProviding.lock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LockProviding.unlock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t Comparable.clamped(within:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE35F78();
  sub_23DE357BC();
  sub_23DE35F84();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t static DownstreamHandlerSubscriptionState.ready(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a4, a1, a2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a4, 0, 1, a2);
  type metadata accessor for DownstreamHandlerSubscriptionState(0, a2, a3, v8);
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for DownstreamHandlerSubscriptionState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DownstreamHandlerSubscriptionState);
}

uint64_t DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata2;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v36;
  void (*v37)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v60 = a1;
  v64 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v63 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v62 = (char *)&v53 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = type metadata accessor for DownstreamHandlerSubscriptionState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v61 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v53 - v14;
  v59 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  v59(v66, a2, a3);
  v17 = v67;
  v16 = v68;
  __swift_project_boxed_opaque_existential_0(v66, v67);
  v18 = v17;
  v19 = v4;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  v20 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
  v65 = a2;
  v21 = a2;
  v22 = a3;
  v20(v21, a3);
  v58 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v24 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v64, v15, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
    v28 = 255;
    v29 = a3;
LABEL_21:
    v52 = type metadata accessor for DownstreamHandlerSendFailureReason(v28, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
    MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v52);
    sub_23DE36044();
    swift_storeEnumTagMultiPayload();
    return sub_23DE07DF4(v19, v65, v29);
  }
  v57 = AssociatedConformanceWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v31 = *(_QWORD *)&v15[*(int *)(TupleTypeMetadata2 + 48)];
  v32 = v62;
  v33 = v63;
  v34 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
  v56 = AssociatedTypeWitness;
  v34(v62, v15, AssociatedTypeWitness);
  sub_23DE35450();
  result = sub_23DE35438();
  v29 = v22;
  if ((result & 1) == 0)
  {
    if (v31 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (!v31)
    {
      AssociatedTypeWitness = v56;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v56);
      AssociatedConformanceWitness = v57;
      v51 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(0, AssociatedTypeWitness, v57, v50);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v64, 1, 1, v51);
      v28 = 255;
      goto LABEL_21;
    }
  }
  sub_23DE35450();
  result = sub_23DE35438();
  v55 = TupleTypeMetadata2;
  if ((result & 1) != 0)
  {
    v54 = sub_23DE35450();
    goto LABEL_11;
  }
  if (v31 < 0)
    goto LABEL_23;
  if (!v31)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v54 = v31 - 1;
LABEL_11:
  v36 = v65;
  v37 = v59;
  v59(v66, v65, v29);
  v38 = v67;
  v39 = v68;
  __swift_project_boxed_opaque_existential_0(v66, v67);
  (*(void (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  AssociatedTypeWitness = v56;
  v40 = sub_23DE353FC();
  v41 = v36;
  v42 = v19;
  v37(v66, v41, v29);
  v43 = v67;
  v44 = v68;
  __swift_project_boxed_opaque_existential_0(v66, v67);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  v45 = v61;
  v46 = v32;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v61, v32, AssociatedTypeWitness);
  sub_23DE35450();
  v47 = v54;
  v48 = sub_23DE35438();
  v49 = sub_23DE35450();
  if ((v48 & 1) != 0)
  {
    v19 = v42;
    AssociatedConformanceWitness = v57;
LABEL_20:
    *(_QWORD *)&v45[*(int *)(v55 + 48)] = v49;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 48))(v45, v65, v29);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v46, AssociatedTypeWitness);
    v28 = 0;
    goto LABEL_21;
  }
  result = sub_23DE35438();
  v19 = v42;
  AssociatedConformanceWitness = v57;
  if ((result & 1) != 0)
  {
LABEL_17:
    v49 = sub_23DE35450();
    goto LABEL_20;
  }
  if ((v40 | v47) < 0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v49 = v47 + v40;
  if (__OFADD__(v47, v40))
    goto LABEL_17;
  if ((v49 & 0x8000000000000000) == 0)
    goto LABEL_20;
LABEL_26:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DownstreamHandlerSubscriptionState.Inactive);
}

uint64_t type metadata accessor for DownstreamHandlerSendFailureReason(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DownstreamHandlerSendFailureReason);
}

uint64_t sub_23DE07270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(a1, *v3, a2, a3);
}

uint64_t sub_23DE07278@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(a1, *v3, a2, a3);
}

uint64_t DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  void (*v44)(_QWORD *__return_ptr, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t AssociatedConformanceWitness;
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v45 = a1;
  v49 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v50 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v43 = (char *)&v42 - v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v48 = type metadata accessor for DownstreamHandlerSubscriptionState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v9);
  v52 = *(_QWORD *)(v48 - 8);
  v10 = MEMORY[0x24BDAC7A8](v48);
  v46 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v42 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v42 - v15;
  v17 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  v17(v53, a2, a3);
  v19 = v54;
  v18 = v55;
  __swift_project_boxed_opaque_existential_0(v53, v54);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v47 = v4;
  v44 = v17;
  v17(v53, a2, a3);
  v20 = v54;
  v21 = v55;
  __swift_project_boxed_opaque_existential_0(v53, v54);
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
  v23 = v21;
  v24 = v48;
  v22(v20, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v14, v16, v24);
  if (swift_getEnumCaseMultiPayload() == 1
    && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v16, v24);
    v25 = v49;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, 1, 1, AssociatedTypeWitness);
    v26 = AssociatedConformanceWitness;
    v28 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(0, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v25, 0, 1, v28);
    v30 = 255;
    v31 = v26;
  }
  else
  {
    v32 = v50;
    v33 = v43;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v43, v14, AssociatedTypeWitness);
    sub_23DE353E4();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, AssociatedTypeWitness);
    v34 = v44;
    v44(v53, a2, a3);
    v45 = v16;
    v35 = v54;
    v36 = v55;
    __swift_project_boxed_opaque_existential_0(v53, v54);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    v37 = v46;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v46, 1, 1, AssociatedTypeWitness);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v37, a2, a3);
    v34(v53, a2, a3);
    v38 = v54;
    v39 = v55;
    __swift_project_boxed_opaque_existential_0(v53, v54);
    (*(void (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v24);
    v30 = 0;
    v31 = AssociatedConformanceWitness;
  }
  v40 = type metadata accessor for DownstreamHandlerSendFailureReason(v30, AssociatedTypeWitness, v31, v29);
  MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v40);
  sub_23DE36044();
  return swift_storeEnumTagMultiPayload();
}

uint64_t DownstreamHandlerSubscription.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t TupleTypeMetadata2;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v43 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v42 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v39 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v12 = type metadata accessor for DownstreamHandlerSubscriptionState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v41 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v39 = (char *)&v39 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v39 - v17;
  v45 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  v45(v46, a2, a3);
  v20 = v47;
  v19 = v48;
  __swift_project_boxed_opaque_existential_0(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v44 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v18, 1, AssociatedTypeWitness) != 1)
    {
      v32 = v40;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v40, v18, AssociatedTypeWitness);
      v33 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      v34 = v39;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v39, v32, AssociatedTypeWitness);
      *(_QWORD *)&v34[v33] = v43;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v34, a2, a3);
      v45(v46, a2, a3);
      v35 = v47;
      v36 = v48;
      __swift_project_boxed_opaque_existential_0(v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v35, v36);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      (*(void (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v32, AssociatedTypeWitness);
    }
    v45(v46, a2, a3);
    v21 = v47;
    v22 = v48;
    __swift_project_boxed_opaque_existential_0(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v24 = *(_QWORD *)&v18[*(int *)(TupleTypeMetadata2 + 48)];
  v25 = v42;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v42, v18, AssociatedTypeWitness);
  v26 = v41;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v41, v25, AssociatedTypeWitness);
  sub_23DE35450();
  v27 = sub_23DE35438();
  v28 = sub_23DE35450();
  if ((v27 & 1) == 0)
  {
    v29 = v25;
    v30 = v43;
    result = sub_23DE35438();
    if ((result & 1) == 0)
    {
      if ((v24 | v30) < 0)
      {
        __break(1u);
        goto LABEL_16;
      }
      v28 = v24 + v30;
      if (!__OFADD__(v24, v30))
      {
        v25 = v29;
        if ((v28 & 0x8000000000000000) == 0)
          goto LABEL_12;
LABEL_16:
        __break(1u);
        return result;
      }
    }
    v28 = sub_23DE35450();
    v25 = v29;
  }
LABEL_12:
  *(_QWORD *)&v26[*(int *)(TupleTypeMetadata2 + 48)] = v28;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v26, a2, a3);
  v45(v46, a2, a3);
  v37 = v47;
  v38 = v48;
  __swift_project_boxed_opaque_existential_0(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v25, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

Swift::Void __swiftcall DownstreamHandlerSubscription.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  void (*v25)(_QWORD *__return_ptr, uint64_t, uint64_t);
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v3 = v0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v6 = type metadata accessor for DownstreamHandlerSubscriptionState(0, AssociatedTypeWitness, AssociatedConformanceWitness, v5);
  v23 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v25 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v2 + 32);
  v25(v26, v3, v2);
  v13 = v27;
  v12 = v28;
  __swift_project_boxed_opaque_existential_0(v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v3, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, AssociatedTypeWitness);
    v17 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v11, v17);
    v18 = v25;
    if (v15 == 1)
    {
      v25(v26, v3, v2);
      v19 = v27;
      v20 = v28;
      __swift_project_boxed_opaque_existential_0(v26, v27);
      (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v6);
    v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v18 = v25;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v9, 1, 1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 48))(v9, v3, v2);
  v18(v26, v3, v2);
  v21 = v27;
  v22 = v28;
  __swift_project_boxed_opaque_existential_0(v26, v27);
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v21, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  (*(void (**)(uint64_t, uint64_t))(v2 + 88))(v3, v2);
}

uint64_t static Result<>.success.getter()
{
  sub_23DE36044();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23DE07DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a3 + 32))(v6, a2, a3);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_0(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_23DE07E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23DE07EB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  int v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 >= 2)
    v9 = v8;
  else
    v9 = v8 + 1;
  v10 = *(_DWORD *)(v6 + 80);
  if (v10 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    if (v7 > 1)
    {
      if ((*(unsigned int (**)(uint64_t *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)) >= 2)
      {
LABEL_32:
        memcpy(a1, a2, v9);
        return a1;
      }
    }
    else if (*((_BYTE *)a2 + v8))
    {
      v14 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3)
        v14 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v15 = v8;
        else
          v15 = 4;
        __asm { BR              X11 }
      }
      if (v14 != -1)
        goto LABEL_32;
    }
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
      goto LABEL_30;
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    if (v7 <= 1)
LABEL_30:
      *((_BYTE *)a1 + v8) = 0;
  }
  return a1;
}

uint64_t sub_23DE0806C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v4 + 64) + 1;
  if (v5 > 1)
  {
    result = (*(uint64_t (**)(uint64_t))(v4 + 48))(result);
    if (result >= 2)
      return result;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(result + v6))
    goto LABEL_15;
  v7 = (*(unsigned __int8 *)(result + v6) - 1) << (8 * v6);
  if (v6 > 3)
    v7 = 0;
  if ((_DWORD)v6)
  {
    if (v6 > 3)
      LODWORD(v6) = 4;
    __asm { BR              X11 }
  }
  if (v7 == -1)
  {
LABEL_15:
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  return result;
}

void *sub_23DE08178(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 1)
  {
    if (a2[v8])
    {
      v9 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3)
        v9 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v10 = v8;
        else
          v10 = 4;
        __asm { BR              X11 }
      }
      if (v9 != -1)
        goto LABEL_20;
    }
LABEL_14:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1)
        return a1;
    }
    *((_BYTE *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)) < 2)goto LABEL_14;
LABEL_20:
  if (v7 >= 2)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

unsigned __int8 *sub_23DE082EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t (*v12)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t (*v17)(unsigned __int8 *, uint64_t, uint64_t);
  int v18;
  int v19;
  size_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 > 1)
  {
    v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
    v14 = v12(a2, v7, v5);
    if (v13 >= 2)
    {
      if (v14 >= 2)
        goto LABEL_41;
LABEL_45:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        if (v7 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        if (v7 > 1)
          return a1;
      }
      a1[v8] = 0;
      return a1;
    }
    if (v14 >= 2)
    {
LABEL_31:
      if (!v12(a1, 1, v5))
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_41;
    }
LABEL_33:
    v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v18 = v17(a1, 1, v5);
    v19 = v17(a2, 1, v5);
    if (v18)
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 24))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  v9 = 8 * v8;
  if (!a1[v8])
    goto LABEL_29;
  v10 = (a1[v8] - 1) << v9;
  if (v8 > 3)
    v10 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == -1)
  {
LABEL_29:
    if (a2[v8])
    {
      v15 = (a2[v8] - 1) << v9;
      if (v8 > 3)
        v15 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v16 = v8;
        else
          v16 = 4;
        __asm { BR              X11 }
      }
      if (v15 != -1)
      {
        v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
        goto LABEL_31;
      }
    }
    goto LABEL_33;
  }
  if (!a2[v8] || (a2[v8] - 1) << v9 == -1)
    goto LABEL_45;
LABEL_41:
  if (v7 >= 2)
    v20 = v8;
  else
    v20 = v8 + 1;
  memcpy(a1, a2, v20);
  return a1;
}

void *sub_23DE08658(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  int v9;
  int v10;
  size_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 <= 1)
  {
    if (a2[v8])
    {
      v9 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3)
        v9 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v10 = v8;
        else
          v10 = 4;
        __asm { BR              X11 }
      }
      if (v9 != -1)
        goto LABEL_20;
    }
LABEL_14:
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1)
        return a1;
    }
    else
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1)
        return a1;
    }
    *((_BYTE *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(_BYTE *, _QWORD, _QWORD))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16)) < 2)goto LABEL_14;
LABEL_20:
  if (v7 >= 2)
    v11 = v8;
  else
    v11 = v8 + 1;
  memcpy(a1, a2, v11);
  return a1;
}

unsigned __int8 *sub_23DE087CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  char v9;
  int v10;
  int v11;
  uint64_t (*v12)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t (*v17)(unsigned __int8 *, uint64_t, uint64_t);
  int v18;
  int v19;
  size_t v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (v7 > 1)
  {
    v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v13 = v12(a1, *(unsigned int *)(v6 + 84), *(_QWORD *)(a3 + 16));
    v14 = v12(a2, v7, v5);
    if (v13 >= 2)
    {
      if (v14 >= 2)
        goto LABEL_41;
LABEL_45:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        if (v7 > 1)
          return a1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        if (v7 > 1)
          return a1;
      }
      a1[v8] = 0;
      return a1;
    }
    if (v14 >= 2)
    {
LABEL_31:
      if (!v12(a1, 1, v5))
        (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_41;
    }
LABEL_33:
    v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
    v18 = v17(a1, 1, v5);
    v19 = v17(a2, 1, v5);
    if (v18)
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v19)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 40))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  v9 = 8 * v8;
  if (!a1[v8])
    goto LABEL_29;
  v10 = (a1[v8] - 1) << v9;
  if (v8 > 3)
    v10 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v11 = v8;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == -1)
  {
LABEL_29:
    if (a2[v8])
    {
      v15 = (a2[v8] - 1) << v9;
      if (v8 > 3)
        v15 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v16 = v8;
        else
          v16 = 4;
        __asm { BR              X11 }
      }
      if (v15 != -1)
      {
        v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48);
        goto LABEL_31;
      }
    }
    goto LABEL_33;
  }
  if (!a2[v8] || (a2[v8] - 1) << v9 == -1)
    goto LABEL_45;
LABEL_41:
  if (v7 >= 2)
    v20 = v8;
  else
    v20 = v8 + 1;
  memcpy(a1, a2, v20);
  return a1;
}

uint64_t sub_23DE08B38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (v5 < 2)
  {
    v7 = 0;
    ++v8;
  }
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_26;
  v10 = 8 * v8;
  if (v8 > 3)
    goto LABEL_10;
  v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v8);
    if (v11)
      goto LABEL_17;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_26;
LABEL_10:
      v11 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8))
        goto LABEL_26;
LABEL_17:
      v13 = (v11 - 1) << v10;
      if (v8 > 3)
        v13 = 0;
      if ((_DWORD)v8)
      {
        if (v8 <= 3)
          v14 = v8;
        else
          v14 = 4;
        __asm { BR              X12 }
      }
      return v7 + v13 + 1;
    }
    v11 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8))
      goto LABEL_17;
  }
LABEL_26:
  if (!v7)
    return 0;
  if (v5 < 2)
    return 0;
  v15 = (*(uint64_t (**)(void))(v4 + 48))();
  v16 = v15 >= 2;
  result = v15 - 2;
  if ((_DWORD)result == 0 || !v16)
    return 0;
  return result;
}

void sub_23DE08C80(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = v9 - 1;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v8 >= 2)
  {
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = v11 + 1;
  }
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X13 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_23DE08EA4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23DE08EAC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23DE08ECC()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23DE08EDC()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23DE08EE4()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23DE08EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_DWORD *)(v2 + 84);
  v4 = *(_QWORD *)(v2 + 64);
  if (!v3)
    ++v4;
  if (v3 > 1)
  {
    v6 = (*(uint64_t (**)(void))(v2 + 48))();
    if (v6 >= 2)
      return v6 - 1;
    else
      return 0;
  }
  else if (*(_BYTE *)(a1 + v4))
  {
    v5 = (*(unsigned __int8 *)(a1 + v4) - 1) << (8 * v4);
    if (v4 > 3)
      v5 = 0;
    if ((_DWORD)v4)
    {
      if (v4 > 3)
        LODWORD(v4) = 4;
      __asm { BR              X11 }
    }
    return (v5 + 1);
  }
  else
  {
    return 0;
  }
}

void sub_23DE08FBC(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (v5)
  {
    v7 = *(_QWORD *)(v4 + 64);
  }
  else
  {
    v6 = 0;
    v7 = *(_QWORD *)(v4 + 64) + 1;
  }
  if (v6 < a2)
  {
    v8 = ~v6 + a2;
    if (v7 >= 4)
    {
      bzero(a1, v7);
      *a1 = v8;
      LOBYTE(v9) = 1;
      if (v5 > 1)
        return;
LABEL_19:
      *((_BYTE *)a1 + v7) = v9;
      return;
    }
    v9 = (v8 >> (8 * v7)) + 1;
    if ((_DWORD)v7)
    {
      v10 = v8 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if ((_DWORD)v7 != 3)
      {
        if ((_DWORD)v7 == 2)
        {
          *(_WORD *)a1 = v10;
          if (v5 > 1)
            return;
        }
        else
        {
          *(_BYTE *)a1 = v10;
          if (v5 > 1)
            return;
        }
        goto LABEL_19;
      }
      *(_WORD *)a1 = v10;
      *((_BYTE *)a1 + 2) = BYTE2(v10);
    }
    if (v5 > 1)
      return;
    goto LABEL_19;
  }
  if (v5 > 1)
  {
    if (a2)
      (*(void (**)(unsigned int *, _QWORD, _QWORD))(v4 + 56))(a1, a2 + 1, *(unsigned int *)(v4 + 84));
  }
  else
  {
    *((_BYTE *)a1 + v7) = 0;
  }
}

uint64_t sub_23DE090E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[6];

  v2 = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v8[4] = v8;
    v5 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive(319, v2, *(_QWORD *)(a1 + 24), v4);
    v2 = v5;
    if (v6 <= 0x3F)
    {
      v8[5] = *(_QWORD *)(v5 - 8) + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v2;
}

uint64_t *sub_23DE091A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = v7 + 1;
  if (v9 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v10 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v10 = v9;
  if ((v8 & 0x1000F8) != 0 || v10 + 1 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    v13 = *((unsigned __int8 *)a2 + v10);
    if (v13 >= 2)
    {
      if (v10 <= 3)
        v14 = v10;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
      {
        memcpy(v4, a2, v9);
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((_BYTE *)v4 + v10) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
      *(_QWORD *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      *((_BYTE *)v4 + v10) = 0;
    }
  }
  return v4;
}

uint64_t sub_23DE09358(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v4 + 84))
    ++v5;
  if (v5 <= v6)
    v5 = v6;
  v7 = *(unsigned __int8 *)(a1 + v5);
  if (v7 >= 2)
  {
    if (v5 <= 3)
      v8 = v5;
    else
      v8 = 4;
    __asm { BR              X13 }
  }
  if (v7 != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_23DE09454(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v9 = v8;
  v10 = a2[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
      v12 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, _QWORD))(v6 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
    v12 = 0;
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFF8);
  }
  *((_BYTE *)a1 + v9) = v12;
  return a1;
}

unsigned __int8 *sub_23DE095D4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = v7 + 1;
    if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v9 = v8;
    v10 = a1[v9];
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 != 1
      || !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v12 = a2[v9];
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        v14 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        v14 = 1;
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
      *(_QWORD *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFF8);
    }
    a1[v9] = v14;
  }
  return a1;
}

void *sub_23DE097FC(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = v7 + 1;
  if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v9 = v8;
  v10 = a2[v9];
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X12 }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
    {
      memcpy(a1, a2, v8);
      v12 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, _QWORD))(v6 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
    v12 = 0;
    *(_QWORD *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFF8);
  }
  *((_BYTE *)a1 + v9) = v12;
  return a1;
}

unsigned __int8 *sub_23DE0997C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(_QWORD *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84))
      v8 = *(_QWORD *)(v6 + 64);
    else
      v8 = v7 + 1;
    if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
      v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    else
      v9 = v8;
    v10 = a1[v9];
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 != 1
      || !(*(unsigned int (**)(unsigned __int8 *, uint64_t, _QWORD))(v6 + 48))(a1, 1, *(_QWORD *)(a3 + 16)))
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    v12 = a2[v9];
    if (v12 >= 2)
    {
      if (v9 <= 3)
        v13 = v9;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        v14 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        v14 = 1;
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      v14 = 0;
      *(_QWORD *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFF8);
    }
    a1[v9] = v14;
  }
  return a1;
}

uint64_t sub_23DE09BA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
    v5 = *(_QWORD *)(v3 + 64);
  else
    v5 = v4 + 1;
  if (v5 <= ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v6 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v6 = v5;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_25;
  v7 = v6 + 1;
  v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v11 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_25;
      goto LABEL_18;
    }
    if (v11 < 2)
    {
LABEL_25:
      v13 = *(unsigned __int8 *)(a1 + v6);
      if (v13 >= 2)
        return (v13 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_25;
LABEL_18:
  v12 = (v9 - 1) << v8;
  if (v7 > 3)
    v12 = 0;
  if (!(_DWORD)v7)
    return (v12 + 255);
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DE09C7C + 4 * byte_23DE397B6[(v7 - 1)]))();
}

void sub_23DE09CC8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = v6 + 1;
  if (v7 <= ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v8 = v7 + 1;
  if (a3 < 0xFF)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v10 = a2 - 255;
  if (v8 < 4)
  {
    if ((_DWORD)v7 != -1)
    {
      v12 = v10 & ~(-1 << (8 * v8));
      bzero(a1, v8);
      if ((_DWORD)v8 == 3)
      {
        *a1 = v12;
        *((_BYTE *)a1 + 2) = BYTE2(v12);
      }
      else if ((_DWORD)v8 == 2)
      {
        *a1 = v12;
      }
      else
      {
        *(_BYTE *)a1 = v12;
      }
    }
  }
  else
  {
    bzero(a1, v7 + 1);
    *(_DWORD *)a1 = v10;
  }
  __asm { BR              X10 }
}

uint64_t sub_23DE09E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (*(_DWORD *)(v2 + 84))
    v4 = *(_QWORD *)(v2 + 64);
  else
    v4 = v3 + 1;
  if (v4 <= ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v5 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v5 = v4;
  if (*(unsigned __int8 *)(a1 + v5) < 2u)
    return *(unsigned __int8 *)(a1 + v5);
  if (v5 <= 3)
    v6 = v5;
  else
    v6 = 4;
  return ((uint64_t (*)(void))((char *)&loc_23DE09EE0 + 4 * byte_23DE397C4[v6]))();
}

_BYTE *sub_23DE09F28(_BYTE *result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  char v8;
  int v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = v5 + 1;
  if (v6 <= ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8)
    v7 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  else
    v7 = v6;
  if (a2 > 1)
  {
    if (v7 <= 3)
      v8 = ((a2 - 2) >> (8 * v7)) + 2;
    else
      v8 = 2;
    result[v7] = v8;
    if (v7 >= 4)
      v9 = 4;
    else
      v9 = v7;
    bzero(result, v7);
    __asm { BR              X10 }
  }
  result[v7] = a2;
  return result;
}

uint64_t sub_23DE0A010()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_23DE0A068(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_23DE0A140(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_23DE0A19C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23DE0A234(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_23DE0A314(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_23DE0A3AC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_23DE0A48C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_23DE0A5CC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_23DE0A774()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23DE0A77C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_23DE0A7A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_23DE0A7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.lock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.didRequestFirstDemand()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.didCancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_23DE0A808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = type metadata accessor for FeatureStatusPublisher.Inner(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
  return DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(a1, v8, a3, a5);
}

uint64_t sub_23DE0A854@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = type metadata accessor for FeatureStatusPublisher.Inner(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
  return DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(a1, v8, a3, a5);
}

uint64_t sub_23DE0A8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE0A8B8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:));
}

uint64_t sub_23DE0A8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE0A8B8(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:));
}

uint64_t sub_23DE0A8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = _s23SharingEntriesPublisherV5InnerCMa(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  return a4(a1, v6, a3);
}

uint64_t sub_23DE0A914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD v11[5];

  v6 = type metadata accessor for FeatureStatusPublisher.Inner(0, a3, a4, a4);
  swift_unknownObjectRetain();
  v9 = sub_23DE0BDA4(a1, a2, v7, v8);
  swift_unknownObjectRelease();
  v11[3] = v6;
  v11[4] = MEMORY[0x242645660](&unk_23DE399B8, v6);
  v11[0] = v9;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t sub_23DE0A9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23DE0A914(a1, *v3, a2, a3);
}

void sub_23DE0A9D0(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x60));
  sub_23DDF8768(0, (unint64_t *)&unk_2543287E0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x24BEE1C28]);
  a1[3] = v4;
  a1[4] = &protocol witness table for <A> UnsafeMutablePointer<A>;
  *a1 = v3;
}

uint64_t sub_23DE0AA38@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*MEMORY[0x24BEE4EA0] & *v1);
  v4 = (char *)v1 + v3[13];
  swift_beginAccess();
  v6 = type metadata accessor for DownstreamHandlerSubscriptionState(0, v3[10], v3[11], v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t sub_23DE0AAB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*MEMORY[0x24BEE4EA0] & *v1);
  v4 = (char *)v1 + v3[13];
  swift_beginAccess();
  v6 = type metadata accessor for DownstreamHandlerSubscriptionState(0, v3[10], v3[11], v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
  return swift_endAccess();
}

uint64_t (*sub_23DE0AB40())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_23DE0AB94()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  objc_class *v3;
  objc_super v5;

  v1 = (uint64_t *)(*MEMORY[0x24BEE4EA0] & *v0);
  MEMORY[0x242645720](*(_QWORD *)((char *)v0 + v1[12]), -1, -1);
  v3 = (objc_class *)type metadata accessor for FeatureStatusPublisher.Inner(0, v1[10], v1[11], v2);
  v5.receiver = v0;
  v5.super_class = v3;
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

id sub_23DE0ABFC(void *a1)
{
  id v1;

  v1 = a1;
  return sub_23DE0AB94();
}

uint64_t sub_23DE0AC20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x68);
  v5 = type metadata accessor for DownstreamHandlerSubscriptionState(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x58), a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_unknownObjectRelease();
}

id sub_23DE0AC94()
{
  return sub_23DE0ACAC((SEL *)&selRef_registerObserver_);
}

id sub_23DE0ACA0()
{
  return sub_23DE0ACAC((SEL *)&selRef_unregisterObserver_);
}

id sub_23DE0ACAC(SEL *a1)
{
  _QWORD *v1;

  return objc_msgSend(*(id *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x70)), *a1, v1);
}

void sub_23DE0ACD8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;

  swift_unknownObjectRetain();
  v6 = a4;
  v7 = a1;
  sub_23DE0BDEC(v6);
  swift_unknownObjectRelease();

}

void sub_23DE0AD44()
{
  sub_23DE0BF4C();
}

void (*sub_23DE0AD6C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_23DE0AB40();
  return sub_23DE0ADB0;
}

void sub_23DE0ADB0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_23DE0ADE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x242645660](&unk_23DE399F0);
  return DownstreamHandlerSubscription.request(_:)(a1, a2, v4);
}

void sub_23DE0AE2C(uint64_t a1)
{
  MEMORY[0x242645660](&unk_23DE399F0, a1);
  DownstreamHandlerSubscription.cancel()();
}

uint64_t FeatureStatusProviding.makePublisherWithCurrentValue(observingChanges:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v28[0] = a3;
  v29 = a1;
  sub_23DE0B130();
  v8 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  v34 = v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0B214();
  v30 = v14;
  v32 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v13, v4, a2);
  v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  v20 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 32);
  v20(v19 + v18, v13, a2);
  *(_BYTE *)(v19 + v18 + v12) = v29;
  sub_23DE0B28C(0);
  sub_23DDE3384((unint64_t *)&unk_254327D58, (uint64_t (*)(uint64_t))sub_23DE0B28C, MEMORY[0x24BDB9AF8]);
  sub_23DE354E0();
  v17(v13, v28[1], a2);
  v21 = swift_allocObject();
  v22 = v28[0];
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = v22;
  v20(v21 + v18, v13, a2);
  sub_23DE35450();
  sub_23DE0B1F8(0);
  sub_23DDE3384(&qword_254327DA8, (uint64_t (*)(uint64_t))sub_23DE0B214, MEMORY[0x24BDB9E90]);
  sub_23DDE3384(&qword_254327D70, (uint64_t (*)(uint64_t))sub_23DE0B1F8, MEMORY[0x24BDB9AF8]);
  v24 = v30;
  v23 = v31;
  sub_23DE35564();
  swift_release();
  sub_23DDE3384((unint64_t *)&unk_254327D20, (uint64_t (*)(uint64_t))sub_23DE0B130, MEMORY[0x24BDB98F0]);
  v25 = v33;
  v26 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v24);
  return v26;
}

void sub_23DE0B130()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327D30)
  {
    sub_23DE0B1F8(255);
    sub_23DE0B214();
    sub_23DDE3384(&qword_254327D70, (uint64_t (*)(uint64_t))sub_23DE0B1F8, MEMORY[0x24BDB9AF8]);
    sub_23DDE3384(&qword_254327DA8, (uint64_t (*)(uint64_t))sub_23DE0B214, MEMORY[0x24BDB9E90]);
    v0 = sub_23DE353CC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327D30);
  }
}

void sub_23DE0B1F8(uint64_t a1)
{
  sub_23DE0B2A8(a1, &qword_254327D78, type metadata accessor for FeatureStatus, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x24BDB9AE0]);
}

void sub_23DE0B214()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327DB0)
  {
    sub_23DE0B28C(255);
    sub_23DDE3384((unint64_t *)&unk_254327D58, (uint64_t (*)(uint64_t))sub_23DE0B28C, MEMORY[0x24BDB9AF8]);
    v0 = sub_23DE354EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327DB0);
  }
}

void sub_23DE0B28C(uint64_t a1)
{
  sub_23DE0B2A8(a1, &qword_254327D68, (uint64_t (*)(uint64_t))sub_23DE0B310, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x24BDB9AE0]);
}

void sub_23DE0B2A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DE0B310(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_254327CF0, type metadata accessor for FeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

uint64_t sub_23DE0B32C@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  _QWORD v25[8];
  int v26;
  uint64_t *v27;
  uint64_t v28;

  v27 = a4;
  v28 = a2;
  v26 = a1;
  sub_23DE0C134(0);
  v25[6] = *(_QWORD *)(v5 - 8);
  v25[7] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v25[5] = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FeatureStatus(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0B310(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v25[3] = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v25 - v14;
  sub_23DE0C150(0);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v25[4] = (char *)v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v25 - v21;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(v28, a3);
  sub_23DE0C0F0((uint64_t)v10, (uint64_t)v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
  sub_23DE354B0();
  sub_23DDE3384((unint64_t *)&unk_254327D80, (uint64_t (*)(uint64_t))sub_23DE0C150, MEMORY[0x24BDB9DF8]);
  v23 = sub_23DE354F8();
  result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
  *v27 = v23;
  return result;
}

uint64_t sub_23DE0B7F8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_23DE0B854@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  return sub_23DE0B32C(*(unsigned __int8 *)(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64)), v2, *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DE0B87C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v24 = a4;
  sub_23DE0BF78();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0B310(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FeatureStatus(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE00D44(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DE0B310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_23DDEF790((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DE0B310);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    v18 = result;
  }
  else
  {
    sub_23DE0C0F0((uint64_t)v12, (uint64_t)v16);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    sub_23DDF8768(0, &qword_254327E98, type metadata accessor for FeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_23DE388B0;
    sub_23DE00D44((uint64_t)v16, v20 + v19, type metadata accessor for FeatureStatus);
    sub_23DE0B1F8(0);
    sub_23DDE3384(&qword_254327D70, (uint64_t (*)(uint64_t))sub_23DE0B1F8, MEMORY[0x24BDB9AF8]);
    sub_23DE3554C();
    swift_release();
    swift_bridgeObjectRelease();
    sub_23DDE3384((unint64_t *)&unk_254327D00, (uint64_t (*)(uint64_t))sub_23DE0BF78, MEMORY[0x24BDB9530]);
    v21 = v23;
    v18 = sub_23DE354F8();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v21);
    result = sub_23DDEF790((uint64_t)v16, type metadata accessor for FeatureStatus);
  }
  *v24 = v18;
  return result;
}

uint64_t sub_23DE0BB00()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t sub_23DE0BB58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23DE0B87C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_23DE0BB74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for DownstreamHandlerSubscriptionState(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FeatureStatusPublisher.Inner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FeatureStatusPublisher.Inner);
}

ValueMetadata *type metadata accessor for FeatureStatusPublisher()
{
  return &type metadata for FeatureStatusPublisher;
}

void sub_23DE0BC18()
{
  JUMPOUT(0x242645660);
}

void sub_23DE0BC28()
{
  JUMPOUT(0x242645660);
}

uint64_t sub_23DE0BC38(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242645660](&unk_23DE399B8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

id sub_23DE0BC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  objc_class *v19;
  objc_super v21;

  v7 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v4);
  v8 = v7[10];
  v9 = v7[11];
  v10 = type metadata accessor for DownstreamHandlerSubscriptionState(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = v7[12];
  v15 = v4;
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v4 + v14) = v16;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v8, v9, (uint64_t)v13);
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v15) + 0x68)], v13, v10);
  *(_QWORD *)&v15[*(_QWORD *)((*v17 & *(_QWORD *)v15) + 0x70)] = a2;
  swift_unknownObjectRetain();

  v19 = (objc_class *)type metadata accessor for FeatureStatusPublisher.Inner(0, v8, v9, v18);
  v21.receiver = v15;
  v21.super_class = v19;
  return objc_msgSendSuper2(&v21, sel_init);
}

id sub_23DE0BDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = objc_allocWithZone((Class)type metadata accessor for FeatureStatusPublisher.Inner(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return sub_23DE0BC64(a1, a2, v8, v9);
}

uint64_t sub_23DE0BDEC(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = *MEMORY[0x24BEE4EA0] & *v1;
  v4 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v3 + 80);
  v8 = *(_QWORD *)(v3 + 88);
  v10 = type metadata accessor for DownstreamHandlerSendFailureReason(255, v7, v8, v9);
  MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v10);
  v11 = sub_23DE36044();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v19 - v13;
  FeatureStatus.init(_:)(a1, (uint64_t)v6);
  v16 = type metadata accessor for FeatureStatusPublisher.Inner(0, v7, v8, v15);
  v17 = MEMORY[0x242645660](&unk_23DE399F0, v16);
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)((uint64_t)v6, v16, v17, (uint64_t)v14);
  sub_23DDEF790((uint64_t)v6, type metadata accessor for FeatureStatus);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_23DE0BF4C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_23DE0BF78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327D10)
  {
    sub_23DE0C040();
    sub_23DE0B1F8(255);
    sub_23DDE3384(&qword_254327D40, (uint64_t (*)(uint64_t))sub_23DE0C040, MEMORY[0x24BDB9970]);
    sub_23DDE3384(&qword_254327D70, (uint64_t (*)(uint64_t))sub_23DE0B1F8, MEMORY[0x24BDB9AF8]);
    v0 = sub_23DE3539C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327D10);
  }
}

void sub_23DE0C040()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327D48)
  {
    sub_23DE0C0D4(255);
    sub_23DDE3384(&qword_254327DC8, (uint64_t (*)(uint64_t))sub_23DE0C0D4, MEMORY[0x24BEE12C8]);
    v0 = sub_23DE353D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327D48);
  }
}

void sub_23DE0C0D4(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_254327DC0, type metadata accessor for FeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_23DE0C0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DE0C134(uint64_t a1)
{
  sub_23DE0B2A8(a1, (unint64_t *)&unk_254327D98, (uint64_t (*)(uint64_t))sub_23DE0B310, MEMORY[0x24BDB9E10]);
}

void sub_23DE0C150(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_254327D90, (uint64_t (*)(uint64_t))sub_23DE0B310, MEMORY[0x24BDB9DE0]);
}

void sub_23DE0C16C(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:)(char a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 169) = a1;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(v3 + 120) = v2;
  *(_QWORD *)(v3 + 128) = v4;
  *(_QWORD *)(v3 + 136) = v5;
  return swift_task_switch();
}

uint64_t sub_23DE0C1F0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(void **)(v0 + 120);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, *(unsigned __int8 *)(v0 + 169));
  *(_QWORD *)(v0 + 144) = v2;
  v3 = sub_23DE357D4();
  *(_QWORD *)(v0 + 152) = v3;
  *(_QWORD *)(v0 + 56) = v0 + 168;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_23DE0C2DC;
  v4 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
  v5 = (_QWORD *)(v0 + 80);
  v5[1] = 0x40000000;
  v5[2] = sub_23DE0C3BC;
  v5[3] = &block_descriptor_10;
  v5[4] = v4;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v2, v3, v5);
  return swift_continuation_await();
}

uint64_t sub_23DE0C2DC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 160) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23DE0C33C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE0C374()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 152);
  v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE0C3BC(uint64_t a1, char a2, void *a3)
{
  uint64_t v6;
  _QWORD *v7;
  id v8;

  sub_23DE0CA84();
  v6 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_23DDE2738();
    swift_allocError();
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v6 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

void HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[6];

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, a1 & 1);
  v8 = (void *)sub_23DE357D4();
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DE0C16C;
  v10[3] = &block_descriptor_2;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_setFeatureSettingNumber_forKey_completion_, v7, v8, v9);
  _Block_release(v9);

}

uint64_t HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[15] = a1;
  v3[16] = v2;
  v4 = a2[1];
  v3[17] = *a2;
  v3[18] = v4;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[15] = a1;
  v3[16] = v2;
  v4 = a2[1];
  v3[17] = *a2;
  v3[18] = v4;
  return swift_task_switch();
}

uint64_t sub_23DE0C554()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (void *)v0[16];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v0[15]);
  v0[19] = v2;
  v3 = sub_23DE357D4();
  v0[20] = v3;
  v0[7] = v0 + 22;
  v0[2] = v0;
  v0[3] = sub_23DE0C63C;
  v4 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v5 = v0 + 10;
  v5[1] = 0x40000000;
  v5[2] = sub_23DE0C3BC;
  v5[3] = &block_descriptor_3;
  v5[4] = v4;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v2, v3, v5);
  return swift_continuation_await();
}

uint64_t sub_23DE0C63C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v7;
  void *v8;
  void *v9;
  _QWORD v10[6];

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, a1);
  v8 = (void *)sub_23DE357D4();
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DE0C16C;
  v10[3] = &block_descriptor_7;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_setFeatureSettingNumber_forKey_completion_, v7, v8, v9);
  _Block_release(v9);

}

{
  void *v4;
  void *v5;
  double v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[6];

  v5 = v4;
  sub_23DE350C0();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v8);
  v10 = (void *)sub_23DE357D4();
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_23DE0C16C;
  v12[3] = &block_descriptor_12;
  v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_setFeatureSettingNumber_forKey_completion_, v9, v10, v11);
  _Block_release(v11);

}

uint64_t sub_23DE0C7A8()
{
  _QWORD *v0;
  void *v1;
  double v2;
  id v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)v0[16];
  sub_23DE350C0();
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v2);
  v0[19] = v3;
  v4 = sub_23DE357D4();
  v0[20] = v4;
  v0[7] = v0 + 22;
  v0[2] = v0;
  v0[3] = sub_23DE0C8A4;
  v5 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v0[11] = 0x40000000;
  v0[12] = sub_23DE0C3BC;
  v0[13] = &block_descriptor_8;
  v0[14] = v5;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v3, v4, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_23DE0C8A4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 168) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23DE0C904()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 152);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DE0C93C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 160);
  v2 = *(void **)(v0 + 152);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23DE0CA84()
{
  unint64_t result;

  result = qword_256D077D8;
  if (!qword_256D077D8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D077D8);
  }
  return result;
}

id HKSummarySharingEntryStore.SharingEntriesPublisher.sharingEntryStore.getter()
{
  id *v0;

  return *v0;
}

uint64_t HKSummarySharingEntryStore.SharingEntriesPublisher.init(sharingEntryStore:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t HKSummarySharingEntryStore.SharingEntriesPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD v13[5];

  v6 = *v4;
  v7 = _s23SharingEntriesPublisherV5InnerCMa(0, a2, a3, a4);
  v8 = v6;
  v11 = sub_23DE0DA7C(a1, v8, v9, v10);

  v13[3] = v7;
  v13[4] = MEMORY[0x242645660](&unk_23DE39B64, v7);
  v13[0] = v11;
  sub_23DE353F0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t _s23SharingEntriesPublisherV5InnerCMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&_s23SharingEntriesPublisherV5InnerCMn);
}

id sub_23DE0CBAC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  objc_class *v4;
  objc_super v6;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (uint64_t *)(*MEMORY[0x24BEE4EA0] & *v0);
  objc_msgSend(*(id *)((char *)v0 + v2[14]), sel_removeObserver_, v0);
  MEMORY[0x242645720](*(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x60)), -1, -1);
  v4 = (objc_class *)_s23SharingEntriesPublisherV5InnerCMa(0, v2[10], v2[11], v3);
  v6.receiver = v0;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

id sub_23DE0CC40(void *a1)
{
  id v1;

  v1 = a1;
  return sub_23DE0CBAC();
}

void sub_23DE0CC64(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;

  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (char *)a1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x68);
  v7 = type metadata accessor for DownstreamHandlerSubscriptionState(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x50), *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a1) + 0x58), a4);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);

}

void sub_23DE0CCD8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD v5[6];

  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x70));
  objc_msgSend(v1, sel_addObserver_, v0);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v5[4] = sub_23DE0DCD0;
  v5[5] = v2;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = sub_23DE0C16C;
  v5[3] = &block_descriptor_11;
  v3 = _Block_copy(v5);
  v4 = v0;
  swift_release();
  objc_msgSend(v1, sel_fetchSharingEntriesWithCompletion_, v3);
  _Block_release(v3);
}

uint64_t sub_23DE0CDB8(char a1, void *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v6 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a3) + 0x50);
  v7 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a3) + 0x58);
  v8 = type metadata accessor for DownstreamHandlerSendFailureReason(255, v6, v7, a4);
  MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v8);
  v9 = sub_23DE36044();
  v10 = *(_QWORD *)(v9 - 8);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - v12;
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      v19 = a2;
      v14 = a2;
      v16 = _s23SharingEntriesPublisherV5InnerCMa(0, v6, v7, v15);
      v17 = MEMORY[0x242645660](&unk_23DE39B48, v16);
      DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)((char *)&v19, v16, v17, (uint64_t)v13);

      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
  }
  return result;
}

id sub_23DE0CEE4()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)((char *)v0 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v0) + 0x70)), sel_removeObserver_, v0);
}

uint64_t sub_23DE0CF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v4);
  v6 = v5[10];
  v7 = v5[11];
  v8 = type metadata accessor for DownstreamHandlerSendFailureReason(255, v6, v7, a4);
  MEMORY[0x242645660](&protocol conformance descriptor for DownstreamHandlerSendFailureReason<A>, v8);
  v9 = sub_23DE36044();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - v11;
  v13 = objc_msgSend(*(id *)((char *)v4 + v5[14]), sel_sharingEntries);
  sub_23DE0DB5C();
  v14 = sub_23DE35948();

  v20 = v14;
  v16 = _s23SharingEntriesPublisherV5InnerCMa(0, v6, v7, v15);
  v17 = MEMORY[0x242645660](&unk_23DE39B48, v16);
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)((uint64_t)&v20, v16, v17, (uint64_t)v12);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_23DE0D05C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_23DE0CF10((uint64_t)v4, v1, v2, v3);

}

id sub_23DE0D090(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  sub_23DE0D0E4();

  v2 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23DE0D0E4()
{
  swift_getObjectType();
  sub_23DE35870();
  sub_23DE0D19C();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35E04();
  sub_23DE35870();
  return 0;
}

uint64_t sub_23DE0D19C()
{
  uint64_t v1;

  sub_23DE0DB5C();
  sub_23DE0DCD8();
  v1 = sub_23DE35804();
  sub_23DE35870();
  sub_23DE0DE04(0, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_23DE0DD10();
  sub_23DE35804();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_23DE0D238()
{
  sub_23DE0BF4C();
}

uint64_t sub_23DE0D25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = MEMORY[0x242645660](&unk_23DE39B48);
  return DownstreamHandlerSubscription.request(_:)(a1, a2, v4);
}

void sub_23DE0D2A4(uint64_t a1)
{
  MEMORY[0x242645660](&unk_23DE39B48, a1);
  DownstreamHandlerSubscription.cancel()();
}

uint64_t HKSummarySharingEntryStore.createSummarySharingEntryPublisher()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v8;

  sub_23DE0DAC4();
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = MEMORY[0x24BDB9AE0];
  sub_23DE0DE04(0, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_23DE0DED0(&qword_2543272F8, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v5, MEMORY[0x24BDB9AF8]);
  sub_23DE354E0();
  sub_23DDE3384(&qword_254327358, (uint64_t (*)(uint64_t))sub_23DE0DAC4, MEMORY[0x24BDB9E90]);
  v6 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t sub_23DE0D418@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23DE0DD58();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0DE04(0, &qword_254327308, MEMORY[0x24BDB9DA0]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v21 - v12;
  swift_beginAccess();
  v14 = MEMORY[0x2426457A4](a1 + 16);
  if (v14)
  {
    v15 = (void *)v14;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_23DDEDE74();
    swift_allocObject();
    v23 = sub_23DE354D4();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = swift_allocObject();
    v22 = v6;
    *(_QWORD *)(v17 + 16) = sub_23DE0DF18;
    *(_QWORD *)(v17 + 24) = v16;
    sub_23DDF8768(0, &qword_254327398, (uint64_t (*)(uint64_t))sub_23DE0DB5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDE3384(&qword_254327348, (uint64_t (*)(uint64_t))sub_23DDEDE74, MEMORY[0x24BDB9E58]);
    v18 = v15;
    sub_23DE35510();
    swift_release();
    swift_release();
    sub_23DDE3384(&qword_2543272E8, (uint64_t (*)(uint64_t))sub_23DE0DD58, MEMORY[0x24BDB96C0]);
    v19 = sub_23DE354F8();

    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v8, v5);
  }
  else
  {
    sub_23DDF8768(0, &qword_254327398, (uint64_t (*)(uint64_t))sub_23DE0DB5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DE0DE8C();
    v23 = swift_allocError();
    sub_23DDE2738();
    sub_23DE35498();
    sub_23DE0DED0(&qword_256D078B8, &qword_254327308, MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v19 = sub_23DE354F8();
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  *a2 = v19;
  return result;
}

uint64_t sub_23DE0D724(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, sel_sharingEntries);
  sub_23DE0DB5C();
  v2 = sub_23DE35948();

  return v2;
}

void sub_23DE0D774(void (*a1)(void **), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *aBlock;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, void *);
  void *v14;
  void (*v15)(int, void *);
  uint64_t v16;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_beginAccess();
  v7 = MEMORY[0x2426457A4](a3 + 16);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = sub_23DDEF69C;
    *(_QWORD *)(v9 + 24) = v6;
    v15 = sub_23DE0DF6C;
    v16 = v9;
    aBlock = (void *)MEMORY[0x24BDAC760];
    v12 = 1107296256;
    v13 = sub_23DE0C16C;
    v14 = &block_descriptor_20;
    v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v8, sel_fetchSharingEntriesWithCompletion_, v10);
    _Block_release(v10);
  }
  else
  {
    swift_retain();
    swift_release();
    sub_23DE0DE8C();
    v8 = (void *)swift_allocError();
    aBlock = v8;
    LOBYTE(v12) = 1;
    a1(&aBlock);
  }

}

void sub_23DE0D8D4(int a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;

  if (a2)
  {
    v5 = a2;
    a3(a2, 1);

  }
  else
  {
    ((void (*)(_QWORD))a3)(0);
  }
}

id HKSummarySharingEntryStore.sharingEntriesPublisher()@<X0>(_QWORD *a1@<X8>)
{
  void *v1;

  *a1 = v1;
  return v1;
}

id sub_23DE0D940(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _DWORD *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  objc_class *v20;
  objc_super v22;

  v7 = (_QWORD *)(*MEMORY[0x24BEE4EA0] & *v4);
  v8 = v7[10];
  v9 = v7[11];
  v10 = type metadata accessor for DownstreamHandlerSubscriptionState(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v22 - v12;
  v14 = v7[12];
  v15 = v4;
  v16 = (_DWORD *)swift_slowAlloc();
  *v16 = 0;
  *(_QWORD *)((char *)v4 + v14) = v16;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v8, v9, (uint64_t)v13);
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v15) + 0x68)], v13, v10);
  *(_QWORD *)&v15[*(_QWORD *)((*v17 & *(_QWORD *)v15) + 0x70)] = a2;
  v18 = a2;

  v20 = (objc_class *)_s23SharingEntriesPublisherV5InnerCMa(0, v8, v9, v19);
  v22.receiver = v15;
  v22.super_class = v20;
  return objc_msgSendSuper2(&v22, sel_init);
}

id sub_23DE0DA7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = objc_allocWithZone((Class)_s23SharingEntriesPublisherV5InnerCMa(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4));
  return sub_23DE0D940(a1, a2, v8, v9);
}

void sub_23DE0DAC4()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_254327360)
  {
    v0 = MEMORY[0x24BDB9AE0];
    sub_23DE0DE04(255, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_23DE0DED0(&qword_2543272F8, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v0, MEMORY[0x24BDB9AF8]);
    v1 = sub_23DE354EC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_254327360);
  }
}

unint64_t sub_23DE0DB5C()
{
  unint64_t result;

  result = qword_254327AF8;
  if (!qword_254327AF8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254327AF8);
  }
  return result;
}

uint64_t sub_23DE0DB98()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DE0DBBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DE0D418(v1, a1);
}

ValueMetadata *type metadata accessor for HKSummarySharingEntryStore.SharingEntriesPublisher()
{
  return &type metadata for HKSummarySharingEntryStore.SharingEntriesPublisher;
}

uint64_t sub_23DE0DBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for DownstreamHandlerSubscriptionState(319, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23DE0DC60(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x242645660](&unk_23DE39B64);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_23DE0DC8C()
{
  JUMPOUT(0x242645660);
}

void sub_23DE0DC9C()
{
  JUMPOUT(0x242645660);
}

uint64_t sub_23DE0DCAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23DE0DCD0(char a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23DE0CDB8(a1, a2, *(_QWORD **)(v4 + 16), a4);
}

unint64_t sub_23DE0DCD8()
{
  unint64_t result;

  result = qword_256D078A0;
  if (!qword_256D078A0)
  {
    sub_23DE0DB5C();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D078A0);
  }
  return result;
}

unint64_t sub_23DE0DD10()
{
  unint64_t result;

  result = qword_256D078A8;
  if (!qword_256D078A8)
  {
    sub_23DE0DE04(255, &qword_254327300, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256D078A8);
  }
  return result;
}

void sub_23DE0DD58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543272F0)
  {
    sub_23DDEDE74();
    sub_23DDF8768(255, &qword_254327398, (uint64_t (*)(uint64_t))sub_23DE0DB5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DDE3384(&qword_254327348, (uint64_t (*)(uint64_t))sub_23DDEDE74, MEMORY[0x24BDB9E58]);
    v0 = sub_23DE353A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543272F0);
  }
}

void sub_23DE0DE04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DDF8768(255, &qword_254327398, (uint64_t (*)(uint64_t))sub_23DE0DB5C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    v7 = v6;
    v8 = sub_23DDE2738();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_23DE0DE8C()
{
  unint64_t result;

  result = qword_256D078B0;
  if (!qword_256D078B0)
  {
    result = MEMORY[0x242645660](&unk_23DE39C24, &type metadata for SummarySharingEntryError);
    atomic_store(result, (unint64_t *)&qword_256D078B0);
  }
  return result;
}

uint64_t sub_23DE0DED0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_23DE0DE04(255, a2, a3);
    result = MEMORY[0x242645660](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DE0DF10(void (*a1)(void **), uint64_t a2)
{
  uint64_t v2;

  sub_23DE0D774(a1, a2, v2);
}

uint64_t sub_23DE0DF18()
{
  uint64_t v0;

  return sub_23DE0D724(*(void **)(v0 + 16));
}

uint64_t sub_23DE0DF20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DE0DF44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

void sub_23DE0DF6C(int a1, void *a2)
{
  uint64_t v2;

  sub_23DE0D8D4(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t storeEnumTagSinglePayload for SummarySharingEntryError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DE0DFB4 + 4 * byte_23DE39A60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DE0DFD4 + 4 * byte_23DE39A65[v4]))();
}

_BYTE *sub_23DE0DFB4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DE0DFD4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE0DFDC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE0DFE4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE0DFEC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE0DFF4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SummarySharingEntryError()
{
  return &type metadata for SummarySharingEntryError;
}

unint64_t sub_23DE0E014()
{
  unint64_t result;

  result = qword_256D078C0;
  if (!qword_256D078C0)
  {
    result = MEMORY[0x242645660](&unk_23DE39BFC, &type metadata for SummarySharingEntryError);
    atomic_store(result, (unint64_t *)&qword_256D078C0);
  }
  return result;
}

uint64_t Publisher.retainingSink(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  sub_23DE0E264();
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v11 = sub_23DE3542C();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a5;
  v12[3] = a6;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23DE35420();
  MEMORY[0x242645660](MEMORY[0x24BDB9AA0], v11);
  sub_23DE35558();
  sub_23DE35480();
  swift_retain();
  MEMORY[0x242645660](MEMORY[0x24BDB9AA8], v11);
  v13 = sub_23DE3548C();
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 24));
  swift_release();
  *(_QWORD *)(v10 + 16) = v13;
  swift_retain();
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 24));
  swift_release();
  swift_release();
  return v13;
}

void sub_23DE0E264()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328800)
  {
    sub_23DE0E2C8();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DE35D80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328800);
  }
}

void sub_23DE0E2C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543281A8)
  {
    sub_23DE35480();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543281A8);
  }
}

uint64_t sub_23DE0E31C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DE0E348()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t Publisher.retainingSink(receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v9 = Publisher.retainingSink(receiveCompletion:receiveValue:)((uint64_t)nullsub_1, v8, a1, a2, a3, a4);
  swift_release();
  return v9;
}

uint64_t sub_23DE0E3EC()
{
  return swift_deallocObject();
}

uint64_t QueryPublisherBase.unwrap()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t PublisherBase;

  v1 = (_QWORD *)*v0;
  v2 = (_QWORD *)swift_allocObject();
  v3 = v1[51];
  v2[2] = v3;
  v4 = v1[52];
  v2[3] = v4;
  v5 = v1[53];
  v2[4] = v5;
  PublisherBase = type metadata accessor for QueryPublisherBase(0, v3, v4, v5);
  MEMORY[0x242645660](&protocol conformance descriptor for StreamPublisher<A, B>, PublisherBase);
  sub_23DE35504();
  return swift_release();
}

uint64_t *QueryPublisherBase.init(store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t PublisherResult;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 408);
  PublisherResult = type metadata accessor for QueryPublisherResult(0, v7, a3, a4);
  MEMORY[0x24BDAC7A8](PublisherResult);
  v10 = (char *)&v12 - v9;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v6 + 440)) = 0;
  *((_BYTE *)v4 + *(_QWORD *)(*v4 + 448)) = 0;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 432)) = a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))((char *)&v12 - v9, 1, 1, v7);
  return _s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0((uint64_t)v10);
}

uint64_t *QueryPublisherBase.deinit()
{
  uint64_t v0;
  uint64_t *v1;

  if (*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 440)))
    objc_msgSend(*(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 432)), sel_stopQuery_);
  v1 = StreamPublisher.deinit();

  return v1;
}

void QueryPublisherBase.__allocating_init(_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void QueryPublisherBase.__allocating_init(_:onDisconnect:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_23DE0E624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 448);
  if ((*(_BYTE *)(v0 + v1) & 1) == 0)
  {
    *(_BYTE *)(v0 + v1) = 1;
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
    v3 = *(_QWORD *)(*(_QWORD *)v0 + 440);
    v4 = *(void **)(v0 + v3);
    *(_QWORD *)(v0 + v3) = v2;

    if (*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 440)))
      objc_msgSend(*(id *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 432)), sel_executeQuery_);
  }
}

void sub_23DE0E694()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;

  v1 = *(void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 440));
  if (v1)
  {
    v2 = *(void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 432));
    v3 = v1;
    objc_msgSend(v2, sel_stopQuery_, v3);
    v4 = *(_QWORD *)(*(_QWORD *)v0 + 440);
    v5 = *(id *)(v0 + v4);
    *(_QWORD *)(v0 + v4) = 0;

  }
}

void sub_23DE0E720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = a1;

}

uint64_t sub_23DE0E734()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 448));
}

uint64_t sub_23DE0E744(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 448)) = result;
  return result;
}

uint64_t sub_23DE0E754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t PublisherResult;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  PublisherResult = type metadata accessor for QueryPublisherResult(0, a2, a3, a4);
  MEMORY[0x24BDAC7A8](PublisherResult);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v15 - v9, a1);
  v12 = *(_QWORD *)(a2 - 8);
  v13 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a5, v10, a2);
    v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a5, v13, 1, a2);
}

uint64_t sub_23DE0E824()
{
  return swift_deallocObject();
}

uint64_t sub_23DE0E834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23DE0E754(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t type metadata accessor for QueryPublisherBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPublisherBase);
}

uint64_t type metadata accessor for QueryPublisherResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPublisherResult);
}

uint64_t *QueryPublisherBase.__allocating_init(store:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return QueryPublisherBase.init(store:)(a1, v2, v3, v4);
}

void sub_23DE0E890()
{
  uint64_t v0;

}

uint64_t QueryPublisherBase.__deallocating_deinit()
{
  QueryPublisherBase.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23DE0E8DC()
{
  return 0;
}

void QueryPublisherBase.init(_:)()
{
  sub_23DE0E904();
}

void QueryPublisherBase.init(_:onDisconnect:)()
{
  sub_23DE0E930();
}

void sub_23DE0E904()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_23DE0E930()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23DE0E95C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_23DE0EA9C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_23DE0EC44()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23DE0EC4C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_23DE0EC70()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for QueryPublisherBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QueryPublisherBase.__allocating_init(store:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of QueryPublisherBase.createQuery()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t sub_23DE0ECE8()
{
  return sub_23DE0ECFC();
}

uint64_t sub_23DE0ECFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;

  v0 = sub_23DE351C8();
  if (qword_256D06828 != -1)
    swift_once();
  sub_23DDF61D8();
  v1 = sub_23DE35C60();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  result = swift_bridgeObjectRelease();
  if (v0 != v2)
  {
    sub_23DE35C60();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23DE351C8();
    sub_23DE12718();
    swift_allocError();
    static SampleDataDecodingError.invalidColumnCountForRow(expected:actual:)(v4);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23DE0EE98()
{
  return sub_23DE0EEAC();
}

uint64_t sub_23DE0EEAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  sub_23DE351E0();
  if (!v5)
  {
    sub_23DDF6180((uint64_t)v4);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    sub_23DE18B2C(0);
    sub_23DE12718();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleType(expectedPrefix:actualIdentifier:)(v1);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return v0;
  }
  v0 = v3;
  if ((sub_23DE358D0() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  return v0;
}

uint64_t sub_23DE0EFB8()
{
  return sub_23DE0EFCC();
}

uint64_t sub_23DE0EFCC()
{
  uint64_t result;
  _QWORD *v1;

  sub_23DE351E0();
  sub_23DDE3BB0(0, (unint64_t *)&qword_254327BC0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_23DE18B2C(1);
    sub_23DE12718();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)(v1);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23DE0F0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DE0F0D0(a1, (uint64_t (*)(_QWORD))type metadata accessor for StateOfMindDecoder, a2);
}

uint64_t sub_23DE0F0D0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[3];
  char *v47;
  char *v48;
  uint64_t (*v49)(_QWORD);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[24];
  uint64_t v58;
  uint64_t v59;

  v49 = a2;
  sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  MEMORY[0x24BDAC7A8](v7);
  v50 = (uint64_t)v46 - v8;
  v9 = sub_23DE34FE8();
  v52 = *(_QWORD *)(v9 - 8);
  v53 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDED2C4(0, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v47 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v46 - v14;
  v16 = sub_23DE35138();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23DE350FC();
  v21 = *(_QWORD *)(v20 - 8);
  v54 = v20;
  v55 = v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v51 = (char *)v46 - v25;
  v59 = v3;
  sub_23DE351E0();
  if (!v58)
  {
    sub_23DDF6180((uint64_t)v57);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    sub_23DE18B2C(a1);
    sub_23DE12718();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleStartDate(actualValue:)(v40);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v46[0] = a3;
  v46[1] = v4;
  v46[2] = v56;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  sub_23DE35120();
  v27 = (void *)sub_23DE3512C();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  objc_msgSend(v26, sel_setLocale_, v27);

  v28 = (void *)sub_23DE357D4();
  objc_msgSend(v26, sel_setDateFormat_, v28);

  v29 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v26, sel_dateFromString_, v29);

  if (!v30)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v15, 1, 1, v54);
    goto LABEL_9;
  }
  sub_23DE350F0();

  v32 = v54;
  v31 = v55;
  v33 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v33(v15, v24, v54);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v15, 0, 1, v32);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v34(v15, 1, v32) == 1)
  {
LABEL_9:
    sub_23DE12948((uint64_t)v15, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    goto LABEL_10;
  }
  v35 = v51;
  v33(v51, v15, v32);
  v36 = v49(0);
  v37 = v50;
  sub_23DE1275C(v59 + *(int *)(v36 + 24), v50);
  v39 = v52;
  v38 = v53;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v37, 1, v53) == 1)
  {
    sub_23DE12948(v37, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  }
  else
  {
    v42 = v37;
    v43 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v48, v42, v38);
    v44 = (uint64_t)v47;
    sub_23DE35168();
    if (v34((char *)v44, 1, v32) == 1)
    {
      sub_23DE12948(v44, (unint64_t *)&qword_254328878, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      sub_23DE12718();
      swift_allocError();
      static SampleDataDecodingError.invalidSampleStartDateShift(actualShift:)(v45);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v35, v32);
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v38);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v32);
    v35 = (char *)v44;
  }
  return ((uint64_t (*)(_QWORD, char *, uint64_t))v33)(v46[0], v35, v32);
}

uint64_t SampleDataDecodingError.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SampleDataDecodingError.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

HealthKitAdditions::SampleDataDecodingError __swiftcall SampleDataDecodingError.init(title:description:)(Swift::String title, Swift::String description)
{
  Swift::String *v2;
  HealthKitAdditions::SampleDataDecodingError result;

  *v2 = title;
  v2[1] = description;
  result.description = description;
  result.title = title;
  return result;
}

unint64_t SampleDataDecodingError.localizedDescription.getter()
{
  swift_bridgeObjectRetain();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  swift_bridgeObjectRetain();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

uint64_t static SampleDataDecodingError.unsupportedSampleType(identifier:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  result = sub_23DE35870();
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023DE3BBE0;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x800000023DE3BC00;
  return result;
}

uint64_t static SampleDataDecodingError.invalidColumnCountForRow(expected:actual:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35F30();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35F30();
  sub_23DE35870();
  result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x800000023DE3BC40;
  a1[2] = 0x6465746365707845;
  a1[3] = 0xE900000000000020;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleType(expectedPrefix:actualIdentifier:)@<X0>(_QWORD *a1@<X8>)
{
  return sub_23DE0F984(0x800000023DE3BC60, 0xD000000000000014, 0x800000023DE3BC80, a1);
}

uint64_t static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)@<X0>(_QWORD *a1@<X8>)
{
  return sub_23DE0F984(0x800000023DE3BCA0, 0xD000000000000015, 0x800000023DE3BCC0, a1);
}

uint64_t sub_23DE0F984@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, _QWORD *a4@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35870();
  result = sub_23DE35870();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = 0xD000000000000017;
  a4[3] = a1;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleUnit(expectedUnit:actualUnitString:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  strcpy((char *)v8, "Expected unit ");
  HIBYTE(v8[1]) = -18;
  v4 = objc_msgSend(a1, sel_unitString);
  sub_23DE357F8();

  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  result = sub_23DE35870();
  v6 = v8[0];
  v7 = v8[1];
  *a2 = 0xD000000000000017;
  a2[1] = 0x800000023DE3BCE0;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleDuration(actualDuration:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  result = sub_23DE35870();
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023DE3BD00;
  a1[2] = 0xD000000000000026;
  a1[3] = 0x800000023DE3BD20;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleStartDate(actualValue:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  result = sub_23DE35870();
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x800000023DE3BD50;
  a1[2] = 0xD000000000000031;
  a1[3] = 0x800000023DE3BD70;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleStartDateShift(actualShift:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  swift_bridgeObjectRelease();
  sub_23DE34FE8();
  sub_23DDE3384(&qword_256D078C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE28]);
  sub_23DE35F30();
  sub_23DE35870();
  result = swift_bridgeObjectRelease();
  *a1 = 0xD000000000000023;
  a1[1] = 0x800000023DE3BDB0;
  a1[2] = 0xD00000000000001ALL;
  a1[3] = 0x800000023DE3BDE0;
  return result;
}

uint64_t SampleDataDecoder.init(fileData:logger:calendar:dateShift:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  int *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  *a6 = a1;
  a6[1] = a2;
  v10 = (int *)type metadata accessor for SampleDataDecoder(0);
  v11 = (char *)a6 + v10[5];
  v12 = sub_23DE3536C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a3, v12);
  v13 = (char *)a6 + v10[6];
  v14 = sub_23DE351A4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a4, v14);
  return sub_23DE11A1C(a5, (uint64_t)a6 + v10[7]);
}

uint64_t SampleDataDecoder.decodeSamples()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t result;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t *, _QWORD);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  void (*v63)(_QWORD, _QWORD, _QWORD);
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[5];
  uint64_t v77;

  v59 = sub_23DE3536C();
  v66 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v70 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_23DE351D4();
  v3 = *(_QWORD *)(v2 - 8);
  v72 = v2;
  v73 = v3;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v71 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)&v51 - v6;
  v7 = sub_23DE351EC();
  *(_QWORD *)&v57 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v68 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE11A70();
  v56 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v69 = (uint64_t)&v51 - v12;
  v62 = (void (*)(char *, uint64_t))sub_23DE35228();
  v60 = (uint64_t *)*((_QWORD *)v62 - 1);
  MEMORY[0x24BDAC7A8](v62);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DE3521C();
  MEMORY[0x24BDAC7A8](v15);
  v67 = sub_23DE35204();
  v53 = *(_QWORD *)(v67 - 8);
  MEMORY[0x24BDAC7A8](v67);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v0;
  v19 = v0[1];
  v64 = v0;
  sub_23DDEE178(v18, v19);
  sub_23DE11548(MEMORY[0x24BEE4AF8]);
  v58 = sub_23DE116D8();
  sub_23DE117F0();
  sub_23DE118B0();
  ((void (*)(char *, _QWORD, void (*)(char *, uint64_t)))v60[13])(v14, *MEMORY[0x24BDF5FB8], v62);
  sub_23DE35210();
  v20 = v63;
  result = sub_23DE351BC();
  if (v20)
    return result;
  v54 = 0;
  v77 = MEMORY[0x24BEE4AF8];
  v22 = v68;
  v52 = v17;
  sub_23DE351F8();
  v23 = v57;
  v24 = (uint64_t)v55;
  v63 = *(void (**)(_QWORD, _QWORD, _QWORD))(v57 + 16);
  v63(v55, v22, v7);
  v25 = sub_23DDE3384(&qword_256D078D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF5D10], MEMORY[0x24BDF5D20]);
  sub_23DE35A74();
  v62 = *(void (**)(char *, uint64_t))(v23 + 8);
  v62(v22, v7);
  v26 = v56;
  *(_QWORD *)(v24 + *(int *)(v56 + 36)) = v76[0];
  v27 = v69;
  sub_23DE11AE8(v24, v69);
  v28 = (uint64_t *)(v27 + *(int *)(v26 + 36));
  v29 = *v28;
  sub_23DE35A8C();
  if (v29 != v76[0])
  {
    *(_QWORD *)&v30 = 136446210;
    v57 = v30;
    v56 = 0x800000023DE39D10;
    v55 = (char *)(MEMORY[0x24BEE4AD8] + 8);
    v31 = v69;
    v58 = v25;
    v60 = v28;
    v61 = v7;
    v33 = v73;
    while (1)
    {
      v36 = (void (*)(uint64_t *, _QWORD))sub_23DE35ABC();
      v37 = v31;
      v38 = v65;
      v39 = v72;
      (*(void (**)(char *))(v33 + 16))(v65);
      v36(v76, 0);
      v40 = v68;
      v63(v68, v37, v7);
      sub_23DE35A98();
      v62(v40, v7);
      v41 = (uint64_t)v71;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v71, v38, v39);
      sub_23DDE3384((unint64_t *)&qword_256D078E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF5CD8], MEMORY[0x24BDF5CE8]);
      sub_23DE35A74();
      sub_23DE35A8C();
      v42 = v66;
      if (v76[0] == v74)
        goto LABEL_17;
      sub_23DE351E0();
      if (!v76[3])
        break;
      if (!swift_dynamicCast())
        goto LABEL_17;
      v43 = v54;
      sub_23DE10648(v74, v75, v41);
      v31 = v69;
      v34 = v60;
      v7 = v61;
      if (v43)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v41, v72);
        sub_23DDEF790(v31, (uint64_t (*)(_QWORD))sub_23DE11A70);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v67);
      }
      v54 = 0;
      v44 = swift_bridgeObjectRelease();
      MEMORY[0x242644A00](v44);
      if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_23DE3596C();
      sub_23DE35990();
      sub_23DE35954();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v41, v72);
      v32 = v67;
LABEL_8:
      v35 = *v34;
      sub_23DE35A8C();
      if (v35 == v76[0])
        goto LABEL_4;
    }
    sub_23DDF6180((uint64_t)v76);
LABEL_17:
    v45 = type metadata accessor for SampleDataDecoder(0);
    v46 = v59;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v70, (char *)v64 + *(int *)(v45 + 20), v59);
    v47 = sub_23DE35354();
    v48 = sub_23DE35AF8();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v76[0] = v50;
      *(_DWORD *)v49 = v57;
      *(_QWORD *)(v49 + 4) = sub_23DDE8458(0xD000000000000011, v56, v76);
      _os_log_impl(&dword_23DDE0000, v47, v48, "[%{public}s] Skipping empty row.", (uint8_t *)v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242645720](v50, -1, -1);
      MEMORY[0x242645720](v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v70, v46);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v72);
    v31 = v69;
    v32 = v67;
    v34 = v60;
    v7 = v61;
    goto LABEL_8;
  }
  v31 = v69;
  v32 = v67;
LABEL_4:
  sub_23DDEF790(v31, (uint64_t (*)(_QWORD))sub_23DE11A70);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v32);
  return v77;
}

id sub_23DE10648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v39 = type metadata accessor for StateOfMindDecoder();
  MEMORY[0x24BDAC7A8](v39);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CategorySampleDecoder(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for QuantitySampleDecoder(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_23DE358D0() & 1) != 0)
  {
    v14 = sub_23DE351D4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, a3, v14);
    v15 = type metadata accessor for SampleDataDecoder(0);
    v16 = v4 + *(int *)(v15 + 24);
    v17 = &v13[*(int *)(v11 + 20)];
    v18 = sub_23DE351A4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, v16, v18);
    sub_23DE1275C(v4 + *(int *)(v15 + 28), (uint64_t)&v13[*(int *)(v11 + 24)]);
    sub_23DE10A24();
    v20 = v19;
    v21 = type metadata accessor for QuantitySampleDecoder;
    v22 = (uint64_t)v13;
  }
  else
  {
    v38 = a3;
    if ((sub_23DE358D0() & 1) != 0)
    {
      v23 = sub_23DE351D4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v10, v38, v23);
      v24 = type metadata accessor for SampleDataDecoder(0);
      v25 = v4 + *(int *)(v24 + 24);
      v26 = &v10[*(int *)(v8 + 20)];
      v27 = sub_23DE351A4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v25, v27);
      sub_23DE1275C(v4 + *(int *)(v24 + 28), (uint64_t)&v10[*(int *)(v8 + 24)]);
      sub_23DE10E10();
      v20 = v28;
      v21 = type metadata accessor for CategorySampleDecoder;
      v22 = (uint64_t)v10;
    }
    else
    {
      sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
      v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
      v20 = objc_msgSend(v29, sel_identifier);

      sub_23DE357F8();
      LOBYTE(v29) = sub_23DE358D0();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        sub_23DE12718();
        swift_allocError();
        static SampleDataDecodingError.unsupportedSampleType(identifier:)(v37);
        swift_willThrow();
        return v20;
      }
      v30 = sub_23DE351D4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v7, v38, v30);
      v31 = type metadata accessor for SampleDataDecoder(0);
      v32 = v4 + *(int *)(v31 + 24);
      v33 = v39;
      v34 = &v7[*(int *)(v39 + 20)];
      v35 = sub_23DE351A4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v34, v32, v35);
      sub_23DE1275C(v4 + *(int *)(v31 + 28), (uint64_t)&v7[*(int *)(v33 + 24)]);
      v20 = (id)sub_23DDF591C();
      v21 = (uint64_t (*)(_QWORD))type metadata accessor for StateOfMindDecoder;
      v22 = (uint64_t)v7;
    }
  }
  sub_23DDEF790(v22, v21);
  return v20;
}

void sub_23DE10A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38[24];
  uint64_t v39;

  v1 = sub_23DE350FC();
  v34 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v28 - v5;
  v35 = sub_23DE34F58();
  v7 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0ECFC();
  if (v0)
    return;
  sub_23DE0EEAC();
  v33 = v1;
  sub_23DDE7B5C(0, &qword_256D07988);
  v10 = sub_23DE357D4();
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x242644C10](v10);
  sub_23DE0EFCC();
  v13 = v12;
  v14 = objc_msgSend(v11, sel_canonicalUnit);
  if (!v14)
  {
    __break(1u);
    return;
  }
  v15 = v14;
  v16 = (void *)sub_23DE112A8(v14);

  v32 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v16, v13);
  sub_23DE113E4(type metadata accessor for QuantitySampleDecoder);
  v31 = v16;
  sub_23DE351E0();
  if (!v39)
  {
    sub_23DDF6180((uint64_t)v38);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    v17 = 0;
    v18 = 0xE000000000000000;
    goto LABEL_9;
  }
  v17 = v36;
  v18 = v37;
LABEL_9:
  v19 = sub_23DE24834(v17, v18);
  swift_bridgeObjectRelease();
  sub_23DE34F4C();
  sub_23DE34F34();
  v20 = (void *)sub_23DE350D8();
  v29 = sub_23DE350D8();
  if (v19)
  {
    v30 = (id)sub_23DE356FC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = 0;
  }
  v21 = (void *)objc_opt_self();
  v22 = v32;
  v23 = (void *)v29;
  v24 = objc_msgSend(v21, sel_quantitySampleWithType_quantity_startDate_endDate_metadata_, v11, v32, v20, v29, v30);

  v25 = *(void (**)(char *, uint64_t))(v34 + 8);
  v26 = v4;
  v27 = v33;
  v25(v26, v33);
  v25(v6, v27);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v35);
}

void sub_23DE10E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31[24];
  uint64_t v32;
  uint64_t v33;

  v1 = sub_23DE350FC();
  v28 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v24 - v5;
  v33 = sub_23DE34F58();
  v7 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE0ECFC();
  if (v0)
    return;
  sub_23DE0EEAC();
  v27 = v1;
  sub_23DDE7B5C(0, &qword_256D07990);
  v10 = sub_23DE357D4();
  swift_bridgeObjectRelease();
  v11 = (void *)MEMORY[0x242644BF8](v10);
  v12 = sub_23DE11138();
  sub_23DE113E4(type metadata accessor for CategorySampleDecoder);
  sub_23DE351E0();
  if (!v32)
  {
    sub_23DDF6180((uint64_t)v31);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v13 = 0;
    v14 = 0xE000000000000000;
    goto LABEL_8;
  }
  v13 = v29;
  v14 = v30;
LABEL_8:
  v15 = sub_23DE24834(v13, v14);
  swift_bridgeObjectRelease();
  sub_23DE34F4C();
  sub_23DE34F34();
  v26 = sub_23DE350D8();
  v25 = sub_23DE350D8();
  if (v15)
  {
    v16 = (void *)sub_23DE356FC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  v17 = (void *)objc_opt_self();
  v18 = v12;
  v19 = (void *)v25;
  v20 = (void *)v26;
  v24[1] = objc_msgSend(v17, sel_categorySampleWithType_value_startDate_endDate_metadata_, v11, v18, v26, v25, v16);

  v21 = *(void (**)(char *, uint64_t))(v28 + 8);
  v22 = v4;
  v23 = v27;
  v21(v22, v27);
  v21(v6, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v33);
}

uint64_t sub_23DE11138()
{
  uint64_t result;
  _QWORD *v1;
  _BYTE v2[24];
  uint64_t v3;
  double v4;

  sub_23DE351E0();
  if (v3)
  {
    if ((swift_dynamicCast() & 1) != 0)
      return *(_QWORD *)&v4;
  }
  else
  {
    sub_23DDF6180((uint64_t)v2);
  }
  sub_23DE351E0();
  if (!v3)
  {
    sub_23DDF6180((uint64_t)v2);
    goto LABEL_13;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_13:
    sub_23DE18B2C(1);
    sub_23DE12718();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)(v1);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 < 9.22337204e18)
  {
    if (v4 == (double)(uint64_t)v4)
      return (uint64_t)v4;
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_23DE112A8(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v6;
  _BYTE v7[6];
  unint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_23DE351E0();
  if (v10)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v2 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFLL;
      if (v2)
      {
        v3 = (void *)sub_23DE357D4();
        swift_bridgeObjectRelease();
        v4 = objc_msgSend((id)objc_opt_self(), sel_unitFromString_, v3);

        return (uint64_t)v4;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23DDF6180((uint64_t)v9);
  }
  sub_23DE18B2C(2);
  sub_23DE12718();
  swift_allocError();
  static SampleDataDecodingError.invalidSampleUnit(expectedUnit:actualUnitString:)(a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t sub_23DE113E4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  char v11;
  _QWORD *v12;
  _BYTE v13[32];

  v3 = sub_23DE350FC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v13[-v8];
  result = sub_23DE0F0D0(3, a1, (uint64_t)&v13[-v8]);
  if (!v1)
  {
    sub_23DE351E0();
    sub_23DE18DD0((uint64_t)v13);
    if ((v11 & 1) != 0)
    {
      sub_23DE18B2C(4);
      sub_23DE12718();
      swift_allocError();
      static SampleDataDecodingError.invalidSampleDuration(actualDuration:)(v12);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
      sub_23DE34F40();
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  }
  return result;
}

unint64_t sub_23DE11548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  sub_23DE129E0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (_QWORD *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE12A44();
  v7 = sub_23DE35EA0();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (char *)v6 + *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_23DE12AA8(v13, (uint64_t)v6);
    v15 = *v6;
    v16 = v6[1];
    result = sub_23DE1DDF8(*v6, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = sub_23DE35228();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_23DE116D8()
{
  uint64_t inited;
  uint64_t v1;

  sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DE39D10;
  *(_QWORD *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = 0xE000000000000000;
  *(_QWORD *)(inited + 48) = 1093619235;
  *(_QWORD *)(inited + 56) = 0xE400000000000000;
  *(_QWORD *)(inited + 64) = 0x412F4E20412F4E23;
  *(_QWORD *)(inited + 72) = 0xE800000000000000;
  *(_QWORD *)(inited + 80) = 4279843;
  *(_QWORD *)(inited + 88) = 0xE300000000000000;
  *(_QWORD *)(inited + 96) = 4271950;
  *(_QWORD *)(inited + 104) = 0xE300000000000000;
  *(_QWORD *)(inited + 112) = 16718;
  *(_QWORD *)(inited + 120) = 0xE200000000000000;
  *(_QWORD *)(inited + 128) = 1280070990;
  *(_QWORD *)(inited + 136) = 0xE400000000000000;
  *(_QWORD *)(inited + 144) = 6369134;
  *(_QWORD *)(inited + 152) = 0xE300000000000000;
  *(_QWORD *)(inited + 160) = 7104878;
  *(_QWORD *)(inited + 168) = 0xE300000000000000;
  *(_QWORD *)(inited + 176) = 1819047278;
  *(_QWORD *)(inited + 184) = 0xE400000000000000;
  v1 = sub_23DE127B0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t sub_23DE117F0()
{
  uint64_t inited;
  uint64_t v1;

  sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DE39D20;
  *(_QWORD *)(inited + 32) = 49;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 1702195796;
  *(_QWORD *)(inited + 56) = 0xE400000000000000;
  *(_QWORD *)(inited + 64) = 1163219540;
  *(_QWORD *)(inited + 72) = 0xE400000000000000;
  *(_QWORD *)(inited + 80) = 1702195828;
  *(_QWORD *)(inited + 88) = 0xE400000000000000;
  v1 = sub_23DE127B0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t sub_23DE118B0()
{
  uint64_t inited;
  uint64_t v1;

  sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DE39D20;
  *(_QWORD *)(inited + 32) = 48;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 0x65736C6146;
  *(_QWORD *)(inited + 56) = 0xE500000000000000;
  *(_QWORD *)(inited + 64) = 0x45534C4146;
  *(_QWORD *)(inited + 72) = 0xE500000000000000;
  *(_QWORD *)(inited + 80) = 0x65736C6166;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  v1 = sub_23DE127B0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t _s18HealthKitAdditions23SampleDataDecodingErrorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_23DE35F54(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_23DE35F54();
  }
  return result;
}

uint64_t type metadata accessor for SampleDataDecoder(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D07940);
}

uint64_t sub_23DE11A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DE11A70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D078D0)
  {
    sub_23DE351EC();
    sub_23DDE3384(&qword_256D078D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDF5D10], MEMORY[0x24BDF5D20]);
    v0 = sub_23DE35E10();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D078D0);
  }
}

uint64_t sub_23DE11AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE11A70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for SampleDataDecodingError()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for SampleDataDecodingError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SampleDataDecodingError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for SampleDataDecodingError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataDecodingError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SampleDataDecodingError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SampleDataDecodingError()
{
  return &type metadata for SampleDataDecodingError;
}

uint64_t *initializeBufferWithCopyOfBuffer for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23DDEE178(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23DE3536C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_23DE351A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_23DE34FE8();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for SampleDataDecoder(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  sub_23DDEE114(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = sub_23DE3536C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = sub_23DE34FE8();
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

uint64_t *initializeWithCopy for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_23DDEE178(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23DE351A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_23DE34FE8();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t *assignWithCopy for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_23DDEE178(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23DDEE114(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23DE351A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = a3[7];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_23DE34FE8();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v16) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v16)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

_OWORD *initializeWithTake for SampleDataDecoder(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23DE351A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23DE34FE8();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t *assignWithTake for SampleDataDecoder(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23DDEE114(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23DE351A4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_23DE34FE8();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v14)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataDecoder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE12470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23DE3536C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_23DE351A4();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SampleDataDecoder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DE1255C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_23DE3536C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_23DE351A4();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_23DE12634()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DE3536C();
  if (v0 <= 0x3F)
  {
    sub_23DE351A4();
    if (v1 <= 0x3F)
    {
      sub_23DDED2C4(319, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t type metadata accessor for CategorySampleDecoder(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D07AA0);
}

uint64_t type metadata accessor for QuantitySampleDecoder(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_256D07A08);
}

unint64_t sub_23DE12718()
{
  unint64_t result;

  result = qword_256D07980;
  if (!qword_256D07980)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for SampleDataDecodingError, &type metadata for SampleDataDecodingError);
    atomic_store(result, (unint64_t *)&qword_256D07980);
  }
  return result;
}

uint64_t sub_23DE1275C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DE127B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DE12984();
    v3 = sub_23DE35CF0();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = (uint64_t *)(v6 + 16 * v4);
      v9 = *v7;
      v8 = v7[1];
      sub_23DE35FFC();
      swift_bridgeObjectRetain();
      sub_23DE3584C();
      result = sub_23DE36014();
      v11 = -1 << *(_BYTE *)(v3 + 32);
      v12 = result & ~v11;
      v13 = v12 >> 6;
      v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
      v15 = 1 << v12;
      if (((1 << v12) & v14) != 0)
      {
        v16 = *(_QWORD *)(v3 + 48);
        v17 = (_QWORD *)(v16 + 16 * v12);
        v18 = *v17 == v9 && v17[1] == v8;
        if (v18 || (result = sub_23DE35F54(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v19 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v19;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
            break;
          v20 = (_QWORD *)(v16 + 16 * v12);
          if (*v20 != v9 || v20[1] != v8)
          {
            result = sub_23DE35F54();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      v22 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v12);
      *v22 = v9;
      v22[1] = v8;
      v23 = *(_QWORD *)(v3 + 16);
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (v24)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v25;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23DE12948(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DDED2C4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_23DE12984()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07998)
  {
    v0 = sub_23DE35CFC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07998);
  }
}

void sub_23DE129E0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D079A0)
  {
    sub_23DE35228();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D079A0);
  }
}

void sub_23DE12A44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D079A8)
  {
    sub_23DE35228();
    v0 = sub_23DE35EAC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D079A8);
  }
}

uint64_t sub_23DE12AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE129E0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DE12B04()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE12B14()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_23DE12B28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DE351D4();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DE351A4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = *(int *)(a3 + 24);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = sub_23DE34FE8();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_23DE12C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23DE12D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  v17 = v16(v13, 1, v14);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_23DE12EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23DE12FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;

  v6 = sub_23DE351D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE351A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  v14 = sub_23DE34FE8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  v17 = v16(v13, 1, v14);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_23DE13150()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DE351D4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = sub_23DE351A4();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23DE13208()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_23DE351D4();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_23DE351A4();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_23DDED2C4(0, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DE132C8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DE351D4();
  if (v0 <= 0x3F)
  {
    sub_23DE351A4();
    if (v1 <= 0x3F)
    {
      sub_23DDED2C4(319, (unint64_t *)&qword_256D06FD0, (void (*)(uint64_t))MEMORY[0x24BDCBDE0]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t HKHealthStore.makeSharedSummaryTransactionPublisher()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v10[2];

  sub_23DE043D0();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s38SharedSummaryTransactionQueryPublisherCMa();
  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 80) = v0;
  *(_QWORD *)(v6 + 88) = 0;
  v10[1] = sub_23DDE9EC4(0);
  sub_23DE0447C(0);
  sub_23DE134D8();
  sub_23DDE3384(&qword_254327048, (uint64_t (*)(uint64_t))sub_23DE0447C, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
  v7 = v0;
  sub_23DE35504();
  swift_release();
  sub_23DDE3384(&qword_254327068, (uint64_t (*)(uint64_t))sub_23DE043D0, MEMORY[0x24BDB94C8]);
  v8 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

void sub_23DE134D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543273A0)
  {
    sub_23DE1352C();
    v0 = sub_23DE3599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543273A0);
  }
}

unint64_t sub_23DE1352C()
{
  unint64_t result;

  result = qword_254327B00[0];
  if (!qword_254327B00[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_254327B00);
  }
  return result;
}

uint64_t HKHealthStore.makeSleepDaySummaryPublisher(morningIndexRange:ascending:limit:options:debugIdentifier:cacheSettings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  void *v9;
  id v10;
  id v11;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = v9;
  v10 = a8;
  v11 = v9;
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.SleepDaySummaryPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(void **)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;
  return swift_bridgeObjectRetain();
}

id HKHealthStore.SleepDaySummaryPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

uint64_t sub_23DE135FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_BYTE *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(void **)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_BYTE *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;
  return swift_bridgeObjectRetain();
}

id sub_23DE13644()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

uint64_t sub_23DE13650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE13DA8();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_23DE136A0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DE13E10();
    v5 = sub_23DE35948();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24SleepDaySummaryPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0oI6ResultOySaySo07HKSleepgH0CGGctFZ_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((unsigned __int8 *)a1 + 16);
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[6];
  v18 = a1[5];
  v19 = a1[7];
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v12 = objc_allocWithZone(MEMORY[0x24BDD3F98]);
  aBlock[4] = sub_23DDF3668;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE136A0;
  aBlock[3] = &block_descriptor_12;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = objc_msgSend(v12, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v5, v6, v7, v8, v9, v13);
  _Block_release(v13);
  swift_release();
  v15 = v14;
  if (v10)
    v16 = (void *)sub_23DE357D4();
  else
    v16 = 0;
  objc_msgSend(v14, sel_setDebugIdentifier_, v16, v18);

  objc_msgSend(v14, sel_setCacheSettings_, v19);
  return v14;
}

unint64_t sub_23DE138A0(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE138C4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE138C4()
{
  unint64_t result;

  result = qword_254327430;
  if (!qword_254327430)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SleepDaySummaryPublisher, &type metadata for HKHealthStore.SleepDaySummaryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327430);
  }
  return result;
}

void _s24SleepDaySummaryPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t _s24SleepDaySummaryPublisherVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(void **)(a2 + 56);
  v5 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = v5;
  return a1;
}

uint64_t _s24SleepDaySummaryPublisherVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 56);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;

  v7 = *(void **)(a2 + 64);
  v8 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  v9 = v7;

  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s24SleepDaySummaryPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  return a1;
}

uint64_t _s24SleepDaySummaryPublisherVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24SleepDaySummaryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SleepDaySummaryPublisher()
{
  return &type metadata for HKHealthStore.SleepDaySummaryPublisher;
}

void _s24SleepDaySummaryPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 56);
  v5 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = v5;

  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  return a1;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 48) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SleepDaySummaryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SleepDaySummaryPublisher.Configuration;
}

unint64_t sub_23DE13DA8()
{
  unint64_t result;

  result = qword_254327438[0];
  if (!qword_254327438[0])
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SleepDaySummaryPublisher, &type metadata for HKHealthStore.SleepDaySummaryPublisher);
    atomic_store(result, qword_254327438);
  }
  return result;
}

uint64_t sub_23DE13DEC()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_23DE13E10()
{
  unint64_t result;

  result = qword_254327AE8;
  if (!qword_254327AE8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254327AE8);
  }
  return result;
}

void sub_23DE13E4C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23DE13E98(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DE13F20 + 4 * byte_23DE39F25[a2]))(0x657079746B68);
}

uint64_t sub_23DE13F20(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x657079746B68 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_23DE35F54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23DE13FF0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0xD000000000000017;
  if (v2)
    v4 = 0x800000023DE3ADD0;
  else
    v4 = 0x800000023DE3ADF0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0xD000000000000017;
  if ((a2 & 1) != 0)
    v6 = 0x800000023DE3ADF0;
  else
    v6 = 0x800000023DE3ADD0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23DE35F54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_23DE14098(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000024;
  v3 = 0x800000023DE3AE10;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000031;
    else
      v5 = 0xD000000000000044;
    if (v4 == 1)
      v6 = 0x800000023DE3AE40;
    else
      v6 = 0x800000023DE3AE80;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000024;
  v6 = 0x800000023DE3AE10;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000031;
    else
      v2 = 0xD000000000000044;
    if (v7 == 1)
      v3 = 0x800000023DE3AE40;
    else
      v3 = 0x800000023DE3AE80;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_23DE35F54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

HealthKitAdditions::SampleDataEncodingError __swiftcall SampleDataEncodingError.init(title:description:)(Swift::String title, Swift::String description)
{
  Swift::String *v2;
  HealthKitAdditions::SampleDataEncodingError result;

  *v2 = title;
  v2[1] = description;
  result.description = description;
  result.title = title;
  return result;
}

uint64_t sub_23DE141A4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_23DE350FC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DE35138();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  sub_23DE35120();
  v11 = (void *)sub_23DE3512C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  objc_msgSend(v10, sel_setLocale_, v11);

  v12 = (void *)sub_23DE357D4();
  objc_msgSend(v10, sel_setDateFormat_, v12);

  v13 = objc_msgSend(v1, sel_startDate);
  sub_23DE350F0();

  v14 = (void *)sub_23DE350D8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = objc_msgSend(v10, sel_stringFromDate_, v14);

  v16 = sub_23DE357F8();
  return v16;
}

uint64_t SampleDataEncodingError.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SampleDataEncodingError.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t SampleDataEncodingError.localizedDescription.getter()
{
  swift_bridgeObjectRetain();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  swift_bridgeObjectRetain();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

uint64_t static SampleDataEncodingError.sampleTypeDoesNotSupportEncoding(sampleType:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t result;

  sub_23DE35D14();
  v4 = objc_msgSend(a1, sel_identifier);
  sub_23DE357F8();

  sub_23DE35870();
  swift_bridgeObjectRelease();
  result = sub_23DE35870();
  *a2 = 0xD00000000000002ELL;
  a2[1] = 0x800000023DE3BF50;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  return result;
}

uint64_t static SampleDataEncodingError.invalidCodingFormat(sampleType:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t result;

  sub_23DE35D14();
  v4 = objc_msgSend(a1, sel_identifier);
  sub_23DE357F8();

  sub_23DE35870();
  swift_bridgeObjectRelease();
  result = sub_23DE35870();
  *a2 = 0xD00000000000002BLL;
  a2[1] = 0x800000023DE3BFC0;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  return result;
}

uint64_t static SampleDataEncodingError.nonconformanceToEncodingProtocol(sampleType:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_23DE35D14();
  v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  v5 = sub_23DE357F8();
  v7 = v6;
  swift_bridgeObjectRelease();

  sub_23DE35870();
  sub_23DE35870();
  result = sub_23DE35870();
  *a2 = 0xD000000000000032;
  a2[1] = 0x800000023DE3C050;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataEncodingError.incompatibleRowFormat(rowFormat:sampleType:)@<X0>(void *a1@<X2>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_23DE35D14();
  v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  v5 = sub_23DE357F8();
  v7 = v6;
  swift_bridgeObjectRelease();

  sub_23DE35870();
  result = sub_23DE35870();
  *a2 = 0xD000000000000028;
  a2[1] = 0x800000023DE3C090;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataEncodingError.attemptedToDecodeMultipleSampleTypes(expectedSampleType:otherSampleType:)@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;
  uint64_t result;

  sub_23DE35D14();
  v6 = objc_msgSend(a2, sel_description);
  sub_23DE357F8();

  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  v7 = objc_msgSend(a1, sel_description);
  sub_23DE357F8();

  sub_23DE35870();
  swift_bridgeObjectRelease();
  result = sub_23DE35870();
  *a3 = 0xD00000000000002ALL;
  a3[1] = 0x800000023DE3C0E0;
  a3[2] = 0;
  a3[3] = 0xE000000000000000;
  return result;
}

uint64_t SampleDataEncoder.init(samples:logger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for SampleDataEncoder() + 20);
  v5 = sub_23DE3536C();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

id SampleDataEncoder.encodeSamples()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  __objc2_prot_list **p_base_prots;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  __objc2_prot_list **v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  id v56;
  _QWORD *v57;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  __int128 v67[2];
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;
  id v72;

  v2 = v1;
  v3 = *v0;
  v4 = (unint64_t)*v0 >> 62;
  if (!v4)
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_48:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  if (!sub_23DE35E70())
    goto LABEL_48;
LABEL_3:
  v62 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x242644E08](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    v6 = *(id *)(v3 + 32);
  }
  v7 = v6;
  swift_bridgeObjectRelease();
  p_base_prots = &DarwinNotificationObserverToken.base_prots;
  v9 = objc_msgSend(v7, sel_sampleType);
  v10 = objc_msgSend(v9, sel_identifier);

  v11 = sub_23DE357F8();
  v13 = v12;

  v14 = sub_23DE18EA4(v11, v13);
  if (v14 != 2)
  {
    v17 = v14;
    v59 = v7;
    sub_23DE16498(0, &qword_256D06EB8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_23DE388B0;
    if ((v17 & 1) != 0)
      v19 = 0xD000000000000044;
    else
      v19 = 0xD000000000000031;
    v20 = 0x800000023DE3BE60;
    if ((v17 & 1) == 0)
      v20 = 0x800000023DE3BEB0;
    v63 = v19;
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v20;
    v66 = (_QWORD *)v18;
    v61 = v20;
    if (v4)
    {
      swift_bridgeObjectRetain();
      v21 = sub_23DE35E70();
      if (!v21)
        goto LABEL_40;
    }
    else
    {
      v21 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v21)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        v69[0] = v66;
        if (qword_256D06820 == -1)
        {
LABEL_41:
          sub_23DE16498(0, &qword_256D06FA8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
          sub_23DDF6120();
          v52 = sub_23DE35774();
          v54 = v53;
          swift_bridgeObjectRelease();
          v15 = (id)sub_23DE15168(v52, v54);

          return v15;
        }
LABEL_52:
        swift_once();
        goto LABEL_41;
      }
    }
    v4 = 4;
    v60 = v3;
    while (1)
    {
      if (v62)
        v22 = (id)MEMORY[0x242644E08](v4 - 4, v3);
      else
        v22 = *(id *)(v3 + 8 * v4);
      v23 = v22;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      v64 = v4 - 3;
      v24 = p_base_prots;
      v72 = v22;
      sub_23DDE7B5C(0, &qword_254327B90);
      sub_23DE168FC(0, &qword_256D07B80);
      v25 = v23;
      if (!swift_dynamicCast())
      {
        v68 = 0;
        memset(v67, 0, sizeof(v67));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DE16948((uint64_t)v67, &qword_256D07B88, &qword_256D07B80);
        v15 = objc_msgSend(v25, (SEL)v24 + 200);
        sub_23DDF6248();
        swift_allocError();
        static SampleDataEncodingError.nonconformanceToEncodingProtocol(sampleType:)(v15, v55);

        swift_willThrow();
        return v15;
      }
      v65 = v2;
      sub_23DDF2570(v67, (uint64_t)v69);
      v26 = objc_msgSend(v25, (SEL)v24 + 200);
      v27 = objc_msgSend(v26, sel_identifier);

      v28 = sub_23DE357F8();
      v30 = v29;

      v31 = 0x800000023DE3BEB0;
      v32 = 0xD000000000000031;
      if ((sub_23DE358D0() & 1) != 0 || (sub_23DE358D0() & 1) != 0)
        goto LABEL_28;
      sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
      v33 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
      v34 = objc_msgSend(v33, sel_identifier);

      v35 = sub_23DE357F8();
      v37 = v36;

      if (v35 == v28 && v37 == v30)
        break;
      v51 = sub_23DE35F54();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v65;
      v39 = v61;
      if ((v51 & 1) == 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v15 = objc_msgSend(v59, (SEL)v24 + 200);
        v56 = objc_msgSend(v25, (SEL)v24 + 200);
        sub_23DDF6248();
        swift_allocError();
        static SampleDataEncodingError.attemptedToDecodeMultipleSampleTypes(expectedSampleType:otherSampleType:)(v15, v56, v57);

        swift_willThrow();
        goto LABEL_45;
      }
      v32 = 0xD000000000000044;
      v31 = 0x800000023DE3BE60;
LABEL_29:
      if (v32 == v63 && v31 == v39)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v40 = sub_23DE35F54();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
          goto LABEL_44;
      }
      v41 = v70;
      v42 = v71;
      v15 = __swift_project_boxed_opaque_existential_0(v69, v70);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
      v2 = v38;
      if (v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_45:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        return v15;
      }
      v45 = v43;
      v46 = v44;
      v47 = v66;
      v49 = v66[2];
      v48 = v66[3];
      if (v49 >= v48 >> 1)
        v47 = sub_23DDF2084((_QWORD *)(v48 > 1), v49 + 1, 1, v66);
      v47[2] = v49 + 1;
      v66 = v47;
      v50 = &v47[2 * v49];
      v50[4] = v45;
      v50[5] = v46;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      ++v4;
      v3 = v60;
      p_base_prots = v24;
      if (v64 == v21)
        goto LABEL_40;
    }
    swift_bridgeObjectRelease();
    v32 = 0xD000000000000044;
    v31 = 0x800000023DE3BE60;
LABEL_28:
    swift_bridgeObjectRelease();
    v38 = v65;
    v39 = v61;
    goto LABEL_29;
  }
  v15 = objc_msgSend(v7, sel_sampleType);
  sub_23DDF6248();
  swift_allocError();
  static SampleDataEncodingError.invalidCodingFormat(sampleType:)(v15, v16);

  swift_willThrow();
  return v15;
}

uint64_t sub_23DE15168(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  sub_23DE168FC(0, &qword_256D07C20);
  swift_bridgeObjectRetain();
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_23DE16948((uint64_t)v14, &qword_256D07C28, &qword_256D07C20);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_23DE35D8C();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_23DE16B90(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_23DE3587C();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_23DE16BF4(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_23DE15F60();
    __asm { BR              X12 }
  }
  sub_23DDF2570(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_0(v17, v17[3]);
  sub_23DE35000();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_23DE15690()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id v31;

  v1 = v0;
  v2 = sub_23DE350FC();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v30 - v7;
  sub_23DE16498(0, &qword_256D06EB8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23DE3A050;
  v10 = objc_msgSend(v0, sel_categoryType);
  v11 = objc_msgSend(v10, sel_identifier);

  v12 = sub_23DE357F8();
  v14 = v13;

  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  v31 = objc_msgSend(v1, sel_value);
  *(_QWORD *)(v9 + 48) = sub_23DE35F30();
  *(_QWORD *)(v9 + 56) = v15;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0xE000000000000000;
  *(_QWORD *)(v9 + 80) = sub_23DE141A4();
  *(_QWORD *)(v9 + 88) = v16;
  v17 = objc_msgSend(v1, sel_endDate);
  sub_23DE350F0();

  v18 = objc_msgSend(v1, sel_startDate);
  sub_23DE350F0();

  sub_23DE350CC();
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v19(v8, v2);
  *(_QWORD *)(v9 + 96) = sub_23DE359F0();
  *(_QWORD *)(v9 + 104) = v20;
  v21 = objc_msgSend(v1, sel_metadata);
  if (v21)
  {
    v22 = v21;
    v23 = sub_23DE35708();

  }
  else
  {
    v23 = 0;
  }
  v24 = v30;
  v25 = sub_23DE24D48(v23);
  if (v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 16) = 0;
    swift_release();
  }
  else
  {
    v27 = v25;
    v28 = v26;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v9 + 112) = v27;
    *(_QWORD *)(v9 + 120) = v28;
    v31 = (id)v9;
    if (qword_256D06828 != -1)
      swift_once();
    sub_23DE16498(0, &qword_256D06FA8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    sub_23DDF6120();
    v23 = sub_23DE35774();
    swift_bridgeObjectRelease();
  }
  return v23;
}

uint64_t sub_23DE159C8()
{
  return sub_23DE15690();
}

uint64_t sub_23DE159E8@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  sub_23DE35D14();
  v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  v5 = sub_23DE357F8();
  v7 = v6;
  swift_bridgeObjectRelease();

  result = sub_23DE35870();
  *a2 = 0xD000000000000028;
  a2[1] = 0x800000023DE3C150;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

id sub_23DE15AB8()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v0;
  v3 = sub_23DE350FC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v40 - v8;
  v10 = objc_msgSend(v0, sel_quantityType);
  v11 = objc_msgSend(v10, sel_canonicalUnit);

  if (v11)
  {
    v42 = v1;
    sub_23DE16498(0, &qword_256D06EB8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE3598]);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_23DE3A050;
    v13 = objc_msgSend(v2, sel_quantityType);
    v14 = objc_msgSend(v13, sel_identifier);
    v41 = v4;
    v15 = v14;

    v16 = sub_23DE357F8();
    v18 = v17;

    *(_QWORD *)(v12 + 32) = v16;
    *(_QWORD *)(v12 + 40) = v18;
    v19 = objc_msgSend(v2, sel_quantity);
    objc_msgSend(v19, sel_doubleValueForUnit_, v11);

    *(_QWORD *)(v12 + 48) = sub_23DE359F0();
    *(_QWORD *)(v12 + 56) = v20;
    v21 = objc_msgSend(v11, sel_unitString);
    v22 = sub_23DE357F8();
    v24 = v23;

    *(_QWORD *)(v12 + 64) = v22;
    *(_QWORD *)(v12 + 72) = v24;
    *(_QWORD *)(v12 + 80) = sub_23DE141A4();
    *(_QWORD *)(v12 + 88) = v25;
    v26 = objc_msgSend(v2, sel_endDate);
    sub_23DE350F0();

    v27 = objc_msgSend(v2, sel_startDate);
    sub_23DE350F0();

    sub_23DE350CC();
    v28 = *(void (**)(char *, uint64_t))(v41 + 8);
    v28(v7, v3);
    v28(v9, v3);
    *(_QWORD *)(v12 + 96) = sub_23DE359F0();
    *(_QWORD *)(v12 + 104) = v29;
    v30 = objc_msgSend(v2, sel_metadata);
    if (v30)
    {
      v31 = v30;
      v10 = (id)sub_23DE35708();

    }
    else
    {
      v10 = 0;
    }
    v34 = v42;
    v35 = sub_23DE24D48((uint64_t)v10);
    if (v34)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v12 + 16) = 0;

      swift_release();
    }
    else
    {
      v37 = v35;
      v38 = v36;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v12 + 112) = v37;
      *(_QWORD *)(v12 + 120) = v38;
      v43 = v12;
      if (qword_256D06828 != -1)
        swift_once();
      sub_23DE16498(0, &qword_256D06FA8, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
      sub_23DDF6120();
      v10 = (id)sub_23DE35774();
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    v32 = objc_msgSend(v2, sel_quantityType);
    sub_23DDF6248();
    swift_allocError();
    sub_23DE159E8(v32, v33);

    swift_willThrow();
  }
  return v10;
}

id sub_23DE15EC8()
{
  return sub_23DE15AB8();
}

uint64_t sub_23DE15EE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23DE358C4();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x242644964](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_23DE15F60()
{
  __asm { BR              X11 }
}

_QWORD *sub_23DE15FC0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_23DE16250@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_23DE169D8(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_23DE16A98((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_23DE16B10((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_23DE162C4(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_23DE16328(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_23DE34F7C();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_23DE34FA0();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_23DE34F94();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_23DE163D4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_23DE35D20();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SampleDataEncoder()
{
  uint64_t result;

  result = qword_256D07BE8;
  if (!qword_256D07BE8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DE16498(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for SampleDataEncodingError()
{
  return &type metadata for SampleDataEncodingError;
}

uint64_t *initializeBufferWithCopyOfBuffer for SampleDataEncoder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23DE3536C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for SampleDataEncoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23DE3536C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SampleDataEncoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23DE3536C();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for SampleDataEncoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *initializeWithTake for SampleDataEncoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for SampleDataEncoder(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DE3536C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataEncoder()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE16788(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DE3536C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SampleDataEncoder()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DE16810(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23DE3536C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23DE16884()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE3536C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DE168FC(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23DE16948(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  sub_23DE16984(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_23DE16984(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_23DE168FC(255, a3);
    v4 = sub_23DE35C3C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_23DE169D8(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_23DE16A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23DE34FAC();
  swift_allocObject();
  result = sub_23DE34F70();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23DE35078();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23DE16B10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23DE34FAC();
  swift_allocObject();
  result = sub_23DE34F70();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_23DE16B90(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_23DE169D8(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_23DE16A98((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_23DE16B10((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_23DE16BF4(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_23DE34FAC();
      swift_allocObject();
      sub_23DE34F88();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_23DE35078();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_23DE16C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_23DE162C4((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_23DE16CEC, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_23DE16CEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23DE163D4(a1, a2);
}

uint64_t FeatureStatusProviding<>.publisher.getter()
{
  sub_23DE16D44();
  return sub_23DE354F8();
}

unint64_t sub_23DE16D44()
{
  unint64_t result;

  result = qword_254327228[0];
  if (!qword_254327228[0])
  {
    result = MEMORY[0x242645660](&unk_23DE39A0C, &type metadata for FeatureStatusPublisher);
    atomic_store(result, qword_254327228);
  }
  return result;
}

uint64_t FeatureStatusProviding<>.featureStatus()@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  id v8;
  id v9[2];

  v2 = v1;
  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v9[0] = 0;
  v4 = objc_msgSend(v2, sel_featureStatusWithError_, v9);
  if (v4)
  {
    v5 = v4;
    v6 = v9[0];
    return FeatureStatus.init(_:)(v5, a1);
  }
  else
  {
    v8 = v9[0];
    sub_23DE35060();

    return swift_willThrow();
  }
}

id sub_23DE16E48()
{
  id *v0;

  return objc_msgSend(*v0, sel_featureIdentifier);
}

uint64_t sub_23DE16E6C@<X0>(uint64_t a1@<X8>)
{
  return FeatureStatusProviding<>.featureStatus()(a1);
}

uint64_t sub_23DE16E8C()
{
  return FeatureStatusProviding<>.publisher.getter();
}

id sub_23DE16EAC()
{
  id *v0;

  return objc_msgSend(*v0, sel_featureAvailabilityProviding);
}

uint64_t dispatch thunk of FeatureStatusProviding.featureIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FeatureStatusProviding.featureStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FeatureStatusProviding.publisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FeatureStatusProviding.featureAvailabilityProviding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t static HKCloudSyncObserver.StatusPublisher(healthStore:)()
{
  return HKHealthStore.cloudSyncStatusPublisher()();
}

Swift::Bool __swiftcall HKCloudSyncObserverStatus.isFirstRestoreComplete(orSyncDisabled:orHasErrorRequiringUserAction:)(Swift::Bool orSyncDisabled, Swift::Bool orHasErrorRequiringUserAction)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v19;

  v3 = v2;
  v6 = sub_23DE350FC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDEC46C();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v3, sel_syncEnabled);
  v14 = objc_msgSend(v3, sel_errorRequiringUserAction);
  v15 = v14;
  if (v14)

  v16 = objc_msgSend(v3, sel_restoreCompletionDate);
  if (v16)
  {
    v17 = v16;
    sub_23DE350F0();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
    {
      sub_23DE011DC((uint64_t)v12);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_23DE011DC((uint64_t)v12);
  return orSyncDisabled & (v13 ^ 1) | (v15 != 0 && orHasErrorRequiringUserAction);
}

uint64_t Publisher<>.ignoreFailureResults()()
{
  sub_23DE17150();
  return sub_23DE35504();
}

id *sub_23DE17118@<X0>(id *result@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  if (((_BYTE)result[1] & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v3 = *result;
    result = (id *)*result;
  }
  *a2 = v3;
  return result;
}

unint64_t sub_23DE17150()
{
  unint64_t result;

  result = qword_2543287D0;
  if (!qword_2543287D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2543287D0);
  }
  return result;
}

uint64_t Publisher<>.firstStatusWhereFirstRestoreCompleted(orSyncDisabled:orHasErrorRequiringUserAction:)(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = sub_23DE35390();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 17) = a2;
  sub_23DE3551C();
  swift_release();
  MEMORY[0x242645660](MEMORY[0x24BDB94E0], v4);
  v9 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

BOOL sub_23DE17290(uint64_t a1, char a2, char a3)
{
  id v5;
  id v6;
  Swift::Bool v7;
  _BOOL8 result;

  result = 0;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v5 = *(id *)a1;
    v6 = *(id *)a1;
    v7 = HKCloudSyncObserverStatus.isFirstRestoreComplete(orSyncDisabled:orHasErrorRequiringUserAction:)(a2 & 1, a3 & 1);
    sub_23DDEF85C(v5);
    if (v7)
      return 1;
  }
  return result;
}

uint64_t sub_23DE172FC()
{
  return swift_deallocObject();
}

BOOL sub_23DE1730C(uint64_t a1)
{
  uint64_t v1;

  return sub_23DE17290(a1, *(_BYTE *)(v1 + 16), *(_BYTE *)(v1 + 17));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE17324(v1, a1);
}

uint64_t sub_23DE17324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE17368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_23DE17368()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07C30)
  {
    sub_23DE35114();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07C30);
  }
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DE173C4(a1, v1);
}

uint64_t sub_23DE173C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE17368();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 20);
  return sub_23DE17324(v3, a1);
}

uint64_t type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor()
{
  uint64_t result;

  result = qword_256D07CA0;
  if (!qword_256D07CA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 20);
  return sub_23DE173C4(a1, v3);
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.modify())()
{
  type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 24));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(_QWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.modify())()
{
  type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  return nullsub_1;
}

double HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 28));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(double *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.modify())()
{
  type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 32));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.limit.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(_QWORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.limit.modify())()
{
  type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 36);
  v4 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 36);
  v4 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.modify())()
{
  type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.init(clusterUUID:workoutSelection:timestampAnchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  int *Descriptor;
  uint64_t result;

  v10 = sub_23DE35114();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(a4, 1, 1, v10);
  Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  v12(a4 + Descriptor[5], 1, 1, v10);
  sub_23DE355D0();
  sub_23DE177E8(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a4, a1, v10);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v12)(a4, 0, 1, v10);
  *(_QWORD *)(a4 + Descriptor[6]) = a2;
  *(double *)(a4 + Descriptor[7]) = a5;
  *(_QWORD *)(a4 + Descriptor[8]) = a3;
  return result;
}

uint64_t sub_23DE177E8(uint64_t a1)
{
  uint64_t v2;

  sub_23DE17368();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.init(workoutUUID:timestampAnchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  int *Descriptor;
  uint64_t v12;
  uint64_t result;

  v8 = sub_23DE35114();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v10(a3, 1, 1, v8);
  Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  v12 = a3 + Descriptor[5];
  v10(v12, 1, 1, v8);
  sub_23DE355D0();
  sub_23DE177E8(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, a1, v8);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10)(v12, 0, 1, v8);
  *(_QWORD *)(a3 + Descriptor[6]) = 1;
  *(double *)(a3 + Descriptor[7]) = a4;
  *(_QWORD *)(a3 + Descriptor[8]) = a2;
  return result;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.result(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch();
}

uint64_t sub_23DE17940()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[11];
  v1 = v0[12];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_23DDF3A40;
  v3 = swift_continuation_init();
  sub_23DE179A4(v3, v2, v1);
  return swift_continuation_await();
}

void sub_23DE179A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int *Descriptor;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  id v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  int *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  id v46;
  uint64_t aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, void *, uint64_t, void *);
  void *v50;
  uint64_t (*v51)(uint64_t, uint64_t, void *);
  uint64_t v52;

  sub_23DE17368();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v43 - v10;
  v12 = sub_23DE35114();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v45 = (int *)((char *)&v43 - v17);
  v18 = swift_allocObject();
  v46 = a2;
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a1;
  Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  sub_23DE17324(a3 + Descriptor[5], (uint64_t)v11);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v21 = v12;
  if (v20(v11, 1, v12) == 1)
  {
    v45 = Descriptor;
    v22 = v46;
    sub_23DE177E8((uint64_t)v11);
    sub_23DE17324(a3, (uint64_t)v9);
    if (v20(v9, 1, v12) == 1)
    {
      sub_23DE177E8((uint64_t)v9);
      goto LABEL_8;
    }
    v34 = v16;
    v35 = v16;
    v24 = v12;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v35, v9, v12);
    v36 = v45[7];
    v43 = *(_QWORD *)(a3 + v45[6]);
    v44 = a3;
    v37 = *(double *)(a3 + v36);
    v38 = *(_QWORD *)(a3 + v45[8]);
    v39 = objc_allocWithZone(MEMORY[0x24BDD3EA8]);
    swift_retain();
    v33 = (int *)v34;
    v40 = (void *)sub_23DE35108();
    v51 = sub_23DE18A50;
    v52 = v18;
    aBlock = MEMORY[0x24BDAC760];
    v48 = 1107296256;
    v49 = sub_23DE18A58;
    v50 = &block_descriptor_13;
    v41 = _Block_copy(&aBlock);
    v32 = objc_msgSend(v39, sel_initWithClusterUUID_workoutSelection_timestampAnchor_limit_dataHandler_, v40, v43, v38, v41, v37);
    _Block_release(v41);

    swift_release();
  }
  else
  {
    v23 = v45;
    v24 = v21;
    (*(void (**)(int *, char *, uint64_t))(v13 + 32))(v45, v11, v21);
    v25 = Descriptor[8];
    v26 = *(double *)(a3 + Descriptor[7]);
    v44 = a3;
    v27 = *(_QWORD *)(a3 + v25);
    v28 = objc_allocWithZone(MEMORY[0x24BDD3EA8]);
    v29 = v46;
    swift_retain();
    v30 = (void *)sub_23DE35108();
    v51 = sub_23DE18A50;
    v52 = v18;
    aBlock = MEMORY[0x24BDAC760];
    v48 = 1107296256;
    v49 = sub_23DE18A58;
    v50 = &block_descriptor_5;
    v31 = _Block_copy(&aBlock);
    v32 = objc_msgSend(v28, sel_initWithWorkoutUUID_timestampAnchor_limit_dataHandler_, v30, v27, v31, v26);
    _Block_release(v31);

    v33 = v23;
    swift_release();
  }
  (*(void (**)(int *, uint64_t))(v13 + 8))(v33, v24);
  if (v32)
  {
    v42 = v32;
    sub_23DE35BE8();
    objc_msgSend(v46, sel_executeQuery_, v42);
    swift_release();

    return;
  }
LABEL_8:
  swift_release();
}

uint64_t sub_23DE17D68(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  void *v9;
  _QWORD *v10;
  id v11;
  void *v12;

  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDF4F68();
      sub_23DE35054();
      v9 = v12;
    }
    sub_23DDE2738();
    swift_allocError();
    *v10 = v9;
    v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_23DE17E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

uint64_t sub_23DE17E80()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[12];
  v1 = v0[13];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_23DE17EE4;
  v3 = swift_continuation_init();
  sub_23DE179A4(v3, v2, v1);
  return swift_continuation_await();
}

uint64_t sub_23DE17EE4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*(_QWORD *)(v1 + 48))
  {
    swift_willThrow();
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    *(_QWORD *)(v1 + 112) = *(_QWORD *)(v1 + 80);
    return swift_task_switch();
  }
}

uint64_t sub_23DE17F64()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 88) = *(_QWORD *)(v0 + 112);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DE35114();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_23DE17368();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_23DE17368();
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_23DE355F4();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_23DE35114();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  v8 = a1 + *(int *)(a2 + 36);
  v9 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

char *initializeWithCopy for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = sub_23DE35114();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_23DE17368();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_23DE17368();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_23DE355F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

char *assignWithCopy for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_23DE35114();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_23DE17368();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_23DE17368();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v18 = a3[9];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_23DE355F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

char *initializeWithTake for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = sub_23DE35114();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_23DE17368();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_23DE17368();
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_23DE355F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *assignWithTake for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = sub_23DE35114();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_23DE17368();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_23DE17368();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  v18 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v19 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_23DE355F4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKRaceRouteLocationSeriesQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE18898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23DE17368();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_23DE355F4();
    v10 = a1 + *(int *)(a3 + 36);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for HKRaceRouteLocationSeriesQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE18918(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_23DE17368();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_23DE355F4();
    v12 = a1 + *(int *)(a4 + 36);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DE18994()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DE17368();
  if (v0 <= 0x3F)
  {
    sub_23DE355F4();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DE18A2C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_23DE18A50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_23DE17D68(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_23DE18A58(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DE18AE8();
    v5 = sub_23DE35948();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_23DE18AE8()
{
  unint64_t result;

  result = qword_256D07CE8;
  if (!qword_256D07CE8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256D07CE8);
  }
  return result;
}

uint64_t sub_23DE18B2C(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v7[2];

  sub_23DE351D4();
  sub_23DE18FE0();
  sub_23DE35A74();
  result = sub_23DE35A8C();
  if ((uint64_t)v5 >= *(uint64_t *)&v7[0])
  {
    if (*(uint64_t *)&v7[0] <= a1 && (uint64_t)v5 > a1)
    {
      sub_23DE351E0();
      if (v6)
      {
        sub_23DE0332C(&v5, v7);
        sub_23DDE9010((uint64_t)v7, (uint64_t)&v5);
        v4 = sub_23DE35804();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
        return v4;
      }
      sub_23DDF6180((uint64_t)&v5);
    }
    return 45;
  }
  __break(1u);
  return result;
}

id static NSDateFormatter.sampleDataCodingFormatter.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v8;

  v0 = sub_23DE35138();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  sub_23DE35120();
  v5 = (void *)sub_23DE3512C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setLocale_, v5);

  v6 = (void *)sub_23DE357D4();
  objc_msgSend(v4, sel_setDateFormat_, v6);

  return v4;
}

void sub_23DE18D28()
{
  qword_256D0CC90 = 10;
  *(_QWORD *)algn_256D0CC98 = 0xE100000000000000;
}

void sub_23DE18D40()
{
  qword_256D0CCA0 = 44;
  *(_QWORD *)algn_256D0CCA8 = 0xE100000000000000;
}

void sub_23DE18D58()
{
  qword_256D0CCB0 = 31868;
  *(_QWORD *)algn_256D0CCB8 = 0xE200000000000000;
}

void sub_23DE18D70()
{
  qword_256D0CCC0 = 61;
  *(_QWORD *)algn_256D0CCC8 = 0xE100000000000000;
}

unint64_t static HKSampleDataCodingConstants.quantityTypeIdentifierPrefix.getter()
{
  return 0xD000000000000018;
}

unint64_t static HKSampleDataCodingConstants.categoryTypeIdentifierPrefix.getter()
{
  return 0xD000000000000018;
}

ValueMetadata *type metadata accessor for HKSampleDataCodingConstants()
{
  return &type metadata for HKSampleDataCodingConstants;
}

uint64_t sub_23DE18DD0(uint64_t a1)
{
  double v2;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  sub_23DE19080(a1, (uint64_t)v5);
  if (v6)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_23DDF6180(a1);
      v2 = (double)v4;
      return *(_QWORD *)&v2;
    }
  }
  else
  {
    sub_23DDF6180((uint64_t)v5);
  }
  sub_23DE190C4(a1, (uint64_t)v5);
  if (v6)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = *(double *)&v4;
      return *(_QWORD *)&v2;
    }
  }
  else
  {
    sub_23DDF6180((uint64_t)v5);
  }
  return 0;
}

uint64_t sub_23DE18EA4(uint64_t a1, uint64_t a2)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if ((sub_23DE358D0() & 1) != 0 || (sub_23DE358D0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_23DE05CA8();
    v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
    v6 = objc_msgSend(v5, sel_identifier);

    v7 = sub_23DE357F8();
    v9 = v8;

    if (v7 == a1 && v9 == a2)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {
      v11 = sub_23DE35F54();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        return 1;
      else
        return 2;
    }
  }
}

unint64_t sub_23DE18FE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D078E0;
  if (!qword_256D078E0)
  {
    v1 = sub_23DE351D4();
    result = MEMORY[0x242645660](MEMORY[0x24BDF5CE8], v1);
    atomic_store(result, (unint64_t *)&qword_256D078E0);
  }
  return result;
}

void sub_23DE19028()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327BC0)
  {
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327BC0);
  }
}

uint64_t sub_23DE19080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE19028();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DE190C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE19028();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void HKRegionAvailability.Category.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_23DE36008();
    v2 = v1;
    sub_23DE35C24();
    sub_23DE19180(v1);
  }
  else
  {
    sub_23DE36008();
  }
}

void sub_23DE19180(id a1)
{
  if ((unint64_t)a1 >= 2)

}

uint64_t HKRegionAvailability.Category.hashValue.getter()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_23DE35FFC();
  sub_23DE36008();
  if ((unint64_t)v1 > 1)
  {
    v2 = v1;
    sub_23DE35C24();
    sub_23DE19180(v1);
  }
  return sub_23DE36014();
}

uint64_t sub_23DE19210()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_23DE35FFC();
  sub_23DE36008();
  if ((unint64_t)v1 > 1)
  {
    v2 = v1;
    sub_23DE35C24();
    sub_23DE19180(v1);
  }
  return sub_23DE36014();
}

void sub_23DE1928C()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_23DE36008();
    v2 = v1;
    sub_23DE35C24();
    sub_23DE19180(v1);
  }
  else
  {
    sub_23DE36008();
  }
}

uint64_t sub_23DE19304()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  sub_23DE35FFC();
  sub_23DE36008();
  if ((unint64_t)v1 > 1)
  {
    v2 = v1;
    sub_23DE35C24();
    sub_23DE19180(v1);
  }
  return sub_23DE36014();
}

void HKRegionAvailability.category.getter(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_getObjectType();
  v3 = objc_msgSend(v1, sel_category);
  if (v3 == (id)1)
  {
    v4 = 0;
    goto LABEL_20;
  }
  if (v3 == (id)3)
  {
    v5 = objc_msgSend(v1, sel_allowedCountries);
    if (v5)
    {
      v4 = (uint64_t)v5;
      goto LABEL_20;
    }
    if (qword_2543272D8 != -1)
      swift_once();
    v18 = sub_23DE3536C();
    __swift_project_value_buffer(v18, (uint64_t)qword_25432A700);
    v19 = sub_23DE35354();
    v20 = sub_23DE35B10();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v26 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = sub_23DE36080();
      sub_23DDE8458(v23, v24, &v26);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DDE0000, v19, v20, "[%{public}s] Missing restriction", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242645720](v22, -1, -1);
      MEMORY[0x242645720](v21, -1, -1);
    }

    v16 = objc_msgSend((id)objc_opt_self(), sel_emptyCountrySet);
    v17 = objc_msgSend((id)objc_opt_self(), sel_allowedCountriesInLocalSet_, v16);
LABEL_19:
    v4 = (uint64_t)v17;

    goto LABEL_20;
  }
  if (v3 != (id)2)
  {
    if (qword_2543272D8 != -1)
      swift_once();
    v6 = sub_23DE3536C();
    __swift_project_value_buffer(v6, (uint64_t)qword_25432A700);
    v7 = v1;
    v8 = sub_23DE35354();
    v9 = sub_23DE35B10();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v26 = v11;
      *(_DWORD *)v10 = 136446466;
      v12 = sub_23DE36080();
      v25 = sub_23DDE8458(v12, v13, &v26);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      objc_msgSend(v7, sel_category, v25, v26);
      type metadata accessor for HKRegionAvailabilityCategory(0);
      v14 = sub_23DE35804();
      sub_23DDE8458(v14, v15, &v26);
      sub_23DE35C48();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DDE0000, v8, v9, "[%{public}s] Unrecognized category value: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242645720](v11, -1, -1);
      MEMORY[0x242645720](v10, -1, -1);

    }
    else
    {

    }
    v16 = objc_msgSend((id)objc_opt_self(), sel_emptyCountrySet);
    v17 = objc_msgSend((id)objc_opt_self(), sel_allowedCountriesInLocalSet_, v16);
    goto LABEL_19;
  }
  v4 = 1;
LABEL_20:
  *a1 = v4;
}

uint64_t _sSo20HKRegionAvailabilityC18HealthKitAdditionsE8CategoryO2eeoiySbAE_AEtFZ_0(uint64_t *a1, id *a2)
{
  uint64_t v2;
  id v3;
  char v4;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      v2 = 0;
      v4 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v2 != 1)
  {
    if ((unint64_t)v3 >= 2)
    {
      sub_23DDF9EE4();
      sub_23DE19978(v3);
      sub_23DE19978((id)v2);
      v4 = sub_23DE35C18();
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != (id)1)
  {
LABEL_8:
    sub_23DE19978(*a2);
    sub_23DE19978((id)v2);
    v4 = 0;
    goto LABEL_10;
  }
  v2 = 1;
  v4 = 1;
LABEL_10:
  sub_23DE19180((id)v2);
  sub_23DE19180(v3);
  return v4 & 1;
}

unint64_t sub_23DE19874()
{
  unint64_t result;

  result = qword_256D07CF0;
  if (!qword_256D07CF0)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKRegionAvailability.Category, &type metadata for HKRegionAvailability.Category);
    atomic_store(result, (unint64_t *)&qword_256D07CF0);
  }
  return result;
}

uint64_t _s8CategoryOwet_0(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t _s8CategoryOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKRegionAvailability.Category()
{
  return &type metadata for HKRegionAvailability.Category;
}

id sub_23DE19978(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t HKCloudSyncControl.requestSync(with:reason:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t *v19;

  v19 = a4;
  ObjectType = swift_getObjectType();
  sub_23DE19B08();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = ObjectType;
  sub_23DE19EC8(0, &qword_256D07D00, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_23DE19B84();
  v15 = a1;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  sub_23DDE3384(&qword_256D07D10, (uint64_t (*)(uint64_t))sub_23DE19B08, MEMORY[0x24BDB9E90]);
  v16 = sub_23DE354F8();
  result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *v19 = v16;
  return result;
}

void sub_23DE19B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07CF8)
  {
    sub_23DE19EC8(255, &qword_256D07D00, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_23DE19B84();
    v0 = sub_23DE354EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07CF8);
  }
}

unint64_t sub_23DE19B84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D07D08;
  if (!qword_256D07D08)
  {
    sub_23DE19EC8(255, &qword_256D07D00, MEMORY[0x24BEE4AE0] + 8, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    result = MEMORY[0x242645660](MEMORY[0x24BDB9AF8], v1);
    atomic_store(result, (unint64_t *)&qword_256D07D08);
  }
  return result;
}

uint64_t sub_23DE19BE8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23DE19C0C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v25 = a6;
  sub_23DE19E50();
  v12 = v11;
  v23 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE19F90();
  v16 = v15;
  v24 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a5;
  sub_23DE19EC8(0, &qword_256D07D20, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_retain();
  v20 = a2;
  swift_bridgeObjectRetain();
  v26 = sub_23DE354D4();
  sub_23DE19F30();
  sub_23DE35528();
  swift_release();
  sub_23DDE3384(&qword_256D07D38, (uint64_t (*)(uint64_t))sub_23DE19E50, MEMORY[0x24BDB97F8]);
  sub_23DE35510();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v12);
  sub_23DDE3384(&qword_256D07D40, (uint64_t (*)(uint64_t))sub_23DE19F90, MEMORY[0x24BDB96C0]);
  v21 = sub_23DE354F8();
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v18, v16);
  *v25 = v21;
  return result;
}

uint64_t sub_23DE19E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DE19C0C(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

void sub_23DE19E50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07D18)
  {
    sub_23DE19EC8(255, &qword_256D07D20, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    sub_23DE19F30();
    v0 = sub_23DE353B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07D18);
  }
}

void sub_23DE19EC8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_23DDE2738();
    v9 = a4(a1, a3, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_23DE19F30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D07D28;
  if (!qword_256D07D28)
  {
    sub_23DE19EC8(255, &qword_256D07D20, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    result = MEMORY[0x242645660](MEMORY[0x24BDB9E58], v1);
    atomic_store(result, (unint64_t *)&qword_256D07D28);
  }
  return result;
}

void sub_23DE19F90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07D30)
  {
    sub_23DE19E50();
    sub_23DDE3384(&qword_256D07D38, (uint64_t (*)(uint64_t))sub_23DE19E50, MEMORY[0x24BDB97F8]);
    v0 = sub_23DE353A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07D30);
  }
}

void sub_23DE1A014(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t aBlock;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, void *);
  void *v44;
  void (*v45)(char, void *);
  _QWORD *v46;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  swift_beginAccess();
  v15 = MEMORY[0x2426457A4](a3 + 16);
  if (v15)
  {
    v16 = (void *)v15;
    v17 = qword_2543272D8;
    swift_retain();
    if (v17 != -1)
      swift_once();
    v18 = sub_23DE3536C();
    __swift_project_value_buffer(v18, (uint64_t)qword_25432A700);
    v19 = a4;
    swift_bridgeObjectRetain_n();
    v20 = v19;
    v21 = sub_23DE35354();
    v22 = sub_23DE35B1C();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      aBlock = v38;
      *(_DWORD *)v23 = 136446722;
      v40 = v16;
      v24 = sub_23DE36080();
      v39 = a5;
      sub_23DDE8458(v24, v25, &aBlock);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      v26 = objc_msgSend(v20, sel_description);
      v27 = v20;
      v28 = a7;
      v29 = sub_23DE357F8();
      type = v22;
      v31 = v30;

      v32 = v29;
      a7 = v28;
      v20 = v27;
      sub_23DDE8458(v32, v31, &aBlock);
      v16 = v40;
      sub_23DE35C48();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_23DDE8458(v39, a6, &aBlock);
      sub_23DE35C48();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23DDE0000, v21, type, "%{public}s Requesting cloud sync with request: %{public}s reason: %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x242645720](v38, -1, -1);
      MEMORY[0x242645720](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v34 = (void *)sub_23DE357D4();
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = sub_23DDE39BC;
    v35[3] = v14;
    v35[4] = a7;
    v45 = sub_23DE1A6DC;
    v46 = v35;
    aBlock = MEMORY[0x24BDAC760];
    v42 = 1107296256;
    v43 = sub_23DE0C16C;
    v44 = &block_descriptor_14;
    v36 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v16, sel_syncWithRequest_reason_completion_, v20, v34, v36);
    _Block_release(v36);

  }
  else
  {
    swift_retain();
    swift_release();
    sub_23DE1A674();
    v33 = (void *)swift_allocError();
    aBlock = (uint64_t)v33;
    LOBYTE(v42) = 1;
    a1(&aBlock);

  }
}

uint64_t objectdestroy_2Tm()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DE1A448(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v2;

  sub_23DE1A014(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_23DE1A458(char a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (a2)
  {
    v5 = a2;
    a3(a2, 1);

  }
  else
  {
    if (qword_2543272D8 != -1)
      swift_once();
    v7 = sub_23DE3536C();
    __swift_project_value_buffer(v7, (uint64_t)qword_25432A700);
    v8 = sub_23DE35354();
    v9 = sub_23DE35B1C();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v14 = v11;
      *(_DWORD *)v10 = 136446466;
      v12 = sub_23DE36080();
      sub_23DDE8458(v12, v13, &v14);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 1024;
      sub_23DE35C48();
      _os_log_impl(&dword_23DDE0000, v8, v9, "%{public}s Cloud sync requested successfully: %{BOOL}d", (uint8_t *)v10, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x242645720](v11, -1, -1);
      MEMORY[0x242645720](v10, -1, -1);
    }

    a3((id)(a1 & 1), 0);
  }
}

uint64_t sub_23DE1A650()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_23DE1A674()
{
  unint64_t result;

  result = qword_256D07D48;
  if (!qword_256D07D48)
  {
    result = MEMORY[0x242645660](&unk_23DE3A28C, &_s14PublisherErrorON);
    atomic_store(result, (unint64_t *)&qword_256D07D48);
  }
  return result;
}

uint64_t sub_23DE1A6B8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE1A6DC(char a1, void *a2)
{
  uint64_t v2;

  sub_23DE1A458(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

uint64_t _s14PublisherErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DE1A728 + 4 * byte_23DE3A200[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DE1A748 + 4 * byte_23DE3A205[v4]))();
}

_BYTE *sub_23DE1A728(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DE1A748(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE1A750(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE1A758(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE1A760(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE1A768(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s14PublisherErrorOMa()
{
  return &_s14PublisherErrorON;
}

unint64_t sub_23DE1A788()
{
  unint64_t result;

  result = qword_256D07D50;
  if (!qword_256D07D50)
  {
    result = MEMORY[0x242645660](&unk_23DE3A264, &_s14PublisherErrorON);
    atomic_store(result, (unint64_t *)&qword_256D07D50);
  }
  return result;
}

void HKSharingAuthorizationIdentifier.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v4 = objc_msgSend(a1, sel_authorizationIdentifier);
  v5 = sub_23DE357F8();
  v7 = v6;

  sub_23DE1BD04(v5, v7);
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = (char *)&loc_23DE1A860 + *((int *)qword_23DE1AAC0 + sub_23DE1BEFC());
    __asm { BR              X10 }
  }

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_BYTE *)(a2 + 48) = -1;
}

uint64_t sub_23DE1AAD8()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

uint64_t sub_23DE1AB80()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

void sub_23DE1AC04(char a1)
{
  sub_23DE35FFC();
  __asm { BR              X10 }
}

uint64_t sub_23DE1AC5C()
{
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

void sub_23DE1ACF8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23DE1AD3C()
{
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE1ADBC()
{
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE1AE3C()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

uint64_t sub_23DE1AEE0()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

void sub_23DE1AF60(uint64_t a1, char a2)
{
  sub_23DE35FFC();
  __asm { BR              X10 }
}

uint64_t sub_23DE1AFB4()
{
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

HealthKitAdditions::HKSharingAuthorizationIdentifier::CycleTrackingConcept_optional __swiftcall HKSharingAuthorizationIdentifier.CycleTrackingConcept.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthKitAdditions::HKSharingAuthorizationIdentifier::CycleTrackingConcept_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DE35ED0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

unint64_t HKSharingAuthorizationIdentifier.CycleTrackingConcept.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD000000000000017;
}

uint64_t sub_23DE1B0F0(char *a1, char *a2)
{
  return sub_23DE13FF0(*a1, *a2);
}

uint64_t sub_23DE1B0FC()
{
  return sub_23DE1AB80();
}

uint64_t sub_23DE1B104()
{
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE1B164()
{
  return sub_23DE1AEE0();
}

HealthKitAdditions::HKSharingAuthorizationIdentifier::CycleTrackingConcept_optional sub_23DE1B16C(Swift::String *a1)
{
  return HKSharingAuthorizationIdentifier.CycleTrackingConcept.init(rawValue:)(*a1);
}

void sub_23DE1B178(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000010;
  else
    v2 = 0xD000000000000017;
  v3 = 0x800000023DE3ADD0;
  if (*v1)
    v3 = 0x800000023DE3ADF0;
  *a1 = v2;
  a1[1] = v3;
}

void sub_23DE1B1C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 48);
  sub_23DE35E04();
  if (qword_254326FB0 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_23DE3575C();
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t HKSharingAuthorizationIdentifier.hash(into:)()
{
  sub_23DE1B1C0();
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t HKSharingAuthorizationIdentifier.hashValue.getter()
{
  sub_23DE35FFC();
  sub_23DE1B1C0();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

uint64_t sub_23DE1B488()
{
  sub_23DE35FFC();
  sub_23DE1B1C0();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

uint64_t sub_23DE1B514()
{
  sub_23DE1B1C0();
  sub_23DE3584C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE1B574()
{
  sub_23DE35FFC();
  sub_23DE1B1C0();
  sub_23DE3584C();
  swift_bridgeObjectRelease();
  return sub_23DE36014();
}

void sub_23DE1B5FC()
{
  qword_25432A6F0 = 58;
  *(_QWORD *)algn_25432A6F8 = 0xE100000000000000;
}

uint64_t sub_23DE1B614(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23DE1B64C + 4 * byte_23DE3A2E4[a1]))(0xD000000000000012, 0x800000023DE3AD90);
}

uint64_t sub_23DE1B64C()
{
  return 0x657079746B68;
}

uint64_t sub_23DE1B660()
{
  return 0x7065636E6F636B68;
}

uint64_t sub_23DE1B67C()
{
  return 0x617274656C637963;
}

uint64_t sub_23DE1B6A0(uint64_t a1)
{
  return a1 + 8;
}

void sub_23DE1B6B8(char *a1)
{
  sub_23DE13E4C(*a1);
}

void sub_23DE1B6C4()
{
  char *v0;

  sub_23DE1AC04(*v0);
}

void sub_23DE1B6CC(uint64_t a1)
{
  char *v1;

  sub_23DE1ACF8(a1, *v1);
}

void sub_23DE1B6D4(uint64_t a1)
{
  char *v1;

  sub_23DE1AF60(a1, *v1);
}

uint64_t sub_23DE1B6DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DE1BEFC();
  *a1 = result;
  return result;
}

uint64_t sub_23DE1B708@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23DE1B614(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t HKSharingAuthorizationIdentifier.displayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(unsigned __int8 *)(v0 + 48) | 2) != 3)
    return 0;
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKSharingAuthorizationIdentifier.displaySubtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(unsigned __int8 *)(v0 + 48) | 2) != 3)
    return 0;
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

id HKSharingAuthorizationIdentifier.sharingAuthorization.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(unsigned __int8 *)(v0 + 48);
  sub_23DE1B1C0();
  v7 = v6;
  v9 = v8;
  if ((v5 | 2) == 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v1 = 0;
    v2 = 0;
  }
  v10 = objc_allocWithZone(MEMORY[0x24BDD3F50]);
  return sub_23DE1BC38(v7, v9, v1, v2, v3, v4);
}

unint64_t sub_23DE1B888(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_23DE358DC() != a1 || v9 != a2)
  {
    v10 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_23DE35858();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_23DE1B974(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_23DE358F4();
  __break(1u);
  return result;
}

double HKSharingAuthorizationIdentifier.init(from:)@<D0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  char v5;
  double result;
  __int128 v7;
  __int128 v8;
  _OWORD v9[3];
  char v10;

  v2 = objc_allocWithZone(MEMORY[0x24BDD3F50]);
  v3 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, sel_initWithAuthorizationIdentifier_, v3);

  HKSharingAuthorizationIdentifier.init(_:)(v4, (uint64_t)v9);
  v5 = v10;
  result = *(double *)v9;
  v7 = v9[1];
  v8 = v9[2];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 48) = v5;
  return result;
}

void HKSharingAuthorizationIdentifier.string.getter()
{
  sub_23DE1B1C0();
}

_QWORD *static HKSharingAuthorizationIdentifier.identifiers(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];
  unsigned __int8 v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = swift_bridgeObjectRetain() + 40;
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = objc_allocWithZone(MEMORY[0x24BDD3F50]);
    swift_bridgeObjectRetain();
    v6 = (void *)sub_23DE357D4();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, sel_initWithAuthorizationIdentifier_, v6);

    HKSharingAuthorizationIdentifier.init(_:)(v7, (uint64_t)v15);
    v8 = v16;
    if (v16 != 255)
    {
      v13 = v15[1];
      v14 = v15[0];
      v12 = v15[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_23DDF1BD8(0, v3[2] + 1, 1, v3);
      v10 = v3[2];
      v9 = v3[3];
      if (v10 >= v9 >> 1)
        v3 = sub_23DDF1BD8((_QWORD *)(v9 > 1), v10 + 1, 1, v3);
      v3[2] = v10 + 1;
      v4 = &v3[7 * v10];
      *((_OWORD *)v4 + 2) = v14;
      *((_OWORD *)v4 + 3) = v13;
      *((_OWORD *)v4 + 4) = v12;
      *((_BYTE *)v4 + 80) = v8;
    }
    v2 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

id HKObjectType.sharingAuthorizationIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return v1;
}

id sub_23DE1BC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v9 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    v10 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v11 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
LABEL_6:
  v12 = objc_msgSend(v6, sel_initWithAuthorizationIdentifier_displayName_displaySubtitle_, v9, v10, v11);

  return v12;
}

uint64_t sub_23DE1BD04(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_254326FB0 != -1)
    swift_once();
  v4 = qword_25432A6F0;
  v5 = *(_QWORD *)algn_25432A6F8;
  swift_bridgeObjectRetain();
  sub_23DE1B888(v4, v5, a1, a2);
  LOBYTE(v4) = v6;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0 && sub_23DE358B8() >= 1)
  {
    swift_bridgeObjectRetain();
    v7 = sub_23DE358F4();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v14 = sub_23DE35864();
    swift_bridgeObjectRetain();
    v15 = sub_23DE1B974(v14, a1, a2);
    v17 = v16;
    v19 = v18;
    v21 = v20;
    swift_bridgeObjectRelease();
    if ((v7 ^ v9) >= 0x4000 && (v15 ^ v17) >= 0x4000)
    {
      v22 = MEMORY[0x242644904](v7, v9, v11, v13);
      swift_bridgeObjectRelease();
      MEMORY[0x242644904](v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      return v22;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_23DE1BEFC()
{
  unint64_t v0;

  v0 = sub_23DE35ED0();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_23DE1BF44(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _QWORD v24[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  v6 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v8 = (uint64_t)sub_23DE286A0(v6, a2, 10);
    v10 = v23;
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)sub_23DE35D8C();
    v8 = (uint64_t)sub_23DE2868C(v7, v4, 10);
    v10 = v9 & 1;
LABEL_44:
    if ((v10 & 1) == 0 && _HKValidDataTypeCode())
      return (uint64_t)objc_msgSend((id)objc_opt_self(), sel_dataTypeWithCode_, v8);
    return 0;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3)
      goto LABEL_57;
    if (v3 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_31;
    v8 = (BYTE1(result) - 48);
    if (v3 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_31;
      v8 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v11 = v3 - 3;
      if (v11)
      {
        v12 = (unsigned __int8 *)v24 + 3;
        while (1)
        {
          v13 = *v12 - 48;
          if (v13 > 9)
            goto LABEL_31;
          v14 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
            goto LABEL_31;
          v8 = v14 + v13;
          if (__OFADD__(v14, v13))
            goto LABEL_31;
          v10 = 0;
          ++v12;
          if (!--v11)
            goto LABEL_44;
        }
      }
    }
LABEL_43:
    v10 = 0;
    goto LABEL_44;
  }
  if (result != 45)
  {
    if (!v3 || (result - 48) > 9u)
      goto LABEL_31;
    v8 = (result - 48);
    if (v3 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v8 = 10 * (result - 48) + (BYTE1(result) - 48);
      v15 = v3 - 2;
      if (v15)
      {
        v16 = (unsigned __int8 *)v24 + 2;
        while (1)
        {
          v17 = *v16 - 48;
          if (v17 > 9)
            goto LABEL_31;
          v18 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
            goto LABEL_31;
          v8 = v18 + v17;
          if (__OFADD__(v18, v17))
            goto LABEL_31;
          v10 = 0;
          ++v16;
          if (!--v15)
            goto LABEL_44;
        }
      }
    }
    goto LABEL_43;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v3 == 2)
      {
        v10 = 0;
        v8 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v8 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v19 = v3 - 3;
        if (!v19)
          goto LABEL_43;
        v20 = (unsigned __int8 *)v24 + 3;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            break;
          v22 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63)
            break;
          v8 = v22 - v21;
          if (__OFSUB__(v22, v21))
            break;
          v10 = 0;
          ++v20;
          if (!--v19)
            goto LABEL_44;
        }
      }
    }
LABEL_31:
    v8 = 0;
    v10 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t _s18HealthKitAdditions32HKSharingAuthorizationIdentifierO2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_23DE1B1C0();
  v1 = v0;
  v3 = v2;
  sub_23DE1B1C0();
  if (v1 == v5 && v3 == v4)
    v6 = 1;
  else
    v6 = sub_23DE35F54();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

unint64_t sub_23DE1C31C()
{
  unint64_t result;

  result = qword_256D07D58;
  if (!qword_256D07D58)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKSharingAuthorizationIdentifier.CycleTrackingConcept, &type metadata for HKSharingAuthorizationIdentifier.CycleTrackingConcept);
    atomic_store(result, (unint64_t *)&qword_256D07D58);
  }
  return result;
}

unint64_t sub_23DE1C364()
{
  unint64_t result;

  result = qword_254328830;
  if (!qword_254328830)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKSharingAuthorizationIdentifier, &type metadata for HKSharingAuthorizationIdentifier);
    atomic_store(result, (unint64_t *)&qword_254328830);
  }
  return result;
}

id sub_23DE1C3A8(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 3 || a7 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  else if (!a7)
  {
    return result;
  }
  return result;
}

void destroy for HKSharingAuthorizationIdentifier(uint64_t a1)
{
  sub_23DE1C424(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

void sub_23DE1C424(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 3 || a7 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (!a7)
  {

  }
}

uint64_t initializeWithCopy for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23DE1C3A8(*(id *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23DE1C3A8(*(id *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(void **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_23DE1C424(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_23DE1C424(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKSharingAuthorizationIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_23DE1C67C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_23DE1C694(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier()
{
  return &type metadata for HKSharingAuthorizationIdentifier;
}

uint64_t storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier.CycleTrackingConcept(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DE1C718 + 4 * byte_23DE3A2EE[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DE1C74C + 4 * byte_23DE3A2E9[v4]))();
}

uint64_t sub_23DE1C74C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE1C754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE1C75CLL);
  return result;
}

uint64_t sub_23DE1C768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE1C770);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DE1C774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE1C77C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier.CycleTrackingConcept()
{
  return &type metadata for HKSharingAuthorizationIdentifier.CycleTrackingConcept;
}

uint64_t sub_23DE1C798()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  return sub_23DE36014();
}

uint64_t sub_23DE1C7E8()
{
  return sub_23DE3584C();
}

uint64_t sub_23DE1C800()
{
  sub_23DE35FFC();
  sub_23DE3584C();
  return sub_23DE36014();
}

uint64_t getEnumTagSinglePayload for HKSharingAuthorizationIdentifier.Schema(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier.Schema(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DE1C928 + 4 * byte_23DE3A2F8[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DE1C95C + 4 * byte_23DE3A2F3[v4]))();
}

uint64_t sub_23DE1C95C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE1C964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DE1C96CLL);
  return result;
}

uint64_t sub_23DE1C978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DE1C980);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DE1C984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DE1C98C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier.Schema()
{
  return &type metadata for HKSharingAuthorizationIdentifier.Schema;
}

unint64_t sub_23DE1C9AC()
{
  unint64_t result;

  result = qword_256D07D60;
  if (!qword_256D07D60)
  {
    result = MEMORY[0x242645660](&unk_23DE3A4F4, &type metadata for HKSharingAuthorizationIdentifier.Schema);
    atomic_store(result, (unint64_t *)&qword_256D07D60);
  }
  return result;
}

uint64_t sub_23DE1C9F0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_23DE35A80();
  if (!v18)
    return sub_23DE35978();
  v19 = v18;
  v25 = v15;
  v39 = sub_23DE356F0();
  v32 = sub_23DE35DF8();
  sub_23DE35DB0();
  v36 = v17;
  result = sub_23DE35A74();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_23DE35ABC();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_23DE35DE0();
      sub_23DE35A98();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

id HKUserDomainConceptQueryDescriptor.predicate.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

void HKUserDomainConceptQueryDescriptor.predicate.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.sortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKUserDomainConceptQueryDescriptor.sortDescriptors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.sortDescriptors.modify())()
{
  return nullsub_1;
}

void *HKUserDomainConceptQueryDescriptor.anchor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void HKUserDomainConceptQueryDescriptor.anchor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t HKUserDomainConceptQueryDescriptor.limit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.limit.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t HKUserDomainConceptQueryDescriptor.queryAttributes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*HKUserDomainConceptQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.init(predicate:sortDescriptors:anchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  type metadata accessor for HKUserDomainConceptQueryDescriptor(0, a6, a3, a4);
  result = sub_23DE355D0();
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_BYTE *)(a7 + 32) = a5 & 1;
  return result;
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKUserDomainConceptQueryDescriptor);
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3 + 28));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = v1;
  return swift_task_switch();
}

void (*sub_23DE1CF98())(uint64_t, _QWORD)
{
  uint64_t v0;
  void (*result)(uint64_t, _QWORD);
  unint64_t *v2;
  void (*v3)(uint64_t, _QWORD);
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  id v10;

  result = (void (*)(uint64_t, _QWORD))HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify();
  v3 = result;
  v4 = *v2;
  if (!*v2)
    goto LABEL_4;
  v5 = v2;
  v6 = v2[1];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_23DE35E70();
    result = (void (*)(uint64_t, _QWORD))swift_bridgeObjectRelease();
    if (v6 == v8)
      goto LABEL_4;
  }
  else if (v6 == *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v3(v0 + 16, 0);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v7;
    *v7 = v0;
    v7[1] = sub_23DE1D0EC;
    return (void (*)(uint64_t, _QWORD))HKUserDomainConceptQueryDescriptor.Results.Iterator.nextResultIterator()();
  }
  v9 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    result = (void (*)(uint64_t, _QWORD))sub_23DE1DFA0(v6, v9);
LABEL_10:
    v10 = result;
    if (!__OFADD__(v6, 1))
    {
      v5[1] = v6 + 1;
      v3(v0 + 16, 0);
      return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(id))(v0 + 8))(v10);
    }
    goto LABEL_14;
  }
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v6 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    result = (void (*)(uint64_t, _QWORD))*(id *)(v9 + 8 * v6 + 32);
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_23DE1D0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v3;
  v7 = *v3;
  swift_task_dealloc();
  if (v2)
    return (*(uint64_t (**)(void))(v7 + 8))();
  *(_QWORD *)(v6 + 104) = a2;
  *(_QWORD *)(v6 + 112) = a1;
  return swift_task_switch();
}

void (*sub_23DE1D16C())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*result)(uint64_t, _QWORD);
  unint64_t *v5;
  void (*v6)(uint64_t, _QWORD);
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = (_QWORD *)(*(_QWORD *)(v0 + 88) + *(int *)(*(_QWORD *)(v0 + 80) + 28));
  swift_bridgeObjectRelease();
  *v3 = v1;
  v3[1] = v2;
  result = (void (*)(uint64_t, _QWORD))HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify();
  v6 = result;
  v7 = *v5;
  if (!*v5)
    goto LABEL_12;
  v8 = v5;
  v9 = v5[1];
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_23DE35E70();
    result = (void (*)(uint64_t, _QWORD))swift_bridgeObjectRelease();
    if (v9 == v10)
      goto LABEL_4;
  }
  else if (v9 == *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_4:
    v7 = 0;
LABEL_12:
    v6(v0 + 48, 0);
    return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
  }
  v11 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    result = (void (*)(uint64_t, _QWORD))sub_23DE1DFA0(v9, v11);
LABEL_10:
    v7 = (unint64_t)result;
    if (!__OFADD__(v9, 1))
    {
      v8[1] = v9 + 1;
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v9 < *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    result = (void (*)(uint64_t, _QWORD))*(id *)(v11 + 8 * v9 + 32);
    goto LABEL_10;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.nextResultIterator()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  *v1 = v0;
  v1[1] = sub_23DE1D314;
  return sub_23DE359E4();
}

uint64_t sub_23DE1D314()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23DE1D378()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), 0);
}

uint64_t sub_23DE1D388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  *(_QWORD *)(v3 + 16) = a1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v5;
  *v5 = v3;
  v5[1] = sub_23DDF4504;
  v5[10] = a2;
  v5[11] = v2;
  return swift_task_switch();
}

uint64_t sub_23DE1D3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_23DE1D484;
  return sub_23DE359C0();
}

uint64_t sub_23DE1D484()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  sub_23DE1E1EC();
  sub_23DE35624();
  v9 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  result = type metadata accessor for HKUserDomainConceptQueryDescriptor.Results.Iterator(0, v9, v10, v11);
  v13 = (_QWORD *)(a2 + *(int *)(result + 28));
  *v13 = 0;
  v13[1] = 0;
  return result;
}

uint64_t sub_23DE1D598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  HKUserDomainConceptQueryDescriptor.Results.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t HKUserDomainConceptQueryDescriptor.results(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  uint64_t v19;

  v4 = v3;
  v19 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](a1);
  sub_23DE1E1EC();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(a2 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  *(_QWORD *)(v15 + ((v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  sub_23DE1E188();
  v16 = a1;
  sub_23DE35630();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19, v13, v10);
}

id sub_23DE1D720(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  _QWORD aBlock[7];

  v33 = a3;
  sub_23DE1EFA8(0, &qword_254328060, MEMORY[0x24BEE6CD0]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v32 - v11;
  sub_23DDE7B5C(0, &qword_254328858);
  v34 = sub_23DE35BF4();
  v35 = a4;
  v13 = *(_QWORD *)(a2 + 8);
  v37 = a4;
  aBlock[0] = v13;
  sub_23DE34FF4();
  v14 = sub_23DE3599C();
  v15 = (char *)sub_23DDE7B5C(0, &qword_254328848);
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x242645660](MEMORY[0x24BEE12E0], v14);
  sub_23DE1C9F0((void (*)(char *, char *))sub_23DE1F018, (uint64_t)v36, v14, v15, MEMORY[0x24BEE4078], v16, MEMORY[0x24BEE40A8], v17);
  swift_bridgeObjectRelease();
  v32 = *(id *)a2;
  v18 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, v12, v8);
  v21 = v33;
  *(_QWORD *)(v20 + ((v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)) = v33;
  v22 = objc_allocWithZone(MEMORY[0x24BDD4078]);
  v23 = v18;
  v24 = v21;
  v25 = v32;
  v26 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_23DE1F0B8;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE1DC24;
  aBlock[3] = &block_descriptor_15;
  v27 = _Block_copy(aBlock);
  v28 = objc_msgSend(v22, sel_initWithPredicate_anchor_limit_sortDescriptors_batchHandler_, v25, v23, v34, v26, v27);

  _Block_release(v27);
  swift_release();
  type metadata accessor for HKUserDomainConceptQueryDescriptor(0, v35, v29, v30);
  sub_23DE35BE8();
  return v28;
}

uint64_t sub_23DE1D9D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;

  v4 = sub_23DE34FF4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - v6;
  sub_23DDE7B5C(0, &qword_254328848);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  result = sub_23DE35BB8();
  *a2 = result;
  return result;
}

uint64_t sub_23DE1DA90(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;

  sub_23DE1EFA8(0, &qword_254328058, MEMORY[0x24BEE6C80]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  if (a2)
  {
    v20 = a2;
    sub_23DE1EFA8(0, &qword_254328060, MEMORY[0x24BEE6CD0]);
    swift_bridgeObjectRetain();
    sub_23DE359CC();
    result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((a3 & 1) == 0)
      return result;
    objc_msgSend(a6, sel_stopQuery_, a1);
    v20 = 0;
  }
  else
  {
    v17 = a4;
    if (!a4)
    {
      type metadata accessor for HKError(0);
      v19 = 0;
      sub_23DE1DCD4(MEMORY[0x24BEE4AF8]);
      sub_23DDF4F68();
      sub_23DE35054();
      v17 = v20;
    }
    v20 = v17;
    v18 = a4;
    sub_23DE1EFA8(0, &qword_254328060, MEMORY[0x24BEE6CD0]);
  }
  return sub_23DE359D8();
}

uint64_t sub_23DE1DC24(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  void (*v9)(id, uint64_t, uint64_t, void *);
  id v10;
  id v11;

  v7 = a3;
  v9 = *(void (**)(id, uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, &qword_254328070);
    v7 = sub_23DE35948();
  }
  swift_retain();
  v10 = a2;
  v11 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_23DE1DCD4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DE0325C();
  v2 = sub_23DE35EA0();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DE1F140(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_23DE1DDF8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23DE0332C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DE1DDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE35FFC();
  sub_23DE3584C();
  v4 = sub_23DE36014();
  return sub_23DE1DE5C(a1, a2, v4);
}

unint64_t sub_23DE1DE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_23DE35F54() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_23DE35F54() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_23DE35F54() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_23DE1DFA0(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  sub_23DDE7B5C(0, &qword_254328070);
  if (a2 >> 62)
  {
    v4 = sub_23DE35E7C();
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
      return v4;
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
      swift_unknownObjectRetain();
      objc_opt_self();
      if (!swift_dynamicCastObjCClass())
        goto LABEL_10;
      return v4;
    }
    __break(1u);
  }
LABEL_10:
  sub_23DE35D14();
  sub_23DE35870();
  sub_23DE36080();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  swift_getObjectType();
  swift_unknownObjectRelease();
  sub_23DE36080();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  result = sub_23DE35E58();
  __break(1u);
  return result;
}

void sub_23DE1E188()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328050)
  {
    sub_23DDE7B5C(255, &qword_254328070);
    v0 = sub_23DE3599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328050);
  }
}

void sub_23DE1E1EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328048)
  {
    sub_23DE1E188();
    v0 = sub_23DE3563C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328048);
  }
}

uint64_t sub_23DE1E240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Descriptor;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Descriptor = type metadata accessor for HKUserDomainConceptQueryDescriptor(0, *(_QWORD *)(v4 + 16), a3, a4);
  v6 = *(_QWORD *)(Descriptor - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = v4 + v7;

  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(Descriptor + 40);
  v11 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);

  return swift_deallocObject();
}

id sub_23DE1E2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(type metadata accessor for HKUserDomainConceptQueryDescriptor(0, v6, a3, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_23DE1D720(a1, v4 + v8, *(void **)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)), v6);
}

void sub_23DE1E358()
{
  JUMPOUT(0x242645660);
}

void sub_23DE1E368()
{
  JUMPOUT(0x242645660);
}

uint64_t sub_23DE1E378()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DE355F4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_23DE1E404(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  char *v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *((_QWORD *)a1 + 1) = a2[1];
    *((_QWORD *)a1 + 2) = v6;
    *((_QWORD *)a1 + 3) = a2[3];
    a1[32] = *((_BYTE *)a2 + 32);
    v7 = *(int *)(a3 + 40);
    v8 = &a1[v7];
    v9 = (uint64_t)a2 + v7;
    v10 = sub_23DE355F4();
    v11 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v12 = v4;
    swift_bridgeObjectRetain();
    v13 = v6;
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_23DE1E4C4(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = (char *)a1 + *(int *)(a2 + 40);
  v5 = sub_23DE355F4();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23DE1E51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  id v13;
  id v14;

  v5 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v7 = *(void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DE355F4();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v5;
  swift_bridgeObjectRetain();
  v14 = v7;
  v12(v9, v10, v11);
  return a1;
}

uint64_t sub_23DE1E5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 16);
  v10 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v11 = v10;

  v12 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(int *)(a3 + 40);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t sub_23DE1E658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23DE1E6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DE355F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_23DE1E768()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE1E774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DE355F4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_23DE1E7F0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE1E7FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23DE355F4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_23DE1E870()
{
  unint64_t v0;

  sub_23DE1E1EC();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DE1E8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_23DE1E914(uint64_t a1)
{
  uint64_t v2;

  sub_23DE1E1EC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23DE1E948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DE1E98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DE1E9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DE1EA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23DE1EA58()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE1EA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23DE1EAA0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE1EAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE1E1EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKUserDomainConceptQueryDescriptor.Results);
}

void sub_23DE1EAF8()
{
  unint64_t v0;

  sub_23DE1EFA8(319, &qword_254328068, MEMORY[0x24BEE6D08]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_23DE1EB78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 28);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    *v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23DE1EC1C(uint64_t a1)
{
  uint64_t v2;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE1EC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  *v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23DE1ECE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t sub_23DE1ED74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_23DE1EDE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t sub_23DE1EE64()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE1EE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_23DE1EF08()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DE1EF14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DE1EFA8(0, &qword_254328068, MEMORY[0x24BEE6D08]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKUserDomainConceptQueryDescriptor.Results.Iterator);
}

void sub_23DE1EFA8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_23DE1E188();
    v7 = v6;
    v8 = sub_23DDE2738();
    v9 = a3(a1, v7, v8, MEMORY[0x24BEE3F20]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_23DE1F018@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_23DE1D9D0(a1, a2);
}

uint64_t sub_23DE1F034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_23DE1EFA8(0, &qword_254328060, MEMORY[0x24BEE6CD0]);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_23DE1F0B8(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  sub_23DE1EFA8(0, &qword_254328060, MEMORY[0x24BEE6CD0]);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  return sub_23DE1DA90(a1, a2, a3, a4, v4 + v11, *(void **)(v4 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23DE1F140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DE032C4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id HKHealthStore.makeDatabaseChangesPublisher(types:anchor:includeChangeDetails:debugIdentifier:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v6;
  id v7;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  *(_QWORD *)(a6 + 40) = v6;
  swift_bridgeObjectRetain();
  v7 = v6;
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.init(types:anchor:includeChangeDetails:debugIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_QWORD *)(a6 + 32) = a5;
  return result;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.modify())()
{
  return nullsub_1;
}

void *HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.init(changes:anchor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.types.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.types.modify())()
{
  return nullsub_1;
}

void *HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t (*static HKHealthStore.DatabaseChangesPublisher.defaultFactoryBlock.getter())(uint64_t a1, void *a2)
{
  return sub_23DE1F3C4;
}

uint64_t sub_23DE1F3C4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  uint64_t v6;

  v3 = *(void **)(a1 + 8);
  sub_23DE1F8E4();
  swift_bridgeObjectRetain();
  v4 = v3;
  swift_bridgeObjectRetain();
  v5 = a2;
  v6 = sub_23DE354F8();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id HKHealthStore.DatabaseChangesPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v6 = *(id *)(v1 + 8);
  v2 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

id HKHealthStore.DatabaseChangesPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

void sub_23DE1F4C8(int a1, void *a2, unint64_t a3, id a4, void (*a5)(unint64_t *))
{
  id v7;
  unint64_t v9;
  id v10;
  id v11;
  unint64_t v12;
  void *v13;
  __int16 v14;

  if (a4)
  {
    v12 = (unint64_t)a4;
    v13 = 0;
    v14 = 1;
    v7 = a4;
    a5(&v12);

  }
  else
  {
    if (a3)
      v9 = a3;
    else
      v9 = sub_23DDFA16C(MEMORY[0x24BEE4AF8]);
    v12 = v9;
    v13 = a2;
    v14 = 0;
    v10 = a2;
    swift_bridgeObjectRetain();
    v11 = v10;
    swift_bridgeObjectRetain();
    a5(&v12);

    swift_bridgeObjectRelease_n();
  }
}

id sub_23DE1F598@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v6 = *(id *)(v1 + 8);
  v2 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_23DE1F5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE1FDA8();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_23DE1F638(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v6;
  void (*v9)(id, void *, uint64_t, void *);
  id v10;
  id v11;
  id v12;

  v6 = a4;
  v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  if (a4)
  {
    sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
    sub_23DDE7B5C(0, &qword_254327AF0);
    sub_23DE03B9C();
    v6 = sub_23DE35708();
  }
  swift_retain();
  v10 = a2;
  v11 = a3;
  v12 = a5;
  v9(v10, a3, v6, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24DatabaseChangesPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOys0P0OyAE0J6OutputVs5Error_pGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  _QWORD v17[6];

  v5 = *(void **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = objc_allocWithZone(MEMORY[0x24BDD41B8]);
  sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
  swift_bridgeObjectRetain();
  swift_retain();
  v10 = v5;
  v11 = (void *)sub_23DE3593C();
  swift_bridgeObjectRelease();
  v17[4] = sub_23DE1FE10;
  v17[5] = v8;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = sub_23DE1F638;
  v17[3] = &block_descriptor_16;
  v12 = _Block_copy(v17);
  v13 = objc_msgSend(v9, sel_initWithTypes_anchor_resultsHandler_, v11, v10, v12);

  _Block_release(v12);
  swift_release();
  objc_msgSend(v13, sel_setIncludeChangeDetails_, v6);
  v14 = v13;
  if (v7)
    v15 = (void *)sub_23DE357D4();
  else
    v15 = 0;
  objc_msgSend(v13, sel_setDebugIdentifier_, v15);

  return v13;
}

unint64_t sub_23DE1F8C0(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE1F8E4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE1F8E4()
{
  unint64_t result;

  result = qword_254327420;
  if (!qword_254327420)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.DatabaseChangesPublisher, &type metadata for HKHealthStore.DatabaseChangesPublisher);
    atomic_store(result, (unint64_t *)&qword_254327420);
  }
  return result;
}

void _s24DatabaseChangesPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t _s24DatabaseChangesPublisherVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = v5;
  return a1;
}

uint64_t _s24DatabaseChangesPublisherVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v9 = v7;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher;
}

_QWORD *_s24DatabaseChangesPublisherV11QueryOutputVwCP(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  v4 = v3;
  return a1;
}

void _s24DatabaseChangesPublisherV11QueryOutputVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *_s24DatabaseChangesPublisherV11QueryOutputVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher.QueryOutput()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher.QueryOutput;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher.Configuration()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher.Configuration;
}

unint64_t sub_23DE1FDA8()
{
  unint64_t result;

  result = qword_254327428;
  if (!qword_254327428)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.DatabaseChangesPublisher, &type metadata for HKHealthStore.DatabaseChangesPublisher);
    atomic_store(result, (unint64_t *)&qword_254327428);
  }
  return result;
}

uint64_t sub_23DE1FDEC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE1FE10(int a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v4;

  sub_23DE1F4C8(a1, a2, a3, a4, *(void (**)(unint64_t *))(v4 + 16));
}

id HKHealthStore.makeActivitySummaryPublisher(predicate:receivesUpdates:orderByDateAscending:limit:debugIdentifier:)@<X0>(void *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void *v7;
  id v8;

  *(_QWORD *)a7 = a1;
  *(_BYTE *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 9) = a3;
  *(_QWORD *)(a7 + 16) = a4;
  *(_QWORD *)(a7 + 24) = a5;
  *(_QWORD *)(a7 + 32) = a6;
  *(_QWORD *)(a7 + 40) = v7;
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

id HKHealthStore.ActivitySummaryPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  id v6;

  v6 = *(id *)v1;
  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return v6;
}

id HKHealthStore.ActivitySummaryPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

void sub_23DE1FEB4(int a1, void *a2, id a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  BOOL v7;
  id v9;
  id v10;
  char v11;

  if (a2)
  {
    v7 = (*(_BYTE *)(a6 + 8) & 1) == 0;
    v10 = a2;
    v11 = v7;
    swift_bridgeObjectRetain();
    a4(&v10);
    swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    v10 = a3;
    v11 = 2;
    v9 = a3;
    a4(&v10);

  }
}

uint64_t sub_23DE1FF48(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DE20814();
    v5 = sub_23DE35948();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_23DE1FFD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  id v6;

  v6 = *(id *)v1;
  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_23DE20028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE20748();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24ActivitySummaryPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOySaySo010HKActivityG0CGGctFZ_0(__int128 *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, void *, uint64_t, void *);
  void *v24;
  void (*v25)(int, void *, void *);
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[16];

  v6 = a1[1];
  v27 = *a1;
  v28 = v6;
  v29 = *((_QWORD *)a1 + 4);
  v7 = v27;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = a1[1];
  *(_OWORD *)(v8 + 32) = *a1;
  *(_OWORD *)(v8 + 48) = v9;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a1 + 4);
  v10 = objc_allocWithZone(MEMORY[0x24BDD38F0]);
  v25 = sub_23DE20790;
  v26 = v8;
  v11 = MEMORY[0x24BDAC760];
  v21 = MEMORY[0x24BDAC760];
  v22 = 1107296256;
  v23 = sub_23DE1FF48;
  v24 = &block_descriptor_17;
  v12 = _Block_copy(&v21);
  swift_retain();
  sub_23DE2079C((void **)&v27);
  v13 = objc_msgSend(v10, sel_initWithPredicate_resultsHandler_, v7, v12);
  _Block_release(v12);
  swift_release();
  objc_msgSend(v13, sel_setOrderByDateAscending_, BYTE9(v27));
  objc_msgSend(v13, sel_setLimit_, (_QWORD)v28);
  if ((BYTE8(v27) & 1) != 0)
  {
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a2;
    *(_QWORD *)(v14 + 24) = a3;
    v15 = v28;
    *(_OWORD *)(v14 + 32) = v27;
    *(_OWORD *)(v14 + 48) = v15;
    *(_QWORD *)(v14 + 64) = v29;
    v25 = sub_23DE20858;
    v26 = v14;
    v21 = v11;
    v22 = 1107296256;
    v23 = sub_23DE1FF48;
    v24 = &block_descriptor_7_0;
    v16 = _Block_copy(&v21);
    swift_retain();
    sub_23DE2079C((void **)&v27);
    swift_release();
    objc_msgSend(v13, sel_setUpdateHandler_, v16);
    _Block_release(v16);
  }
  sub_23DE207CC((uint64_t)&v28 + 8, (uint64_t)v30);
  sub_23DE207CC((uint64_t)v30, (uint64_t)&v21);
  v17 = (void *)v22;
  if (v22)
  {
    v18 = v13;
    v17 = (void *)sub_23DE357D4();
  }
  else
  {
    v19 = v13;
  }
  objc_msgSend(v13, sel_setDebugIdentifier_, v17);

  return v13;
}

unint64_t sub_23DE202B4(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE202D8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE202D8()
{
  unint64_t result;

  result = qword_254327410;
  if (!qword_254327410)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.ActivitySummaryPublisher, &type metadata for HKHealthStore.ActivitySummaryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327410);
  }
  return result;
}

void _s24ActivitySummaryPublisherVwxx(id *a1)
{

  swift_bridgeObjectRelease();
}

uint64_t _s24ActivitySummaryPublisherVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = v3;
  swift_bridgeObjectRetain();
  v6 = v4;
  return a1;
}

uint64_t _s24ActivitySummaryPublisherVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v9 = v7;

  return a1;
}

uint64_t _s24ActivitySummaryPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t _s24ActivitySummaryPublisherVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s24ActivitySummaryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.ActivitySummaryPublisher()
{
  return &type metadata for HKHealthStore.ActivitySummaryPublisher;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwxx(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.ActivitySummaryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.ActivitySummaryPublisher.Configuration;
}

unint64_t sub_23DE20748()
{
  unint64_t result;

  result = qword_254327418;
  if (!qword_254327418)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.ActivitySummaryPublisher, &type metadata for HKHealthStore.ActivitySummaryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327418);
  }
  return result;
}

void sub_23DE20790(int a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_23DE1FEB4(a1, a2, a3, *(void (**)(id *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + 32);
}

void **sub_23DE2079C(void **a1)
{
  void *v2;
  id v3;

  v2 = *a1;
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t sub_23DE207CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDF8A60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DE20814()
{
  unint64_t result;

  result = qword_254327A58[0];
  if (!qword_254327A58[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_254327A58);
  }
  return result;
}

id HKHealthStore.makeDateRangePublisher(debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v5;

  *a3 = a1;
  a3[1] = a2;
  a3[2] = v3;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_23DE2088C(void *a1)
{
  id v2;
  uint64_t v3;

  sub_23DE20CD8();
  swift_bridgeObjectRetain();
  v2 = a1;
  v3 = sub_23DE354F8();

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t (*static HKHealthStore.DateRangeQueryPublisher.defaultFactoryBlock.getter())(void *a1)
{
  return sub_23DE2088C;
}

uint64_t HKHealthStore.DateRangeQueryPublisher.configuration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

id HKHealthStore.DateRangeQueryPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void sub_23DE2092C(int a1, unint64_t a2, id a3, void (*a4)(unint64_t *))
{
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;

  if (a3)
  {
    v14 = (unint64_t)a3;
    v15 = 1;
    v6 = a3;
    a4(&v14);

  }
  else
  {
    if (a2)
    {
      v14 = a2;
      v15 = 0;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (qword_2543272D8 != -1)
        swift_once();
      v7 = sub_23DE3536C();
      __swift_project_value_buffer(v7, (uint64_t)qword_25432A700);
      v8 = sub_23DE35354();
      v9 = sub_23DE35B10();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        v11 = swift_slowAlloc();
        v14 = v11;
        *(_DWORD *)v10 = 136315138;
        v12 = sub_23DE36080();
        sub_23DDE8458(v12, v13, (uint64_t *)&v14);
        sub_23DE35C48();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23DDE0000, v8, v9, "[%s]: Received both nil for date intervals and error", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242645720](v11, -1, -1);
        MEMORY[0x242645720](v10, -1, -1);
      }

      v14 = sub_23DDFA270(MEMORY[0x24BEE4AF8]);
      v15 = 0;
    }
    a4(&v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DE20B2C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

id sub_23DE20B38()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t sub_23DE20B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE2101C();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE23DateRangeQueryPublisherV04makeH04with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nI6ResultOys0P0OySDySo12HKSampleTypeC10Foundation0F8IntervalVGs5Error_pGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[6];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  v7 = objc_allocWithZone(MEMORY[0x24BDD41C8]);
  v13[4] = sub_23DE21084;
  v13[5] = v6;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_23DE05B44;
  v13[3] = &block_descriptor_18;
  v8 = _Block_copy(v13);
  swift_retain();
  v9 = objc_msgSend(v7, sel_initWithDateIntervalHandler_, v8);
  _Block_release(v8);
  swift_release();
  v10 = v9;
  if (v5)
    v11 = (void *)sub_23DE357D4();
  else
    v11 = 0;
  objc_msgSend(v9, sel_setDebugIdentifier_, v11);

  return v9;
}

unint64_t sub_23DE20CB4(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE20CD8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE20CD8()
{
  unint64_t result;

  result = qword_254327400;
  if (!qword_254327400)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.DateRangeQueryPublisher, &type metadata for HKHealthStore.DateRangeQueryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327400);
  }
  return result;
}

void _s23DateRangeQueryPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *_s23DateRangeQueryPublisherVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *_s23DateRangeQueryPublisherVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  return a1;
}

uint64_t _s23DateRangeQueryPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t _s23DateRangeQueryPublisherVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s23DateRangeQueryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DateRangeQueryPublisher()
{
  return &type metadata for HKHealthStore.DateRangeQueryPublisher;
}

_QWORD *_s23DateRangeQueryPublisherV13ConfigurationVwCP(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwxx()
{
  return swift_bridgeObjectRelease();
}

_QWORD *_s23DateRangeQueryPublisherV13ConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s23DateRangeQueryPublisherV13ConfigurationVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DateRangeQueryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.DateRangeQueryPublisher.Configuration;
}

unint64_t sub_23DE2101C()
{
  unint64_t result;

  result = qword_254327408;
  if (!qword_254327408)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.DateRangeQueryPublisher, &type metadata for HKHealthStore.DateRangeQueryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327408);
  }
  return result;
}

uint64_t sub_23DE21060()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE21084(int a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  sub_23DE2092C(a1, a2, a3, *(void (**)(unint64_t *))(v3 + 16));
}

uint64_t static HKFeatureSettings.Key<A>.enabled.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DE357F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t HKFeatureSettings.Key.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static HKFeatureSettings.Key<A>.liveOnTermsAcknowledged.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DE357F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static HKFeatureSettings.Key<A>.onboardingAcknowledged.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DE357F8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t HKFeatureSettings.Key.rawValue.getter()
{
  uint64_t v0;

  v0 = sub_23DE21AF0();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t HKFeatureSettings.Key.rawValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HKFeatureSettings.Key.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t sub_23DE211A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[2];

  result = HKFeatureSettings.Key.init(rawValue:)(*a1, a1[1], v5);
  v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t sub_23DE211DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = sub_23DE21AF0();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HKFeatureSettings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];

  swift_getObjectType();
  v7 = sub_23DE35C3C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v34 - v9;
  v12 = *a1;
  v11 = a1[1];
  v13 = objc_msgSend(v3, sel_keyValueStorage);
  v14 = sub_23DE35708();

  if (!*(_QWORD *)(v14 + 16))
  {
    v38 = 0u;
    v39 = 0u;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v15 = sub_23DDFF330(v12, v11);
  if ((v16 & 1) == 0)
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_23DDE9010(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v39 + 1))
  {
LABEL_9:
    sub_23DDF6180((uint64_t)&v38);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  sub_23DE0332C(&v38, v40);
  sub_23DDE9010((uint64_t)v40, (uint64_t)&v38);
  v17 = swift_dynamicCast();
  v18 = *(_QWORD *)(a2 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v17)
  {
    v19(v10, 0, 1, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v10, a2);
    v20 = a3;
    v21 = 0;
  }
  else
  {
    v19(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (qword_2543272D8 != -1)
      swift_once();
    v23 = sub_23DE3536C();
    __swift_project_value_buffer(v23, (uint64_t)qword_25432A700);
    sub_23DDE9010((uint64_t)v40, (uint64_t)&v38);
    swift_bridgeObjectRetain_n();
    v24 = sub_23DE35354();
    v25 = sub_23DE35B10();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v37 = v34;
      *(_DWORD *)v26 = 136446978;
      v27 = sub_23DE36080();
      v35 = v19;
      v36 = sub_23DDE8458(v27, v28, &v37);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      v29 = sub_23DE36080();
      v36 = sub_23DDE8458(v29, v30, &v37);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 22) = 2082;
      swift_bridgeObjectRetain();
      v36 = sub_23DDE8458(v12, v11, &v37);
      v19 = v35;
      sub_23DE35C48();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 32) = 2082;
      __swift_project_boxed_opaque_existential_0(&v38, *((uint64_t *)&v39 + 1));
      swift_getDynamicType();
      v31 = sub_23DE36080();
      v36 = sub_23DDE8458(v31, v32, &v37);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      _os_log_impl(&dword_23DDE0000, v24, v25, "[%{public}s]: Expected value of type %{public}s for key %{public}s but found value of type %{public}s", (uint8_t *)v26, 0x2Au);
      v33 = v34;
      swift_arrayDestroy();
      MEMORY[0x242645720](v33, -1, -1);
      MEMORY[0x242645720](v26, -1, -1);

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    v20 = a3;
    v21 = 1;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(v20, v21, 1, a2);
}

uint64_t HKFeatureSettings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];

  swift_getObjectType();
  v5 = sub_23DE3536C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  v11 = objc_msgSend(v2, sel_keyValueStorage);
  v12 = sub_23DE35708();

  if (!*(_QWORD *)(v12 + 16))
  {
    v36 = 0u;
    v37 = 0u;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v13 = sub_23DDFF330(v10, v9);
  if ((v14 & 1) == 0)
  {
    v36 = 0u;
    v37 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_23DDE9010(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v37 + 1))
  {
LABEL_9:
    sub_23DDF6180((uint64_t)&v36);
    goto LABEL_10;
  }
  sub_23DE0332C(&v36, v38);
  sub_23DDE9010((uint64_t)v38, (uint64_t)&v36);
  if (swift_dynamicCast())
  {
    sub_23DE350B4();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    v15 = sub_23DE350FC();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
  }
  if (qword_2543272D8 != -1)
    swift_once();
  v18 = __swift_project_value_buffer(v5, (uint64_t)qword_25432A700);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  sub_23DDE9010((uint64_t)v38, (uint64_t)&v36);
  swift_bridgeObjectRetain_n();
  v19 = sub_23DE35354();
  v20 = sub_23DE35B10();
  v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    v22 = swift_slowAlloc();
    v33 = v21;
    v23 = v22;
    v32 = swift_slowAlloc();
    v35 = v32;
    *(_DWORD *)v23 = 136446978;
    v30 = v23 + 4;
    v24 = sub_23DE36080();
    v31 = v19;
    v34 = sub_23DDE8458(v24, v25, &v35);
    sub_23DE35C48();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    v34 = sub_23DDE8458(0x656C62756F44, 0xE600000000000000, &v35);
    sub_23DE35C48();
    *(_WORD *)(v23 + 22) = 2082;
    swift_bridgeObjectRetain();
    v34 = sub_23DDE8458(v10, v9, &v35);
    sub_23DE35C48();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 32) = 2082;
    __swift_project_boxed_opaque_existential_0(&v36, *((uint64_t *)&v37 + 1));
    swift_getDynamicType();
    v26 = sub_23DE36080();
    v34 = sub_23DDE8458(v26, v27, &v35);
    sub_23DE35C48();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    v28 = v31;
    _os_log_impl(&dword_23DDE0000, v31, (os_log_type_t)v33, "[%{public}s]: Expected value of type %{public}s for key %{public}s but found value of type %{public}s", (uint8_t *)v23, 0x2Au);
    v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x242645720](v29, -1, -1);
    MEMORY[0x242645720](v23, -1, -1);

  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_10:
  v17 = sub_23DE350FC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
}

uint64_t sub_23DE21AF0()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for HKFeatureSettings.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKFeatureSettings.Key);
}

id HKHealthStore.makeSampleCountPublisher(sampleTypes:predicate:debugIdentifier:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v5;
  id v6;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  swift_bridgeObjectRetain();
  return a2;
}

id HKHealthStore.SampleCountPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  id v5;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  v5 = (id)v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

id HKHealthStore.SampleCountPublisher.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

void sub_23DE21C30(int a1, uint64_t a2, id a3, void (*a4)(uint64_t *))
{
  uint64_t v5;
  id v7;
  uint64_t v8;
  char v9;

  if (a2)
  {
    if ((a2 & 0xC000000000000001) != 0)
      v5 = sub_23DDF4AD8();
    else
      v5 = (uint64_t)sub_23DDF4D40(a2);
    v8 = v5;
    v9 = 1;
    a4(&v8);
    swift_release();
  }
  else if (a3)
  {
    v8 = (uint64_t)a3;
    v9 = 2;
    v7 = a3;
    a4(&v8);

  }
}

id sub_23DE21CE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  id v5;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  v5 = (id)v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

id sub_23DE21D30()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t sub_23DE21D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE244E8();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_23DE21D8C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
    sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
    sub_23DDF5048((unint64_t *)&qword_2543273C8, (unint64_t *)&qword_2543273C0);
    v5 = sub_23DE35708();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE21E80(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  sub_23DDF4FB0();
  v6 = sub_23DE35E94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
      v33 = v31;
    result = sub_23DE35C0C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DE22148(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_23DE0103C();
  v39 = a2;
  v6 = sub_23DE35E94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    sub_23DE357F8();
    sub_23DE35FFC();
    sub_23DE3584C();
    v14 = sub_23DE36014();
    result = swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DE22470(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_23DE0325C();
  v6 = sub_23DE35E94();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_23DE0332C(v24, v35);
      }
      else
      {
        sub_23DDE9010((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_23DE35FFC();
      sub_23DE3584C();
      result = sub_23DE36014();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_23DE0332C(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DE22768(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23DE35FFC();
  swift_bridgeObjectRetain();
  sub_23DE3584C();
  v8 = sub_23DE36014();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23DE35F54() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23DE35F54() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23DE23410(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23DE22914(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  unint64_t *v35;
  uint64_t v36;
  id v37;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v11 = v6;
  v14 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *v6;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v16 = a2;
    v17 = sub_23DE35CB4();

    if (v17)
    {
      swift_bridgeObjectRelease();

      sub_23DDE7B5C(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v42;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_23DE35CA8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = sub_23DE22BFC(v15, result + 1, a5, a3, a4, a6);
    v43 = v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v35 = a5;
      v36 = v30 + 1;
      v37 = v16;
      sub_23DE230F8(v36, v35, a3, a4, a6);
      v31 = v43;
    }
    else
    {
      v31 = v29;
      v32 = v16;
    }
    sub_23DE23390((uint64_t)v16, v31);
    *v11 = v31;
    swift_bridgeObjectRelease();
    *a1 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    v19 = sub_23DE35C0C();
    v20 = -1 << *(_BYTE *)(v14 + 32);
    v21 = v19 & ~v20;
    v40 = a4;
    if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      sub_23DDE7B5C(0, a3);
      v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
      v23 = sub_23DE35C18();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v27 = *(void **)(*(_QWORD *)(*v6 + 48) + 8 * v21);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v21);
        v26 = sub_23DE35C18();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44 = *v6;
    *v6 = 0x8000000000000000;
    v34 = a2;
    sub_23DE235A8((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v40, a6);
    *v6 = v44;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

uint64_t sub_23DE22BFC(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_23DE247AC(0, a3, a4, a5, a6);
    v10 = sub_23DE35CE4();
    v23 = v10;
    sub_23DE35C9C();
    if (sub_23DE35CC0())
    {
      sub_23DDE7B5C(0, a4);
      do
      {
        swift_dynamicCast();
        v10 = v23;
        v17 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v17)
        {
          sub_23DE230F8(v17 + 1, a3, a4, a5, a6);
          v10 = v23;
        }
        result = sub_23DE35C0C();
        v12 = v10 + 56;
        v13 = -1 << *(_BYTE *)(v10 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v16) = v22;
        ++*(_QWORD *)(v10 + 16);
      }
      while (sub_23DE35CC0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v10;
}

uint64_t sub_23DE22E20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_23DE12984();
  v3 = sub_23DE35CD8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_23DE35FFC();
      sub_23DE3584C();
      result = sub_23DE36014();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DE230F8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;

  v6 = v5;
  v7 = *v5;
  sub_23DE247AC(0, a2, a3, a4, a5);
  v8 = sub_23DE35CD8();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v33 = v5;
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 56;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14)
          goto LABEL_33;
        v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v14)
            goto LABEL_33;
          v22 = v11[v17];
          if (!v22)
          {
            v17 = v21 + 2;
            if (v21 + 2 >= v14)
              goto LABEL_33;
            v22 = v11[v17];
            if (!v22)
            {
              v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                v6 = v33;
                v32 = 1 << *(_BYTE *)(v7 + 32);
                if (v32 > 63)
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v11 = -1 << v32;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  v17 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_39;
                  if (v17 >= v14)
                    goto LABEL_33;
                  v22 = v11[v17];
                  ++v23;
                  if (v22)
                    goto LABEL_23;
                }
              }
              v17 = v23;
            }
          }
        }
LABEL_23:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v20);
      result = sub_23DE35C0C();
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v6 = v9;
  return result;
}

unint64_t sub_23DE23390(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_23DE35C0C();
  result = sub_23DE35C90();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_23DE23410(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23DE22E20();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23DE2375C();
      goto LABEL_22;
    }
    sub_23DE23ABC();
  }
  v11 = *v4;
  sub_23DE35FFC();
  sub_23DE3584C();
  result = sub_23DE36014();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23DE35F54(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23DE35F90();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23DE35F54();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void sub_23DE235A8(uint64_t a1, unint64_t a2, char a3, unint64_t *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_23DE230F8(v13, a4, a5, a6, a7);
  }
  else
  {
    if (v12 > v11)
    {
      sub_23DE23908(a4, a5, a6, a7);
      goto LABEL_14;
    }
    sub_23DE23D64(v13, a4, a5, a6, a7);
  }
  v14 = *v7;
  v15 = sub_23DE35C0C();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_23DDE7B5C(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = sub_23DE35C18();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      sub_23DE35F90();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = sub_23DE35C18();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

void *sub_23DE2375C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DE12984();
  v2 = *v0;
  v3 = sub_23DE35CCC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_23DE23908(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v5 = v4;
  sub_23DE247AC(0, a1, a2, a3, a4);
  v6 = *v4;
  v7 = sub_23DE35CCC();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v5 = v8;
    return result;
  }
  result = (id)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_28;
      v23 = *(_QWORD *)(v10 + 8 * v13);
      if (!v23)
      {
        v13 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_28;
        v23 = *(_QWORD *)(v10 + 8 * v13);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = 8 * v19;
    v21 = *(void **)(*(_QWORD *)(v6 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 3;
  if (v24 >= v17)
    goto LABEL_28;
  v23 = *(_QWORD *)(v10 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v23 = *(_QWORD *)(v10 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DE23ABC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23DE12984();
  v3 = sub_23DE35CD8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23DE35FFC();
    swift_bridgeObjectRetain();
    sub_23DE3584C();
    result = sub_23DE36014();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DE23D64(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;

  v6 = v5;
  v7 = *v5;
  sub_23DE247AC(0, a2, a3, a4, a5);
  v8 = sub_23DE35CD8();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_35:
    *v6 = v9;
    return result;
  }
  v32 = v5;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  v15 = v8 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_33;
      v22 = *(_QWORD *)(v11 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v14)
          goto LABEL_33;
        v22 = *(_QWORD *)(v11 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v13 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v20);
    result = sub_23DE35C0C();
    v25 = -1 << *(_BYTE *)(v9 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v18) = v24;
    ++*(_QWORD *)(v9 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v14)
  {
LABEL_33:
    result = swift_release_n();
    v6 = v32;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v11 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v22 = *(_QWORD *)(v11 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE20SampleCountPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOySDySo12HKSampleTypeCSiGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  _QWORD aBlock[6];

  v5 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = swift_bridgeObjectRetain();
  sub_23DE24610(v7, (unint64_t *)&qword_2543273C0, 0x24BDD3F08, (unint64_t *)&qword_2543273C8, &qword_256D07E48);
  swift_bridgeObjectRelease();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  v9 = objc_allocWithZone(MEMORY[0x24BDD3EE0]);
  sub_23DDE7B5C(0, (unint64_t *)&qword_2543273C0);
  sub_23DDF5048((unint64_t *)&qword_2543273C8, (unint64_t *)&qword_2543273C0);
  swift_retain();
  v10 = v5;
  v11 = (void *)sub_23DE35A08();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_23DE24550;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE21D8C;
  aBlock[3] = &block_descriptor_19;
  v12 = _Block_copy(aBlock);
  v13 = objc_msgSend(v9, sel_initWithSampleTypes_predicate_resultsHandler_, v11, v10, v12);

  _Block_release(v12);
  swift_release();
  v14 = v13;
  if (v6)
    v15 = (void *)sub_23DE357D4();
  else
    v15 = 0;
  objc_msgSend(v13, sel_setDebugIdentifier_, v15);

  return v13;
}

unint64_t sub_23DE241B0(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE241D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE241D4()
{
  unint64_t result;

  result = qword_2543273F0;
  if (!qword_2543273F0)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SampleCountPublisher, &type metadata for HKHealthStore.SampleCountPublisher);
    atomic_store(result, (unint64_t *)&qword_2543273F0);
  }
  return result;
}

void _s20SampleCountPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

_QWORD *_s20SampleCountPublisherVwcp(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = v5;
  return a1;
}

_QWORD *_s20SampleCountPublisherVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = (void *)a2[4];
  v8 = (void *)a1[4];
  a1[4] = v7;
  v9 = v7;

  return a1;
}

uint64_t _s20SampleCountPublisherVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleCountPublisher()
{
  return &type metadata for HKHealthStore.SampleCountPublisher;
}

uint64_t _s20SampleCountPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *_s20SampleCountPublisherV13ConfigurationVwcp(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s20SampleCountPublisherV13ConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[1];
  v5 = (void *)a2[1];
  a1[1] = v5;
  v6 = v5;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20SampleCountPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleCountPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SampleCountPublisher.Configuration;
}

unint64_t sub_23DE244E8()
{
  unint64_t result;

  result = qword_2543273F8;
  if (!qword_2543273F8)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.SampleCountPublisher, &type metadata for HKHealthStore.SampleCountPublisher);
    atomic_store(result, (unint64_t *)&qword_2543273F8);
  }
  return result;
}

uint64_t sub_23DE2452C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE24550(int a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_23DE21C30(a1, a2, a3, *(void (**)(uint64_t *))(v3 + 16));
}

uint64_t sub_23DE24558(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23DE35A20();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23DE22768(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_23DE245EC(unint64_t a1)
{
  return sub_23DE24610(a1, &qword_254327AE0, 0x24BDD3E98, &qword_256D06F98, &qword_256D07E50);
}

uint64_t sub_23DE24610(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void **v15;
  void *v16;
  id v17;
  uint64_t v18;

  v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23DE35E70();
    swift_bridgeObjectRelease();
  }
  sub_23DDE7B5C(0, a2);
  sub_23DDF5048(a4, a2);
  result = sub_23DE35A20();
  v18 = result;
  if (v10)
  {
    swift_bridgeObjectRetain();
    v12 = sub_23DE35E70();
    result = swift_bridgeObjectRelease();
    if (!v12)
      return v18;
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v12)
      return v18;
  }
  if (v12 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = (void *)MEMORY[0x242644E08](i, a1);
        sub_23DE22914(&v17, v14, a2, a3, a5, a4);

      }
    }
    else
    {
      v15 = (void **)(a1 + 32);
      do
      {
        v16 = *v15++;
        sub_23DE22914(&v17, v16, a2, a3, a5, a4);

        --v12;
      }
      while (v12);
    }
    return v18;
  }
  __break(1u);
  return result;
}

void sub_23DE247AC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_23DDE7B5C(255, a3);
    sub_23DDF5048(a5, a3);
    v8 = sub_23DE35CFC();
    if (!v9)
      atomic_store(v8, a2);
  }
}

_QWORD *sub_23DE24834(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  void *v40;
  _OWORD v41[2];
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    *(_QWORD *)&v42 = a1;
    *((_QWORD *)&v42 + 1) = a2;
    v3 = qword_256D06830;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      goto LABEL_40;
    while (1)
    {
      v41[0] = xmmword_256D0CCB0;
      sub_23DDF61D8();
      v4 = MEMORY[0x24BEE0D00];
      v5 = sub_23DE35C60();
      swift_bridgeObjectRelease();
      v6 = (_QWORD *)sub_23DDF9F38(MEMORY[0x24BEE4AF8]);
      v7 = *(_QWORD *)(v5 + 16);
      if (!v7)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        return v6;
      }
      swift_bridgeObjectRetain();
      v8 = (uint64_t *)(v5 + 40);
      while (1)
      {
        v10 = *v8;
        *(_QWORD *)&v42 = *(v8 - 1);
        *((_QWORD *)&v42 + 1) = v10;
        v11 = qword_256D06838;
        swift_bridgeObjectRetain();
        if (v11 != -1)
          swift_once();
        v41[0] = xmmword_256D0CCC0;
        v12 = (_QWORD *)sub_23DE35C60();
        if (v12[2] != 2)
        {
          swift_bridgeObjectRelease();
          sub_23DE12718();
          swift_allocError();
          sub_23DE2577C(v37);
          swift_willThrow();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v6;
        }
        v39 = v7;
        v14 = v12[4];
        v13 = v12[5];
        v16 = v12[6];
        v15 = v12[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (sub_23DE357F8() == v14 && v17 == v13)
          goto LABEL_23;
        v19 = sub_23DE35F54();
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
          goto LABEL_24;
        if (sub_23DE357F8() == v14 && v20 == v13)
        {
LABEL_23:
          swift_bridgeObjectRelease();
        }
        else
        {
          v22 = sub_23DE35F54();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
            sub_23DE2963C(v16, v15);
            __asm { BR              X9 }
          }
        }
LABEL_24:
        v43 = v4;
        v40 = (void *)v16;
        *(_QWORD *)&v42 = v16;
        *((_QWORD *)&v42 + 1) = v15;
        swift_bridgeObjectRetain();
        sub_23DE0332C(&v42, v41);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44 = v6;
        v26 = sub_23DDFF330(v14, v13);
        v27 = v6[2];
        v28 = (v25 & 1) == 0;
        v29 = v27 + v28;
        if (__OFADD__(v27, v28))
          break;
        v30 = v25;
        if (v6[3] >= v29)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_23DE27114();
        }
        else
        {
          sub_23DE22470(v29, isUniquelyReferenced_nonNull_native);
          v31 = sub_23DDFF330(v14, v13);
          if ((v30 & 1) != (v32 & 1))
          {
            sub_23DE35F9C();
            __break(1u);
            JUMPOUT(0x23DE24D34);
          }
          v26 = v31;
        }
        v6 = v44;
        if ((v30 & 1) != 0)
        {
          v9 = (_OWORD *)(v44[7] + 32 * v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
          sub_23DE0332C(v41, v9);
        }
        else
        {
          v44[(v26 >> 6) + 8] |= 1 << v26;
          v33 = (uint64_t *)(v6[6] + 16 * v26);
          *v33 = v14;
          v33[1] = v13;
          sub_23DE0332C(v41, (_OWORD *)(v6[7] + 32 * v26));
          v34 = v6[2];
          v35 = __OFADD__(v34, 1);
          v36 = v34 + 1;
          if (v35)
            goto LABEL_39;
          v6[2] = v36;
          swift_bridgeObjectRetain();
        }
        v8 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23DE292C4(v40, v15, 4);
        swift_bridgeObjectRelease();
        v7 = v39 - 1;
        v4 = MEMORY[0x24BEE0D00];
        if (v39 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      swift_once();
    }
  }
  return 0;
}

uint64_t sub_23DE24D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (!a1)
    return 0;
  v3 = swift_bridgeObjectRetain();
  *(_QWORD *)&v15 = sub_23DE27980(v3);
  sub_23DE27918((uint64_t *)&v15);
  if (v1)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x23DE251D0);
  }
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v15 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(swift_retain() + 40);
    v17 = MEMORY[0x24BEE4AF8];
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      if (*(_QWORD *)(a1 + 16))
      {
        swift_bridgeObjectRetain();
        v8 = sub_23DDFF330(v6, v7);
        if ((v9 & 1) != 0)
        {
          sub_23DDE9010(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)&v15);
        }
        else
        {
          v15 = 0u;
          v16 = 0u;
        }
      }
      else
      {
        v15 = 0u;
        v16 = 0u;
        swift_bridgeObjectRetain();
      }
      sub_23DE290CC((uint64_t)&v15);
      if (v10 != -1)
      {
        v11 = v10;
        if (qword_256D06838 != -1)
          swift_once();
        *(_QWORD *)&v15 = v6;
        *((_QWORD *)&v15 + 1) = v7;
        swift_bridgeObjectRetain();
        sub_23DE35870();
        __asm { BR              X9 }
      }
      v5 += 2;
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
    swift_release_n();
    v12 = v17;
  }
  else
  {
    swift_release();
    v12 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)&v15 = v12;
  if (qword_256D06830 != -1)
    swift_once();
  sub_23DDE3BB0(0, &qword_256D06FA8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DDF6120();
  v13 = sub_23DE35774();
  swift_bridgeObjectRelease();
  return v13;
}

id sub_23DE251E4(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  void *ObjCClassFromMetadata;
  void *v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  double v57;
  void *v58;
  uint64_t v59;

  v55 = a2;
  v47 = a1;
  sub_23DE29B64(0);
  MEMORY[0x24BDAC7A8](v2);
  v48 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE29B80(0);
  v46 = v4;
  v49 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE29C18(0);
  v50 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE29C34(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE29C50();
  v15 = v14;
  v54 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDE3BB0(0, &qword_256D07EA8, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE5DF0]);
  v19 = v18;
  v53 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v56 = (char *)&v39 - v20;
  sub_23DE352C4();
  sub_23DDE7B5C(0, &qword_256D07E88);
  sub_23DE352C4();
  v51 = v13;
  v21 = sub_23DE35348();
  v40 = v11;
  v41 = v7;
  v42 = v19;
  v43 = v10;
  MEMORY[0x24BDAC7A8](v21);
  v22 = v51;
  *(&v39 - 4) = (uint64_t)v56;
  *(&v39 - 3) = (uint64_t)v22;
  v23 = v17;
  *(&v39 - 2) = (uint64_t)v17;
  sub_23DE29B9C();
  v24 = v50;
  sub_23DDE3384(&qword_256D07EB8, (uint64_t (*)(uint64_t))sub_23DE29C18, MEMORY[0x24BEE7460]);
  v44 = v15;
  sub_23DE35330();
  v58 = v47;
  v59 = v55;
  sub_23DE29CC0();
  v25 = (uint64_t)v48;
  v26 = v24;
  v27 = v46;
  v28 = v44;
  v29 = v49;
  sub_23DE35768();
  swift_bridgeObjectRelease();
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v25, 1, v27);
  v31 = v53;
  v32 = v54;
  if (v30 == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v52, v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v51, v43);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v28);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v56, v42);
    sub_23DDEF790(v25, (uint64_t (*)(_QWORD))sub_23DE29B64);
    return 0;
  }
  else
  {
    v34 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v45, v25, v27);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    sub_23DE3533C();
    v36 = v58;
    v37 = v56;
    sub_23DE3533C();
    v33 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v36, v57);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v27);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v52, v50);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v51, v43);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v44);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v42);
  }
  return v33;
}

uint64_t sub_23DE2577C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_23DE35D14();
  sub_23DE35870();
  if (qword_256D06838 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  sub_23DE35870();
  swift_bridgeObjectRelease();
  sub_23DE35870();
  sub_23DE35870();
  result = sub_23DE35870();
  *a1 = 0xD000000000000018;
  a1[1] = 0x800000023DE3C4C0;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return result;
}

uint64_t sub_23DE258B4@<X0>(void (*a1)(char *, uint64_t)@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(_QWORD, _QWORD);
  void (*v84)(char *, _QWORD);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(_QWORD, _QWORD);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  void (*v130)(char *, uint64_t);
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t);
  char *v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  void (*v143)(char *, uint64_t);
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(_QWORD, _QWORD);
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  void (*v190)(_QWORD, _QWORD);
  void (*v191)(char *, uint64_t);
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  void (*v198)(char *, uint64_t);
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  void (*v206)(char *, uint64_t);
  char *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;

  v169 = a3;
  v206 = a2;
  v198 = a1;
  v182 = a4;
  sub_23DE29C18(0);
  v181 = v4;
  v183 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v180 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v195 = (char *)&v149 - v7;
  v170 = sub_23DE35270();
  v173 = *(_QWORD *)(v170 - 8);
  MEMORY[0x24BDAC7A8](v170);
  v166 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BEE1E08];
  sub_23DDE3BB0(0, &qword_256D07EC8, MEMORY[0x24BEE1E08], MEMORY[0x24BEE5DC8]);
  v174 = v10;
  v175 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v168 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v171 = (char *)&v149 - v13;
  v14 = (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE7450];
  sub_23DDF8768(0, &qword_256D07ED0, (uint64_t (*)(uint64_t))sub_23DE29D04, MEMORY[0x24BEE7450]);
  MEMORY[0x24BDAC7A8](v15);
  v177 = (char *)&v149 - v16;
  sub_23DE29C50();
  v190 = v17;
  v189 = *((_QWORD *)v17 - 1);
  MEMORY[0x24BDAC7A8](v17);
  v188 = (char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE29D78(0);
  v205 = v19;
  v178 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v176 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v203 = (char *)&v149 - v22;
  sub_23DE29C34(0);
  v24 = v23;
  v163 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v160 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v155 = (char *)&v149 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v159 = (char *)&v149 - v29;
  sub_23DE29D94(0);
  MEMORY[0x24BDAC7A8](v30);
  v185 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDE3BB0(0, &qword_256D07EF0, v9, MEMORY[0x24BEE5D08]);
  v165 = v32;
  v196 = *((_QWORD *)v32 - 1);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v158 = (char *)&v149 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v161 = (char *)&v149 - v35;
  sub_23DDE3BB0(0, &qword_256D07EF8, v9, v14);
  v186 = v36;
  v162 = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v172 = (char *)&v149 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v167 = (char *)&v149 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v207 = (char *)&v149 - v42;
  MEMORY[0x24BDAC7A8](v41);
  v197 = (char *)&v149 - v43;
  sub_23DE29DB0(0);
  v193 = v44;
  v179 = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v192 = (char *)&v149 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v200 = (char *)&v149 - v47;
  v209 = sub_23DE3530C();
  v152 = *(_QWORD *)(v209 - 8);
  v48 = MEMORY[0x24BDAC7A8](v209);
  v184 = (char *)&v149 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)&v149 - v50;
  sub_23DDE3BB0(0, &qword_256D07EA8, MEMORY[0x24BEE13C8], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE5DF0]);
  v53 = v52;
  v54 = *(_QWORD *)(v52 - 8);
  v150 = v52;
  v151 = v54;
  MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)&v149 - v55;
  sub_23DE29E30(0);
  v202 = v57;
  v157 = *(_QWORD *)(v57 - 8);
  v58 = MEMORY[0x24BDAC7A8](v57);
  v156 = (char *)&v149 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v58);
  v199 = (char *)&v149 - v60;
  v61 = sub_23DE35294();
  v62 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5D88];
  v63 = *(_QWORD *)(v61 - 8);
  v64 = MEMORY[0x24BDAC7A8](v61);
  v164 = (char *)&v149 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = MEMORY[0x24BDAC7A8](v64);
  v68 = (char *)&v149 - v67;
  v204 = (char *)&v149 - v67;
  MEMORY[0x24BDAC7A8](v66);
  v194 = (char *)&v149 - v69;
  sub_23DE3527C();
  v187 = sub_23DDE3384(&qword_256D07F18, v62, MEMORY[0x24BEE5D78]);
  v201 = v61;
  sub_23DE35234();
  v191 = *(void (**)(char *, uint64_t))(v63 + 8);
  v191(v68, v61);
  v214 = 91;
  v215 = 0xE100000000000000;
  v208 = sub_23DE29E4C();
  sub_23DE35234();
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v54 + 16))(v56, v198, v53);
  sub_23DE35264();
  v154 = sub_23DE35324();
  v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56);
  v70 = (uint64_t)v185;
  v153(v185, 1, 1, v154);
  v71 = v184;
  sub_23DE35264();
  sub_23DDE3384(&qword_256D07F28, (uint64_t (*)(uint64_t))sub_23DE29C34, MEMORY[0x24BEE7460]);
  v72 = v155;
  sub_23DE35234();
  v73 = v160;
  sub_23DE35240();
  v74 = v163;
  v75 = *(void (**)(char *, uint64_t))(v163 + 8);
  v75(v72, v24);
  v76 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
  v77 = v159;
  v76(v159, v73, v24);
  v78 = v207;
  v79 = MEMORY[0x24BEE1E08];
  sub_23DE352DC();
  sub_23DDEF790(v70, (uint64_t (*)(_QWORD))sub_23DE29D94);
  v75(v77, v24);
  v206 = *(void (**)(char *, uint64_t))(v152 + 8);
  v80 = v209;
  v206(v71, v209);
  v81 = v158;
  MEMORY[0x242644328](v78, v79);
  sub_23DE29E90(&qword_256D07F30, &qword_256D07EF0, MEMORY[0x24BEE5D08], MEMORY[0x24BEE5D20]);
  v82 = v161;
  v83 = v165;
  sub_23DE35234();
  v84 = *(void (**)(char *, _QWORD))(v196 + 8);
  v84(v81, v83);
  sub_23DE35240();
  v84(v82, v83);
  v85 = v162;
  v161 = *(char **)(v162 + 32);
  v86 = v197;
  v87 = v186;
  ((void (*)(char *, char *, uint64_t))v161)(v197, v78, v186);
  v88 = v150;
  sub_23DE352AC();
  (*(void (**)(char *, uint64_t))(v151 + 8))(v56, v88);
  sub_23DE29DCC();
  v90 = v89;
  v196 = sub_23DE29E90(&qword_256D07F38, &qword_256D07EF8, MEMORY[0x24BEE7450], MEMORY[0x24BEE7460]);
  v91 = v200;
  v163 = v90;
  sub_23DE352E8();
  v198 = *(void (**)(char *, uint64_t))(v85 + 8);
  v198(v86, v87);
  v92 = v206;
  v206(v51, v80);
  v93 = v156;
  MEMORY[0x24264431C](v91, v90);
  v162 = sub_23DDE3384(&qword_256D07F40, (uint64_t (*)(uint64_t))sub_23DE29E30, MEMORY[0x24BEE5D00]);
  v94 = v93;
  v95 = v202;
  sub_23DE35234();
  v165 = *(void (**)(_QWORD, _QWORD))(v157 + 8);
  v165(v94, v95);
  v212 = 32;
  v213 = 0xE100000000000000;
  sub_23DE35234();
  (*(void (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v189 + 16))(v188, v169, v190);
  sub_23DE35264();
  v96 = v166;
  sub_23DE35318();
  v97 = (uint64_t)v185;
  v153(v185, 1, 1, v154);
  v98 = v184;
  sub_23DE35264();
  sub_23DDE3384(&qword_256D07F48, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5D38], MEMORY[0x24BEE5D30]);
  v99 = v207;
  v100 = v79;
  v101 = v170;
  sub_23DE35300();
  sub_23DDEF790(v97, (uint64_t (*)(_QWORD))sub_23DE29D94);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v96, v101);
  v102 = v98;
  v103 = v209;
  v92(v102, v209);
  v104 = v92;
  v105 = v168;
  MEMORY[0x242644370](v99, v100);
  sub_23DE29E90(&qword_256D07F50, &qword_256D07EC8, MEMORY[0x24BEE5DC8], MEMORY[0x24BEE5DE0]);
  v106 = v171;
  v107 = v174;
  sub_23DE35234();
  v108 = *(void (**)(char *, uint64_t))(v175 + 8);
  v108(v105, v107);
  sub_23DE35240();
  v108(v106, v107);
  v109 = v197;
  v110 = v99;
  v111 = v186;
  ((void (*)(char *, char *, uint64_t))v161)(v197, v110, v186);
  v112 = v190;
  v113 = v188;
  sub_23DE352AC();
  (*(void (**)(char *, _QWORD))(v189 + 8))(v113, v112);
  sub_23DE29D04();
  v115 = v114;
  sub_23DDE7B5C(0, &qword_256D07E88);
  v116 = v177;
  sub_23DE352E8();
  v198(v109, v111);
  v117 = v51;
  v104(v51, v103);
  v118 = v176;
  MEMORY[0x24264431C](v116, v115);
  v189 = sub_23DDE3384(&qword_256D07F58, (uint64_t (*)(uint64_t))sub_23DE29D78, MEMORY[0x24BEE5D00]);
  v119 = v205;
  sub_23DE35234();
  v190 = *(void (**)(_QWORD, _QWORD))(v178 + 8);
  v190(v118, v119);
  v210 = 93;
  v211 = 0xE100000000000000;
  sub_23DE35234();
  v120 = v164;
  sub_23DE35288();
  v121 = v201;
  sub_23DE35234();
  v191(v120, v121);
  sub_23DE35240();
  v123 = v216;
  v122 = v217;
  sub_23DE35264();
  v210 = v123;
  v211 = v122;
  v124 = v167;
  sub_23DE352F4();
  v125 = v172;
  sub_23DE352F4();
  v126 = v111;
  sub_23DE352D0();
  v127 = v198;
  v198(v125, v111);
  v127(v124, v111);
  v128 = v209;
  v129 = v206;
  v206(v117, v209);
  swift_bridgeObjectRelease();
  sub_23DE35264();
  sub_23DE352F4();
  sub_23DE352D0();
  v130 = v127;
  v127(v124, v126);
  v129(v117, v128);
  v131 = v214;
  v132 = v215;
  sub_23DE35264();
  v210 = v131;
  v211 = v132;
  sub_23DE352F4();
  sub_23DDE3384(&qword_256D07F60, (uint64_t (*)(uint64_t))sub_23DE29DB0, MEMORY[0x24BEE7460]);
  sub_23DE352D0();
  v130(v124, v126);
  v133 = v209;
  v134 = v206;
  v206(v117, v209);
  swift_bridgeObjectRelease();
  sub_23DE35264();
  sub_23DE29B9C();
  v188 = v135;
  sub_23DE352D0();
  v134(v117, v133);
  v137 = v212;
  v136 = v213;
  v189 = v213;
  sub_23DE35264();
  v210 = v137;
  v211 = v136;
  sub_23DE352F4();
  v208 = sub_23DDE3384(&qword_256D07EB8, (uint64_t (*)(uint64_t))sub_23DE29C18, MEMORY[0x24BEE7460]);
  v138 = v180;
  v139 = v181;
  sub_23DE352D0();
  v140 = v198;
  v198(v124, v126);
  v141 = v209;
  v142 = v206;
  v206(v117, v209);
  swift_bridgeObjectRelease();
  sub_23DE35264();
  sub_23DE352F4();
  sub_23DE352D0();
  v140(v124, v126);
  v142(v117, v141);
  v143 = *(void (**)(char *, uint64_t))(v183 + 8);
  v143(v138, v139);
  v143(v195, v139);
  v144 = *(void (**)(char *, uint64_t))(v179 + 8);
  v145 = v193;
  v144(v192, v193);
  v144(v200, v145);
  v140(v207, v126);
  v140(v197, v126);
  v146 = v201;
  v147 = (uint64_t (*)(char *, uint64_t))v191;
  v191(v204, v201);
  v190(v203, v205);
  v165(v199, v202);
  return v147(v194, v146);
}

uint64_t sub_23DE26B4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _BYTE *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v3 = MEMORY[0x242644904](*a1, a1[1], a1[2], a1[3]);
  v5 = v4;
  v15 = 0;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v3 & 0x1000000000000000))
  {
    sub_23DE35D08();
LABEL_7:
    result = swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  MEMORY[0x24BDAC7A8](v3);
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      ((void (*)(_QWORD *__return_ptr, uint64_t))sub_23DE29B50)(v13, (v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v12 = sub_23DE35D8C();
      ((void (*)(_QWORD *__return_ptr, uint64_t))sub_23DE29B50)(v13, v12);
    }
    v14 = v13[0];
    goto LABEL_7;
  }
  v13[0] = v6;
  v13[1] = v5 & 0xFFFFFFFFFFFFFFLL;
  v9 = (v6 > 0x20u || ((0x100003E01uLL >> v6) & 1) == 0)
    && (v8 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
    && *v8 == 0;
  v14 = v9;
  result = swift_bridgeObjectRelease();
LABEL_14:
  v10 = v14;
  v11 = v15;
  if (!v14)
    v11 = 0;
  *(_QWORD *)a2 = v11;
  *(_BYTE *)(a2 + 8) = v10 ^ 1;
  return result;
}

void sub_23DE26CE0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  MEMORY[0x242644904](*a1, a1[1], a1[2], a1[3]);
  v3 = (void *)sub_23DE357D4();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend((id)objc_opt_self(), sel_unitFromString_, v3);

  *a2 = v4;
}

_QWORD *sub_23DE26D60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23DDE3BB0(0, qword_256D06C88, MEMORY[0x24BEE4260], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

id sub_23DE26DD8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_23DDF4FB0();
  v2 = *v0;
  v3 = sub_23DE35E88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_23DE26F74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DE0103C();
  v2 = *v0;
  v3 = sub_23DE35E88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DE27114()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_23DE0325C();
  v2 = *v0;
  v3 = sub_23DE35E88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_23DDE9010(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_23DE0332C(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DE272F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DE27470(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDE3BB0(0, &qword_256D07EB0, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DE275F4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDF8768(0, &qword_256D07F68, (uint64_t (*)(uint64_t))sub_23DE29F48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 4;
  v14 = a4 + 4;
  v15 = 2 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v10 + 4, a4 + 4, v15 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_23DE29F48();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DE27788(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDE3BB0(0, &qword_256D06EB0, (uint64_t)&type metadata for HKSharingAuthorizationIdentifier, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 56 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

uint64_t sub_23DE27918(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DE290B8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DE27A78(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_23DE27980(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23DDE3BB0(0, &qword_256D06EB8, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_23DE28EBC((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_23DDF5088();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_23DE27A78(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_23DE35F24();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23DE28160(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_23DE2822C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_23DE28678((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_23DE35984();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_23DE35F54();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_23DE35F54()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23DE284C4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_23DE284C4((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_23DE2822C((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_23DE35F54() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_23DE35E40();
  __break(1u);
  return result;
}

uint64_t sub_23DE28160(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_23DE35F54(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23DE2822C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_23DE35F54() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_23DE35F54() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_23DE285D0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

char *sub_23DE284C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DDF8768(0, &qword_256D07E60, (uint64_t (*)(uint64_t))sub_23DE29320, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23DE285D0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_23DE35EB8();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_23DE28678(uint64_t a1)
{
  return sub_23DE284C4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_23DE2868C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_23DE28784(a1, a2, a3);
}

unsigned __int8 *sub_23DE286A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23DE358E8();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23DE28A00();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23DE35D8C();
  }
LABEL_7:
  v11 = sub_23DE28784(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_23DE28784(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_23DE28A00()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_23DE358F4();
  v4 = sub_23DE28A7C(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23DE28A7C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_23DE28BC0(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_23DE26D60(v9, 0);
      v12 = sub_23DE28CAC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x242644910](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x242644910);
LABEL_9:
      sub_23DE35D8C();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x242644910]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_23DE28BC0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_23DE15EE8(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_23DE15EE8(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_23DE358A0();
  }
  __break(1u);
  return result;
}

unint64_t sub_23DE28CAC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_23DE15EE8(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_23DE358AC();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_23DE35D8C();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_23DE15EE8(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_23DE35888();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23DE28EBC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23DE290B8(uint64_t a1)
{
  return sub_23DE272F4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DE290CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[24];
  uint64_t v6;

  sub_23DE19080(a1, (uint64_t)v5);
  if (v6)
  {
    sub_23DDE7B5C(0, &qword_256D07E58);
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    sub_23DDF6180((uint64_t)v5);
  }
  sub_23DE19080(a1, (uint64_t)v5);
  if (v6)
  {
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    sub_23DDF6180((uint64_t)v5);
  }
  sub_23DE19080(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_23DDF6180((uint64_t)v5);
LABEL_13:
    sub_23DE19080(a1, (uint64_t)v5);
    if (v6)
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v2 = v4;
        sub_23DDF6180(a1);
        return v2;
      }
    }
    else
    {
      sub_23DDF6180((uint64_t)v5);
    }
    sub_23DE190C4(a1, (uint64_t)v5);
    if (v6)
    {
      if ((swift_dynamicCast() & 1) != 0)
        return v4;
    }
    else
    {
      sub_23DDF6180((uint64_t)v5);
    }
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_13;
LABEL_11:
  v2 = v4;
  sub_23DDF6180(a1);
  return v2;
}

void sub_23DE292B0(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    sub_23DE292C4(a1, a2, a3);
}

void sub_23DE292C4(void *a1, uint64_t a2, char a3)
{
  if (a3 == 4)
  {
    swift_bridgeObjectRelease();
  }
  else if (a3 == 3)
  {

  }
}

id sub_23DE292E8(id result, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_23DE292FC(result, a2, a3);
  return result;
}

id sub_23DE292FC(id result, uint64_t a2, char a3)
{
  if (a3 == 4)
    return (id)swift_bridgeObjectRetain();
  if (a3 == 3)
    return result;
  return result;
}

void sub_23DE29320()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07E68)
  {
    v0 = sub_23DE35AC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07E68);
  }
}

uint64_t sub_23DE2937C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  char v16;
  _QWORD v17[2];

  v4 = sub_23DE34F1C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = a1;
  v17[1] = a2;
  sub_23DE34F10();
  sub_23DDF61D8();
  sub_23DE35C6C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  v8 = sub_23DE35810();
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = v8 == 7562617 && v10 == 0xE300000000000000;
  if (v11
    || (sub_23DE35F54() & 1) != 0
    || (v8 == 121 ? (v13 = v10 == 0xE100000000000000) : (v13 = 0),
        v13
     || (sub_23DE35F54() & 1) != 0
     || (v8 == 1702195828 ? (v14 = v10 == 0xE400000000000000) : (v14 = 0),
         v14
      || (sub_23DE35F54() & 1) != 0
      || (v8 == 116 ? (v15 = v10 == 0xE100000000000000) : (v15 = 0), v15 || (sub_23DE35F54() & 1) != 0))))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (v8 == 28526 && v10 == 0xE200000000000000
         || (sub_23DE35F54() & 1) != 0
         || v8 == 110 && v10 == 0xE100000000000000
         || (sub_23DE35F54() & 1) != 0
         || v8 == 0x65736C6166 && v10 == 0xE500000000000000
         || (sub_23DE35F54() & 1) != 0
         || v8 == 102 && v10 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v16 = sub_23DE35F54();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v16 & 1) == 0)
      return 2;
  }
  return result;
}

uint64_t sub_23DE2963C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  char v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  sub_23DDE7B5C(0, &qword_256D07E58);
  swift_bridgeObjectRetain();
  result = (uint64_t)sub_23DE251E4((void *)a1, a2);
  if (result)
  {
    v5 = result;
    swift_bridgeObjectRelease();
    return v5;
  }
  v6 = HIBYTE(a2) & 0xF;
  v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a2) & 0xF;
  else
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_56;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v11 = (uint64_t)sub_23DE286A0(a1, a2, 10);
    v25 = v24;
    result = swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
      goto LABEL_38;
    goto LABEL_56;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)sub_23DE35D8C();
    result = (uint64_t)sub_23DE28784(v9, v7, 10);
    if ((v10 & 1) == 0)
    {
      v11 = result;
LABEL_38:
      swift_bridgeObjectRelease();
      return v11;
    }
LABEL_56:
    v36 = 0;
    MEMORY[0x24BDAC7A8](result);
    if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      sub_23DE35D08();
      swift_bridgeObjectRelease();
      if ((v35 & 1) != 0)
        goto LABEL_63;
      goto LABEL_68;
    }
    if ((a2 & 0x2000000000000000) != 0)
    {
      v33 = a1;
      v34 = a2 & 0xFFFFFFFFFFFFFFLL;
      if (a1 <= 0x20u && ((1 << a1) & 0x100003E01) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_bridgeObjectRetain();
        v31 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
        if (v31)
        {
          v32 = *v31;
          swift_bridgeObjectRelease();
          if (!v32)
            goto LABEL_63;
          goto LABEL_68;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v26 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      swift_bridgeObjectRetain();
    }
    else
    {
      v26 = sub_23DE35D8C();
      swift_bridgeObjectRetain();
      if (!v26)
      {
        v27 = 0;
LABEL_62:
        sub_23DE29B50(v27, (BOOL *)&v33);
        v28 = v33;
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
        {
LABEL_63:
          swift_bridgeObjectRelease();
          return v36;
        }
LABEL_68:
        swift_bridgeObjectRetain();
        v29 = sub_23DE2937C(a1, a2);
        if (v29 != 2)
        {
          v30 = v29;
          swift_bridgeObjectRelease();
          return v30 & 1;
        }
        return a1;
      }
    }
    v27 = (_BYTE *)v26;
    goto LABEL_62;
  }
  v33 = a1;
  v34 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v6)
      goto LABEL_81;
    if (v6 == 1)
      goto LABEL_77;
    if ((BYTE1(a1) - 48) <= 9u)
    {
      v11 = (BYTE1(a1) - 48);
      if (v6 == 2)
        goto LABEL_36;
      if ((BYTE2(a1) - 48) <= 9u)
      {
        v11 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        v12 = v6 - 3;
        if (v6 != 3)
        {
          v13 = (unsigned __int8 *)&v33 + 3;
          while (1)
          {
            v14 = *v13 - 48;
            if (v14 > 9)
              goto LABEL_34;
            v15 = 10 * v11;
            if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
              goto LABEL_34;
            v11 = v15 + v14;
            if (__OFADD__(v15, v14))
              goto LABEL_34;
            LOBYTE(v6) = 0;
            ++v13;
            if (!--v12)
              goto LABEL_37;
          }
        }
        goto LABEL_36;
      }
    }
LABEL_34:
    v11 = 0;
    LOBYTE(v6) = 1;
    goto LABEL_37;
  }
  if (a1 != 45)
  {
    if (!v6 || (a1 - 48) > 9u)
      goto LABEL_34;
    v11 = (a1 - 48);
    if (v6 == 1)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      goto LABEL_37;
    }
    if ((BYTE1(a1) - 48) <= 9u)
    {
      v11 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
      v16 = v6 - 2;
      if (v6 != 2)
      {
        v17 = (unsigned __int8 *)&v33 + 2;
        while (1)
        {
          v18 = *v17 - 48;
          if (v18 > 9)
            goto LABEL_34;
          v19 = 10 * v11;
          if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
            goto LABEL_34;
          v11 = v19 + v18;
          if (__OFADD__(v19, v18))
            goto LABEL_34;
          LOBYTE(v6) = 0;
          ++v17;
          if (!--v16)
            goto LABEL_37;
        }
      }
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v6)
  {
    if (v6 != 1)
    {
      if ((BYTE1(a1) - 48) > 9u)
        goto LABEL_34;
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        v11 = -(uint64_t)(BYTE1(a1) - 48);
        goto LABEL_37;
      }
      if ((BYTE2(a1) - 48) > 9u)
        goto LABEL_34;
      v11 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
      v20 = v6 - 3;
      if (v6 != 3)
      {
        v21 = (unsigned __int8 *)&v33 + 3;
        while (1)
        {
          v22 = *v21 - 48;
          if (v22 > 9)
            goto LABEL_34;
          v23 = 10 * v11;
          if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
            goto LABEL_34;
          v11 = v23 - v22;
          if (__OFSUB__(v23, v22))
            goto LABEL_34;
          LOBYTE(v6) = 0;
          ++v21;
          if (!--v20)
            goto LABEL_37;
        }
      }
      goto LABEL_36;
    }
LABEL_77:
    v11 = 0;
LABEL_37:
    if ((v6 & 1) == 0)
      goto LABEL_38;
    goto LABEL_56;
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

_BYTE *sub_23DE29B50@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_23DE29EDC(a1, a2);
}

void sub_23DE29B64(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07E70, (uint64_t (*)(uint64_t))sub_23DE29B80, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DE29B80(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07E78, (uint64_t (*)(uint64_t))sub_23DE29B9C, MEMORY[0x24BEE7428]);
}

void sub_23DE29B9C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_256D07E80)
  {
    sub_23DDE7B5C(255, &qword_256D07E88);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_256D07E80);
  }
}

void sub_23DE29C18(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07E90, (uint64_t (*)(uint64_t))sub_23DE29B9C, MEMORY[0x24BEE7450]);
}

void sub_23DE29C34(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07E98, MEMORY[0x24BEE7370], MEMORY[0x24BEE7450]);
}

void sub_23DE29C50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07EA0)
  {
    sub_23DDE7B5C(255, &qword_256D07E88);
    v0 = sub_23DE352B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07EA0);
  }
}

uint64_t sub_23DE29CB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE258B4(*(void (**)(char *, uint64_t))(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_23DE29CC0()
{
  unint64_t result;

  result = qword_256D07EC0;
  if (!qword_256D07EC0)
  {
    result = MEMORY[0x242645660](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256D07EC0);
  }
  return result;
}

void sub_23DE29D04()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07ED8)
  {
    sub_23DDE7B5C(255, &qword_256D07E88);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07ED8);
  }
}

void sub_23DE29D78(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07EE0, (uint64_t (*)(uint64_t))sub_23DE29D04, MEMORY[0x24BEE5CE8]);
}

void sub_23DE29D94(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07EE8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE73B0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DE29DB0(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07F00, (uint64_t (*)(uint64_t))sub_23DE29DCC, MEMORY[0x24BEE7450]);
}

void sub_23DE29DCC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07F08)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07F08);
  }
}

void sub_23DE29E30(uint64_t a1)
{
  sub_23DDF8768(a1, &qword_256D07F10, (uint64_t (*)(uint64_t))sub_23DE29DCC, MEMORY[0x24BEE5CE8]);
}

unint64_t sub_23DE29E4C()
{
  unint64_t result;

  result = qword_256D07F20;
  if (!qword_256D07F20)
  {
    result = MEMORY[0x242645660](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256D07F20);
  }
  return result;
}

uint64_t sub_23DE29E90(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_23DDE3BB0(255, a2, MEMORY[0x24BEE1E08], a3);
    result = MEMORY[0x242645660](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

_BYTE *sub_23DE29EDC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void sub_23DE29F48()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D07F70)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D07F70);
  }
}

uint64_t sub_23DE29FB0(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4;
  char v5;

  v4 = a1;
  v5 = a2 & 1;
  return a3(&v4);
}

uint64_t HKDeviceKeyValueStore.fetchEntries(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v15;

  sub_23DE2A13C();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v2;
  v10[3] = a1;
  v10[4] = a2;
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250];
  sub_23DE2ABA8(0, &qword_254327328, &qword_2543273A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DE2AC90(&qword_254327320, &qword_254327328, &qword_2543273A8, v11);
  v12 = v2;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  sub_23DDE3384(&qword_254327368, (uint64_t (*)(uint64_t))sub_23DE2A13C, MEMORY[0x24BDB9E90]);
  v13 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

void sub_23DE2A13C()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_254327370)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250];
    sub_23DE2ABA8(255, &qword_254327328, &qword_2543273A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DE2AC90(&qword_254327320, &qword_254327328, &qword_2543273A8, v0);
    v1 = sub_23DE354EC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_254327370);
  }
}

uint64_t sub_23DE2A1E4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  id v9;
  uint64_t result;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  sub_23DE2ABA8(0, &qword_254327328, &qword_2543273A8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v9 = a1;
  result = sub_23DE354D4();
  *a4 = result;
  return result;
}

uint64_t sub_23DE2A290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DE2A1E4(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void sub_23DE2A29C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  if (a5)
    a5 = (void *)sub_23DE357D4();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_23DDEF73C;
  *(_QWORD *)(v10 + 24) = v9;
  v12[4] = sub_23DE2E8E4;
  v12[5] = v10;
  v12[0] = MEMORY[0x24BDAC760];
  v12[1] = 1107296256;
  v12[2] = sub_23DE2A430;
  v12[3] = &block_descriptor_158;
  v11 = _Block_copy(v12);
  swift_release();
  objc_msgSend(a3, sel_fetchEntriesForKey_completion_, a5, v11);
  _Block_release(v11);

}

void sub_23DE2A3B4(void *a1, id a2, void (*a3)(id, uint64_t))
{
  id v5;
  void *v6;

  if (a2)
  {
    v5 = a2;
    a3(a2, 1);

  }
  else
  {
    if (a1)
      v6 = a1;
    else
      v6 = (void *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    a3(v6, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DE2A430(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_23DDE7B5C(0, &qword_254327B88);
    v4 = sub_23DE35948();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_23DE2A4BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  id v9;
  uint64_t result;

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  swift_allocObject();
  v9 = a1;
  swift_bridgeObjectRetain();
  result = sub_23DE354D4();
  *a4 = result;
  return result;
}

void sub_23DE2A564(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[6];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (void *)sub_23DE357D4();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_23DDEF73C;
  *(_QWORD *)(v8 + 24) = v6;
  v10[4] = sub_23DE2E8CC;
  v10[5] = v8;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DDEC7E8;
  v10[3] = &block_descriptor_146;
  v9 = _Block_copy(v10);
  swift_release();
  objc_msgSend(a3, sel_mostRecentEntryForKey_completion_, v7, v9);
  _Block_release(v9);

}

void sub_23DE2A66C(int a1, id a2, void (*a3)(void))
{
  id v5;

  if (a2)
  {
    v5 = a2;
    ((void (*)(id, uint64_t))a3)(a2, 1);

  }
  else
  {
    a3();
  }
}

void *sub_23DE2A6C8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *result;
  id v8;
  unint64_t v9;
  void *v10;

  result = *a1;
  if (result)
  {
    v8 = objc_msgSend(result, sel_storageEntries);
    sub_23DDE7B5C(0, &qword_256D07FA8);
    v9 = sub_23DE35948();

    swift_bridgeObjectRetain();
    v10 = sub_23DE2E718(v9, a2, a3);
    swift_bridgeObjectRelease();
    result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentBool(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  sub_23DE2AB00();
  v28 = v6;
  v30 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2ACD0();
  v29 = v9;
  v31 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2AD84(0, &qword_256D07FB8, &qword_2543273B0, MEMORY[0x24BEE1328], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98B8]);
  v13 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  v33 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v27 = (char *)&v27 - v14;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v16);
  v17 = v3;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_23DE2AC30(0, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, v16);
  sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
  swift_bridgeObjectRetain();
  v19 = v28;
  sub_23DE35510();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v19);
  sub_23DDE3384(&qword_256D07FD0, (uint64_t (*)(uint64_t))sub_23DE2ACD0, MEMORY[0x24BDB96C0]);
  v20 = v29;
  v21 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v20);
  v34 = v21;
  sub_23DE2AE34();
  v22 = MEMORY[0x24BEE1328];
  sub_23DDEC514(0, &qword_2543273B0);
  sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
  v23 = v27;
  sub_23DE35534();
  swift_release();
  sub_23DE2AFB8(&qword_256D07FD8, &qword_256D07FB8, &qword_2543273B0, v22);
  v24 = v32;
  v25 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  return v25;
}

void sub_23DE2AB00()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_256D07F78)
  {
    v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
    sub_23DE2ABA8(255, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v0);
    v1 = sub_23DE354EC();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_256D07F78);
  }
}

void sub_23DE2ABA8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_23DE2AC30(255, a3, &qword_254327B88, 0x24BDD3B18, a4);
    sub_23DDE2738();
    v5 = sub_23DE354C8();
    if (!v6)
      atomic_store(v5, a2);
  }
}

void sub_23DE2AC30(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_23DDE7B5C(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_23DE2AC90(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_23DE2ABA8(255, a2, a3, a4);
    result = MEMORY[0x242645660](MEMORY[0x24BDB9E58], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DE2ACD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07F98)
  {
    sub_23DE2AB00();
    sub_23DE2AC30(255, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
    v0 = sub_23DE353A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07F98);
  }
}

void sub_23DE2AD84(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (!*a2)
  {
    sub_23DE2AE34();
    v10 = v9;
    sub_23DDEC514(255, a3);
    v12 = v11;
    v13 = sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
    v14 = a5(a1, v10, v12, v13);
    if (!v15)
      atomic_store(v14, a2);
  }
}

void sub_23DE2AE34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07FC0)
  {
    sub_23DE2AC30(255, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_23DDE2738();
    v0 = sub_23DE3545C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07FC0);
  }
}

uint64_t sub_23DE2AEC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_23DE2A4BC(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

void *sub_23DE2AED0@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_23DE2A6C8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_23DE2AED8(void **a1@<X0>, unsigned __int8 *a2@<X8>)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  unsigned __int8 v7;
  id v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (v3)
  {
    v9[0] = 0;
    v4 = objc_msgSend(v3, sel_numberValue_, v9);
    if (v4)
    {
      v5 = v4;
      v6 = v9[0];
      v7 = objc_msgSend(v5, sel_BOOLValue);

      *a2 = v7;
    }
    else
    {
      v8 = v9[0];
      sub_23DE35060();

      swift_willThrow();
    }
  }
  else
  {
    *a2 = 2;
  }
}

uint64_t sub_23DE2AFB8(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_23DE2AD84(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98B8]);
    result = MEMORY[0x242645660](MEMORY[0x24BDB98C8], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentData(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  sub_23DE2AB00();
  v27 = v6;
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2ACD0();
  v28 = v9;
  v30 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2AD84(0, &qword_256D07FE0, &qword_254327BC8, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
  v13 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  v32 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v26 = (char *)&v26 - v14;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v16);
  v17 = v3;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_23DE2AC30(0, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, v16);
  sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
  swift_bridgeObjectRetain();
  v19 = v27;
  sub_23DE35510();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v19);
  sub_23DDE3384(&qword_256D07FD0, (uint64_t (*)(uint64_t))sub_23DE2ACD0, MEMORY[0x24BDB96C0]);
  v20 = v28;
  v21 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v20);
  v33 = v21;
  sub_23DE2AE34();
  sub_23DDEC514(0, &qword_254327BC8);
  sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
  v22 = v26;
  sub_23DE35510();
  swift_release();
  sub_23DE2B3E0();
  v23 = v31;
  v24 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v23);
  return v24;
}

uint64_t sub_23DE2B358()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DE2B37C(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *a1;
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_value);
    v5 = sub_23DE350A8();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

unint64_t sub_23DE2B3E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D07FE8;
  if (!qword_256D07FE8)
  {
    sub_23DE2AD84(255, &qword_256D07FE0, &qword_254327BC8, MEMORY[0x24BDCDDE8], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB96B0]);
    result = MEMORY[0x242645660](MEMORY[0x24BDB96C0], v1);
    atomic_store(result, (unint64_t *)&qword_256D07FE8);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentDate(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  sub_23DE2AB00();
  v27 = v6;
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2ACD0();
  v28 = v9;
  v30 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2B788();
  v13 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  v32 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v26 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v16);
  v17 = v3;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_23DE2AC30(0, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, v16);
  sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
  swift_bridgeObjectRetain();
  v19 = v27;
  sub_23DE35510();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v19);
  sub_23DDE3384(&qword_256D07FD0, (uint64_t (*)(uint64_t))sub_23DE2ACD0, MEMORY[0x24BDB96C0]);
  v20 = v28;
  v21 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v20);
  v33 = v21;
  sub_23DE2AE34();
  sub_23DDEC46C();
  sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
  v22 = v26;
  sub_23DE35534();
  swift_release();
  sub_23DDE3384(&qword_256D07FF8, (uint64_t (*)(uint64_t))sub_23DE2B788, MEMORY[0x24BDB98C8]);
  v23 = v31;
  v24 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v23);
  return v24;
}

void sub_23DE2B788()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D07FF0)
  {
    sub_23DE2AE34();
    sub_23DDEC46C();
    sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
    v0 = sub_23DE353C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D07FF0);
  }
}

uint64_t sub_23DE2B820@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (v3)
  {
    v12[0] = 0;
    v4 = objc_msgSend(v3, sel_dateValue_, v12);
    v5 = v12[0];
    if (v4)
    {
      v6 = v4;
      sub_23DE350F0();
      v7 = v5;

      v8 = sub_23DE350FC();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 0, 1, v8);
    }
    else
    {
      v11 = v12[0];
      sub_23DE35060();

      return swift_willThrow();
    }
  }
  else
  {
    v10 = sub_23DE350FC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

uint64_t HKDeviceKeyValueStore.mostRecentNumber(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  sub_23DE2AB00();
  v27 = v6;
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2ACD0();
  v28 = v9;
  v30 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2BC80();
  v13 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  v32 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v26 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v16);
  v17 = v3;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_23DE2AC30(0, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, v16);
  sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
  swift_bridgeObjectRetain();
  v19 = v27;
  sub_23DE35510();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v19);
  sub_23DDE3384(&qword_256D07FD0, (uint64_t (*)(uint64_t))sub_23DE2ACD0, MEMORY[0x24BDB96C0]);
  v20 = v28;
  v21 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v20);
  v33 = v21;
  sub_23DE2AE34();
  sub_23DE2AC30(0, &qword_256D06DF0, (unint64_t *)&qword_254327B98, 0x24BDD16E0, v16);
  sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
  v22 = v26;
  sub_23DE35534();
  swift_release();
  sub_23DDE3384(&qword_256D08008, (uint64_t (*)(uint64_t))sub_23DE2BC80, MEMORY[0x24BDB98C8]);
  v23 = v31;
  v24 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v23);
  return v24;
}

void sub_23DE2BC80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D08000)
  {
    sub_23DE2AE34();
    sub_23DE2AC30(255, &qword_256D06DF0, (unint64_t *)&qword_254327B98, 0x24BDD16E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
    v0 = sub_23DE353C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D08000);
  }
}

id sub_23DE2BD38@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  id v4;
  id v5;
  id v6;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  result = *a1;
  if (result)
  {
    v7[0] = 0;
    v4 = objc_msgSend(result, sel_numberValue_, v7);
    v5 = v7[0];
    if (v4)
    {
      *a2 = v4;
      return v5;
    }
    else
    {
      v6 = v7[0];
      sub_23DE35060();

      return (id)swift_willThrow();
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentString(for:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = v2;
  sub_23DE2AB00();
  v28 = v6;
  v30 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2ACD0();
  v29 = v9;
  v31 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE2AD84(0, &qword_256D08010, (unint64_t *)&qword_254328840, MEMORY[0x24BEE0D00], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BDB98B8]);
  v13 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  v33 = v13;
  MEMORY[0x24BDAC7A8](v12);
  v27 = (char *)&v27 - v14;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DE2ABA8(0, &qword_256D07F80, &qword_256D07F88, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  sub_23DE2AC90(&qword_256D07F90, &qword_256D07F80, &qword_256D07F88, v16);
  v17 = v3;
  swift_bridgeObjectRetain();
  sub_23DE354E0();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  sub_23DE2AC30(0, &qword_256D07FA0, &qword_256D07FA8, 0x24BDD3B10, v16);
  sub_23DDE3384(&qword_256D07FB0, (uint64_t (*)(uint64_t))sub_23DE2AB00, MEMORY[0x24BDB9E90]);
  swift_bridgeObjectRetain();
  v19 = v28;
  sub_23DE35510();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v19);
  sub_23DDE3384(&qword_256D07FD0, (uint64_t (*)(uint64_t))sub_23DE2ACD0, MEMORY[0x24BDB96C0]);
  v20 = v29;
  v21 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v20);
  v34 = v21;
  sub_23DE2AE34();
  v22 = MEMORY[0x24BEE0D00];
  sub_23DDEC514(0, (unint64_t *)&qword_254328840);
  sub_23DDE3384(&qword_256D07FC8, (uint64_t (*)(uint64_t))sub_23DE2AE34, MEMORY[0x24BDB9AF8]);
  v23 = v27;
  sub_23DE35534();
  swift_release();
  sub_23DE2AFB8(&qword_256D08018, &qword_256D08010, (unint64_t *)&qword_254328840, v22);
  v24 = v32;
  v25 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  return v25;
}

void sub_23DE2C170(void **a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (v3)
  {
    v12[0] = 0;
    v4 = objc_msgSend(v3, sel_stringValue_, v12);
    v5 = v12[0];
    if (v4)
    {
      v6 = v4;
      v7 = sub_23DE357F8();
      v9 = v8;
      v10 = v5;

      *a2 = v7;
      a2[1] = v9;
    }
    else
    {
      v11 = v12[0];
      sub_23DE35060();

      swift_willThrow();
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t HKDeviceKeyValueStore.setValue<A>(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void *v40;
  uint64_t (*v41)(void);
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  uint64_t (*v49)(void);
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t (*v60)(void);
  id v61;
  id v62;
  id v63;
  uint64_t (*v64)(void);
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  void (*v73)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t (*v81)(void);
  id v82;
  uint64_t v83;
  uint64_t (*v84)(void);
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t (*v95)(void);
  id v96;
  uint64_t v97;
  uint64_t (*v98)(void);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;

  v114 = a3;
  sub_23DE2DE5C(0, &qword_256D08020, MEMORY[0x24BDB9DA0]);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v105 = (char *)&v99 - v8;
  sub_23DDEC46C();
  v101 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v101 + 64);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v102 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v103 = (char *)&v99 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v110 = (char *)&v99 - v14;
  v15 = sub_23DE350FC();
  v111 = *(_QWORD *)(v15 - 8);
  v112 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v104 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23DE35C3C();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v108 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v109 = (char *)&v99 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v99 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v99 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v99 - v29;
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 48);
  if (v31(a1, 1, a4) == 1)
    return sub_23DE2CE0C(a1, a2, v114, v17);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v100 = a1;
  v34 = a1;
  v35 = v33;
  v33(v30, v34, v17);
  if (v31((uint64_t)v30, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v30, v17);
  }
  else if ((swift_dynamicCast() & 1) != 0)
  {
    v37 = v115;
    v36 = v116;
    v38 = (_QWORD *)swift_allocObject();
    v40 = v113;
    v39 = v114;
    v38[2] = v113;
    v38[3] = v37;
    v38[4] = v36;
    v38[5] = a2;
    v38[6] = v39;
    v41 = MEMORY[0x24BDB9E38];
    sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v42 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v115 = sub_23DE354D4();
    sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v41, MEMORY[0x24BDB9E58]);
    v43 = sub_23DE354F8();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v44 = v100;
  v35(v28, v100, v17);
  if (v31((uint64_t)v28, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v17);
  }
  else
  {
    sub_23DDE7B5C(0, (unint64_t *)&qword_254327B98);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v45 = (void *)v115;
      v46 = (_QWORD *)swift_allocObject();
      v48 = v113;
      v47 = v114;
      v46[2] = v113;
      v46[3] = v45;
      v46[4] = a2;
      v46[5] = v47;
      v49 = MEMORY[0x24BDB9E38];
      sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      swift_allocObject();
      v50 = v45;
      v51 = v48;
      swift_bridgeObjectRetain();
      v52 = v50;
      v115 = sub_23DE354D4();
      sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v49, MEMORY[0x24BDB9E58]);
      v53 = sub_23DE354F8();

      swift_release();
      v115 = v53;
      v54 = MEMORY[0x24BDB9AE0];
      sub_23DE2DE5C(0, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_23DE2DBA0((unint64_t *)&qword_256D07D08, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v54, MEMORY[0x24BDB9AF8]);
      v55 = sub_23DE354F8();
      swift_release();

      return v55;
    }
  }
  v35(v25, v44, v17);
  if (v31((uint64_t)v25, 1, a4) != 1)
  {
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_16;
    v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v115);
    v57 = (_QWORD *)swift_allocObject();
    v59 = v113;
    v58 = v114;
    v57[2] = v113;
    v57[3] = v56;
    v57[4] = a2;
    v57[5] = v58;
    v60 = MEMORY[0x24BDB9E38];
    sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v61 = v56;
    v62 = v59;
    swift_bridgeObjectRetain();
    v63 = v61;
    v115 = sub_23DE354D4();
    sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v60, MEMORY[0x24BDB9E58]);
    v43 = sub_23DE354F8();

LABEL_15:
    swift_release();
    v115 = v43;
    v64 = MEMORY[0x24BDB9AE0];
    sub_23DE2DE5C(0, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
    sub_23DE2DBA0((unint64_t *)&qword_256D07D08, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v64, MEMORY[0x24BDB9AF8]);
    v55 = sub_23DE354F8();
    swift_release();
    return v55;
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
LABEL_16:
  v99 = a2;
  v65 = v109;
  v66 = v35;
  ((void (*)(void))v35)();
  v67 = v31((uint64_t)v65, 1, a4);
  v69 = v111;
  v68 = v112;
  if (v67 == 1)
  {
    v70 = v18;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v65, v17);
    v71 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v110, 1, 1, v68);
  }
  else
  {
    v70 = v18;
    v71 = (uint64_t)v110;
    v72 = swift_dynamicCast();
    v73 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56);
    v73(v71, v72 ^ 1u, 1, v68);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v71, 1, v68) != 1)
    {
      v87 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v104, v71, v68);
      v88 = (uint64_t)v103;
      (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v103, v87, v68);
      v73(v88, 0, 1, v68);
      v89 = v102;
      sub_23DE2E08C(v88, v102);
      v90 = (*(unsigned __int8 *)(v101 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
      v91 = swift_allocObject();
      v92 = v113;
      *(_QWORD *)(v91 + 16) = v113;
      sub_23DE2E0D4(v89, v91 + v90);
      v93 = (uint64_t *)(v91 + ((v10 + v90 + 7) & 0xFFFFFFFFFFFFFFF8));
      v94 = v114;
      *v93 = v99;
      v93[1] = v94;
      v95 = MEMORY[0x24BDB9E38];
      sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      swift_allocObject();
      v96 = v92;
      swift_bridgeObjectRetain();
      v115 = sub_23DE354D4();
      sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v95, MEMORY[0x24BDB9E58]);
      v97 = sub_23DE354F8();
      swift_release();
      sub_23DE011DC(v88);
      v115 = v97;
      v98 = MEMORY[0x24BDB9AE0];
      sub_23DE2DE5C(0, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
      sub_23DE2DBA0((unint64_t *)&qword_256D07D08, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v98, MEMORY[0x24BDB9AF8]);
      v55 = sub_23DE354F8();
      swift_release();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v104, v68);
      return v55;
    }
  }
  sub_23DE011DC(v71);
  v74 = v108;
  v66(v108, v100, v17);
  if (v31((uint64_t)v74, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v74, v17);
LABEL_23:
    sub_23DE2DB5C();
    v115 = swift_allocError();
    sub_23DDE2738();
    v85 = v105;
    sub_23DE354A4();
    sub_23DE2DBA0(&qword_256D08030, &qword_256D08020, MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
    v86 = v107;
    v55 = sub_23DE354F8();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v85, v86);
    return v55;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_23;
  v75 = v115;
  v76 = v116;
  v77 = (_QWORD *)swift_allocObject();
  v79 = v113;
  v78 = v114;
  v77[2] = v113;
  v77[3] = v75;
  v80 = v99;
  v77[4] = v76;
  v77[5] = v80;
  v77[6] = v78;
  v81 = MEMORY[0x24BDB9E38];
  sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  sub_23DDEE178(v75, v76);
  v82 = v79;
  swift_bridgeObjectRetain();
  sub_23DDEE178(v75, v76);
  v115 = sub_23DE354D4();
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v81, MEMORY[0x24BDB9E58]);
  v83 = sub_23DE354F8();
  swift_release();
  sub_23DDEE114(v75, v76);
  v115 = v83;
  v84 = MEMORY[0x24BDB9AE0];
  sub_23DE2DE5C(0, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_23DE2DBA0((unint64_t *)&qword_256D07D08, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v84, MEMORY[0x24BDB9AF8]);
  v55 = sub_23DE354F8();
  sub_23DDEE114(v75, v76);
  swift_release();
  return v55;
}

uint64_t sub_23DE2CE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t (*v35)(void);
  id v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t (*v63)(void);
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  unint64_t v80;

  v78 = a3;
  v76 = a2;
  sub_23DE2DE5C(0, &qword_256D08020, MEMORY[0x24BDB9DA0]);
  v69 = *(_QWORD *)(v6 - 8);
  v70 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v67 - v7;
  sub_23DDEC46C();
  v9 = *(_QWORD *)(v8 - 8);
  v74 = v8;
  v75 = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v71 = (uint64_t)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v72 = (char *)&v67 - v12;
  sub_23DDED2C4(0, &qword_256D08040, v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v67 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v73 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v67 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v67 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)&v67 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v30((char *)&v67 - v31, a1, a4);
  sub_23DDEC514(0, (unint64_t *)&qword_254328840);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v32 = (_QWORD *)swift_allocObject();
    v33 = v76;
    v34 = v77;
    v32[2] = v77;
    v32[3] = 0;
    v32[4] = 0;
    v32[5] = v33;
    v32[6] = v78;
    v35 = MEMORY[0x24BDB9E38];
    sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v36 = v34;
    swift_bridgeObjectRetain();
    v79 = (id)sub_23DE354D4();
    v37 = MEMORY[0x24BDB9E58];
  }
  else
  {
    v38 = v77;
    v30(v28, a1, a4);
    sub_23DE2AC30(0, &qword_256D06DF0, (unint64_t *)&qword_254327B98, 0x24BDD16E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if ((swift_dynamicCast() & 1) != 0)
    {

      v39 = (_QWORD *)swift_allocObject();
      v39[2] = v38;
      v39[3] = 0;
      v40 = v78;
      v39[4] = v76;
      v39[5] = v40;
      v35 = MEMORY[0x24BDB9E38];
      sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
      swift_allocObject();
      v41 = v38;
      swift_bridgeObjectRetain();
    }
    else
    {
      v30(v25, a1, a4);
      sub_23DDEC514(0, &qword_2543273B0);
      v42 = swift_dynamicCast();
      v43 = v78;
      if ((v42 & 1) != 0)
      {
        v44 = (_QWORD *)swift_allocObject();
        v44[2] = v38;
        v44[3] = 0;
        v44[4] = v76;
        v44[5] = v43;
        v35 = MEMORY[0x24BDB9E38];
        sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
        swift_allocObject();
        v45 = v38;
        swift_bridgeObjectRetain();
      }
      else
      {
        v30(v22, a1, a4);
        v46 = v74;
        v47 = swift_dynamicCast();
        v48 = v75;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v17, v47 ^ 1u, 1, v46);
        LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v17, 1, v46);
        sub_23DE2E60C((uint64_t)v17);
        if (!(_DWORD)v46)
        {
          v57 = sub_23DE350FC();
          v58 = (uint64_t)v72;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v72, 1, 1, v57);
          v59 = v71;
          sub_23DE2E08C(v58, v71);
          v60 = (*(unsigned __int8 *)(v48 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
          v61 = swift_allocObject();
          *(_QWORD *)(v61 + 16) = v38;
          sub_23DE2E0D4(v59, v61 + v60);
          v62 = (_QWORD *)(v61 + ((v10 + v60 + 7) & 0xFFFFFFFFFFFFFFF8));
          *v62 = v76;
          v62[1] = v43;
          v63 = MEMORY[0x24BDB9E38];
          sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
          swift_allocObject();
          v64 = v38;
          swift_bridgeObjectRetain();
          v79 = (id)sub_23DE354D4();
          sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v63, MEMORY[0x24BDB9E58]);
          v53 = (void *)sub_23DE354F8();
          swift_release();
          sub_23DE011DC(v58);
          goto LABEL_12;
        }
        v30(v73, a1, a4);
        sub_23DDEC514(0, &qword_254327BC8);
        v49 = swift_dynamicCast();
        v50 = v76;
        if ((v49 & 1) == 0)
        {
          sub_23DE2DB5C();
          v79 = (id)swift_allocError();
          sub_23DDE2738();
          v65 = v68;
          sub_23DE354A4();
          sub_23DE2DBA0(&qword_256D08030, &qword_256D08020, MEMORY[0x24BDB9DA0], MEMORY[0x24BDB9DB0]);
          v66 = v70;
          v55 = sub_23DE354F8();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v65, v66);
          return v55;
        }
        sub_23DDEF9D0((uint64_t)v79, v80);
        v51 = swift_allocObject();
        *(_QWORD *)(v51 + 16) = v38;
        *(_OWORD *)(v51 + 24) = xmmword_23DE3A9E0;
        *(_QWORD *)(v51 + 40) = v50;
        *(_QWORD *)(v51 + 48) = v43;
        v35 = MEMORY[0x24BDB9E38];
        sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
        swift_allocObject();
        v52 = v38;
        swift_bridgeObjectRetain();
      }
    }
    v79 = (id)sub_23DE354D4();
    v37 = MEMORY[0x24BDB9E58];
  }
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v35, v37);
  v53 = (void *)sub_23DE354F8();
  swift_release();
LABEL_12:
  v79 = v53;
  v54 = MEMORY[0x24BDB9AE0];
  sub_23DE2DE5C(0, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9AE0]);
  sub_23DE2DBA0((unint64_t *)&qword_256D07D08, &qword_256D07D00, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v54, MEMORY[0x24BDB9AF8]);
  v55 = sub_23DE354F8();
  swift_release();
  return v55;
}

uint64_t HKDeviceKeyValueStore.setString(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v9;
  uint64_t (*v10)(void);
  id v11;
  uint64_t v12;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  v10 = MEMORY[0x24BDB9E38];
  sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v4;
  sub_23DE354D4();
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v10, MEMORY[0x24BDB9E58]);
  v12 = sub_23DE354F8();
  swift_release();
  return v12;
}

uint64_t HKDeviceKeyValueStore.setNumber(_:key:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v7;
  uint64_t (*v8)(void);
  id v9;
  id v10;
  uint64_t v11;

  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v7[5] = a3;
  v8 = MEMORY[0x24BDB9E38];
  sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v9 = a1;
  swift_bridgeObjectRetain();
  v10 = v3;
  sub_23DE354D4();
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v8, MEMORY[0x24BDB9E58]);
  v11 = sub_23DE354F8();
  swift_release();
  return v11;
}

uint64_t HKDeviceKeyValueStore.setBool(_:key:)(char a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD *v7;
  uint64_t (*v8)(void);
  id v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  id v14;
  id v15;

  if (a1 == 2)
  {
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = v3;
    v7[3] = 0;
    v7[4] = a2;
    v7[5] = a3;
    v8 = MEMORY[0x24BDB9E38];
    sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v9 = v3;
    swift_bridgeObjectRetain();
    sub_23DE354D4();
    sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v8, MEMORY[0x24BDB9E58]);
    v10 = sub_23DE354F8();
  }
  else
  {
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, a1 & 1);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v3;
    v12[3] = v11;
    v12[4] = a2;
    v12[5] = a3;
    v13 = MEMORY[0x24BDB9E38];
    sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
    swift_allocObject();
    v14 = v11;
    v15 = v3;
    swift_bridgeObjectRetain();
    sub_23DE354D4();
    sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v13, MEMORY[0x24BDB9E58]);
    v10 = sub_23DE354F8();

  }
  swift_release();
  return v10;
}

uint64_t HKDeviceKeyValueStore.setDate(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  id v14;
  uint64_t v15;
  _QWORD v17[2];

  sub_23DDEC46C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  sub_23DE2E08C(a1, (uint64_t)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v3;
  sub_23DE2E0D4((uint64_t)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  v12 = (_QWORD *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v12 = a2;
  v12[1] = a3;
  v13 = MEMORY[0x24BDB9E38];
  sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v14 = v3;
  swift_bridgeObjectRetain();
  v17[1] = sub_23DE354D4();
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v13, MEMORY[0x24BDB9E58]);
  v15 = sub_23DE354F8();
  swift_release();
  return v15;
}

unint64_t sub_23DE2DB5C()
{
  unint64_t result;

  result = qword_256D08028;
  if (!qword_256D08028)
  {
    result = MEMORY[0x242645660](&unk_23DE3AA7C, &_s13KeyValueErrorON);
    atomic_store(result, (unint64_t *)&qword_256D08028);
  }
  return result;
}

uint64_t sub_23DE2DBA0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_23DE2DE5C(255, a2, a3);
    result = MEMORY[0x242645660](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.setData(_:key:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v9;
  uint64_t (*v10)(void);
  id v11;
  uint64_t v12;

  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  v10 = MEMORY[0x24BDB9E38];
  sub_23DE2DE5C(0, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))MEMORY[0x24BDB9E38]);
  swift_allocObject();
  v11 = v4;
  sub_23DDEE164(a1, a2);
  swift_bridgeObjectRetain();
  sub_23DE354D4();
  sub_23DE2DBA0(&qword_254327348, (unint64_t *)&qword_254327350, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD))v10, MEMORY[0x24BDB9E58]);
  v12 = sub_23DE354F8();
  swift_release();
  return v12;
}

void sub_23DE2DCF8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  _QWORD v15[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  if (a5 >> 60 == 15)
    v10 = 0;
  else
    v10 = (void *)sub_23DE3509C();
  v11 = (void *)sub_23DE357D4();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = sub_23DDEF73C;
  v12[3] = v9;
  v12[4] = a3;
  v15[4] = sub_23DDEF6AC;
  v15[5] = v12;
  v15[0] = MEMORY[0x24BDAC760];
  v15[1] = 1107296256;
  v15[2] = sub_23DE0C16C;
  v15[3] = &block_descriptor_114;
  v13 = _Block_copy(v15);
  v14 = a3;
  swift_release();
  objc_msgSend(v14, sel_setData_forKey_completion_, v10, v11, v13);
  _Block_release(v13);

}

uint64_t sub_23DE2DE50(uint64_t a1, uint64_t a2)
{
  return sub_23DDEEFA4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DE2DCF8);
}

void sub_23DE2DE5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DDE2738();
    v7 = a3(a1, MEMORY[0x24BEE4AE0] + 8, v6, MEMORY[0x24BEE3F20]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_23DE2DEC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  id v19;
  _QWORD aBlock[6];

  sub_23DDEC46C();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  sub_23DE2E08C(a4, (uint64_t)v10);
  v12 = sub_23DE350FC();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  swift_retain();
  v15 = 0;
  if (v14 != 1)
  {
    v15 = (void *)sub_23DE350D8();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  v16 = (void *)sub_23DE357D4();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = sub_23DDEF73C;
  v17[3] = v11;
  v17[4] = a3;
  aBlock[4] = sub_23DDEF6AC;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DE0C16C;
  aBlock[3] = &block_descriptor_104;
  v18 = _Block_copy(aBlock);
  v19 = a3;
  swift_release();
  objc_msgSend(v19, sel_setDate_forKey_completion_, v15, v16, v18);
  _Block_release(v18);

}

uint64_t sub_23DE2E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDEC46C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DE2E0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DDEC46C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DE2E11C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  id v12;
  _QWORD v13[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_retain();
  v9 = (void *)sub_23DE357D4();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = sub_23DDEF73C;
  v10[3] = v8;
  v10[4] = a3;
  v13[4] = sub_23DDEF6AC;
  v13[5] = v10;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = sub_23DE0C16C;
  v13[3] = &block_descriptor_94;
  v11 = _Block_copy(v13);
  v12 = a3;
  swift_release();
  objc_msgSend(v12, sel_setNumber_forKey_completion_, a4, v9, v11);
  _Block_release(v11);

}

void sub_23DE2E248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DE2E11C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_23DE2E258(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  _QWORD v14[6];

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_retain();
  if (a5)
    a5 = (void *)sub_23DE357D4();
  v10 = (void *)sub_23DE357D4();
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = sub_23DDEF73C;
  v11[3] = v9;
  v11[4] = a3;
  v14[4] = sub_23DDEF6AC;
  v14[5] = v11;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = sub_23DE0C16C;
  v14[3] = &block_descriptor_20;
  v12 = _Block_copy(v14);
  v13 = a3;
  swift_release();
  objc_msgSend(v13, sel_setString_forKey_completion_, a5, v10, v12);
  _Block_release(v12);

}

uint64_t sub_23DE2E3AC(uint64_t a1, uint64_t a2)
{
  return sub_23DDEEFA4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23DE2E258);
}

uint64_t objectdestroy_43Tm()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_23DDEC46C();
  v2 = (*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);

  v3 = sub_23DE350FC();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23DE2E488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  sub_23DDEC46C();
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_23DE2DEC8(a1, a2, *(void **)(v2 + 16), v2 + ((v6 + 24) & ~v6));
}

uint64_t _s13KeyValueErrorOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DE2E534 + 4 * byte_23DE3A9F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DE2E554 + 4 * byte_23DE3A9F5[v4]))();
}

_BYTE *sub_23DE2E534(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DE2E554(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE2E55C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE2E564(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DE2E56C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DE2E574(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s13KeyValueErrorOMa()
{
  return &_s13KeyValueErrorON;
}

unint64_t sub_23DE2E594()
{
  unint64_t result;

  result = qword_256D08038;
  if (!qword_256D08038)
  {
    result = MEMORY[0x242645660](&unk_23DE3AA54, &_s13KeyValueErrorON);
    atomic_store(result, (unint64_t *)&qword_256D08038);
  }
  return result;
}

uint64_t sub_23DE2E5E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DE2E60C(uint64_t a1)
{
  uint64_t v2;

  sub_23DDED2C4(0, &qword_256D08040, (void (*)(uint64_t))sub_23DDEC46C);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 != 15)
    sub_23DDEE114(*(_QWORD *)(v0 + 24), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_46Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_53Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void *sub_23DE2E718(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v4 = v3;
  v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    v8 = sub_23DE35E70();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v22 = v4;
      v23 = v7;
      v24 = v7 & 0xC000000000000001;
      v4 = 4;
      do
      {
        v9 = v4 - 4;
        if (v24)
        {
          v10 = (id)MEMORY[0x242644E08](v4 - 4, v7);
          v11 = v4 - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_19;
        }
        else
        {
          v10 = *(id *)(v7 + 8 * v4);
          v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v12 = v8;
        v13 = v10;
        v14 = a3;
        v15 = objc_msgSend(v10, sel_key, v22);
        v16 = sub_23DE357F8();
        v18 = v17;

        a3 = v14;
        v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        v20 = sub_23DE35F54();
        swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_18;

        ++v4;
        v8 = v12;
        v19 = v11 == v12;
        v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_23DE2E8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DE2A564(a1, a2, *(void **)(v2 + 16));
}

void sub_23DE2E8CC(int a1, void *a2)
{
  uint64_t v2;

  sub_23DE2A66C(a1, a2, *(void (**)(void))(v2 + 16));
}

void sub_23DE2E8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DE2A29C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

void sub_23DE2E8E4(void *a1, void *a2)
{
  uint64_t v2;

  sub_23DE2A3B4(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

_QWORD *static HKSharingAuthorizationIdentifier.clinicalSharingIdentifiers.getter()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t i;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t j;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  id v81;
  id v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  BOOL v87;
  id v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  id v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[32];
  id v115;
  void *v116;
  id v117;
  void *v118;
  id v119;
  void *v120;
  id v121;
  void *v122;
  id v123;
  void *v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  id v129;
  void *v130;
  id v131;
  void *v132;
  id v133;
  void *v134;
  id v135;
  void *v136;
  id v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  void *v142;
  id v143;
  void *v144;
  id v145;
  void *v146;
  void *v147;
  _QWORD v148[5];
  id v149;
  void *v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  id v155;
  void *v156;
  id v157;
  void *v158;
  id v159;
  void *v160;
  id v161;
  void *v162;
  id v163;
  void *v164;
  id v165;
  void *v166;

  v0 = (void *)*MEMORY[0x24BDD3348];
  v149 = (id)*MEMORY[0x24BDD3340];
  v150 = v0;
  v1 = (void *)*MEMORY[0x24BDD33C0];
  v151 = (id)*MEMORY[0x24BDD33B8];
  v152 = v1;
  v2 = (void *)*MEMORY[0x24BDD3600];
  v153 = (id)*MEMORY[0x24BDD35B8];
  v154 = v2;
  v3 = (void *)*MEMORY[0x24BDD3678];
  v155 = (id)*MEMORY[0x24BDD3630];
  v156 = v3;
  v4 = (void *)*MEMORY[0x24BDD36A0];
  v157 = (id)*MEMORY[0x24BDD3398];
  v158 = v4;
  v105 = (void *)*MEMORY[0x24BDD36D0];
  v159 = (id)*MEMORY[0x24BDD36C8];
  v160 = v105;
  v107 = (void *)*MEMORY[0x24BDD3668];
  v161 = (id)*MEMORY[0x24BDD36B8];
  v162 = v107;
  v110 = (void *)*MEMORY[0x24BDD3660];
  v163 = (id)*MEMORY[0x24BDD3670];
  v164 = v110;
  v112 = (void *)*MEMORY[0x24BDD3370];
  v165 = (id)*MEMORY[0x24BDD36B0];
  v166 = v112;
  v148[0] = MEMORY[0x24BEE4AF8];
  v5 = v149;
  v6 = v0;
  v7 = v151;
  v8 = v1;
  v9 = v153;
  v10 = v2;
  v11 = v155;
  v12 = v3;
  v13 = v157;
  v14 = v4;
  v15 = v159;
  v16 = v105;
  v17 = v161;
  v18 = v107;
  v19 = v163;
  v20 = v110;
  v21 = v165;
  v22 = v112;
  sub_23DE35DBC();
  sub_23DDE7B5C(0, &qword_256D07988);
  for (i = 4; i != 22; ++i)
  {
    MEMORY[0x242644C10]((id)v148[i + 1]);
    sub_23DE35D98();
    sub_23DE35DC8();
    sub_23DE35DD4();
    sub_23DE35DA4();
  }
  v113 = v148[0];
  type metadata accessor for HKQuantityTypeIdentifier(0);
  swift_arrayDestroy();
  v24 = (void *)*MEMORY[0x24BDD2848];
  v115 = (id)*MEMORY[0x24BDD2840];
  v116 = v24;
  v25 = (void *)*MEMORY[0x24BDD2868];
  v117 = (id)*MEMORY[0x24BDD2850];
  v118 = v25;
  v26 = (void *)*MEMORY[0x24BDD2888];
  v119 = (id)*MEMORY[0x24BDD2880];
  v120 = v26;
  v27 = (void *)*MEMORY[0x24BDD28A8];
  v121 = (id)*MEMORY[0x24BDD28A0];
  v122 = v27;
  v28 = (void *)*MEMORY[0x24BDD28C0];
  v123 = (id)*MEMORY[0x24BDD28B0];
  v124 = v28;
  v97 = (void *)*MEMORY[0x24BDD28E8];
  v125 = (id)*MEMORY[0x24BDD28D0];
  v96 = v125;
  v126 = v97;
  v98 = (void *)*MEMORY[0x24BDD2910];
  v127 = (id)*MEMORY[0x24BDD2900];
  v128 = v98;
  v99 = (void *)*MEMORY[0x24BDD2938];
  v129 = (id)*MEMORY[0x24BDD2930];
  v130 = v99;
  v100 = (void *)*MEMORY[0x24BDD2950];
  v131 = (id)*MEMORY[0x24BDD2948];
  v132 = v100;
  v101 = (void *)*MEMORY[0x24BDD2980];
  v133 = (id)*MEMORY[0x24BDD2960];
  v134 = v101;
  v102 = (void *)*MEMORY[0x24BDD2990];
  v135 = (id)*MEMORY[0x24BDD2988];
  v136 = v102;
  v103 = (void *)*MEMORY[0x24BDD29A8];
  v137 = (id)*MEMORY[0x24BDD2998];
  v138 = v103;
  v104 = (void *)*MEMORY[0x24BDD29B8];
  v139 = (id)*MEMORY[0x24BDD29B0];
  v140 = v104;
  v106 = (void *)*MEMORY[0x24BDD29D8];
  v141 = (id)*MEMORY[0x24BDD29C8];
  v142 = v106;
  v108 = (void *)*MEMORY[0x24BDD2A28];
  v143 = (id)*MEMORY[0x24BDD2A08];
  v144 = v108;
  v109 = (void *)*MEMORY[0x24BDD2A50];
  v145 = (id)*MEMORY[0x24BDD2A38];
  v111 = (void *)*MEMORY[0x24BDD2860];
  v146 = v109;
  v147 = v111;
  v148[0] = MEMORY[0x24BEE4AF8];
  v29 = v115;
  v30 = v24;
  v31 = v117;
  v32 = v25;
  v33 = v119;
  v34 = v26;
  v35 = v121;
  v36 = v27;
  v37 = v123;
  v38 = v28;
  v39 = v125;
  v40 = v97;
  v41 = v127;
  v42 = v98;
  v43 = v129;
  v44 = v99;
  v45 = v131;
  v46 = v100;
  v47 = v133;
  v48 = v101;
  v49 = v135;
  v50 = v102;
  v51 = v137;
  v52 = v103;
  v53 = v139;
  v54 = v104;
  v55 = v141;
  v56 = v106;
  v57 = v143;
  v58 = v108;
  v59 = v145;
  v60 = v109;
  v61 = v111;
  sub_23DE35DBC();
  sub_23DDE7B5C(0, &qword_256D07990);
  for (j = 32; j != 296; j += 8)
  {
    MEMORY[0x242644BF8](*(id *)&v114[j]);
    sub_23DE35D98();
    sub_23DE35DC8();
    sub_23DE35DD4();
    sub_23DE35DA4();
  }
  v63 = v148[0];
  type metadata accessor for HKCategoryTypeIdentifier(0);
  swift_arrayDestroy();
  sub_23DDF7450();
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_23DE3AAC0;
  sub_23DDE7B5C(0, &qword_256D08048);
  *(_QWORD *)(v64 + 32) = MEMORY[0x242644C04]((id)*MEMORY[0x24BDD2AB0]);
  *(_QWORD *)(v64 + 40) = MEMORY[0x242644C04]((id)*MEMORY[0x24BDD2AB8]);
  *(_QWORD *)(v64 + 48) = MEMORY[0x242644C04]((id)*MEMORY[0x24BDD2AC0]);
  *(_QWORD *)(v64 + 56) = MEMORY[0x242644C04]((id)*MEMORY[0x24BDD2AC8]);
  v148[0] = v64;
  sub_23DE35954();
  v65 = v148[0];
  if (v113 < 0 || (v113 & 0x4000000000000000) != 0)
  {
    sub_23DDE7B5C(0, &qword_254327BD8);
    swift_bridgeObjectRetain();
    v66 = sub_23DE35E64();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23DE35F60();
    sub_23DDE7B5C(0, &qword_254327BD8);
    v66 = v113;
  }
  swift_release();
  if ((v63 & 0x8000000000000000) != 0 || (v63 & 0x4000000000000000) != 0)
  {
    sub_23DDE7B5C(0, &qword_254327BD8);
    swift_bridgeObjectRetain();
    v67 = sub_23DE35E64();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23DE35F60();
    sub_23DDE7B5C(0, &qword_254327BD8);
    v67 = v63;
  }
  swift_release();
  v148[0] = v66;
  sub_23DE2F628(v67);
  v68 = v148[0];
  if (v65 >> 62)
  {
    sub_23DDE7B5C(0, &qword_254327BD8);
    swift_bridgeObjectRetain();
    v69 = sub_23DE35E64();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23DE35F60();
    sub_23DDE7B5C(0, &qword_254327BD8);
    v69 = v65;
  }
  swift_bridgeObjectRelease();
  v148[0] = v68;
  sub_23DE2F628(v69);
  v70 = v148[0];
  v71 = (void *)objc_opt_self();
  v72 = objc_msgSend(v71, sel_activitySummaryType);
  v73 = objc_msgSend(v71, sel_electrocardiogramType);
  v148[0] = v70;
  if (v70 >> 62)
  {
    swift_bridgeObjectRetain();
    v86 = sub_23DE35E70();
    v87 = __OFADD__(v86, 2);
    v75 = v86 + 2;
    if (!v87)
    {
LABEL_15:
      sub_23DE2FAAC(v75, 1);
      sub_23DE35954();
      v72 = v72;
      MEMORY[0x242644A00]();
      if (*(_QWORD *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        goto LABEL_16;
      goto LABEL_35;
    }
  }
  else
  {
    v74 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v75 = v74 + 2;
    if (!__OFADD__(v74, 2))
      goto LABEL_15;
  }
  __break(1u);
LABEL_35:
  sub_23DE3596C();
LABEL_16:
  sub_23DE35990();
  sub_23DE35954();
  v76 = v73;
  MEMORY[0x242644A00]();
  if (*(_QWORD *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DE3596C();
  sub_23DE35990();
  sub_23DE35954();
  v77 = v148[0];
  swift_bridgeObjectRelease();

  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    v78 = sub_23DE35E70();
    swift_bridgeObjectRelease();
    if (v78)
      goto LABEL_20;
LABEL_37:
    swift_bridgeObjectRelease();
    v79 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_38;
  }
  v78 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v78)
    goto LABEL_37;
LABEL_20:
  v148[0] = MEMORY[0x24BEE4AF8];
  v79 = v148;
  sub_23DE2F60C(0, v78 & ~(v78 >> 63), 0);
  if (v78 < 0)
  {
    __break(1u);
LABEL_49:
    v79 = sub_23DDF1BD8(0, v79[2] + 1, 1, v79);
    goto LABEL_40;
  }
  v80 = 0;
  v79 = (_QWORD *)v148[0];
  do
  {
    if ((v77 & 0xC000000000000001) != 0)
      v81 = (id)MEMORY[0x242644E08](v80, v77);
    else
      v81 = *(id *)(v77 + 8 * v80 + 32);
    v82 = v81;
    v148[0] = v79;
    v84 = v79[2];
    v83 = v79[3];
    if (v84 >= v83 >> 1)
    {
      sub_23DE2F60C(v83 > 1, v84 + 1, 1);
      v79 = (_QWORD *)v148[0];
    }
    v79[2] = v84 + 1;
    v85 = &v79[7 * v84];
    v85[4] = v82;
    ++v80;
    *(_OWORD *)(v85 + 5) = 0u;
    *(_OWORD *)(v85 + 7) = 0u;
    *(_OWORD *)((char *)v85 + 65) = 0u;
  }
  while (v78 != v80);
  swift_bridgeObjectRelease();
LABEL_38:
  v88 = objc_msgSend(v71, sel_correlationTypeForIdentifier_, *MEMORY[0x24BDD2B08], v96);
  if (!v88)
    goto LABEL_43;
  v71 = v88;
  v78 = (uint64_t)v88;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_49;
LABEL_40:
  v90 = v79[2];
  v89 = v79[3];
  if (v90 >= v89 >> 1)
    v79 = sub_23DDF1BD8((_QWORD *)(v89 > 1), v90 + 1, 1, v79);
  v79[2] = v90 + 1;
  v91 = &v79[7 * v90];
  v91[4] = v71;
  *(_OWORD *)(v91 + 5) = 0u;
  *(_OWORD *)(v91 + 7) = 0u;
  *(_OWORD *)((char *)v91 + 65) = 0u;

LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v79 = sub_23DDF1BD8(0, v79[2] + 1, 1, v79);
  v93 = v79[2];
  v92 = v79[3];
  if (v93 >= v92 >> 1)
    v79 = sub_23DDF1BD8((_QWORD *)(v92 > 1), v93 + 1, 1, v79);
  v79[2] = v93 + 1;
  v94 = &v79[7 * v93];
  *((_OWORD *)v94 + 2) = 0u;
  *((_OWORD *)v94 + 3) = 0u;
  *((_OWORD *)v94 + 4) = 0u;
  *((_BYTE *)v94 + 80) = 4;
  return v79;
}

uint64_t sub_23DE2F5B8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DE272F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DE2F5D4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DE27470(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DE2F5F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DE275F4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DE2F60C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DE27788(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DE2F628(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_23DE35E70();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_23DE35E70();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x242644E14](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_23DE2F7E0(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_23DE35E70();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_23DE35954();
  }
  __break(1u);
  return result;
}

uint64_t sub_23DE2F7E0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_23DE35E70();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_23DE35E70();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_23DE2FB68();
        sub_23DE2FBCC();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_23DE2F9E4(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_23DDE7B5C(0, &qword_254327BD8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_23DE35EB8();
  __break(1u);
  return result;
}

void (*sub_23DE2F9E4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_23DE2FA38(v6, a2, a3);
  return sub_23DE0ADB0;
}

void (*sub_23DE2FA38(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x242644E08](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return _s28PregnancyStateQueryPublisherVwxx;
  }
  __break(1u);
  return result;
}

void _s28PregnancyStateQueryPublisherVwxx(id *a1)
{

}

uint64_t sub_23DE2FAAC(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_23DE35E70();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x242644E14](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

void sub_23DE2FB68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D08050)
  {
    sub_23DDE7B5C(255, &qword_254327BD8);
    v0 = sub_23DE3599C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D08050);
  }
}

unint64_t sub_23DE2FBCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256D08058;
  if (!qword_256D08058)
  {
    sub_23DE2FB68();
    result = MEMORY[0x242645660](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256D08058);
  }
  return result;
}

id HKHealthStore.makeStatisticsCollectionPublisher(sampleType:predicate:options:anchorDate:intervalComponents:dateInterval:receivesUpdates:cacheSettings:debugIdentifier:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, void *a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  void *v11;
  int *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  id v26;

  v18 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v19 = (char *)a9 + v18[7];
  v20 = sub_23DE350FC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a4, v20);
  v21 = (char *)a9 + v18[8];
  v22 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a5, v22);
  sub_23DE00D44(a6, (uint64_t)a9 + v18[9], (uint64_t (*)(_QWORD))sub_23DE2FD64);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  *((_BYTE *)a9 + v18[10]) = a7;
  *(_QWORD *)((char *)a9 + v18[11]) = a8;
  v23 = (_QWORD *)((char *)a9 + v18[12]);
  *v23 = a10;
  v23[1] = a11;
  *(_QWORD *)((char *)a9 + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(0) + 20)) = v11;
  swift_bridgeObjectRetain();
  v24 = v11;
  v25 = a1;
  v26 = a2;
  return a8;
}

uint64_t type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_2543276A8);
}

void sub_23DE2FD64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543270A0[0])
  {
    sub_23DE34F58();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, qword_2543270A0);
  }
}

uint64_t type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(uint64_t a1)
{
  return sub_23DE00E38(a1, qword_254327768);
}

id HKHealthStore.StatisticsCollectionPublisher.Output.updatedStatistics.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

id HKHealthStore.StatisticsCollectionPublisher.Output.statisticsCollection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

uint64_t HKHealthStore.StatisticsCollectionPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE00D44(v1, a1, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
}

id HKHealthStore.StatisticsCollectionPublisher.healthStore.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(0) + 20)));
}

void sub_23DE2FE40(int a1, void *a2, id a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  BOOL v8;
  id v9;
  id v11;
  id v12;
  void *v13;
  char v14;

  if (a2)
  {
    v8 = (*(_BYTE *)(a6
                   + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                            + 40)) & 1) == 0;
    v12 = 0;
    v13 = a2;
    v14 = v8;
    v9 = a2;
    a4(&v12);

  }
  else if (a3)
  {
    v12 = a3;
    v13 = 0;
    v14 = 2;
    v11 = a3;
    a4(&v12);

  }
}

void sub_23DE2FEF4(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

void sub_23DE2FF7C(int a1, void *a2, void *a3, id a4, void (*a5)(id *), uint64_t a6, uint64_t a7)
{
  BOOL v10;
  id v11;
  id v12;
  id v14;
  id v15;
  void *v16;
  char v17;

  if (a3)
  {
    v10 = (*(_BYTE *)(a7
                    + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                             + 40)) & 1) == 0;
    v15 = a2;
    v16 = a3;
    v17 = v10;
    v11 = a2;
    v12 = a3;
    a5(&v15);

  }
  else if (a4)
  {
    v15 = a4;
    v16 = 0;
    v17 = 2;
    v14 = a4;
    a5(&v15);

  }
}

void sub_23DE30048(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  void (*v9)(id, void *, void *, void *);
  id v10;
  id v11;
  id v12;
  id v13;

  v9 = *(void (**)(id, void *, void *, void *))(a1 + 32);
  swift_retain();
  v13 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v9(v13, a3, a4, a5);
  swift_release();

}

uint64_t sub_23DE300EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DE00D44(v1, a1, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
}

id sub_23DE30110(uint64_t a1)
{
  uint64_t v1;

  return *(id *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_23DE30120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_23DE31CD0(&qword_254327760, (uint64_t)&protocol conformance descriptor for HKHealthStore.StatisticsCollectionPublisher);
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE29StatisticsCollectionPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOyAE6OutputVGctFZ_0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  v33 = a3;
  v36 = a2;
  sub_23DE2FD64();
  MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v34 = *((_QWORD *)v6 - 1);
  v7 = *(_QWORD *)(v34 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (void *)*a1;
  v9 = (void *)a1[1];
  v32 = a1[2];
  v10 = objc_allocWithZone(MEMORY[0x24BDD4000]);
  v11 = v9;
  v12 = v8;
  v13 = (void *)sub_23DE350D8();
  v14 = v33;
  v15 = (void *)sub_23DE34FB8();
  v16 = objc_msgSend(v10, sel_initWithSampleType_samplePredicate_options_anchorDate_intervalComponents_, v12, v11, v32, v13, v15);

  sub_23DE00D44((uint64_t)a1, (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
  v17 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v36;
  *(_QWORD *)(v18 + 24) = v14;
  v34 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DE31D14(v34, v18 + v17);
  v41 = sub_23DE31D58;
  v42 = v18;
  v19 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v38 = 1107296256;
  v39 = sub_23DE2FEF4;
  v40 = &block_descriptor_21;
  v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v16, sel_setInitialResultsHandler_, v20);
  _Block_release(v20);
  if (*((_BYTE *)a1 + v6[10]) == 1)
  {
    v21 = v34;
    sub_23DE00D44((uint64_t)a1, v34, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = v36;
    *(_QWORD *)(v22 + 24) = v14;
    sub_23DE31D14(v21, v22 + v17);
    v41 = sub_23DE31DB4;
    v42 = v22;
    aBlock = v19;
    v38 = 1107296256;
    v39 = sub_23DE30048;
    v40 = &block_descriptor_8_0;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_setStatisticsUpdateHandler_, v23);
    _Block_release(v23);
  }
  v24 = v35;
  sub_23DE00D44((uint64_t)a1 + v6[9], v35, (uint64_t (*)(_QWORD))sub_23DE2FD64);
  v25 = sub_23DE34F58();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) != 1)
  {
    v27 = (void *)sub_23DE34F28();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
  }
  objc_msgSend(v16, sel_setDateInterval_, v27);

  objc_msgSend(v16, sel_setCacheSettings_, *(_QWORD *)((char *)a1 + v6[11]));
  v28 = *(void **)((char *)a1 + v6[12] + 8);
  v29 = v16;
  if (v28)
    v28 = (void *)sub_23DE357D4();
  objc_msgSend(v16, sel_setDebugIdentifier_, v28);

  return v16;
}

uint64_t sub_23DE30540(uint64_t a1)
{
  uint64_t result;

  result = sub_23DE31CD0(&qword_254327758, (uint64_t)&protocol conformance descriptor for HKHealthStore.StatisticsCollectionPublisher);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

char *_s29StatisticsCollectionPublisherVwCP(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v10 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
    v11 = v10[7];
    v12 = &v7[v11];
    v13 = (uint64_t)a2 + v11;
    v14 = sub_23DE350FC();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v16 = v4;
    v17 = v9;
    v15(v12, v13, v14);
    v18 = v10[8];
    v19 = &v7[v18];
    v20 = (uint64_t)a2 + v18;
    v21 = sub_23DE34FE8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v22 = v10[9];
    v23 = &v7[v22];
    v24 = (char *)a2 + v22;
    v25 = sub_23DE34F58();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      sub_23DE2FD64();
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v7[v10[10]] = *((_BYTE *)a2 + v10[10]);
    v28 = v10[11];
    v29 = *(char **)((char *)a2 + v28);
    *(_QWORD *)&v7[v28] = v29;
    v30 = v10[12];
    v31 = &v7[v30];
    v32 = (char **)((char *)a2 + v30);
    v33 = v32[1];
    *(_QWORD *)v31 = *v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = *(int *)(a3 + 20);
    v35 = *(char **)((char *)a2 + v34);
    *(_QWORD *)&v7[v34] = v35;
    v36 = v29;
    swift_bridgeObjectRetain();
    v37 = v35;
  }
  return v7;
}

void _s29StatisticsCollectionPublisherVwxx(id *a1, uint64_t a2)
{
  int *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v5 = (char *)a1 + v4[7];
  v6 = sub_23DE350FC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)a1 + v4[8];
  v8 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)a1 + v4[9];
  v10 = sub_23DE34F58();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);

  swift_bridgeObjectRelease();
}

_QWORD *_s29StatisticsCollectionPublisherVwcp(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v9 = v8[7];
  v10 = (char *)a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DE350FC();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14 = v6;
  v15 = v7;
  v13(v10, v11, v12);
  v16 = v8[8];
  v17 = (char *)a1 + v16;
  v18 = a2 + v16;
  v19 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = v8[9];
  v21 = (char *)a1 + v20;
  v22 = (const void *)(a2 + v20);
  v23 = sub_23DE34F58();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_23DE2FD64();
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  *((_BYTE *)a1 + v8[10]) = *(_BYTE *)(a2 + v8[10]);
  v26 = v8[11];
  v27 = *(void **)(a2 + v26);
  *(_QWORD *)((char *)a1 + v26) = v27;
  v28 = v8[12];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = *(int *)(a3 + 20);
  v33 = *(void **)(a2 + v32);
  *(_QWORD *)((char *)a1 + v32) = v33;
  v34 = v27;
  swift_bridgeObjectRetain();
  v35 = v33;
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v13 = v12[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  v17 = v12[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_23DE34FE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  v21 = v12[9];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23DE34F58();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    sub_23DE2FD64();
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  *(_BYTE *)(a1 + v12[10]) = *(_BYTE *)(a2 + v12[10]);
  v30 = v12[11];
  v31 = *(void **)(a1 + v30);
  v32 = *(void **)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v32;
  v33 = v32;

  v34 = v12[12];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v37 = *(int *)(a3 + 20);
  v38 = *(void **)(a2 + v37);
  v39 = *(void **)(a1 + v37);
  *(_QWORD *)(a1 + v37) = v38;
  v40 = v38;

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v7 = v6[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = v6[8];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23DE34FE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = v6[9];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = sub_23DE34F58();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_23DE2FD64();
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(_BYTE *)(a1 + v6[10]) = *(_BYTE *)(a2 + v6[10]);
  *(_QWORD *)(a1 + v6[11]) = *(_QWORD *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwta(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  void *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v9 = v8[7];
  v10 = a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_23DE350FC();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = v8[8];
  v14 = a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_23DE34FE8();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = v8[9];
  v18 = (void *)(a1 + v17);
  v19 = (char *)a2 + v17;
  v20 = sub_23DE34F58();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 40))(v18, v19, v20);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_23DE2FD64();
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  *(_BYTE *)(a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
  v26 = v8[11];
  v27 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = *(_QWORD *)((char *)a2 + v26);

  v28 = v8[12];
  v29 = (_QWORD *)(a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = *(int *)(a3 + 20);
  v34 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)((char *)a2 + v33);

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE30F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t _s29StatisticsCollectionPublisherVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE30F9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23DE31014()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *_s29StatisticsCollectionPublisherV6OutputVwCP(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void _s29StatisticsCollectionPublisherV6OutputVwxx(id *a1)
{

}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwca(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwta(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Output()
{
  return &type metadata for HKHealthStore.StatisticsCollectionPublisher.Output;
}

char *_s29StatisticsCollectionPublisherV13ConfigurationVwCP(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    v10 = a3[7];
    v11 = &a1[v10];
    v12 = (uint64_t)a2 + v10;
    v13 = sub_23DE350FC();
    v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15 = v4;
    v16 = v9;
    v14(v11, v12, v13);
    v17 = a3[8];
    v18 = &v7[v17];
    v19 = (uint64_t)a2 + v17;
    v20 = sub_23DE34FE8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[9];
    v22 = &v7[v21];
    v23 = (char *)a2 + v21;
    v24 = sub_23DE34F58();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_23DE2FD64();
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = a3[11];
    v7[a3[10]] = *((_BYTE *)a2 + a3[10]);
    v28 = *(char **)((char *)a2 + v27);
    *(_QWORD *)&v7[v27] = v28;
    v29 = a3[12];
    v30 = &v7[v29];
    v31 = (char **)((char *)a2 + v29);
    v32 = v31[1];
    *(_QWORD *)v30 = *v31;
    *((_QWORD *)v30 + 1) = v32;
    v33 = v28;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwxx(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (char *)a1 + a2[7];
  v5 = sub_23DE350FC();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[8];
  v7 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (char *)a1 + a2[9];
  v9 = sub_23DE34F58();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);

  return swift_bridgeObjectRelease();
}

_QWORD *_s29StatisticsCollectionPublisherV13ConfigurationVwcp(_QWORD *a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v7;
  a1[2] = *(_QWORD *)(a2 + 16);
  v8 = a3[7];
  v9 = (char *)a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DE350FC();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v13 = v6;
  v14 = v7;
  v12(v9, v10, v11);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = a2 + v15;
  v18 = sub_23DE34FE8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[9];
  v20 = (char *)a1 + v19;
  v21 = (const void *)(a2 + v19);
  v22 = sub_23DE34F58();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_23DE2FD64();
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v26 = *(void **)(a2 + v25);
  *(_QWORD *)((char *)a1 + v25) = v26;
  v27 = a3[12];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = v26;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_23DE34FE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = (void *)(a1 + v20);
  v22 = (void *)(a2 + v20);
  v23 = sub_23DE34F58();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_23DE2FD64();
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v29 = a3[11];
  v30 = *(void **)(a1 + v29);
  v31 = *(void **)(a2 + v29);
  *(_QWORD *)(a1 + v29) = v31;
  v32 = v31;

  v33 = a3[12];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_23DE350FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23DE34FE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[9];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_23DE34F58();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_23DE2FD64();
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v20 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_QWORD *)(a1 + v20) = *(_QWORD *)(a2 + v20);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwta(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  *(_QWORD *)(a1 + 16) = a2[2];
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23DE350FC();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23DE34FE8();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[9];
  v17 = (void *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = sub_23DE34F58();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_23DE2FD64();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  v26 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)((char *)a2 + v25);

  v27 = a3[12];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DE31A64(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DE350FC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = sub_23DE34FE8();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        sub_23DE2FD64();
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23DE31B34(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_23DE350FC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = sub_23DE34FE8();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        sub_23DE2FD64();
        v10 = v13;
        v9 = *(_QWORD *)(v13 - 8);
        v11 = a4[9];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_23DE31BF4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DE350FC();
  if (v0 <= 0x3F)
  {
    sub_23DE34FE8();
    if (v1 <= 0x3F)
    {
      sub_23DE2FD64();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_23DE31CD0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(255);
    result = MEMORY[0x242645660](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DE31D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DE31D58(int a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                                      - 8)
                          + 80);
  sub_23DE2FE40(a1, a2, a3, *(void (**)(id *))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v7 + 32) & ~v7));
}

void sub_23DE31DB4(int a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                                      - 8)
                          + 80);
  sub_23DE2FF7C(a1, a2, a3, a4, *(void (**)(id *))(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v9 + 32) & ~v9));
}

id HKHealthStore.pregnancyStateQueryPublisher()@<X0>(_QWORD *a1@<X8>)
{
  void *v1;

  *a1 = v1;
  return v1;
}

id HKHealthStore.PregnancyStateQueryPublisher.healthStore.getter()
{
  id *v0;

  return *v0;
}

id static HKHealthStore.PregnancyStateQueryPublisher.makeQuery(with:outputHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = objc_allocWithZone(MEMORY[0x24BDD3CB8]);
  v10[4] = sub_23DE323D4;
  v10[5] = v5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DE2FEF4;
  v10[3] = &block_descriptor_22;
  v7 = _Block_copy(v10);
  swift_retain();
  v8 = objc_msgSend(v6, sel_initWithUpdateHandler_, v7);
  _Block_release(v7);
  swift_release();
  return v8;
}

void sub_23DE31F14(uint64_t a1, void *a2, void *a3, void (*a4)(id *))
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = (void *)objc_opt_self();
    v7 = a2;
    v8 = objc_msgSend(v6, sel_sharedBehavior);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, sel_showSensitiveLogItems);

      if (v10)
      {
        if (qword_2543272D8 != -1)
          swift_once();
        v11 = sub_23DE3536C();
        __swift_project_value_buffer(v11, (uint64_t)qword_25432A700);
        v12 = sub_23DE35354();
        v13 = sub_23DE35B1C();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc();
          v15 = (id)swift_slowAlloc();
          v34 = v15;
          *(_DWORD *)v14 = 136446210;
          v16 = sub_23DE36080();
          sub_23DDE8458(v16, v17, (uint64_t *)&v34);
          sub_23DE35C48();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_23DDE0000, v12, v13, "[%{public}s] Pregnancy state returned successfully", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242645720](v15, -1, -1);
          MEMORY[0x242645720](v14, -1, -1);
        }

      }
      v34 = objc_msgSend(v7, sel_state);
      v35 = 0;
      a4(&v34);

      return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
    return;
  }
  v19 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v19)
    goto LABEL_23;
  v20 = v19;
  v21 = objc_msgSend(v19, sel_showSensitiveLogItems);

  if ((v21 & 1) != 0)
  {
    if (qword_2543272D8 != -1)
      swift_once();
    v22 = sub_23DE3536C();
    __swift_project_value_buffer(v22, (uint64_t)qword_25432A700);
    v23 = a3;
    v24 = a3;
    v25 = sub_23DE35354();
    v26 = sub_23DE35B1C();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = (_QWORD *)swift_slowAlloc();
      v33 = (id)swift_slowAlloc();
      v34 = v33;
      *(_DWORD *)v27 = 136446466;
      v29 = sub_23DE36080();
      sub_23DDE8458(v29, v30, (uint64_t *)&v34);
      sub_23DE35C48();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2112;
      if (a3)
      {
        v31 = a3;
        v32 = _swift_stdlib_bridgeErrorToNSError();
        sub_23DE35C48();
      }
      else
      {
        sub_23DE35C48();
        v32 = 0;
      }
      *v28 = v32;

      _os_log_impl(&dword_23DDE0000, v25, v26, "[%{public}s] Pregnancy query returned with error %@", (uint8_t *)v27, 0x16u);
      sub_23DE326E0();
      swift_arrayDestroy();
      MEMORY[0x242645720](v28, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x242645720](v33, -1, -1);
      MEMORY[0x242645720](v27, -1, -1);
    }
    else
    {

    }
  }
  v34 = 0;
  v35 = 0;
  a4(&v34);
}

uint64_t sub_23DE323B0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23DE323D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  sub_23DE31F14(a1, a2, a3, *(void (**)(id *))(v3 + 16));
}

id sub_23DE323DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = objc_allocWithZone(MEMORY[0x24BDD3CB8]);
  v10[4] = sub_23DE32740;
  v10[5] = v5;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_23DE2FEF4;
  v10[3] = &block_descriptor_7_1;
  v7 = _Block_copy(v10);
  swift_retain();
  v8 = objc_msgSend(v6, sel_initWithUpdateHandler_, v7);
  _Block_release(v7);
  swift_release();
  return v8;
}

uint64_t sub_23DE324B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_23DE3269C();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

unint64_t sub_23DE32500(uint64_t a1)
{
  unint64_t result;

  result = sub_23DE32524();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23DE32524()
{
  unint64_t result;

  result = qword_254327078;
  if (!qword_254327078)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.PregnancyStateQueryPublisher, &type metadata for HKHealthStore.PregnancyStateQueryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327078);
  }
  return result;
}

void **_s28PregnancyStateQueryPublisherVwCP(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **_s28PregnancyStateQueryPublisherVwca(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **_s28PregnancyStateQueryPublisherVwta(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s28PregnancyStateQueryPublisherVwet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s28PregnancyStateQueryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.PregnancyStateQueryPublisher()
{
  return &type metadata for HKHealthStore.PregnancyStateQueryPublisher;
}

ValueMetadata *type metadata accessor for HKHealthStore.PregnancyStateQueryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.PregnancyStateQueryPublisher.Configuration;
}

unint64_t sub_23DE3269C()
{
  unint64_t result;

  result = qword_254327080;
  if (!qword_254327080)
  {
    result = MEMORY[0x242645660](&protocol conformance descriptor for HKHealthStore.PregnancyStateQueryPublisher, &type metadata for HKHealthStore.PregnancyStateQueryPublisher);
    atomic_store(result, (unint64_t *)&qword_254327080);
  }
  return result;
}

void sub_23DE326E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254327098)
  {
    sub_23DDF9EE4();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254327098);
  }
}

uint64_t Calendar.dayIndex(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_23DE351A4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DE350FC();
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  return sub_23DE356CC();
}

uint64_t Calendar.numberOfDaysPerWeek.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v0 = sub_23DE3518C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCF278], v0);
  v4 = sub_23DE35150();
  v6 = v5;
  v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((v8 & 1) != 0)
    return 7;
  result = v6 - v4;
  if (__OFSUB__(v6, v4))
  {
    __break(1u);
    return 7;
  }
  return result;
}

uint64_t Calendar.numberOfDaysInMonth(containing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, _QWORD, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t result;
  uint64_t v14;

  v0 = sub_23DE3518C();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v14 - v5;
  v7 = *(void (**)(char *, _QWORD, uint64_t))(v1 + 104);
  v7((char *)&v14 - v5, *MEMORY[0x24BDCF220], v0);
  v7(v4, *MEMORY[0x24BDCF250], v0);
  v8 = sub_23DE35180();
  v10 = v9;
  LOBYTE(v7) = v11;
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v6, v0);
  result = 0;
  if ((v7 & 1) == 0)
  {
    result = v10 - v8;
    if (__OFSUB__(v10, v8))
      __break(1u);
  }
  return result;
}

uint64_t Calendar.endOfDay(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, _QWORD, uint64_t);
  void (*v18)(char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v3 = sub_23DE3518C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DDF8768(0, (unint64_t *)&qword_254328878, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v21 - v8;
  v10 = sub_23DE350FC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21 - v15;
  v17 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v17(v6, *MEMORY[0x24BDCF220], v3);
  v21 = v2;
  sub_23DE35174();
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v6, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23DE011DC((uint64_t)v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v22, 1, 1, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    sub_23DE35144();
    v17(v6, *MEMORY[0x24BDCF260], v3);
    sub_23DE35174();
    v18(v6, v3);
    v20 = *(void (**)(char *, uint64_t))(v11 + 8);
    v20(v14, v10);
    return ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
  }
}

uint64_t Calendar.firstDateOfTheYear(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DDF8768(0, &qword_254327EA0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v21 - v4;
  sub_23DDF8768(0, &qword_256D080C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v2);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - v7;
  v9 = sub_23DE34FE8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DE3518C();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *MEMORY[0x24BDCF240], v13);
  sub_23DE35198();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v17 = sub_23DE351A4();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v8, v1, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v8, 0, 1, v17);
  v19 = sub_23DE351B0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  sub_23DE34FDC();
  sub_23DE34FD0();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t Calendar.numberOfDaysBetweenInclusive(_:and:)()
{
  uint64_t result;
  BOOL v1;

  result = Calendar.comparisonNumberOfDaysBetweenInclusive(_:and:)();
  if (result < 0)
  {
    v1 = __OFSUB__(0, result);
    result = -result;
    if (v1)
      goto LABEL_6;
  }
  v1 = __OFADD__(result++, 1);
  if (v1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
  }
  return result;
}

uint64_t Calendar.comparisonNumberOfDaysBetweenInclusive(_:and:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v0 = sub_23DE34FE8();
  v18 = *(_QWORD *)(v0 - 8);
  v19 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23DE350FC();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  sub_23DE35144();
  sub_23DE35144();
  sub_23DDF8768(0, &qword_256D080C8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF290], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v10 = sub_23DE3518C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_23DE388B0;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v11 + 104))(v13 + v12, *MEMORY[0x24BDCF220], v10);
  sub_23DE330C8(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_23DE3515C();
  swift_bridgeObjectRelease();
  v14 = sub_23DE34FC4();
  LOBYTE(v13) = v15;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v19);
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v16(v9, v3);
  if ((v13 & 1) != 0)
    return 0;
  else
    return v14;
}

uint64_t sub_23DE330C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_23DE3518C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_23DE3331C();
    v10 = sub_23DE35CF0();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_23DE3338C(&qword_256D080D8, MEMORY[0x24BDCF2A8]);
      v14 = sub_23DE35744();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_23DE3338C(&qword_256D080E0, MEMORY[0x24BDCF2C0]);
          v20 = sub_23DE357C8();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

void sub_23DE3331C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D080D0)
  {
    sub_23DE3518C();
    sub_23DE3338C(&qword_256D080D8, MEMORY[0x24BDCF2A8]);
    v0 = sub_23DE35CFC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D080D0);
  }
}

uint64_t sub_23DE3338C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23DE3518C();
    result = MEMORY[0x242645660](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DE333CC(uint64_t a1)
{
  sub_23DE333F4(a1, (uint64_t)sub_23DE34940, (void (*)(uint64_t, uint64_t))sub_23DE048A4);
}

void sub_23DE333E0(uint64_t a1)
{
  sub_23DE333F4(a1, (uint64_t)sub_23DE34940, (void (*)(uint64_t, uint64_t))sub_23DE048C8);
}

void sub_23DE333F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  os_unfair_lock_s *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(_QWORD *);
  _QWORD v14[9];

  v14[8] = a1;
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 16) + 16);
  os_unfair_lock_lock(v7);
  if (*(_BYTE *)(v3 + 25) == 1)
  {
    swift_beginAccess();
    v8 = *(_QWORD *)(v3 + 40);
    v9 = *(unsigned __int8 *)(v3 + 48);
    swift_beginAccess();
    *(_QWORD *)(v3 + 56) = a1;
    sub_23DDF2594(v8, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v7);
    MEMORY[0x24BDAC7A8](v10);
    if (v9)
    {
      if (v9 != 1)
        return;
      a3(v8, a2);
      v11 = v8;
      v12 = 1;
    }
    else
    {
      v14[0] = a1;
      v13 = *(void (**)(_QWORD *))(*(_QWORD *)v8 + 104);
      swift_retain();
      v13(v14);
      sub_23DDF25E8(v8, 0);
      v11 = v8;
      v12 = 0;
    }
    sub_23DDF25E8(v11, v12);
  }
  else
  {
    os_unfair_lock_unlock(v7);
  }
}

void sub_23DE33560(void *a1, unsigned __int8 a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t v6;
  int v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void (*v13)(void **);
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned __int8 v17;

  v16 = a1;
  v17 = a2;
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v5);
  if (*(_BYTE *)(v2 + 25) == 1)
  {
    swift_beginAccess();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *(unsigned __int8 *)(v2 + 40);
    swift_beginAccess();
    v8 = *(void **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = a1;
    v9 = *(_BYTE *)(v2 + 56);
    *(_BYTE *)(v2 + 56) = a2;
    sub_23DDF2594(v6, v7);
    sub_23DE34790(a1, a2);
    sub_23DE347B4(v8, v9);
    os_unfair_lock_unlock(v5);
    MEMORY[0x24BDAC7A8](v10);
    if (v7)
    {
      if (v7 != 1)
        return;
      sub_23DE343C0(v6, (void (*)(uint64_t))sub_23DE347CC);
      v11 = v6;
      v12 = 1;
    }
    else
    {
      v14 = a1;
      v15 = a2;
      v13 = *(void (**)(void **))(*(_QWORD *)v6 + 104);
      swift_retain();
      v13(&v14);
      sub_23DDF25E8(v6, 0);
      v11 = v6;
      v12 = 0;
    }
    sub_23DDF25E8(v11, v12);
  }
  else
  {
    os_unfair_lock_unlock(v5);
  }
}

uint64_t sub_23DE336E4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 48) = a1;
  *(_BYTE *)(v2 + 56) = a2;
  sub_23DDE9F28();
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(_QWORD *)(v2 + 32) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 64) = v4;
  *(_BYTE *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 24) = 16777472;
  return v2;
}

uint64_t sub_23DE33744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_23DDF252C(v3, (uint64_t)v5);
      __swift_project_boxed_opaque_existential_0(v5, v5[3]);
      sub_23DE35408();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_23DDF25E8(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  sub_23DE347B4(*(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23DE33818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_23DDF252C(v3, (uint64_t)v5);
      __swift_project_boxed_opaque_existential_0(v5, v5[3]);
      sub_23DE35408();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_23DE04C40(*(id *)(v0 + 32));
  sub_23DDF25E8(*(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HKHealthStore.cloudSyncStatusPublisher()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  sub_23DE33A74();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2543281B0 != -1)
    swift_once();
  v6 = qword_2543287C0 + 16;
  v7 = (os_unfair_lock_s *)(qword_2543287C0 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(qword_2543287C0 + 24));
  sub_23DE33BF4(v6, v0, &v11);
  os_unfair_lock_unlock(v7);
  sub_23DE33B08(0);
  sub_23DE33B78();
  sub_23DDE3384(&qword_254328718, (uint64_t (*)(uint64_t))sub_23DE33B08, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
  sub_23DE35504();
  sub_23DDE3384(&qword_2543287B0, (uint64_t (*)(uint64_t))sub_23DE33A74, MEMORY[0x24BDB94C8]);
  v8 = sub_23DE354F8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

void sub_23DE33A74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543287B8)
  {
    sub_23DE33B08(255);
    sub_23DE33B78();
    sub_23DDE3384(&qword_254328718, (uint64_t (*)(uint64_t))sub_23DE33B08, (uint64_t)&protocol conformance descriptor for StreamPublisher<A, B>);
    v0 = sub_23DE35384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543287B8);
  }
}

void sub_23DE33B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_254328720[0])
  {
    v2 = sub_23DDE7B5C(255, &qword_2543287C8);
    v5 = type metadata accessor for CloudSyncStatusPublisherImpl(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, qword_254328720);
  }
}

uint64_t type metadata accessor for CloudSyncStatusPublisherImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudSyncStatusPublisherImpl);
}

void sub_23DE33B78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254328820)
  {
    sub_23DDE7B5C(255, (unint64_t *)&qword_2543287D0);
    sub_23DDE2738();
    v0 = sub_23DE36044();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254328820);
  }
}

id sub_23DE33BF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v5;
  id result;
  uint64_t v7;
  _QWORD *v8;

  v5 = *(void **)(*(_QWORD *)a1 + 16);
  result = objc_msgSend(v5, sel_objectForKey_, a2);
  v7 = (uint64_t)result;
  if (!result)
  {
    sub_23DE33B08(0);
    v8 = (_QWORD *)swift_allocObject();
    v8[10] = a2;
    v8[11] = 0;
    v8[13] = 0;
    v8[14] = 0;
    v8[12] = 0;
    v7 = sub_23DE336E4(0, 255);
    result = objc_msgSend(v5, sel_setObject_forKey_, v7, a2);
  }
  *a3 = v7;
  return result;
}

uint64_t sub_23DE33CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[10] = a1;
  v6[11] = 0;
  v6[12] = 0;
  v6[13] = a2;
  v6[14] = a3;
  return sub_23DE336E4(0, 255);
}

id sub_23DE33D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  unsigned __int8 v3;

  v2 = *(void **)a1;
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 8) = v3;
  return sub_23DE34790(v2, v3);
}

uint64_t HKHealthStore._cloudSyncStatusPublisher<A>(test_observerHook:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  _QWORD v15[2];

  v7 = type metadata accessor for CloudSyncStatusPublisherImpl(255, a3, a3, a4);
  sub_23DE33B78();
  MEMORY[0x242645660](&protocol conformance descriptor for StreamPublisher<A, B>, v7);
  v8 = sub_23DE35384();
  v15[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v15 - v9;
  v11 = (_QWORD *)swift_allocObject();
  v11[10] = v4;
  v11[11] = 0;
  v11[12] = 0;
  v11[13] = a1;
  v11[14] = a2;
  v15[1] = sub_23DE336E4(0, 255);
  v12 = v4;
  sub_23DE33EFC(a1);
  sub_23DE35504();
  swift_release();
  MEMORY[0x242645660](MEMORY[0x24BDB94C8], v8);
  v13 = sub_23DE354F8();
  (*(void (**)(char *, uint64_t))(v15[0] + 8))(v10, v8);
  return v13;
}

uint64_t sub_23DE33E84()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for PublisherCache();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(), sel_weakToWeakObjectsMapTable);
  sub_23DE349A0();
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  qword_2543287C0 = result;
  return result;
}

uint64_t sub_23DE33EFC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_23DE33F0C()
{
  return swift_initClassMetadata2();
}

void sub_23DE33F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void (*v14)(id);
  id v15;

  if (!v4[11])
  {
    v5 = v4;
    type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate(0, *(_QWORD *)(*v4 + 408), a3, a4);
    v6 = swift_retain();
    v10 = sub_23DE34388(v6, v7, v8, v9);
    swift_release();
    v11 = (void *)v5[12];
    v5[12] = v10;
    v15 = v10;

    v12 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithHealthStore_delegate_, v5[10], v15);
    v13 = v12;
    v14 = (void (*)(id))v5[13];
    if (v14)
      v14(v12);
    v5[11] = v13;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v5[11])
    {
      objc_msgSend((id)swift_unknownObjectRetain(), sel_startObservingSyncStatus);
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();

  }
}

uint64_t sub_23DE34070()
{
  return swift_weakLoadStrong();
}

void sub_23DE34080(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  sub_23DE3469C(v7);

}

void sub_23DE340E4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v8 = a4;
  v7 = a1;
  sub_23DE34704(v8);

}

void sub_23DE3414C()
{
  sub_23DE34764();
}

id sub_23DE34168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), a3, a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t sub_23DE341B4()
{
  return swift_weakDestroy();
}

uint64_t sub_23DE341C4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return sub_23DE34930(*(_QWORD *)(v0 + 104));
}

uint64_t sub_23DE341F0()
{
  uint64_t v0;

  v0 = sub_23DE33744();

  swift_unknownObjectRelease();
  sub_23DE34930(*(_QWORD *)(v0 + 104));
  return v0;
}

uint64_t sub_23DE34234()
{
  sub_23DE341F0();
  return swift_deallocClassInstance();
}

void sub_23DE34250()
{
  sub_23DE348D8();
}

void sub_23DE34258()
{
  sub_23DE34904();
}

uint64_t sub_23DE3427C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CloudSyncStatusPublisherImpl.CloudDelegate);
}

uint64_t sub_23DE342C8()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PublisherCache()
{
  return objc_opt_self();
}

id sub_23DE3430C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  objc_super v6;

  v1 = *MEMORY[0x24BEE4EA0] & *v0;
  swift_weakInit();
  swift_weakAssign();
  v4 = (objc_class *)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate(0, *(_QWORD *)(v1 + 80), v2, v3);
  v6.receiver = v0;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_init);
}

id sub_23DE34388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate(0, *(_QWORD *)(v4 + 80), a3, a4));
  return sub_23DE3430C();
}

uint64_t sub_23DE343C0(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = v2;
  v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_23DE35C9C();
    sub_23DE34820(0);
    sub_23DDE3384(&qword_256D08160, (uint64_t (*)(uint64_t))sub_23DE34820, (uint64_t)&unk_23DE384A0);
    result = sub_23DE35A50();
    v5 = v22;
    v21 = v23;
    v7 = v24;
    v8 = v25;
    v9 = v26;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v21 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v8 = 0;
  }
  v20 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v16 = v8;
    if ((v5 & 0x8000000000000000) == 0)
      break;
    if (!sub_23DE35CC0())
      return sub_23DDF5088();
    sub_23DE34820(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = v27;
    swift_unknownObjectRelease();
    if (!v27)
      return sub_23DDF5088();
LABEL_10:
    a2(v15);
    result = swift_release();
    if (v3)
      return sub_23DDF5088();
  }
  if (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v8 << 6);
LABEL_9:
    v15 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v14);
    swift_retain();
    if (!v15)
      return sub_23DDF5088();
    goto LABEL_10;
  }
  ++v8;
  if (!__OFADD__(v16, 1))
  {
    if (v8 >= v20)
      return sub_23DDF5088();
    v17 = *(_QWORD *)(v21 + 8 * v8);
    if (!v17)
    {
      v18 = v16 + 2;
      if (v16 + 2 >= v20)
        return sub_23DDF5088();
      v17 = *(_QWORD *)(v21 + 8 * v18);
      if (v17)
        goto LABEL_22;
      v18 = v16 + 3;
      if (v16 + 3 >= v20)
        return sub_23DDF5088();
      v17 = *(_QWORD *)(v21 + 8 * v18);
      if (v17)
        goto LABEL_22;
      v18 = v16 + 4;
      if (v16 + 4 >= v20)
        return sub_23DDF5088();
      v17 = *(_QWORD *)(v21 + 8 * v18);
      if (v17)
      {
LABEL_22:
        v8 = v18;
      }
      else
      {
        v8 = v16 + 5;
        if (v16 + 5 >= v20)
          return sub_23DDF5088();
        v17 = *(_QWORD *)(v21 + 8 * v8);
        if (!v17)
        {
          v19 = v16 + 6;
          while (v20 != v19)
          {
            v17 = *(_QWORD *)(v21 + 8 * v19++);
            if (v17)
            {
              v8 = v19 - 1;
              goto LABEL_23;
            }
          }
          return sub_23DDF5088();
        }
      }
    }
LABEL_23:
    v9 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DE3469C(void *a1)
{
  uint64_t result;
  id v3;

  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = a1;
    sub_23DE33560(a1, 0);

    return swift_release();
  }
  return result;
}

void sub_23DE34704(void *a1)
{
  id v2;

  if (swift_weakLoadStrong())
  {
    v2 = a1;
    sub_23DE33560(a1, 1u);
    swift_release();

  }
}

void sub_23DE34764()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_23DE34790(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_23DE347A8(a1);
  return a1;
}

id sub_23DE347A8(id a1)
{
  return a1;
}

void sub_23DE347B4(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_23DDEF85C(a1);
}

uint64_t sub_23DE347CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  char v6;

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *v2;
  LOBYTE(v2) = *((_BYTE *)v2 + 8);
  v5 = v3;
  v6 = (char)v2;
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 104))(&v5);
}

void sub_23DE34820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_256D08150)
  {
    sub_23DE34884();
    v3 = type metadata accessor for StreamConduitBase(a1, v2, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_256D08150);
  }
}

void sub_23DE34884()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D08158)
  {
    sub_23DE33B78();
    v0 = sub_23DE35C3C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D08158);
  }
}

void sub_23DE348D8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_23DE34904()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23DE34930(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23DE34940(uint64_t a1)
{
  return sub_23DE34954(a1);
}

uint64_t sub_23DE34954(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = **(_QWORD **)(v1 + 16);
  return (*(uint64_t (**)(uint64_t *))(*(_QWORD *)a1 + 104))(&v3);
}

void sub_23DE349A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2543287F0)
  {
    type metadata accessor for PublisherCache();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DE35D80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2543287F0);
  }
}

uint64_t static DayIndex.+/- infix(_:_:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t);
  uint64_t result;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  v28 = a1;
  sub_23DE34C44();
  v2 = v1;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v27 - v6;
  v8 = sub_23DE356E4();
  v9 = *(_QWORD **)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v27 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v27 - v16;
  sub_23DE356C0();
  sub_23DE356A8();
  sub_23DE356D8();
  v18 = (void (*)(char *, uint64_t))v9[1];
  v18(v12, v8);
  sub_23DE06868();
  result = sub_23DE3578C();
  if ((result & 1) != 0)
  {
    v20 = &v7[*(int *)(v2 + 48)];
    v21 = (void (*)(char *, char *, uint64_t))v9[4];
    v21(v7, v17, v8);
    v21(v20, v15, v8);
    v22 = &v5[*(int *)(v2 + 48)];
    v23 = (void (*)(char *, char *, uint64_t))v9[2];
    v23(v5, v7, v8);
    v23(v22, v20, v8);
    v24 = v28;
    v21(v28, v5, v8);
    v18(v22, v8);
    v25 = &v5[*(int *)(v2 + 48)];
    v21(v5, v7, v8);
    v21(v25, v20, v8);
    sub_23DE34CA8();
    v21(&v24[*(int *)(v26 + 36)], v25, v8);
    return ((uint64_t (*)(char *, uint64_t))v18)(v5, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23DE34C44()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256D08168)
  {
    sub_23DE356E4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256D08168);
  }
}

void sub_23DE34CA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256D08170)
  {
    sub_23DE356E4();
    sub_23DE06868();
    v0 = sub_23DE35AC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256D08170);
  }
}

uint64_t static Range<>.+/- infix(_:_:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v25;
  char *v26;

  v26 = a1;
  sub_23DE34C44();
  v2 = v1;
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v25 - v6;
  v8 = sub_23DE356E4();
  v9 = *(_QWORD **)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v25 - v13;
  sub_23DE356C0();
  sub_23DE34CA8();
  v16 = v15;
  sub_23DE356A8();
  sub_23DE06868();
  if ((sub_23DE3578C() & 1) != 0)
  {
    v17 = &v7[*(int *)(v2 + 48)];
    v18 = (void (*)(char *, char *, uint64_t))v9[4];
    v18(v7, v14, v8);
    v18(v17, v12, v8);
    v19 = &v5[*(int *)(v2 + 48)];
    v20 = (void (*)(char *, char *, uint64_t))v9[2];
    v20(v5, v7, v8);
    v20(v19, v17, v8);
    v21 = v26;
    v18(v26, v5, v8);
    v22 = (void (*)(char *, uint64_t))v9[1];
    v22(v19, v8);
    v23 = &v5[*(int *)(v2 + 48)];
    v18(v5, v7, v8);
    v18(v23, v17, v8);
    v18(&v21[*(int *)(v16 + 36)], v23, v8);
    return ((uint64_t (*)(char *, uint64_t))v22)(v5, v8);
  }
  else
  {
    __break(1u);
    return sub_23DE34F10();
  }
}

uint64_t sub_23DE34F10()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t sub_23DE34F1C()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_23DE34F28()
{
  return MEMORY[0x24BDCB810]();
}

uint64_t sub_23DE34F34()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_23DE34F40()
{
  return MEMORY[0x24BDCB840]();
}

uint64_t sub_23DE34F4C()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_23DE34F58()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_23DE34F64()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_23DE34F70()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_23DE34F7C()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_23DE34F88()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_23DE34F94()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_23DE34FA0()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_23DE34FAC()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_23DE34FB8()
{
  return MEMORY[0x24BDCBCA0]();
}

uint64_t sub_23DE34FC4()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t sub_23DE34FD0()
{
  return MEMORY[0x24BDCBD00]();
}

uint64_t sub_23DE34FDC()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_23DE34FE8()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_23DE34FF4()
{
  return MEMORY[0x24BDCBEC0]();
}

uint64_t sub_23DE35000()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_23DE3500C()
{
  return MEMORY[0x24BDCD280]();
}

uint64_t sub_23DE35018()
{
  return MEMORY[0x24BDCD288]();
}

uint64_t sub_23DE35024()
{
  return MEMORY[0x24BDCD290]();
}

uint64_t sub_23DE35030()
{
  return MEMORY[0x24BDCD298]();
}

uint64_t sub_23DE3503C()
{
  return MEMORY[0x24BDCD2A8]();
}

uint64_t sub_23DE35048()
{
  return MEMORY[0x24BDCD2B8]();
}

uint64_t sub_23DE35054()
{
  return MEMORY[0x24BDCD2C0]();
}

uint64_t sub_23DE35060()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23DE3506C()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_23DE35078()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_23DE35084()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_23DE35090()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_23DE3509C()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_23DE350A8()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_23DE350B4()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_23DE350C0()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_23DE350CC()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_23DE350D8()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_23DE350E4()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_23DE350F0()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_23DE350FC()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23DE35108()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_23DE35114()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23DE35120()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t sub_23DE3512C()
{
  return MEMORY[0x24BDCEC90]();
}

uint64_t sub_23DE35138()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23DE35144()
{
  return MEMORY[0x24BDCEFC8]();
}

uint64_t sub_23DE35150()
{
  return MEMORY[0x24BDCEFF8]();
}

uint64_t sub_23DE3515C()
{
  return MEMORY[0x24BDCF040]();
}

uint64_t sub_23DE35168()
{
  return MEMORY[0x24BDCF150]();
}

uint64_t sub_23DE35174()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t sub_23DE35180()
{
  return MEMORY[0x24BDCF180]();
}

uint64_t sub_23DE3518C()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t sub_23DE35198()
{
  return MEMORY[0x24BDCF2D0]();
}

uint64_t sub_23DE351A4()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23DE351B0()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_23DE351BC()
{
  return MEMORY[0x24BDF5C78]();
}

uint64_t sub_23DE351C8()
{
  return MEMORY[0x24BDF5CC8]();
}

uint64_t sub_23DE351D4()
{
  return MEMORY[0x24BDF5CD8]();
}

uint64_t sub_23DE351E0()
{
  return MEMORY[0x24BDF5CF8]();
}

uint64_t sub_23DE351EC()
{
  return MEMORY[0x24BDF5D10]();
}

uint64_t sub_23DE351F8()
{
  return MEMORY[0x24BDF5D30]();
}

uint64_t sub_23DE35204()
{
  return MEMORY[0x24BDF5DF0]();
}

uint64_t sub_23DE35210()
{
  return MEMORY[0x24BDF5E88]();
}

uint64_t sub_23DE3521C()
{
  return MEMORY[0x24BDF5E90]();
}

uint64_t sub_23DE35228()
{
  return MEMORY[0x24BDF5FC8]();
}

uint64_t sub_23DE35234()
{
  return MEMORY[0x24BEE5CC0]();
}

uint64_t sub_23DE35240()
{
  return MEMORY[0x24BEE5CC8]();
}

uint64_t sub_23DE3524C()
{
  return MEMORY[0x24BEE5CF8]();
}

uint64_t sub_23DE35258()
{
  return MEMORY[0x24BEE5D18]();
}

uint64_t sub_23DE35264()
{
  return MEMORY[0x24BEE5D28]();
}

uint64_t sub_23DE35270()
{
  return MEMORY[0x24BEE5D38]();
}

uint64_t sub_23DE3527C()
{
  return MEMORY[0x24BEE5D68]();
}

uint64_t sub_23DE35288()
{
  return MEMORY[0x24BEE5D80]();
}

uint64_t sub_23DE35294()
{
  return MEMORY[0x24BEE5D88]();
}

uint64_t sub_23DE352A0()
{
  return MEMORY[0x24BEE5DD8]();
}

uint64_t sub_23DE352AC()
{
  return MEMORY[0x24BEE5DE8]();
}

uint64_t sub_23DE352B8()
{
  return MEMORY[0x24BEE5DF0]();
}

uint64_t sub_23DE352C4()
{
  return MEMORY[0x24BEE5E00]();
}

uint64_t sub_23DE352D0()
{
  return MEMORY[0x24BEE72A8]();
}

uint64_t sub_23DE352DC()
{
  return MEMORY[0x24BEE72B0]();
}

uint64_t sub_23DE352E8()
{
  return MEMORY[0x24BEE72C8]();
}

uint64_t sub_23DE352F4()
{
  return MEMORY[0x24BEE72F0]();
}

uint64_t sub_23DE35300()
{
  return MEMORY[0x24BEE7338]();
}

uint64_t sub_23DE3530C()
{
  return MEMORY[0x24BEE7350]();
}

uint64_t sub_23DE35318()
{
  return MEMORY[0x24BEE5E28]();
}

uint64_t sub_23DE35324()
{
  return MEMORY[0x24BEE73B0]();
}

uint64_t sub_23DE35330()
{
  return MEMORY[0x24BEE5E50]();
}

uint64_t sub_23DE3533C()
{
  return MEMORY[0x24BEE5E58]();
}

uint64_t sub_23DE35348()
{
  return MEMORY[0x24BEE7448]();
}

uint64_t sub_23DE35354()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23DE35360()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23DE3536C()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23DE35378()
{
  return MEMORY[0x24BDB9410]();
}

uint64_t sub_23DE35384()
{
  return MEMORY[0x24BDB94B8]();
}

uint64_t sub_23DE35390()
{
  return MEMORY[0x24BDB94D0]();
}

uint64_t sub_23DE3539C()
{
  return MEMORY[0x24BDB9520]();
}

uint64_t sub_23DE353A8()
{
  return MEMORY[0x24BDB96B0]();
}

uint64_t sub_23DE353B4()
{
  return MEMORY[0x24BDB97E8]();
}

uint64_t sub_23DE353C0()
{
  return MEMORY[0x24BDB98B8]();
}

uint64_t sub_23DE353CC()
{
  return MEMORY[0x24BDB98E0]();
}

uint64_t sub_23DE353D8()
{
  return MEMORY[0x24BDB9960]();
}

uint64_t sub_23DE353E4()
{
  return MEMORY[0x24BDB9A28]();
}

uint64_t sub_23DE353F0()
{
  return MEMORY[0x24BDB9A30]();
}

uint64_t sub_23DE353FC()
{
  return MEMORY[0x24BDB9A38]();
}

uint64_t sub_23DE35408()
{
  return MEMORY[0x24BDB9A50]();
}

uint64_t sub_23DE35414()
{
  return MEMORY[0x24BDB9A68]();
}

uint64_t sub_23DE35420()
{
  return MEMORY[0x24BDB9A78]();
}

uint64_t sub_23DE3542C()
{
  return MEMORY[0x24BDB9A90]();
}

uint64_t sub_23DE35438()
{
  return MEMORY[0x24BDB9AB0]();
}

uint64_t sub_23DE35444()
{
  return MEMORY[0x24BDB9AB8]();
}

uint64_t sub_23DE35450()
{
  return MEMORY[0x24BDB9AC0]();
}

uint64_t sub_23DE3545C()
{
  return MEMORY[0x24BDB9AE0]();
}

uint64_t sub_23DE35468()
{
  return MEMORY[0x24BDB9B20]();
}

uint64_t sub_23DE35474()
{
  return MEMORY[0x24BDB9B38]();
}

uint64_t sub_23DE35480()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t sub_23DE3548C()
{
  return MEMORY[0x24BDB9B80]();
}

uint64_t sub_23DE35498()
{
  return MEMORY[0x24BDB9D90]();
}

uint64_t sub_23DE354A4()
{
  return MEMORY[0x24BDB9D98]();
}

uint64_t sub_23DE354B0()
{
  return MEMORY[0x24BDB9DF0]();
}

uint64_t sub_23DE354BC()
{
  return MEMORY[0x24BDB9E08]();
}

uint64_t sub_23DE354C8()
{
  return MEMORY[0x24BDB9E38]();
}

uint64_t sub_23DE354D4()
{
  return MEMORY[0x24BDB9E50]();
}

uint64_t sub_23DE354E0()
{
  return MEMORY[0x24BDB9E78]();
}

uint64_t sub_23DE354EC()
{
  return MEMORY[0x24BDB9E80]();
}

uint64_t sub_23DE354F8()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t sub_23DE35504()
{
  return MEMORY[0x24BDB9F30]();
}

uint64_t sub_23DE35510()
{
  return MEMORY[0x24BDB9F90]();
}

uint64_t sub_23DE3551C()
{
  return MEMORY[0x24BDB9FC8]();
}

uint64_t sub_23DE35528()
{
  return MEMORY[0x24BDBA030]();
}

uint64_t sub_23DE35534()
{
  return MEMORY[0x24BDBA048]();
}

uint64_t sub_23DE35540()
{
  return MEMORY[0x24BDBA078]();
}

uint64_t sub_23DE3554C()
{
  return MEMORY[0x24BDBA080]();
}

uint64_t sub_23DE35558()
{
  return MEMORY[0x24BDBA0E0]();
}

uint64_t sub_23DE35564()
{
  return MEMORY[0x24BDBA138]();
}

uint64_t sub_23DE35570()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23DE3557C()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23DE35588()
{
  return MEMORY[0x24BDD2028]();
}

uint64_t sub_23DE35594()
{
  return MEMORY[0x24BDD2030]();
}

uint64_t sub_23DE355A0()
{
  return MEMORY[0x24BDD2038]();
}

uint64_t sub_23DE355AC()
{
  return MEMORY[0x24BDD2040]();
}

uint64_t sub_23DE355B8()
{
  return MEMORY[0x24BDD2048]();
}

uint64_t sub_23DE355C4()
{
  return MEMORY[0x24BDD2058]();
}

uint64_t sub_23DE355D0()
{
  return MEMORY[0x24BDD20B0]();
}

uint64_t sub_23DE355DC()
{
  return MEMORY[0x24BDD20B8]();
}

uint64_t sub_23DE355E8()
{
  return MEMORY[0x24BDD20C8]();
}

uint64_t sub_23DE355F4()
{
  return MEMORY[0x24BDD20D0]();
}

uint64_t sub_23DE35600()
{
  return MEMORY[0x24BDD20E0]();
}

uint64_t sub_23DE3560C()
{
  return MEMORY[0x24BDD20E8]();
}

uint64_t sub_23DE35618()
{
  return MEMORY[0x24BDD2120]();
}

uint64_t sub_23DE35624()
{
  return MEMORY[0x24BDD2130]();
}

uint64_t sub_23DE35630()
{
  return MEMORY[0x24BDD2138]();
}

uint64_t sub_23DE3563C()
{
  return MEMORY[0x24BDD2140]();
}

uint64_t sub_23DE35648()
{
  return MEMORY[0x24BDD21B0]();
}

uint64_t sub_23DE35654()
{
  return MEMORY[0x24BDD21B8]();
}

uint64_t sub_23DE35660()
{
  return MEMORY[0x24BDD21C0]();
}

uint64_t sub_23DE3566C()
{
  return MEMORY[0x24BDD21C8]();
}

uint64_t sub_23DE35678()
{
  return MEMORY[0x24BDD21D0]();
}

uint64_t sub_23DE35684()
{
  return MEMORY[0x24BDD21E0]();
}

uint64_t sub_23DE35690()
{
  return MEMORY[0x24BDD2420]();
}

uint64_t sub_23DE3569C()
{
  return MEMORY[0x24BDD2428]();
}

uint64_t sub_23DE356A8()
{
  return MEMORY[0x24BDD2438]();
}

uint64_t sub_23DE356B4()
{
  return MEMORY[0x24BDD2440]();
}

uint64_t sub_23DE356C0()
{
  return MEMORY[0x24BDD2448]();
}

uint64_t sub_23DE356CC()
{
  return MEMORY[0x24BDD2458]();
}

uint64_t sub_23DE356D8()
{
  return MEMORY[0x24BDD2470]();
}

uint64_t sub_23DE356E4()
{
  return MEMORY[0x24BDD2488]();
}

uint64_t sub_23DE356F0()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t sub_23DE356FC()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_23DE35708()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_23DE35714()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_23DE35720()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_23DE3572C()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_23DE35738()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_23DE35744()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23DE35750()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23DE3575C()
{
  return MEMORY[0x24BEE06E8]();
}

uint64_t sub_23DE35768()
{
  return MEMORY[0x24BEE75B8]();
}

uint64_t sub_23DE35774()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23DE35780()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_23DE3578C()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_23DE35798()
{
  return MEMORY[0x24BEE07F8]();
}

uint64_t sub_23DE357A4()
{
  return MEMORY[0x24BEE0800]();
}

uint64_t sub_23DE357B0()
{
  return MEMORY[0x24BEE0808]();
}

uint64_t sub_23DE357BC()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_23DE357C8()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23DE357D4()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23DE357E0()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_23DE357EC()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_23DE357F8()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23DE35804()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23DE35810()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_23DE3581C()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_23DE35828()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_23DE35834()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_23DE35840()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_23DE3584C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23DE35858()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_23DE35864()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_23DE35870()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23DE3587C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23DE35888()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_23DE35894()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_23DE358A0()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_23DE358AC()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_23DE358B8()
{
  return MEMORY[0x24BEE0C60]();
}

uint64_t sub_23DE358C4()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_23DE358D0()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_23DE358DC()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_23DE358E8()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_23DE358F4()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23DE35900()
{
  return MEMORY[0x24BEE0EB0]();
}

uint64_t sub_23DE3590C()
{
  return MEMORY[0x24BEE0EE0]();
}

uint64_t sub_23DE35918()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_23DE35924()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_23DE35930()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_23DE3593C()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_23DE35948()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_23DE35954()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23DE35960()
{
  return MEMORY[0x24BEE1138]();
}

uint64_t sub_23DE3596C()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_23DE35978()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_23DE35984()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23DE35990()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_23DE3599C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23DE359A8()
{
  return MEMORY[0x24BDCFC08]();
}

uint64_t sub_23DE359B4()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23DE359C0()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t sub_23DE359CC()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t sub_23DE359D8()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t sub_23DE359E4()
{
  return MEMORY[0x24BEE6CF8]();
}

uint64_t sub_23DE359F0()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_23DE359FC()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_23DE35A08()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_23DE35A14()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t sub_23DE35A20()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23DE35A2C()
{
  return MEMORY[0x24BEE1628]();
}

uint64_t sub_23DE35A38()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t sub_23DE35A44()
{
  return MEMORY[0x24BEE1658]();
}

uint64_t sub_23DE35A50()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t sub_23DE35A5C()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_23DE35A68()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t sub_23DE35A74()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_23DE35A80()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_23DE35A8C()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_23DE35A98()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_23DE35AA4()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t sub_23DE35AB0()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_23DE35ABC()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_23DE35AC8()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_23DE35AD4()
{
  return MEMORY[0x24BDD2500]();
}

uint64_t sub_23DE35AE0()
{
  return MEMORY[0x24BDD2510]();
}

uint64_t sub_23DE35AEC()
{
  return MEMORY[0x24BDD2518]();
}

uint64_t sub_23DE35AF8()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_23DE35B04()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23DE35B10()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23DE35B1C()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23DE35B28()
{
  return MEMORY[0x24BDD2520]();
}

uint64_t sub_23DE35B34()
{
  return MEMORY[0x24BDD2528]();
}

uint64_t sub_23DE35B40()
{
  return MEMORY[0x24BDD2530]();
}

uint64_t sub_23DE35B4C()
{
  return MEMORY[0x24BDD2578]();
}

uint64_t sub_23DE35B58()
{
  return MEMORY[0x24BDD2580]();
}

uint64_t sub_23DE35B64()
{
  return MEMORY[0x24BDD2590]();
}

uint64_t sub_23DE35B70()
{
  return MEMORY[0x24BDD2598]();
}

uint64_t sub_23DE35B7C()
{
  return MEMORY[0x24BDD25A0]();
}

uint64_t sub_23DE35B88()
{
  return MEMORY[0x24BDD25A8]();
}

uint64_t sub_23DE35B94()
{
  return MEMORY[0x24BDD25B0]();
}

uint64_t sub_23DE35BA0()
{
  return MEMORY[0x24BDD25B8]();
}

uint64_t sub_23DE35BAC()
{
  return MEMORY[0x24BDD25C0]();
}

uint64_t sub_23DE35BB8()
{
  return MEMORY[0x24BDCFF98]();
}

uint64_t sub_23DE35BC4()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_23DE35BD0()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_23DE35BDC()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_23DE35BE8()
{
  return MEMORY[0x24BDD2750]();
}

uint64_t sub_23DE35BF4()
{
  return MEMORY[0x24BDD2758]();
}

uint64_t sub_23DE35C00()
{
  return MEMORY[0x24BDD01F0]();
}

uint64_t sub_23DE35C0C()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_23DE35C18()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_23DE35C24()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t sub_23DE35C30()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t sub_23DE35C3C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23DE35C48()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23DE35C54()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23DE35C60()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_23DE35C6C()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_23DE35C78()
{
  return MEMORY[0x24BEE5E68]();
}

uint64_t sub_23DE35C84()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23DE35C90()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_23DE35C9C()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_23DE35CA8()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t sub_23DE35CB4()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t sub_23DE35CC0()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_23DE35CCC()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23DE35CD8()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23DE35CE4()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t sub_23DE35CF0()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23DE35CFC()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_23DE35D08()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_23DE35D14()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23DE35D20()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23DE35D2C()
{
  return MEMORY[0x24BEE2548]();
}

uint64_t sub_23DE35D38()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23DE35D44()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_23DE35D50()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23DE35D5C()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_23DE35D68()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23DE35D74()
{
  return MEMORY[0x24BEE2788]();
}

uint64_t sub_23DE35D80()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_23DE35D8C()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23DE35D98()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_23DE35DA4()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_23DE35DB0()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_23DE35DBC()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_23DE35DC8()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_23DE35DD4()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_23DE35DE0()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_23DE35DEC()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_23DE35DF8()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_23DE35E04()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23DE35E10()
{
  return MEMORY[0x24BEE2C00]();
}

uint64_t sub_23DE35E1C()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t sub_23DE35E28()
{
  return MEMORY[0x24BEE2EE0]();
}

uint64_t sub_23DE35E34()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t sub_23DE35E40()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23DE35E4C()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23DE35E58()
{
  return MEMORY[0x24BEE2F50]();
}

uint64_t sub_23DE35E64()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_23DE35E70()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23DE35E7C()
{
  return MEMORY[0x24BEE3078]();
}

uint64_t sub_23DE35E88()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23DE35E94()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23DE35EA0()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23DE35EAC()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_23DE35EB8()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23DE35EC4()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_23DE35ED0()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23DE35EDC()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23DE35EE8()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23DE35EF4()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23DE35F00()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23DE35F0C()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23DE35F18()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23DE35F24()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23DE35F30()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23DE35F3C()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_23DE35F48()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_23DE35F54()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23DE35F60()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_23DE35F6C()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_23DE35F78()
{
  return MEMORY[0x24BEE3DF8]();
}

uint64_t sub_23DE35F84()
{
  return MEMORY[0x24BEE3E08]();
}

uint64_t sub_23DE35F90()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23DE35F9C()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23DE35FA8()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_23DE35FB4()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_23DE35FC0()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23DE35FCC()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23DE35FD8()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23DE35FE4()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23DE35FF0()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_23DE35FFC()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23DE36008()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23DE36014()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23DE36020()
{
  return MEMORY[0x24BDBA1B0]();
}

uint64_t sub_23DE3602C()
{
  return MEMORY[0x24BDBA1C0]();
}

uint64_t sub_23DE36038()
{
  return MEMORY[0x24BDBA1C8]();
}

uint64_t sub_23DE36044()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_23DE36050()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23DE3605C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23DE36068()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23DE36074()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23DE36080()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t HKStateOfMindReflectiveIntervalFromNSString()
{
  return MEMORY[0x24BDD37A0]();
}

uint64_t NSStringFromHKStateOfMindReflectiveInterval()
{
  return MEMORY[0x24BDD38D0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _HKValidDataTypeCode()
{
  return MEMORY[0x24BDD44E8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x24BEE4B48]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x24BDAF160](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x24BDAF170](name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x24BDAF458](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x24BDAF490]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x24BDAF4A8]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x24BEE5010]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

