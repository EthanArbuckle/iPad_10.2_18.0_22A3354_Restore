__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AwardImageLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardImageLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_256AACE08)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, &qword_256AACE08);
  }
}

uint64_t sub_23BD57B14(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  *(_QWORD *)(v3 + 168) = a1;
  sub_23BDCD5B0();
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  sub_23BDCDD60();
  *(_QWORD *)(v3 + 184) = swift_task_alloc();
  sub_23BDCDD48();
  *(_QWORD *)(v3 + 192) = swift_task_alloc();
  v5 = a2[1];
  *(_OWORD *)(v3 + 200) = *a2;
  *(_OWORD *)(v3 + 216) = v5;
  *(_OWORD *)(v3 + 232) = a2[5];
  *(_OWORD *)(v3 + 248) = *(_OWORD *)v2;
  *(_BYTE *)(v3 + 49) = *(_BYTE *)(v2 + 16);
  return swift_task_switch();
}

void sub_23BD57BD4()
{
  __asm { BR              X10 }
}

uint64_t sub_23BD57C0C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void *);

  v3 = (uint64_t (*)(void *))(**(int **)(v0 + 200) + *(_QWORD *)(v0 + 200));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v1;
  *v1 = v0;
  v1[1] = sub_23BD58234;
  return v3(&unk_250CD4508);
}

uint64_t sub_23BD57D04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(v0 + 232) + *(_QWORD *)(v0 + 232));
  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v1;
  *v1 = v0;
  v1[1] = sub_23BD57D58;
  return v3();
}

uint64_t sub_23BD57D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    MEMORY[0x242611E7C](v2);
  }
  else
  {
    *(_QWORD *)(v6 + 288) = a2;
    *(_QWORD *)(v6 + 296) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_23BD57DD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc();
  if (v0)
    sub_23BD589A8(*(_QWORD *)(v2 + 248), *(_QWORD *)(v2 + 256), 2);
  return swift_task_switch();
}

uint64_t sub_23BD57E44()
{
  _QWORD *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  sub_23BDCDD3C();
  sub_23BDCDD30();
  sub_23BDCDD24();
  swift_bridgeObjectRelease();
  sub_23BDCDD30();
  sub_23BDCDD54();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v0[19] = sub_23BDCDD84();
  v0[20] = v3;
  v4 = v0[31];
  v5 = (int *)v0[25];
  v0[38] = v3;
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  v0[39] = v6;
  *v6 = v0;
  v6[1] = sub_23BD58080;
  return v8(v4);
}

uint64_t sub_23BD57F88()
{
  _QWORD *v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v0[19] = sub_23BDCDD84();
  v0[20] = v3;
  v4 = v0[31];
  v5 = (int *)v0[25];
  v0[38] = v3;
  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  v0[39] = v6;
  *v6 = v0;
  v6[1] = sub_23BD58080;
  return v8(v4);
}

uint64_t sub_23BD58080(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v4 = (_QWORD *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    v6 = v3[31];
    v5 = v3[32];
    swift_bridgeObjectRelease();
    sub_23BD589A8(v6, v5, 1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v4[1])();
  }
  else
  {
    v3[40] = v3[19];
    return swift_task_switch();
  }
}

uint64_t sub_23BD5813C()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v3 = sub_23BDCDD84();
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD **)(v0 + 168);
  *v7 = *(_QWORD *)(v0 + 248);
  v7[1] = v4;
  v7[2] = v6;
  v7[3] = v3;
  v7[4] = v8;
  v7[5] = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD58234(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)*v2;
  v3[10] = v2;
  v3[11] = a1;
  v3[12] = v1;
  v4 = (_QWORD *)*v2;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_23BD582CC()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v4 = sub_23BDCDD84();
  v6 = v5;
  sub_23BDCDD0C();
  v7 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v8 = sub_23BDCDD84();
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD **)(v0 + 168);
  *v10 = &unk_250CD4508;
  v10[1] = v4;
  v10[2] = v6;
  v10[3] = v8;
  v10[4] = v11;
  v10[5] = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD5844C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(int **)(v0 + 200);
  *(_OWORD *)(v0 + 336) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 360) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACE18);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 368) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_23BDCE4D0;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  v7 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 376) = v5;
  *v5 = v0;
  v5[1] = sub_23BD58508;
  return v7(v4);
}

uint64_t sub_23BD58508(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[13] = v2;
  v3[14] = a1;
  v3[15] = v1;
  v3[48] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BD5857C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjCClassFromMetadata;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_23BDCE4D0;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  swift_bridgeObjectRetain();
  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v6 = sub_23BDCDD84();
  v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(uint64_t **)(v0 + 168);
  *v12 = v3;
  v12[1] = v11;
  v12[2] = v10;
  v12[3] = v6;
  v12[4] = v8;
  v12[5] = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD586C4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)*v2;
  v3[16] = v2;
  v3[17] = a1;
  v3[18] = v1;
  v4 = (_QWORD *)*v2;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v4[1])();
}

uint64_t sub_23BD5875C()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v4 = sub_23BDCDD84();
  v6 = v5;
  sub_23BDCDD0C();
  v7 = objc_msgSend(v2, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BDCD5A4();
  v8 = sub_23BDCDD84();
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD **)(v0 + 168);
  *v10 = &unk_250CD4538;
  v10[1] = v4;
  v10[2] = v6;
  v10[3] = v8;
  v10[4] = v11;
  v10[5] = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD588D8()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD58928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23BD589A8(v2, v1, 2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD589A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242611F60]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t AwardDetailState.templateUniqueName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void AwardDetailState.layout.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 17);
  *a1 = *(_BYTE *)(v1 + 16);
  a1[1] = v2;
}

unint64_t AwardDetailState.suggestedWorkoutsLoadState.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_23BD58A70(v1);
  return v1;
}

unint64_t sub_23BD58A70(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t AwardDetailState.suggestedWorkoutsLoadState.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  result = sub_23BD58AA8(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

unint64_t sub_23BD58AA8(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t (*AwardDetailState.suggestedWorkoutsLoadState.modify())()
{
  return nullsub_1;
}

uint64_t AwardDetailState.earnedLoadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardDetailState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
}

uint64_t type metadata accessor for AwardDetailState()
{
  uint64_t result;

  result = qword_256AACEC8;
  if (!qword_256AACEC8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardDetailState.earnedLoadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AwardDetailState() + 28);
  return sub_23BD58B74(a1, v3);
}

uint64_t sub_23BD58B74(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t (*AwardDetailState.earnedLoadState.modify())()
{
  type metadata accessor for AwardDetailState();
  return nullsub_1;
}

uint64_t AwardDetailState.init(templateUniqueName:layout:suggestedWorkoutsLoadState:earnedLoadState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  char v9;
  uint64_t v10;

  v8 = *a3;
  v9 = a3[1];
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = v8;
  *(_BYTE *)(a6 + 17) = v9;
  *(_QWORD *)(a6 + 24) = a4;
  v10 = a6 + *(int *)(type metadata accessor for AwardDetailState() + 28);
  return sub_23BD58C2C(a5, v10);
}

uint64_t sub_23BD58C2C(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32))(a2, a1, State);
  return a2;
}

uint64_t sub_23BD58C70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD58CA8 + 4 * byte_23BDCE4E0[a1]))(0xD000000000000012, 0x800000023BDD9F00);
}

uint64_t sub_23BD58CA8()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BD58CBC(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_23BD58CD4()
{
  return 0x6F4C64656E726165;
}

BOOL sub_23BD58CF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BD58D0C()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD58D50()
{
  return sub_23BDCE090();
}

uint64_t sub_23BD58D78()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD58DB8()
{
  unsigned __int8 *v0;

  return sub_23BD58C70(*v0);
}

uint64_t sub_23BD58DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD59558(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD58DE4()
{
  return 0;
}

void sub_23BD58DF0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23BD58DFC()
{
  sub_23BD59044();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD58E24()
{
  sub_23BD59044();
  return sub_23BDCE0E4();
}

uint64_t AwardDetailState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACE20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD59044();
  sub_23BDCE0CC();
  v16 = 0;
  sub_23BDCDFDC();
  if (!v2)
  {
    v9 = *(_BYTE *)(v3 + 17);
    v14 = *(_BYTE *)(v3 + 16);
    v15 = v9;
    v13 = 1;
    sub_23BD59088();
    sub_23BDCE00C();
    v12 = *(_QWORD *)(v3 + 24);
    v11[15] = 2;
    sub_23BD590CC();
    sub_23BDCE00C();
    type metadata accessor for AwardDetailState();
    v11[14] = 3;
    type metadata accessor for AwardEarnedLoadState();
    sub_23BD594A4(&qword_256AACE40, (uint64_t)&protocol conformance descriptor for AwardEarnedLoadState);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23BD59044()
{
  unint64_t result;

  result = qword_256AACE28;
  if (!qword_256AACE28)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE6B4, &type metadata for AwardDetailState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACE28);
  }
  return result;
}

unint64_t sub_23BD59088()
{
  unint64_t result;

  result = qword_256AACE30;
  if (!qword_256AACE30)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailLayout, &type metadata for AwardDetailLayout);
    atomic_store(result, (unint64_t *)&qword_256AACE30);
  }
  return result;
}

unint64_t sub_23BD590CC()
{
  unint64_t result;

  result = qword_256AACE38;
  if (!qword_256AACE38)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardSuggestedWorkoutsLoadState, &type metadata for AwardSuggestedWorkoutsLoadState);
    atomic_store(result, (unint64_t *)&qword_256AACE38);
  }
  return result;
}

uint64_t AwardDetailState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19[2];
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v19[0] = a2;
  v19[1] = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACE48);
  v5 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AwardDetailState();
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_23BD59044();
  v12 = v22;
  sub_23BDCE0C0();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v29 = 0;
  v13 = (uint64_t)v10;
  *(_QWORD *)v10 = sub_23BDCDF64();
  *((_QWORD *)v10 + 1) = v14;
  v26 = 1;
  sub_23BD5941C();
  sub_23BDCDF94();
  v15 = v28;
  v10[16] = v27;
  v10[17] = v15;
  v25 = 2;
  sub_23BD59460();
  sub_23BDCDF94();
  *((_QWORD *)v10 + 3) = v23;
  v24 = 3;
  sub_23BD594A4(&qword_256AACE60, (uint64_t)&protocol conformance descriptor for AwardEarnedLoadState);
  v16 = (uint64_t)v4;
  v17 = v20;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  sub_23BD58C2C(v16, v13 + *(int *)(v8 + 28));
  sub_23BD594E4(v13, v19[0], (uint64_t (*)(_QWORD))type metadata accessor for AwardDetailState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_23BD59BB4(v13, (uint64_t (*)(_QWORD))type metadata accessor for AwardDetailState);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_23BD5941C()
{
  unint64_t result;

  result = qword_256AACE50;
  if (!qword_256AACE50)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailLayout, &type metadata for AwardDetailLayout);
    atomic_store(result, (unint64_t *)&qword_256AACE50);
  }
  return result;
}

unint64_t sub_23BD59460()
{
  unint64_t result;

  result = qword_256AACE58;
  if (!qword_256AACE58)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardSuggestedWorkoutsLoadState, &type metadata for AwardSuggestedWorkoutsLoadState);
    atomic_store(result, (unint64_t *)&qword_256AACE58);
  }
  return result;
}

uint64_t sub_23BD594A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t State;

  result = *a1;
  if (!result)
  {
    State = type metadata accessor for AwardEarnedLoadState();
    result = MEMORY[0x242611F78](a2, State);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD594E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BD59528@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardDetailState.init(from:)(a1, a2);
}

uint64_t sub_23BD5953C(_QWORD *a1)
{
  return AwardDetailState.encode(to:)(a1);
}

uint64_t sub_23BD59558(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023BDD9F20 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F4C64656E726165 && a2 == 0xEF65746174536461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t _s13FitnessAwards16AwardDetailStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (!v4 && (sub_23BDCE024() & 1) == 0
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || ((*(unsigned __int8 *)(a1 + 17) ^ *(unsigned __int8 *)(a2 + 17)) & 1) != 0)
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == 1)
    {
      if (v6 != 1)
        return 0;
    }
    else if (v6 < 2 || (sub_23BD88714(v5, v6) & 1) == 0)
    {
      return 0;
    }
LABEL_16:
    v7 = *(int *)(type metadata accessor for AwardDetailState() + 28);
    return _s13FitnessAwards20AwardEarnedLoadStateO2eeoiySbAC_ACtFZ_0(a1 + v7, a2 + v7);
  }
  if (!v6)
    goto LABEL_16;
  return 0;
}

uint64_t initializeBufferWithCopyOfBuffer for AwardDetailState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8 >= 2)
      swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(int *)(a3 + 28);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    State = type metadata accessor for AwardEarnedLoadState();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v14 = sub_23BDCD58C();
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v10, v11, v14);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for AwardDetailState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) >= 2uLL)
    swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for AwardEarnedLoadState();
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v6 = sub_23BDCD58C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  return result;
}

uint64_t initializeWithCopy for AwardDetailState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t State;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7 >= 2)
    swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  State = type metadata accessor for AwardEarnedLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v12 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithCopy for AwardDetailState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t State;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (unint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v8 = *(_QWORD *)(a2 + 24);
  if (v7 >= 2)
  {
    if (v8 >= 2)
    {
      *v6 = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (a1 == a2)
        return a1;
    }
    else
    {
      sub_23BD59B74(a1 + 24);
      *v6 = *(_QWORD *)(a2 + 24);
      if (a1 == a2)
        return a1;
    }
  }
  else if (v8 >= 2)
  {
    *v6 = v8;
    swift_bridgeObjectRetain();
    if (a1 == a2)
      return a1;
  }
  else
  {
    *v6 = v8;
    if (a1 == a2)
      return a1;
  }
  v9 = *(int *)(a3 + 28);
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  sub_23BD59BB4(a1 + v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
  State = type metadata accessor for AwardEarnedLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v13 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23BD59B74(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACE68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD59BB4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for AwardDetailState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t State;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  State = type metadata accessor for AwardEarnedLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v8 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t assignWithTake for AwardDetailState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t State;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v8 = (unint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v9 = *(_QWORD *)(a2 + 24);
  if (v7 >= 2)
  {
    if (v9 >= 2)
    {
      *v8 = v9;
      swift_bridgeObjectRelease();
      if (a1 == a2)
        return a1;
      goto LABEL_7;
    }
    sub_23BD59B74(a1 + 24);
  }
  *v8 = v9;
  if (a1 == a2)
    return a1;
LABEL_7:
  v10 = *(int *)(a3 + 28);
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  sub_23BD59BB4(a1 + v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
  State = type metadata accessor for AwardEarnedLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v14 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardDetailState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD59DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t State;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    State = type metadata accessor for AwardEarnedLoadState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(a1 + *(int *)(a3 + 28), a2, State);
  }
}

uint64_t storeEnumTagSinglePayload for AwardDetailState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD59E50(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t State;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    State = type metadata accessor for AwardEarnedLoadState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, State);
  }
  return result;
}

uint64_t sub_23BD59EC4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AwardEarnedLoadState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AwardDetailState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardDetailState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD5A034 + 4 * byte_23BDCE4E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD5A068 + 4 * byte_23BDCE4E4[v4]))();
}

uint64_t sub_23BD5A068(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD5A070(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD5A078);
  return result;
}

uint64_t sub_23BD5A084(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD5A08CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD5A090(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD5A098(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD5A0A4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23BD5A0AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailState.CodingKeys()
{
  return &type metadata for AwardDetailState.CodingKeys;
}

unint64_t sub_23BD5A0C8()
{
  unint64_t result;

  result = qword_256AACF08;
  if (!qword_256AACF08)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE68C, &type metadata for AwardDetailState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF08);
  }
  return result;
}

unint64_t sub_23BD5A110()
{
  unint64_t result;

  result = qword_256AACF10;
  if (!qword_256AACF10)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE5FC, &type metadata for AwardDetailState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF10);
  }
  return result;
}

unint64_t sub_23BD5A158()
{
  unint64_t result;

  result = qword_256AACF18;
  if (!qword_256AACF18)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE624, &type metadata for AwardDetailState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF18);
  }
  return result;
}

double AwardImageLayout.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

FitnessAwards::AwardImageLayout __swiftcall AwardImageLayout.init(size:)(FitnessAwards::AwardImageLayout size)
{
  CGFloat *v1;

  *v1 = size.size.width;
  v1[1] = size.size.height;
  return size;
}

uint64_t sub_23BD5A1AC()
{
  return 1;
}

uint64_t sub_23BD5A1B4()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD5A1F4()
{
  return sub_23BDCE090();
}

uint64_t sub_23BD5A218()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD5A258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD5A9C8(a1, a2);
  *a3 = result & 1;
  return result;
}

void sub_23BD5A280(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23BD5A28C()
{
  sub_23BD5A3F4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5A2B4()
{
  sub_23BD5A3F4();
  return sub_23BDCE0E4();
}

uint64_t AwardImageLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF20);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD5A3F4();
  sub_23BDCE0CC();
  v10[0] = v7;
  v10[1] = v8;
  type metadata accessor for CGSize();
  sub_23BD5A570(&qword_256AACF30, MEMORY[0x24BDBD848]);
  sub_23BDCE00C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BD5A3F4()
{
  unint64_t result;

  result = qword_256AACF28;
  if (!qword_256AACF28)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE8B4, &type metadata for AwardImageLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF28);
  }
  return result;
}

uint64_t AwardImageLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD5A3F4();
  sub_23BDCE0C0();
  if (!v2)
  {
    type metadata accessor for CGSize();
    sub_23BD5A570(&qword_256AACF40, MEMORY[0x24BDBD860]);
    sub_23BDCDF94();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BD5A570(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGSize();
    result = MEMORY[0x242611F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD5A5B0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return AwardImageLayout.init(from:)(a1, a2);
}

uint64_t sub_23BD5A5C4(_QWORD *a1)
{
  return AwardImageLayout.encode(to:)(a1);
}

uint64_t AwardImageLayout.hash(into:)()
{
  sub_23BDCE0A8();
  return sub_23BDCE0A8();
}

BOOL static AwardImageLayout.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t AwardImageLayout.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE0A8();
  sub_23BDCE0A8();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD5A698()
{
  sub_23BDCE084();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD5A6E8()
{
  return sub_23BD5A758();
}

uint64_t sub_23BD5A6F0()
{
  sub_23BDCE084();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

BOOL sub_23BD5A73C(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_23BD5A758()
{
  sub_23BDCE0A8();
  return sub_23BDCE0A8();
}

unint64_t sub_23BD5A7A4()
{
  unint64_t result;

  result = qword_256AACF48;
  if (!qword_256AACF48)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardImageLayout, &type metadata for AwardImageLayout);
    atomic_store(result, (unint64_t *)&qword_256AACF48);
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardImageLayout()
{
  return &type metadata for AwardImageLayout;
}

uint64_t getEnumTagSinglePayload for AwardImageLayout.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AwardImageLayout.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD5A88C + 4 * byte_23BDCE710[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD5A8AC + 4 * byte_23BDCE715[v4]))();
}

_BYTE *sub_23BD5A88C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD5A8AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD5A8B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD5A8BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD5A8C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD5A8CC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23BD5A8D8()
{
  return 0;
}

ValueMetadata *type metadata accessor for AwardImageLayout.CodingKeys()
{
  return &type metadata for AwardImageLayout.CodingKeys;
}

unint64_t sub_23BD5A8F4()
{
  unint64_t result;

  result = qword_256AACF50;
  if (!qword_256AACF50)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE88C, &type metadata for AwardImageLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF50);
  }
  return result;
}

unint64_t sub_23BD5A93C()
{
  unint64_t result;

  result = qword_256AACF58;
  if (!qword_256AACF58)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE7FC, &type metadata for AwardImageLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF58);
  }
  return result;
}

unint64_t sub_23BD5A984()
{
  unint64_t result;

  result = qword_256AACF60;
  if (!qword_256AACF60)
  {
    result = MEMORY[0x242611F78](&unk_23BDCE824, &type metadata for AwardImageLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AACF60);
  }
  return result;
}

uint64_t sub_23BD5A9C8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD5AA3C()
{
  return 1702521203;
}

uint64_t AwardProgressView.init(store:descriptionStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  uint64_t result;

  v7 = *a3;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a4 = sub_23BD5AACC;
  *(_QWORD *)(a4 + 8) = result;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 17) = v7;
  return result;
}

uint64_t sub_23BD5AAA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD5AACC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t AwardProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t v16;
  uint64_t v18;
  uint64_t State;
  uint64_t v20;

  v20 = a1;
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF68);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF70);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)v1;
  v11 = *(_QWORD *)(v1 + 8);
  v12 = *(unsigned __int8 *)(v1 + 16);
  v13 = *(unsigned __int8 *)(v1 + 17);
  sub_23BD5AD84(*(_QWORD *)v1, v11, v12 | (v13 << 8), (uint64_t)v6);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v10;
  *(_QWORD *)(v14 + 24) = v11;
  *(_BYTE *)(v14 + 32) = v12;
  *(_BYTE *)(v14 + 33) = v13;
  sub_23BD5F39C((uint64_t)v6, (uint64_t)v9, &qword_256AACF68);
  v15 = (uint64_t (**)())&v9[*(int *)(v7 + 36)];
  *v15 = sub_23BD5E390;
  v15[1] = (uint64_t (*)())v14;
  v15[2] = 0;
  v15[3] = 0;
  sub_23BD5E39C();
  sub_23BD5F3E0((uint64_t)v6, &qword_256AACF68);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v10;
  *(_QWORD *)(v16 + 24) = v11;
  *(_BYTE *)(v16 + 32) = v12;
  *(_BYTE *)(v16 + 33) = v13;
  sub_23BD5E39C();
  sub_23BD5E7D8();
  sub_23BD5EE00();
  sub_23BDCDAD8();
  swift_release();
  sub_23BD5EE48((uint64_t)v3);
  return sub_23BD5F3E0((uint64_t)v9, &qword_256AACF70);
}

uint64_t sub_23BD5AD84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t State;
  uint64_t v19;
  char *v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char v26;
  __int128 v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  char v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int16 v67;
  char v68;

  v59 = a4;
  v47 = a3;
  v6 = a3 & 1;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0A8);
  MEMORY[0x24BDAC7A8](v48);
  v50 = (_OWORD *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFC0);
  MEMORY[0x24BDAC7A8](v49);
  v46 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFB0);
  MEMORY[0x24BDAC7A8](v58);
  v51 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0B0);
  v54 = *(_QWORD *)(v57 - 8);
  v10 = MEMORY[0x24BDAC7A8](v57);
  v52 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v46 - v12;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0B8);
  MEMORY[0x24BDAC7A8](v55);
  v56 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23BDCD73C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v30 = sub_23BDCD58C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v20, v30);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
LABEL_6:
    sub_23BDCD7FC();
    *(_QWORD *)&v64 = sub_23BDCD9A0();
    *((_QWORD *)&v64 + 1) = v31;
    LOBYTE(v65) = v32 & 1;
    *((_QWORD *)&v65 + 1) = v33;
    sub_23BDCD730();
    v34 = MEMORY[0x24BDF1FA8];
    v35 = MEMORY[0x24BDF1F80];
    v36 = v52;
    sub_23BDCDAE4();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    sub_23BD5F120(v64, *((uint64_t *)&v64 + 1), v65);
    swift_bridgeObjectRelease();
    v38 = v53;
    v37 = v54;
    v39 = v57;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v36, v57);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v56, v38, v39);
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&v64 = v34;
    *((_QWORD *)&v64 + 1) = v35;
    swift_getOpaqueTypeConformance2();
    sub_23BD5E97C(&qword_256AACFA8, &qword_256AACFB0, sub_23BD5E958, sub_23BD5ED70);
    sub_23BDCD844();
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  }
  v22 = *(_QWORD *)v20;
  v23 = *((_QWORD *)v20 + 1);
  if ((v20[32] & 1) != 0)
  {
    v60 = a1;
    v61 = a2;
    v62 = v6 != 0;
    v63 = BYTE1(v47);
    sub_23BD5CAEC(v22, v23 & 1, (uint64_t)&v64);
    v24 = v66;
    v25 = v67;
    v26 = v68;
    v27 = v65;
    v28 = v50;
    *v50 = v64;
    v28[1] = v27;
    *((_QWORD *)v28 + 4) = v24;
    *((_WORD *)v28 + 20) = v25;
    *((_BYTE *)v28 + 42) = v26;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD088);
    sub_23BD5E958();
    sub_23BD5ED70();
    v29 = (uint64_t)v51;
    sub_23BDCD844();
  }
  else
  {
    v41 = v6 != 0;
    v44 = v20 + 16;
    v43 = *((_QWORD *)v20 + 2);
    v42 = *((_QWORD *)v44 + 1);
    *(_QWORD *)&v64 = a1;
    *((_QWORD *)&v64 + 1) = a2;
    LOBYTE(v65) = v41;
    BYTE1(v65) = BYTE1(v47);
    v45 = v46;
    sub_23BD5B424(v46);
    sub_23BD5F39C(v45, (uint64_t)v50, &qword_256AACFC0);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD088);
    sub_23BD5E958();
    sub_23BD5ED70();
    v29 = (uint64_t)v51;
    sub_23BDCD844();
    sub_23BD5F110(v22, v23, v43, v42, 0);
    sub_23BD5F3E0(v45, &qword_256AACFC0);
  }
  sub_23BD5F39C(v29, v56, &qword_256AACFB0);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v64 = MEMORY[0x24BDF1FA8];
  *((_QWORD *)&v64 + 1) = MEMORY[0x24BDF1F80];
  swift_getOpaqueTypeConformance2();
  sub_23BD5E97C(&qword_256AACFA8, &qword_256AACFB0, sub_23BD5E958, sub_23BD5ED70);
  sub_23BDCD844();
  return sub_23BD5F3E0(v29, &qword_256AACFB0);
}

void sub_23BD5B424(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v29 = a1;
  v2 = sub_23BDCDB14();
  MEMORY[0x24BDAC7A8](v2);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD028);
  v15[3] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0C0);
  v17 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD020);
  v3 = MEMORY[0x24BDAC7A8](v22);
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)v15 - v4;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0C8);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0D0);
  MEMORY[0x24BDAC7A8](v20);
  v21 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFD0);
  MEMORY[0x24BDAC7A8](v27);
  v23 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23BDCD5B0();
  MEMORY[0x24BDAC7A8](v8);
  v25 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BDCDD60();
  MEMORY[0x24BDAC7A8](v10);
  v24 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23BDCDD48();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  __asm { BR              X10 }
}

uint64_t sub_23BD5B768()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t KeyPath;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_23BDCDD3C();
  sub_23BDCDD30();
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(v0 - 192) = (uint64_t)v2;
  sub_23BDCDD18();
  sub_23BDCDD30();
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x23BD5CAB8);
  }
  *(_QWORD *)(v0 - 192) = (uint64_t)v1;
  sub_23BDCDD18();
  sub_23BDCDD30();
  sub_23BDCDD54();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v5 = sub_23BDCD97C();
  *(_QWORD *)(v0 - 368) = v6;
  *(_QWORD *)(v0 - 312) = v7;
  v9 = v8 & 1;
  KeyPath = swift_getKeyPath();
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v11 = *(_BYTE *)(v0 - 191);
  *(_BYTE *)(v0 - 264) = *(_BYTE *)(v0 - 192);
  *(_BYTE *)(v0 - 263) = v11;
  v12 = sub_23BDB29F4();
  v13 = swift_getKeyPath();
  v14 = *(_QWORD *)(v0 - 344);
  *(_QWORD *)(v0 - 320) = v5;
  v15 = *(_QWORD *)(v0 - 368);
  *(_QWORD *)v14 = v5;
  *(_QWORD *)(v14 + 8) = v15;
  *(_DWORD *)(v0 - 360) = v9;
  *(_BYTE *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v0 - 312);
  *(_QWORD *)(v14 + 32) = KeyPath;
  *(_BYTE *)(v14 + 40) = 1;
  *(_QWORD *)(v14 + 48) = v13;
  *(_QWORD *)(v14 + 56) = v12;
  swift_storeEnumTagMultiPayload();
  v16 = v5;
  v17 = v15;
  sub_23BD5F194(v16, v15, v9);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFE0);
  sub_23BD5EA10();
  sub_23BD5EB18();
  v18 = *(_QWORD *)(v0 - 328);
  sub_23BDCD844();
  sub_23BD5F39C(v18, *(_QWORD *)(v0 - 288), &qword_256AACFD0);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD048);
  sub_23BD5E9EC();
  sub_23BD5EC24();
  sub_23BDCD844();
  sub_23BD5F3E0(v18, &qword_256AACFD0);
  sub_23BD5F120(*(_QWORD *)(v0 - 320), v17, *(_DWORD *)(v0 - 360));
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_23BD5CAEC(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[18];
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v23[17] = a1;
  v6 = sub_23BDCD7F0();
  v7 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v23 - v8;
  v9 = sub_23BDCD5B0();
  MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23BDCDD60();
  MEMORY[0x24BDAC7A8](v11);
  v26 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23BDCDD48();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v23[16] = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = sub_23BDCDB14();
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(unsigned __int8 *)(v3 + 16);
  v20 = *(unsigned __int8 *)(v3 + 17);
  if ((a2 & 1) != 0)
  {
    v21 = sub_23BDCDB44();
  }
  else
  {
    (*(void (**)(char *, _QWORD))(v17 + 104))(v19, *MEMORY[0x24BDF3C28]);
    v21 = MEMORY[0x242611738](v19, 0.650980392, 1.0, 0.0, 1.0);
  }
  v22 = (char *)&loc_23BD5CD14 + *((int *)qword_23BD5E2B0 + v20);
  v25 = a3;
  v29 = v21;
  __asm { BR              X9 }
}

uint64_t sub_23BD5CD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t ObjCClassFromMetadata;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t v78;

  sub_23BDCDB80();
  v3 = sub_23BDCD9B8();
  v5 = v4;
  *(_QWORD *)(v2 - 488) = v1;
  v7 = v6 & 1;
  *(_QWORD *)(v2 - 232) = v0;
  v8 = sub_23BDCD970();
  v10 = v9;
  *(_QWORD *)(v2 - 456) = v11;
  v13 = v12 & 1;
  sub_23BD5F120(v3, v5, v7);
  swift_bridgeObjectRelease();
  sub_23BD5E39C();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  *(_QWORD *)(v2 - 368) = sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  *(_QWORD *)(v2 - 360) = v14;
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v15 = *(_BYTE *)(v2 - 231);
  *(_BYTE *)(v2 - 288) = *(_BYTE *)(v2 - 232);
  *(_BYTE *)(v2 - 287) = v15;
  sub_23BDB29F4();
  *(_QWORD *)(v2 - 432) = sub_23BDCD994();
  *(_QWORD *)(v2 - 440) = v16;
  LOBYTE(v3) = v17;
  *(_QWORD *)(v2 - 424) = v18;
  swift_release();
  *(_DWORD *)(v2 - 448) = v3 & 1;
  sub_23BD5F120(v8, v10, v13);
  swift_bridgeObjectRelease();
  sub_23BDCDD0C();
  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  *(_QWORD *)(v2 - 496) = ObjCClassFromMetadata;
  v20 = (void *)objc_opt_self();
  *(_QWORD *)(v2 - 504) = v20;
  v21 = objc_msgSend(v20, sel_bundleForClass_, ObjCClassFromMetadata);
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v22 = sub_23BDCD97C();
  v24 = v23;
  LOBYTE(v14) = v25 & 1;
  *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 352);
  v26 = sub_23BDCD970();
  v28 = v27;
  *(_QWORD *)(v2 - 512) = v29;
  LOBYTE(v8) = v30 & 1;
  sub_23BD5F120(v22, v24, v14);
  swift_bridgeObjectRelease();
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v31 = *(_BYTE *)(v2 - 231);
  *(_BYTE *)(v2 - 288) = *(_BYTE *)(v2 - 232);
  *(_BYTE *)(v2 - 287) = v31;
  sub_23BDB29F4();
  *(_QWORD *)(v2 - 464) = sub_23BDCD994();
  *(_QWORD *)(v2 - 472) = v32;
  LOBYTE(v24) = v33;
  *(_QWORD *)(v2 - 456) = v34;
  swift_release();
  *(_DWORD *)(v2 - 480) = v24 & 1;
  sub_23BD5F120(v26, v28, v8);
  swift_bridgeObjectRelease();
  sub_23BDCDD3C();
  sub_23BDCDD30();
  *(_QWORD *)(v2 - 232) = *(_QWORD *)(v2 - 408);
  sub_23BDCDD18();
  sub_23BDCDD30();
  sub_23BDCDD54();
  v35 = objc_msgSend(*(id *)(v2 - 504), sel_bundleForClass_, *(_QWORD *)(v2 - 496));
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v36 = sub_23BDCD97C();
  v38 = v37;
  LOBYTE(v8) = v39 & 1;
  *(_DWORD *)(v2 - 232) = sub_23BDCD874();
  v40 = sub_23BDCD970();
  v42 = v41;
  *(_QWORD *)(v2 - 496) = v43;
  LOBYTE(v28) = v44 & 1;
  sub_23BD5F120(v36, v38, v8);
  swift_bridgeObjectRelease();
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v45 = *(_BYTE *)(v2 - 231);
  *(_BYTE *)(v2 - 288) = *(_BYTE *)(v2 - 232);
  *(_BYTE *)(v2 - 287) = v45;
  sub_23BDB29F4();
  *(_QWORD *)(v2 - 384) = sub_23BDCD994();
  *(_QWORD *)(v2 - 408) = v46;
  LOBYTE(v38) = v47;
  *(_QWORD *)(v2 - 376) = v48;
  swift_release();
  *(_DWORD *)(v2 - 416) = v38 & 1;
  sub_23BD5F120(v40, v42, v28);
  swift_bridgeObjectRelease();
  sub_23BDCD7FC();
  v49 = sub_23BDCD9A0();
  v51 = v50;
  LOBYTE(v14) = v52 & 1;
  *(_DWORD *)(v2 - 232) = sub_23BDCD874();
  v53 = sub_23BDCD970();
  v55 = v54;
  *(_QWORD *)(v2 - 520) = v56;
  LOBYTE(v40) = v57 & 1;
  sub_23BD5F120(v49, v51, v14);
  swift_bridgeObjectRelease();
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v58 = *(_BYTE *)(v2 - 231);
  *(_BYTE *)(v2 - 288) = *(_BYTE *)(v2 - 232);
  *(_BYTE *)(v2 - 287) = v58;
  sub_23BDB29F4();
  *(_QWORD *)(v2 - 496) = sub_23BDCD994();
  *(_QWORD *)(v2 - 504) = v59;
  v61 = v60;
  *(_QWORD *)(v2 - 400) = v62;
  swift_release();
  *(_DWORD *)(v2 - 512) = v61 & 1;
  sub_23BD5F120(v53, v55, v40);
  swift_bridgeObjectRelease();
  sub_23BDCD7E4();
  sub_23BDCD7D8();
  sub_23BDCD7CC();
  sub_23BDCD7D8();
  sub_23BDCD7CC();
  sub_23BDCD7D8();
  sub_23BDCD7CC();
  sub_23BDCD7D8();
  sub_23BDCD7CC();
  sub_23BDCD7D8();
  sub_23BDCD808();
  v63 = sub_23BDCD9A0();
  v65 = v64;
  v67 = v66;
  v69 = v68 & 1;
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v2 - 288) = v63;
  *(_QWORD *)(v2 - 280) = v65;
  *(_QWORD *)(v2 - 272) = v69;
  *(_QWORD *)(v2 - 264) = v67;
  *(_QWORD *)(v2 - 256) = KeyPath;
  *(_WORD *)(v2 - 248) = 0;
  *(_BYTE *)(v2 - 246) = 1;
  sub_23BD5F194(v63, v65, v69);
  swift_bridgeObjectRetain();
  sub_23BD5F194(v63, v65, v69);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BD5F194(v63, v65, v69);
  swift_bridgeObjectRetain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD098);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFF0);
  sub_23BD5ED94();
  sub_23BD5EA94();
  sub_23BDCD844();
  swift_release();
  sub_23BD5F120(v63, v65, v69);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 360) = *(_QWORD *)(v2 - 232);
  v71 = *(_QWORD *)(v2 - 216);
  *(_QWORD *)(v2 - 368) = *(_QWORD *)(v2 - 224);
  v72 = *(_QWORD *)(v2 - 208);
  v73 = *(_QWORD *)(v2 - 200);
  LOWORD(v38) = *(_WORD *)(v2 - 192);
  v74 = *(_BYTE *)(v2 - 190);
  sub_23BD5F120(*(_QWORD *)(v2 - 496), *(_QWORD *)(v2 - 504), *(_DWORD *)(v2 - 512));
  swift_bridgeObjectRelease();
  sub_23BD5F120(*(_QWORD *)(v2 - 384), *(_QWORD *)(v2 - 408), *(_DWORD *)(v2 - 416));
  swift_bridgeObjectRelease();
  sub_23BD5F120(*(_QWORD *)(v2 - 464), *(_QWORD *)(v2 - 472), *(_DWORD *)(v2 - 480));
  swift_bridgeObjectRelease();
  sub_23BD5F120(*(_QWORD *)(v2 - 432), *(_QWORD *)(v2 - 440), *(_DWORD *)(v2 - 448));
  swift_bridgeObjectRelease();
  sub_23BD5F120(v63, v65, v69);
  swift_release();
  swift_bridgeObjectRelease();
  v75 = v63;
  v76 = *(_QWORD *)(v2 - 392);
  sub_23BD5F120(v75, v65, v69);
  swift_release();
  result = swift_bridgeObjectRelease();
  v78 = *(_QWORD *)(v2 - 368);
  *(_QWORD *)v76 = *(_QWORD *)(v2 - 360);
  *(_QWORD *)(v76 + 8) = v78;
  *(_QWORD *)(v76 + 16) = v71;
  *(_QWORD *)(v76 + 24) = v72;
  *(_QWORD *)(v76 + 32) = v73;
  *(_WORD *)(v76 + 40) = v38;
  *(_BYTE *)(v76 + 42) = v74;
  return result;
}

uint64_t sub_23BD5E2C0()
{
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  sub_23BDCD694();
  sub_23BD5E388();
  sub_23BDCDCDC();
  return swift_release();
}

uint64_t sub_23BD5E388()
{
  return swift_release();
}

uint64_t sub_23BD5E390()
{
  return sub_23BD5E7B8((uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_23BD5E2C0);
}

uint64_t sub_23BD5E39C()
{
  return swift_retain();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242611F6C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_23BD5E3E8()
{
  uint64_t State;
  uint64_t v1;
  char *v2;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  char v17;

  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AACF78);
  sub_23BD5ED30(&qword_256AACF80, &qword_256AACF78, MEMORY[0x24BE2B5E8]);
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = sub_23BD5EE48((uint64_t)v2);
  if (EnumCaseMultiPayload == 2)
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v5 = sub_23BDCD628();
    __swift_project_value_buffer(v5, (uint64_t)qword_256AAF4B0);
    sub_23BD5E39C();
    sub_23BD5E39C();
    v6 = sub_23BDCD610();
    v7 = sub_23BDCDE38();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v14 = v13;
      v12 = v8;
      *(_DWORD *)v8 = 136315138;
      v11 = v8 + 4;
      sub_23BD5E39C();
      sub_23BDCD694();
      sub_23BD5E388();
      swift_getKeyPath();
      sub_23BDCDCD0();
      swift_release();
      swift_release();
      *(_QWORD *)&v15 = sub_23BD6E4F0(v15, *((unint64_t *)&v15 + 1), &v14);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease();
      sub_23BD5E388();
      sub_23BD5E388();
      v9 = v12;
      _os_log_impl(&dword_23BD56000, v6, v7, "[AwardProgressView] Load state was reset to idle for  %s", v12, 0xCu);
      v10 = v13;
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v10, -1, -1);
      MEMORY[0x242611FFC](v9, -1, -1);
    }
    else
    {
      sub_23BD5E388();
      sub_23BD5E388();
    }

    sub_23BD5E39C();
    sub_23BDCD694();
    sub_23BD5E388();
    v15 = 0u;
    v16 = 0u;
    v17 = 0x80;
    sub_23BDCDCDC();
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_2Tm()
{
  sub_23BD5E388();
  return swift_deallocObject();
}

uint64_t sub_23BD5E7AC()
{
  return sub_23BD5E7B8((uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_23BD5E3E8);
}

uint64_t sub_23BD5E7B8(uint64_t (*a1)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32) | (*(unsigned __int8 *)(v1 + 33) << 8));
}

unint64_t sub_23BD5E7D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AACF88;
  if (!qword_256AACF88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACF70);
    v2[0] = sub_23BD5E844();
    v2[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AACF88);
  }
  return result;
}

unint64_t sub_23BD5E844()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_256AACF90;
  if (!qword_256AACF90)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACF68);
    v2 = sub_23BD5E8A8();
    result = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AACF90);
  }
  return result;
}

unint64_t sub_23BD5E8A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256AACF98;
  if (!qword_256AACF98)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFA0);
    v2[2] = MEMORY[0x24BDF1FA8];
    v2[3] = MEMORY[0x24BDF1F80];
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23BD5E97C(&qword_256AACFA8, &qword_256AACFB0, sub_23BD5E958, sub_23BD5ED70);
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AACF98);
  }
  return result;
}

uint64_t sub_23BD5E958()
{
  return sub_23BD5E97C(&qword_256AACFB8, &qword_256AACFC0, sub_23BD5E9EC, sub_23BD5EC24);
}

uint64_t sub_23BD5E97C(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD5E9EC()
{
  return sub_23BD5E97C(&qword_256AACFC8, &qword_256AACFD0, (uint64_t (*)(void))sub_23BD5EA10, (uint64_t (*)(void))sub_23BD5EB18);
}

unint64_t sub_23BD5EA10()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AACFD8;
  if (!qword_256AACFD8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFE0);
    v2[0] = sub_23BD5EA94();
    v2[1] = sub_23BD5ED30(&qword_256AAD008, &qword_256AAD010, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AACFD8);
  }
  return result;
}

unint64_t sub_23BD5EA94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AACFE8;
  if (!qword_256AACFE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFF0);
    v2 = sub_23BD5ED30(&qword_256AACFF8, &qword_256AAD000, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AACFE8);
  }
  return result;
}

unint64_t sub_23BD5EB18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256AAD018;
  if (!qword_256AAD018)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD020);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD028);
    v2[3] = &type metadata for ColoredLinearProgressViewStyle;
    v2[4] = sub_23BD5ED30(&qword_256AAD030, &qword_256AAD028, MEMORY[0x24BDEBC00]);
    v2[5] = sub_23BD5EBE0();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD018);
  }
  return result;
}

unint64_t sub_23BD5EBE0()
{
  unint64_t result;

  result = qword_256AAD038;
  if (!qword_256AAD038)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9DA0, &type metadata for ColoredLinearProgressViewStyle);
    atomic_store(result, (unint64_t *)&qword_256AAD038);
  }
  return result;
}

uint64_t sub_23BD5EC24()
{
  return sub_23BD5E97C(&qword_256AAD040, &qword_256AAD048, (uint64_t (*)(void))sub_23BD5EA10, (uint64_t (*)(void))sub_23BD5EC48);
}

unint64_t sub_23BD5EC48()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAD050;
  if (!qword_256AAD050)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD058);
    v2[0] = sub_23BD5ECAC();
    v2[1] = v2[0];
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD050);
  }
  return result;
}

unint64_t sub_23BD5ECAC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAD060;
  if (!qword_256AAD060)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD068);
    v2[0] = sub_23BD5EA10();
    v2[1] = sub_23BD5ED30(&qword_256AAD070, &qword_256AAD078, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD060);
  }
  return result;
}

uint64_t sub_23BD5ED30(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242611F78](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD5ED70()
{
  return sub_23BD5E97C(&qword_256AAD080, &qword_256AAD088, (uint64_t (*)(void))sub_23BD5ED94, (uint64_t (*)(void))sub_23BD5EA94);
}

unint64_t sub_23BD5ED94()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAD090;
  if (!qword_256AAD090)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD098);
    v2[0] = sub_23BD5EA94();
    v2[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD090);
  }
  return result;
}

unint64_t sub_23BD5EE00()
{
  unint64_t result;
  uint64_t State;

  result = qword_256AAD0A0;
  if (!qword_256AAD0A0)
  {
    State = type metadata accessor for AwardProgressLoadState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgressLoadState, State);
    atomic_store(result, (unint64_t *)&qword_256AAD0A0);
  }
  return result;
}

uint64_t sub_23BD5EE48(uint64_t a1)
{
  uint64_t State;

  State = type metadata accessor for AwardProgressLoadState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8))(a1, State);
  return a1;
}

uint64_t sub_23BD5EE84()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BD5EE9C()
{
  return sub_23BDCDA3C();
}

uint64_t destroy for AwardProgressView()
{
  return sub_23BD5E388();
}

uint64_t _s13FitnessAwards17AwardProgressViewVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t assignWithCopy for AwardProgressView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BD5E388();
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AwardProgressView(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BD5E388();
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgressView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressView()
{
  return &type metadata for AwardProgressView;
}

uint64_t sub_23BD5F08C()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACF70);
  type metadata accessor for AwardProgressLoadState();
  sub_23BD5E7D8();
  sub_23BD5EE00();
  return swift_getOpaqueTypeConformance2();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_23BD5F110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23BD5F120(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_23BD5F140(uint64_t a1, uint64_t a2, char a3)
{
  sub_23BD5F194(a1, a2, a3 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_23BD5F194(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_23BD5F1A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
    return sub_23BD5F140(a1, a2, a3);
  sub_23BD5F194(a1, a2, a3 & 1);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_23BD5F230(uint64_t a1, uint64_t a2, char a3)
{
  sub_23BD5F120(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_23BD5F284(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) != 0)
    return sub_23BD5F230(a1, a2, a3);
  sub_23BD5F120(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

unint64_t sub_23BD5F310()
{
  unint64_t result;

  result = qword_256AAD0D8;
  if (!qword_256AAD0D8)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_256AAD0D8);
  }
  return result;
}

uint64_t sub_23BD5F354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD020);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD5F39C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BD5F3E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23BD5F41C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
  {
    sub_23BD5F194(result, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BD5F458(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
  {
    sub_23BD5F120(result, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23BD5F494(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD5F4D0 + 4 * byte_23BDCEA80[a1]))(0xD000000000000013, 0x800000023BDDA150);
}

uint64_t sub_23BD5F4D0()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_23BD5F550()
{
  return 0x746F4E7473616F74;
}

uint64_t sub_23BD5F574()
{
  return 0x6572507473616F74;
}

uint64_t sub_23BD5F598()
{
  unsigned __int8 *v0;

  return sub_23BD5F494(*v0);
}

uint64_t sub_23BD5F5A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD62128(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD5F5C4(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_23BD5F5D0()
{
  sub_23BD60218();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F5F8()
{
  sub_23BD60218();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F620()
{
  return 0;
}

uint64_t sub_23BD5F62C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23BD5F658()
{
  sub_23BD6058C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F680()
{
  sub_23BD6058C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F6A8()
{
  sub_23BD60548();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F6D0()
{
  sub_23BD60548();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F6F8()
{
  sub_23BD60504();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F720()
{
  sub_23BD60504();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F754()
{
  sub_23BD6047C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F77C()
{
  sub_23BD6047C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F7A4()
{
  sub_23BD603B0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F7CC()
{
  sub_23BD603B0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F7F4()
{
  sub_23BD603F4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F81C()
{
  sub_23BD603F4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F844()
{
  sub_23BD602E4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F86C()
{
  sub_23BD602E4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD62500(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD5F8BC()
{
  sub_23BD60328();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F8E4()
{
  sub_23BD60328();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F90C()
{
  sub_23BD602A0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F934()
{
  sub_23BD602A0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD5F95C()
{
  sub_23BD6025C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD5F984()
{
  sub_23BD6025C();
  return sub_23BDCE0E4();
}

void AwardToastPresentationAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0E0);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0E8);
  v19[1] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v19[0] = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0F0);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v24 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0F8);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD100);
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v27 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD108);
  v42 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD110);
  v39 = *(_QWORD *)(v11 - 8);
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v38 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD118);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v30 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD120);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v33 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD128);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD130);
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = *v1;
  v17 = v1[2];
  v47 = v1[1];
  v48 = v17;
  v18 = *((unsigned __int8 *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD60218();
  v50 = v16;
  sub_23BDCE0CC();
  __asm { BR              X9 }
}

uint64_t sub_23BD5FD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v0 - 136) = 3;
  sub_23BD6047C();
  v1 = *(_QWORD *)(v0 - 256);
  v3 = *(_QWORD *)(v0 - 160);
  v2 = *(_QWORD *)(v0 - 152);
  sub_23BDCDFAC();
  *(_QWORD *)(v0 - 136) = *(_QWORD *)(v0 - 72);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD188);
  sub_23BD6129C(&qword_256AAD190, (uint64_t (*)(void))sub_23BD604C0, MEMORY[0x24BEE1700]);
  v4 = *(_QWORD *)(v0 - 240);
  sub_23BDCE00C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 248) + 8))(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 168) + 8))(v3, v2);
}

unint64_t sub_23BD60218()
{
  unint64_t result;

  result = qword_256AAD138;
  if (!qword_256AAD138)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF50C, &type metadata for AwardToastPresentationAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD138);
  }
  return result;
}

unint64_t sub_23BD6025C()
{
  unint64_t result;

  result = qword_256AAD140;
  if (!qword_256AAD140)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF4BC, &type metadata for AwardToastPresentationAction.ToastPresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD140);
  }
  return result;
}

unint64_t sub_23BD602A0()
{
  unint64_t result;

  result = qword_256AAD148;
  if (!qword_256AAD148)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF46C, &type metadata for AwardToastPresentationAction.ToastNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD148);
  }
  return result;
}

unint64_t sub_23BD602E4()
{
  unint64_t result;

  result = qword_256AAD150;
  if (!qword_256AAD150)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF41C, &type metadata for AwardToastPresentationAction.ToastKindFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD150);
  }
  return result;
}

unint64_t sub_23BD60328()
{
  unint64_t result;

  result = qword_256AAD158;
  if (!qword_256AAD158)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF3CC, &type metadata for AwardToastPresentationAction.ToastKindFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD158);
  }
  return result;
}

unint64_t sub_23BD6036C()
{
  unint64_t result;

  result = qword_256AAD160;
  if (!qword_256AAD160)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastKind, &type metadata for AwardToastKind);
    atomic_store(result, (unint64_t *)&qword_256AAD160);
  }
  return result;
}

unint64_t sub_23BD603B0()
{
  unint64_t result;

  result = qword_256AAD168;
  if (!qword_256AAD168)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF37C, &type metadata for AwardToastPresentationAction.ToastDetailFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD168);
  }
  return result;
}

unint64_t sub_23BD603F4()
{
  unint64_t result;

  result = qword_256AAD170;
  if (!qword_256AAD170)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF32C, &type metadata for AwardToastPresentationAction.ToastDetailFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD170);
  }
  return result;
}

unint64_t sub_23BD60438()
{
  unint64_t result;

  result = qword_256AAD178;
  if (!qword_256AAD178)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastDetail, &type metadata for AwardToastDetail);
    atomic_store(result, (unint64_t *)&qword_256AAD178);
  }
  return result;
}

unint64_t sub_23BD6047C()
{
  unint64_t result;

  result = qword_256AAD180;
  if (!qword_256AAD180)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF2DC, &type metadata for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD180);
  }
  return result;
}

unint64_t sub_23BD604C0()
{
  unint64_t result;

  result = qword_256AAD198;
  if (!qword_256AAD198)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgress, &type metadata for AwardProgress);
    atomic_store(result, (unint64_t *)&qword_256AAD198);
  }
  return result;
}

unint64_t sub_23BD60504()
{
  unint64_t result;

  result = qword_256AAD1A0;
  if (!qword_256AAD1A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF28C, &type metadata for AwardToastPresentationAction.PresentToastIfNeededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD1A0);
  }
  return result;
}

unint64_t sub_23BD60548()
{
  unint64_t result;

  result = qword_256AAD1A8;
  if (!qword_256AAD1A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF23C, &type metadata for AwardToastPresentationAction.FetchCandidateIdentifiersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD1A8);
  }
  return result;
}

unint64_t sub_23BD6058C()
{
  unint64_t result;

  result = qword_256AAD1B0;
  if (!qword_256AAD1B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF1EC, &type metadata for AwardToastPresentationAction.FetchAwardToastKindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD1B0);
  }
  return result;
}

uint64_t AwardToastPresentationAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v54 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1B8);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v59 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1C0);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1C8);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v53 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1D0);
  v45 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v52 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1D8);
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v51 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1E0);
  v42 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v57 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1E8);
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v56 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1F0);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v55 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD1F8);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD200);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD208);
  v19 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_23BD60218();
  v23 = v62;
  sub_23BDCE0C0();
  v62 = v23;
  if (!v23)
  {
    v31[1] = v18;
    v31[0] = v16;
    v31[2] = v14;
    v32 = v19;
    v24 = sub_23BDCDFA0();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X10 }
    v25 = sub_23BDCDEC8();
    v26 = swift_allocError();
    v28 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v28 = &type metadata for AwardToastPresentationAction;
    v29 = v60;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v28, *MEMORY[0x24BEE26D0], v25);
    v62 = v26;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v29);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
}

unint64_t sub_23BD61214()
{
  unint64_t result;

  result = qword_256AAD218;
  if (!qword_256AAD218)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastKind, &type metadata for AwardToastKind);
    atomic_store(result, (unint64_t *)&qword_256AAD218);
  }
  return result;
}

unint64_t sub_23BD61258()
{
  unint64_t result;

  result = qword_256AAD220;
  if (!qword_256AAD220)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastDetail, &type metadata for AwardToastDetail);
    atomic_store(result, (unint64_t *)&qword_256AAD220);
  }
  return result;
}

uint64_t sub_23BD6129C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD188);
    v8 = a2();
    result = MEMORY[0x242611F78](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD61304()
{
  unint64_t result;

  result = qword_256AAD230;
  if (!qword_256AAD230)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgress, &type metadata for AwardProgress);
    atomic_store(result, (unint64_t *)&qword_256AAD230);
  }
  return result;
}

uint64_t sub_23BD61348@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardToastPresentationAction.init(from:)(a1, a2);
}

void sub_23BD6135C(_QWORD *a1)
{
  AwardToastPresentationAction.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for AwardCanvasPlaceholder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_23BD613A0(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2)
    return sub_23BD61430(result, a2, a3);
  if (a7 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else if (a7)
  {
    return result;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BD61430(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1 || a3 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AwardToastPresentationAction(uint64_t a1)
{
  return sub_23BD61468(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t sub_23BD61468(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  switch(a7)
  {
    case 2:
      return sub_23BD589A8(result, a2, a3);
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0:
      return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AwardToastPresentationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23BD613A0(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for AwardToastPresentationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_23BD613A0(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_23BD61468(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AwardToastPresentationAction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_23BD61468(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BD616F8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 2u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_23BD61710(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction()
{
  return &type metadata for AwardToastPresentationAction;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23BD61824 + 4 * byte_23BDCEAA7[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23BD61858 + 4 * byte_23BDCEAA2[v4]))();
}

uint64_t sub_23BD61858(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD61860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD61868);
  return result;
}

uint64_t sub_23BD61874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD6187CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23BD61880(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD61888(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.CodingKeys()
{
  return &type metadata for AwardToastPresentationAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.FetchAwardToastKindCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.FetchAwardToastKindCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.FetchCandidateIdentifiersCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.FetchCandidateIdentifiersCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.PresentToastIfNeededCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.PresentToastIfNeededCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastDetailFetchedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastDetailFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastDetailFetchFailedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastDetailFetchFailedCodingKeys;
}

uint64_t _s13FitnessAwards28AwardToastPresentationActionO32ProgressUpdatesFetchedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD6194C + 4 * byte_23BDCEAAC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD6196C + 4 * byte_23BDCEAB1[v4]))();
}

_BYTE *sub_23BD6194C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD6196C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD61974(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD6197C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD61984(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD6198C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastKindFetchedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastKindFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastKindFetchFailedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastKindFetchFailedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastNotFoundCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastNotFoundCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastPresentationAction.ToastPresentedCodingKeys()
{
  return &type metadata for AwardToastPresentationAction.ToastPresentedCodingKeys;
}

unint64_t sub_23BD619DC()
{
  unint64_t result;

  result = qword_256AAD238;
  if (!qword_256AAD238)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEE5C, &type metadata for AwardToastPresentationAction.ToastKindFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD238);
  }
  return result;
}

unint64_t sub_23BD61A24()
{
  unint64_t result;

  result = qword_256AAD240;
  if (!qword_256AAD240)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEF64, &type metadata for AwardToastPresentationAction.ToastDetailFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD240);
  }
  return result;
}

unint64_t sub_23BD61A6C()
{
  unint64_t result;

  result = qword_256AAD248;
  if (!qword_256AAD248)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF01C, &type metadata for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD248);
  }
  return result;
}

unint64_t sub_23BD61AB4()
{
  unint64_t result;

  result = qword_256AAD250;
  if (!qword_256AAD250)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF1C4, &type metadata for AwardToastPresentationAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD250);
  }
  return result;
}

unint64_t sub_23BD61AFC()
{
  unint64_t result;

  result = qword_256AAD258;
  if (!qword_256AAD258)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF0E4, &type metadata for AwardToastPresentationAction.FetchAwardToastKindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD258);
  }
  return result;
}

unint64_t sub_23BD61B44()
{
  unint64_t result;

  result = qword_256AAD260;
  if (!qword_256AAD260)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF10C, &type metadata for AwardToastPresentationAction.FetchAwardToastKindCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD260);
  }
  return result;
}

unint64_t sub_23BD61B8C()
{
  unint64_t result;

  result = qword_256AAD268;
  if (!qword_256AAD268)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF094, &type metadata for AwardToastPresentationAction.FetchCandidateIdentifiersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD268);
  }
  return result;
}

unint64_t sub_23BD61BD4()
{
  unint64_t result;

  result = qword_256AAD270;
  if (!qword_256AAD270)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF0BC, &type metadata for AwardToastPresentationAction.FetchCandidateIdentifiersCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD270);
  }
  return result;
}

unint64_t sub_23BD61C1C()
{
  unint64_t result;

  result = qword_256AAD278;
  if (!qword_256AAD278)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF044, &type metadata for AwardToastPresentationAction.PresentToastIfNeededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD278);
  }
  return result;
}

unint64_t sub_23BD61C64()
{
  unint64_t result;

  result = qword_256AAD280;
  if (!qword_256AAD280)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF06C, &type metadata for AwardToastPresentationAction.PresentToastIfNeededCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD280);
  }
  return result;
}

unint64_t sub_23BD61CAC()
{
  unint64_t result;

  result = qword_256AAD288;
  if (!qword_256AAD288)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEF8C, &type metadata for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD288);
  }
  return result;
}

unint64_t sub_23BD61CF4()
{
  unint64_t result;

  result = qword_256AAD290;
  if (!qword_256AAD290)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEFB4, &type metadata for AwardToastPresentationAction.ProgressUpdatesFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD290);
  }
  return result;
}

unint64_t sub_23BD61D3C()
{
  unint64_t result;

  result = qword_256AAD298;
  if (!qword_256AAD298)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEED4, &type metadata for AwardToastPresentationAction.ToastDetailFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD298);
  }
  return result;
}

unint64_t sub_23BD61D84()
{
  unint64_t result;

  result = qword_256AAD2A0;
  if (!qword_256AAD2A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEEFC, &type metadata for AwardToastPresentationAction.ToastDetailFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2A0);
  }
  return result;
}

unint64_t sub_23BD61DCC()
{
  unint64_t result;

  result = qword_256AAD2A8;
  if (!qword_256AAD2A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEE84, &type metadata for AwardToastPresentationAction.ToastDetailFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2A8);
  }
  return result;
}

unint64_t sub_23BD61E14()
{
  unint64_t result;

  result = qword_256AAD2B0;
  if (!qword_256AAD2B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEEAC, &type metadata for AwardToastPresentationAction.ToastDetailFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2B0);
  }
  return result;
}

unint64_t sub_23BD61E5C()
{
  unint64_t result;

  result = qword_256AAD2B8;
  if (!qword_256AAD2B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEDCC, &type metadata for AwardToastPresentationAction.ToastKindFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2B8);
  }
  return result;
}

unint64_t sub_23BD61EA4()
{
  unint64_t result;

  result = qword_256AAD2C0;
  if (!qword_256AAD2C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEDF4, &type metadata for AwardToastPresentationAction.ToastKindFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2C0);
  }
  return result;
}

unint64_t sub_23BD61EEC()
{
  unint64_t result;

  result = qword_256AAD2C8;
  if (!qword_256AAD2C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCED7C, &type metadata for AwardToastPresentationAction.ToastKindFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2C8);
  }
  return result;
}

unint64_t sub_23BD61F34()
{
  unint64_t result;

  result = qword_256AAD2D0;
  if (!qword_256AAD2D0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCEDA4, &type metadata for AwardToastPresentationAction.ToastKindFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2D0);
  }
  return result;
}

unint64_t sub_23BD61F7C()
{
  unint64_t result;

  result = qword_256AAD2D8;
  if (!qword_256AAD2D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCED2C, &type metadata for AwardToastPresentationAction.ToastNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2D8);
  }
  return result;
}

unint64_t sub_23BD61FC4()
{
  unint64_t result;

  result = qword_256AAD2E0;
  if (!qword_256AAD2E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCED54, &type metadata for AwardToastPresentationAction.ToastNotFoundCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2E0);
  }
  return result;
}

unint64_t sub_23BD6200C()
{
  unint64_t result;

  result = qword_256AAD2E8;
  if (!qword_256AAD2E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCECDC, &type metadata for AwardToastPresentationAction.ToastPresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2E8);
  }
  return result;
}

unint64_t sub_23BD62054()
{
  unint64_t result;

  result = qword_256AAD2F0;
  if (!qword_256AAD2F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCED04, &type metadata for AwardToastPresentationAction.ToastPresentedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2F0);
  }
  return result;
}

unint64_t sub_23BD6209C()
{
  unint64_t result;

  result = qword_256AAD2F8;
  if (!qword_256AAD2F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF134, &type metadata for AwardToastPresentationAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD2F8);
  }
  return result;
}

unint64_t sub_23BD620E4()
{
  unint64_t result;

  result = qword_256AAD300;
  if (!qword_256AAD300)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF15C, &type metadata for AwardToastPresentationAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD300);
  }
  return result;
}

uint64_t sub_23BD62128(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x800000023BDDA150 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023BDDA170 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023BDDA190 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA1B0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA1D0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA1F0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA210 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023BDDA230 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x746F4E7473616F74 && a2 == 0xED0000646E756F46 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6572507473616F74 && a2 == 0xEE006465746E6573)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_23BD62500(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD6256C()
{
  return 12383;
}

_OWORD *TVAwardHeaderLayout.init(awardImageLayout:descriptionMaxWidth:height:imageToTextSpacing:progressToDescriptionSpacing:titleToProgressSpacing:)@<X0>(_OWORD *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  *(_OWORD *)a2 = *result;
  *(double *)(a2 + 16) = a3;
  *(double *)(a2 + 24) = a4;
  *(double *)(a2 + 32) = a5;
  *(double *)(a2 + 40) = a6;
  *(double *)(a2 + 48) = a7;
  return result;
}

uint64_t sub_23BD6259C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD625D4 + 4 * byte_23BDCF560[a1]))(0xD000000000000010, 0x800000023BDDA250);
}

uint64_t sub_23BD625D4(uint64_t a1)
{
  return a1 + 3;
}

uint64_t sub_23BD62630()
{
  unsigned __int8 *v0;

  return sub_23BD6259C(*v0);
}

uint64_t sub_23BD62638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD63218(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD6265C(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23BD62668()
{
  sub_23BD62904();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD62690()
{
  sub_23BD62904();
  return sub_23BDCE0E4();
}

uint64_t TVAwardHeaderLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD308);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v11 = v1[2];
  v10 = v1[3];
  v13 = v1[4];
  v12 = v1[5];
  v14 = v1[6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD62904();
  sub_23BDCE0CC();
  v16[0] = v8;
  v16[1] = v9;
  v17 = 0;
  sub_23BD62948();
  sub_23BDCE00C();
  if (!v2)
  {
    v16[0] = v11;
    v17 = 1;
    sub_23BD6298C();
    sub_23BDCE00C();
    v16[0] = v10;
    v17 = 2;
    sub_23BDCE00C();
    v16[0] = v13;
    v17 = 3;
    sub_23BDCE00C();
    v16[0] = v12;
    v17 = 4;
    sub_23BDCE00C();
    v16[0] = v14;
    v17 = 5;
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BD62904()
{
  unint64_t result;

  result = qword_256AAD310;
  if (!qword_256AAD310)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF708, &type metadata for TVAwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD310);
  }
  return result;
}

unint64_t sub_23BD62948()
{
  unint64_t result;

  result = qword_256AAD318;
  if (!qword_256AAD318)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardImageLayout, &type metadata for AwardImageLayout);
    atomic_store(result, (unint64_t *)&qword_256AAD318);
  }
  return result;
}

unint64_t sub_23BD6298C()
{
  unint64_t result;

  result = qword_256AAD320;
  if (!qword_256AAD320)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AAD320);
  }
  return result;
}

uint64_t TVAwardHeaderLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD328);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD62904();
  sub_23BDCE0C0();
  if (!v2)
  {
    v18 = 0;
    sub_23BD62C64();
    sub_23BDCDF94();
    v9 = v17[0];
    v10 = v17[1];
    v18 = 1;
    sub_23BD62CA8();
    sub_23BDCDF94();
    v11 = v17[0];
    v18 = 2;
    sub_23BDCDF94();
    v12 = v17[0];
    v18 = 3;
    sub_23BDCDF94();
    v13 = v17[0];
    v18 = 4;
    sub_23BDCDF94();
    v15 = v17[0];
    v18 = 5;
    sub_23BDCDF94();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v17[0];
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
    a2[3] = v12;
    a2[4] = v13;
    a2[5] = v15;
    a2[6] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23BD62C64()
{
  unint64_t result;

  result = qword_256AAD330;
  if (!qword_256AAD330)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardImageLayout, &type metadata for AwardImageLayout);
    atomic_store(result, (unint64_t *)&qword_256AAD330);
  }
  return result;
}

unint64_t sub_23BD62CA8()
{
  unint64_t result;

  result = qword_256AAD338;
  if (!qword_256AAD338)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_256AAD338);
  }
  return result;
}

uint64_t sub_23BD62CEC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TVAwardHeaderLayout.init(from:)(a1, a2);
}

uint64_t sub_23BD62D00(_QWORD *a1)
{
  return TVAwardHeaderLayout.encode(to:)(a1);
}

uint64_t TVAwardHeaderLayout.hash(into:)()
{
  sub_23BD5A758();
  sub_23BDCE0A8();
  sub_23BDCE0A8();
  sub_23BDCE0A8();
  sub_23BDCE0A8();
  return sub_23BDCE0A8();
}

uint64_t TVAwardHeaderLayout.hashValue.getter()
{
  sub_23BDCE084();
  TVAwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD62DF8()
{
  sub_23BDCE084();
  TVAwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD62E54()
{
  sub_23BDCE084();
  TVAwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

BOOL _s13FitnessAwards19TVAwardHeaderLayoutV2eeoiySbAC_ACtFZ_0(float64x2_t *a1, float64x2_t *a2)
{
  _BOOL8 result;

  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0]&& a1[2].f64[1] == a2[2].f64[1])
  {
    return a1[3].f64[0] == a2[3].f64[0];
  }
  return result;
}

unint64_t sub_23BD62F1C()
{
  unint64_t result;

  result = qword_256AAD340;
  if (!qword_256AAD340)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for TVAwardHeaderLayout, &type metadata for TVAwardHeaderLayout);
    atomic_store(result, (unint64_t *)&qword_256AAD340);
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TVAwardHeaderLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TVAwardHeaderLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TVAwardHeaderLayout()
{
  return &type metadata for TVAwardHeaderLayout;
}

uint64_t getEnumTagSinglePayload for TVAwardHeaderLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TVAwardHeaderLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BD630C0 + 4 * byte_23BDCF56B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BD630F4 + 4 * byte_23BDCF566[v4]))();
}

uint64_t sub_23BD630F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD630FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD63104);
  return result;
}

uint64_t sub_23BD63110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD63118);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BD6311C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD63124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TVAwardHeaderLayout.CodingKeys()
{
  return &type metadata for TVAwardHeaderLayout.CodingKeys;
}

unint64_t sub_23BD63144()
{
  unint64_t result;

  result = qword_256AAD348;
  if (!qword_256AAD348)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF6E0, &type metadata for TVAwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD348);
  }
  return result;
}

unint64_t sub_23BD6318C()
{
  unint64_t result;

  result = qword_256AAD350;
  if (!qword_256AAD350)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF650, &type metadata for TVAwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD350);
  }
  return result;
}

unint64_t sub_23BD631D4()
{
  unint64_t result;

  result = qword_256AAD358;
  if (!qword_256AAD358)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF678, &type metadata for TVAwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD358);
  }
  return result;
}

uint64_t sub_23BD63218(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA250 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BDDA270 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA290 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000023BDDA2B0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA2D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23BD6345C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23BD63474()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD3F8);
  sub_23BD5ED30(&qword_256AAD400, &qword_256AAD3F8, MEMORY[0x24BE2B5E8]);
  return sub_23BDCD694();
}

uint64_t AwardHeaderView.init(store:awardImageViewBuilder:awardProgressViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a7 = sub_23BD5AACC;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_23BD63560()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AwardHeaderView.body.getter@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  _QWORD v75[2];
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v66 = a2;
  v69 = a1[2];
  v3 = sub_23BDCD700();
  v67 = a1[4];
  v85[0] = v67;
  v85[1] = MEMORY[0x24BDEEC40];
  v4 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v3, v85);
  *(_QWORD *)&v86 = v3;
  *((_QWORD *)&v86 + 1) = v4;
  v5 = MEMORY[0x24BDF3110];
  MEMORY[0x242611F18](255, &v86, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)&v86 = sub_23BDCD700();
  *((_QWORD *)&v86 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD360);
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v7 = a1[3];
  v64 = a1[5];
  v83 = v7;
  v84 = v64;
  v68 = v7;
  MEMORY[0x242611F18](255, &v83, v5, 0);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v87 = sub_23BDCDE50();
  *((_QWORD *)&v87 + 1) = v6;
  swift_getTupleTypeMetadata();
  v8 = sub_23BDCDC70();
  v9 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v8);
  v61 = sub_23BDCDBE0();
  v10 = sub_23BDCD700();
  v11 = sub_23BDCD700();
  *(_QWORD *)&v86 = v11;
  *((_QWORD *)&v86 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v12 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v87 = sub_23BDCDE50();
  *((_QWORD *)&v87 + 1) = v12;
  swift_getTupleTypeMetadata();
  v13 = sub_23BDCDC70();
  MEMORY[0x242611F78](v9, v13);
  v63 = sub_23BDCDBE0();
  v62 = sub_23BDCD700();
  v57 = sub_23BDCD850();
  v14 = MEMORY[0x24BDF4700];
  v60 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v63);
  *(_QWORD *)&v86 = v63;
  *((_QWORD *)&v86 + 1) = v60;
  v15 = MEMORY[0x24BDF3110];
  MEMORY[0x242611F18](255, &v86, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)&v86 = MEMORY[0x24BDF4638];
  v16 = v67;
  v82[0] = v67;
  v82[1] = MEMORY[0x24BDEBEE0];
  v17 = MEMORY[0x24BDED308];
  v81[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v10, v82);
  v81[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242611F78](v17, v11, v81);
  *((_QWORD *)&v86 + 1) = sub_23BDCDBE0();
  *(_QWORD *)&v87 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  sub_23BDCDE50();
  swift_getTupleTypeMetadata2();
  v18 = sub_23BDCDC70();
  MEMORY[0x242611F78](v9, v18);
  v19 = sub_23BDCDBE0();
  v20 = MEMORY[0x242611F78](v14, v19);
  v83 = v19;
  v84 = v20;
  *((_QWORD *)&v87 + 1) = MEMORY[0x242611F18](255, &v83, v15, 0);
  *(_QWORD *)&v88 = MEMORY[0x24BDF4638];
  swift_getTupleTypeMetadata();
  v21 = sub_23BDCDC70();
  MEMORY[0x242611F78](v9, v21);
  v53 = sub_23BDCDBC8();
  v54 = sub_23BDCD850();
  v22 = v57;
  v23 = sub_23BDCD850();
  v24 = sub_23BDCDB68();
  v59 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v52 - v25;
  v27 = sub_23BDCD700();
  v58 = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v55 = (char *)&v52 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v56 = (char *)&v52 - v30;
  v31 = v64;
  v32 = v65[1];
  v86 = *v65;
  v87 = v32;
  v88 = v65[2];
  v89 = *((_QWORD *)v65 + 6);
  v70 = v69;
  v71 = v68;
  v72 = v16;
  v73 = v64;
  v74 = &v86;
  v33 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v61);
  v34 = v60;
  v80[0] = v60;
  v80[1] = MEMORY[0x24BDEBEE0];
  v35 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v62, v80);
  v79[0] = v33;
  v79[1] = v35;
  v36 = MEMORY[0x24BDEF3E0];
  v37 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v22, v79);
  v83 = v63;
  v84 = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v39 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v53);
  v78[0] = OpaqueTypeConformance2;
  v78[1] = v39;
  v40 = MEMORY[0x242611F78](v36, v54, v78);
  v77[0] = v37;
  v77[1] = v40;
  v41 = MEMORY[0x242611F78](v36, v23, v77);
  sub_23BDCDB5C();
  v42 = swift_allocObject();
  v43 = v68;
  *(_QWORD *)(v42 + 16) = v69;
  *(_QWORD *)(v42 + 24) = v43;
  *(_QWORD *)(v42 + 32) = v67;
  *(_QWORD *)(v42 + 40) = v31;
  v44 = v87;
  *(_OWORD *)(v42 + 48) = v86;
  *(_OWORD *)(v42 + 64) = v44;
  *(_OWORD *)(v42 + 80) = v88;
  *(_QWORD *)(v42 + 96) = v89;
  sub_23BD657F0((uint64_t)&v86);
  v76 = v41;
  v45 = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v24, &v76);
  v46 = v55;
  sub_23BDCDACC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v26, v24);
  v75[0] = v45;
  v75[1] = MEMORY[0x24BDF0910];
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v27, v75);
  v47 = v58;
  v48 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  v49 = v56;
  v48(v56, v46, v27);
  v50 = *(void (**)(char *, uint64_t))(v47 + 8);
  v50(v46, v27);
  v48(v66, v49, v27);
  return ((uint64_t (*)(char *, uint64_t))v50)(v49, v27);
}

void sub_23BD63CEC(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[3];

  v54 = a3;
  v55 = a5;
  v65 = a2;
  v66 = a4;
  v57 = a1;
  v63 = a6;
  v7 = MEMORY[0x24BDF4638];
  *(_QWORD *)&v72 = MEMORY[0x24BDF4638];
  v8 = sub_23BDCD700();
  v9 = sub_23BDCD700();
  v78[0] = a4;
  v78[1] = MEMORY[0x24BDEBEE0];
  v10 = MEMORY[0x24BDED308];
  v77[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v78);
  v77[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242611F78](v10, v9, v77);
  *((_QWORD *)&v72 + 1) = sub_23BDCDBE0();
  *(_QWORD *)&v73 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  sub_23BDCDE50();
  swift_getTupleTypeMetadata2();
  v11 = sub_23BDCDC70();
  v12 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v13 = sub_23BDCDBE0();
  v14 = MEMORY[0x24BDF4700];
  v68 = v13;
  v69 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v13);
  v15 = MEMORY[0x24BDF3110];
  *((_QWORD *)&v73 + 1) = MEMORY[0x242611F18](255, &v68, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)&v74 = v7;
  swift_getTupleTypeMetadata();
  v16 = sub_23BDCDC70();
  MEMORY[0x242611F78](v12, v16);
  v17 = sub_23BDCDBC8();
  v53[2] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v53[3] = (char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v53[8] = (char *)v53 - v20;
  *(_QWORD *)&v72 = v9;
  *((_QWORD *)&v72 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v73 = sub_23BDCDE50();
  *((_QWORD *)&v73 + 1) = v21;
  swift_getTupleTypeMetadata();
  v22 = sub_23BDCDC70();
  v23 = v12;
  MEMORY[0x242611F78](v12, v22);
  v24 = sub_23BDCDBE0();
  v25 = MEMORY[0x242611F78](v14, v24);
  *(_QWORD *)&v72 = v24;
  *((_QWORD *)&v72 + 1) = v25;
  v56 = v25;
  v26 = MEMORY[0x242611F18](255, &v72, v15, 0);
  v61 = v17;
  v27 = sub_23BDCD850();
  v53[10] = *(_QWORD *)(v27 - 8);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v53[9] = (char *)v53 - v29;
  v53[7] = v26;
  v53[0] = *(_QWORD *)(v26 - 8);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v53[1] = (char *)v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v53[6] = (char *)v53 - v32;
  v60 = v24;
  v33 = sub_23BDCD700();
  v53[4] = *(_QWORD *)(v33 - 8);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v53[5] = (char *)v53 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v53[12] = (char *)v53 - v36;
  v37 = sub_23BDCD700();
  v76[0] = v66;
  v76[1] = MEMORY[0x24BDEEC40];
  v38 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v37, v76);
  *(_QWORD *)&v72 = v37;
  *((_QWORD *)&v72 + 1) = v38;
  MEMORY[0x242611F18](255, &v72, v15, 0);
  *(_QWORD *)&v72 = sub_23BDCD700();
  *((_QWORD *)&v72 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD360);
  v39 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v40 = v54;
  v41 = v55;
  v68 = v54;
  v69 = v55;
  MEMORY[0x242611F18](255, &v68, v15, 0);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v73 = sub_23BDCDE50();
  *((_QWORD *)&v73 + 1) = v39;
  swift_getTupleTypeMetadata();
  v42 = sub_23BDCDC70();
  MEMORY[0x242611F78](v23, v42);
  v43 = sub_23BDCDBE0();
  v64 = v33;
  v44 = sub_23BDCD850();
  v53[14] = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v53[13] = (char *)v53 - v46;
  v53[11] = *(_QWORD *)(v43 - 8);
  v47 = MEMORY[0x24BDAC7A8](v45);
  MEMORY[0x24BDAC7A8](v47);
  v53[15] = (char *)v53 - v48;
  v49 = type metadata accessor for AwardHeaderLayout();
  MEMORY[0x24BDAC7A8](v49);
  v62 = v27;
  v50 = sub_23BDCD850();
  v58 = *(_QWORD *)(v50 - 8);
  v59 = v50;
  MEMORY[0x24BDAC7A8](v50);
  v67 = (char *)v53 - v51;
  v52 = v57[1];
  v72 = *v57;
  v73 = v52;
  v74 = v57[2];
  v75 = *((_QWORD *)v57 + 6);
  v68 = v65;
  v69 = v40;
  v70 = v66;
  v71 = v41;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD643AC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, char *, uint64_t);
  char *v15;
  void (*v16)(char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t, char *, uint64_t);
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v10 = *(unsigned __int8 *)(v3 + v6[11]);
  sub_23BD69D7C(v3);
  if (v10 == 1)
  {
    v11 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(v8 - 192) = *(_OWORD *)v4;
    *(_OWORD *)(v8 - 176) = v11;
    *(_OWORD *)(v8 - 160) = *(_OWORD *)(v4 + 32);
    *(_QWORD *)(v8 - 144) = *(_QWORD *)(v4 + 48);
    sub_23BD64C70(a1, v7);
    v12 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v2);
    v13 = v1[11];
    v14 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    v15 = (char *)v1[15];
    v14((uint64_t)v15, v7, v2);
    v16 = *(void (**)(char *, uint64_t))(v13 + 8);
    v16(v7, v2);
    v17 = v16;
    v1[28] = v16;
    v14((uint64_t)v7, v15, v2);
    v18 = v1[18];
    v1[34] = v18;
    v19 = v18;
    v1[35] = MEMORY[0x24BDEBEE0];
    v20 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1[26], v1 + 34);
    v21 = v1[13];
    sub_23BDAF1D8((uint64_t)v7, v2);
    v17(v7, v2);
    v1[32] = v12;
    v1[33] = v20;
    v22 = MEMORY[0x24BDEF3E0];
    MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v5, v1 + 32);
    v23 = v1[22];
    *(_QWORD *)(v8 - 192) = v23;
    *(_QWORD *)(v8 - 184) = v19;
    v24 = v19;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v26 = v1[23];
    v27 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v26);
    v1[30] = OpaqueTypeConformance2;
    v1[31] = v27;
    v28 = v22;
    v29 = v1[24];
    MEMORY[0x242611F78](v28, v29, v1 + 30);
    sub_23BDAF1D8(v21, v5);
    (*(void (**)(uint64_t, uint64_t))(v1[14] + 8))(v21, v5);
    ((void (*)(_QWORD, uint64_t))v1[28])(v1[15], v2);
    v30 = MEMORY[0x24BDEBEE0];
    v31 = v26;
    v32 = v29;
    v33 = v24;
    v34 = v31;
    v35 = v1[26];
    v36 = v2;
  }
  else
  {
    v1[27] = v5;
    v1[28] = v2;
    v33 = v1[18];
    v37 = v4;
    v38 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(v8 - 192) = *(_OWORD *)v4;
    *(_OWORD *)(v8 - 176) = v38;
    *(_OWORD *)(v8 - 160) = *(_OWORD *)(v4 + 32);
    *(_QWORD *)(v8 - 144) = *(_QWORD *)(v4 + 48);
    v39 = (uint64_t)a1;
    sub_23BD63474();
    swift_getKeyPath();
    sub_23BDCDCD0();
    swift_release();
    swift_release();
    v40 = *(unsigned __int8 *)(v3 + v6[12]);
    sub_23BD69D7C(v3);
    if (v40 == 1)
    {
      v41 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)(v8 - 192) = *(_OWORD *)v37;
      *(_OWORD *)(v8 - 176) = v41;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v37 + 32);
      *(_QWORD *)(v8 - 144) = *(_QWORD *)(v37 + 48);
      v42 = (char *)v1[5];
      sub_23BD64EF0((uint64_t)a1, v42);
      v1[40] = v33;
      v1[41] = MEMORY[0x24BDEBEE0];
      v35 = v1[26];
      v43 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v35, v1 + 40);
      v44 = v1[4];
      v45 = *(void (**)(uint64_t, char *, uint64_t))(v44 + 16);
      v46 = (char *)v1[12];
      v45((uint64_t)v46, v42, v35);
      v47 = *(void (**)(char *, uint64_t))(v44 + 8);
      v47(v42, v35);
      v48 = v47;
      v1[19] = v47;
      v45((uint64_t)v42, v46, v35);
      v36 = v1[28];
      v49 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v36);
      v50 = v1[13];
      sub_23BDAF29C((uint64_t)v42, v36, v35);
      v48(v42, v35);
      v1[38] = v49;
      v1[39] = v43;
      v5 = v1[27];
      MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v5, v1 + 38);
      v23 = v1[22];
      *(_QWORD *)(v8 - 192) = v23;
      *(_QWORD *)(v8 - 184) = v33;
      v51 = swift_getOpaqueTypeConformance2();
      v34 = v1[23];
      v52 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v34);
      v1[36] = v51;
      v1[37] = v52;
      v32 = v1[24];
      MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v32, v1 + 36);
      v30 = MEMORY[0x24BDEBEE0];
      sub_23BDAF1D8(v50, v5);
      (*(void (**)(uint64_t, uint64_t))(v1[14] + 8))(v50, v5);
      v53 = v1[12];
      v54 = v35;
    }
    else
    {
      v55 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)(v8 - 192) = *(_OWORD *)v37;
      *(_OWORD *)(v8 - 176) = v55;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v37 + 32);
      *(_QWORD *)(v8 - 144) = *(_QWORD *)(v37 + 48);
      sub_23BD63474();
      swift_getKeyPath();
      sub_23BDCDCD0();
      swift_release();
      swift_release();
      v56 = *(unsigned __int8 *)(v3 + v6[10]);
      sub_23BD69D7C(v3);
      v57 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)(v8 - 192) = *(_OWORD *)v37;
      *(_OWORD *)(v8 - 176) = v57;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v37 + 32);
      *(_QWORD *)(v8 - 144) = *(_QWORD *)(v37 + 48);
      if (v56 == 1)
      {
        v58 = (char *)v1[1];
        sub_23BD651A4(v39, v58, 0.6);
        v23 = v1[22];
        *(_QWORD *)(v8 - 192) = v23;
        *(_QWORD *)(v8 - 184) = v33;
        v1[17] = swift_getOpaqueTypeConformance2();
        v59 = *v1;
        v60 = *(void (**)(uint64_t, char *, uint64_t))(*v1 + 16);
        v62 = (char *)v1[6];
        v61 = v1[7];
        v60((uint64_t)v62, v58, v61);
        v63 = *(void (**)(char *, uint64_t))(v59 + 8);
        v63(v58, v61);
        v1[19] = v63;
        v60((uint64_t)v58, v62, v61);
        v34 = v1[23];
        v1[16] = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v34);
        v64 = v1[9];
        sub_23BDAF1D8((uint64_t)v58, v61);
        v63(v58, v61);
        v65 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v1[28]);
        v1[46] = v33;
        v1[47] = MEMORY[0x24BDEBEE0];
        v35 = v1[26];
        v66 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v35, v1 + 46);
        v1[44] = v65;
        v1[45] = v66;
        v67 = MEMORY[0x24BDEF3E0];
        v5 = v1[27];
        MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v5, v1 + 44);
        v68 = v1[16];
        v1[42] = v1[17];
        v1[43] = v68;
        v69 = v67;
        v32 = v1[24];
        MEMORY[0x242611F78](v69, v32, v1 + 42);
        v36 = v1[28];
        sub_23BDAF29C(v64, v5, v32);
        v70 = v64;
        v30 = MEMORY[0x24BDEBEE0];
        (*(void (**)(uint64_t, uint64_t))(v1[10] + 8))(v70, v32);
        v53 = v1[6];
        v54 = v61;
      }
      else
      {
        v71 = (char *)v1[3];
        sub_23BD65460(a1, v71);
        v34 = v1[23];
        v1[17] = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v34);
        v72 = v1[2];
        v73 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 16);
        v74 = (char *)v1[8];
        v73((uint64_t)v74, v71, v34);
        v75 = *(void (**)(char *, uint64_t))(v72 + 8);
        v75(v71, v34);
        v1[19] = v75;
        v73((uint64_t)v71, v74, v34);
        v23 = v1[22];
        *(_QWORD *)(v8 - 192) = v23;
        *(_QWORD *)(v8 - 184) = v33;
        v1[16] = swift_getOpaqueTypeConformance2();
        v76 = v1[9];
        sub_23BDAF29C((uint64_t)v71, v1[7], v34);
        v75(v71, v34);
        v77 = v1[28];
        v78 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v77);
        *(_QWORD *)(v8 - 240) = v33;
        *(_QWORD *)(v8 - 232) = MEMORY[0x24BDEBEE0];
        v35 = v1[26];
        v79 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v35, v8 - 240);
        *(_QWORD *)(v8 - 256) = v78;
        *(_QWORD *)(v8 - 248) = v79;
        v80 = MEMORY[0x24BDEF3E0];
        v5 = v1[27];
        MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v5, v8 - 256);
        v81 = v1[17];
        v1[56] = v1[16];
        v1[57] = v81;
        v82 = v80;
        v32 = v1[24];
        MEMORY[0x242611F78](v82, v32, v1 + 56);
        v36 = v77;
        sub_23BDAF29C(v76, v5, v32);
        v83 = v76;
        v30 = MEMORY[0x24BDEBEE0];
        (*(void (**)(uint64_t, uint64_t))(v1[10] + 8))(v83, v32);
        v53 = v1[8];
        v54 = v34;
      }
    }
    ((void (*)(uint64_t, uint64_t))v1[19])(v53, v54);
  }
  v84 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v36);
  v1[54] = v33;
  v1[55] = v30;
  v85 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v35, v1 + 54);
  v1[52] = v84;
  v1[53] = v85;
  v86 = MEMORY[0x24BDEF3E0];
  v87 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v5, v1 + 52);
  *(_QWORD *)(v8 - 192) = v23;
  *(_QWORD *)(v8 - 184) = v33;
  v88 = swift_getOpaqueTypeConformance2();
  v89 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v34);
  v1[50] = v88;
  v1[51] = v89;
  v90 = MEMORY[0x242611F78](v86, v32, v1 + 50);
  v1[48] = v87;
  v1[49] = v90;
  v91 = v86;
  v92 = v1[21];
  MEMORY[0x242611F78](v91, v92, v1 + 48);
  v93 = v1[20];
  v94 = v1[29];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v93 + 16))(v1[25], v94, v92);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v94, v92);
}

uint64_t sub_23BD64C64()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD63CEC);
}

uint64_t sub_23BD64C70@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  _QWORD v30[2];
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v23 = a1[2];
  v24 = a2;
  v4 = sub_23BDCD700();
  v31[0] = a1[4];
  v5 = v31[0];
  v31[1] = MEMORY[0x24BDEEC40];
  v6 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v4, v31);
  *(_QWORD *)&v32 = v4;
  *((_QWORD *)&v32 + 1) = v6;
  v7 = MEMORY[0x24BDF3110];
  MEMORY[0x242611F18](255, &v32, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)&v32 = sub_23BDCD700();
  *((_QWORD *)&v32 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD360);
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v10 = a1[5];
  v30[0] = a1[3];
  v9 = v30[0];
  v30[1] = v10;
  MEMORY[0x242611F18](255, v30, v7, 0);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v33 = sub_23BDCDE50();
  *((_QWORD *)&v33 + 1) = v8;
  swift_getTupleTypeMetadata();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v12 = sub_23BDCDBE0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v23 - v17;
  v19 = v2[1];
  v32 = *v2;
  v33 = v19;
  v34 = v2[2];
  v35 = *((_QWORD *)v2 + 6);
  v25 = v23;
  v26 = v9;
  v27 = v5;
  v28 = v10;
  v29 = &v32;
  sub_23BDCD820();
  sub_23BDCDBD4();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v12);
  v20 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v20(v18, v16, v12);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v20(v24, v18, v12);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v12);
}

uint64_t sub_23BD64EF0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v22 = a2;
  sub_23BDCD700();
  *(_QWORD *)&v24 = sub_23BDCD700();
  *((_QWORD *)&v24 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  v25 = sub_23BDCDE50();
  *(_QWORD *)&v26 = v4;
  swift_getTupleTypeMetadata();
  v5 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v5);
  v6 = sub_23BDCDBE0();
  v21 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - v7;
  v9 = sub_23BDCD700();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v21 - v14;
  v16 = *((_BYTE *)v2 + 16);
  v24 = *v2;
  LOBYTE(v25) = v16;
  v26 = *(__int128 *)((char *)v2 + 24);
  v27 = *(__int128 *)((char *)v2 + 40);
  sub_23BD66B3C(a1, v8);
  sub_23BDCDC58();
  v17 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v6);
  sub_23BDCDA90();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  v23[0] = v17;
  v23[1] = MEMORY[0x24BDEBEE0];
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v9, v23);
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v15, v13, v9);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v18(v22, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t sub_23BD651A4@<X0>(uint64_t a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v25 = a2;
  sub_23BDCD700();
  *(_QWORD *)&v26 = sub_23BDCD700();
  *((_QWORD *)&v26 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  v27 = sub_23BDCDE50();
  *(_QWORD *)&v28 = v6;
  swift_getTupleTypeMetadata();
  v7 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v7);
  v8 = sub_23BDCDBE0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - v10;
  v12 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v8);
  *(_QWORD *)&v26 = v8;
  *((_QWORD *)&v26 + 1) = v12;
  v13 = MEMORY[0x242611F18](0, &v26, MEMORY[0x24BDF3110], 0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v24 - v18;
  v20 = *((_BYTE *)v3 + 16);
  v26 = *v3;
  LOBYTE(v27) = v20;
  v28 = *(__int128 *)((char *)v3 + 24);
  v29 = *(__int128 *)((char *)v3 + 40);
  sub_23BD66B3C(a1, v11);
  sub_23BDCD8A4();
  *(double *)(swift_allocObject() + 16) = a3;
  sub_23BDCDC58();
  sub_23BDCDA78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v21(v19, v17, v13);
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v21(v25, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, v13);
}

uint64_t sub_23BD65460@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v26 = a2;
  v4 = MEMORY[0x24BDF4638];
  *(_QWORD *)&v35 = MEMORY[0x24BDF4638];
  v25 = a1[2];
  v5 = sub_23BDCD700();
  v6 = sub_23BDCD700();
  v34[0] = a1[4];
  v7 = v34[0];
  v34[1] = MEMORY[0x24BDEBEE0];
  v8 = MEMORY[0x24BDED308];
  v33[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v5, v34);
  v33[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242611F78](v8, v6, v33);
  *((_QWORD *)&v35 + 1) = sub_23BDCDBE0();
  *(_QWORD *)&v36 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v9 = a1[3];
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  sub_23BDCDE50();
  swift_getTupleTypeMetadata2();
  v10 = sub_23BDCDC70();
  v11 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v10);
  v32[0] = sub_23BDCDBE0();
  v32[1] = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v32[0]);
  *((_QWORD *)&v36 + 1) = MEMORY[0x242611F18](255, v32, MEMORY[0x24BDF3110], 0);
  *(_QWORD *)&v37 = v4;
  swift_getTupleTypeMetadata();
  v12 = sub_23BDCDC70();
  MEMORY[0x242611F78](v11, v12);
  v13 = sub_23BDCDBC8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v25 - v18;
  v20 = v2[1];
  v35 = *v2;
  v36 = v20;
  v37 = v2[2];
  v38 = *((_QWORD *)v2 + 6);
  sub_23BDCD7C0();
  v27 = v25;
  v28 = v9;
  v21 = a1[5];
  v29 = v7;
  v30 = v21;
  v31 = &v35;
  sub_23BDCDBBC();
  MEMORY[0x242611F78](MEMORY[0x24BDF4498], v13);
  v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v22(v19, v17, v13);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v17, v13);
  v22(v26, v19, v13);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v13);
}

void sub_23BD65778()
{
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD657B4()
{
  sub_23BD63474();
  sub_23BDCDCDC();
  return swift_release();
}

void sub_23BD657E0()
{
  sub_23BD65778();
}

uint64_t sub_23BD657F0(uint64_t a1)
{
  sub_23BD5E39C();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BD65840()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BD65874(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[12];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[8];
  _OWORD v87[3];
  uint64_t v88;

  v66 = a3;
  v67 = a5;
  v65 = a6;
  v49[1] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v49[9] = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v87[0] = v10;
  *((_QWORD *)&v87[0] + 1) = v11;
  v12 = MEMORY[0x24BDF3110];
  v13 = MEMORY[0x242611F18](0, v87, MEMORY[0x24BDF3110], 0);
  v49[2] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v49[0] = (char *)v49 - v14;
  v49[3] = v15;
  v16 = sub_23BDCD700();
  v49[4] = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v49[5] = (char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v49[6] = (char *)v49 - v19;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v62);
  v58 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v22 = *(_QWORD *)(v21 - 8);
  v60 = v21;
  v61 = v22;
  MEMORY[0x24BDAC7A8](v21);
  v59 = (char *)v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v49[7] = v16;
  swift_getTupleTypeMetadata2();
  v73 = sub_23BDCDC70();
  v74 = sub_23BDCDE50();
  v72 = *(_QWORD *)(v74 - 8);
  v24 = MEMORY[0x24BDAC7A8](v74);
  v49[10] = (char *)v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v81 = (char *)v49 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD418);
  v56 = *(_QWORD *)(v27 - 8);
  v57 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v55 = (char *)v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD360);
  v29 = MEMORY[0x24BDAC7A8](v71);
  v80 = (char *)v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v79 = (char *)v49 - v31;
  v32 = sub_23BDCD5F8();
  v63 = *(_QWORD *)(v32 - 8);
  v64 = v32;
  MEMORY[0x24BDAC7A8](v32);
  v54 = (char *)v49 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for AwardHeaderLayout();
  v34 = MEMORY[0x24BDAC7A8](v77);
  v49[8] = (char *)v49 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v76 = (char *)v49 - v37;
  v50 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v49 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_23BDCD700();
  v75 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)v49 - v41;
  v86[0] = a4;
  v86[1] = MEMORY[0x24BDEEC40];
  v69 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v40, v86);
  *(_QWORD *)&v87[0] = v40;
  *((_QWORD *)&v87[0] + 1) = v69;
  v43 = MEMORY[0x242611F18](0, v87, v12, 0);
  v53 = *(_QWORD *)(v43 - 8);
  v51 = v43;
  MEMORY[0x24BDAC7A8](v43);
  v49[11] = (char *)v49 - v44;
  v70 = sub_23BDCD700();
  v52 = *(_QWORD *)(v70 - 8);
  v45 = MEMORY[0x24BDAC7A8](v70);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v78 = (char *)v49 - v47;
  (*(void (**)(uint64_t))(a1 + 24))(v46);
  sub_23BDCD9F4();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v39, a2);
  sub_23BDCD8A4();
  sub_23BDCDC58();
  sub_23BDCDA78();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v40);
  v48 = *(_OWORD *)(a1 + 16);
  v87[0] = *(_OWORD *)a1;
  v87[1] = v48;
  v87[2] = *(_OWORD *)(a1 + 32);
  v88 = *(_QWORD *)(a1 + 48);
  v82 = a2;
  v83 = v66;
  v84 = a4;
  v85 = v67;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD65E30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  double v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  void (*v96)(uint64_t, uint64_t);

  v1[38] = a1;
  sub_23BD63474();
  swift_getKeyPath();
  v5 = v1[39];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v7 = v1[25];
  v6 = v1[26];
  v8 = v1[16];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v5 + *(int *)(v1[40] + 32), v6);
  sub_23BD69D7C(v5);
  sub_23BDCD5BC();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v6);
  v1[118] = v4;
  v1[119] = v1[31];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v10 = v1[13];
  v11 = v1[11];
  sub_23BDCDAC0();
  (*(void (**)(uint64_t, uint64_t))(v1[15] + 8))(v11, v10);
  v12 = MEMORY[0x24BDECC60];
  v1[108] = OpaqueTypeConformance2;
  v1[109] = v12;
  v13 = v1[33];
  v1[26] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v13, v1 + 108);
  v14 = v1[14];
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v16 = v1[41];
  v1[25] = (uint64_t)v15;
  v15(v16, v3, v13);
  v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v1[32] = v3;
  v17(v3, v13);
  v18 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v1 + 59) = *(_OWORD *)v2;
  *((_OWORD *)v1 + 60) = v18;
  *((_OWORD *)v1 + 61) = *(_OWORD *)(v2 + 32);
  v1[124] = *(_QWORD *)(v2 + 48);
  v19 = sub_23BDCD820();
  sub_23BD667C0(v19);
  v21 = *((_OWORD *)v1 + 50);
  v20 = *((_OWORD *)v1 + 51);
  v22 = *((_OWORD *)v1 + 49);
  *((_OWORD *)v1 + 67) = v21;
  *((_OWORD *)v1 + 68) = v20;
  v23 = *((_OWORD *)v1 + 51);
  *((_OWORD *)v1 + 69) = *((_OWORD *)v1 + 52);
  v25 = *((_OWORD *)v1 + 46);
  v24 = *((_OWORD *)v1 + 47);
  v26 = *((_OWORD *)v1 + 45);
  *((_OWORD *)v1 + 63) = v25;
  *((_OWORD *)v1 + 64) = v24;
  v27 = *((_OWORD *)v1 + 47);
  v29 = *((_OWORD *)v1 + 48);
  v28 = *((_OWORD *)v1 + 49);
  *((_OWORD *)v1 + 65) = v29;
  *((_OWORD *)v1 + 66) = v28;
  v30 = *((_OWORD *)v1 + 43);
  *((_OWORD *)v1 + 59) = *((_OWORD *)v1 + 42);
  *((_OWORD *)v1 + 60) = v30;
  v31 = *((_OWORD *)v1 + 45);
  v33 = *((_OWORD *)v1 + 42);
  v32 = *((_OWORD *)v1 + 43);
  v34 = *((_OWORD *)v1 + 44);
  *((_OWORD *)v1 + 61) = v34;
  *((_OWORD *)v1 + 62) = v31;
  v35 = *((_OWORD *)v1 + 52);
  *((_OWORD *)v1 + 39) = v23;
  *((_OWORD *)v1 + 40) = v35;
  *((_OWORD *)v1 + 35) = v27;
  *((_OWORD *)v1 + 36) = v29;
  *((_OWORD *)v1 + 37) = v22;
  *((_OWORD *)v1 + 38) = v21;
  *((_OWORD *)v1 + 30) = v33;
  *((_OWORD *)v1 + 31) = v32;
  *((_OWORD *)v1 + 32) = v34;
  *((_WORD *)v1 + 560) = *((_WORD *)v1 + 424);
  *((_WORD *)v1 + 328) = *((_WORD *)v1 + 424);
  *((_OWORD *)v1 + 33) = v26;
  *((_OWORD *)v1 + 34) = v25;
  sub_23BDCD8A4();
  sub_23BDCDC58();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD420);
  sub_23BD69DC4();
  v36 = v1[17];
  v37 = v1[20];
  sub_23BDCDA78();
  sub_23BD6A1F4((uint64_t)(v1 + 118), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD69E48);
  v39 = v1[18];
  v38 = v1[19];
  v40 = v1[43];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v40, v36, v38);
  *(_WORD *)(v40 + *(int *)(v1[34] + 36)) = 256;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v36, v38);
  sub_23BD6A054(v40, v1[42], &qword_256AAD360);
  v41 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v1 + 42) = *(_OWORD *)v2;
  *((_OWORD *)v1 + 43) = v41;
  *((_OWORD *)v1 + 44) = *(_OWORD *)(v2 + 32);
  v1[90] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v42 = v1[21];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v43 = v1[22];
  sub_23BDCDC94();
  (*(void (**)(uint64_t, uint64_t))(v1[23] + 8))(v42, v43);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v1[31] = (uint64_t)v17;
  if (EnumCaseMultiPayload != 1)
  {
    sub_23BD5F3E0(v37, &qword_256AAD408);
    v50 = v1[37];
    v51 = v1[10];
    goto LABEL_7;
  }
  v46 = v1[8];
  v45 = v1[9];
  v47 = *(unsigned __int8 *)(v37 + 32);
  v48 = v37 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD450) + 48);
  v49 = sub_23BDCD568();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = v1[37];
  v51 = v1[10];
  if (v47 != 1)
  {
LABEL_7:
    v77 = v1[36];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v51, 1, 1, v77);
    MEMORY[0x242611F78](MEMORY[0x24BDF5428], v77);
    sub_23BDA1A54(v51, v1[44]);
    v74 = *(void (**)(uint64_t, uint64_t))(v1[35] + 8);
    v75 = v51;
    v76 = v50;
    goto LABEL_8;
  }
  v52 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v1 + 42) = *(_OWORD *)v2;
  *((_OWORD *)v1 + 43) = v52;
  *((_OWORD *)v1 + 44) = *(_OWORD *)(v2 + 32);
  v1[90] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v53 = v46 + *(int *)(v1[40] + 56);
  v54 = *(double *)v53;
  v55 = *(unsigned __int8 *)(v53 + 8);
  sub_23BD69D7C(v46);
  if (v55)
    v54 = 0.6;
  v56 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v1 + 42) = *(_OWORD *)v2;
  *((_OWORD *)v1 + 43) = v56;
  *((_OWORD *)v1 + 44) = *(_OWORD *)(v2 + 32);
  v1[90] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v57 = v1[39];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v57);
  sub_23BDCDC58();
  v58 = sub_23BDCD6B8();
  v1[24] = v1[112];
  *((_DWORD *)v1 + 46) = *((unsigned __int8 *)v1 + 904);
  v1[22] = v1[114];
  *((_DWORD *)v1 + 42) = *((unsigned __int8 *)v1 + 920);
  v59 = v1[116];
  v1[19] = v1[117];
  v1[20] = v59;
  (*(void (**)(uint64_t))(v2 + 40))(v58);
  sub_23BDCD8A4();
  sub_23BDCDC58();
  *(double *)(swift_allocObject() + 16) = v54;
  v60 = *v1;
  v62 = v1[28];
  v61 = v1[29];
  sub_23BDCDA78();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[1] + 8))(v45, v62);
  v1[84] = v62;
  v1[85] = v61;
  v63 = swift_getOpaqueTypeConformance2();
  v64 = v1[5];
  v65 = v1[3];
  sub_23BDCDAF0();
  (*(void (**)(uint64_t, uint64_t))(v1[2] + 8))(v60, v65);
  v66 = MEMORY[0x24BDEDB80];
  v1[45] = v63;
  v1[46] = v66;
  v67 = v1[7];
  v68 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v67, v1 + 45);
  v69 = v1[4];
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16);
  v71 = v1[6];
  v70(v71, v64, v67);
  v72 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  v72(v64, v67);
  v1[84] = 0;
  *((_BYTE *)v1 + 680) = 1;
  v1[86] = v1[24];
  *((_BYTE *)v1 + 696) = *((_DWORD *)v1 + 46);
  v1[88] = v1[22];
  *((_BYTE *)v1 + 712) = *((_DWORD *)v1 + 42);
  v1[90] = v1[20];
  v1[91] = v1[19];
  v1[60] = (uint64_t)(v1 + 84);
  v70(v64, v71, v67);
  v1[61] = v64;
  v1[56] = v1[30];
  v1[57] = v67;
  v1[52] = sub_23BD69FC8();
  v1[53] = v68;
  sub_23BDAF360(v1 + 60, 2uLL, (uint64_t)(v1 + 56));
  v72(v71, v67);
  v72(v64, v67);
  v73 = v1[36];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v51, 0, 1, v73);
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v73);
  sub_23BDA1A54(v51, v1[44]);
  v74 = *(void (**)(uint64_t, uint64_t))(v1[35] + 8);
  v75 = v51;
  v76 = v1[37];
LABEL_8:
  v1[29] = (uint64_t)v74;
  v74(v75, v76);
  v78 = v51;
  v79 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v1 + 42) = *(_OWORD *)v2;
  *((_OWORD *)v1 + 43) = v79;
  *((_OWORD *)v1 + 44) = *(_OWORD *)(v2 + 32);
  v1[90] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v80 = v1[39];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v80);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v81 = v1[60];
  v82 = *((_BYTE *)v1 + 488);
  v83 = v1[62];
  v84 = *((_BYTE *)v1 + 504);
  v85 = v1[64];
  v86 = v1[65];
  v87 = v1[32];
  v88 = v1[33];
  ((void (*)(uint64_t, uint64_t, uint64_t))v1[25])(v87, v1[41], v88);
  v1[56] = v87;
  v89 = v1[43];
  sub_23BD69EEC(v1[42], v89);
  v1[57] = v89;
  v90 = v78;
  v91 = v78;
  v92 = v1[37];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[35] + 16))(v91, v1[44], v92);
  v1[84] = 0;
  *((_BYTE *)v1 + 680) = 1;
  v1[86] = v81;
  *((_BYTE *)v1 + 696) = v82;
  v1[88] = v83;
  *((_BYTE *)v1 + 712) = v84;
  v1[90] = v85;
  v1[91] = v86;
  v1[58] = v90;
  v1[59] = (uint64_t)(v1 + 84);
  v93 = v1[34];
  v1[52] = v88;
  v1[53] = v93;
  v94 = v1[30];
  v1[54] = v92;
  v1[55] = v94;
  v1[48] = v1[26];
  v1[49] = sub_23BD69F34();
  v1[47] = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v1[36]);
  v1[50] = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v92, v1 + 47);
  v1[51] = sub_23BD69FC8();
  sub_23BDAF360(v1 + 56, 4uLL, (uint64_t)(v1 + 52));
  v95 = (void (*)(uint64_t, uint64_t))v1[29];
  v95(v1[44], v92);
  sub_23BD5F3E0(v1[42], &qword_256AAD360);
  v96 = (void (*)(uint64_t, uint64_t))v1[31];
  v96(v1[41], v88);
  v95(v90, v92);
  sub_23BD5F3E0(v1[43], &qword_256AAD360);
  return ((uint64_t (*)(uint64_t, uint64_t))v96)(v1[32], v88);
}

double sub_23BD667B0(double a1)
{
  return a1 * 0.76;
}

void sub_23BD667C0(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  _QWORD v11[94];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v11[1] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  v12 = *v1;
  v13 = v7;
  v9 = *v1;
  v8 = v1[1];
  v14 = v1[2];
  v15 = *((_QWORD *)v1 + 6);
  v16 = v9;
  v17 = v8;
  v18 = v1[2];
  v19 = *((_QWORD *)v1 + 6);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC94();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v10 = (char *)sub_23BD66918 + 4 * byte_23BDCF768[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_23BD66918()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = *(_BYTE *)(v2 + 32);
  *(_QWORD *)(v0 + 712) = *(_QWORD *)v2;
  *(_QWORD *)(v0 + 720) = v3;
  *(_QWORD *)(v0 + 728) = v5;
  *(_QWORD *)(v0 + 736) = v4;
  *(_BYTE *)(v0 + 744) = v6;
  sub_23BD68E64((uint64_t *)(v0 + 712), (__int128 *)(v0 + 752), v1[2], v1[3], v1[4], v1[5], v0 + 200);
}

__n128 sub_23BD66990()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 479) = *(_OWORD *)(v0 + 312);
  *(_OWORD *)(v0 + 463) = v2;
  v3 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 415) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 399) = v3;
  *(_OWORD *)(v0 + 495) = *(_OWORD *)(v0 + 328);
  *(_OWORD *)(v0 + 504) = *(_OWORD *)(v0 + 337);
  v4 = *(_OWORD *)(v0 + 280);
  *(_OWORD *)(v0 + 431) = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 447) = v4;
  v5 = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 367) = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 383) = v5;
  v6 = *(_OWORD *)(v0 + 472);
  *(_OWORD *)(v0 + 641) = *(_OWORD *)(v0 + 456);
  *(_OWORD *)(v0 + 657) = v6;
  v7 = *(_OWORD *)(v0 + 504);
  *(_OWORD *)(v0 + 673) = *(_OWORD *)(v0 + 488);
  *(_OWORD *)(v0 + 689) = v7;
  v8 = *(_OWORD *)(v0 + 408);
  *(_OWORD *)(v0 + 577) = *(_OWORD *)(v0 + 392);
  *(_OWORD *)(v0 + 593) = v8;
  v9 = *(_OWORD *)(v0 + 440);
  *(_OWORD *)(v0 + 609) = *(_OWORD *)(v0 + 424);
  *(_OWORD *)(v0 + 625) = v9;
  v10 = *(_OWORD *)(v0 + 376);
  *(_OWORD *)(v0 + 545) = *(_OWORD *)(v0 + 360);
  *(_BYTE *)(v0 + 520) = 0;
  *(_QWORD *)(v0 + 528) = *(_QWORD *)(v0 + 8);
  *(_QWORD *)(v0 + 536) = 0;
  *(_BYTE *)(v0 + 544) = 0;
  *(_OWORD *)(v0 + 561) = v10;
  sub_23BD6A048(v0 + 528);
  sub_23BD6A054(v0 + 528, v0 + 16, &qword_256AAD458);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD438);
  sub_23BD5ED30(&qword_256AAD430, &qword_256AAD438, MEMORY[0x24BDF4700]);
  sub_23BDCD844();
  v11 = *(_OWORD *)(v0 + 960);
  *(_OWORD *)(v1 + 128) = *(_OWORD *)(v0 + 944);
  *(_OWORD *)(v1 + 144) = v11;
  *(_OWORD *)(v1 + 160) = *(_OWORD *)(v0 + 976);
  *(_WORD *)(v1 + 176) = *(_WORD *)(v0 + 992);
  v12 = *(_OWORD *)(v0 + 896);
  *(_OWORD *)(v1 + 64) = *(_OWORD *)(v0 + 880);
  *(_OWORD *)(v1 + 80) = v12;
  v13 = *(_OWORD *)(v0 + 928);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v0 + 912);
  *(_OWORD *)(v1 + 112) = v13;
  v14 = *(_OWORD *)(v0 + 832);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 816);
  *(_OWORD *)(v1 + 16) = v14;
  result = *(__n128 *)(v0 + 848);
  v16 = *(_OWORD *)(v0 + 864);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v16;
  return result;
}

double sub_23BD66B2C(double a1)
{
  return a1 * 0.8;
}

uint64_t sub_23BD66B3C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v20 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  sub_23BDCD700();
  *(_QWORD *)&v25 = sub_23BDCD700();
  *((_QWORD *)&v25 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v6 = *(_QWORD *)(a1 + 24);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *(_QWORD *)&v26 = sub_23BDCDE50();
  *((_QWORD *)&v26 + 1) = v5;
  swift_getTupleTypeMetadata();
  v7 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v7);
  v8 = sub_23BDCDBE0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v19 - v13;
  v15 = v2[1];
  v25 = *v2;
  v26 = v15;
  v27 = v2[2];
  v28 = *((_QWORD *)v2 + 6);
  v21 = v4;
  v22 = v6;
  v23 = *(_OWORD *)(a1 + 32);
  v24 = &v25;
  sub_23BDCD820();
  sub_23BDCDBD4();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v8);
  v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v16(v14, v12, v8);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v16(v20, v14, v8);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
}

void sub_23BD66D5C(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[17];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void (*v56)(uint64_t);

  v32[8] = a4;
  v37 = a6;
  v32[1] = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v32[7] = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23BDCD700();
  v32[2] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v32[6] = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v32[5] = (char *)v32 - v15;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v33);
  v32[12] = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v18 = *(_QWORD *)(v17 - 8);
  v32[15] = v17;
  v32[16] = v18;
  MEMORY[0x24BDAC7A8](v17);
  v32[13] = (char *)v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v32[4] = v12;
  swift_getTupleTypeMetadata2();
  v43 = sub_23BDCDC70();
  v36 = sub_23BDCDE50();
  v40 = *(_QWORD *)(v36 - 8);
  v20 = MEMORY[0x24BDAC7A8](v36);
  v45 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v44 = (char *)v32 - v22;
  v35 = sub_23BDCD5F8();
  v32[14] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v32[10] = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for AwardHeaderLayout();
  v24 = MEMORY[0x24BDAC7A8](v46);
  v38 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = sub_23BDCD700();
  v34 = *(_QWORD *)(v25 - 8);
  v32[9] = v25;
  MEMORY[0x24BDAC7A8](v25);
  v41 = (char *)v32 - v26;
  v42 = sub_23BDCD700();
  v32[11] = *(_QWORD *)(v42 - 8);
  v27 = MEMORY[0x24BDAC7A8](v42);
  v48 = (char *)v32 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v32 - v30;
  a1[3](v29);
  v31 = *((_OWORD *)a1 + 1);
  v53 = *(_OWORD *)a1;
  v54 = v31;
  v55 = *((_OWORD *)a1 + 2);
  v56 = a1[6];
  v49 = a2;
  v50 = a3;
  v32[0] = a3;
  v51 = a4;
  v52 = a5;
  v32[3] = a5;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD67104(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t, uint64_t);
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v3);
  v8 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v8;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v3);
  sub_23BDCDC58();
  v9 = v1[8];
  sub_23BDCDA90();
  (*(void (**)(uint64_t, uint64_t))(v1[22] + 8))(v6, v4);
  v10 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v10;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v11 = v1[14];
  v12 = v1[10];
  v13 = v1[19];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v3 + *(int *)(v1[30] + 32), v13);
  v1[22] = v3;
  sub_23BD69D7C(v3);
  sub_23BDCD5BC();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v14 = MEMORY[0x24BDEBEE0];
  v1[105] = v9;
  v1[106] = v14;
  v15 = MEMORY[0x24BDED308];
  v16 = v1[9];
  v17 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v16, v1 + 105);
  v18 = v1[32];
  v19 = v1[25];
  sub_23BDCDAC0();
  (*(void (**)(uint64_t, uint64_t))(v1[18] + 8))(v19, v16);
  v20 = MEMORY[0x24BDECC60];
  v1[103] = v17;
  v1[104] = v20;
  v21 = v1[26];
  v22 = MEMORY[0x242611F78](v15, v21, v1 + 103);
  v23 = v1[11];
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v24(v1[31], v18, v21);
  v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v26 = v18;
  v27 = v1[12];
  v25(v26, v21);
  v28 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v28;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  v29 = sub_23BDCD820();
  sub_23BD667C0(v29);
  v30 = *(_OWORD *)(v1 + 137);
  v5[53] = *(_OWORD *)(v1 + 135);
  v5[54] = v30;
  v5[55] = *(_OWORD *)(v1 + 139);
  *((_WORD *)v1 + 656) = *((_WORD *)v1 + 564);
  v31 = *(_OWORD *)(v1 + 129);
  v5[49] = *(_OWORD *)(v1 + 127);
  v5[50] = v31;
  v32 = *(_OWORD *)(v1 + 133);
  v5[51] = *(_OWORD *)(v1 + 131);
  v5[52] = v32;
  v33 = *(_OWORD *)(v1 + 121);
  v5[45] = *(_OWORD *)(v1 + 119);
  v5[46] = v33;
  v34 = *(_OWORD *)(v1 + 125);
  v5[47] = *(_OWORD *)(v1 + 123);
  v5[48] = v34;
  v35 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v35;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  v1[25] = a1;
  sub_23BD63474();
  swift_getKeyPath();
  v36 = v1[13];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v37 = v1[15];
  sub_23BDCDC94();
  (*(void (**)(uint64_t, uint64_t))(v1[16] + 8))(v36, v37);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v1[18] = v22;
  v1[19] = (uint64_t)v25;
  v1[14] = (uint64_t)v24;
  if (EnumCaseMultiPayload != 1)
  {
    sub_23BD5F3E0(v27, &qword_256AAD408);
    v44 = v1[24];
    goto LABEL_5;
  }
  v40 = v1[6];
  v39 = v1[7];
  v41 = *(unsigned __int8 *)(v27 + 32);
  v42 = v27 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD450) + 48);
  v43 = sub_23BDCD568();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = v1[24];
  if (v41 != 1)
  {
LABEL_5:
    v59 = v1[27];
    v58 = v1[29];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 1, 1, v59);
    goto LABEL_6;
  }
  v45 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v45;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v46 = v1[22];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v46);
  sub_23BDCDC58();
  v47 = sub_23BDCD6B8();
  v1[17] = v1[107];
  *((_DWORD *)v1 + 32) = *((unsigned __int8 *)v1 + 864);
  v1[15] = v1[109];
  *((_DWORD *)v1 + 26) = *((unsigned __int8 *)v1 + 880);
  v48 = v1[111];
  v1[11] = v1[112];
  v1[12] = v48;
  (*(void (**)(uint64_t))(v2 + 40))(v47);
  v49 = *v1;
  v50 = v1[3];
  sub_23BDCDAF0();
  (*(void (**)(uint64_t, uint64_t))(v1[1] + 8))(v39, v49);
  v51 = MEMORY[0x24BDEDB80];
  v1[33] = v50;
  v1[34] = v51;
  v52 = v1[4];
  v53 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v52, v1 + 33);
  v54 = v1[2];
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
  v56 = v1[5];
  v55(v56, v40, v52);
  v57 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v57(v40, v52);
  v1[80] = 0;
  *((_BYTE *)v1 + 648) = 1;
  v1[82] = v1[17];
  *((_BYTE *)v1 + 664) = *((_DWORD *)v1 + 32);
  v1[84] = v1[15];
  *((_BYTE *)v1 + 680) = *((_DWORD *)v1 + 26);
  v1[86] = v1[12];
  v1[87] = v1[11];
  v1[52] = (uint64_t)(v1 + 80);
  v55(v40, v56, v52);
  v1[53] = v40;
  v1[44] = v1[23];
  v1[45] = v52;
  v1[113] = sub_23BD69FC8();
  v1[114] = v53;
  v58 = v1[29];
  sub_23BDAF360(v1 + 52, 2uLL, (uint64_t)(v1 + 44));
  v57(v56, v52);
  v57(v40, v52);
  v59 = v1[27];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 0, 1, v59);
LABEL_6:
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v59);
  sub_23BDA1A54(v58, v1[28]);
  v60 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v61 = v1[20];
  v1[17] = (uint64_t)v60;
  v60(v58, v61);
  v62 = *(_OWORD *)(v2 + 16);
  v5[14] = *(_OWORD *)v2;
  v5[15] = v62;
  v5[16] = *(_OWORD *)(v2 + 32);
  v1[86] = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v63 = v1[22];
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v63);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v1[30] = v1[113];
  *((_DWORD *)v1 + 50) = *((unsigned __int8 *)v1 + 912);
  v64 = v1[115];
  v65 = *((_BYTE *)v1 + 928);
  v66 = v1[117];
  v67 = v1[118];
  v68 = v1[32];
  v69 = v1[26];
  ((void (*)(void))v1[14])();
  v70 = v5[54];
  v5[8] = v5[53];
  v5[9] = v70;
  v5[10] = v5[55];
  *((_WORD *)v1 + 296) = *((_WORD *)v1 + 656);
  v71 = v5[50];
  v5[4] = v5[49];
  v5[5] = v71;
  v72 = v5[52];
  v5[6] = v5[51];
  v5[7] = v72;
  v73 = v5[46];
  *v5 = v5[45];
  v5[1] = v73;
  v74 = v5[48];
  v5[2] = v5[47];
  v5[3] = v74;
  *((_WORD *)v1 + 297) = 256;
  v1[76] = v68;
  v1[77] = (uint64_t)(v1 + 52);
  v76 = v1[28];
  v75 = v1[29];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[24] + 16))(v75, v76, v61);
  v1[44] = 0;
  *((_BYTE *)v1 + 360) = 1;
  v1[46] = v1[30];
  *((_BYTE *)v1 + 376) = *((_DWORD *)v1 + 50);
  v1[48] = v64;
  *((_BYTE *)v1 + 392) = v65;
  v1[50] = v66;
  v1[51] = v67;
  v1[78] = v75;
  v1[79] = (uint64_t)(v1 + 44);
  sub_23BD6A1F4((uint64_t)(v1 + 119), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD6A0F8);
  v1[40] = v69;
  v1[41] = __swift_instantiateConcreteTypeFromMangledName(qword_256AAD370);
  v1[42] = v61;
  v1[43] = v1[23];
  v1[36] = v1[18];
  v1[37] = sub_23BD6A188();
  v1[35] = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v1[27]);
  v1[38] = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v61, v1 + 35);
  v1[39] = sub_23BD69FC8();
  sub_23BDAF360(v1 + 76, 4uLL, (uint64_t)(v1 + 40));
  v77 = (void (*)(uint64_t, uint64_t))v1[17];
  v77(v76, v61);
  sub_23BD6A1F4((uint64_t)(v1 + 119), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD69E48);
  v78 = (void (*)(uint64_t, uint64_t))v1[19];
  v78(v1[31], v69);
  v77(v75, v61);
  v79 = v5[9];
  v5[22] = v5[8];
  v5[23] = v79;
  v5[24] = v5[10];
  *((_DWORD *)v1 + 204) = *((_DWORD *)v1 + 148);
  v80 = v5[5];
  v5[18] = v5[4];
  v5[19] = v80;
  v81 = v5[7];
  v5[20] = v5[6];
  v5[21] = v81;
  v82 = v5[1];
  v5[14] = *v5;
  v5[15] = v82;
  v83 = v5[3];
  v5[16] = v5[2];
  v5[17] = v83;
  sub_23BD6A1F4((uint64_t)(v1 + 80), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD69E48);
  return ((uint64_t (*)(uint64_t, uint64_t))v78)(v1[32], v69);
}

uint64_t sub_23BD67A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t OpaqueTypeConformance2;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[5];
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105[5];
  _QWORD v106[2];
  _QWORD v107[3];
  unsigned __int8 v108;
  uint64_t v109;
  unsigned __int8 v110;
  uint64_t v111;
  uint64_t v112;

  v51 = a5;
  v61 = a3;
  v64 = a1;
  v76 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v75 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  sub_23BDCDE50();
  swift_getTupleTypeMetadata2();
  v68 = sub_23BDCDC70();
  v67 = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v68);
  v9 = sub_23BDCDBE0();
  OpaqueTypeConformance2 = *(_QWORD *)(v9 - 8);
  v70 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v49 - v10;
  v69 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v9);
  v95 = v9;
  v96 = v69;
  v11 = MEMORY[0x242611F18](0, &v95, MEMORY[0x24BDF3110], 0);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v71 = (char *)&v49 - v14;
  v50 = a2;
  v15 = sub_23BDCD700();
  v16 = sub_23BDCD700();
  v107[0] = a4;
  v107[1] = MEMORY[0x24BDEBEE0];
  v17 = MEMORY[0x24BDED308];
  v106[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v15, v107);
  v106[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242611F78](v17, v16, v106);
  v49 = sub_23BDCDBE0();
  v18 = *(_QWORD *)(v49 - 8);
  v19 = MEMORY[0x24BDAC7A8](v49);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v21;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v49 - v22;
  v60 = (char *)&v49 - v22;
  sub_23BDCD820();
  v24 = v61;
  v82 = a2;
  v83 = v61;
  v84 = a4;
  v85 = a5;
  v25 = v64;
  v86 = v64;
  sub_23BDCDBD4();
  v26 = v49;
  v62 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v49);
  v59 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v59(v23, v21, v26);
  v65 = *(void (**)(char *, uint64_t))(v18 + 8);
  v27 = v21;
  v28 = v26;
  v65(v27, v26);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v57 = v107[2];
  v56 = v108;
  v55 = v109;
  v54 = v110;
  v52 = v112;
  v53 = v111;
  sub_23BDCD82C();
  v29 = v50;
  v30 = v51;
  v77 = v50;
  v78 = v24;
  v31 = v24;
  v79 = a4;
  v80 = v51;
  v81 = v25;
  v32 = v63;
  sub_23BDCDBD4();
  sub_23BDCD8A4();
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v29;
  *(_QWORD *)(v33 + 24) = v31;
  *(_QWORD *)(v33 + 32) = a4;
  *(_QWORD *)(v33 + 40) = v30;
  v34 = *(_OWORD *)(v25 + 16);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)v25;
  *(_OWORD *)(v33 + 64) = v34;
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(v25 + 32);
  *(_QWORD *)(v33 + 96) = *(_QWORD *)(v25 + 48);
  sub_23BD657F0(v25);
  sub_23BDCDC58();
  v35 = (uint64_t)v66;
  v37 = v69;
  v36 = v70;
  sub_23BDCDA78();
  swift_release();
  (*(void (**)(char *, uint64_t))(OpaqueTypeConformance2 + 8))(v32, v36);
  v95 = v36;
  v96 = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v39 = v71;
  v38 = v72;
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  v41 = v73;
  v40(v71, v35, v73);
  v42 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v42(v35, v41);
  v103 = 0;
  v104 = 1;
  v105[0] = (uint64_t)&v103;
  v43 = (uint64_t)v58;
  v44 = v60;
  v59(v58, v60, v28);
  v95 = 0;
  LOBYTE(v96) = 1;
  v97 = v57;
  v98 = v56;
  v99 = v55;
  v100 = v54;
  v101 = v53;
  v102 = v52;
  v105[1] = v43;
  v105[2] = (uint64_t)&v95;
  v40((char *)v35, (uint64_t)v39, v41);
  v93 = 0;
  v94 = 1;
  v105[3] = v35;
  v105[4] = (uint64_t)&v93;
  v92[0] = MEMORY[0x24BDF4638];
  v92[1] = v28;
  v92[2] = v75;
  v92[3] = v41;
  v92[4] = MEMORY[0x24BDF4638];
  v45 = MEMORY[0x24BDF4610];
  v87 = MEMORY[0x24BDF4610];
  v88 = v62;
  v89 = sub_23BD69FC8();
  v90 = OpaqueTypeConformance2;
  v91 = v45;
  sub_23BDAF360(v105, 5uLL, (uint64_t)v92);
  v42((uint64_t)v39, v41);
  v46 = v44;
  v47 = (uint64_t (*)(uint64_t, uint64_t))v65;
  v65(v46, v28);
  v42(v35, v41);
  return v47(v43, v28);
}

void sub_23BD67FD0(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[4];
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (*v37)(uint64_t);

  v21[0] = a4;
  v29 = a6;
  v28 = sub_23BDCD5F8();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v24 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for AwardHeaderLayout();
  v12 = MEMORY[0x24BDAC7A8](v22);
  v21[2] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v13 = sub_23BDCD700();
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v21[1] = (char *)v21 - v14;
  v15 = sub_23BDCD700();
  v25 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v21[3] = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v21 - v19;
  a1[3](v18);
  v20 = *((_OWORD *)a1 + 1);
  v34 = *(_OWORD *)a1;
  v35 = v20;
  v36 = *((_OWORD *)a1 + 2);
  v37 = a1[6];
  v30 = a2;
  v31 = a3;
  v32 = a4;
  v33 = a5;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD681D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v0);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 - 176) = *(_OWORD *)v1;
  *(_OWORD *)(v6 - 160) = v7;
  *(_OWORD *)(v6 - 144) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v6 - 128) = *(_QWORD *)(v1 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v0);
  sub_23BDCDC58();
  v8 = *(_QWORD *)(v6 - 328);
  v9 = *(_QWORD *)(v6 - 336);
  sub_23BDCDA90();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 8))(v4, v2);
  v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 - 176) = *(_OWORD *)v1;
  *(_OWORD *)(v6 - 160) = v10;
  *(_OWORD *)(v6 - 144) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v6 - 128) = *(_QWORD *)(v1 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v11 = *(_QWORD *)(v6 - 272);
  v12 = *(_QWORD *)(v6 - 288);
  v13 = *(_QWORD *)(v6 - 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v0 + *(int *)(*(_QWORD *)(v6 - 304) + 32), v13);
  sub_23BD69D7C(v0);
  sub_23BDCD5BC();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v14 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v6 - 224) = v9;
  *(_QWORD *)(v6 - 216) = v14;
  v15 = MEMORY[0x24BDED308];
  v16 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v5, v6 - 224);
  v17 = *(_QWORD *)(v6 - 312);
  sub_23BDCDAC0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 264) + 8))(v8, v5);
  v18 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v6 - 240) = v16;
  *(_QWORD *)(v6 - 232) = v18;
  MEMORY[0x242611F78](v15, v3, v6 - 240);
  v19 = *(_QWORD *)(v6 - 280);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v21 = *(_QWORD *)(v6 - 296);
  v20(v21, v17, v3);
  v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v22(v17, v3);
  v20(*(_QWORD *)(v6 - 248), v21, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v22)(v21, v3);
}

void sub_23BD68478(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v30 = a2;
  v31 = a4;
  v38 = a6;
  v24 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v22 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23BDCD700();
  v25 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v27 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v26 = (char *)&v20 - v13;
  v21 = type metadata accessor for AwardHeaderLayout();
  MEMORY[0x24BDAC7A8](v21);
  v29 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v32);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  MEMORY[0x24BDAC7A8](v15);
  v23 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v28 = v10;
  swift_getTupleTypeMetadata2();
  v34 = sub_23BDCDC70();
  v37 = sub_23BDCDE50();
  v33 = *(_QWORD *)(v37 - 8);
  v16 = MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v35 = (char *)&v20 - v18;
  v19 = a1[1];
  v43 = *a1;
  v44 = v19;
  v45 = a1[2];
  v46 = *((_QWORD *)a1 + 6);
  sub_23BDCD82C();
  v39 = v30;
  v40 = a3;
  v41 = v31;
  v42 = a5;
  v30 = a3;
  v31 = a5;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD686E8()
{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  sub_23BD667C0(v4);
  v8 = *(_OWORD *)(v0 + 99);
  v2[47] = *(_OWORD *)(v0 + 97);
  v2[48] = v8;
  v2[49] = *(_OWORD *)(v0 + 101);
  *((_WORD *)v0 + 504) = *((_WORD *)v0 + 412);
  v9 = *(_OWORD *)(v0 + 91);
  v2[43] = *(_OWORD *)(v0 + 89);
  v2[44] = v9;
  v10 = *(_OWORD *)(v0 + 95);
  v2[45] = *(_OWORD *)(v0 + 93);
  v2[46] = v10;
  v11 = *(_OWORD *)(v0 + 83);
  v2[39] = *(_OWORD *)(v0 + 81);
  v2[40] = v11;
  v12 = *(_OWORD *)(v0 + 87);
  v2[41] = *(_OWORD *)(v0 + 85);
  v2[42] = v12;
  v13 = *(_OWORD *)(v7 + 16);
  v2[13] = *(_OWORD *)v7;
  v2[14] = v13;
  v2[15] = *(_OWORD *)(v7 + 32);
  v0[58] = *(_QWORD *)(v7 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC94();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v5);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_23BD5F3E0(v6, &qword_256AAD408);
    goto LABEL_5;
  }
  v14 = v0[9];
  v15 = *(unsigned __int8 *)(v6 + 32);
  v16 = v6 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD450) + 48);
  v17 = sub_23BDCD568();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15 != 1)
  {
LABEL_5:
    v37 = v0[14];
    v36 = v0[16];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
    goto LABEL_6;
  }
  v18 = *(_OWORD *)(v7 + 16);
  v2[13] = *(_OWORD *)v7;
  v2[14] = v18;
  v2[15] = *(_OWORD *)(v7 + 32);
  v0[58] = *(_QWORD *)(v7 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD69D7C(v14);
  sub_23BDCDC58();
  v19 = sub_23BDCD6B8();
  v20 = v0[75];
  *((_DWORD *)v0 + 24) = *((unsigned __int8 *)v0 + 608);
  v0[9] = v0[77];
  v21 = *((_BYTE *)v0 + 624);
  v22 = v0[79];
  *v0 = v0[80];
  v0[1] = v22;
  v23 = *(void (**)(uint64_t))(v7 + 40);
  v24 = v0[2];
  v23(v19);
  v25 = v0[7];
  v27 = v0[10];
  v26 = v0[11];
  sub_23BDCDAF0();
  (*(void (**)(uint64_t, uint64_t))(v0[4] + 8))(v24, v27);
  v28 = MEMORY[0x24BDEDB80];
  v0[19] = v26;
  v0[20] = v28;
  v29 = v0[8];
  v30 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v29, v0 + 19);
  v31 = v0[5];
  v32 = v0[6];
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  v33(v32, v25, v29);
  v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v34(v25, v29);
  v0[52] = 0;
  *((_BYTE *)v0 + 424) = 1;
  v0[54] = v20;
  *((_BYTE *)v0 + 440) = *((_DWORD *)v0 + 24);
  v0[56] = v0[9];
  *((_BYTE *)v0 + 456) = v21;
  v35 = *v0;
  v0[58] = v0[1];
  v0[59] = v35;
  v0[26] = (uint64_t)(v0 + 52);
  v33(v25, v32, v29);
  v0[27] = v25;
  v0[50] = v0[3];
  v0[51] = v29;
  v0[24] = sub_23BD69FC8();
  v0[25] = v30;
  v36 = v0[16];
  sub_23BDAF360(v0 + 26, 2uLL, (uint64_t)(v0 + 50));
  v34(v32, v29);
  v34(v25, v29);
  v37 = v0[14];
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 0, 1, v37);
LABEL_6:
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v37);
  v38 = v0[15];
  sub_23BDA1A54(v36, v38);
  v39 = v0[13];
  v40 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v41 = v0[17];
  v40(v36, v41);
  v42 = v2[47];
  v43 = v2[49];
  v2[9] = v2[48];
  v2[10] = v43;
  v44 = v2[43];
  v45 = v2[45];
  v46 = v2[46];
  v2[5] = v2[44];
  v2[6] = v45;
  *((_WORD *)v0 + 192) = *((_WORD *)v0 + 504);
  v2[7] = v46;
  v2[8] = v42;
  v47 = v2[40];
  *((_OWORD *)v0 + 13) = v2[39];
  *((_OWORD *)v0 + 14) = v47;
  v48 = v2[42];
  *((_OWORD *)v0 + 15) = v2[41];
  *((_OWORD *)v0 + 16) = v48;
  *((_OWORD *)v0 + 17) = v44;
  *((_WORD *)v0 + 193) = 256;
  v0[50] = (uint64_t)(v0 + 26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v36, v38, v41);
  v0[51] = v36;
  sub_23BD6A1F4((uint64_t)(v0 + 81), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD6A0F8);
  v0[24] = __swift_instantiateConcreteTypeFromMangledName(qword_256AAD370);
  v0[25] = v41;
  v0[22] = sub_23BD6A188();
  v0[21] = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v37);
  v0[23] = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v41, v0 + 21);
  sub_23BDAF360(v0 + 50, 2uLL, (uint64_t)(v0 + 24));
  v40(v38, v41);
  sub_23BD6A1F4((uint64_t)(v0 + 81), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD69E48);
  v40(v36, v41);
  v49 = v2[9];
  v50 = v2[10];
  v51 = v2[7];
  v2[21] = v2[8];
  v2[22] = v49;
  v2[23] = v50;
  v52 = v2[5];
  v53 = v2[6];
  v2[17] = *((_OWORD *)v0 + 17);
  v2[18] = v52;
  *((_DWORD *)v0 + 148) = *((_DWORD *)v0 + 96);
  v2[19] = v53;
  v2[20] = v51;
  v54 = *((_OWORD *)v0 + 14);
  v2[13] = *((_OWORD *)v0 + 13);
  v2[14] = v54;
  v55 = *((_OWORD *)v0 + 16);
  v2[15] = *((_OWORD *)v0 + 15);
  v2[16] = v55;
  return sub_23BD6A1F4((uint64_t)(v0 + 52), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_23BD69E48);
}

void sub_23BD68C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23BDCD5F8();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for AwardHeaderLayout();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD68D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v1, v5 + *(int *)(v2 + 20), v6);
  sub_23BD69D7C(v5);
  v8 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)(v7 - 176) = *(_OWORD *)v4;
  *(_OWORD *)(v7 - 160) = v8;
  *(_OWORD *)(v7 - 144) = *(_OWORD *)(v4 + 32);
  *(_QWORD *)(v7 - 128) = *(_QWORD *)(v4 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v9 = (uint64_t *)(v3 + *(int *)(v2 + 60));
  v10 = *v9;
  v11 = v9[2];
  sub_23BD69D7C(v3);
  sub_23BDCD5E0();
  result = sub_23BDCD5EC();
  if (__OFSUB__(v10, 1))
  {
    __break(1u);
  }
  else if (!__OFSUB__(v11, 1))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v6);
  }
  __break(1u);
  return result;
}

void sub_23BD68E64(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[13];
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = a6;
  v19 = a5;
  v18[0] = a7;
  v21 = type metadata accessor for AwardHeaderLayout();
  v11 = MEMORY[0x24BDAC7A8](v21);
  v20 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v18[7] = (char *)v18 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v18[9] = a1;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v23 = v15;
  *((_QWORD *)&v23 + 1) = v16;
  v18[8] = sub_23BD6A0A0();
  swift_bridgeObjectRetain();
  sub_23BDCD9AC();
  v17 = a2[1];
  v23 = *a2;
  v24 = v17;
  v25 = a2[2];
  v26 = *((_QWORD *)a2 + 6);
  v27 = a3;
  v28 = a4;
  v29 = v19;
  v30 = v22;
  type metadata accessor for AwardHeaderView();
}

uint64_t sub_23BD68FBC(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t KeyPath;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  *(_QWORD *)(v7 - 272) = a1;
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v8 = *(int *)(v4 + 68);
  *(_QWORD *)(v7 - 392) = v3;
  v9 = (char *)(v3 + v8);
  v10 = *v9;
  v11 = v9[1];
  sub_23BD69D7C(v3);
  *(_BYTE *)(v7 - 192) = v10;
  *(_BYTE *)(v7 - 191) = v11;
  sub_23BDB29F4();
  v12 = sub_23BDCD994();
  v14 = v13;
  v16 = v15;
  swift_release();
  sub_23BD5F120(v6, v5, v1);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 - 192) = sub_23BDCD868();
  *(_QWORD *)(v7 - 304) = sub_23BDCD970();
  *(_QWORD *)(v7 - 312) = v17;
  *(_QWORD *)(v7 - 296) = v18;
  *(_DWORD *)(v7 - 316) = v19 & 1;
  sub_23BD5F120(v12, v14, v16 & 1);
  swift_bridgeObjectRelease();
  v20 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v7 - 192) = *(_OWORD *)v2;
  *(_OWORD *)(v7 - 176) = v20;
  *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v21 = *(_QWORD *)(v7 - 344);
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v22 = *(_QWORD *)(v7 - 280);
  *(_DWORD *)(v7 - 320) = *(unsigned __int8 *)(v21 + *(int *)(v22 + 64));
  sub_23BD69D7C(v21);
  *(_QWORD *)(v7 - 344) = swift_getKeyPath();
  v23 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v7 - 192) = *(_OWORD *)v2;
  *(_OWORD *)(v7 - 176) = v23;
  *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v24 = *(_QWORD *)(v7 - 392);
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v25 = v22;
  sub_23BD69D7C(v24);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  *(_QWORD *)(v7 - 352) = *(_QWORD *)(v7 - 136);
  *(_DWORD *)(v7 - 380) = *(unsigned __int8 *)(v7 - 128);
  *(_QWORD *)(v7 - 360) = *(_QWORD *)(v7 - 120);
  *(_DWORD *)(v7 - 384) = *(unsigned __int8 *)(v7 - 112);
  *(_QWORD *)(v7 - 368) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 376) = *(_QWORD *)(v7 - 96);
  v26 = *(_QWORD *)(v7 - 328);
  v27 = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v7 - 192) = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v7 - 184) = v27;
  swift_bridgeObjectRetain();
  v28 = sub_23BDCD9AC();
  v30 = v29;
  v32 = v31 & 1;
  v33 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v7 - 192) = *(_OWORD *)v2;
  *(_OWORD *)(v7 - 176) = v33;
  *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v34 = (char *)(v24 + *(int *)(v25 + 24));
  v35 = *v34;
  LOBYTE(v25) = v34[1];
  sub_23BD69D7C(v24);
  *(_BYTE *)(v7 - 192) = v35;
  *(_BYTE *)(v7 - 191) = v25;
  sub_23BDB29F4();
  v36 = sub_23BDCD994();
  v38 = v37;
  LOBYTE(v24) = v39;
  swift_release();
  v40 = v24 & 1;
  sub_23BD5F120(v28, v30, v32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v7 - 192) = sub_23BDCD874();
  v41 = sub_23BDCD970();
  v43 = v42;
  v45 = v44;
  LOBYTE(v30) = v46 & 1;
  sub_23BD5F120(v36, v38, v40);
  swift_bridgeObjectRelease();
  v47 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v7 - 192) = *(_OWORD *)v2;
  *(_OWORD *)(v7 - 176) = v47;
  *(_OWORD *)(v7 - 160) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v2 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  v48 = *(_QWORD *)(v7 - 288);
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  LOBYTE(v25) = *(_BYTE *)(v48 + *(int *)(*(_QWORD *)(v7 - 280) + 64));
  sub_23BD69D7C(v48);
  KeyPath = swift_getKeyPath();
  v50 = *(_DWORD *)(v7 - 316);
  *(_BYTE *)(v7 - 264) = v50;
  *(_BYTE *)(v7 - 192) = v50;
  *(_BYTE *)(v7 - 232) = 1;
  v51 = *(_DWORD *)(v7 - 380);
  *(_BYTE *)(v7 - 240) = v51;
  v52 = *(_DWORD *)(v7 - 384);
  *(_BYTE *)(v7 - 248) = v52;
  *(_BYTE *)(v7 - 256) = v30;
  v53 = *(_QWORD *)(v7 - 304);
  v54 = *(_QWORD *)(v7 - 400);
  v55 = *(_QWORD *)(v7 - 312);
  *(_QWORD *)v54 = v53;
  *(_QWORD *)(v54 + 8) = v55;
  *(_BYTE *)(v54 + 16) = v50;
  v56 = *(_QWORD *)(v7 - 344);
  *(_QWORD *)(v54 + 24) = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v54 + 32) = v56;
  *(_BYTE *)(v54 + 40) = *(_DWORD *)(v7 - 320);
  *(_QWORD *)(v54 + 48) = 0;
  *(_BYTE *)(v54 + 56) = 1;
  *(_QWORD *)(v54 + 64) = *(_QWORD *)(v7 - 352);
  *(_BYTE *)(v54 + 72) = v51;
  *(_QWORD *)(v54 + 80) = *(_QWORD *)(v7 - 360);
  *(_BYTE *)(v54 + 88) = v52;
  v57 = *(_QWORD *)(v7 - 376);
  *(_QWORD *)(v54 + 96) = *(_QWORD *)(v7 - 368);
  *(_QWORD *)(v54 + 104) = v57;
  *(_QWORD *)(v54 + 112) = v41;
  *(_QWORD *)(v54 + 120) = v43;
  *(_BYTE *)(v54 + 128) = v30;
  *(_QWORD *)(v54 + 136) = v45;
  *(_QWORD *)(v54 + 144) = KeyPath;
  *(_BYTE *)(v54 + 152) = v25;
  v58 = v55;
  sub_23BD5F194(v53, v55, v50);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BD5F194(v41, v43, v30);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BD5F120(v41, v43, v30);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BD5F120(v53, v58, *(_BYTE *)(v7 - 264));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD69590()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BD69598()
{
  sub_23BD5E388();
  swift_release();
  return swift_release();
}

uint64_t sub_23BD695D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = a2[3];
  v7 = a2[6];
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = v7;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BD6964C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BD5E388();
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  v8 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23BD696DC(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BD5E388();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t sub_23BD69740(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23BD69788(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AwardHeaderView()
{
  JUMPOUT(0x242611EDCLL);
}

uint64_t sub_23BD697E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];

  v1 = a1[1];
  v3 = a1[2];
  v2 = a1[3];
  v4 = sub_23BDCD700();
  v50[0] = v3;
  v50[1] = MEMORY[0x24BDEEC40];
  v43 = v4;
  v44 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v4, v50);
  v5 = MEMORY[0x24BDF3110];
  MEMORY[0x242611F18](255, &v43, MEMORY[0x24BDF3110], 0);
  v43 = sub_23BDCD700();
  v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD360);
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v48 = v1;
  v49 = v2;
  MEMORY[0x242611F18](255, &v48, v5, 0);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  v45 = sub_23BDCDE50();
  v46 = v6;
  swift_getTupleTypeMetadata();
  v7 = sub_23BDCDC70();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v7);
  v34 = sub_23BDCDBE0();
  v9 = sub_23BDCD700();
  v10 = sub_23BDCD700();
  v43 = v10;
  v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  sub_23BDCD700();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  v45 = sub_23BDCDE50();
  v46 = v11;
  swift_getTupleTypeMetadata();
  v12 = sub_23BDCDC70();
  MEMORY[0x242611F78](v8, v12);
  v13 = sub_23BDCDBE0();
  v14 = sub_23BDCD700();
  v33 = sub_23BDCD850();
  v15 = MEMORY[0x24BDF4700];
  v16 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v13);
  v43 = v13;
  v44 = v16;
  v17 = MEMORY[0x24BDF3110];
  MEMORY[0x242611F18](255, &v43, MEMORY[0x24BDF3110], 0);
  v43 = MEMORY[0x24BDF4638];
  v42[0] = v3;
  v42[1] = MEMORY[0x24BDEBEE0];
  v18 = MEMORY[0x24BDED308];
  v41[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v9, v42);
  v41[1] = MEMORY[0x24BDECC60];
  MEMORY[0x242611F78](v18, v10, v41);
  v44 = sub_23BDCDBE0();
  v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  sub_23BDCDE50();
  swift_getTupleTypeMetadata2();
  v19 = sub_23BDCDC70();
  v20 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v19);
  v21 = sub_23BDCDBE0();
  v22 = MEMORY[0x242611F78](v15, v21);
  v48 = v21;
  v49 = v22;
  v46 = MEMORY[0x242611F18](255, &v48, v17, 0);
  v47 = MEMORY[0x24BDF4638];
  swift_getTupleTypeMetadata();
  v23 = sub_23BDCDC70();
  MEMORY[0x242611F78](v20, v23);
  v24 = sub_23BDCDBC8();
  v25 = sub_23BDCD850();
  v26 = sub_23BDCD850();
  v27 = sub_23BDCDB68();
  v28 = sub_23BDCD700();
  v29 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v34);
  v40[0] = v16;
  v40[1] = MEMORY[0x24BDEBEE0];
  v39[0] = v29;
  v39[1] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v14, v40);
  v30 = MEMORY[0x24BDEF3E0];
  v31 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v33, v39);
  v43 = v13;
  v44 = v16;
  v38[0] = swift_getOpaqueTypeConformance2();
  v38[1] = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v24);
  v37[0] = v31;
  v37[1] = MEMORY[0x242611F78](v30, v25, v38);
  v36 = MEMORY[0x242611F78](v30, v26, v37);
  v35[0] = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v27, &v36);
  v35[1] = MEMORY[0x24BDF0910];
  return MEMORY[0x242611F78](MEMORY[0x24BDED308], v28, v35);
}

uint64_t sub_23BD69D7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AwardHeaderLayout();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD69DB8()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD65874);
}

unint64_t sub_23BD69DC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAD428;
  if (!qword_256AAD428)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD420);
    v2 = sub_23BD5ED30(&qword_256AAD430, &qword_256AAD438, MEMORY[0x24BDF4700]);
    v3[0] = MEMORY[0x24BDF3E20];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAD428);
  }
  return result;
}

uint64_t sub_23BD69E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) == 0)
    return swift_release();
  sub_23BD5F120(a4, a5, a6 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BD5F120(a18, a19, a20 & 1);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD69EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD69F34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256AAD440;
  if (!qword_256AAD440)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD360);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD420);
    v2[3] = sub_23BD69DC4();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD440);
  }
  return result;
}

unint64_t sub_23BD69FC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAD448;
  if (!qword_256AAD448)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
    v2[0] = MEMORY[0x24BDF4610];
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD448);
  }
  return result;
}

uint64_t sub_23BD6A02C()
{
  return swift_deallocObject();
}

double sub_23BD6A03C(double a1)
{
  uint64_t v1;

  return *(double *)(v1 + 16) * a1;
}

uint64_t sub_23BD6A048(uint64_t result)
{
  *(_BYTE *)(result + 177) = 1;
  return result;
}

uint64_t sub_23BD6A054(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23BD6A098(uint64_t result)
{
  *(_BYTE *)(result + 177) = 0;
  return result;
}

unint64_t sub_23BD6A0A0()
{
  unint64_t result;

  result = qword_256AAD460;
  if (!qword_256AAD460)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256AAD460);
  }
  return result;
}

uint64_t sub_23BD6A0EC()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD66D5C);
}

uint64_t sub_23BD6A0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) != 0)
  {
    sub_23BD5F194(a4, a5, a6 & 1);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_23BD5F194(a18, a19, a20 & 1);
    swift_bridgeObjectRetain();
  }
  return swift_retain();
}

unint64_t sub_23BD6A188()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAD468;
  if (!qword_256AAD468)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAD370);
    v2[0] = sub_23BD69DC4();
    v2[1] = MEMORY[0x24BDEDB80];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD468);
  }
  return result;
}

uint64_t sub_23BD6A1F4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_WORD *)(a1 + 176));
  return a1;
}

uint64_t sub_23BD6A268()
{
  return swift_deallocObject();
}

uint64_t sub_23BD6A278()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD67A10);
}

uint64_t sub_23BD6A284()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD67FD0);
}

uint64_t sub_23BD6A290()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD68478);
}

uint64_t sub_23BD6A29C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t objectdestroy_2Tm_0()
{
  sub_23BD5E388();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BD6A2EC()
{
  sub_23BD68C10();
}

uint64_t sub_23BD6A308(char a1)
{
  return *(_QWORD *)&aIdle_4[8 * a1];
}

uint64_t sub_23BD6A328()
{
  char *v0;

  return sub_23BD6A308(*v0);
}

uint64_t sub_23BD6A330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD6C064(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD6A354(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23BD6A360()
{
  sub_23BD6A918();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6A388()
{
  sub_23BD6A918();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD6A3B0()
{
  sub_23BD6A9A0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6A3D8()
{
  sub_23BD6A9A0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD6A404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD6C198(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD6A42C()
{
  sub_23BD6A9E4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6A454()
{
  sub_23BD6A9E4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD6A47C()
{
  sub_23BD6AA28();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6A4A4()
{
  sub_23BD6AA28();
  return sub_23BDCE0E4();
}

uint64_t AwardProgressLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD470);
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD478);
  v35 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23BDCD58C();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v36 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD480);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD488);
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD6A918();
  sub_23BDCE0CC();
  sub_23BD6A95C(v44, (uint64_t)v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17 = *((_QWORD *)v12 + 1);
      v44 = *(_QWORD *)v12;
      v18 = v44;
      v19 = *((_QWORD *)v12 + 2);
      v20 = *((_QWORD *)v12 + 3);
      v21 = v12[32];
      LOBYTE(v47) = 2;
      sub_23BD6A9A0();
      v22 = v40;
      v23 = v46;
      sub_23BDCDFAC();
      v47 = v18;
      v48 = v17;
      v49 = v19;
      v50 = v20;
      v51 = v21;
      sub_23BD604C0();
      v24 = v43;
      sub_23BDCE00C();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v22, v24);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v23);
      return sub_23BD5F110(v44, v17, v19, v20, v21);
    }
    else
    {
      LOBYTE(v47) = 0;
      sub_23BD6AA28();
      v33 = v46;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v15, v33);
    }
  }
  else
  {
    v26 = v35;
    v27 = v36;
    v28 = v37;
    v29 = v39;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v12, v39);
    LOBYTE(v47) = 1;
    sub_23BD6A9E4();
    v30 = v38;
    v31 = v46;
    sub_23BDCDFAC();
    sub_23BD6B5DC(&qword_256AAD4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v32 = v41;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v15, v31);
  }
}

uint64_t type metadata accessor for AwardProgressLoadState()
{
  uint64_t result;

  result = qword_256AAD558;
  if (!qword_256AAD558)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD6A918()
{
  unint64_t result;

  result = qword_256AAD490;
  if (!qword_256AAD490)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFD4C, &type metadata for AwardProgressLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD490);
  }
  return result;
}

uint64_t sub_23BD6A95C(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardProgressLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

unint64_t sub_23BD6A9A0()
{
  unint64_t result;

  result = qword_256AAD498;
  if (!qword_256AAD498)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFCFC, &type metadata for AwardProgressLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD498);
  }
  return result;
}

unint64_t sub_23BD6A9E4()
{
  unint64_t result;

  result = qword_256AAD4A0;
  if (!qword_256AAD4A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFCAC, &type metadata for AwardProgressLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD4A0);
  }
  return result;
}

unint64_t sub_23BD6AA28()
{
  unint64_t result;

  result = qword_256AAD4B0;
  if (!qword_256AAD4B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFC5C, &type metadata for AwardProgressLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD4B0);
  }
  return result;
}

uint64_t AwardProgressLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char *v64;

  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD4B8);
  v53 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v58 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD4C0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v57 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD4C8);
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v56 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD4D0);
  v55 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  v11 = MEMORY[0x24BDAC7A8](State);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v45 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v45 - v17;
  v19 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23BD6A918();
  v20 = v9;
  v21 = (uint64_t)v64;
  sub_23BDCE0C0();
  if (v21)
    goto LABEL_9;
  v22 = v56;
  v23 = v57;
  v45 = v13;
  v46 = v16;
  v64 = v18;
  v47 = State;
  v24 = v58;
  v25 = v59;
  v26 = v20;
  v27 = sub_23BDCDFA0();
  if (*(_QWORD *)(v27 + 16) != 1)
  {
    v28 = v25;
    v29 = sub_23BDCDEC8();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v31 = v47;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v28);
LABEL_9:
    v36 = (uint64_t)v60;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(_BYTE *)(v27 + 32))
  {
    if (*(_BYTE *)(v27 + 32) == 1)
    {
      LOBYTE(v61) = 1;
      sub_23BD6A9E4();
      sub_23BDCDF28();
      sub_23BDCD58C();
      sub_23BD6B5DC(&qword_256AAD4D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
      v34 = (uint64_t)v46;
      v35 = v52;
      sub_23BDCDF94();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v23, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v25);
      v36 = (uint64_t)v60;
      swift_storeEnumTagMultiPayload();
      v37 = (uint64_t)v64;
      sub_23BD6B04C(v34, (uint64_t)v64);
      v38 = v54;
    }
    else
    {
      LOBYTE(v61) = 2;
      sub_23BD6A9A0();
      v32 = v24;
      sub_23BDCDF28();
      v38 = v54;
      sub_23BD61304();
      v39 = v50;
      sub_23BDCDF94();
      v36 = (uint64_t)v60;
      v40 = v55;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v32, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v59);
      v41 = v63;
      v42 = v62;
      v43 = v45;
      *v45 = v61;
      v43[1] = v42;
      *((_BYTE *)v43 + 32) = v41;
      swift_storeEnumTagMultiPayload();
      v44 = (uint64_t)v43;
      v37 = (uint64_t)v64;
      sub_23BD6B04C(v44, (uint64_t)v64);
    }
  }
  else
  {
    LOBYTE(v61) = 0;
    sub_23BD6AA28();
    sub_23BDCDF28();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v22, v49);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v25);
    v37 = (uint64_t)v64;
    swift_storeEnumTagMultiPayload();
    v36 = (uint64_t)v60;
    v38 = v54;
  }
  sub_23BD6B04C(v37, v38);
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t sub_23BD6B04C(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardProgressLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32))(a2, a1, State);
  return a2;
}

uint64_t sub_23BD6B090@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardProgressLoadState.init(from:)(a1, a2);
}

uint64_t sub_23BD6B0A4(_QWORD *a1)
{
  return AwardProgressLoadState.encode(to:)(a1);
}

uint64_t AwardProgressLoadState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t State;
  uint64_t v7;
  _BYTE *v8;
  int EnumCaseMultiPayload;
  _BYTE v12[40];

  v1 = v0;
  v2 = sub_23BDCD58C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23BD6A95C(v1, (uint64_t)v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BD6B22C((uint64_t)v8, (uint64_t)v12);
      sub_23BDCE090();
      AwardProgress.hash(into:)();
      return sub_23BD6B324((uint64_t)v12);
    }
    else
    {
      return sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_23BD6B22C(uint64_t a1, uint64_t a2)
{
  __swift_memcpy33_8(a2, a1);
  return a2;
}

uint64_t AwardProgressLoadState.hashValue.getter()
{
  sub_23BDCE084();
  AwardProgressLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD6B2A8()
{
  sub_23BDCE084();
  AwardProgressLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD6B2E8()
{
  sub_23BDCE084();
  AwardProgressLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD6B324(uint64_t a1)
{
  sub_23BD5F110(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t _s13FitnessAwards22AwardProgressLoadStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  char v20;
  void (*v21)(_BYTE *, uint64_t);
  _BYTE v23[40];
  _BYTE v24[40];

  v4 = sub_23BDCD58C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  State = type metadata accessor for AwardProgressLoadState();
  v9 = MEMORY[0x24BDAC7A8](State);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v23[-v12];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD5E8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_23BD6A95C(a1, (uint64_t)v17);
  sub_23BD6A95C(a2, v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BD6A95C((uint64_t)v17, (uint64_t)v13);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v7, v18, v4);
      v20 = sub_23BDCD574();
      v21 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v21(v7, v4);
      v21(v13, v4);
      goto LABEL_12;
    }
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BD6A95C((uint64_t)v17, (uint64_t)v11);
    sub_23BD6B22C((uint64_t)v11, (uint64_t)v23);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_23BD6B22C(v18, (uint64_t)v24);
      v20 = _s13FitnessAwards13AwardProgressO2eeoiySbAC_ACtFZ_0((uint64_t)v23, (uint64_t)v24);
      sub_23BD6B324((uint64_t)v23);
      sub_23BD6B324((uint64_t)v24);
LABEL_12:
      sub_23BD5EE48((uint64_t)v17);
      return v20 & 1;
    }
    sub_23BD6B324((uint64_t)v23);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    sub_23BD6C234((uint64_t)v17);
    v20 = 0;
    return v20 & 1;
  }
  sub_23BD5EE48((uint64_t)v17);
  v20 = 1;
  return v20 & 1;
}

uint64_t sub_23BD6B5B0()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AAD0A0, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressLoadState, (uint64_t)&protocol conformance descriptor for AwardProgressLoadState);
}

uint64_t sub_23BD6B5DC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242611F78](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardProgressLoadState(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 2);
      v13 = *((_QWORD *)a2 + 3);
      v14 = *((_BYTE *)a2 + 32);
      sub_23BD6B728(v10, v11, v12, v13, v14);
      *a1 = v10;
      a1[1] = v11;
      a1[2] = v12;
      a1[3] = v13;
      *((_BYTE *)a1 + 32) = v14;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BD6B728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AwardProgressLoadState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
    return sub_23BD5F110(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  if (!(_DWORD)result)
  {
    v3 = sub_23BDCD58C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

uint64_t *initializeWithCopy for AwardProgressLoadState(uint64_t *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v11 = *((_QWORD *)a2 + 3);
    v12 = *((_BYTE *)a2 + 32);
    sub_23BD6B728(v8, v9, v10, v11, v12);
    *a1 = v8;
    a1[1] = v9;
    a1[2] = v10;
    a1[3] = v11;
    *((_BYTE *)a1 + 32) = v12;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_23BDCD58C();
    (*(void (**)(uint64_t *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t *assignWithCopy for AwardProgressLoadState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    sub_23BD5EE48((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[2];
      v11 = a2[3];
      v12 = *((_BYTE *)a2 + 32);
      sub_23BD6B728(v8, v9, v10, v11, v12);
      *a1 = v8;
      a1[1] = v9;
      a1[2] = v10;
      a1[3] = v11;
      *((_BYTE *)a1 + 32) = v12;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for AwardEarnedLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AwardProgressLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23BD5EE48((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardEarnedLoadState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AwardEarnedLoadState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23BD6BAB4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23BD6BAC4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardProgressLoadState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgressLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD6BC0C + 4 * byte_23BDCF885[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD6BC40 + 4 * byte_23BDCF880[v4]))();
}

uint64_t sub_23BD6BC40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD6BC48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD6BC50);
  return result;
}

uint64_t sub_23BD6BC5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD6BC64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD6BC68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD6BC70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressLoadState.CodingKeys()
{
  return &type metadata for AwardProgressLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressLoadState.IdleCodingKeys()
{
  return &type metadata for AwardProgressLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressLoadState.FetchingCodingKeys()
{
  return &type metadata for AwardProgressLoadState.FetchingCodingKeys;
}

uint64_t _s13FitnessAwards22AwardProgressLoadStateO18FetchingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD6BCF0 + 4 * byte_23BDCF88A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD6BD10 + 4 * byte_23BDCF88F[v4]))();
}

_BYTE *sub_23BD6BCF0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD6BD10(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD6BD18(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD6BD20(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD6BD28(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD6BD30(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressLoadState.FetchedCodingKeys()
{
  return &type metadata for AwardProgressLoadState.FetchedCodingKeys;
}

unint64_t sub_23BD6BD50()
{
  unint64_t result;

  result = qword_256AAD590;
  if (!qword_256AAD590)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFA74, &type metadata for AwardProgressLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD590);
  }
  return result;
}

unint64_t sub_23BD6BD98()
{
  unint64_t result;

  result = qword_256AAD598;
  if (!qword_256AAD598)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFB2C, &type metadata for AwardProgressLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD598);
  }
  return result;
}

unint64_t sub_23BD6BDE0()
{
  unint64_t result;

  result = qword_256AAD5A0;
  if (!qword_256AAD5A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFC34, &type metadata for AwardProgressLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5A0);
  }
  return result;
}

unint64_t sub_23BD6BE28()
{
  unint64_t result;

  result = qword_256AAD5A8;
  if (!qword_256AAD5A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFB54, &type metadata for AwardProgressLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5A8);
  }
  return result;
}

unint64_t sub_23BD6BE70()
{
  unint64_t result;

  result = qword_256AAD5B0;
  if (!qword_256AAD5B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFB7C, &type metadata for AwardProgressLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5B0);
  }
  return result;
}

unint64_t sub_23BD6BEB8()
{
  unint64_t result;

  result = qword_256AAD5B8;
  if (!qword_256AAD5B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFA9C, &type metadata for AwardProgressLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5B8);
  }
  return result;
}

unint64_t sub_23BD6BF00()
{
  unint64_t result;

  result = qword_256AAD5C0;
  if (!qword_256AAD5C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFAC4, &type metadata for AwardProgressLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5C0);
  }
  return result;
}

unint64_t sub_23BD6BF48()
{
  unint64_t result;

  result = qword_256AAD5C8;
  if (!qword_256AAD5C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCF9E4, &type metadata for AwardProgressLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5C8);
  }
  return result;
}

unint64_t sub_23BD6BF90()
{
  unint64_t result;

  result = qword_256AAD5D0;
  if (!qword_256AAD5D0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFA0C, &type metadata for AwardProgressLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5D0);
  }
  return result;
}

unint64_t sub_23BD6BFD8()
{
  unint64_t result;

  result = qword_256AAD5D8;
  if (!qword_256AAD5D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFBA4, &type metadata for AwardProgressLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5D8);
  }
  return result;
}

unint64_t sub_23BD6C020()
{
  unint64_t result;

  result = qword_256AAD5E0;
  if (!qword_256AAD5E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFBCC, &type metadata for AwardProgressLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD5E0);
  }
  return result;
}

uint64_t sub_23BD6C064(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1701602409 && a2 == 0xE400000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696863746566 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656863746566 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD6C198(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65636E6174736E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD6C21C()
{
  return 0x65636E6174736E69;
}

uint64_t sub_23BD6C234(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD5E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23BD6C274()
{
  qword_256AAD5F0 = 0x756F5920726F46;
  *(_QWORD *)algn_256AAD5F8 = 0xE700000000000000;
}

uint64_t static AwardConstants.associatedCanvasIdentifier.getter()
{
  return sub_23BD6C2F8(&qword_256AACDF0, &qword_256AAD5F0);
}

void sub_23BD6C2B8()
{
  qword_256AAD600 = 0x736472617761;
  *(_QWORD *)algn_256AAD608 = 0xE600000000000000;
}

uint64_t static AwardConstants.associatedShelfIdentifier.getter()
{
  return sub_23BD6C2F8(&qword_256AACDF8, &qword_256AAD600);
}

uint64_t sub_23BD6C2F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t static AwardConstants.longestWeeklyStreakAwardName.getter()
{
  return 0xD000000000000023;
}

double static AwardConstants.minimumVerticalSwipeDistance.getter()
{
  return 20.0;
}

unint64_t static AwardConstants.weeklyStreakAwardName.getter()
{
  return 0xD00000000000001CLL;
}

ValueMetadata *type metadata accessor for AwardConstants()
{
  return &type metadata for AwardConstants;
}

ValueMetadata *type metadata accessor for AwardEnvironmentCacheUpdatedEvent()
{
  return &type metadata for AwardEnvironmentCacheUpdatedEvent;
}

__n128 AwardProgressFeature.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  type metadata accessor for AwardProgressFeature();
  sub_23BDCD580();
  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for AwardProgressFeature()
{
  uint64_t result;

  result = qword_256AAD6C0;
  if (!qword_256AAD6C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD6C424()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD6C484()
{
  sub_23BDCE090();
  return sub_23BDCDD90();
}

uint64_t sub_23BD6C4C4()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD6C520(uint64_t a1, uint64_t a2)
{
  return sub_23BD6F550(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t AwardProgressFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t result;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int EnumCaseMultiPayload;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  uint64_t v135;
  uint64_t State;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143[2];

  v134 = a3;
  v137 = a2;
  v126 = a1;
  v5 = sub_23BDCD58C();
  v127 = *(_QWORD *)(v5 - 8);
  v128 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v122 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  v7 = MEMORY[0x24BDAC7A8](State);
  v123 = (uint64_t)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v121 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v124 = (uint64_t)&v121 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v121 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v125 = (uint64_t)&v121 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v130 = (char *)&v121 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v129 = (char *)&v121 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v131 = (char *)&v121 - v23;
  v24 = type metadata accessor for AwardProgressFeature();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  MEMORY[0x24BDAC7A8](v24);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD610);
  v132 = *(_QWORD *)(v27 - 8);
  v133 = v27;
  v28 = MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v121 - v30;
  v32 = *(_QWORD *)a4;
  v33 = *(_QWORD *)(a4 + 8);
  v35 = *(_QWORD *)(a4 + 16);
  v34 = *(_QWORD *)(a4 + 24);
  v36 = *(unsigned __int8 *)(a4 + 32);
  if (v36 >> 6)
  {
    if (v36 >> 6 == 1)
    {
      v38 = *((_QWORD *)v137 + 1);
      v37 = *((_QWORD *)v137 + 2);
      v39 = v32;
      v40 = v34;
      sub_23BD6EC40(v32, v33, v35, v34, v36);
      v41 = qword_256AACE00;
      swift_bridgeObjectRetain();
      if (v41 != -1)
        swift_once();
      v42 = sub_23BDCD628();
      v43 = __swift_project_value_buffer(v42, (uint64_t)qword_256AAF4B0);
      sub_23BD6EC40(v39, v33, v35, v40, v36);
      sub_23BD6EC40(v39, v33, v35, v40, v36);
      swift_bridgeObjectRetain();
      v135 = v43;
      v44 = sub_23BDCD610();
      v45 = sub_23BDCDE38();
      v46 = v45;
      v47 = os_log_type_enabled(v44, v45);
      v121 = v39;
      if (v47)
      {
        v48 = swift_slowAlloc();
        LODWORD(v133) = v46;
        v49 = v38;
        v50 = v48;
        v134 = (unint64_t *)swift_slowAlloc();
        v143[0] = (uint64_t)v134;
        *(_DWORD *)v50 = 136315394;
        swift_bridgeObjectRetain();
        v138 = sub_23BD6E4F0(v49, v37, v143);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v50 + 12) = 2080;
        v138 = v39;
        v139 = v33;
        v140 = v35;
        v141 = v40;
        v142 = v36 & 1;
        sub_23BD6B728(v39, v33, v35, v40, v36 & 1);
        v51 = sub_23BDCDD78();
        v138 = sub_23BD6E4F0(v51, v52, v143);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        sub_23BD6EC68(v39, v33, v35, v40, v36);
        v53 = v39;
        v54 = v40;
        sub_23BD6EC68(v53, v33, v35, v40, v36);
        _os_log_impl(&dword_23BD56000, v44, (os_log_type_t)v133, "[AwardProgressFeature] (%s) Progress fetched: %s", (uint8_t *)v50, 0x16u);
        v55 = v134;
        swift_arrayDestroy();
        MEMORY[0x242611FFC](v55, -1, -1);
        MEMORY[0x242611FFC](v50, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        sub_23BD6EC68(v39, v33, v35, v40, v36);
        v74 = v39;
        v54 = v40;
        sub_23BD6EC68(v74, v33, v35, v40, v36);
      }

      v75 = (uint64_t)v129;
      v76 = (uint64_t)v130;
      v77 = (uint64_t)&v137[*(int *)(type metadata accessor for AwardProgressState() + 24)];
      v78 = (uint64_t)v131;
      sub_23BD594E4(v77, (uint64_t)v131, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      sub_23BD594E4(v78, v75, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_23BD5EE48(v78);
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v75, v128);
        sub_23BD5EE48(v77);
        *(_QWORD *)v77 = v121;
        *(_QWORD *)(v77 + 8) = v33;
        *(_QWORD *)(v77 + 16) = v35;
        *(_QWORD *)(v77 + 24) = v54;
        *(_BYTE *)(v77 + 32) = v36 & 1;
        return swift_storeEnumTagMultiPayload();
      }
      sub_23BD6EC68(v121, v33, v35, v54, v36);
      sub_23BD5EE48(v75);
      sub_23BD594E4(v78, v76, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      v79 = sub_23BDCD610();
      v80 = sub_23BDCDE38();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc();
        v82 = swift_slowAlloc();
        v138 = v82;
        *(_DWORD *)v81 = 136315138;
        sub_23BD594E4(v76, v125, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
        v83 = sub_23BDCDD78();
        v143[0] = sub_23BD6E4F0(v83, v84, &v138);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        sub_23BD5EE48(v76);
        _os_log_impl(&dword_23BD56000, v79, v80, "[AwardProgressFeature] Current state is %s, skipping .fetched update", v81, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242611FFC](v82, -1, -1);
        MEMORY[0x242611FFC](v81, -1, -1);

      }
      else
      {

        sub_23BD5EE48(v76);
      }
LABEL_26:
      v86 = v78;
      return sub_23BD5EE48(v86);
    }
    if (!(v35 | v33 | v32 | v34) && v36 == 128)
    {
      v138 = 2;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0x80;
      return AwardProgressFeature.reduce(localState:sharedState:sideEffects:action:)(v126, v137, v134, &v138);
    }
    if (v36 != 128 || v32 != 1 || v35 | v33 | v34)
    {
      v87 = v29;
      v88 = v137;
      v90 = *((_QWORD *)v137 + 1);
      v89 = *((_QWORD *)v137 + 2);
      v91 = (uint64_t)&v88[*(int *)(type metadata accessor for AwardProgressState() + 24)];
      v78 = v124;
      sub_23BD594E4(v91, v124, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      sub_23BD594E4(v78, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      swift_bridgeObjectRetain();
      sub_23BD5EE48((uint64_t)v11);
      if (EnumCaseMultiPayload == 2)
      {
        sub_23BD5EE48(v91);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16))(v91, v135 + *(int *)(v24 + 20), v128);
        swift_storeEnumTagMultiPayload();
        v93 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
        v94 = v87 + v93[16];
        v95 = v87 + v93[20];
        v96 = (_QWORD *)(v87 + v93[24]);
        v138 = v90;
        v139 = v89;
        LOBYTE(v140) = 1;
        sub_23BD6EB30();
        swift_bridgeObjectRetain();
        sub_23BDCDE80();
        sub_23BDCDDFC();
        v97 = swift_allocObject();
        *(_QWORD *)(v97 + 16) = v90;
        *(_QWORD *)(v97 + 24) = v89;
        *v96 = &unk_256AAD630;
        v96[1] = v97;
        v98 = *MEMORY[0x24BE2B578];
        v99 = sub_23BDCDCC4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 104))(v94, v98, v99);
        v100 = *MEMORY[0x24BE2B558];
        v101 = sub_23BDCDCB8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v95, v100, v101);
        v103 = v132;
        v102 = v133;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v132 + 104))(v87, *MEMORY[0x24BE2B438], v133);
        v104 = v134;
        v105 = *v134;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v105 = sub_23BD6E14C(0, *(_QWORD *)(v105 + 16) + 1, 1, v105, &qword_256AAD788, &qword_256AAD610);
        v107 = *(_QWORD *)(v105 + 16);
        v106 = *(_QWORD *)(v105 + 24);
        v108 = v124;
        if (v107 >= v106 >> 1)
          v105 = sub_23BD6E14C(v106 > 1, v107 + 1, 1, v105, &qword_256AAD788, &qword_256AAD610);
        *(_QWORD *)(v105 + 16) = v107 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v103 + 32))(v105+ ((*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80))+ *(_QWORD *)(v103 + 72) * v107, v87, v102);
        *v104 = v105;
        v86 = v108;
        return sub_23BD5EE48(v86);
      }
      if (qword_256AACE00 != -1)
        swift_once();
      v109 = sub_23BDCD628();
      __swift_project_value_buffer(v109, (uint64_t)qword_256AAF4B0);
      v110 = v123;
      sub_23BD594E4(v78, v123, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      swift_bridgeObjectRetain();
      v111 = sub_23BDCD610();
      v112 = sub_23BDCDE38();
      if (os_log_type_enabled(v111, v112))
      {
        v113 = swift_slowAlloc();
        v114 = swift_slowAlloc();
        v138 = v114;
        *(_DWORD *)v113 = 136315394;
        swift_bridgeObjectRetain();
        v143[0] = sub_23BD6E4F0(v90, v89, &v138);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v113 + 12) = 2080;
        sub_23BD594E4(v110, v125, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
        v115 = sub_23BDCDD78();
        v143[0] = sub_23BD6E4F0(v115, v116, &v138);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        sub_23BD5EE48(v110);
        _os_log_impl(&dword_23BD56000, v111, v112, "[AwardProgressFeature] View appeared for %s but load state was %s, returning.", (uint8_t *)v113, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611FFC](v114, -1, -1);
        MEMORY[0x242611FFC](v113, -1, -1);

      }
      else
      {

        sub_23BD5EE48(v110);
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_26;
    }
    v85 = (uint64_t)&v137[*(int *)(type metadata accessor for AwardProgressState() + 24)];
    sub_23BD594E4(v85, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    if (swift_getEnumCaseMultiPayload())
    {
      v86 = (uint64_t)v16;
      return sub_23BD5EE48(v86);
    }
    v118 = v127;
    v117 = v128;
    v119 = v122;
    (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v122, v16, v128);
    v120 = sub_23BDCD574();
    result = (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v119, v117);
    if ((v120 & 1) != 0)
    {
      sub_23BD5EE48(v85);
      return swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    v56 = v32;
    v57 = v34;
    v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
    v131 = &v31[v58[16]];
    State = (uint64_t)&v31[v58[20]];
    v137 = &v31[v58[24]];
    v138 = v56;
    v139 = v33;
    LOBYTE(v140) = 0;
    sub_23BD6EC40(v56, v33, v35, v57, v36);
    sub_23BD6EB30();
    swift_bridgeObjectRetain();
    sub_23BDCDE80();
    sub_23BDCDDFC();
    v59 = *MEMORY[0x24BE2B580];
    v60 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v131, v59, v60);
    v61 = *MEMORY[0x24BE2B550];
    v62 = sub_23BDCDCB8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 104))(State, v61, v62);
    sub_23BD594E4(v135, (uint64_t)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressFeature);
    v63 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v64 = swift_allocObject();
    sub_23BD6ED34((uint64_t)&v121 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v64 + v63);
    v65 = (uint64_t *)(v64 + ((v26 + v63 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v65 = v56;
    v65[1] = v33;
    v66 = v137;
    *(_QWORD *)v137 = &unk_256AAD640;
    *((_QWORD *)v66 + 1) = v64;
    v68 = v132;
    v67 = v133;
    (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v31, *MEMORY[0x24BE2B438], v133);
    v69 = v134;
    v70 = *v134;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v70 = sub_23BD6E14C(0, *(_QWORD *)(v70 + 16) + 1, 1, v70, &qword_256AAD788, &qword_256AAD610);
    v72 = *(_QWORD *)(v70 + 16);
    v71 = *(_QWORD *)(v70 + 24);
    if (v72 >= v71 >> 1)
      v70 = sub_23BD6E14C(v71 > 1, v72 + 1, 1, v70, &qword_256AAD788, &qword_256AAD610);
    *(_QWORD *)(v70 + 16) = v72 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v68 + 32))(v70+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(_QWORD *)(v68 + 72) * v72, v31, v67);
    *v69 = v70;
  }
  return result;
}

uint64_t sub_23BD6D3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[32] = a3;
  v4[33] = a4;
  v4[30] = a1;
  v4[31] = a2;
  sub_23BDCDDF0();
  v4[34] = sub_23BDCDDE4();
  v4[35] = sub_23BDCDDCC();
  v4[36] = v5;
  return swift_task_switch();
}

uint64_t sub_23BD6D420()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);

  v3 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))(***(int ***)(v0 + 248) + **(_QWORD **)(v0 + 248));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = sub_23BD6D48C;
  return v3(v0 + 16, *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
}

uint64_t sub_23BD6D48C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v2 + 312) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v2 + 328) = v3;
    *(_BYTE *)(v2 + 49) = *(_BYTE *)(v2 + 48);
  }
  return swift_task_switch();
}

uint64_t sub_23BD6D504()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = (_OWORD *)(v0 + 312);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
  swift_bridgeObjectRetain();
  sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
  swift_bridgeObjectRetain();
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 264);
  if (v5)
  {
    v16 = *(_QWORD *)(v0 + 256);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    sub_23BD6B22C(v0 + 16, v0 + 96);
    sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
    v9 = sub_23BDCDD78();
    *(_QWORD *)(v0 + 224) = sub_23BD6E4F0(v9, v10, &v17);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 232) = sub_23BD6E4F0(v16, v6, &v17);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardProgressFeature] Sending .progressFetched(%s action for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    v11 = v7;
    v1 = (_OWORD *)(v0 + 312);
    MEMORY[0x242611FFC](v11, -1, -1);
  }
  else
  {
    sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    sub_23BD6F7A0(v0 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    swift_bridgeObjectRelease_n();
  }

  v12 = *(_BYTE *)(v0 + 49);
  v13 = v1[1];
  *(_OWORD *)(v0 + 136) = *v1;
  *(_OWORD *)(v0 + 152) = v13;
  *(_BYTE *)(v0 + 168) = v12 | 0x40;
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD780);
  *v14 = v0;
  v14[1] = sub_23BD6D7E8;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD6D7E8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc();
  sub_23BD6F7A0(v1 + 16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
  return swift_task_switch();
}

uint64_t sub_23BD6D848()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD6D87C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD6D8C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 304);
  swift_release();
  MEMORY[0x242611E7C](v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD6D908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 304);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 264);
  if (v5)
  {
    v8 = *(_QWORD *)(v0 + 256);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 216) = sub_23BD6E4F0(v8, v7, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    v11 = sub_23BDCE048();
    *(_QWORD *)(v0 + 200) = sub_23BD6E4F0(v11, v12, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardProgressFeature] Failed to fetch progress for %s, error %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v10, -1, -1);
    MEMORY[0x242611FFC](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
  }

  *(_QWORD *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 88) = 0x80;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD780);
  *v13 = v0;
  v13[1] = sub_23BD6D87C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD6DBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  sub_23BDCDDF0();
  v3[11] = sub_23BDCDDE4();
  v3[12] = sub_23BDCDDCC();
  v3[13] = v4;
  return swift_task_switch();
}

uint64_t sub_23BD6DC1C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 80);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 72);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardProgressFeature] Sending .fetchAwardProgress(%s) action on view appeared", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v9 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 24) = v9;
  *(_BYTE *)(v0 + 48) = 0;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD780);
  *v10 = v0;
  v10[1] = sub_23BD6DE20;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD6DE20()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD6DE6C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AwardProgressFeature.dispose(localState:sharedState:)(uint64_t a1)
{
  uint64_t State;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23BDCD58C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + *(int *)(type metadata accessor for AwardProgressState() + 24);
  sub_23BD594E4(v9, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
  if (swift_getEnumCaseMultiPayload())
    return sub_23BD5EE48((uint64_t)v4);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  type metadata accessor for AwardProgressFeature();
  v11 = sub_23BDCD574();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    sub_23BD5EE48(v9);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_23BD6DFE8(uint64_t a1, uint64_t a2)
{
  uint64_t State;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;

  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD58C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2 + *(int *)(type metadata accessor for AwardProgressState() + 24);
  sub_23BD594E4(v10, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
  if (swift_getEnumCaseMultiPayload())
    return sub_23BD5EE48((uint64_t)v5);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v12 = sub_23BDCD574();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) != 0)
  {
    sub_23BD5EE48(v10);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_23BD6E138(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD770, &qword_256AAD778);
}

uint64_t sub_23BD6E14C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23BDCDEE0();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23BD6F684(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_23BD6E358(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD760, &qword_256AAD768);
}

uint64_t sub_23BD6E36C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD750, &qword_256AAD758);
}

uint64_t sub_23BD6E380(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD740, &qword_256AAD748);
}

_QWORD *sub_23BD6E394(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AACE18);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23BD6F594(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23BD6E4A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD730, &qword_256AAD738);
}

uint64_t sub_23BD6E4B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD720, &qword_256AAD728);
}

uint64_t sub_23BD6E4C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD710, &qword_256AAD718);
}

uint64_t sub_23BD6E4DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23BD6E14C(a1, a2, a3, a4, &qword_256AAD700, &qword_256AAD708);
}

uint64_t sub_23BD6E4F0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23BD6E5C0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23BD6F7D8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23BD6F7D8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23BD6E5C0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23BDCDE68();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23BD6E778(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23BDCDED4();
  if (!v8)
  {
    sub_23BDCDEE0();
    __break(1u);
LABEL_17:
    result = sub_23BDCDF10();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23BD6E778(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23BD6E80C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23BD6E9E4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23BD6E9E4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23BD6E80C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23BD6E980(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23BDCDEB0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23BDCDEE0();
      __break(1u);
LABEL_10:
      v2 = sub_23BDCDD9C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23BDCDF10();
    __break(1u);
LABEL_14:
    result = sub_23BDCDEE0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23BD6E980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD790);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23BD6E9E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD790);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23BDCDF10();
  __break(1u);
  return result;
}

unint64_t sub_23BD6EB30()
{
  unint64_t result;

  result = qword_256AAD620;
  if (!qword_256AAD620)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFECC, &type metadata for AwardProgressFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAD620);
  }
  return result;
}

uint64_t sub_23BD6EB74()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD6EB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6EBF8;
  return sub_23BD6DBAC(a1, v5, v4);
}

uint64_t sub_23BD6EBF8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BD6EC40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >> 6 == 1)
    return sub_23BD6B728(result, a2, a3, a4, a5 & 1);
  if (!(a5 >> 6))
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23BD6EC68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >> 6 == 1)
    return sub_23BD5F110(result, a2, a3, a4, a5 & 1);
  if (!(a5 >> 6))
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23BD6EC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardProgressFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD6ED34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardProgressFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD6ED78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for AwardProgressFeature() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BD6F814;
  return sub_23BD6D3B0(a1, v6, v8, v9);
}

unint64_t sub_23BD6EE10()
{
  unint64_t result;

  result = qword_256AAD648;
  if (!qword_256AAD648)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgressAction, &type metadata for AwardProgressAction);
    atomic_store(result, (unint64_t *)&qword_256AAD648);
  }
  return result;
}

unint64_t sub_23BD6EE58()
{
  unint64_t result;

  result = qword_256AAD650;
  if (!qword_256AAD650)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgressAction, &type metadata for AwardProgressAction);
    atomic_store(result, (unint64_t *)&qword_256AAD650);
  }
  return result;
}

unint64_t sub_23BD6EEA0()
{
  unint64_t result;

  result = qword_256AAD658;
  if (!qword_256AAD658)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BE2B430], MEMORY[0x24BE2B428]);
    atomic_store(result, (unint64_t *)&qword_256AAD658);
  }
  return result;
}

unint64_t sub_23BD6EEE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAD660;
  if (!qword_256AAD660)
  {
    v1 = type metadata accessor for AwardProgressState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgressState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAD660);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AwardProgressFeature(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23BDCD58C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for AwardProgressFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BDCD58C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for AwardProgressFeature(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23BDCD58C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AwardProgressFeature(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

_OWORD *initializeWithTake for AwardProgressFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for AwardProgressFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD6F1CC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardProgressFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BD6F254(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BD6F2C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BD6F344()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AwardProgressFeature.TaskIdentifier()
{
  return sub_23BD6F35C();
}

uint64_t sub_23BD6F35C()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s13FitnessAwards20AwardProgressFeatureV14TaskIdentifierOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23BD6F344();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AwardProgressFeature.TaskIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23BD6F344();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD6F35C();
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AwardProgressFeature.TaskIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_23BD6F35C();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressFeature.TaskIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgressFeature.TaskIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BD6F4E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23BD6F4EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressFeature.TaskIdentifier()
{
  return &type metadata for AwardProgressFeature.TaskIdentifier;
}

unint64_t sub_23BD6F50C()
{
  unint64_t result;

  result = qword_256AAD6F8;
  if (!qword_256AAD6F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDCFEA4, &type metadata for AwardProgressFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAD6F8);
  }
  return result;
}

uint64_t sub_23BD6F550(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) == 0)
      return 0;
  }
  else if ((a6 & 1) != 0)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return sub_23BDCE024();
}

uint64_t sub_23BD6F594(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23BDCDF10();
  __break(1u);
  return result;
}

uint64_t sub_23BD6F684(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23BDCDF10();
  __break(1u);
  return result;
}

uint64_t sub_23BD6F7A0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_23BD6F7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

BOOL static FontWeight.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BD6F830(char a1)
{
  if ((a1 & 1) != 0)
    return 0x72616C75676572;
  else
    return 1684828002;
}

uint64_t sub_23BD6F860()
{
  sub_23BD6FC04();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6F888()
{
  sub_23BD6FC04();
  return sub_23BDCE0E4();
}

BOOL sub_23BD6F8B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23BD6F8D0()
{
  char *v0;

  return sub_23BD6F830(*v0);
}

uint64_t sub_23BD6F8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD70414(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD6F8FC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23BD6F908()
{
  sub_23BD6FB7C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6F930()
{
  sub_23BD6FB7C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD6F958()
{
  sub_23BD6FBC0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD6F980()
{
  sub_23BD6FBC0();
  return sub_23BDCE0E4();
}

uint64_t FontWeight.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD798);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD7A0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD7A8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD6FB7C();
  sub_23BDCE0CC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BD6FBC0();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BD6FC04();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BD6FB7C()
{
  unint64_t result;

  result = qword_256AAD7B0;
  if (!qword_256AAD7B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD022C, &type metadata for FontWeight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7B0);
  }
  return result;
}

unint64_t sub_23BD6FBC0()
{
  unint64_t result;

  result = qword_256AAD7B8;
  if (!qword_256AAD7B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD01DC, &type metadata for FontWeight.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7B8);
  }
  return result;
}

unint64_t sub_23BD6FC04()
{
  unint64_t result;

  result = qword_256AAD7C0;
  if (!qword_256AAD7C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD018C, &type metadata for FontWeight.BoldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7C0);
  }
  return result;
}

uint64_t FontWeight.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD7C8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD7D0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD7D8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD6FB7C();
  v11 = v33;
  sub_23BDCE0C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BDCDFA0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for FontWeight;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BD6FBC0();
    sub_23BDCDF28();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BD6FC04();
    v22 = v6;
    sub_23BDCDF28();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23BD6FFA0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FontWeight.init(from:)(a1, a2);
}

uint64_t sub_23BD6FFB4(_QWORD *a1)
{
  return FontWeight.encode(to:)(a1);
}

uint64_t FontWeight.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t FontWeight.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

unint64_t sub_23BD70038()
{
  unint64_t result;

  result = qword_256AAD7E0;
  if (!qword_256AAD7E0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontWeight, &type metadata for FontWeight);
    atomic_store(result, (unint64_t *)&qword_256AAD7E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FontWeight()
{
  return &type metadata for FontWeight;
}

uint64_t getEnumTagSinglePayload for AwardToastWidth.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13FitnessAwards10FontWeightOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD70170 + 4 * byte_23BDCFF15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD701A4 + 4 * byte_23BDCFF10[v4]))();
}

uint64_t sub_23BD701A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD701AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD701B4);
  return result;
}

uint64_t sub_23BD701C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD701C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD701CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD701D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23BD701E0(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FontWeight.CodingKeys()
{
  return &type metadata for FontWeight.CodingKeys;
}

ValueMetadata *type metadata accessor for FontWeight.BoldCodingKeys()
{
  return &type metadata for FontWeight.BoldCodingKeys;
}

ValueMetadata *type metadata accessor for FontWeight.RegularCodingKeys()
{
  return &type metadata for FontWeight.RegularCodingKeys;
}

unint64_t sub_23BD70220()
{
  unint64_t result;

  result = qword_256AAD7E8;
  if (!qword_256AAD7E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0164, &type metadata for FontWeight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7E8);
  }
  return result;
}

unint64_t sub_23BD70268()
{
  unint64_t result;

  result = qword_256AAD7F0;
  if (!qword_256AAD7F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0084, &type metadata for FontWeight.BoldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7F0);
  }
  return result;
}

unint64_t sub_23BD702B0()
{
  unint64_t result;

  result = qword_256AAD7F8;
  if (!qword_256AAD7F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD00AC, &type metadata for FontWeight.BoldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD7F8);
  }
  return result;
}

unint64_t sub_23BD702F8()
{
  unint64_t result;

  result = qword_256AAD800;
  if (!qword_256AAD800)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0034, &type metadata for FontWeight.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD800);
  }
  return result;
}

unint64_t sub_23BD70340()
{
  unint64_t result;

  result = qword_256AAD808;
  if (!qword_256AAD808)
  {
    result = MEMORY[0x242611F78](&unk_23BDD005C, &type metadata for FontWeight.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD808);
  }
  return result;
}

unint64_t sub_23BD70388()
{
  unint64_t result;

  result = qword_256AAD810;
  if (!qword_256AAD810)
  {
    result = MEMORY[0x242611F78](&unk_23BDD00D4, &type metadata for FontWeight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD810);
  }
  return result;
}

unint64_t sub_23BD703D0()
{
  unint64_t result;

  result = qword_256AAD818;
  if (!qword_256AAD818)
  {
    result = MEMORY[0x242611F78](&unk_23BDD00FC, &type metadata for FontWeight.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD818);
  }
  return result;
}

uint64_t sub_23BD70414(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1684828002 && a2 == 0xE400000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72616C75676572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD704F4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD8E0);
  sub_23BD5ED30(&qword_256AAD8E8, &qword_256AAD8E0, MEMORY[0x24BE2B5E8]);
  return sub_23BDCD694();
}

uint64_t AwardLockupView.init(store:awardImageViewBuilder:awardProgressViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a7 = sub_23BD5AACC;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_23BD705E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AwardLockupView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  _QWORD v84[2];
  uint64_t v85;
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v69 = a2;
  v63 = sub_23BDCD724();
  v68 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v67 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a1 + 16);
  v64 = a1;
  v65 = v4;
  sub_23BDCD700();
  *(_QWORD *)&v87 = sub_23BDCD700();
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  *((_QWORD *)&v87 + 1) = v5;
  *(_QWORD *)&v88 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  *((_QWORD *)&v88 + 1) = v5;
  v6 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  v62 = v6;
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  *(_QWORD *)&v89 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v7 = sub_23BDCDC70();
  v8 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v7);
  v9 = sub_23BDCDBE0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v10 = sub_23BDCDC70();
  MEMORY[0x242611F78](v8, v10);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](v8, v11);
  v12 = sub_23BDCDBC8();
  v13 = sub_23BDCD850();
  v14 = sub_23BDCDB68();
  v15 = sub_23BDCD700();
  v16 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v17 = sub_23BDCD700();
  v18 = sub_23BDCD6F4();
  v19 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v9);
  v20 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v12);
  v86[0] = v19;
  v86[1] = v20;
  v85 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v13, v86);
  v84[0] = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v14, &v85);
  v84[1] = MEMORY[0x24BDECC60];
  v21 = MEMORY[0x24BDED308];
  v83[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v15, v84);
  v83[1] = MEMORY[0x24BDEDBB8];
  v22 = MEMORY[0x242611F78](v21, v16, v83);
  v23 = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  v82[0] = v22;
  v82[1] = v23;
  v24 = MEMORY[0x242611F78](v21, v17, v82);
  v25 = sub_23BD6B5DC(&qword_256AAD840, (uint64_t (*)(uint64_t))MEMORY[0x24BDED168], MEMORY[0x24BDED160]);
  *(_QWORD *)&v87 = v17;
  *((_QWORD *)&v87 + 1) = v18;
  v26 = v18;
  *(_QWORD *)&v88 = v24;
  *((_QWORD *)&v88 + 1) = v25;
  MEMORY[0x242611F18](255, &v87, MEMORY[0x24BDF2380], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  v27 = sub_23BDCD700();
  v28 = sub_23BDCD700();
  v29 = sub_23BDCD700();
  *(_QWORD *)&v87 = v17;
  *((_QWORD *)&v87 + 1) = v26;
  *(_QWORD *)&v88 = v24;
  *((_QWORD *)&v88 + 1) = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v31 = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  v81[0] = OpaqueTypeConformance2;
  v81[1] = v31;
  v80[0] = MEMORY[0x242611F78](v21, v27, v81);
  v80[1] = MEMORY[0x24BDF0910];
  v79[0] = MEMORY[0x242611F78](v21, v28, v80);
  v79[1] = MEMORY[0x24BDEDBB8];
  v59 = v29;
  v58 = MEMORY[0x242611F78](v21, v29, v79);
  v32 = sub_23BDCDBB0();
  v61 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v56 - v33;
  v35 = MEMORY[0x242611F78](MEMORY[0x24BDF43B0], v32);
  v36 = sub_23BD6B5DC(qword_256AAD858, (uint64_t (*)(uint64_t))MEMORY[0x24BDED868], MEMORY[0x24BDED858]);
  v37 = v63;
  *(_QWORD *)&v87 = v32;
  *((_QWORD *)&v87 + 1) = v63;
  *(_QWORD *)&v88 = v35;
  *((_QWORD *)&v88 + 1) = v36;
  v38 = MEMORY[0x242611F18](0, &v87, MEMORY[0x24BDF22B8], 0);
  v60 = *(_QWORD *)(v38 - 8);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v56 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v57 = (uint64_t)&v56 - v42;
  v43 = v66[1];
  v87 = *v66;
  v88 = v43;
  v89 = v66[2];
  v44 = v66;
  v90 = *((_QWORD *)v66 + 6);
  v45 = swift_allocObject();
  v46 = v64;
  v47 = v65;
  v48 = v62;
  *(_QWORD *)(v45 + 16) = v65;
  *(_QWORD *)(v45 + 24) = v48;
  v49 = *(_QWORD *)(v46 + 32);
  v50 = *(_QWORD *)(v46 + 40);
  *(_QWORD *)(v45 + 32) = v49;
  *(_QWORD *)(v45 + 40) = v50;
  v51 = v44[1];
  *(_OWORD *)(v45 + 48) = *v44;
  *(_OWORD *)(v45 + 64) = v51;
  *(_OWORD *)(v45 + 80) = v44[2];
  *(_QWORD *)(v45 + 96) = *((_QWORD *)v44 + 6);
  v70 = v47;
  v71 = v48;
  v72 = v49;
  v73 = v50;
  v74 = &v87;
  sub_23BD657F0((uint64_t)&v87);
  sub_23BDCDBA4();
  v52 = v67;
  sub_23BDCD718();
  sub_23BDCDA00();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v52, v37);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v34, v32);
  v75 = v32;
  v76 = v37;
  v77 = v35;
  v78 = v36;
  swift_getOpaqueTypeConformance2();
  v53 = v57;
  sub_23BD6A300((uint64_t)v41, v38, v57);
  v54 = *(void (**)(char *, uint64_t))(v60 + 8);
  v54(v41, v38);
  sub_23BD6345C(v53, v38, v69);
  return ((uint64_t (*)(uint64_t, uint64_t))v54)(v53, v38);
}

void sub_23BD70D34()
{
  sub_23BD72F60();
}

void sub_23BD70D3C(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[2];

  sub_23BDCD700();
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  *(_QWORD *)&v23 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v2 = sub_23BDCDC70();
  v3 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v2);
  v4 = sub_23BDCDBE0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v5 = sub_23BDCDC70();
  MEMORY[0x242611F78](v3, v5);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BDCDC70();
  MEMORY[0x242611F78](v3, v6);
  v7 = sub_23BDCDBC8();
  v8 = sub_23BDCD850();
  v9 = sub_23BDCDB68();
  v10 = sub_23BDCD700();
  v11 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v12 = sub_23BDCD700();
  v20 = sub_23BDCD6F4();
  v13 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v4);
  v14 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v7);
  v29[0] = v13;
  v29[1] = v14;
  v28 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v8, v29);
  v27[0] = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v9, &v28);
  v27[1] = MEMORY[0x24BDECC60];
  v15 = MEMORY[0x24BDED308];
  v26[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v10, v27);
  v26[1] = MEMORY[0x24BDEDBB8];
  v25[0] = MEMORY[0x242611F78](v15, v11, v26);
  v25[1] = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  *(_QWORD *)&v21 = v12;
  *((_QWORD *)&v21 + 1) = v20;
  *(_QWORD *)&v22 = MEMORY[0x242611F78](v15, v12, v25);
  *((_QWORD *)&v22 + 1) = sub_23BD6B5DC(&qword_256AAD840, (uint64_t (*)(uint64_t))MEMORY[0x24BDED168], MEMORY[0x24BDED160]);
  MEMORY[0x242611F18](255, &v21, MEMORY[0x24BDF2380], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  sub_23BDCD700();
  v16 = sub_23BDCD700();
  MEMORY[0x24BDAC7A8](v16);
  v17 = sub_23BDCD700();
  v18 = MEMORY[0x24BDAC7A8](v17);
  MEMORY[0x24BDAC7A8](v18);
  v19 = a1[1];
  v21 = *a1;
  v22 = v19;
  v23 = a1[2];
  v24 = *((_QWORD *)a1 + 6);
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD71210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;

  sub_23BD71410(a1, v3);
  sub_23BDCDC4C();
  v10 = *(_QWORD *)(v9 - 376);
  *(_QWORD *)(v9 - 224) = *(_QWORD *)(v9 - 368);
  *(_QWORD *)(v9 - 216) = v10;
  *(_QWORD *)(v9 - 208) = v5;
  *(_QWORD *)(v9 - 200) = v6;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v12 = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  *(_QWORD *)(v9 - 272) = OpaqueTypeConformance2;
  *(_QWORD *)(v9 - 264) = v12;
  v13 = MEMORY[0x24BDED308];
  v14 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v7, v9 - 272);
  v15 = MEMORY[0x24BDF0910];
  *(_QWORD *)(v9 - 288) = v14;
  *(_QWORD *)(v9 - 280) = v15;
  v18 = MEMORY[0x242611F78](v13, v1, v9 - 288);
  sub_23BDCDA9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 360) + 8))(v3, v1);
  *(_QWORD *)(v9 - 304) = v18;
  *(_QWORD *)(v9 - 296) = MEMORY[0x24BDEDBB8];
  MEMORY[0x242611F78](v13, v8, v9 - 304);
  sub_23BD6A300(v4, v8, v2);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 352) + 8);
  v16(v4, v8);
  sub_23BD6345C(v2, v8, *(_QWORD *)(v9 - 312));
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(v2, v8);
}

uint64_t sub_23BD713D0()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD70D3C);
}

uint64_t sub_23BD713DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BD71410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  __int128 *v130;
  _QWORD v131[2];
  _QWORD v132[2];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _QWORD v137[2];
  _QWORD v138[2];
  _QWORD v139[2];
  uint64_t v140;
  _QWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v120 = a2;
  v124 = sub_23BDCD6F4();
  v119 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v118 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BDCDC40();
  v5 = *(_QWORD *)(v4 - 8);
  v116 = v4;
  v117 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v115 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23BDCD5F8();
  v113 = *(_QWORD *)(v7 - 8);
  v114 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v112 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v122);
  v121 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v107 = a1;
  v125 = v10;
  sub_23BDCD700();
  *(_QWORD *)&v142 = sub_23BDCD700();
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  *((_QWORD *)&v142 + 1) = v11;
  *(_QWORD *)&v143 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  *((_QWORD *)&v143 + 1) = v11;
  v12 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  v123 = v12;
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  *(_QWORD *)&v144 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v13 = sub_23BDCDC70();
  v14 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v13);
  v15 = sub_23BDCDBE0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v16 = sub_23BDCDC70();
  MEMORY[0x242611F78](v14, v16);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v17 = sub_23BDCDC70();
  MEMORY[0x242611F78](v14, v17);
  v18 = sub_23BDCDBC8();
  v19 = sub_23BDCD850();
  v20 = sub_23BDCDB68();
  v96 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (char *)&v82 - v21;
  v82 = v20;
  v22 = sub_23BDCD700();
  v105 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v89 = (char *)&v82 - v23;
  v87 = v22;
  v24 = sub_23BDCD700();
  v106 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v98 = (char *)&v82 - v25;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v93 = v24;
  v26 = sub_23BDCD700();
  v109 = *(_QWORD *)(v26 - 8);
  v27 = v26;
  MEMORY[0x24BDAC7A8](v26);
  v99 = (char *)&v82 - v28;
  v29 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v15);
  v30 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v18);
  v141[0] = v29;
  v141[1] = v30;
  v140 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v19, v141);
  v83 = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v20, &v140);
  v139[0] = v83;
  v139[1] = MEMORY[0x24BDECC60];
  v31 = MEMORY[0x24BDED308];
  v85 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v22, v139);
  v138[0] = v85;
  v138[1] = MEMORY[0x24BDEDBB8];
  v32 = MEMORY[0x242611F78](v31, v24, v138);
  v88 = v32;
  v33 = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  v137[0] = v32;
  v137[1] = v33;
  v92 = v27;
  v34 = MEMORY[0x242611F78](v31, v27, v137);
  v91 = v34;
  v90 = sub_23BD6B5DC(&qword_256AAD840, (uint64_t (*)(uint64_t))MEMORY[0x24BDED168], MEMORY[0x24BDED160]);
  *(_QWORD *)&v142 = v27;
  *((_QWORD *)&v142 + 1) = v124;
  *(_QWORD *)&v143 = v34;
  *((_QWORD *)&v143 + 1) = v90;
  v35 = MEMORY[0x242611F18](0, &v142, MEMORY[0x24BDF2380], 0);
  v100 = *(_QWORD *)(v35 - 8);
  v97 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v86 = (char *)&v82 - v36;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  v37 = sub_23BDCD700();
  v38 = *(_QWORD *)(v37 - 8);
  v102 = v37;
  v108 = v38;
  MEMORY[0x24BDAC7A8](v37);
  v95 = (char *)&v82 - v39;
  v103 = sub_23BDCD700();
  v110 = *(_QWORD *)(v103 - 8);
  v40 = MEMORY[0x24BDAC7A8](v103);
  v101 = (char *)&v82 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v104 = (uint64_t)&v82 - v42;
  v43 = v111[1];
  v142 = *v111;
  v143 = v43;
  v144 = v111[2];
  v145 = *((_QWORD *)v111 + 6);
  v126 = v125;
  v127 = v123;
  v44 = *(__int128 **)(v107 + 40);
  v94 = *(_QWORD *)(v107 + 32);
  v111 = v44;
  v128 = v94;
  v129 = v44;
  v130 = &v142;
  v45 = v84;
  sub_23BDCDB5C();
  v133 = v142;
  v134 = v143;
  v135 = v144;
  v136 = v145;
  sub_23BD704F4();
  swift_getKeyPath();
  v46 = (uint64_t)v121;
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v48 = v112;
  v47 = v113;
  v49 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v112, v46 + *(int *)(v122 + 24), v114);
  sub_23BD72A24(v46);
  sub_23BDCD5BC();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  v50 = v89;
  v51 = v82;
  sub_23BDCDAC0();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v45, v51);
  v133 = v142;
  v134 = v143;
  v135 = v144;
  v136 = v145;
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v46);
  sub_23BDCDC64();
  v52 = v87;
  v53 = v98;
  sub_23BDCDA9C();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v50, v52);
  v54 = v115;
  sub_23BDCDC34();
  sub_23BDCD8BC();
  v55 = v99;
  v56 = v93;
  v57 = v116;
  sub_23BDCD9E8();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v54, v57);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v53, v56);
  v58 = v118;
  sub_23BDCD754();
  v59 = v86;
  v61 = v91;
  v60 = v92;
  v62 = v124;
  v63 = v90;
  sub_23BDCDA18();
  (*(void (**)(char *, uint64_t))(v119 + 8))(v58, v62);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v55, v60);
  v133 = v142;
  v134 = v143;
  v135 = v144;
  v136 = v145;
  sub_23BD704F4();
  swift_getKeyPath();
  v64 = (uint64_t)v121;
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v64);
  *(_QWORD *)&v133 = v60;
  *((_QWORD *)&v133 + 1) = v62;
  *(_QWORD *)&v134 = v61;
  *((_QWORD *)&v134 + 1) = v63;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v66 = v95;
  v67 = v97;
  sub_23BDCDA24();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v59, v67);
  v68 = swift_allocObject();
  v69 = v123;
  *(_QWORD *)(v68 + 16) = v125;
  *(_QWORD *)(v68 + 24) = v69;
  v70 = v111;
  *(_QWORD *)(v68 + 32) = v94;
  *(_QWORD *)(v68 + 40) = v70;
  v71 = v143;
  *(_OWORD *)(v68 + 48) = v142;
  *(_OWORD *)(v68 + 64) = v71;
  *(_OWORD *)(v68 + 80) = v144;
  *(_QWORD *)(v68 + 96) = v145;
  sub_23BD657F0((uint64_t)&v142);
  v72 = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  v132[0] = OpaqueTypeConformance2;
  v132[1] = v72;
  v73 = MEMORY[0x24BDED308];
  v74 = v102;
  v75 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v102, v132);
  v76 = (uint64_t)v101;
  sub_23BDCDACC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v66, v74);
  v131[0] = v75;
  v131[1] = MEMORY[0x24BDF0910];
  v77 = v73;
  v78 = v103;
  MEMORY[0x242611F78](v77, v103, v131);
  v79 = v104;
  sub_23BD6A300(v76, v78, v104);
  v80 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
  v80(v76, v78);
  sub_23BD6345C(v79, v78, v120);
  return ((uint64_t (*)(uint64_t, uint64_t))v80)(v79, v78);
}

void type metadata accessor for AwardLockupView()
{
  JUMPOUT(0x242611EDCLL);
}

uint64_t sub_23BD71FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  sub_23BDCD700();
  v33 = sub_23BDCD700();
  v34 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v35 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  v36 = v34;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  v37 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v0 = sub_23BDCDC70();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v0);
  v2 = sub_23BDCDBE0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v3 = sub_23BDCDC70();
  MEMORY[0x242611F78](v1, v3);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v4 = sub_23BDCDC70();
  MEMORY[0x242611F78](v1, v4);
  v5 = sub_23BDCDBC8();
  v6 = sub_23BDCD850();
  v7 = sub_23BDCDB68();
  v8 = sub_23BDCD700();
  v9 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v10 = sub_23BDCD700();
  v11 = sub_23BDCD6F4();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED168];
  v32[0] = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v2);
  v32[1] = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v5);
  v31 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v6, v32);
  v30[0] = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v7, &v31);
  v30[1] = MEMORY[0x24BDECC60];
  v13 = MEMORY[0x24BDED308];
  v29[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v30);
  v29[1] = MEMORY[0x24BDEDBB8];
  v28[0] = MEMORY[0x242611F78](v13, v9, v29);
  v28[1] = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  v14 = MEMORY[0x242611F78](v13, v10, v28);
  v15 = sub_23BD6B5DC(&qword_256AAD840, v12, MEMORY[0x24BDED160]);
  v33 = v10;
  v34 = v11;
  v35 = v14;
  v36 = v15;
  MEMORY[0x242611F18](255, &v33, MEMORY[0x24BDF2380], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  v16 = sub_23BDCD700();
  v17 = sub_23BDCD700();
  v18 = sub_23BDCD700();
  v33 = v10;
  v34 = v11;
  v35 = v14;
  v36 = v15;
  v27[0] = swift_getOpaqueTypeConformance2();
  v27[1] = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  v26[0] = MEMORY[0x242611F78](v13, v16, v27);
  v26[1] = MEMORY[0x24BDF0910];
  v25[0] = MEMORY[0x242611F78](v13, v17, v26);
  v25[1] = MEMORY[0x24BDEDBB8];
  MEMORY[0x242611F78](v13, v18, v25);
  v19 = sub_23BDCDBB0();
  v20 = sub_23BDCD724();
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BDED868];
  v22 = MEMORY[0x242611F78](MEMORY[0x24BDF43B0], v19);
  v23 = sub_23BD6B5DC(qword_256AAD858, v21, MEMORY[0x24BDED858]);
  v33 = v19;
  v34 = v20;
  v35 = v22;
  v36 = v23;
  return swift_getOpaqueTypeConformance2();
}

void sub_23BD72494(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v27 = a5;
  v28 = a4;
  v29 = a6;
  sub_23BDCD700();
  v9 = sub_23BDCD700();
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v12 = sub_23BDCDC70();
  v13 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v12);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v14 = sub_23BDCDC70();
  MEMORY[0x242611F78](v13, v14);
  v15 = sub_23BDCDBC8();
  v26[2] = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v26[4] = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v26[3] = (char *)v26 - v18;
  *(_QWORD *)&v34 = v9;
  *((_QWORD *)&v34 + 1) = v10;
  *(_QWORD *)&v35 = v11;
  *((_QWORD *)&v35 + 1) = v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  sub_23BDCD700();
  sub_23BDCD700();
  *(_QWORD *)&v36 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v19 = sub_23BDCDC70();
  MEMORY[0x242611F78](v13, v19);
  v20 = sub_23BDCDBE0();
  v26[0] = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  MEMORY[0x24BDAC7A8](v21);
  v26[1] = (char *)v26 - v22;
  v23 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v23);
  v24 = sub_23BDCD850();
  v26[5] = *(_QWORD *)(v24 - 8);
  v26[6] = v24;
  MEMORY[0x24BDAC7A8](v24);
  v25 = a1[1];
  v34 = *a1;
  v35 = v25;
  v36 = a1[2];
  v37 = *((_QWORD *)a1 + 6);
  v30 = a2;
  v31 = a3;
  v32 = v28;
  v33 = v27;
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD727B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v10 = *(unsigned __int8 *)(v7 + *(int *)(v5 + 32));
  sub_23BD72A24(v7);
  v11 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v8 - 144) = *(_OWORD *)v2;
  *(_OWORD *)(v8 - 128) = v11;
  *(_OWORD *)(v8 - 112) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v8 - 96) = *(_QWORD *)(v2 + 48);
  if (v10 == 1)
  {
    sub_23BD72A60(a1, v6);
    MEMORY[0x242611F78](MEMORY[0x24BDF4700], v3);
    v12 = *(_QWORD *)(v8 - 264);
    sub_23BD6A300(v6, v3, v12);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 272) + 8);
    v13(v6, v3);
    sub_23BD6345C(v12, v3, v6);
    MEMORY[0x242611F78](MEMORY[0x24BDF4498], v1);
    sub_23BDAF1D8(v6, v3);
    v13(v6, v3);
    v14 = v12;
    v15 = v3;
  }
  else
  {
    v16 = *(_QWORD *)(v8 - 240);
    sub_23BD72C98(a1, v16);
    MEMORY[0x242611F78](MEMORY[0x24BDF4498], v1);
    v17 = *(_QWORD *)(v8 - 248);
    sub_23BD6A300(v16, v1, v17);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 256) + 8);
    v13(v16, v1);
    sub_23BD6345C(v17, v1, v16);
    MEMORY[0x242611F78](MEMORY[0x24BDF4700], v3);
    sub_23BDAF29C(v16, v3, v1);
    v13(v16, v1);
    v14 = v17;
    v15 = v1;
  }
  v13(v14, v15);
  v18 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v3);
  v19 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v1);
  *(_QWORD *)(v8 - 192) = v18;
  *(_QWORD *)(v8 - 184) = v19;
  v20 = *(_QWORD *)(v8 - 224);
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v20, v8 - 192);
  sub_23BD6345C(v4, v20, *(_QWORD *)(v8 - 200));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 232) + 8))(v4, v20);
}

uint64_t sub_23BD72A18()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD72494);
}

uint64_t sub_23BD72A24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AwardLockupLayout();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD72A60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v18 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  sub_23BDCD700();
  *(_QWORD *)&v23 = sub_23BDCD700();
  *((_QWORD *)&v23 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  *(_QWORD *)&v24 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  *((_QWORD *)&v24 + 1) = *((_QWORD *)&v23 + 1);
  v5 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  *(_QWORD *)&v25 = sub_23BDCD700();
  swift_getTupleTypeMetadata();
  v6 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v6);
  v7 = sub_23BDCDBE0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - v12;
  v14 = v2[1];
  v23 = *v2;
  v24 = v14;
  v25 = v2[2];
  v26 = *((_QWORD *)v2 + 6);
  sub_23BDCD82C();
  v19 = v4;
  v20 = v5;
  v21 = *(_OWORD *)(a1 + 32);
  v22 = &v23;
  sub_23BDCDBD4();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v7);
  sub_23BD6A300((uint64_t)v11, v7, (uint64_t)v13);
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v11, v7);
  sub_23BD6345C((uint64_t)v13, v7, v18);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

uint64_t sub_23BD72C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD v25[3];
  uint64_t v26;

  v20 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  sub_23BDCD700();
  sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  v5 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v6 = sub_23BDCDC70();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v6);
  sub_23BDCDBE0();
  swift_getTupleTypeMetadata3();
  v8 = sub_23BDCDC70();
  MEMORY[0x242611F78](v7, v8);
  v9 = sub_23BDCDBC8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  v16 = *(_OWORD *)(v2 + 16);
  v25[0] = *(_OWORD *)v2;
  v25[1] = v16;
  v25[2] = *(_OWORD *)(v2 + 32);
  v26 = *(_QWORD *)(v2 + 48);
  sub_23BDCD7C0();
  v21 = v4;
  v22 = v5;
  v23 = *(_OWORD *)(a1 + 32);
  v24 = v25;
  sub_23BDCDBBC();
  MEMORY[0x242611F78](MEMORY[0x24BDF4498], v9);
  sub_23BD6A300((uint64_t)v13, v9, (uint64_t)v15);
  v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  sub_23BD6345C((uint64_t)v15, v9, v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

void sub_23BD72EE4()
{
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD72F24()
{
  sub_23BD704F4();
  sub_23BDCDCDC();
  return swift_release();
}

void sub_23BD72F58()
{
  sub_23BD72F60();
}

void sub_23BD72F60()
{
  sub_23BD72EE4();
}

void sub_23BD72F84(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t);
  __int128 v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v44 = a5;
  v34 = a4;
  v46 = a3;
  v42 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
  v41 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v39 = sub_23BDCDC70();
  v37 = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v39);
  v38 = sub_23BDCDBE0();
  v40 = *(_QWORD *)(v38 - 8);
  v8 = MEMORY[0x24BDAC7A8](v38);
  v35 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v36 = &v25[-v10];
  v31 = sub_23BDCD5F8();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v27 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = type metadata accessor for AwardLockupLayout();
  v12 = MEMORY[0x24BDAC7A8](v26);
  v13 = a2;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_23BDCD700();
  v30 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v28 = sub_23BDCD700();
  v32 = *(_QWORD *)(v28 - 8);
  v18 = MEMORY[0x24BDAC7A8](v28);
  v43 = &v25[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v45 = &v25[-v21];
  a1[3](v20);
  sub_23BDCDC58();
  v22 = v34;
  sub_23BDCDA90();
  v23 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v33 = v13;
  v23(v16, v13);
  v24 = *((_OWORD *)a1 + 1);
  v47 = *(_OWORD *)a1;
  v48 = v24;
  v49 = *((_OWORD *)a1 + 2);
  v50 = a1[6];
  v51 = v13;
  v52 = v46;
  v53 = v22;
  v54 = v44;
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD732A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);

  v1[2] = a1;
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v8 = v1[4];
  v9 = v1[6];
  v10 = v1[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v5 + *(int *)(v1[3] + 20), v10);
  sub_23BD72A24(v5);
  sub_23BDCD5BC();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v11 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v7 - 184) = v2;
  *(_QWORD *)(v7 - 176) = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v3, v7 - 184);
  v14 = v1[20];
  sub_23BDCDAC0();
  (*(void (**)(uint64_t, uint64_t))(v1[7] + 8))(v4, v3);
  v15 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v7 - 200) = v13;
  *(_QWORD *)(v7 - 192) = v15;
  v16 = v1[5];
  v1[7] = MEMORY[0x242611F78](v12, v16, v7 - 200);
  sub_23BD6A300(v14, v16, v1[22]);
  v17 = v1[9];
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v1[8] = (uint64_t)v18;
  v18(v14, v16);
  v19 = *(_OWORD *)(v6 + 16);
  *((_OWORD *)v1 + 19) = *(_OWORD *)v6;
  *((_OWORD *)v1 + 20) = v19;
  *((_OWORD *)v1 + 21) = *(_OWORD *)(v6 + 32);
  v1[44] = *(_QWORD *)(v6 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v5);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v1[6] = *(_QWORD *)(v7 - 168);
  *((_DWORD *)v1 + 8) = *(unsigned __int8 *)(v7 - 160);
  v1[3] = *(_QWORD *)(v7 - 152);
  *((_DWORD *)v1 + 4) = *(unsigned __int8 *)(v7 - 144);
  v20 = *(_QWORD *)(v7 - 136);
  *v1 = *(_QWORD *)(v7 - 128);
  v1[1] = v20;
  sub_23BDCD82C();
  v21 = v1[23];
  v1[26] = v1[10];
  v1[27] = v21;
  v22 = v1[21];
  v1[28] = v2;
  v1[29] = v22;
  v1[30] = v6;
  v23 = v1[12];
  sub_23BDCDBD4();
  v24 = v1[15];
  v25 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v24);
  v26 = v1[13];
  sub_23BD6A300(v23, v24, v26);
  v27 = v1[17];
  v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v28(v23, v24);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v30 = v1[20];
  v31 = v1[22];
  v29(v30, v31, v16);
  v1[38] = 0;
  *((_BYTE *)v1 + 312) = 1;
  v1[40] = v1[6];
  *((_BYTE *)v1 + 328) = *((_DWORD *)v1 + 8);
  v1[42] = v1[3];
  *((_BYTE *)v1 + 344) = *((_DWORD *)v1 + 4);
  v32 = *v1;
  v1[44] = v1[1];
  v1[45] = v32;
  *(_QWORD *)(v7 - 224) = v30;
  *(_QWORD *)(v7 - 216) = v1 + 38;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v23, v26, v24);
  *(_QWORD *)(v7 - 208) = v23;
  v33 = v1[18];
  v1[35] = v16;
  v1[36] = v33;
  v1[37] = v24;
  v1[32] = v1[7];
  v1[33] = sub_23BD69FC8();
  v1[34] = v25;
  sub_23BDAF360((uint64_t *)(v7 - 224), 3uLL, (uint64_t)(v1 + 35));
  v28(v26, v24);
  v34 = (void (*)(uint64_t, uint64_t))v1[8];
  v34(v31, v16);
  v28(v23, v24);
  return ((uint64_t (*)(uint64_t, uint64_t))v34)(v30, v16);
}

void sub_23BD73618(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _BYTE v18[40];
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v20 = a5;
  v19 = a4;
  v27 = a6;
  v25 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  v10 = sub_23BDCD700();
  v26 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v23 = &v18[-v12];
  v13 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v13);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD820);
  v14 = MEMORY[0x24BDAC7A8](v24);
  v22 = &v18[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v21 = &v18[-v16];
  v17 = a1[1];
  v28 = *a1;
  v29 = v17;
  v30 = a1[2];
  v31 = *((_QWORD *)a1 + 6);
  v32 = a2;
  v33 = a3;
  v34 = v19;
  v35 = a5;
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD737E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_23BD73AF0(a1, v5);
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 - 240) = *(_OWORD *)v1;
  *(_OWORD *)(v8 - 224) = v9;
  *(_OWORD *)(v8 - 208) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v1 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v4);
  sub_23BDCDC58();
  v10 = sub_23BDCD6B8();
  v11 = *(_QWORD *)(v8 - 136);
  *(_DWORD *)(v8 - 360) = *(unsigned __int8 *)(v8 - 128);
  *(_QWORD *)(v8 - 368) = *(_QWORD *)(v8 - 120);
  *(_DWORD *)(v8 - 372) = *(unsigned __int8 *)(v8 - 112);
  *(_QWORD *)(v8 - 384) = *(_QWORD *)(v8 - 104);
  *(_QWORD *)(v8 - 392) = *(_QWORD *)(v8 - 96);
  (*(void (**)(uint64_t))(v1 + 40))(v10);
  v12 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 - 240) = *(_OWORD *)v1;
  *(_OWORD *)(v8 - 224) = v12;
  *(_OWORD *)(v8 - 208) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v1 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v4);
  v13 = *(_QWORD *)(v8 - 352);
  sub_23BDCDB08();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 312) + 8))(v7, v6);
  v14 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
  *(_QWORD *)(v8 - 152) = v13;
  *(_QWORD *)(v8 - 144) = v14;
  v15 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v2, v8 - 152);
  v16 = *(_QWORD *)(v8 - 328);
  sub_23BD6A300(v3, v2, v16);
  v17 = *(_QWORD *)(v8 - 304);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v18(v3, v2);
  v19 = *(_QWORD *)(v8 - 344);
  v20 = *(_QWORD *)(v8 - 336);
  sub_23BD74CF4(v19, v20);
  *(_QWORD *)(v8 - 240) = 0;
  *(_BYTE *)(v8 - 232) = 1;
  *(_QWORD *)(v8 - 224) = v11;
  *(_BYTE *)(v8 - 216) = *(_DWORD *)(v8 - 360);
  *(_QWORD *)(v8 - 208) = *(_QWORD *)(v8 - 368);
  *(_BYTE *)(v8 - 200) = *(_DWORD *)(v8 - 372);
  v21 = *(_QWORD *)(v8 - 392);
  *(_QWORD *)(v8 - 192) = *(_QWORD *)(v8 - 384);
  *(_QWORD *)(v8 - 184) = v21;
  *(_QWORD *)(v8 - 176) = v20;
  *(_QWORD *)(v8 - 168) = v8 - 240;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v3, v16, v2);
  *(_QWORD *)(v8 - 160) = v3;
  *(_QWORD *)(v8 - 264) = *(_QWORD *)(v8 - 320);
  *(_QWORD *)(v8 - 256) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
  *(_QWORD *)(v8 - 248) = v2;
  *(_QWORD *)(v8 - 288) = sub_23BD74D3C();
  *(_QWORD *)(v8 - 280) = sub_23BD69FC8();
  *(_QWORD *)(v8 - 272) = v15;
  sub_23BDAF360((uint64_t *)(v8 - 176), 3uLL, v8 - 264);
  v18(v16, v2);
  sub_23BD74EFC(v19);
  v18(v3, v2);
  return sub_23BD74EFC(v20);
}

void sub_23BD73AF0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = a2;
  v22 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v22);
  v21[1] = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD930);
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD73C();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0B0);
  v33 = *(_QWORD *)(v35 - 8);
  v7 = MEMORY[0x24BDAC7A8](v35);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)v21 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  v15 = *((unsigned __int8 *)v2 + 16);
  v16 = v2[3];
  v17 = v2[4];
  v18 = v2[5];
  v19 = v2[6];
  v28 = v2[1];
  v29 = v14;
  v38 = v14;
  v39 = v28;
  v27 = v15;
  v40 = v15;
  v25 = v17;
  v26 = v16;
  v41 = v16;
  v42 = v17;
  v23 = v19;
  v24 = v18;
  v43 = v18;
  v44 = v19;
  v21[0] = a1;
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC94();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v20 = (char *)sub_23BD73D5C + 4 * byte_23BDD0280[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD73D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 320) = 0xD000000000000011;
  *(_QWORD *)(v0 + 328) = 0x800000023BDDA610;
  *(_BYTE *)(v0 + 336) = 0;
  *(_QWORD *)(v0 + 344) = MEMORY[0x24BEE4AF8];
  sub_23BDCD730();
  v3 = MEMORY[0x24BDF1FA8];
  v4 = MEMORY[0x24BDF1F80];
  sub_23BDCDAE4();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(v2, *(_QWORD *)(v0 + 88));
  sub_23BD5F120(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328), *(_BYTE *)(v0 + 336));
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v1, v7);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 16))(*(_QWORD *)(v0 + 128), v6, v7);
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD908);
  *(_QWORD *)(v0 + 320) = v3;
  *(_QWORD *)(v0 + 328) = v4;
  swift_getOpaqueTypeConformance2();
  sub_23BD74E10(&qword_256AAD900, &qword_256AAD908, sub_23BD74DEC, MEMORY[0x24BDEDB80]);
  sub_23BDCD844();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
}

void sub_23BD73EDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = *v1;
  v3 = v1[1];
  *(_QWORD *)(v0 + 104) = (char *)v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD450) + 48);
  *(_QWORD *)(v0 + 320) = v4;
  *(_QWORD *)(v0 + 328) = v3;
  sub_23BD6A0A0();
  swift_bridgeObjectRetain();
  v5 = sub_23BDCD9AC();
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v9 & 1;
  v11 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 328) = v11;
  *(_BYTE *)(v0 + 336) = *(_DWORD *)(v0 + 60);
  v12 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 352) = v12;
  v13 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 360) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 368) = v13;
  sub_23BD704F4();
  swift_getKeyPath();
  v14 = *(_QWORD *)(v0 + 8);
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v15 = *(_QWORD *)(v0 + 16);
  v16 = (_BYTE *)(v14 + *(int *)(v15 + 48));
  LOBYTE(v3) = *v16;
  v17 = v16[1];
  sub_23BD72A24(v14);
  *(_BYTE *)(v0 + 320) = v3;
  *(_BYTE *)(v0 + 321) = v17;
  sub_23BDB29F4();
  v18 = sub_23BDCD994();
  *(_QWORD *)(v0 + 80) = v19;
  *(_QWORD *)(v0 + 88) = v18;
  v21 = v20;
  *(_QWORD *)(v0 + 96) = v22;
  swift_release();
  v21 &= 1u;
  sub_23BD5F120(v5, v7, v10);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 328) = v23;
  *(_BYTE *)(v0 + 336) = *(_DWORD *)(v0 + 60);
  v24 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 352) = v24;
  v25 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 360) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 368) = v25;
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v26 = *(_QWORD *)(v14 + *(int *)(v15 + 36));
  sub_23BD72A24(v14);
  KeyPath = swift_getKeyPath();
  v29 = *(_QWORD *)(v0 + 80);
  v28 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v2 - 152) = v28;
  *(_QWORD *)(v2 - 144) = v29;
  *(_BYTE *)(v2 - 136) = v21;
  *(_QWORD *)(v2 - 128) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v2 - 120) = KeyPath;
  *(_QWORD *)(v2 - 112) = v26;
  *(_BYTE *)(v2 - 104) = 0;
  sub_23BDCDC64();
  sub_23BDCCA04(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v0 + 152, 0.0, 1, 0.0, 1);
  sub_23BD5F120(v28, v29, v21);
  swift_release();
  swift_bridgeObjectRelease();
  v30 = *(_OWORD *)(v0 + 296);
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 280);
  *(_OWORD *)(v0 + 464) = v30;
  v31 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 400) = v31;
  v32 = *(_OWORD *)(v0 + 264);
  *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v0 + 432) = v32;
  v33 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 336) = v33;
  v34 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 352) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 368) = v34;
  v35 = *(_OWORD *)(v0 + 464);
  v36 = *(_QWORD *)(v0 + 128);
  *(_OWORD *)(v36 + 128) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v36 + 144) = v35;
  v37 = *(_OWORD *)(v0 + 400);
  v38 = *(_OWORD *)(v0 + 416);
  *(_OWORD *)(v36 + 64) = *(_OWORD *)(v0 + 384);
  *(_OWORD *)(v36 + 80) = v37;
  v39 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 480) = v39;
  *(_QWORD *)(v36 + 160) = v39;
  *(_OWORD *)(v36 + 96) = v38;
  *(_OWORD *)(v36 + 112) = v32;
  v40 = *(_OWORD *)(v0 + 336);
  v41 = *(_OWORD *)(v0 + 352);
  *(_OWORD *)v36 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v36 + 16) = v40;
  *(_OWORD *)(v36 + 32) = v41;
  *(_OWORD *)(v36 + 48) = v34;
  *(_WORD *)(v36 + 168) = 256;
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD908);
  v42 = MEMORY[0x24BDF1F80];
  *(_QWORD *)(v0 + 152) = MEMORY[0x24BDF1FA8];
  *(_QWORD *)(v0 + 160) = v42;
  swift_getOpaqueTypeConformance2();
  sub_23BD74E10(&qword_256AAD900, &qword_256AAD908, sub_23BD74DEC, MEMORY[0x24BDEDB80]);
  sub_23BDCD844();
  sub_23BDCD568();
  JUMPOUT(0x23BD73EB8);
}

void sub_23BD74260(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[13];
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void (*v67)(uint64_t);

  v56 = a5;
  v50 = a6;
  v39 = *(_QWORD *)(a3 - 8);
  v54 = a3;
  MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD010);
  v10 = sub_23BDCD700();
  v11 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  v45 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v38 = (char *)v35 - v12;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  v13 = sub_23BDCD700();
  v14 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  v47 = v14;
  MEMORY[0x24BDAC7A8](v13);
  v40 = (char *)v35 - v15;
  v46 = sub_23BDCD700();
  v48 = *(_QWORD *)(v46 - 8);
  v16 = MEMORY[0x24BDAC7A8](v46);
  v42 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v44 = (char *)v35 - v18;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD820);
  v19 = MEMORY[0x24BDAC7A8](v49);
  v57 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v55 = (char *)v35 - v21;
  v36 = sub_23BDCD5F8();
  v35[11] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35[10] = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for AwardLockupLayout();
  v23 = MEMORY[0x24BDAC7A8](v51);
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23BDCD700();
  v35[12] = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v28 = sub_23BDCD700();
  v29 = *(_QWORD *)(v28 - 8);
  v52 = v28;
  v53 = v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v58 = (char *)v35 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v59 = (char *)v35 - v33;
  a1[3](v32);
  sub_23BDCDC58();
  sub_23BDCDA90();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, a2);
  v34 = *((_OWORD *)a1 + 1);
  v64 = *(_OWORD *)a1;
  v65 = v34;
  v66 = *((_OWORD *)a1 + 2);
  v67 = a1[6];
  v60 = a2;
  v61 = v54;
  v62 = a4;
  v63 = v56;
  type metadata accessor for AwardLockupView();
}

uint64_t sub_23BD74628(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t);

  v1[28] = a1;
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v8 = v1[10];
  v9 = v1[11];
  v10 = v1[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v2 + *(int *)(v1[29] + 20), v10);
  sub_23BD72A24(v2);
  sub_23BDCD5BC();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v11 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v7 - 232) = v3;
  *(_QWORD *)(v7 - 224) = v11;
  v12 = MEMORY[0x24BDED308];
  v13 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v6, v7 - 232);
  v14 = v1[36];
  sub_23BDCDAC0();
  (*(void (**)(uint64_t, uint64_t))(v1[12] + 8))(v4, v6);
  v15 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v7 - 248) = v13;
  *(_QWORD *)(v7 - 240) = v15;
  v16 = v1[30];
  v1[12] = MEMORY[0x242611F78](v12, v16, v7 - 248);
  sub_23BD6A300(v14, v16, v1[37]);
  v17 = *(void (**)(uint64_t, uint64_t))(v1[31] + 8);
  v1[13] = (uint64_t)v17;
  v17(v14, v16);
  v18 = *(_OWORD *)(v5 + 16);
  *((_OWORD *)v1 + 28) = *(_OWORD *)v5;
  *((_OWORD *)v1 + 29) = v18;
  *((_OWORD *)v1 + 30) = *(_OWORD *)(v5 + 32);
  v1[62] = *(_QWORD *)(v5 + 48);
  v19 = v1[28];
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v2);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v1[11] = *(_QWORD *)(v7 - 216);
  *((_DWORD *)v1 + 20) = *(unsigned __int8 *)(v7 - 208);
  v1[9] = *(_QWORD *)(v7 - 200);
  *((_DWORD *)v1 + 17) = *(unsigned __int8 *)(v7 - 192);
  v20 = *(_QWORD *)(v7 - 184);
  v1[6] = *(_QWORD *)(v7 - 176);
  v1[7] = v20;
  v21 = *(_OWORD *)(v5 + 16);
  *((_OWORD *)v1 + 28) = *(_OWORD *)v5;
  *((_OWORD *)v1 + 29) = v21;
  *((_OWORD *)v1 + 30) = *(_OWORD *)(v5 + 32);
  v1[62] = *(_QWORD *)(v5 + 48);
  sub_23BD73AF0(v19, v1[33]);
  v22 = *(_OWORD *)(v5 + 16);
  *((_OWORD *)v1 + 28) = *(_OWORD *)v5;
  *((_OWORD *)v1 + 29) = v22;
  *((_OWORD *)v1 + 30) = *(_OWORD *)(v5 + 32);
  v1[62] = *(_QWORD *)(v5 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v23 = v1[29];
  sub_23BD72A24(v2);
  sub_23BDCDC58();
  v24 = sub_23BDCD6B8();
  v1[5] = *(_QWORD *)(v7 - 168);
  *((_DWORD *)v1 + 9) = *(unsigned __int8 *)(v7 - 160);
  v1[3] = *(_QWORD *)(v7 - 152);
  *((_DWORD *)v1 + 5) = *(unsigned __int8 *)(v7 - 144);
  v25 = *(_QWORD *)(v7 - 136);
  *v1 = *(_QWORD *)(v7 - 128);
  v1[1] = v25;
  v26 = v1[14];
  (*(void (**)(uint64_t))(v5 + 40))(v24);
  v27 = *(_OWORD *)(v5 + 16);
  *((_OWORD *)v1 + 28) = *(_OWORD *)v5;
  *((_OWORD *)v1 + 29) = v27;
  *((_OWORD *)v1 + 30) = *(_OWORD *)(v5 + 32);
  v1[62] = *(_QWORD *)(v5 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v28 = (_BYTE *)(v2 + *(int *)(v23 + 44));
  LOBYTE(v16) = *v28;
  LOBYTE(v13) = v28[1];
  sub_23BD72A24(v2);
  *((_BYTE *)v1 + 448) = v16;
  *((_BYTE *)v1 + 449) = v13;
  sub_23BDB29F4();
  v29 = v1[15];
  v30 = v1[32];
  v31 = v1[34];
  sub_23BDCDA84();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1[16] + 8))(v26, v30);
  v32 = *(_OWORD *)(v5 + 16);
  *((_OWORD *)v1 + 28) = *(_OWORD *)v5;
  *((_OWORD *)v1 + 29) = v32;
  *((_OWORD *)v1 + 30) = *(_OWORD *)(v5 + 32);
  v1[62] = *(_QWORD *)(v5 + 48);
  sub_23BD704F4();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BD72A24(v2);
  v33 = MEMORY[0x24BDF1028];
  v34 = sub_23BD5ED30(&qword_256AAD008, &qword_256AAD010, MEMORY[0x24BDF1028]);
  v1[73] = v31;
  v1[74] = v34;
  v35 = MEMORY[0x24BDED308];
  v36 = v1[18];
  v37 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v36, v1 + 73);
  v38 = v1[17];
  sub_23BDCDB08();
  (*(void (**)(uint64_t, uint64_t))(v1[22] + 8))(v29, v36);
  v39 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, v33);
  v1[71] = v37;
  v1[72] = v39;
  v40 = v1[20];
  v41 = MEMORY[0x242611F78](v35, v40, v1 + 71);
  v42 = v1[19];
  sub_23BDCDAF0();
  (*(void (**)(uint64_t, uint64_t))(v1[24] + 8))(v38, v40);
  v43 = MEMORY[0x24BDEDB80];
  v1[69] = v41;
  v1[70] = v43;
  v44 = v1[23];
  v1[34] = MEMORY[0x242611F78](v35, v44, v1 + 69);
  v45 = v1[21];
  sub_23BD6A300(v42, v44, v45);
  v46 = v1[25];
  v47 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v47(v42, v44);
  v48 = v1[30];
  v49 = v1[36];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[31] + 16))(v49, v1[37], v48);
  v1[56] = 0;
  *((_BYTE *)v1 + 456) = 1;
  v1[58] = v1[11];
  *((_BYTE *)v1 + 472) = *((_DWORD *)v1 + 20);
  v1[60] = v1[9];
  *((_BYTE *)v1 + 488) = *((_DWORD *)v1 + 17);
  v50 = v1[6];
  v1[62] = v1[7];
  v1[63] = v50;
  v1[64] = v49;
  v1[65] = (uint64_t)(v1 + 56);
  v51 = v1[33];
  v52 = v1[35];
  sub_23BD74CF4(v51, v52);
  v1[48] = 0;
  *((_BYTE *)v1 + 392) = 1;
  v1[50] = v1[5];
  *((_BYTE *)v1 + 408) = *((_DWORD *)v1 + 9);
  v1[52] = v1[3];
  *((_BYTE *)v1 + 424) = *((_DWORD *)v1 + 5);
  v53 = *v1;
  v1[54] = v1[1];
  v1[55] = v53;
  v1[66] = v52;
  v1[67] = (uint64_t)(v1 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v42, v45, v44);
  v1[68] = v42;
  v1[43] = v48;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
  v55 = v1[26];
  v1[44] = v54;
  v1[45] = v55;
  v1[46] = v54;
  v1[47] = v44;
  v1[38] = v1[12];
  v56 = sub_23BD69FC8();
  v1[39] = v56;
  v1[40] = sub_23BD74D3C();
  v1[41] = v56;
  v1[42] = v1[34];
  sub_23BDAF360(v1 + 64, 5uLL, (uint64_t)(v1 + 43));
  v47(v45, v44);
  sub_23BD74EFC(v51);
  v57 = (void (*)(uint64_t, uint64_t))v1[13];
  v57(v1[37], v48);
  v47(v42, v44);
  sub_23BD74EFC(v1[35]);
  return ((uint64_t (*)(uint64_t, uint64_t))v57)(v1[36], v48);
}

uint64_t sub_23BD74CE8()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD74260);
}

uint64_t sub_23BD74CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BD74D3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256AAD8F8;
  if (!qword_256AAD8F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD820);
    v2[2] = MEMORY[0x24BDF1FA8];
    v2[3] = MEMORY[0x24BDF1F80];
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23BD74E10(&qword_256AAD900, &qword_256AAD908, sub_23BD74DEC, MEMORY[0x24BDEDB80]);
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAD8F8);
  }
  return result;
}

uint64_t sub_23BD74DEC()
{
  return sub_23BD74E10(&qword_256AAD910, &qword_256AAD918, (uint64_t (*)(void))sub_23BD74E78, MEMORY[0x24BDEDBB8]);
}

uint64_t sub_23BD74E10(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD74E78()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAD920;
  if (!qword_256AAD920)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD928);
    v2 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAD920);
  }
  return result;
}

uint64_t sub_23BD74EFC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD820);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD74F44()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD72F84);
}

uint64_t sub_23BD74F50()
{
  return sub_23BD6A29C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD73618);
}

__n128 AwardRemoteParticipantStatusMonitorFeature.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AwardRemoteParticipantStatusMonitorFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, unint64_t *a2, unint64_t *a3, _BYTE *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD778);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  v13 = MEMORY[0x24BDAC7A8](State);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v83 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v83 - v19;
  if ((*a4 & 1) != 0)
  {
    v22 = *v4;
    v21 = v4[1];
    v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
    v24 = &v11[v23[16]];
    v25 = &v11[v23[20]];
    v26 = &v11[v23[24]];
    sub_23BD76434();
    sub_23BDCDE80();
    sub_23BDCDDFC();
    v27 = *MEMORY[0x24BE2B570];
    v28 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v24, v27, v28);
    v29 = *MEMORY[0x24BE2B550];
    v30 = sub_23BDCDCB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v25, v29, v30);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v22;
    *(_QWORD *)(v31 + 24) = v21;
    *(_QWORD *)v26 = &unk_256AAD948;
    *((_QWORD *)v26 + 1) = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE2B438], v8);
    v32 = *a3;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = sub_23BD6E138(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
    v34 = *(_QWORD *)(v32 + 16);
    v33 = *(_QWORD *)(v32 + 24);
    if (v34 >= v33 >> 1)
      v32 = sub_23BD6E138(v33 > 1, v34 + 1, 1, v32);
    *(_QWORD *)(v32 + 16) = v34 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v34, v11, v8);
    *a3 = v32;
  }
  else
  {
    v84 = v18;
    v86 = v17;
    v36 = qword_256AACE00;
    swift_bridgeObjectRetain();
    if (v36 != -1)
      swift_once();
    v37 = sub_23BDCD628();
    v38 = __swift_project_value_buffer(v37, (uint64_t)qword_256AAF4B0);
    swift_bridgeObjectRetain();
    v39 = sub_23BDCD610();
    v40 = sub_23BDCDE38();
    v41 = os_log_type_enabled(v39, v40);
    v87 = v20;
    v88 = (unint64_t *)v38;
    v85 = v16;
    if (v41)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v90 = v43;
      *(_DWORD *)v42 = 136315138;
      type metadata accessor for AwardEarnedLoadState();
      swift_bridgeObjectRetain();
      v44 = sub_23BDCDCE8();
      v46 = v45;
      swift_bridgeObjectRelease();
      v89 = sub_23BD6E4F0(v44, v46, &v90);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v39, v40, "[RemoteBrowsingIdentityUpdatedMonitor] Clearing previous earned load states %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v43, -1, -1);
      MEMORY[0x242611FFC](v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v47 = sub_23BDCD610();
    v48 = sub_23BDCDE38();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v90 = v50;
      *(_DWORD *)v49 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD950);
      v51 = sub_23BDCDCE8();
      v53 = v52;
      swift_bridgeObjectRelease();
      v89 = sub_23BD6E4F0(v51, v53, &v90);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v47, v48, "[RemoteBrowsingIdentityUpdatedMonitor] Clearing previous image load states %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v50, -1, -1);
      MEMORY[0x242611FFC](v49, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v54 = sub_23BDCD610();
    v55 = sub_23BDCDE38();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v90 = v57;
      *(_DWORD *)v56 = 136315138;
      type metadata accessor for AwardProgressLoadState();
      swift_bridgeObjectRetain();
      v58 = sub_23BDCDCE8();
      v60 = v59;
      swift_bridgeObjectRelease();
      v89 = sub_23BD6E4F0(v58, v60, &v90);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v54, v55, "[RemoteBrowsingIdentityUpdatedMonitor] Clearing previous progress load states %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v57, -1, -1);
      MEMORY[0x242611FFC](v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v61 = sub_23BDCD610();
    v62 = sub_23BDCDE38();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      v90 = v64;
      *(_DWORD *)v63 = 136315138;
      swift_bridgeObjectRetain();
      v65 = sub_23BDCDCE8();
      v67 = v66;
      swift_bridgeObjectRelease();
      v89 = sub_23BD6E4F0(v65, v67, &v90);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v61, v62, "[RemoteBrowsingIdentityUpdatedMonitor] Clearing previous suggested workout load states %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v64, -1, -1);
      MEMORY[0x242611FFC](v63, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v68 = (uint64_t)v87;
    v69 = (uint64_t)v85;
    v70 = (uint64_t)a2 + *(int *)(type metadata accessor for AwardRemoteParticipantStatusMonitorState() + 32);
    sub_23BD764FC(v70, v68);
    sub_23BD764FC(v68, v69);
    v71 = sub_23BDCD610();
    v72 = sub_23BDCDE38();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v88 = a2;
      v75 = v74;
      v90 = v74;
      *(_DWORD *)v73 = 136315138;
      sub_23BD764FC(v69, v84);
      v76 = sub_23BDCDD78();
      v89 = sub_23BD6E4F0(v76, v77, &v90);
      v68 = (uint64_t)v87;
      sub_23BDCDE5C();
      swift_bridgeObjectRelease();
      sub_23BD76540(v69);
      _os_log_impl(&dword_23BD56000, v71, v72, "[RemoteBrowsingIdentityUpdatedMonitor] Clearing previous toast load state %s", v73, 0xCu);
      swift_arrayDestroy();
      a2 = v88;
      MEMORY[0x242611FFC](v75, -1, -1);
      MEMORY[0x242611FFC](v73, -1, -1);
    }
    else
    {
      sub_23BD76540(v69);
    }

    v78 = MEMORY[0x24BEE4AF8];
    v79 = sub_23BD75B24(MEMORY[0x24BEE4AF8], &qword_256AAD998, &qword_256AAD9A0, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    swift_bridgeObjectRelease();
    *a2 = v79;
    v80 = sub_23BD759F0(v78);
    swift_bridgeObjectRelease();
    a2[1] = v80;
    v81 = sub_23BD75B24(v78, &qword_256AAD980, &qword_256AAD988, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    swift_bridgeObjectRelease();
    a2[2] = v81;
    v82 = sub_23BD75CBC(v78);
    sub_23BD76540(v68);
    swift_bridgeObjectRelease();
    a2[3] = v82;
    sub_23BD76540(v70);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

unint64_t sub_23BD759D4(uint64_t a1)
{
  return sub_23BD75B24(a1, &qword_256AAD998, &qword_256AAD9A0, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
}

unint64_t sub_23BD759F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD990);
  v2 = (_QWORD *)sub_23BDCDF04();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23BD8BD48(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23BD75B08(uint64_t a1)
{
  return sub_23BD75B24(a1, &qword_256AAD980, &qword_256AAD988, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
}

unint64_t sub_23BD75B24(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (_QWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = sub_23BDCDF04();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  v29[1] = a1;
  v30 = v14;
  v15 = v11 + 64;
  v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v17 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_23BD5F39C(v16, (uint64_t)v10, v31);
    v18 = *v10;
    v19 = v10[1];
    result = sub_23BD8BD48(*v10, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v12[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v12[7];
    v25 = a4(0);
    result = sub_23BD7686C(v30, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23BD75CBC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD978);
  v2 = (_QWORD *)sub_23BDCDF04();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    sub_23BD58A70(v7);
    result = sub_23BD8BD48(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_23BD75DD4(uint64_t a1, int *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = sub_23BDCDDF0();
  v2[14] = sub_23BDCDDE4();
  v6 = (uint64_t (*)(_QWORD *))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  v2[15] = v4;
  *v4 = v2;
  v4[1] = sub_23BD75E64;
  return v6(v2 + 7);
}

uint64_t sub_23BD75E64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 136) = sub_23BDCDDCC();
  *(_QWORD *)(v2 + 144) = v3;
  return swift_task_switch();
}

uint64_t sub_23BD75EF0()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BDCDE14();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[19] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[20] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BD76050;
  return sub_23BDCDDD8();
}

uint64_t sub_23BD76050()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BD760A4()
{
  uint64_t v0;
  int v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(unsigned __int8 *)(v0 + 176);
  if (v1 == 2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else if ((v1 & 1) != 0)
  {
    *(_QWORD *)(v0 + 152) = sub_23BDCDDE4();
    __swift_mutable_project_boxed_opaque_existential_1(v0 + 16, *(_QWORD *)(v0 + 40));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v11;
    *v11 = v0;
    v11[1] = sub_23BD76050;
    return sub_23BDCDDD8();
  }
  else
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v3 = sub_23BDCD628();
    __swift_project_value_buffer(v3, (uint64_t)qword_256AAF4B0);
    v4 = sub_23BDCD610();
    v5 = sub_23BDCDE38();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315138;
      *(_BYTE *)(v0 + 178) = 0;
      v8 = sub_23BDCDD78();
      *(_QWORD *)(v6 + 4) = sub_23BD6E4F0(v8, v9, &v12);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v4, v5, "[RemoteBrowsingIdentityUpdatedMonitor] Received updated remote browsing identity (%s) - clearing award states.", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v7, -1, -1);
      MEMORY[0x242611FFC](v6, -1, -1);
    }

    *(_BYTE *)(v0 + 177) = 0;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9A8);
    *v10 = v0;
    v10[1] = sub_23BD76308;
    return sub_23BDCDCAC();
  }
}

uint64_t sub_23BD76308()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD76354()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[19] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[20] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BD76050;
  return sub_23BDCDDD8();
}

uint64_t sub_23BD763F8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23BD76434()
{
  unint64_t result;

  result = qword_256AAD938;
  if (!qword_256AAD938)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0474, &type metadata for AwardRemoteParticipantStatusMonitorFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAD938);
  }
  return result;
}

uint64_t sub_23BD76478()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD7649C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23BD6EBF8;
  return sub_23BD75DD4(a1, v4);
}

uint64_t sub_23BD764FC(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardToastLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

uint64_t sub_23BD76540(uint64_t a1)
{
  uint64_t State;

  State = type metadata accessor for AwardToastLoadState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8))(a1, State);
  return a1;
}

unint64_t sub_23BD76580()
{
  unint64_t result;

  result = qword_256AAD958;
  if (!qword_256AAD958)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardRemoteParticipantStatusMonitorAction, &type metadata for AwardRemoteParticipantStatusMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAD958);
  }
  return result;
}

unint64_t sub_23BD765C8()
{
  unint64_t result;

  result = qword_256AAD960;
  if (!qword_256AAD960)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardRemoteParticipantStatusMonitorAction, &type metadata for AwardRemoteParticipantStatusMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAD960);
  }
  return result;
}

unint64_t sub_23BD76610()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAD968;
  if (!qword_256AAD968)
  {
    v1 = type metadata accessor for AwardRemoteParticipantStatusMonitorState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardRemoteParticipantStatusMonitorState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAD968);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AwardProgressEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for AwardProgressEnvironment()
{
  return swift_release();
}

_QWORD *assignWithCopy for AwardProgressEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AwardProgressEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgressEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorFeature()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorFeature;
}

uint64_t storeEnumTagSinglePayload for AwardRemoteParticipantStatusMonitorFeature.TaskIdentifier(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD767C8 + 4 * byte_23BDD0390[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD767E8 + 4 * byte_23BDD0395[v4]))();
}

_BYTE *sub_23BD767C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD767E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD767F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD767F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD76800(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD76808(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorFeature.TaskIdentifier()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorFeature.TaskIdentifier;
}

unint64_t sub_23BD76828()
{
  unint64_t result;

  result = qword_256AAD970;
  if (!qword_256AAD970)
  {
    result = MEMORY[0x242611F78](&unk_23BDD044C, &type metadata for AwardRemoteParticipantStatusMonitorFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAD970);
  }
  return result;
}

uint64_t sub_23BD7686C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void __swiftcall AwardDescription.init(title:longDescription:shouldDisplayProgress:)(FitnessAwards::AwardDescription *__return_ptr retstr, Swift::String title, Swift::String longDescription, Swift::Bool shouldDisplayProgress)
{
  retstr->title = title;
  retstr->longDescription = longDescription;
  retstr->shouldDisplayProgress = shouldDisplayProgress;
}

uint64_t sub_23BD76928(char a1)
{
  if (!a1)
    return 0x656C746974;
  if (a1 == 1)
    return 0x63736544676E6F6CLL;
  return 0xD000000000000015;
}

uint64_t sub_23BD7698C()
{
  char *v0;

  return sub_23BD76928(*v0);
}

uint64_t sub_23BD76994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD7753C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD769B8()
{
  sub_23BD76B68();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD769E0()
{
  sub_23BD76B68();
  return sub_23BDCE0E4();
}

uint64_t AwardDescription.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v10[1] = *(_QWORD *)(v1 + 24);
  v10[2] = v7;
  v11 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD76B68();
  sub_23BDCE0CC();
  v14 = 0;
  v8 = v10[3];
  sub_23BDCDFDC();
  if (!v8)
  {
    v13 = 1;
    sub_23BDCDFDC();
    v12 = 2;
    sub_23BDCDFE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BD76B68()
{
  unint64_t result;

  result = qword_256AAD9B8;
  if (!qword_256AAD9B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0664, &type metadata for AwardDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD9B8);
  }
  return result;
}

uint64_t AwardDescription.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD76B68();
  sub_23BDCE0C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = 0;
  v9 = sub_23BDCDF64();
  v11 = v10;
  v21 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23BDCDF64();
  v14 = v13;
  v19 = v12;
  v22 = 2;
  swift_bridgeObjectRetain();
  v20 = v14;
  LOBYTE(v14) = sub_23BDCDF70();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v14 & 1;
  v16 = v20;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD76DC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardDescription.init(from:)(a1, a2);
}

uint64_t sub_23BD76DDC(_QWORD *a1)
{
  return AwardDescription.encode(to:)(a1);
}

uint64_t AwardDescription.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  return sub_23BDCE09C();
}

uint64_t AwardDescription.hashValue.getter()
{
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD76F14()
{
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD76FB0()
{
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  return sub_23BDCE09C();
}

uint64_t sub_23BD77034()
{
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards16AwardDescriptionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t result;
  char v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned __int8 *)(a2 + 32);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v8 || (v9 = sub_23BDCE024(), result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6)
      return v4 ^ v7 ^ 1u;
    v12 = sub_23BDCE024();
    result = 0;
    if ((v12 & 1) != 0)
      return v4 ^ v7 ^ 1u;
  }
  return result;
}

unint64_t sub_23BD77178()
{
  unint64_t result;

  result = qword_256AAD9C8;
  if (!qword_256AAD9C8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDescription, &type metadata for AwardDescription);
    atomic_store(result, (unint64_t *)&qword_256AAD9C8);
  }
  return result;
}

uint64_t destroy for AwardDescription()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AwardDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AwardDescription(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AwardDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardCanvasPlaceholder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardCanvasPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardDescription()
{
  return &type metadata for AwardDescription;
}

uint64_t storeEnumTagSinglePayload for AwardDescription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD773E4 + 4 * byte_23BDD04C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD77418 + 4 * byte_23BDD04C0[v4]))();
}

uint64_t sub_23BD77418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD77420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD77428);
  return result;
}

uint64_t sub_23BD77434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD7743CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD77440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD77448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardDescription.CodingKeys()
{
  return &type metadata for AwardDescription.CodingKeys;
}

unint64_t sub_23BD77468()
{
  unint64_t result;

  result = qword_256AAD9D0;
  if (!qword_256AAD9D0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD063C, &type metadata for AwardDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD9D0);
  }
  return result;
}

unint64_t sub_23BD774B0()
{
  unint64_t result;

  result = qword_256AAD9D8;
  if (!qword_256AAD9D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD05AC, &type metadata for AwardDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD9D8);
  }
  return result;
}

unint64_t sub_23BD774F8()
{
  unint64_t result;

  result = qword_256AAD9E0;
  if (!qword_256AAD9E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD05D4, &type metadata for AwardDescription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAD9E0);
  }
  return result;
}

uint64_t sub_23BD7753C(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x63736544676E6F6CLL && a2 == 0xEF6E6F6974706972 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023BDDA630)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t AwardDetailEnvironment.init(fetchAwardEarnedState:refreshSuggestedWorkoutsCanvas:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t destroy for AwardDetailEnvironment()
{
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AwardDetailEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AwardDetailEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for AwardDetailEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardDetailEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardDetailEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailEnvironment()
{
  return &type metadata for AwardDetailEnvironment;
}

uint64_t sub_23BD7784C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6469576465786966;
  else
    return 1701736302;
}

uint64_t sub_23BD77880()
{
  char *v0;

  return sub_23BD7784C(*v0);
}

uint64_t sub_23BD77888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD78710(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD778AC()
{
  sub_23BD77BF8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD778D4()
{
  sub_23BD77BF8();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD77900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD787F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD77928()
{
  sub_23BD77C3C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD77950()
{
  sub_23BD77C3C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD77978()
{
  sub_23BD77C80();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD779A0()
{
  sub_23BD77C80();
  return sub_23BDCE0E4();
}

uint64_t AwardToastWidth.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9E8);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9F0);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD9F8);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v13 = *((_BYTE *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD77BF8();
  sub_23BDCE0CC();
  if ((v13 & 1) != 0)
  {
    v22 = 0;
    sub_23BD77C80();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  }
  else
  {
    v24 = 1;
    sub_23BD77C3C();
    sub_23BDCDFAC();
    v23 = v12;
    sub_23BD6298C();
    v15 = v20;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v9);
}

unint64_t sub_23BD77BF8()
{
  unint64_t result;

  result = qword_256AADA00;
  if (!qword_256AADA00)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0A78, &type metadata for AwardToastWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA00);
  }
  return result;
}

unint64_t sub_23BD77C3C()
{
  unint64_t result;

  result = qword_256AADA08;
  if (!qword_256AADA08)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0A28, &type metadata for AwardToastWidth.FixedWidthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA08);
  }
  return result;
}

unint64_t sub_23BD77C80()
{
  unint64_t result;

  result = qword_256AADA10;
  if (!qword_256AADA10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD09D8, &type metadata for AwardToastWidth.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA10);
  }
  return result;
}

uint64_t AwardToastWidth.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;

  v36 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA18);
  v4 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  v35 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA20);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA28);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BD77BF8();
  v15 = v39;
  sub_23BDCE0C0();
  if (v15)
    goto LABEL_7;
  v16 = v7;
  v33 = v6;
  v17 = v37;
  v39 = v11;
  v18 = v13;
  v19 = sub_23BDCDFA0();
  v20 = v10;
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v28 = sub_23BDCDEC8();
    swift_allocError();
    v30 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v30 = &type metadata for AwardToastWidth;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BEE26D0], v28);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
LABEL_7:
    v27 = (uint64_t)v38;
    return __swift_destroy_boxed_opaque_existential_1(v27);
  }
  v21 = *(_BYTE *)(v19 + 32);
  if ((v21 & 1) != 0)
  {
    LODWORD(v33) = *(unsigned __int8 *)(v19 + 32);
    v42 = 1;
    sub_23BD77C3C();
    v22 = v17;
    v23 = v20;
    sub_23BDCDF28();
    sub_23BD62CA8();
    v24 = v22;
    v25 = v34;
    sub_23BDCDF94();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v25);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v23);
    v26 = v40;
    v27 = (uint64_t)v38;
    v21 = v33;
  }
  else
  {
    v41 = 0;
    sub_23BD77C80();
    sub_23BDCDF28();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v20);
    v26 = 0;
    v27 = (uint64_t)v38;
  }
  v32 = v36;
  *v36 = v26;
  *((_BYTE *)v32 + 8) = v21 ^ 1;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

uint64_t sub_23BD78068@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AwardToastWidth.init(from:)(a1, a2);
}

uint64_t sub_23BD7807C(_QWORD *a1)
{
  return AwardToastWidth.encode(to:)(a1);
}

uint64_t AwardToastWidth.hash(into:)()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0A8();
}

uint64_t static AwardToastWidth.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t AwardToastWidth.hashValue.getter()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if ((v1 & 1) == 0)
    sub_23BDCE0A8();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD7817C()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
    return sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0A8();
}

uint64_t sub_23BD781C8()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if ((v1 & 1) == 0)
    sub_23BDCE0A8();
  return sub_23BDCE0B4();
}

unint64_t sub_23BD78234()
{
  unint64_t result;

  result = qword_256AADA30;
  if (!qword_256AADA30)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastWidth, &type metadata for AwardToastWidth);
    atomic_store(result, (unint64_t *)&qword_256AADA30);
  }
  return result;
}

uint64_t sub_23BD78278(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a2 + 8);
  result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
    return *(double *)a1 == *(double *)a2;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AwardToastWidth(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardToastWidth(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23BD7830C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23BD78328(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastWidth()
{
  return &type metadata for AwardToastWidth;
}

uint64_t storeEnumTagSinglePayload for AwardToastWidth.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD783A4 + 4 * byte_23BDD06E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD783D8 + 4 * asc_23BDD06E0[v4]))();
}

uint64_t sub_23BD783D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD783E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD783E8);
  return result;
}

uint64_t sub_23BD783F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD783FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD78400(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD78408(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastWidth.CodingKeys()
{
  return &type metadata for AwardToastWidth.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastWidth.NoneCodingKeys()
{
  return &type metadata for AwardToastWidth.NoneCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AwardToastWidth.FixedWidthCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD78474 + 4 * byte_23BDD06EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD78494 + 4 * byte_23BDD06EF[v4]))();
}

_BYTE *sub_23BD78474(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD78494(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD7849C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD784A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD784AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD784B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastWidth.FixedWidthCodingKeys()
{
  return &type metadata for AwardToastWidth.FixedWidthCodingKeys;
}

unint64_t sub_23BD784D4()
{
  unint64_t result;

  result = qword_256AADA38;
  if (!qword_256AADA38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD08A8, &type metadata for AwardToastWidth.FixedWidthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA38);
  }
  return result;
}

unint64_t sub_23BD7851C()
{
  unint64_t result;

  result = qword_256AADA40;
  if (!qword_256AADA40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD09B0, &type metadata for AwardToastWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA40);
  }
  return result;
}

unint64_t sub_23BD78564()
{
  unint64_t result;

  result = qword_256AADA48;
  if (!qword_256AADA48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD08D0, &type metadata for AwardToastWidth.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA48);
  }
  return result;
}

unint64_t sub_23BD785AC()
{
  unint64_t result;

  result = qword_256AADA50;
  if (!qword_256AADA50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD08F8, &type metadata for AwardToastWidth.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA50);
  }
  return result;
}

unint64_t sub_23BD785F4()
{
  unint64_t result;

  result = qword_256AADA58;
  if (!qword_256AADA58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0818, &type metadata for AwardToastWidth.FixedWidthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA58);
  }
  return result;
}

unint64_t sub_23BD7863C()
{
  unint64_t result;

  result = qword_256AADA60;
  if (!qword_256AADA60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0840, &type metadata for AwardToastWidth.FixedWidthCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA60);
  }
  return result;
}

unint64_t sub_23BD78684()
{
  unint64_t result;

  result = qword_256AADA68;
  if (!qword_256AADA68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0920, &type metadata for AwardToastWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA68);
  }
  return result;
}

unint64_t sub_23BD786CC()
{
  unint64_t result;

  result = qword_256AADA70;
  if (!qword_256AADA70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0948, &type metadata for AwardToastWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADA70);
  }
  return result;
}

uint64_t sub_23BD78710(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6469576465786966 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD787F0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6874646977 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD7886C()
{
  return 0x6874646977;
}

uint64_t sub_23BD78880(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD788BC + 4 * byte_23BDD0AD0[a1]))(0xD000000000000012, 0x800000023BDDA650);
}

unint64_t sub_23BD788BC()
{
  return 0xD000000000000010;
}

uint64_t sub_23BD788D8()
{
  return 0x73736572676F7270;
}

uint64_t sub_23BD788FC()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_23BD78914()
{
  return 0x6570704177656976;
}

uint64_t sub_23BD78934()
{
  unsigned __int8 *v0;

  return sub_23BD78880(*v0);
}

uint64_t sub_23BD7893C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD7A0FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BD78960(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23BD7896C()
{
  sub_23BD78FCC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD78994()
{
  sub_23BD78FCC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD789BC()
{
  sub_23BD79120();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD789E4()
{
  sub_23BD79120();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD78A0C()
{
  sub_23BD790DC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD78A34()
{
  sub_23BD790DC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD78A5C()
{
  sub_23BD79054();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD78A84()
{
  sub_23BD79054();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD78AAC()
{
  sub_23BD79098();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD78AD4()
{
  sub_23BD79098();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD78AFC()
{
  sub_23BD79010();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD78B24()
{
  sub_23BD79010();
  return sub_23BDCE0E4();
}

uint64_t AwardProgressAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA78);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA80);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v30 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA88);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA90);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADA98);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAA0);
  v44 = *(_QWORD *)(v14 - 8);
  v45 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v1;
  *(_QWORD *)&v43 = v1[1];
  *((_QWORD *)&v43 + 1) = v17;
  v18 = v1[3];
  *(_QWORD *)&v42 = v1[2];
  *((_QWORD *)&v42 + 1) = v18;
  v19 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD78FCC();
  sub_23BDCE0CC();
  if (!(v19 >> 6))
  {
    LOBYTE(v46) = 0;
    sub_23BD79120();
    v24 = v45;
    sub_23BDCDFAC();
    sub_23BDCDFDC();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v24);
  }
  if (v19 >> 6 == 1)
  {
    LOBYTE(v46) = 2;
    sub_23BD79098();
    v20 = v39;
    v21 = v45;
    sub_23BDCDFAC();
    v46 = *((_QWORD *)&v43 + 1);
    v47 = v43;
    v48 = v42;
    v49 = v19 & 1;
    sub_23BD604C0();
    v22 = v41;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v21);
  }
  if ((v42 | v43) == 0 && v19 == 128)
  {
    LOBYTE(v46) = 1;
    sub_23BD790DC();
    v25 = v36;
    v26 = v45;
    sub_23BDCDFAC();
    v28 = v37;
    v27 = v38;
LABEL_13:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v26);
  }
  if (v19 != 128
    || *((_QWORD *)&v43 + 1) != 1
    || (unint64_t)v42 | (unint64_t)v43 | *((_QWORD *)&v42 + 1))
  {
    LOBYTE(v46) = 4;
    sub_23BD79010();
    v25 = v33;
    v26 = v45;
    sub_23BDCDFAC();
    v28 = v34;
    v27 = v35;
    goto LABEL_13;
  }
  LOBYTE(v46) = 3;
  sub_23BD79054();
  v29 = v30;
  v26 = v45;
  sub_23BDCDFAC();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v26);
}

unint64_t sub_23BD78FCC()
{
  unint64_t result;

  result = qword_256AADAA8;
  if (!qword_256AADAA8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD10C0, &type metadata for AwardProgressAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAA8);
  }
  return result;
}

unint64_t sub_23BD79010()
{
  unint64_t result;

  result = qword_256AADAB0;
  if (!qword_256AADAB0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1070, &type metadata for AwardProgressAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAB0);
  }
  return result;
}

unint64_t sub_23BD79054()
{
  unint64_t result;

  result = qword_256AADAB8;
  if (!qword_256AADAB8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1020, &type metadata for AwardProgressAction.ProgressFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAB8);
  }
  return result;
}

unint64_t sub_23BD79098()
{
  unint64_t result;

  result = qword_256AADAC0;
  if (!qword_256AADAC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0FD0, &type metadata for AwardProgressAction.ProgressFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAC0);
  }
  return result;
}

unint64_t sub_23BD790DC()
{
  unint64_t result;

  result = qword_256AADAC8;
  if (!qword_256AADAC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0F80, &type metadata for AwardProgressAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAC8);
  }
  return result;
}

unint64_t sub_23BD79120()
{
  unint64_t result;

  result = qword_256AADAD0;
  if (!qword_256AADAD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0F30, &type metadata for AwardProgressAction.FetchAwardProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADAD0);
  }
  return result;
}

uint64_t AwardProgressAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v23[7];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;

  v29 = a2;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAD8);
  v33 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v32 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAE0);
  v23[6] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAE8);
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAF0);
  v23[4] = *(_QWORD *)(v6 - 8);
  v23[5] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v28 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADAF8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADB00);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_23BD78FCC();
  v17 = v35;
  sub_23BDCE0C0();
  if (!v17)
  {
    v23[3] = v11;
    v23[1] = v9;
    v23[2] = v8;
    v35 = v13;
    v18 = sub_23BDCDFA0();
    if (*(_QWORD *)(v18 + 16) == 1)
      __asm { BR              X10 }
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for AwardProgressAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v12);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
}

uint64_t sub_23BD79814@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardProgressAction.init(from:)(a1, a2);
}

uint64_t sub_23BD79828(_QWORD *a1)
{
  return AwardProgressAction.encode(to:)(a1);
}

uint64_t destroy for AwardProgressAction(uint64_t a1)
{
  return sub_23BD6EC68(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AwardProgressAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23BD6EC40(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AwardProgressAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23BD6EC40(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_23BD6EC68(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AwardProgressAction(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_23BD6EC68(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AwardProgressAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_23BD79A18(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 32);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23BD79A38(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 0x3Fu;
  return result;
}

uint64_t sub_23BD79A48(uint64_t result, unsigned int a2)
{
  if (a2 < 2)
  {
    *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressAction()
{
  return &type metadata for AwardProgressAction;
}

uint64_t getEnumTagSinglePayload for AwardProgressAction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgressAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD79B64 + 4 * byte_23BDD0ADF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD79B98 + 4 * byte_23BDD0ADA[v4]))();
}

uint64_t sub_23BD79B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD79BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD79BA8);
  return result;
}

uint64_t sub_23BD79BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD79BBCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD79BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD79BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressAction.CodingKeys()
{
  return &type metadata for AwardProgressAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressAction.FetchAwardProgressCodingKeys()
{
  return &type metadata for AwardProgressAction.FetchAwardProgressCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressAction.LoadStateClearedCodingKeys()
{
  return &type metadata for AwardProgressAction.LoadStateClearedCodingKeys;
}

uint64_t _s13FitnessAwards19AwardProgressActionO28FetchAwardProgressCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD79C48 + 4 * byte_23BDD0AE4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD79C68 + 4 * byte_23BDD0AE9[v4]))();
}

_BYTE *sub_23BD79C48(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD79C68(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD79C70(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD79C78(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD79C80(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD79C88(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressAction.ProgressFetchedCodingKeys()
{
  return &type metadata for AwardProgressAction.ProgressFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressAction.ProgressFetchFailedCodingKeys()
{
  return &type metadata for AwardProgressAction.ProgressFetchFailedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardProgressAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BD79CC8()
{
  unint64_t result;

  result = qword_256AADB08;
  if (!qword_256AADB08)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0D48, &type metadata for AwardProgressAction.ProgressFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB08);
  }
  return result;
}

unint64_t sub_23BD79D10()
{
  unint64_t result;

  result = qword_256AADB10;
  if (!qword_256AADB10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0E50, &type metadata for AwardProgressAction.FetchAwardProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB10);
  }
  return result;
}

unint64_t sub_23BD79D58()
{
  unint64_t result;

  result = qword_256AADB18;
  if (!qword_256AADB18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0F08, &type metadata for AwardProgressAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB18);
  }
  return result;
}

unint64_t sub_23BD79DA0()
{
  unint64_t result;

  result = qword_256AADB20;
  if (!qword_256AADB20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0DC0, &type metadata for AwardProgressAction.FetchAwardProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB20);
  }
  return result;
}

unint64_t sub_23BD79DE8()
{
  unint64_t result;

  result = qword_256AADB28;
  if (!qword_256AADB28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0DE8, &type metadata for AwardProgressAction.FetchAwardProgressCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB28);
  }
  return result;
}

unint64_t sub_23BD79E30()
{
  unint64_t result;

  result = qword_256AADB30;
  if (!qword_256AADB30)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0D70, &type metadata for AwardProgressAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB30);
  }
  return result;
}

unint64_t sub_23BD79E78()
{
  unint64_t result;

  result = qword_256AADB38;
  if (!qword_256AADB38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0D98, &type metadata for AwardProgressAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB38);
  }
  return result;
}

unint64_t sub_23BD79EC0()
{
  unint64_t result;

  result = qword_256AADB40;
  if (!qword_256AADB40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0CB8, &type metadata for AwardProgressAction.ProgressFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB40);
  }
  return result;
}

unint64_t sub_23BD79F08()
{
  unint64_t result;

  result = qword_256AADB48;
  if (!qword_256AADB48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0CE0, &type metadata for AwardProgressAction.ProgressFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB48);
  }
  return result;
}

unint64_t sub_23BD79F50()
{
  unint64_t result;

  result = qword_256AADB50;
  if (!qword_256AADB50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0C68, &type metadata for AwardProgressAction.ProgressFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB50);
  }
  return result;
}

unint64_t sub_23BD79F98()
{
  unint64_t result;

  result = qword_256AADB58;
  if (!qword_256AADB58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0C90, &type metadata for AwardProgressAction.ProgressFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB58);
  }
  return result;
}

unint64_t sub_23BD79FE0()
{
  unint64_t result;

  result = qword_256AADB60;
  if (!qword_256AADB60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0C18, &type metadata for AwardProgressAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB60);
  }
  return result;
}

unint64_t sub_23BD7A028()
{
  unint64_t result;

  result = qword_256AADB68;
  if (!qword_256AADB68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0C40, &type metadata for AwardProgressAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB68);
  }
  return result;
}

unint64_t sub_23BD7A070()
{
  unint64_t result;

  result = qword_256AADB70;
  if (!qword_256AADB70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0E78, &type metadata for AwardProgressAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB70);
  }
  return result;
}

unint64_t sub_23BD7A0B8()
{
  unint64_t result;

  result = qword_256AADB78;
  if (!qword_256AADB78)
  {
    result = MEMORY[0x242611F78](&unk_23BDD0EA0, &type metadata for AwardProgressAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADB78);
  }
  return result;
}

uint64_t sub_23BD7A0FC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA650 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA670 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xEF64656863746546 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BDDA690 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t AwardToastImageView.init(imageData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double AwardToastImageView.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  double result;
  __int16 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int16 v23;
  char v24;

  v3 = sub_23BDCDB8C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = objc_allocWithZone(MEMORY[0x24BEBD640]);
  sub_23BD7A51C(v8, v7);
  v10 = (void *)sub_23BDCD550();
  v11 = objc_msgSend(v9, sel_initWithData_, v10);
  sub_23BD7A560(v8, v7);

  if (v11)
  {
    v12 = v11;
    sub_23BDCDB74();
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDF3FD0], v3);
    v13 = sub_23BDCDB98();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v18 = v13;
    v19 = 0x3FF0000000000000;
    v20 = 0;
    v21 = 0;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AADB80);
    sub_23BD7A5A4();
    sub_23BDCD844();
    swift_release();

  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AADB80);
    sub_23BD7A5A4();
    sub_23BDCD844();
  }
  result = *(double *)&v22;
  v15 = v23;
  v16 = v24;
  *(_OWORD *)a1 = v22;
  *(_WORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 18) = v16;
  return result;
}

uint64_t sub_23BD7A51C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_23BD7A560(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_23BD7A5A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AADB88;
  if (!qword_256AADB88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADB80);
    v2[0] = MEMORY[0x24BDF40E8];
    v2[1] = MEMORY[0x24BDEEC40];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AADB88);
  }
  return result;
}

uint64_t sub_23BD7A608()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardToastImageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23BD7A51C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AwardToastImageView(uint64_t a1)
{
  return sub_23BD7A560(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for AwardToastImageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23BD7A51C(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23BD7A560(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AwardToastImageView(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23BD7A560(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastImageView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AwardToastImageView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastImageView()
{
  return &type metadata for AwardToastImageView;
}

unint64_t sub_23BD7A794()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AADB90;
  if (!qword_256AADB90)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADB98);
    v2[0] = sub_23BD7A5A4();
    v2[1] = MEMORY[0x24BDF5138];
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AADB90);
  }
  return result;
}

uint64_t sub_23BD7A808(char a1)
{
  return *(_QWORD *)&aIdle_5[8 * a1];
}

uint64_t sub_23BD7A828()
{
  char *v0;

  return sub_23BD7A808(*v0);
}

uint64_t sub_23BD7A830()
{
  sub_23BD7B7E0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7A858()
{
  sub_23BD7B7E0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7A880()
{
  sub_23BD7B868();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7A8A8()
{
  sub_23BD7B868();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7A8D0()
{
  sub_23BD7B8F0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7A8F8()
{
  sub_23BD7B8F0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7A920()
{
  sub_23BD7B934();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7A948()
{
  sub_23BD7B934();
  return sub_23BDCE0E4();
}

uint64_t AwardEarnedLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t State;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int EnumCaseMultiPayload;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBA0);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v32 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBA8);
  v29 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v31 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23BDCD58C();
  v30 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBB0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBB8);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD7B7E0();
  sub_23BDCE0CC();
  sub_23BD7B824(v38, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *v11;
      v44 = 2;
      sub_23BD7B868();
      v17 = v32;
      v18 = v40;
      sub_23BDCDFAC();
      v43 = v16;
      sub_23BD7B8AC();
      v19 = v36;
      sub_23BDCE00C();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v18);
    }
    else
    {
      v41 = 0;
      sub_23BD7B934();
      v27 = v40;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v27);
    }
  }
  else
  {
    v21 = v29;
    v22 = v30;
    v23 = v33;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v37, v11, v33);
    v42 = 1;
    sub_23BD7B8F0();
    v24 = v31;
    v25 = v40;
    sub_23BDCDFAC();
    sub_23BD6B5DC(&qword_256AAD4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v26 = v35;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v26);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v37, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v14, v25);
  }
}

uint64_t AwardEarnedLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v55 = a2;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBE8);
  v54 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v60 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBF0);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADBF8);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADC00);
  v56 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardEarnedLoadState();
  v11 = MEMORY[0x24BDAC7A8](State);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v45 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v45 - v17;
  v19 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23BD7B7E0();
  v20 = v9;
  v21 = v62;
  sub_23BDCE0C0();
  if (!v21)
  {
    v46 = v13;
    v47 = v16;
    v23 = v59;
    v22 = v60;
    v48 = v18;
    v62 = State;
    v24 = v57;
    v25 = v58;
    v26 = v20;
    v27 = sub_23BDCDFA0();
    if (*(_QWORD *)(v27 + 16) == 1)
    {
      if (*(_BYTE *)(v27 + 32))
      {
        if (*(_BYTE *)(v27 + 32) == 1)
        {
          v64 = 1;
          sub_23BD7B8F0();
          sub_23BDCDF28();
          v28 = v55;
          sub_23BDCD58C();
          sub_23BD6B5DC(&qword_256AAD4D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
          v36 = v53;
          sub_23BDCDF94();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v36);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v25);
          v37 = (uint64_t)v61;
          v38 = (uint64_t)v47;
          swift_storeEnumTagMultiPayload();
          v39 = v38;
          v40 = (uint64_t)v48;
          sub_23BD58C2C(v39, (uint64_t)v48);
LABEL_12:
          sub_23BD58C2C(v40, v28);
          return __swift_destroy_boxed_opaque_existential_1(v37);
        }
        v66 = 2;
        sub_23BD7B868();
        v33 = v22;
        v34 = v26;
        sub_23BDCDF28();
        sub_23BD7B978();
        v41 = v51;
        sub_23BDCDF94();
        v37 = (uint64_t)v61;
        v42 = v56;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v41);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v25);
        v43 = v46;
        *v46 = v65;
        swift_storeEnumTagMultiPayload();
        v44 = (uint64_t)v43;
        v40 = (uint64_t)v48;
        sub_23BD58C2C(v44, (uint64_t)v48);
      }
      else
      {
        v63 = 0;
        sub_23BD7B934();
        sub_23BDCDF28();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v50);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v25);
        v40 = (uint64_t)v48;
        swift_storeEnumTagMultiPayload();
        v37 = (uint64_t)v61;
      }
      v28 = v55;
      goto LABEL_12;
    }
    v29 = v25;
    v30 = sub_23BDCDEC8();
    swift_allocError();
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v32 = v62;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v29);
  }
  v37 = (uint64_t)v61;
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t sub_23BD7B34C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardEarnedLoadState.init(from:)(a1, a2);
}

uint64_t sub_23BD7B360(_QWORD *a1)
{
  return AwardEarnedLoadState.encode(to:)(a1);
}

uint64_t AwardEarnedLoadState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t State;
  uint64_t v6;
  char *v7;
  int EnumCaseMultiPayload;
  uint64_t v10;

  v1 = sub_23BDCD58C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD7B824(v0, (uint64_t)v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
      sub_23BDCE090();
    return sub_23BDCE090();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

uint64_t AwardEarnedLoadState.hashValue.getter()
{
  sub_23BDCE084();
  AwardEarnedLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD7B4FC()
{
  sub_23BDCE084();
  AwardEarnedLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD7B53C()
{
  sub_23BDCE084();
  AwardEarnedLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards20AwardEarnedLoadStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int EnumCaseMultiPayload;
  char v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v4 = sub_23BDCD58C();
  v5 = *(_QWORD *)(v4 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AwardEarnedLoadState();
  v8 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADD18);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v16[*(int *)(v14 + 48)];
  sub_23BD7B824(a1, (uint64_t)v16);
  sub_23BD7B824(a2, (uint64_t)v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BD7B824((uint64_t)v16, (uint64_t)v12);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v17, v4);
      v20 = sub_23BDCD574();
      v21 = *(void (**)(char *, uint64_t))(v5 + 8);
      v21(v7, v4);
      v21(v12, v4);
      sub_23BD7BC00((uint64_t)v16);
      return v20 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_9;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_23BD7BC00((uint64_t)v16);
      v20 = 1;
      return v20 & 1;
    }
LABEL_9:
    sub_23BD7C1E4((uint64_t)v16);
    v20 = 0;
    return v20 & 1;
  }
  sub_23BD7B824((uint64_t)v16, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1)
    goto LABEL_9;
  v19 = *v10 ^ *v17;
  sub_23BD7BC00((uint64_t)v16);
  v20 = v19 ^ 1;
  return v20 & 1;
}

uint64_t type metadata accessor for AwardEarnedLoadState()
{
  uint64_t result;

  result = qword_256AADC88;
  if (!qword_256AADC88)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD7B7E0()
{
  unint64_t result;

  result = qword_256AADBC0;
  if (!qword_256AADBC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD165C, &type metadata for AwardEarnedLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADBC0);
  }
  return result;
}

uint64_t sub_23BD7B824(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

unint64_t sub_23BD7B868()
{
  unint64_t result;

  result = qword_256AADBC8;
  if (!qword_256AADBC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD160C, &type metadata for AwardEarnedLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADBC8);
  }
  return result;
}

unint64_t sub_23BD7B8AC()
{
  unint64_t result;

  result = qword_256AADBD0;
  if (!qword_256AADBD0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardEarnedState, &type metadata for AwardEarnedState);
    atomic_store(result, (unint64_t *)&qword_256AADBD0);
  }
  return result;
}

unint64_t sub_23BD7B8F0()
{
  unint64_t result;

  result = qword_256AADBD8;
  if (!qword_256AADBD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD15BC, &type metadata for AwardEarnedLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADBD8);
  }
  return result;
}

unint64_t sub_23BD7B934()
{
  unint64_t result;

  result = qword_256AADBE0;
  if (!qword_256AADBE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD156C, &type metadata for AwardEarnedLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADBE0);
  }
  return result;
}

unint64_t sub_23BD7B978()
{
  unint64_t result;

  result = qword_256AADC08;
  if (!qword_256AADC08)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardEarnedState, &type metadata for AwardEarnedState);
    atomic_store(result, (unint64_t *)&qword_256AADC08);
  }
  return result;
}

uint64_t sub_23BD7B9BC()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AADC10, (uint64_t (*)(uint64_t))type metadata accessor for AwardEarnedLoadState, (uint64_t)&protocol conformance descriptor for AwardEarnedLoadState);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardEarnedLoadState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_23BDCD58C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AwardEarnedLoadState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_23BDCD58C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AwardEarnedLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for AwardEarnedLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23BD7BC00((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BD7BC00(uint64_t a1)
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8))(a1, State);
  return a1;
}

void *assignWithTake for AwardEarnedLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23BD7BC00((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BD7BCD4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardEarnedLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD7BD8C + 4 * byte_23BDD11A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD7BDC0 + 4 * asc_23BDD11A0[v4]))();
}

uint64_t sub_23BD7BDC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD7BDC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD7BDD0);
  return result;
}

uint64_t sub_23BD7BDDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD7BDE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD7BDE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD7BDF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardEarnedLoadState.CodingKeys()
{
  return &type metadata for AwardEarnedLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardEarnedLoadState.IdleCodingKeys()
{
  return &type metadata for AwardEarnedLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for AwardEarnedLoadState.FetchingCodingKeys()
{
  return &type metadata for AwardEarnedLoadState.FetchingCodingKeys;
}

uint64_t _s13FitnessAwards20AwardEarnedLoadStateO18FetchingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD7BE70 + 4 * byte_23BDD11AA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD7BE90 + 4 * byte_23BDD11AF[v4]))();
}

_BYTE *sub_23BD7BE70(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD7BE90(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD7BE98(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD7BEA0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD7BEA8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD7BEB0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardEarnedLoadState.FetchedCodingKeys()
{
  return &type metadata for AwardEarnedLoadState.FetchedCodingKeys;
}

unint64_t sub_23BD7BED0()
{
  unint64_t result;

  result = qword_256AADCC0;
  if (!qword_256AADCC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1384, &type metadata for AwardEarnedLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCC0);
  }
  return result;
}

unint64_t sub_23BD7BF18()
{
  unint64_t result;

  result = qword_256AADCC8;
  if (!qword_256AADCC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD143C, &type metadata for AwardEarnedLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCC8);
  }
  return result;
}

unint64_t sub_23BD7BF60()
{
  unint64_t result;

  result = qword_256AADCD0;
  if (!qword_256AADCD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1544, &type metadata for AwardEarnedLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCD0);
  }
  return result;
}

unint64_t sub_23BD7BFA8()
{
  unint64_t result;

  result = qword_256AADCD8;
  if (!qword_256AADCD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1464, &type metadata for AwardEarnedLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCD8);
  }
  return result;
}

unint64_t sub_23BD7BFF0()
{
  unint64_t result;

  result = qword_256AADCE0;
  if (!qword_256AADCE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD148C, &type metadata for AwardEarnedLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCE0);
  }
  return result;
}

unint64_t sub_23BD7C038()
{
  unint64_t result;

  result = qword_256AADCE8;
  if (!qword_256AADCE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD13AC, &type metadata for AwardEarnedLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCE8);
  }
  return result;
}

unint64_t sub_23BD7C080()
{
  unint64_t result;

  result = qword_256AADCF0;
  if (!qword_256AADCF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD13D4, &type metadata for AwardEarnedLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCF0);
  }
  return result;
}

unint64_t sub_23BD7C0C8()
{
  unint64_t result;

  result = qword_256AADCF8;
  if (!qword_256AADCF8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD12F4, &type metadata for AwardEarnedLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADCF8);
  }
  return result;
}

unint64_t sub_23BD7C110()
{
  unint64_t result;

  result = qword_256AADD00;
  if (!qword_256AADD00)
  {
    result = MEMORY[0x242611F78](&unk_23BDD131C, &type metadata for AwardEarnedLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADD00);
  }
  return result;
}

unint64_t sub_23BD7C158()
{
  unint64_t result;

  result = qword_256AADD08;
  if (!qword_256AADD08)
  {
    result = MEMORY[0x242611F78](&unk_23BDD14B4, &type metadata for AwardEarnedLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADD08);
  }
  return result;
}

unint64_t sub_23BD7C1A0()
{
  unint64_t result;

  result = qword_256AADD10;
  if (!qword_256AADD10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD14DC, &type metadata for AwardEarnedLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADD10);
  }
  return result;
}

uint64_t sub_23BD7C1E4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TVAwardHeaderView.init(store:awardImageViewBuilder:awardProgressViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a7 = sub_23BD5AACC;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_23BD7C2A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t TVAwardHeaderView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  _QWORD v39[2];
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  __int128 *v60;
  _QWORD v61[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _QWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v53 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v51 = a1;
  v55 = v2;
  sub_23BDCD700();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADD20);
  *(_QWORD *)&v67 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFF0);
  v5 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  v54 = v5;
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *((_QWORD *)&v67 + 1) = sub_23BDCDE50();
  *(_QWORD *)&v68 = v4;
  *((_QWORD *)&v68 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AADD28);
  swift_getTupleTypeMetadata();
  v6 = sub_23BDCDC70();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v6);
  sub_23BDCDBE0();
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata3();
  v8 = sub_23BDCDC70();
  v41 = MEMORY[0x242611F78](v7, v8);
  v9 = sub_23BDCDBC8();
  v50 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v39 - v10;
  v12 = sub_23BDCD700();
  v49 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v43 = (char *)v39 - v13;
  v42 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v9);
  v66[0] = v42;
  v66[1] = MEMORY[0x24BDEBEE0];
  v14 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v12, v66);
  *(_QWORD *)&v67 = v12;
  *((_QWORD *)&v67 + 1) = v14;
  v15 = v14;
  v39[1] = v14;
  v16 = MEMORY[0x242611F18](0, &v67, MEMORY[0x24BDF39E8], 0);
  v44 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v39 - v17;
  *(_QWORD *)&v67 = v12;
  *((_QWORD *)&v67 + 1) = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)&v67 = v16;
  *((_QWORD *)&v67 + 1) = OpaqueTypeConformance2;
  v19 = MEMORY[0x242611F18](0, &v67, MEMORY[0x24BDF2E08], 0);
  v47 = *(_QWORD *)(v19 - 8);
  v45 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v39 - v20;
  v22 = sub_23BDCD700();
  v48 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v46 = (uint64_t)v39 - v26;
  v27 = v52[1];
  v67 = *v52;
  v68 = v27;
  v69 = v52[2];
  v70 = *((_QWORD *)v52 + 6);
  sub_23BDCD7C0();
  v56 = v55;
  v57 = v54;
  v39[0] = *(_QWORD *)(v51 + 32);
  v52 = *(__int128 **)(v51 + 40);
  v58 = v39[0];
  v59 = v52;
  v60 = &v67;
  sub_23BDCDBBC();
  v62 = v67;
  v63 = v68;
  v64 = v69;
  v65 = v70;
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  v28 = v43;
  sub_23BDCDA90();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v9);
  sub_23BDCDAFC();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v12);
  v29 = OpaqueTypeConformance2;
  sub_23BDCDA6C();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v16);
  v30 = swift_allocObject();
  v31 = v54;
  *(_QWORD *)(v30 + 16) = v55;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = v52;
  *(_QWORD *)(v30 + 32) = v39[0];
  *(_QWORD *)(v30 + 40) = v32;
  v33 = v68;
  *(_OWORD *)(v30 + 48) = v67;
  *(_OWORD *)(v30 + 64) = v33;
  *(_OWORD *)(v30 + 80) = v69;
  *(_QWORD *)(v30 + 96) = v70;
  sub_23BD657F0((uint64_t)&v67);
  *(_QWORD *)&v62 = v16;
  *((_QWORD *)&v62 + 1) = v29;
  v34 = swift_getOpaqueTypeConformance2();
  v35 = v45;
  sub_23BDCDACC();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v35);
  v61[0] = v34;
  v61[1] = MEMORY[0x24BDF0910];
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v22, v61);
  v36 = v46;
  sub_23BD6A300((uint64_t)v25, v22, v46);
  v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v25, v22);
  sub_23BD6345C(v36, v22, v53);
  return ((uint64_t (*)(uint64_t, uint64_t))v37)(v36, v22);
}

void sub_23BD7C9C8(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[8];
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v24 = a5;
  v23[5] = a4;
  v30 = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADD20);
  *(_QWORD *)&v32 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *((_QWORD *)&v32 + 1) = sub_23BDCDE50();
  *(_QWORD *)&v33 = v10;
  *((_QWORD *)&v33 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AADD28);
  swift_getTupleTypeMetadata();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v27 = sub_23BDCDBE0();
  v28 = sub_23BDCD700();
  v12 = sub_23BDCD850();
  v29 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v25 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v26 = (char *)v23 - v16;
  v23[7] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = sub_23BDCD700();
  v23[6] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v31 = (char *)v23 - v20;
  a1[3](v19);
  v21 = *((_OWORD *)a1 + 1);
  v32 = *(_OWORD *)a1;
  v22 = *((_OWORD *)a1 + 2);
  v33 = v21;
  v34 = v22;
  v35 = a1[6];
  v36 = a2;
  v37 = a3;
  v38 = a4;
  v39 = v24;
  type metadata accessor for TVAwardHeaderView();
}

uint64_t sub_23BD7CCB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 - 272) = *(_OWORD *)v1;
  v10 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 - 256) = v9;
  *(_OWORD *)(v7 - 240) = v10;
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v1 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  v11 = *(_QWORD *)(v7 - 408);
  sub_23BDCDA90();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 392) + 8))(v4, v3);
  v12 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v7 - 152) = v11;
  *(_QWORD *)(v7 - 144) = v12;
  v13 = MEMORY[0x24BDED308];
  *(_QWORD *)(v7 - 392) = MEMORY[0x242611F78](MEMORY[0x24BDED308], v5, v7 - 152);
  sub_23BD6A300(v6, v5, *(_QWORD *)(v7 - 328));
  v14 = *(_QWORD *)(v7 - 400);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v7 - 384) = v15;
  v15(v6, v5);
  v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 - 272) = *(_OWORD *)v1;
  v17 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 - 256) = v16;
  *(_OWORD *)(v7 - 240) = v17;
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v1 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  sub_23BDCD6B8();
  *(_QWORD *)(v7 - 408) = *(_QWORD *)(v7 - 136);
  *(_DWORD *)(v7 - 412) = *(unsigned __int8 *)(v7 - 128);
  *(_QWORD *)(v7 - 424) = *(_QWORD *)(v7 - 120);
  *(_DWORD *)(v7 - 428) = *(unsigned __int8 *)(v7 - 112);
  *(_QWORD *)(v7 - 440) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 448) = *(_QWORD *)(v7 - 96);
  v18 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 - 272) = *(_OWORD *)v1;
  v19 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 - 256) = v18;
  *(_OWORD *)(v7 - 240) = v19;
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v1 + 48);
  v20 = *(_QWORD *)(v7 - 376);
  sub_23BD7D120(a1, v20);
  v21 = MEMORY[0x24BDEDBB8];
  v22 = sub_23BD7EE30(&qword_256AADDB0, &qword_256AADD20, MEMORY[0x24BDF3E20], MEMORY[0x24BDEDBB8]);
  *(_QWORD *)(v7 - 168) = MEMORY[0x242611F78](MEMORY[0x24BDF4700], *(_QWORD *)(v7 - 360));
  *(_QWORD *)(v7 - 160) = v21;
  v23 = MEMORY[0x242611F78](v13, *(_QWORD *)(v7 - 352), v7 - 168);
  *(_QWORD *)(v7 - 184) = v22;
  *(_QWORD *)(v7 - 176) = v23;
  v24 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v2, v7 - 184);
  v25 = *(_QWORD *)(v7 - 368);
  sub_23BD6A300(v20, v2, v25);
  v26 = *(_QWORD *)(v7 - 344);
  v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v27(v20, v2);
  v28 = *(_QWORD *)(v7 - 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v6, v28, v5);
  *(_QWORD *)(v7 - 272) = 0;
  *(_BYTE *)(v7 - 264) = 1;
  *(_QWORD *)(v7 - 256) = *(_QWORD *)(v7 - 408);
  *(_BYTE *)(v7 - 248) = *(_DWORD *)(v7 - 412);
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 424);
  *(_BYTE *)(v7 - 232) = *(_DWORD *)(v7 - 428);
  v29 = *(_QWORD *)(v7 - 448);
  *(_QWORD *)(v7 - 224) = *(_QWORD *)(v7 - 440);
  *(_QWORD *)(v7 - 216) = v29;
  *(_QWORD *)(v7 - 208) = v6;
  *(_QWORD *)(v7 - 200) = v7 - 272;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v20, v25, v2);
  *(_QWORD *)(v7 - 192) = v20;
  *(_QWORD *)(v7 - 296) = v5;
  *(_QWORD *)(v7 - 288) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
  *(_QWORD *)(v7 - 280) = v2;
  *(_QWORD *)(v7 - 320) = *(_QWORD *)(v7 - 392);
  *(_QWORD *)(v7 - 312) = sub_23BD7EE30((unint64_t *)&qword_256AAD448, &qword_256AAD368, MEMORY[0x24BDF4610], MEMORY[0x24BDEBEE0]);
  *(_QWORD *)(v7 - 304) = v24;
  sub_23BDAF360((uint64_t *)(v7 - 208), 3uLL, v7 - 296);
  v27(v25, v2);
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v7 - 384);
  v30(v28, v5);
  v27(v20, v2);
  return v30(v6, v5);
}

void sub_23BD7D110(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23BD7C9C8(*(void (***)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

void sub_23BD7D120(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  _QWORD v24[24];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v24[14] = a2;
  *(_QWORD *)&v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v5 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  sub_23BDCD700();
  v24[7] = v5;
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  *((_QWORD *)&v25 + 1) = sub_23BDCDE50();
  *(_QWORD *)&v26 = v4;
  *((_QWORD *)&v26 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AADD28);
  swift_getTupleTypeMetadata();
  v6 = sub_23BDCDC70();
  v24[1] = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v6);
  v24[2] = v6;
  v7 = sub_23BDCDBE0();
  v24[4] = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v24[3] = (char *)v24 - v8;
  v24[13] = v9;
  v10 = sub_23BDCD700();
  v24[5] = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v24[6] = (char *)v24 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[9] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADD20);
  v18 = sub_23BDCD850();
  v24[11] = *(_QWORD *)(v18 - 8);
  v24[12] = v18;
  MEMORY[0x24BDAC7A8](v18);
  v24[10] = (char *)v24 - v19;
  v20 = v2[1];
  v29 = *v2;
  v30 = v20;
  v22 = *v2;
  v21 = v2[1];
  v31 = v2[2];
  v32 = *((_QWORD *)v2 + 6);
  v25 = v22;
  v26 = v21;
  v27 = v2[2];
  v28 = *((_QWORD *)v2 + 6);
  v24[8] = a1;
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC94();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v23 = (char *)sub_23BD7D484 + 4 * byte_23BDD16E0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD7D484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 32);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)v2;
  *(_QWORD *)(v0 + 200) = v5;
  *(_QWORD *)(v0 + 208) = v7;
  *(_QWORD *)(v0 + 216) = v6;
  *(_BYTE *)(v0 + 224) = v8;
  v9 = sub_23BDCD82C();
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v0 + 24);
  sub_23BDCDBD4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23BDCDC58();
  v21 = *(_QWORD *)(v0 + 104);
  v22 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v21);
  sub_23BDCDA9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 32) + 8))(v10, v21);
  *(_QWORD *)(v4 - 176) = v22;
  v11 = MEMORY[0x24BDEDBB8];
  *(_QWORD *)(v4 - 168) = MEMORY[0x24BDEDBB8];
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v4 - 176);
  v12 = *(_QWORD *)(v0 + 48);
  sub_23BD6A300(v3, v1, v12);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 40) + 8);
  v13(v3, v1);
  sub_23BD6345C(v12, v1, v3);
  sub_23BD7EE30(&qword_256AADDB0, &qword_256AADD20, MEMORY[0x24BDF3E20], v11);
  v14 = *(_QWORD *)(v0 + 80);
  sub_23BDAF29C(v3, *(_QWORD *)(v0 + 72), v1);
  v13(v3, v1);
  v13(v12, v1);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  v18 = sub_23BD7EE30(&qword_256AADDB0, &qword_256AADD20, MEMORY[0x24BDF3E20], v11);
  *(_QWORD *)(v4 - 192) = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v21);
  *(_QWORD *)(v4 - 184) = v11;
  v19 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v4 - 192);
  *(_QWORD *)(v4 - 208) = v18;
  *(_QWORD *)(v4 - 200) = v19;
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v16, v4 - 208);
  sub_23BD6345C(v14, v16, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
}

void sub_23BD7D8FC()
{
  type metadata accessor for TVAwardHeaderView();
}

uint64_t sub_23BD7D938()
{
  sub_23BD63474();
  sub_23BDCDCDC();
  return swift_release();
}

uint64_t sub_23BD7D960()
{
  sub_23BD5E388();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BD7D998()
{
  sub_23BD7D8FC();
}

uint64_t sub_23BD7D9A8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BD7D9DC(_QWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v44 = a6;
  v36 = a3;
  v37 = a5;
  v42 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  v34 = a4;
  v33[0] = sub_23BDCD700();
  v10 = sub_23BDCD700();
  v11 = sub_23BDCD700();
  v33[1] = v10;
  v33[2] = v11;
  v12 = sub_23BDCD850();
  v33[3] = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v33[6] = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v33[4] = (char *)v33 - v15;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  MEMORY[0x24BDAC7A8](v35);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v33[7] = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v43 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v33[5] = v12;
  swift_getTupleTypeMetadata2();
  v45 = sub_23BDCDC70();
  v51 = sub_23BDCDE50();
  v49 = *(_QWORD *)(v51 - 8);
  v17 = MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v48 = (char *)v33 - v19;
  v40 = a1;
  v20 = *a1;
  v21 = a1[1];
  *(_QWORD *)&v52 = v20;
  *((_QWORD *)&v52 + 1) = v21;
  v22 = sub_23BD6A0A0();
  swift_bridgeObjectRetain();
  v39 = v22;
  v23 = sub_23BDCD9AC();
  v25 = v24;
  v27 = v26 & 1;
  sub_23BDCD91C();
  v28 = sub_23BDCD994();
  v46 = v29;
  v47 = v28;
  v38 = v30;
  v41 = v31;
  swift_release();
  sub_23BD5F120(v23, v25, v27);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  v32 = a2[1];
  v52 = *a2;
  v53 = v32;
  v54 = a2[2];
  v55 = *((_QWORD *)a2 + 6);
  v56 = v36;
  v57 = v34;
  v58 = v37;
  v59 = v44;
  type metadata accessor for TVAwardHeaderView();
}

uint64_t sub_23BD7DCCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD, uint64_t);

  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC94();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 56) + 8))(v2, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *(_QWORD *)(v1 + 176) = v3;
  if (EnumCaseMultiPayload != 1)
  {
    sub_23BD7EEA8(v4);
    goto LABEL_5;
  }
  v11 = *(_QWORD *)(v1 + 48);
  v12 = *(unsigned __int8 *)(v4 + 32);
  v13 = v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD450) + 48);
  v14 = sub_23BDCD568();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 != 1)
  {
LABEL_5:
    v36 = *(_QWORD *)(v1 + 152);
    v35 = *(_QWORD *)(v1 + 200);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    goto LABEL_6;
  }
  v15 = MEMORY[0x24BDEBEE0];
  v16 = *(_OWORD *)(v5 + 16);
  *v6 = *(_OWORD *)v5;
  v6[1] = v16;
  v6[2] = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v1 + 400) = *(_QWORD *)(v5 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v17 = *(_QWORD *)(v8 - 192);
  v18 = *(_BYTE *)(v8 - 184);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v8 - 176);
  *(_QWORD *)(v1 + 88) = v17;
  *(_DWORD *)(v1 + 72) = *(unsigned __int8 *)(v8 - 168);
  v19 = *(_QWORD *)(v8 - 160);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v8 - 152);
  *(_QWORD *)(v1 + 64) = v19;
  v20 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v1 + 352) = *(_OWORD *)v5;
  *(_OWORD *)(v1 + 368) = v20;
  *(_OWORD *)(v1 + 384) = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v1 + 400) = *(_QWORD *)(v5 + 48);
  v21 = v11;
  sub_23BD7E4AC(a1, v11);
  v22 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
  v23 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 264) = v23;
  *(_QWORD *)(v1 + 272) = v22;
  v24 = MEMORY[0x24BDED308];
  v25 = MEMORY[0x242611F78](MEMORY[0x24BDED308], *(_QWORD *)v1, v1 + 264);
  v26 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v1 + 248) = v25;
  *(_QWORD *)(v1 + 256) = v26;
  v27 = MEMORY[0x242611F78](v24, *(_QWORD *)(v1 + 8), v1 + 248);
  *(_QWORD *)(v1 + 232) = v23;
  *(_QWORD *)(v1 + 240) = v15;
  v28 = MEMORY[0x242611F78](v24, *(_QWORD *)(v1 + 16), v1 + 232);
  *(_QWORD *)(v1 + 216) = v27;
  *(_QWORD *)(v1 + 224) = v28;
  v29 = *(_QWORD *)(v1 + 40);
  v30 = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v29, v1 + 216);
  v31 = *(_QWORD *)(v1 + 32);
  sub_23BD6A300(v21, v29, v31);
  v32 = *(_QWORD *)(v1 + 24);
  v33 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v33(v21, v29);
  *(_QWORD *)(v1 + 352) = 0;
  *(_BYTE *)(v1 + 360) = 1;
  *(_QWORD *)(v1 + 368) = *(_QWORD *)(v1 + 88);
  *(_BYTE *)(v1 + 376) = v18;
  v6 = (_OWORD *)(v1 + 352);
  *(_QWORD *)(v1 + 384) = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v1 + 392) = *(_DWORD *)(v1 + 72);
  v34 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 400) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 408) = v34;
  *(_QWORD *)(v1 + 424) = v1 + 352;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v21, v31, v29);
  *(_QWORD *)(v1 + 432) = v21;
  *(_QWORD *)(v8 - 144) = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v8 - 136) = v29;
  *(_QWORD *)(v1 + 488) = sub_23BD7EE30((unint64_t *)&qword_256AAD448, &qword_256AAD368, MEMORY[0x24BDF4610], MEMORY[0x24BDEBEE0]);
  *(_QWORD *)(v1 + 496) = v30;
  v35 = *(_QWORD *)(v1 + 200);
  sub_23BDAF360((uint64_t *)(v1 + 424), 2uLL, v8 - 144);
  v33(v31, v29);
  v33(v21, v29);
  v36 = *(_QWORD *)(v1 + 152);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
LABEL_6:
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v36);
  sub_23BDA1A54(v35, *(_QWORD *)(v1 + 184));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 8))(v35, *(_QWORD *)(v1 + 208));
  *(_DWORD *)(v1 + 144) = *(_DWORD *)(v1 + 96) & 1;
  v37 = *(_OWORD *)(v5 + 16);
  *v6 = *(_OWORD *)v5;
  v6[1] = v37;
  v6[2] = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v1 + 400) = *(_QWORD *)(v5 + 48);
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  sub_23BDCD6B8();
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(v8 - 144);
  *(_DWORD *)(v1 + 88) = *(unsigned __int8 *)(v8 - 136);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v8 - 128);
  *(_DWORD *)(v1 + 72) = *(unsigned __int8 *)(v8 - 120);
  v38 = *(_QWORD *)(v8 - 112);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(v8 - 104);
  *(_QWORD *)(v1 + 64) = v38;
  v39 = *(_QWORD *)(v1 + 112);
  v40 = *(_QWORD *)(v39 + 24);
  *(_QWORD *)(v1 + 352) = *(_QWORD *)(v39 + 16);
  *(_QWORD *)(v1 + 360) = v40;
  swift_bridgeObjectRetain();
  v41 = sub_23BDCD9AC();
  v43 = v42;
  v45 = v44 & 1;
  sub_23BDCD940();
  v46 = sub_23BDCD994();
  v48 = v47;
  v50 = v49;
  swift_release();
  sub_23BD5F120(v41, v43, v45);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 352) = sub_23BDCD874();
  v51 = sub_23BDCD970();
  v53 = v52;
  *(_QWORD *)(v1 + 112) = v54;
  *(_DWORD *)(v1 + 104) = v55 & 1;
  sub_23BD5F120(v46, v48, v50 & 1);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  *(_QWORD *)(v1 + 40) = KeyPath;
  *(_QWORD *)(v1 + 48) = swift_getKeyPath();
  v57 = *(_QWORD *)(v1 + 160);
  v58 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v1 + 488) = v58;
  *(_QWORD *)(v1 + 496) = v57;
  v59 = *(_DWORD *)(v1 + 144);
  *(_BYTE *)(v1 + 504) = v59;
  *(_QWORD *)(v1 + 512) = *(_QWORD *)(v1 + 120);
  v60 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v1 + 520) = *(_QWORD *)(v1 + 176);
  *(_BYTE *)(v1 + 528) = 0;
  *(_QWORD *)(v8 - 248) = v1 + 488;
  v61 = *(_QWORD *)(v1 + 200);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 16))(v61, v60, *(_QWORD *)(v1 + 208));
  *(_QWORD *)(v1 + 424) = 0;
  *(_BYTE *)(v1 + 432) = 1;
  *(_QWORD *)(v1 + 440) = *(_QWORD *)(v1 + 96);
  *(_BYTE *)(v1 + 448) = *(_DWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 456) = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(v1 + 464) = *(_DWORD *)(v1 + 72);
  v62 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 472) = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 480) = v62;
  *(_QWORD *)(v8 - 240) = v61;
  *(_QWORD *)(v8 - 232) = v1 + 424;
  *(_QWORD *)(v1 + 352) = v51;
  *(_QWORD *)(v1 + 360) = v53;
  v63 = *(_DWORD *)(v1 + 104);
  *(_BYTE *)(v1 + 368) = v63;
  *(_QWORD *)(v1 + 376) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 384) = KeyPath;
  *(_QWORD *)(v1 + 392) = 3;
  *(_BYTE *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 416) = 0;
  *(_QWORD *)(v8 - 224) = v1 + 352;
  sub_23BD5F194(v58, v57, v59);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23BD5F194(v51, v53, v63);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AACFF0);
  v65 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v1 + 320) = v64;
  *(_QWORD *)(v1 + 328) = v65;
  *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 344) = __swift_instantiateConcreteTypeFromMangledName(qword_256AADD28);
  *(_QWORD *)(v1 + 288) = sub_23BD7EF94((unint64_t *)&qword_256AACFE8, &qword_256AACFF0, &qword_256AACFF8, &qword_256AAD000);
  *(_QWORD *)(v1 + 280) = MEMORY[0x242611F78](MEMORY[0x24BDF5428], *(_QWORD *)(v1 + 152));
  *(_QWORD *)(v1 + 296) = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v65, v1 + 280);
  *(_QWORD *)(v1 + 304) = sub_23BD7EE30((unint64_t *)&qword_256AAD448, &qword_256AAD368, MEMORY[0x24BDF4610], MEMORY[0x24BDEBEE0]);
  *(_QWORD *)(v1 + 312) = sub_23BD7EEF0();
  sub_23BDAF360((uint64_t *)(v8 - 248), 4uLL, v1 + 320);
  sub_23BD5F120(v51, v53, v63);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v66 = *(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 + 192) + 8);
  v66(*(_QWORD *)(v1 + 184), v65);
  sub_23BD5F120(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 160), *(_DWORD *)(v1 + 144));
  swift_release();
  swift_bridgeObjectRelease();
  sub_23BD5F120(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 360), *(_BYTE *)(v1 + 368));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v66(*(_QWORD *)(v1 + 200), v65);
  sub_23BD5F120(*(_QWORD *)(v1 + 488), *(_QWORD *)(v1 + 496), *(_BYTE *)(v1 + 504));
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD7E4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD v64[2];
  _QWORD v65[2];
  _QWORD v66[2];
  _QWORD v67[2];
  _QWORD v68[2];
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  __int128 v73;
  char v74;
  __int128 v75;
  void (*v76)(_QWORD);
  uint64_t v77;

  v62 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = sub_23BDCD700();
  v50 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v51 = (uint64_t)&v49 - v9;
  v56 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  v12 = sub_23BDCD700();
  v53 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v49 - v13;
  v60 = v15;
  v16 = sub_23BDCD700();
  v54 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v55 = (uint64_t)&v49 - v20;
  v61 = v5;
  v59 = sub_23BDCD850();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v57 = (char *)&v49 - v21;
  LOBYTE(v21) = *((_BYTE *)v2 + 16);
  v22 = (void (*)(_QWORD))*((_QWORD *)v2 + 5);
  v23 = *((_QWORD *)v2 + 6);
  v73 = *v2;
  v74 = v21;
  v75 = *(__int128 *)((char *)v2 + 24);
  v76 = v22;
  v77 = v23;
  v24 = a1;
  sub_23BD63474();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  if (v73 == __PAIR128__(0x800000023BDD9DC0, 0xD00000000000001CLL))
  {
    v25 = swift_bridgeObjectRelease();
  }
  else
  {
    v26 = sub_23BDCE024();
    v25 = swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      v22(v25);
      sub_23BDCDC58();
      v27 = *(_QWORD *)(v24 + 40);
      v39 = (uint64_t)v52;
      sub_23BDCDA90();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v4);
      v72[0] = v27;
      v34 = MEMORY[0x24BDEBEE0];
      v72[1] = MEMORY[0x24BDEBEE0];
      v40 = MEMORY[0x24BDED308];
      v35 = v61;
      MEMORY[0x242611F78](MEMORY[0x24BDED308], v61, v72);
      v41 = v51;
      sub_23BD6A300(v39, v35, v51);
      v33 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v33(v39, v35);
      sub_23BD6345C(v41, v35, v39);
      v42 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
      v71[0] = v27;
      v71[1] = v42;
      v30 = v60;
      v70[0] = MEMORY[0x242611F78](v40, v60, v71);
      v70[1] = MEMORY[0x24BDEDB80];
      MEMORY[0x242611F78](v40, v16, v70);
      v36 = (uint64_t)v57;
      sub_23BDAF29C(v39, v16, v35);
      v33(v39, v35);
      v37 = v41;
      v38 = v35;
      goto LABEL_6;
    }
  }
  v22(v25);
  v27 = *(_QWORD *)(v24 + 40);
  sub_23BDCDB08();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v4);
  v28 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
  v65[0] = v27;
  v65[1] = v28;
  v29 = MEMORY[0x24BDED308];
  v30 = v60;
  v31 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v60, v65);
  sub_23BDCDAF0();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v30);
  v64[0] = v31;
  v64[1] = MEMORY[0x24BDEDB80];
  MEMORY[0x242611F78](v29, v16, v64);
  v32 = v55;
  sub_23BD6A300((uint64_t)v19, v16, v55);
  v33 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v33((uint64_t)v19, v16);
  sub_23BD6345C(v32, v16, (uint64_t)v19);
  v63[0] = v27;
  v34 = MEMORY[0x24BDEBEE0];
  v63[1] = MEMORY[0x24BDEBEE0];
  v35 = v61;
  MEMORY[0x242611F78](v29, v61, v63);
  v36 = (uint64_t)v57;
  sub_23BDAF1D8((uint64_t)v19, v16);
  v33((uint64_t)v19, v16);
  v37 = v32;
  v38 = v16;
LABEL_6:
  v33(v37, v38);
  v43 = sub_23BD5ED30(&qword_256AAD8F0, &qword_256AAD828, MEMORY[0x24BDF1028]);
  v69[0] = v27;
  v69[1] = v43;
  v44 = MEMORY[0x24BDED308];
  v68[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v30, v69);
  v68[1] = MEMORY[0x24BDEDB80];
  v45 = MEMORY[0x242611F78](v44, v16, v68);
  v67[0] = v27;
  v67[1] = v34;
  v46 = MEMORY[0x242611F78](v44, v35, v67);
  v66[0] = v45;
  v66[1] = v46;
  v47 = v59;
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v59, v66);
  sub_23BD6345C(v36, v47, v62);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v36, v47);
}

void type metadata accessor for TVAwardHeaderView()
{
  JUMPOUT(0x242611EDCLL);
}

uint64_t sub_23BD7EB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23BDCD700();
  v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADD20);
  v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AACFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD828);
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata2();
  sub_23BDCDC70();
  v15 = sub_23BDCDE50();
  v16 = v0;
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AADD28);
  swift_getTupleTypeMetadata();
  v1 = sub_23BDCDC70();
  v2 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v1);
  sub_23BDCDBE0();
  sub_23BDCD700();
  sub_23BDCD850();
  swift_getTupleTypeMetadata3();
  v3 = sub_23BDCDC70();
  MEMORY[0x242611F78](v2, v3);
  v4 = sub_23BDCDBC8();
  v5 = sub_23BDCD700();
  v13[0] = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v4);
  v13[1] = MEMORY[0x24BDEBEE0];
  v6 = MEMORY[0x24BDED308];
  v7 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v5, v13);
  v14 = v5;
  v15 = v7;
  v8 = MEMORY[0x242611F18](255, &v14, MEMORY[0x24BDF39E8], 0);
  v14 = v5;
  v15 = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v14 = v8;
  v15 = OpaqueTypeConformance2;
  MEMORY[0x242611F18](255, &v14, MEMORY[0x24BDF2E08], 0);
  v10 = sub_23BDCD700();
  v14 = v8;
  v15 = OpaqueTypeConformance2;
  v12[0] = swift_getOpaqueTypeConformance2();
  v12[1] = MEMORY[0x24BDF0910];
  return MEMORY[0x242611F78](v6, v10, v12);
}

uint64_t sub_23BD7EE30(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3;
    v9[1] = a4;
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23BD7EE90(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_23BD7D9DC(*(_QWORD **)(v1 + 48), *(__int128 **)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_23BD7EEA8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD408);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23BD7EEF0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AADDB8;
  if (!qword_256AADDB8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AADD28);
    v2[0] = sub_23BD7EF94((unint64_t *)&qword_256AAD920, &qword_256AAD928, &qword_256AAD8F0, &qword_256AAD828);
    v2[1] = sub_23BD5ED30(&qword_256AACFF8, &qword_256AAD000, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AADDB8);
  }
  return result;
}

uint64_t sub_23BD7EF94(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = sub_23BD5ED30(a3, a4, MEMORY[0x24BDF1028]);
    v10[0] = MEMORY[0x24BDF1F80];
    v10[1] = v9;
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

BOOL static DescriptionTextAlignment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BD7F028(char a1)
{
  return *(_QWORD *)&aLeading_0[8 * a1];
}

uint64_t sub_23BD7F048()
{
  sub_23BD7F4A0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7F070()
{
  sub_23BD7F4A0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7F098()
{
  char *v0;

  return sub_23BD7F028(*v0);
}

uint64_t sub_23BD7F0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD7FDE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD7F0C4()
{
  sub_23BD7F418();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7F0EC()
{
  sub_23BD7F418();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7F114()
{
  sub_23BD7F4E4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7F13C()
{
  sub_23BD7F4E4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7F164()
{
  sub_23BD7F45C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7F18C()
{
  sub_23BD7F45C();
  return sub_23BDCE0E4();
}

uint64_t DescriptionTextAlignment.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADDC0);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADDC8);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADDD0);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADDD8);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD7F418();
  sub_23BDCE0CC();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23BD7F4A0();
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23BD7F45C();
      v16 = v21;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23BD7F4E4();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23BD7F418()
{
  unint64_t result;

  result = qword_256AADDE0;
  if (!qword_256AADDE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1C3C, &type metadata for DescriptionTextAlignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADDE0);
  }
  return result;
}

unint64_t sub_23BD7F45C()
{
  unint64_t result;

  result = qword_256AADDE8;
  if (!qword_256AADDE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1BEC, &type metadata for DescriptionTextAlignment.TrailingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADDE8);
  }
  return result;
}

unint64_t sub_23BD7F4A0()
{
  unint64_t result;

  result = qword_256AADDF0;
  if (!qword_256AADDF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1B9C, &type metadata for DescriptionTextAlignment.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADDF0);
  }
  return result;
}

unint64_t sub_23BD7F4E4()
{
  unint64_t result;

  result = qword_256AADDF8;
  if (!qword_256AADDF8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1B4C, &type metadata for DescriptionTextAlignment.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADDF8);
  }
  return result;
}

uint64_t DescriptionTextAlignment.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE00);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE08);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE10);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE18);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD7F418();
  v13 = v41;
  sub_23BDCE0C0();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23BDCDFA0();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23BDCDEC8();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v25 = &type metadata for DescriptionTextAlignment;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23BD7F4A0();
      v20 = v9;
      sub_23BDCDF28();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23BD7F45C();
      v28 = v15;
      sub_23BDCDF28();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23BD7F4E4();
    sub_23BDCDF28();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23BD7F96C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DescriptionTextAlignment.init(from:)(a1, a2);
}

uint64_t sub_23BD7F980(_QWORD *a1)
{
  return DescriptionTextAlignment.encode(to:)(a1);
}

uint64_t DescriptionTextAlignment.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t DescriptionTextAlignment.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

unint64_t sub_23BD7FA04()
{
  unint64_t result;

  result = qword_256AADE20;
  if (!qword_256AADE20)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for DescriptionTextAlignment, &type metadata for DescriptionTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AADE20);
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptionTextAlignment()
{
  return &type metadata for DescriptionTextAlignment;
}

uint64_t _s13FitnessAwards24DescriptionTextAlignmentOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD7FAAC + 4 * byte_23BDD1845[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD7FAE0 + 4 * byte_23BDD1840[v4]))();
}

uint64_t sub_23BD7FAE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD7FAE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD7FAF0);
  return result;
}

uint64_t sub_23BD7FAFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD7FB04);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD7FB08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD7FB10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DescriptionTextAlignment.CodingKeys()
{
  return &type metadata for DescriptionTextAlignment.CodingKeys;
}

ValueMetadata *type metadata accessor for DescriptionTextAlignment.LeadingCodingKeys()
{
  return &type metadata for DescriptionTextAlignment.LeadingCodingKeys;
}

ValueMetadata *type metadata accessor for DescriptionTextAlignment.CenterCodingKeys()
{
  return &type metadata for DescriptionTextAlignment.CenterCodingKeys;
}

ValueMetadata *type metadata accessor for DescriptionTextAlignment.TrailingCodingKeys()
{
  return &type metadata for DescriptionTextAlignment.TrailingCodingKeys;
}

unint64_t sub_23BD7FB60()
{
  unint64_t result;

  result = qword_256AADE28;
  if (!qword_256AADE28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1B24, &type metadata for DescriptionTextAlignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE28);
  }
  return result;
}

unint64_t sub_23BD7FBA8()
{
  unint64_t result;

  result = qword_256AADE30;
  if (!qword_256AADE30)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1A44, &type metadata for DescriptionTextAlignment.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE30);
  }
  return result;
}

unint64_t sub_23BD7FBF0()
{
  unint64_t result;

  result = qword_256AADE38;
  if (!qword_256AADE38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1A6C, &type metadata for DescriptionTextAlignment.LeadingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE38);
  }
  return result;
}

unint64_t sub_23BD7FC38()
{
  unint64_t result;

  result = qword_256AADE40;
  if (!qword_256AADE40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD19F4, &type metadata for DescriptionTextAlignment.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE40);
  }
  return result;
}

unint64_t sub_23BD7FC80()
{
  unint64_t result;

  result = qword_256AADE48;
  if (!qword_256AADE48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1A1C, &type metadata for DescriptionTextAlignment.CenterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE48);
  }
  return result;
}

unint64_t sub_23BD7FCC8()
{
  unint64_t result;

  result = qword_256AADE50;
  if (!qword_256AADE50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD19A4, &type metadata for DescriptionTextAlignment.TrailingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE50);
  }
  return result;
}

unint64_t sub_23BD7FD10()
{
  unint64_t result;

  result = qword_256AADE58;
  if (!qword_256AADE58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD19CC, &type metadata for DescriptionTextAlignment.TrailingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE58);
  }
  return result;
}

unint64_t sub_23BD7FD58()
{
  unint64_t result;

  result = qword_256AADE60;
  if (!qword_256AADE60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1A94, &type metadata for DescriptionTextAlignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE60);
  }
  return result;
}

unint64_t sub_23BD7FDA0()
{
  unint64_t result;

  result = qword_256AADE68;
  if (!qword_256AADE68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1ABC, &type metadata for DescriptionTextAlignment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE68);
  }
  return result;
}

uint64_t sub_23BD7FDE4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x676E696461656CLL && a2 == 0xE700000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E696C69617274 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD7FF24(char a1)
{
  return *(_QWORD *)&aStartstrmainta[8 * a1];
}

uint64_t sub_23BD7FF44()
{
  sub_23BD805CC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7FF6C()
{
  sub_23BD805CC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD7FF94()
{
  char *v0;

  return sub_23BD7FF24(*v0);
}

uint64_t sub_23BD7FF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD818C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD7FFC0()
{
  sub_23BD80544();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD7FFE8()
{
  sub_23BD80544();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD80014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD81AA0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD8003C()
{
  sub_23BD80610();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD80064()
{
  sub_23BD80610();
  return sub_23BDCE0E4();
}

unint64_t sub_23BD8008C()
{
  return 0xD000000000000012;
}

uint64_t sub_23BD800A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD81B54(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD800D0()
{
  sub_23BD80588();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD800F8()
{
  sub_23BD80588();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD80120()
{
  sub_23BD80654();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD80148()
{
  sub_23BD80654();
  return sub_23BDCE0E4();
}

void AwardToastKind.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[7];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE70);
  v13 = *(_QWORD *)(v3 - 8);
  v14 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v12 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE78);
  v10[4] = *(_QWORD *)(v5 - 8);
  v10[5] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v10[3] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE80);
  v10[1] = *(_QWORD *)(v7 - 8);
  v10[2] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE88);
  MEMORY[0x24BDAC7A8](v11);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADE90);
  v16 = *(_QWORD *)(v8 - 8);
  v17 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v15 = *v1;
  v10[6] = v1[1];
  v9 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD80544();
  sub_23BDCE0CC();
  __asm { BR              X9 }
}

uint64_t sub_23BD80330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v2 - 67) = 1;
  sub_23BD80610();
  v3 = *(_QWORD *)(v2 - 104);
  sub_23BDCDFAC();
  v4 = *(_QWORD *)(v2 - 192);
  sub_23BDCE000();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v0, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v1, v3);
}

unint64_t sub_23BD80544()
{
  unint64_t result;

  result = qword_256AADE98;
  if (!qword_256AADE98)
  {
    result = MEMORY[0x242611F78](&unk_23BDD22C8, &type metadata for AwardToastKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADE98);
  }
  return result;
}

unint64_t sub_23BD80588()
{
  unint64_t result;

  result = qword_256AADEA0;
  if (!qword_256AADEA0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2278, &type metadata for AwardToastKind.NextEarnableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADEA0);
  }
  return result;
}

unint64_t sub_23BD805CC()
{
  unint64_t result;

  result = qword_256AADEA8;
  if (!qword_256AADEA8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2228, &type metadata for AwardToastKind.CoalesedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADEA8);
  }
  return result;
}

unint64_t sub_23BD80610()
{
  unint64_t result;

  result = qword_256AADEC0;
  if (!qword_256AADEC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD21D8, &type metadata for AwardToastKind.MaintainStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADEC0);
  }
  return result;
}

unint64_t sub_23BD80654()
{
  unint64_t result;

  result = qword_256AADEC8;
  if (!qword_256AADEC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2188, &type metadata for AwardToastKind.StartStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADEC8);
  }
  return result;
}

uint64_t AwardToastKind.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v32 = a2;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADED0);
  v26 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADED8);
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v31 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADEE0);
  v24 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADEE8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADEF0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BD80544();
  v15 = v34;
  sub_23BDCE0C0();
  if (!v15)
  {
    v22[1] = v6;
    v22[2] = v9;
    v22[0] = v7;
    v34 = v11;
    v16 = sub_23BDCDFA0();
    v17 = v10;
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X10 }
    v18 = sub_23BDCDEC8();
    swift_allocError();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v20 = &type metadata for AwardToastKind;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v17);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
}

uint64_t sub_23BD80CF0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AADEB0);
    v8 = a2;
    result = MEMORY[0x242611F78](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD80D50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardToastKind.init(from:)(a1, a2);
}

void sub_23BD80D64(_QWORD *a1)
{
  AwardToastKind.encode(to:)(a1);
}

void AwardToastKind.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23BD80DB0()
{
  sub_23BDCE090();
  return sub_23BDCE090();
}

uint64_t AwardToastKind.hashValue.getter()
{
  sub_23BDCE084();
  AwardToastKind.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD80EBC()
{
  sub_23BDCE084();
  AwardToastKind.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD80F10()
{
  sub_23BDCE084();
  AwardToastKind.hash(into:)();
  return sub_23BDCE0B4();
}

void _s13FitnessAwards14AwardToastKindO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_23BD80F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  if (v5)
  {
    sub_23BD61430(v0, v1, v5);
    sub_23BD589A8(v2, v3, v4);
    sub_23BD589A8(v0, v1, v5);
    return 0;
  }
  else
  {
    sub_23BD589A8(v2, v3, 0);
    sub_23BD589A8(v0, v1, 0);
    return v2 == v0;
  }
}

unint64_t sub_23BD81138()
{
  unint64_t result;

  result = qword_256AADF00;
  if (!qword_256AADF00)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastKind, &type metadata for AwardToastKind);
    atomic_store(result, (unint64_t *)&qword_256AADF00);
  }
  return result;
}

uint64_t destroy for AwardToastKind(uint64_t a1)
{
  return sub_23BD589A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13FitnessAwards14AwardToastKindOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23BD61430(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AwardToastKind(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23BD61430(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD589A8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AwardToastKind(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23BD589A8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastKind(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BD812FC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_23BD81314(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastKind()
{
  return &type metadata for AwardToastKind;
}

uint64_t storeEnumTagSinglePayload for AwardToastKind.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD81388 + 4 * byte_23BDD1CD5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD813BC + 4 * byte_23BDD1CD0[v4]))();
}

uint64_t sub_23BD813BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD813C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD813CCLL);
  return result;
}

uint64_t sub_23BD813D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD813E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD813E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD813EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastKind.CodingKeys()
{
  return &type metadata for AwardToastKind.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastKind.StartStreakCodingKeys()
{
  return &type metadata for AwardToastKind.StartStreakCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastKind.MaintainStreakCodingKeys()
{
  return &type metadata for AwardToastKind.MaintainStreakCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastKind.CoalesedCodingKeys()
{
  return &type metadata for AwardToastKind.CoalesedCodingKeys;
}

uint64_t _s13FitnessAwards14AwardToastKindO24MaintainStreakCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD8147C + 4 * byte_23BDD1CDA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD8149C + 4 * byte_23BDD1CDF[v4]))();
}

_BYTE *sub_23BD8147C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD8149C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD814A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD814AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD814B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD814BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastKind.NextEarnableCodingKeys()
{
  return &type metadata for AwardToastKind.NextEarnableCodingKeys;
}

unint64_t sub_23BD814DC()
{
  unint64_t result;

  result = qword_256AADF08;
  if (!qword_256AADF08)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1EE8, &type metadata for AwardToastKind.NextEarnableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF08);
  }
  return result;
}

unint64_t sub_23BD81524()
{
  unint64_t result;

  result = qword_256AADF10;
  if (!qword_256AADF10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1FA0, &type metadata for AwardToastKind.CoalesedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF10);
  }
  return result;
}

unint64_t sub_23BD8156C()
{
  unint64_t result;

  result = qword_256AADF18;
  if (!qword_256AADF18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2058, &type metadata for AwardToastKind.MaintainStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF18);
  }
  return result;
}

unint64_t sub_23BD815B4()
{
  unint64_t result;

  result = qword_256AADF20;
  if (!qword_256AADF20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2160, &type metadata for AwardToastKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF20);
  }
  return result;
}

unint64_t sub_23BD815FC()
{
  unint64_t result;

  result = qword_256AADF28;
  if (!qword_256AADF28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2080, &type metadata for AwardToastKind.StartStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF28);
  }
  return result;
}

unint64_t sub_23BD81644()
{
  unint64_t result;

  result = qword_256AADF30;
  if (!qword_256AADF30)
  {
    result = MEMORY[0x242611F78](&unk_23BDD20A8, &type metadata for AwardToastKind.StartStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF30);
  }
  return result;
}

unint64_t sub_23BD8168C()
{
  unint64_t result;

  result = qword_256AADF38;
  if (!qword_256AADF38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1FC8, &type metadata for AwardToastKind.MaintainStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF38);
  }
  return result;
}

unint64_t sub_23BD816D4()
{
  unint64_t result;

  result = qword_256AADF40;
  if (!qword_256AADF40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1FF0, &type metadata for AwardToastKind.MaintainStreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF40);
  }
  return result;
}

unint64_t sub_23BD8171C()
{
  unint64_t result;

  result = qword_256AADF48;
  if (!qword_256AADF48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1F10, &type metadata for AwardToastKind.CoalesedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF48);
  }
  return result;
}

unint64_t sub_23BD81764()
{
  unint64_t result;

  result = qword_256AADF50;
  if (!qword_256AADF50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1F38, &type metadata for AwardToastKind.CoalesedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF50);
  }
  return result;
}

unint64_t sub_23BD817AC()
{
  unint64_t result;

  result = qword_256AADF58;
  if (!qword_256AADF58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1E58, &type metadata for AwardToastKind.NextEarnableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF58);
  }
  return result;
}

unint64_t sub_23BD817F4()
{
  unint64_t result;

  result = qword_256AADF60;
  if (!qword_256AADF60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD1E80, &type metadata for AwardToastKind.NextEarnableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF60);
  }
  return result;
}

unint64_t sub_23BD8183C()
{
  unint64_t result;

  result = qword_256AADF68;
  if (!qword_256AADF68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD20D0, &type metadata for AwardToastKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF68);
  }
  return result;
}

unint64_t sub_23BD81884()
{
  unint64_t result;

  result = qword_256AADF70;
  if (!qword_256AADF70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD20F8, &type metadata for AwardToastKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF70);
  }
  return result;
}

uint64_t sub_23BD818C8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7274537472617473 && a2 == 0xEB000000006B6165;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6961746E69616DLL && a2 == 0xEE006B6165727453 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646573656C616F63 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E7261457478656ELL && a2 == 0xEC000000656C6261)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BD81AA0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x654C6B6165727473 && a2 == 0xEC0000006874676ELL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD81B34()
{
  return 0x654C6B6165727473;
}

uint64_t sub_23BD81B54(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23BD81BDC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6B6165727473;
  else
    return 1818324839;
}

uint64_t sub_23BD81C08(char a1)
{
  if (!a1)
    return 0xD000000000000012;
  if (a1 == 1)
    return 0x73736572676F7270;
  return 1818324839;
}

uint64_t sub_23BD81C5C(char a1)
{
  return *(_QWORD *)&aStreakleextend[8 * a1];
}

uint64_t sub_23BD81C7C()
{
  char *v0;

  return sub_23BD81BDC(*v0);
}

uint64_t sub_23BD81C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD825A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD81CA8()
{
  sub_23BD824D4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD81CD0()
{
  sub_23BD824D4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD81CF8()
{
  char *v0;

  return sub_23BD81C08(*v0);
}

uint64_t sub_23BD81D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD82670(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD81D24()
{
  sub_23BD8255C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD81D4C()
{
  sub_23BD8255C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD81D74()
{
  char *v0;

  return sub_23BD81C5C(*v0);
}

uint64_t sub_23BD81D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD827A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD81DA0()
{
  sub_23BD82518();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD81DC8()
{
  sub_23BD82518();
  return sub_23BDCE0E4();
}

uint64_t AwardProgress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  char v25;
  char v26;

  v2 = v1;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADF78);
  v4 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v19 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADF80);
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADF88);
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD824D4();
  sub_23BDCE0CC();
  sub_23BD6B22C(v2, (uint64_t)v24);
  if ((v25 & 1) != 0)
  {
    v12 = v24[2];
    v26 = 1;
    sub_23BD82518();
    v13 = v19;
    sub_23BDCDFAC();
    v26 = 0;
    v14 = v21;
    v15 = v23;
    sub_23BDCE000();
    if (!v15)
    {
      v23 = v12;
      v26 = 1;
      sub_23BDCDFE8();
      v26 = 2;
      sub_23BDCE000();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v14);
  }
  else
  {
    v26 = 0;
    sub_23BD8255C();
    sub_23BDCDFAC();
    v26 = 0;
    v16 = v20;
    v17 = v23;
    sub_23BDCDFDC();
    if (!v17)
    {
      v26 = 1;
      sub_23BDCDFF4();
      v26 = 2;
      sub_23BDCDFF4();
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v9);
}

uint64_t AwardProgress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5[5];

  result = sub_23BD8291C(a1, v5);
  if (!v2)
    return sub_23BD6B22C((uint64_t)v5, a2);
  return result;
}

uint64_t sub_23BD8212C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5[5];

  result = sub_23BD8291C(a1, v5);
  if (!v2)
    return sub_23BD6B22C((uint64_t)v5, a2);
  return result;
}

uint64_t sub_23BD82170(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_23BD6B22C(v1, (uint64_t)v4);
  return AwardProgress.encode(to:)(a1);
}

uint64_t AwardProgress.hash(into:)()
{
  uint64_t v0;
  uint64_t v2;
  char v3;

  sub_23BD6B22C(v0, (uint64_t)&v2);
  if ((v3 & 1) != 0)
  {
    sub_23BDCE090();
    sub_23BDCE090();
    sub_23BDCE09C();
    return sub_23BDCE090();
  }
  else
  {
    sub_23BDCE090();
    sub_23BDCDD90();
    sub_23BDCE0A8();
    return sub_23BDCE0A8();
  }
}

uint64_t AwardProgress.hashValue.getter()
{
  sub_23BDCE084();
  AwardProgress.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD822AC()
{
  uint64_t v0;
  _BYTE v2[40];

  sub_23BD6B22C(v0, (uint64_t)v2);
  sub_23BDCE084();
  AwardProgress.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD822F8()
{
  uint64_t v0;
  _BYTE v2[40];

  sub_23BD6B22C(v0, (uint64_t)v2);
  return AwardProgress.hash(into:)();
}

uint64_t sub_23BD82334()
{
  uint64_t v0;
  _BYTE v2[40];

  sub_23BD6B22C(v0, (uint64_t)v2);
  sub_23BDCE084();
  AwardProgress.hash(into:)();
  return sub_23BDCE0B4();
}

BOOL sub_23BD82384(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];
  _BYTE v5[40];

  sub_23BD6B22C(a1, (uint64_t)v4);
  sub_23BD6B22C(a2, (uint64_t)v5);
  return _s13FitnessAwards13AwardProgressO2eeoiySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)v5);
}

BOOL _s13FitnessAwards13AwardProgressO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  double v5;
  _BOOL8 result;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  char v24;

  sub_23BD6B22C(a1, (uint64_t)&v20);
  v3 = v20;
  if ((v24 & 1) == 0)
  {
    v8 = v21;
    v10 = v22;
    v9 = v23;
    sub_23BD6B22C(a2, (uint64_t)&v15);
    if ((v19 & 1) == 0)
    {
      v12 = v17;
      v11 = v18;
      if (v3 == v15 && v8 == v16)
      {
        if (v10 != v17)
          return 0;
      }
      else
      {
        v14 = sub_23BDCE024();
        result = 0;
        if ((v14 & 1) == 0 || v10 != v12)
          return result;
      }
      return v9 == v11;
    }
    return 0;
  }
  v4 = v21;
  v5 = v22;
  sub_23BD6B22C(a2, (uint64_t)&v15);
  if (v19 != 1)
    return 0;
  result = 0;
  if (v3 == v15 && ((v4 ^ v16) & 1) == 0)
    return *(_QWORD *)&v5 == *(_QWORD *)&v17;
  return result;
}

unint64_t sub_23BD824D4()
{
  unint64_t result;

  result = qword_256AADF90;
  if (!qword_256AADF90)
  {
    result = MEMORY[0x242611F78](&unk_23BDD274C, &type metadata for AwardProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF90);
  }
  return result;
}

unint64_t sub_23BD82518()
{
  unint64_t result;

  result = qword_256AADF98;
  if (!qword_256AADF98)
  {
    result = MEMORY[0x242611F78](&unk_23BDD26FC, &type metadata for AwardProgress.StreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADF98);
  }
  return result;
}

unint64_t sub_23BD8255C()
{
  unint64_t result;

  result = qword_256AADFA0;
  if (!qword_256AADFA0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD26AC, &type metadata for AwardProgress.GoalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFA0);
  }
  return result;
}

uint64_t sub_23BD825A0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1818324839 && a2 == 0xE400000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B6165727473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD82670(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1818324839 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD827A8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x654C6B6165727473 && a2 == 0xEC0000006874676ELL;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6261646E65747865 && a2 == 0xEA0000000000656CLL || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x53747365676E6F6CLL && a2 == 0xED00006B61657274)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BD8291C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t result;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _QWORD *v47;
  _BYTE *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;

  v43 = a2;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADFF8);
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v45 = &v39[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE000);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE008);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v39[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BD824D4();
  v13 = v48;
  sub_23BDCE0C0();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  v41 = v5;
  v42 = v9;
  v15 = v45;
  v14 = v46;
  v48 = v11;
  v16 = sub_23BDCDFA0();
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v20 = sub_23BDCDEC8();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v22 = &type metadata for AwardProgress;
    v23 = v48;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v23, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
  v40 = *(unsigned __int8 *)(v16 + 32);
  if ((v40 & 1) != 0)
  {
    v56 = 1;
    sub_23BD82518();
    v17 = v48;
    sub_23BDCDF28();
    v55 = 0;
    v18 = v14;
    v19 = sub_23BDCDF88();
    v54 = 1;
    v29 = sub_23BDCDF70();
    v53 = 2;
    v30 = sub_23BDCDF88();
    (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v15, v18);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v17, v8);
    v31 = (uint64_t)v47;
    v32 = v29 & 1;
    v33 = 0;
  }
  else
  {
    v52 = 0;
    sub_23BD8255C();
    v25 = v48;
    sub_23BDCDF28();
    v51 = 0;
    v26 = v7;
    v27 = v4;
    v19 = sub_23BDCDF64();
    v32 = v28;
    v50 = 1;
    sub_23BDCDF7C();
    v35 = v34;
    v49 = 2;
    sub_23BDCDF7C();
    v36 = v42;
    v33 = v37;
    (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v26, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v25, v8);
    v30 = v35;
    v31 = (uint64_t)v47;
  }
  result = __swift_destroy_boxed_opaque_existential_1(v31);
  v38 = v43;
  *v43 = v19;
  v38[1] = v32;
  v38[2] = v30;
  v38[3] = v33;
  *((_BYTE *)v38 + 32) = v40;
  return result;
}

unint64_t sub_23BD82E10()
{
  unint64_t result;

  result = qword_256AADFA8;
  if (!qword_256AADFA8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgress, &type metadata for AwardProgress);
    atomic_store(result, (unint64_t *)&qword_256AADFA8);
  }
  return result;
}

uint64_t destroy for AwardProgress(uint64_t a1)
{
  return sub_23BD5F110(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AwardProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23BD6B728(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AwardProgress(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_23BD6B728(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_23BD5F110(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AwardProgress(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_23BD5F110(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgress(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_23BD83010(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_23BD83018(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgress()
{
  return &type metadata for AwardProgress;
}

uint64_t storeEnumTagSinglePayload for AwardProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD83080 + 4 * byte_23BDD2365[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD830B4 + 4 * byte_23BDD2360[v4]))();
}

uint64_t sub_23BD830B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD830BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD830C4);
  return result;
}

uint64_t sub_23BD830D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD830D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD830DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD830E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgress.CodingKeys()
{
  return &type metadata for AwardProgress.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgress.GoalCodingKeys()
{
  return &type metadata for AwardProgress.GoalCodingKeys;
}

uint64_t _s13FitnessAwards13AwardProgressO14GoalCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD83160 + 4 * byte_23BDD236F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD83194 + 4 * byte_23BDD236A[v4]))();
}

uint64_t sub_23BD83194(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD8319C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD831A4);
  return result;
}

uint64_t sub_23BD831B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD831B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD831BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD831C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgress.StreakCodingKeys()
{
  return &type metadata for AwardProgress.StreakCodingKeys;
}

unint64_t sub_23BD831E4()
{
  unint64_t result;

  result = qword_256AADFB0;
  if (!qword_256AADFB0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2514, &type metadata for AwardProgress.StreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFB0);
  }
  return result;
}

unint64_t sub_23BD8322C()
{
  unint64_t result;

  result = qword_256AADFB8;
  if (!qword_256AADFB8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD25CC, &type metadata for AwardProgress.GoalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFB8);
  }
  return result;
}

unint64_t sub_23BD83274()
{
  unint64_t result;

  result = qword_256AADFC0;
  if (!qword_256AADFC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2684, &type metadata for AwardProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFC0);
  }
  return result;
}

unint64_t sub_23BD832BC()
{
  unint64_t result;

  result = qword_256AADFC8;
  if (!qword_256AADFC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD253C, &type metadata for AwardProgress.GoalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFC8);
  }
  return result;
}

unint64_t sub_23BD83304()
{
  unint64_t result;

  result = qword_256AADFD0;
  if (!qword_256AADFD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2564, &type metadata for AwardProgress.GoalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFD0);
  }
  return result;
}

unint64_t sub_23BD8334C()
{
  unint64_t result;

  result = qword_256AADFD8;
  if (!qword_256AADFD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2484, &type metadata for AwardProgress.StreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFD8);
  }
  return result;
}

unint64_t sub_23BD83394()
{
  unint64_t result;

  result = qword_256AADFE0;
  if (!qword_256AADFE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD24AC, &type metadata for AwardProgress.StreakCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFE0);
  }
  return result;
}

unint64_t sub_23BD833DC()
{
  unint64_t result;

  result = qword_256AADFE8;
  if (!qword_256AADFE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD25F4, &type metadata for AwardProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFE8);
  }
  return result;
}

unint64_t sub_23BD83424()
{
  unint64_t result;

  result = qword_256AADFF0;
  if (!qword_256AADFF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD261C, &type metadata for AwardProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AADFF0);
  }
  return result;
}

BOOL static AwardEarnedState.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BD83480(char a1)
{
  if ((a1 & 1) != 0)
    return 0x64656E7261656E75;
  else
    return 0x64656E726165;
}

uint64_t sub_23BD834B4()
{
  char *v0;

  return sub_23BD83480(*v0);
}

uint64_t sub_23BD834BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD83930(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD834E0()
{
  sub_23BD837A0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD83508()
{
  sub_23BD837A0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD83530()
{
  sub_23BD83828();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD83558()
{
  sub_23BD83828();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD83580()
{
  sub_23BD837E4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD835A8()
{
  sub_23BD837E4();
  return sub_23BDCE0E4();
}

uint64_t AwardEarnedState.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE010);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE018);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE020);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD837A0();
  sub_23BDCE0CC();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_23BD837E4();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_23BD83828();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_23BD837A0()
{
  unint64_t result;

  result = qword_256AAE028;
  if (!qword_256AAE028)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2AEC, &type metadata for AwardEarnedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE028);
  }
  return result;
}

unint64_t sub_23BD837E4()
{
  unint64_t result;

  result = qword_256AAE030;
  if (!qword_256AAE030)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2A9C, &type metadata for AwardEarnedState.UnearnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE030);
  }
  return result;
}

unint64_t sub_23BD83828()
{
  unint64_t result;

  result = qword_256AAE038;
  if (!qword_256AAE038)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2A4C, &type metadata for AwardEarnedState.EarnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE038);
  }
  return result;
}

uint64_t AwardEarnedState.init(from:)(_QWORD *a1)
{
  return sub_23BD83A10(a1) & 1;
}

uint64_t sub_23BD83884@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BD83A10(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_23BD838B0(_QWORD *a1)
{
  unsigned __int8 *v1;

  return AwardEarnedState.encode(to:)(a1, *v1);
}

uint64_t AwardEarnedState.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t AwardEarnedState.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD83930(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x64656E726165 && a2 == 0xE600000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656E7261656E75 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD83A10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE080);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE088);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE090);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD837A0();
  v10 = v26;
  sub_23BDCE0C0();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_23BDCDFA0();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_23BDCDEC8();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v19 = &type metadata for AwardEarnedState;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_23BD837E4();
    sub_23BDCDF28();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_23BD83828();
    sub_23BDCDF28();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t sub_23BD83D40()
{
  unint64_t result;

  result = qword_256AAE040;
  if (!qword_256AAE040)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardEarnedState, &type metadata for AwardEarnedState);
    atomic_store(result, (unint64_t *)&qword_256AAE040);
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardEarnedState()
{
  return &type metadata for AwardEarnedState;
}

uint64_t _s13FitnessAwards16AwardEarnedStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD83DE4 + 4 * byte_23BDD27D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD83E18 + 4 * byte_23BDD27D0[v4]))();
}

uint64_t sub_23BD83E18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD83E20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD83E28);
  return result;
}

uint64_t sub_23BD83E34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD83E3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD83E40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD83E48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardEarnedState.CodingKeys()
{
  return &type metadata for AwardEarnedState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardEarnedState.EarnedCodingKeys()
{
  return &type metadata for AwardEarnedState.EarnedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardEarnedState.UnearnedCodingKeys()
{
  return &type metadata for AwardEarnedState.UnearnedCodingKeys;
}

unint64_t sub_23BD83E88()
{
  unint64_t result;

  result = qword_256AAE048;
  if (!qword_256AAE048)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2A24, &type metadata for AwardEarnedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE048);
  }
  return result;
}

unint64_t sub_23BD83ED0()
{
  unint64_t result;

  result = qword_256AAE050;
  if (!qword_256AAE050)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2944, &type metadata for AwardEarnedState.EarnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE050);
  }
  return result;
}

unint64_t sub_23BD83F18()
{
  unint64_t result;

  result = qword_256AAE058;
  if (!qword_256AAE058)
  {
    result = MEMORY[0x242611F78](&unk_23BDD296C, &type metadata for AwardEarnedState.EarnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE058);
  }
  return result;
}

unint64_t sub_23BD83F60()
{
  unint64_t result;

  result = qword_256AAE060;
  if (!qword_256AAE060)
  {
    result = MEMORY[0x242611F78](&unk_23BDD28F4, &type metadata for AwardEarnedState.UnearnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE060);
  }
  return result;
}

unint64_t sub_23BD83FA8()
{
  unint64_t result;

  result = qword_256AAE068;
  if (!qword_256AAE068)
  {
    result = MEMORY[0x242611F78](&unk_23BDD291C, &type metadata for AwardEarnedState.UnearnedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE068);
  }
  return result;
}

unint64_t sub_23BD83FF0()
{
  unint64_t result;

  result = qword_256AAE070;
  if (!qword_256AAE070)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2994, &type metadata for AwardEarnedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE070);
  }
  return result;
}

unint64_t sub_23BD84038()
{
  unint64_t result;

  result = qword_256AAE078;
  if (!qword_256AAE078)
  {
    result = MEMORY[0x242611F78](&unk_23BDD29BC, &type metadata for AwardEarnedState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE078);
  }
  return result;
}

uint64_t sub_23BD84080(uint64_t a1)
{
  return sub_23BD87060(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

__n128 AwardDetailFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v5;

  type metadata accessor for AwardDetailFeature();
  sub_23BDCD580();
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

uint64_t type metadata accessor for AwardDetailFeature()
{
  uint64_t result;

  result = qword_256AAE150;
  if (!qword_256AAE150)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardDetailFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t *a2, unint64_t *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int EnumCaseMultiPayload;
  int *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t result;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  char *v147;
  uint64_t v148;
  unint64_t *v149;
  NSObject *v150;
  os_log_type_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t State;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v182;

  v175 = a3;
  v178 = a2;
  v5 = sub_23BDCD58C();
  v170 = *(_QWORD *)(v5 - 8);
  v171 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for AwardDetailFeature();
  v172 = *(_QWORD *)(v169 - 8);
  v8 = *(_QWORD *)(v172 + 64);
  v9 = MEMORY[0x24BDAC7A8](v169);
  v10 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v168 = (uint64_t)&v165 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD768);
  v173 = *(_QWORD *)(v12 - 8);
  v174 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v167 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v165 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v166 = (char *)&v165 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v165 - v20;
  State = type metadata accessor for AwardEarnedLoadState();
  v22 = MEMORY[0x24BDAC7A8](State);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v165 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v165 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v165 - v33;
  v35 = MEMORY[0x24BDAC7A8](v32);
  MEMORY[0x24BDAC7A8](v35);
  v37 = MEMORY[0x24BDAC7A8]((char *)&v165 - v36);
  v39 = (char *)&v165 - v38;
  v40 = (unint64_t *)MEMORY[0x24BDAC7A8](v37);
  v47 = *a4;
  switch(*a4)
  {
    case 2:
      v48 = v42;
      v172 = v44;
      v49 = v178;
      v51 = *v178;
      v50 = v178[1];
      v52 = v46;
      v53 = (uint64_t)v49 + *(int *)(type metadata accessor for AwardDetailState() + 28);
      sub_23BD594E4(v53, v52, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      v54 = v52;
      sub_23BD594E4(v52, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      swift_bridgeObjectRetain();
      sub_23BD7BC00((uint64_t)v30);
      if (EnumCaseMultiPayload == 2)
      {
        sub_23BD7BC00(v53);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v53, v176 + *(int *)(v169 + 20), v171);
        swift_storeEnumTagMultiPayload();
        v56 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
        v57 = v166;
        v58 = &v166[v56[16]];
        v59 = &v166[v56[20]];
        v60 = &v166[v56[24]];
        v179 = v51;
        v180 = v50;
        v181 = 0;
        sub_23BD865B0();
        swift_bridgeObjectRetain();
        sub_23BDCDE80();
        sub_23BDCDDFC();
        v61 = swift_allocObject();
        *(_QWORD *)(v61 + 16) = v51;
        *(_QWORD *)(v61 + 24) = v50;
        *(_QWORD *)v60 = &unk_256AAE0C8;
        *((_QWORD *)v60 + 1) = v61;
        v62 = *MEMORY[0x24BE2B578];
        v63 = sub_23BDCDCC4();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v58, v62, v63);
        v64 = *MEMORY[0x24BE2B558];
        v65 = sub_23BDCDCB8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 104))(v59, v64, v65);
        goto LABEL_23;
      }
      if (qword_256AACE00 != -1)
        swift_once();
      v138 = sub_23BDCD628();
      __swift_project_value_buffer(v138, (uint64_t)qword_256AAF4B0);
      v139 = v52;
      sub_23BD594E4(v52, v48, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      swift_bridgeObjectRetain();
      v140 = sub_23BDCD610();
      v141 = sub_23BDCDE38();
      if (os_log_type_enabled(v140, v141))
      {
        v142 = swift_slowAlloc();
        v143 = swift_slowAlloc();
        v179 = v143;
        *(_DWORD *)v142 = 136315394;
        swift_bridgeObjectRetain();
        v182 = sub_23BD6E4F0(v51, v50, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v142 + 12) = 2080;
        sub_23BD594E4(v48, v172, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
        v144 = sub_23BDCDD78();
        v182 = sub_23BD6E4F0(v144, v145, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        sub_23BD7BC00(v48);
        _os_log_impl(&dword_23BD56000, v140, v141, "[AwardDetailFeature] Notified of earned load state being cleared for %s but load state was %s, returning", (uint8_t *)v142, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611FFC](v143, -1, -1);
        MEMORY[0x242611FFC](v142, -1, -1);

        v78 = v139;
      }
      else
      {

        sub_23BD7BC00(v48);
        swift_bridgeObjectRelease_n();
        v78 = v54;
      }
      return sub_23BD7BC00(v78);
    case 3:
      v77 = (uint64_t)v178 + *(int *)(type metadata accessor for AwardDetailState() + 28);
      sub_23BD594E4(v77, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      if (swift_getEnumCaseMultiPayload())
      {
        v78 = (uint64_t)v34;
        return sub_23BD7BC00(v78);
      }
      v163 = v170;
      v162 = v171;
      (*(void (**)(char *, char *, uint64_t))(v170 + 32))(v7, v34, v171);
      v164 = sub_23BDCD574();
      result = (*(uint64_t (**)(char *, uint64_t))(v163 + 8))(v7, v162);
      if ((v164 & 1) != 0)
      {
        sub_23BD7BC00(v77);
        return swift_storeEnumTagMultiPayload();
      }
      return result;
    case 4:
      v80 = *v178;
      v79 = v178[1];
      v81 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
      v82 = &v21[v81[16]];
      v83 = &v21[v81[20]];
      v84 = &v21[v81[24]];
      v179 = v80;
      v180 = v79;
      v181 = 1;
      sub_23BD865B0();
      swift_bridgeObjectRetain_n();
      sub_23BDCDE80();
      sub_23BDCDDFC();
      v85 = *MEMORY[0x24BE2B580];
      v86 = sub_23BDCDCC4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 104))(v82, v85, v86);
      v87 = *MEMORY[0x24BE2B550];
      v88 = sub_23BDCDCB8();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 104))(v83, v87, v88);
      v89 = v168;
      sub_23BD594E4(v176, v168, (uint64_t (*)(_QWORD))type metadata accessor for AwardDetailFeature);
      v90 = (*(unsigned __int8 *)(v172 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
      v91 = swift_allocObject();
      sub_23BD86714(v89, v91 + v90);
      v92 = (uint64_t *)(v91 + ((v8 + v90 + 7) & 0xFFFFFFFFFFFFFFF8));
      *v92 = v80;
      v92[1] = v79;
      *(_QWORD *)v84 = &unk_256AAE0D8;
      *((_QWORD *)v84 + 1) = v91;
      v94 = v173;
      v93 = v174;
      (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v21, *MEMORY[0x24BE2B438], v174);
      v95 = v175;
      v96 = *v175;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v96 = sub_23BD6E358(0, *(_QWORD *)(v96 + 16) + 1, 1, v96);
      v98 = *(_QWORD *)(v96 + 16);
      v97 = *(_QWORD *)(v96 + 24);
      if (v98 >= v97 >> 1)
        v96 = sub_23BD6E358(v97 > 1, v98 + 1, 1, v96);
      *(_QWORD *)(v96 + 16) = v98 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v94 + 32))(v96+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(_QWORD *)(v94 + 72) * v98, v21, v93);
      goto LABEL_20;
    case 5:
      v101 = *v178;
      v100 = v178[1];
      v102 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
      v103 = &v17[v102[16]];
      v104 = &v17[v102[20]];
      v105 = &v17[v102[24]];
      v179 = v101;
      v180 = v100;
      v181 = 2;
      sub_23BD865B0();
      swift_bridgeObjectRetain_n();
      sub_23BDCDE80();
      sub_23BDCDDFC();
      v106 = *MEMORY[0x24BE2B580];
      v107 = sub_23BDCDCC4();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 104))(v103, v106, v107);
      sub_23BD594E4(v176, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardDetailFeature);
      v108 = (*(unsigned __int8 *)(v172 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v172 + 80);
      v109 = swift_allocObject();
      *(_QWORD *)(v109 + 16) = v101;
      *(_QWORD *)(v109 + 24) = v100;
      sub_23BD86714((uint64_t)v10, v109 + v108);
      *(_QWORD *)v105 = &unk_256AAE0B8;
      *((_QWORD *)v105 + 1) = v109;
      v110 = *MEMORY[0x24BE2B558];
      v111 = sub_23BDCDCB8();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 104))(v104, v110, v111);
      v113 = v173;
      v112 = v174;
      (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v17, *MEMORY[0x24BE2B438], v174);
      v95 = v175;
      v96 = *v175;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v96 = sub_23BD6E358(0, *(_QWORD *)(v96 + 16) + 1, 1, v96);
      v115 = *(_QWORD *)(v96 + 16);
      v114 = *(_QWORD *)(v96 + 24);
      if (v115 >= v114 >> 1)
        v96 = sub_23BD6E358(v114 > 1, v115 + 1, 1, v96);
      *(_QWORD *)(v96 + 16) = v115 + 1;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v113 + 32))(v96+ ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80))+ *(_QWORD *)(v113 + 72) * v115, v17, v112);
LABEL_20:
      *v95 = v96;
      return result;
    case 6:
      v116 = v41;
      v172 = v44;
      v117 = v178;
      v119 = *v178;
      v118 = v178[1];
      v120 = v45;
      v121 = (uint64_t)v117 + *(int *)(type metadata accessor for AwardDetailState() + 28);
      sub_23BD594E4(v121, v120, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      v54 = v120;
      sub_23BD594E4(v120, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      v122 = swift_getEnumCaseMultiPayload();
      swift_bridgeObjectRetain();
      sub_23BD7BC00((uint64_t)v25);
      if (v122 == 2)
      {
        sub_23BD7BC00(v121);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v121, v176 + *(int *)(v169 + 20), v171);
        swift_storeEnumTagMultiPayload();
        v123 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
        v57 = v167;
        v124 = &v167[v123[16]];
        v125 = &v167[v123[20]];
        v126 = &v167[v123[24]];
        v179 = v119;
        v180 = v118;
        v181 = 3;
        sub_23BD865B0();
        swift_bridgeObjectRetain();
        sub_23BDCDE80();
        sub_23BDCDDFC();
        v127 = swift_allocObject();
        *(_QWORD *)(v127 + 16) = v119;
        *(_QWORD *)(v127 + 24) = v118;
        *(_QWORD *)v126 = &unk_256AAE0A8;
        *((_QWORD *)v126 + 1) = v127;
        v128 = *MEMORY[0x24BE2B578];
        v129 = sub_23BDCDCC4();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 104))(v124, v128, v129);
        v130 = *MEMORY[0x24BE2B558];
        v131 = sub_23BDCDCB8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 104))(v125, v130, v131);
LABEL_23:
        v133 = v173;
        v132 = v174;
        (*(void (**)(char *, _QWORD, uint64_t))(v173 + 104))(v57, *MEMORY[0x24BE2B438], v174);
        v134 = v175;
        v135 = *v175;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v135 = sub_23BD6E358(0, *(_QWORD *)(v135 + 16) + 1, 1, v135);
        v137 = *(_QWORD *)(v135 + 16);
        v136 = *(_QWORD *)(v135 + 24);
        if (v137 >= v136 >> 1)
          v135 = sub_23BD6E358(v136 > 1, v137 + 1, 1, v135);
        *(_QWORD *)(v135 + 16) = v137 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v133 + 32))(v135+ ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))+ *(_QWORD *)(v133 + 72) * v137, v57, v132);
        *v134 = v135;
        v78 = v54;
        return sub_23BD7BC00(v78);
      }
      if (qword_256AACE00 != -1)
        swift_once();
      v157 = sub_23BDCD628();
      __swift_project_value_buffer(v157, (uint64_t)qword_256AAF4B0);
      v147 = (char *)v120;
      sub_23BD594E4(v120, v116, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      swift_bridgeObjectRetain();
      v150 = sub_23BDCD610();
      v158 = sub_23BDCDE38();
      if (os_log_type_enabled(v150, v158))
      {
        v152 = swift_slowAlloc();
        v159 = swift_slowAlloc();
        v179 = v159;
        *(_DWORD *)v152 = 136315394;
        swift_bridgeObjectRetain();
        v182 = sub_23BD6E4F0(v119, v118, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v152 + 12) = 2080;
        sub_23BD594E4(v116, v172, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
        v160 = sub_23BDCDD78();
        v182 = sub_23BD6E4F0(v160, v161, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        sub_23BD7BC00(v116);
        _os_log_impl(&dword_23BD56000, v150, v158, "[AwardDetailFeature] View appeared for %s but load state was %s, returning.", (uint8_t *)v152, 0x16u);
        swift_arrayDestroy();
        v156 = v159;
        goto LABEL_40;
      }

      sub_23BD7BC00(v116);
      swift_bridgeObjectRelease_n();
      goto LABEL_47;
    default:
      v175 = v40;
      v66 = (char *)&v165 - v43;
      v172 = v44;
      LODWORD(v176) = v47 & 1;
      v68 = *v178;
      v67 = v178[1];
      v69 = qword_256AACE00;
      swift_bridgeObjectRetain();
      if (v69 != -1)
        swift_once();
      v70 = sub_23BDCD628();
      __swift_project_value_buffer(v70, (uint64_t)qword_256AAF4B0);
      swift_bridgeObjectRetain();
      v71 = sub_23BDCD610();
      v72 = sub_23BDCDE38();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = swift_slowAlloc();
        v74 = swift_slowAlloc();
        v179 = v74;
        *(_DWORD *)v73 = 136315394;
        swift_bridgeObjectRetain();
        v182 = sub_23BD6E4F0(v68, v67, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v73 + 12) = 2080;
        LOBYTE(v182) = v176;
        v75 = sub_23BDCDD78();
        v182 = sub_23BD6E4F0(v75, v76, &v179);
        sub_23BDCDE5C();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23BD56000, v71, v72, "[AwardDetailFeature] (%s) Earned state fetched: %s", (uint8_t *)v73, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242611FFC](v74, -1, -1);
        MEMORY[0x242611FFC](v73, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v146 = (char *)v178 + *(int *)(type metadata accessor for AwardDetailState() + 28);
      v147 = v66;
      sub_23BD594E4((uint64_t)v146, (uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      sub_23BD594E4((uint64_t)v66, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      if (swift_getEnumCaseMultiPayload())
      {
        sub_23BD7BC00((uint64_t)v39);
        v148 = (uint64_t)v66;
        v149 = v175;
        sub_23BD594E4(v148, (uint64_t)v175, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
        v150 = sub_23BDCD610();
        v151 = sub_23BDCDE38();
        if (os_log_type_enabled(v150, v151))
        {
          v152 = swift_slowAlloc();
          v153 = swift_slowAlloc();
          v179 = v153;
          *(_DWORD *)v152 = 136315138;
          sub_23BD594E4((uint64_t)v149, v172, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
          v154 = sub_23BDCDD78();
          v182 = sub_23BD6E4F0(v154, v155, &v179);
          sub_23BDCDE5C();
          swift_bridgeObjectRelease();
          sub_23BD7BC00((uint64_t)v149);
          _os_log_impl(&dword_23BD56000, v150, v151, "[AwardDetailFeature] Current state is %s, skipping .fetched update", (uint8_t *)v152, 0xCu);
          swift_arrayDestroy();
          v156 = v153;
LABEL_40:
          MEMORY[0x242611FFC](v156, -1, -1);
          MEMORY[0x242611FFC](v152, -1, -1);

        }
        else
        {

          sub_23BD7BC00((uint64_t)v149);
        }
LABEL_47:
        v78 = (uint64_t)v147;
        return sub_23BD7BC00(v78);
      }
      else
      {
        sub_23BD7BC00((uint64_t)v66);
        (*(void (**)(char *, uint64_t))(v170 + 8))(v39, v171);
        sub_23BD7BC00((uint64_t)v146);
        *v146 = v176;
        return swift_storeEnumTagMultiPayload();
      }
  }
}

uint64_t sub_23BD853B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  sub_23BDCDDF0();
  v4[14] = sub_23BDCDDE4();
  v4[15] = sub_23BDCDDCC();
  v4[16] = v5;
  return swift_task_switch();
}

uint64_t sub_23BD85420()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD))(***(int ***)(v0 + 88) + **(_QWORD **)(v0 + 88));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_23BD85480;
  return v3(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_23BD85480(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_BYTE *)(v3 + 171) = a1;
  *(_QWORD *)(v3 + 144) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD854EC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 96);
    v5 = *(_BYTE *)(v0 + 171) & 1;
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v13 = v7;
    *(_DWORD *)v6 = 136315394;
    *(_BYTE *)(v0 + 168) = v5;
    v8 = sub_23BDCDD78();
    *(_QWORD *)(v0 + 72) = sub_23BD6E4F0(v8, v9, &v13);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 64) = sub_23BD6E4F0(v12, v4, &v13);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardDetailFeature] Sending .earnedStateFetched(%s) action for %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v7, -1, -1);
    MEMORY[0x242611FFC](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(_BYTE *)(v0 + 169) = *(_BYTE *)(v0 + 171) & 1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE190);
  *v10 = v0;
  v10[1] = sub_23BD8573C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD8573C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD85788()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD857BC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD85808()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release();
  MEMORY[0x242611E7C](v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD85848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 104);
  if (v5)
  {
    v8 = *(_QWORD *)(v0 + 96);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_23BD6E4F0(v8, v7, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    v11 = sub_23BDCE048();
    *(_QWORD *)(v0 + 56) = sub_23BD6E4F0(v11, v12, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardDetailFeature] Failed to fetch earned state for %s with error %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v10, -1, -1);
    MEMORY[0x242611FFC](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
  }

  *(_BYTE *)(v0 + 170) = 3;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE190);
  *v13 = v0;
  v13[1] = sub_23BD857BC;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD85ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  sub_23BDCDDF0();
  v3[6] = sub_23BDCDDE4();
  v3[7] = sub_23BDCDDCC();
  v3[8] = v4;
  return swift_task_switch();
}

uint64_t sub_23BD85B4C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 40);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 32);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v5, &v11);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardDetailFeature] Sending .fetchEarnedState(%s) action for earnedLoadStateCleared", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(_BYTE *)(v0 + 80) = 4;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE190);
  *v9 = v0;
  v9[1] = sub_23BD85D44;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD85D44()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD85D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  sub_23BDCDDF0();
  v4[6] = sub_23BDCDDE4();
  v4[7] = sub_23BDCDDCC();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t sub_23BD85E00()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(void);
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[4];
  if (v4)
  {
    v6 = v0[3];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardDetailFeature] Refreshing suggested workouts canvas for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (*)(void))(**(int **)(v0[5] + 16) + *(_QWORD *)(v0[5] + 16));
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23BD85FE8;
  return v11();
}

uint64_t sub_23BD85FE8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD86048()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD8607C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD860B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  sub_23BDCDDF0();
  v3[6] = sub_23BDCDDE4();
  v3[7] = sub_23BDCDDCC();
  v3[8] = v4;
  return swift_task_switch();
}

uint64_t sub_23BD86120()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 40);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 32);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v5, &v11);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardDetailFeature] Sending .fetchEarnedState(%s) action on view appeared", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(_BYTE *)(v0 + 80) = 4;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE190);
  *v9 = v0;
  v9[1] = sub_23BD85D44;
  return sub_23BDCDCAC();
}

uint64_t AwardDetailFeature.dispose(localState:sharedState:)(uint64_t a1)
{
  uint64_t State;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23BDCD58C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + *(int *)(type metadata accessor for AwardDetailState() + 28);
  sub_23BD594E4(v9, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
  if (swift_getEnumCaseMultiPayload())
    return sub_23BD7BC00((uint64_t)v4);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  type metadata accessor for AwardDetailFeature();
  v11 = sub_23BDCD574();
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    sub_23BD7BC00(v9);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_23BD86460(uint64_t a1, uint64_t a2)
{
  uint64_t State;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  uint64_t v13;

  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD58C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2 + *(int *)(type metadata accessor for AwardDetailState() + 28);
  sub_23BD594E4(v10, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
  if (swift_getEnumCaseMultiPayload())
    return sub_23BD7BC00((uint64_t)v5);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  v12 = sub_23BDCD574();
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) != 0)
  {
    sub_23BD7BC00(v10);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

unint64_t sub_23BD865B0()
{
  unint64_t result;

  result = qword_256AAE098;
  if (!qword_256AAE098)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2C28, &type metadata for AwardDetailFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAE098);
  }
  return result;
}

uint64_t sub_23BD865F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD86618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6F814;
  return sub_23BD860B0(a1, v5, v4);
}

uint64_t sub_23BD86678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardDetailFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_23BD86714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardDetailFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD86758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardDetailFeature() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6EBF8;
  return sub_23BD85D90(a1, v5, v6, v7);
}

uint64_t sub_23BD867D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6F814;
  return sub_23BD85ADC(a1, v5, v4);
}

uint64_t sub_23BD86838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardDetailFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD868E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for AwardDetailFeature() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BD6F814;
  return sub_23BD853B0(a1, v6, v8, v9);
}

unint64_t sub_23BD8697C()
{
  unint64_t result;

  result = qword_256AAE0E0;
  if (!qword_256AAE0E0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailAction, &type metadata for AwardDetailAction);
    atomic_store(result, (unint64_t *)&qword_256AAE0E0);
  }
  return result;
}

unint64_t sub_23BD869C4()
{
  unint64_t result;

  result = qword_256AAE0E8;
  if (!qword_256AAE0E8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailAction, &type metadata for AwardDetailAction);
    atomic_store(result, (unint64_t *)&qword_256AAE0E8);
  }
  return result;
}

unint64_t sub_23BD86A0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAE0F0;
  if (!qword_256AAE0F0)
  {
    v1 = type metadata accessor for AwardDetailState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAE0F0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AwardDetailFeature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    v6 = a2[3];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_23BDCD58C();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for AwardDetailFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BDCD58C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AwardDetailFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23BDCD58C();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AwardDetailFeature(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_retain();
  swift_release();
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *initializeWithTake for AwardDetailFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_OWORD *assignWithTake for AwardDetailFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardDetailFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD86D6C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardDetailFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BD86DF4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BD86E68()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23BD86EE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AwardDetailFeature.TaskIdentifier(uint64_t a1)
{
  return sub_23BD86F08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_23BD86F08(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 3u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s13FitnessAwards18AwardDetailFeatureV14TaskIdentifierOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23BD86EE0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AwardDetailFeature.TaskIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23BD86EE0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD86F08(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AwardDetailFeature.TaskIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23BD86F08(v4, v5, v6);
  return a1;
}

uint64_t sub_23BD87000(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailFeature.TaskIdentifier()
{
  return &type metadata for AwardDetailFeature.TaskIdentifier;
}

unint64_t sub_23BD8701C()
{
  unint64_t result;

  result = qword_256AAE188;
  if (!qword_256AAE188)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2C00, &type metadata for AwardDetailFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAE188);
  }
  return result;
}

uint64_t sub_23BD87060(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_23BD8707C + 4 * byte_23BDD2B4A[a3]))();
}

uint64_t sub_23BD8707C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  return sub_23BDCE024();
}

uint64_t sub_23BD870E8()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD87144()
{
  sub_23BDCE090();
  return sub_23BDCDD90();
}

uint64_t sub_23BD87184()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD871DC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23BDCE024();
}

__n128 AchievementEnvironmentCacheMonitorFeature.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t AchievementEnvironmentCacheMonitorFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, unint64_t *a2, unint64_t *a3, _BYTE *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD758);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  v13 = MEMORY[0x24BDAC7A8](State);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v82 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v20 = (char *)&v82 - v19;
  if ((*a4 & 1) != 0)
  {
    v22 = *v4;
    v21 = v4[1];
    v23 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
    v24 = &v11[v23[16]];
    v25 = &v11[v23[20]];
    v26 = &v11[v23[24]];
    v88[0] = 0x726F74696E6F6DLL;
    v88[1] = 0xE700000000000000;
    sub_23BD881FC();
    sub_23BDCDE80();
    sub_23BDCDDFC();
    v27 = *MEMORY[0x24BE2B570];
    v28 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v24, v27, v28);
    v29 = *MEMORY[0x24BE2B550];
    v30 = sub_23BDCDCB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v25, v29, v30);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v22;
    *(_QWORD *)(v31 + 24) = v21;
    *(_QWORD *)v26 = &unk_256AAE1A8;
    *((_QWORD *)v26 + 1) = v31;
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE2B438], v8);
    v32 = *a3;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = sub_23BD6E36C(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
    v34 = *(_QWORD *)(v32 + 16);
    v33 = *(_QWORD *)(v32 + 24);
    if (v34 >= v33 >> 1)
      v32 = sub_23BD6E36C(v33 > 1, v34 + 1, 1, v32);
    *(_QWORD *)(v32 + 16) = v34 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(v32+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v34, v11, v8);
    *a3 = v32;
  }
  else
  {
    v82 = v18;
    v86 = v17;
    v36 = qword_256AACE00;
    swift_bridgeObjectRetain();
    if (v36 != -1)
      swift_once();
    v37 = sub_23BDCD628();
    v38 = __swift_project_value_buffer(v37, (uint64_t)qword_256AAF4B0);
    swift_bridgeObjectRetain();
    v39 = sub_23BDCD610();
    v40 = sub_23BDCDE38();
    v41 = os_log_type_enabled(v39, v40);
    v84 = v20;
    v85 = v38;
    v83 = v16;
    if (v41)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v88[0] = v43;
      *(_DWORD *)v42 = 136315138;
      type metadata accessor for AwardEarnedLoadState();
      swift_bridgeObjectRetain();
      v44 = sub_23BDCDCE8();
      v46 = v45;
      swift_bridgeObjectRelease();
      v87 = sub_23BD6E4F0(v44, v46, v88);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v39, v40, "[AchievementEnvironmentCacheMonitor] Clearing previous earned load states %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v43, -1, -1);
      MEMORY[0x242611FFC](v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v47 = sub_23BDCD610();
    v48 = sub_23BDCDE38();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v88[0] = v50;
      *(_DWORD *)v49 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD950);
      v51 = sub_23BDCDCE8();
      v53 = v52;
      swift_bridgeObjectRelease();
      v87 = sub_23BD6E4F0(v51, v53, v88);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v47, v48, "[AchievementEnvironmentCacheMonitor] Clearing previous image load states %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v50, -1, -1);
      MEMORY[0x242611FFC](v49, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v54 = sub_23BDCD610();
    v55 = sub_23BDCDE38();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v88[0] = v57;
      *(_DWORD *)v56 = 136315138;
      type metadata accessor for AwardProgressLoadState();
      swift_bridgeObjectRetain();
      v58 = sub_23BDCDCE8();
      v60 = v59;
      swift_bridgeObjectRelease();
      v87 = sub_23BD6E4F0(v58, v60, v88);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v54, v55, "[AchievementEnvironmentCacheMonitor] Clearing previous progress load states %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v57, -1, -1);
      MEMORY[0x242611FFC](v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain_n();
    v61 = sub_23BDCD610();
    v62 = sub_23BDCDE38();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc();
      v64 = swift_slowAlloc();
      v88[0] = v64;
      *(_DWORD *)v63 = 136315138;
      swift_bridgeObjectRetain();
      v65 = sub_23BDCDCE8();
      v67 = v66;
      swift_bridgeObjectRelease();
      v87 = sub_23BD6E4F0(v65, v67, v88);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v61, v62, "[AchievementEnvironmentCacheMonitor] Clearing previous suggested workout load states %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v64, -1, -1);
      MEMORY[0x242611FFC](v63, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v69 = (uint64_t)v83;
    v68 = (uint64_t)v84;
    v70 = (uint64_t)a2 + *(int *)(type metadata accessor for AchievementEnvironmentCacheMonitorState() + 32);
    sub_23BD764FC(v70, v68);
    sub_23BD764FC(v68, v69);
    v71 = sub_23BDCD610();
    v72 = sub_23BDCDE38();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v88[0] = v74;
      *(_DWORD *)v73 = 136315138;
      sub_23BD764FC(v69, v82);
      v75 = sub_23BDCDD78();
      v87 = sub_23BD6E4F0(v75, v76, v88);
      v68 = (uint64_t)v84;
      sub_23BDCDE5C();
      swift_bridgeObjectRelease();
      sub_23BD76540(v69);
      _os_log_impl(&dword_23BD56000, v71, v72, "[AchievementEnvironmentCacheMonitor] Clearing previous toast load state %s", v73, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v74, -1, -1);
      MEMORY[0x242611FFC](v73, -1, -1);
    }
    else
    {
      sub_23BD76540(v69);
    }

    v77 = MEMORY[0x24BEE4AF8];
    v78 = sub_23BD759D4(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRelease();
    *a2 = v78;
    v79 = sub_23BD759F0(v77);
    swift_bridgeObjectRelease();
    a2[1] = v79;
    v80 = sub_23BD75B08(v77);
    swift_bridgeObjectRelease();
    a2[2] = v80;
    v81 = sub_23BD75CBC(v77);
    sub_23BD76540(v68);
    swift_bridgeObjectRelease();
    a2[3] = v81;
    sub_23BD76540(v70);
    return swift_storeEnumTagMultiPayload();
  }
  return result;
}

uint64_t sub_23BD87C64(uint64_t a1, int *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v2[12] = a1;
  v2[13] = sub_23BDCDDF0();
  v2[14] = sub_23BDCDDE4();
  v6 = (uint64_t (*)(_QWORD *))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  v2[15] = v4;
  *v4 = v2;
  v4[1] = sub_23BD87CF4;
  return v6(v2 + 7);
}

uint64_t sub_23BD87CF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc();
  *(_QWORD *)(v2 + 136) = sub_23BDCDDCC();
  *(_QWORD *)(v2 + 144) = v3;
  return swift_task_switch();
}

uint64_t sub_23BD87D80()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[10];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[5] = swift_getAssociatedTypeWitness();
  v0[6] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  sub_23BDCDE14();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[19] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[20] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BD87EE0;
  return sub_23BDCDDD8();
}

uint64_t sub_23BD87EE0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BD87F34()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (*(_BYTE *)(v0 + 176) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v2 = sub_23BDCD628();
    __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
    v3 = sub_23BDCD610();
    v4 = sub_23BDCDE38();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = swift_slowAlloc();
      v10 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = sub_23BDCDD78();
      *(_QWORD *)(v5 + 4) = sub_23BD6E4F0(v7, v8, &v10);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v3, v4, "[AchievementEnvironmentCacheMonitor] Received updated achievement environment cache (%s) - clearing cached awards data.", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v6, -1, -1);
      MEMORY[0x242611FFC](v5, -1, -1);
    }

    *(_BYTE *)(v0 + 177) = 0;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE1D0);
    *v9 = v0;
    v9[1] = sub_23BD88104;
    return sub_23BDCDCAC();
  }
}

uint64_t sub_23BD88104()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD88150()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[19] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 2), v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[20] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BD87EE0;
  return sub_23BDCDDD8();
}

unint64_t sub_23BD881FC()
{
  unint64_t result;

  result = qword_256AAE198;
  if (!qword_256AAE198)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2D44, &type metadata for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAE198);
  }
  return result;
}

uint64_t sub_23BD88240()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BD88264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23BD6EBF8;
  return sub_23BD87C64(a1, v4);
}

unint64_t sub_23BD882C8()
{
  unint64_t result;

  result = qword_256AAE1B0;
  if (!qword_256AAE1B0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AchievementEnvironmentCacheMonitorAction, &type metadata for AchievementEnvironmentCacheMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAE1B0);
  }
  return result;
}

unint64_t sub_23BD88310()
{
  unint64_t result;

  result = qword_256AAE1B8;
  if (!qword_256AAE1B8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AchievementEnvironmentCacheMonitorAction, &type metadata for AchievementEnvironmentCacheMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAE1B8);
  }
  return result;
}

unint64_t sub_23BD88358()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAE1C0;
  if (!qword_256AAE1C0)
  {
    v1 = type metadata accessor for AchievementEnvironmentCacheMonitorState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AchievementEnvironmentCacheMonitorState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAE1C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorFeature()
{
  return &type metadata for AchievementEnvironmentCacheMonitorFeature;
}

_QWORD *initializeBufferWithCopyOfBuffer for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AwardCanvasPlaceholder()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier()
{
  return &type metadata for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier;
}

unint64_t sub_23BD884EC()
{
  unint64_t result;

  result = qword_256AAE1C8;
  if (!qword_256AAE1C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2D1C, &type metadata for AchievementEnvironmentCacheMonitorFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAE1C8);
  }
  return result;
}

BOOL static AwardsError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t AwardsError.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t AwardsError.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

unint64_t sub_23BD885B8()
{
  unint64_t result;

  result = qword_256AAE1D8;
  if (!qword_256AAE1D8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardsError, &type metadata for AwardsError);
    atomic_store(result, (unint64_t *)&qword_256AAE1D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardsError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BD88658 + 4 * byte_23BDD2D89[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BD8868C + 4 * byte_23BDD2D84[v4]))();
}

uint64_t sub_23BD8868C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD88694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD8869CLL);
  return result;
}

uint64_t sub_23BD886A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD886B0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BD886B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD886BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardsError()
{
  return &type metadata for AwardsError;
}

uint64_t static AwardSuggestedWorkoutsLoadState.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  if (!a1)
    return !a2;
  if (a1 == 1)
    return a2 == 1;
  if (a2 < 2)
    return 0;
  return sub_23BD88714(a1, a2);
}

uint64_t sub_23BD88714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  char v12;
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (_QWORD **)(a2 + 64);
    for (i = (uint64_t *)(a1 + 64); ; i += 5)
    {
      v6 = *(i - 2);
      v5 = *(i - 1);
      v7 = *i;
      v9 = (uint64_t)*(v3 - 2);
      v8 = (uint64_t)*(v3 - 1);
      v14 = *v3;
      v10 = (_QWORD *)*(i - 4) == *(v3 - 4) && *(i - 3) == (_QWORD)*(v3 - 3);
      if (!v10 && (sub_23BDCE024() & 1) == 0)
        break;
      v11 = v6 == v9 && v5 == v8;
      if (!v11 && (sub_23BDCE024() & 1) == 0)
        break;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = sub_23BD88870(v7, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
        break;
      v3 += 5;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_23BD88870(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2[2])
    return 0;
  if (v2 && (_QWORD *)a1 != a2)
  {
    v3 = *(unsigned __int8 *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 32) == a2[4] && *(_QWORD *)(a1 + 40) == a2[5];
    if (v4 || (sub_23BDCE024() & 1) != 0)
      __asm { BR              X8 }
    return 0;
  }
  return 1;
}

uint64_t sub_23BD88B94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_23BDCE024(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_23BDCE024() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_23BD88C58(char a1)
{
  return *(_QWORD *)&aIdle_6[8 * a1];
}

uint64_t sub_23BD88C78()
{
  char *v0;

  return sub_23BD88C58(*v0);
}

uint64_t sub_23BD88C80()
{
  sub_23BD890C4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD88CA8()
{
  sub_23BD890C4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD88CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD899C0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD88CFC()
{
  sub_23BD89108();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD88D24()
{
  sub_23BD89108();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD88D4C()
{
  sub_23BD89190();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD88D74()
{
  sub_23BD89190();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD88D9C()
{
  sub_23BD891D4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD88DC4()
{
  sub_23BD891D4();
  return sub_23BDCE0E4();
}

uint64_t AwardSuggestedWorkoutsLoadState.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v25 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE1E0);
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE1E8);
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE1F0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE1F8);
  v26 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD890C4();
  v15 = v25;
  sub_23BDCE0CC();
  if (!v15)
  {
    v28 = 0;
    sub_23BD891D4();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  }
  if (v15 == 1)
  {
    v29 = 1;
    sub_23BD89190();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  }
  v30 = 2;
  sub_23BD89108();
  v17 = v22;
  sub_23BDCDFAC();
  v27 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE210);
  sub_23BD8A598(&qword_256AAE218, (uint64_t (*)(void))sub_23BD8914C, MEMORY[0x24BEE12A0]);
  v18 = v24;
  sub_23BDCE00C();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v12);
}

unint64_t sub_23BD890C4()
{
  unint64_t result;

  result = qword_256AAE200;
  if (!qword_256AAE200)
  {
    result = MEMORY[0x242611F78](&unk_23BDD32D4, &type metadata for AwardSuggestedWorkoutsLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE200);
  }
  return result;
}

unint64_t sub_23BD89108()
{
  unint64_t result;

  result = qword_256AAE208;
  if (!qword_256AAE208)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3284, &type metadata for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE208);
  }
  return result;
}

unint64_t sub_23BD8914C()
{
  unint64_t result;

  result = qword_256AAE220;
  if (!qword_256AAE220)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasSectionDescriptor, &type metadata for AwardCanvasSectionDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAE220);
  }
  return result;
}

unint64_t sub_23BD89190()
{
  unint64_t result;

  result = qword_256AAE228;
  if (!qword_256AAE228)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3234, &type metadata for AwardSuggestedWorkoutsLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE228);
  }
  return result;
}

unint64_t sub_23BD891D4()
{
  unint64_t result;

  result = qword_256AAE230;
  if (!qword_256AAE230)
  {
    result = MEMORY[0x242611F78](&unk_23BDD31E4, &type metadata for AwardSuggestedWorkoutsLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE230);
  }
  return result;
}

uint64_t AwardSuggestedWorkoutsLoadState.init(from:)(_QWORD *a1)
{
  return sub_23BD89A74(a1);
}

uint64_t sub_23BD8922C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BD89A74(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_23BD89254(_QWORD *a1)
{
  uint64_t *v1;

  return AwardSuggestedWorkoutsLoadState.encode(to:)(a1, *v1);
}

uint64_t AwardSuggestedWorkoutsLoadState.hash(into:)(uint64_t a1, uint64_t a2)
{
  if (!a2 || a2 == 1)
    return sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BD89724(a1, a2);
}

uint64_t AwardSuggestedWorkoutsLoadState.hashValue.getter(unint64_t a1)
{
  _BYTE v3[72];

  sub_23BDCE084();
  sub_23BDCE090();
  if (a1 > 1)
    sub_23BD89724((uint64_t)v3, a1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD89334()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23BDCE084();
  sub_23BDCE090();
  if (v1 > 1)
    sub_23BD89724((uint64_t)v3, v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD893A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (!*v1 || v3 == 1)
    return sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BD89724(a1, v3);
}

uint64_t sub_23BD89410()
{
  unint64_t *v0;
  unint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23BDCE084();
  sub_23BDCE090();
  if (v1 > 1)
    sub_23BD89724((uint64_t)v3, v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD8947C(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (!v2)
    return !v3;
  if (v2 == 1)
    return v3 == 1;
  if (v3 < 2)
    return 0;
  return sub_23BD88714(v2, v3);
}

void sub_23BD894BC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23BD89508(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23BD895E4 + 4 * byte_23BDD2E7B[a2]))(0x6472617761);
}

uint64_t sub_23BD895E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6472617761 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_23BDCE024();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23BD89724(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23BDCE090();
  if (v4)
  {
    v6 = (uint64_t *)(a2 + 64);
    do
    {
      v7 = *v6;
      v6 += 5;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23BD89808(a1, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_23BD89808(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23BDCE090();
  if (v3)
  {
    v5 = *(unsigned __int8 *)(a2 + 48);
    swift_bridgeObjectRetain();
    sub_23BDCDD90();
    __asm { BR              X8 }
  }
  return result;
}

uint64_t sub_23BD899C0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7470697263736564 && a2 == 0xEB0000000073726FLL)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD89A54()
{
  return 0x7470697263736564;
}

uint64_t sub_23BD89A74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE290);
  v3 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  v31 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE298);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2A0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2A8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v34 = a1;
  v16 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, v15);
  sub_23BD890C4();
  v17 = v35;
  sub_23BDCE0C0();
  if (!v17)
  {
    v35 = v8;
    v18 = v12;
    v19 = sub_23BDCDFA0();
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if (*(_BYTE *)(v19 + 32))
      {
        if (*(_BYTE *)(v19 + 32) == 1)
        {
          v38 = 1;
          sub_23BD89190();
          v20 = v32;
          sub_23BDCDF28();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v29);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v11);
          v16 = 1;
        }
        else
        {
          v39 = 2;
          sub_23BD89108();
          v24 = v33;
          sub_23BDCDF28();
          __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE210);
          sub_23BD8A598(&qword_256AAE2B0, (uint64_t (*)(void))sub_23BD8A600, MEMORY[0x24BEE12D0]);
          v26 = v30;
          sub_23BDCDF94();
          (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v26);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v11);
          v16 = v36;
        }
      }
      else
      {
        v37 = 0;
        sub_23BD891D4();
        sub_23BDCDF28();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v7);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        v16 = 0;
      }
    }
    else
    {
      v16 = (uint64_t)v14;
      v21 = sub_23BDCDEC8();
      swift_allocError();
      v23 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
      *v23 = &type metadata for AwardSuggestedWorkoutsLoadState;
      sub_23BDCDF34();
      sub_23BDCDEBC();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v11);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return v16;
}

unint64_t sub_23BD89EC4()
{
  unint64_t result;

  result = qword_256AAE238;
  if (!qword_256AAE238)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardSuggestedWorkoutsLoadState, &type metadata for AwardSuggestedWorkoutsLoadState);
    atomic_store(result, (unint64_t *)&qword_256AAE238);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardSuggestedWorkoutsLoadState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for AwardSuggestedWorkoutsLoadState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for AwardSuggestedWorkoutsLoadState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for AwardSuggestedWorkoutsLoadState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardSuggestedWorkoutsLoadState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardSuggestedWorkoutsLoadState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_23BD8A0F8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23BD8A110(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AwardSuggestedWorkoutsLoadState()
{
  return &type metadata for AwardSuggestedWorkoutsLoadState;
}

uint64_t storeEnumTagSinglePayload for AwardSuggestedWorkoutsLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD8A18C + 4 * byte_23BDD2E92[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD8A1C0 + 4 * byte_23BDD2E8D[v4]))();
}

uint64_t sub_23BD8A1C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD8A1C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD8A1D0);
  return result;
}

uint64_t sub_23BD8A1DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD8A1E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD8A1E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD8A1F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardSuggestedWorkoutsLoadState.CodingKeys()
{
  return &type metadata for AwardSuggestedWorkoutsLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardSuggestedWorkoutsLoadState.IdleCodingKeys()
{
  return &type metadata for AwardSuggestedWorkoutsLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for AwardSuggestedWorkoutsLoadState.FetchingCodingKeys()
{
  return &type metadata for AwardSuggestedWorkoutsLoadState.FetchingCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD8A26C + 4 * byte_23BDD2E97[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD8A28C + 4 * byte_23BDD2E9C[v4]))();
}

_BYTE *sub_23BD8A26C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD8A28C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD8A294(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD8A29C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD8A2A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD8A2AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys()
{
  return &type metadata for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys;
}

unint64_t sub_23BD8A2CC()
{
  unint64_t result;

  result = qword_256AAE240;
  if (!qword_256AAE240)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3064, &type metadata for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE240);
  }
  return result;
}

unint64_t sub_23BD8A314()
{
  unint64_t result;

  result = qword_256AAE248;
  if (!qword_256AAE248)
  {
    result = MEMORY[0x242611F78](&unk_23BDD31BC, &type metadata for AwardSuggestedWorkoutsLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE248);
  }
  return result;
}

unint64_t sub_23BD8A35C()
{
  unint64_t result;

  result = qword_256AAE250;
  if (!qword_256AAE250)
  {
    result = MEMORY[0x242611F78](&unk_23BDD30DC, &type metadata for AwardSuggestedWorkoutsLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE250);
  }
  return result;
}

unint64_t sub_23BD8A3A4()
{
  unint64_t result;

  result = qword_256AAE258;
  if (!qword_256AAE258)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3104, &type metadata for AwardSuggestedWorkoutsLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE258);
  }
  return result;
}

unint64_t sub_23BD8A3EC()
{
  unint64_t result;

  result = qword_256AAE260;
  if (!qword_256AAE260)
  {
    result = MEMORY[0x242611F78](&unk_23BDD308C, &type metadata for AwardSuggestedWorkoutsLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE260);
  }
  return result;
}

unint64_t sub_23BD8A434()
{
  unint64_t result;

  result = qword_256AAE268;
  if (!qword_256AAE268)
  {
    result = MEMORY[0x242611F78](&unk_23BDD30B4, &type metadata for AwardSuggestedWorkoutsLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE268);
  }
  return result;
}

unint64_t sub_23BD8A47C()
{
  unint64_t result;

  result = qword_256AAE270;
  if (!qword_256AAE270)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2FD4, &type metadata for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE270);
  }
  return result;
}

unint64_t sub_23BD8A4C4()
{
  unint64_t result;

  result = qword_256AAE278;
  if (!qword_256AAE278)
  {
    result = MEMORY[0x242611F78](&unk_23BDD2FFC, &type metadata for AwardSuggestedWorkoutsLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE278);
  }
  return result;
}

unint64_t sub_23BD8A50C()
{
  unint64_t result;

  result = qword_256AAE280;
  if (!qword_256AAE280)
  {
    result = MEMORY[0x242611F78](&unk_23BDD312C, &type metadata for AwardSuggestedWorkoutsLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE280);
  }
  return result;
}

unint64_t sub_23BD8A554()
{
  unint64_t result;

  result = qword_256AAE288;
  if (!qword_256AAE288)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3154, &type metadata for AwardSuggestedWorkoutsLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE288);
  }
  return result;
}

uint64_t sub_23BD8A598(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE210);
    v8 = a2();
    result = MEMORY[0x242611F78](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD8A600()
{
  unint64_t result;

  result = qword_256AAE2B8;
  if (!qword_256AAE2B8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasSectionDescriptor, &type metadata for AwardCanvasSectionDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAE2B8);
  }
  return result;
}

uint64_t AwardImageView.init(store:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a3 = sub_23BD5AACC;
  *(_QWORD *)(a3 + 8) = result;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_23BD8A69C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AwardImageView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t State;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  double v38;
  uint64_t v39;

  v32 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2D0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2D8);
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v31 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v14 = v1[1];
  v15 = *((_BYTE *)v1 + 16);
  sub_23BD8AABC((uint64_t)v7);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  *(_QWORD *)(v16 + 24) = v14;
  *(_BYTE *)(v16 + 32) = v15;
  sub_23BD5F39C((uint64_t)v7, (uint64_t)v10, &qword_256AAE2C8);
  v33 = v8;
  v17 = *(int *)(v8 + 36);
  v36 = v10;
  v18 = (uint64_t (**)())&v10[v17];
  *v18 = sub_23BD8B5DC;
  v18[1] = (uint64_t (*)())v16;
  v18[2] = 0;
  v18[3] = 0;
  sub_23BD5E39C();
  sub_23BD5F3E0((uint64_t)v7, &qword_256AAE2C8);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2E0);
  sub_23BD8B5E8();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v19 = v39;
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v19 + 16) && (v20 = sub_23BD8BDAC(v37, v38), (v21 & 1) != 0))
  {
    v22 = v20;
    v30 = *(_QWORD *)(v19 + 56);
    State = type metadata accessor for AwardImageLoadState();
    v24 = *(_QWORD *)(State - 8);
    sub_23BD8C0BC(v30 + *(_QWORD *)(v24 + 72) * v22, (uint64_t)v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v4, 0, 1, State);
  }
  else
  {
    v25 = type metadata accessor for AwardImageLoadState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v4, 1, 1, v25);
  }
  swift_bridgeObjectRelease();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v13;
  *(_QWORD *)(v26 + 24) = v14;
  *(_BYTE *)(v26 + 32) = v15;
  sub_23BD5E39C();
  sub_23BD8BE44();
  sub_23BD8C010(&qword_256AAE330, &qword_256AAE2C0, (uint64_t (*)(void))sub_23BD8C074, MEMORY[0x24BEE4AB8]);
  v27 = v31;
  v28 = (uint64_t)v36;
  sub_23BDCDAD8();
  swift_release();
  sub_23BD5F3E0((uint64_t)v4, &qword_256AAE2C0);
  sub_23BD5F3E0(v28, &qword_256AAE2D0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 32))(v32, v27, v35);
}

uint64_t sub_23BD8AABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t State;
  uint64_t v21;
  int EnumCaseMultiPayload;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  double v79;
  double v80;
  uint64_t v81;

  v68 = a1;
  v53 = sub_23BDCDB8C();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v51 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_23BDCD544();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v58 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE348);
  MEMORY[0x24BDAC7A8](v65);
  v67 = (uint64_t *)((char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE350);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (char **)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE318);
  MEMORY[0x24BDAC7A8](v66);
  v64 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_23BDCD73C();
  v54 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD0B0);
  v57 = *(_QWORD *)(v63 - 8);
  v8 = MEMORY[0x24BDAC7A8](v63);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v56 = (char *)&v51 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2E0);
  sub_23BD8B5E8();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v15 = v81;
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  if (*(_QWORD *)(v15 + 16) && (v16 = sub_23BD8BDAC(v79, v80), (v17 & 1) != 0))
  {
    v18 = v16;
    v19 = *(_QWORD *)(v15 + 56);
    State = type metadata accessor for AwardImageLoadState();
    v21 = *(_QWORD *)(State - 8);
    sub_23BD8C0BC(v19 + *(_QWORD *)(v21 + 72) * v18, (uint64_t)v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, State);
  }
  else
  {
    State = type metadata accessor for AwardImageLoadState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(v14, 1, 1, State);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for AwardImageLoadState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(v14, 1, State) == 1)
  {
    *v67 = sub_23BDCDB20();
    swift_storeEnumTagMultiPayload();
    sub_23BD8BEF4();
    return sub_23BDCD844();
  }
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v34 = sub_23BDCD58C();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v14, v34);
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
LABEL_12:
    v74 = 0xD00000000000001BLL;
    v75 = 0x800000023BDDA6D0;
    LOBYTE(v76) = 0;
    v77 = MEMORY[0x24BEE4AF8];
    sub_23BDCD730();
    v35 = MEMORY[0x24BDF1FA8];
    v36 = MEMORY[0x24BDF1F80];
    sub_23BDCDAE4();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v55);
    sub_23BD5F120(v74, v75, v76);
    swift_bridgeObjectRelease();
    v37 = v57;
    v38 = v56;
    v39 = v63;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v10, v63);
    (*(void (**)(_QWORD *, char *, uint64_t))(v37 + 16))(v62, v38, v39);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE328);
    v74 = v35;
    v75 = v36;
    swift_getOpaqueTypeConformance2();
    sub_23BD8BFA8(&qword_256AAE320, &qword_256AAE328, (uint64_t (*)(void))sub_23BD7A5A4, v36);
    v40 = (uint64_t)v64;
    sub_23BDCD844();
    sub_23BD5F39C(v40, (uint64_t)v67, &qword_256AAE318);
    swift_storeEnumTagMultiPayload();
    sub_23BD8BEF4();
    sub_23BDCD844();
    sub_23BD5F3E0(v40, &qword_256AAE318);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v14, v60);
  sub_23BDCD538();
  v24 = objc_allocWithZone(MEMORY[0x24BEBD640]);
  v25 = (void *)sub_23BDCDD6C();
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v24, sel_initWithContentsOfFile_, v25);

  v27 = MEMORY[0x24BDF1FA8];
  v28 = MEMORY[0x24BDF1F80];
  if (v26)
  {
    v29 = v26;
    sub_23BDCDB74();
    v30 = v52;
    v31 = v51;
    v32 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, *MEMORY[0x24BDF3FD0], v53);
    v33 = sub_23BDCDB98();
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
    v69 = v33;
    v70 = 0x3FF0000000000000;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AADB80);
    sub_23BD7A5A4();
    sub_23BDCD844();
    swift_release();

  }
  else
  {
    sub_23BDCD7FC();
    v69 = sub_23BDCD9A0();
    v70 = v41;
    v71 = v42 & 1;
    v72 = v43;
    v73 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AADB80);
    sub_23BD7A5A4();
    sub_23BDCD844();
  }
  v44 = v74;
  v45 = v75;
  v46 = v76;
  v47 = v77;
  v48 = v78;
  v49 = v62;
  *v62 = v74;
  v49[1] = v45;
  v49[2] = v46;
  v49[3] = v47;
  *((_BYTE *)v49 + 32) = v48;
  swift_storeEnumTagMultiPayload();
  sub_23BD8C42C(v44, v45, v46, v47, v48);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE328);
  v74 = v27;
  v75 = v28;
  swift_getOpaqueTypeConformance2();
  sub_23BD8BFA8(&qword_256AAE320, &qword_256AAE328, (uint64_t (*)(void))sub_23BD7A5A4, v28);
  v50 = (uint64_t)v64;
  sub_23BDCD844();
  sub_23BD5F39C(v50, (uint64_t)v67, &qword_256AAE318);
  swift_storeEnumTagMultiPayload();
  sub_23BD8BEF4();
  sub_23BDCD844();
  sub_23BD8C45C(v44, v45, v46, v47, v48);
  sub_23BD5F3E0(v50, &qword_256AAE318);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v58, v60);
}

uint64_t sub_23BD8B454()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v4;

  v0 = type metadata accessor for AwardImageAction();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (__int128 *)((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BD5E39C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2E0);
  sub_23BD8B5E8();
  sub_23BDCD694();
  sub_23BD5E388();
  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  *v2 = v4;
  swift_storeEnumTagMultiPayload();
  sub_23BDCDCDC();
  swift_release();
  return sub_23BD59BB4((uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageAction);
}

uint64_t sub_23BD8B5DC()
{
  return sub_23BD8B454();
}

unint64_t sub_23BD8B5E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAE2E8;
  if (!qword_256AAE2E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE2E0);
    result = MEMORY[0x242611F78](MEMORY[0x24BE2B5E8], v1);
    atomic_store(result, (unint64_t *)&qword_256AAE2E8);
  }
  return result;
}

uint64_t sub_23BD8B634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char StateO2eeoiySbAC_ACtFZ_0;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint8_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  double v52;
  double v53;

  v43 = type metadata accessor for AwardImageAction();
  MEMORY[0x24BDAC7A8](v43);
  v44 = (double *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  State = type metadata accessor for AwardImageLoadState();
  v47 = *(_QWORD **)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v41 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAE340);
  MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v45 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v40 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v40 - v13;
  sub_23BD5E39C();
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2E0);
  v16 = sub_23BD8B5E8();
  sub_23BDCD694();
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v17 = v52;
  v18 = v53;
  sub_23BD5E39C();
  v46 = v15;
  sub_23BDCD694();
  v50 = a2;
  sub_23BD5E388();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v19 = *(_QWORD *)&v52;
  v20 = *(_QWORD *)(*(_QWORD *)&v52 + 16);
  v42 = v16;
  if (v20)
  {
    v21 = v47;
    v22 = sub_23BD8BDAC(v17, v18);
    if ((v23 & 1) != 0)
    {
      sub_23BD8C0BC(*(_QWORD *)(v19 + 56) + v21[9] * v22, (uint64_t)v14);
      v24 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v21[7];
      v24(v14, 0, 1, State);
      goto LABEL_6;
    }
  }
  else
  {
    v21 = v47;
  }
  v24 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v21[7];
  v24(v14, 1, 1, State);
LABEL_6:
  v25 = (uint64_t)v49;
  swift_bridgeObjectRelease();
  swift_storeEnumTagMultiPayload();
  v24(v12, 0, 1, State);
  v26 = v25 + *((int *)v48 + 12);
  sub_23BD5F39C((uint64_t)v14, v25, &qword_256AAE2C0);
  sub_23BD5F39C((uint64_t)v12, v26, &qword_256AAE2C0);
  v27 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v21[6];
  v28 = (uint64_t)v14;
  if (v27(v25, 1, State) != 1)
  {
    v29 = v45;
    sub_23BD5F39C(v25, v45, &qword_256AAE2C0);
    if (v27(v26, 1, State) != 1)
    {
      v30 = v41;
      sub_23BD8C374(v26, v41);
      StateO2eeoiySbAC_ACtFZ_0 = _s13FitnessAwards19AwardImageLoadStateO2eeoiySbAC_ACtFZ_0(v29, v30);
      sub_23BD59BB4(v30, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      sub_23BD5F3E0((uint64_t)v12, &qword_256AAE2C0);
      sub_23BD59BB4(v29, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      sub_23BD5F3E0(v25, &qword_256AAE2C0);
      if ((StateO2eeoiySbAC_ACtFZ_0 & 1) == 0)
        return sub_23BD5F3E0(v28, &qword_256AAE2C0);
      goto LABEL_13;
    }
    sub_23BD5F3E0((uint64_t)v12, &qword_256AAE2C0);
    sub_23BD59BB4(v29, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
LABEL_11:
    sub_23BD5F3E0(v25, &qword_256AAE340);
    return sub_23BD5F3E0(v28, &qword_256AAE2C0);
  }
  sub_23BD5F3E0((uint64_t)v12, &qword_256AAE2C0);
  if (v27(v26, 1, State) != 1)
    goto LABEL_11;
  sub_23BD5F3E0(v25, &qword_256AAE2C0);
LABEL_13:
  if (qword_256AACE00 != -1)
    swift_once();
  v32 = sub_23BDCD628();
  __swift_project_value_buffer(v32, (uint64_t)qword_256AAF4B0);
  sub_23BD5E39C();
  sub_23BD5E39C();
  v33 = sub_23BDCD610();
  v34 = sub_23BDCDE38();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v49 = (char *)swift_slowAlloc();
    v51 = v49;
    v48 = v35;
    *(_DWORD *)v35 = 136315138;
    sub_23BD5E39C();
    sub_23BDCD694();
    sub_23BD5E388();
    swift_getKeyPath();
    sub_23BDCDCD0();
    swift_release();
    swift_release();
    v52 = COERCE_DOUBLE(sub_23BD6E4F0(*(uint64_t *)&v52, *(unint64_t *)&v53, (uint64_t *)&v51));
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    sub_23BD5E388();
    sub_23BD5E388();
    v36 = v48;
    _os_log_impl(&dword_23BD56000, v33, v34, "[AwardImageView] Load state was reset to idle for  %s", v48, 0xCu);
    v37 = v49;
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v37, -1, -1);
    MEMORY[0x242611FFC](v36, -1, -1);
  }
  else
  {
    sub_23BD5E388();
    sub_23BD5E388();
  }

  sub_23BD5E39C();
  sub_23BDCD694();
  sub_23BD5E388();
  v38 = (uint64_t)v44;
  *v44 = v17;
  *(double *)(v38 + 8) = v18;
  swift_storeEnumTagMultiPayload();
  sub_23BDCDCDC();
  swift_release();
  sub_23BD59BB4(v38, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageAction);
  return sub_23BD5F3E0(v28, &qword_256AAE2C0);
}

unint64_t sub_23BD8BD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23BDCE084();
  sub_23BDCDD90();
  v4 = sub_23BDCE0B4();
  return sub_23BD8C294(a1, a2, v4);
}

unint64_t sub_23BD8BDAC(double a1, double a2)
{
  uint64_t v4;

  sub_23BDCE084();
  sub_23BD5A758();
  v4 = sub_23BDCE0B4();
  return sub_23BD8C3B8(v4, a1, a2);
}

uint64_t objectdestroy_2Tm_1()
{
  sub_23BD5E388();
  return swift_deallocObject();
}

uint64_t sub_23BD8BE38()
{
  uint64_t v0;

  return sub_23BD8B634(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_23BD8BE44()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAE2F0;
  if (!qword_256AAE2F0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE2D0);
    v2[0] = sub_23BD8C010(&qword_256AAE2F8, &qword_256AAE2C8, sub_23BD8BED0, MEMORY[0x24BDF3F50]);
    v2[1] = MEMORY[0x24BDF0910];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAE2F0);
  }
  return result;
}

uint64_t sub_23BD8BED0()
{
  return sub_23BD8BFA8(&qword_256AAE300, &qword_256AAE308, (uint64_t (*)(void))sub_23BD8BEF4, MEMORY[0x24BDF3E20]);
}

unint64_t sub_23BD8BEF4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_256AAE310;
  if (!qword_256AAE310)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE318);
    v2 = MEMORY[0x24BDF1F80];
    v3[2] = MEMORY[0x24BDF1FA8];
    v3[3] = MEMORY[0x24BDF1F80];
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = sub_23BD8BFA8(&qword_256AAE320, &qword_256AAE328, (uint64_t (*)(void))sub_23BD7A5A4, v2);
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAE310);
  }
  return result;
}

uint64_t sub_23BD8BFA8(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD8C010(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x242611F78](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD8C074()
{
  unint64_t result;
  uint64_t State;

  result = qword_256AAE338;
  if (!qword_256AAE338)
  {
    State = type metadata accessor for AwardImageLoadState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardImageLoadState, State);
    atomic_store(result, (unint64_t *)&qword_256AAE338);
  }
  return result;
}

uint64_t sub_23BD8C0BC(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardImageLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 16))(a2, a1, State);
  return a2;
}

uint64_t sub_23BD8C100()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BD8C114(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AwardImageView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD5E388();
  return a1;
}

uint64_t assignWithTake for AwardImageView(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_23BD5E388();
  return a1;
}

ValueMetadata *type metadata accessor for AwardImageView()
{
  return &type metadata for AwardImageView;
}

uint64_t sub_23BD8C204()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE2D0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE2C0);
  sub_23BD8BE44();
  sub_23BD8C010(&qword_256AAE330, &qword_256AAE2C0, (uint64_t (*)(void))sub_23BD8C074, MEMORY[0x24BEE4AB8]);
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_23BD8C294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23BDCE024() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23BDCE024() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_23BD8C374(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardImageLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32))(a2, a1, State);
  return a2;
}

unint64_t sub_23BD8C3B8(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  double *v7;
  double v8;
  BOOL v9;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  result = a1 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      v7 = (double *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v8 = v7[1];
      v9 = *v7 == a2;
      if (v8 == a3 && v9)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_23BD8C42C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain();
  sub_23BD5F194(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BD8C45C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release();
  sub_23BD5F120(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease();
}

__n128 AwardImageFeature.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  type metadata accessor for AwardImageFeature();
  sub_23BDCD580();
  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for AwardImageFeature()
{
  uint64_t result;

  result = qword_256AAE400;
  if (!qword_256AAE400)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD8C504()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD8C580()
{
  sub_23BDCE090();
  sub_23BDCDD90();
  return sub_23BD5A758();
}

uint64_t sub_23BD8C5DC()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCDD90();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

BOOL sub_23BD8C654(__int128 *a1, __int128 *a2)
{
  __int128 v4[2];
  __int128 v5[2];

  sub_23BD8F8D8(a1, (uint64_t)v4);
  sub_23BD8F8D8(a2, (uint64_t)v5);
  return sub_23BD8F138(v4, v5);
}

void AwardImageFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  char *v33;
  _QWORD v34[4];
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a4;
  v54 = a3;
  v56 = a2;
  v42 = a1;
  State = type metadata accessor for AwardImageLoadState();
  v52 = *(_QWORD *)(State - 8);
  v53 = State;
  v5 = MEMORY[0x24BDAC7A8](State);
  v34[2] = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)v34 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v34[3] = (char *)v34 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v46 = (char *)v34 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v40 = sub_23BDCD58C();
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v34[1] = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  v15 = MEMORY[0x24BDAC7A8](v35);
  v41 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v38 = (char *)v34 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v45 = (char *)v34 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v47 = (char *)v34 - v21;
  v50 = sub_23BDCD544();
  v44 = *(_QWORD *)(v50 - 8);
  v22 = MEMORY[0x24BDAC7A8](v50);
  v43 = (char *)v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v51 = (char *)v34 - v24;
  v25 = type metadata accessor for AwardImageFeature();
  MEMORY[0x24BDAC7A8](v25);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD748);
  v48 = *(_QWORD *)(v26 - 8);
  v49 = v26;
  v27 = MEMORY[0x24BDAC7A8](v26);
  v36 = (char *)v34 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = type metadata accessor for AwardImageAction();
  v30 = MEMORY[0x24BDAC7A8](v29);
  MEMORY[0x24BDAC7A8](v30);
  sub_23BD594E4(v55, (uint64_t)v34 - v31, v32);
  v33 = (char *)sub_23BD8CA3C + 4 * word_23BDD3430[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BD8CA3C()
{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = (double *)(v0 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370) + 48));
  v3 = *v2;
  v4 = v2[1];
  v5 = *(_QWORD *)(v1 - 264);
  v6 = *(_QWORD *)(v1 - 208);
  v7 = v0;
  v8 = *(_QWORD *)(v1 - 216);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v6, v7, v8);
  v9 = *(uint64_t **)(v1 - 160);
  v11 = *v9;
  v10 = v9[1];
  v12 = qword_256AACE00;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v13 = sub_23BDCD628();
  v14 = __swift_project_value_buffer(v13, (uint64_t)qword_256AAF4B0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16 = *(_QWORD *)(v1 - 272);
  *(_QWORD *)(v1 - 176) = v15;
  v15(v16, v6, v8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 - 168) = v14;
  v17 = sub_23BDCD610();
  v18 = sub_23BDCDE38();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    *(_QWORD *)(v1 - 112) = v20;
    *(_DWORD *)v19 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v1 - 152) = sub_23BD6E4F0(v11, v10, (uint64_t *)(v1 - 112));
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    *(double *)(v1 - 152) = v3;
    *(double *)(v1 - 144) = v4;
    type metadata accessor for CGSize();
    v21 = sub_23BDCDD78();
    *(_QWORD *)(v1 - 152) = sub_23BD6E4F0(v21, v22, (uint64_t *)(v1 - 112));
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    v8 = *(_QWORD *)(v1 - 216);
    sub_23BD6B5DC(&qword_256AAE378, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v23 = sub_23BDCE018();
    *(_QWORD *)(v1 - 152) = sub_23BD6E4F0(v23, v24, (uint64_t *)(v1 - 112));
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v25(v16, v8);
    _os_log_impl(&dword_23BD56000, v17, v18, "[AwardImageFeature] (%s) Image fetched for size %s: %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v20, -1, -1);
    MEMORY[0x242611FFC](v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v25(v16, v8);
  }

  v27 = *(_QWORD *)(v1 - 200);
  v26 = *(_QWORD *)(v1 - 192);
  v28 = *(_QWORD *)(*(_QWORD *)(v1 - 160) + 32);
  v29 = *(_QWORD *)(v1 - 240);
  if (*(_QWORD *)(v28 + 16) && (v30 = sub_23BD8BDAC(v3, v4), (v31 & 1) != 0))
  {
    sub_23BD594E4(*(_QWORD *)(v28 + 56) + *(_QWORD *)(v27 + 72) * v30, v29, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v32(v29, 0, 1, v26);
  }
  else
  {
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    v32(v29, 1, 1, v26);
  }
  v33 = *(_QWORD *)(v1 - 256);
  sub_23BD8EB94(v29, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v33, 1, v26) == 1)
  {
    sub_23BD8EBDC(v33);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 304) + 8))(v33, *(_QWORD *)(v1 - 296));
      v45 = *(_QWORD *)(v1 - 312);
      v46 = *(_QWORD *)(v1 - 208);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 - 176))(v45, v46, v8);
      swift_storeEnumTagMultiPayload();
      v32(v45, 0, 1, v26);
      sub_23BD8E028(v45, v3, v4);
      sub_23BD8EBDC(v29);
      v44 = v46;
      return ((uint64_t (*)(uint64_t, uint64_t))v25)(v44, v8);
    }
    sub_23BD59BB4(v33, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
  }
  v34 = *(_QWORD *)(v1 - 288);
  sub_23BD8EB94(v29, v34);
  v35 = sub_23BDCD610();
  v36 = sub_23BDCDE38();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc();
    *(_QWORD *)(v1 - 160) = v25;
    v38 = v34;
    v39 = (uint8_t *)v37;
    v40 = swift_slowAlloc();
    *(_QWORD *)(v1 - 152) = v40;
    *(_DWORD *)v39 = 136315138;
    v41 = sub_23BDCDE44();
    *(_QWORD *)(v1 - 112) = sub_23BD6E4F0(v41, v42, (uint64_t *)(v1 - 152));
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    sub_23BD8EBDC(v38);
    _os_log_impl(&dword_23BD56000, v35, v36, "[AwardImageFeature] Current state is %s, skipping .fetched update", v39, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v40, -1, -1);
    MEMORY[0x242611FFC](v39, -1, -1);

    sub_23BD8EBDC(v29);
    return (*(uint64_t (**)(_QWORD, uint64_t))(v1 - 160))(*(_QWORD *)(v1 - 208), v8);
  }

  sub_23BD8EBDC(v34);
  sub_23BD8EBDC(v29);
  v44 = *(_QWORD *)(v1 - 208);
  return ((uint64_t (*)(uint64_t, uint64_t))v25)(v44, v8);
}

uint64_t sub_23BD8D7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(double *)(v6 + 104) = a5;
  *(double *)(v6 + 112) = a6;
  *(_QWORD *)(v6 + 88) = a3;
  *(_QWORD *)(v6 + 96) = a4;
  *(_QWORD *)(v6 + 72) = a1;
  *(_QWORD *)(v6 + 80) = a2;
  *(_QWORD *)(v6 + 120) = type metadata accessor for AwardImageAction();
  *(_QWORD *)(v6 + 128) = swift_task_alloc();
  v7 = sub_23BDCD544();
  *(_QWORD *)(v6 + 136) = v7;
  *(_QWORD *)(v6 + 144) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 152) = swift_task_alloc();
  *(_QWORD *)(v6 + 160) = swift_task_alloc();
  sub_23BDCDDF0();
  *(_QWORD *)(v6 + 168) = sub_23BDCDDE4();
  *(_QWORD *)(v6 + 176) = sub_23BDCDDCC();
  *(_QWORD *)(v6 + 184) = v8;
  return swift_task_switch();
}

uint64_t sub_23BD8D8BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, double, double);

  v3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, double, double))(***(int ***)(v0 + 80) + **(_QWORD **)(v0 + 80));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = sub_23BD8D924;
  return v3(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(double *)(v0 + 104), *(double *)(v0 + 112));
}

uint64_t sub_23BD8D924()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BD8D984()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[17];
  v4 = v0[18];
  v5 = sub_23BDCD628();
  __swift_project_value_buffer(v5, (uint64_t)qword_256AAF4B0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6(v1, v2, v3);
  v7 = sub_23BDCD610();
  v8 = sub_23BDCDE38();
  v9 = os_log_type_enabled(v7, v8);
  v11 = v0[18];
  v10 = v0[19];
  v12 = v0[17];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v27 = v6;
    v28 = swift_slowAlloc();
    v14 = v28;
    *(_DWORD *)v13 = 136315138;
    sub_23BD6B5DC(&qword_256AAE378, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v15 = sub_23BDCE018();
    v0[8] = sub_23BD6E4F0(v15, v16, &v28);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v17(v10, v12);
    _os_log_impl(&dword_23BD56000, v7, v8, "[AwardImageFeature] Image url fetched %s", v13, 0xCu);
    swift_arrayDestroy();
    v18 = v14;
    v6 = v27;
    MEMORY[0x242611FFC](v18, -1, -1);
    MEMORY[0x242611FFC](v13, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v17(v0[19], v0[17]);
  }

  v0[26] = v17;
  v19 = v0[20];
  v21 = v0[16];
  v20 = v0[17];
  v23 = v0[13];
  v22 = v0[14];
  v24 = (_QWORD *)(v21 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370) + 48));
  v6(v21, v19, v20);
  *v24 = v23;
  v24[1] = v22;
  swift_storeEnumTagMultiPayload();
  v25 = (_QWORD *)swift_task_alloc();
  v0[27] = v25;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE440);
  *v25 = v0;
  v25[1] = sub_23BD8DC04;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD8DC04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc();
  sub_23BD59BB4(v1, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageAction);
  return swift_task_switch();
}

uint64_t sub_23BD8DC64()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD8DCD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc();
  sub_23BD59BB4(v1, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageAction);
  return swift_task_switch();
}

uint64_t sub_23BD8DD30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release();
  MEMORY[0x242611E7C](v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BD8DD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 200);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  swift_bridgeObjectRetain();
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 96);
  if (v5)
  {
    v8 = *(_QWORD *)(v0 + 88);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_23BD6E4F0(v8, v7, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    v11 = sub_23BDCE048();
    *(_QWORD *)(v0 + 56) = sub_23BD6E4F0(v11, v12, &v15);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardImageFeature] Failed to fetch image url for %s, error %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v10, -1, -1);
    MEMORY[0x242611FFC](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
  }

  *(_OWORD *)*(_QWORD *)(v0 + 128) = *(_OWORD *)(v0 + 104);
  swift_storeEnumTagMultiPayload();
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE440);
  *v13 = v0;
  v13[1] = sub_23BD8DCD0;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD8E028(uint64_t a1, double a2, double a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t State;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  v12 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, State) == 1)
  {
    sub_23BD8EBDC(a1);
    v15 = sub_23BD8BDAC(a2, a3);
    if ((v16 & 1) != 0)
    {
      v17 = v15;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = *v4;
      v24 = *v4;
      *v4 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_23BDC0C74();
        v19 = v24;
      }
      sub_23BD7686C(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v12 + 72) * v17, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      sub_23BD8ED8C(v17, v19);
      *v4 = v19;
      swift_bridgeObjectRelease();
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v20, 1, State);
    return sub_23BD8EBDC((uint64_t)v10);
  }
  else
  {
    sub_23BD7686C(a1, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v21 = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v4;
    *v4 = 0x8000000000000000;
    sub_23BD8EF84((uint64_t)v14, v21, a2, a3);
    *v4 = v24;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23BD8E204(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;

  *(double *)(v5 + 72) = a4;
  *(double *)(v5 + 80) = a5;
  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 48) = a1;
  *(_QWORD *)(v5 + 88) = type metadata accessor for AwardImageAction();
  *(_QWORD *)(v5 + 96) = swift_task_alloc();
  sub_23BDCDDF0();
  *(_QWORD *)(v5 + 104) = sub_23BDCDDE4();
  *(_QWORD *)(v5 + 112) = sub_23BDCDDCC();
  *(_QWORD *)(v5 + 120) = v6;
  return swift_task_switch();
}

uint64_t sub_23BD8E29C()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v5 = v0[9];
    v4 = v0[10];
    v7 = v0[7];
    v6 = v0[8];
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v14 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain();
    v0[4] = sub_23BD6E4F0(v7, v6, &v14);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    v0[2] = v5;
    v0[3] = v4;
    type metadata accessor for CGSize();
    v10 = sub_23BDCDD78();
    v0[5] = sub_23BD6E4F0(v10, v11, &v14);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardImageFeature] Requesting image data for %s with size %s on view appeared", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v9, -1, -1);
    MEMORY[0x242611FFC](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(_OWORD *)v0[12] = *(_OWORD *)(v0 + 9);
  swift_storeEnumTagMultiPayload();
  v12 = (_QWORD *)swift_task_alloc();
  v0[16] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE440);
  *v12 = v0;
  v12[1] = sub_23BD8E4F8;
  return sub_23BDCDCAC();
}

uint64_t sub_23BD8E4F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc();
  sub_23BD59BB4(v1, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageAction);
  return swift_task_switch();
}

uint64_t sub_23BD8E558()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AwardImageFeature.dispose(localState:sharedState:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = swift_bridgeObjectRetain();
  v3 = sub_23BD8F43C(v2, (uint64_t (*)(char *, double, double))sub_23BD8ED84, (uint64_t)&v5);
  swift_bridgeObjectRelease();
  sub_23BD8E6D8(v3, a1);
  return swift_release();
}

uint64_t sub_23BD8E604(uint64_t a1, uint64_t a2)
{
  uint64_t State;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  State = type metadata accessor for AwardImageLoadState();
  MEMORY[0x24BDAC7A8](State);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2 + *(int *)(type metadata accessor for AwardImageFeature() + 20);
  v8 = sub_23BDCD58C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v7) = _s13FitnessAwards19AwardImageLoadStateO2eeoiySbAC_ACtFZ_0(a1, (uint64_t)v6);
  sub_23BD59BB4((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
  return v7 & 1;
}

uint64_t sub_23BD8E6D8(uint64_t a1, uint64_t a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  double *v20;
  double v21;
  double v22;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  double *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  State = type metadata accessor for AwardImageLoadState();
  v42 = *(_QWORD *)(State - 8);
  v43 = State;
  v5 = MEMORY[0x24BDAC7A8](State);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v39 - v8;
  v10 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v44 = a1;
  swift_bridgeObjectRetain();
  v14 = 0;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
    }
    else
    {
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v41)
        return swift_release();
      v18 = *(_QWORD *)(v40 + 8 * v17);
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v41)
          return swift_release();
        v18 = *(_QWORD *)(v40 + 8 * v14);
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v41)
            return swift_release();
          v18 = *(_QWORD *)(v40 + 8 * v14);
          if (!v18)
          {
            v14 = v17 + 3;
            if (v17 + 3 >= v41)
              return swift_release();
            v18 = *(_QWORD *)(v40 + 8 * v14);
            if (!v18)
            {
              v19 = v17 + 4;
              if (v19 >= v41)
                return swift_release();
              v18 = *(_QWORD *)(v40 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  v14 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v14 >= v41)
                    return swift_release();
                  v18 = *(_QWORD *)(v40 + 8 * v14);
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v14 = v19;
            }
          }
        }
      }
LABEL_23:
      v13 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v14 << 6);
    }
    v20 = (double *)(*(_QWORD *)(v44 + 48) + 16 * v16);
    v21 = *v20;
    v22 = v20[1];
    swift_storeEnumTagMultiPayload();
    sub_23BD7686C((uint64_t)v9, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45 = *(_QWORD **)(a2 + 32);
    v24 = v45;
    *(_QWORD *)(a2 + 32) = 0x8000000000000000;
    v26 = sub_23BD8BDAC(v21, v22);
    v27 = v24[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v33 = v45;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_23BDC0C74();
        v33 = v45;
        if ((v30 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_23BDC058C(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_23BD8BDAC(v21, v22);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_40;
      v26 = v31;
      v33 = v45;
      if ((v30 & 1) != 0)
      {
LABEL_4:
        sub_23BD8F8F0((uint64_t)v7, v33[7] + *(_QWORD *)(v42 + 72) * v26);
        goto LABEL_5;
      }
    }
    v33[(v26 >> 6) + 8] |= 1 << v26;
    v34 = (double *)(v33[6] + 16 * v26);
    *v34 = v21;
    v34[1] = v22;
    sub_23BD7686C((uint64_t)v7, v33[7] + *(_QWORD *)(v42 + 72) * v26, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_37;
    v33[2] = v37;
LABEL_5:
    *(_QWORD *)(a2 + 32) = v33;
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  type metadata accessor for CGSize();
  result = sub_23BDCE03C();
  __break(1u);
  return result;
}

uint64_t sub_23BD8EA44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = swift_bridgeObjectRetain();
  v4 = sub_23BD8F43C(v3, (uint64_t (*)(char *, double, double))sub_23BD8F934, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  sub_23BD8E6D8(v4, a2);
  return swift_release();
}

unint64_t sub_23BD8EAB8()
{
  unint64_t result;

  result = qword_256AAE358;
  if (!qword_256AAE358)
  {
    result = MEMORY[0x242611F78](&unk_23BDD34FC, &type metadata for TaskIdentifier);
    atomic_store(result, &qword_256AAE358);
  }
  return result;
}

uint64_t sub_23BD8EAFC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD8EB20(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD *v8;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6EBF8;
  return sub_23BD8E204(a1, v4, v5, v6, v7);
}

uint64_t sub_23BD8EB94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BD8EBDC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE2C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BD8EC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardImageFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BD8ECC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for AwardImageFeature() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + v6);
  v10 = *v9;
  v11 = v9[1];
  v12 = *(double *)(v1 + v7);
  v13 = *(double *)(v1 + v7 + 8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_23BD6F814;
  return sub_23BD8D7EC(a1, v8, v10, v11, v12, v13);
}

uint64_t sub_23BD8ED84(uint64_t a1)
{
  uint64_t v1;

  return sub_23BD8E604(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_23BD8ED8C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23BDCDE74();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_23BDCE084();
        sub_23BDCE0A8();
        sub_23BDCE0A8();
        result = sub_23BDCE0B4();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v9 < v8)
          goto LABEL_11;
LABEL_12:
        v10 = *(_QWORD *)(a2 + 48);
        v11 = (_OWORD *)(v10 + 16 * v3);
        v12 = (_OWORD *)(v10 + 16 * v6);
        if (v3 != v6 || v11 >= v12 + 1)
          *v11 = *v12;
        v13 = *(_QWORD *)(a2 + 56);
        v14 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AwardImageLoadState() - 8) + 72);
        v15 = v14 * v3;
        result = v13 + v14 * v3;
        v16 = v14 * v6;
        v17 = v13 + v14 * v6 + v14;
        if (v15 < v16 || result >= v17)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v15 == v16)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v9 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v9)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_23BD8EF84(uint64_t a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_23BD8BDAC(a3, a4);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a2 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for AwardImageLoadState() - 8) + 72) * v12;
        return sub_23BD8F8F0(a1, v20);
      }
      return sub_23BD8F0A8(v12, a1, v18, a3, a4);
    }
    if (v17 >= v15 && (a2 & 1) == 0)
    {
      sub_23BDC0C74();
      goto LABEL_7;
    }
    sub_23BDC058C(v15, a2 & 1);
    v22 = sub_23BD8BDAC(a3, a4);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_23BD8F0A8(v12, a1, v18, a3, a4);
    }
  }
  type metadata accessor for CGSize();
  result = sub_23BDCE03C();
  __break(1u);
  return result;
}

uint64_t sub_23BD8F0A8(unint64_t a1, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  double *v8;
  uint64_t v9;
  uint64_t State;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a3[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (double *)(a3[6] + 16 * a1);
  *v8 = a4;
  v8[1] = a5;
  v9 = a3[7];
  State = type metadata accessor for AwardImageLoadState();
  result = sub_23BD7686C(a2, v9 + *(_QWORD *)(*(_QWORD *)(State - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
  v12 = a3[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a3[2] = v14;
  return result;
}

BOOL sub_23BD8F138(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char v10;
  _BOOL8 result;
  _QWORD v12[4];
  char v13;
  _QWORD v14[4];
  char v15;

  sub_23BD8F8D8(a1, (uint64_t)v14);
  v3 = v14[0];
  v4 = v14[1];
  v6 = *(double *)&v14[2];
  v5 = *(double *)&v14[3];
  if ((v15 & 1) == 0)
  {
    sub_23BD8F8D8(a2, (uint64_t)v12);
    if ((v13 & 1) == 0)
      goto LABEL_3;
    return 0;
  }
  sub_23BD8F8D8(a2, (uint64_t)v12);
  if (v13 != 1)
    return 0;
LABEL_3:
  v8 = *(double *)&v12[2];
  v7 = *(double *)&v12[3];
  if (v3 == v12[0] && v4 == v12[1])
    return v5 == v7 && v6 == v8;
  v10 = sub_23BDCE024();
  result = 0;
  if ((v10 & 1) != 0)
    return v5 == v7 && v6 == v8;
  return result;
}

uint64_t sub_23BD8F1F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, double, double))
{
  uint64_t State;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  double v19;
  char v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *, double, double);

  v25 = a2;
  v30 = a4;
  v26 = a1;
  State = type metadata accessor for AwardImageLoadState();
  v6 = *(_QWORD *)(State - 8);
  result = MEMORY[0x24BDAC7A8](State);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = *(_QWORD *)(a3 + 64);
  v27 = 0;
  v28 = a3 + 64;
  v12 = 1 << *(_BYTE *)(a3 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v29)
      return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
    v22 = *(_QWORD *)(v28 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v29)
        return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
      v22 = *(_QWORD *)(v28 + 8 * v10);
      if (!v22)
      {
        v10 = v21 + 2;
        if (v21 + 2 >= v29)
          return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
        v22 = *(_QWORD *)(v28 + 8 * v10);
        if (!v22)
          break;
      }
    }
LABEL_20:
    v14 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_5:
    v17 = (double *)(*(_QWORD *)(a3 + 48) + 16 * v16);
    v18 = *v17;
    v19 = v17[1];
    sub_23BD594E4(*(_QWORD *)(a3 + 56) + *(_QWORD *)(v6 + 72) * v16, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v20 = v30(v9, v18, v19);
    result = sub_23BD59BB4((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    if ((v20 & 1) != 0)
    {
      *(unint64_t *)((char *)v26 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v27++, 1))
      {
        __break(1u);
        return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
      }
    }
  }
  v23 = v21 + 3;
  if (v23 >= v29)
    return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
  v22 = *(_QWORD *)(v28 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_20;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v29)
      return sub_23BDC12C0(v26, v25, v27, (_QWORD *)a3);
    v22 = *(_QWORD *)(v28 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23BD8F43C(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, double, double), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_23BD8F1F8((_QWORD *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_23BD8F1F8((unint64_t *)v11, v8, v6, a2);
    MEMORY[0x242611FFC](v11, -1, -1);
  }
  return a3;
}

uint64_t sub_23BD8F5AC()
{
  return sub_23BD6B5DC(&qword_256AAE390, (uint64_t (*)(uint64_t))type metadata accessor for AwardImageAction, (uint64_t)&protocol conformance descriptor for AwardImageAction);
}

uint64_t sub_23BD8F5D8()
{
  return sub_23BD6B5DC(&qword_256AAE398, (uint64_t (*)(uint64_t))type metadata accessor for AwardImageAction, (uint64_t)&protocol conformance descriptor for AwardImageAction);
}

unint64_t sub_23BD8F608()
{
  unint64_t result;

  result = qword_256AAE3A0;
  if (!qword_256AAE3A0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardImageState, &type metadata for AwardImageState);
    atomic_store(result, (unint64_t *)&qword_256AAE3A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardImageFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD8F658(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardImageFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BD8F6E0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t destroy for TaskIdentifier()
{
  return sub_23BD6F35C();
}

uint64_t initializeWithCopy for TaskIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = *((_BYTE *)a2 + 32);
  sub_23BD6F344();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for TaskIdentifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = *((_BYTE *)a2 + 32);
  sub_23BD6F344();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_23BD6F35C();
  return a1;
}

uint64_t assignWithTake for TaskIdentifier(uint64_t a1, uint64_t a2)
{
  char v3;
  __int128 v4;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v3;
  sub_23BD6F35C();
  return a1;
}

ValueMetadata *type metadata accessor for TaskIdentifier()
{
  return &type metadata for TaskIdentifier;
}

unint64_t sub_23BD8F894()
{
  unint64_t result;

  result = qword_256AAE438;
  if (!qword_256AAE438)
  {
    result = MEMORY[0x242611F78](&unk_23BDD34D4, &type metadata for TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAE438);
  }
  return result;
}

uint64_t sub_23BD8F8D8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23BD8F8F0(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardImageLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t AwardCanvasPlaceholder.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardCanvasPlaceholder.referenceType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AwardCanvasPlaceholder.score.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

void __swiftcall AwardCanvasPlaceholder.init(identifier:referenceType:score:)(FitnessAwards::AwardCanvasPlaceholder *__return_ptr retstr, Swift::String identifier, FitnessAwards::PlaceholderReferenceType referenceType, Swift::Double_optional score)
{
  char v4;

  retstr->identifier = identifier;
  retstr->referenceType = referenceType;
  retstr->score.value = *(Swift::Double *)&score.is_nil;
  retstr->score.is_nil = v4 & 1;
}

uint64_t sub_23BD8F990(char a1)
{
  return *(_QWORD *)&aIdentifirefere[8 * a1];
}

uint64_t sub_23BD8F9B0()
{
  char *v0;

  return sub_23BD8F990(*v0);
}

uint64_t sub_23BD8F9B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD90840(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD8F9DC()
{
  sub_23BD8FBB4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD8FA04()
{
  sub_23BD8FBB4();
  return sub_23BDCE0E4();
}

uint64_t AwardCanvasPlaceholder.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _DWORD v9[4];
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE448);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int8 *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v9[3] = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD8FBB4();
  sub_23BDCE0CC();
  v16 = 0;
  v7 = v11;
  sub_23BDCDFDC();
  if (!v7)
  {
    v15 = v12;
    v14 = 1;
    sub_23BD8FBF8();
    sub_23BDCE00C();
    v13 = 2;
    sub_23BDCDFC4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BD8FBB4()
{
  unint64_t result;

  result = qword_256AAE450;
  if (!qword_256AAE450)
  {
    result = MEMORY[0x242611F78](&unk_23BDD371C, &type metadata for AwardCanvasPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE450);
  }
  return result;
}

unint64_t sub_23BD8FBF8()
{
  unint64_t result;

  result = qword_256AAE458;
  if (!qword_256AAE458)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for PlaceholderReferenceType, &type metadata for PlaceholderReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AAE458);
  }
  return result;
}

uint64_t AwardCanvasPlaceholder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE460);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD8FBB4();
  sub_23BDCE0C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v22 = 0;
  v9 = sub_23BDCDF64();
  v11 = v10;
  v20 = 1;
  sub_23BD8FE1C();
  swift_bridgeObjectRetain();
  sub_23BDCDF94();
  v18 = v21;
  v19 = 2;
  v13 = sub_23BDCDF4C();
  v14 = v8;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v16 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BD8FE1C()
{
  unint64_t result;

  result = qword_256AAE468;
  if (!qword_256AAE468)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for PlaceholderReferenceType, &type metadata for PlaceholderReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AAE468);
  }
  return result;
}

uint64_t sub_23BD8FE60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardCanvasPlaceholder.init(from:)(a1, a2);
}

uint64_t sub_23BD8FE74(_QWORD *a1)
{
  return AwardCanvasPlaceholder.encode(to:)(a1);
}

void AwardCanvasPlaceholder.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_23BD8FF00()
{
  int v0;

  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  if (v0)
    return sub_23BDCE09C();
  sub_23BDCE09C();
  return sub_23BDCE0A8();
}

void AwardCanvasPlaceholder.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23BDCE084();
  sub_23BDCDD90();
  __asm { BR              X9 }
}

uint64_t sub_23BD90088()
{
  int v0;

  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  if (!v0)
    sub_23BDCE0A8();
  return sub_23BDCE0B4();
}

void sub_23BD901AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23BDCDD90();
  __asm { BR              X9 }
}

uint64_t sub_23BD90208()
{
  char v0;

  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  if ((v0 & 1) != 0)
    return sub_23BDCE09C();
  sub_23BDCE09C();
  return sub_23BDCE0A8();
}

void sub_23BD90318()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  sub_23BDCE084();
  sub_23BDCDD90();
  __asm { BR              X9 }
}

uint64_t sub_23BD90388()
{
  int v0;

  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  if (!v0)
    sub_23BDCE0A8();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards22AwardCanvasPlaceholderV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  double v3;
  char v4;
  double v5;
  char v6;
  BOOL v7;
  char v8;
  uint64_t result;
  char v10;
  char v11;

  v2 = *(_BYTE *)(a1 + 16);
  v3 = *(double *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(double *)(a2 + 24);
  v6 = *(_BYTE *)(a2 + 32);
  v7 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v7 || (v8 = sub_23BDCE024(), result = 0, (v8 & 1) != 0))
  {
    sub_23BD894BC(v2);
    if ((v10 & 1) == 0)
      return 0;
    if ((v4 & 1) != 0)
    {
      if ((v6 & 1) == 0)
        return 0;
    }
    else
    {
      if (v3 == v5)
        v11 = v6;
      else
        v11 = 1;
      if ((v11 & 1) != 0)
        return 0;
    }
    return 1;
  }
  return result;
}

unint64_t sub_23BD90554()
{
  unint64_t result;

  result = qword_256AAE470;
  if (!qword_256AAE470)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasPlaceholder, &type metadata for AwardCanvasPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AAE470);
  }
  return result;
}

uint64_t initializeWithCopy for AwardCanvasPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AwardCanvasPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for AwardCanvasPlaceholder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for AwardCanvasPlaceholder()
{
  return &type metadata for AwardCanvasPlaceholder;
}

uint64_t storeEnumTagSinglePayload for AwardCanvasPlaceholder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD906E8 + 4 * byte_23BDD3569[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD9071C + 4 * byte_23BDD3564[v4]))();
}

uint64_t sub_23BD9071C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD90724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD9072CLL);
  return result;
}

uint64_t sub_23BD90738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD90740);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD90744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9074C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardCanvasPlaceholder.CodingKeys()
{
  return &type metadata for AwardCanvasPlaceholder.CodingKeys;
}

unint64_t sub_23BD9076C()
{
  unint64_t result;

  result = qword_256AAE478;
  if (!qword_256AAE478)
  {
    result = MEMORY[0x242611F78](&unk_23BDD36F4, &type metadata for AwardCanvasPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE478);
  }
  return result;
}

unint64_t sub_23BD907B4()
{
  unint64_t result;

  result = qword_256AAE480;
  if (!qword_256AAE480)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3664, &type metadata for AwardCanvasPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE480);
  }
  return result;
}

unint64_t sub_23BD907FC()
{
  unint64_t result;

  result = qword_256AAE488;
  if (!qword_256AAE488)
  {
    result = MEMORY[0x242611F78](&unk_23BDD368C, &type metadata for AwardCanvasPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE488);
  }
  return result;
}

uint64_t sub_23BD90840(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xED00006570795465 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t AwardLockupEnvironment.init(navigateToDetail:resolveAwardDescription:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

ValueMetadata *type metadata accessor for AwardLockupEnvironment()
{
  return &type metadata for AwardLockupEnvironment;
}

BOOL static RemoteBrowsingIdentity.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23BD909C8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7069636974726170;
  else
    return 0x756F6D796E6F6E61;
}

uint64_t sub_23BD90A0C()
{
  sub_23BD90D80();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD90A34()
{
  sub_23BD90D80();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD90A5C()
{
  char *v0;

  return sub_23BD909C8(*v0);
}

uint64_t sub_23BD90A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD90E88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD90A88()
{
  sub_23BD90CF8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD90AB0()
{
  sub_23BD90CF8();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD90AD8()
{
  sub_23BD90D3C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD90B00()
{
  sub_23BD90D3C();
  return sub_23BDCE0E4();
}

uint64_t RemoteBrowsingIdentity.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE490);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE498);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE4A0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD90CF8();
  sub_23BDCE0CC();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_23BD90D3C();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_23BD90D80();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_23BD90CF8()
{
  unint64_t result;

  result = qword_256AAE4A8;
  if (!qword_256AAE4A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3AF0, &type metadata for RemoteBrowsingIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4A8);
  }
  return result;
}

unint64_t sub_23BD90D3C()
{
  unint64_t result;

  result = qword_256AAE4B0;
  if (!qword_256AAE4B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3AA0, &type metadata for RemoteBrowsingIdentity.ParticipantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4B0);
  }
  return result;
}

unint64_t sub_23BD90D80()
{
  unint64_t result;

  result = qword_256AAE4B8;
  if (!qword_256AAE4B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3A50, &type metadata for RemoteBrowsingIdentity.AnonymousCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4B8);
  }
  return result;
}

uint64_t RemoteBrowsingIdentity.init(from:)(_QWORD *a1)
{
  return sub_23BD90F88(a1) & 1;
}

uint64_t sub_23BD90DDC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23BD90F88(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_23BD90E08(_QWORD *a1)
{
  unsigned __int8 *v1;

  return RemoteBrowsingIdentity.encode(to:)(a1, *v1);
}

uint64_t RemoteBrowsingIdentity.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t RemoteBrowsingIdentity.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD90E88(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x756F6D796E6F6E61 && a2 == 0xE900000000000073;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7069636974726170 && a2 == 0xEB00000000746E61)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BD90F88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE500);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE508);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE510);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD90CF8();
  v10 = v26;
  sub_23BDCE0C0();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_23BDCDFA0();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_23BDCDEC8();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v19 = &type metadata for RemoteBrowsingIdentity;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_23BD90D3C();
    sub_23BDCDF28();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_23BD90D80();
    sub_23BDCDF28();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v6;
}

unint64_t sub_23BD912B8()
{
  unint64_t result;

  result = qword_256AAE4C0;
  if (!qword_256AAE4C0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for RemoteBrowsingIdentity, &type metadata for RemoteBrowsingIdentity);
    atomic_store(result, (unint64_t *)&qword_256AAE4C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteBrowsingIdentity()
{
  return &type metadata for RemoteBrowsingIdentity;
}

uint64_t _s13FitnessAwards22RemoteBrowsingIdentityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD9135C + 4 * byte_23BDD37C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD91390 + 4 * asc_23BDD37C0[v4]))();
}

uint64_t sub_23BD91390(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD91398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD913A0);
  return result;
}

uint64_t sub_23BD913AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD913B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD913B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD913C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteBrowsingIdentity.CodingKeys()
{
  return &type metadata for RemoteBrowsingIdentity.CodingKeys;
}

ValueMetadata *type metadata accessor for RemoteBrowsingIdentity.AnonymousCodingKeys()
{
  return &type metadata for RemoteBrowsingIdentity.AnonymousCodingKeys;
}

ValueMetadata *type metadata accessor for RemoteBrowsingIdentity.ParticipantCodingKeys()
{
  return &type metadata for RemoteBrowsingIdentity.ParticipantCodingKeys;
}

unint64_t sub_23BD91400()
{
  unint64_t result;

  result = qword_256AAE4C8;
  if (!qword_256AAE4C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3A28, &type metadata for RemoteBrowsingIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4C8);
  }
  return result;
}

unint64_t sub_23BD91448()
{
  unint64_t result;

  result = qword_256AAE4D0;
  if (!qword_256AAE4D0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3948, &type metadata for RemoteBrowsingIdentity.AnonymousCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4D0);
  }
  return result;
}

unint64_t sub_23BD91490()
{
  unint64_t result;

  result = qword_256AAE4D8;
  if (!qword_256AAE4D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3970, &type metadata for RemoteBrowsingIdentity.AnonymousCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4D8);
  }
  return result;
}

unint64_t sub_23BD914D8()
{
  unint64_t result;

  result = qword_256AAE4E0;
  if (!qword_256AAE4E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD38F8, &type metadata for RemoteBrowsingIdentity.ParticipantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4E0);
  }
  return result;
}

unint64_t sub_23BD91520()
{
  unint64_t result;

  result = qword_256AAE4E8;
  if (!qword_256AAE4E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3920, &type metadata for RemoteBrowsingIdentity.ParticipantCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4E8);
  }
  return result;
}

unint64_t sub_23BD91568()
{
  unint64_t result;

  result = qword_256AAE4F0;
  if (!qword_256AAE4F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3998, &type metadata for RemoteBrowsingIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4F0);
  }
  return result;
}

unint64_t sub_23BD915B0()
{
  unint64_t result;

  result = qword_256AAE4F8;
  if (!qword_256AAE4F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD39C0, &type metadata for RemoteBrowsingIdentity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE4F8);
  }
  return result;
}

BOOL static AchievementEnvironmentCacheMonitorAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AchievementEnvironmentCacheMonitorAction.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BD91634(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6570704177656976;
  else
    return 0xD000000000000010;
}

uint64_t sub_23BD91678()
{
  sub_23BD919F0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD916A0()
{
  sub_23BD919F0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD916C8()
{
  char *v0;

  return sub_23BD91634(*v0);
}

uint64_t sub_23BD916D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD92138(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD916F4()
{
  sub_23BD91968();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9171C()
{
  sub_23BD91968();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD91744()
{
  sub_23BD919AC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9176C()
{
  sub_23BD919AC();
  return sub_23BDCE0E4();
}

uint64_t AchievementEnvironmentCacheMonitorAction.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE518);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE520);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE528);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD91968();
  sub_23BDCE0CC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BD919AC();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BD919F0();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BD91968()
{
  unint64_t result;

  result = qword_256AAE530;
  if (!qword_256AAE530)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3E80, &type metadata for AchievementEnvironmentCacheMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE530);
  }
  return result;
}

unint64_t sub_23BD919AC()
{
  unint64_t result;

  result = qword_256AAE538;
  if (!qword_256AAE538)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3E30, &type metadata for AchievementEnvironmentCacheMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE538);
  }
  return result;
}

unint64_t sub_23BD919F0()
{
  unint64_t result;

  result = qword_256AAE540;
  if (!qword_256AAE540)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3DE0, &type metadata for AchievementEnvironmentCacheMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE540);
  }
  return result;
}

uint64_t AchievementEnvironmentCacheMonitorAction.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t AchievementEnvironmentCacheMonitorAction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE548);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE550);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE558);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD91968();
  v11 = v33;
  sub_23BDCE0C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BDCDFA0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for AchievementEnvironmentCacheMonitorAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BD919AC();
    sub_23BDCDF28();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BD919F0();
    v22 = v6;
    sub_23BDCDF28();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23BD91DD0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AchievementEnvironmentCacheMonitorAction.init(from:)(a1, a2);
}

uint64_t sub_23BD91DE4(_QWORD *a1)
{
  return AchievementEnvironmentCacheMonitorAction.encode(to:)(a1);
}

unint64_t sub_23BD91DFC()
{
  unint64_t result;

  result = qword_256AAE560;
  if (!qword_256AAE560)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AchievementEnvironmentCacheMonitorAction, &type metadata for AchievementEnvironmentCacheMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAE560);
  }
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorAction()
{
  return &type metadata for AchievementEnvironmentCacheMonitorAction;
}

uint64_t _s13FitnessAwards40AchievementEnvironmentCacheMonitorActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD91EA0 + 4 * byte_23BDD3B45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD91ED4 + 4 * byte_23BDD3B40[v4]))();
}

uint64_t sub_23BD91ED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD91EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD91EE4);
  return result;
}

uint64_t sub_23BD91EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD91EF8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD91EFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD91F04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorAction.CodingKeys()
{
  return &type metadata for AchievementEnvironmentCacheMonitorAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorAction.ClearAwardStatesCodingKeys()
{
  return &type metadata for AchievementEnvironmentCacheMonitorAction.ClearAwardStatesCodingKeys;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorAction.ViewAppearedCodingKeys()
{
  return &type metadata for AchievementEnvironmentCacheMonitorAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BD91F44()
{
  unint64_t result;

  result = qword_256AAE568;
  if (!qword_256AAE568)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3DB8, &type metadata for AchievementEnvironmentCacheMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE568);
  }
  return result;
}

unint64_t sub_23BD91F8C()
{
  unint64_t result;

  result = qword_256AAE570;
  if (!qword_256AAE570)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3CD8, &type metadata for AchievementEnvironmentCacheMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE570);
  }
  return result;
}

unint64_t sub_23BD91FD4()
{
  unint64_t result;

  result = qword_256AAE578;
  if (!qword_256AAE578)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3D00, &type metadata for AchievementEnvironmentCacheMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE578);
  }
  return result;
}

unint64_t sub_23BD9201C()
{
  unint64_t result;

  result = qword_256AAE580;
  if (!qword_256AAE580)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3C88, &type metadata for AchievementEnvironmentCacheMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE580);
  }
  return result;
}

unint64_t sub_23BD92064()
{
  unint64_t result;

  result = qword_256AAE588;
  if (!qword_256AAE588)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3CB0, &type metadata for AchievementEnvironmentCacheMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE588);
  }
  return result;
}

unint64_t sub_23BD920AC()
{
  unint64_t result;

  result = qword_256AAE590;
  if (!qword_256AAE590)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3D28, &type metadata for AchievementEnvironmentCacheMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE590);
  }
  return result;
}

unint64_t sub_23BD920F4()
{
  unint64_t result;

  result = qword_256AAE598;
  if (!qword_256AAE598)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3D50, &type metadata for AchievementEnvironmentCacheMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE598);
  }
  return result;
}

uint64_t sub_23BD92138(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA6F0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AwardToastDetail.init(templateUniqueNames:title:subtitle:imageData:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t AwardToastDetail.templateUniqueNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardToastDetail.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardToastDetail.subtitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardToastDetail.imageData.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23BD922AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD922E4 + 4 * byte_23BDD3ED0[a1]))(0xD000000000000013, 0x800000023BDDA710);
}

uint64_t sub_23BD922E4()
{
  return 0x656C746974;
}

uint64_t sub_23BD922F8()
{
  return 0x656C746974627573;
}

uint64_t sub_23BD92310()
{
  return 0x7461446567616D69;
}

uint64_t sub_23BD9232C()
{
  unsigned __int8 *v0;

  return sub_23BD922AC(*v0);
}

uint64_t sub_23BD92334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD94954(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD92358()
{
  sub_23BD925B4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD92380()
{
  sub_23BD925B4();
  return sub_23BDCE0E4();
}

uint64_t AwardToastDetail.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE5A0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13[3] = v1[2];
  v13[4] = v8;
  v10 = v1[3];
  v13[1] = v1[4];
  v13[2] = v10;
  v13[0] = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD925B4();
  sub_23BDCE0CC();
  v15 = v9;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AADEB0);
  sub_23BD80CF0(&qword_256AADEB8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_23BDCE00C();
  if (!v2)
  {
    v11 = v13[0];
    LOBYTE(v15) = 1;
    sub_23BDCDFDC();
    LOBYTE(v15) = 2;
    sub_23BDCDFB8();
    v15 = v11;
    v14 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE5B0);
    sub_23BD9299C(&qword_256AAE5B8, (uint64_t (*)(void))sub_23BD925F8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BD925B4()
{
  unint64_t result;

  result = qword_256AAE5A8;
  if (!qword_256AAE5A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4084, &type metadata for AwardToastDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE5A8);
  }
  return result;
}

unint64_t sub_23BD925F8()
{
  unint64_t result;

  result = qword_256AAE5C0;
  if (!qword_256AAE5C0)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256AAE5C0);
  }
  return result;
}

uint64_t AwardToastDetail.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE5C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD925B4();
  sub_23BDCE0C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AADEB0);
  v26 = 0;
  sub_23BD80CF0(&qword_256AADEF8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_23BDCDF94();
  v9 = v27;
  LOBYTE(v27) = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23BDCDF64();
  v25 = v11;
  v23 = v10;
  v24 = v9;
  LOBYTE(v27) = 2;
  swift_bridgeObjectRetain();
  v21 = sub_23BDCDF40();
  v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE5B0);
  v26 = 3;
  sub_23BD9299C(&qword_256AAE5D0, (uint64_t (*)(void))sub_23BD92A10, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  v22 = v13;
  swift_bridgeObjectRetain();
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v27;
  v16 = v24;
  swift_bridgeObjectRetain();
  v17 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v22;
  v18 = v23;
  *a2 = v16;
  a2[1] = v18;
  v20 = v21;
  a2[2] = v17;
  a2[3] = v20;
  a2[4] = v19;
  a2[5] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD9299C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAE5B0);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x242611F78](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD92A10()
{
  unint64_t result;

  result = qword_256AAE5D8;
  if (!qword_256AAE5D8)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256AAE5D8);
  }
  return result;
}

uint64_t sub_23BD92A54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AwardToastDetail.init(from:)(a1, a2);
}

uint64_t sub_23BD92A68(_QWORD *a1)
{
  return AwardToastDetail.encode(to:)(a1);
}

uint64_t AwardToastDetail.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v5 = v1[4];
  v4 = v1[5];
  sub_23BDCE090();
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      swift_bridgeObjectRelease();
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  sub_23BDCE09C();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23BD94264(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t AwardToastDetail.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 5);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_23BDCE084();
  AwardToastDetail.hash(into:)((uint64_t)v4);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD92C0C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 5);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_23BDCE084();
  AwardToastDetail.hash(into:)((uint64_t)v4);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD92C70()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = *((_QWORD *)v0 + 2);
  v2 = *((_QWORD *)v0 + 5);
  v5 = *v0;
  v6 = v1;
  v7 = *(__int128 *)((char *)v0 + 24);
  v8 = v2;
  sub_23BDCE084();
  AwardToastDetail.hash(into:)((uint64_t)v4);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD92CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int64_t v19;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;

  v18 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v22 = v3 & *(_QWORD *)(a2 + 64);
  v19 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v4 = 0;
  v5 = 0;
  while (1)
  {
    if (v22)
    {
      v7 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v21 = v5;
      v8 = v7 | (v5 << 6);
      goto LABEL_20;
    }
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v9 >= v19)
      goto LABEL_29;
    v10 = *(_QWORD *)(v18 + 8 * v9);
    v11 = v5 + 1;
    if (!v10)
    {
      v11 = v5 + 2;
      if (v5 + 2 >= v19)
        goto LABEL_29;
      v10 = *(_QWORD *)(v18 + 8 * v11);
      if (!v10)
        break;
    }
LABEL_19:
    v22 = (v10 - 1) & v10;
    v21 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    sub_23BD58A70(v13);
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
    if (v13 < 2)
    {
      sub_23BDCE090();
    }
    else
    {
      sub_23BDCE090();
      sub_23BDCE090();
      v23 = *(_QWORD *)(v13 + 16);
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v15 = *(_QWORD *)(v13 + 32 + 40 * i + 32);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_23BDCDD90();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_23BDCDD90();
          swift_bridgeObjectRelease();
          sub_23BDCE090();
          if (*(_QWORD *)(v15 + 16))
          {
            swift_bridgeObjectRetain();
            v16 = *(unsigned __int8 *)(v15 + 48);
            swift_bridgeObjectRetain();
            sub_23BDCDD90();
            __asm { BR              X8 }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      sub_23BD58AA8(v13);
    }
    v6 = sub_23BDCE0B4();
    v5 = v21;
    v4 ^= v6;
  }
  v12 = v5 + 3;
  if (v5 + 3 < v19)
  {
    v10 = *(_QWORD *)(v18 + 8 * v12);
    if (!v10)
    {
      while (1)
      {
        v11 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        if (v11 >= v19)
          goto LABEL_29;
        v10 = *(_QWORD *)(v18 + 8 * v11);
        ++v12;
        if (v10)
          goto LABEL_19;
      }
LABEL_31:
      __break(1u);
      JUMPOUT(0x23BD93150);
    }
    v11 = v5 + 3;
    goto LABEL_19;
  }
LABEL_29:
  swift_release();
  return sub_23BDCE090();
}

uint64_t sub_23BD93174(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t State;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int EnumCaseMultiPayload;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v4 = sub_23BDCD58C();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  v57 = *(_QWORD *)(State - 8);
  v7 = MEMORY[0x24BDAC7A8](State);
  v59 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v60 = (uint64_t)&v48 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE600);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - v14;
  v16 = *(_QWORD *)(a2 + 64);
  v50 = a2 + 64;
  v17 = 1 << *(_BYTE *)(a2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v56 = (unint64_t)(v17 + 63) >> 6;
  v49 = v56 - 1;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v58 = 0;
  v51 = State;
  v52 = a2;
  while (1)
  {
    v61 = v21;
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v58 << 6);
      goto LABEL_8;
    }
    v32 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v32 < v56)
    {
      v33 = *(_QWORD *)(v50 + 8 * v32);
      if (v33)
        goto LABEL_12;
      v34 = v58 + 2;
      ++v58;
      if (v32 + 1 < v56)
      {
        v33 = *(_QWORD *)(v50 + 8 * v34);
        if (v33)
        {
          ++v32;
          goto LABEL_12;
        }
        v35 = v32 + 2;
        v58 = v32 + 1;
        if (v32 + 2 < v56)
          break;
      }
    }
LABEL_24:
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v13, 1, 1, v36);
    v19 = 0;
LABEL_25:
    sub_23BD6A054((uint64_t)v13, (uint64_t)v15, &qword_256AAE600);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v15, 1, v37) == 1)
    {
      swift_release();
      return sub_23BDCE090();
    }
    v38 = v60;
    sub_23BD7686C((uint64_t)&v15[*(int *)(v37 + 48)], v60, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v39 = *((_QWORD *)a1 + 8);
    v40 = a1[1];
    v62 = *a1;
    v63 = v40;
    v41 = a1[3];
    v64 = a1[2];
    v65 = v41;
    v66 = v39;
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
    sub_23BD594E4(v38, v59, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v44 = *(_QWORD *)v59;
        v43 = *(_QWORD *)(v59 + 8);
        v46 = *(_QWORD *)(v59 + 16);
        v45 = *(_QWORD *)(v59 + 24);
        v47 = *(_BYTE *)(v59 + 32);
        sub_23BDCE090();
        sub_23BDCE090();
        if ((v47 & 1) != 0)
        {
          sub_23BDCE090();
          sub_23BDCE09C();
          sub_23BDCE090();
        }
        else
        {
          sub_23BDCDD90();
          sub_23BDCE0A8();
          sub_23BDCE0A8();
          sub_23BD5F110(v44, v43, v46, v45, 0);
        }
        a2 = v52;
      }
      else
      {
        sub_23BDCE090();
      }
    }
    else
    {
      v23 = v53;
      v22 = v54;
      v24 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v53, v59, v55);
      sub_23BDCE090();
      sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_23BDCDCF4();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v24);
    }
    sub_23BD59BB4(v60, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    result = sub_23BDCE0B4();
    v21 = result ^ v61;
  }
  v33 = *(_QWORD *)(v50 + 8 * v35);
  if (v33)
  {
    v32 += 2;
LABEL_12:
    v19 = (v33 - 1) & v33;
    v26 = __clz(__rbit64(v33)) + (v32 << 6);
    v58 = v32;
LABEL_8:
    v27 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v26);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v57 + 72) * v26;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
    sub_23BD594E4(v30, (uint64_t)v13 + *(int *)(v31 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    *v13 = v29;
    v13[1] = v28;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 0, 1, v31);
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  while (1)
  {
    v32 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v32 >= v56)
    {
      v58 = v49;
      goto LABEL_24;
    }
    v33 = *(_QWORD *)(v50 + 8 * v32);
    ++v35;
    if (v33)
      goto LABEL_12;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_23BD9369C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21[4];
  uint64_t v22;

  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v7)
    {
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v18 >= v8)
      goto LABEL_19;
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v8)
        goto LABEL_19;
      v19 = *(_QWORD *)(v4 + 8 * v11);
      if (!v19)
        break;
    }
LABEL_18:
    v7 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v13);
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(_OWORD *)(a1 + 16);
    v21[0] = *(_OWORD *)a1;
    v21[1] = v16;
    v17 = *(_OWORD *)(a1 + 48);
    v21[2] = *(_OWORD *)(a1 + 32);
    v21[3] = v17;
    v22 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
    sub_23BD9384C(v21, v14);
    swift_bridgeObjectRelease();
    result = sub_23BDCE0B4();
    v10 ^= result;
  }
  v20 = v18 + 2;
  if (v20 >= v8)
  {
LABEL_19:
    swift_release();
    return sub_23BDCE090();
  }
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v8)
      goto LABEL_19;
    v19 = *(_QWORD *)(v4 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23BD9384C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  int EnumCaseMultiPayload;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t State;
  int64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v4 = sub_23BDCD544();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_23BDCD58C();
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  v59 = *(_QWORD *)(State - 8);
  v7 = MEMORY[0x24BDAC7A8](State);
  v63 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v50 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE610);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (int64_t *)((char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v50 - v15;
  v17 = *(_QWORD *)(a2 + 64);
  v51 = a2 + 64;
  v18 = 1 << *(_BYTE *)(a2 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v58 = (unint64_t)(v18 + 63) >> 6;
  v50 = v58 - 1;
  v60 = a2;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v62 = 0;
  while (1)
  {
    if (v20)
    {
      v28 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v29 = v28 | (v62 << 6);
      goto LABEL_8;
    }
    v35 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v35 < v58)
    {
      v36 = *(_QWORD *)(v51 + 8 * v35);
      if (v36)
        goto LABEL_12;
      v37 = v62 + 2;
      ++v62;
      if (v35 + 1 < v58)
      {
        v36 = *(_QWORD *)(v51 + 8 * v37);
        if (v36)
        {
          ++v35;
          goto LABEL_12;
        }
        v38 = v35 + 2;
        v62 = v35 + 1;
        if (v35 + 2 < v58)
          break;
      }
    }
LABEL_24:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v14, 1, 1, v39);
    v20 = 0;
LABEL_25:
    sub_23BD6A054((uint64_t)v14, (uint64_t)v16, &qword_256AAE610);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v16, 1, v40) == 1)
    {
      swift_release();
      return sub_23BDCE090();
    }
    sub_23BD7686C((uint64_t)&v16[*(int *)(v40 + 48)], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v41 = *((_QWORD *)a1 + 8);
    v42 = a1[1];
    v64 = *a1;
    v65 = v42;
    v43 = a1[3];
    v66 = a1[2];
    v67 = v43;
    v68 = v41;
    sub_23BDCE0A8();
    sub_23BDCE0A8();
    sub_23BD594E4((uint64_t)v10, v63, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v24 = v56;
        v23 = v57;
        v25 = v22;
        v26 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v55, v63, v57);
        sub_23BDCE090();
        sub_23BD6B5DC(&qword_256AAE620, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
        sub_23BDCDCF4();
        v27 = v26;
        v22 = v25;
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      }
      else
      {
        sub_23BDCE090();
      }
    }
    else
    {
      v45 = v53;
      v46 = v52;
      v47 = v22;
      v48 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v52, v63, v54);
      sub_23BDCE090();
      sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_23BDCDCF4();
      v49 = v48;
      v22 = v47;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v49);
    }
    sub_23BD59BB4((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    result = sub_23BDCE0B4();
    v22 ^= result;
  }
  v36 = *(_QWORD *)(v51 + 8 * v38);
  if (v36)
  {
    v35 += 2;
LABEL_12:
    v20 = (v36 - 1) & v36;
    v29 = __clz(__rbit64(v36)) + (v35 << 6);
    v62 = v35;
LABEL_8:
    v30 = (uint64_t *)(*(_QWORD *)(v60 + 48) + 16 * v29);
    v31 = *v30;
    v32 = v30[1];
    v33 = *(_QWORD *)(v60 + 56) + *(_QWORD *)(v59 + 72) * v29;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
    sub_23BD594E4(v33, (uint64_t)v14 + *(int *)(v34 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    *v14 = v31;
    v14[1] = v32;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 0, 1, v34);
    goto LABEL_25;
  }
  while (1)
  {
    v35 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v35 >= v58)
    {
      v62 = v50;
      goto LABEL_24;
    }
    v36 = *(_QWORD *)(v51 + 8 * v35);
    ++v38;
    if (v36)
      goto LABEL_12;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23BD93DC0(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t State;
  int64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v4 = sub_23BDCD58C();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardEarnedLoadState();
  v49 = *(_QWORD *)(State - 8);
  v6 = MEMORY[0x24BDAC7A8](State);
  v53 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v42 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE628);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v42 - v14;
  v16 = *(_QWORD *)(a2 + 64);
  v44 = a2 + 64;
  v17 = 1 << *(_BYTE *)(a2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v43 = v48 - 1;
  v50 = a2;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  v52 = 0;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v23 = v22 | (v52 << 6);
      goto LABEL_9;
    }
    v29 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v29 < v48)
    {
      v30 = *(_QWORD *)(v44 + 8 * v29);
      if (v30)
        goto LABEL_13;
      v31 = v52 + 2;
      ++v52;
      if (v29 + 1 < v48)
      {
        v30 = *(_QWORD *)(v44 + 8 * v31);
        if (v30)
        {
          ++v29;
          goto LABEL_13;
        }
        v32 = v29 + 2;
        v52 = v29 + 1;
        if (v29 + 2 < v48)
          break;
      }
    }
LABEL_25:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE630);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v13, 1, 1, v33);
    v19 = 0;
LABEL_26:
    sub_23BD6A054((uint64_t)v13, (uint64_t)v15, &qword_256AAE628);
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE630);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v15, 1, v34) == 1)
    {
      swift_release();
      return sub_23BDCE090();
    }
    sub_23BD7686C((uint64_t)&v15[*(int *)(v34 + 48)], (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    v35 = *((_QWORD *)a1 + 8);
    v36 = a1[1];
    v54 = *a1;
    v55 = v36;
    v37 = a1[3];
    v56 = a1[2];
    v57 = v37;
    v58 = v35;
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
    sub_23BD594E4((uint64_t)v9, v53, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
        sub_23BDCE090();
      sub_23BDCE090();
    }
    else
    {
      v40 = v45;
      v39 = v46;
      v41 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v45, v53, v47);
      sub_23BDCE090();
      sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_23BDCDCF4();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    }
    sub_23BD59BB4((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    result = sub_23BDCE0B4();
    v21 ^= result;
  }
  v30 = *(_QWORD *)(v44 + 8 * v32);
  if (v30)
  {
    v29 += 2;
LABEL_13:
    v19 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v29 << 6);
    v52 = v29;
LABEL_9:
    v24 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * v23);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(v50 + 56) + *(_QWORD *)(v49 + 72) * v23;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE630);
    sub_23BD594E4(v27, (uint64_t)v13 + *(int *)(v28 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    *v13 = v26;
    v13[1] = v25;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
    swift_bridgeObjectRetain();
    goto LABEL_26;
  }
  while (1)
  {
    v29 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v29 >= v48)
    {
      v52 = v43;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(v44 + 8 * v29);
    ++v32;
    if (v30)
      goto LABEL_13;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_23BD94264(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v18 = a2 + 64;
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v15 >= v6)
      goto LABEL_19;
    v16 = *(_QWORD *)(v18 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v6)
        goto LABEL_19;
      v16 = *(_QWORD *)(v18 + 8 * v9);
      if (!v16)
        break;
    }
LABEL_18:
    v5 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain();
    sub_23BD7A51C(v13, v14);
    sub_23BDCDD90();
    swift_bridgeObjectRelease();
    sub_23BDCD55C();
    sub_23BD7A560(v13, v14);
    result = sub_23BDCE0B4();
    v8 ^= result;
  }
  v17 = v15 + 2;
  if (v17 >= v6)
  {
LABEL_19:
    swift_release();
    return sub_23BDCE090();
  }
  v16 = *(_QWORD *)(v18 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v6)
      goto LABEL_19;
    v16 = *(_QWORD *)(v18 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s13FitnessAwards16AwardToastDetailV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  if ((sub_23BD88B94(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0 && (v2 == v7 && v4 == v9 || (sub_23BDCE024() & 1) != 0))
  {
    if (v6)
    {
      if (v11 && (v3 == v8 && v6 == v11 || (sub_23BDCE024() & 1) != 0))
        return sub_23BDCA420(v5, v10);
    }
    else if (!v11)
    {
      return sub_23BDCA420(v5, v10);
    }
  }
  return 0;
}

unint64_t sub_23BD94520()
{
  unint64_t result;

  result = qword_256AAE5E0;
  if (!qword_256AAE5E0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastDetail, &type metadata for AwardToastDetail);
    atomic_store(result, (unint64_t *)&qword_256AAE5E0);
  }
  return result;
}

uint64_t destroy for AwardToastDetail()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AwardToastDetail(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AwardToastDetail(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AwardToastDetail(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastDetail(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastDetail(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastDetail()
{
  return &type metadata for AwardToastDetail;
}

uint64_t storeEnumTagSinglePayload for AwardToastDetail.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD947FC + 4 * byte_23BDD3ED9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD94830 + 4 * byte_23BDD3ED4[v4]))();
}

uint64_t sub_23BD94830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD94838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD94840);
  return result;
}

uint64_t sub_23BD9484C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD94854);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD94858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD94860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastDetail.CodingKeys()
{
  return &type metadata for AwardToastDetail.CodingKeys;
}

unint64_t sub_23BD94880()
{
  unint64_t result;

  result = qword_256AAE5E8;
  if (!qword_256AAE5E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD405C, &type metadata for AwardToastDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE5E8);
  }
  return result;
}

unint64_t sub_23BD948C8()
{
  unint64_t result;

  result = qword_256AAE5F0;
  if (!qword_256AAE5F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3FCC, &type metadata for AwardToastDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE5F0);
  }
  return result;
}

unint64_t sub_23BD94910()
{
  unint64_t result;

  result = qword_256AAE5F8;
  if (!qword_256AAE5F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD3FF4, &type metadata for AwardToastDetail.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE5F8);
  }
  return result;
}

uint64_t sub_23BD94954(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000013 && a2 == 0x800000023BDDA710 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461446567616D69 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23BD94AF8(_OWORD *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)(v2 + 320) = a2;
  v3 = a1[7];
  *(_OWORD *)(v2 + 112) = a1[6];
  *(_OWORD *)(v2 + 128) = v3;
  *(_OWORD *)(v2 + 144) = a1[8];
  v4 = a1[3];
  *(_OWORD *)(v2 + 48) = a1[2];
  *(_OWORD *)(v2 + 64) = v4;
  v5 = a1[5];
  *(_OWORD *)(v2 + 80) = a1[4];
  *(_OWORD *)(v2 + 96) = v5;
  v6 = a1[1];
  *(_OWORD *)(v2 + 16) = *a1;
  *(_OWORD *)(v2 + 32) = v6;
  return swift_task_switch();
}

uint64_t sub_23BD94B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;

  v1 = swift_bridgeObjectRetain();
  v2 = sub_23BD95D80(v1);
  *(_QWORD *)(v0 + 328) = v2;
  if (qword_256AACE00 != -1)
    swift_once();
  v3 = sub_23BDCD628();
  *(_QWORD *)(v0 + 336) = __swift_project_value_buffer(v3, (uint64_t)qword_256AAF4B0);
  swift_retain_n();
  v4 = sub_23BDCD610();
  v5 = sub_23BDCDE38();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v17 = v7;
    *(_DWORD *)v6 = 136315138;
    sub_23BD95EDC();
    swift_retain();
    v8 = sub_23BDCDE20();
    v10 = v9;
    swift_release();
    *(_QWORD *)(v0 + 312) = sub_23BD6E4F0(v8, v10, &v17);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23BD56000, v4, v5, "Earnable awards %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v7, -1, -1);
    MEMORY[0x242611FFC](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v11 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 272) = v11;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 144);
  v12 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 208) = v12;
  v13 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 240) = v13;
  v14 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 176) = v14;
  v15 = swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v15;
  *(_QWORD *)v15 = v0;
  *(_QWORD *)(v15 + 8) = sub_23BD94D90;
  *(_QWORD *)(v15 + 176) = v2;
  *(_OWORD *)(v15 + 184) = *(_OWORD *)(v0 + 288);
  return swift_task_switch();
}

uint64_t sub_23BD94D90(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BD94DF8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  swift_bridgeObjectRetain_n();
  v1 = sub_23BDCD610();
  v2 = sub_23BDCDE38();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v9 = v4;
    *(_DWORD *)v3 = 136315138;
    sub_23BD95EDC();
    swift_bridgeObjectRetain();
    v5 = sub_23BDCDE20();
    v7 = v6;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 304) = sub_23BD6E4F0(v5, v7, &v9);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v1, v2, "Awards eligible to present %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v4, -1, -1);
    MEMORY[0x242611FFC](v3, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 352));
}

uint64_t sub_23BD94F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a2;
  *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 128);
  return swift_task_switch();
}

uint64_t sub_23BD94FB8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t);

  *(_QWORD *)(v0 + 160) = MEMORY[0x24BEE4B08];
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 49) = v2;
  v3 = 1 << v2;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
    result = *(_QWORD *)(v0 + 176);
LABEL_6:
    *(_QWORD *)(v0 + 200) = v7;
    *(_QWORD *)(v0 + 208) = v5;
    v10 = *(_QWORD *)(result + 48) + 40 * v9;
    sub_23BD6B22C(v10, v0 + 56);
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v10 + 8);
    result = sub_23BD6B22C(v0 + 56, v0 + 16);
    if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    {
      v16 = *(int **)(v0 + 184);
      v17 = *(_QWORD *)(v0 + 16);
      v18 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 224) = v17;
      *(_QWORD *)(v0 + 232) = v18;
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
      v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)v16 + *v16);
      swift_bridgeObjectRetain();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v19;
      *v19 = v0;
      v19[1] = sub_23BD951D4;
      return v20(v17, v18);
    }
  }
  v11 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_25;
  }
  v12 = (unint64_t)((1 << *(_BYTE *)(v0 + 49)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 176);
  if (v11 >= v12)
    goto LABEL_23;
  v13 = result + 56;
  v14 = *(_QWORD *)(result + 56 + 8 * v11);
  ++v7;
  if (v14)
    goto LABEL_21;
  v7 = v11 + 1;
  if (v11 + 1 >= v12)
    goto LABEL_23;
  v14 = *(_QWORD *)(v13 + 8 * v7);
  if (v14)
    goto LABEL_21;
  v7 = v11 + 2;
  if (v11 + 2 >= v12)
    goto LABEL_23;
  v14 = *(_QWORD *)(v13 + 8 * v7);
  if (v14)
  {
LABEL_21:
    v5 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_6;
  }
  v15 = v11 + 3;
  if (v15 >= v12)
  {
LABEL_23:
    swift_release();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
  }
  v14 = *(_QWORD *)(v13 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v12)
      goto LABEL_23;
    v14 = *(_QWORD *)(v13 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23BD951D4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 50) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_23BD9524C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;

  if ((*(_BYTE *)(v0 + 50) & 1) != 0)
  {
    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    sub_23BD96444(v0 + 96, v0 + 56);
    sub_23BD5F110(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
  }
  else
  {
    if (qword_256AACE00 != -1)
LABEL_30:
      swift_once();
    v1 = sub_23BDCD628();
    __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
    swift_bridgeObjectRetain();
    v2 = sub_23BDCD610();
    v3 = sub_23BDCDE38();
    if (os_log_type_enabled(v2, v3))
    {
      v5 = *(_QWORD *)(v0 + 224);
      v4 = *(_QWORD *)(v0 + 232);
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v25 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v6 + 4) = sub_23BD6E4F0(v5, v4, &v25);
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23BD56000, v2, v3, "%s has already been toasted, not notifying", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v7, -1, -1);
      MEMORY[0x242611FFC](v6, -1, -1);
    }
    else
    {
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    }

    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
  }
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  while (v9)
  {
    v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v11 = v10 | (v8 << 6);
    v12 = *(_QWORD *)(v0 + 176);
LABEL_10:
    *(_QWORD *)(v0 + 200) = v8;
    *(_QWORD *)(v0 + 208) = v9;
    v13 = *(_QWORD *)(v12 + 48) + 40 * v11;
    sub_23BD6B22C(v13, v0 + 56);
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v13 + 8);
    sub_23BD6B22C(v0 + 56, v0 + 16);
    if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    {
      v19 = *(int **)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 16);
      v21 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 224) = v20;
      *(_QWORD *)(v0 + 232) = v21;
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
      v24 = (uint64_t (*)(uint64_t, uint64_t))((char *)v19 + *v19);
      swift_bridgeObjectRetain();
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v22;
      *v22 = v0;
      v22[1] = sub_23BD951D4;
      return v24(v20, v21);
    }
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 49)) + 63) >> 6;
  v12 = *(_QWORD *)(v0 + 176);
  if (v14 >= v15)
    goto LABEL_27;
  v16 = v12 + 56;
  v17 = *(_QWORD *)(v12 + 56 + 8 * v14);
  ++v8;
  if (v17)
    goto LABEL_25;
  v8 = v14 + 1;
  if (v14 + 1 >= v15)
    goto LABEL_27;
  v17 = *(_QWORD *)(v16 + 8 * v8);
  if (v17)
    goto LABEL_25;
  v8 = v14 + 2;
  if (v14 + 2 >= v15)
    goto LABEL_27;
  v17 = *(_QWORD *)(v16 + 8 * v8);
  if (v17)
  {
LABEL_25:
    v9 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_10;
  }
  v18 = v14 + 3;
  if (v18 < v15)
  {
    v17 = *(_QWORD *)(v16 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        v8 = v18 + 1;
        if (__OFADD__(v18, 1))
          goto LABEL_29;
        if (v8 >= v15)
          goto LABEL_27;
        v17 = *(_QWORD *)(v16 + 8 * v8);
        ++v18;
        if (v17)
          goto LABEL_25;
      }
    }
    v8 = v18;
    goto LABEL_25;
  }
LABEL_27:
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_23BD95600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  if (qword_256AACE00 != -1)
LABEL_27:
    swift_once();
  v1 = *(_QWORD *)(v0 + 248);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  MEMORY[0x242611E88](v1);
  sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 248);
  if (v5)
  {
    v8 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = swift_slowAlloc();
    v28 = swift_slowAlloc();
    v30 = v28;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v9 + 4) = sub_23BD6E4F0(v8, v7, &v30);
    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    v10 = sub_23BDCE048();
    *(_QWORD *)(v9 + 14) = sub_23BD6E4F0(v10, v11, &v30);
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "Toast eligibility query for %s failed with error %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v28, -1, -1);
    MEMORY[0x242611FFC](v9, -1, -1);

    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    MEMORY[0x242611E7C](v6);
  }
  else
  {
    MEMORY[0x242611E7C](*(_QWORD *)(v0 + 248));
    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);

    sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
  }
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  while (v13)
  {
    v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v15 = v14 | (v12 << 6);
    v16 = *(_QWORD *)(v0 + 176);
LABEL_7:
    *(_QWORD *)(v0 + 200) = v12;
    *(_QWORD *)(v0 + 208) = v13;
    v17 = *(_QWORD *)(v16 + 48) + 40 * v15;
    sub_23BD6B22C(v17, v0 + 56);
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v17 + 8);
    sub_23BD6B22C(v0 + 56, v0 + 16);
    if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    {
      v23 = *(int **)(v0 + 184);
      v24 = *(_QWORD *)(v0 + 16);
      v25 = *(_QWORD *)(v0 + 24);
      *(_QWORD *)(v0 + 224) = v24;
      *(_QWORD *)(v0 + 232) = v25;
      sub_23BD6F7A0(v0 + 56, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
      v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)v23 + *v23);
      swift_bridgeObjectRetain();
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v26;
      *v26 = v0;
      v26[1] = sub_23BD951D4;
      return v29(v24, v25);
    }
  }
  v18 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v19 = (unint64_t)((1 << *(_BYTE *)(v0 + 49)) + 63) >> 6;
  v16 = *(_QWORD *)(v0 + 176);
  if (v18 >= v19)
    goto LABEL_24;
  v20 = v16 + 56;
  v21 = *(_QWORD *)(v16 + 56 + 8 * v18);
  ++v12;
  if (v21)
    goto LABEL_22;
  v12 = v18 + 1;
  if (v18 + 1 >= v19)
    goto LABEL_24;
  v21 = *(_QWORD *)(v20 + 8 * v12);
  if (v21)
    goto LABEL_22;
  v12 = v18 + 2;
  if (v18 + 2 >= v19)
    goto LABEL_24;
  v21 = *(_QWORD *)(v20 + 8 * v12);
  if (v21)
  {
LABEL_22:
    v13 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_7;
  }
  v22 = v18 + 3;
  if (v22 < v19)
  {
    v21 = *(_QWORD *)(v20 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        v12 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_26;
        if (v12 >= v19)
          goto LABEL_24;
        v21 = *(_QWORD *)(v20 + 8 * v12);
        ++v22;
        if (v21)
          goto LABEL_22;
      }
    }
    v12 = v22;
    goto LABEL_22;
  }
LABEL_24:
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

uint64_t sub_23BD95A08()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE650);
  v3 = sub_23BDCDE98();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v33 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v8 = v3 + 56;
    result = swift_retain();
    v10 = 0;
    for (i = v2; ; v2 = i)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v10 << 6);
      }
      else
      {
        v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_36;
        v16 = v33[v15];
        ++v10;
        if (!v16)
        {
          v10 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_36;
          v16 = v33[v10];
          if (!v16)
          {
            v10 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_36;
            v16 = v33[v10];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_36:
                swift_release();
                v1 = v0;
                v31 = 1 << *(_BYTE *)(v2 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v33[v17];
              if (!v16)
              {
                while (1)
                {
                  v10 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v10 >= v32)
                    goto LABEL_36;
                  v16 = v33[v10];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v10 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(v18 + 8);
      v22 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v18 + 24);
      v23 = *(_BYTE *)(v18 + 32);
      sub_23BDCE084();
      sub_23BDCE090();
      if ((v23 & 1) != 0)
      {
        sub_23BDCE090();
        sub_23BDCE09C();
        sub_23BDCE090();
      }
      else
      {
        sub_23BDCDD90();
        sub_23BDCE0A8();
        sub_23BDCE0A8();
      }
      result = sub_23BDCE0B4();
      v24 = -1 << *(_BYTE *)(v4 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
      *(_QWORD *)v12 = v19;
      *(_QWORD *)(v12 + 8) = v20;
      *(_QWORD *)(v12 + 16) = v22;
      *(_QWORD *)(v12 + 24) = v21;
      *(_BYTE *)(v12 + 32) = v23;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23BD95D80(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_23BD95F20((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v6 = sub_23BD95F20((uint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  return v6;
}

unint64_t sub_23BD95EDC()
{
  unint64_t result;

  result = qword_256AAE648;
  if (!qword_256AAE648)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgress, &type metadata for AwardProgress);
    atomic_store(result, (unint64_t *)&qword_256AAE648);
  }
  return result;
}

uint64_t sub_23BD95F20(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v23;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    do
    {
      if (v11)
      {
        v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v14 = v13 | (v7 << 6);
      }
      else
      {
        v15 = __OFADD__(v7++, 1);
        if (v15)
          goto LABEL_42;
        if (v7 >= v12)
        {
LABEL_35:
          swift_retain();
          *(double *)&result = COERCE_DOUBLE(sub_23BD96128(v5, a2, v6, a3));
          return result;
        }
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
        {
          v17 = v7 + 1;
          if (v7 + 1 >= v12)
            goto LABEL_35;
          v16 = *(_QWORD *)(v8 + 8 * v17);
          if (!v16)
          {
            v17 = v7 + 2;
            if (v7 + 2 >= v12)
              goto LABEL_35;
            v16 = *(_QWORD *)(v8 + 8 * v17);
            if (!v16)
            {
              v17 = v7 + 3;
              if (v7 + 3 >= v12)
                goto LABEL_35;
              v16 = *(_QWORD *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_43;
                  if (v7 >= v12)
                    goto LABEL_35;
                  v16 = *(_QWORD *)(v8 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_16;
                }
              }
            }
          }
          v7 = v17;
        }
LABEL_16:
        v18 = __clz(__rbit64(v16));
        v11 = (v16 - 1) & v16;
        v14 = v18 + (v7 << 6);
      }
      result = *(_QWORD *)(a3 + 48) + 40 * v14;
    }
    while ((*(_BYTE *)(result + 32) & 1) != 0);
    v19 = *(double *)(result + 24);
    v20 = v19;
    if (v19 <= -9.22337204e18)
      break;
    if (v19 >= 9.22337204e18)
      goto LABEL_37;
    result = *(uint64_t *)(result + 16);
    v21 = *(_QWORD *)&v19 & 0x7FF0000000000000;
    if ((~result & 0x7FF0000000000000) == 0 || v21 == 0x7FF0000000000000)
      goto LABEL_38;
    v23 = *(double *)&result;
    if (*(double *)&result <= -9.22337204e18)
      goto LABEL_39;
    if (*(double *)&result >= 9.22337204e18)
      goto LABEL_40;
    result = (uint64_t)v20 - (uint64_t)*(double *)&result;
    if (__OFSUB__((uint64_t)v20, (uint64_t)v23))
      goto LABEL_41;
    if (result == 1)
    {
      result = (v14 >> 3) & 0x1FFFFFFFFFFFFFF8;
      *(unint64_t *)((char *)v5 + result) |= 1 << v14;
      v15 = __OFADD__(v6++, 1);
      if (v15)
        goto LABEL_44;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_23BD96128(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_39:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE650);
  result = sub_23BDCDEA4();
  v8 = result;
  v34 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  v36 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v37 = v10;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_42;
    if (v14 >= v34)
      goto LABEL_39;
    v15 = a1[v14];
    v16 = v10 + 1;
    if (!v15)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v34)
        goto LABEL_39;
      v15 = a1[v16];
      if (!v15)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v34)
          goto LABEL_39;
        v15 = a1[v16];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v37 = v16;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v4 + 48) + 40 * v13;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_BYTE *)(v18 + 32);
    sub_23BDCE084();
    sub_23BDCE090();
    if ((v23 & 1) != 0)
    {
      sub_23BDCE090();
      sub_23BDCE09C();
      sub_23BDCE090();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      sub_23BDCE0A8();
      sub_23BDCE0A8();
    }
    result = sub_23BDCE0B4();
    v24 = -1 << *(_BYTE *)(v8 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v31 == -1);
      v27 = __clz(__rbit64(~v31)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = *(_QWORD *)(v8 + 48) + 40 * v27;
    *(_QWORD *)v32 = v19;
    *(_QWORD *)(v32 + 8) = v20;
    *(_QWORD *)(v32 + 16) = v22;
    *(_QWORD *)(v32 + 24) = v21;
    *(_BYTE *)(v32 + 32) = v23;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v4 = v36;
    v10 = v37;
    if (!v5)
      goto LABEL_39;
  }
  v17 = v10 + 4;
  if (v10 + 4 >= v34)
    goto LABEL_39;
  v15 = a1[v17];
  if (v15)
  {
    v16 = v10 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v34)
      goto LABEL_39;
    v15 = a1[v16];
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_23BD96444(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  char v35;
  _QWORD v36[4];
  char v37;

  v3 = v2;
  v6 = *v2;
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  AwardProgress.hash(into:)();
  v7 = sub_23BDCE0B4();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    sub_23BD6F7A0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD6B728);
    sub_23BD966A8(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    sub_23BD6B22C(a2, a1);
    return 1;
  }
  v29 = v2;
  v30 = a1;
  v10 = ~v8;
  v11 = *(_QWORD *)(v6 + 48);
  while (1)
  {
    v13 = (double *)(v11 + 40 * v9);
    v14 = *v13;
    v15 = *((_QWORD *)v13 + 1);
    v16 = v13[2];
    if (((_BYTE)v13[4] & 1) == 0)
      break;
    sub_23BD6B22C(a2, (uint64_t)&v32);
    if ((v35 & 1) != 0 && *(_QWORD *)&v14 == v32 && ((((v15 & 1) == 0) ^ v33) & 1) != 0 && *(_QWORD *)&v16 == v34)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
LABEL_7:
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v3 = v29;
      a1 = v30;
      goto LABEL_23;
    }
  }
  v17 = v13[3];
  sub_23BD6B22C(a2, (uint64_t)v36);
  if ((v37 & 1) != 0)
    goto LABEL_7;
  v19 = *(double *)&v36[2];
  v18 = *(double *)&v36[3];
  v20 = *(_QWORD *)&v14 == v36[0] && v15 == v36[1];
  if (!v20 && (sub_23BDCE024() & 1) == 0)
    goto LABEL_7;
  if (v19 != v16 || v17 != v18)
    goto LABEL_7;
  swift_bridgeObjectRelease();
  sub_23BD6F7A0(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BD5F110);
LABEL_25:
  v23 = *(_QWORD *)(*v29 + 48) + 40 * v9;
  v24 = *(_QWORD *)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v26 = *(_QWORD *)(v23 + 16);
  v27 = *(_QWORD *)(v23 + 24);
  v28 = *(_BYTE *)(v23 + 32);
  *(_QWORD *)v30 = *(_QWORD *)v23;
  *(_QWORD *)(v30 + 8) = v25;
  *(_QWORD *)(v30 + 16) = v26;
  *(_QWORD *)(v30 + 24) = v27;
  *(_BYTE *)(v30 + 32) = v28;
  sub_23BD6B728(v24, v25, v26, v27, v28);
  return 0;
}

uint64_t sub_23BD966A8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  char v32;
  _QWORD v33[4];
  char v34;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 <= v7 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_23BD95A08();
    }
    else
    {
      if (v8 > v7)
      {
        sub_23BD968BC();
        goto LABEL_28;
      }
      sub_23BD96A80();
    }
    v9 = *v3;
    sub_23BDCE084();
    AwardProgress.hash(into:)();
    v10 = sub_23BDCE0B4();
    v11 = -1 << *(_BYTE *)(v9 + 32);
    a2 = v10 & ~v11;
    v12 = v9 + 56;
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v13 = ~v11;
      v14 = *(_QWORD *)(v9 + 48);
      do
      {
        v16 = (double *)(v14 + 40 * a2);
        v17 = *v16;
        v18 = *((_QWORD *)v16 + 1);
        v19 = v16[2];
        if (((_BYTE)v16[4] & 1) != 0)
        {
          sub_23BD6B22C(a1, (uint64_t)&v29);
          if ((v32 & 1) != 0 && *(_QWORD *)&v17 == v29 && ((((v18 & 1) == 0) ^ v30) & 1) != 0 && *(_QWORD *)&v19 == v31)
            goto LABEL_31;
        }
        else
        {
          v20 = v16[3];
          sub_23BD6B22C(a1, (uint64_t)v33);
          if ((v34 & 1) == 0)
          {
            v22 = *(double *)&v33[2];
            v21 = *(double *)&v33[3];
            v23 = *(_QWORD *)&v17 == v33[0] && v18 == v33[1];
            if ((v23 || (sub_23BDCE024() & 1) != 0) && v22 == v19 && v20 == v21)
              goto LABEL_31;
          }
        }
        a2 = (a2 + 1) & v13;
      }
      while (((*(_QWORD *)(v12 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_28:
  v24 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_23BD6B22C(a1, *(_QWORD *)(v24 + 48) + 40 * a2);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
    __break(1u);
LABEL_31:
    result = sub_23BDCE030();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v24 + 16) = v28;
  }
  return result;
}

void *sub_23BD968BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE650);
  v2 = *v0;
  v3 = sub_23BDCDE8C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_28;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
      {
        v9 = v24 + 2;
        if (v24 + 2 >= v13)
          goto LABEL_28;
        v25 = *(_QWORD *)(v6 + 8 * v9);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_BYTE *)(v17 + 32);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v21;
    *(_BYTE *)(v23 + 32) = v22;
    result = (void *)sub_23BD6B728(v18, v19, v20, v21, v22);
  }
  v26 = v24 + 3;
  if (v26 >= v13)
    goto LABEL_28;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23BD96A80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t i;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE650);
  v3 = sub_23BDCDE98();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v31 = v2 + 56;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v32 = (unint64_t)(v5 + 63) >> 6;
  v8 = v3 + 56;
  result = swift_retain();
  v10 = 0;
  for (i = v2; ; v2 = i)
  {
    if (v7)
    {
      v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v32)
      goto LABEL_36;
    v16 = *(_QWORD *)(v31 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v32)
        goto LABEL_36;
      v16 = *(_QWORD *)(v31 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v32)
          goto LABEL_36;
        v16 = *(_QWORD *)(v31 + 8 * v10);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v7 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    v18 = *(_QWORD *)(v2 + 48) + 40 * v14;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v22 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v23 = *(_BYTE *)(v18 + 32);
    sub_23BDCE084();
    sub_23BDCE090();
    if ((v23 & 1) != 0)
    {
      sub_23BDCE090();
      sub_23BDCE09C();
      sub_23BDCE090();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      sub_23BDCE0A8();
      sub_23BDCE0A8();
    }
    result = sub_23BDCE0B4();
    v24 = -1 << *(_BYTE *)(v4 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v8 + 8 * v26);
      }
      while (v30 == -1);
      v11 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v4 + 48) + 40 * v11;
    *(_QWORD *)v12 = v19;
    *(_QWORD *)(v12 + 8) = v20;
    *(_QWORD *)(v12 + 16) = v22;
    *(_QWORD *)(v12 + 24) = v21;
    *(_BYTE *)(v12 + 32) = v23;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v32)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v31 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v32)
      goto LABEL_36;
    v16 = *(_QWORD *)(v31 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_23BD96DCC(char a1)
{
  return *(_QWORD *)&aIdle_7[8 * a1];
}

uint64_t sub_23BD96DEC()
{
  char *v0;

  return sub_23BD96DCC(*v0);
}

uint64_t sub_23BD96DF4()
{
  sub_23BD97ECC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD96E1C()
{
  sub_23BD97ECC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD96E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD989E0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BD96E70()
{
  sub_23BD97F10();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD96E98()
{
  sub_23BD97F10();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD96EC0()
{
  sub_23BD97F54();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD96EE8()
{
  sub_23BD97F54();
  return sub_23BDCE0E4();
}

uint64_t sub_23BD96F10()
{
  sub_23BD97F98();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD96F38()
{
  sub_23BD97F98();
  return sub_23BDCE0E4();
}

uint64_t AwardImageLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE658);
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v37 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23BDCD544();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v35 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE660);
  v30 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23BDCD58C();
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v41 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE668);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  MEMORY[0x24BDAC7A8](State);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE670);
  v43 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD97ECC();
  sub_23BDCE0CC();
  sub_23BD8C0BC(v42, (uint64_t)v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v23 = v30;
    v24 = v31;
    v25 = v33;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v41, v12, v33);
    v46 = 1;
    sub_23BD97F54();
    v26 = v32;
    v21 = v44;
    sub_23BDCDFAC();
    sub_23BD6B5DC(&qword_256AAD4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v27 = v34;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v27);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v41, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v21);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v17 = v36;
    v18 = v35;
    v19 = v39;
    (*(void (**)(void))(v36 + 32))();
    v47 = 2;
    sub_23BD97F10();
    v20 = v37;
    v21 = v44;
    sub_23BDCDFAC();
    sub_23BD6B5DC(&qword_256AAE688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    v22 = v40;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v22);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v21);
  }
  v45 = 0;
  sub_23BD97F98();
  v29 = v44;
  sub_23BDCDFAC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v15, v29);
}

uint64_t AwardImageLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t State;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;

  v59 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE6A0);
  v4 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  v58 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE6A8);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v60 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE6B0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v62 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE6B8);
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  v13 = MEMORY[0x24BDAC7A8](State);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v49 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v49 - v19;
  v21 = a1[3];
  v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_23BD97ECC();
  v22 = v11;
  v23 = v66;
  sub_23BDCE0C0();
  if (v23)
    goto LABEL_9;
  v25 = v61;
  v24 = v62;
  v50 = v15;
  v51 = v18;
  v52 = v20;
  v66 = State;
  v27 = v63;
  v26 = v64;
  v28 = v22;
  v29 = sub_23BDCDFA0();
  if (*(_QWORD *)(v29 + 16) != 1)
  {
    v37 = v27;
    v38 = sub_23BDCDEC8();
    swift_allocError();
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v40 = v66;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x24BEE26D0], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v37);
LABEL_9:
    v34 = (uint64_t)v65;
    return __swift_destroy_boxed_opaque_existential_1(v34);
  }
  v30 = v22;
  v31 = v25;
  if (*(_BYTE *)(v29 + 32))
  {
    if (*(_BYTE *)(v29 + 32) == 1)
    {
      v68 = 1;
      sub_23BD97F54();
      v32 = v60;
      sub_23BDCDF28();
      sub_23BDCD58C();
      sub_23BD6B5DC(&qword_256AAD4D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
      v33 = v56;
      sub_23BDCDF94();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v27);
      v34 = (uint64_t)v65;
      v35 = (uint64_t)v51;
      swift_storeEnumTagMultiPayload();
      v36 = v35;
    }
    else
    {
      v69 = 2;
      sub_23BD97F10();
      v41 = v26;
      v42 = v28;
      sub_23BDCDF28();
      sub_23BDCD544();
      sub_23BD6B5DC(&qword_256AAE6C0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
      v45 = (uint64_t)v50;
      v46 = v41;
      v47 = v27;
      v48 = v57;
      sub_23BDCDF94();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v42, v47);
      v34 = (uint64_t)v65;
      swift_storeEnumTagMultiPayload();
      v36 = v45;
    }
    v44 = (uint64_t)v52;
    sub_23BD8C374(v36, (uint64_t)v52);
  }
  else
  {
    v67 = 0;
    sub_23BD97F98();
    sub_23BDCDF28();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v24, v54);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v27);
    v44 = (uint64_t)v52;
    swift_storeEnumTagMultiPayload();
    v34 = (uint64_t)v65;
  }
  sub_23BD8C374(v44, v59);
  return __swift_destroy_boxed_opaque_existential_1(v34);
}

uint64_t sub_23BD9793C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardImageLoadState.init(from:)(a1, a2);
}

uint64_t sub_23BD97950(_QWORD *a1)
{
  return AwardImageLoadState.encode(to:)(a1);
}

uint64_t AwardImageLoadState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t State;
  uint64_t v10;
  char *v11;
  int EnumCaseMultiPayload;
  uint64_t v14;

  v1 = sub_23BDCD544();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23BDCD58C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  MEMORY[0x24BDAC7A8](State);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BD8C0BC(v0, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v11, v1);
      sub_23BDCE090();
      sub_23BD6B5DC(&qword_256AAE620, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_23BDCDCF4();
      return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      return sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t AwardImageLoadState.hashValue.getter()
{
  sub_23BDCE084();
  AwardImageLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD97B74()
{
  sub_23BDCE084();
  AwardImageLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD97BB4()
{
  sub_23BDCE084();
  AwardImageLoadState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards19AwardImageLoadStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = sub_23BDCD544();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD58C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  v11 = MEMORY[0x24BDAC7A8](State);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE7C8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_23BD8C0BC(a1, (uint64_t)v19);
  sub_23BD8C0BC(a2, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BD8C0BC((uint64_t)v19, (uint64_t)v15);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v20, v6);
      v24 = sub_23BDCD574();
      v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25(v9, v6);
      v26 = v15;
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BD8C0BC((uint64_t)v19, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v23 = v29;
      v22 = v30;
      v6 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v29, v20, v31);
      v24 = MEMORY[0x242611114](v13, v23);
      v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v25(v23, v6);
      v26 = v13;
LABEL_12:
      v25(v26, v6);
      sub_23BD982E8((uint64_t)v19);
      return v24 & 1;
    }
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    sub_23BD98A7C((uint64_t)v19);
    v24 = 0;
    return v24 & 1;
  }
  sub_23BD982E8((uint64_t)v19);
  v24 = 1;
  return v24 & 1;
}

uint64_t type metadata accessor for AwardImageLoadState()
{
  uint64_t result;

  result = qword_256AAE738;
  if (!qword_256AAE738)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BD97ECC()
{
  unint64_t result;

  result = qword_256AAE678;
  if (!qword_256AAE678)
  {
    result = MEMORY[0x242611F78](&unk_23BDD457C, &type metadata for AwardImageLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE678);
  }
  return result;
}

unint64_t sub_23BD97F10()
{
  unint64_t result;

  result = qword_256AAE680;
  if (!qword_256AAE680)
  {
    result = MEMORY[0x242611F78](&unk_23BDD452C, &type metadata for AwardImageLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE680);
  }
  return result;
}

unint64_t sub_23BD97F54()
{
  unint64_t result;

  result = qword_256AAE690;
  if (!qword_256AAE690)
  {
    result = MEMORY[0x242611F78](&unk_23BDD44DC, &type metadata for AwardImageLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE690);
  }
  return result;
}

unint64_t sub_23BD97F98()
{
  unint64_t result;

  result = qword_256AAE698;
  if (!qword_256AAE698)
  {
    result = MEMORY[0x242611F78](&unk_23BDD448C, &type metadata for AwardImageLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE698);
  }
  return result;
}

uint64_t sub_23BD97FDC()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AAE338, (uint64_t (*)(uint64_t))type metadata accessor for AwardImageLoadState, (uint64_t)&protocol conformance descriptor for AwardImageLoadState);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardImageLoadState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = sub_23BDCD544();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for AwardImageLoadState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_23BDCD544();
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v3 = sub_23BDCD58C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void *initializeWithCopy for AwardImageLoadState(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_23BDCD544();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for AwardImageLoadState(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23BD982E8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_23BDCD544();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BD982E8(uint64_t a1)
{
  uint64_t State;

  State = type metadata accessor for AwardImageLoadState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 8))(a1, State);
  return a1;
}

void *initializeWithTake for AwardImageLoadState(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = sub_23BDCD544();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AwardImageLoadState(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23BD982E8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_23BDCD544();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BD984BC()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    result = sub_23BDCD544();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardImageLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD98588 + 4 * byte_23BDD40E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD985BC + 4 * byte_23BDD40E0[v4]))();
}

uint64_t sub_23BD985BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD985C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD985CCLL);
  return result;
}

uint64_t sub_23BD985D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD985E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD985E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD985EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageLoadState.CodingKeys()
{
  return &type metadata for AwardImageLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardImageLoadState.IdleCodingKeys()
{
  return &type metadata for AwardImageLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for AwardImageLoadState.FetchingCodingKeys()
{
  return &type metadata for AwardImageLoadState.FetchingCodingKeys;
}

uint64_t _s13FitnessAwards19AwardImageLoadStateO18FetchingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BD9866C + 4 * byte_23BDD40EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BD9868C + 4 * byte_23BDD40EF[v4]))();
}

_BYTE *sub_23BD9866C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BD9868C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD98694(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD9869C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BD986A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BD986AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageLoadState.FetchedCodingKeys()
{
  return &type metadata for AwardImageLoadState.FetchedCodingKeys;
}

unint64_t sub_23BD986CC()
{
  unint64_t result;

  result = qword_256AAE770;
  if (!qword_256AAE770)
  {
    result = MEMORY[0x242611F78](&unk_23BDD42A4, &type metadata for AwardImageLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE770);
  }
  return result;
}

unint64_t sub_23BD98714()
{
  unint64_t result;

  result = qword_256AAE778;
  if (!qword_256AAE778)
  {
    result = MEMORY[0x242611F78](&unk_23BDD435C, &type metadata for AwardImageLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE778);
  }
  return result;
}

unint64_t sub_23BD9875C()
{
  unint64_t result;

  result = qword_256AAE780;
  if (!qword_256AAE780)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4464, &type metadata for AwardImageLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE780);
  }
  return result;
}

unint64_t sub_23BD987A4()
{
  unint64_t result;

  result = qword_256AAE788;
  if (!qword_256AAE788)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4384, &type metadata for AwardImageLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE788);
  }
  return result;
}

unint64_t sub_23BD987EC()
{
  unint64_t result;

  result = qword_256AAE790;
  if (!qword_256AAE790)
  {
    result = MEMORY[0x242611F78](&unk_23BDD43AC, &type metadata for AwardImageLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE790);
  }
  return result;
}

unint64_t sub_23BD98834()
{
  unint64_t result;

  result = qword_256AAE798;
  if (!qword_256AAE798)
  {
    result = MEMORY[0x242611F78](&unk_23BDD42CC, &type metadata for AwardImageLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE798);
  }
  return result;
}

unint64_t sub_23BD9887C()
{
  unint64_t result;

  result = qword_256AAE7A0;
  if (!qword_256AAE7A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD42F4, &type metadata for AwardImageLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7A0);
  }
  return result;
}

unint64_t sub_23BD988C4()
{
  unint64_t result;

  result = qword_256AAE7A8;
  if (!qword_256AAE7A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4214, &type metadata for AwardImageLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7A8);
  }
  return result;
}

unint64_t sub_23BD9890C()
{
  unint64_t result;

  result = qword_256AAE7B0;
  if (!qword_256AAE7B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD423C, &type metadata for AwardImageLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7B0);
  }
  return result;
}

unint64_t sub_23BD98954()
{
  unint64_t result;

  result = qword_256AAE7B8;
  if (!qword_256AAE7B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD43D4, &type metadata for AwardImageLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7B8);
  }
  return result;
}

unint64_t sub_23BD9899C()
{
  unint64_t result;

  result = qword_256AAE7C0;
  if (!qword_256AAE7C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD43FC, &type metadata for AwardImageLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7C0);
  }
  return result;
}

uint64_t sub_23BD989E0(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x4C52556567616D69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BD98A64()
{
  return 0x4C52556567616D69;
}

uint64_t sub_23BD98A7C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE7C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

FitnessAwards::FontDescriptor __swiftcall FontDescriptor.init(style:weight:)(FitnessAwards::FontStyle style, FitnessAwards::FontWeight weight)
{
  _BYTE *v2;
  char v3;
  FitnessAwards::FontDescriptor result;

  v3 = *(_BYTE *)weight;
  *v2 = *(_BYTE *)style;
  v2[1] = v3;
  result.style = style;
  return result;
}

void FontDescriptor.style.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void FontDescriptor.weight.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t sub_23BD98AE8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746867696577;
  else
    return 0x656C797473;
}

uint64_t sub_23BD98B18()
{
  char *v0;

  return sub_23BD98AE8(*v0);
}

uint64_t sub_23BD98B20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD99508(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD98B44()
{
  sub_23BD98CE0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD98B6C()
{
  sub_23BD98CE0();
  return sub_23BDCE0E4();
}

uint64_t FontDescriptor.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE7D0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD98CE0();
  sub_23BDCE0CC();
  v15 = v8;
  v14 = 0;
  sub_23BD98D24();
  sub_23BDCE00C();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    sub_23BD98D68();
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BD98CE0()
{
  unint64_t result;

  result = qword_256AAE7D8;
  if (!qword_256AAE7D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD47AC, &type metadata for FontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE7D8);
  }
  return result;
}

unint64_t sub_23BD98D24()
{
  unint64_t result;

  result = qword_256AAE7E0;
  if (!qword_256AAE7E0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontStyle, &type metadata for FontStyle);
    atomic_store(result, (unint64_t *)&qword_256AAE7E0);
  }
  return result;
}

unint64_t sub_23BD98D68()
{
  unint64_t result;

  result = qword_256AAE7E8;
  if (!qword_256AAE7E8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontWeight, &type metadata for FontWeight);
    atomic_store(result, (unint64_t *)&qword_256AAE7E8);
  }
  return result;
}

uint64_t FontDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE7F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD98CE0();
  sub_23BDCE0C0();
  if (!v2)
  {
    v15 = 0;
    sub_23BD98F28();
    sub_23BDCDF94();
    v9 = v16;
    v13 = 1;
    sub_23BD98F6C();
    sub_23BDCDF94();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v14;
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23BD98F28()
{
  unint64_t result;

  result = qword_256AAE7F8;
  if (!qword_256AAE7F8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontStyle, &type metadata for FontStyle);
    atomic_store(result, (unint64_t *)&qword_256AAE7F8);
  }
  return result;
}

unint64_t sub_23BD98F6C()
{
  unint64_t result;

  result = qword_256AAE800;
  if (!qword_256AAE800)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontWeight, &type metadata for FontWeight);
    atomic_store(result, (unint64_t *)&qword_256AAE800);
  }
  return result;
}

uint64_t sub_23BD98FB0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FontDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BD98FC4(_QWORD *a1)
{
  return FontDescriptor.encode(to:)(a1);
}

uint64_t FontDescriptor.hash(into:)()
{
  sub_23BDCE090();
  return sub_23BDCE090();
}

uint64_t static FontDescriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

uint64_t FontDescriptor.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD99098()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD990F4()
{
  sub_23BDCE090();
  return sub_23BDCE090();
}

uint64_t sub_23BD99130()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD99188(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

unint64_t sub_23BD991B4()
{
  unint64_t result;

  result = qword_256AAE808;
  if (!qword_256AAE808)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontDescriptor, &type metadata for FontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAE808);
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FontDescriptor(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FontDescriptor(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD992E4 + 4 * byte_23BDD4605[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_23BD99318 + 4 * byte_23BDD4600[v4]))();
}

uint64_t sub_23BD99318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_23BD99320(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x23BD99328);
  return result;
}

uint64_t sub_23BD99334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x23BD9933CLL);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_23BD99340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_23BD99348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontDescriptor()
{
  return &type metadata for FontDescriptor;
}

uint64_t storeEnumTagSinglePayload for FontDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BD993B0 + 4 * byte_23BDD460F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BD993E4 + 4 * byte_23BDD460A[v4]))();
}

uint64_t sub_23BD993E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD993EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD993F4);
  return result;
}

uint64_t sub_23BD99400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD99408);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BD9940C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD99414(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontDescriptor.CodingKeys()
{
  return &type metadata for FontDescriptor.CodingKeys;
}

unint64_t sub_23BD99434()
{
  unint64_t result;

  result = qword_256AAE810;
  if (!qword_256AAE810)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4784, &type metadata for FontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE810);
  }
  return result;
}

unint64_t sub_23BD9947C()
{
  unint64_t result;

  result = qword_256AAE818;
  if (!qword_256AAE818)
  {
    result = MEMORY[0x242611F78](&unk_23BDD46F4, &type metadata for FontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE818);
  }
  return result;
}

unint64_t sub_23BD994C4()
{
  unint64_t result;

  result = qword_256AAE820;
  if (!qword_256AAE820)
  {
    result = MEMORY[0x242611F78](&unk_23BDD471C, &type metadata for FontDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE820);
  }
  return result;
}

uint64_t sub_23BD99508(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x656C797473 && a2 == 0xE500000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746867696577 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SectionDensityFactor.init(count:spacing:span:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(_QWORD *)a3 = result;
  *(double *)(a3 + 8) = a4;
  *(_QWORD *)(a3 + 16) = a2;
  return result;
}

void static SectionDensityFactor.zero.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_23BD995FC(char a1)
{
  return *(_QWORD *)&aCount_0[8 * a1];
}

uint64_t sub_23BD9961C()
{
  char *v0;

  return sub_23BD995FC(*v0);
}

uint64_t sub_23BD99624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD99E44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD99648()
{
  sub_23BD99808();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD99670()
{
  sub_23BD99808();
  return sub_23BDCE0E4();
}

uint64_t SectionDensityFactor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE828);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD99808();
  sub_23BDCE0CC();
  v14 = 0;
  sub_23BDCE000();
  if (!v2)
  {
    v13 = v8;
    v12 = 1;
    sub_23BD6298C();
    sub_23BDCE00C();
    v11 = 2;
    sub_23BDCE000();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BD99808()
{
  unint64_t result;

  result = qword_256AAE830;
  if (!qword_256AAE830)
  {
    result = MEMORY[0x242611F78](&unk_23BDD49A8, &type metadata for SectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE830);
  }
  return result;
}

uint64_t SectionDensityFactor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE838);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD99808();
  sub_23BDCE0C0();
  if (!v2)
  {
    v15 = 0;
    v9 = sub_23BDCDF88();
    v13[15] = 1;
    sub_23BD62CA8();
    sub_23BDCDF94();
    v11 = v14;
    v13[14] = 2;
    v12 = sub_23BDCDF88();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BD999E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return SectionDensityFactor.init(from:)(a1, a2);
}

uint64_t sub_23BD999FC(_QWORD *a1)
{
  return SectionDensityFactor.encode(to:)(a1);
}

uint64_t SectionDensityFactor.hash(into:)()
{
  sub_23BDCE090();
  sub_23BDCE0A8();
  return sub_23BDCE090();
}

BOOL static SectionDensityFactor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t SectionDensityFactor.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCE0A8();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD99B00()
{
  sub_23BDCE090();
  sub_23BDCE0A8();
  return sub_23BDCE090();
}

uint64_t sub_23BD99B48()
{
  sub_23BDCE084();
  sub_23BDCE090();
  sub_23BDCE0A8();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

unint64_t sub_23BD99BB4()
{
  unint64_t result;

  result = qword_256AAE840;
  if (!qword_256AAE840)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for SectionDensityFactor, &type metadata for SectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AAE840);
  }
  return result;
}

BOOL sub_23BD99BF8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SectionDensityFactor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SectionDensityFactor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SectionDensityFactor()
{
  return &type metadata for SectionDensityFactor;
}

uint64_t storeEnumTagSinglePayload for SectionDensityFactor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD99CEC + 4 * byte_23BDD4805[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD99D20 + 4 * byte_23BDD4800[v4]))();
}

uint64_t sub_23BD99D20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD99D28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD99D30);
  return result;
}

uint64_t sub_23BD99D3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD99D44);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD99D48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD99D50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SectionDensityFactor.CodingKeys()
{
  return &type metadata for SectionDensityFactor.CodingKeys;
}

unint64_t sub_23BD99D70()
{
  unint64_t result;

  result = qword_256AAE848;
  if (!qword_256AAE848)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4980, &type metadata for SectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE848);
  }
  return result;
}

unint64_t sub_23BD99DB8()
{
  unint64_t result;

  result = qword_256AAE850;
  if (!qword_256AAE850)
  {
    result = MEMORY[0x242611F78](&unk_23BDD48F0, &type metadata for SectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE850);
  }
  return result;
}

unint64_t sub_23BD99E00()
{
  unint64_t result;

  result = qword_256AAE858;
  if (!qword_256AAE858)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4918, &type metadata for SectionDensityFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE858);
  }
  return result;
}

uint64_t sub_23BD99E44(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6963617073 && a2 == 0xE700000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1851879539 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t AwardLockupState.init(templateUniqueName:layout:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;

  *a5 = a1;
  a5[1] = a2;
  v8 = type metadata accessor for AwardLockupState();
  sub_23BD9A020(a3, (uint64_t)a5 + *(int *)(v8 + 20));
  v9 = (char *)a5 + *(int *)(v8 + 24);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a4, v10);
}

uint64_t type metadata accessor for AwardLockupState()
{
  uint64_t result;

  result = qword_256AAE900;
  if (!qword_256AAE900)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD9A020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardLockupLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AwardLockupState.templateUniqueName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardLockupState.layout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardLockupState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardLockupLayout);
}

uint64_t AwardLockupState.layout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AwardLockupState() + 20);
  return sub_23BD9A0FC(a1, v3);
}

uint64_t sub_23BD9A0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardLockupLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*AwardLockupState.layout.modify())()
{
  type metadata accessor for AwardLockupState();
  return nullsub_1;
}

uint64_t AwardLockupState.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardLockupState() + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AwardLockupState.description.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardLockupState() + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AwardLockupState.description.modify())()
{
  type metadata accessor for AwardLockupState();
  return nullsub_1;
}

uint64_t sub_23BD9A228(char a1)
{
  if (!a1)
    return 0xD000000000000012;
  if (a1 == 1)
    return 0x74756F79616CLL;
  return 0x7470697263736564;
}

uint64_t sub_23BD9A288()
{
  char *v0;

  return sub_23BD9A228(*v0);
}

uint64_t sub_23BD9A290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD9B66C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD9A2B4()
{
  sub_23BD9A4B0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9A2DC()
{
  sub_23BD9A4B0();
  return sub_23BDCE0E4();
}

uint64_t AwardLockupState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE860);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD9A4B0();
  sub_23BDCE0CC();
  v8[15] = 0;
  sub_23BDCDFDC();
  if (!v1)
  {
    type metadata accessor for AwardLockupState();
    v8[14] = 1;
    type metadata accessor for AwardLockupLayout();
    sub_23BD9A8A4(&qword_256AAE870, (uint64_t)&protocol conformance descriptor for AwardLockupLayout);
    sub_23BDCE00C();
    v8[13] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
    sub_23BD9A8E4(&qword_256AAE878, MEMORY[0x24BE2B3F8]);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BD9A4B0()
{
  unint64_t result;

  result = qword_256AAE868;
  if (!qword_256AAE868)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4BC4, &type metadata for AwardLockupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE868);
  }
  return result;
}

unint64_t sub_23BD9A4F4()
{
  unint64_t result;

  result = qword_256AAE880;
  if (!qword_256AAE880)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDescription, &type metadata for AwardDescription);
    atomic_store(result, (unint64_t *)&qword_256AAE880);
  }
  return result;
}

unint64_t sub_23BD9A538()
{
  unint64_t result;

  result = qword_256AAE888;
  if (!qword_256AAE888)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDescription, &type metadata for AwardDescription);
    atomic_store(result, (unint64_t *)&qword_256AAE888);
  }
  return result;
}

uint64_t AwardLockupState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t *v29;
  char v30;
  char v31;
  char v32;

  v23 = a2;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v22 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE890);
  v7 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AwardLockupState();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23BD9A4B0();
  v27 = v9;
  v14 = v29;
  sub_23BDCE0C0();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  v32 = 0;
  *v12 = sub_23BDCDF64();
  v12[1] = v15;
  v29 = v12;
  v31 = 1;
  sub_23BD9A8A4(&qword_256AAE898, (uint64_t)&protocol conformance descriptor for AwardLockupLayout);
  v16 = (uint64_t)v6;
  sub_23BDCDF94();
  v17 = v10;
  v18 = (uint64_t)v29;
  sub_23BD9A020(v16, (uint64_t)v29 + *(int *)(v10 + 20));
  v30 = 2;
  sub_23BD9A8E4(&qword_256AAE8A0, MEMORY[0x24BE2B410]);
  v19 = v24;
  v20 = v25;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v18 + *(int *)(v17 + 24), v19, v20);
  sub_23BD594E4(v18, v23, (uint64_t (*)(_QWORD))type metadata accessor for AwardLockupState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return sub_23BD59BB4(v18, (uint64_t (*)(_QWORD))type metadata accessor for AwardLockupState);
}

uint64_t sub_23BD9A8A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AwardLockupLayout();
    result = MEMORY[0x242611F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD9A8E4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD410);
    v6[0] = sub_23BD9A4F4();
    v6[1] = sub_23BD9A538();
    result = MEMORY[0x242611F78](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BD9A950@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardLockupState.init(from:)(a1, a2);
}

uint64_t sub_23BD9A964(_QWORD *a1)
{
  return AwardLockupState.encode(to:)(a1);
}

uint64_t static AwardLockupState.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  uint64_t v5;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_23BDCE024() & 1) == 0)
    return 0;
  v5 = type metadata accessor for AwardLockupState();
  if (!_s13FitnessAwards17AwardLockupLayoutV2eeoiySbAC_ACtFZ_0((double *)((char *)a1 + *(int *)(v5 + 20)), (double *)((char *)a2 + *(int *)(v5 + 20))))return 0;
  sub_23BD77178();
  return sub_23BDCDC88();
}

uint64_t sub_23BD9AA1C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  BOOL v6;

  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (sub_23BDCE024() & 1) == 0
    || !_s13FitnessAwards17AwardLockupLayoutV2eeoiySbAC_ACtFZ_0((double *)((char *)a1 + *(int *)(a3 + 20)), (double *)((char *)a2 + *(int *)(a3 + 20))))
  {
    return 0;
  }
  sub_23BD77178();
  return sub_23BDCDC88();
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardLockupState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for AwardLockupLayout();
    v12 = v11[5];
    v25 = &v9[v12];
    v13 = &v10[v12];
    v14 = sub_23BDCD5F8();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v25, v13, v14);
    v15(&v9[v11[6]], &v10[v11[6]], v14);
    *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
    v9[v11[8]] = v10[v11[8]];
    *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
    v16 = v11[10];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v17[8] = v18[8];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *(_WORD *)&v9[v11[11]] = *(_WORD *)&v10[v11[11]];
    *(_WORD *)&v9[v11[12]] = *(_WORD *)&v10[v11[12]];
    *(_QWORD *)&v9[v11[13]] = *(_QWORD *)&v10[v11[13]];
    v19 = *(int *)(a3 + 24);
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return v4;
}

uint64_t destroy for AwardLockupState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AwardLockupLayout();
  v6 = v4 + *(int *)(v5 + 20);
  v7 = sub_23BDCD5F8();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v4 + *(int *)(v5 + 24), v7);
  v9 = a1 + *(int *)(a2 + 24);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for AwardLockupState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for AwardLockupLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  v14(&v7[v9[6]], &v8[v9[6]], v13);
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v15 = v9[10];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_WORD *)&v7[v9[11]] = *(_WORD *)&v8[v9[11]];
  *(_WORD *)&v7[v9[12]] = *(_WORD *)&v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v18 = *(int *)(a3 + 24);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

_QWORD *assignWithCopy for AwardLockupState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for AwardLockupLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(&v7[v9[6]], &v8[v9[6]], v13);
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v15 = v9[10];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v18;
  v19 = v9[11];
  v20 = &v7[v19];
  v21 = &v8[v19];
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = v9[12];
  v23 = &v7[v22];
  v24 = &v8[v22];
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v25 = *(int *)(a3 + 24);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 24))(v26, v27, v28);
  return a1;
}

_OWORD *initializeWithTake for AwardLockupState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)((char *)a1 + v6) = *(_QWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for AwardLockupLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(&v7[v9[6]], &v8[v9[6]], v13);
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v7[v9[8]] = v8[v9[8]];
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v15 = v9[10];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_WORD *)&v7[v9[11]] = *(_WORD *)&v8[v9[11]];
  *(_WORD *)&v7[v9[12]] = *(_WORD *)&v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v18 = *(int *)(a3 + 24);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

_QWORD *assignWithTake for AwardLockupState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_QWORD *)((char *)a1 + v7) = *(_QWORD *)((char *)a2 + v7);
  v10 = (int *)type metadata accessor for AwardLockupLayout();
  v11 = v10[5];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = sub_23BDCD5F8();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(&v8[v10[6]], &v9[v10[6]], v14);
  *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
  v8[v10[8]] = v9[v10[8]];
  *(_QWORD *)&v8[v10[9]] = *(_QWORD *)&v9[v10[9]];
  v16 = v10[10];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v17[8] = v18[8];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = v10[11];
  v20 = &v8[v19];
  v21 = &v9[v19];
  *v20 = *v21;
  v20[1] = v21[1];
  v22 = v10[12];
  v23 = &v8[v22];
  v24 = &v9[v22];
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)&v8[v10[13]] = *(_QWORD *)&v9[v10[13]];
  v25 = *(int *)(a3 + 24);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardLockupState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9B290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AwardLockupLayout();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AwardLockupState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9B340(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for AwardLockupLayout();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23BD9B3E0()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AwardLockupLayout();
  if (v0 <= 0x3F)
  {
    sub_23BD9B470();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23BD9B470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256AAE910)
  {
    sub_23BD77178();
    v0 = sub_23BDCDCA0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256AAE910);
  }
}

uint64_t storeEnumTagSinglePayload for AwardLockupState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BD9B514 + 4 * byte_23BDD4A35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BD9B548 + 4 * byte_23BDD4A30[v4]))();
}

uint64_t sub_23BD9B548(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9B550(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD9B558);
  return result;
}

uint64_t sub_23BD9B564(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD9B56CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BD9B570(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9B578(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardLockupState.CodingKeys()
{
  return &type metadata for AwardLockupState.CodingKeys;
}

unint64_t sub_23BD9B598()
{
  unint64_t result;

  result = qword_256AAE948;
  if (!qword_256AAE948)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4B9C, &type metadata for AwardLockupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE948);
  }
  return result;
}

unint64_t sub_23BD9B5E0()
{
  unint64_t result;

  result = qword_256AAE950;
  if (!qword_256AAE950)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4B0C, &type metadata for AwardLockupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE950);
  }
  return result;
}

unint64_t sub_23BD9B628()
{
  unint64_t result;

  result = qword_256AAE958;
  if (!qword_256AAE958)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4B34, &type metadata for AwardLockupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE958);
  }
  return result;
}

uint64_t sub_23BD9B66C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t AwardProgressState.init(fontDescriptor:templateUniqueName:loadState:storefrontLocale:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = a1[1];
  *(_BYTE *)a6 = *a1;
  *(_BYTE *)(a6 + 1) = v9;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  v10 = type metadata accessor for AwardProgressState();
  sub_23BD6B04C(a4, a6 + *(int *)(v10 + 24));
  v11 = a6 + *(int *)(v10 + 28);
  v12 = sub_23BDCD5B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a5, v12);
}

uint64_t type metadata accessor for AwardProgressState()
{
  uint64_t result;

  result = qword_256AAEA08;
  if (!qword_256AAEA08)
    return swift_getSingletonMetadata();
  return result;
}

void AwardProgressState.fontDescriptor.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t AwardProgressState.templateUniqueName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardProgressState.loadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardProgressState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
}

uint64_t AwardProgressState.loadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AwardProgressState() + 24);
  return sub_23BD9B924(a1, v3);
}

uint64_t sub_23BD9B924(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardProgressLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t (*AwardProgressState.loadState.modify())()
{
  type metadata accessor for AwardProgressState();
  return nullsub_1;
}

uint64_t AwardProgressState.storefrontLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardProgressState() + 28);
  v4 = sub_23BDCD5B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AwardProgressState.storefrontLocale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardProgressState() + 28);
  v4 = sub_23BDCD5B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AwardProgressState.storefrontLocale.modify())()
{
  type metadata accessor for AwardProgressState();
  return nullsub_1;
}

uint64_t sub_23BD9BA48(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD9BA84 + 4 * byte_23BDD4C20[a1]))(0xD000000000000012, 0x800000023BDD9F00);
}

uint64_t sub_23BD9BA84()
{
  return 0x63736544746E6F66;
}

uint64_t sub_23BD9BAA8()
{
  return 0x7461745364616F6CLL;
}

unint64_t sub_23BD9BAC4()
{
  return 0xD000000000000010;
}

uint64_t sub_23BD9BAE0()
{
  unsigned __int8 *v0;

  return sub_23BD9BA48(*v0);
}

uint64_t sub_23BD9BAE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD9CFE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD9BB0C()
{
  sub_23BD9BD5C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9BB34()
{
  sub_23BD9BD5C();
  return sub_23BDCE0E4();
}

uint64_t AwardProgressState.encode(to:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE960);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD9BD5C();
  sub_23BDCE0CC();
  v9 = v3[1];
  v11[14] = *v3;
  v11[15] = v9;
  v11[13] = 0;
  sub_23BD9BDA0();
  sub_23BDCE00C();
  if (!v2)
  {
    v11[12] = 1;
    sub_23BDCDFDC();
    type metadata accessor for AwardProgressState();
    v11[11] = 2;
    type metadata accessor for AwardProgressLoadState();
    sub_23BD6B5DC(&qword_256AAE978, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressLoadState, (uint64_t)&protocol conformance descriptor for AwardProgressLoadState);
    sub_23BDCE00C();
    v11[10] = 3;
    sub_23BDCD5B0();
    sub_23BD6B5DC(&qword_256AAE980, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BD9BD5C()
{
  unint64_t result;

  result = qword_256AAE968;
  if (!qword_256AAE968)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4E1C, &type metadata for AwardProgressState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAE968);
  }
  return result;
}

unint64_t sub_23BD9BDA0()
{
  unint64_t result;

  result = qword_256AAE970;
  if (!qword_256AAE970)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontDescriptor, &type metadata for FontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAE970);
  }
  return result;
}

uint64_t AwardProgressState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t State;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v28 = a2;
  v30 = sub_23BDCD5B0();
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE988);
  v7 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AwardProgressState();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23BD9BD5C();
  v31 = v9;
  v14 = v34;
  sub_23BDCE0C0();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  v34 = v6;
  v15 = v7;
  v16 = (uint64_t)v12;
  v17 = v30;
  v38 = 0;
  sub_23BD9C174();
  v19 = v31;
  v18 = v32;
  sub_23BDCDF94();
  v20 = v40;
  *(_BYTE *)v16 = v39;
  *(_BYTE *)(v16 + 1) = v20;
  v37 = 1;
  *(_QWORD *)(v16 + 8) = sub_23BDCDF64();
  *(_QWORD *)(v16 + 16) = v21;
  v36 = 2;
  sub_23BD6B5DC(&qword_256AAE998, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressLoadState, (uint64_t)&protocol conformance descriptor for AwardProgressLoadState);
  v22 = (uint64_t)v34;
  sub_23BDCDF94();
  v26 = v10;
  sub_23BD6B04C(v22, v16 + *(int *)(v10 + 24));
  v35 = 3;
  sub_23BD6B5DC(&qword_256AAE9A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v23 = v29;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v16 + *(int *)(v26 + 28), v23, v17);
  sub_23BD594E4(v16, v28, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  return sub_23BD59BB4(v16, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressState);
}

unint64_t sub_23BD9C174()
{
  unint64_t result;

  result = qword_256AAE990;
  if (!qword_256AAE990)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontDescriptor, &type metadata for FontDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAE990);
  }
  return result;
}

uint64_t sub_23BD9C1B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardProgressState.init(from:)(a1, a2);
}

uint64_t sub_23BD9C1CC(_QWORD *a1)
{
  return AwardProgressState.encode(to:)(a1);
}

uint64_t AwardProgressState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t State;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  _BYTE v12[40];

  v1 = sub_23BDCD58C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_23BDCE090();
  sub_23BDCE090();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for AwardProgressState();
  sub_23BD594E4(v0 + *(int *)(v8 + 24), (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23BD6B22C((uint64_t)v7, (uint64_t)v12);
      sub_23BDCE090();
      AwardProgress.hash(into:)();
      sub_23BD6B324((uint64_t)v12);
    }
    else
    {
      sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 32))(v4, v7, v1);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  }
  sub_23BDCD5B0();
  sub_23BD6B5DC(&qword_256AAE9A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  return sub_23BDCDCF4();
}

uint64_t AwardProgressState.hashValue.getter()
{
  sub_23BDCE084();
  AwardProgressState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD9C434()
{
  sub_23BDCE084();
  AwardProgressState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD9C474()
{
  sub_23BDCE084();
  AwardProgressState.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards18AwardProgressStateV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v4;
  uint64_t v5;

  if (*a1 == *a2 && ((a1[1] ^ a2[1]) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1) && *((_QWORD *)a1 + 2) == *((_QWORD *)a2 + 2);
    if (v4 || (sub_23BDCE024() & 1) != 0)
    {
      v5 = type metadata accessor for AwardProgressState();
      if ((_s13FitnessAwards22AwardProgressLoadStateO2eeoiySbAC_ACtFZ_0((uint64_t)&a1[*(int *)(v5 + 24)], (uint64_t)&a2[*(int *)(v5 + 24)]) & 1) != 0)JUMPOUT(0x242611180);
    }
  }
  return 0;
}

uint64_t sub_23BD9C558()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AAD660, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressState, (uint64_t)&protocol conformance descriptor for AwardProgressState);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardProgressState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (char *)a2 + v8;
    State = type metadata accessor for AwardProgressLoadState();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v15 = *(_QWORD *)v10;
      v16 = *((_QWORD *)v10 + 1);
      v17 = *((_QWORD *)v10 + 2);
      v18 = *((_QWORD *)v10 + 3);
      v19 = v10[32];
      sub_23BD6B728(v15, v16, v17, v18, v19);
      *v9 = v15;
      v9[1] = v16;
      v9[2] = v17;
      v9[3] = v18;
      *((_BYTE *)v9 + 32) = v19;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v13 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    v20 = *(int *)(a3 + 28);
    v21 = (char *)v4 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_23BDCD5B0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return v4;
}

uint64_t destroy for AwardProgressState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for AwardProgressLoadState();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BD5F110(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_BYTE *)(v4 + 32));
  }
  else if (!EnumCaseMultiPayload)
  {
    v6 = sub_23BDCD58C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  v7 = a1 + *(int *)(a2 + 28);
  v8 = sub_23BDCD5B0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for AwardProgressState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const void *v9;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  State = type metadata accessor for AwardProgressLoadState();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v13 = *(_QWORD *)v9;
    v14 = *((_QWORD *)v9 + 1);
    v15 = *((_QWORD *)v9 + 2);
    v16 = *((_QWORD *)v9 + 3);
    v17 = *((_BYTE *)v9 + 32);
    sub_23BD6B728(v13, v14, v15, v16, v17);
    *v8 = v13;
    v8[1] = v14;
    v8[2] = v15;
    v8[3] = v16;
    *((_BYTE *)v8 + 32) = v17;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v12 = sub_23BDCD58C();
    (*(void (**)(uint64_t *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
    swift_storeEnumTagMultiPayload();
  }
  v18 = *(int *)(a3 + 28);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_23BDCD5B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t assignWithCopy for AwardProgressState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  const void *v8;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_23BD59BB4(a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    State = type metadata accessor for AwardProgressLoadState();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *(_QWORD *)v8;
      v13 = *((_QWORD *)v8 + 1);
      v14 = *((_QWORD *)v8 + 2);
      v15 = *((_QWORD *)v8 + 3);
      v16 = *((_BYTE *)v8 + 32);
      sub_23BD6B728(v12, v13, v14, v15, v16);
      *v7 = v12;
      v7[1] = v13;
      v7[2] = v14;
      v7[3] = v15;
      *((_BYTE *)v7 + 32) = v16;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v11 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  v17 = *(int *)(a3 + 28);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = sub_23BDCD5B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 24))(v18, v19, v20);
  return a1;
}

uint64_t initializeWithTake for AwardProgressState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t State;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  State = type metadata accessor for AwardProgressLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v10 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23BDCD5B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for AwardProgressState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 24);
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    sub_23BD59BB4(a1 + v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    State = type metadata accessor for AwardProgressLoadState();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v11 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  v12 = *(int *)(a3 + 28);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23BDCD5B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardProgressState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9CC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    State = type metadata accessor for AwardProgressLoadState();
    v9 = *(_QWORD *)(State - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = State;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_23BDCD5B0();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AwardProgressState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9CD08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    State = type metadata accessor for AwardProgressLoadState();
    v9 = *(_QWORD *)(State - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = State;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_23BDCD5B0();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_23BD9CDA4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AwardProgressLoadState();
  if (v1 <= 0x3F)
  {
    result = sub_23BDCD5B0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardProgressState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD9CE88 + 4 * byte_23BDD4C29[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD9CEBC + 4 * byte_23BDD4C24[v4]))();
}

uint64_t sub_23BD9CEBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9CEC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD9CECCLL);
  return result;
}

uint64_t sub_23BD9CED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD9CEE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD9CEE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9CEEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressState.CodingKeys()
{
  return &type metadata for AwardProgressState.CodingKeys;
}

unint64_t sub_23BD9CF0C()
{
  unint64_t result;

  result = qword_256AAEA48;
  if (!qword_256AAEA48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4DF4, &type metadata for AwardProgressState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEA48);
  }
  return result;
}

unint64_t sub_23BD9CF54()
{
  unint64_t result;

  result = qword_256AAEA50;
  if (!qword_256AAEA50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4D64, &type metadata for AwardProgressState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEA50);
  }
  return result;
}

unint64_t sub_23BD9CF9C()
{
  unint64_t result;

  result = qword_256AAEA58;
  if (!qword_256AAEA58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD4D8C, &type metadata for AwardProgressState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEA58);
  }
  return result;
}

uint64_t sub_23BD9CFE0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x63736544746E6F66 && a2 == 0xEE00726F74706972;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461745364616F6CLL && a2 == 0xE900000000000065 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA730)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t PlaceholderReferenceType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD9D1D8 + 4 * byte_23BDD4E70[a1]))(0xD000000000000013, 0x800000023BDD9E00);
}

uint64_t sub_23BD9D1D8()
{
  return 0x6472617761;
}

uint64_t sub_23BD9D1EC()
{
  return 0x6169726F74696465;
}

uint64_t sub_23BD9D210()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23BD9D228()
{
  return 0x7473696C79616C70;
}

uint64_t sub_23BD9D240()
{
  return 0x6D6172676F7270;
}

uint64_t sub_23BD9D258()
{
  return 7367028;
}

uint64_t sub_23BD9D268()
{
  return 0x72656E69617274;
}

uint64_t sub_23BD9D280()
{
  return 0x74756F6B726F77;
}

uint64_t sub_23BD9D298(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PlaceholderReferenceType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PlaceholderReferenceType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23BDCE024();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23BD9D320@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s13FitnessAwards24PlaceholderReferenceTypeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23BD9D34C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PlaceholderReferenceType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23BD9D374()
{
  sub_23BD9D704();
  return sub_23BDCDDB4();
}

uint64_t sub_23BD9D3D0()
{
  sub_23BD9D704();
  return sub_23BDCDDA8();
}

uint64_t sub_23BD9D41C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BDCE084();
  PlaceholderReferenceType.rawValue.getter(v1);
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  return sub_23BDCE0B4();
}

uint64_t sub_23BD9D47C()
{
  unsigned __int8 *v0;

  PlaceholderReferenceType.rawValue.getter(*v0);
  sub_23BDCDD90();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BD9D4BC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23BDCE084();
  PlaceholderReferenceType.rawValue.getter(v1);
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards24PlaceholderReferenceTypeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23BDCDF1C();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_23BD9D564()
{
  unint64_t result;

  result = qword_256AAEA60;
  if (!qword_256AAEA60)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for PlaceholderReferenceType, &type metadata for PlaceholderReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AAEA60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlaceholderReferenceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PlaceholderReferenceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23BD9D684 + 4 * byte_23BDD4E7E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23BD9D6B8 + 4 * byte_23BDD4E79[v4]))();
}

uint64_t sub_23BD9D6B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9D6C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD9D6C8);
  return result;
}

uint64_t sub_23BD9D6D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD9D6DCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23BD9D6E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9D6E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaceholderReferenceType()
{
  return &type metadata for PlaceholderReferenceType;
}

unint64_t sub_23BD9D704()
{
  unint64_t result;

  result = qword_256AAEA68;
  if (!qword_256AAEA68)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for PlaceholderReferenceType, &type metadata for PlaceholderReferenceType);
    atomic_store(result, (unint64_t *)&qword_256AAEA68);
  }
  return result;
}

id static NSBundle.awardsLocalization.getter()
{
  uint64_t ObjCClassFromMetadata;

  type metadata accessor for AwardsLocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t type metadata accessor for AwardsLocalizationBundle()
{
  return objc_opt_self();
}

uint64_t sub_23BD9D7AC()
{
  return swift_deallocClassInstance();
}

uint64_t AwardHeaderState.init(templateUniqueName:layout:tvLayout:description:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v16 = a4[1];
  v17 = *a4;
  v15 = a4[2];
  v9 = *((_QWORD *)a4 + 6);
  *a6 = a1;
  a6[1] = a2;
  v10 = (int *)type metadata accessor for AwardHeaderState();
  sub_23BD9D8B4(a3, (uint64_t)a6 + v10[5]);
  v11 = (char *)a6 + v10[6];
  *(_OWORD *)v11 = v17;
  *((_OWORD *)v11 + 1) = v16;
  *((_OWORD *)v11 + 2) = v15;
  *((_QWORD *)v11 + 6) = v9;
  v12 = (char *)a6 + v10[7];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a5, v13);
}

uint64_t type metadata accessor for AwardHeaderState()
{
  uint64_t result;

  result = qword_256AAEB98;
  if (!qword_256AAEB98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23BD9D8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardHeaderLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AwardHeaderState.templateUniqueName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardHeaderState.layout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardHeaderState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardHeaderLayout);
}

double AwardHeaderState.tvLayout.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  __int128 v5;

  v3 = v1 + *(int *)(type metadata accessor for AwardHeaderState() + 24);
  result = *(double *)(v3 + 48);
  v5 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  *(double *)(a1 + 48) = result;
  return result;
}

uint64_t AwardHeaderState.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardHeaderState() + 28);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AwardHeaderState.description.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardHeaderState() + 28);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*AwardHeaderState.description.modify())()
{
  type metadata accessor for AwardHeaderState();
  return nullsub_1;
}

uint64_t sub_23BD9DA64(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD9DA9C + 4 * byte_23BDD4FC0[a1]))(0xD000000000000012, 0x800000023BDD9F00);
}

uint64_t sub_23BD9DA9C()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BD9DAB0()
{
  return 0x74756F79614C7674;
}

uint64_t sub_23BD9DAC8()
{
  return 0x7470697263736564;
}

uint64_t sub_23BD9DAE8()
{
  unsigned __int8 *v0;

  return sub_23BD9DA64(*v0);
}

uint64_t sub_23BD9DAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BD9F0CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD9DB14()
{
  sub_23BD9DD68();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9DB3C()
{
  sub_23BD9DD68();
  return sub_23BDCE0E4();
}

uint64_t AwardHeaderState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEB08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BD9DD68();
  sub_23BDCE0CC();
  LOBYTE(v15) = 0;
  sub_23BDCDFDC();
  if (!v2)
  {
    v9 = type metadata accessor for AwardHeaderState();
    LOBYTE(v15) = 1;
    type metadata accessor for AwardHeaderLayout();
    sub_23BD9E15C(&qword_256AAEB18, (uint64_t)&protocol conformance descriptor for AwardHeaderLayout);
    sub_23BDCE00C();
    v10 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v11 = *((_QWORD *)v10 + 6);
    v12 = v10[1];
    v15 = *v10;
    v16 = v12;
    v17 = v10[2];
    v18 = v11;
    v14[15] = 2;
    sub_23BD9DDAC();
    sub_23BDCE00C();
    LOBYTE(v15) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
    sub_23BD9A8E4(&qword_256AAE878, MEMORY[0x24BE2B3F8]);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BD9DD68()
{
  unint64_t result;

  result = qword_256AAEB10;
  if (!qword_256AAEB10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD517C, &type metadata for AwardHeaderState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEB10);
  }
  return result;
}

unint64_t sub_23BD9DDAC()
{
  unint64_t result;

  result = qword_256AAEB20;
  if (!qword_256AAEB20)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for TVAwardHeaderLayout, &type metadata for TVAwardHeaderLayout);
    atomic_store(result, (unint64_t *)&qword_256AAEB20);
  }
  return result;
}

uint64_t AwardHeaderState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;

  v25 = a2;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AwardHeaderLayout();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEB28);
  v7 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for AwardHeaderState();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23BD9DD68();
  v29 = v9;
  v14 = v31;
  sub_23BDCE0C0();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  v15 = v7;
  LOBYTE(v32) = 0;
  v16 = (uint64_t)v12;
  *v12 = sub_23BDCDF64();
  v12[1] = v17;
  LOBYTE(v32) = 1;
  sub_23BD9E15C(&qword_256AAEB30, (uint64_t)&protocol conformance descriptor for AwardHeaderLayout);
  sub_23BDCDF94();
  sub_23BD9D8B4((uint64_t)v6, (uint64_t)v12 + v10[5]);
  v36 = 2;
  sub_23BD9E19C();
  sub_23BDCDF94();
  v18 = v35;
  v19 = (char *)v12 + v10[6];
  v20 = v33;
  *(_OWORD *)v19 = v32;
  *((_OWORD *)v19 + 1) = v20;
  *((_OWORD *)v19 + 2) = v34;
  *((_QWORD *)v19 + 6) = v18;
  LOBYTE(v32) = 3;
  sub_23BD9A8E4(&qword_256AAE8A0, MEMORY[0x24BE2B410]);
  v22 = v26;
  v21 = v27;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v16 + v10[7], v21, v22);
  sub_23BD594E4(v16, v25, (uint64_t (*)(_QWORD))type metadata accessor for AwardHeaderState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return sub_23BD59BB4(v16, (uint64_t (*)(_QWORD))type metadata accessor for AwardHeaderState);
}

uint64_t sub_23BD9E15C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AwardHeaderLayout();
    result = MEMORY[0x242611F78](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BD9E19C()
{
  unint64_t result;

  result = qword_256AAEB38;
  if (!qword_256AAEB38)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for TVAwardHeaderLayout, &type metadata for TVAwardHeaderLayout);
    atomic_store(result, (unint64_t *)&qword_256AAEB38);
  }
  return result;
}

uint64_t sub_23BD9E1E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardHeaderState.init(from:)(a1, a2);
}

uint64_t sub_23BD9E1F4(_QWORD *a1)
{
  return AwardHeaderState.encode(to:)(a1);
}

uint64_t _s13FitnessAwards16AwardHeaderStateV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  float64x2_t v8;
  char *v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v13[3];
  uint64_t v14;
  float64x2_t v15[3];
  uint64_t v16;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_23BDCE024() & 1) == 0)
    return 0;
  v5 = type metadata accessor for AwardHeaderState();
  if (!_s13FitnessAwards17AwardHeaderLayoutV2eeoiySbAC_ACtFZ_0((double *)((char *)a1 + *(int *)(v5 + 20)), (double *)((char *)a2 + *(int *)(v5 + 20))))return 0;
  v6 = (char *)a1 + *(int *)(v5 + 24);
  v7 = *((_QWORD *)v6 + 6);
  v8 = *((float64x2_t *)v6 + 1);
  v15[0] = *(float64x2_t *)v6;
  v15[1] = v8;
  v15[2] = *((float64x2_t *)v6 + 2);
  v16 = v7;
  v9 = (char *)a2 + *(int *)(v5 + 24);
  v10 = *((_QWORD *)v9 + 6);
  v11 = *((float64x2_t *)v9 + 1);
  v13[0] = *(float64x2_t *)v9;
  v13[1] = v11;
  v13[2] = *((float64x2_t *)v9 + 2);
  v14 = v10;
  if (!_s13FitnessAwards19TVAwardHeaderLayoutV2eeoiySbAC_ACtFZ_0(v15, v13))
    return 0;
  sub_23BD77178();
  return sub_23BDCDC88();
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardHeaderState(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for AwardHeaderLayout();
    v12 = v11[5];
    v32 = &v9[v12];
    v13 = &v10[v12];
    v14 = sub_23BDCD5F8();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v32, v13, v14);
    *(_WORD *)&v9[v11[6]] = *(_WORD *)&v10[v11[6]];
    *(_QWORD *)&v9[v11[7]] = *(_QWORD *)&v10[v11[7]];
    v15(&v9[v11[8]], &v10[v11[8]], v14);
    *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
    v9[v11[10]] = v10[v11[10]];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    *(_QWORD *)&v9[v11[13]] = *(_QWORD *)&v10[v11[13]];
    v16 = v11[14];
    v17 = &v9[v16];
    v18 = &v10[v16];
    v17[8] = v18[8];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v19 = v11[15];
    v20 = &v9[v19];
    v21 = &v10[v19];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v9[v11[16]] = v10[v11[16]];
    *(_WORD *)&v9[v11[17]] = *(_WORD *)&v10[v11[17]];
    *(_QWORD *)&v9[v11[18]] = *(_QWORD *)&v10[v11[18]];
    v22 = a3[6];
    v23 = a3[7];
    v24 = (char *)v4 + v22;
    v25 = (char *)a2 + v22;
    v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
    *((_QWORD *)v24 + 6) = *((_QWORD *)v25 + 6);
    v27 = (char *)v4 + v23;
    v28 = (char *)a2 + v23;
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
  }
  return v4;
}

uint64_t destroy for AwardHeaderState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for AwardHeaderLayout();
  v6 = v4 + *(int *)(v5 + 20);
  v7 = sub_23BDCD5F8();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v4 + *(int *)(v5 + 32), v7);
  v9 = a1 + *(int *)(a2 + 28);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

_QWORD *initializeWithCopy for AwardHeaderState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for AwardHeaderLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  *(_WORD *)&v7[v9[6]] = *(_WORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v14(&v7[v9[8]], &v8[v9[8]], v13);
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v15 = v9[14];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = v9[15];
  v19 = &v7[v18];
  v20 = &v8[v18];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  v7[v9[16]] = v8[v9[16]];
  *(_WORD *)&v7[v9[17]] = *(_WORD *)&v8[v9[17]];
  *(_QWORD *)&v7[v9[18]] = *(_QWORD *)&v8[v9[18]];
  v21 = a3[6];
  v22 = a3[7];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  v26 = (char *)a1 + v22;
  v27 = (char *)a2 + v22;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  return a1;
}

_QWORD *assignWithCopy for AwardHeaderState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)((char *)a2 + v6);
  *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);
  v9 = (int *)type metadata accessor for AwardHeaderLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v15 = v9[6];
  v16 = &v7[v15];
  v17 = &v8[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v14(&v7[v9[8]], &v8[v9[8]], v13);
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v18 = v9[14];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = v20[8];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v21;
  v22 = v9[15];
  v23 = &v7[v22];
  v24 = &v8[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  v7[v9[16]] = v8[v9[16]];
  v25 = v9[17];
  v26 = &v7[v25];
  v27 = &v8[v25];
  *v26 = *v27;
  v26[1] = v27[1];
  *(_QWORD *)&v7[v9[18]] = *(_QWORD *)&v8[v9[18]];
  v28 = a3[6];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *v30;
  v29[1] = v30[1];
  v29[2] = v30[2];
  v29[3] = v30[3];
  v29[4] = v30[4];
  v29[5] = v30[5];
  v29[6] = v30[6];
  v31 = a3[7];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

_OWORD *initializeWithTake for AwardHeaderState(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for AwardHeaderLayout();
  v10 = v9[5];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = sub_23BDCD5F8();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  *(_WORD *)&v7[v9[6]] = *(_WORD *)&v8[v9[6]];
  *(_QWORD *)&v7[v9[7]] = *(_QWORD *)&v8[v9[7]];
  v14(&v7[v9[8]], &v8[v9[8]], v13);
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  v7[v9[10]] = v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  *(_QWORD *)&v7[v9[13]] = *(_QWORD *)&v8[v9[13]];
  v15 = v9[14];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = v9[15];
  v19 = &v7[v18];
  v20 = &v8[v18];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  v7[v9[16]] = v8[v9[16]];
  *(_WORD *)&v7[v9[17]] = *(_WORD *)&v8[v9[17]];
  *(_QWORD *)&v7[v9[18]] = *(_QWORD *)&v8[v9[18]];
  v21 = a3[6];
  v22 = a3[7];
  v23 = (char *)a1 + v21;
  v24 = (char *)a2 + v21;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  v26 = (char *)a1 + v22;
  v27 = (char *)a2 + v22;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

_QWORD *assignWithTake for AwardHeaderState(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
  v10 = (int *)type metadata accessor for AwardHeaderLayout();
  v11 = v10[5];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = sub_23BDCD5F8();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v16 = v10[6];
  v17 = &v8[v16];
  v18 = &v9[v16];
  *v17 = *v18;
  v17[1] = v18[1];
  *(_QWORD *)&v8[v10[7]] = *(_QWORD *)&v9[v10[7]];
  v15(&v8[v10[8]], &v9[v10[8]], v14);
  *(_QWORD *)&v8[v10[9]] = *(_QWORD *)&v9[v10[9]];
  v8[v10[10]] = v9[v10[10]];
  v8[v10[11]] = v9[v10[11]];
  v8[v10[12]] = v9[v10[12]];
  *(_QWORD *)&v8[v10[13]] = *(_QWORD *)&v9[v10[13]];
  v19 = v10[14];
  v20 = &v8[v19];
  v21 = &v9[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  v22 = v10[15];
  v23 = &v8[v22];
  v24 = &v9[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  v8[v10[16]] = v9[v10[16]];
  v25 = v10[17];
  v26 = &v8[v25];
  v27 = &v9[v25];
  *v26 = *v27;
  v26[1] = v27[1];
  *(_QWORD *)&v8[v10[18]] = *(_QWORD *)&v9[v10[18]];
  v28 = a3[6];
  v29 = a3[7];
  v30 = (char *)a1 + v28;
  v31 = (char *)a2 + v28;
  v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  *((_OWORD *)v30 + 2) = *((_OWORD *)v31 + 2);
  *((_QWORD *)v30 + 6) = *((_QWORD *)v31 + 6);
  v33 = (char *)a1 + v29;
  v34 = (char *)a2 + v29;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardHeaderState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9ED40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for AwardHeaderLayout();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AwardHeaderState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BD9EDF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for AwardHeaderLayout();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD410);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_23BD9EE90()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AwardHeaderLayout();
  if (v0 <= 0x3F)
  {
    sub_23BD9B470();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for AwardHeaderState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BD9EF74 + 4 * byte_23BDD4FC9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BD9EFA8 + 4 * byte_23BDD4FC4[v4]))();
}

uint64_t sub_23BD9EFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9EFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BD9EFB8);
  return result;
}

uint64_t sub_23BD9EFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BD9EFCCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BD9EFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BD9EFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardHeaderState.CodingKeys()
{
  return &type metadata for AwardHeaderState.CodingKeys;
}

unint64_t sub_23BD9EFF8()
{
  unint64_t result;

  result = qword_256AAEBD8;
  if (!qword_256AAEBD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5154, &type metadata for AwardHeaderState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEBD8);
  }
  return result;
}

unint64_t sub_23BD9F040()
{
  unint64_t result;

  result = qword_256AAEBE0;
  if (!qword_256AAEBE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD50C4, &type metadata for AwardHeaderState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEBE0);
  }
  return result;
}

unint64_t sub_23BD9F088()
{
  unint64_t result;

  result = qword_256AAEBE8;
  if (!qword_256AAEBE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD50EC, &type metadata for AwardHeaderState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEBE8);
  }
  return result;
}

uint64_t sub_23BD9F0CC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74756F79614C7674 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t AwardRemoteParticipantStatusMonitorState.earnedLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardRemoteParticipantStatusMonitorState.earnedLoadStates.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AwardRemoteParticipantStatusMonitorState.earnedLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AwardRemoteParticipantStatusMonitorState.imageLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardRemoteParticipantStatusMonitorState.imageLoadStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AwardRemoteParticipantStatusMonitorState.imageLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AwardRemoteParticipantStatusMonitorState.progressLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardRemoteParticipantStatusMonitorState.progressLoadStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AwardRemoteParticipantStatusMonitorState.progressLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AwardRemoteParticipantStatusMonitorState.suggestedWorkoutsStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardRemoteParticipantStatusMonitorState.suggestedWorkoutsStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AwardRemoteParticipantStatusMonitorState.suggestedWorkoutsStates.modify())()
{
  return nullsub_1;
}

uint64_t AwardRemoteParticipantStatusMonitorState.toastLoadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardRemoteParticipantStatusMonitorState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
}

uint64_t type metadata accessor for AwardRemoteParticipantStatusMonitorState()
{
  uint64_t result;

  result = qword_256AAECF0;
  if (!qword_256AAECF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardRemoteParticipantStatusMonitorState.toastLoadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AwardRemoteParticipantStatusMonitorState() + 32);
  return sub_23BD9F420(a1, v3);
}

uint64_t sub_23BD9F420(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardToastLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 40))(a2, a1, State);
  return a2;
}

uint64_t (*AwardRemoteParticipantStatusMonitorState.toastLoadState.modify())()
{
  type metadata accessor for AwardRemoteParticipantStatusMonitorState();
  return nullsub_1;
}

uint64_t AwardRemoteParticipantStatusMonitorState.init(earnedLoadStates:imageLoadStates:progressLoadStates:suggestedWorkoutsStates:toastLoadState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v7 = (uint64_t)a6 + *(int *)(type metadata accessor for AwardRemoteParticipantStatusMonitorState() + 32);
  return sub_23BD9F4C8(a5, v7);
}

uint64_t sub_23BD9F4C8(uint64_t a1, uint64_t a2)
{
  uint64_t State;

  State = type metadata accessor for AwardToastLoadState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 32))(a2, a1, State);
  return a2;
}

uint64_t AwardRemoteParticipantStatusMonitorState.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t State;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[6];

  v3 = sub_23BDCD58C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v9 = (_QWORD *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *v1;
  swift_bridgeObjectRetain();
  sub_23BD93DC0(a1, v10);
  swift_bridgeObjectRelease();
  v11 = v1[1];
  swift_bridgeObjectRetain();
  sub_23BD9369C((uint64_t)a1, v11);
  swift_bridgeObjectRelease();
  v12 = v1[2];
  swift_bridgeObjectRetain();
  sub_23BD93174(a1, v12);
  swift_bridgeObjectRelease();
  v13 = v1[3];
  swift_bridgeObjectRetain();
  sub_23BD92CCC((uint64_t)a1, v13);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for AwardRemoteParticipantStatusMonitorState();
  sub_23BD594E4((uint64_t)v1 + *(int *)(v14 + 32), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *v9;
      v17 = v9[1];
      v18 = v9[2];
      v19 = v9[3];
      v21 = v9[4];
      v20 = v9[5];
      sub_23BDCE090();
      v23[0] = v16;
      v23[1] = v17;
      v23[2] = v18;
      v23[3] = v19;
      v23[4] = v21;
      v23[5] = v20;
      AwardToastDetail.hash(into:)((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_23BD9F744(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BD9F77C + 4 * byte_23BDD51D0[a1]))(0xD000000000000010, 0x800000023BDDA780);
}

uint64_t sub_23BD9F77C()
{
  return 0x616F4C6567616D69;
}

uint64_t sub_23BD9F7A0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_23BD9F7C8()
{
  return 0x616F4C7473616F74;
}

uint64_t sub_23BD9F7EC()
{
  unsigned __int8 *v0;

  return sub_23BD9F744(*v0);
}

uint64_t sub_23BD9F7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDA0E9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BD9F818()
{
  sub_23BDA0090();
  return sub_23BDCE0D8();
}

uint64_t sub_23BD9F840()
{
  sub_23BDA0090();
  return sub_23BDCE0E4();
}

uint64_t AwardRemoteParticipantStatusMonitorState.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEBF0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA0090();
  sub_23BDCE0CC();
  v11 = *v3;
  HIBYTE(v10) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC00);
  sub_23BDA00D4();
  sub_23BDCE00C();
  if (!v2)
  {
    v11 = v3[1];
    HIBYTE(v10) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC10);
    sub_23BDA0278(&qword_256AAEC18, &qword_256AAEC10, (uint64_t (*)(void))sub_23BDA0158);
    sub_23BDCE00C();
    v11 = v3[2];
    HIBYTE(v10) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
    sub_23BDA01F4();
    sub_23BDCE00C();
    v11 = v3[3];
    HIBYTE(v10) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
    sub_23BDA0278(&qword_256AAEC48, &qword_256AAEC40, (uint64_t (*)(void))sub_23BD590CC);
    sub_23BDCE00C();
    type metadata accessor for AwardRemoteParticipantStatusMonitorState();
    LOBYTE(v11) = 4;
    type metadata accessor for AwardToastLoadState();
    sub_23BD6B5DC(&qword_256AAEC50, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AwardRemoteParticipantStatusMonitorState.hashValue.getter()
{
  __int128 v1[4];

  sub_23BDCE084();
  AwardRemoteParticipantStatusMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t AwardRemoteParticipantStatusMonitorState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t State;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v22 = a2;
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC58);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AwardRemoteParticipantStatusMonitorState();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA0090();
  v24 = v7;
  v11 = v26;
  sub_23BDCE0C0();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = v8;
  v20 = v4;
  v21 = a1;
  v26 = v5;
  v12 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC00);
  v27 = 0;
  sub_23BDA02E4();
  v13 = v25;
  v14 = v24;
  sub_23BDCDF94();
  *v12 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC10);
  v27 = 1;
  sub_23BDA0368(&qword_256AAEC68, &qword_256AAEC10, (uint64_t (*)(void))sub_23BDA03D4);
  sub_23BDCDF94();
  v15 = v26;
  v12[1] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
  v27 = 2;
  sub_23BDA0470();
  sub_23BDCDF94();
  v12[2] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
  v27 = 3;
  sub_23BDA0368(&qword_256AAEC88, &qword_256AAEC40, (uint64_t (*)(void))sub_23BD59460);
  sub_23BDCDF94();
  v12[3] = v28;
  LOBYTE(v28) = 4;
  sub_23BD6B5DC(&qword_256AAEC90, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
  v16 = (uint64_t)v20;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v13);
  sub_23BD9F4C8(v16, (uint64_t)v12 + *(int *)(v19 + 32));
  sub_23BD594E4((uint64_t)v12, v22, (uint64_t (*)(_QWORD))type metadata accessor for AwardRemoteParticipantStatusMonitorState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_23BD59BB4((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AwardRemoteParticipantStatusMonitorState);
}

uint64_t sub_23BD9FF68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardRemoteParticipantStatusMonitorState.init(from:)(a1, a2);
}

uint64_t sub_23BD9FF7C(_QWORD *a1)
{
  return AwardRemoteParticipantStatusMonitorState.encode(to:)(a1);
}

uint64_t sub_23BD9FF90()
{
  __int128 v1[4];

  sub_23BDCE084();
  AwardRemoteParticipantStatusMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BD9FFD0()
{
  __int128 v1[4];

  sub_23BDCE084();
  AwardRemoteParticipantStatusMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards40AwardRemoteParticipantStatusMonitorStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  if ((sub_23BDC8A14(*(_QWORD *)a1, *a2) & 1) == 0
    || (sub_23BDC9034(*(_QWORD *)(a1 + 8), a2[1]) & 1) == 0
    || (sub_23BDC91FC(*(_QWORD *)(a1 + 16), a2[2]) & 1) == 0
    || (sub_23BDC9A04(*(_QWORD *)(a1 + 24), a2[3]) & 1) == 0)
  {
    return 0;
  }
  v4 = *(int *)(type metadata accessor for AwardRemoteParticipantStatusMonitorState() + 32);
  return _s13FitnessAwards19AwardToastLoadStateO2eeoiySbAC_ACtFZ_0(a1 + v4, (uint64_t)a2 + v4);
}

unint64_t sub_23BDA0090()
{
  unint64_t result;

  result = qword_256AAEBF8;
  if (!qword_256AAEBF8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD53AC, &type metadata for AwardRemoteParticipantStatusMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEBF8);
  }
  return result;
}

unint64_t sub_23BDA00D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAEC08;
  if (!qword_256AAEC08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEC00);
    v2 = sub_23BD6B5DC(&qword_256AACE40, (uint64_t (*)(uint64_t))type metadata accessor for AwardEarnedLoadState, (uint64_t)&protocol conformance descriptor for AwardEarnedLoadState);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAEC08);
  }
  return result;
}

unint64_t sub_23BDA0158()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAEC20;
  if (!qword_256AAEC20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD950);
    v2[0] = sub_23BD6B5DC(&qword_256AACF30, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    v2[1] = sub_23BD6B5DC(&qword_256AAEC28, (uint64_t (*)(uint64_t))type metadata accessor for AwardImageLoadState, (uint64_t)&protocol conformance descriptor for AwardImageLoadState);
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAEC20);
  }
  return result;
}

unint64_t sub_23BDA01F4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAEC38;
  if (!qword_256AAEC38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEC30);
    v2 = sub_23BD6B5DC(&qword_256AAE978, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressLoadState, (uint64_t)&protocol conformance descriptor for AwardProgressLoadState);
    v3[0] = MEMORY[0x24BEE0D08];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04C0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAEC38);
  }
  return result;
}

uint64_t sub_23BDA0278(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    v8[0] = MEMORY[0x24BEE0D08];
    v8[1] = v7;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04C0], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BDA02E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAEC60;
  if (!qword_256AAEC60)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEC00);
    v2 = sub_23BD6B5DC(&qword_256AACE60, (uint64_t (*)(uint64_t))type metadata accessor for AwardEarnedLoadState, (uint64_t)&protocol conformance descriptor for AwardEarnedLoadState);
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAEC60);
  }
  return result;
}

uint64_t sub_23BDA0368(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3();
    v8[0] = MEMORY[0x24BEE0D38];
    v8[1] = v7;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04E0], v6, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BDA03D4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAEC70;
  if (!qword_256AAEC70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD950);
    v2[0] = sub_23BD6B5DC(&qword_256AACF40, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    v2[1] = sub_23BD6B5DC(&qword_256AAEC78, (uint64_t (*)(uint64_t))type metadata accessor for AwardImageLoadState, (uint64_t)&protocol conformance descriptor for AwardImageLoadState);
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAEC70);
  }
  return result;
}

unint64_t sub_23BDA0470()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256AAEC80;
  if (!qword_256AAEC80)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEC30);
    v2 = sub_23BD6B5DC(&qword_256AAE998, (uint64_t (*)(uint64_t))type metadata accessor for AwardProgressLoadState, (uint64_t)&protocol conformance descriptor for AwardProgressLoadState);
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAEC80);
  }
  return result;
}

uint64_t sub_23BDA04F4()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AAD968, (uint64_t (*)(uint64_t))type metadata accessor for AwardRemoteParticipantStatusMonitorState, (uint64_t)&protocol conformance descriptor for AwardRemoteParticipantStatusMonitorState);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardRemoteParticipantStatusMonitorState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    v7 = *(int *)(a3 + 32);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    State = type metadata accessor for AwardToastLoadState();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v13 = v9[1];
      *v8 = *v9;
      v8[1] = v13;
      v14 = v9[3];
      v8[2] = v9[2];
      v8[3] = v14;
      v16 = v9[4];
      v15 = v9[5];
      v8[4] = v16;
      v8[5] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v12 = sub_23BDCD58C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      swift_storeEnumTagMultiPayload();
    }
  }
  return v5;
}

uint64_t destroy for AwardRemoteParticipantStatusMonitorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  type metadata accessor for AwardToastLoadState();
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (!(_DWORD)result)
  {
    v6 = sub_23BDCD58C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  return result;
}

_QWORD *initializeWithCopy for AwardRemoteParticipantStatusMonitorState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  State = type metadata accessor for AwardToastLoadState();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = v8[3];
    v7[2] = v8[2];
    v7[3] = v13;
    v15 = v8[4];
    v14 = v8[5];
    v7[4] = v15;
    v7[5] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v11 = sub_23BDCD58C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for AwardRemoteParticipantStatusMonitorState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v11;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_23BD59BB4((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
    State = type metadata accessor for AwardToastLoadState();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      v7[5] = v8[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v11 = sub_23BDCD58C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_OWORD *initializeWithTake for AwardRemoteParticipantStatusMonitorState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t State;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  State = type metadata accessor for AwardToastLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v9 = sub_23BDCD58C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithTake for AwardRemoteParticipantStatusMonitorState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t State;
  uint64_t v10;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 32);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_23BD59BB4((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
    State = type metadata accessor for AwardToastLoadState();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v10 = sub_23BDCD58C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardRemoteParticipantStatusMonitorState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDA0B80(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t State;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, State);
  }
}

uint64_t storeEnumTagSinglePayload for AwardRemoteParticipantStatusMonitorState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BDA0C08(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t State;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, State);
  }
  return result;
}

uint64_t sub_23BDA0C7C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AwardToastLoadState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardRemoteParticipantStatusMonitorState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDA0D44 + 4 * byte_23BDD51DA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDA0D78 + 4 * byte_23BDD51D5[v4]))();
}

uint64_t sub_23BDA0D78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA0D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDA0D88);
  return result;
}

uint64_t sub_23BDA0D94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDA0D9CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDA0DA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA0DA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorState.CodingKeys()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorState.CodingKeys;
}

unint64_t sub_23BDA0DC8()
{
  unint64_t result;

  result = qword_256AAED38;
  if (!qword_256AAED38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5384, &type metadata for AwardRemoteParticipantStatusMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAED38);
  }
  return result;
}

unint64_t sub_23BDA0E10()
{
  unint64_t result;

  result = qword_256AAED40;
  if (!qword_256AAED40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD52F4, &type metadata for AwardRemoteParticipantStatusMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAED40);
  }
  return result;
}

unint64_t sub_23BDA0E58()
{
  unint64_t result;

  result = qword_256AAED48;
  if (!qword_256AAED48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD531C, &type metadata for AwardRemoteParticipantStatusMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAED48);
  }
  return result;
}

uint64_t sub_23BDA0E9C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA780 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616F4C6567616D69 && a2 == 0xEF73657461745364 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA7A0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023BDDA7C0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616F4C7473616F74 && a2 == 0xEE00657461745364)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

__n128 AwardHeaderFeature.init(environment:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  type metadata accessor for AwardHeaderFeature();
  sub_23BDCD580();
  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata accessor for AwardHeaderFeature()
{
  uint64_t result;

  result = qword_256AAEDD8;
  if (!qword_256AAEDD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardHeaderFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v32 = a3;
  v4 = type metadata accessor for AwardHeaderFeature();
  v29 = *(_QWORD *)(v4 - 8);
  v5 = *(_QWORD *)(v29 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD738);
  v7 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  v11 = a2[1];
  v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
  v28 = &v9[v12[12]];
  v13 = &v9[v12[16]];
  v14 = &v9[v12[20]];
  v15 = &v9[v12[24]];
  v33 = v10;
  v34 = v11;
  v35 = 0;
  sub_23BDA13D0();
  swift_bridgeObjectRetain_n();
  sub_23BDCDE80();
  v16 = *MEMORY[0x24BE2B580];
  v17 = sub_23BDCDCC4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v13, v16, v17);
  v18 = *MEMORY[0x24BE2B550];
  v19 = sub_23BDCDCB8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v14, v18, v19);
  sub_23BDA1674(v30, (uint64_t)v6);
  v20 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v21 = v32;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v10;
  *(_QWORD *)(v22 + 24) = v11;
  sub_23BDA174C((uint64_t)v6, v22 + v20);
  *(_QWORD *)v15 = &unk_256AAED60;
  *((_QWORD *)v15 + 1) = v22;
  v23 = v31;
  sub_23BDCDDFC();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE2B438], v23);
  v24 = *v21;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v24 = sub_23BD6E4A0(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
  v26 = *(_QWORD *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 24);
  if (v26 >= v25 >> 1)
    v24 = sub_23BD6E4A0(v25 > 1, v26 + 1, 1, v24);
  *(_QWORD *)(v24 + 16) = v26 + 1;
  result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(v24+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v26, v9, v23);
  *v21 = v24;
  return result;
}

unint64_t sub_23BDA13D0()
{
  unint64_t result;

  result = qword_256AAED50;
  if (!qword_256AAED50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD54BC, &_s13FitnessAwards14TaskIdentifierON_0);
    atomic_store(result, &qword_256AAED50);
  }
  return result;
}

uint64_t sub_23BDA1414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  sub_23BDCDDF0();
  v4[6] = sub_23BDCDDE4();
  v4[7] = sub_23BDCDDCC();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t sub_23BDA1484()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, _QWORD);
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 32);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardHeaderFeature] Resolving award description state on viewAppeared for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (*)(_QWORD, _QWORD))(***(int ***)(v0 + 40) + **(_QWORD **)(v0 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  *v9 = v0;
  v9[1] = sub_23BD85FE8;
  return v11(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23BDA1674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardHeaderFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDA16B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardHeaderFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_bridgeObjectRelease();
  swift_release();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_23BDA174C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardHeaderFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDA1790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardHeaderFeature() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6EBF8;
  return sub_23BDA1414(a1, v5, v6, v7);
}

unint64_t sub_23BDA181C()
{
  unint64_t result;

  result = qword_256AAED68;
  if (!qword_256AAED68)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardHeaderAction, &type metadata for AwardHeaderAction);
    atomic_store(result, (unint64_t *)&qword_256AAED68);
  }
  return result;
}

unint64_t sub_23BDA1864()
{
  unint64_t result;

  result = qword_256AAED70;
  if (!qword_256AAED70)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardHeaderAction, &type metadata for AwardHeaderAction);
    atomic_store(result, (unint64_t *)&qword_256AAED70);
  }
  return result;
}

unint64_t sub_23BDA18AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAED78;
  if (!qword_256AAED78)
  {
    v1 = type metadata accessor for AwardHeaderState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardHeaderState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAED78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardHeaderFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDA1900(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardHeaderFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BDA1988(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

ValueMetadata *_s13FitnessAwards14TaskIdentifierOMa_0()
{
  return &_s13FitnessAwards14TaskIdentifierON_0;
}

unint64_t sub_23BDA1A10()
{
  unint64_t result;

  result = qword_256AAEE10;
  if (!qword_256AAEE10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5494, &_s13FitnessAwards14TaskIdentifierON_0);
    atomic_store(result, (unint64_t *)&qword_256AAEE10);
  }
  return result;
}

uint64_t sub_23BDA1A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23BDCDE50();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_23BDA1A90()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEF08);
  sub_23BD5ED30(&qword_256AAEF10, &qword_256AAEF08, MEMORY[0x24BE2B5E8]);
  return sub_23BDCD694();
}

uint64_t AwardToastView.init(store:imageViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a5 = sub_23BD5AACC;
  *(_QWORD *)(a5 + 8) = result;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

uint64_t sub_23BDA1B68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AwardToastView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t result;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  uint64_t OpaqueTypeConformance2;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  _QWORD v167[2];
  _QWORD v168[2];
  _QWORD v169[2];
  _QWORD v170[2];
  _QWORD v171[2];
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[2];
  _QWORD v175[2];
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;

  v155 = a2;
  v149 = sub_23BDCD85C();
  MEMORY[0x24BDAC7A8](v149);
  v148 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_23BDCD67C();
  v152 = *(_QWORD *)(v154 - 8);
  MEMORY[0x24BDAC7A8](v154);
  v150 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEE18);
  v153 = *(_QWORD *)(v163 - 8);
  MEMORY[0x24BDAC7A8](v163);
  v151 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD64C();
  v146 = *(_QWORD *)(v6 - 8);
  v147 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v145 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_23BDCDC40();
  v142 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144);
  v141 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEE20);
  MEMORY[0x24BDAC7A8](v9);
  v159 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  *(_QWORD *)&v179 = v11;
  v162 = *(_QWORD *)(a1 + 16);
  v12 = sub_23BDCD700();
  v13 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE28);
  v14 = sub_23BDCD700();
  v15 = sub_23BDCDE50();
  v16 = sub_23BDA4474();
  *(_QWORD *)&v176 = v13;
  *((_QWORD *)&v176 + 1) = MEMORY[0x24BEE1768];
  *(_QWORD *)&v177 = v15;
  *((_QWORD *)&v177 + 1) = v16;
  v178 = MEMORY[0x24BEE1778];
  v17 = sub_23BDCDC1C();
  v143 = a1;
  v161 = *(_QWORD *)(a1 + 24);
  v175[0] = v161;
  v175[1] = MEMORY[0x24BDEBEE0];
  v18 = MEMORY[0x24BDED308];
  v174[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v12, v175);
  v174[1] = MEMORY[0x24BDEC438];
  v173 = MEMORY[0x242611F78](v18, v14, v174);
  v172 = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v15, &v173);
  MEMORY[0x242611F78](MEMORY[0x24BDF4A08], v17, &v172);
  sub_23BDCDBF8();
  *((_QWORD *)&v179 + 1) = sub_23BDCD850();
  *(_QWORD *)&v180 = v11;
  *((_QWORD *)&v180 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE50);
  v181 = v11;
  swift_getTupleTypeMetadata();
  v158 = sub_23BDCDC70();
  v157 = MEMORY[0x242611F78](MEMORY[0x24BDF5428], v158);
  v19 = sub_23BDCDBC8();
  v116 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v156 = (char *)&v102 - v20;
  v21 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v19);
  v22 = sub_23BD5ED30(&qword_256AAEE58, &qword_256AAEE20, MEMORY[0x24BEE30C8]);
  *(_QWORD *)&v179 = v19;
  *((_QWORD *)&v179 + 1) = v9;
  *(_QWORD *)&v180 = v21;
  *((_QWORD *)&v180 + 1) = v22;
  v23 = MEMORY[0x242611F18](0, &v179, MEMORY[0x24BDF2800], 0);
  v114 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v112 = (char *)&v102 - v24;
  v115 = v25;
  v26 = sub_23BDCD700();
  v121 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v120 = (char *)&v102 - v27;
  v28 = sub_23BDCD700();
  v126 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v123 = (char *)&v102 - v29;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v30 = sub_23BDCD700();
  v135 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v131 = (char *)&v102 - v31;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE60);
  v32 = sub_23BDCD700();
  v130 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v128 = (char *)&v102 - v33;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  v34 = sub_23BDCD700();
  v139 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v138 = (char *)&v102 - v35;
  *(_QWORD *)&v179 = v19;
  *((_QWORD *)&v179 + 1) = v9;
  v140 = v9;
  v110 = v21;
  *(_QWORD *)&v180 = v21;
  *((_QWORD *)&v180 + 1) = v22;
  v108 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v171[0] = OpaqueTypeConformance2;
  v171[1] = MEMORY[0x24BDEDBB8];
  v36 = MEMORY[0x24BDED308];
  v122 = v26;
  v104 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v26, v171);
  v170[0] = v104;
  v170[1] = MEMORY[0x24BDEBEE0];
  v37 = v36;
  v129 = v28;
  v38 = MEMORY[0x242611F78](v36, v28, v170);
  v39 = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  v105 = v38;
  v169[0] = v38;
  v169[1] = v39;
  v137 = v30;
  v40 = MEMORY[0x242611F78](v37, v30, v169);
  v41 = sub_23BD5ED30(&qword_256AAEE68, &qword_256AAEE60, MEMORY[0x24BDF1028]);
  v106 = v40;
  v168[0] = v40;
  v168[1] = v41;
  v132 = v32;
  v42 = MEMORY[0x242611F78](v37, v32, v168);
  v43 = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  v107 = v42;
  v167[0] = v42;
  v167[1] = v43;
  v44 = MEMORY[0x242611F78](v37, v34, v167);
  *(_QWORD *)&v179 = v34;
  *((_QWORD *)&v179 + 1) = v44;
  v45 = MEMORY[0x242611F18](0, &v179, MEMORY[0x24BDF2550], 0);
  v118 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v117 = (char *)&v102 - v46;
  v127 = v34;
  *(_QWORD *)&v179 = v34;
  *((_QWORD *)&v179 + 1) = v44;
  v109 = v44;
  v47 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)&v179 = v45;
  *((_QWORD *)&v179 + 1) = v47;
  v48 = MEMORY[0x242611F18](0, &v179, MEMORY[0x24BDF2CD0], 0);
  v134 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v133 = (char *)&v102 - v49;
  v119 = v45;
  *(_QWORD *)&v179 = v45;
  *((_QWORD *)&v179 + 1) = v47;
  v111 = v47;
  v50 = swift_getOpaqueTypeConformance2();
  v51 = sub_23BD5ED30(&qword_256AAEE70, &qword_256AAEE18, MEMORY[0x24BDEC410]);
  *(_QWORD *)&v179 = v48;
  *((_QWORD *)&v179 + 1) = v163;
  *(_QWORD *)&v180 = v50;
  *((_QWORD *)&v180 + 1) = v51;
  v125 = v51;
  v136 = MEMORY[0x242611F18](0, &v179, MEMORY[0x24BDF3770], 0);
  v113 = *(_QWORD *)(v136 - 8);
  v52 = MEMORY[0x24BDAC7A8](v136);
  v124 = (char *)&v102 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)&v102 - v54;
  v56 = *((_OWORD *)v160 + 1);
  v179 = *(_OWORD *)v160;
  v180 = v56;
  v181 = *((_QWORD *)v160 + 4);
  v164 = v162;
  v165 = v161;
  v166 = &v179;
  sub_23BDCD7C0();
  v57 = v156;
  sub_23BDCDBBC();
  v58 = *MEMORY[0x24BDECF38];
  v59 = sub_23BDCD6E8();
  v60 = (uint64_t (*)(uint64_t))MEMORY[0x24BDECF50];
  v61 = (uint64_t)v159;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 104))(v159, v58, v59);
  sub_23BD6B5DC(&qword_256AAEE78, v60, MEMORY[0x24BDECF78]);
  result = sub_23BDCDD00();
  if ((result & 1) != 0)
  {
    v63 = v112;
    sub_23BDCDA48();
    sub_23BDA4594(v61);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v57, v19);
    sub_23BDCDC58();
    v64 = v115;
    v65 = v120;
    sub_23BDCDA9C();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v63, v64);
    v176 = v179;
    v177 = v180;
    v178 = v181;
    sub_23BDA1A90();
    swift_getKeyPath();
    sub_23BDCDCD0();
    swift_release();
    swift_release();
    sub_23BDCDC58();
    v66 = v123;
    v67 = v122;
    sub_23BDCDA90();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v65, v67);
    v159 = (char *)v50;
    v68 = v141;
    sub_23BDCDC34();
    sub_23BDCD8BC();
    v160 = v55;
    v69 = v131;
    v70 = v129;
    v71 = v144;
    sub_23BDCD9E8();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v68, v71);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v66, v70);
    swift_getKeyPath();
    v73 = v146;
    v72 = v147;
    v74 = v48;
    v75 = v145;
    (*(void (**)(char *, _QWORD, uint64_t))(v146 + 104))(v145, *MEMORY[0x24BDEB3F0], v147);
    v76 = v128;
    v77 = v137;
    sub_23BDCDA0C();
    swift_release();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v69, v77);
    v78 = v138;
    v79 = v132;
    sub_23BDCDA24();
    (*(void (**)(char *, uint64_t))(v130 + 8))(v76, v79);
    v80 = swift_allocObject();
    v82 = v161;
    v81 = v162;
    *(_QWORD *)(v80 + 16) = v162;
    *(_QWORD *)(v80 + 24) = v82;
    v83 = v180;
    *(_OWORD *)(v80 + 32) = v179;
    *(_OWORD *)(v80 + 48) = v83;
    *(_QWORD *)(v80 + 64) = v181;
    sub_23BDA4694((uint64_t)&v179);
    v84 = v117;
    v85 = v127;
    sub_23BDCDA30();
    swift_release();
    (*(void (**)(char *, uint64_t))(v139 + 8))(v78, v85);
    v86 = swift_allocObject();
    *(_QWORD *)(v86 + 16) = v81;
    *(_QWORD *)(v86 + 24) = v82;
    v87 = v180;
    *(_OWORD *)(v86 + 32) = v179;
    *(_OWORD *)(v86 + 48) = v87;
    *(_QWORD *)(v86 + 64) = v181;
    sub_23BDA4694((uint64_t)&v179);
    v88 = v133;
    v89 = v119;
    sub_23BDCDA60();
    swift_release();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v84, v89);
    sub_23BDCD880();
    v90 = v150;
    sub_23BDCD658();
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = v81;
    *(_QWORD *)(v91 + 24) = v82;
    v92 = v180;
    *(_OWORD *)(v91 + 32) = v179;
    *(_OWORD *)(v91 + 48) = v92;
    *(_QWORD *)(v91 + 64) = v181;
    sub_23BDA4694((uint64_t)&v179);
    sub_23BD6B5DC(qword_256AAEE80, (uint64_t (*)(uint64_t))MEMORY[0x24BDEB540], MEMORY[0x24BDEB530]);
    v93 = v151;
    v94 = v154;
    sub_23BDCDC28();
    swift_release();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v90, v94);
    sub_23BDCD688();
    v96 = (uint64_t)v124;
    v95 = v125;
    v97 = v163;
    v98 = v159;
    sub_23BDCDAB4();
    (*(void (**)(char *, uint64_t))(v153 + 8))(v93, v97);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v88, v74);
    *(_QWORD *)&v176 = v74;
    *((_QWORD *)&v176 + 1) = v97;
    *(_QWORD *)&v177 = v98;
    *((_QWORD *)&v177 + 1) = v95;
    swift_getOpaqueTypeConformance2();
    v99 = (uint64_t)v160;
    v100 = v136;
    sub_23BD6A300(v96, v136, (uint64_t)v160);
    v101 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
    v101(v96, v100);
    sub_23BD6345C(v99, v100, v155);
    return ((uint64_t (*)(uint64_t, uint64_t))v101)(v99, v100);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BDA29D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _QWORD v104[7];
  _QWORD v105[5];
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[50];
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131[5];
  _BYTE v132[376];
  _BYTE v133[392];
  _BYTE v134[383];
  _OWORD v135[25];
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[2];
  _QWORD v139[3];
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned __int8 v146;
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;

  v100 = a3;
  v96 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE28);
  v8 = sub_23BDCD700();
  v9 = sub_23BDCD700();
  v10 = sub_23BDCDE50();
  v11 = sub_23BDA4474();
  *(_QWORD *)&v135[0] = v7;
  *((_QWORD *)&v135[0] + 1) = MEMORY[0x24BEE1768];
  *(_QWORD *)&v135[1] = v10;
  *((_QWORD *)&v135[1] + 1) = v11;
  *(_QWORD *)&v135[2] = MEMORY[0x24BEE1778];
  v12 = sub_23BDCDC1C();
  v139[0] = a3;
  v139[1] = MEMORY[0x24BDEBEE0];
  v13 = MEMORY[0x24BDED308];
  v102 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v8, v139);
  v138[0] = v102;
  v138[1] = MEMORY[0x24BDEC438];
  v137 = MEMORY[0x242611F78](v13, v9, v138);
  v136 = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v10, &v137);
  v14 = MEMORY[0x242611F78](MEMORY[0x24BDF4A08], v12, &v136);
  v87 = v12;
  v84 = v14;
  v15 = sub_23BDCDBF8();
  v85 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v86 = (unint64_t)&v75 - v20;
  v80 = *(_QWORD *)(a2 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v79 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = *(_QWORD *)(v8 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v83 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v81 = (uint64_t)&v75 - v25;
  v97 = v8;
  v95 = sub_23BDCD850();
  v101 = *(_QWORD *)(v95 - 8);
  v26 = MEMORY[0x24BDAC7A8](v95);
  v94 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v103 = (char *)&v75 - v28;
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v93 = v139[2];
  v92 = v140;
  v91 = v141;
  v90 = v142;
  v88 = v144;
  v89 = v143;
  v29 = *(_OWORD *)(a1 + 16);
  v135[0] = *(_OWORD *)a1;
  v135[1] = v29;
  v99 = a1;
  *(_QWORD *)&v135[2] = *(_QWORD *)(a1 + 32);
  v30 = a2;
  v31 = v100;
  type metadata accessor for AwardToastView(0, a2, v100, v32);
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v33 = *(_QWORD **)&v135[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = v33[2];
  v35 = v34 - 1;
  v98 = v15;
  if (v34 == 1)
  {
    v76 = 1;
    v77 = 0;
    v36 = v33[5];
    v75 = v33[4];
    v37 = *(_OWORD *)(v99 + 16);
    v135[0] = *(_OWORD *)v99;
    v135[1] = v37;
    *(_QWORD *)&v135[2] = *(_QWORD *)(v99 + 32);
    swift_bridgeObjectRetain();
    sub_23BDA1A90();
    swift_getKeyPath();
    sub_23BDCDCD0();
    swift_release();
    swift_release();
    v38 = *((_QWORD *)&v135[2] + 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v38 + 16))
    {
      v39 = sub_23BD8BD48(v75, v36);
      if ((v40 & 1) != 0)
      {
        v41 = (uint64_t *)(*(_QWORD *)(v38 + 56) + 16 * v39);
        v42 = *v41;
        v43 = v41[1];
        v86 = v43;
        v87 = v42;
        sub_23BD7A51C(v42, v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v99;
        v45 = v79;
        (*(void (**)(uint64_t, unint64_t))(v99 + 24))(v42, v43);
        v46 = *(_OWORD *)(v44 + 16);
        v135[0] = *(_OWORD *)v44;
        v135[1] = v46;
        *(_QWORD *)&v135[2] = *(_QWORD *)(v44 + 32);
        sub_23BDA1A90();
        swift_getKeyPath();
        sub_23BDCDCD0();
        swift_release();
        swift_release();
        v47 = *(_OWORD *)(v44 + 16);
        v135[0] = *(_OWORD *)v44;
        v135[1] = v47;
        *(_QWORD *)&v135[2] = *(_QWORD *)(v44 + 32);
        sub_23BDA1A90();
        swift_getKeyPath();
        sub_23BDCDCD0();
        swift_release();
        swift_release();
        sub_23BDCDC58();
        v48 = (uint64_t)v83;
        v49 = v30;
        v50 = v100;
        sub_23BDCDA90();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v45, v30);
        v51 = v81;
        v52 = v97;
        sub_23BD6A300(v48, v97, v81);
        v53 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
        v53(v48, v52);
        v54 = v48;
        sub_23BD6345C(v51, v52, v48);
        MEMORY[0x242611F78](MEMORY[0x24BDF4750], v98);
        v55 = v103;
        sub_23BDAF1D8(v54, v52);
        v56 = v55;
        sub_23BD7A560(v87, v86);
        v53((uint64_t)v83, v52);
        result = ((uint64_t (*)(uint64_t, uint64_t))v53)(v81, v52);
        v35 = v77;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v98;
    v31 = v100;
    v34 = v76;
    v35 = v77;
  }
  v58 = sub_23BDCDC58();
  MEMORY[0x24BDAC7A8](v58);
  v82 = v30;
  *(&v75 - 6) = v30;
  *(&v75 - 5) = v31;
  v59 = v31;
  *(&v75 - 4) = v34;
  *(&v75 - 3) = (uint64_t)v33;
  v44 = v99;
  *(&v75 - 2) = v99;
  sub_23BDCDBEC();
  swift_bridgeObjectRelease();
  MEMORY[0x242611F78](MEMORY[0x24BDF4750], v15);
  v60 = v86;
  sub_23BD6A300((uint64_t)v18, v15, v86);
  v61 = *(void (**)(char *, uint64_t))(v85 + 8);
  v61(v18, v15);
  sub_23BD6345C(v60, v15, (uint64_t)v18);
  v56 = v103;
  sub_23BDAF29C((uint64_t)v18, v97, v15);
  v61(v18, v15);
  result = ((uint64_t (*)(uint64_t, uint64_t))v61)(v60, v15);
  v50 = v59;
  v49 = v82;
LABEL_7:
  if ((unsigned __int128)(v35 * (__int128)7) >> 64 == (7 * v35) >> 63)
  {
    sub_23BDCDC58();
    sub_23BDCD6B8();
    v99 = v145;
    LODWORD(v97) = v146;
    v87 = v147;
    LODWORD(v86) = v148;
    v84 = v150;
    v85 = v149;
    v83 = (char *)sub_23BDCD82C();
    sub_23BDA3CE8((__int128 *)v44, v49, v50, (uint64_t)v132);
    v133[384] = 1;
    memcpy(&v133[7], v132, 0x178uLL);
    LODWORD(v100) = 1;
    memcpy(v134, v133, sizeof(v134));
    sub_23BDCDC58();
    sub_23BDCD6B8();
    v62 = v151;
    v63 = v152;
    v64 = v153;
    v65 = v154;
    v66 = v155;
    v67 = v156;
    v123 = 0;
    v124 = 1;
    v68 = (uint64_t)v94;
    v125 = v93;
    v126 = v92;
    v127 = v91;
    v128 = v90;
    v129 = v89;
    v130 = v88;
    v131[0] = (uint64_t)&v123;
    v69 = v56;
    v70 = v95;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v94, v69, v95);
    v115 = 0;
    v116 = 1;
    v117 = v99;
    v118 = v97;
    v119 = v87;
    v120 = v86;
    v121 = v85;
    v122 = v84;
    v131[1] = v68;
    v131[2] = (uint64_t)&v115;
    v114[0] = v83;
    v114[1] = 0;
    LOBYTE(v114[2]) = v100;
    memcpy((char *)&v114[2] + 1, v134, 0x17FuLL);
    v106 = 0;
    v107 = 1;
    v108 = v62;
    v109 = v63;
    v110 = v64;
    v111 = v65;
    v112 = v66;
    v113 = v67;
    v131[3] = (uint64_t)v114;
    v131[4] = (uint64_t)&v106;
    sub_23BDA4EE4((uint64_t)v132);
    v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
    v105[0] = v71;
    v105[1] = v70;
    v105[2] = v71;
    v105[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEE50);
    v105[4] = v71;
    v72 = sub_23BD69FC8();
    v104[2] = v72;
    v73 = MEMORY[0x242611F78](MEMORY[0x24BDF4750], v98);
    v104[0] = v102;
    v104[1] = v73;
    v104[3] = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v70, v104);
    v104[4] = v72;
    v104[5] = sub_23BD5ED30(&qword_256AAEF18, &qword_256AAEE50, MEMORY[0x24BDF4700]);
    v104[6] = v72;
    sub_23BDAF360(v131, 5uLL, (uint64_t)v105);
    sub_23BDA503C((uint64_t)v132);
    v74 = *(void (**)(char *, uint64_t))(v101 + 8);
    v74(v103, v70);
    memcpy(v135, v114, sizeof(v135));
    sub_23BDA5194((uint64_t)v135);
    return ((uint64_t (*)(uint64_t, uint64_t))v74)(v68, v70);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_23BDA33EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v30 = a5;
  v33 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE28);
  v11 = sub_23BDCD700();
  v12 = sub_23BDCD700();
  v13 = sub_23BDCDE50();
  v31 = sub_23BDA4474();
  v32 = v10;
  v38 = v10;
  v39 = MEMORY[0x24BEE1768];
  v40 = v13;
  v41 = v31;
  v42 = MEMORY[0x24BEE1778];
  v14 = sub_23BDCDC1C();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)v28 - v20;
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v38 = 0;
    v39 = a1;
    v29 = v19;
    v28[1] = swift_getKeyPath();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = a4;
    v23 = v30;
    *(_QWORD *)(v22 + 24) = v30;
    *(_QWORD *)(v22 + 32) = a2;
    v24 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v22 + 40) = *(_OWORD *)a3;
    *(_OWORD *)(v22 + 56) = v24;
    *(_QWORD *)(v22 + 72) = *(_QWORD *)(a3 + 32);
    swift_bridgeObjectRetain();
    sub_23BDA4694(a3);
    v37[0] = v23;
    v37[1] = MEMORY[0x24BDEBEE0];
    v25 = MEMORY[0x24BDED308];
    v36[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v11, v37);
    v36[1] = MEMORY[0x24BDEC438];
    v35 = MEMORY[0x242611F78](v25, v12, v36);
    v27 = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v13, &v35);
    sub_23BDCDC10();
    v34 = v27;
    MEMORY[0x242611F78](MEMORY[0x24BDF4A08], v14, &v34);
    sub_23BD6A300((uint64_t)v17, v14, (uint64_t)v21);
    v26 = *(void (**)(char *, uint64_t))(v29 + 8);
    v26(v17, v14);
    sub_23BD6345C((uint64_t)v21, v14, v33);
    return ((uint64_t (*)(char *, uint64_t))v26)(v21, v14);
  }
  return result;
}

uint64_t sub_23BDA366C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, unint64_t);
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  _QWORD v81[2];
  uint64_t v82;
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v70 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v69 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v12;
  v13 = sub_23BDCD700();
  v67 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v71 = (char *)&v63 - v14;
  v15 = sub_23BDCD700();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v66 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v68 = (uint64_t)&v63 - v19;
  v20 = sub_23BDCDE50();
  v21 = MEMORY[0x24BDAC7A8](v20);
  result = MEMORY[0x24BDAC7A8](v21);
  v27 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v27 >= *(_QWORD *)(a2 + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v72 = v16;
  v73 = v26;
  v74 = v25;
  v75 = (char *)&v63 - v24;
  v76 = v13;
  v77 = a6;
  v28 = a2 + 16 * v27;
  v29 = a5;
  v30 = *(_QWORD *)(v28 + 32);
  v31 = *(_QWORD *)(v28 + 40);
  v32 = a3[1];
  v87 = *a3;
  v88 = v32;
  v89 = *((_QWORD *)a3 + 4);
  v78 = v29;
  type metadata accessor for AwardToastView(0, v79, v29, v23);
  swift_bridgeObjectRetain();
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v33 = v90;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = MEMORY[0x24BDEBEE0];
  if (!*(_QWORD *)(v33 + 16) || (v35 = sub_23BD8BD48(v30, v31), (v36 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v55 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56))(v73, 1, 1, v15);
    v46 = v78;
    v86[0] = v78;
    v86[1] = v34;
    v58 = MEMORY[0x24BDED308];
    v48 = v76;
    v85[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v76, v86);
    v57 = MEMORY[0x24BDEC438];
    v85[1] = MEMORY[0x24BDEC438];
    MEMORY[0x242611F78](v58, v15, v85);
    goto LABEL_8;
  }
  v37 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 16 * v35);
  v38 = *v37;
  v39 = v37[1];
  sub_23BD7A51C(*v37, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = (void (*)(uint64_t, unint64_t))*((_QWORD *)a3 + 3);
  v41 = v69;
  v65 = v38;
  v64 = v39;
  v40(v38, v39);
  v42 = a3[1];
  v87 = *a3;
  v88 = v42;
  v89 = *((_QWORD *)a3 + 4);
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v43 = a3[1];
  v87 = *a3;
  v88 = v43;
  v89 = *((_QWORD *)a3 + 4);
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  sub_23BDCDC58();
  v44 = v71;
  v45 = v79;
  v46 = v78;
  sub_23BDCDA90();
  result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v41, v45);
  if ((unsigned __int128)((uint64_t)v27 * (__int128)7) >> 64 == (uint64_t)(7 * v27) >> 63)
  {
    v81[0] = v46;
    v81[1] = MEMORY[0x24BDEBEE0];
    v47 = MEMORY[0x24BDED308];
    v48 = v76;
    v49 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v76, v81);
    v50 = (uint64_t)v66;
    sub_23BDCDAA8();
    sub_23BD7A560(v65, v64);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v48);
    v80[0] = v49;
    v51 = MEMORY[0x24BDEC438];
    v80[1] = MEMORY[0x24BDEC438];
    MEMORY[0x242611F78](v47, v15, v80);
    v52 = v68;
    sub_23BD6A300(v50, v15, v68);
    v53 = v72;
    v54 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v54(v50, v15);
    v55 = v73;
    sub_23BD6345C(v52, v15, v73);
    v56 = v52;
    v57 = v51;
    v34 = MEMORY[0x24BDEBEE0];
    v54(v56, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v55, 0, 1, v15);
LABEL_8:
    v59 = v74;
    v60 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v75, v55, v20);
    v61 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v61(v55, v20);
    v84[0] = v46;
    v84[1] = v34;
    v62 = MEMORY[0x24BDED308];
    v83[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v48, v84);
    v83[1] = v57;
    v82 = MEMORY[0x242611F78](v62, v15, v83);
    MEMORY[0x242611F78](MEMORY[0x24BDF5578], v20, &v82);
    sub_23BD6345C(v60, v20, v77);
    return ((uint64_t (*)(uint64_t, uint64_t))v61)(v60, v20);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_23BDA3CE8@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v8 = sub_23BDCD934();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v64 = v85;
  v63 = v86;
  v62 = v87;
  v61 = v88;
  v60 = v89;
  v59 = v90;
  v12 = a1[1];
  v97 = *a1;
  v98 = v12;
  *(_QWORD *)&v99 = *((_QWORD *)a1 + 4);
  type metadata accessor for AwardToastView(0, a2, a3, v13);
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v14 = *((_QWORD *)&v97 + 1);
  v15 = v98;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v91 = v14;
  v92 = v15;
  sub_23BD6A0A0();
  v67 = sub_23BDCD9AC();
  v66 = v16;
  v58 = v17;
  v72 = v18;
  KeyPath = swift_getKeyPath();
  v71 = swift_getKeyPath();
  sub_23BDCD958();
  sub_23BDCD8F8();
  sub_23BDCD928();
  swift_release();
  v19 = *MEMORY[0x24BDF17C8];
  v48 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v48(v11, v19, v8);
  v70 = sub_23BDCD94C();
  swift_release();
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, v8);
  v69 = swift_getKeyPath();
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v57 = v91;
  v45 = v92;
  v56 = v93;
  v55 = v94;
  v54 = v95;
  v53 = v96;
  v21 = a1[1];
  v97 = *a1;
  v98 = v21;
  *(_QWORD *)&v99 = *((_QWORD *)a1 + 4);
  sub_23BDA1A90();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v22 = *((_QWORD *)&v98 + 1);
  v23 = v99;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
    *(_QWORD *)&v97 = v22;
    *((_QWORD *)&v97 + 1) = v23;
    v52 = sub_23BDCD9AC();
    v51 = v24;
    v50 = v25;
    v27 = v26 & 1;
    v65 = swift_getKeyPath();
    v49 = swift_getKeyPath();
    sub_23BDCD8E0();
    v48(v11, v19, v8);
    v48 = (void (*)(char *, uint64_t, uint64_t))sub_23BDCD94C();
    swift_release();
    v20(v11, v8);
    v47 = swift_getKeyPath();
    v46 = sub_23BDCD874();
    v28 = 2;
  }
  else
  {
    v52 = 0;
    v51 = 0;
    v27 = 0;
    v50 = 0;
    v65 = 0;
    v49 = 0;
    v28 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
  }
  v44 = v28;
  v29 = v58 & 1;
  sub_23BDCDC58();
  sub_23BDCD6B8();
  *(_QWORD *)(a4 + 16) = v64;
  v83 = v63;
  *(_BYTE *)(a4 + 24) = v63;
  *(_QWORD *)(a4 + 32) = v62;
  v82 = v61;
  *(_BYTE *)(a4 + 40) = v61;
  v30 = v59;
  *(_QWORD *)(a4 + 48) = v60;
  *(_QWORD *)(a4 + 56) = v30;
  *(_QWORD *)(a4 + 120) = 2;
  *(_QWORD *)(a4 + 168) = v57;
  v78 = v45;
  *(_BYTE *)(a4 + 176) = v45;
  *(_QWORD *)(a4 + 184) = v56;
  v77 = v55;
  *(_BYTE *)(a4 + 192) = v55;
  v31 = v53;
  *(_QWORD *)(a4 + 200) = v54;
  *(_QWORD *)(a4 + 208) = v31;
  v84 = 1;
  v79 = 1;
  v76 = 1;
  *(_BYTE *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 160) = 1;
  *(_BYTE *)(a4 + 320) = 1;
  *(_QWORD *)(a4 + 328) = v97;
  v75 = BYTE8(v97);
  *(_BYTE *)(a4 + 336) = BYTE8(v97);
  *(_QWORD *)(a4 + 344) = v98;
  v74 = BYTE8(v98);
  *(_BYTE *)(a4 + 352) = BYTE8(v98);
  *(_QWORD *)(a4 + 112) = v71;
  *(_QWORD *)a4 = 0;
  v32 = v67;
  *(_QWORD *)(a4 + 64) = v67;
  v33 = v32;
  v34 = v66;
  *(_QWORD *)(a4 + 72) = v66;
  v35 = v34;
  v36 = v29;
  *(_BYTE *)(a4 + 80) = v29;
  v37 = KeyPath;
  *(_QWORD *)(a4 + 88) = v72;
  *(_QWORD *)(a4 + 96) = v37;
  *(_BYTE *)(a4 + 104) = 0;
  *(_BYTE *)(a4 + 128) = 0;
  v38 = v70;
  *(_QWORD *)(a4 + 136) = v69;
  *(_QWORD *)(a4 + 144) = v38;
  *(_QWORD *)(a4 + 152) = 0;
  v39 = v52;
  v40 = v51;
  *(_QWORD *)(a4 + 216) = v52;
  *(_QWORD *)(a4 + 224) = v40;
  v41 = v50;
  *(_QWORD *)(a4 + 232) = v27;
  *(_QWORD *)(a4 + 240) = v41;
  *(_QWORD *)(a4 + 248) = v65;
  *(_QWORD *)(a4 + 256) = 0;
  *(_QWORD *)(a4 + 264) = v49;
  *(_QWORD *)(a4 + 272) = v28;
  v42 = v47;
  *(_QWORD *)(a4 + 280) = 0;
  *(_QWORD *)(a4 + 288) = v42;
  *(_QWORD *)(a4 + 296) = v48;
  *(_DWORD *)(a4 + 304) = v46;
  *(_QWORD *)(a4 + 312) = 0;
  *(_OWORD *)(a4 + 360) = v99;
  v73 = v36;
  v81 = v36;
  v80 = 0;
  sub_23BD5F194(v33, v35, v36);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23BDA4FD0(v39, v40, v27, v41);
  sub_23BDA5128(v39, v40, v27, v41);
  sub_23BD5F120(v67, v66, v73);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BDA4474()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_256AAEE30;
  if (!qword_256AAEE30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE28);
    v2 = sub_23BDA44D8();
    result = MEMORY[0x242611F78](MEMORY[0x24BEE3050], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256AAEE30);
  }
  return result;
}

unint64_t sub_23BDA44D8()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256AAEE38;
  if (!qword_256AAEE38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE40);
    v2 = sub_23BDA4544();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x242611F78](MEMORY[0x24BEE1BD0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256AAEE38);
  }
  return result;
}

unint64_t sub_23BDA4544()
{
  unint64_t result;

  result = qword_256AAEE48;
  if (!qword_256AAEE48)
  {
    result = MEMORY[0x242611F78](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256AAEE48);
  }
  return result;
}

uint64_t sub_23BDA4588@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BDA29D0(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23BDA4594(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEE20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BDA45D4()
{
  return sub_23BDCD760();
}

uint64_t sub_23BDA45F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_23BDCD64C();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23BDCD76C();
}

uint64_t sub_23BDA4678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23BDA46D0(v4 + 32, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
}

uint64_t sub_23BDA4694(uint64_t a1)
{
  sub_23BD5E39C();
  swift_retain();
  return a1;
}

uint64_t sub_23BDA46D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for AwardToastView(0, a2, a3, a4);
  sub_23BDA1A90();
  sub_23BDCDCDC();
  return swift_release();
}

uint64_t sub_23BDA472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  uint64_t result;
  uint64_t v9;
  double v10;

  sub_23BDCD670();
  v7 = v6;
  result = sub_23BDCD664();
  if (v7 - v10 > 20.0)
  {
    type metadata accessor for AwardToastView(0, a3, a4, v9);
    sub_23BDA1A90();
    sub_23BDCDCDC();
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_4Tm()
{
  sub_23BD5E388();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDA4800(uint64_t a1)
{
  uint64_t v1;

  return sub_23BDA472C(a1, v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23BDA480C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BDA4844()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23BDA484C()
{
  sub_23BD5E388();
  return swift_release();
}

uint64_t sub_23BDA487C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  return a1;
}

uint64_t sub_23BDA48DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23BD5E39C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23BD5E388();
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_23BDA4968(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23BD5E388();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t sub_23BDA49BC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23BDA4A04(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AwardToastView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AwardToastView);
}

uint64_t sub_23BDA4A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[7];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v38 = v2;
  v3 = sub_23BDCD700();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE28);
  v5 = sub_23BDCD700();
  v6 = sub_23BDCDE50();
  v7 = sub_23BDA4474();
  v37[2] = v4;
  v37[3] = MEMORY[0x24BEE1768];
  v37[4] = v6;
  v37[5] = v7;
  v37[6] = MEMORY[0x24BEE1778];
  v8 = sub_23BDCDC1C();
  v37[0] = v1;
  v37[1] = MEMORY[0x24BDEBEE0];
  v9 = MEMORY[0x24BDED308];
  v36[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v3, v37);
  v36[1] = MEMORY[0x24BDEC438];
  v35 = MEMORY[0x242611F78](v9, v5, v36);
  v34 = MEMORY[0x242611F78](MEMORY[0x24BDF5578], v6, &v35);
  MEMORY[0x242611F78](MEMORY[0x24BDF4A08], v8, &v34);
  sub_23BDCDBF8();
  v39 = sub_23BDCD850();
  v40 = v2;
  v41 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE50);
  v42 = v2;
  swift_getTupleTypeMetadata();
  v10 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v10);
  v11 = sub_23BDCDBC8();
  v12 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE20);
  v13 = MEMORY[0x242611F78](MEMORY[0x24BDF4498], v11);
  v14 = sub_23BD5ED30(&qword_256AAEE58, &qword_256AAEE20, MEMORY[0x24BEE30C8]);
  v38 = v11;
  v39 = v12;
  v40 = v13;
  v41 = v14;
  MEMORY[0x242611F18](255, &v38, MEMORY[0x24BDF2800], 0);
  v15 = sub_23BDCD700();
  v16 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD830);
  v17 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE60);
  v18 = sub_23BDCD700();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD848);
  v19 = sub_23BDCD700();
  v38 = v11;
  v39 = v12;
  v40 = v13;
  v41 = v14;
  v33[0] = swift_getOpaqueTypeConformance2();
  v33[1] = MEMORY[0x24BDEDBB8];
  v20 = MEMORY[0x24BDED308];
  v32[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v15, v33);
  v32[1] = MEMORY[0x24BDEBEE0];
  v31[0] = MEMORY[0x242611F78](v20, v16, v32);
  v31[1] = sub_23BD5ED30(&qword_256AAD838, &qword_256AAD830, MEMORY[0x24BDF06D0]);
  v30[0] = MEMORY[0x242611F78](v20, v17, v31);
  v30[1] = sub_23BD5ED30(&qword_256AAEE68, &qword_256AAEE60, MEMORY[0x24BDF1028]);
  v29[0] = MEMORY[0x242611F78](v20, v18, v30);
  v29[1] = sub_23BD5ED30(&qword_256AAD850, &qword_256AAD848, MEMORY[0x24BDEB950]);
  v21 = MEMORY[0x242611F78](v20, v19, v29);
  v38 = v19;
  v39 = v21;
  v22 = MEMORY[0x242611F18](255, &v38, MEMORY[0x24BDF2550], 0);
  v38 = v19;
  v39 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v38 = v22;
  v39 = OpaqueTypeConformance2;
  v24 = MEMORY[0x242611F18](255, &v38, MEMORY[0x24BDF2CD0], 0);
  v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEE18);
  v38 = v22;
  v39 = OpaqueTypeConformance2;
  v26 = swift_getOpaqueTypeConformance2();
  v27 = sub_23BD5ED30(&qword_256AAEE70, &qword_256AAEE18, MEMORY[0x24BDEC410]);
  v38 = v24;
  v39 = v25;
  v40 = v26;
  v41 = v27;
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BDA4ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BDA33EC(v1[4], v1[5], v1[6], v1[2], v1[3], a1);
}

uint64_t sub_23BDA4EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a1 + 240);
  sub_23BD5F194(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_23BDA4FD0(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_23BDA4FD0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BD5F194(result, a2, a3 & 1);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23BDA503C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 232);
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 216);
  v3 = *(_QWORD *)(a1 + 240);
  sub_23BD5F120(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_BYTE *)(a1 + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23BDA5128(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_23BDA5128(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_23BD5F120(result, a2, a3 & 1);
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_23BDA5194(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 256);
  v5 = *(_QWORD *)(a1 + 248);
  v6 = *(_QWORD *)(a1 + 240);
  v3 = *(_QWORD *)(a1 + 264);
  sub_23BD5F120(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_23BDA5128(v6, v5, v2, v3);
  return a1;
}

uint64_t sub_23BDA527C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BDCD778();
  *a1 = result;
  return result;
}

uint64_t sub_23BDA52A4()
{
  return sub_23BDCD784();
}

uint64_t sub_23BDA52C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23BDCD790();
  *a1 = result;
  return result;
}

uint64_t sub_23BDA52F0()
{
  swift_retain();
  return sub_23BDCD79C();
}

uint64_t sub_23BDA5318@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23BDCD7A8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BDA5348()
{
  return sub_23BDCD7B4();
}

uint64_t sub_23BDA5374@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23BDCD778();
  *a1 = result;
  return result;
}

uint64_t sub_23BDA539C()
{
  return sub_23BDCD784();
}

uint64_t sub_23BDA53C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23BDCD7A8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23BDA53F0()
{
  return sub_23BDCD7B4();
}

uint64_t sub_23BDA541C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23BDCD790();
  *a1 = result;
  return result;
}

uint64_t sub_23BDA5444()
{
  swift_retain();
  return sub_23BDCD79C();
}

uint64_t sub_23BDA546C()
{
  swift_bridgeObjectRelease();
  sub_23BD5E388();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDA54A4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23BDA366C(a1, *(_QWORD *)(v2 + 32), (__int128 *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242611EDC](a1, v6, a5);
}

__n128 AwardToastFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_23BDA54F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if (v1)
    sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDA555C()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCDD90();
}

uint64_t sub_23BDA55C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if (v1)
    sub_23BDCDD90();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDA5628(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  if (!v3)
    return v4 == 0;
  if (!v4)
    return 0;
  if (*a1 == *a2 && v3 == v4)
    return 1;
  else
    return sub_23BDCE024();
}

uint64_t AwardToastFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, unint64_t a2, unint64_t *a3, _BYTE *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(unint64_t, char *, uint64_t);
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t result;
  int *v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t);
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(unint64_t, char *, uint64_t);
  void (*v51)(_QWORD);
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, char *, uint64_t);
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  void (*v82)(char *, _QWORD, uint64_t);
  void (*v83)(char *, _QWORD, uint64_t);
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(unint64_t, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;

  v90 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD728);
  v94 = *(void (**)(unint64_t, char *, uint64_t))(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v78 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v78 - v14;
  LOBYTE(a4) = *a4;
  v16 = *v4;
  v18 = v4[2];
  v17 = v4[3];
  v92 = v4[1];
  v93 = v17;
  v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
  v20 = v19[16];
  v21 = v19[20];
  v22 = v19[24];
  if ((a4 & 1) != 0)
  {
    v23 = &v10[v20];
    v24 = &v10[v21];
    v25 = &v10[v22];
    sub_23BDA5D38();
    v95 = 0;
    v96 = 0;
    sub_23BDCDE80();
    sub_23BDCDDFC();
    v26 = *MEMORY[0x24BE2B570];
    v27 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v23, v26, v27);
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v16;
    v28[3] = v92;
    v28[4] = v18;
    v28[5] = v93;
    *(_QWORD *)v25 = &unk_256AAEF30;
    *((_QWORD *)v25 + 1) = v28;
    v29 = *MEMORY[0x24BE2B558];
    v30 = sub_23BDCDCB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v24, v29, v30);
    v31 = v94;
    (*((void (**)(char *, _QWORD, uint64_t))v94 + 13))(v10, *MEMORY[0x24BE2B438], v7);
    v32 = *a3;
    swift_retain();
    swift_retain();
    v33 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = sub_23BD6E4B4(0, *(_QWORD *)(v32 + 16) + 1, 1, v32);
    v35 = *(_QWORD *)(v32 + 16);
    v34 = *(_QWORD *)(v32 + 24);
    if (v35 >= v34 >> 1)
      v32 = sub_23BD6E4B4(v34 > 1, v35 + 1, 1, v32);
    *(_QWORD *)(v32 + 16) = v35 + 1;
    result = (*((uint64_t (**)(unint64_t, char *, uint64_t))v31 + 4))(v32+ ((*((unsigned __int8 *)v31 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v31 + 80))+ *((_QWORD *)v31 + 9) * v35, v10, v33);
    *a3 = v32;
  }
  else
  {
    v37 = v19;
    v38 = &v15[v20];
    v39 = &v15[v21];
    v91 = a3;
    v40 = &v15[v22];
    v41 = sub_23BDA5D38();
    v95 = 0;
    v96 = 0;
    v86 = v41;
    sub_23BDCDE80();
    sub_23BDCDDFC();
    v42 = *MEMORY[0x24BE2B570];
    v43 = sub_23BDCDCC4();
    v44 = *(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104);
    v85 = v42;
    v83 = v44;
    v84 = v43;
    ((void (*)(char *, uint64_t))v44)(v38, v42);
    v45 = (_QWORD *)swift_allocObject();
    v87 = v16;
    v88 = v18;
    v46 = v92;
    v45[2] = v16;
    v45[3] = v46;
    v45[4] = v18;
    v47 = v93;
    v45[5] = v93;
    *(_QWORD *)v40 = &unk_256AAEF40;
    *((_QWORD *)v40 + 1) = v45;
    v48 = *MEMORY[0x24BE2B558];
    v49 = sub_23BDCDCB8();
    v78 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v49 - 8) + 104);
    v79 = v49;
    v78(v39, v48);
    v50 = v94;
    v51 = (void (*)(_QWORD))*((_QWORD *)v94 + 13);
    v81 = *MEMORY[0x24BE2B438];
    v89 = v7;
    v82 = (void (*)(char *, _QWORD, uint64_t))v51;
    v51(v15);
    v52 = *v91;
    swift_retain();
    swift_retain();
    v53 = v47;
    v54 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v52 = sub_23BD6E4B4(0, *(_QWORD *)(v52 + 16) + 1, 1, v52);
    v56 = *(_QWORD *)(v52 + 16);
    v55 = *(_QWORD *)(v52 + 24);
    if (v56 >= v55 >> 1)
      v52 = sub_23BD6E4B4(v55 > 1, v56 + 1, 1, v52);
    *(_QWORD *)(v52 + 16) = v56 + 1;
    v57 = (*((unsigned __int8 *)v50 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v50 + 80);
    v80 = *((_QWORD *)v50 + 9);
    v58 = (void (*)(unint64_t, char *, uint64_t))*((_QWORD *)v50 + 4);
    v58(v52 + v57 + v80 * v56, v15, v89);
    v59 = v90;
    *v91 = v52;
    *(_BYTE *)(v59 + 104) = 0;
    v60 = *(_QWORD *)v59;
    if (*(_QWORD *)(*(_QWORD *)v59 + 16) == 1)
    {
      v90 = v57;
      v62 = *(_QWORD *)(v60 + 32);
      v61 = *(_QWORD *)(v60 + 40);
      v63 = &v13[v37[16]];
      v64 = &v13[v37[20]];
      v65 = &v13[v37[24]];
      v94 = v58;
      v95 = v62;
      v96 = v61;
      swift_bridgeObjectRetain_n();
      sub_23BDCDE80();
      sub_23BDCDDFC();
      v83(v63, v85, v84);
      v66 = v89;
      ((void (*)(char *, _QWORD, uint64_t))v78)(v64, *MEMORY[0x24BE2B550], v79);
      v67 = (_QWORD *)swift_allocObject();
      v67[2] = v62;
      v67[3] = v61;
      v68 = v91;
      v67[4] = v87;
      v67[5] = v54;
      v67[6] = v88;
      v67[7] = v53;
      *(_QWORD *)v65 = &unk_256AAEF50;
      *((_QWORD *)v65 + 1) = v67;
      v82(v13, v81, v66);
      v69 = *v68;
      swift_retain();
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v69 = sub_23BD6E4B4(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
      v71 = *(_QWORD *)(v69 + 16);
      v70 = *(_QWORD *)(v69 + 24);
      if (v71 >= v70 >> 1)
        v69 = sub_23BD6E4B4(v70 > 1, v71 + 1, 1, v69);
      *(_QWORD *)(v69 + 16) = v71 + 1;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v94)(v69 + v90 + v71 * v80, v13, v66);
      *v68 = v69;
    }
    else
    {
      if (qword_256AACE00 != -1)
        swift_once();
      v72 = sub_23BDCD628();
      __swift_project_value_buffer(v72, (uint64_t)qword_256AAF4B0);
      v73 = sub_23BDCD610();
      v74 = sub_23BDCDE38();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v75 = 0;
        _os_log_impl(&dword_23BD56000, v73, v74, "[AwardToastFeature] Coalesced toast, setting scroll position identifier", v75, 2u);
        MEMORY[0x242611FFC](v75, -1, -1);
      }

      *(_BYTE *)(v59 + 104) = 1;
      if (qword_256AACDF8 != -1)
        swift_once();
      v77 = qword_256AAD600;
      v76 = *(_QWORD *)algn_256AAD608;
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v59 + 88) = v77;
      *(_QWORD *)(v59 + 96) = v76;
    }
  }
  return result;
}

unint64_t sub_23BDA5D38()
{
  unint64_t result;

  result = qword_256AAEF20;
  if (!qword_256AAEF20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD576C, &type metadata for AwardToastFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAEF20);
  }
  return result;
}

uint64_t sub_23BDA5D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  sub_23BDCDDF0();
  v3[4] = sub_23BDCDDE4();
  v3[5] = sub_23BDCDDCC();
  v3[6] = v4;
  return swift_task_switch();
}

uint64_t sub_23BDA5DE8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD);

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastFeature] toast tapped, requesting dismissal", v4, 2u);
    MEMORY[0x242611FFC](v4, -1, -1);
  }
  v5 = *(int **)(v0 + 16);

  v8 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_23BDA5EF8;
  return v8(0);
}

uint64_t sub_23BDA5EF8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDA5F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a2;
  v7[4] = a3;
  sub_23BDCDDF0();
  v7[7] = sub_23BDCDDE4();
  v7[8] = sub_23BDCDDCC();
  v7[9] = v8;
  return swift_task_switch();
}

uint64_t sub_23BDA5FB4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, _QWORD);
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 32);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastFeature] Presenting detail page for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 40) + *(_QWORD *)(v0 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v9;
  *v9 = v0;
  v9[1] = sub_23BDA61A4;
  return v11(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23BDA61A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDA6204()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDA6238()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDA626C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  sub_23BDCDDF0();
  v3[4] = sub_23BDCDDE4();
  v3[5] = sub_23BDCDDCC();
  v3[6] = v4;
  return swift_task_switch();
}

uint64_t sub_23BDA62D8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastFeature] toast swiped, requesting dismissal", v4, 2u);
    MEMORY[0x242611FFC](v4, -1, -1);
  }
  v5 = *(int **)(v0 + 16);

  v8 = (uint64_t (*)(uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v6;
  *v6 = v0;
  v6[1] = sub_23BDA63E8;
  return v8(1);
}

uint64_t sub_23BDA63E8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDA6434()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDA646C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6F814;
  return sub_23BDA626C(a1, v4, v5);
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDA6518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6F814;
  return sub_23BDA5D7C(a1, v4, v5);
}

uint64_t sub_23BDA658C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDA65C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_23BD6EBF8;
  return sub_23BDA5F44(a1, v4, v5, v6, v7, v9, v8);
}

unint64_t sub_23BDA664C()
{
  unint64_t result;

  result = qword_256AAEF58;
  if (!qword_256AAEF58)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastAction, &type metadata for AwardToastAction);
    atomic_store(result, (unint64_t *)&qword_256AAEF58);
  }
  return result;
}

unint64_t sub_23BDA6694()
{
  unint64_t result;

  result = qword_256AAEF60;
  if (!qword_256AAEF60)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastAction, &type metadata for AwardToastAction);
    atomic_store(result, (unint64_t *)&qword_256AAEF60);
  }
  return result;
}

unint64_t sub_23BDA66DC()
{
  unint64_t result;

  result = qword_256AAEF68;
  if (!qword_256AAEF68)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastState, &type metadata for AwardToastState);
    atomic_store(result, (unint64_t *)&qword_256AAEF68);
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastFeature()
{
  return &type metadata for AwardToastFeature;
}

uint64_t getEnumTagSinglePayload for AwardToastFeature.TaskIdentifier(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardToastFeature.TaskIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_23BDA67D4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23BDA67EC(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastFeature.TaskIdentifier()
{
  return &type metadata for AwardToastFeature.TaskIdentifier;
}

unint64_t sub_23BDA6820()
{
  unint64_t result;

  result = qword_256AAEF70;
  if (!qword_256AAEF70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5744, &type metadata for AwardToastFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAEF70);
  }
  return result;
}

BOOL static AwardToastAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AwardToastAction.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BDA68A8(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6977537473616F74;
  else
    return 0x7061547473616F74;
}

uint64_t sub_23BDA68E0()
{
  char *v0;

  return sub_23BDA68A8(*v0);
}

uint64_t sub_23BDA68E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDA73A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDA690C()
{
  sub_23BDA6C14();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA6934()
{
  sub_23BDA6C14();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA695C()
{
  sub_23BDA6C58();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA6984()
{
  sub_23BDA6C58();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA69AC()
{
  sub_23BDA6C9C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA69D4()
{
  sub_23BDA6C9C();
  return sub_23BDCE0E4();
}

uint64_t AwardToastAction.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t AwardToastAction.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEF78);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEF80);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEF88);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA6C14();
  sub_23BDCE0CC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BDA6C58();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BDA6C9C();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BDA6C14()
{
  unint64_t result;

  result = qword_256AAEF90;
  if (!qword_256AAEF90)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5AE0, &type metadata for AwardToastAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEF90);
  }
  return result;
}

unint64_t sub_23BDA6C58()
{
  unint64_t result;

  result = qword_256AAEF98;
  if (!qword_256AAEF98)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5A90, &type metadata for AwardToastAction.ToastSwipedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEF98);
  }
  return result;
}

unint64_t sub_23BDA6C9C()
{
  unint64_t result;

  result = qword_256AAEFA0;
  if (!qword_256AAEFA0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5A40, &type metadata for AwardToastAction.ToastTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFA0);
  }
  return result;
}

uint64_t AwardToastAction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEFA8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEFB0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEFB8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA6C14();
  v11 = v33;
  sub_23BDCE0C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BDCDFA0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for AwardToastAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BDA6C58();
    sub_23BDCDF28();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BDA6C9C();
    v22 = v6;
    sub_23BDCDF28();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

unint64_t sub_23BDA703C()
{
  unint64_t result;

  result = qword_256AAEFC0;
  if (!qword_256AAEFC0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastAction, &type metadata for AwardToastAction);
    atomic_store(result, (unint64_t *)&qword_256AAEFC0);
  }
  return result;
}

uint64_t sub_23BDA7080@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AwardToastAction.init(from:)(a1, a2);
}

uint64_t sub_23BDA7094(_QWORD *a1)
{
  return AwardToastAction.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AwardToastAction()
{
  return &type metadata for AwardToastAction;
}

uint64_t _s13FitnessAwards16AwardToastActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDA7108 + 4 * byte_23BDD57B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDA713C + 4 * byte_23BDD57B0[v4]))();
}

uint64_t sub_23BDA713C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA7144(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDA714CLL);
  return result;
}

uint64_t sub_23BDA7158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDA7160);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDA7164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA716C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastAction.CodingKeys()
{
  return &type metadata for AwardToastAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastAction.ToastTappedCodingKeys()
{
  return &type metadata for AwardToastAction.ToastTappedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastAction.ToastSwipedCodingKeys()
{
  return &type metadata for AwardToastAction.ToastSwipedCodingKeys;
}

unint64_t sub_23BDA71AC()
{
  unint64_t result;

  result = qword_256AAEFC8;
  if (!qword_256AAEFC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5A18, &type metadata for AwardToastAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFC8);
  }
  return result;
}

unint64_t sub_23BDA71F4()
{
  unint64_t result;

  result = qword_256AAEFD0;
  if (!qword_256AAEFD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5938, &type metadata for AwardToastAction.ToastTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFD0);
  }
  return result;
}

unint64_t sub_23BDA723C()
{
  unint64_t result;

  result = qword_256AAEFD8;
  if (!qword_256AAEFD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5960, &type metadata for AwardToastAction.ToastTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFD8);
  }
  return result;
}

unint64_t sub_23BDA7284()
{
  unint64_t result;

  result = qword_256AAEFE0;
  if (!qword_256AAEFE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD58E8, &type metadata for AwardToastAction.ToastSwipedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFE0);
  }
  return result;
}

unint64_t sub_23BDA72CC()
{
  unint64_t result;

  result = qword_256AAEFE8;
  if (!qword_256AAEFE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5910, &type metadata for AwardToastAction.ToastSwipedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFE8);
  }
  return result;
}

unint64_t sub_23BDA7314()
{
  unint64_t result;

  result = qword_256AAEFF0;
  if (!qword_256AAEFF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5988, &type metadata for AwardToastAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFF0);
  }
  return result;
}

unint64_t sub_23BDA735C()
{
  unint64_t result;

  result = qword_256AAEFF8;
  if (!qword_256AAEFF8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD59B0, &type metadata for AwardToastAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAEFF8);
  }
  return result;
}

uint64_t sub_23BDA73A0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7061547473616F74 && a2 == 0xEB00000000646570;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6977537473616F74 && a2 == 0xEB00000000646570)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AwardToastLayout.transformed()()
{
  _BYTE *v0;

  if (v0[8])
    return 0;
  else
    return *(_QWORD *)v0;
}

uint64_t AwardToastPresentationState.isSubscribed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AwardToastPresentationState.shouldObserveAppActivation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AwardToastPresentationState.suggestedWorkoutsLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardToastPresentationState.loadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AwardToastPresentationState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
}

uint64_t type metadata accessor for AwardToastPresentationState()
{
  uint64_t result;

  result = qword_256AAF070;
  if (!qword_256AAF070)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardToastPresentationState.loadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AwardToastPresentationState() + 28);
  return sub_23BD9F420(a1, v3);
}

uint64_t (*AwardToastPresentationState.loadState.modify())()
{
  type metadata accessor for AwardToastPresentationState();
  return nullsub_1;
}

uint64_t AwardToastPresentationState.progressLoadStates.getter()
{
  type metadata accessor for AwardToastPresentationState();
  return swift_bridgeObjectRetain();
}

uint64_t AwardToastPresentationState.progressLoadStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for AwardToastPresentationState() + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AwardToastPresentationState.progressLoadStates.modify())()
{
  type metadata accessor for AwardToastPresentationState();
  return nullsub_1;
}

uint64_t AwardToastPresentationState.init(isSubscribed:shouldObserveAppActivation:suggestedWorkoutsLoadStates:loadState:progressLoadStates:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t result;

  *(_BYTE *)a6 = a1;
  *(_BYTE *)(a6 + 1) = a2;
  *(_QWORD *)(a6 + 8) = a3;
  v9 = type metadata accessor for AwardToastPresentationState();
  result = sub_23BD9F4C8(a4, a6 + *(int *)(v9 + 28));
  *(_QWORD *)(a6 + *(int *)(v9 + 32)) = a5;
  return result;
}

uint64_t sub_23BDA7680(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDA76BC + 4 * byte_23BDD5B30[a1]))(0xD00000000000001ALL, 0x800000023BDDA7E0);
}

uint64_t sub_23BDA76BC()
{
  return 0x7263736275537369;
}

uint64_t sub_23BDA76DC()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_23BDA76F4()
{
  return 0x7461745364616F6CLL;
}

unint64_t sub_23BDA7710()
{
  return 0xD000000000000012;
}

uint64_t sub_23BDA772C()
{
  unsigned __int8 *v0;

  return sub_23BDA7680(*v0);
}

uint64_t sub_23BDA7734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDA8848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDA7758()
{
  sub_23BDA79E4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA7780()
{
  sub_23BDA79E4();
  return sub_23BDCE0E4();
}

uint64_t AwardToastPresentationState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF000);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA79E4();
  sub_23BDCE0CC();
  LOBYTE(v12) = 0;
  sub_23BDCDFE8();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_23BDCDFE8();
    v12 = *(_QWORD *)(v3 + 8);
    HIBYTE(v11) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
    sub_23BDA7D94(&qword_256AAEC48, (uint64_t (*)(void))sub_23BD590CC, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23BDCE00C();
    v9 = type metadata accessor for AwardToastPresentationState();
    LOBYTE(v12) = 3;
    type metadata accessor for AwardToastLoadState();
    sub_23BD6B5DC(&qword_256AAEC50, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
    sub_23BDCE00C();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 32));
    HIBYTE(v11) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
    sub_23BDA01F4();
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23BDA79E4()
{
  unint64_t result;

  result = qword_256AAF008;
  if (!qword_256AAF008)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5CDC, &type metadata for AwardToastPresentationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF008);
  }
  return result;
}

uint64_t AwardToastPresentationState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t State;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v18 = a2;
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF010);
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AwardToastPresentationState();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_23BDA79E4();
  v20 = v8;
  v13 = v22;
  sub_23BDCE0C0();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v14 = v6;
  LOBYTE(v24) = 0;
  v15 = v19;
  *v11 = sub_23BDCDF70() & 1;
  LOBYTE(v24) = 1;
  v11[1] = sub_23BDCDF70() & 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
  v23 = 2;
  sub_23BDA7D94(&qword_256AAEC88, (uint64_t (*)(void))sub_23BD59460, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  sub_23BDCDF94();
  *((_QWORD *)v11 + 1) = v24;
  LOBYTE(v24) = 3;
  sub_23BD6B5DC(&qword_256AAEC90, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
  sub_23BDCDF94();
  sub_23BD9F4C8((uint64_t)v5, (uint64_t)&v11[*(int *)(v9 + 28)]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
  v23 = 4;
  sub_23BDA0470();
  v16 = v20;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v15);
  *(_QWORD *)&v11[*(int *)(v9 + 32)] = v24;
  sub_23BD594E4((uint64_t)v11, v18, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastPresentationState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_23BD59BB4((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastPresentationState);
}

uint64_t sub_23BDA7D94(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAEC40);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x242611F78](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23BDA7E08@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardToastPresentationState.init(from:)(a1, a2);
}

uint64_t sub_23BDA7E1C(_QWORD *a1)
{
  return AwardToastPresentationState.encode(to:)(a1);
}

uint64_t _s13FitnessAwards27AwardToastPresentationStateV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;

  if (*a1 == *a2
    && a1[1] == a2[1]
    && (sub_23BDC9A04(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) != 0
    && (v4 = type metadata accessor for AwardToastPresentationState(),
        (_s13FitnessAwards19AwardToastLoadStateO2eeoiySbAC_ACtFZ_0((uint64_t)&a1[*(int *)(v4 + 28)], (uint64_t)&a2[*(int *)(v4 + 28)]) & 1) != 0))
  {
    return sub_23BDC91FC(*(_QWORD *)&a1[*(int *)(v4 + 32)], *(_QWORD *)&a2[*(int *)(v4 + 32)]);
  }
  else
  {
    return 0;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardToastPresentationState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    a1[1] = a2[1];
    v7 = *(int *)(a3 + 28);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    State = type metadata accessor for AwardToastLoadState();
    swift_bridgeObjectRetain();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v14 = v9[1];
      *v8 = *v9;
      v8[1] = v14;
      v15 = v9[3];
      v8[2] = v9[2];
      v8[3] = v15;
      v17 = v9[4];
      v16 = v9[5];
      v8[4] = v17;
      v8[5] = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v12 = sub_23BDCD58C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v9, v12);
      swift_storeEnumTagMultiPayload();
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AwardToastPresentationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  type metadata accessor for AwardToastLoadState();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (!EnumCaseMultiPayload)
  {
    v6 = sub_23BDCD58C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AwardToastPresentationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  State = type metadata accessor for AwardToastLoadState();
  swift_bridgeObjectRetain();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v12 = v8[1];
    *v7 = *v8;
    v7[1] = v12;
    v13 = v8[3];
    v7[2] = v8[2];
    v7[3] = v13;
    v15 = v8[4];
    v14 = v8[5];
    v7[4] = v15;
    v7[5] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v11 = sub_23BDCD58C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AwardToastPresentationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t State;
  int EnumCaseMultiPayload;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 28);
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    sub_23BD59BB4(a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
    State = type metadata accessor for AwardToastLoadState();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v7[2] = v8[2];
      v7[3] = v8[3];
      v7[4] = v8[4];
      v7[5] = v8[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v11 = sub_23BDCD58C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AwardToastPresentationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t State;
  uint64_t v10;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  State = type metadata accessor for AwardToastLoadState();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
  }
  else
  {
    v10 = sub_23BDCD58C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for AwardToastPresentationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t State;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 28);
    v7 = (void *)(a1 + v6);
    v8 = (const void *)(a2 + v6);
    sub_23BD59BB4(a1 + v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
    State = type metadata accessor for AwardToastLoadState();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(State - 8) + 64));
    }
    else
    {
      v10 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
      swift_storeEnumTagMultiPayload();
    }
  }
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDA8524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t State;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(a1 + *(int *)(a3 + 28), a2, State);
  }
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDA85AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t State;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, State);
  }
  return result;
}

uint64_t sub_23BDA8620()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for AwardToastLoadState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDA86F0 + 4 * byte_23BDD5B3A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDA8724 + 4 * byte_23BDD5B35[v4]))();
}

uint64_t sub_23BDA8724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA872C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDA8734);
  return result;
}

uint64_t sub_23BDA8740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDA8748);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDA874C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDA8754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationState.CodingKeys()
{
  return &type metadata for AwardToastPresentationState.CodingKeys;
}

unint64_t sub_23BDA8774()
{
  unint64_t result;

  result = qword_256AAF0B8;
  if (!qword_256AAF0B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5CB4, &type metadata for AwardToastPresentationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF0B8);
  }
  return result;
}

unint64_t sub_23BDA87BC()
{
  unint64_t result;

  result = qword_256AAF0C0;
  if (!qword_256AAF0C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5C24, &type metadata for AwardToastPresentationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF0C0);
  }
  return result;
}

unint64_t sub_23BDA8804()
{
  unint64_t result;

  result = qword_256AAF0C8;
  if (!qword_256AAF0C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5C4C, &type metadata for AwardToastPresentationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF0C8);
  }
  return result;
}

uint64_t sub_23BDA8848(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7263736275537369 && a2 == 0xEC00000064656269;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000023BDDA7E0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000023BDDA800 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461745364616F6CLL && a2 == 0xE900000000000065 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA7A0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BDA8A54(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDA8A8C + 4 * byte_23BDD5D30[a1]))(0xD000000000000010, 0x800000023BDDA670);
}

uint64_t sub_23BDA8A8C()
{
  return 0x7465466567616D69;
}

uint64_t sub_23BDA8AAC()
{
  return 0x616F4C6567616D69;
}

uint64_t sub_23BDA8AD0()
{
  return 0x616D496863746566;
}

uint64_t sub_23BDA8AF4()
{
  return 0x6570704177656976;
}

uint64_t sub_23BDA8B18(char a1)
{
  if ((a1 & 1) != 0)
    return 1702521203;
  else
    return 0x4C5255656C6966;
}

uint64_t sub_23BDA8B48()
{
  unsigned __int8 *v0;

  return sub_23BDA8A54(*v0);
}

uint64_t sub_23BDA8B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDAACA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDA8B74()
{
  sub_23BDA946C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8B9C()
{
  sub_23BDA946C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA8BC4()
{
  sub_23BDA957C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8BEC()
{
  sub_23BDA957C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA8C14()
{
  char *v0;

  return sub_23BDA8B18(*v0);
}

uint64_t sub_23BDA8C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDAAEE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDA8C40()
{
  sub_23BDA9604();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8C68()
{
  sub_23BDA9604();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA8C90()
{
  sub_23BDA95C0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8CB8()
{
  sub_23BDA95C0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA8CE0()
{
  sub_23BDA9538();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8D08()
{
  sub_23BDA9538();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDA8D30()
{
  sub_23BDA94F4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDA8D58()
{
  sub_23BDA94F4();
  return sub_23BDCE0E4();
}

void AwardImageAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0D0);
  v11[2] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0D8);
  v11[1] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v19 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0E0);
  v13 = *(_QWORD *)(v4 - 8);
  v14 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0E8);
  v11[3] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0F0);
  v18 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v16 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_23BDCD544();
  v17 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v15 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AwardImageAction();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF0F8);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDA946C();
  sub_23BDCE0CC();
  sub_23BDA94B0(v27, (uint64_t)v9);
  v10 = (char *)sub_23BDA902C + 4 * byte_23BDD5D35[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23BDA902C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (uint64_t *)(v0 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370) + 48));
  v4 = *v3;
  v5 = v3[1];
  v6 = *(_QWORD *)(v2 - 216);
  v7 = *(_QWORD *)(v2 - 232);
  v8 = *(_QWORD *)(v2 - 192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v0, v8);
  *(_BYTE *)(v2 - 120) = 0;
  sub_23BDA9604();
  v9 = *(_QWORD *)(v2 - 224);
  v10 = *(_QWORD *)(v2 - 136);
  v11 = v1;
  sub_23BDCDFAC();
  *(_BYTE *)(v2 - 120) = 0;
  sub_23BD6B5DC(&qword_256AAE688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  v12 = *(_QWORD *)(v2 - 184);
  v13 = *(_QWORD *)(v2 - 144);
  sub_23BDCE00C();
  if (!v13)
  {
    *(_QWORD *)(v2 - 120) = v4;
    *(_QWORD *)(v2 - 112) = v5;
    *(_BYTE *)(v2 - 65) = 1;
    type metadata accessor for CGSize();
    sub_23BD6B5DC(&qword_256AACF30, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    sub_23BDCE00C();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v9, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 152) + 8))(v11, v10);
}

uint64_t type metadata accessor for AwardImageAction()
{
  uint64_t result;

  result = qword_256AAF1D0;
  if (!qword_256AAF1D0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BDA946C()
{
  unint64_t result;

  result = qword_256AAF100;
  if (!qword_256AAF100)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6478, &type metadata for AwardImageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF100);
  }
  return result;
}

uint64_t sub_23BDA94B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardImageAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23BDA94F4()
{
  unint64_t result;

  result = qword_256AAF108;
  if (!qword_256AAF108)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6428, &type metadata for AwardImageAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF108);
  }
  return result;
}

unint64_t sub_23BDA9538()
{
  unint64_t result;

  result = qword_256AAF110;
  if (!qword_256AAF110)
  {
    result = MEMORY[0x242611F78](&unk_23BDD63D8, &type metadata for AwardImageAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF110);
  }
  return result;
}

unint64_t sub_23BDA957C()
{
  unint64_t result;

  result = qword_256AAF118;
  if (!qword_256AAF118)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6388, &type metadata for AwardImageAction.FetchImageDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF118);
  }
  return result;
}

unint64_t sub_23BDA95C0()
{
  unint64_t result;

  result = qword_256AAF120;
  if (!qword_256AAF120)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6338, &type metadata for AwardImageAction.ImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF120);
  }
  return result;
}

unint64_t sub_23BDA9604()
{
  unint64_t result;

  result = qword_256AAF128;
  if (!qword_256AAF128)
  {
    result = MEMORY[0x242611F78](&unk_23BDD62E8, &type metadata for AwardImageAction.ImageFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF128);
  }
  return result;
}

uint64_t AwardImageAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;

  v43 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF130);
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v50 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF138);
  v49 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v46 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF140);
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v45 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF148);
  v34[4] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v44 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF150);
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v47 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF158);
  v48 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for AwardImageAction();
  v11 = MEMORY[0x24BDAC7A8](v52);
  v34[3] = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v34 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v34 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v34 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v34 - v23;
  v25 = a1[3];
  v53 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_23BDA946C();
  v26 = v54;
  sub_23BDCE0C0();
  if (!v26)
  {
    v34[0] = v19;
    v34[1] = v16;
    v34[2] = v22;
    v54 = v24;
    v27 = v51;
    v28 = sub_23BDCDFA0();
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X10 }
    v29 = sub_23BDCDEC8();
    swift_allocError();
    v30 = v27;
    v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v32 = v52;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v30);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
}

uint64_t sub_23BDAA048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardImageAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDAA08C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardImageAction.init(from:)(a1, a2);
}

void sub_23BDAA0A0(_QWORD *a1)
{
  AwardImageAction.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardImageAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_23BDCD544();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370);
    *(_OWORD *)((char *)a1 + *(int *)(v9 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 48));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AwardImageAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_23BDCD544();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

char *initializeWithCopy for AwardImageAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23BDCD544();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370);
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for AwardImageAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23BDAA314((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD544();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370);
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BDAA314(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AwardImageAction();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for AwardImageAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23BDCD544();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370);
    *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for AwardImageAction(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23BDAA314((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD544();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE370);
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BDAA4A0()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  result = sub_23BDCD544();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3 = &v2;
    v4 = &unk_23BDD5DC8;
    v5 = &unk_23BDD5DC8;
    v6 = &unk_23BDD5DC8;
    v7 = &unk_23BDD5DC8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardImageAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDAA578 + 4 * byte_23BDD5D44[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDAA5AC + 4 * byte_23BDD5D3F[v4]))();
}

uint64_t sub_23BDAA5AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAA5B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDAA5BCLL);
  return result;
}

uint64_t sub_23BDAA5C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDAA5D0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDAA5D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAA5DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageAction.CodingKeys()
{
  return &type metadata for AwardImageAction.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AwardImageAction.ImageFetchedCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDAA644 + 4 * byte_23BDD5D4E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDAA678 + 4 * byte_23BDD5D49[v4]))();
}

uint64_t sub_23BDAA678(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAA680(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDAA688);
  return result;
}

uint64_t sub_23BDAA694(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDAA69CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDAA6A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAA6A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageAction.ImageFetchedCodingKeys()
{
  return &type metadata for AwardImageAction.ImageFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardImageAction.ImageLoadFailedCodingKeys()
{
  return &type metadata for AwardImageAction.ImageLoadFailedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardImageAction.FetchImageDataCodingKeys()
{
  return &type metadata for AwardImageAction.FetchImageDataCodingKeys;
}

ValueMetadata *type metadata accessor for AwardImageAction.LoadStateClearedCodingKeys()
{
  return &type metadata for AwardImageAction.LoadStateClearedCodingKeys;
}

uint64_t _s13FitnessAwards16AwardImageActionO25ImageLoadFailedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BDAA738 + 4 * byte_23BDD5D53[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BDAA758 + 4 * byte_23BDD5D58[v4]))();
}

_BYTE *sub_23BDAA738(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BDAA758(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDAA760(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDAA768(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDAA770(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDAA778(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardImageAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BDAA798()
{
  unint64_t result;

  result = qword_256AAF208;
  if (!qword_256AAF208)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5F28, &type metadata for AwardImageAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF208);
  }
  return result;
}

unint64_t sub_23BDAA7E0()
{
  unint64_t result;

  result = qword_256AAF210;
  if (!qword_256AAF210)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5FE0, &type metadata for AwardImageAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF210);
  }
  return result;
}

unint64_t sub_23BDAA828()
{
  unint64_t result;

  result = qword_256AAF218;
  if (!qword_256AAF218)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6098, &type metadata for AwardImageAction.FetchImageDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF218);
  }
  return result;
}

unint64_t sub_23BDAA870()
{
  unint64_t result;

  result = qword_256AAF220;
  if (!qword_256AAF220)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6150, &type metadata for AwardImageAction.ImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF220);
  }
  return result;
}

unint64_t sub_23BDAA8B8()
{
  unint64_t result;

  result = qword_256AAF228;
  if (!qword_256AAF228)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6208, &type metadata for AwardImageAction.ImageFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF228);
  }
  return result;
}

unint64_t sub_23BDAA900()
{
  unint64_t result;

  result = qword_256AAF230;
  if (!qword_256AAF230)
  {
    result = MEMORY[0x242611F78](&unk_23BDD62C0, &type metadata for AwardImageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF230);
  }
  return result;
}

unint64_t sub_23BDAA948()
{
  unint64_t result;

  result = qword_256AAF238;
  if (!qword_256AAF238)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6178, &type metadata for AwardImageAction.ImageFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF238);
  }
  return result;
}

unint64_t sub_23BDAA990()
{
  unint64_t result;

  result = qword_256AAF240;
  if (!qword_256AAF240)
  {
    result = MEMORY[0x242611F78](&unk_23BDD61A0, &type metadata for AwardImageAction.ImageFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF240);
  }
  return result;
}

unint64_t sub_23BDAA9D8()
{
  unint64_t result;

  result = qword_256AAF248;
  if (!qword_256AAF248)
  {
    result = MEMORY[0x242611F78](&unk_23BDD60C0, &type metadata for AwardImageAction.ImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF248);
  }
  return result;
}

unint64_t sub_23BDAAA20()
{
  unint64_t result;

  result = qword_256AAF250;
  if (!qword_256AAF250)
  {
    result = MEMORY[0x242611F78](&unk_23BDD60E8, &type metadata for AwardImageAction.ImageLoadFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF250);
  }
  return result;
}

unint64_t sub_23BDAAA68()
{
  unint64_t result;

  result = qword_256AAF258;
  if (!qword_256AAF258)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6008, &type metadata for AwardImageAction.FetchImageDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF258);
  }
  return result;
}

unint64_t sub_23BDAAAB0()
{
  unint64_t result;

  result = qword_256AAF260;
  if (!qword_256AAF260)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6030, &type metadata for AwardImageAction.FetchImageDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF260);
  }
  return result;
}

unint64_t sub_23BDAAAF8()
{
  unint64_t result;

  result = qword_256AAF268;
  if (!qword_256AAF268)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5F50, &type metadata for AwardImageAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF268);
  }
  return result;
}

unint64_t sub_23BDAAB40()
{
  unint64_t result;

  result = qword_256AAF270;
  if (!qword_256AAF270)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5F78, &type metadata for AwardImageAction.LoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF270);
  }
  return result;
}

unint64_t sub_23BDAAB88()
{
  unint64_t result;

  result = qword_256AAF278;
  if (!qword_256AAF278)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5E98, &type metadata for AwardImageAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF278);
  }
  return result;
}

unint64_t sub_23BDAABD0()
{
  unint64_t result;

  result = qword_256AAF280;
  if (!qword_256AAF280)
  {
    result = MEMORY[0x242611F78](&unk_23BDD5EC0, &type metadata for AwardImageAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF280);
  }
  return result;
}

unint64_t sub_23BDAAC18()
{
  unint64_t result;

  result = qword_256AAF288;
  if (!qword_256AAF288)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6230, &type metadata for AwardImageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF288);
  }
  return result;
}

unint64_t sub_23BDAAC60()
{
  unint64_t result;

  result = qword_256AAF290;
  if (!qword_256AAF290)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6258, &type metadata for AwardImageAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF290);
  }
  return result;
}

uint64_t sub_23BDAACA4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7465466567616D69 && a2 == 0xEC00000064656863;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616F4C6567616D69 && a2 == 0xEF64656C69614664 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616D496863746566 && a2 == 0xEE00617461446567 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA670 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23BDAAEE4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AwardCanvasSectionDescriptor.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardCanvasSectionDescriptor.templateUniqueName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardCanvasSectionDescriptor.items.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall AwardCanvasSectionDescriptor.init(identifier:templateUniqueName:items:)(FitnessAwards::AwardCanvasSectionDescriptor *__return_ptr retstr, Swift::String identifier, Swift::String templateUniqueName, Swift::OpaquePointer items)
{
  retstr->identifier = identifier;
  retstr->templateUniqueName = templateUniqueName;
  retstr->items = items;
}

uint64_t sub_23BDAB030(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 0xD000000000000012;
  return 0x736D657469;
}

uint64_t sub_23BDAB08C()
{
  char *v0;

  return sub_23BDAB030(*v0);
}

uint64_t sub_23BDAB094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDABED4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDAB0B8()
{
  sub_23BDAB2A4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAB0E0()
{
  sub_23BDAB2A4();
  return sub_23BDCE0E4();
}

uint64_t AwardCanvasSectionDescriptor.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF298);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13 = v1[3];
  v14 = v7;
  v12 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDAB2A4();
  sub_23BDCE0CC();
  v19 = 0;
  v8 = v15;
  sub_23BDCDFDC();
  if (!v8)
  {
    v9 = v12;
    v18 = 1;
    sub_23BDCDFDC();
    v16 = v9;
    v17 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF2A8);
    sub_23BDAB5A8(&qword_256AAF2B0, (uint64_t (*)(void))sub_23BDAB2E8, MEMORY[0x24BEE12A0]);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BDAB2A4()
{
  unint64_t result;

  result = qword_256AAF2A0;
  if (!qword_256AAF2A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6690, &type metadata for AwardCanvasSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF2A0);
  }
  return result;
}

unint64_t sub_23BDAB2E8()
{
  unint64_t result;

  result = qword_256AAF2B8;
  if (!qword_256AAF2B8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasPlaceholder, &type metadata for AwardCanvasPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AAF2B8);
  }
  return result;
}

uint64_t AwardCanvasSectionDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF2C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDAB2A4();
  sub_23BDCE0C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v24 = 0;
  v9 = sub_23BDCDF64();
  v11 = v10;
  v20 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23BDCDF64();
  v14 = v13;
  v18 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF2A8);
  v22 = 2;
  sub_23BDAB5A8(&qword_256AAF2C8, (uint64_t (*)(void))sub_23BDAB610, MEMORY[0x24BEE12D0]);
  v19 = v14;
  swift_bridgeObjectRetain();
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v19;
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDAB5A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAF2A8);
    v8 = a2();
    result = MEMORY[0x242611F78](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23BDAB610()
{
  unint64_t result;

  result = qword_256AAF2D0;
  if (!qword_256AAF2D0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasPlaceholder, &type metadata for AwardCanvasPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256AAF2D0);
  }
  return result;
}

uint64_t sub_23BDAB654@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AwardCanvasSectionDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23BDAB668(_QWORD *a1)
{
  return AwardCanvasSectionDescriptor.encode(to:)(a1);
}

uint64_t AwardCanvasSectionDescriptor.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD89808(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t static AwardCanvasSectionDescriptor.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (_QWORD *)a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if ((v8 || (sub_23BDCE024() & 1) != 0) && (v2 == v5 ? (v9 = v4 == v6) : (v9 = 0), v9 || (sub_23BDCE024() & 1) != 0))
    return sub_23BD88870(v3, v7);
  else
    return 0;
}

uint64_t AwardCanvasSectionDescriptor.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 32);
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD89808((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDAB860()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 32);
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD89808((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDAB90C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD89808(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDAB99C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 32);
  sub_23BDCE084();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BDCDD90();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23BD89808((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDABA44(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a2[2];
  v6 = a2[3];
  v7 = (_QWORD *)a2[4];
  v8 = *a1 == *a2 && a1[1] == a2[1];
  if ((v8 || (sub_23BDCE024() & 1) != 0) && (v2 == v5 ? (v9 = v4 == v6) : (v9 = 0), v9 || (sub_23BDCE024() & 1) != 0))
    return sub_23BD88870(v3, v7);
  else
    return 0;
}

unint64_t sub_23BDABAF0()
{
  unint64_t result;

  result = qword_256AAF2D8;
  if (!qword_256AAF2D8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardCanvasSectionDescriptor, &type metadata for AwardCanvasSectionDescriptor);
    atomic_store(result, (unint64_t *)&qword_256AAF2D8);
  }
  return result;
}

uint64_t destroy for AwardCanvasSectionDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AwardCanvasSectionDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AwardCanvasSectionDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AwardCanvasSectionDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardCanvasSectionDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardCanvasSectionDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardCanvasSectionDescriptor()
{
  return &type metadata for AwardCanvasSectionDescriptor;
}

uint64_t storeEnumTagSinglePayload for AwardCanvasSectionDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BDABD7C + 4 * byte_23BDD64D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BDABDB0 + 4 * byte_23BDD64D0[v4]))();
}

uint64_t sub_23BDABDB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDABDB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDABDC0);
  return result;
}

uint64_t sub_23BDABDCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDABDD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BDABDD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDABDE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardCanvasSectionDescriptor.CodingKeys()
{
  return &type metadata for AwardCanvasSectionDescriptor.CodingKeys;
}

unint64_t sub_23BDABE00()
{
  unint64_t result;

  result = qword_256AAF2E0;
  if (!qword_256AAF2E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6668, &type metadata for AwardCanvasSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF2E0);
  }
  return result;
}

unint64_t sub_23BDABE48()
{
  unint64_t result;

  result = qword_256AAF2E8;
  if (!qword_256AAF2E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD65D8, &type metadata for AwardCanvasSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF2E8);
  }
  return result;
}

unint64_t sub_23BDABE90()
{
  unint64_t result;

  result = qword_256AAF2F0;
  if (!qword_256AAF2F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6600, &type metadata for AwardCanvasSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF2F0);
  }
  return result;
}

uint64_t sub_23BDABED4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23BDAC01C(char a1)
{
  return *(_QWORD *)&aIdle_8[8 * a1];
}

uint64_t sub_23BDAC03C()
{
  char *v0;

  return sub_23BDAC01C(*v0);
}

uint64_t sub_23BDAC044()
{
  sub_23BDAD11C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAC06C()
{
  sub_23BDAD11C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDAC094()
{
  sub_23BDAD160();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAC0BC()
{
  sub_23BDAD160();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDAC0E4()
{
  sub_23BDAD1A4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAC10C()
{
  sub_23BDAD1A4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDAC134()
{
  sub_23BDAD1E8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAC15C()
{
  sub_23BDAD1E8();
  return sub_23BDCE0E4();
}

uint64_t AwardToastLoadState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF2F8);
  v42 = *(_QWORD *)(v2 - 8);
  v43 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF300);
  v35 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v38 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23BDCD58C();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF308);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF310);
  v45 = *(_QWORD *)(v13 - 8);
  v46 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDAD11C();
  sub_23BDCE0CC();
  sub_23BD764FC(v44, (uint64_t)v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v17 = v12[1];
      v44 = *v12;
      v18 = v44;
      v19 = v12[2];
      v20 = v12[3];
      v39 = v17;
      v40 = v19;
      v21 = v12[4];
      v22 = v12[5];
      LOBYTE(v47) = 2;
      sub_23BDAD160();
      v23 = v41;
      v24 = v46;
      sub_23BDCDFAC();
      v47 = v18;
      v48 = v39;
      v49 = v19;
      v50 = v20;
      v51 = v21;
      v52 = v22;
      sub_23BD60438();
      v25 = v43;
      sub_23BDCE00C();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v25);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      LOBYTE(v47) = 0;
      sub_23BDAD1E8();
      v34 = v46;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v15, v34);
    }
  }
  else
  {
    v27 = v35;
    v28 = v36;
    v29 = v37;
    v30 = v39;
    (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 32))(v36, v12, v39);
    LOBYTE(v47) = 1;
    sub_23BDAD1A4();
    v31 = v38;
    v32 = v46;
    sub_23BDCDFAC();
    sub_23BD6B5DC(&qword_256AAD4A8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v33 = v40;
    sub_23BDCE00C();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v33);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v28, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v15, v32);
  }
}

uint64_t AwardToastLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t State;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char *v66;

  v55 = a2;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF338);
  v54 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v59 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF340);
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF348);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF350);
  v56 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  v11 = MEMORY[0x24BDAC7A8](State);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v45 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v45 - v17;
  v19 = a1[3];
  v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23BDAD11C();
  v20 = v9;
  v21 = (uint64_t)v66;
  sub_23BDCE0C0();
  if (v21)
    goto LABEL_9;
  v22 = v57;
  v47 = v16;
  v46 = v13;
  v24 = v58;
  v23 = v59;
  v66 = v18;
  v48 = State;
  v25 = v60;
  v26 = v20;
  v27 = sub_23BDCDFA0();
  if (*(_QWORD *)(v27 + 16) != 1)
  {
    v28 = v25;
    v29 = sub_23BDCDEC8();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v31 = v48;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v28);
LABEL_9:
    v36 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(_BYTE *)(v27 + 32))
  {
    if (*(_BYTE *)(v27 + 32) == 1)
    {
      LOBYTE(v62) = 1;
      sub_23BDAD1A4();
      sub_23BDCDF28();
      sub_23BDCD58C();
      sub_23BD6B5DC(&qword_256AAD4D8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
      v34 = (uint64_t)v47;
      v35 = v53;
      sub_23BDCDF94();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v24, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      v36 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
      v37 = (uint64_t)v66;
      sub_23BD9F4C8(v34, (uint64_t)v66);
      v38 = v55;
    }
    else
    {
      LOBYTE(v62) = 2;
      sub_23BDAD160();
      v32 = v23;
      sub_23BDCDF28();
      v38 = v55;
      sub_23BD61258();
      v39 = v51;
      sub_23BDCDF94();
      v36 = (uint64_t)v61;
      v40 = v56;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v20, v60);
      v41 = v63;
      v42 = v65;
      v43 = v46;
      *v46 = v62;
      *((_QWORD *)v43 + 2) = v41;
      *(_OWORD *)((char *)v43 + 24) = v64;
      *((_QWORD *)v43 + 5) = v42;
      swift_storeEnumTagMultiPayload();
      v44 = (uint64_t)v43;
      v37 = (uint64_t)v66;
      sub_23BD9F4C8(v44, (uint64_t)v66);
    }
  }
  else
  {
    LOBYTE(v62) = 0;
    sub_23BDAD1E8();
    sub_23BDCDF28();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v22, v50);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v25);
    v37 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    v36 = (uint64_t)v61;
    v38 = v55;
  }
  sub_23BD9F4C8(v37, v38);
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t sub_23BDACBA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardToastLoadState.init(from:)(a1, a2);
}

uint64_t sub_23BDACBBC(_QWORD *a1)
{
  return AwardToastLoadState.encode(to:)(a1);
}

uint64_t AwardToastLoadState.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t *v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];

  v2 = v1;
  v4 = sub_23BDCD58C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v10 = (_QWORD *)((char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23BD764FC(v2, (uint64_t)v10);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = *v10;
      v13 = v10[1];
      v14 = v10[2];
      v15 = v10[3];
      v16 = v10[4];
      v17 = v10[5];
      sub_23BDCE090();
      v19[0] = v12;
      v19[1] = v13;
      v19[2] = v14;
      v19[3] = v15;
      v19[4] = v16;
      v19[5] = v17;
      AwardToastDetail.hash(into:)(a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t AwardToastLoadState.hashValue.getter()
{
  _BYTE v1[72];

  sub_23BDCE084();
  AwardToastLoadState.hash(into:)((uint64_t)v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BDACDA4()
{
  _BYTE v1[72];

  sub_23BDCE084();
  AwardToastLoadState.hash(into:)((uint64_t)v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BDACDE4()
{
  _BYTE v1[72];

  sub_23BDCE084();
  AwardToastLoadState.hash(into:)((uint64_t)v1);
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards19AwardToastLoadStateO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t);
  _QWORD v35[6];
  _QWORD v36[6];

  v4 = sub_23BDCD58C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  v9 = MEMORY[0x24BDAC7A8](State);
  v11 = (_QWORD *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v35 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF460);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v17[*(int *)(v15 + 48)];
  sub_23BD764FC(a1, (uint64_t)v17);
  sub_23BD764FC(a2, (uint64_t)v18);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_23BD764FC((uint64_t)v17, (uint64_t)v13);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v18, v4);
      v32 = sub_23BDCD574();
      v33 = *(void (**)(char *, uint64_t))(v5 + 8);
      v33(v7, v4);
      v33(v13, v4);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23BD764FC((uint64_t)v17, (uint64_t)v11);
    v20 = *v11;
    v21 = v11[2];
    v22 = v11[4];
    v23 = v11[5];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v24 = v11[3];
      v25 = v11[1];
      v27 = *(_QWORD *)v18;
      v26 = *((_QWORD *)v18 + 1);
      v29 = *((_QWORD *)v18 + 2);
      v28 = *((_QWORD *)v18 + 3);
      v31 = *((_QWORD *)v18 + 4);
      v30 = *((_QWORD *)v18 + 5);
      v36[0] = v20;
      v36[1] = v25;
      v36[2] = v21;
      v36[3] = v24;
      v36[4] = v22;
      v36[5] = v23;
      v35[0] = v27;
      v35[1] = v26;
      v35[2] = v29;
      v35[3] = v28;
      v35[4] = v31;
      v35[5] = v30;
      v32 = _s13FitnessAwards16AwardToastDetailV2eeoiySbAC_ACtFZ_0((uint64_t)v36, (uint64_t)v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_12:
      sub_23BD76540((uint64_t)v17);
      return v32 & 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
LABEL_10:
    sub_23BDADB68((uint64_t)v17);
    v32 = 0;
    return v32 & 1;
  }
  sub_23BD76540((uint64_t)v17);
  v32 = 1;
  return v32 & 1;
}

uint64_t type metadata accessor for AwardToastLoadState()
{
  uint64_t result;

  result = qword_256AAF3D0;
  if (!qword_256AAF3D0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23BDAD11C()
{
  unint64_t result;

  result = qword_256AAF318;
  if (!qword_256AAF318)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6BAC, &type metadata for AwardToastLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF318);
  }
  return result;
}

unint64_t sub_23BDAD160()
{
  unint64_t result;

  result = qword_256AAF320;
  if (!qword_256AAF320)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6B5C, &type metadata for AwardToastLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF320);
  }
  return result;
}

unint64_t sub_23BDAD1A4()
{
  unint64_t result;

  result = qword_256AAF328;
  if (!qword_256AAF328)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6B0C, &type metadata for AwardToastLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF328);
  }
  return result;
}

unint64_t sub_23BDAD1E8()
{
  unint64_t result;

  result = qword_256AAF330;
  if (!qword_256AAF330)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6ABC, &type metadata for AwardToastLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF330);
  }
  return result;
}

uint64_t sub_23BDAD22C()
{
  return sub_23BD6B5DC(&qword_256AAF358, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
}

uint64_t *initializeBufferWithCopyOfBuffer for AwardToastLoadState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      v13 = a2[4];
      v12 = a2[5];
      a1[4] = v13;
      a1[5] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = sub_23BDCD58C();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for AwardToastLoadState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else if (!(_DWORD)result)
  {
    v3 = sub_23BDCD58C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for AwardToastLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    v11 = a2[4];
    v10 = a2[5];
    a1[4] = v11;
    a1[5] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = sub_23BDCD58C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for AwardToastLoadState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_23BD76540((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = sub_23BDCD58C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *assignWithTake for AwardToastLoadState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_23BD76540((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23BDCD58C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23BDAD658()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardToastLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BDAD710 + 4 * byte_23BDD66E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BDAD744 + 4 * byte_23BDD66E0[v4]))();
}

uint64_t sub_23BDAD744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAD74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDAD754);
  return result;
}

uint64_t sub_23BDAD760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDAD768);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BDAD76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAD774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastLoadState.CodingKeys()
{
  return &type metadata for AwardToastLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastLoadState.IdleCodingKeys()
{
  return &type metadata for AwardToastLoadState.IdleCodingKeys;
}

ValueMetadata *type metadata accessor for AwardToastLoadState.FetchingCodingKeys()
{
  return &type metadata for AwardToastLoadState.FetchingCodingKeys;
}

uint64_t _s13FitnessAwards19AwardToastLoadStateO18FetchingCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BDAD7F4 + 4 * byte_23BDD66EA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BDAD814 + 4 * byte_23BDD66EF[v4]))();
}

_BYTE *sub_23BDAD7F4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BDAD814(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDAD81C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDAD824(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDAD82C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDAD834(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastLoadState.FetchedCodingKeys()
{
  return &type metadata for AwardToastLoadState.FetchedCodingKeys;
}

unint64_t sub_23BDAD854()
{
  unint64_t result;

  result = qword_256AAF408;
  if (!qword_256AAF408)
  {
    result = MEMORY[0x242611F78](&unk_23BDD68D4, &type metadata for AwardToastLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF408);
  }
  return result;
}

unint64_t sub_23BDAD89C()
{
  unint64_t result;

  result = qword_256AAF410;
  if (!qword_256AAF410)
  {
    result = MEMORY[0x242611F78](&unk_23BDD698C, &type metadata for AwardToastLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF410);
  }
  return result;
}

unint64_t sub_23BDAD8E4()
{
  unint64_t result;

  result = qword_256AAF418;
  if (!qword_256AAF418)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6A94, &type metadata for AwardToastLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF418);
  }
  return result;
}

unint64_t sub_23BDAD92C()
{
  unint64_t result;

  result = qword_256AAF420;
  if (!qword_256AAF420)
  {
    result = MEMORY[0x242611F78](&unk_23BDD69B4, &type metadata for AwardToastLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF420);
  }
  return result;
}

unint64_t sub_23BDAD974()
{
  unint64_t result;

  result = qword_256AAF428;
  if (!qword_256AAF428)
  {
    result = MEMORY[0x242611F78](&unk_23BDD69DC, &type metadata for AwardToastLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF428);
  }
  return result;
}

unint64_t sub_23BDAD9BC()
{
  unint64_t result;

  result = qword_256AAF430;
  if (!qword_256AAF430)
  {
    result = MEMORY[0x242611F78](&unk_23BDD68FC, &type metadata for AwardToastLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF430);
  }
  return result;
}

unint64_t sub_23BDADA04()
{
  unint64_t result;

  result = qword_256AAF438;
  if (!qword_256AAF438)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6924, &type metadata for AwardToastLoadState.FetchingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF438);
  }
  return result;
}

unint64_t sub_23BDADA4C()
{
  unint64_t result;

  result = qword_256AAF440;
  if (!qword_256AAF440)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6844, &type metadata for AwardToastLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF440);
  }
  return result;
}

unint64_t sub_23BDADA94()
{
  unint64_t result;

  result = qword_256AAF448;
  if (!qword_256AAF448)
  {
    result = MEMORY[0x242611F78](&unk_23BDD686C, &type metadata for AwardToastLoadState.FetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF448);
  }
  return result;
}

unint64_t sub_23BDADADC()
{
  unint64_t result;

  result = qword_256AAF450;
  if (!qword_256AAF450)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6A04, &type metadata for AwardToastLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF450);
  }
  return result;
}

unint64_t sub_23BDADB24()
{
  unint64_t result;

  result = qword_256AAF458;
  if (!qword_256AAF458)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6A2C, &type metadata for AwardToastLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF458);
  }
  return result;
}

uint64_t sub_23BDADB68(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF460);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AwardProgressEnvironment.init(fetchAwardProgress:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressEnvironment()
{
  return &type metadata for AwardProgressEnvironment;
}

__n128 AwardToastLayout.init(fixedWidth:imageLayout:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  __n128 result;

  v3 = *(_BYTE *)(a1 + 8);
  a3->n128_u64[0] = *(_QWORD *)a1;
  a3->n128_u8[8] = v3;
  result = *a2;
  a3[1] = *a2;
  return result;
}

uint64_t sub_23BDADBDC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x79614C6567616D69;
  else
    return 0x6469576465786966;
}

uint64_t sub_23BDADC20()
{
  char *v0;

  return sub_23BDADBDC(*v0);
}

uint64_t sub_23BDADC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDAE4E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDADC4C()
{
  sub_23BDADDF4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDADC74()
{
  sub_23BDADDF4();
  return sub_23BDCE0E4();
}

uint64_t AwardToastLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF468);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((_BYTE *)v1 + 8);
  v9 = v1[2];
  v10 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDADDF4();
  sub_23BDCE0CC();
  v14 = v7;
  LOBYTE(v15) = v8;
  v16 = 0;
  sub_23BDADE38();
  v11 = v13[1];
  sub_23BDCE00C();
  if (!v11)
  {
    v14 = v9;
    v15 = v10;
    v16 = 1;
    sub_23BD62948();
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BDADDF4()
{
  unint64_t result;

  result = qword_256AAF470;
  if (!qword_256AAF470)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6DF4, &type metadata for AwardToastLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF470);
  }
  return result;
}

unint64_t sub_23BDADE38()
{
  unint64_t result;

  result = qword_256AAF478;
  if (!qword_256AAF478)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastWidth, &type metadata for AwardToastWidth);
    atomic_store(result, (unint64_t *)&qword_256AAF478);
  }
  return result;
}

uint64_t AwardToastLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF480);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDADDF4();
  sub_23BDCE0C0();
  if (!v2)
  {
    v14 = 0;
    sub_23BDAE004();
    sub_23BDCDF94();
    v9 = v13;
    v10 = BYTE8(v13);
    v14 = 1;
    sub_23BD62C64();
    sub_23BDCDF94();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v13;
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 16) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23BDAE004()
{
  unint64_t result;

  result = qword_256AAF488;
  if (!qword_256AAF488)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastWidth, &type metadata for AwardToastWidth);
    atomic_store(result, (unint64_t *)&qword_256AAF488);
  }
  return result;
}

uint64_t sub_23BDAE048@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardToastLayout.init(from:)(a1, a2);
}

uint64_t sub_23BDAE05C(_QWORD *a1)
{
  return AwardToastLayout.encode(to:)(a1);
}

uint64_t AwardToastLayout.hash(into:)()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    sub_23BDCE090();
  }
  else
  {
    sub_23BDCE090();
    sub_23BDCE0A8();
  }
  return sub_23BD5A758();
}

BOOL static AwardToastLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return *(double *)(a1 + 24) == *(double *)(a2 + 24) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

uint64_t AwardToastLayout.hashValue.getter()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if ((v1 & 1) == 0)
    sub_23BDCE0A8();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDAE1C4()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 8);
  sub_23BDCE084();
  sub_23BDCE090();
  if ((v1 & 1) == 0)
    sub_23BDCE0A8();
  sub_23BD5A758();
  return sub_23BDCE0B4();
}

BOOL sub_23BDAE24C(uint64_t a1, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return *(double *)(a1 + 24) == *(double *)(a2 + 24) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

unint64_t sub_23BDAE2A0()
{
  unint64_t result;

  result = qword_256AAF490;
  if (!qword_256AAF490)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastLayout, &type metadata for AwardToastLayout);
    atomic_store(result, (unint64_t *)&qword_256AAF490);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardToastLayout(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardToastLayout(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastLayout()
{
  return &type metadata for AwardToastLayout;
}

uint64_t storeEnumTagSinglePayload for AwardToastLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDAE38C + 4 * byte_23BDD6C55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDAE3C0 + 4 * asc_23BDD6C50[v4]))();
}

uint64_t sub_23BDAE3C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAE3C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDAE3D0);
  return result;
}

uint64_t sub_23BDAE3DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDAE3E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDAE3E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAE3F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastLayout.CodingKeys()
{
  return &type metadata for AwardToastLayout.CodingKeys;
}

unint64_t sub_23BDAE410()
{
  unint64_t result;

  result = qword_256AAF498;
  if (!qword_256AAF498)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6DCC, &type metadata for AwardToastLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF498);
  }
  return result;
}

unint64_t sub_23BDAE458()
{
  unint64_t result;

  result = qword_256AAF4A0;
  if (!qword_256AAF4A0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6D3C, &type metadata for AwardToastLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF4A0);
  }
  return result;
}

unint64_t sub_23BDAE4A0()
{
  unint64_t result;

  result = qword_256AAF4A8;
  if (!qword_256AAF4A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6D64, &type metadata for AwardToastLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF4A8);
  }
  return result;
}

uint64_t sub_23BDAE4E4(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6469576465786966 && a2 == 0xEA00000000006874;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79614C6567616D69 && a2 == 0xEB0000000074756FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BDAE5E4()
{
  uint64_t v0;

  v0 = sub_23BDCD628();
  __swift_allocate_value_buffer(v0, qword_256AAF4B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256AAF4B0);
  return sub_23BDCD61C();
}

uint64_t awardsLogger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_256AACE00 != -1)
    swift_once();
  v2 = sub_23BDCD628();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL static AwardRemoteParticipantStatusMonitorAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AwardRemoteParticipantStatusMonitorAction.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BDAE744()
{
  sub_23BDAEA90();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAE76C()
{
  sub_23BDAEA90();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDAE794()
{
  sub_23BDAEA08();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAE7BC()
{
  sub_23BDAEA08();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDAE7E4()
{
  sub_23BDAEA4C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDAE80C()
{
  sub_23BDAEA4C();
  return sub_23BDCE0E4();
}

uint64_t AwardRemoteParticipantStatusMonitorAction.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF4C8);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF4D0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF4D8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDAEA08();
  sub_23BDCE0CC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BDAEA4C();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BDAEA90();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BDAEA08()
{
  unint64_t result;

  result = qword_256AAF4E0;
  if (!qword_256AAF4E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7190, &type metadata for AwardRemoteParticipantStatusMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF4E0);
  }
  return result;
}

unint64_t sub_23BDAEA4C()
{
  unint64_t result;

  result = qword_256AAF4E8;
  if (!qword_256AAF4E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7140, &type metadata for AwardRemoteParticipantStatusMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF4E8);
  }
  return result;
}

unint64_t sub_23BDAEA90()
{
  unint64_t result;

  result = qword_256AAF4F0;
  if (!qword_256AAF4F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD70F0, &type metadata for AwardRemoteParticipantStatusMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF4F0);
  }
  return result;
}

uint64_t AwardRemoteParticipantStatusMonitorAction.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t AwardRemoteParticipantStatusMonitorAction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF4F8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF500);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF508);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDAEA08();
  v11 = v33;
  sub_23BDCE0C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BDCDFA0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for AwardRemoteParticipantStatusMonitorAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BDAEA4C();
    sub_23BDCDF28();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BDAEA90();
    v22 = v6;
    sub_23BDCDF28();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23BDAEE70@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AwardRemoteParticipantStatusMonitorAction.init(from:)(a1, a2);
}

uint64_t sub_23BDAEE84(_QWORD *a1)
{
  return AwardRemoteParticipantStatusMonitorAction.encode(to:)(a1);
}

unint64_t sub_23BDAEE9C()
{
  unint64_t result;

  result = qword_256AAF510;
  if (!qword_256AAF510)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardRemoteParticipantStatusMonitorAction, &type metadata for AwardRemoteParticipantStatusMonitorAction);
    atomic_store(result, (unint64_t *)&qword_256AAF510);
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorAction()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorAction;
}

uint64_t _s13FitnessAwards41AwardRemoteParticipantStatusMonitorActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDAEF40 + 4 * byte_23BDD6E55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDAEF74 + 4 * byte_23BDD6E50[v4]))();
}

uint64_t sub_23BDAEF74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAEF7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDAEF84);
  return result;
}

uint64_t sub_23BDAEF90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDAEF98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDAEF9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDAEFA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorAction.CodingKeys()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorAction.ClearAwardStatesCodingKeys()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorAction.ClearAwardStatesCodingKeys;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BDAEFE4()
{
  unint64_t result;

  result = qword_256AAF518;
  if (!qword_256AAF518)
  {
    result = MEMORY[0x242611F78](&unk_23BDD70C8, &type metadata for AwardRemoteParticipantStatusMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF518);
  }
  return result;
}

unint64_t sub_23BDAF02C()
{
  unint64_t result;

  result = qword_256AAF520;
  if (!qword_256AAF520)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6FE8, &type metadata for AwardRemoteParticipantStatusMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF520);
  }
  return result;
}

unint64_t sub_23BDAF074()
{
  unint64_t result;

  result = qword_256AAF528;
  if (!qword_256AAF528)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7010, &type metadata for AwardRemoteParticipantStatusMonitorAction.ClearAwardStatesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF528);
  }
  return result;
}

unint64_t sub_23BDAF0BC()
{
  unint64_t result;

  result = qword_256AAF530;
  if (!qword_256AAF530)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6F98, &type metadata for AwardRemoteParticipantStatusMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF530);
  }
  return result;
}

unint64_t sub_23BDAF104()
{
  unint64_t result;

  result = qword_256AAF538;
  if (!qword_256AAF538)
  {
    result = MEMORY[0x242611F78](&unk_23BDD6FC0, &type metadata for AwardRemoteParticipantStatusMonitorAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF538);
  }
  return result;
}

unint64_t sub_23BDAF14C()
{
  unint64_t result;

  result = qword_256AAF540;
  if (!qword_256AAF540)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7038, &type metadata for AwardRemoteParticipantStatusMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF540);
  }
  return result;
}

unint64_t sub_23BDAF194()
{
  unint64_t result;

  result = qword_256AAF548;
  if (!qword_256AAF548)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7060, &type metadata for AwardRemoteParticipantStatusMonitorAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF548);
  }
  return result;
}

uint64_t sub_23BDAF1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_23BDCD838();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_23BDCD844();
}

uint64_t sub_23BDAF29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_23BDCD838();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_23BDCD844();
}

uint64_t sub_23BDAF360(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_23BDCDC7C();
  }
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_23BDCDC7C();
}

uint64_t sub_23BDAF514()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF5D8);
  sub_23BD5ED30(&qword_256AAF5E0, &qword_256AAF5D8, MEMORY[0x24BE2B5E8]);
  return sub_23BDCD694();
}

uint64_t AwardDetailView.init(store:awardHeaderViewBuilder:suggestedWorkoutsViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a7 = sub_23BD5AACC;
  *(_QWORD *)(a7 + 8) = result;
  *(_BYTE *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 24) = a3;
  *(_QWORD *)(a7 + 32) = a4;
  *(_QWORD *)(a7 + 40) = a5;
  *(_QWORD *)(a7 + 48) = a6;
  return result;
}

uint64_t sub_23BDAF600()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t AwardDetailView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t State;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int16 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[2];
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v75 = a1;
  v84 = a2;
  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  v83 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(a1 + 24);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  v73 = *(_QWORD *)(a1 + 16);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  v69 = v4;
  swift_getTupleTypeMetadata3();
  v5 = sub_23BDCDC70();
  v6 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v5);
  v7 = sub_23BDCDBE0();
  v8 = MEMORY[0x24BDF4700];
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v7);
  v9 = sub_23BDCD634();
  v10 = MEMORY[0x24BDEB238];
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v9);
  v11 = sub_23BDCD6DC();
  v12 = sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v13 = sub_23BDCDC70();
  MEMORY[0x242611F78](v6, v13);
  v14 = sub_23BDCDBE0();
  v15 = MEMORY[0x242611F78](v8, v14);
  v16 = sub_23BDCD634();
  v17 = sub_23BDCD850();
  v109[0] = MEMORY[0x242611F78](v10, v16);
  v109[1] = v15;
  v18 = MEMORY[0x24BDEF3E0];
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v17, v109);
  v19 = sub_23BDCD6DC();
  v20 = sub_23BDCD850();
  v21 = sub_23BDCDB68();
  v22 = sub_23BDCD700();
  v23 = MEMORY[0x24BDEC6F8];
  v108[0] = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v11);
  v108[1] = MEMORY[0x24BDF1050];
  v24 = MEMORY[0x24BDED308];
  v25 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v12, v108);
  v26 = MEMORY[0x242611F78](v23, v19);
  v107[0] = v25;
  v107[1] = v26;
  v106 = MEMORY[0x242611F78](v18, v20, v107);
  v67 = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v21, &v106);
  v105[0] = v67;
  v105[1] = MEMORY[0x24BDF0910];
  v27 = MEMORY[0x242611F78](v24, v22, v105);
  v28 = sub_23BD89EC4();
  *(_QWORD *)&v101 = v22;
  *((_QWORD *)&v101 + 1) = &type metadata for AwardSuggestedWorkoutsLoadState;
  v29 = v22;
  v68 = v22;
  *(_QWORD *)&v102 = v27;
  *((_QWORD *)&v102 + 1) = v28;
  v71 = v27;
  v30 = v28;
  v31 = MEMORY[0x24BDF3908];
  v32 = MEMORY[0x242611F18](0, &v101, MEMORY[0x24BDF3908], 0);
  v82 = *(_QWORD *)(v32 - 8);
  v33 = v32;
  v78 = v32;
  MEMORY[0x24BDAC7A8](v32);
  v72 = (char *)&v66 - v34;
  *(_QWORD *)&v101 = v29;
  *((_QWORD *)&v101 + 1) = &type metadata for AwardSuggestedWorkoutsLoadState;
  *(_QWORD *)&v102 = v27;
  *((_QWORD *)&v102 + 1) = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v77 = OpaqueTypeConformance2;
  v76 = sub_23BDAFE08();
  *(_QWORD *)&v101 = v33;
  *((_QWORD *)&v101 + 1) = State;
  *(_QWORD *)&v102 = OpaqueTypeConformance2;
  *((_QWORD *)&v102 + 1) = v76;
  v36 = MEMORY[0x242611F18](0, &v101, v31, 0);
  v37 = *(_QWORD *)(v36 - 8);
  v80 = v36;
  v81 = v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v70 = (char *)&v66 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v38);
  v79 = (uint64_t)&v66 - v40;
  v41 = v73;
  v42 = v74[1];
  v110 = *v74;
  v111 = v42;
  v112 = v74[2];
  v113 = *((_QWORD *)v74 + 6);
  v43 = v69;
  v86 = v73;
  v87 = v69;
  v45 = *(_QWORD *)(v75 + 40);
  v88 = *(_QWORD *)(v75 + 32);
  v44 = v88;
  v89 = v45;
  v90 = &v110;
  swift_checkMetadataState();
  sub_23BDCDB5C();
  v92 = v96;
  *(_QWORD *)&v93 = v97;
  WORD4(v93) = v98;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v41;
  *(_QWORD *)(v46 + 24) = v43;
  *(_QWORD *)(v46 + 32) = v44;
  *(_QWORD *)(v46 + 40) = v45;
  v47 = v111;
  *(_OWORD *)(v46 + 48) = v110;
  *(_OWORD *)(v46 + 64) = v47;
  *(_OWORD *)(v46 + 80) = v112;
  *(_QWORD *)(v46 + 96) = v113;
  sub_23BD657F0((uint64_t)&v110);
  swift_checkMetadataState();
  sub_23BDCDACC();
  swift_release();
  sub_23BD5E388();
  v96 = v101;
  v97 = v102;
  v98 = WORD4(v102);
  v99 = v103;
  v100 = v104;
  v92 = v110;
  v93 = v111;
  v94 = v112;
  v95 = v113;
  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v91 = v92;
  v48 = swift_allocObject();
  *(_QWORD *)(v48 + 16) = v41;
  *(_QWORD *)(v48 + 24) = v43;
  *(_QWORD *)(v48 + 32) = v44;
  *(_QWORD *)(v48 + 40) = v45;
  v49 = v111;
  *(_OWORD *)(v48 + 48) = v110;
  *(_OWORD *)(v48 + 64) = v49;
  *(_OWORD *)(v48 + 80) = v112;
  *(_QWORD *)(v48 + 96) = v113;
  sub_23BD657F0((uint64_t)&v110);
  swift_checkMetadataState();
  v50 = v72;
  sub_23BDCDAD8();
  swift_release();
  sub_23BD58AA8(v91);
  sub_23BD5E388();
  sub_23BDB1358(v99);
  sub_23BDB1358(v100);
  v101 = v110;
  v102 = v111;
  v103 = v112;
  *(_QWORD *)&v104 = v113;
  sub_23BDAF514();
  swift_getKeyPath();
  v51 = v83;
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = v41;
  *(_QWORD *)(v52 + 24) = v43;
  *(_QWORD *)(v52 + 32) = v44;
  *(_QWORD *)(v52 + 40) = v45;
  v53 = v111;
  *(_OWORD *)(v52 + 48) = v110;
  *(_OWORD *)(v52 + 64) = v53;
  *(_OWORD *)(v52 + 80) = v112;
  *(_QWORD *)(v52 + 96) = v113;
  sub_23BD657F0((uint64_t)&v110);
  v54 = v70;
  v55 = (uint64_t)v51;
  v57 = v77;
  v56 = v78;
  v58 = State;
  v59 = v76;
  sub_23BDCDAD8();
  swift_release();
  sub_23BD7BC00(v55);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v50, v56);
  *(_QWORD *)&v101 = v56;
  *((_QWORD *)&v101 + 1) = v58;
  *(_QWORD *)&v102 = v57;
  *((_QWORD *)&v102 + 1) = v59;
  swift_getOpaqueTypeConformance2();
  v60 = v79;
  v61 = v54;
  v62 = (uint64_t)v54;
  v63 = v80;
  sub_23BD6A300(v62, v80, v79);
  v64 = *(void (**)(char *, uint64_t))(v81 + 8);
  v64(v61, v63);
  sub_23BD6345C(v60, v63, v84);
  return ((uint64_t (*)(uint64_t, uint64_t))v64)(v60, v63);
}

unint64_t sub_23BDAFE08()
{
  unint64_t result;
  uint64_t State;

  result = qword_256AADC10;
  if (!qword_256AADC10)
  {
    State = type metadata accessor for AwardEarnedLoadState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardEarnedLoadState, State);
    atomic_store(result, (unint64_t *)&qword_256AADC10);
  }
  return result;
}

void sub_23BDAFE50()
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  type metadata accessor for AwardDetailView();
}

uint64_t sub_23BDAFEFC(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v10 = MEMORY[0x24BDF1050];
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v3;
  if (EnumCaseMultiPayload != 1)
  {
    sub_23BD7BC00((uint64_t)v2);
    goto LABEL_5;
  }
  if (*v2 != 1)
  {
LABEL_5:
    v34 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(v7 - 144) = *(_OWORD *)v5;
    *(_OWORD *)(v7 - 128) = v34;
    *(_OWORD *)(v7 - 112) = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(v7 - 96) = *(_QWORD *)(v5 + 48);
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v4;
    *(_QWORD *)(v35 + 24) = v3;
    v36 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v35 + 32) = v6;
    *(_QWORD *)(v35 + 40) = v36;
    v37 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(v35 + 48) = *(_OWORD *)v5;
    *(_OWORD *)(v35 + 64) = v37;
    *(_OWORD *)(v35 + 80) = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(v35 + 96) = *(_QWORD *)(v5 + 48);
    sub_23BD657F0(v5);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
    swift_getTupleTypeMetadata3();
    v38 = sub_23BDCDC70();
    MEMORY[0x242611F78](MEMORY[0x24BDF5428], v38);
    v39 = sub_23BDCDBE0();
    v40 = MEMORY[0x242611F78](MEMORY[0x24BDF4700], v39);
    sub_23BDB0E7C((uint64_t)sub_23BDB27D4, v35, a1, v39, v40, v1 + 112);
    swift_release();
    v41 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v7 - 144) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v7 - 136) = v41;
    v42 = sub_23BDCD634();
    v43 = sub_23BDCD850();
    v44 = MEMORY[0x24BDEB238];
    *(_QWORD *)(v7 - 192) = MEMORY[0x242611F78](MEMORY[0x24BDEB238], v42);
    *(_QWORD *)(v7 - 184) = v40;
    MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v43, v7 - 192);
    v45 = sub_23BDCD6DC();
    v46 = MEMORY[0x24BDEC6F8];
    MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v45);
    sub_23BD6A300(v7 - 144, v45, v7 - 176);
    swift_release();
    v47 = *(_QWORD *)(v7 - 168);
    *(_QWORD *)(v7 - 144) = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 136) = v47;
    sub_23BD6345C(v7 - 144, v45, v1 + 112);
    v48 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 64) = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 72) = v48;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
    sub_23BDCD850();
    swift_getTupleTypeMetadata3();
    v49 = sub_23BDCDC70();
    MEMORY[0x242611F78](MEMORY[0x24BDF5428], v49);
    v50 = sub_23BDCDBE0();
    MEMORY[0x242611F78](MEMORY[0x24BDF4700], v50);
    v51 = sub_23BDCD634();
    MEMORY[0x242611F78](v44, v51);
    v52 = sub_23BDCD6DC();
    v53 = sub_23BDCD700();
    *(_QWORD *)(v1 + 192) = MEMORY[0x242611F78](v46, v52);
    *(_QWORD *)(v1 + 200) = MEMORY[0x24BDF1050];
    MEMORY[0x242611F78](MEMORY[0x24BDED308], v53, v1 + 192);
    sub_23BDAF29C(v1 + 64, v53, v45);
    swift_release();
    goto LABEL_6;
  }
  v11 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v7 - 144) = *(_OWORD *)v5;
  *(_OWORD *)(v7 - 128) = v11;
  *(_OWORD *)(v7 - 112) = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v7 - 96) = *(_QWORD *)(v5 + 48);
  sub_23BDB07A4(a1, v1 + 112);
  v12 = *(_QWORD *)(v1 + 120);
  v13 = *(_QWORD *)(v1 + 128);
  v14 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v7 - 136) = v12;
  *(_QWORD *)(v7 - 128) = v13;
  *(_BYTE *)(v7 - 120) = v14;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v15 = sub_23BDCDC70();
  v16 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v15);
  v17 = sub_23BDCDBE0();
  v18 = MEMORY[0x24BDF4700];
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v17);
  v19 = sub_23BDCD634();
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v19);
  v20 = sub_23BDCD6DC();
  v21 = sub_23BDCD700();
  *(_QWORD *)(v1 + 96) = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v20);
  *(_QWORD *)(v1 + 104) = v10;
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v21, v1 + 96);
  sub_23BD6A300(v7 - 144, v21, v7 - 176);
  swift_release();
  v22 = *(_QWORD *)(v7 - 168);
  v23 = *(_QWORD *)(v7 - 160);
  v24 = *(_BYTE *)(v7 - 152);
  *(_QWORD *)(v7 - 144) = *(_QWORD *)(v7 - 176);
  *(_QWORD *)(v7 - 136) = v22;
  *(_QWORD *)(v7 - 128) = v23;
  *(_BYTE *)(v7 - 120) = v24;
  sub_23BD6345C(v7 - 144, v21, v1 + 112);
  v25 = *(_QWORD *)(v1 + 120);
  v26 = *(_QWORD *)(v1 + 128);
  v27 = *(_BYTE *)(v1 + 136);
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 72) = v25;
  *(_QWORD *)(v1 + 80) = v26;
  *(_BYTE *)(v1 + 88) = v27;
  swift_getTupleTypeMetadata3();
  v28 = sub_23BDCDC70();
  MEMORY[0x242611F78](v16, v28);
  v29 = sub_23BDCDBE0();
  v30 = MEMORY[0x242611F78](v18, v29);
  v31 = sub_23BDCD634();
  v32 = sub_23BDCD850();
  *(_QWORD *)(v1 + 48) = MEMORY[0x242611F78](MEMORY[0x24BDEB238], v31);
  *(_QWORD *)(v1 + 56) = v30;
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v32, v1 + 48);
  v33 = sub_23BDCD6DC();
  MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v33);
  sub_23BDAF1D8(v1 + 64, v21);
  swift_release();
LABEL_6:
  swift_release();
  v54 = *(_QWORD *)(v7 - 144);
  v55 = *(_QWORD *)(v7 - 136);
  v56 = *(_QWORD *)(v7 - 128);
  v57 = *(_BYTE *)(v7 - 120);
  v58 = *(_BYTE *)(v7 - 119);
  *(_QWORD *)v1 = v55;
  *(_QWORD *)(v1 + 8) = v56;
  *(_QWORD *)(v1 + 16) = v54;
  *(_QWORD *)(v7 - 144) = v54;
  *(_QWORD *)(v7 - 136) = v55;
  *(_QWORD *)(v7 - 128) = v56;
  *(_BYTE *)(v7 - 120) = v57;
  *(_BYTE *)(v7 - 119) = v58;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v59 = sub_23BDCDC70();
  v60 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v59);
  v61 = sub_23BDCDBE0();
  v62 = MEMORY[0x24BDF4700];
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v61);
  v63 = sub_23BDCD634();
  v64 = MEMORY[0x24BDEB238];
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v63);
  v65 = sub_23BDCD6DC();
  v66 = sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v67 = sub_23BDCDC70();
  MEMORY[0x242611F78](v60, v67);
  v68 = sub_23BDCDBE0();
  v69 = MEMORY[0x242611F78](v62, v68);
  v70 = sub_23BDCD634();
  v71 = sub_23BDCD850();
  *(_QWORD *)(v1 + 176) = MEMORY[0x242611F78](v64, v70);
  *(_QWORD *)(v1 + 184) = v69;
  v72 = MEMORY[0x24BDEF3E0];
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v71, v1 + 176);
  v73 = sub_23BDCD6DC();
  v74 = sub_23BDCD850();
  v75 = MEMORY[0x24BDEC6F8];
  *(_QWORD *)(v1 + 160) = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v65);
  *(_QWORD *)(v1 + 168) = MEMORY[0x24BDF1050];
  v76 = MEMORY[0x242611F78](MEMORY[0x24BDED308], v66, v1 + 160);
  v77 = MEMORY[0x242611F78](v75, v73);
  *(_QWORD *)(v1 + 144) = v76;
  *(_QWORD *)(v1 + 152) = v77;
  MEMORY[0x242611F78](v72, v74, v1 + 144);
  sub_23BD6345C(v7 - 144, v74, *(_QWORD *)(v1 + 40));
  return sub_23BD5E388();
}

void sub_23BDB0794()
{
  sub_23BDAFE50();
}

uint64_t sub_23BDB07A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v5 = v2[1];
  v27 = *v2;
  v28 = v5;
  v29 = v2[2];
  v30 = *((_QWORD *)v2 + 6);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a1 + 40);
  v7 = v2[1];
  *(_OWORD *)(v6 + 48) = *v2;
  *(_OWORD *)(v6 + 64) = v7;
  *(_OWORD *)(v6 + 80) = v2[2];
  *(_QWORD *)(v6 + 96) = *((_QWORD *)v2 + 6);
  sub_23BD657F0((uint64_t)&v27);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v8 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v8);
  v9 = sub_23BDCDBE0();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v9);
  v10 = sub_23BDCD634();
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v10);
  *(_QWORD *)&v17 = sub_23BDCD6D0();
  *((_QWORD *)&v17 + 1) = v11;
  v20 = v27;
  v21 = v28;
  v22 = v29;
  v23 = v30;
  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  if (v20 == 1)
    sub_23BDCD8C8();
  else
    sub_23BDCD8D4();
  sub_23BDCD70C();
  v12 = sub_23BDCD6DC();
  v13 = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v12);
  sub_23BDCDA54();
  swift_release();
  v17 = v24;
  v18 = v25;
  v19 = v26;
  v14 = sub_23BDCD700();
  v16[0] = v13;
  v16[1] = MEMORY[0x24BDF1050];
  MEMORY[0x242611F78](MEMORY[0x24BDED308], v14, v16);
  sub_23BD6A300((uint64_t)&v17, v14, (uint64_t)&v20);
  swift_release();
  v24 = v20;
  v25 = v21;
  v26 = BYTE8(v21);
  sub_23BD6345C((uint64_t)&v24, v14, a2);
  return swift_release();
}

uint64_t sub_23BDB0A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = a5;
  v23 = a6;
  v24 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v12 = sub_23BDCDBE0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v21 - v17;
  v25 = a3;
  v26 = a4;
  v27 = v22;
  v28 = v23;
  v29 = a1;
  v30 = a2;
  sub_23BDCD820();
  sub_23BDCDBD4();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v12);
  sub_23BD6A300((uint64_t)v16, v12, (uint64_t)v18);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v16, v12);
  sub_23BD6345C((uint64_t)v18, v12, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, v12);
}

uint64_t sub_23BDB0C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[4];
  unsigned __int8 v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;

  v29 = a4;
  v31 = a5;
  v22 = *(_QWORD *)(a3 - 8);
  v7 = v22;
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v22 - v11;
  sub_23BDCD6C4();
  sub_23BDCDC58();
  v13 = sub_23BDCD6B8();
  v28 = v52[3];
  v27 = v53;
  v26 = v54;
  v25 = v55;
  v23 = v57;
  v24 = v56;
  (*(void (**)(uint64_t))(a2 + 24))(v13);
  v14 = v12;
  sub_23BD6A300((uint64_t)v10, a3, (uint64_t)v12);
  v30 = *(void (**)(char *, uint64_t))(v7 + 8);
  v30(v10, a3);
  sub_23BDCD6C4();
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v15 = v58;
  v16 = v59;
  v17 = v60;
  LOBYTE(v12) = v61;
  v19 = v62;
  v18 = v63;
  v44 = 0;
  v45 = 1;
  v46 = v28;
  v47 = v27;
  v48 = v26;
  v49 = v25;
  v50 = v24;
  v51 = v23;
  v52[0] = (uint64_t)&v44;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v10, v14, a3);
  v36 = 0;
  v37 = 1;
  v38 = v15;
  v39 = v16;
  v40 = v17;
  v41 = (char)v12;
  v42 = v19;
  v43 = v18;
  v52[1] = (uint64_t)v10;
  v52[2] = (uint64_t)&v36;
  v35[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
  v35[1] = a3;
  v35[2] = v35[0];
  v32 = sub_23BD69FC8();
  v33 = v29;
  v34 = v32;
  sub_23BDAF360(v52, 3uLL, (uint64_t)v35);
  v20 = (uint64_t (*)(char *, uint64_t))v30;
  v30(v14, a3);
  return v20(v10, a3);
}

uint64_t sub_23BDB0E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[2];
  _OWORD v26[3];
  uint64_t v27;

  v13 = *(_OWORD *)(v6 + 16);
  v26[0] = *(_OWORD *)v6;
  v26[1] = v13;
  v26[2] = *(_OWORD *)(v6 + 32);
  v27 = *(_QWORD *)(v6 + 48);
  v14 = swift_allocObject();
  v15 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v14 + 32) = a4;
  *(_OWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 56) = a5;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)(v14 + 64) = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 80) = v16;
  *(_OWORD *)(v14 + 96) = *(_OWORD *)(v6 + 32);
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v14 + 120) = a1;
  *(_QWORD *)(v14 + 128) = a2;
  sub_23BD657F0((uint64_t)v26);
  v17 = sub_23BDCD634();
  v18 = sub_23BDCD850();
  swift_retain();
  v24[0] = MEMORY[0x242611F78](MEMORY[0x24BDEB238], v17);
  v24[1] = a5;
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v18, v24);
  v22 = sub_23BDCD6D0();
  v23 = v19;
  v20 = sub_23BDCD6DC();
  MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v20);
  sub_23BD6A300((uint64_t)&v22, v20, (uint64_t)v25);
  swift_release();
  v22 = v25[0];
  v23 = v25[1];
  sub_23BD6345C((uint64_t)&v22, v20, a6);
  return swift_release();
}

void sub_23BDB1018()
{
  type metadata accessor for AwardDetailView();
}

uint64_t sub_23BDB1054()
{
  sub_23BDAF514();
  sub_23BDCDCDC();
  return swift_release();
}

uint64_t sub_23BDB108C()
{
  return sub_23BDB167C((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1018);
}

void sub_23BDB1098()
{
  type metadata accessor for AwardDetailView();
}

unint64_t sub_23BDB10E8()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  result = sub_23BD58AA8(v10);
  if ((unint64_t)v10 >= 2)
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v2 = sub_23BDCD628();
    __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
    sub_23BD657F0(v0);
    sub_23BD657F0(v0);
    v3 = sub_23BDCD610();
    v4 = sub_23BDCDE38();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v9 = v6;
      *(_DWORD *)v5 = 136315138;
      v7 = *(_OWORD *)(v0 + 16);
      v10 = *(_OWORD *)v0;
      v11 = v7;
      v12 = *(_OWORD *)(v0 + 32);
      v13 = *(_QWORD *)(v0 + 48);
      sub_23BDAF514();
      swift_getKeyPath();
      sub_23BDCDCD0();
      swift_release();
      swift_release();
      *(_QWORD *)&v10 = sub_23BD6E4F0(v10, *((unint64_t *)&v10 + 1), &v9);
      sub_23BDCDE5C();
      swift_bridgeObjectRelease();
      sub_23BDB2780(v0);
      sub_23BDB2780(v0);
      _os_log_impl(&dword_23BD56000, v3, v4, "[AwardDetailView] Suggested workouts updated for %s, requesting refresh", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v6, -1, -1);
      MEMORY[0x242611FFC](v5, -1, -1);
    }
    else
    {
      sub_23BDB2780(v0);
      sub_23BDB2780(v0);
    }

    v8 = *(_OWORD *)(v0 + 16);
    v10 = *(_OWORD *)v0;
    v11 = v8;
    v12 = *(_OWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 48);
    sub_23BDAF514();
    LOBYTE(v10) = 5;
    sub_23BDCDCDC();
    return swift_release();
  }
  return result;
}

uint64_t sub_23BDB134C()
{
  return sub_23BDB167C((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1098);
}

uint64_t sub_23BDB1358(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

void sub_23BDB1368()
{
  uint64_t State;

  State = type metadata accessor for AwardEarnedLoadState();
  MEMORY[0x24BDAC7A8](State);
  type metadata accessor for AwardDetailView();
}

uint64_t sub_23BDB1400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = sub_23BD7BC00(v1);
  if (EnumCaseMultiPayload == 2)
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v5 = sub_23BDCD628();
    __swift_project_value_buffer(v5, (uint64_t)qword_256AAF4B0);
    sub_23BD657F0(v0);
    sub_23BD657F0(v0);
    v6 = sub_23BDCD610();
    v7 = sub_23BDCDE38();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_QWORD *)(v2 - 176) = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v2 - 144) = *(_OWORD *)v0;
      *(_OWORD *)(v2 - 128) = v10;
      *(_OWORD *)(v2 - 112) = *(_OWORD *)(v0 + 32);
      *(_QWORD *)(v2 - 96) = *(_QWORD *)(v0 + 48);
      sub_23BDAF514();
      swift_getKeyPath();
      sub_23BDCDCD0();
      swift_release();
      swift_release();
      *(_QWORD *)(v2 - 144) = sub_23BD6E4F0(*(_QWORD *)(v2 - 144), *(_QWORD *)(v2 - 136), (uint64_t *)(v2 - 176));
      sub_23BDCDE5C();
      swift_bridgeObjectRelease();
      sub_23BDB2780(v0);
      sub_23BDB2780(v0);
      _os_log_impl(&dword_23BD56000, v6, v7, "[AwardDetailView] Load state was reset to idle for  %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242611FFC](v9, -1, -1);
      MEMORY[0x242611FFC](v8, -1, -1);
    }
    else
    {
      sub_23BDB2780(v0);
      sub_23BDB2780(v0);
    }

    v11 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v2 - 144) = *(_OWORD *)v0;
    *(_OWORD *)(v2 - 128) = v11;
    *(_OWORD *)(v2 - 112) = *(_OWORD *)(v0 + 32);
    *(_QWORD *)(v2 - 96) = *(_QWORD *)(v0 + 48);
    sub_23BDAF514();
    *(_BYTE *)(v2 - 144) = 2;
    sub_23BDCDCDC();
    return swift_release();
  }
  return result;
}

uint64_t sub_23BDB1670()
{
  return sub_23BDB167C((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1368);
}

uint64_t sub_23BDB167C(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_23BDB1690()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23BDB16C4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v24 = a3;
  v25 = a4;
  v28 = a9;
  v22 = a10;
  v23 = a1;
  v21[0] = *(_QWORD *)(a7 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v14);
  v21[1] = (char *)v21 - v15;
  v16 = sub_23BDCD634();
  v21[3] = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  MEMORY[0x24BDAC7A8](v17);
  v21[4] = (char *)v21 - v18;
  v19 = sub_23BDCD850();
  v26 = *(_QWORD *)(v19 - 8);
  v27 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v20 = a2[1];
  v33 = *a2;
  v34 = v20;
  v35 = a2[2];
  v36 = *((_QWORD *)a2 + 6);
  v21[2] = a5;
  v29 = a5;
  v30 = a6;
  v21[5] = a6;
  v21[6] = a8;
  v31 = a8;
  v32 = v22;
  type metadata accessor for AwardDetailView();
}

uint64_t sub_23BDB184C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v6 - 143) == 1)
  {
    v7 = sub_23BDCD8B0();
    MEMORY[0x24BDAC7A8](v7);
    sub_23BDCD640();
    MEMORY[0x242611F78](MEMORY[0x24BDEB238], v2);
    v8 = *(_QWORD *)(v6 - 272);
    sub_23BD6A300(v4, v2, v8);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 280) + 8);
    v9(v4, v2);
    sub_23BD6345C(v8, v2, v4);
    sub_23BDAF1D8(v4, v2);
    v9(v4, v2);
    v10 = v8;
    v11 = v2;
  }
  else
  {
    (*(void (**)(_QWORD))(v6 - 232))(*(_QWORD *)(v6 - 240));
    v12 = *(_QWORD *)(v6 - 296);
    sub_23BD6A300(v5, v1, v12);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 304) + 8);
    v9(v5, v1);
    sub_23BD6345C(v12, v1, v5);
    MEMORY[0x242611F78](MEMORY[0x24BDEB238], v2);
    sub_23BDAF29C(v5, v2, v1);
    v9(v5, v1);
    v10 = v12;
    v11 = v1;
  }
  v9(v10, v11);
  *(_QWORD *)(v6 - 192) = MEMORY[0x242611F78](MEMORY[0x24BDEB238], v2);
  *(_QWORD *)(v6 - 184) = v0;
  v13 = *(_QWORD *)(v6 - 208);
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v13, v6 - 192);
  sub_23BD6345C(v3, v13, *(_QWORD *)(v6 - 200));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 216) + 8))(v3, v13);
}

uint64_t sub_23BDB1AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - v9;
  v12(v11);
  sub_23BD6A300((uint64_t)v8, a2, (uint64_t)v10);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, a2);
  sub_23BD6345C((uint64_t)v10, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v13)(v10, a2);
}

uint64_t sub_23BDB1B84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = a5;
  v24 = a6;
  v25 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v12 = sub_23BDCDBE0();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v12);
  v13 = sub_23BDCD634();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v22 - v18;
  sub_23BDCD8B0();
  v26 = a3;
  v27 = a4;
  v28 = v23;
  v29 = v24;
  v30 = a2;
  v31 = a1;
  sub_23BDCD640();
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v13);
  sub_23BD6A300((uint64_t)v17, v13, (uint64_t)v19);
  v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v17, v13);
  sub_23BD6345C((uint64_t)v19, v13, v25);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v13);
}

uint64_t sub_23BDB1D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v22 = a5;
  v23 = a6;
  v24 = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v11 = sub_23BDCDC70();
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v11);
  v12 = sub_23BDCDBE0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v21 - v17;
  v25 = a3;
  v26 = a4;
  v27 = v22;
  v28 = v23;
  v29 = a1;
  v30 = a2;
  sub_23BDCD820();
  sub_23BDCDBD4();
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v12);
  sub_23BD6A300((uint64_t)v16, v12, (uint64_t)v18);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v16, v12);
  sub_23BD6345C((uint64_t)v18, v12, v24);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, v12);
}

void sub_23BDB1F0C(void (**a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  __int128 v32;
  _QWORD v33[13];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v40 = a5;
  v33[1] = a2;
  v36 = a7;
  v33[4] = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v11);
  v33[7] = (char *)v33 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD028);
  v33[5] = *(_QWORD *)(v13 - 8);
  v33[6] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v33[3] = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(qword_256AAF550);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v33[0] = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v33[2] = (char *)v33 - v18;
  v33[9] = v19;
  v34 = sub_23BDCD850();
  v38 = *(_QWORD *)(v34 - 8);
  v20 = MEMORY[0x24BDAC7A8](v34);
  v33[12] = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v39 = (char *)v33 - v23;
  v24 = *(_QWORD *)(a4 - 8);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v33 - v29;
  a1[3](v28);
  v37 = v30;
  sub_23BD6A300((uint64_t)v27, a4, (uint64_t)v30);
  v31 = *(void (**)(char *, uint64_t))(v24 + 8);
  v33[10] = v24;
  v33[11] = v31;
  v31(v27, a4);
  v32 = *((_OWORD *)a1 + 1);
  v41 = *(_OWORD *)a1;
  v42 = v32;
  v43 = *((_OWORD *)a1 + 2);
  v44 = a1[6];
  v45 = a3;
  v46 = a4;
  v47 = v40;
  v48 = a6;
  v35 = a6;
  type metadata accessor for AwardDetailView();
}

uint64_t sub_23BDB2160()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);

  sub_23BDAF514();
  swift_getKeyPath();
  sub_23BDCDCD0();
  swift_release();
  swift_release();
  v7 = v0[28];
  if (v7 >= 2)
  {
    v16 = sub_23BD58AA8(v7);
    (*(void (**)(unint64_t))(v5 + 40))(v16);
    v17 = v0[7];
    sub_23BD6A300(v3, v1, v17);
    v18 = *(void (**)(uint64_t, uint64_t))(v0[4] + 8);
    v18(v3, v1);
    sub_23BD6345C(v17, v1, v3);
    sub_23BDB2830();
    sub_23BDAF29C(v3, v0[9], v1);
    v18(v3, v1);
    v18(v17, v1);
  }
  else
  {
    v8 = v0[3];
    sub_23BDCD6AC();
    sub_23BDCD6C4();
    sub_23BDCDC58();
    sub_23BDCD6B8();
    v10 = v0[5];
    v9 = v0[6];
    v11 = *v0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(*v0, v8, v9);
    v12 = v0[9];
    v13 = (_OWORD *)(v11 + *(int *)(v12 + 36));
    v14 = *(_OWORD *)(v6 - 168);
    *v13 = *(_OWORD *)(v6 - 184);
    v13[1] = v14;
    v13[2] = *(_OWORD *)(v6 - 152);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v15 = v0[2];
    sub_23BDB28B4(v11, v15);
    sub_23BDB2830();
    sub_23BDAF1D8(v15, v12);
    sub_23BDB28FC(v15);
  }
  sub_23BDCDC58();
  sub_23BDCD6B8();
  v19 = *(_QWORD *)(v6 - 136);
  v20 = *(_BYTE *)(v6 - 128);
  v21 = *(_QWORD *)(v6 - 120);
  v22 = *(_BYTE *)(v6 - 112);
  v24 = *(_QWORD *)(v6 - 104);
  v23 = *(_QWORD *)(v6 - 96);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 16);
  v0[8] = v2;
  v25(v2, v0[16], v4);
  *(_QWORD *)(v6 - 208) = v2;
  v27 = v0[12];
  v26 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[17] + 16))(v27, v0[18], v26);
  v0[28] = 0;
  *((_BYTE *)v0 + 232) = 1;
  v0[30] = v19;
  *((_BYTE *)v0 + 248) = v20;
  v0[32] = v21;
  *((_BYTE *)v0 + 264) = v22;
  v0[34] = v24;
  v0[35] = v23;
  *(_QWORD *)(v6 - 200) = v27;
  *(_QWORD *)(v6 - 192) = v0 + 28;
  v0[25] = v4;
  v0[26] = v26;
  v0[27] = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD368);
  v0[22] = v0[14];
  v28 = sub_23BDB2830();
  v29 = v0[19];
  v0[20] = v28;
  v0[21] = v29;
  v0[23] = MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v26, v0 + 20);
  v0[24] = sub_23BD69FC8();
  sub_23BDAF360((uint64_t *)(v6 - 208), 3uLL, (uint64_t)(v0 + 25));
  v30 = *(void (**)(uint64_t, uint64_t))(v0[17] + 8);
  v30(v0[18], v26);
  v31 = (void (*)(uint64_t, uint64_t))v0[11];
  v31(v0[16], v4);
  v30(v27, v26);
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v0[8], v4);
}

void type metadata accessor for AwardDetailView()
{
  JUMPOUT(0x242611EDCLL);
}

uint64_t sub_23BDB244C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t State;
  uint64_t OpaqueTypeConformance2;
  unint64_t v25;
  uint64_t v27;
  ValueMetadata *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
  sub_23BDCD850();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256AAD368);
  swift_getTupleTypeMetadata3();
  v0 = sub_23BDCDC70();
  v1 = MEMORY[0x24BDF5428];
  MEMORY[0x242611F78](MEMORY[0x24BDF5428], v0);
  v2 = sub_23BDCDBE0();
  v3 = MEMORY[0x24BDF4700];
  MEMORY[0x242611F78](MEMORY[0x24BDF4700], v2);
  v4 = sub_23BDCD634();
  v5 = MEMORY[0x24BDEB238];
  MEMORY[0x242611F78](MEMORY[0x24BDEB238], v4);
  v6 = sub_23BDCD6DC();
  v7 = sub_23BDCD700();
  swift_getTupleTypeMetadata3();
  v8 = sub_23BDCDC70();
  MEMORY[0x242611F78](v1, v8);
  v9 = sub_23BDCDBE0();
  v10 = MEMORY[0x242611F78](v3, v9);
  v11 = sub_23BDCD634();
  v12 = sub_23BDCD850();
  v35[0] = MEMORY[0x242611F78](v5, v11);
  v35[1] = v10;
  v13 = MEMORY[0x24BDEF3E0];
  MEMORY[0x242611F78](MEMORY[0x24BDEF3E0], v12, v35);
  v14 = sub_23BDCD6DC();
  v15 = sub_23BDCD850();
  v16 = sub_23BDCDB68();
  v17 = sub_23BDCD700();
  v18 = MEMORY[0x24BDEC6F8];
  v34[0] = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v6);
  v34[1] = MEMORY[0x24BDF1050];
  v19 = MEMORY[0x24BDED308];
  v33[0] = MEMORY[0x242611F78](MEMORY[0x24BDED308], v7, v34);
  v33[1] = MEMORY[0x242611F78](v18, v14);
  v32 = MEMORY[0x242611F78](v13, v15, v33);
  v31[0] = MEMORY[0x242611F78](MEMORY[0x24BDF3F50], v16, &v32);
  v31[1] = MEMORY[0x24BDF0910];
  v20 = MEMORY[0x242611F78](v19, v17, v31);
  v21 = sub_23BD89EC4();
  v27 = v17;
  v28 = &type metadata for AwardSuggestedWorkoutsLoadState;
  v29 = v20;
  v30 = v21;
  v22 = MEMORY[0x242611F18](255, &v27, MEMORY[0x24BDF3908], 0);
  State = type metadata accessor for AwardEarnedLoadState();
  v27 = v17;
  v28 = &type metadata for AwardSuggestedWorkoutsLoadState;
  v29 = v20;
  v30 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v25 = sub_23BDAFE08();
  v27 = v22;
  v28 = (ValueMetadata *)State;
  v29 = OpaqueTypeConformance2;
  v30 = v25;
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BDB2780(uint64_t a1)
{
  sub_23BD5E388();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BDB27D4(uint64_t a1)
{
  return sub_23BDB27F0(a1, (uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB0A8C);
}

uint64_t sub_23BDB27E4(uint64_t a1)
{
  return sub_23BDB27F0(a1, (uint64_t (*)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1B84);
}

uint64_t sub_23BDB27F0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2 + 6, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_23BDB2804()
{
  return sub_23BDB281C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1D58);
}

uint64_t sub_23BDB2810()
{
  return sub_23BDB281C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23BDB1F0C);
}

uint64_t sub_23BDB281C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_23BDB2830()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256AAF5E8;
  if (!qword_256AAF5E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256AAF550);
    v2[0] = sub_23BD5ED30(&qword_256AAD030, &qword_256AAD028, MEMORY[0x24BDEBC00]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242611F78](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256AAF5E8);
  }
  return result;
}

uint64_t sub_23BDB28B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_256AAF550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDB28FC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_256AAF550);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BDB293C()
{
  sub_23BD5E388();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23BDB297C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_23BDB16C4(a1, (__int128 *)(v2 + 64), *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2, *(_QWORD *)(v2 + 48));
}

uint64_t sub_23BDB29B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23BDB1AA4(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_23BDB29E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23BDB0C20(v1[6], v1[7], v1[3], v1[5], a1);
}

uint64_t sub_23BDB29F4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF5F0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23BDCD964();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  v9 = v0[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, **((unsigned int **)&unk_250CDA830 + v8), v4);
  v10 = sub_23BDCD8EC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v3, 1, 1, v10);
  if ((v9 & 1) != 0)
    sub_23BDCD904();
  else
    sub_23BDCD8F8();
  v11 = sub_23BDCD910();
  sub_23BDB2B20((uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

uint64_t sub_23BDB2B20(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF5F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AwardToastPresentationEnvironment.fetchImageData.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.fetchAwardDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.fetchAwardCandidateIdentifiers.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.fetchPersonalizedAwardProgressUpdates.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.fetchWeeklyStreakNotification.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.fetchUserFirstName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.makeAppDidBecomeActiveStream.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.requestToastPresentation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_retain();
  return v1;
}

uint64_t AwardToastPresentationEnvironment.queryEligibleToPresentAwardToast.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_retain();
  return v1;
}

__n128 AwardToastPresentationEnvironment.init(fetchImageData:fetchAwardDescription:fetchAwardCandidateIdentifiers:fetchPersonalizedAwardProgressUpdates:fetchWeeklyStreakNotification:fetchUserFirstName:makeAppDidBecomeActiveStream:requestToastPresentation:queryEligibleToPresentAwardToast:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __int128 a12, __n128 a13, uint64_t a14, uint64_t a15)
{
  __n128 result;

  result = a13;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_OWORD *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 80) = a11;
  *(_OWORD *)(a9 + 96) = a12;
  *(__n128 *)(a9 + 112) = a13;
  *(_QWORD *)(a9 + 128) = a14;
  *(_QWORD *)(a9 + 136) = a15;
  return result;
}

uint64_t destroy for AwardToastPresentationEnvironment()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AwardToastPresentationEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v3 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for AwardToastPresentationEnvironment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_retain();
  swift_release();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_retain();
  swift_release();
  v10 = a2[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_retain();
  swift_release();
  v11 = a2[15];
  a1[14] = a2[14];
  a1[15] = v11;
  swift_retain();
  swift_release();
  v12 = a2[17];
  a1[16] = a2[16];
  a1[17] = v12;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

_OWORD *assignWithTake for AwardToastPresentationEnvironment(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  a1[6] = a2[6];
  swift_release();
  a1[7] = a2[7];
  swift_release();
  a1[8] = a2[8];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationEnvironment()
{
  return &type metadata for AwardToastPresentationEnvironment;
}

uint64_t AchievementEnvironmentCacheMonitorState.earnedLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AchievementEnvironmentCacheMonitorState.earnedLoadStates.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AchievementEnvironmentCacheMonitorState.earnedLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AchievementEnvironmentCacheMonitorState.imageLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AchievementEnvironmentCacheMonitorState.imageLoadStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AchievementEnvironmentCacheMonitorState.imageLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AchievementEnvironmentCacheMonitorState.progressLoadStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AchievementEnvironmentCacheMonitorState.progressLoadStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*AchievementEnvironmentCacheMonitorState.progressLoadStates.modify())()
{
  return nullsub_1;
}

uint64_t AchievementEnvironmentCacheMonitorState.suggestedWorkoutsStates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AchievementEnvironmentCacheMonitorState.suggestedWorkoutsStates.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*AchievementEnvironmentCacheMonitorState.suggestedWorkoutsStates.modify())()
{
  return nullsub_1;
}

uint64_t AchievementEnvironmentCacheMonitorState.toastLoadState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for AchievementEnvironmentCacheMonitorState();
  return sub_23BD594E4(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
}

uint64_t type metadata accessor for AchievementEnvironmentCacheMonitorState()
{
  uint64_t result;

  result = qword_256AAF668;
  if (!qword_256AAF668)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AchievementEnvironmentCacheMonitorState.toastLoadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AchievementEnvironmentCacheMonitorState() + 32);
  return sub_23BD9F420(a1, v3);
}

uint64_t (*AchievementEnvironmentCacheMonitorState.toastLoadState.modify())()
{
  type metadata accessor for AchievementEnvironmentCacheMonitorState();
  return nullsub_1;
}

uint64_t AchievementEnvironmentCacheMonitorState.init(earnedLoadStates:imageLoadStates:progressLoadStates:suggestedWorkoutsStates:toastLoadState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;

  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  v7 = (uint64_t)a6 + *(int *)(type metadata accessor for AchievementEnvironmentCacheMonitorState() + 32);
  return sub_23BD9F4C8(a5, v7);
}

uint64_t AchievementEnvironmentCacheMonitorState.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t State;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[6];

  v3 = sub_23BDCD58C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v9 = (_QWORD *)((char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *v1;
  swift_bridgeObjectRetain();
  sub_23BD93DC0(a1, v10);
  swift_bridgeObjectRelease();
  v11 = v1[1];
  swift_bridgeObjectRetain();
  sub_23BD9369C((uint64_t)a1, v11);
  swift_bridgeObjectRelease();
  v12 = v1[2];
  swift_bridgeObjectRetain();
  sub_23BD93174(a1, v12);
  swift_bridgeObjectRelease();
  v13 = v1[3];
  swift_bridgeObjectRetain();
  sub_23BD92CCC((uint64_t)a1, v13);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for AchievementEnvironmentCacheMonitorState();
  sub_23BD594E4((uint64_t)v1 + *(int *)(v14 + 32), (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v16 = *v9;
      v17 = v9[1];
      v18 = v9[2];
      v19 = v9[3];
      v21 = v9[4];
      v20 = v9[5];
      sub_23BDCE090();
      v23[0] = v16;
      v23[1] = v17;
      v23[2] = v18;
      v23[3] = v19;
      v23[4] = v21;
      v23[5] = v20;
      AwardToastDetail.hash(into:)((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return sub_23BDCE090();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23BDCE090();
    sub_23BD6B5DC(&qword_256AAD4E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_23BDCDCF4();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_23BDB3554(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDB358C
                                                                     + 4 * asc_23BDD7340[a1]))(0xD000000000000010, 0x800000023BDDA780);
}

uint64_t sub_23BDB358C()
{
  return 0x616F4C6567616D69;
}

uint64_t sub_23BDB35B0(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_23BDB35D8()
{
  return 0x616F4C7473616F74;
}

uint64_t sub_23BDB35FC()
{
  unsigned __int8 *v0;

  return sub_23BDB3554(*v0);
}

uint64_t sub_23BDB3604()
{
  sub_23BDB3E7C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB362C()
{
  sub_23BDB3E7C();
  return sub_23BDCE0E4();
}

uint64_t AchievementEnvironmentCacheMonitorState.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF5F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB3E7C();
  sub_23BDCE0CC();
  v11 = *v3;
  HIBYTE(v10) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC00);
  sub_23BDA00D4();
  sub_23BDCE00C();
  if (!v2)
  {
    v11 = v3[1];
    HIBYTE(v10) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC10);
    sub_23BDA0278(&qword_256AAEC18, &qword_256AAEC10, (uint64_t (*)(void))sub_23BDA0158);
    sub_23BDCE00C();
    v11 = v3[2];
    HIBYTE(v10) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
    sub_23BDA01F4();
    sub_23BDCE00C();
    v11 = v3[3];
    HIBYTE(v10) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
    sub_23BDA0278(&qword_256AAEC48, &qword_256AAEC40, (uint64_t (*)(void))sub_23BD590CC);
    sub_23BDCE00C();
    type metadata accessor for AchievementEnvironmentCacheMonitorState();
    LOBYTE(v11) = 4;
    type metadata accessor for AwardToastLoadState();
    sub_23BD6B5DC(&qword_256AAEC50, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AchievementEnvironmentCacheMonitorState.hashValue.getter()
{
  __int128 v1[4];

  sub_23BDCE084();
  AchievementEnvironmentCacheMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t AchievementEnvironmentCacheMonitorState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t State;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v22 = a2;
  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF608);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AchievementEnvironmentCacheMonitorState();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB3E7C();
  v24 = v7;
  v11 = v26;
  sub_23BDCE0C0();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = v8;
  v20 = v4;
  v21 = a1;
  v26 = v5;
  v12 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC00);
  v27 = 0;
  sub_23BDA02E4();
  v13 = v25;
  v14 = v24;
  sub_23BDCDF94();
  *v12 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC10);
  v27 = 1;
  sub_23BDA0368(&qword_256AAEC68, &qword_256AAEC10, (uint64_t (*)(void))sub_23BDA03D4);
  sub_23BDCDF94();
  v15 = v26;
  v12[1] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC30);
  v27 = 2;
  sub_23BDA0470();
  sub_23BDCDF94();
  v12[2] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAEC40);
  v27 = 3;
  sub_23BDA0368(&qword_256AAEC88, &qword_256AAEC40, (uint64_t (*)(void))sub_23BD59460);
  sub_23BDCDF94();
  v12[3] = v28;
  LOBYTE(v28) = 4;
  sub_23BD6B5DC(&qword_256AAEC90, (uint64_t (*)(uint64_t))type metadata accessor for AwardToastLoadState, (uint64_t)&protocol conformance descriptor for AwardToastLoadState);
  v16 = (uint64_t)v20;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v14, v13);
  sub_23BD9F4C8(v16, (uint64_t)v12 + *(int *)(v19 + 32));
  sub_23BD594E4((uint64_t)v12, v22, (uint64_t (*)(_QWORD))type metadata accessor for AchievementEnvironmentCacheMonitorState);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_23BD59BB4((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AchievementEnvironmentCacheMonitorState);
}

uint64_t sub_23BDB3D54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AchievementEnvironmentCacheMonitorState.init(from:)(a1, a2);
}

uint64_t sub_23BDB3D68(_QWORD *a1)
{
  return AchievementEnvironmentCacheMonitorState.encode(to:)(a1);
}

uint64_t sub_23BDB3D7C()
{
  __int128 v1[4];

  sub_23BDCE084();
  AchievementEnvironmentCacheMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t sub_23BDB3DBC()
{
  __int128 v1[4];

  sub_23BDCE084();
  AchievementEnvironmentCacheMonitorState.hash(into:)(v1);
  return sub_23BDCE0B4();
}

uint64_t _s13FitnessAwards39AchievementEnvironmentCacheMonitorStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  if ((sub_23BDC8A14(*(_QWORD *)a1, *a2) & 1) == 0
    || (sub_23BDC9034(*(_QWORD *)(a1 + 8), a2[1]) & 1) == 0
    || (sub_23BDC91FC(*(_QWORD *)(a1 + 16), a2[2]) & 1) == 0
    || (sub_23BDC9A04(*(_QWORD *)(a1 + 24), a2[3]) & 1) == 0)
  {
    return 0;
  }
  v4 = *(int *)(type metadata accessor for AchievementEnvironmentCacheMonitorState() + 32);
  return _s13FitnessAwards19AwardToastLoadStateO2eeoiySbAC_ACtFZ_0(a1 + v4, (uint64_t)a2 + v4);
}

unint64_t sub_23BDB3E7C()
{
  unint64_t result;

  result = qword_256AAF600;
  if (!qword_256AAF600)
  {
    result = MEMORY[0x242611F78](&unk_23BDD751C, &type metadata for AchievementEnvironmentCacheMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF600);
  }
  return result;
}

uint64_t sub_23BDB3EC0()
{
  return sub_23BD6B5DC((unint64_t *)&qword_256AAE1C0, (uint64_t (*)(uint64_t))type metadata accessor for AchievementEnvironmentCacheMonitorState, (uint64_t)&protocol conformance descriptor for AchievementEnvironmentCacheMonitorState);
}

uint64_t getEnumTagSinglePayload for AchievementEnvironmentCacheMonitorState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDB3EF8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t State;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, State);
  }
}

uint64_t storeEnumTagSinglePayload for AchievementEnvironmentCacheMonitorState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BDB3F80(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t State;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    State = type metadata accessor for AwardToastLoadState();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(State - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, State);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AchievementEnvironmentCacheMonitorState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDB4040 + 4 * byte_23BDD734A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDB4074 + 4 * byte_23BDD7345[v4]))();
}

uint64_t sub_23BDB4074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB407C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDB4084);
  return result;
}

uint64_t sub_23BDB4090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDB4098);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDB409C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB40A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorState.CodingKeys()
{
  return &type metadata for AchievementEnvironmentCacheMonitorState.CodingKeys;
}

unint64_t sub_23BDB40C4()
{
  unint64_t result;

  result = qword_256AAF6B0;
  if (!qword_256AAF6B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD74F4, &type metadata for AchievementEnvironmentCacheMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF6B0);
  }
  return result;
}

unint64_t sub_23BDB410C()
{
  unint64_t result;

  result = qword_256AAF6B8;
  if (!qword_256AAF6B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7464, &type metadata for AchievementEnvironmentCacheMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF6B8);
  }
  return result;
}

unint64_t sub_23BDB4154()
{
  unint64_t result;

  result = qword_256AAF6C0;
  if (!qword_256AAF6C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD748C, &type metadata for AchievementEnvironmentCacheMonitorState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF6C0);
  }
  return result;
}

uint64_t AchievementEnvironmentCacheMonitorEnvironment.init(makeAchievementEnvironmentCacheUpdatedStream:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for AchievementEnvironmentCacheMonitorEnvironment()
{
  return &type metadata for AchievementEnvironmentCacheMonitorEnvironment;
}

uint64_t AwardToastEnvironment.init(requestToastDismissal:navigateToDetail:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t AwardToastEnvironment.requestToastDismissal.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t AwardToastEnvironment.navigateToDetail.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

ValueMetadata *type metadata accessor for AwardToastEnvironment()
{
  return &type metadata for AwardToastEnvironment;
}

uint64_t static AwardHeaderAction.== infix(_:_:)()
{
  return 1;
}

uint64_t AwardHeaderAction.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BDB4254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDB4B3C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23BDB427C()
{
  sub_23BDB4498();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB42A4()
{
  sub_23BDB4498();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDB42CC()
{
  sub_23BDB44DC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB42F4()
{
  sub_23BDB44DC();
  return sub_23BDCE0E4();
}

uint64_t AwardHeaderAction.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t AwardHeaderAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6C8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6D0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB4498();
  sub_23BDCE0CC();
  sub_23BDB44DC();
  sub_23BDCDFAC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_23BDB4498()
{
  unint64_t result;

  result = qword_256AAF6D8;
  if (!qword_256AAF6D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7880, &type metadata for AwardHeaderAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF6D8);
  }
  return result;
}

unint64_t sub_23BDB44DC()
{
  unint64_t result;

  result = qword_256AAF6E0;
  if (!qword_256AAF6E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7830, &type metadata for AwardHeaderAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF6E0);
  }
  return result;
}

uint64_t AwardHeaderAction.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6E8);
  v2 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6F0);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB4498();
  v8 = v23;
  sub_23BDCE0C0();
  if (v8)
    goto LABEL_7;
  v20 = a1;
  v23 = v5;
  v10 = v21;
  v9 = v22;
  if (*(_QWORD *)(sub_23BDCDFA0() + 16) != 1)
  {
    v14 = sub_23BDCDEC8();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v16 = &type metadata for AwardHeaderAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x24BEE26D0], v14);
    swift_willThrow();
    v17 = v23;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v9);
    a1 = v20;
LABEL_7:
    v13 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v13);
  }
  sub_23BDB44DC();
  v11 = v4;
  sub_23BDCDF28();
  v12 = v23;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
  v13 = (uint64_t)v20;
  return __swift_destroy_boxed_opaque_existential_1(v13);
}

unint64_t sub_23BDB4780()
{
  unint64_t result;

  result = qword_256AAF6F8;
  if (!qword_256AAF6F8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardHeaderAction, &type metadata for AwardHeaderAction);
    atomic_store(result, (unint64_t *)&qword_256AAF6F8);
  }
  return result;
}

uint64_t sub_23BDB47C4(_QWORD *a1)
{
  return AwardHeaderAction.init(from:)(a1);
}

uint64_t sub_23BDB47D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6C8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF6D0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB4498();
  sub_23BDCE0CC();
  sub_23BDB44DC();
  sub_23BDCDFAC();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

ValueMetadata *type metadata accessor for AwardHeaderAction()
{
  return &type metadata for AwardHeaderAction;
}

uint64_t _s13FitnessAwards17AwardHeaderActionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BDB4968 + 4 * asc_23BDD7610[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BDB4988 + 4 * byte_23BDD7615[v4]))();
}

_BYTE *sub_23BDB4968(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BDB4988(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDB4990(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDB4998(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDB49A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDB49A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardHeaderAction.CodingKeys()
{
  return &type metadata for AwardHeaderAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardHeaderAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardHeaderAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BDB49D8()
{
  unint64_t result;

  result = qword_256AAF700;
  if (!qword_256AAF700)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7808, &type metadata for AwardHeaderAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF700);
  }
  return result;
}

unint64_t sub_23BDB4A20()
{
  unint64_t result;

  result = qword_256AAF708;
  if (!qword_256AAF708)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7728, &type metadata for AwardHeaderAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF708);
  }
  return result;
}

unint64_t sub_23BDB4A68()
{
  unint64_t result;

  result = qword_256AAF710;
  if (!qword_256AAF710)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7750, &type metadata for AwardHeaderAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF710);
  }
  return result;
}

unint64_t sub_23BDB4AB0()
{
  unint64_t result;

  result = qword_256AAF718;
  if (!qword_256AAF718)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7778, &type metadata for AwardHeaderAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF718);
  }
  return result;
}

unint64_t sub_23BDB4AF8()
{
  unint64_t result;

  result = qword_256AAF720;
  if (!qword_256AAF720)
  {
    result = MEMORY[0x242611F78](&unk_23BDD77A0, &type metadata for AwardHeaderAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF720);
  }
  return result;
}

uint64_t sub_23BDB4B3C(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23BDB4BD0()
{
  return 0x6570704177656976;
}

BOOL static AwardProgressDescriptionStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t AwardProgressDescriptionStyle.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BDB4C2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDB4C64 + 4 * byte_23BDD78D0[a1]))(0xD000000000000010, 0x800000023BDDA840);
}

uint64_t sub_23BDB4C64()
{
  return 0x63736544676E6F6CLL;
}

uint64_t sub_23BDB4C88()
{
  return 0x73736572676F7270;
}

uint64_t sub_23BDB4CA8()
{
  return 0x6C6E4F65756C6176;
}

uint64_t sub_23BDB4CC4()
{
  unsigned __int8 *v0;

  return sub_23BDB4C2C(*v0);
}

uint64_t sub_23BDB4CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDB5C34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDB4CF0()
{
  sub_23BDB51B0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB4D18()
{
  sub_23BDB51B0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDB4D40()
{
  sub_23BDB52C0();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB4D68()
{
  sub_23BDB52C0();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDB4D90()
{
  sub_23BDB5238();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB4DB8()
{
  sub_23BDB5238();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDB4DE0()
{
  sub_23BDB527C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB4E08()
{
  sub_23BDB527C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDB4E30()
{
  sub_23BDB51F4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB4E58()
{
  sub_23BDB51F4();
  return sub_23BDCE0E4();
}

uint64_t AwardProgressDescriptionStyle.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

void AwardProgressDescriptionStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF728);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF730);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF738);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF740);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF748);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB51B0();
  sub_23BDCE0CC();
  __asm { BR              X9 }
}

uint64_t sub_23BDB507C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_23BDB52C0();
  sub_23BDCDFAC();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_23BDB51B0()
{
  unint64_t result;

  result = qword_256AAF750;
  if (!qword_256AAF750)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7D9C, &type metadata for AwardProgressDescriptionStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF750);
  }
  return result;
}

unint64_t sub_23BDB51F4()
{
  unint64_t result;

  result = qword_256AAF758;
  if (!qword_256AAF758)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7D4C, &type metadata for AwardProgressDescriptionStyle.ValueOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF758);
  }
  return result;
}

unint64_t sub_23BDB5238()
{
  unint64_t result;

  result = qword_256AAF760;
  if (!qword_256AAF760)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7CFC, &type metadata for AwardProgressDescriptionStyle.ProgressBarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF760);
  }
  return result;
}

unint64_t sub_23BDB527C()
{
  unint64_t result;

  result = qword_256AAF768;
  if (!qword_256AAF768)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7CAC, &type metadata for AwardProgressDescriptionStyle.ShortDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF768);
  }
  return result;
}

unint64_t sub_23BDB52C0()
{
  unint64_t result;

  result = qword_256AAF770;
  if (!qword_256AAF770)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7C5C, &type metadata for AwardProgressDescriptionStyle.LongDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF770);
  }
  return result;
}

uint64_t AwardProgressDescriptionStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF778);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF780);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF788);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF790);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF798);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23BDB51B0();
  v15 = v28;
  sub_23BDCE0C0();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_23BDCDFA0();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_23BDCDEC8();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v19 = &type metadata for AwardProgressDescriptionStyle;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

unint64_t sub_23BDB578C()
{
  unint64_t result;

  result = qword_256AAF7A0;
  if (!qword_256AAF7A0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardProgressDescriptionStyle, &type metadata for AwardProgressDescriptionStyle);
    atomic_store(result, (unint64_t *)&qword_256AAF7A0);
  }
  return result;
}

uint64_t sub_23BDB57D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardProgressDescriptionStyle.init(from:)(a1, a2);
}

void sub_23BDB57E4(_QWORD *a1)
{
  AwardProgressDescriptionStyle.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle()
{
  return &type metadata for AwardProgressDescriptionStyle;
}

uint64_t _s13FitnessAwards29AwardProgressDescriptionStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23BDB585C + 4 * byte_23BDD78E1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23BDB5890 + 4 * byte_23BDD78DC[v4]))();
}

uint64_t sub_23BDB5890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB5898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDB58A0);
  return result;
}

uint64_t sub_23BDB58AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDB58B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23BDB58B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB58C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle.CodingKeys()
{
  return &type metadata for AwardProgressDescriptionStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle.LongDescriptionCodingKeys()
{
  return &type metadata for AwardProgressDescriptionStyle.LongDescriptionCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle.ShortDescriptionCodingKeys()
{
  return &type metadata for AwardProgressDescriptionStyle.ShortDescriptionCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle.ProgressBarCodingKeys()
{
  return &type metadata for AwardProgressDescriptionStyle.ProgressBarCodingKeys;
}

ValueMetadata *type metadata accessor for AwardProgressDescriptionStyle.ValueOnlyCodingKeys()
{
  return &type metadata for AwardProgressDescriptionStyle.ValueOnlyCodingKeys;
}

unint64_t sub_23BDB5920()
{
  unint64_t result;

  result = qword_256AAF7A8;
  if (!qword_256AAF7A8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7C34, &type metadata for AwardProgressDescriptionStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7A8);
  }
  return result;
}

unint64_t sub_23BDB5968()
{
  unint64_t result;

  result = qword_256AAF7B0;
  if (!qword_256AAF7B0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7B54, &type metadata for AwardProgressDescriptionStyle.LongDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7B0);
  }
  return result;
}

unint64_t sub_23BDB59B0()
{
  unint64_t result;

  result = qword_256AAF7B8;
  if (!qword_256AAF7B8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7B7C, &type metadata for AwardProgressDescriptionStyle.LongDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7B8);
  }
  return result;
}

unint64_t sub_23BDB59F8()
{
  unint64_t result;

  result = qword_256AAF7C0;
  if (!qword_256AAF7C0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7B04, &type metadata for AwardProgressDescriptionStyle.ShortDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7C0);
  }
  return result;
}

unint64_t sub_23BDB5A40()
{
  unint64_t result;

  result = qword_256AAF7C8;
  if (!qword_256AAF7C8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7B2C, &type metadata for AwardProgressDescriptionStyle.ShortDescriptionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7C8);
  }
  return result;
}

unint64_t sub_23BDB5A88()
{
  unint64_t result;

  result = qword_256AAF7D0;
  if (!qword_256AAF7D0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7AB4, &type metadata for AwardProgressDescriptionStyle.ProgressBarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7D0);
  }
  return result;
}

unint64_t sub_23BDB5AD0()
{
  unint64_t result;

  result = qword_256AAF7D8;
  if (!qword_256AAF7D8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7ADC, &type metadata for AwardProgressDescriptionStyle.ProgressBarCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7D8);
  }
  return result;
}

unint64_t sub_23BDB5B18()
{
  unint64_t result;

  result = qword_256AAF7E0;
  if (!qword_256AAF7E0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7A64, &type metadata for AwardProgressDescriptionStyle.ValueOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7E0);
  }
  return result;
}

unint64_t sub_23BDB5B60()
{
  unint64_t result;

  result = qword_256AAF7E8;
  if (!qword_256AAF7E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7A8C, &type metadata for AwardProgressDescriptionStyle.ValueOnlyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7E8);
  }
  return result;
}

unint64_t sub_23BDB5BA8()
{
  unint64_t result;

  result = qword_256AAF7F0;
  if (!qword_256AAF7F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7BA4, &type metadata for AwardProgressDescriptionStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7F0);
  }
  return result;
}

unint64_t sub_23BDB5BF0()
{
  unint64_t result;

  result = qword_256AAF7F8;
  if (!qword_256AAF7F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7BCC, &type metadata for AwardProgressDescriptionStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF7F8);
  }
  return result;
}

uint64_t sub_23BDB5C34(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x63736544676E6F6CLL && a2 == 0xEF6E6F6974706972;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA840 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xEB00000000726142 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6E4F65756C6176 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t AwardLockupLayout.init(artworkContentSpacing:artworkMargins:contentMargins:cornerRadius:isAccessibilityLayout:lineLimit:minimumHeight:subtitleFontDescriptor:titleFontDescriptor:titleToSubtitleSpacing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char *a7@<X6>, char *a8@<X7>, double *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>)
{
  char v18;
  char v19;
  int *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v25;
  _BYTE *v26;
  _BYTE *v27;
  char v28;
  char v29;

  v18 = *a7;
  v19 = a7[1];
  v28 = a8[1];
  v29 = *a8;
  *a9 = a10;
  v20 = (int *)type metadata accessor for AwardLockupLayout();
  v21 = (char *)a9 + v20[5];
  v22 = sub_23BDCD5F8();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
  v23(v21, a1, v22);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)((char *)a9 + v20[6], a2, v22);
  *(double *)((char *)a9 + v20[7]) = a11;
  *((_BYTE *)a9 + v20[8]) = a3;
  *(_QWORD *)((char *)a9 + v20[9]) = a4;
  v25 = (char *)a9 + v20[10];
  *(_QWORD *)v25 = a5;
  v25[8] = a6 & 1;
  v26 = (char *)a9 + v20[11];
  *v26 = v18;
  v26[1] = v19;
  v27 = (char *)a9 + v20[12];
  *v27 = v29;
  v27[1] = v28;
  *(double *)((char *)a9 + v20[13]) = a12;
  return result;
}

uint64_t type metadata accessor for AwardLockupLayout()
{
  uint64_t result;

  result = qword_256AAF890;
  if (!qword_256AAF890)
    return swift_getSingletonMetadata();
  return result;
}

double AwardLockupLayout.artworkContentSpacing.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t AwardLockupLayout.artworkMargins.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardLockupLayout() + 20);
  v4 = sub_23BDCD5F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AwardLockupLayout.contentMargins.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardLockupLayout() + 24);
  v4 = sub_23BDCD5F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double AwardLockupLayout.cornerRadius.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardLockupLayout() + 28));
}

uint64_t AwardLockupLayout.isAccessibilityLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AwardLockupLayout() + 32));
}

uint64_t AwardLockupLayout.lineLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AwardLockupLayout() + 36));
}

uint64_t AwardLockupLayout.minimumHeight.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AwardLockupLayout() + 40));
}

uint64_t AwardLockupLayout.subtitleFontDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;

  result = type metadata accessor for AwardLockupLayout();
  v4 = (char *)(v1 + *(int *)(result + 44));
  v5 = *v4;
  LOBYTE(v4) = v4[1];
  *a1 = v5;
  a1[1] = (_BYTE)v4;
  return result;
}

uint64_t AwardLockupLayout.titleFontDescriptor.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;

  result = type metadata accessor for AwardLockupLayout();
  v4 = (char *)(v1 + *(int *)(result + 48));
  v5 = *v4;
  LOBYTE(v4) = v4[1];
  *a1 = v5;
  a1[1] = (_BYTE)v4;
  return result;
}

double AwardLockupLayout.titleToSubtitleSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardLockupLayout() + 52));
}

uint64_t sub_23BDB6130(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDB6168 + 4 * byte_23BDD7DF0[a1]))(0xD000000000000015, 0x800000023BDDA860);
}

uint64_t sub_23BDB6168()
{
  return 0x4D6B726F77747261;
}

uint64_t sub_23BDB61A0()
{
  return 0x615272656E726F63;
}

uint64_t sub_23BDB6244()
{
  unsigned __int8 *v0;

  return sub_23BDB6130(*v0);
}

uint64_t sub_23BDB624C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDB78FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDB6270()
{
  sub_23BDB6F84();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB6298()
{
  sub_23BDB6F84();
  return sub_23BDCE0E4();
}

uint64_t AwardLockupLayout.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  char *v13;
  char v14;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF800);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB6F84();
  sub_23BDCE0CC();
  v18 = *v3;
  v20 = 0;
  sub_23BD6298C();
  sub_23BDCE00C();
  if (!v2)
  {
    v17 = (int *)type metadata accessor for AwardLockupLayout();
    LOBYTE(v18) = 1;
    sub_23BDCD5F8();
    sub_23BD6B5DC(&qword_256AAF810, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BA8]);
    sub_23BDCE00C();
    LOBYTE(v18) = 2;
    sub_23BDCE00C();
    v18 = *(uint64_t *)((char *)v3 + v17[7]);
    v20 = 3;
    sub_23BDCE00C();
    LOBYTE(v18) = 4;
    sub_23BDCDFE8();
    LOBYTE(v18) = 5;
    sub_23BDCE000();
    v9 = (char *)v3 + v17[10];
    v10 = *(_QWORD *)v9;
    LOBYTE(v9) = v9[8];
    v18 = v10;
    v19 = (char)v9;
    v20 = 6;
    sub_23BDCDFD0();
    v11 = (char *)v3 + v17[11];
    v12 = *v11;
    LOBYTE(v11) = v11[1];
    LOBYTE(v18) = v12;
    BYTE1(v18) = (_BYTE)v11;
    v20 = 7;
    sub_23BD9BDA0();
    sub_23BDCE00C();
    v13 = (char *)v3 + v17[12];
    v14 = *v13;
    LOBYTE(v13) = v13[1];
    LOBYTE(v18) = v14;
    BYTE1(v18) = (_BYTE)v13;
    v20 = 8;
    sub_23BDCE00C();
    v18 = *(uint64_t *)((char *)v3 + v17[13]);
    v20 = 9;
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AwardLockupLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  _QWORD *v22;
  char v23;
  char *v24;
  char v25;
  _BYTE *v26;
  char v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD v31[2];
  int *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v35 = a2;
  v3 = sub_23BDCD5F8();
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v36 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v31 - v6;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF818);
  v8 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AwardLockupLayout();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB6F84();
  v40 = v10;
  v14 = v41;
  sub_23BDCE0C0();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v41 = v8;
  v32 = (int *)v11;
  v33 = v13;
  v34 = a1;
  v44 = 0;
  v15 = sub_23BD62CA8();
  sub_23BDCDF94();
  v16 = v33;
  *(_QWORD *)v33 = v42;
  LOBYTE(v42) = 1;
  sub_23BD6B5DC(&qword_256AAF820, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB8]);
  v17 = v7;
  v18 = v38;
  sub_23BDCDF94();
  v31[1] = v15;
  v19 = v32;
  v20 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v20(&v16[v32[5]], v17, v18);
  LOBYTE(v42) = 2;
  v21 = v36;
  sub_23BDCDF94();
  v22 = v33;
  v20(&v33[v19[6]], v21, v18);
  v44 = 3;
  v36 = 0;
  sub_23BDCDF94();
  *(_QWORD *)((char *)v22 + v19[7]) = v42;
  LOBYTE(v42) = 4;
  *((_BYTE *)v22 + v19[8]) = sub_23BDCDF70() & 1;
  LOBYTE(v42) = 5;
  *(_QWORD *)((char *)v22 + v19[9]) = sub_23BDCDF88();
  v44 = 6;
  sub_23BDCDF58();
  v23 = v43;
  v24 = (char *)v22 + v19[10];
  *(_QWORD *)v24 = v42;
  v24[8] = v23;
  v44 = 7;
  sub_23BD9C174();
  sub_23BDCDF94();
  v25 = BYTE1(v42);
  v26 = (char *)v22 + v19[11];
  *v26 = v42;
  v26[1] = v25;
  v44 = 8;
  sub_23BDCDF94();
  v27 = BYTE1(v42);
  v28 = (char *)v22 + v19[12];
  *v28 = v42;
  v28[1] = v27;
  v44 = 9;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v39);
  v29 = (uint64_t)v33;
  *(_QWORD *)&v33[v32[13]] = v42;
  sub_23BDB6FC8(v29, v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return sub_23BD72A24(v29);
}

uint64_t sub_23BDB6BE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardLockupLayout.init(from:)(a1, a2);
}

uint64_t sub_23BDB6BF8(_QWORD *a1)
{
  return AwardLockupLayout.encode(to:)(a1);
}

uint64_t AwardLockupLayout.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_23BDCE0A8();
  v1 = type metadata accessor for AwardLockupLayout();
  sub_23BDCD5F8();
  sub_23BD6B5DC(&qword_256AAF828, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23BDCDCF4();
  sub_23BDCDCF4();
  sub_23BDCE0A8();
  sub_23BDCE09C();
  sub_23BDCE090();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 40) + 8) == 1)
  {
    sub_23BDCE09C();
  }
  else
  {
    sub_23BDCE09C();
    sub_23BDCE0A8();
  }
  sub_23BDCE090();
  sub_23BDCE090();
  sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0A8();
}

uint64_t AwardLockupLayout.hashValue.getter()
{
  sub_23BDCE084();
  AwardLockupLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDB6DB4()
{
  sub_23BDCE084();
  AwardLockupLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDB6DF4()
{
  sub_23BDCE084();
  AwardLockupLayout.hash(into:)();
  return sub_23BDCE0B4();
}

BOOL _s13FitnessAwards17AwardLockupLayoutV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  int *v4;
  uint64_t v5;
  double *v6;
  char v7;
  double *v8;
  int v9;
  _BOOL8 result;
  uint64_t v11;
  char *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  int v17;
  unsigned __int8 *v18;

  if (*a1 != *a2)
    return 0;
  v4 = (int *)type metadata accessor for AwardLockupLayout();
  if ((MEMORY[0x2426111B0]((char *)a1 + v4[5], (char *)a2 + v4[5]) & 1) == 0
    || (MEMORY[0x2426111B0]((char *)a1 + v4[6], (char *)a2 + v4[6]) & 1) == 0
    || *(double *)((char *)a1 + v4[7]) != *(double *)((char *)a2 + v4[7])
    || *((unsigned __int8 *)a1 + v4[8]) != *((unsigned __int8 *)a2 + v4[8])
    || *(_QWORD *)((char *)a1 + v4[9]) != *(_QWORD *)((char *)a2 + v4[9]))
  {
    return 0;
  }
  v5 = v4[10];
  v6 = (double *)((char *)a1 + v5);
  v7 = *((_BYTE *)a1 + v5 + 8);
  v8 = (double *)((char *)a2 + v5);
  v9 = *((unsigned __int8 *)a2 + v5 + 8);
  if ((v7 & 1) != 0)
  {
    if (!v9)
      return 0;
  }
  else
  {
    if (*v6 != *v8)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  result = 0;
  v11 = v4[11];
  v12 = (char *)a1 + v11;
  v13 = *((unsigned __int8 *)a1 + v11);
  v14 = (unsigned __int8 *)a2 + v11;
  if (v13 == *v14 && ((v12[1] ^ v14[1]) & 1) == 0)
  {
    result = 0;
    v15 = v4[12];
    v16 = (char *)a1 + v15;
    v17 = *((unsigned __int8 *)a1 + v15);
    v18 = (unsigned __int8 *)a2 + v15;
    if (v17 == *v18 && ((v16[1] ^ v18[1]) & 1) == 0)
      return *(double *)((char *)a1 + v4[13]) == *(double *)((char *)a2 + v4[13]);
  }
  return result;
}

unint64_t sub_23BDB6F84()
{
  unint64_t result;

  result = qword_256AAF808;
  if (!qword_256AAF808)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8034, &type metadata for AwardLockupLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF808);
  }
  return result;
}

uint64_t sub_23BDB6FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardLockupLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDB700C()
{
  return sub_23BD6B5DC(&qword_256AAF830, (uint64_t (*)(uint64_t))type metadata accessor for AwardLockupLayout, (uint64_t)&protocol conformance descriptor for AwardLockupLayout);
}

char *initializeBufferWithCopyOfBuffer for AwardLockupLayout(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_23BDCD5F8();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[a3[6]], &a2[a3[6]], v10);
    v12 = a3[8];
    *(_QWORD *)&v4[a3[7]] = *(_QWORD *)&a2[a3[7]];
    v4[v12] = a2[v12];
    v13 = a3[10];
    *(_QWORD *)&v4[a3[9]] = *(_QWORD *)&a2[a3[9]];
    v14 = &v4[v13];
    v15 = &a2[v13];
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    v16 = a3[12];
    *(_WORD *)&v4[a3[11]] = *(_WORD *)&a2[a3[11]];
    *(_WORD *)&v4[v16] = *(_WORD *)&a2[v16];
    *(_QWORD *)&v4[a3[13]] = *(_QWORD *)&a2[a3[13]];
  }
  return v4;
}

uint64_t destroy for AwardLockupLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BDCD5F8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 24), v5);
}

char *initializeWithCopy for AwardLockupLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v11] = a2[v11];
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[12];
  *(_WORD *)&a1[a3[11]] = *(_WORD *)&a2[a3[11]];
  *(_WORD *)&a1[v15] = *(_WORD *)&a2[v15];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithCopy for AwardLockupLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v11 = a3[10];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = v13[8];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v14;
  v15 = a3[11];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v16[1] = v17[1];
  v18 = a3[12];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *v19 = *v20;
  v19[1] = v20[1];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

char *initializeWithTake for AwardLockupLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v11] = a2[v11];
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[12];
  *(_WORD *)&a1[a3[11]] = *(_WORD *)&a2[a3[11]];
  *(_WORD *)&a1[v15] = *(_WORD *)&a2[v15];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for AwardLockupLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v11] = a2[v11];
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = a3[11];
  v16 = a3[12];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *v17 = *v18;
  v17[1] = v18[1];
  v19 = &a1[v16];
  v20 = &a2[v16];
  *v19 = *v20;
  v19[1] = v20[1];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardLockupLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDB75A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23BDCD5F8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardLockupLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDB763C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23BDCD5F8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  return result;
}

uint64_t sub_23BDB76B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD5F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AwardLockupLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23BDB77A4 + 4 * byte_23BDD7DFF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23BDB77D8 + 4 * byte_23BDD7DFA[v4]))();
}

uint64_t sub_23BDB77D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB77E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDB77E8);
  return result;
}

uint64_t sub_23BDB77F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDB77FCLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23BDB7800(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDB7808(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardLockupLayout.CodingKeys()
{
  return &type metadata for AwardLockupLayout.CodingKeys;
}

unint64_t sub_23BDB7828()
{
  unint64_t result;

  result = qword_256AAF8E8;
  if (!qword_256AAF8E8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD800C, &type metadata for AwardLockupLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF8E8);
  }
  return result;
}

unint64_t sub_23BDB7870()
{
  unint64_t result;

  result = qword_256AAF8F0;
  if (!qword_256AAF8F0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7F7C, &type metadata for AwardLockupLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF8F0);
  }
  return result;
}

unint64_t sub_23BDB78B8()
{
  unint64_t result;

  result = qword_256AAF8F8;
  if (!qword_256AAF8F8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD7FA4, &type metadata for AwardLockupLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF8F8);
  }
  return result;
}

uint64_t sub_23BDB78FC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x800000023BDDA860 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D6B726F77747261 && a2 == 0xEE00736E69677261 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D746E65746E6F63 && a2 == 0xEE00736E69677261 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x615272656E726F63 && a2 == 0xEC00000073756964 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023BDDA880 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696D694C656E696CLL && a2 == 0xE900000000000074 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x486D756D696E696DLL && a2 == 0xED00007468676965 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA8A0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023BDDA8C0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA8E0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t AwardHeaderEnvironment.init(resolveAwardDescription:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardHeaderEnvironment()
{
  return &type metadata for AwardHeaderEnvironment;
}

uint64_t AwardHeaderLayout.init(awardImageLayout:contentPadding:descriptionFont:descriptionToProgressSpacing:imagePadding:imageToDescriptionSpacing:isAccessibilityLayout:isCompact:isPortraitMode:progressToBottomSpacing:progressViewWidthScaleFactor:sectionDensityFactor:textAlignment:titleFont:titleToDescriptionSpacing:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, char a14, uint64_t *a15, char *a16, char *a17)
{
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _BYTE *v32;
  uint64_t result;
  char *v34;
  _QWORD *v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;

  v24 = *a3;
  v25 = a3[1];
  v37 = *a15;
  v26 = a15[1];
  v27 = a15[2];
  v38 = *a16;
  v39 = a17[1];
  v40 = *a17;
  *a9 = *a1;
  v28 = (int *)type metadata accessor for AwardHeaderLayout();
  v29 = (char *)a9 + v28[5];
  v30 = sub_23BDCD5F8();
  v31 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
  v31(v29, a2, v30);
  v32 = (char *)a9 + v28[6];
  *v32 = v24;
  v32[1] = v25;
  *(double *)((char *)a9 + v28[7]) = a10;
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)((char *)a9 + v28[8], a4, v30);
  *(double *)((char *)a9 + v28[9]) = a11;
  *((_BYTE *)a9 + v28[10]) = a5;
  *((_BYTE *)a9 + v28[11]) = a6;
  *((_BYTE *)a9 + v28[12]) = a7;
  *(double *)((char *)a9 + v28[13]) = a12;
  v34 = (char *)a9 + v28[14];
  *(_QWORD *)v34 = a8;
  v34[8] = a14 & 1;
  v35 = (_QWORD *)((char *)a9 + v28[15]);
  *v35 = v37;
  v35[1] = v26;
  v35[2] = v27;
  *((_BYTE *)a9 + v28[16]) = v38;
  v36 = (char *)a9 + v28[17];
  *v36 = v40;
  v36[1] = v39;
  *(double *)((char *)a9 + v28[18]) = a13;
  return result;
}

uint64_t type metadata accessor for AwardHeaderLayout()
{
  uint64_t result;

  result = qword_256AAF998;
  if (!qword_256AAF998)
    return swift_getSingletonMetadata();
  return result;
}

__n128 AwardHeaderLayout.awardImageLayout.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t AwardHeaderLayout.contentPadding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardHeaderLayout() + 20);
  v4 = sub_23BDCD5F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AwardHeaderLayout.descriptionFont.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;

  result = type metadata accessor for AwardHeaderLayout();
  v4 = (char *)(v1 + *(int *)(result + 24));
  v5 = *v4;
  LOBYTE(v4) = v4[1];
  *a1 = v5;
  a1[1] = (_BYTE)v4;
  return result;
}

double AwardHeaderLayout.descriptionToProgressSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 28));
}

uint64_t AwardHeaderLayout.imagePadding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AwardHeaderLayout() + 32);
  v4 = sub_23BDCD5F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

double AwardHeaderLayout.imageToDescriptionSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 36));
}

uint64_t AwardHeaderLayout.isAccessibilityLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 40));
}

uint64_t AwardHeaderLayout.isCompact.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 44));
}

uint64_t AwardHeaderLayout.isPortraitMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 48));
}

double AwardHeaderLayout.progressToBottomSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 52));
}

uint64_t AwardHeaderLayout.progressViewWidthScaleFactor.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 56));
}

double AwardHeaderLayout.sectionDensityFactor.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double *v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v3 = (double *)(v1 + *(int *)(type metadata accessor for AwardHeaderLayout() + 60));
  v4 = *(_QWORD *)v3;
  result = v3[1];
  v6 = *((_QWORD *)v3 + 2);
  *(_QWORD *)a1 = v4;
  *(double *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t AwardHeaderLayout.textAlignment.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for AwardHeaderLayout();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 64));
  return result;
}

uint64_t AwardHeaderLayout.titleFont.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v4;
  char v5;

  result = type metadata accessor for AwardHeaderLayout();
  v4 = (char *)(v1 + *(int *)(result + 68));
  v5 = *v4;
  LOBYTE(v4) = v4[1];
  *a1 = v5;
  a1[1] = (_BYTE)v4;
  return result;
}

double AwardHeaderLayout.titleToDescriptionSpacing.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for AwardHeaderLayout() + 72));
}

uint64_t sub_23BDB81B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDB81F4
                                                                     + 4 * aW[a1]))(0xD000000000000010, 0x800000023BDDA250);
}

uint64_t sub_23BDB81F4()
{
  return 0x50746E65746E6F63;
}

uint64_t sub_23BDB8218()
{
  return 0x7470697263736564;
}

uint64_t sub_23BDB823C()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_23BDB82F8()
{
  return 0x67696C4174786574;
}

uint64_t sub_23BDB8354()
{
  unsigned __int8 *v0;

  return sub_23BDB81B8(*v0);
}

uint64_t sub_23BDB835C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDBA1BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23BDB8380(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_23BDB838C()
{
  sub_23BDB952C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDB83B4()
{
  sub_23BDB952C();
  return sub_23BDCE0E4();
}

uint64_t static AwardHeaderLayout.zero.getter@<X0>(_QWORD *a1@<X8>)
{
  int *v2;
  uint64_t result;
  char *v4;
  _QWORD *v5;

  v2 = (int *)type metadata accessor for AwardHeaderLayout();
  sub_23BDCD5D4();
  result = sub_23BDCD5D4();
  *a1 = 0;
  a1[1] = 0;
  *(_WORD *)((char *)a1 + v2[6]) = 261;
  *(_QWORD *)((char *)a1 + v2[7]) = 0;
  *(_QWORD *)((char *)a1 + v2[9]) = 0;
  *((_BYTE *)a1 + v2[10]) = 0;
  *((_BYTE *)a1 + v2[11]) = 1;
  *((_BYTE *)a1 + v2[12]) = 1;
  *(_QWORD *)((char *)a1 + v2[13]) = 0;
  v4 = (char *)a1 + v2[14];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = (_QWORD *)((char *)a1 + v2[15]);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *((_BYTE *)a1 + v2[16]) = 1;
  *(_WORD *)((char *)a1 + v2[17]) = 0;
  *(_QWORD *)((char *)a1 + v2[18]) = 0;
  return result;
}

uint64_t AwardHeaderLayout.encode(to:)(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char *v10;
  char v11;
  unint64_t v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  char v27;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF900);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB952C();
  sub_23BDCE0CC();
  v25 = *v3;
  v27 = 0;
  sub_23BD62948();
  sub_23BDCE00C();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for AwardHeaderLayout();
    v24 = v3;
    LOBYTE(v25) = 1;
    sub_23BDCD5F8();
    sub_23BD6B5DC(&qword_256AAF810, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BA8]);
    sub_23BDCE00C();
    v10 = (char *)v24 + v9[6];
    v11 = *v10;
    LOBYTE(v10) = v10[1];
    LOBYTE(v25) = v11;
    BYTE1(v25) = (_BYTE)v10;
    v27 = 2;
    v12 = sub_23BD9BDA0();
    sub_23BDCE00C();
    v23 = v12;
    *(_QWORD *)&v25 = *(_QWORD *)((char *)v24 + v9[7]);
    v27 = 3;
    sub_23BD6298C();
    sub_23BDCE00C();
    LOBYTE(v25) = 4;
    sub_23BDCE00C();
    v13 = v24;
    *(_QWORD *)&v25 = *(_QWORD *)((char *)v24 + v9[9]);
    v27 = 5;
    sub_23BDCE00C();
    LOBYTE(v25) = 6;
    sub_23BDCDFE8();
    LOBYTE(v25) = 7;
    sub_23BDCDFE8();
    LOBYTE(v25) = 8;
    sub_23BDCDFE8();
    *(_QWORD *)&v25 = *(_QWORD *)((char *)v13 + v9[13]);
    v27 = 9;
    sub_23BDCE00C();
    v14 = (uint64_t *)((char *)v13 + v9[14]);
    v15 = *v14;
    LOBYTE(v14) = *((_BYTE *)v14 + 8);
    *(_QWORD *)&v25 = v15;
    BYTE8(v25) = (_BYTE)v14;
    v27 = 10;
    sub_23BDCDFD0();
    v16 = (uint64_t *)((char *)v24 + v9[15]);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    *(_QWORD *)&v25 = v17;
    *((_QWORD *)&v25 + 1) = v18;
    v26 = v19;
    v27 = 11;
    sub_23BDB9570();
    sub_23BDCE00C();
    LOBYTE(v25) = *((_BYTE *)v24 + v9[16]);
    v27 = 12;
    sub_23BDB95B4();
    sub_23BDCE00C();
    v20 = (char *)v24 + v9[17];
    v21 = *v20;
    LOBYTE(v20) = v20[1];
    LOBYTE(v25) = v21;
    BYTE1(v25) = (_BYTE)v20;
    v27 = 13;
    sub_23BDCE00C();
    *(_QWORD *)&v25 = *(_QWORD *)((char *)v24 + v9[18]);
    v27 = 14;
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t AwardHeaderLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  char v23;
  char *v24;
  unint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  char *v32;
  uint64_t v33;
  _QWORD v35[3];
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  int *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  char v49;

  v40 = a2;
  v3 = sub_23BDCD5F8();
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v43 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v35 - v6;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAF920);
  v8 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AwardHeaderLayout();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDB952C();
  v45 = v10;
  v14 = (uint64_t)v46;
  sub_23BDCE0C0();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v43;
  v16 = v8;
  v38 = (int *)v11;
  v39 = v13;
  v46 = a1;
  v49 = 0;
  sub_23BD62C64();
  sub_23BDCDF94();
  v17 = v39;
  *(_OWORD *)v39 = v47;
  LOBYTE(v47) = 1;
  v18 = v7;
  v19 = sub_23BD6B5DC(&qword_256AAF820, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB8]);
  v20 = v42;
  sub_23BDCDF94();
  v37 = v19;
  v21 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v21(&v17[v38[5]], v18, v20);
  v49 = 2;
  v22 = sub_23BD9C174();
  sub_23BDCDF94();
  v35[2] = v22;
  v36 = v21;
  v23 = BYTE1(v47);
  v24 = &v17[v38[6]];
  *v24 = v47;
  v24[1] = v23;
  v49 = 3;
  v25 = sub_23BD62CA8();
  sub_23BDCDF94();
  v35[1] = v25;
  *(_QWORD *)&v17[v38[7]] = v47;
  LOBYTE(v47) = 4;
  sub_23BDCDF94();
  v36(&v17[v38[8]], v15, v20);
  v49 = 5;
  sub_23BDCDF94();
  *(_QWORD *)&v17[v38[9]] = v47;
  LOBYTE(v47) = 6;
  v17[v38[10]] = sub_23BDCDF70() & 1;
  LOBYTE(v47) = 7;
  v17[v38[11]] = sub_23BDCDF70() & 1;
  LOBYTE(v47) = 8;
  v17[v38[12]] = sub_23BDCDF70() & 1;
  v49 = 9;
  sub_23BDCDF94();
  *(_QWORD *)&v39[v38[13]] = v47;
  v49 = 10;
  sub_23BDCDF58();
  v26 = BYTE8(v47);
  v27 = &v39[v38[14]];
  *(_QWORD *)v27 = v47;
  v27[8] = v26;
  v49 = 11;
  sub_23BDB95F8();
  sub_23BDCDF94();
  v28 = *((_QWORD *)&v47 + 1);
  v29 = v48;
  v30 = &v39[v38[15]];
  *(_QWORD *)v30 = v47;
  *((_QWORD *)v30 + 1) = v28;
  *((_QWORD *)v30 + 2) = v29;
  v49 = 12;
  sub_23BDB963C();
  sub_23BDCDF94();
  v39[v38[16]] = v47;
  v49 = 13;
  sub_23BDCDF94();
  v31 = BYTE1(v47);
  v32 = &v39[v38[17]];
  *v32 = v47;
  v32[1] = v31;
  v49 = 14;
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v45, v44);
  v33 = (uint64_t)v39;
  *(_QWORD *)&v39[v38[18]] = v47;
  sub_23BDB9680(v33, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return sub_23BD69D7C(v33);
}

uint64_t sub_23BDB908C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardHeaderLayout.init(from:)(a1, a2);
}

uint64_t sub_23BDB90A0(_QWORD *a1)
{
  return AwardHeaderLayout.encode(to:)(a1);
}

uint64_t AwardHeaderLayout.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  sub_23BD5A758();
  v1 = type metadata accessor for AwardHeaderLayout();
  sub_23BDCD5F8();
  sub_23BD6B5DC(&qword_256AAF828, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23BDCDCF4();
  sub_23BDCE090();
  sub_23BDCE090();
  sub_23BDCE0A8();
  sub_23BDCDCF4();
  sub_23BDCE0A8();
  sub_23BDCE09C();
  sub_23BDCE09C();
  sub_23BDCE09C();
  sub_23BDCE0A8();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 56) + 8) == 1)
  {
    sub_23BDCE09C();
  }
  else
  {
    sub_23BDCE09C();
    sub_23BDCE0A8();
  }
  sub_23BDCE090();
  sub_23BDCE0A8();
  sub_23BDCE090();
  sub_23BDCE090();
  sub_23BDCE090();
  sub_23BDCE090();
  return sub_23BDCE0A8();
}

uint64_t AwardHeaderLayout.hashValue.getter()
{
  sub_23BDCE084();
  AwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDB92C4()
{
  sub_23BDCE084();
  AwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDB9304()
{
  sub_23BDCE084();
  AwardHeaderLayout.hash(into:)();
  return sub_23BDCE0B4();
}

BOOL _s13FitnessAwards17AwardHeaderLayoutV2eeoiySbAC_ACtFZ_0(double *a1, double *a2)
{
  int *v5;
  _BOOL8 result;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  double *v12;
  char v13;
  double *v14;
  int v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  char *v21;
  int v22;
  unsigned __int8 *v23;

  if (*a1 != *a2 || a1[1] != a2[1])
    return 0;
  v5 = (int *)type metadata accessor for AwardHeaderLayout();
  if ((MEMORY[0x2426111B0]((char *)a1 + v5[5], (char *)a2 + v5[5]) & 1) == 0)
    return 0;
  result = 0;
  v7 = v5[6];
  v8 = (char *)a1 + v7;
  v9 = *((unsigned __int8 *)a1 + v7);
  v10 = (unsigned __int8 *)a2 + v7;
  if (v9 != *v10 || ((v8[1] ^ v10[1]) & 1) != 0)
    return result;
  if (*(double *)((char *)a1 + v5[7]) != *(double *)((char *)a2 + v5[7])
    || (MEMORY[0x2426111B0]((char *)a1 + v5[8], (char *)a2 + v5[8]) & 1) == 0
    || *(double *)((char *)a1 + v5[9]) != *(double *)((char *)a2 + v5[9])
    || *((unsigned __int8 *)a1 + v5[10]) != *((unsigned __int8 *)a2 + v5[10])
    || *((unsigned __int8 *)a1 + v5[11]) != *((unsigned __int8 *)a2 + v5[11])
    || *((unsigned __int8 *)a1 + v5[12]) != *((unsigned __int8 *)a2 + v5[12])
    || *(double *)((char *)a1 + v5[13]) != *(double *)((char *)a2 + v5[13]))
  {
    return 0;
  }
  v11 = v5[14];
  v12 = (double *)((char *)a1 + v11);
  v13 = *((_BYTE *)a1 + v11 + 8);
  v14 = (double *)((char *)a2 + v11);
  v15 = *((unsigned __int8 *)a2 + v11 + 8);
  if ((v13 & 1) != 0)
  {
    if (!v15)
      return 0;
  }
  else
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  result = 0;
  v16 = v5[15];
  v17 = (double *)((char *)a1 + v16);
  v18 = *(_QWORD *)((char *)a1 + v16);
  v19 = (double *)((char *)a2 + v16);
  if (v18 != *(_QWORD *)v19 || v17[1] != v19[1] || *((_QWORD *)v17 + 2) != *((_QWORD *)v19 + 2))
    return result;
  if (*((unsigned __int8 *)a1 + v5[16]) != *((unsigned __int8 *)a2 + v5[16]))
    return 0;
  result = 0;
  v20 = v5[17];
  v21 = (char *)a1 + v20;
  v22 = *((unsigned __int8 *)a1 + v20);
  v23 = (unsigned __int8 *)a2 + v20;
  if (v22 == *v23 && ((v21[1] ^ v23[1]) & 1) == 0)
    return *(double *)((char *)a1 + v5[18]) == *(double *)((char *)a2 + v5[18]);
  return result;
}

unint64_t sub_23BDB952C()
{
  unint64_t result;

  result = qword_256AAF908;
  if (!qword_256AAF908)
  {
    result = MEMORY[0x242611F78](&unk_23BDD836C, &type metadata for AwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAF908);
  }
  return result;
}

unint64_t sub_23BDB9570()
{
  unint64_t result;

  result = qword_256AAF910;
  if (!qword_256AAF910)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for SectionDensityFactor, &type metadata for SectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AAF910);
  }
  return result;
}

unint64_t sub_23BDB95B4()
{
  unint64_t result;

  result = qword_256AAF918;
  if (!qword_256AAF918)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for DescriptionTextAlignment, &type metadata for DescriptionTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AAF918);
  }
  return result;
}

unint64_t sub_23BDB95F8()
{
  unint64_t result;

  result = qword_256AAF928;
  if (!qword_256AAF928)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for SectionDensityFactor, &type metadata for SectionDensityFactor);
    atomic_store(result, (unint64_t *)&qword_256AAF928);
  }
  return result;
}

unint64_t sub_23BDB963C()
{
  unint64_t result;

  result = qword_256AAF930;
  if (!qword_256AAF930)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for DescriptionTextAlignment, &type metadata for DescriptionTextAlignment);
    atomic_store(result, (unint64_t *)&qword_256AAF930);
  }
  return result;
}

uint64_t sub_23BDB9680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardHeaderLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDB96C4()
{
  return sub_23BD6B5DC(&qword_256AAF938, (uint64_t (*)(uint64_t))type metadata accessor for AwardHeaderLayout, (uint64_t)&protocol conformance descriptor for AwardHeaderLayout);
}

char *initializeBufferWithCopyOfBuffer for AwardHeaderLayout(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_23BDCD5F8();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    *(_WORD *)&v4[a3[6]] = *(_WORD *)&a2[a3[6]];
    *(_QWORD *)&v4[v12] = *(_QWORD *)&a2[v12];
    v11(&v4[a3[8]], &a2[a3[8]], v10);
    v13 = a3[10];
    *(_QWORD *)&v4[a3[9]] = *(_QWORD *)&a2[a3[9]];
    v4[v13] = a2[v13];
    v14 = a3[12];
    v4[a3[11]] = a2[a3[11]];
    v4[v14] = a2[v14];
    v15 = a3[14];
    *(_QWORD *)&v4[a3[13]] = *(_QWORD *)&a2[a3[13]];
    v16 = &v4[v15];
    v17 = &a2[v15];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = a3[15];
    v19 = a3[16];
    v20 = &v4[v18];
    v21 = &a2[v18];
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
    v4[v19] = a2[v19];
    v22 = a3[18];
    *(_WORD *)&v4[a3[17]] = *(_WORD *)&a2[a3[17]];
    *(_QWORD *)&v4[v22] = *(_QWORD *)&a2[v22];
  }
  return v4;
}

uint64_t destroy for AwardHeaderLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BDCD5F8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 32), v5);
}

char *initializeWithCopy for AwardHeaderLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_WORD *)&a1[a3[6]] = *(_WORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v12] = a2[v12];
  v13 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v13] = a2[v13];
  v14 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[15];
  v18 = a3[16];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  a1[v18] = a2[v18];
  v21 = a3[18];
  *(_WORD *)&a1[a3[17]] = *(_WORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  return a1;
}

char *assignWithCopy for AwardHeaderLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *v12 = *v13;
  v12[1] = v13[1];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v14 = a3[14];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = v16[8];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v17;
  v18 = a3[15];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  a1[a3[16]] = a2[a3[16]];
  v21 = a3[17];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *v22 = *v23;
  v22[1] = v23[1];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  return a1;
}

char *initializeWithTake for AwardHeaderLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_WORD *)&a1[a3[6]] = *(_WORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v12] = a2[v12];
  v13 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v13] = a2[v13];
  v14 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[15];
  v18 = a3[16];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
  a1[v18] = a2[v18];
  v21 = a3[18];
  *(_WORD *)&a1[a3[17]] = *(_WORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  return a1;
}

char *assignWithTake for AwardHeaderLayout(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23BDCD5F8();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = a3[7];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *v13 = *v14;
  v15 = *(_QWORD *)&a2[v12];
  v13[1] = v14[1];
  *(_QWORD *)&a1[v12] = v15;
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  v16 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v16] = a2[v16];
  v17 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v17] = a2[v17];
  v18 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = a3[15];
  v22 = a3[16];
  v23 = &a1[v21];
  v24 = &a2[v21];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
  *((_QWORD *)v23 + 2) = *((_QWORD *)v24 + 2);
  a1[v22] = a2[v22];
  v25 = a3[17];
  v26 = a3[18];
  v27 = &a1[v25];
  v28 = &a2[v25];
  *v27 = *v28;
  v27[1] = v28[1];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardHeaderLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDB9DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23BDCD5F8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 1);
  if (v9 >= 2)
    return v9 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardHeaderLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDB9E48(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23BDCD5F8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 1) = a2 + 1;
  return result;
}

uint64_t sub_23BDB9EC8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD5F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardHeaderLayout.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardHeaderLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_23BDBA064 + 4 * byte_23BDD80C4[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_23BDBA098 + 4 * byte_23BDD80BF[v4]))();
}

uint64_t sub_23BDBA098(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDBA0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDBA0A8);
  return result;
}

uint64_t sub_23BDBA0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDBA0BCLL);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_23BDBA0C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDBA0C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardHeaderLayout.CodingKeys()
{
  return &type metadata for AwardHeaderLayout.CodingKeys;
}

unint64_t sub_23BDBA0E8()
{
  unint64_t result;

  result = qword_256AAFA08;
  if (!qword_256AAFA08)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8344, &type metadata for AwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFA08);
  }
  return result;
}

unint64_t sub_23BDBA130()
{
  unint64_t result;

  result = qword_256AAFA10;
  if (!qword_256AAFA10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD82B4, &type metadata for AwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFA10);
  }
  return result;
}

unint64_t sub_23BDBA178()
{
  unint64_t result;

  result = qword_256AAFA18;
  if (!qword_256AAFA18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD82DC, &type metadata for AwardHeaderLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFA18);
  }
  return result;
}

uint64_t sub_23BDBA1BC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDA250 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x50746E65746E6F63 && a2 == 0xEE00676E69646461 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7470697263736564 && a2 == 0xEF746E6F466E6F69 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000023BDDA900 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6461506567616D69 && a2 == 0xEC000000676E6964 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023BDDA920 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023BDDA880 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6361706D6F437369 && a2 == 0xE900000000000074 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x617274726F507369 && a2 == 0xEE0065646F4D7469 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023BDDA940 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000023BDDA960 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023BDDA980 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x67696C4174786574 && a2 == 0xED0000746E656D6ELL || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E6F46656C746974 && a2 == 0xE900000000000074 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000023BDDA9A0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t AwardImageEnvironment.init(fetchSeymourAchievementImageURL:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageEnvironment()
{
  return &type metadata for AwardImageEnvironment;
}

uint64_t sub_23BDBA7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t i;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t State;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  _QWORD *v50;

  State = type metadata accessor for AwardProgressLoadState();
  v44 = *(_QWORD *)(State - 8);
  v4 = MEMORY[0x24BDAC7A8](State);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v45 = (char *)&v41 - v7;
  v8 = *(_QWORD *)(a1 + 64);
  v42 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v43 = (unint64_t)(v9 + 63) >> 6;
  v47 = a1;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v49)
  {
    if (v11)
    {
      v48 = (v11 - 1) & v11;
      v49 = i;
      v13 = __clz(__rbit64(v11)) | (i << 6);
    }
    else
    {
      v14 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_36;
      if (v14 >= v43)
        return swift_release();
      v15 = *(_QWORD *)(v42 + 8 * v14);
      v16 = i + 1;
      if (!v15)
      {
        v16 = i + 2;
        if (i + 2 >= v43)
          return swift_release();
        v15 = *(_QWORD *)(v42 + 8 * v16);
        if (!v15)
        {
          v16 = i + 3;
          if (i + 3 >= v43)
            return swift_release();
          v15 = *(_QWORD *)(v42 + 8 * v16);
          if (!v15)
          {
            v16 = i + 4;
            if (i + 4 >= v43)
              return swift_release();
            v15 = *(_QWORD *)(v42 + 8 * v16);
            if (!v15)
            {
              v17 = i + 5;
              if (i + 5 >= v43)
                return swift_release();
              v15 = *(_QWORD *)(v42 + 8 * v17);
              if (!v15)
              {
                while (1)
                {
                  v16 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_37;
                  if (v16 >= v43)
                    return swift_release();
                  v15 = *(_QWORD *)(v42 + 8 * v16);
                  ++v17;
                  if (v15)
                    goto LABEL_23;
                }
              }
              v16 = i + 5;
            }
          }
        }
      }
LABEL_23:
      v48 = (v15 - 1) & v15;
      v49 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v13);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t)v45;
    swift_storeEnumTagMultiPayload();
    v22 = *(int *)(type metadata accessor for AwardToastPresentationState() + 32);
    v23 = (uint64_t)v6;
    sub_23BD7686C(v21, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v50 = *(_QWORD **)(a2 + v22);
    v25 = v50;
    v26 = a2;
    *(_QWORD *)(a2 + v22) = 0x8000000000000000;
    v28 = sub_23BD8BD48(v19, v20);
    v29 = v25[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (v25[3] >= v31)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_23BDC0EA0();
    }
    else
    {
      sub_23BDC08F4(v31, isUniquelyReferenced_nonNull_native);
      v33 = sub_23BD8BD48(v19, v20);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_38;
      v28 = v33;
    }
    v6 = (char *)v23;
    v35 = v50;
    if ((v32 & 1) != 0)
    {
      sub_23BD9B924(v23, v50[7] + *(_QWORD *)(v44 + 72) * v28);
    }
    else
    {
      v50[(v28 >> 6) + 8] |= 1 << v28;
      v36 = (uint64_t *)(v35[6] + 16 * v28);
      *v36 = v19;
      v36[1] = v20;
      sub_23BD7686C(v23, v35[7] + *(_QWORD *)(v44 + 72) * v28, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      v37 = v35[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_35;
      v35[2] = v39;
      swift_bridgeObjectRetain();
    }
    a2 = v26;
    *(_QWORD *)(v26 + v22) = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v48;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_23BDCE03C();
  __break(1u);
  return result;
}

uint64_t sub_23BDBAB68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v14)) + (v8 << 6))
  {
    v12 = *(_QWORD *)(a1 + 48) + 40 * i;
    if ((*(_BYTE *)(v12 + 32) & 1) != 0)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v16 = *(_QWORD *)v12;
      v21 = *(_QWORD *)(v12 + 8);
      sub_23BD6B728(*(_QWORD *)v12, v21, *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), 0);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23BD6E394(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v18 = v9[2];
      v17 = v9[3];
      v19 = v9;
      if (v18 >= v17 >> 1)
      {
        result = (uint64_t)sub_23BD6E394((_QWORD *)(v17 > 1), v18 + 1, 1, v9);
        v19 = (_QWORD *)result;
      }
      v19[2] = v18 + 1;
      v9 = v19;
      v20 = &v19[2 * v18];
      v20[4] = v16;
      v20[5] = v21;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        goto LABEL_29;
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          goto LABEL_29;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v6)
            goto LABEL_29;
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release();
    return (uint64_t)v9;
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_23BDBAD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  int v5;
  char v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  char v13;

  result = sub_23BDC1960(a1);
  if ((v6 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
  {
    v7 = 0uLL;
    v8 = -1;
    v9 = 0uLL;
  }
  else
  {
    sub_23BDC1D6C(result, v5, a1, (uint64_t)v12);
    v10 = v12[1];
    v11 = v12[0];
    v8 = v13;
    result = sub_23BDC3030((uint64_t)v12);
    v9 = v10;
    v7 = v11;
  }
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 32) = v8;
  return result;
}

uint64_t sub_23BDBAE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 16))
  {
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
      return sub_23BDCE090();
    default:
      sub_23BDCE090();
      __asm { BR              X9 }
      return result;
  }
}

void sub_23BDBAEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23BDCE090();
  sub_23BDCE090();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = v0 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23BDCDD90();
      swift_bridgeObjectRelease();
      v2 += 16;
      --v1;
    }
    while (v1);
  }
  JUMPOUT(0x23BDBAEACLL);
}

uint64_t sub_23BDBAF14()
{
  sub_23BDCE090();
  return sub_23BDCDD90();
}

uint64_t sub_23BDBAF40()
{
  sub_23BDCE084();
  sub_23BDBAE04();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDBAF94()
{
  sub_23BDCE084();
  sub_23BDBAE04();
  return sub_23BDCE0B4();
}

__n128 AwardToastPresentationFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  type metadata accessor for AwardToastPresentationFeature();
  sub_23BDCD580();
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata accessor for AwardToastPresentationFeature()
{
  uint64_t result;

  result = qword_256AAFB00;
  if (!qword_256AAFB00)
    return swift_getSingletonMetadata();
  return result;
}

void AwardToastPresentationFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[15];
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t State;
  uint64_t v69;
  uint64_t v70;

  v64 = a3;
  v62 = a2;
  v56 = sub_23BDCD58C();
  v55 = *(_QWORD *)(v56 - 8);
  v5 = MEMORY[0x24BDAC7A8](v56);
  v52[3] = (char *)v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v52[4] = (char *)v52 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v52[14] = (char *)v52 - v9;
  State = type metadata accessor for AwardProgressLoadState();
  v65 = *(_QWORD *)(State - 8);
  v10 = MEMORY[0x24BDAC7A8](State);
  v67 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v61 = (char *)v52 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)v52 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)v52 - v16;
  v53 = type metadata accessor for AwardToastPresentationFeature();
  v17 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
  v18 = MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v52[8] = (char *)v52 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v52[10] = (char *)v52 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v52[9] = (char *)v52 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD718);
  v59 = *(_QWORD *)(v63 - 8);
  v25 = MEMORY[0x24BDAC7A8](v63);
  v58 = (char *)v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v54 = (char *)v52 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v52[13] = (char *)v52 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v52[11] = (char *)v52 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v52[7] = (char *)v52 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v52[12] = (char *)v52 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v52[6] = (char *)v52 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v52[5] = (char *)v52 - v39;
  v40 = type metadata accessor for AwardToastLoadState();
  v41 = MEMORY[0x24BDAC7A8](v40);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v43 = MEMORY[0x24BDAC7A8](v42);
  v44 = MEMORY[0x24BDAC7A8](v43);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v46 = MEMORY[0x24BDAC7A8](v45);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v49 = MEMORY[0x24BDAC7A8](v48);
  v50 = MEMORY[0x24BDAC7A8](v49);
  MEMORY[0x24BDAC7A8](v50);
  v51 = a4[2];
  v69 = *a4;
  v70 = v51;
  __asm { BR              X10 }
}

uint64_t sub_23BDBB568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v1 - 208) = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & v2;
  *(_QWORD *)(v1 - 200) = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  *(_QWORD *)(v1 - 248) = &unk_23BDD9DC0;
  *(_QWORD *)(v1 - 240) = 0x800000023BDD9DC0;
  v7 = *(_QWORD *)(v1 - 216);
  if (!v5)
    goto LABEL_8;
LABEL_4:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v6 << 6);
  v10 = *(_QWORD *)(v1 - 160);
  while (1)
  {
    *(_QWORD *)(v1 - 152) = v6;
    v15 = *(_QWORD *)(v10 + 48) + 40 * v9;
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 16);
    v19 = *(_QWORD *)(v15 + 24);
    if ((*(_BYTE *)(v15 + 32) & 1) == 0)
    {
      v38 = *(_QWORD *)(v1 - 232);
      *(_QWORD *)v38 = v17;
      *(_QWORD *)(v38 + 8) = v16;
      *(_QWORD *)(v38 + 16) = v18;
      *(_QWORD *)(v38 + 24) = v19;
      *(_BYTE *)(v38 + 32) = 0;
      swift_storeEnumTagMultiPayload();
      v39 = *(int *)(type metadata accessor for AwardToastPresentationState() + 32);
      sub_23BD7686C(v38, *(_QWORD *)(v1 - 184), (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      sub_23BD6B728(v17, v16, v18, v19, 0);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = *(_QWORD *)(v7 + v39);
      *(_QWORD *)(v1 - 144) = v41;
      *(_QWORD *)(v7 + v39) = 0x8000000000000000;
      v43 = sub_23BD8BD48(v17, v16);
      v44 = *(_QWORD *)(v41 + 16);
      v45 = (v42 & 1) == 0;
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        goto LABEL_47;
      v47 = v42;
      if (*(_QWORD *)(v41 + 24) < v46)
      {
        sub_23BDC08F4(v46, isUniquelyReferenced_nonNull_native);
        v48 = sub_23BD8BD48(v17, v16);
        if ((v47 & 1) != (v49 & 1))
        {
LABEL_52:
          sub_23BDCE03C();
          __break(1u);
          JUMPOUT(0x23BDBDD18);
        }
        v43 = v48;
        v11 = *(_QWORD **)(v1 - 144);
        if ((v47 & 1) == 0)
          goto LABEL_41;
LABEL_6:
        sub_23BD9B924(*(_QWORD *)(v1 - 184), v11[7] + *(_QWORD *)(*(_QWORD *)(v1 - 192) + 72) * v43);
LABEL_7:
        v7 = *(_QWORD *)(v1 - 216);
        *(_QWORD *)(v7 + v39) = v11;
        swift_bridgeObjectRelease();
        sub_23BD5F110(v17, v16, v18, v19, 0);
        v6 = *(_QWORD *)(v1 - 152);
        if (v5)
          goto LABEL_4;
        goto LABEL_8;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v11 = *(_QWORD **)(v1 - 144);
        if ((v42 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        sub_23BDC0EA0();
        v11 = *(_QWORD **)(v1 - 144);
        if ((v47 & 1) != 0)
          goto LABEL_6;
      }
LABEL_41:
      v11[(v43 >> 6) + 8] |= 1 << v43;
      v50 = (uint64_t *)(v11[6] + 16 * v43);
      *v50 = v17;
      v50[1] = v16;
      sub_23BD7686C(*(_QWORD *)(v1 - 184), v11[7] + *(_QWORD *)(*(_QWORD *)(v1 - 192) + 72) * v43, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      v51 = v11[2];
      v36 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v36)
        goto LABEL_50;
      v11[2] = v52;
      swift_bridgeObjectRetain();
      goto LABEL_7;
    }
    v20 = *(_QWORD *)(v1 - 224);
    *(_QWORD *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v16;
    *(_QWORD *)(v20 + 16) = v18;
    *(_QWORD *)(v20 + 24) = v19;
    *(_BYTE *)(v20 + 32) = 1;
    swift_storeEnumTagMultiPayload();
    v21 = *(int *)(type metadata accessor for AwardToastPresentationState() + 32);
    sub_23BD7686C(v20, *(_QWORD *)(v1 - 176), (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v23 = *(_QWORD *)(v7 + v21);
    *(_QWORD *)(v1 - 144) = v23;
    *(_QWORD *)(v7 + v21) = 0x8000000000000000;
    v25 = sub_23BD8BD48(0xD00000000000001CLL, *(_QWORD *)(v1 - 240));
    v26 = *(_QWORD *)(v23 + 16);
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      JUMPOUT(0x23BDBD8C4);
    }
    v29 = v24;
    if (*(_QWORD *)(v23 + 24) >= v28)
    {
      if ((v22 & 1) != 0)
      {
        v32 = *(_QWORD **)(v1 - 144);
        if ((v24 & 1) != 0)
          goto LABEL_36;
      }
      else
      {
        sub_23BDC0EA0();
        v32 = *(_QWORD **)(v1 - 144);
        if ((v29 & 1) != 0)
          goto LABEL_36;
      }
    }
    else
    {
      sub_23BDC08F4(v28, v22);
      v30 = sub_23BD8BD48(0xD00000000000001CLL, *(_QWORD *)(v1 - 248) | 0x8000000000000000);
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_52;
      v25 = v30;
      v32 = *(_QWORD **)(v1 - 144);
      if ((v29 & 1) != 0)
      {
LABEL_36:
        sub_23BD9B924(*(_QWORD *)(v1 - 176), v32[7] + *(_QWORD *)(*(_QWORD *)(v1 - 192) + 72) * v25);
        goto LABEL_37;
      }
    }
    v32[(v25 >> 6) + 8] |= 1 << v25;
    v33 = (_QWORD *)(v32[6] + 16 * v25);
    v34 = *(_QWORD *)(v1 - 248) | 0x8000000000000000;
    *v33 = 0xD00000000000001CLL;
    v33[1] = v34;
    sub_23BD7686C(*(_QWORD *)(v1 - 176), v32[7] + *(_QWORD *)(*(_QWORD *)(v1 - 192) + 72) * v25, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v35 = v32[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_49;
    v32[2] = v37;
LABEL_37:
    *(_QWORD *)(v7 + v21) = v32;
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v1 - 152);
    if (v5)
      goto LABEL_4;
LABEL_8:
    v12 = v6 + 1;
    v10 = *(_QWORD *)(v1 - 160);
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      JUMPOUT(0x23BDBDA4CLL);
    }
    if (v12 >= *(_QWORD *)(v1 - 200))
      return swift_release();
    v13 = *(_QWORD *)(*(_QWORD *)(v1 - 208) + 8 * v12);
    ++v6;
    if (!v13)
    {
      v6 = v12 + 1;
      if (v12 + 1 >= *(_QWORD *)(v1 - 200))
        return swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v1 - 208) + 8 * v6);
      if (!v13)
      {
        v6 = v12 + 2;
        if (v12 + 2 >= *(_QWORD *)(v1 - 200))
          return swift_release();
        v13 = *(_QWORD *)(*(_QWORD *)(v1 - 208) + 8 * v6);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v5 = (v13 - 1) & v13;
    v9 = __clz(__rbit64(v13)) + (v6 << 6);
  }
  v14 = v12 + 3;
  if (v14 >= *(_QWORD *)(v1 - 200))
    return swift_release();
  v13 = *(_QWORD *)(*(_QWORD *)(v1 - 208) + 8 * v14);
  if (v13)
  {
    v6 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      JUMPOUT(0x23BDBDA74);
    }
    if (v6 >= *(_QWORD *)(v1 - 200))
      return swift_release();
    v13 = *(_QWORD *)(*(_QWORD *)(v1 - 208) + 8 * v6);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
}

uint64_t sub_23BDBDD28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[9] = a1;
  sub_23BDCDDF0();
  v1[10] = sub_23BDCDDE4();
  v1[11] = sub_23BDCDDCC();
  v1[12] = v2;
  return swift_task_switch();
}

uint64_t sub_23BDBDD94()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastPresentationFeature] Fetching award toast kind", v4, 2u);
    MEMORY[0x242611FFC](v4, -1, -1);
  }

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 3;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v5 = v0;
  v5[1] = sub_23BDBDEC4;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBDEC4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBDF10()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBDF44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[19] = a1;
  v2[20] = a2;
  v2[21] = sub_23BDCDDF0();
  v2[22] = sub_23BDCDDE4();
  v2[23] = sub_23BDCDDCC();
  v2[24] = v3;
  return swift_task_switch();
}

uint64_t sub_23BDBDFB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)(v0 + 160) + 96)
                                       + *(_QWORD *)(*(_QWORD *)(v0 + 160) + 96));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_23BDBE01C;
  return v3(v0 + 112);
}

uint64_t sub_23BDBE01C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBE07C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[17];
  v2 = __swift_project_boxed_opaque_existential_1(v0 + 14, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v4, v2, v1);
  v0[12] = swift_getAssociatedTypeWitness();
  v0[13] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v0 + 9);
  sub_23BDCDE14();
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
  v0[27] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 9), v0[12]);
  v5 = (_QWORD *)swift_task_alloc();
  v0[28] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_23BDBE1DC;
  return sub_23BDCDDD8();
}

uint64_t sub_23BDBE1DC()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23BDBE230()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (*(_BYTE *)(v0 + 65) == 1)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (qword_256AACE00 != -1)
      swift_once();
    v2 = sub_23BDCD628();
    __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
    v3 = sub_23BDCD610();
    v4 = sub_23BDCDE38();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_23BD56000, v3, v4, "[AwardToastPresentationFeature] App did become active, fetching award toast kind", v5, 2u);
      MEMORY[0x242611FFC](v5, -1, -1);
    }

    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *(_BYTE *)(v0 + 64) = 3;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
    *v6 = v0;
    v6[1] = sub_23BDBE39C;
    return sub_23BDCDCAC();
  }
}

uint64_t sub_23BDBE39C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBE3E8()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[27] = sub_23BDCDDE4();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v0 + 9), v0[12]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[28] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23BDBE1DC;
  return sub_23BDCDDD8();
}

uint64_t sub_23BDBE48C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBE4C0()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 72) = sub_23BDCDDF0();
  *(_QWORD *)(v0 + 80) = sub_23BDCDDE4();
  *(_QWORD *)(v0 + 16) = 1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 3;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v1 = v0;
  v1[1] = sub_23BDBE56C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBE56C()
{
  swift_task_dealloc();
  sub_23BDCDDCC();
  return swift_task_switch();
}

uint64_t sub_23BDBE5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v6;

  v3[2] = sub_23BDCDDF0();
  v3[3] = sub_23BDCDDE4();
  v6 = (_QWORD *)swift_task_alloc();
  v3[4] = v6;
  *v6 = v3;
  v6[1] = sub_23BDBE658;
  return sub_23BDBE6FC(a1, a3);
}

uint64_t sub_23BDBE658()
{
  swift_task_dealloc();
  sub_23BDCDDCC();
  return swift_task_switch();
}

uint64_t sub_23BDBE6C8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBE6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v3[109] = v2;
  v3[108] = a1;
  v5 = (_QWORD *)swift_task_alloc();
  v3[110] = v5;
  *v5 = v3;
  v5[1] = sub_23BDBE764;
  v5[3] = a2;
  v5[4] = v2;
  return swift_task_switch();
}

uint64_t sub_23BDBE764(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v6;

  v4 = *v2;
  *(_QWORD *)(v4 + 888) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  *(_QWORD *)(v4 + 896) = a1;
  *(_QWORD *)(v4 + 360) = a1;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 393) = 0u;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 904) = v6;
  *(_QWORD *)(v4 + 912) = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v6 = v4;
  v6[1] = sub_23BDBE83C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBE83C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBE890()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;

  v1 = *(_OWORD **)(v0 + 872);
  *(_OWORD *)(v0 + 16) = *v1;
  v2 = v1[4];
  v4 = v1[1];
  v3 = v1[2];
  *(_OWORD *)(v0 + 64) = v1[3];
  *(_OWORD *)(v0 + 80) = v2;
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v3;
  v5 = v1[8];
  v7 = v1[5];
  v6 = v1[6];
  *(_OWORD *)(v0 + 128) = v1[7];
  *(_OWORD *)(v0 + 144) = v5;
  *(_OWORD *)(v0 + 96) = v7;
  *(_OWORD *)(v0 + 112) = v6;
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[8];
  *(_OWORD *)(v0 + 272) = v1[7];
  *(_OWORD *)(v0 + 288) = v10;
  *(_OWORD *)(v0 + 240) = v8;
  *(_OWORD *)(v0 + 256) = v9;
  v11 = v1[1];
  v12 = v1[2];
  v13 = v1[4];
  *(_OWORD *)(v0 + 208) = v1[3];
  *(_OWORD *)(v0 + 224) = v13;
  *(_OWORD *)(v0 + 176) = v11;
  *(_OWORD *)(v0 + 192) = v12;
  *(_OWORD *)(v0 + 160) = *v1;
  sub_23BDC2E84(v0 + 16);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 920) = v14;
  *v14 = v0;
  v14[1] = sub_23BDBE93C;
  return sub_23BD94AF8((_OWORD *)(v0 + 160), *(_QWORD *)(v0 + 896));
}

uint64_t sub_23BDBE93C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 16;
  *(_QWORD *)(*(_QWORD *)v1 + 928) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_23BDC2F2C(v2);
  return swift_task_switch();
}

uint64_t sub_23BDBE9B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 928) + 16);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 968) = v4;
    *v4 = v0;
    v4[1] = sub_23BDBEC3C;
    v5 = *(_QWORD *)(v0 + 872);
    v4[5] = v0 + 824;
    v4[6] = v5;
    return swift_task_switch();
  }
  if (v1 != 1)
  {
    v7 = sub_23BDBAB68(*(_QWORD *)(v0 + 928));
    swift_bridgeObjectRelease();
    v8 = 0;
    v9 = 1;
LABEL_9:
    *(_BYTE *)(v0 + 353) = v9;
    *(_QWORD *)(v0 + 944) = v8;
    *(_QWORD *)(v0 + 936) = v7;
    *(_QWORD *)(v0 + 584) = v7;
    *(_QWORD *)(v0 + 592) = v8;
    *(_QWORD *)(v0 + 600) = v9;
    *(_QWORD *)(v0 + 608) = 0;
    *(_QWORD *)(v0 + 624) = 0;
    *(_QWORD *)(v0 + 616) = 0;
    *(_BYTE *)(v0 + 632) = 2;
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 952) = v2;
    v3 = sub_23BDBEB88;
    goto LABEL_10;
  }
  sub_23BDBAD68(*(_QWORD *)(v0 + 928), v0 + 680);
  sub_23BDC2FD4(v0 + 680, v0 + 640);
  if (*(unsigned __int8 *)(v0 + 672) != 255)
  {
    sub_23BD6B22C(v0 + 640, v0 + 720);
    sub_23BD6B22C(v0 + 720, v0 + 760);
    if ((*(_BYTE *)(v0 + 792) & 1) == 0)
    {
      v7 = *(_QWORD *)(v0 + 760);
      v8 = *(_QWORD *)(v0 + 768);
      swift_bridgeObjectRelease();
      v9 = 2;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 528) = 5;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_QWORD *)(v0 + 568) = 0;
  *(_BYTE *)(v0 + 576) = 3;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 960) = v2;
  v3 = sub_23BDBEBF4;
LABEL_10:
  *v2 = v0;
  v2[1] = v3;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBEB88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(*v0 + 944);
  v2 = *(_QWORD *)(*v0 + 936);
  v3 = *v0;
  v4 = *(_BYTE *)(v3 + 353);
  swift_task_dealloc();
  sub_23BD589A8(v2, v1, v4);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_23BDBEBF4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BDBEC3C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBEC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)();

  v1 = *(unsigned __int8 *)(v0 + 840);
  *(_BYTE *)(v0 + 354) = v1;
  if (v1 == 255)
  {
    *(_QWORD *)(v0 + 472) = 5;
    *(_OWORD *)(v0 + 480) = 0u;
    *(_OWORD *)(v0 + 496) = 0u;
    *(_QWORD *)(v0 + 512) = 0;
    *(_BYTE *)(v0 + 520) = 3;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1000) = v4;
    v5 = sub_23BDBEDC8;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v0 + 976) = v2;
    v3 = *(_QWORD *)(v0 + 824);
    *(_QWORD *)(v0 + 984) = v3;
    *(_QWORD *)(v0 + 304) = v3;
    *(_QWORD *)(v0 + 312) = v2;
    *(_QWORD *)(v0 + 320) = v1;
    *(_QWORD *)(v0 + 328) = 0;
    *(_QWORD *)(v0 + 336) = 0;
    *(_QWORD *)(v0 + 344) = 0;
    *(_BYTE *)(v0 + 352) = 2;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 992) = v4;
    v5 = sub_23BDBED5C;
  }
  *v4 = v0;
  v4[1] = v5;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBED5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(*v0 + 984);
  v2 = *(_QWORD *)(*v0 + 976);
  v3 = *v0;
  v4 = *(_BYTE *)(v3 + 354);
  swift_task_dealloc();
  sub_23BDC301C(v1, v2, v4);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_23BDBEDC8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23BDBEE10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 888);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  MEMORY[0x242611E88](v1);
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 888);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = sub_23BDCE048();
    *(_QWORD *)(v0 + 848) = sub_23BD6E4F0(v9, v10, &v13);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardToastPresentationFeature] Failed to fetch award toast kind with error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    MEMORY[0x242611E7C](*(_QWORD *)(v0 + 888));
    MEMORY[0x242611E7C](v6);
  }

  *(_QWORD *)(v0 + 416) = 4;
  *(_QWORD *)(v0 + 456) = 0;
  *(_OWORD *)(v0 + 424) = 0u;
  *(_OWORD *)(v0 + 440) = 0u;
  *(_BYTE *)(v0 + 464) = 3;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1008) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v11 = v0;
  v11[1] = sub_23BDBF050;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBF050()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBF0A4()
{
  uint64_t v0;

  MEMORY[0x242611E7C](*(_QWORD *)(v0 + 888));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF0D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  sub_23BDCDDF0();
  v2[4] = sub_23BDCDDE4();
  v2[5] = sub_23BDCDDCC();
  v2[6] = v3;
  return swift_task_switch();
}

uint64_t sub_23BDBF140()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v0 + 24) + 32) + *(_QWORD *)(*(_QWORD *)(v0 + 24) + 32));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_23BDBF198;
  return v3();
}

uint64_t sub_23BDBF198(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v4;
  _QWORD *v6;

  v4 = *v2;
  v4[8] = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  v4[9] = a1;
  v6 = (_QWORD *)swift_task_alloc();
  v4[10] = (uint64_t)v6;
  *v6 = v4;
  v6[1] = sub_23BDBF23C;
  return sub_23BDBE6FC(v4[2], a1);
}

uint64_t sub_23BDBF23C()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BDBF290()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF2C4()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 72) = sub_23BDCDDF0();
  *(_QWORD *)(v0 + 80) = sub_23BDCDDE4();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_BYTE *)(v0 + 64) = 3;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v1 = v0;
  v1[1] = sub_23BDBF364;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBF364()
{
  swift_task_dealloc();
  sub_23BDCDDCC();
  return swift_task_switch();
}

uint64_t sub_23BDBF3D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  sub_23BDCDDF0();
  v3[18] = sub_23BDCDDE4();
  v3[19] = sub_23BDCDDCC();
  v3[20] = v4;
  return swift_task_switch();
}

uint64_t sub_23BDBF444()
{
  uint64_t v0;
  _OWORD *v1;
  int *v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v1 = *(_OWORD **)(v0 + 136);
  v2 = *(int **)(*(_QWORD *)(v0 + 128) + 112);
  v4 = v1[1];
  v3 = v1[2];
  *(_OWORD *)(v0 + 72) = *v1;
  *(_OWORD *)(v0 + 88) = v4;
  *(_OWORD *)(v0 + 104) = v3;
  v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  *v5 = v0;
  v5[1] = sub_23BDBF4BC;
  return v7(v0 + 72);
}

uint64_t sub_23BDBF4BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  *(_QWORD *)(v2 + 16) = 6;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 184) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v4 = v2;
  v4[1] = sub_23BDBF58C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBF58C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBF5D8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF60C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF640(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 209) = a4;
  *(_QWORD *)(v5 + 400) = a3;
  *(_QWORD *)(v5 + 408) = a5;
  *(_QWORD *)(v5 + 384) = a1;
  *(_QWORD *)(v5 + 392) = a2;
  sub_23BDCDDF0();
  *(_QWORD *)(v5 + 416) = sub_23BDCDDE4();
  *(_QWORD *)(v5 + 424) = sub_23BDCDDCC();
  *(_QWORD *)(v5 + 432) = v6;
  return swift_task_switch();
}

uint64_t sub_23BDBF6B4()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_OWORD **)(v0 + 408);
  v3 = *(_BYTE *)(v0 + 209);
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v0 + 352) = v2;
  *(_BYTE *)(v0 + 360) = v3;
  *(_OWORD *)(v0 + 16) = *v1;
  v4 = v1[4];
  v6 = v1[1];
  v5 = v1[2];
  *(_OWORD *)(v0 + 64) = v1[3];
  *(_OWORD *)(v0 + 80) = v4;
  *(_OWORD *)(v0 + 32) = v6;
  *(_OWORD *)(v0 + 48) = v5;
  v7 = v1[8];
  v9 = v1[5];
  v8 = v1[6];
  *(_OWORD *)(v0 + 128) = v1[7];
  *(_OWORD *)(v0 + 144) = v7;
  *(_OWORD *)(v0 + 96) = v9;
  *(_OWORD *)(v0 + 112) = v8;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 440) = v10;
  *v10 = v0;
  v10[1] = sub_23BDBF754;
  return sub_23BD57B14(v0 + 272, (_OWORD *)(v0 + 16));
}

uint64_t sub_23BDBF754()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBF7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 456) = v1;
  *(_QWORD *)(v0 + 464) = v3;
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 472) = v5;
  *(_QWORD *)(v0 + 480) = v6;
  *(_QWORD *)(v0 + 160) = v1;
  *(_QWORD *)(v0 + 168) = v2;
  *(_QWORD *)(v0 + 176) = v3;
  *(_QWORD *)(v0 + 184) = v4;
  *(_QWORD *)(v0 + 192) = v5;
  *(_QWORD *)(v0 + 200) = v6;
  *(_BYTE *)(v0 + 208) = 1;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 488) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v7 = v0;
  v7[1] = sub_23BDBF854;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBF854()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23BDBF8D8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF90C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDBF958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 448);
  swift_release();
  MEMORY[0x242611E7C](v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDBF998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 448);
  v2 = sub_23BDCD628();
  __swift_project_value_buffer(v2, (uint64_t)qword_256AAF4B0);
  MEMORY[0x242611E88](v1);
  MEMORY[0x242611E88](v1);
  v3 = sub_23BDCD610();
  v4 = sub_23BDCDE38();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 448);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = sub_23BDCE048();
    *(_QWORD *)(v0 + 368) = sub_23BD6E4F0(v9, v10, &v13);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    MEMORY[0x242611E7C](v6);
    MEMORY[0x242611E7C](v6);
    _os_log_impl(&dword_23BD56000, v3, v4, "[AwardToastPresentationFeature] Failed to fetch award toast detail with error %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    MEMORY[0x242611E7C](*(_QWORD *)(v0 + 448));
    MEMORY[0x242611E7C](v6);
  }

  *(_QWORD *)(v0 + 216) = 3;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_QWORD *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 264) = 3;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v11;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB40);
  *v11 = v0;
  v11[1] = sub_23BDBF90C;
  return sub_23BDCDCAC();
}

uint64_t sub_23BDBFBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t State;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  State = type metadata accessor for AwardProgressLoadState();
  MEMORY[0x24BDAC7A8](State);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a4 + *(int *)(type metadata accessor for AwardToastPresentationFeature() + 20);
  v10 = sub_23BDCD58C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  swift_storeEnumTagMultiPayload();
  LOBYTE(v9) = _s13FitnessAwards22AwardProgressLoadStateO2eeoiySbAC_ACtFZ_0(a3, (uint64_t)v8);
  sub_23BD59BB4((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
  return v9 & 1;
}

uint64_t sub_23BDBFCA4(uint64_t a1, uint64_t a2)
{
  return _s13FitnessAwards29AwardToastPresentationFeatureV7dispose10localState06sharedI0y8DataFlow05EmptyI0V_AA0cdeI0VztF_0(a2);
}

uint64_t sub_23BDBFCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = v2;
  return swift_task_switch();
}

uint64_t sub_23BDBFCC8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(v0[4] + 48) + *(_QWORD *)(v0[4] + 48));
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = v1;
  *v1 = v0;
  v1[1] = sub_23BDBFD28;
  return v3(v0[3]);
}

uint64_t sub_23BDBFD28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 48) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_23BDBFD9C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136315138;
    sub_23BD95EDC();
    swift_bridgeObjectRetain();
    v6 = sub_23BDCDE20();
    v8 = v7;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v8, &v10);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastPresentationFeature] Fetched personalizedAwardProgressUpdates %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v5, -1, -1);
    MEMORY[0x242611FFC](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

uint64_t sub_23BDBFF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

uint64_t sub_23BDBFF9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v0 + 48) + 64) + *(_QWORD *)(*(_QWORD *)(v0 + 48) + 64));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_23BDBFFF4;
  return v3();
}

uint64_t sub_23BDBFFF4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 64) = a1;
  *(_BYTE *)(v4 + 25) = a2;
  swift_task_dealloc();
  if (v2)
    MEMORY[0x242611E7C](v2);
  return swift_task_switch();
}

uint64_t sub_23BDC006C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v0 + 25);
    v5 = *(_QWORD *)(v0 + 64);
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v14 = v7;
    *(_QWORD *)(v0 + 16) = v5;
    *(_BYTE *)(v0 + 24) = v4 & 1;
    v8 = sub_23BDCDD78();
    *(_QWORD *)(v0 + 32) = sub_23BD6E4F0(v8, v9, &v14);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardToastPresentationFeature] Found a weeklyStreakNotification %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v7, -1, -1);
    MEMORY[0x242611FFC](v6, -1, -1);
  }

  if ((*(_BYTE *)(v0 + 25) & 1) != 0)
  {
    v12 = *(_QWORD **)(v0 + 40);
    *v12 = 0;
    v12[1] = 0;
    v10 = 3;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD **)(v0 + 40);
    *v11 = *(_QWORD *)(v0 + 64);
    v11[1] = 0;
  }
  *(_BYTE *)(*(_QWORD *)(v0 + 40) + 16) = v10;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23BDC023C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 40);
  *v1 = 0;
  v1[1] = 0;
  *(_BYTE *)(*(_QWORD *)(v0 + 40) + 16) = -1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_23BDC0258()
{
  unint64_t result;

  result = qword_256AAFA20;
  if (!qword_256AAFA20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD84D0, &type metadata for AwardToastPresentationFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAFA20);
  }
  return result;
}

uint64_t sub_23BDC029C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardToastPresentationFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 33) & ~v2;
  sub_23BD589A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_23BDC0374(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardToastPresentationFeature() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 33) & ~v4);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23BD6F814;
  return sub_23BDBF640(a1, v5, v6, v8, v7);
}

uint64_t sub_23BDC0404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for AwardToastPresentationFeature();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v3 = v2 + *(int *)(v1 + 20);
  v4 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BDC0500(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for AwardToastPresentationFeature() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6F814;
  return sub_23BDBF3D4(a1, v6, v7);
}

uint64_t sub_23BDC058C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t State;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  __int128 v40;

  v3 = v2;
  State = type metadata accessor for AwardImageLoadState();
  v38 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB68);
  v39 = a2;
  result = sub_23BDCDEF8();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v35 = v2;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v37 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v36 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v37;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v36)
                  goto LABEL_34;
                v21 = v37[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(v8 + 56);
      v40 = *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
      v24 = *(_QWORD *)(v38 + 72);
      v25 = v23 + v24 * v19;
      if ((v39 & 1) != 0)
        sub_23BD7686C(v25, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      else
        sub_23BD594E4(v25, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      sub_23BDCE084();
      sub_23BDCE0A8();
      sub_23BDCE0A8();
      result = sub_23BDCE0B4();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17) = v40;
      result = sub_23BD7686C((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_23BDC08F4(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t State;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  State = type metadata accessor for AwardProgressLoadState();
  v42 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD988);
  v43 = a2;
  v9 = sub_23BDCDEF8();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      sub_23BD7686C(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    }
    else
    {
      sub_23BD594E4(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      swift_bridgeObjectRetain();
    }
    sub_23BDCE084();
    sub_23BDCDD90();
    result = sub_23BDCE0B4();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_23BD7686C((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

void *sub_23BDC0C74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t State;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;

  v1 = v0;
  State = type metadata accessor for AwardImageLoadState();
  v26 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB68);
  v5 = *v0;
  v6 = sub_23BDCDEEC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = *(_QWORD *)(v26 + 72) * v18;
    v21 = *(_QWORD *)(v5 + 56) + v20;
    v27 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    sub_23BD594E4(v21, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    *(_OWORD *)(*(_QWORD *)(v7 + 48) + v19) = v27;
    result = (void *)sub_23BD7686C((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23BDC0EA0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t State;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  State = type metadata accessor for AwardProgressLoadState();
  v29 = *(_QWORD *)(State - 8);
  MEMORY[0x24BDAC7A8](State);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD988);
  v5 = *v0;
  v6 = sub_23BDCDEEC();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_23BD594E4(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_23BD7686C((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23BDC10E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardToastPresentationFeature() - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6F814;
  return sub_23BDBF0D4(a1, v5);
}

uint64_t sub_23BDC1154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardToastPresentationFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23BDC1234(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(type metadata accessor for AwardToastPresentationFeature() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6F814;
  return sub_23BDBE5DC(a1, v6, v7);
}

uint64_t sub_23BDC12C0(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  State = type metadata accessor for AwardImageLoadState();
  v40 = *(_QWORD *)(State - 8);
  v9 = MEMORY[0x24BDAC7A8](State);
  v41 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v37 - v11;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB68);
  result = sub_23BDCDF04();
  v14 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v15 = 0;
  else
    v15 = *a1;
  v16 = 0;
  v17 = result + 64;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v16 << 6);
    }
    else
    {
      v20 = v16 + 1;
      if (__OFADD__(v16, 1))
        goto LABEL_40;
      if (v20 >= v39)
        return v14;
      v21 = v38[v20];
      ++v16;
      if (!v21)
      {
        v16 = v20 + 1;
        if (v20 + 1 >= v39)
          return v14;
        v21 = v38[v16];
        if (!v21)
        {
          v16 = v20 + 2;
          if (v20 + 2 >= v39)
            return v14;
          v21 = v38[v16];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              return v14;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v16 >= v39)
                  return v14;
                v21 = v38[v16];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v16 = v22;
          }
        }
      }
LABEL_24:
      v15 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v16 << 6);
    }
    v23 = (uint64_t *)(a4[6] + 16 * v19);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v40 + 72);
    sub_23BD594E4(a4[7] + v26 * v19, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    sub_23BD7686C((uint64_t)v12, v41, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    sub_23BDCE084();
    sub_23BDCE0A8();
    sub_23BDCE0A8();
    result = sub_23BDCE0B4();
    v27 = -1 << *(_BYTE *)(v14 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
    {
      v30 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v29 == v32;
        if (v29 == v32)
          v29 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v17 + 8 * v29);
      }
      while (v34 == -1);
      v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(_QWORD *)(v17 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v35 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v30);
    *v35 = v25;
    v35[1] = v24;
    result = sub_23BD7686C(v41, *(_QWORD *)(v14 + 56) + v30 * v26, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    ++*(_QWORD *)(v14 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      return v14;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23BDC1604(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t State;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  State = type metadata accessor for AwardProgressLoadState();
  v44 = *(_QWORD *)(State - 8);
  v8 = MEMORY[0x24BDAC7A8](State);
  MEMORY[0x24BDAC7A8](v8);
  v43 = (char *)&v39 - v10;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  v42 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD988);
  result = sub_23BDCDF04();
  v12 = result;
  v39 = a2;
  if (a2 < 1)
    v13 = 0;
  else
    v13 = *v40;
  v14 = 0;
  v15 = result + 64;
  v16 = v42;
  v17 = (uint64_t)v43;
  v41 = a4;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v45 = v14;
      v19 = v18 | (v14 << 6);
    }
    else
    {
      v20 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_40;
      if (v20 >= v39)
        return v12;
      v21 = v40[v20];
      v22 = v14 + 1;
      if (!v21)
      {
        v22 = v14 + 2;
        if (v14 + 2 >= v39)
          return v12;
        v21 = v40[v22];
        if (!v21)
        {
          v22 = v14 + 3;
          if (v14 + 3 >= v39)
            return v12;
          v21 = v40[v22];
          if (!v21)
          {
            v23 = v14 + 4;
            if (v14 + 4 >= v39)
              return v12;
            v21 = v40[v23];
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v22 >= v39)
                  return v12;
                v21 = v40[v22];
                ++v23;
                if (v21)
                  goto LABEL_24;
              }
            }
            v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      v13 = (v21 - 1) & v21;
      v45 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = a4[7];
    v25 = (uint64_t *)(a4[6] + 16 * v19);
    v26 = *v25;
    v27 = v25[1];
    v28 = *(_QWORD *)(v44 + 72);
    sub_23BD594E4(v24 + v28 * v19, v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    sub_23BD7686C(v17, v16, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    sub_23BDCE084();
    swift_bridgeObjectRetain();
    sub_23BDCDD90();
    result = sub_23BDCE0B4();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6))) != 0)
    {
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v16 = v42;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v29) >> 6;
      v16 = v42;
      do
      {
        if (++v31 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v31 == v34;
        if (v31 == v34)
          v31 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v31);
      }
      while (v36 == -1);
      v32 = __clz(__rbit64(~v36)) + (v31 << 6);
    }
    *(_QWORD *)(v15 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v32;
    v37 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v32);
    *v37 = v26;
    v37[1] = v27;
    result = sub_23BD7686C(v16, *(_QWORD *)(v12 + 56) + v32 * v28, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v41;
    v14 = v45;
    if (!a3)
      return v12;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23BDC1960(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardToastPresentationFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_23BDC1AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardToastPresentationFeature() - 8) + 80);
  v5 = v1 + ((v4 + 16) & ~v4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23BD6EBF8;
  return sub_23BDBDF44(a1, v5);
}

uint64_t sub_23BDC1B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  _QWORD v14[2];
  char v15;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case -5:
      if (v7 != 251)
        goto LABEL_13;
      sub_23BDC2E68(*(_QWORD *)a1, v2, 251);
      v8 = v6;
      v9 = v5;
      v10 = -5;
      goto LABEL_15;
    case -4:
      if (v7 != 252)
        goto LABEL_13;
      sub_23BDC2E68(*(_QWORD *)a1, v2, 252);
      v8 = v6;
      v9 = v5;
      v10 = -4;
      goto LABEL_15;
    case -3:
      if (v7 != 253)
        goto LABEL_13;
      sub_23BDC2E68(*(_QWORD *)a1, v2, 253);
      v8 = v6;
      v9 = v5;
      v10 = -3;
      goto LABEL_15;
    case -2:
      if (v7 != 254)
        goto LABEL_13;
      sub_23BDC2E68(*(_QWORD *)a1, v2, 254);
      v8 = v6;
      v9 = v5;
      v10 = -2;
      goto LABEL_15;
    case -1:
      if (v7 != 255)
        goto LABEL_13;
      sub_23BDC2E68(*(_QWORD *)a1, v2, 255);
      v8 = v6;
      v9 = v5;
      v10 = -1;
LABEL_15:
      sub_23BDC2E68(v8, v9, v10);
      v12 = 1;
      break;
    default:
      if (v7 > 0xFA)
      {
LABEL_13:
        sub_23BDC2E54(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
        sub_23BDC2E54(v3, v2, v4);
        sub_23BDC2E68(v3, v2, v4);
        sub_23BDC2E68(v6, v5, v7);
        v12 = 0;
      }
      else
      {
        v14[0] = *(_QWORD *)a1;
        v14[1] = v2;
        v15 = v4;
        sub_23BDC2E54(v6, v5, v7);
        sub_23BDC2E54(v3, v2, v4);
        sub_23BDC2E54(v6, v5, v7);
        sub_23BDC2E54(v3, v2, v4);
        _s13FitnessAwards14AwardToastKindO2eeoiySbAC_ACtFZ_0((uint64_t)v14);
        v12 = v11;
        sub_23BDC2E68(v3, v2, v4);
        sub_23BDC2E68(v6, v5, v7);
        sub_23BDC2E68(v6, v5, v7);
        sub_23BDC2E68(v3, v2, v4);
      }
      break;
  }
  return v12 & 1;
}

uint64_t sub_23BDC1D6C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  __int128 v6;

  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v4 = *(_QWORD *)(a3 + 48) + 40 * result;
    v5 = *(_BYTE *)(v4 + 32);
    v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v4;
    *(_OWORD *)(a4 + 16) = v6;
    *(_BYTE *)(a4 + 32) = v5;
    return result;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_23BDC1DD4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, char *))
{
  uint64_t State;
  uint64_t result;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, char *);

  v24 = a2;
  v30 = a4;
  v25 = a1;
  State = type metadata accessor for AwardProgressLoadState();
  v29 = *(_QWORD *)(State - 8);
  result = MEMORY[0x24BDAC7A8](State);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 64);
  v26 = 0;
  v27 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v28 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v28)
      return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
    v20 = *(_QWORD *)(v27 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v28)
        return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
      v20 = *(_QWORD *)(v27 + 8 * v9);
      if (!v20)
      {
        v9 = v19 + 2;
        if (v19 + 2 >= v28)
          return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
        v20 = *(_QWORD *)(v27 + 8 * v9);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v13 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_5:
    v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v15);
    v17 = *v16;
    v18 = v16[1];
    sub_23BD594E4(*(_QWORD *)(a3 + 56) + *(_QWORD *)(v29 + 72) * v15, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    swift_bridgeObjectRetain();
    LOBYTE(v17) = v30(v17, v18, v8);
    sub_23BD59BB4((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    result = swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v26++, 1))
      {
        __break(1u);
        return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v28)
    return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
  v20 = *(_QWORD *)(v27 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v28)
      return sub_23BDC1604(v25, v24, v26, (_QWORD *)a3);
    v20 = *(_QWORD *)(v27 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23BDC2028(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_23BDC1DD4((_QWORD *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_23BDC1DD4((unint64_t *)v11, v8, v6, a2);
    MEMORY[0x242611FFC](v11, -1, -1);
  }
  return a3;
}

uint64_t _s13FitnessAwards29AwardToastPresentationFeatureV7dispose10localState06sharedI0y8DataFlow05EmptyI0V_AA0cdeI0VztF_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t State;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  State = type metadata accessor for AwardToastLoadState();
  MEMORY[0x24BDAC7A8](State);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_23BDCD58C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a1 + *(int *)(type metadata accessor for AwardToastPresentationState() + 28);
  sub_23BD594E4(v10, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
  if (swift_getEnumCaseMultiPayload())
  {
    v11 = sub_23BD59BB4((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v5, v6);
    type metadata accessor for AwardToastPresentationFeature();
    v12 = sub_23BDCD574();
    v11 = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    if ((v12 & 1) != 0)
    {
      sub_23BD59BB4(v10, (uint64_t (*)(_QWORD))type metadata accessor for AwardToastLoadState);
      v11 = swift_storeEnumTagMultiPayload();
    }
  }
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)&v16[-16] = v1;
  v13 = swift_bridgeObjectRetain();
  v14 = sub_23BDC2028(v13, (uint64_t (*)(uint64_t, uint64_t, char *))sub_23BDC2E7C, (uint64_t)&v16[-32]);
  swift_bridgeObjectRelease();
  sub_23BDBA7C4(v14, a1);
  return swift_release();
}

unint64_t sub_23BDC2370()
{
  unint64_t result;

  result = qword_256AAFA90;
  if (!qword_256AAFA90)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastPresentationAction, &type metadata for AwardToastPresentationAction);
    atomic_store(result, (unint64_t *)&qword_256AAFA90);
  }
  return result;
}

unint64_t sub_23BDC23B8()
{
  unint64_t result;

  result = qword_256AAFA98;
  if (!qword_256AAFA98)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastPresentationAction, &type metadata for AwardToastPresentationAction);
    atomic_store(result, (unint64_t *)&qword_256AAFA98);
  }
  return result;
}

unint64_t sub_23BDC2400()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAFAA0;
  if (!qword_256AAFAA0)
  {
    v1 = type metadata accessor for AwardToastPresentationState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastPresentationState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAFAA0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AwardToastPresentationFeature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    v6 = a2[17];
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    *(_QWORD *)(a1 + 136) = v6;
    v10 = sub_23BDCD58C();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for AwardToastPresentationFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23BDCD58C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AwardToastPresentationFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v5 = *(int *)(a3 + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_QWORD *)(a1 + 136) = v4;
  v8 = sub_23BDCD58C();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for AwardToastPresentationFeature(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_retain();
  swift_release();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain();
  swift_release();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_retain();
  swift_release();
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  swift_retain();
  swift_release();
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  swift_retain();
  swift_release();
  v12 = a2[13];
  a1[12] = a2[12];
  a1[13] = v12;
  swift_retain();
  swift_release();
  v13 = a2[15];
  a1[14] = a2[14];
  a1[15] = v13;
  swift_retain();
  swift_release();
  v14 = a2[17];
  a1[16] = a2[16];
  a1[17] = v14;
  swift_retain();
  swift_release();
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

_OWORD *initializeWithTake for AwardToastPresentationFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  a1[8] = a2[8];
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[1];
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *a1 = *a2;
  a1[1] = v7;
  v11 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

_OWORD *assignWithTake for AwardToastPresentationFeature(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  a1[4] = a2[4];
  swift_release();
  a1[5] = a2[5];
  swift_release();
  a1[6] = a2[6];
  swift_release();
  a1[7] = a2[7];
  swift_release();
  a1[8] = a2[8];
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23BDCD58C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDC2A20(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BDC2AA8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BDC2B1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for AwardToastPresentationFeature.TaskIdentifier(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 <= 3)
    return sub_23BD589A8(*(_QWORD *)result, *(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t _s13FitnessAwards29AwardToastPresentationFeatureV14TaskIdentifierOwCP_0(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 3)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  }
  else
  {
    v4 = *a2;
    v5 = a2[1];
    sub_23BD61430(*a2, v5, v3);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = v3;
  }
  return a1;
}

uint64_t assignWithCopy for AwardToastPresentationFeature.TaskIdentifier(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v4 > 3)
  {
    if (v5 <= 3)
    {
      v12 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      sub_23BD61430(*(_QWORD *)a2, v11, v5);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 16) = v5;
      return a1;
    }
LABEL_7:
    v13 = *a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)a1 = v13;
    return a1;
  }
  if (v5 > 3)
  {
    sub_23BD589A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  sub_23BD61430(*(_QWORD *)a2, v6, v5);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  v10 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD589A8(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AwardToastPresentationFeature.TaskIdentifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 > 3)
    goto LABEL_5;
  v5 = *(unsigned __int8 *)(a2 + 16);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  if (v5 > 3)
  {
    sub_23BD589A8(v6, v7, v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v5;
  sub_23BD589A8(v6, v7, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastPresentationFeature.TaskIdentifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 3)
    v4 = (v3 ^ 0xFF) + 1;
  else
    v4 = 0;
  if (v4 >= 6)
    return v4 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AwardToastPresentationFeature.TaskIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -5 - a2;
  }
  return result;
}

uint64_t sub_23BDC2DC0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 3)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_23BDC2DD4(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastPresentationFeature.TaskIdentifier()
{
  return &type metadata for AwardToastPresentationFeature.TaskIdentifier;
}

unint64_t sub_23BDC2E10()
{
  unint64_t result;

  result = qword_256AAFB38;
  if (!qword_256AAFB38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD84A8, &type metadata for AwardToastPresentationFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAFB38);
  }
  return result;
}

uint64_t sub_23BDC2E54(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFAu)
    return sub_23BD61430(a1, a2, a3);
  return a1;
}

uint64_t sub_23BDC2E68(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFAu)
    return sub_23BD589A8(a1, a2, a3);
  return a1;
}

uint64_t sub_23BDC2E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23BDBFBD0(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_23BDC2E84(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23BDC2F2C(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23BDC2FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDC301C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_23BD589A8(a1, a2, a3);
  return a1;
}

uint64_t sub_23BDC3030(uint64_t a1)
{
  sub_23BD6B728(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_23BDC3068(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDC30A0 + 4 * byte_23BDD8520[a1]))(0xD000000000000016, 0x800000023BDDA9C0);
}

uint64_t sub_23BDC30A0(uint64_t a1)
{
  return a1 - 4;
}

uint64_t sub_23BDC30E4()
{
  return 0x6570704177656976;
}

uint64_t sub_23BDC3104()
{
  unsigned __int8 *v0;

  return sub_23BDC3068(*v0);
}

uint64_t sub_23BDC310C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDC4834(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDC3130()
{
  sub_23BDC37CC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC3158()
{
  sub_23BDC37CC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC3180()
{
  sub_23BDC3964();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC31A8()
{
  sub_23BDC3964();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC31D0()
{
  sub_23BDC38DC();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC31F8()
{
  sub_23BDC38DC();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC3220()
{
  sub_23BDC3920();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC3248()
{
  sub_23BDC3920();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC3270()
{
  sub_23BDC3898();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC3298()
{
  sub_23BDC3898();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC32C0()
{
  sub_23BDC3854();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC32E8()
{
  sub_23BDC3854();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC3310()
{
  sub_23BDC3810();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC3338()
{
  sub_23BDC3810();
  return sub_23BDCE0E4();
}

uint64_t AwardDetailAction.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB70);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v42 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB78);
  v40 = *(_QWORD *)(v5 - 8);
  v41 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB80);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB88);
  v33 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v31 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB90);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFB98);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFBA0);
  v45 = *(_QWORD *)(v16 - 8);
  v46 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = *v1;
  v19 = a1[3];
  v20 = a1;
  v21 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v20, v19);
  sub_23BDC37CC();
  sub_23BDCE0CC();
  switch(v18)
  {
    case 2:
      v47 = 0;
      sub_23BDC3964();
      v22 = v46;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      goto LABEL_9;
    case 3:
      v50 = 2;
      sub_23BDC38DC();
      v26 = v31;
      v22 = v46;
      sub_23BDCDFAC();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v35);
      goto LABEL_9;
    case 4:
      v51 = 3;
      sub_23BDC3898();
      v27 = v36;
      v22 = v46;
      sub_23BDCDFAC();
      v29 = v37;
      v28 = v38;
      goto LABEL_8;
    case 5:
      v52 = 4;
      sub_23BDC3854();
      v27 = v39;
      v22 = v46;
      sub_23BDCDFAC();
      v29 = v40;
      v28 = v41;
      goto LABEL_8;
    case 6:
      v53 = 5;
      sub_23BDC3810();
      v27 = v42;
      v22 = v46;
      sub_23BDCDFAC();
      v29 = v43;
      v28 = v44;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_9:
      result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v22);
      break;
    default:
      v49 = 1;
      sub_23BDC3920();
      v23 = v46;
      sub_23BDCDFAC();
      v48 = v18 & 1;
      sub_23BD7B8AC();
      v24 = v34;
      sub_23BDCE00C();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v24);
      result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v21, v23);
      break;
  }
  return result;
}

unint64_t sub_23BDC37CC()
{
  unint64_t result;

  result = qword_256AAFBA8;
  if (!qword_256AAFBA8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8BB8, &type metadata for AwardDetailAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBA8);
  }
  return result;
}

unint64_t sub_23BDC3810()
{
  unint64_t result;

  result = qword_256AAFBB0;
  if (!qword_256AAFBB0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8B68, &type metadata for AwardDetailAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBB0);
  }
  return result;
}

unint64_t sub_23BDC3854()
{
  unint64_t result;

  result = qword_256AAFBB8;
  if (!qword_256AAFBB8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8B18, &type metadata for AwardDetailAction.RefreshSuggestedWorkoutsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBB8);
  }
  return result;
}

unint64_t sub_23BDC3898()
{
  unint64_t result;

  result = qword_256AAFBC0;
  if (!qword_256AAFBC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8AC8, &type metadata for AwardDetailAction.FetchEarnedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBC0);
  }
  return result;
}

unint64_t sub_23BDC38DC()
{
  unint64_t result;

  result = qword_256AAFBC8;
  if (!qword_256AAFBC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8A78, &type metadata for AwardDetailAction.EarnedStateFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBC8);
  }
  return result;
}

unint64_t sub_23BDC3920()
{
  unint64_t result;

  result = qword_256AAFBD0;
  if (!qword_256AAFBD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8A28, &type metadata for AwardDetailAction.EarnedStateFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBD0);
  }
  return result;
}

unint64_t sub_23BDC3964()
{
  unint64_t result;

  result = qword_256AAFBD8;
  if (!qword_256AAFBD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD89D8, &type metadata for AwardDetailAction.EarnedLoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFBD8);
  }
  return result;
}

uint64_t AwardDetailAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[6];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;

  v33 = a2;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFBE0);
  v27 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v37 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFBE8);
  v24[3] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v36 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFBF0);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v35 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFBF8);
  v24[4] = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v34 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFC00);
  v24[5] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v32 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFC08);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFC10);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  sub_23BDC37CC();
  v18 = v39;
  sub_23BDCE0C0();
  if (!v18)
  {
    v39 = v12;
    v24[1] = v10;
    v24[2] = v9;
    v19 = sub_23BDCDFA0();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v20 = sub_23BDCDEC8();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v22 = &type metadata for AwardDetailAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

uint64_t sub_23BDC4034@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AwardDetailAction.init(from:)(a1, a2);
}

uint64_t sub_23BDC4048(_QWORD *a1)
{
  return AwardDetailAction.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for AwardDetailAction(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 2)
      v7 = v6 - 1;
    else
      v7 = 0;
    if (v7 >= 6)
      return v7 - 5;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_23BDC40AC + 4 * byte_23BDD8531[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for AwardDetailAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23BDC4158 + 4 * byte_23BDD853B[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23BDC418C + 4 * byte_23BDD8536[v5]))();
}

uint64_t sub_23BDC418C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC4194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC419CLL);
  return result;
}

uint64_t sub_23BDC41A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC41B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23BDC41B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC41BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC41C8(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 2)
    return v1 - 1;
  else
    return 0;
}

_BYTE *sub_23BDC41DC(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailAction()
{
  return &type metadata for AwardDetailAction;
}

uint64_t storeEnumTagSinglePayload for AwardDetailAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BDC4248 + 4 * byte_23BDD8545[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BDC427C + 4 * byte_23BDD8540[v4]))();
}

uint64_t sub_23BDC427C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC4284(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC428CLL);
  return result;
}

uint64_t sub_23BDC4298(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC42A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BDC42A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC42AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailAction.CodingKeys()
{
  return &type metadata for AwardDetailAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardDetailAction.EarnedLoadStateClearedCodingKeys()
{
  return &type metadata for AwardDetailAction.EarnedLoadStateClearedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AwardDetailAction.EarnedStateFetchedCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23BDC4318 + 4 * byte_23BDD854A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23BDC4338 + 4 * byte_23BDD854F[v4]))();
}

_BYTE *sub_23BDC4318(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23BDC4338(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDC4340(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDC4348(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23BDC4350(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23BDC4358(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailAction.EarnedStateFetchedCodingKeys()
{
  return &type metadata for AwardDetailAction.EarnedStateFetchedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardDetailAction.EarnedStateFetchFailedCodingKeys()
{
  return &type metadata for AwardDetailAction.EarnedStateFetchFailedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardDetailAction.FetchEarnedStateCodingKeys()
{
  return &type metadata for AwardDetailAction.FetchEarnedStateCodingKeys;
}

ValueMetadata *type metadata accessor for AwardDetailAction.RefreshSuggestedWorkoutsCodingKeys()
{
  return &type metadata for AwardDetailAction.RefreshSuggestedWorkoutsCodingKeys;
}

ValueMetadata *type metadata accessor for AwardDetailAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardDetailAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BDC43B8()
{
  unint64_t result;

  result = qword_256AAFC18;
  if (!qword_256AAFC18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD88A8, &type metadata for AwardDetailAction.EarnedStateFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC18);
  }
  return result;
}

unint64_t sub_23BDC4400()
{
  unint64_t result;

  result = qword_256AAFC20;
  if (!qword_256AAFC20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD89B0, &type metadata for AwardDetailAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC20);
  }
  return result;
}

unint64_t sub_23BDC4448()
{
  unint64_t result;

  result = qword_256AAFC28;
  if (!qword_256AAFC28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD88D0, &type metadata for AwardDetailAction.EarnedLoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC28);
  }
  return result;
}

unint64_t sub_23BDC4490()
{
  unint64_t result;

  result = qword_256AAFC30;
  if (!qword_256AAFC30)
  {
    result = MEMORY[0x242611F78](&unk_23BDD88F8, &type metadata for AwardDetailAction.EarnedLoadStateClearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC30);
  }
  return result;
}

unint64_t sub_23BDC44D8()
{
  unint64_t result;

  result = qword_256AAFC38;
  if (!qword_256AAFC38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8818, &type metadata for AwardDetailAction.EarnedStateFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC38);
  }
  return result;
}

unint64_t sub_23BDC4520()
{
  unint64_t result;

  result = qword_256AAFC40;
  if (!qword_256AAFC40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8840, &type metadata for AwardDetailAction.EarnedStateFetchedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC40);
  }
  return result;
}

unint64_t sub_23BDC4568()
{
  unint64_t result;

  result = qword_256AAFC48;
  if (!qword_256AAFC48)
  {
    result = MEMORY[0x242611F78](&unk_23BDD87C8, &type metadata for AwardDetailAction.EarnedStateFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC48);
  }
  return result;
}

unint64_t sub_23BDC45B0()
{
  unint64_t result;

  result = qword_256AAFC50;
  if (!qword_256AAFC50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD87F0, &type metadata for AwardDetailAction.EarnedStateFetchFailedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC50);
  }
  return result;
}

unint64_t sub_23BDC45F8()
{
  unint64_t result;

  result = qword_256AAFC58;
  if (!qword_256AAFC58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8778, &type metadata for AwardDetailAction.FetchEarnedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC58);
  }
  return result;
}

unint64_t sub_23BDC4640()
{
  unint64_t result;

  result = qword_256AAFC60;
  if (!qword_256AAFC60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD87A0, &type metadata for AwardDetailAction.FetchEarnedStateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC60);
  }
  return result;
}

unint64_t sub_23BDC4688()
{
  unint64_t result;

  result = qword_256AAFC68;
  if (!qword_256AAFC68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8728, &type metadata for AwardDetailAction.RefreshSuggestedWorkoutsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC68);
  }
  return result;
}

unint64_t sub_23BDC46D0()
{
  unint64_t result;

  result = qword_256AAFC70;
  if (!qword_256AAFC70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8750, &type metadata for AwardDetailAction.RefreshSuggestedWorkoutsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC70);
  }
  return result;
}

unint64_t sub_23BDC4718()
{
  unint64_t result;

  result = qword_256AAFC78;
  if (!qword_256AAFC78)
  {
    result = MEMORY[0x242611F78](&unk_23BDD86D8, &type metadata for AwardDetailAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC78);
  }
  return result;
}

unint64_t sub_23BDC4760()
{
  unint64_t result;

  result = qword_256AAFC80;
  if (!qword_256AAFC80)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8700, &type metadata for AwardDetailAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC80);
  }
  return result;
}

unint64_t sub_23BDC47A8()
{
  unint64_t result;

  result = qword_256AAFC88;
  if (!qword_256AAFC88)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8920, &type metadata for AwardDetailAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC88);
  }
  return result;
}

unint64_t sub_23BDC47F0()
{
  unint64_t result;

  result = qword_256AAFC90;
  if (!qword_256AAFC90)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8948, &type metadata for AwardDetailAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFC90);
  }
  return result;
}

uint64_t sub_23BDC4834(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDA9C0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDA9E0 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023BDDAA00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023BDDAA20 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BDDAA40 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

__n128 AwardToastState.init(toastDetail:layout:isTabSelected:scrollPositionIdentifier:shouldDeepLink:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __n128 result;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = a2->n128_u64[0];
  v10 = a2->n128_u8[8];
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(_QWORD *)(a7 + 16) = v7;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a7 + 40) = v8;
  *(_QWORD *)(a7 + 48) = v9;
  *(_BYTE *)(a7 + 56) = v10;
  result = a2[1];
  *(__n128 *)(a7 + 64) = result;
  *(_BYTE *)(a7 + 80) = a3;
  *(_QWORD *)(a7 + 88) = a4;
  *(_QWORD *)(a7 + 96) = a5;
  *(_BYTE *)(a7 + 104) = a6;
  return result;
}

uint64_t AwardToastState.toastDetail.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v2 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v5;
  a1[3] = v4;
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 AwardToastState.layout.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[3].n128_u8[8];
  a1->n128_u64[0] = v1[3].n128_u64[0];
  a1->n128_u8[8] = v2;
  result = v1[4];
  a1[1] = result;
  return result;
}

uint64_t AwardToastState.isTabSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t AwardToastState.isTabSelected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*AwardToastState.isTabSelected.modify())()
{
  return nullsub_1;
}

uint64_t AwardToastState.scrollPositionIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AwardToastState.scrollPositionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*AwardToastState.scrollPositionIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t AwardToastState.shouldDeepLink.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AwardToastState.shouldDeepLink.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 104) = result;
  return result;
}

uint64_t (*AwardToastState.shouldDeepLink.modify())()
{
  return nullsub_1;
}

uint64_t sub_23BDC4BF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23BDC4C2C + 4 * byte_23BDD8C08[a1]))(0xD000000000000018, 0x800000023BDDAA60);
}

uint64_t sub_23BDC4C2C()
{
  return 0x7465447473616F74;
}

uint64_t sub_23BDC4C4C()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23BDC4C60()
{
  return 0x6C65536261547369;
}

uint64_t sub_23BDC4C84()
{
  return 0x6544646C756F6873;
}

uint64_t sub_23BDC4CA8()
{
  unsigned __int8 *v0;

  return sub_23BDC4BF4(*v0);
}

uint64_t sub_23BDC4CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDC5A50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDC4CD4()
{
  sub_23BDC4F54();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC4CFC()
{
  sub_23BDC4F54();
  return sub_23BDCE0E4();
}

uint64_t AwardToastState.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFC98);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v20 = v1[1];
  v21 = v7;
  v8 = *((_QWORD *)v1 + 4);
  v9 = *((_QWORD *)v1 + 5);
  v19 = *((_QWORD *)v1 + 6);
  v27 = *((unsigned __int8 *)v1 + 56);
  v10 = *((_QWORD *)v1 + 8);
  v11 = *((_QWORD *)v1 + 9);
  v18 = *((unsigned __int8 *)v1 + 80);
  v12 = *((_QWORD *)v1 + 11);
  v16 = *((_QWORD *)v1 + 12);
  v17 = v12;
  v15[3] = *((unsigned __int8 *)v1 + 104);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC4F54();
  sub_23BDCE0CC();
  v23 = v21;
  v24 = v20;
  v25 = v8;
  v26 = v9;
  v28 = 0;
  sub_23BD60438();
  v13 = v22;
  sub_23BDCE00C();
  if (!v13)
  {
    *(_QWORD *)&v23 = v19;
    BYTE8(v23) = v27;
    *(_QWORD *)&v24 = v10;
    *((_QWORD *)&v24 + 1) = v11;
    v28 = 1;
    sub_23BDC4F98();
    sub_23BDCE00C();
    LOBYTE(v23) = 2;
    sub_23BDCDFE8();
    LOBYTE(v23) = 3;
    sub_23BDCDFB8();
    LOBYTE(v23) = 4;
    sub_23BDCDFE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BDC4F54()
{
  unint64_t result;

  result = qword_256AAFCA0;
  if (!qword_256AAFCA0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8D7C, &type metadata for AwardToastState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFCA0);
  }
  return result;
}

unint64_t sub_23BDC4F98()
{
  unint64_t result;

  result = qword_256AAFCA8;
  if (!qword_256AAFCA8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastLayout, &type metadata for AwardToastLayout);
    atomic_store(result, (unint64_t *)&qword_256AAFCA8);
  }
  return result;
}

uint64_t AwardToastState.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCB0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC4F54();
  sub_23BDCE0C0();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v42 = 0;
    sub_23BD61258();
    sub_23BDCDF94();
    v10 = v35;
    v31 = v36;
    v32 = a2;
    v11 = v37;
    v30 = v38;
    v12 = v39;
    v13 = v40;
    v42 = 1;
    sub_23BDC53A4();
    v34 = v10;
    swift_bridgeObjectRetain();
    v33 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23BDCDF94();
    v29 = v13;
    v14 = v35;
    LODWORD(v13) = v36;
    v15 = v37;
    v16 = v38;
    LOBYTE(v35) = 2;
    HIDWORD(v27) = sub_23BDCDF70();
    v41 = v13;
    v28 = v14;
    LOBYTE(v35) = 3;
    v17 = sub_23BDCDF40();
    v19 = v18;
    LOBYTE(v35) = 4;
    swift_bridgeObjectRetain();
    LOBYTE(v10) = sub_23BDCDF70();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v20 = BYTE4(v27) & 1;
    HIDWORD(v27) = v10 & 1;
    v21 = v34;
    swift_bridgeObjectRetain();
    v22 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v31;
    v23 = v32;
    *v32 = v21;
    v23[1] = v24;
    v25 = v30;
    v23[2] = v22;
    v23[3] = v25;
    v23[4] = v12;
    v26 = v28;
    v23[5] = v29;
    v23[6] = v26;
    *((_BYTE *)v23 + 56) = v41;
    v23[8] = v15;
    v23[9] = v16;
    *((_BYTE *)v23 + 80) = v20;
    v23[11] = v17;
    v23[12] = v19;
    *((_BYTE *)v23 + 104) = BYTE4(v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_23BDC53A4()
{
  unint64_t result;

  result = qword_256AAFCB8;
  if (!qword_256AAFCB8)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardToastLayout, &type metadata for AwardToastLayout);
    atomic_store(result, (unint64_t *)&qword_256AAFCB8);
  }
  return result;
}

uint64_t sub_23BDC53E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return AwardToastState.init(from:)(a1, a2);
}

uint64_t sub_23BDC53FC(_QWORD *a1)
{
  return AwardToastState.encode(to:)(a1);
}

uint64_t _s13FitnessAwards15AwardToastStateV2eeoiySbAC_ACtFZ_0(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  char v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 5);
  v4 = *((double *)a1 + 6);
  v5 = *((_BYTE *)a1 + 56);
  v7 = *((double *)a1 + 8);
  v6 = *((double *)a1 + 9);
  v8 = *((unsigned __int8 *)a1 + 80);
  v9 = *((_QWORD *)a1 + 11);
  v10 = *((_QWORD *)a1 + 12);
  v11 = *((unsigned __int8 *)a1 + 104);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *((_QWORD *)a2 + 5);
  v15 = *((double *)a2 + 6);
  v16 = *((unsigned __int8 *)a2 + 56);
  v18 = *((double *)a2 + 8);
  v17 = *((double *)a2 + 9);
  v19 = *((unsigned __int8 *)a2 + 80);
  v21 = *((_QWORD *)a2 + 11);
  v20 = *((_QWORD *)a2 + 12);
  v22 = *((unsigned __int8 *)a2 + 104);
  v30 = *a1;
  v31 = v2;
  v32 = *(__int128 *)((char *)a1 + 24);
  v33 = v3;
  v26 = v12;
  v27 = v13;
  v28 = *(__int128 *)((char *)a2 + 24);
  v29 = v14;
  if ((_s13FitnessAwards16AwardToastDetailV2eeoiySbAC_ACtFZ_0((uint64_t)&v30, (uint64_t)&v26) & 1) == 0)
    return 0;
  result = 0;
  if ((v5 & 1) != 0)
  {
    if (!v16)
      return result;
  }
  else
  {
    if (v4 == v15)
      v24 = v16;
    else
      v24 = 1;
    if ((v24 & 1) != 0)
      return result;
  }
  if (v7 != v18 || v6 != v17 || ((v8 ^ v19) & 1) != 0)
    return result;
  if (!v10)
  {
    if (!v20)
      return v11 ^ v22 ^ 1u;
    return 0;
  }
  if (!v20)
    return 0;
  if (v9 == v21 && v10 == v20)
    return v11 ^ v22 ^ 1u;
  v25 = sub_23BDCE024();
  result = 0;
  if ((v25 & 1) != 0)
    return v11 ^ v22 ^ 1u;
  return result;
}

uint64_t destroy for AwardToastState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AwardToastState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AwardToastState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AwardToastState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for AwardToastState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardToastState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardToastState()
{
  return &type metadata for AwardToastState;
}

uint64_t storeEnumTagSinglePayload for AwardToastState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23BDC58F8 + 4 * byte_23BDD8C12[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23BDC592C + 4 * byte_23BDD8C0D[v4]))();
}

uint64_t sub_23BDC592C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC5934(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC593CLL);
  return result;
}

uint64_t sub_23BDC5948(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC5950);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23BDC5954(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC595C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardToastState.CodingKeys()
{
  return &type metadata for AwardToastState.CodingKeys;
}

unint64_t sub_23BDC597C()
{
  unint64_t result;

  result = qword_256AAFCC0;
  if (!qword_256AAFCC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8D54, &type metadata for AwardToastState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFCC0);
  }
  return result;
}

unint64_t sub_23BDC59C4()
{
  unint64_t result;

  result = qword_256AAFCC8;
  if (!qword_256AAFCC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8CC4, &type metadata for AwardToastState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFCC8);
  }
  return result;
}

unint64_t sub_23BDC5A0C()
{
  unint64_t result;

  result = qword_256AAFCD0;
  if (!qword_256AAFCD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8CEC, &type metadata for AwardToastState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFCD0);
  }
  return result;
}

uint64_t sub_23BDC5A50(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x7465447473616F74 && a2 == 0xEB000000006C6961;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C65536261547369 && a2 == 0xED00006465746365 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023BDDAA60 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6544646C756F6873 && a2 == 0xEE006B6E694C7065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

BOOL static FontStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23BDC5C98(char a1)
{
  return *(_QWORD *)&aCallout_0[8 * a1];
}

uint64_t sub_23BDC5CB8()
{
  sub_23BDC64A4();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5CE0()
{
  sub_23BDC64A4();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5D08()
{
  char *v0;

  return sub_23BDC5C98(*v0);
}

uint64_t sub_23BDC5D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDC7174(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDC5D34()
{
  sub_23BDC630C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5D5C()
{
  sub_23BDC630C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5D84()
{
  sub_23BDC6460();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5DAC()
{
  sub_23BDC6460();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5DD4()
{
  sub_23BDC641C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5DFC()
{
  sub_23BDC641C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5E24()
{
  sub_23BDC6350();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5E4C()
{
  sub_23BDC6350();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5E74()
{
  sub_23BDC63D8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5E9C()
{
  sub_23BDC63D8();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC5EC4()
{
  sub_23BDC6394();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC5EEC()
{
  sub_23BDC6394();
  return sub_23BDCE0E4();
}

void FontStyle.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[17];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCD8);
  v15[13] = *(_QWORD *)(v3 - 8);
  v15[14] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v15[12] = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCE0);
  v15[10] = *(_QWORD *)(v5 - 8);
  v15[11] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v15[9] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCE8);
  v15[7] = *(_QWORD *)(v7 - 8);
  v15[8] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[6] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCF0);
  v15[4] = *(_QWORD *)(v9 - 8);
  v15[5] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v15[3] = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFCF8);
  v15[1] = *(_QWORD *)(v11 - 8);
  v15[2] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD00);
  MEMORY[0x24BDAC7A8](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD08);
  v15[15] = *(_QWORD *)(v13 - 8);
  v15[16] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC630C();
  sub_23BDCE0CC();
  __asm { BR              X9 }
}

uint64_t sub_23BDC6148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 70) = 0;
  sub_23BDC64A4();
  v5 = *(_QWORD *)(v4 - 96);
  sub_23BDCDFAC();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

unint64_t sub_23BDC630C()
{
  unint64_t result;

  result = qword_256AAFD10;
  if (!qword_256AAFD10)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9410, &type metadata for FontStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD10);
  }
  return result;
}

unint64_t sub_23BDC6350()
{
  unint64_t result;

  result = qword_256AAFD18;
  if (!qword_256AAFD18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD93C0, &type metadata for FontStyle.SubheadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD18);
  }
  return result;
}

unint64_t sub_23BDC6394()
{
  unint64_t result;

  result = qword_256AAFD20;
  if (!qword_256AAFD20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9370, &type metadata for FontStyle.Title3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD20);
  }
  return result;
}

unint64_t sub_23BDC63D8()
{
  unint64_t result;

  result = qword_256AAFD28;
  if (!qword_256AAFD28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9320, &type metadata for FontStyle.Title2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD28);
  }
  return result;
}

unint64_t sub_23BDC641C()
{
  unint64_t result;

  result = qword_256AAFD30;
  if (!qword_256AAFD30)
  {
    result = MEMORY[0x242611F78](&unk_23BDD92D0, &type metadata for FontStyle.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD30);
  }
  return result;
}

unint64_t sub_23BDC6460()
{
  unint64_t result;

  result = qword_256AAFD38;
  if (!qword_256AAFD38)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9280, &type metadata for FontStyle.FootnoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD38);
  }
  return result;
}

unint64_t sub_23BDC64A4()
{
  unint64_t result;

  result = qword_256AAFD40;
  if (!qword_256AAFD40)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9230, &type metadata for FontStyle.CalloutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD40);
  }
  return result;
}

uint64_t FontStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  v46 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD48);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v45 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD50);
  v37 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD58);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD60);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v41 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD68);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD70);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFD78);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v47 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_23BDC630C();
  v21 = v48;
  sub_23BDCE0C0();
  if (!v21)
  {
    v29[3] = v15;
    v29[1] = v13;
    v29[2] = v12;
    v30 = v17;
    v48 = v16;
    v22 = v19;
    v23 = sub_23BDCDFA0();
    if (*(_QWORD *)(v23 + 16) == 1)
    {
      v29[0] = v23;
      __asm { BR              X9 }
    }
    v24 = sub_23BDCDEC8();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v26 = &type metadata for FontStyle;
    v27 = v48;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v22, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

void sub_23BDC68D0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v0;
  *(_BYTE *)(v5 - 69) = 1;
  sub_23BDC6460();
  v7 = *(_QWORD *)(v5 - 160);
  v8 = *(_QWORD *)(v5 - 96);
  sub_23BDCDF28();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 216) + 8))(v7, *(_QWORD *)(v5 - 208));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v8);
    *v3 = v6;
    JUMPOUT(0x23BDC68A8);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23BDC68A0);
}

uint64_t sub_23BDC6B1C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FontStyle.init(from:)(a1, a2);
}

void sub_23BDC6B30(_QWORD *a1)
{
  FontStyle.encode(to:)(a1);
}

uint64_t FontStyle.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t FontStyle.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

unint64_t sub_23BDC6BB4()
{
  unint64_t result;

  result = qword_256AAFD80;
  if (!qword_256AAFD80)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for FontStyle, &type metadata for FontStyle);
    atomic_store(result, (unint64_t *)&qword_256AAFD80);
  }
  return result;
}

ValueMetadata *type metadata accessor for FontStyle()
{
  return &type metadata for FontStyle;
}

uint64_t _s13FitnessAwards9FontStyleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23BDC6C5C + 4 * byte_23BDD8DE1[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23BDC6C90 + 4 * byte_23BDD8DDC[v4]))();
}

uint64_t sub_23BDC6C90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC6C98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC6CA0);
  return result;
}

uint64_t sub_23BDC6CAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC6CB4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23BDC6CB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC6CC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FontStyle.CodingKeys()
{
  return &type metadata for FontStyle.CodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.CalloutCodingKeys()
{
  return &type metadata for FontStyle.CalloutCodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.FootnoteCodingKeys()
{
  return &type metadata for FontStyle.FootnoteCodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.HeadlineCodingKeys()
{
  return &type metadata for FontStyle.HeadlineCodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.Title2CodingKeys()
{
  return &type metadata for FontStyle.Title2CodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.Title3CodingKeys()
{
  return &type metadata for FontStyle.Title3CodingKeys;
}

ValueMetadata *type metadata accessor for FontStyle.SubheadlineCodingKeys()
{
  return &type metadata for FontStyle.SubheadlineCodingKeys;
}

unint64_t sub_23BDC6D40()
{
  unint64_t result;

  result = qword_256AAFD88;
  if (!qword_256AAFD88)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9208, &type metadata for FontStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD88);
  }
  return result;
}

unint64_t sub_23BDC6D88()
{
  unint64_t result;

  result = qword_256AAFD90;
  if (!qword_256AAFD90)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9128, &type metadata for FontStyle.CalloutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD90);
  }
  return result;
}

unint64_t sub_23BDC6DD0()
{
  unint64_t result;

  result = qword_256AAFD98;
  if (!qword_256AAFD98)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9150, &type metadata for FontStyle.CalloutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFD98);
  }
  return result;
}

unint64_t sub_23BDC6E18()
{
  unint64_t result;

  result = qword_256AAFDA0;
  if (!qword_256AAFDA0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD90D8, &type metadata for FontStyle.FootnoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDA0);
  }
  return result;
}

unint64_t sub_23BDC6E60()
{
  unint64_t result;

  result = qword_256AAFDA8;
  if (!qword_256AAFDA8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9100, &type metadata for FontStyle.FootnoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDA8);
  }
  return result;
}

unint64_t sub_23BDC6EA8()
{
  unint64_t result;

  result = qword_256AAFDB0;
  if (!qword_256AAFDB0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9088, &type metadata for FontStyle.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDB0);
  }
  return result;
}

unint64_t sub_23BDC6EF0()
{
  unint64_t result;

  result = qword_256AAFDB8;
  if (!qword_256AAFDB8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD90B0, &type metadata for FontStyle.HeadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDB8);
  }
  return result;
}

unint64_t sub_23BDC6F38()
{
  unint64_t result;

  result = qword_256AAFDC0;
  if (!qword_256AAFDC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9038, &type metadata for FontStyle.Title2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDC0);
  }
  return result;
}

unint64_t sub_23BDC6F80()
{
  unint64_t result;

  result = qword_256AAFDC8;
  if (!qword_256AAFDC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9060, &type metadata for FontStyle.Title2CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDC8);
  }
  return result;
}

unint64_t sub_23BDC6FC8()
{
  unint64_t result;

  result = qword_256AAFDD0;
  if (!qword_256AAFDD0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8FE8, &type metadata for FontStyle.Title3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDD0);
  }
  return result;
}

unint64_t sub_23BDC7010()
{
  unint64_t result;

  result = qword_256AAFDD8;
  if (!qword_256AAFDD8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9010, &type metadata for FontStyle.Title3CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDD8);
  }
  return result;
}

unint64_t sub_23BDC7058()
{
  unint64_t result;

  result = qword_256AAFDE0;
  if (!qword_256AAFDE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8F98, &type metadata for FontStyle.SubheadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDE0);
  }
  return result;
}

unint64_t sub_23BDC70A0()
{
  unint64_t result;

  result = qword_256AAFDE8;
  if (!qword_256AAFDE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD8FC0, &type metadata for FontStyle.SubheadlineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDE8);
  }
  return result;
}

unint64_t sub_23BDC70E8()
{
  unint64_t result;

  result = qword_256AAFDF0;
  if (!qword_256AAFDF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9178, &type metadata for FontStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDF0);
  }
  return result;
}

unint64_t sub_23BDC7130()
{
  unint64_t result;

  result = qword_256AAFDF8;
  if (!qword_256AAFDF8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD91A0, &type metadata for FontStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFDF8);
  }
  return result;
}

uint64_t sub_23BDC7174(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x74756F6C6C6163 && a2 == 0xE700000000000000;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746F6E746F6F66 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E696C64616568 && a2 == 0xE800000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x32656C746974 && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x33656C746974 && a2 == 0xE600000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C64616568627573 && a2 == 0xEB00000000656E69)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

BOOL static AwardLockupAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AwardLockupAction.hash(into:)()
{
  return sub_23BDCE090();
}

uint64_t sub_23BDC740C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6570704177656976;
  else
    return 0x707061546D657469;
}

uint64_t sub_23BDC7450()
{
  char *v0;

  return sub_23BDC740C(*v0);
}

uint64_t sub_23BDC7458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDC7F10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDC747C()
{
  sub_23BDC7784();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC74A4()
{
  sub_23BDC7784();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC74CC()
{
  sub_23BDC780C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC74F4()
{
  sub_23BDC780C();
  return sub_23BDCE0E4();
}

uint64_t sub_23BDC751C()
{
  sub_23BDC77C8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC7544()
{
  sub_23BDC77C8();
  return sub_23BDCE0E4();
}

uint64_t AwardLockupAction.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE090();
  return sub_23BDCE0B4();
}

uint64_t AwardLockupAction.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE00);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE08);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE10);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC7784();
  sub_23BDCE0CC();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23BDC77C8();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23BDC780C();
    sub_23BDCDFAC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23BDC7784()
{
  unint64_t result;

  result = qword_256AAFE18;
  if (!qword_256AAFE18)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9800, &type metadata for AwardLockupAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE18);
  }
  return result;
}

unint64_t sub_23BDC77C8()
{
  unint64_t result;

  result = qword_256AAFE20;
  if (!qword_256AAFE20)
  {
    result = MEMORY[0x242611F78](&unk_23BDD97B0, &type metadata for AwardLockupAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE20);
  }
  return result;
}

unint64_t sub_23BDC780C()
{
  unint64_t result;

  result = qword_256AAFE28;
  if (!qword_256AAFE28)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9760, &type metadata for AwardLockupAction.ItemTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE28);
  }
  return result;
}

uint64_t AwardLockupAction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE30);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE38);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE40);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC7784();
  v11 = v33;
  sub_23BDCE0C0();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23BDCDFA0();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23BDCDEC8();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD210);
    *v21 = &type metadata for AwardLockupAction;
    sub_23BDCDF34();
    sub_23BDCDEBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23BDC77C8();
    sub_23BDCDF28();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23BDC780C();
    v22 = v6;
    sub_23BDCDF28();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

unint64_t sub_23BDC7BAC()
{
  unint64_t result;

  result = qword_256AAFE48;
  if (!qword_256AAFE48)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardLockupAction, &type metadata for AwardLockupAction);
    atomic_store(result, (unint64_t *)&qword_256AAFE48);
  }
  return result;
}

uint64_t sub_23BDC7BF0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AwardLockupAction.init(from:)(a1, a2);
}

uint64_t sub_23BDC7C04(_QWORD *a1)
{
  return AwardLockupAction.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AwardLockupAction()
{
  return &type metadata for AwardLockupAction;
}

uint64_t _s13FitnessAwards17AwardLockupActionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDC7C78 + 4 * byte_23BDD94D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDC7CAC + 4 * byte_23BDD94D0[v4]))();
}

uint64_t sub_23BDC7CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC7CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC7CBCLL);
  return result;
}

uint64_t sub_23BDC7CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC7CD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDC7CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC7CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardLockupAction.CodingKeys()
{
  return &type metadata for AwardLockupAction.CodingKeys;
}

ValueMetadata *type metadata accessor for AwardLockupAction.ItemTappedCodingKeys()
{
  return &type metadata for AwardLockupAction.ItemTappedCodingKeys;
}

ValueMetadata *type metadata accessor for AwardLockupAction.ViewAppearedCodingKeys()
{
  return &type metadata for AwardLockupAction.ViewAppearedCodingKeys;
}

unint64_t sub_23BDC7D1C()
{
  unint64_t result;

  result = qword_256AAFE50;
  if (!qword_256AAFE50)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9738, &type metadata for AwardLockupAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE50);
  }
  return result;
}

unint64_t sub_23BDC7D64()
{
  unint64_t result;

  result = qword_256AAFE58;
  if (!qword_256AAFE58)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9658, &type metadata for AwardLockupAction.ItemTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE58);
  }
  return result;
}

unint64_t sub_23BDC7DAC()
{
  unint64_t result;

  result = qword_256AAFE60;
  if (!qword_256AAFE60)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9680, &type metadata for AwardLockupAction.ItemTappedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE60);
  }
  return result;
}

unint64_t sub_23BDC7DF4()
{
  unint64_t result;

  result = qword_256AAFE68;
  if (!qword_256AAFE68)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9608, &type metadata for AwardLockupAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE68);
  }
  return result;
}

unint64_t sub_23BDC7E3C()
{
  unint64_t result;

  result = qword_256AAFE70;
  if (!qword_256AAFE70)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9630, &type metadata for AwardLockupAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE70);
  }
  return result;
}

unint64_t sub_23BDC7E84()
{
  unint64_t result;

  result = qword_256AAFE78;
  if (!qword_256AAFE78)
  {
    result = MEMORY[0x242611F78](&unk_23BDD96A8, &type metadata for AwardLockupAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE78);
  }
  return result;
}

unint64_t sub_23BDC7ECC()
{
  unint64_t result;

  result = qword_256AAFE80;
  if (!qword_256AAFE80)
  {
    result = MEMORY[0x242611F78](&unk_23BDD96D0, &type metadata for AwardLockupAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE80);
  }
  return result;
}

uint64_t sub_23BDC7F10(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x707061546D657469 && a2 == 0xEA00000000006465;
  if (v3 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AwardRemoteParticipantStatusMonitorEnvironment.init(makeRemoteBrowsingIdentityUpdatedStream:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for AwardRemoteParticipantStatusMonitorEnvironment()
{
  return &type metadata for AwardRemoteParticipantStatusMonitorEnvironment;
}

BOOL static AwardDetailLayout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

FitnessAwards::AwardDetailLayout __swiftcall AwardDetailLayout.init(ignoresTopSafeArea:isScrollable:)(Swift::Bool ignoresTopSafeArea, Swift::Bool isScrollable)
{
  Swift::Bool *v2;
  FitnessAwards::AwardDetailLayout result;

  *v2 = ignoresTopSafeArea;
  v2[1] = isScrollable;
  result.ignoresTopSafeArea = ignoresTopSafeArea;
  return result;
}

uint64_t AwardDetailLayout.ignoresTopSafeArea.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AwardDetailLayout.isScrollable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_23BDC806C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6C6C6F7263537369;
  else
    return 0xD000000000000012;
}

uint64_t sub_23BDC80B0()
{
  char *v0;

  return sub_23BDC806C(*v0);
}

uint64_t sub_23BDC80B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDC8918(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDC80DC()
{
  sub_23BDC824C();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDC8104()
{
  sub_23BDC824C();
  return sub_23BDCE0E4();
}

uint64_t AwardDetailLayout.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE88);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC824C();
  sub_23BDCE0CC();
  v12 = 0;
  sub_23BDCDFE8();
  if (!v2)
  {
    v11 = 1;
    sub_23BDCDFE8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23BDC824C()
{
  unint64_t result;

  result = qword_256AAFE90;
  if (!qword_256AAFE90)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9A38, &type metadata for AwardDetailLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFE90);
  }
  return result;
}

uint64_t AwardDetailLayout.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFE98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDC824C();
  sub_23BDCE0C0();
  if (!v2)
  {
    v14 = 0;
    v9 = sub_23BDCDF70();
    v13 = 1;
    v10 = sub_23BDCDF70();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
    a2[1] = v10 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23BDC83E4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AwardDetailLayout.init(from:)(a1, a2);
}

uint64_t sub_23BDC83F8(_QWORD *a1)
{
  return AwardDetailLayout.encode(to:)(a1);
}

uint64_t AwardDetailLayout.hash(into:)()
{
  sub_23BDCE09C();
  return sub_23BDCE09C();
}

uint64_t AwardDetailLayout.hashValue.getter()
{
  sub_23BDCE084();
  sub_23BDCE09C();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDC84A4()
{
  sub_23BDCE084();
  sub_23BDCE09C();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

uint64_t sub_23BDC8500()
{
  sub_23BDCE09C();
  return sub_23BDCE09C();
}

uint64_t sub_23BDC853C()
{
  sub_23BDCE084();
  sub_23BDCE09C();
  sub_23BDCE09C();
  return sub_23BDCE0B4();
}

unint64_t sub_23BDC8598()
{
  unint64_t result;

  result = qword_256AAFEA0;
  if (!qword_256AAFEA0)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardDetailLayout, &type metadata for AwardDetailLayout);
    atomic_store(result, (unint64_t *)&qword_256AAFEA0);
  }
  return result;
}

BOOL sub_23BDC85DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t getEnumTagSinglePayload for AwardDetailLayout(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AwardDetailLayout(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDC86F4 + 4 * byte_23BDD9885[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_23BDC8728 + 4 * asc_23BDD9880[v4]))();
}

uint64_t sub_23BDC8728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_23BDC8730(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x23BDC8738);
  return result;
}

uint64_t sub_23BDC8744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x23BDC874CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDC8750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_23BDC8758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailLayout()
{
  return &type metadata for AwardDetailLayout;
}

uint64_t storeEnumTagSinglePayload for AwardDetailLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23BDC87C0 + 4 * byte_23BDD988F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23BDC87F4 + 4 * byte_23BDD988A[v4]))();
}

uint64_t sub_23BDC87F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC87FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDC8804);
  return result;
}

uint64_t sub_23BDC8810(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDC8818);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23BDC881C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDC8824(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardDetailLayout.CodingKeys()
{
  return &type metadata for AwardDetailLayout.CodingKeys;
}

unint64_t sub_23BDC8844()
{
  unint64_t result;

  result = qword_256AAFEA8;
  if (!qword_256AAFEA8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9A10, &type metadata for AwardDetailLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEA8);
  }
  return result;
}

unint64_t sub_23BDC888C()
{
  unint64_t result;

  result = qword_256AAFEB0;
  if (!qword_256AAFEB0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9980, &type metadata for AwardDetailLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEB0);
  }
  return result;
}

unint64_t sub_23BDC88D4()
{
  unint64_t result;

  result = qword_256AAFEB8;
  if (!qword_256AAFEB8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD99A8, &type metadata for AwardDetailLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEB8);
  }
  return result;
}

uint64_t sub_23BDC8918(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDDAA80 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6C6F7263537369 && a2 == 0xEC000000656C6261)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23BDC8A14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  char *v53;
  int EnumCaseMultiPayload;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v4 = sub_23BDCD58C();
  v70 = *(_QWORD *)(v4 - 8);
  v71 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v69 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AADD18);
  MEMORY[0x24BDAC7A8](v77);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardEarnedLoadState();
  v81 = *(_QWORD *)(State - 8);
  v82 = State;
  v9 = MEMORY[0x24BDAC7A8](State);
  v74 = (unsigned __int8 *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v65 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v65 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v65 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE628);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v19);
  v24 = (uint64_t *)((char *)&v65 - v23);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v78 = 0;
  v73 = a1;
  v27 = *(_QWORD *)(a1 + 64);
  v26 = a1 + 64;
  v25 = v27;
  v28 = 1 << *(_BYTE *)(v26 - 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v25;
  v67 = v26;
  v68 = (unint64_t)(v28 + 63) >> 6;
  v66 = v68 - 1;
  v31 = &qword_256AAE630;
  v75 = v21;
  v76 = a2;
  v79 = (uint64_t *)((char *)&v65 - v23);
  while (1)
  {
    if (v30)
    {
      v80 = (v30 - 1) & v30;
      v33 = __clz(__rbit64(v30)) | (v78 << 6);
LABEL_10:
      v34 = (uint64_t *)(*(_QWORD *)(v73 + 48) + 16 * v33);
      v36 = *v34;
      v35 = v34[1];
      v37 = *(_QWORD *)(v73 + 56) + *(_QWORD *)(v81 + 72) * v33;
      v38 = __swift_instantiateConcreteTypeFromMangledName(v31);
      v39 = v75;
      sub_23BD594E4(v37, (uint64_t)&v75[*(int *)(v38 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      *(_QWORD *)v39 = v36;
      *((_QWORD *)v39 + 1) = v35;
      v21 = v39;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v39, 0, 1, v38);
      swift_bridgeObjectRetain();
      a2 = v76;
      v24 = v79;
      goto LABEL_29;
    }
    v40 = v78 + 1;
    if (__OFADD__(v78, 1))
    {
      __break(1u);
      goto LABEL_47;
    }
    if (v40 < v68)
    {
      v41 = *(_QWORD *)(v67 + 8 * v40);
      if (v41)
        goto LABEL_14;
      v42 = v78 + 2;
      ++v78;
      if (v40 + 1 < v68)
      {
        v41 = *(_QWORD *)(v67 + 8 * v42);
        if (v41)
          goto LABEL_17;
        v78 = v40 + 1;
        if (v40 + 2 < v68)
        {
          v41 = *(_QWORD *)(v67 + 8 * (v40 + 2));
          if (v41)
          {
            v40 += 2;
            goto LABEL_14;
          }
          v42 = v40 + 3;
          v78 = v40 + 2;
          if (v40 + 3 < v68)
            break;
        }
      }
    }
LABEL_28:
    v43 = __swift_instantiateConcreteTypeFromMangledName(v31);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v21, 1, 1, v43);
    v80 = 0;
LABEL_29:
    sub_23BD6A054((uint64_t)v21, (uint64_t)v24, &qword_256AAE628);
    v44 = v31;
    v45 = __swift_instantiateConcreteTypeFromMangledName(v31);
    v46 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v24, 1, v45) == 1)
      return v46;
    v47 = (uint64_t)v24 + *(int *)(v45 + 48);
    v48 = *v24;
    v49 = v24[1];
    sub_23BD7686C(v47, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    v50 = sub_23BD8BD48(v48, v49);
    v52 = v51;
    swift_bridgeObjectRelease();
    if ((v52 & 1) == 0)
      goto LABEL_43;
    sub_23BD594E4(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v81 + 72) * v50, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    v53 = &v7[*(int *)(v77 + 48)];
    sub_23BD594E4((uint64_t)v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    sub_23BD594E4((uint64_t)v17, (uint64_t)v53, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_23BD594E4((uint64_t)v7, (uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
        v55 = swift_getEnumCaseMultiPayload();
        v24 = v79;
        if (v55 != 1)
          goto LABEL_41;
        if (*v74 != *v53)
        {
LABEL_38:
          sub_23BD59BB4((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
LABEL_42:
          sub_23BD59BB4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
LABEL_43:
          sub_23BD59BB4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
          return 0;
        }
      }
      else
      {
        v32 = swift_getEnumCaseMultiPayload();
        v24 = v79;
        if (v32 != 2)
          goto LABEL_41;
      }
    }
    else
    {
      v56 = v72;
      sub_23BD594E4((uint64_t)v7, v72, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v56, v71);
LABEL_41:
        sub_23BD5F3E0((uint64_t)v7, &qword_256AADD18);
        goto LABEL_42;
      }
      v57 = v70;
      v58 = v71;
      v59 = v7;
      v60 = v69;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v53, v71);
      v61 = v56;
      v62 = sub_23BDCD574();
      v63 = *(void (**)(char *, uint64_t))(v57 + 8);
      v64 = v60;
      v7 = v59;
      v63(v64, v58);
      v63((char *)v61, v58);
      v21 = v75;
      a2 = v76;
      v24 = v79;
      if ((v62 & 1) == 0)
        goto LABEL_38;
    }
    sub_23BD59BB4((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    sub_23BD59BB4((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    result = sub_23BD59BB4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardEarnedLoadState);
    v31 = v44;
    v30 = v80;
  }
  v41 = *(_QWORD *)(v67 + 8 * v42);
  if (v41)
  {
LABEL_17:
    v40 = v42;
LABEL_14:
    v80 = (v41 - 1) & v41;
    v33 = __clz(__rbit64(v41)) + (v40 << 6);
    v78 = v40;
    goto LABEL_10;
  }
  while (1)
  {
    v40 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v40 >= v68)
    {
      v78 = v66;
      goto LABEL_28;
    }
    v41 = *(_QWORD *)(v67 + 8 * v40);
    ++v42;
    if (v41)
      goto LABEL_14;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_23BDC9034(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;

  if (result == a2)
    return 1;
  v2 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_22;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        return 1;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          return 1;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23BD8BD48(v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v20 = swift_bridgeObjectRetain();
    v21 = sub_23BDC9D90(v20, v17);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      return 0;
  }
  v13 = v11 + 3;
  if (v13 >= v8)
    return 1;
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      return 1;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23BDC91FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t State;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int EnumCaseMultiPayload;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;

  v4 = sub_23BDCD58C();
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v79 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD5E8);
  MEMORY[0x24BDAC7A8](v89);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardProgressLoadState();
  v93 = *(_QWORD *)(State - 8);
  v9 = MEMORY[0x24BDAC7A8](State);
  v83 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v82 = (uint64_t)&v73 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v73 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v73 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE600);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (int64_t *)((char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v19);
  v24 = (int64_t *)((char *)&v73 - v23);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v86 = State;
  v90 = 0;
  v25 = *(_QWORD *)(a1 + 64);
  v76 = a1 + 64;
  v26 = 1 << *(_BYTE *)(a1 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v25;
  v78 = (unint64_t)(v26 + 63) >> 6;
  v73 = v78 - 1;
  v87 = v15;
  v88 = v17;
  v91 = v21;
  v84 = (int64_t *)((char *)&v73 - v23);
  v85 = a1;
  v77 = v7;
  while (1)
  {
    if (v28)
    {
      v92 = (v28 - 1) & v28;
      v30 = __clz(__rbit64(v28)) | (v90 << 6);
LABEL_10:
      v31 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v30);
      v33 = *v31;
      v32 = v31[1];
      v34 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(v93 + 72) * v30;
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
      v21 = v91;
      sub_23BD594E4(v34, (uint64_t)v91 + *(int *)(v35 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      *v21 = v33;
      v21[1] = v32;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v21, 0, 1, v35);
      swift_bridgeObjectRetain();
      v24 = v84;
      goto LABEL_29;
    }
    v36 = v90 + 1;
    if (__OFADD__(v90, 1))
    {
      __break(1u);
      goto LABEL_66;
    }
    if (v36 < v78)
    {
      v37 = *(_QWORD *)(v76 + 8 * v36);
      if (v37)
        goto LABEL_14;
      v38 = v90 + 2;
      ++v90;
      if (v36 + 1 < v78)
      {
        v37 = *(_QWORD *)(v76 + 8 * v38);
        if (v37)
          goto LABEL_17;
        v90 = v36 + 1;
        if (v36 + 2 < v78)
        {
          v37 = *(_QWORD *)(v76 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2;
            goto LABEL_14;
          }
          v38 = v36 + 3;
          v90 = v36 + 2;
          if (v36 + 3 < v78)
            break;
        }
      }
    }
LABEL_28:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v21, 1, 1, v39);
    v92 = 0;
LABEL_29:
    sub_23BD6A054((uint64_t)v21, (uint64_t)v24, &qword_256AAE600);
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE608);
    v41 = 1;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v24, 1, v40) == 1)
      return v41;
    v42 = (uint64_t)v24 + *(int *)(v40 + 48);
    v43 = *v24;
    v44 = v24[1];
    sub_23BD7686C(v42, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v45 = sub_23BD8BD48(v43, v44);
    v47 = v46;
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
      goto LABEL_62;
    v48 = a2;
    sub_23BD594E4(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v93 + 72) * v45, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v49 = (uint64_t)&v7[*(int *)(v89 + 48)];
    sub_23BD594E4((uint64_t)v15, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    sub_23BD594E4((uint64_t)v17, v49, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v51 = v83;
        sub_23BD594E4((uint64_t)v7, v83, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
        v53 = *(_QWORD *)v51;
        v52 = *(_QWORD *)(v51 + 8);
        v55 = *(uint64_t *)(v51 + 16);
        v54 = *(uint64_t *)(v51 + 24);
        v56 = *(_BYTE *)(v51 + 32);
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          sub_23BD5F110(v53, v52, v55, v54, v56);
          v7 = v77;
          goto LABEL_56;
        }
        v58 = *(_QWORD *)v49;
        v57 = *(_QWORD *)(v49 + 8);
        v59 = *(_QWORD *)(v49 + 16);
        v60 = *(_QWORD *)(v49 + 24);
        if ((v56 & 1) != 0)
        {
          if ((*(_BYTE *)(v49 + 32) & 1) == 0)
          {
            v71 = *(_QWORD *)v49;
            v72 = *(_QWORD *)(v49 + 8);
LABEL_59:
            sub_23BD5F110(v71, v72, v59, v60, 0);
            v7 = v77;
LABEL_60:
            sub_23BD59BB4((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
            goto LABEL_61;
          }
          a2 = v48;
          v61 = v53 == v58;
          v7 = v77;
          a1 = v85;
          if (!v61 || ((((v52 & 1) == 0) ^ v57) & 1) == 0 || v55 != v59)
            goto LABEL_60;
        }
        else
        {
          if ((*(_BYTE *)(v49 + 32) & 1) != 0)
          {
            v71 = v53;
            v72 = v52;
            v59 = v55;
            v60 = v54;
            goto LABEL_59;
          }
          a2 = v48;
          v68 = *(_QWORD *)(v49 + 16);
          v69 = *(double *)&v68;
          v70 = *(uint64_t *)(v49 + 24);
          if (v53 == v58 && v52 == v57)
          {
            sub_23BD5F110(v53, v52, v55, v54, 0);
            sub_23BD5F110(v53, v52, v68, v70, 0);
            v7 = v77;
            a1 = v85;
            if (*(double *)&v55 != v69)
              goto LABEL_60;
          }
          else
          {
            v74 = *(_QWORD *)(v49 + 8);
            v75 = sub_23BDCE024();
            sub_23BD5F110(v53, v52, v55, v54, 0);
            sub_23BD5F110(v58, v74, v68, v70, 0);
            v7 = v77;
            a1 = v85;
            if ((v75 & 1) == 0 || *(double *)&v55 != v69)
              goto LABEL_60;
          }
          if (*(double *)&v54 != *(double *)&v70)
            goto LABEL_60;
        }
      }
      else
      {
        v29 = swift_getEnumCaseMultiPayload();
        a1 = v85;
        if (v29 != 2)
          goto LABEL_56;
      }
    }
    else
    {
      v62 = v82;
      sub_23BD594E4((uint64_t)v7, v82, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v62, v81);
LABEL_56:
        sub_23BD5F3E0((uint64_t)v7, &qword_256AAD5E8);
LABEL_61:
        sub_23BD59BB4((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
        v17 = v88;
LABEL_62:
        sub_23BD59BB4((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
        return 0;
      }
      v64 = v79;
      v63 = v80;
      v65 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v79, v49, v81);
      v66 = sub_23BDCD574();
      v67 = *(void (**)(char *, uint64_t))(v63 + 8);
      v67(v64, v65);
      v67((char *)v62, v65);
      a2 = v48;
      a1 = v85;
      if ((v66 & 1) == 0)
        goto LABEL_60;
    }
    sub_23BD59BB4((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v15 = v87;
    sub_23BD59BB4((uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v17 = v88;
    result = sub_23BD59BB4((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for AwardProgressLoadState);
    v21 = v91;
    v28 = v92;
  }
  v37 = *(_QWORD *)(v76 + 8 * v38);
  if (v37)
  {
LABEL_17:
    v36 = v38;
LABEL_14:
    v92 = (v37 - 1) & v37;
    v30 = __clz(__rbit64(v37)) + (v36 << 6);
    v90 = v36;
    goto LABEL_10;
  }
  while (1)
  {
    v36 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v36 >= v78)
    {
      v90 = v73;
      goto LABEL_28;
    }
    v37 = *(_QWORD *)(v76 + 8 * v36);
    ++v38;
    if (v37)
      goto LABEL_14;
  }
LABEL_66:
  __break(1u);
  return result;
}

unint64_t sub_23BDC9A04(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  _QWORD **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;

  if (result == a2)
    return 1;
  v2 = a2;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v33 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v37 = 0;
  v34 = (unint64_t)(v4 + 63) >> 6;
  v6 = v5 & *(_QWORD *)(result + 64);
  if (v6)
    goto LABEL_9;
LABEL_10:
  v8 = v37 + 1;
  if (!__OFADD__(v37, 1))
  {
    if (v8 < v34)
    {
      v9 = *(_QWORD *)(v33 + 8 * v8);
      v10 = v37 + 1;
      if (v9)
        goto LABEL_23;
      v10 = v37 + 2;
      if (v37 + 2 >= v34)
        return 1;
      v9 = *(_QWORD *)(v33 + 8 * v10);
      if (v9)
        goto LABEL_23;
      v10 = v37 + 3;
      if (v37 + 3 >= v34)
        return 1;
      v9 = *(_QWORD *)(v33 + 8 * v10);
      if (v9)
      {
LABEL_23:
        v37 = v10;
        v38 = (v9 - 1) & v9;
        for (i = __clz(__rbit64(v9)) + (v10 << 6); ; i = __clz(__rbit64(v6)) | (v37 << 6))
        {
          v12 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
          v13 = *v12;
          v14 = v12[1];
          v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * i);
          swift_bridgeObjectRetain();
          sub_23BD58A70(v15);
          v16 = sub_23BD8BD48(v13, v14);
          v18 = v17;
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
LABEL_50:
            sub_23BD58AA8(v15);
            return 0;
          }
          result = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v16);
          if (!result)
            break;
          if (result == 1)
          {
            if (v15 != 1)
              goto LABEL_50;
LABEL_8:
            v6 = v38;
            if (!v38)
              goto LABEL_10;
            goto LABEL_9;
          }
          if (v15 < 2)
            goto LABEL_50;
          v19 = *(_QWORD *)(result + 16);
          if (v19 != *(_QWORD *)(v15 + 16))
            goto LABEL_50;
          if (v19)
            v20 = result == v15;
          else
            v20 = 1;
          if (!v20)
          {
            v30 = v3;
            v31 = v2;
            result = swift_bridgeObjectRetain();
            v21 = 0;
            v22 = (_QWORD **)(v15 + 64);
            v32 = result;
            v23 = (uint64_t *)(result + 64);
            v35 = v19;
            v36 = v15;
            while (v21 < *(_QWORD *)(v15 + 16))
            {
              v24 = *(v23 - 2);
              v25 = *(v23 - 1);
              v26 = *v23;
              v27 = (uint64_t)*(v22 - 2);
              v28 = (uint64_t)*(v22 - 1);
              v39 = *v22;
              if (((_QWORD *)*(v23 - 4) != *(v22 - 4) || (_QWORD *)*(v23 - 3) != *(v22 - 3))
                && (sub_23BDCE024() & 1) == 0)
              {
                goto LABEL_49;
              }
              if ((v24 != v27 || v25 != v28) && (sub_23BDCE024() & 1) == 0)
                goto LABEL_49;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v29 = sub_23BD88870(v26, v39);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              if ((v29 & 1) == 0)
              {
LABEL_49:
                sub_23BD58AA8(v32);
                v15 = v36;
                goto LABEL_50;
              }
              ++v21;
              v22 += 5;
              v23 += 5;
              v15 = v36;
              if (v35 == v21)
              {
                sub_23BD58AA8(v32);
                v3 = v30;
                v2 = v31;
                goto LABEL_34;
              }
            }
            __break(1u);
            goto LABEL_53;
          }
LABEL_34:
          result = sub_23BD58AA8(v15);
          v6 = v38;
          if (!v38)
            goto LABEL_10;
LABEL_9:
          v38 = (v6 - 1) & v6;
        }
        if (v15)
          goto LABEL_50;
        goto LABEL_8;
      }
      v11 = v37 + 4;
      if (v37 + 4 < v34)
      {
        v9 = *(_QWORD *)(v33 + 8 * v11);
        if (v9)
        {
          v10 = v37 + 4;
          goto LABEL_23;
        }
        while (1)
        {
          v10 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_54;
          if (v10 >= v34)
            return 1;
          v9 = *(_QWORD *)(v33 + 8 * v10);
          ++v11;
          if (v9)
            goto LABEL_23;
        }
      }
    }
    return 1;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_23BDC9D90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int EnumCaseMultiPayload;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t State;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v4 = sub_23BDCD544();
  v70 = *(_QWORD *)(v4 - 8);
  v71 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v67 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23BDCD58C();
  v7 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  v69 = v7;
  MEMORY[0x24BDAC7A8](v6);
  v66 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE7C8);
  MEMORY[0x24BDAC7A8](v76);
  v81 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  State = type metadata accessor for AwardImageLoadState();
  v78 = *(_QWORD *)(State - 8);
  v10 = MEMORY[0x24BDAC7A8](State);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v62 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v79 = (uint64_t)&v62 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v82 = (uint64_t)&v62 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE610);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (uint64_t *)((char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v20);
  v25 = (double *)((char *)&v62 - v24);
  v80 = a2;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(v80 + 16))
    return 0;
  v77 = 0;
  v74 = a1;
  v28 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v26 = v28;
  v29 = 1 << *(_BYTE *)(v27 - 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v26;
  v64 = v27;
  v65 = (unint64_t)(v29 + 63) >> 6;
  v63 = v65 - 1;
  v72 = (double *)((char *)&v62 - v24);
  v73 = v22;
  while (1)
  {
    if (v31)
    {
      v32 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v33 = v32 | (v77 << 6);
LABEL_10:
      v34 = (uint64_t *)(*(_QWORD *)(v74 + 48) + 16 * v33);
      v35 = *v34;
      v36 = v34[1];
      v37 = *(_QWORD *)(v74 + 56) + *(_QWORD *)(v78 + 72) * v33;
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
      sub_23BD594E4(v37, (uint64_t)v22 + *(int *)(v38 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      *v22 = v35;
      v22[1] = v36;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v22, 0, 1, v38);
      goto LABEL_29;
    }
    v39 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v39 < v65)
    {
      v40 = *(_QWORD *)(v64 + 8 * v39);
      if (v40)
        goto LABEL_14;
      v41 = v77 + 2;
      ++v77;
      if (v39 + 1 < v65)
      {
        v40 = *(_QWORD *)(v64 + 8 * v41);
        if (v40)
          goto LABEL_17;
        v77 = v39 + 1;
        if (v39 + 2 < v65)
        {
          v40 = *(_QWORD *)(v64 + 8 * (v39 + 2));
          if (v40)
          {
            v39 += 2;
            goto LABEL_14;
          }
          v41 = v39 + 3;
          v77 = v39 + 2;
          if (v39 + 3 < v65)
            break;
        }
      }
    }
LABEL_28:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v22, 1, 1, v42);
    v31 = 0;
LABEL_29:
    sub_23BD6A054((uint64_t)v22, (uint64_t)v25, &qword_256AAE610);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAE618);
    v44 = 1;
    if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v25, 1, v43) == 1)
      return v44;
    v45 = *v25;
    v46 = v25[1];
    sub_23BD7686C((uint64_t)v25 + *(int *)(v43 + 48), v82, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v47 = sub_23BD8BDAC(v45, v46);
    if ((v48 & 1) == 0)
      goto LABEL_44;
    v49 = v79;
    sub_23BD594E4(*(_QWORD *)(v80 + 56) + *(_QWORD *)(v78 + 72) * v47, v79, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    v50 = v81 + *(int *)(v76 + 48);
    sub_23BD594E4(v49, v81, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    sub_23BD594E4(v82, v50, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        if (swift_getEnumCaseMultiPayload() != 2)
          goto LABEL_42;
        goto LABEL_7;
      }
      sub_23BD594E4(v81, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v71);
LABEL_42:
        sub_23BD5F3E0(v81, &qword_256AAE7C8);
        goto LABEL_43;
      }
      v52 = v70;
      v53 = v71;
      v54 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v67, v50, v71);
      v55 = MEMORY[0x242611114](v12, v54);
      v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57 = v54;
      v22 = v73;
      v56(v57, v53);
      v58 = v12;
    }
    else
    {
      sub_23BD594E4(v81, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v69 + 8))(v15, v68);
        goto LABEL_42;
      }
      v53 = v68;
      v59 = v69;
      v60 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v66, v50, v68);
      v55 = sub_23BDCD574();
      v56 = *(void (**)(char *, uint64_t))(v59 + 8);
      v22 = v73;
      v56(v60, v53);
      v58 = v15;
    }
    v61 = v53;
    v25 = v72;
    v56(v58, v61);
    if ((v55 & 1) == 0)
    {
      sub_23BD59BB4(v81, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
LABEL_43:
      sub_23BD59BB4(v79, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
LABEL_44:
      sub_23BD59BB4(v82, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
      return 0;
    }
LABEL_7:
    sub_23BD59BB4(v81, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    sub_23BD59BB4(v79, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
    result = sub_23BD59BB4(v82, (uint64_t (*)(_QWORD))type metadata accessor for AwardImageLoadState);
  }
  v40 = *(_QWORD *)(v64 + 8 * v41);
  if (v40)
  {
LABEL_17:
    v39 = v41;
LABEL_14:
    v31 = (v40 - 1) & v40;
    v33 = __clz(__rbit64(v40)) + (v39 << 6);
    v77 = v39;
    goto LABEL_10;
  }
  while (1)
  {
    v39 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v39 >= v65)
    {
      v77 = v63;
      goto LABEL_28;
    }
    v40 = *(_QWORD *)(v64 + 8 * v39);
    ++v41;
    if (v40)
      goto LABEL_14;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_23BDCA420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v20;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a1 + 64);
    v3 = 1 << *(_BYTE *)(a1 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v20 = (unint64_t)(v3 + 63) >> 6;
    if ((v4 & v2) != 0)
    {
      v5 = __clz(__rbit64(v4 & v2));
      v6 = a2;
LABEL_20:
      v10 = 16 * v5;
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v10);
      v13 = *v11;
      v12 = v11[1];
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v10);
      v16 = *v14;
      v15 = v14[1];
      swift_bridgeObjectRetain();
      sub_23BD7A51C(v16, v15);
      v17 = sub_23BD8BD48(v13, v12);
      LOBYTE(v13) = v18;
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        __asm { BR              X8 }
      sub_23BD7A560(v16, v15);
      return 0;
    }
    v6 = a2;
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_19;
      v8 = 2;
      if ((unint64_t)(v3 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if ((unint64_t)(v3 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
      {
LABEL_19:
        v5 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_20;
      }
      v9 = 4;
      if (v20 > 4)
      {
        v7 = *(_QWORD *)(a1 + 96);
        if (v7)
        {
          v8 = 4;
          goto LABEL_19;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x23BDCADE8);
          }
          if (v8 >= v20)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_19;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t AwardImageState.templateUniqueName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double AwardImageState.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t AwardImageState.imageLoadState.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AwardImageState.imageLoadState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*AwardImageState.imageLoadState.modify())()
{
  return nullsub_1;
}

uint64_t AwardImageState.init(templateUniqueName:size:imageLoadState:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

uint64_t sub_23BDCAF28(char a1)
{
  if (!a1)
    return 0xD000000000000012;
  if (a1 == 1)
    return 1702521203;
  return 0x616F4C6567616D69;
}

uint64_t sub_23BDCAF88()
{
  char *v0;

  return sub_23BDCAF28(*v0);
}

uint64_t sub_23BDCAF90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23BDCB7D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23BDCAFB4()
{
  sub_23BDCB1B8();
  return sub_23BDCE0D8();
}

uint64_t sub_23BDCAFDC()
{
  sub_23BDCB1B8();
  return sub_23BDCE0E4();
}

uint64_t AwardImageState.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFEC0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v8 = v1[3];
  v12[0] = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDCB1B8();
  sub_23BDCE0CC();
  LOBYTE(v13) = 0;
  v9 = v12[1];
  sub_23BDCDFDC();
  if (!v9)
  {
    v10 = v12[0];
    v13 = v7;
    v14 = v8;
    v15 = 1;
    type metadata accessor for CGSize();
    sub_23BD6B5DC(&qword_256AACF30, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
    sub_23BDCE00C();
    v13 = v10;
    v15 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD950);
    sub_23BDA0158();
    sub_23BDCE00C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23BDCB1B8()
{
  unint64_t result;

  result = qword_256AAFEC8;
  if (!qword_256AAFEC8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9BF0, &type metadata for AwardImageState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEC8);
  }
  return result;
}

uint64_t AwardImageState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[2];
  char v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFED0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23BDCB1B8();
  sub_23BDCE0C0();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v16[0]) = 0;
  v9 = sub_23BDCDF64();
  v11 = v10;
  type metadata accessor for CGSize();
  v17 = 1;
  sub_23BD6B5DC(&qword_256AACF40, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
  swift_bridgeObjectRetain();
  sub_23BDCDF94();
  v12 = v16[0];
  v13 = v16[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD950);
  v17 = 2;
  sub_23BDA03D4();
  sub_23BDCDF94();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v16[0];
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v15;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23BDCB430@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return AwardImageState.init(from:)(a1, a2);
}

uint64_t sub_23BDCB444(_QWORD *a1)
{
  return AwardImageState.encode(to:)(a1);
}

uint64_t _s13FitnessAwards15AwardImageStateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(double *)(a2 + 16);
  v5 = *(double *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if ((v8 || (sub_23BDCE024() & 1) != 0) && (v3 == v6 ? (v9 = v2 == v5) : (v9 = 0), v9))
    return sub_23BDC9D90(v4, v7);
  else
    return 0;
}

uint64_t destroy for AwardImageState()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AwardImageState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AwardImageState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AwardImageState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AwardImageState()
{
  return &type metadata for AwardImageState;
}

uint64_t storeEnumTagSinglePayload for AwardImageState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23BDCB678 + 4 * byte_23BDD9A8D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23BDCB6AC + 4 * byte_23BDD9A88[v4]))();
}

uint64_t sub_23BDCB6AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDCB6B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23BDCB6BCLL);
  return result;
}

uint64_t sub_23BDCB6C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23BDCB6D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23BDCB6D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23BDCB6DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AwardImageState.CodingKeys()
{
  return &type metadata for AwardImageState.CodingKeys;
}

unint64_t sub_23BDCB6FC()
{
  unint64_t result;

  result = qword_256AAFED8;
  if (!qword_256AAFED8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9BC8, &type metadata for AwardImageState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFED8);
  }
  return result;
}

unint64_t sub_23BDCB744()
{
  unint64_t result;

  result = qword_256AAFEE0;
  if (!qword_256AAFEE0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9B38, &type metadata for AwardImageState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEE0);
  }
  return result;
}

unint64_t sub_23BDCB78C()
{
  unint64_t result;

  result = qword_256AAFEE8;
  if (!qword_256AAFEE8)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9B60, &type metadata for AwardImageState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256AAFEE8);
  }
  return result;
}

uint64_t sub_23BDCB7D0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x800000023BDD9F00 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (sub_23BDCE024() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x616F4C6567616D69 && a2 == 0xEE00657461745364)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23BDCE024();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

__n128 AwardLockupFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v5;

  type metadata accessor for AwardLockupFeature();
  sub_23BDCD580();
  result = *(__n128 *)a1;
  v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

uint64_t type metadata accessor for AwardLockupFeature()
{
  uint64_t result;

  result = qword_256AAFF88;
  if (!qword_256AAFF88)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AwardLockupFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t *a2, unint64_t *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t result;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v54 = a3;
  v6 = type metadata accessor for AwardLockupFeature();
  v51 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v51 + 64);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v50 - v10;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAD708);
  v12 = *(_QWORD *)(v53 - 8);
  v13 = MEMORY[0x24BDAC7A8](v53);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v50 - v16;
  v18 = *a4;
  v19 = *a2;
  v20 = a2[1];
  v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256AAD618);
  v22 = v21[16];
  v23 = v21[20];
  v24 = v21[24];
  if ((v18 & 1) != 0)
  {
    v50 = &v15[v21[12]];
    v25 = &v15[v22];
    v26 = &v15[v23];
    v27 = &v15[v24];
    v55 = v19;
    v56 = v20;
    v57 = 1;
    sub_23BDCBDF0();
    swift_bridgeObjectRetain_n();
    sub_23BDCDE80();
    v28 = *MEMORY[0x24BE2B580];
    v29 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v25, v28, v29);
    v30 = *MEMORY[0x24BE2B550];
    v31 = sub_23BDCDCB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 104))(v26, v30, v31);
    sub_23BDCC354(v52, (uint64_t)v9);
    v32 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = v19;
    *(_QWORD *)(v33 + 24) = v20;
    sub_23BDCC39C((uint64_t)v9, v33 + v32);
    *(_QWORD *)v27 = &unk_256AAFF00;
    *((_QWORD *)v27 + 1) = v33;
    sub_23BDCDDFC();
    v34 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, *MEMORY[0x24BE2B438], v53);
    v35 = v54;
    v36 = *v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = sub_23BD6E4DC(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    v38 = *(_QWORD *)(v36 + 16);
    v37 = *(_QWORD *)(v36 + 24);
    v39 = v38 + 1;
    if (v38 >= v37 >> 1)
      v36 = sub_23BD6E4DC(v37 > 1, v38 + 1, 1, v36);
    v17 = v15;
  }
  else
  {
    v40 = &v17[v22];
    v50 = &v17[v23];
    v41 = &v17[v24];
    v55 = v19;
    v56 = v20;
    v57 = 0;
    sub_23BDCBDF0();
    swift_bridgeObjectRetain_n();
    sub_23BDCDE80();
    v42 = *MEMORY[0x24BE2B570];
    v43 = sub_23BDCDCC4();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v40, v42, v43);
    sub_23BDCC354(v52, (uint64_t)v11);
    v44 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v45 = swift_allocObject();
    *(_QWORD *)(v45 + 16) = v19;
    *(_QWORD *)(v45 + 24) = v20;
    sub_23BDCC39C((uint64_t)v11, v45 + v44);
    *(_QWORD *)v41 = &unk_256AAFF10;
    *((_QWORD *)v41 + 1) = v45;
    sub_23BDCDDFC();
    v46 = *MEMORY[0x24BE2B558];
    v47 = sub_23BDCDCB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v50, v46, v47);
    v34 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v17, *MEMORY[0x24BE2B438], v53);
    v35 = v54;
    v36 = *v54;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = sub_23BD6E4DC(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    v38 = *(_QWORD *)(v36 + 16);
    v48 = *(_QWORD *)(v36 + 24);
    v39 = v38 + 1;
    if (v38 >= v48 >> 1)
      v36 = sub_23BD6E4DC(v48 > 1, v38 + 1, 1, v36);
  }
  *(_QWORD *)(v36 + 16) = v39;
  result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(v36+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v38, v17, v34);
  *v35 = v36;
  return result;
}

unint64_t sub_23BDCBDF0()
{
  unint64_t result;

  result = qword_256AAFEF0;
  if (!qword_256AAFEF0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9D18, &type metadata for AwardLockupFeature.TaskIdentifier);
    atomic_store(result, &qword_256AAFEF0);
  }
  return result;
}

uint64_t sub_23BDCBE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  sub_23BDCDDF0();
  v4[6] = sub_23BDCDDE4();
  v4[7] = sub_23BDCDDCC();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t sub_23BDCBEA4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, _QWORD);
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 32);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardLockupFeature] %s lockup tapped, navigating", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (*)(_QWORD, _QWORD))(***(int ***)(v0 + 40) + **(_QWORD **)(v0 + 40));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v9;
  *v9 = v0;
  v9[1] = sub_23BDCC094;
  return v11(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_23BDCC094()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23BDCC0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  sub_23BDCDDF0();
  v4[6] = sub_23BDCDDE4();
  v4[7] = sub_23BDCDDCC();
  v4[8] = v5;
  return swift_task_switch();
}

uint64_t sub_23BDCC164()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, _QWORD);
  uint64_t v12;

  if (qword_256AACE00 != -1)
    swift_once();
  v1 = sub_23BDCD628();
  __swift_project_value_buffer(v1, (uint64_t)qword_256AAF4B0);
  swift_bridgeObjectRetain_n();
  v2 = sub_23BDCD610();
  v3 = sub_23BDCDE38();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[4];
  if (v4)
  {
    v6 = v0[3];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[2] = sub_23BD6E4F0(v6, v5, &v12);
    sub_23BDCDE5C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23BD56000, v2, v3, "[AwardHeaderFeature] Resolving award description state on viewAppeared for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242611FFC](v8, -1, -1);
    MEMORY[0x242611FFC](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v11 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0[5] + 16) + *(_QWORD *)(v0[5] + 16));
  v9 = (_QWORD *)swift_task_alloc();
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_23BD85FE8;
  return v11(v0[3], v0[4]);
}

uint64_t sub_23BDCC354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardLockupFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDCC39C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AwardLockupFeature();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDCC3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardLockupFeature() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6EBF8;
  return sub_23BDCC0F4(a1, v5, v6, v7);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AwardLockupFeature();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v4 = v0 + v3 + *(int *)(v1 + 20);
  v5 = sub_23BDCD58C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_23BDCC508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AwardLockupFeature() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23BD6F814;
  return sub_23BDCBE34(a1, v5, v6, v7);
}

unint64_t sub_23BDCC58C()
{
  unint64_t result;

  result = qword_256AAFF18;
  if (!qword_256AAFF18)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardLockupAction, &type metadata for AwardLockupAction);
    atomic_store(result, (unint64_t *)&qword_256AAFF18);
  }
  return result;
}

unint64_t sub_23BDCC5D4()
{
  unint64_t result;

  result = qword_256AAFF20;
  if (!qword_256AAFF20)
  {
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardLockupAction, &type metadata for AwardLockupAction);
    atomic_store(result, (unint64_t *)&qword_256AAFF20);
  }
  return result;
}

unint64_t sub_23BDCC61C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAFF28;
  if (!qword_256AAFF28)
  {
    v1 = type metadata accessor for AwardLockupState();
    result = MEMORY[0x242611F78](&protocol conformance descriptor for AwardLockupState, v1);
    atomic_store(result, (unint64_t *)&qword_256AAFF28);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AwardLockupFeature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23BDCC670(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23BDCD58C();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AwardLockupFeature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23BDCC6F8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23BDCD58C();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23BDCC76C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23BDCD58C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AwardLockupFeature.TaskIdentifier()
{
  return &type metadata for AwardLockupFeature.TaskIdentifier;
}

unint64_t sub_23BDCC7F4()
{
  unint64_t result;

  result = qword_256AAFFC0;
  if (!qword_256AAFFC0)
  {
    result = MEMORY[0x242611F78](&unk_23BDD9CF0, &type metadata for AwardLockupFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256AAFFC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for WeeklyStreakNotification()
{
  return &type metadata for WeeklyStreakNotification;
}

uint64_t destroy for ColoredLinearProgressViewStyle()
{
  swift_release();
  return swift_release();
}

_QWORD *_s13FitnessAwards30ColoredLinearProgressViewStyleVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ColoredLinearProgressViewStyle(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for ColoredLinearProgressViewStyle(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColoredLinearProgressViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColoredLinearProgressViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ColoredLinearProgressViewStyle()
{
  return &type metadata for ColoredLinearProgressViewStyle;
}

uint64_t sub_23BDCC9F4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23BDCCA04@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  __int128 *v13;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[32];

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BDCDE2C();
    v23 = (void *)sub_23BDCD898();
    sub_23BDCD604();

  }
  sub_23BDCD748();
  v24 = v13[1];
  v37 = *v13;
  v38 = v24;
  sub_23BDCD3FC((uint64_t)&v37, (uint64_t)v40);
  v26 = v13[1];
  v35 = v13[2];
  v25 = v35;
  *(_OWORD *)a9 = *v13;
  *(_OWORD *)(a9 + 16) = v26;
  *(_OWORD *)(a9 + 32) = v25;
  *(_OWORD *)(a9 + 152) = v34;
  *(_OWORD *)(a9 + 136) = v33;
  *(_OWORD *)(a9 + 120) = v32;
  *(_OWORD *)(a9 + 104) = v31;
  *(_OWORD *)(a9 + 56) = v28;
  v39 = *((_QWORD *)&v38 + 1);
  v36 = *((_BYTE *)v13 + 48);
  *(_BYTE *)(a9 + 48) = v36;
  *(_OWORD *)(a9 + 72) = v29;
  *(_OWORD *)(a9 + 88) = v30;
  sub_23BDCD438((uint64_t)v40);
  sub_23BDCD468((uint64_t)&v39);
  return sub_23BDCD490((uint64_t)&v35);
}

uint64_t sub_23BDCCBE8@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BDCDE2C();
    v25 = (void *)sub_23BDCD898();
    sub_23BDCD604();

  }
  sub_23BDCD748();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;
  return swift_retain();
}

__n128 sub_23BDCCD90@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  _OWORD *v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23BDCDE2C();
    v23 = (void *)sub_23BDCD898();
    sub_23BDCD604();

  }
  sub_23BDCD748();
  sub_23BD5F39C(v13, a9, &qword_256AAFFD8);
  v24 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256AAFFD0) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *v24 = v26;
  v24[1] = v27;
  result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_23BDCCF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;

  *a4 = sub_23BDCDC64();
  a4[1] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFFC8);
  return sub_23BDCCFC0(a2, a3, a1, (uint64_t)a4 + *(int *)(v11 + 44), a5);
}

uint64_t sub_23BDCCFC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D1>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v31[0] = a1;
  v31[1] = a3;
  v33 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFFD0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v32 = (uint64_t)v31 - v11;
  v12 = sub_23BDCDC04();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFFD8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v31 - v19;
  v21 = *MEMORY[0x24BDEEB68];
  v22 = sub_23BDCD814();
  v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104);
  v23(v14, v21, v22);
  sub_23BDCD37C((uint64_t)v14, (uint64_t)v18);
  *(_QWORD *)&v18[*(int *)(v15 + 52)] = a2;
  *(_WORD *)&v18[*(int *)(v15 + 56)] = 256;
  swift_retain();
  sub_23BDCD3C0((uint64_t)v14);
  sub_23BD6A054((uint64_t)v18, (uint64_t)v20, &qword_256AAFFD8);
  v23(v14, v21, v22);
  sub_23BDCD37C((uint64_t)v14, (uint64_t)v18);
  *(_QWORD *)&v18[*(int *)(v15 + 52)] = v31[0];
  *(_WORD *)&v18[*(int *)(v15 + 56)] = 256;
  swift_retain();
  sub_23BDCD3C0((uint64_t)v14);
  sub_23BDCD6C4();
  v25 = v24 * a5;
  sub_23BDCDC58();
  sub_23BDCCD90(0.0, 1, 0.0, 1, v25, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1);
  sub_23BD5F3E0((uint64_t)v18, &qword_256AAFFD8);
  v26 = v32;
  sub_23BD6A054((uint64_t)v10, v32, &qword_256AAFFD0);
  sub_23BD5F39C((uint64_t)v20, (uint64_t)v18, &qword_256AAFFD8);
  v27 = v26;
  sub_23BD5F39C(v26, (uint64_t)v10, &qword_256AAFFD0);
  v28 = v33;
  sub_23BD5F39C((uint64_t)v18, v33, &qword_256AAFFD8);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256AAFFE0);
  sub_23BD5F39C((uint64_t)v10, v28 + *(int *)(v29 + 48), &qword_256AAFFD0);
  sub_23BD5F3E0(v27, &qword_256AAFFD0);
  sub_23BD5F3E0((uint64_t)v20, &qword_256AAFFD8);
  sub_23BD5F3E0((uint64_t)v10, &qword_256AAFFD0);
  return sub_23BD5F3E0((uint64_t)v18, &qword_256AAFFD8);
}

uint64_t sub_23BDCD2C4@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  double v8;
  uint64_t v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = COERCE_DOUBLE(sub_23BDCD88C());
  if ((v7 & 1) != 0)
    v8 = 0.0;
  else
    v8 = v6;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = v4;
  *(_QWORD *)(v9 + 32) = v5;
  *(double *)(v9 + 40) = v8;
  *a1 = sub_23BDCD370;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>))v9;
  swift_retain();
  return swift_retain();
}

uint64_t sub_23BDCD344()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23BDCD370@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_23BDCCF4C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2, *(double *)(v2 + 40));
}

uint64_t sub_23BDCD37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23BDCDC04();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23BDCD3C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23BDCDC04();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23BDCD3FC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BDF1EB8] - 8) + 32))(a2, a1);
  return a2;
}

uint64_t sub_23BDCD438(uint64_t a1)
{
  sub_23BD5F194(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_23BDCD468(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23BDCD490(uint64_t a1)
{
  swift_retain();
  return a1;
}

unint64_t sub_23BDCD4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256AAFFE8;
  if (!qword_256AAFFE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_256AAFFF0);
    result = MEMORY[0x242611F78](MEMORY[0x24BDEC6F8], v1);
    atomic_store(result, (unint64_t *)&qword_256AAFFE8);
  }
  return result;
}

uint64_t sub_23BDCD508()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_23BDCD514()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_23BDCD520()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_23BDCD52C()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t sub_23BDCD538()
{
  return MEMORY[0x24BDCD9E8]();
}

uint64_t sub_23BDCD544()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23BDCD550()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_23BDCD55C()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_23BDCD568()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23BDCD574()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_23BDCD580()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23BDCD58C()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23BDCD598()
{
  return MEMORY[0x24BDCECD8]();
}

uint64_t sub_23BDCD5A4()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_23BDCD5B0()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23BDCD5BC()
{
  return MEMORY[0x24BE34B58]();
}

uint64_t sub_23BDCD5C8()
{
  return MEMORY[0x24BE34B60]();
}

uint64_t sub_23BDCD5D4()
{
  return MEMORY[0x24BE34B78]();
}

uint64_t sub_23BDCD5E0()
{
  return MEMORY[0x24BE34B88]();
}

uint64_t sub_23BDCD5EC()
{
  return MEMORY[0x24BE34B90]();
}

uint64_t sub_23BDCD5F8()
{
  return MEMORY[0x24BE34B98]();
}

uint64_t sub_23BDCD604()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23BDCD610()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23BDCD61C()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23BDCD628()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23BDCD634()
{
  return MEMORY[0x24BDEB210]();
}

uint64_t sub_23BDCD640()
{
  return MEMORY[0x24BDEB230]();
}

uint64_t sub_23BDCD64C()
{
  return MEMORY[0x24BDEB418]();
}

uint64_t sub_23BDCD658()
{
  return MEMORY[0x24BDEB4C0]();
}

uint64_t sub_23BDCD664()
{
  return MEMORY[0x24BDEB4D8]();
}

uint64_t sub_23BDCD670()
{
  return MEMORY[0x24BDEB4F8]();
}

uint64_t sub_23BDCD67C()
{
  return MEMORY[0x24BDEB540]();
}

uint64_t sub_23BDCD688()
{
  return MEMORY[0x24BDEB5B8]();
}

uint64_t sub_23BDCD694()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t sub_23BDCD6A0()
{
  return MEMORY[0x24BDEBBA8]();
}

uint64_t sub_23BDCD6AC()
{
  return MEMORY[0x24BDEBBC8]();
}

uint64_t sub_23BDCD6B8()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_23BDCD6C4()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_23BDCD6D0()
{
  return MEMORY[0x24BDEC6D8]();
}

uint64_t sub_23BDCD6DC()
{
  return MEMORY[0x24BDEC6E0]();
}

uint64_t sub_23BDCD6E8()
{
  return MEMORY[0x24BDECF50]();
}

uint64_t sub_23BDCD6F4()
{
  return MEMORY[0x24BDED168]();
}

uint64_t sub_23BDCD700()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_23BDCD70C()
{
  return MEMORY[0x24BDED3B0]();
}

uint64_t sub_23BDCD718()
{
  return MEMORY[0x24BDED860]();
}

uint64_t sub_23BDCD724()
{
  return MEMORY[0x24BDED868]();
}

uint64_t sub_23BDCD730()
{
  return MEMORY[0x24BDED918]();
}

uint64_t sub_23BDCD73C()
{
  return MEMORY[0x24BDED930]();
}

uint64_t sub_23BDCD748()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_23BDCD754()
{
  return MEMORY[0x24BDEDDE8]();
}

uint64_t sub_23BDCD760()
{
  return MEMORY[0x24BDEDEE8]();
}

uint64_t sub_23BDCD76C()
{
  return MEMORY[0x24BDEDEF8]();
}

uint64_t sub_23BDCD778()
{
  return MEMORY[0x24BDEE288]();
}

uint64_t sub_23BDCD784()
{
  return MEMORY[0x24BDEE290]();
}

uint64_t sub_23BDCD790()
{
  return MEMORY[0x24BDEE390]();
}

uint64_t sub_23BDCD79C()
{
  return MEMORY[0x24BDEE3A0]();
}

uint64_t sub_23BDCD7A8()
{
  return MEMORY[0x24BDEE490]();
}

uint64_t sub_23BDCD7B4()
{
  return MEMORY[0x24BDEE4A0]();
}

uint64_t sub_23BDCD7C0()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t sub_23BDCD7CC()
{
  return MEMORY[0x24BDEEA00]();
}

uint64_t sub_23BDCD7D8()
{
  return MEMORY[0x24BDEEA28]();
}

uint64_t sub_23BDCD7E4()
{
  return MEMORY[0x24BDEEA30]();
}

uint64_t sub_23BDCD7F0()
{
  return MEMORY[0x24BDEEA40]();
}

uint64_t sub_23BDCD7FC()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t sub_23BDCD808()
{
  return MEMORY[0x24BDEEA60]();
}

uint64_t sub_23BDCD814()
{
  return MEMORY[0x24BDEEB88]();
}

uint64_t sub_23BDCD820()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t sub_23BDCD82C()
{
  return MEMORY[0x24BDEEF78]();
}

uint64_t sub_23BDCD838()
{
  return MEMORY[0x24BDEF380]();
}

uint64_t sub_23BDCD844()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_23BDCD850()
{
  return MEMORY[0x24BDEF3B8]();
}

uint64_t sub_23BDCD85C()
{
  return MEMORY[0x24BDEF540]();
}

uint64_t sub_23BDCD868()
{
  return MEMORY[0x24BDEFCA8]();
}

uint64_t sub_23BDCD874()
{
  return MEMORY[0x24BDEFCC8]();
}

uint64_t sub_23BDCD880()
{
  return MEMORY[0x24BDF0138]();
}

uint64_t sub_23BDCD88C()
{
  return MEMORY[0x24BDF0FA0]();
}

uint64_t sub_23BDCD898()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_23BDCD8A4()
{
  return MEMORY[0x24BDF1450]();
}

uint64_t sub_23BDCD8B0()
{
  return MEMORY[0x24BDF1468]();
}

uint64_t sub_23BDCD8BC()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t sub_23BDCD8C8()
{
  return MEMORY[0x24BDF14C0]();
}

uint64_t sub_23BDCD8D4()
{
  return MEMORY[0x24BDF14E8]();
}

uint64_t sub_23BDCD8E0()
{
  return MEMORY[0x24BDF1580]();
}

uint64_t sub_23BDCD8EC()
{
  return MEMORY[0x24BDF1678]();
}

uint64_t sub_23BDCD8F8()
{
  return MEMORY[0x24BDF16A8]();
}

uint64_t sub_23BDCD904()
{
  return MEMORY[0x24BDF16E8]();
}

uint64_t sub_23BDCD910()
{
  return MEMORY[0x24BDF1768]();
}

uint64_t sub_23BDCD91C()
{
  return MEMORY[0x24BDF1778]();
}

uint64_t sub_23BDCD928()
{
  return MEMORY[0x24BDF1798]();
}

uint64_t sub_23BDCD934()
{
  return MEMORY[0x24BDF17D8]();
}

uint64_t sub_23BDCD940()
{
  return MEMORY[0x24BDF17F8]();
}

uint64_t sub_23BDCD94C()
{
  return MEMORY[0x24BDF1818]();
}

uint64_t sub_23BDCD958()
{
  return MEMORY[0x24BDF1840]();
}

uint64_t sub_23BDCD964()
{
  return MEMORY[0x24BDF1900]();
}

uint64_t sub_23BDCD970()
{
  return MEMORY[0x24BDF1D18]();
}

uint64_t sub_23BDCD97C()
{
  return MEMORY[0x24BE37BF0]();
}

uint64_t sub_23BDCD988()
{
  return MEMORY[0x24BDF1D60]();
}

uint64_t sub_23BDCD994()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_23BDCD9A0()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t sub_23BDCD9AC()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_23BDCD9B8()
{
  return MEMORY[0x24BDF1FF8]();
}

uint64_t sub_23BDCD9C4()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_23BDCD9D0()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_23BDCD9DC()
{
  return MEMORY[0x24BDF20B0]();
}

uint64_t sub_23BDCD9E8()
{
  return MEMORY[0x24BDF20E8]();
}

uint64_t sub_23BDCD9F4()
{
  return MEMORY[0x24BDF2298]();
}

uint64_t sub_23BDCDA00()
{
  return MEMORY[0x24BDF22B0]();
}

uint64_t sub_23BDCDA0C()
{
  return MEMORY[0x24BDF2370]();
}

uint64_t sub_23BDCDA18()
{
  return MEMORY[0x24BDF2378]();
}

uint64_t sub_23BDCDA24()
{
  return MEMORY[0x24BDF24B8]();
}

uint64_t sub_23BDCDA30()
{
  return MEMORY[0x24BDF2548]();
}

uint64_t sub_23BDCDA3C()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_23BDCDA48()
{
  return MEMORY[0x24BDF27F0]();
}

uint64_t sub_23BDCDA54()
{
  return MEMORY[0x24BDF2858]();
}

uint64_t sub_23BDCDA60()
{
  return MEMORY[0x24BDF2CC8]();
}

uint64_t sub_23BDCDA6C()
{
  return MEMORY[0x24BDF2E00]();
}

uint64_t sub_23BDCDA78()
{
  return MEMORY[0x24BDF3108]();
}

uint64_t sub_23BDCDA84()
{
  return MEMORY[0x24BDF3490]();
}

uint64_t sub_23BDCDA90()
{
  return MEMORY[0x24BDF3628]();
}

uint64_t sub_23BDCDA9C()
{
  return MEMORY[0x24BDF3630]();
}

uint64_t sub_23BDCDAA8()
{
  return MEMORY[0x24BDF3690]();
}

uint64_t sub_23BDCDAB4()
{
  return MEMORY[0x24BDF3768]();
}

uint64_t sub_23BDCDAC0()
{
  return MEMORY[0x24BDF37D8]();
}

uint64_t sub_23BDCDACC()
{
  return MEMORY[0x24BDF38C8]();
}

uint64_t sub_23BDCDAD8()
{
  return MEMORY[0x24BDF3900]();
}

uint64_t sub_23BDCDAE4()
{
  return MEMORY[0x24BDF3940]();
}

uint64_t sub_23BDCDAF0()
{
  return MEMORY[0x24BDF39B0]();
}

uint64_t sub_23BDCDAFC()
{
  return MEMORY[0x24BDF39E0]();
}

uint64_t sub_23BDCDB08()
{
  return MEMORY[0x24BDF3A40]();
}

uint64_t sub_23BDCDB14()
{
  return MEMORY[0x24BDF3C40]();
}

uint64_t sub_23BDCDB20()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_23BDCDB2C()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t sub_23BDCDB38()
{
  return MEMORY[0x24BDF3D78]();
}

uint64_t sub_23BDCDB44()
{
  return MEMORY[0x24BDF3E08]();
}

uint64_t sub_23BDCDB50()
{
  return MEMORY[0x24BDF3E70]();
}

uint64_t sub_23BDCDB5C()
{
  return MEMORY[0x24BDF3F18]();
}

uint64_t sub_23BDCDB68()
{
  return MEMORY[0x24BDF3F28]();
}

uint64_t sub_23BDCDB74()
{
  return MEMORY[0x24BDF3F58]();
}

uint64_t sub_23BDCDB80()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_23BDCDB8C()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t sub_23BDCDB98()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t sub_23BDCDBA4()
{
  return MEMORY[0x24BDF4340]();
}

uint64_t sub_23BDCDBB0()
{
  return MEMORY[0x24BDF4398]();
}

uint64_t sub_23BDCDBBC()
{
  return MEMORY[0x24BDF4470]();
}

uint64_t sub_23BDCDBC8()
{
  return MEMORY[0x24BDF4480]();
}

uint64_t sub_23BDCDBD4()
{
  return MEMORY[0x24BDF46D8]();
}

uint64_t sub_23BDCDBE0()
{
  return MEMORY[0x24BDF46E0]();
}

uint64_t sub_23BDCDBEC()
{
  return MEMORY[0x24BDF4728]();
}

uint64_t sub_23BDCDBF8()
{
  return MEMORY[0x24BDF4730]();
}

uint64_t sub_23BDCDC04()
{
  return MEMORY[0x24BDF48E8]();
}

uint64_t sub_23BDCDC10()
{
  return MEMORY[0x24BDF49A0]();
}

uint64_t sub_23BDCDC1C()
{
  return MEMORY[0x24BDF49C8]();
}

uint64_t sub_23BDCDC28()
{
  return MEMORY[0x24BDF4A28]();
}

uint64_t sub_23BDCDC34()
{
  return MEMORY[0x24BDF4E28]();
}

uint64_t sub_23BDCDC40()
{
  return MEMORY[0x24BDF4E58]();
}

uint64_t sub_23BDCDC4C()
{
  return MEMORY[0x24BDF4EF0]();
}

uint64_t sub_23BDCDC58()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_23BDCDC64()
{
  return MEMORY[0x24BDF4F20]();
}

uint64_t sub_23BDCDC70()
{
  return MEMORY[0x24BDF53F0]();
}

uint64_t sub_23BDCDC7C()
{
  return MEMORY[0x24BDF5418]();
}

uint64_t sub_23BDCDC88()
{
  return MEMORY[0x24BE2B3C0]();
}

uint64_t sub_23BDCDC94()
{
  return MEMORY[0x24BE2B3D8]();
}

uint64_t sub_23BDCDCA0()
{
  return MEMORY[0x24BE2B3E8]();
}

uint64_t sub_23BDCDCAC()
{
  return MEMORY[0x24BE2B460]();
}

uint64_t sub_23BDCDCB8()
{
  return MEMORY[0x24BE2B560]();
}

uint64_t sub_23BDCDCC4()
{
  return MEMORY[0x24BE2B588]();
}

uint64_t sub_23BDCDCD0()
{
  return MEMORY[0x24BE2B598]();
}

uint64_t sub_23BDCDCDC()
{
  return MEMORY[0x24BE2B5A8]();
}

uint64_t sub_23BDCDCE8()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_23BDCDCF4()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23BDCDD00()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23BDCDD0C()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_23BDCDD18()
{
  return MEMORY[0x24BDCF908]();
}

uint64_t sub_23BDCDD24()
{
  return MEMORY[0x24BDCF910]();
}

uint64_t sub_23BDCDD30()
{
  return MEMORY[0x24BDCF930]();
}

uint64_t sub_23BDCDD3C()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t sub_23BDCDD48()
{
  return MEMORY[0x24BDCF948]();
}

uint64_t sub_23BDCDD54()
{
  return MEMORY[0x24BDCF968]();
}

uint64_t sub_23BDCDD60()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_23BDCDD6C()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23BDCDD78()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23BDCDD84()
{
  return MEMORY[0x24BE37C28]();
}

uint64_t sub_23BDCDD90()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23BDCDD9C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23BDCDDA8()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23BDCDDB4()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23BDCDDC0()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_23BDCDDCC()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23BDCDDD8()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t sub_23BDCDDE4()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_23BDCDDF0()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_23BDCDDFC()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t sub_23BDCDE08()
{
  return MEMORY[0x24BEE6970]();
}

uint64_t sub_23BDCDE14()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_23BDCDE20()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t sub_23BDCDE2C()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23BDCDE38()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23BDCDE44()
{
  return MEMORY[0x24BE8DCC8]();
}

uint64_t sub_23BDCDE50()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23BDCDE5C()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23BDCDE68()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23BDCDE74()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23BDCDE80()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23BDCDE8C()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23BDCDE98()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23BDCDEA4()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23BDCDEB0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23BDCDEBC()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23BDCDEC8()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23BDCDED4()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23BDCDEE0()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23BDCDEEC()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23BDCDEF8()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23BDCDF04()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23BDCDF10()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23BDCDF1C()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23BDCDF28()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23BDCDF34()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23BDCDF40()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_23BDCDF4C()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_23BDCDF58()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23BDCDF64()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23BDCDF70()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23BDCDF7C()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_23BDCDF88()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_23BDCDF94()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23BDCDFA0()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23BDCDFAC()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23BDCDFB8()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_23BDCDFC4()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_23BDCDFD0()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23BDCDFDC()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23BDCDFE8()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23BDCDFF4()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_23BDCE000()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_23BDCE00C()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23BDCE018()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23BDCE024()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23BDCE030()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23BDCE03C()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23BDCE048()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_23BDCE054()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23BDCE060()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23BDCE06C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23BDCE078()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23BDCE084()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23BDCE090()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23BDCE09C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23BDCE0A8()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23BDCE0B4()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23BDCE0C0()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23BDCE0CC()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23BDCE0D8()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23BDCE0E4()
{
  return MEMORY[0x24BEE4A10]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

